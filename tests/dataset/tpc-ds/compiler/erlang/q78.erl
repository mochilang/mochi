#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:26:07Z
% q78.erl - generated from q78.mochi

main(_) ->
    Ss = [#{ss_sold_year => 1998, ss_item_sk => 1, ss_customer_sk => 1, ss_qty => 10, ss_wc => 50, ss_sp => 100}],
    Ws = [#{ws_sold_year => 1998, ws_item_sk => 1, ws_customer_sk => 1, ws_qty => 5, ws_wc => 25, ws_sp => 50}],
    Cs = [#{cs_sold_year => 1998, cs_item_sk => 1, cs_customer_sk => 1, cs_qty => 3, cs_wc => 15, cs_sp => 30}],
    Result = [#{ss_sold_year => mochi_get(ss_sold_year, S), ss_item_sk => mochi_get(ss_item_sk, S), ss_customer_sk => mochi_get(ss_customer_sk, S), ratio => (mochi_get(ss_qty, S) / ((((case (W == undefined) of true -> 0; _ -> mochi_get(ws_qty, W) end)) + ((case (C == undefined) of true -> 0; _ -> mochi_get(cs_qty, C) end))))), store_qty => mochi_get(ss_qty, S), store_wholesale_cost => mochi_get(ss_wc, S), store_sales_price => mochi_get(ss_sp, S), other_chan_qty => (((case (W == undefined) of true -> 0; _ -> mochi_get(ws_qty, W) end)) + ((case (C == undefined) of true -> 0; _ -> mochi_get(cs_qty, C) end))), other_chan_wholesale_cost => (((case (W == undefined) of true -> 0; _ -> mochi_get(ws_wc, W) end)) + ((case (C == undefined) of true -> 0; _ -> mochi_get(cs_wc, C) end))), other_chan_sales_price => (((case (W == undefined) of true -> 0; _ -> mochi_get(ws_sp, W) end)) + ((case (C == undefined) of true -> 0; _ -> mochi_get(cs_sp, C) end)))} || S <- Ss, {S, W} <- mochi_left_join_item(S, Ws, fun(S, W) -> (((mochi_get(ws_sold_year, W) == mochi_get(ss_sold_year, S)) andalso (mochi_get(ws_item_sk, W) == mochi_get(ss_item_sk, S))) andalso (mochi_get(ws_customer_sk, W) == mochi_get(ss_customer_sk, S))) end), {S, C} <- mochi_left_join_item(S, Cs, fun(S, C) -> (((mochi_get(cs_sold_year, C) == mochi_get(ss_sold_year, S)) andalso (mochi_get(cs_item_sk, C) == mochi_get(ss_item_sk, S))) andalso (mochi_get(cs_customer_sk, C) == mochi_get(ss_customer_sk, S))) end), ((((((case (W == undefined) of true -> 0; _ -> mochi_get(ws_qty, W) end)) > 0) orelse (((case (C == undefined) of true -> 0; _ -> mochi_get(cs_qty, C) end)) > 0))) andalso (mochi_get(ss_sold_year, S) == 1998))],
    mochi_json(Result),
    (case (Result == [#{ss_sold_year => 1998, ss_item_sk => 1, ss_customer_sk => 1, ratio => 1.25, store_qty => 10, store_wholesale_cost => 50, store_sales_price => 100, other_chan_qty => 8, other_chan_wholesale_cost => 40, other_chan_sales_price => 80}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_left_join_item(A, B, Fun) ->
    Matches = [ {A, J} || J <- B, Fun(A, J) ],
    case Matches of
        [] -> [{A, undefined}];
        _ -> Matches
    end.

mochi_left_join(L, R, Fun) ->
    lists:flatmap(fun(X) -> mochi_left_join_item(X, R, Fun) end, L).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
