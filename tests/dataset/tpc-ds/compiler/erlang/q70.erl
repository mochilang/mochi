#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:51Z
% q70.erl - generated from q70.mochi

main(_) ->
    Store = [#{s_store_sk => 1, s_state => "CA", s_county => "Orange"}, #{s_store_sk => 2, s_state => "CA", s_county => "Orange"}, #{s_store_sk => 3, s_state => "TX", s_county => "Travis"}],
    Date_dim = [#{d_date_sk => 1, d_month_seq => 1200}, #{d_date_sk => 2, d_month_seq => 1201}],
    Store_sales = [#{ss_sold_date_sk => 1, ss_store_sk => 1, ss_net_profit => 10}, #{ss_sold_date_sk => 1, ss_store_sk => 2, ss_net_profit => 5}, #{ss_sold_date_sk => 2, ss_store_sk => 3, ss_net_profit => 20}],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(state, Key0), maps:get(county, Key0)], #{s_state => maps:get(state, Key0), s_county => maps:get(county, Key0), total_sum => lists:sum([maps:get(ss_net_profit, maps:get(ss, X)) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{state => maps:get(s_state, S), county => maps:get(s_county, S)}, #{ss => Ss, d => D, s => S}} || Ss <- Store_sales, D <- Date_dim, S <- Store, (maps:get(d_date_sk, D) == maps:get(ss_sold_date_sk, Ss)), (maps:get(s_store_sk, S) == maps:get(ss_store_sk, Ss)), ((maps:get(d_month_seq, D) >= 1200) andalso (maps:get(d_month_seq, D) =< (1200 + 11)))]))])],
    mochi_json(Result),
    (case (Result == [#{s_state => "CA", s_county => "Orange", total_sum => 15}, #{s_state => "TX", s_county => "Travis", total_sum => 20}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
