#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:15Z
% q8.erl - generated from q8.mochi

main(_) ->
    Store_sales = [#{ss_store_sk => 1, ss_sold_date_sk => 1, ss_net_profit => 10}],
    Date_dim = [#{d_date_sk => 1, d_qoy => 1, d_year => 1998}],
    Store = [#{s_store_sk => 1, s_store_name => "Store1", s_zip => "12345"}],
    Customer_address = [#{ca_address_sk => 1, ca_zip => "12345"}],
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1, c_preferred_cust_flag => "Y"}],
    reverse(substr("zip", 0, 2)),
    Zip_list = ["12345"],
    Result = [V || {_, V} <- lists:keysort(1, [{Key0, #{s_store_name => Key0, net_profit => lists:sum([maps:get(ss_net_profit, maps:get(ss, X)) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(s_store_name, S), #{ss => Ss, d => D, s => S, ca => Ca, c => C}} || Ss <- Store_sales, D <- Date_dim, S <- Store, Ca <- Customer_address, C <- Customer, (((maps:get(ss_sold_date_sk, Ss) == maps:get(d_date_sk, D)) andalso (maps:get(d_qoy, D) == 1)) andalso (maps:get(d_year, D) == 1998)), (maps:get(ss_store_sk, Ss) == maps:get(s_store_sk, S)), (substr(maps:get(s_zip, S), 0, 2) == substr(maps:get(ca_zip, Ca), 0, 2)), ((maps:get(ca_address_sk, Ca) == maps:get(c_current_addr_sk, C)) andalso (maps:get(c_preferred_cust_flag, C) == "Y")), lists:member(substr(maps:get(ca_zip, Ca), 0, 5), Zip_list)]))])],
    mochi_json(Result),
    (case (Result == [#{s_store_name => "Store1", net_profit => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
