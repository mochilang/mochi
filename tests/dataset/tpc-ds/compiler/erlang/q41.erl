#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:52Z
% q41.erl - generated from q41.mochi

main(_) ->
    Item = [#{product_name => "Blue Shirt", manufact_id => 100, manufact => 1, category => "Women", color => "blue", units => "pack", size => "M"}, #{product_name => "Red Dress", manufact_id => 120, manufact => 1, category => "Women", color => "red", units => "pack", size => "M"}, #{product_name => "Pants", manufact_id => 200, manufact => 2, category => "Men", color => "black", units => "pair", size => "L"}],
    Result = [V || {_, V} <- lists:keysort(1, [{mochi_get(product_name, I1), mochi_get(product_name, I1)} || I1 <- Item, (((mochi_get(manufact_id, I1) >= 100) andalso (mochi_get(manufact_id, I1) =< (100 + 40))) andalso ((case [I2 || I2 <- Item, ((mochi_get(manufact, I2) == mochi_get(manufact, I1)) andalso (mochi_get(category, I2) == mochi_get(category, I1)))] of #{items := It} -> length(It); _ -> length([I2 || I2 <- Item, ((mochi_get(manufact, I2) == mochi_get(manufact, I1)) andalso (mochi_get(category, I2) == mochi_get(category, I1)))]) end) > 1))])],
    mochi_json(Result),
    (case (Result == ["Blue Shirt", "Red Dress"]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
