#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:32:01Z
% q82.erl - generated from q82.mochi

main(_) ->
    Item = [#{id => 1}, #{id => 2}, #{id => 3}],
    Inventory = [#{item => 1, qty => 20}, #{item => 1, qty => 22}, #{item => 1, qty => 5}, #{item => 2, qty => 30}, #{item => 2, qty => 5}, #{item => 3, qty => 10}],
    Store_sales = [#{item => 1}, #{item => 2}],
    Result0 = 0,
    lists:foreach(fun(Inv) -> lists:foreach(fun(S) -> (case (maps:get(item, Inv) == maps:get(item, S)) of true -> Result1 = (Result0 + maps:get(qty, Inv)); _ -> ok end) end, Store_sales) end, Inventory),
    mochi_json(Result1),
    (case (Result1 == 82) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
