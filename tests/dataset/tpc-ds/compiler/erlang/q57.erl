#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:40Z
% q57.erl - generated from q57.mochi

abs(X) ->
    case (X >= 0) of true -> X; _ -> -X end.

main(_) ->
    Catalog_sales = [#{item => 1, call => 1, date => 1, price => 20}, #{item => 1, call => 1, date => 2, price => 20}, #{item => 1, call => 1, date => 3, price => 40}],
    Item = [#{i_item_sk => 1, i_category => "A", i_brand => "B"}],
    Call_center = [#{cc_call_center_sk => 1, cc_name => "C1"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 11}, #{d_date_sk => 2, d_year => 2000, d_moy => 12}, #{d_date_sk => 3, d_year => 2001, d_moy => 1}],
    Grouped = [#{cat => maps:get(cat, Key0), call => maps:get(call, Key0), year => maps:get(year, Key0), sum_sales => lists:sum([maps:get(price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{cat => maps:get(i_category, I), call => maps:get(cc_name, Cc), year => maps:get(d_year, D)}, #{cs => Cs, i => I, d => D, cc => Cc}} || Cs <- Catalog_sales, I <- Item, D <- Date_dim, Cc <- Call_center, (maps:get(item, Cs) == maps:get(i_item_sk, I)), (maps:get(date, Cs) == maps:get(d_date_sk, D)), (maps:get(call, Cs) == maps:get(cc_call_center_sk, Cc))]))],
    Avg_by_year = [#{cat => maps:get(cat, Key1), call => maps:get(call, Key1), avg_sales => (lists:sum([maps:get(sum_sales, X) || X <- Val1]) / length([maps:get(sum_sales, X) || X <- Val1]))} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{cat => maps:get(cat, G), call => maps:get(call, G)}, G} || G <- Grouped]))],
    Result = [#{i_category => maps:get(cat, G), sum_sales => maps:get(sum_sales, G)} || G <- Grouped, A <- Avg_by_year, ((maps:get(cat, G) == maps:get(cat, A)) andalso (maps:get(call, G) == maps:get(call, A))), (((maps:get(year, G) == 2001) andalso (maps:get(avg_sales, A) > 0)) andalso ((abs((maps:get(sum_sales, G) - maps:get(avg_sales, A))) / maps:get(avg_sales, A)) > 0.1))],
    mochi_json(Result),
    (case (Result == []) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
