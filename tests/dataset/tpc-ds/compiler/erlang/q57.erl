#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q57.erl - generated from q57.mochi

abs(X) ->
    case (X >= 0) of true -> X; _ -> -X end.

main(_) ->
    Catalog_sales = [#{item => 1, call => 1, date => 1, price => 20}, #{item => 1, call => 1, date => 2, price => 20}, #{item => 1, call => 1, date => 3, price => 40}],
    Item = [#{i_item_sk => 1, i_category => "A", i_brand => "B"}],
    Call_center = [#{cc_call_center_sk => 1, cc_name => "C1"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 11}, #{d_date_sk => 2, d_year => 2000, d_moy => 12}, #{d_date_sk => 3, d_year => 2001, d_moy => 1}],
    Grouped = [#{cat => mochi_get(cat, Key0), call => mochi_get(call, Key0), year => mochi_get(year, Key0), sum_sales => lists:sum([mochi_get(price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{cat => mochi_get(i_category, I), call => mochi_get(cc_name, Cc), year => mochi_get(d_year, D)}, #{cs => Cs, i => I, d => D, cc => Cc}} || Cs <- Catalog_sales, I <- Item, D <- Date_dim, Cc <- Call_center, (mochi_get(item, Cs) == mochi_get(i_item_sk, I)), (mochi_get(date, Cs) == mochi_get(d_date_sk, D)), (mochi_get(call, Cs) == mochi_get(cc_call_center_sk, Cc))]))],
    Avg_by_year = [#{cat => mochi_get(cat, Key1), call => mochi_get(call, Key1), avg_sales => (lists:sum([mochi_get(sum_sales, X) || X <- Val1]) / length([mochi_get(sum_sales, X) || X <- Val1]))} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{cat => mochi_get(cat, G), call => mochi_get(call, G)}, G} || G <- Grouped]))],
    Result = [#{i_category => mochi_get(cat, G), sum_sales => mochi_get(sum_sales, G)} || G <- Grouped, A <- Avg_by_year, ((mochi_get(cat, G) == mochi_get(cat, A)) andalso (mochi_get(call, G) == mochi_get(call, A))), (((mochi_get(year, G) == 2001) andalso (mochi_get(avg_sales, A) > 0)) andalso ((abs((mochi_get(sum_sales, G) - mochi_get(avg_sales, A))) / mochi_get(avg_sales, A)) > 0.1))],
    mochi_json(Result),
    (case (Result == []) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
