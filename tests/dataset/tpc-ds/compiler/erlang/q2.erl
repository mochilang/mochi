#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q2.erl - generated from q2.mochi

main(_) ->
    Web_sales = [#{ws_sold_date_sk => 1, ws_ext_sales_price => 5, ws_sold_date_name => "Sunday"}, #{ws_sold_date_sk => 2, ws_ext_sales_price => 5, ws_sold_date_name => "Monday"}, #{ws_sold_date_sk => 8, ws_ext_sales_price => 10, ws_sold_date_name => "Sunday"}, #{ws_sold_date_sk => 9, ws_ext_sales_price => 10, ws_sold_date_name => "Monday"}],
    Catalog_sales = [#{cs_sold_date_sk => 1, cs_ext_sales_price => 5, cs_sold_date_name => "Sunday"}, #{cs_sold_date_sk => 2, cs_ext_sales_price => 5, cs_sold_date_name => "Monday"}, #{cs_sold_date_sk => 8, cs_ext_sales_price => 10, cs_sold_date_name => "Sunday"}, #{cs_sold_date_sk => 9, cs_ext_sales_price => 10, cs_sold_date_name => "Monday"}],
    Date_dim = [#{d_date_sk => 1, d_week_seq => 1, d_day_name => "Sunday", d_year => 1998}, #{d_date_sk => 2, d_week_seq => 1, d_day_name => "Monday", d_year => 1998}, #{d_date_sk => 8, d_week_seq => 54, d_day_name => "Sunday", d_year => 1999}, #{d_date_sk => 9, d_week_seq => 54, d_day_name => "Monday", d_year => 1999}],
    Wscs = (([#{sold_date_sk => mochi_get(ws_sold_date_sk, Ws), sales_price => mochi_get(ws_ext_sales_price, Ws), day => mochi_get(ws_sold_date_name, Ws)} || Ws <- Web_sales]) ++ ([#{sold_date_sk => mochi_get(cs_sold_date_sk, Cs), sales_price => mochi_get(cs_ext_sales_price, Cs), day => mochi_get(cs_sold_date_name, Cs)} || Cs <- Catalog_sales])),
    Wswscs = [#{d_week_seq => mochi_get(week_seq, Key0), sun_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Sunday")]), mon_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Monday")]), tue_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Tuesday")]), wed_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Wednesday")]), thu_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Thursday")]), fri_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Friday")]), sat_sales => lists:sum([mochi_get(sales_price, X) || X <- Val0, (mochi_get(day, X) == "Saturday")])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{week_seq => mochi_get(d_week_seq, D)}, #{w => W, d => D}} || W <- Wscs, D <- Date_dim, (mochi_get(sold_date_sk, W) == mochi_get(d_date_sk, D))]))],
    Year1 = [W || W <- Wswscs, (mochi_get(d_week_seq, W) == 1)],
    Year2 = [W || W <- Wswscs, (mochi_get(d_week_seq, W) == 54)],
    Result = [#{d_week_seq1 => mochi_get(d_week_seq, Y), sun_ratio => (mochi_get(sun_sales, Y) / mochi_get(sun_sales, Z)), mon_ratio => (mochi_get(mon_sales, Y) / mochi_get(mon_sales, Z))} || Y <- Year1, Z <- Year2, (mochi_get(d_week_seq, Y) == (mochi_get(d_week_seq, Z) - 53))],
    mochi_json(Result),
    (case (Result == [#{d_week_seq1 => 1, sun_ratio => 0.5, mon_ratio => 0.5}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
