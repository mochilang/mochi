#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:59Z
% q96.erl - generated from q96.mochi

main(_) ->
    Store_sales = [#{ss_sold_time_sk => 1, ss_hdemo_sk => 1, ss_store_sk => 1}, #{ss_sold_time_sk => 1, ss_hdemo_sk => 1, ss_store_sk => 1}, #{ss_sold_time_sk => 2, ss_hdemo_sk => 1, ss_store_sk => 1}],
    Household_demographics = [#{hd_demo_sk => 1, hd_dep_count => 3}],
    Time_dim = [#{t_time_sk => 1, t_hour => 20, t_minute => 35}, #{t_time_sk => 2, t_hour => 20, t_minute => 45}],
    Store = [#{s_store_sk => 1, s_store_name => "ese"}],
    Result = (case [Ss || Ss <- Store_sales, Hd <- Household_demographics, T <- Time_dim, S <- Store, (maps:get(ss_hdemo_sk, Ss) == maps:get(hd_demo_sk, Hd)), (maps:get(ss_sold_time_sk, Ss) == maps:get(t_time_sk, T)), (maps:get(ss_store_sk, Ss) == maps:get(s_store_sk, S)), ((((maps:get(t_hour, T) == 20) andalso (maps:get(t_minute, T) >= 30)) andalso (maps:get(hd_dep_count, Hd) == 3)) andalso (maps:get(s_store_name, S) == "ese"))] of #{items := It} -> length(It); _ -> length([Ss || Ss <- Store_sales, Hd <- Household_demographics, T <- Time_dim, S <- Store, (maps:get(ss_hdemo_sk, Ss) == maps:get(hd_demo_sk, Hd)), (maps:get(ss_sold_time_sk, Ss) == maps:get(t_time_sk, T)), (maps:get(ss_store_sk, Ss) == maps:get(s_store_sk, S)), ((((maps:get(t_hour, T) == 20) andalso (maps:get(t_minute, T) >= 30)) andalso (maps:get(hd_dep_count, Hd) == 3)) andalso (maps:get(s_store_name, S) == "ese"))]) end),
    mochi_json(Result),
    (case (Result == 3) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
