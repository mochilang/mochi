#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:18Z
% q14.erl - generated from q14.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_list_price => 10, ss_quantity => 2, ss_sold_date_sk => 1}, #{ss_item_sk => 1, ss_list_price => 20, ss_quantity => 3, ss_sold_date_sk => 2}],
    Catalog_sales = [#{cs_item_sk => 1, cs_list_price => 10, cs_quantity => 2, cs_sold_date_sk => 1}],
    Web_sales = [#{ws_item_sk => 1, ws_list_price => 30, ws_quantity => 1, ws_sold_date_sk => 1}],
    Item = [#{i_item_sk => 1, i_brand_id => 1, i_class_id => 1, i_category_id => 1}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 12}, #{d_date_sk => 2, d_year => 2002, d_moy => 11}],
    Cross_items = [#{ss_item_sk => 1}],
    Avg_sales = (lists:sum([20, 20, 30]) / length([20, 20, 30])),
    Store_filtered = [#{channel => "store", sales => lists:sum([(maps:get(ss_quantity, X) * maps:get(ss_list_price, X)) || X <- Val0]), number_sales => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{brand_id => 1, class_id => 1, category_id => 1}, #{ss => Ss, d => D}} || Ss <- Store_sales, D <- Date_dim, (((maps:get(ss_sold_date_sk, Ss) == maps:get(d_date_sk, D)) andalso (maps:get(d_year, D) == 2002)) andalso (maps:get(d_moy, D) == 11)), lists:member(maps:get(ss_item_sk, Ss), ([maps:get(ss_item_sk, Ci) || Ci <- Cross_items]))]))],
    Result = [#{channel => maps:get(channel, R), i_brand_id => 1, i_class_id => 1, i_category_id => 1, sales => maps:get(sales, R), number_sales => maps:get(number_sales, R)} || R <- Store_filtered, (maps:get(sales, R) > Avg_sales)],
    mochi_json(Result),
    (case (Result == [#{channel => "store", i_brand_id => 1, i_class_id => 1, i_category_id => 1, sales => 60, number_sales => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
