#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:10Z
% q22.erl - generated from q22.mochi

main(_) ->
    Inventory = [#{inv_item_sk => 1, inv_date_sk => 1, inv_quantity_on_hand => 10}, #{inv_item_sk => 1, inv_date_sk => 2, inv_quantity_on_hand => 20}, #{inv_item_sk => 1, inv_date_sk => 3, inv_quantity_on_hand => 10}, #{inv_item_sk => 1, inv_date_sk => 4, inv_quantity_on_hand => 20}, #{inv_item_sk => 2, inv_date_sk => 1, inv_quantity_on_hand => 50}],
    Date_dim = [#{d_date_sk => 1, d_month_seq => 0}, #{d_date_sk => 2, d_month_seq => 1}, #{d_date_sk => 3, d_month_seq => 2}, #{d_date_sk => 4, d_month_seq => 3}],
    Item = [#{i_item_sk => 1, i_product_name => "Prod1", i_brand => "Brand1", i_class => "Class1", i_category => "Cat1"}, #{i_item_sk => 2, i_product_name => "Prod2", i_brand => "Brand2", i_class => "Class2", i_category => "Cat2"}],
    Qoh = [#{i_product_name => maps:get(product_name, Key0), i_brand => maps:get(brand, Key0), i_class => maps:get(class, Key0), i_category => maps:get(category, Key0), qoh => (lists:sum([maps:get(inv_quantity_on_hand, X) || X <- Val0]) / length([maps:get(inv_quantity_on_hand, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{product_name => maps:get(i_product_name, I), brand => maps:get(i_brand, I), class => maps:get(i_class, I), category => maps:get(i_category, I)}, #{inv => Inv, d => D, i => I}} || Inv <- Inventory, D <- Date_dim, I <- Item, (maps:get(inv_date_sk, Inv) == maps:get(d_date_sk, D)), (maps:get(inv_item_sk, Inv) == maps:get(i_item_sk, I)), ((maps:get(d_month_seq, D) >= 0) andalso (maps:get(d_month_seq, D) =< 11))]))],
    mochi_json(Qoh),
    (case (Qoh == [#{i_product_name => "Prod1", i_brand => "Brand1", i_class => "Class1", i_category => "Cat1", qoh => 15}, #{i_product_name => "Prod2", i_brand => "Brand2", i_class => "Class2", i_category => "Cat2", qoh => 50}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
