#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:32Z
% q42.erl - generated from q42.mochi

main(_) ->
    Store_sales = [#{sold_date_sk => 1, item_sk => 1, ext_sales_price => 10}, #{sold_date_sk => 1, item_sk => 2, ext_sales_price => 20}, #{sold_date_sk => 2, item_sk => 1, ext_sales_price => 15}],
    Item = [#{i_item_sk => 1, i_manager_id => 1, i_category_id => 100, i_category => "CatA"}, #{i_item_sk => 2, i_manager_id => 1, i_category_id => 200, i_category => "CatB"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2020, d_moy => 5}, #{d_date_sk => 2, d_year => 2021, d_moy => 5}],
    Records = [#{d_year => maps:get(d_year, Dt), i_category_id => maps:get(i_category_id, It), i_category => maps:get(i_category, It), price => maps:get(ext_sales_price, Ss)} || Dt <- Date_dim, Ss <- Store_sales, It <- Item, (maps:get(sold_date_sk, Ss) == maps:get(d_date_sk, Dt)), (maps:get(item_sk, Ss) == maps:get(i_item_sk, It)), (((maps:get(i_manager_id, It) == 1) andalso (maps:get(d_moy, Dt) == 5)) andalso (maps:get(d_year, Dt) == 2020))],
    Grouped = [#{d_year => maps:get(d_year, Key0), i_category_id => maps:get(i_category_id, Key0), i_category => maps:get(i_category, Key0), sum_ss_ext_sales_price => lists:sum([maps:get(price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{d_year => maps:get(d_year, R), i_category_id => maps:get(i_category_id, R), i_category => maps:get(i_category, R)}, R} || R <- Records]))],
    Base = [V || {_, V} <- lists:keysort(1, [{-maps:get(sum_ss_ext_sales_price, G), G} || G <- Grouped])],
    Result = Base,
    mochi_json(Result),
    (case (Result == [#{d_year => 2020, i_category_id => 200, i_category => "CatB", sum_ss_ext_sales_price => 20}, #{d_year => 2020, i_category_id => 100, i_category => "CatA", sum_ss_ext_sales_price => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
