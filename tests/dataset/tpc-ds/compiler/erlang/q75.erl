#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:49Z
% q75.erl - generated from q75.mochi

main(_) ->
    Date_dim = [#{d_date_sk => 1, d_year => 2000}, #{d_date_sk => 2, d_year => 2001}],
    Store_sales = [#{ss_item_sk => 1, ss_quantity => 50, ss_sales_price => 500, ss_sold_date_sk => 1}, #{ss_item_sk => 1, ss_quantity => 40, ss_sales_price => 400, ss_sold_date_sk => 2}],
    Web_sales = [#{ws_item_sk => 1, ws_quantity => 30, ws_sales_price => 300, ws_sold_date_sk => 1}, #{ws_item_sk => 1, ws_quantity => 25, ws_sales_price => 250, ws_sold_date_sk => 2}],
    Catalog_sales = [#{cs_item_sk => 1, cs_quantity => 20, cs_sales_price => 200, cs_sold_date_sk => 1}, #{cs_item_sk => 1, cs_quantity => 15, cs_sales_price => 150, cs_sold_date_sk => 2}],
    Item = [#{i_item_sk => 1, i_brand_id => 1, i_class_id => 2, i_category_id => 3, i_manufact_id => 4, i_category => "Electronics"}],
    Sales_detail = concat([#{d_year => maps:get(d_year, D), i_item_sk => maps:get(ss_item_sk, Ss), quantity => maps:get(ss_quantity, Ss), amount => maps:get(ss_sales_price, Ss)} || Ss <- Store_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(ss_sold_date_sk, Ss))], [#{d_year => maps:get(d_year, D), i_item_sk => maps:get(ws_item_sk, Ws), quantity => maps:get(ws_quantity, Ws), amount => maps:get(ws_sales_price, Ws)} || Ws <- Web_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(ws_sold_date_sk, Ws))], [#{d_year => maps:get(d_year, D), i_item_sk => maps:get(cs_item_sk, Cs), quantity => maps:get(cs_quantity, Cs), amount => maps:get(cs_sales_price, Cs)} || Cs <- Catalog_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(cs_sold_date_sk, Cs))]),
    All_sales = [#{d_year => maps:get(year, Key0), i_brand_id => maps:get(brand_id, Key0), i_class_id => maps:get(class_id, Key0), i_category_id => maps:get(category_id, Key0), i_manufact_id => maps:get(manuf_id, Key0), sales_cnt => lists:sum([maps:get(quantity, maps:get(sd, X)) || X <- Val0]), sales_amt => lists:sum([maps:get(amount, maps:get(sd, X)) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{year => maps:get(d_year, Sd), brand_id => maps:get(i_brand_id, I), class_id => maps:get(i_class_id, I), category_id => maps:get(i_category_id, I), manuf_id => maps:get(i_manufact_id, I)}, #{sd => Sd, i => I}} || Sd <- Sales_detail, I <- Item, (maps:get(i_item_sk, I) == maps:get(i_item_sk, Sd)), (maps:get(i_category, I) == "Electronics")]))],
    Prev_yr = first([A || A <- All_sales, (maps:get(d_year, A) == 2000)]),
    Curr_yr = first([A || A <- All_sales, (maps:get(d_year, A) == 2001)]),
    Result = (case (((maps:get(sales_cnt, Curr_yr) / maps:get(sales_cnt, Prev_yr))) < 0.9) of true -> [#{prev_year => maps:get(d_year, Prev_yr), year => maps:get(d_year, Curr_yr), i_brand_id => maps:get(i_brand_id, Curr_yr), i_class_id => maps:get(i_class_id, Curr_yr), i_category_id => maps:get(i_category_id, Curr_yr), i_manufact_id => maps:get(i_manufact_id, Curr_yr), prev_yr_cnt => maps:get(sales_cnt, Prev_yr), curr_yr_cnt => maps:get(sales_cnt, Curr_yr), sales_cnt_diff => (maps:get(sales_cnt, Curr_yr) - maps:get(sales_cnt, Prev_yr)), sales_amt_diff => (maps:get(sales_amt, Curr_yr) - maps:get(sales_amt, Prev_yr))}]; _ -> [] end),
    mochi_json(Result),
    (case (Result == [#{prev_year => 2000, year => 2001, i_brand_id => 1, i_class_id => 2, i_category_id => 3, i_manufact_id => 4, prev_yr_cnt => 100, curr_yr_cnt => 80, sales_cnt_diff => -20, sales_amt_diff => -200}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
