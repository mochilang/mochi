#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q44.erl - generated from q44.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_store_sk => 1, ss_net_profit => 5}, #{ss_item_sk => 1, ss_store_sk => 1, ss_net_profit => 5}, #{ss_item_sk => 2, ss_store_sk => 1, ss_net_profit => -1}],
    Item = [#{i_item_sk => 1, i_product_name => "ItemA"}, #{i_item_sk => 2, i_product_name => "ItemB"}],
    Grouped_base = ([#{item_sk => Key0, avg_profit => (lists:sum([mochi_get(ss_net_profit, X) || X <- Val0]) / length([mochi_get(ss_net_profit, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_item_sk, Ss), Ss} || Ss <- Store_sales]))]),
    Grouped = Grouped_base,
    Best = first([V || {_, V} <- lists:keysort(1, [{-mochi_get(avg_profit, X), X} || X <- Grouped])]),
    Worst = first([V || {_, V} <- lists:keysort(1, [{mochi_get(avg_profit, X), X} || X <- Grouped])]),
    Best_name = first([mochi_get(i_product_name, I) || I <- Item, (mochi_get(i_item_sk, I) == mochi_get(item_sk, Best))]),
    Worst_name = first([mochi_get(i_product_name, I) || I <- Item, (mochi_get(i_item_sk, I) == mochi_get(item_sk, Worst))]),
    Result = #{best_performing => Best_name, worst_performing => Worst_name},
    mochi_json(Result),
    (case (Result == #{best_performing => "ItemA", worst_performing => "ItemB"}) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
