#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:36Z
% q50.erl - generated from q50.mochi

main(_) ->
    Store_sales = [#{ticket => 1, item => 101, sold => 1, customer => 1, store => 1}, #{ticket => 2, item => 102, sold => 1, customer => 1, store => 1}, #{ticket => 3, item => 103, sold => 1, customer => 1, store => 1}, #{ticket => 4, item => 104, sold => 1, customer => 1, store => 1}, #{ticket => 5, item => 105, sold => 1, customer => 1, store => 1}],
    Store_returns = [#{ticket => 1, item => 101, returned => 16, customer => 1}, #{ticket => 2, item => 102, returned => 46, customer => 1}, #{ticket => 3, item => 103, returned => 76, customer => 1}, #{ticket => 4, item => 104, returned => 111, customer => 1}, #{ticket => 5, item => 105, returned => 151, customer => 1}],
    Date_dim = [#{d_date_sk => 1, d_year => 2001, d_moy => 7}, #{d_date_sk => 16, d_year => 2001, d_moy => 8}, #{d_date_sk => 46, d_year => 2001, d_moy => 8}, #{d_date_sk => 76, d_year => 2001, d_moy => 8}, #{d_date_sk => 111, d_year => 2001, d_moy => 8}, #{d_date_sk => 151, d_year => 2001, d_moy => 8}],
    Store = [#{s_store_sk => 1, s_store_name => "Main", s_company_id => 1, s_street_number => "1", s_street_name => "Main", s_street_type => "St", s_suite_number => "100", s_city => "City", s_county => "County", s_state => "CA", s_zip => "12345"}],
    Joined = [#{s => S, diff => (maps:get(returned, Sr) - maps:get(sold, Ss))} || Ss <- Store_sales, Sr <- Store_returns, D1 <- Date_dim, D2 <- Date_dim, S <- Store, (((maps:get(ticket, Ss) == maps:get(ticket, Sr)) andalso (maps:get(item, Ss) == maps:get(item, Sr))) andalso (maps:get(customer, Ss) == maps:get(customer, Sr))), (maps:get(sold, Ss) == maps:get(d_date_sk, D1)), (((maps:get(returned, Sr) == maps:get(d_date_sk, D2)) andalso (maps:get(d_year, D2) == 2001)) andalso (maps:get(d_moy, D2) == 8)), (maps:get(store, Ss) == maps:get(s_store_sk, S))],
    Result = [#{s_store_name => maps:get(s_store_name, Key0), d30 => (case [1 || X <- Val0, (maps:get(diff, X) =< 30)] of #{items := It} -> length(It); _ -> length([1 || X <- Val0, (maps:get(diff, X) =< 30)]) end), d31_60 => (case [1 || X <- Val0, ((maps:get(diff, X) > 30) andalso (maps:get(diff, X) =< 60))] of #{items := It} -> length(It); _ -> length([1 || X <- Val0, ((maps:get(diff, X) > 30) andalso (maps:get(diff, X) =< 60))]) end), d61_90 => (case [1 || X <- Val0, ((maps:get(diff, X) > 60) andalso (maps:get(diff, X) =< 90))] of #{items := It} -> length(It); _ -> length([1 || X <- Val0, ((maps:get(diff, X) > 60) andalso (maps:get(diff, X) =< 90))]) end), d91_120 => (case [1 || X <- Val0, ((maps:get(diff, X) > 90) andalso (maps:get(diff, X) =< 120))] of #{items := It} -> length(It); _ -> length([1 || X <- Val0, ((maps:get(diff, X) > 90) andalso (maps:get(diff, X) =< 120))]) end), d_gt_120 => (case [1 || X <- Val0, (maps:get(diff, X) > 120)] of #{items := It} -> length(It); _ -> length([1 || X <- Val0, (maps:get(diff, X) > 120)]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(s, J), J} || J <- Joined]))],
    mochi_json(Result),
    (case (Result == [#{s_store_name => "Main", d30 => 1, d31_60 => 1, d61_90 => 1, d91_120 => 1, d_gt_120 => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
