#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:32Z
% q43.erl - generated from q43.mochi

main(_) ->
    Date_dim = [#{date_sk => 1, d_day_name => "Sunday", d_year => 2020}, #{date_sk => 2, d_day_name => "Monday", d_year => 2020}, #{date_sk => 3, d_day_name => "Tuesday", d_year => 2020}, #{date_sk => 4, d_day_name => "Wednesday", d_year => 2020}, #{date_sk => 5, d_day_name => "Thursday", d_year => 2020}, #{date_sk => 6, d_day_name => "Friday", d_year => 2020}, #{date_sk => 7, d_day_name => "Saturday", d_year => 2020}],
    Store = [#{store_sk => 1, store_id => "S1", store_name => "Main", gmt_offset => 0}],
    Store_sales = [#{sold_date_sk => 1, store_sk => 1, sales_price => 10}, #{sold_date_sk => 2, store_sk => 1, sales_price => 20}, #{sold_date_sk => 3, store_sk => 1, sales_price => 30}, #{sold_date_sk => 4, store_sk => 1, sales_price => 40}, #{sold_date_sk => 5, store_sk => 1, sales_price => 50}, #{sold_date_sk => 6, store_sk => 1, sales_price => 60}, #{sold_date_sk => 7, store_sk => 1, sales_price => 70}],
    Records = [#{d_day_name => maps:get(d_day_name, D), s_store_name => maps:get(store_name, S), s_store_id => maps:get(store_id, S), price => maps:get(sales_price, Ss)} || D <- Date_dim, Ss <- Store_sales, S <- Store, (maps:get(sold_date_sk, Ss) == maps:get(date_sk, D)), (maps:get(store_sk, Ss) == maps:get(store_sk, S)), ((maps:get(gmt_offset, S) == 0) andalso (maps:get(d_year, D) == 2020))],
    Base = [#{s_store_name => maps:get(name, Key0), s_store_id => maps:get(id, Key0), sun_sales => lists:sum([(case (maps:get(d_day_name, X) == "Sunday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), mon_sales => lists:sum([(case (maps:get(d_day_name, X) == "Monday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), tue_sales => lists:sum([(case (maps:get(d_day_name, X) == "Tuesday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), wed_sales => lists:sum([(case (maps:get(d_day_name, X) == "Wednesday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), thu_sales => lists:sum([(case (maps:get(d_day_name, X) == "Thursday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), fri_sales => lists:sum([(case (maps:get(d_day_name, X) == "Friday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0]), sat_sales => lists:sum([(case (maps:get(d_day_name, X) == "Saturday") of true -> maps:get(price, X); _ -> 0 end) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{name => maps:get(s_store_name, R), id => maps:get(s_store_id, R)}, R} || R <- Records]))],
    Result = Base,
    mochi_json(Result),
    (case (Result == [#{s_store_name => "Main", s_store_id => "S1", sun_sales => 10, mon_sales => 20, tue_sales => 30, wed_sales => 40, thu_sales => 50, fri_sales => 60, sat_sales => 70}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
