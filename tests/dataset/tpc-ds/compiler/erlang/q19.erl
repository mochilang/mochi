#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:08Z
% q19.erl - generated from q19.mochi

main(_) ->
    Store_sales = [#{ss_sold_date_sk => 1, ss_item_sk => 1, ss_customer_sk => 1, ss_store_sk => 1, ss_ext_sales_price => 100}],
    Date_dim = [#{d_date_sk => 1, d_year => 1999, d_moy => 11}],
    Item = [#{i_item_sk => 1, i_brand_id => 1, i_brand => "B1", i_manufact_id => 1, i_manufact => "M1", i_manager_id => 10}],
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_zip => "11111"}],
    Store = [#{s_store_sk => 1, s_zip => "99999"}],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(brand, Key0)], #{i_brand => maps:get(brand, Key0), i_brand_id => maps:get(brand_id, Key0), i_manufact_id => maps:get(man_id, Key0), i_manufact => maps:get(man, Key0), ext_price => lists:sum([maps:get(ss_ext_sales_price, X) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{brand => maps:get(i_brand, I), brand_id => maps:get(i_brand_id, I), man_id => maps:get(i_manufact_id, I), man => maps:get(i_manufact, I)}, #{d => D, ss => Ss, i => I, c => C, ca => Ca, s => S}} || D <- Date_dim, Ss <- Store_sales, I <- Item, C <- Customer, Ca <- Customer_address, S <- Store, (maps:get(ss_sold_date_sk, Ss) == maps:get(d_date_sk, D)), ((maps:get(ss_item_sk, Ss) == maps:get(i_item_sk, I)) andalso (maps:get(i_manager_id, I) == 10)), (maps:get(ss_customer_sk, Ss) == maps:get(c_customer_sk, C)), (maps:get(c_current_addr_sk, C) == maps:get(ca_address_sk, Ca)), ((maps:get(ss_store_sk, Ss) == maps:get(s_store_sk, S)) andalso (substr(maps:get(ca_zip, Ca), 0, 5) /= substr(maps:get(s_zip, S), 0, 5))), ((maps:get(d_moy, D) == 11) andalso (maps:get(d_year, D) == 1999))]))])],
    mochi_json(Result),
    (case (Result == [#{i_brand => "B1", i_brand_id => 1, i_manufact_id => 1, i_manufact => "M1", ext_price => 100}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
