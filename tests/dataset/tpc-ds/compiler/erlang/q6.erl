#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:38Z
% q6.erl - generated from q6.mochi

main(_) ->
    Customer_address = [#{ca_address_sk => 1, ca_state => "CA", ca_zip => "12345"}],
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1}],
    Store_sales = [#{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1}],
    Date_dim = [#{d_date_sk => 1, d_year => 1999, d_moy => 5, d_month_seq => 120}],
    Item = [#{i_item_sk => 1, i_category => "A", i_current_price => 100}, #{i_item_sk => 2, i_category => "A", i_current_price => 50}],
    Target_month_seq = lists:max([mochi_get(d_month_seq, D) || D <- Date_dim, ((mochi_get(d_year, D) == 1999) andalso (mochi_get(d_moy, D) == 5))]),
    Result = lists:sublist([V || {_, V} <- lists:keysort(1, [{[(case Val0 of #{items := It} -> length(It); _ -> length(Val0) end), Key0], #{state => Key0, cnt => (case Val0 of #{items := It} -> length(It); _ -> length(Val0) end)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ca_state, A), #{a => A, c => C, s => S, d => D, i => I}} || A <- Customer_address, C <- Customer, S <- Store_sales, D <- Date_dim, I <- Item, (mochi_get(ca_address_sk, A) == mochi_get(c_current_addr_sk, C)), (mochi_get(c_customer_sk, C) == mochi_get(ss_customer_sk, S)), (mochi_get(ss_sold_date_sk, S) == mochi_get(d_date_sk, D)), (mochi_get(ss_item_sk, S) == mochi_get(i_item_sk, I)), ((mochi_get(d_month_seq, D) == Target_month_seq) andalso (mochi_get(i_current_price, I) > (1.2 * (lists:sum([mochi_get(i_current_price, J) || J <- Item, (mochi_get(i_category, J) == mochi_get(i_category, I))]) / length([mochi_get(i_current_price, J) || J <- Item, (mochi_get(i_category, J) == mochi_get(i_category, I))])))))])), ((case Val0 of #{items := It} -> length(It); _ -> length(Val0) end) >= 10)])], 100),
    mochi_json(Result),
    (case (Result == [#{state => "CA", cnt => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
