#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:32:05Z
% q86.erl - generated from q86.mochi

main(_) ->
    Web_sales = [#{cat => "A", class => "B", net => 40}, #{cat => "A", class => "B", net => 46}, #{cat => "A", class => "C", net => 10}, #{cat => "B", class => "B", net => 20}],
    Result = lists:sum([maps:get(net, Ws) || Ws <- Web_sales, ((maps:get(cat, Ws) == "A") andalso (maps:get(class, Ws) == "B"))]),
    mochi_json(Result),
    (case (Result == 86) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
