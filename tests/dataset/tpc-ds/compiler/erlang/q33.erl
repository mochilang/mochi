#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:49Z
% q33.erl - generated from q33.mochi

main(_) ->
    Item = [#{i_item_sk => 1, i_manufact_id => 1, i_category => "Books"}, #{i_item_sk => 2, i_manufact_id => 2, i_category => "Books"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_gmt_offset => -5}, #{ca_address_sk => 2, ca_gmt_offset => -5}],
    Store_sales = [#{ss_item_sk => 1, ss_ext_sales_price => 100, ss_sold_date_sk => 1, ss_addr_sk => 1}, #{ss_item_sk => 2, ss_ext_sales_price => 50, ss_sold_date_sk => 1, ss_addr_sk => 2}],
    Catalog_sales = [#{cs_item_sk => 1, cs_ext_sales_price => 20, cs_sold_date_sk => 1, cs_bill_addr_sk => 1}],
    Web_sales = [#{ws_item_sk => 1, ws_ext_sales_price => 30, ws_sold_date_sk => 1, ws_bill_addr_sk => 1}],
    Union_sales = concat([#{manu => mochi_get(i_manufact_id, I), price => mochi_get(ss_ext_sales_price, Ss)} || Ss <- Store_sales, D <- Date_dim, Ca <- Customer_address, I <- Item, (mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D)), (mochi_get(ss_addr_sk, Ss) == mochi_get(ca_address_sk, Ca)), (mochi_get(ss_item_sk, Ss) == mochi_get(i_item_sk, I)), ((((mochi_get(i_category, I) == "Books") andalso (mochi_get(d_year, D) == 2000)) andalso (mochi_get(d_moy, D) == 1)) andalso (mochi_get(ca_gmt_offset, Ca) == (-5)))], [#{manu => mochi_get(i_manufact_id, I), price => mochi_get(cs_ext_sales_price, Cs)} || Cs <- Catalog_sales, D <- Date_dim, Ca <- Customer_address, I <- Item, (mochi_get(cs_sold_date_sk, Cs) == mochi_get(d_date_sk, D)), (mochi_get(cs_bill_addr_sk, Cs) == mochi_get(ca_address_sk, Ca)), (mochi_get(cs_item_sk, Cs) == mochi_get(i_item_sk, I)), ((((mochi_get(i_category, I) == "Books") andalso (mochi_get(d_year, D) == 2000)) andalso (mochi_get(d_moy, D) == 1)) andalso (mochi_get(ca_gmt_offset, Ca) == (-5)))], [#{manu => mochi_get(i_manufact_id, I), price => mochi_get(ws_ext_sales_price, Ws)} || Ws <- Web_sales, D <- Date_dim, Ca <- Customer_address, I <- Item, (mochi_get(ws_sold_date_sk, Ws) == mochi_get(d_date_sk, D)), (mochi_get(ws_bill_addr_sk, Ws) == mochi_get(ca_address_sk, Ca)), (mochi_get(ws_item_sk, Ws) == mochi_get(i_item_sk, I)), ((((mochi_get(i_category, I) == "Books") andalso (mochi_get(d_year, D) == 2000)) andalso (mochi_get(d_moy, D) == 1)) andalso (mochi_get(ca_gmt_offset, Ca) == (-5)))]),
    Result = [V || {_, V} <- lists:keysort(1, [{-lists:sum([mochi_get(price, X) || X <- Val0]), #{i_manufact_id => Key0, total_sales => lists:sum([mochi_get(price, X) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(manu, S), S} || S <- Union_sales]))])],
    mochi_json(Result),
    (case (Result == [#{i_manufact_id => 1, total_sales => 150}, #{i_manufact_id => 2, total_sales => 50}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
