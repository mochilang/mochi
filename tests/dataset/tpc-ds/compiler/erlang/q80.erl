#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q80.erl - generated from q80.mochi

main(_) ->
    Store_sales = [#{price => 20, ret => 5}, #{price => 10, ret => 2}, #{price => 5, ret => 0}],
    Catalog_sales = [#{price => 15, ret => 3}, #{price => 8, ret => 1}],
    Web_sales = [#{price => 25, ret => 5}, #{price => 15, ret => 8}, #{price => 8, ret => 2}],
    Total_profit = ((lists:sum([(mochi_get(price, S) - mochi_get(ret, S)) || S <- Store_sales]) + lists:sum([(mochi_get(price, C) - mochi_get(ret, C)) || C <- Catalog_sales])) + lists:sum([(mochi_get(price, W) - mochi_get(ret, W)) || W <- Web_sales])),
    mochi_json(Total_profit),
    (case (Total_profit == 80) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
