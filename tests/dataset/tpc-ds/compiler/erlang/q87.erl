#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:32:06Z
% q87.erl - generated from q87.mochi

main(_) ->
    Store_sales = [#{cust => "A", price => 5}, #{cust => "B", price => 30}, #{cust => "C", price => 57}],
    Catalog_sales = [#{cust => "A"}],
    Web_sales = [],
    Store_customers = [maps:get(cust, S) || S <- Store_sales],
    Catalog_customers = [maps:get(cust, S) || S <- Catalog_sales],
    Web_customers = [maps:get(cust, S) || S <- Web_sales],
    Store_only = [C || C <- Store_customers, ((length([X || X <- Catalog_customers, (X == C)]) == 0) andalso (length([X || X <- Web_customers, (X == C)]) == 0))],
    Result = lists:sum([maps:get(price, S) || S <- Store_sales, (length([X || X <- Store_only, (X == maps:get(cust, S))]) > 0)]),
    mochi_json(Result),
    (case (Result == 87) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
