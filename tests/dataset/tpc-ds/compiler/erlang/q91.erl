#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:57Z
% q91.erl - generated from q91.mochi

main(_) ->
    Call_center = [#{cc_call_center_sk => 1, cc_call_center_id => "CC1", cc_name => "Main", cc_manager => "Alice"}],
    Catalog_returns = [#{cr_call_center_sk => 1, cr_returned_date_sk => 1, cr_returning_customer_sk => 1, cr_net_loss => 10}],
    Date_dim = [#{d_date_sk => 1, d_year => 2001, d_moy => 5}],
    Customer = [#{c_customer_sk => 1, c_current_cdemo_sk => 1, c_current_hdemo_sk => 1, c_current_addr_sk => 1}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_marital_status => "M", cd_education_status => "Unknown"}],
    Household_demographics = [#{hd_demo_sk => 1, hd_buy_potential => "1001-5000"}],
    Customer_address = [#{ca_address_sk => 1, ca_gmt_offset => -6}],
    Result = first([#{call_center => maps:get(id, Key0), call_center_name => maps:get(name, Key0), manager => maps:get(mgr, Key0), returns_loss => lists:sum([maps:get(cr_net_loss, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => maps:get(cc_call_center_id, Cc), name => maps:get(cc_name, Cc), mgr => maps:get(cc_manager, Cc)}, #{cc => Cc, cr => Cr, d => D, c => C, cd => Cd, hd => Hd, ca => Ca}} || Cc <- Call_center, Cr <- Catalog_returns, D <- Date_dim, C <- Customer, Cd <- Customer_demographics, Hd <- Household_demographics, Ca <- Customer_address, (maps:get(cc_call_center_sk, Cc) == maps:get(cr_call_center_sk, Cr)), (maps:get(cr_returned_date_sk, Cr) == maps:get(d_date_sk, D)), (maps:get(cr_returning_customer_sk, Cr) == maps:get(c_customer_sk, C)), (maps:get(c_current_cdemo_sk, C) == maps:get(cd_demo_sk, Cd)), (maps:get(c_current_hdemo_sk, C) == maps:get(hd_demo_sk, Hd)), (maps:get(c_current_addr_sk, C) == maps:get(ca_address_sk, Ca)), ((((((maps:get(d_year, D) == 2001) andalso (maps:get(d_moy, D) == 5)) andalso (maps:get(cd_marital_status, Cd) == "M")) andalso (maps:get(cd_education_status, Cd) == "Unknown")) andalso (maps:get(hd_buy_potential, Hd) == "1001-5000")) andalso (maps:get(ca_gmt_offset, Ca) == (-6)))]))]),
    mochi_json(Result),
    (case (Result == #{call_center => "CC1", call_center_name => "Main", manager => "Alice", returns_loss => 10}) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
