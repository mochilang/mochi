#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q48.erl - generated from q48.mochi

main(_) ->
    Store_sales = [#{cdemo_sk => 1, addr_sk => 1, sold_date_sk => 1, sales_price => 120, net_profit => 1000, quantity => 5}, #{cdemo_sk => 2, addr_sk => 2, sold_date_sk => 1, sales_price => 60, net_profit => 2000, quantity => 10}, #{cdemo_sk => 3, addr_sk => 3, sold_date_sk => 1, sales_price => 170, net_profit => 10000, quantity => 20}],
    Store = [#{s_store_sk => 1}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_marital_status => "S", cd_education_status => "E1"}, #{cd_demo_sk => 2, cd_marital_status => "M", cd_education_status => "E2"}, #{cd_demo_sk => 3, cd_marital_status => "W", cd_education_status => "E3"}],
    Customer_address = [#{ca_address_sk => 1, ca_country => "United States", ca_state => "TX"}, #{ca_address_sk => 2, ca_country => "United States", ca_state => "CA"}, #{ca_address_sk => 3, ca_country => "United States", ca_state => "NY"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000}],
    States1 = ["TX"],
    States2 = ["CA"],
    States3 = ["NY"],
    Qty_base = [mochi_get(quantity, Ss) || Ss <- Store_sales, Cd <- Customer_demographics, Ca <- Customer_address, D <- Date_dim, (mochi_get(cdemo_sk, Ss) == mochi_get(cd_demo_sk, Cd)), (mochi_get(addr_sk, Ss) == mochi_get(ca_address_sk, Ca)), (mochi_get(sold_date_sk, Ss) == mochi_get(d_date_sk, D)), (((mochi_get(d_year, D) == 2000) andalso ((((((((mochi_get(cd_marital_status, Cd) == "S") andalso (mochi_get(cd_education_status, Cd) == "E1")) andalso (mochi_get(sales_price, Ss) >= 100)) andalso (mochi_get(sales_price, Ss) =< 150))) orelse (((((mochi_get(cd_marital_status, Cd) == "M") andalso (mochi_get(cd_education_status, Cd) == "E2")) andalso (mochi_get(sales_price, Ss) >= 50)) andalso (mochi_get(sales_price, Ss) =< 100)))) orelse (((((mochi_get(cd_marital_status, Cd) == "W") andalso (mochi_get(cd_education_status, Cd) == "E3")) andalso (mochi_get(sales_price, Ss) >= 150)) andalso (mochi_get(sales_price, Ss) =< 200)))))) andalso ((((((lists:member(mochi_get(ca_state, Ca), States1) andalso (mochi_get(net_profit, Ss) >= 0)) andalso (mochi_get(net_profit, Ss) =< 2000))) orelse (((lists:member(mochi_get(ca_state, Ca), States2) andalso (mochi_get(net_profit, Ss) >= 150)) andalso (mochi_get(net_profit, Ss) =< 3000)))) orelse (((lists:member(mochi_get(ca_state, Ca), States3) andalso (mochi_get(net_profit, Ss) >= 50)) andalso (mochi_get(net_profit, Ss) =< 25000))))))],
    Qty = Qty_base,
    Result = lists:sum(Qty),
    mochi_json(Result),
    (case (Result == 35) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
