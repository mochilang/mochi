#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q11.erl - generated from q11.mochi

main(_) ->
    Customer = [#{c_customer_sk => 1, c_customer_id => "C1", c_first_name => "John", c_last_name => "Doe"}],
    Store_sales = [#{ss_customer_sk => 1, ss_sold_date_sk => 1998, ss_ext_list_price => 60}, #{ss_customer_sk => 1, ss_sold_date_sk => 1999, ss_ext_list_price => 90}],
    Web_sales = [#{ws_bill_customer_sk => 1, ws_sold_date_sk => 1998, ws_ext_list_price => 50}, #{ws_bill_customer_sk => 1, ws_sold_date_sk => 1999, ws_ext_list_price => 150}],
    Ss98 = lists:sum([mochi_get(ss_ext_list_price, Ss) || Ss <- Store_sales, (mochi_get(ss_sold_date_sk, Ss) == 1998)]),
    Ss99 = lists:sum([mochi_get(ss_ext_list_price, Ss) || Ss <- Store_sales, (mochi_get(ss_sold_date_sk, Ss) == 1999)]),
    Ws98 = lists:sum([mochi_get(ws_ext_list_price, Ws) || Ws <- Web_sales, (mochi_get(ws_sold_date_sk, Ws) == 1998)]),
    Ws99 = lists:sum([mochi_get(ws_ext_list_price, Ws) || Ws <- Web_sales, (mochi_get(ws_sold_date_sk, Ws) == 1999)]),
    Growth_ok = (((Ws98 > 0) andalso (Ss98 > 0)) andalso (((Ws99 / Ws98)) > ((Ss99 / Ss98)))),
    Result = (case Growth_ok of undefined -> []; false -> []; _ -> [#{customer_id => "C1", customer_first_name => "John", customer_last_name => "Doe"}] end),
    mochi_json(Result),
    (case (Result == [#{customer_id => "C1", customer_first_name => "John", customer_last_name => "Doe"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
