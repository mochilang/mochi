#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q38.erl - generated from q38.mochi

distinct(Xs) ->
    Out0 = [],
    lists:foreach(fun(X) -> (case not contains(Out0, X) of true -> Out1 = Out0 ++ [X]; _ -> ok end) end, Xs),
    Out1.

main(_) ->
    Customer = [#{c_customer_sk => 1, c_last_name => "Smith", c_first_name => "John"}, #{c_customer_sk => 2, c_last_name => "Jones", c_first_name => "Alice"}],
    Store_sales = [#{ss_customer_sk => 1, d_month_seq => 1200}, #{ss_customer_sk => 2, d_month_seq => 1205}],
    Catalog_sales = [#{cs_bill_customer_sk => 1, d_month_seq => 1203}],
    Web_sales = [#{ws_bill_customer_sk => 1, d_month_seq => 1206}],
    Store_ids = distinct([mochi_get(ss_customer_sk, S) || S <- Store_sales, ((mochi_get(d_month_seq, S) >= 1200) andalso (mochi_get(d_month_seq, S) =< 1211))]),
    Catalog_ids = distinct([mochi_get(cs_bill_customer_sk, C) || C <- Catalog_sales, ((mochi_get(d_month_seq, C) >= 1200) andalso (mochi_get(d_month_seq, C) =< 1211))]),
    Web_ids = distinct([mochi_get(ws_bill_customer_sk, W) || W <- Web_sales, ((mochi_get(d_month_seq, W) >= 1200) andalso (mochi_get(d_month_seq, W) =< 1211))]),
    Hot = ordsets:intersection(ordsets:intersection(Store_ids, Catalog_ids), Web_ids),
    Result = length(Hot),
    mochi_json(Result),
    (case (Result == 1) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
