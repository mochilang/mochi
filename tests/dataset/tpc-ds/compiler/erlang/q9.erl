#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q9.erl - generated from q9.mochi

main(_) ->
    Store_sales = [#{ss_quantity => 5, ss_ext_discount_amt => 5, ss_net_paid => 7}, #{ss_quantity => 30, ss_ext_discount_amt => 10, ss_net_paid => 15}, #{ss_quantity => 50, ss_ext_discount_amt => 20, ss_net_paid => 30}, #{ss_quantity => 70, ss_ext_discount_amt => 25, ss_net_paid => 35}, #{ss_quantity => 90, ss_ext_discount_amt => 40, ss_net_paid => 50}],
    Reason = [#{r_reason_sk => 1}],
    Bucket1 = (case ((case [S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))] of #{items := It} -> length(It); _ -> length([S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))]) end) > 10) of true -> (lists:sum([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))]) / length([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))])); _ -> (lists:sum([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))]) / length([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 1) andalso (mochi_get(ss_quantity, S) =< 20))])) end),
    Bucket2 = (case ((case [S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))] of #{items := It} -> length(It); _ -> length([S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))]) end) > 20) of true -> (lists:sum([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))]) / length([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))])); _ -> (lists:sum([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))]) / length([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 21) andalso (mochi_get(ss_quantity, S) =< 40))])) end),
    Bucket3 = (case ((case [S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))] of #{items := It} -> length(It); _ -> length([S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))]) end) > 30) of true -> (lists:sum([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))]) / length([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))])); _ -> (lists:sum([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))]) / length([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 41) andalso (mochi_get(ss_quantity, S) =< 60))])) end),
    Bucket4 = (case ((case [S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))] of #{items := It} -> length(It); _ -> length([S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))]) end) > 40) of true -> (lists:sum([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))]) / length([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))])); _ -> (lists:sum([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))]) / length([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 61) andalso (mochi_get(ss_quantity, S) =< 80))])) end),
    Bucket5 = (case ((case [S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))] of #{items := It} -> length(It); _ -> length([S || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))]) end) > 50) of true -> (lists:sum([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))]) / length([mochi_get(ss_ext_discount_amt, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))])); _ -> (lists:sum([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))]) / length([mochi_get(ss_net_paid, S) || S <- Store_sales, ((mochi_get(ss_quantity, S) >= 81) andalso (mochi_get(ss_quantity, S) =< 100))])) end),
    Result = [#{bucket1 => Bucket1, bucket2 => Bucket2, bucket3 => Bucket3, bucket4 => Bucket4, bucket5 => Bucket5} || R <- Reason, (mochi_get(r_reason_sk, R) == 1)],
    mochi_json(Result),
    (case (Result == [#{bucket1 => 7, bucket2 => 15, bucket3 => 30, bucket4 => 35, bucket5 => 50}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
