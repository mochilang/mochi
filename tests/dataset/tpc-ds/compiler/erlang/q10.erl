#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:40Z
% q10.erl - generated from q10.mochi

main(_) ->
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1, c_current_cdemo_sk => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_county => "CountyA"}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_gender => "F", cd_marital_status => "M", cd_education_status => "College", cd_purchase_estimate => 5000, cd_credit_rating => "Good", cd_dep_count => 1, cd_dep_employed_count => 1, cd_dep_college_count => 0}],
    Store_sales = [#{ss_customer_sk => 1, ss_sold_date_sk => 1}],
    Web_sales = [],
    Catalog_sales = [],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 2}],
    Active = [Cd || C <- Customer, Ca <- Customer_address, Cd <- Customer_demographics, ((mochi_get(c_current_addr_sk, C) == mochi_get(ca_address_sk, Ca)) andalso (mochi_get(ca_county, Ca) == "CountyA")), (mochi_get(c_current_cdemo_sk, C) == mochi_get(cd_demo_sk, Cd)), (case (length([Ss || Ss <- Store_sales, D <- Date_dim, (mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D)), ((((mochi_get(ss_customer_sk, Ss) == mochi_get(c_customer_sk, C)) andalso (mochi_get(d_year, D) == 2000)) andalso (mochi_get(d_moy, D) >= 2)) andalso (mochi_get(d_moy, D) =< 5))]) > 0) of undefined -> false; false -> false; _ -> true end)],
    Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
    mochi_json(Result),
    (case (Result == [#{cd_gender => "F", cd_marital_status => "M", cd_education_status => "College", cnt1 => 1, cd_purchase_estimate => 5000, cnt2 => 1, cd_credit_rating => "Good", cnt3 => 1, cd_dep_count => 1, cnt4 => 1, cd_dep_employed_count => 1, cnt5 => 1, cd_dep_college_count => 0, cnt6 => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
