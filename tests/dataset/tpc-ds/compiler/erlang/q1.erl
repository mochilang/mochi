#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:52Z
% q1.erl - generated from q1.mochi

main(_) ->
    Store_returns = [#{sr_returned_date_sk => 1, sr_customer_sk => 1, sr_store_sk => 10, sr_return_amt => 20}, #{sr_returned_date_sk => 1, sr_customer_sk => 2, sr_store_sk => 10, sr_return_amt => 50}],
    Date_dim = [#{d_date_sk => 1, d_year => 1998}],
    Store = [#{s_store_sk => 10, s_state => "TN"}],
    Customer = [#{c_customer_sk => 1, c_customer_id => "C1"}, #{c_customer_sk => 2, c_customer_id => "C2"}],
    Customer_total_return = [#{ctr_customer_sk => maps:get(customer_sk, Key0), ctr_store_sk => maps:get(store_sk, Key0), ctr_total_return => lists:sum([maps:get(sr_return_amt, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{customer_sk => maps:get(sr_customer_sk, Sr), store_sk => maps:get(sr_store_sk, Sr)}, #{sr => Sr, d => D}} || Sr <- Store_returns, D <- Date_dim, ((maps:get(sr_returned_date_sk, Sr) == maps:get(d_date_sk, D)) andalso (maps:get(d_year, D) == 1998))]))],
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(c_customer_id, C), #{c_customer_id => maps:get(c_customer_id, C)}} || Ctr1 <- Customer_total_return, S <- Store, C <- Customer, (maps:get(ctr_store_sk, Ctr1) == maps:get(s_store_sk, S)), (maps:get(ctr_customer_sk, Ctr1) == maps:get(c_customer_sk, C)), ((maps:get(ctr_total_return, Ctr1) > ((lists:sum([maps:get(ctr_total_return, Ctr2) || Ctr2 <- Customer_total_return, (maps:get(ctr_store_sk, Ctr1) == maps:get(ctr_store_sk, Ctr2))]) / length([maps:get(ctr_total_return, Ctr2) || Ctr2 <- Customer_total_return, (maps:get(ctr_store_sk, Ctr1) == maps:get(ctr_store_sk, Ctr2))])) * 1.2)) andalso (maps:get(s_state, S) == "TN"))])],
    mochi_json(Result),
    (case (Result == [#{c_customer_id => "C2"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
