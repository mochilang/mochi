#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:41Z
% q13.erl - generated from q13.mochi

main(_) ->
    Store_sales = [#{ss_store_sk => 1, ss_sold_date_sk => 1, ss_hdemo_sk => 1, ss_cdemo_sk => 1, ss_addr_sk => 1, ss_sales_price => 120, ss_net_profit => 150, ss_quantity => 10, ss_ext_sales_price => 100, ss_ext_wholesale_cost => 50}],
    Store = [#{s_store_sk => 1, s_state => "CA"}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_marital_status => "M1", cd_education_status => "ES1"}],
    Household_demographics = [#{hd_demo_sk => 1, hd_dep_count => 3}],
    Customer_address = [#{ca_address_sk => 1, ca_country => "United States", ca_state => "CA"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2001}],
    Filtered = [Ss || Ss <- Store_sales, S <- Store, Cd <- Customer_demographics, Hd <- Household_demographics, Ca <- Customer_address, D <- Date_dim, (mochi_get(ss_store_sk, Ss) == mochi_get(s_store_sk, S)), (((mochi_get(ss_cdemo_sk, Ss) == mochi_get(cd_demo_sk, Cd)) andalso (mochi_get(cd_marital_status, Cd) == "M1")) andalso (mochi_get(cd_education_status, Cd) == "ES1")), ((mochi_get(ss_hdemo_sk, Ss) == mochi_get(hd_demo_sk, Hd)) andalso (mochi_get(hd_dep_count, Hd) == 3)), (((mochi_get(ss_addr_sk, Ss) == mochi_get(ca_address_sk, Ca)) andalso (mochi_get(ca_country, Ca) == "United States")) andalso (mochi_get(ca_state, Ca) == "CA")), ((mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D)) andalso (mochi_get(d_year, D) == 2001))],
    Result = [#{avg_ss_quantity => (lists:sum([mochi_get(ss_quantity, X) || X <- Val0]) / length([mochi_get(ss_quantity, X) || X <- Val0])), avg_ss_ext_sales_price => (lists:sum([mochi_get(ss_ext_sales_price, X) || X <- Val0]) / length([mochi_get(ss_ext_sales_price, X) || X <- Val0])), avg_ss_ext_wholesale_cost => (lists:sum([mochi_get(ss_ext_wholesale_cost, X) || X <- Val0]) / length([mochi_get(ss_ext_wholesale_cost, X) || X <- Val0])), sum_ss_ext_wholesale_cost => lists:sum([mochi_get(ss_ext_wholesale_cost, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{}, R} || R <- Filtered]))],
    mochi_json(Result),
    (case (Result == [#{avg_ss_quantity => 10, avg_ss_ext_sales_price => 100, avg_ss_ext_wholesale_cost => 50, sum_ss_ext_wholesale_cost => 50}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
