#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q84.erl - generated from q84.mochi

main(_) ->
    Customer = [#{id => 1, current_addr => 1, cdemo => 1, hdemo => 1}, #{id => 2, current_addr => 1, cdemo => 2, hdemo => 2}, #{id => 3, current_addr => 1, cdemo => 3, hdemo => 1}, #{id => 4, current_addr => 1, cdemo => 4, hdemo => 2}],
    Customer_address = [#{ca_address_sk => 1, ca_city => "Springfield"}],
    Customer_demographics = [#{cd_demo_sk => 1}, #{cd_demo_sk => 2}, #{cd_demo_sk => 3}, #{cd_demo_sk => 4}],
    Household_demographics = [#{hd_demo_sk => 1, income_band_sk => 1}, #{hd_demo_sk => 2, income_band_sk => 1}],
    Income_band = [#{ib_income_band_sk => 1, ib_lower_bound => 0, ib_upper_bound => 50000}],
    Store_returns = [#{sr_cdemo_sk => 1, amt => 10}, #{sr_cdemo_sk => 2, amt => 20}, #{sr_cdemo_sk => 3, amt => 30}, #{sr_cdemo_sk => 4, amt => 24}],
    Result = lists:sum([mochi_get(amt, Sr) || C <- Customer, Ca <- Customer_address, Cd <- Customer_demographics, Sr <- Store_returns, Hd <- Household_demographics, Ib <- Income_band, ((mochi_get(current_addr, C) == mochi_get(ca_address_sk, Ca)) andalso (mochi_get(ca_city, Ca) == "Springfield")), (mochi_get(cdemo, C) == mochi_get(cd_demo_sk, Cd)), (mochi_get(cd_demo_sk, Cd) == mochi_get(sr_cdemo_sk, Sr)), (mochi_get(hdemo, C) == mochi_get(hd_demo_sk, Hd)), (mochi_get(income_band_sk, Hd) == mochi_get(ib_income_band_sk, Ib))]),
    mochi_json(Result),
    (case (Result == 84) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
