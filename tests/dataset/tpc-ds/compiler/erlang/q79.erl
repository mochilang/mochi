#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q79.erl - generated from q79.mochi

main(_) ->
    Date_dim = [#{d_date_sk => 1, d_dow => 1, d_year => 1999}],
    Store = [#{s_store_sk => 1, s_city => "CityA", s_number_employees => 250}],
    Household_demographics = [#{hd_demo_sk => 1, hd_dep_count => 2, hd_vehicle_count => 1}],
    Store_sales = [#{ss_sold_date_sk => 1, ss_store_sk => 1, ss_ticket_number => 1, ss_customer_sk => 1, ss_hdemo_sk => 1, ss_coupon_amt => 5, ss_net_profit => 10}],
    Customer = [#{c_customer_sk => 1, c_last_name => "Smith", c_first_name => "Alice"}],
    Agg = [#{key => Key0, amt => lists:sum([mochi_get(ss_coupon_amt, mochi_get(ss, X)) || X <- Val0]), profit => lists:sum([mochi_get(ss_net_profit, mochi_get(ss, X)) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{ticket => mochi_get(ss_ticket_number, Ss), customer_sk => mochi_get(ss_customer_sk, Ss), city => mochi_get(s_city, S)}, #{ss => Ss, d => D, s => S, hd => Hd}} || Ss <- Store_sales, D <- Date_dim, S <- Store, Hd <- Household_demographics, (mochi_get(d_date_sk, D) == mochi_get(ss_sold_date_sk, Ss)), (mochi_get(s_store_sk, S) == mochi_get(ss_store_sk, Ss)), (mochi_get(hd_demo_sk, Hd) == mochi_get(ss_hdemo_sk, Ss)), (((((((mochi_get(hd_dep_count, Hd) == 2) orelse (mochi_get(hd_vehicle_count, Hd) > 1))) andalso (mochi_get(d_dow, D) == 1)) andalso ((((mochi_get(d_year, D) == 1998) orelse (mochi_get(d_year, D) == 1999)) orelse (mochi_get(d_year, D) == 2000)))) andalso (mochi_get(s_number_employees, S) >= 200)) andalso (mochi_get(s_number_employees, S) =< 295))]))],
    Result = [V || {_, V} <- lists:keysort(1, [{[mochi_get(c_last_name, C), mochi_get(c_first_name, C), mochi_get(city, mochi_get(key, A)), mochi_get(profit, A)], #{c_last_name => mochi_get(c_last_name, C), c_first_name => mochi_get(c_first_name, C), s_city => mochi_get(city, mochi_get(key, A)), ss_ticket_number => mochi_get(ticket, mochi_get(key, A)), amt => mochi_get(amt, A), profit => mochi_get(profit, A)}} || A <- Agg, C <- Customer, (mochi_get(c_customer_sk, C) == mochi_get(customer_sk, mochi_get(key, A)))])],
    mochi_json(Result),
    (case (Result == [#{c_last_name => "Smith", c_first_name => "Alice", s_city => "CityA", ss_ticket_number => 1, amt => 5, profit => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
