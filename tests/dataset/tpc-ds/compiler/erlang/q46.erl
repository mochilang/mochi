#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:54Z
% q46.erl - generated from q46.mochi

main(_) ->
    Store_sales = [#{ss_ticket_number => 1, ss_customer_sk => 1, ss_addr_sk => 1, ss_hdemo_sk => 1, ss_store_sk => 1, ss_sold_date_sk => 1, ss_coupon_amt => 5, ss_net_profit => 20}],
    Date_dim = [#{d_date_sk => 1, d_dow => 6, d_year => 2020}],
    Store = [#{s_store_sk => 1, s_city => "CityA"}],
    Household_demographics = [#{hd_demo_sk => 1, hd_dep_count => 2, hd_vehicle_count => 0}],
    Customer_address = [#{ca_address_sk => 1, ca_city => "Portland"}, #{ca_address_sk => 2, ca_city => "Seattle"}],
    Customer = [#{c_customer_sk => 1, c_last_name => "Doe", c_first_name => "John", c_current_addr_sk => 2}],
    Cities = ["CityA"],
    Dn = [#{ss_ticket_number => mochi_get(ss_ticket_number, Key0), ss_customer_sk => mochi_get(ss_customer_sk, Key0), bought_city => mochi_get(ca_city, Key0), amt => lists:sum([mochi_get(ss_coupon_amt, mochi_get(ss, X)) || X <- Val0]), profit => lists:sum([mochi_get(ss_net_profit, mochi_get(ss, X)) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{ss_ticket_number => mochi_get(ss_ticket_number, Ss), ss_customer_sk => mochi_get(ss_customer_sk, Ss), ca_city => mochi_get(ca_city, Ca)}, #{ss => Ss, d => D, s => S, hd => Hd, ca => Ca}} || Ss <- Store_sales, D <- Date_dim, S <- Store, Hd <- Household_demographics, Ca <- Customer_address, (mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D)), (mochi_get(ss_store_sk, Ss) == mochi_get(s_store_sk, S)), (mochi_get(ss_hdemo_sk, Ss) == mochi_get(hd_demo_sk, Hd)), (mochi_get(ss_addr_sk, Ss) == mochi_get(ca_address_sk, Ca)), ((((((mochi_get(hd_dep_count, Hd) == 2) orelse (mochi_get(hd_vehicle_count, Hd) == 0))) andalso lists:member(mochi_get(d_dow, D), [6, 0])) andalso (mochi_get(d_year, D) == 2020)) andalso lists:member(mochi_get(s_city, S), Cities))]))],
    Base = [V || {_, V} <- lists:keysort(1, [{[mochi_get(c_last_name, C), mochi_get(c_first_name, C), mochi_get(ca_city, Current_addr), mochi_get(bought_city, Dnrec), mochi_get(ss_ticket_number, Dnrec)], #{c_last_name => mochi_get(c_last_name, C), c_first_name => mochi_get(c_first_name, C), ca_city => mochi_get(ca_city, Current_addr), bought_city => mochi_get(bought_city, Dnrec), ss_ticket_number => mochi_get(ss_ticket_number, Dnrec), amt => mochi_get(amt, Dnrec), profit => mochi_get(profit, Dnrec)}} || Dnrec <- Dn, C <- Customer, Current_addr <- Customer_address, (mochi_get(ss_customer_sk, Dnrec) == mochi_get(c_customer_sk, C)), (mochi_get(c_current_addr_sk, C) == mochi_get(ca_address_sk, Current_addr)), (mochi_get(ca_city, Current_addr) /= mochi_get(bought_city, Dnrec))])],
    Result = Base,
    mochi_json(Result),
    (case (Result == [#{c_last_name => "Doe", c_first_name => "John", ca_city => "Seattle", bought_city => "Portland", ss_ticket_number => 1, amt => 5, profit => 20}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
