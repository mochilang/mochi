#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:36Z
% q53.erl - generated from q53.mochi

abs(X) ->
    case (X >= 0) of true -> X; _ -> -X end.

main(_) ->
    Item = [#{i_item_sk => 1, i_manufact_id => 1}, #{i_item_sk => 2, i_manufact_id => 2}],
    Store_sales = [#{item => 1, date => 1, price => 10}, #{item => 1, date => 2, price => 10}, #{item => 2, date => 1, price => 30}, #{item => 2, date => 2, price => 23}],
    Date_dim = [#{d_date_sk => 1, d_month_seq => 1}, #{d_date_sk => 2, d_month_seq => 2}],
    Grouped = [#{manu => Key0, sum_sales => lists:sum([maps:get(price, X) || X <- Val0]), avg_sales => (lists:sum([maps:get(price, X) || X <- Val0]) / length([maps:get(price, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(i_manufact_id, I), #{ss => Ss, i => I, d => D}} || Ss <- Store_sales, I <- Item, D <- Date_dim, (maps:get(item, Ss) == maps:get(i_item_sk, I)), (maps:get(date, Ss) == maps:get(d_date_sk, D))]))],
    Result = [#{i_manufact_id => maps:get(manu, G), sum_sales => maps:get(sum_sales, G)} || G <- Grouped, ((maps:get(avg_sales, G) > 0) andalso ((abs((maps:get(sum_sales, G) - maps:get(avg_sales, G))) / maps:get(avg_sales, G)) > 0.1))],
    mochi_json(Result),
    (case (Result == [#{i_manufact_id => 1, sum_sales => 20}, #{i_manufact_id => 2, sum_sales => 53}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
