const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch unreachable;
    std.debug.print("{s}\n", .{buf.items});
}

var web: []const std.AutoHashMap([]const u8, i32) = undefined;
var catalog: []const std.AutoHashMap([]const u8, i32) = undefined;
var store: []const std.AutoHashMap([]const u8, i32) = undefined;
var tmp: []const i32 = undefined;
var result: []const i32 = undefined;

fn test_TPCDS_Q49_simplified() void {
    expect((result == &[_]std.AutoHashMap([]const u8, i32){blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog") catch unreachable; m.put("item", "A") catch unreachable; m.put("return_ratio", 0.3) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk0 m; }, blk1: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store") catch unreachable; m.put("item", "A") catch unreachable; m.put("return_ratio", 0.25) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk1 m; }, blk2: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web") catch unreachable; m.put("item", "A") catch unreachable; m.put("return_ratio", 0.2) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk2 m; }, blk3: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web") catch unreachable; m.put("item", "B") catch unreachable; m.put("return_ratio", 0.5) catch unreachable; m.put("return_rank", @as(i32,@intCast(2))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(2))) catch unreachable; break :blk3 m; }}));
}

pub fn main() void {
    web = &[_]std.AutoHashMap([]const u8, i32){blk4: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("item", "A") catch unreachable; m.put("return_ratio", 0.2) catch unreachable; m.put("currency_ratio", 0.3) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk4 m; }, blk5: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("item", "B") catch unreachable; m.put("return_ratio", 0.5) catch unreachable; m.put("currency_ratio", 0.6) catch unreachable; m.put("return_rank", @as(i32,@intCast(2))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(2))) catch unreachable; break :blk5 m; }};
    catalog = &[_]std.AutoHashMap([]const u8, i32){blk6: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("item", "A") catch unreachable; m.put("return_ratio", 0.3) catch unreachable; m.put("currency_ratio", 0.4) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk6 m; }};
    store = &[_]std.AutoHashMap([]const u8, i32){blk7: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("item", "A") catch unreachable; m.put("return_ratio", 0.25) catch unreachable; m.put("currency_ratio", 0.35) catch unreachable; m.put("return_rank", @as(i32,@intCast(1))) catch unreachable; m.put("currency_rank", @as(i32,@intCast(1))) catch unreachable; break :blk7 m; }};
    tmp = (concat(blk9: { var _tmp0 = std.ArrayList(std.AutoHashMap([]const u8, []const u8)).init(std.heap.page_allocator); for (web) |w| { if (!(((w.return_rank <= @as(i32,@intCast(10))) or (w.currency_rank <= @as(i32,@intCast(10)))))) continue; _tmp0.append(blk8: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web") catch unreachable; m.put("item", w.item) catch unreachable; m.put("return_ratio", w.return_ratio) catch unreachable; m.put("return_rank", w.return_rank) catch unreachable; m.put("currency_rank", w.currency_rank) catch unreachable; break :blk8 m; }) catch unreachable; } const _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk9 _tmp1; }, blk11: { var _tmp2 = std.ArrayList(std.AutoHashMap([]const u8, []const u8)).init(std.heap.page_allocator); for (catalog) |c| { if (!(((c.return_rank <= @as(i32,@intCast(10))) or (c.currency_rank <= @as(i32,@intCast(10)))))) continue; _tmp2.append(blk10: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog") catch unreachable; m.put("item", c.item) catch unreachable; m.put("return_ratio", c.return_ratio) catch unreachable; m.put("return_rank", c.return_rank) catch unreachable; m.put("currency_rank", c.currency_rank) catch unreachable; break :blk10 m; }) catch unreachable; } const _tmp3 = _tmp2.toOwnedSlice() catch unreachable; break :blk11 _tmp3; }, blk13: { var _tmp4 = std.ArrayList(std.AutoHashMap([]const u8, []const u8)).init(std.heap.page_allocator); for (store) |s| { if (!(((s.return_rank <= @as(i32,@intCast(10))) or (s.currency_rank <= @as(i32,@intCast(10)))))) continue; _tmp4.append(blk12: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store") catch unreachable; m.put("item", s.item) catch unreachable; m.put("return_ratio", s.return_ratio) catch unreachable; m.put("return_rank", s.return_rank) catch unreachable; m.put("currency_rank", s.currency_rank) catch unreachable; break :blk12 m; }) catch unreachable; } const _tmp5 = _tmp4.toOwnedSlice() catch unreachable; break :blk13 _tmp5; }));
    result = blk14: { var _tmp6 = std.ArrayList(struct { item: i32, key: []const i32 }).init(std.heap.page_allocator); for (tmp) |r| { _tmp6.append(.{ .item = r, .key = &[_]i32{r.channel, r.return_rank, r.currency_rank, r.item} }) catch unreachable; } for (0.._tmp6.items.len) |i| { for (i+1.._tmp6.items.len) |j| { if (_tmp6.items[j].key < _tmp6.items[i].key) { const t = _tmp6.items[i]; _tmp6.items[i] = _tmp6.items[j]; _tmp6.items[j] = t; } } } var _tmp7 = std.ArrayList(i32).init(std.heap.page_allocator);for (_tmp6.items) |p| { _tmp7.append(p.item) catch unreachable; } const _tmp8 = _tmp7.toOwnedSlice() catch unreachable; break :blk14 _tmp8; };
    _json(result);
    test_TPCDS_Q49_simplified();
}
