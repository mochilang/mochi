const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn _sum_int(v: []const i32) i32 {
    var sum: i32 = 0;
    for (v) |it| { sum += it; }
    return sum;
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch unreachable;
    std.debug.print("{s}\n", .{buf.items});
}

fn _equal(a: anytype, b: anytype) bool {
    if (@TypeOf(a) != @TypeOf(b)) return false;
    return switch (@typeInfo(@TypeOf(a))) {
        .Struct, .Union, .Array, .Vector, .Pointer, .Slice => std.meta.eql(a, b),
        else => a == b,
    };
}

var date_dim: []const std.AutoHashMap([]const u8, i32) = undefined;
var store_sales: []const std.AutoHashMap([]const u8, i32) = undefined;
var store_returns: []const std.AutoHashMap([]const u8, i32) = undefined;
var catalog_sales: []const std.AutoHashMap([]const u8, i32) = undefined;
var catalog_returns: []const std.AutoHashMap([]const u8, i32) = undefined;
var web_sales: []const std.AutoHashMap([]const u8, i32) = undefined;
var web_returns: []const std.AutoHashMap([]const u8, i32) = undefined;
var ss: []const std.AutoHashMap([]const u8, i32) = undefined;
var sr: []const std.AutoHashMap([]const u8, i32) = undefined;
var cs: []const std.AutoHashMap([]const u8, i32) = undefined;
var cr: []const std.AutoHashMap([]const u8, i32) = undefined;
var ws: []const std.AutoHashMap([]const u8, i32) = undefined;
var wr: []const std.AutoHashMap([]const u8, i32) = undefined;
var per_channel: []const i32 = undefined;
var result: []const std.AutoHashMap([]const u8, i32) = undefined;

fn test_TPCDS_Q77_simplified() void {
    expect((result == &[_]std.AutoHashMap([]const u8, i32){blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog channel") catch unreachable; m.put("id", @as(i32,@intCast(1))) catch unreachable; m.put("sales", 150) catch unreachable; m.put("returns", 7) catch unreachable; m.put("profit", 12) catch unreachable; break :blk0 m; }, blk1: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store channel") catch unreachable; m.put("id", @as(i32,@intCast(1))) catch unreachable; m.put("sales", 100) catch unreachable; m.put("returns", 5) catch unreachable; m.put("profit", 9) catch unreachable; break :blk1 m; }, blk2: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web channel") catch unreachable; m.put("id", @as(i32,@intCast(1))) catch unreachable; m.put("sales", 200) catch unreachable; m.put("returns", 10) catch unreachable; m.put("profit", 18) catch unreachable; break :blk2 m; }}));
}

pub fn main() void {
    date_dim = &[_]std.AutoHashMap([]const u8, i32){blk3: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("d_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("d_date", @as(i32,@intCast(1))) catch unreachable; break :blk3 m; }};
    store_sales = &[_]std.AutoHashMap([]const u8, i32){blk4: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("ss_sold_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("s_store_sk", @as(i32,@intCast(1))) catch unreachable; m.put("ss_ext_sales_price", 100) catch unreachable; m.put("ss_net_profit", 10) catch unreachable; break :blk4 m; }};
    store_returns = &[_]std.AutoHashMap([]const u8, i32){blk5: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("sr_returned_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("s_store_sk", @as(i32,@intCast(1))) catch unreachable; m.put("sr_return_amt", 5) catch unreachable; m.put("sr_net_loss", 1) catch unreachable; break :blk5 m; }};
    catalog_sales = &[_]std.AutoHashMap([]const u8, i32){blk6: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("cs_sold_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("cs_call_center_sk", @as(i32,@intCast(1))) catch unreachable; m.put("cs_ext_sales_price", 150) catch unreachable; m.put("cs_net_profit", 15) catch unreachable; break :blk6 m; }};
    catalog_returns = &[_]std.AutoHashMap([]const u8, i32){blk7: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("cr_returned_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("cr_call_center_sk", @as(i32,@intCast(1))) catch unreachable; m.put("cr_return_amount", 7) catch unreachable; m.put("cr_net_loss", 3) catch unreachable; break :blk7 m; }};
    web_sales = &[_]std.AutoHashMap([]const u8, i32){blk8: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("ws_sold_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("ws_web_page_sk", @as(i32,@intCast(1))) catch unreachable; m.put("ws_ext_sales_price", 200) catch unreachable; m.put("ws_net_profit", 20) catch unreachable; break :blk8 m; }};
    web_returns = &[_]std.AutoHashMap([]const u8, i32){blk9: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("wr_returned_date_sk", @as(i32,@intCast(1))) catch unreachable; m.put("wr_web_page_sk", @as(i32,@intCast(1))) catch unreachable; m.put("wr_return_amt", 10) catch unreachable; m.put("wr_net_loss", 2) catch unreachable; break :blk9 m; }};
    ss = blk13: { var _tmp4 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp5 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (store_sales) |ss| { for (date_dim) |d| { if (!((d.d_date_sk == ss.ss_sold_date_sk))) continue; const _tmp6 = ss.s_store_sk; if (_tmp5.get(_tmp6)) |idx| { _tmp4.items[idx].Items.append(ss) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp6, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(ss) catch unreachable; _tmp4.append(g) catch unreachable; _tmp5.put(_tmp6, _tmp4.items.len - 1) catch unreachable; } } } var _tmp7 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp4.items) |g| { _tmp7.append(blk10: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("s_store_sk", g.key) catch unreachable; m.put("sales", _sum_int(blk11: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp0.append(x.ss.ss_ext_sales_price) catch unreachable; } const _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk11 _tmp1; })) catch unreachable; m.put("profit", _sum_int(blk12: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp2.append(x.ss.ss_net_profit) catch unreachable; } const _tmp3 = _tmp2.toOwnedSlice() catch unreachable; break :blk12 _tmp3; })) catch unreachable; break :blk10 m; }) catch unreachable; } break :blk13 _tmp7.toOwnedSlice() catch unreachable; };
    sr = blk17: { var _tmp12 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp13 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (store_returns) |sr| { for (date_dim) |d| { if (!((d.d_date_sk == sr.sr_returned_date_sk))) continue; const _tmp14 = sr.s_store_sk; if (_tmp13.get(_tmp14)) |idx| { _tmp12.items[idx].Items.append(sr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp14, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(sr) catch unreachable; _tmp12.append(g) catch unreachable; _tmp13.put(_tmp14, _tmp12.items.len - 1) catch unreachable; } } } var _tmp15 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp12.items) |g| { _tmp15.append(blk14: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("s_store_sk", g.key) catch unreachable; m.put("returns", _sum_int(blk15: { var _tmp8 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp8.append(x.sr.sr_return_amt) catch unreachable; } const _tmp9 = _tmp8.toOwnedSlice() catch unreachable; break :blk15 _tmp9; })) catch unreachable; m.put("profit_loss", _sum_int(blk16: { var _tmp10 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp10.append(x.sr.sr_net_loss) catch unreachable; } const _tmp11 = _tmp10.toOwnedSlice() catch unreachable; break :blk16 _tmp11; })) catch unreachable; break :blk14 m; }) catch unreachable; } break :blk17 _tmp15.toOwnedSlice() catch unreachable; };
    cs = blk21: { var _tmp20 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp21 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (catalog_sales) |cs| { for (date_dim) |d| { if (!((d.d_date_sk == cs.cs_sold_date_sk))) continue; const _tmp22 = cs.cs_call_center_sk; if (_tmp21.get(_tmp22)) |idx| { _tmp20.items[idx].Items.append(cs) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp22, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(cs) catch unreachable; _tmp20.append(g) catch unreachable; _tmp21.put(_tmp22, _tmp20.items.len - 1) catch unreachable; } } } var _tmp23 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp20.items) |g| { _tmp23.append(blk18: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("cs_call_center_sk", g.key) catch unreachable; m.put("sales", _sum_int(blk19: { var _tmp16 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp16.append(x.cs.cs_ext_sales_price) catch unreachable; } const _tmp17 = _tmp16.toOwnedSlice() catch unreachable; break :blk19 _tmp17; })) catch unreachable; m.put("profit", _sum_int(blk20: { var _tmp18 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp18.append(x.cs.cs_net_profit) catch unreachable; } const _tmp19 = _tmp18.toOwnedSlice() catch unreachable; break :blk20 _tmp19; })) catch unreachable; break :blk18 m; }) catch unreachable; } break :blk21 _tmp23.toOwnedSlice() catch unreachable; };
    cr = blk25: { var _tmp28 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp29 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (catalog_returns) |cr| { for (date_dim) |d| { if (!((d.d_date_sk == cr.cr_returned_date_sk))) continue; const _tmp30 = cr.cr_call_center_sk; if (_tmp29.get(_tmp30)) |idx| { _tmp28.items[idx].Items.append(cr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp30, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(cr) catch unreachable; _tmp28.append(g) catch unreachable; _tmp29.put(_tmp30, _tmp28.items.len - 1) catch unreachable; } } } var _tmp31 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp28.items) |g| { _tmp31.append(blk22: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("cr_call_center_sk", g.key) catch unreachable; m.put("returns", _sum_int(blk23: { var _tmp24 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp24.append(x.cr.cr_return_amount) catch unreachable; } const _tmp25 = _tmp24.toOwnedSlice() catch unreachable; break :blk23 _tmp25; })) catch unreachable; m.put("profit_loss", _sum_int(blk24: { var _tmp26 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp26.append(x.cr.cr_net_loss) catch unreachable; } const _tmp27 = _tmp26.toOwnedSlice() catch unreachable; break :blk24 _tmp27; })) catch unreachable; break :blk22 m; }) catch unreachable; } break :blk25 _tmp31.toOwnedSlice() catch unreachable; };
    ws = blk29: { var _tmp36 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp37 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (web_sales) |ws| { for (date_dim) |d| { if (!((d.d_date_sk == ws.ws_sold_date_sk))) continue; const _tmp38 = ws.ws_web_page_sk; if (_tmp37.get(_tmp38)) |idx| { _tmp36.items[idx].Items.append(ws) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp38, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(ws) catch unreachable; _tmp36.append(g) catch unreachable; _tmp37.put(_tmp38, _tmp36.items.len - 1) catch unreachable; } } } var _tmp39 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp36.items) |g| { _tmp39.append(blk26: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("wp_web_page_sk", g.key) catch unreachable; m.put("sales", _sum_int(blk27: { var _tmp32 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp32.append(x.ws.ws_ext_sales_price) catch unreachable; } const _tmp33 = _tmp32.toOwnedSlice() catch unreachable; break :blk27 _tmp33; })) catch unreachable; m.put("profit", _sum_int(blk28: { var _tmp34 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp34.append(x.ws.ws_net_profit) catch unreachable; } const _tmp35 = _tmp34.toOwnedSlice() catch unreachable; break :blk28 _tmp35; })) catch unreachable; break :blk26 m; }) catch unreachable; } break :blk29 _tmp39.toOwnedSlice() catch unreachable; };
    wr = blk33: { var _tmp44 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp45 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (web_returns) |wr| { for (date_dim) |d| { if (!((d.d_date_sk == wr.wr_returned_date_sk))) continue; const _tmp46 = wr.wr_web_page_sk; if (_tmp45.get(_tmp46)) |idx| { _tmp44.items[idx].Items.append(wr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp46, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(wr) catch unreachable; _tmp44.append(g) catch unreachable; _tmp45.put(_tmp46, _tmp44.items.len - 1) catch unreachable; } } } var _tmp47 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp44.items) |g| { _tmp47.append(blk30: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("wp_web_page_sk", g.key) catch unreachable; m.put("returns", _sum_int(blk31: { var _tmp40 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp40.append(x.wr.wr_return_amt) catch unreachable; } const _tmp41 = _tmp40.toOwnedSlice() catch unreachable; break :blk31 _tmp41; })) catch unreachable; m.put("profit_loss", _sum_int(blk32: { var _tmp42 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp42.append(x.wr.wr_net_loss) catch unreachable; } const _tmp43 = _tmp42.toOwnedSlice() catch unreachable; break :blk32 _tmp43; })) catch unreachable; break :blk30 m; }) catch unreachable; } break :blk33 _tmp47.toOwnedSlice() catch unreachable; };
    per_channel = concat(blk35: { var _tmp48 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (ss) |s| { for (sr) |r| { if (!((s.s_store_sk == r.s_store_sk))) continue; _tmp48.append(blk34: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store channel") catch unreachable; m.put("id", s.s_store_sk) catch unreachable; m.put("sales", s.sales) catch unreachable; m.put("returns", if ((r == 0)) (0) else (r.returns)) catch unreachable; m.put("profit", (s.profit - (if ((r == 0)) (0) else (r.profit_loss)))) catch unreachable; break :blk34 m; }) catch unreachable; } } const _tmp49 = _tmp48.toOwnedSlice() catch unreachable; break :blk35 _tmp49; }, blk37: { var _tmp50 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (cs) |c| { for (cr) |r| { if (!((c.cs_call_center_sk == r.cr_call_center_sk))) continue; _tmp50.append(blk36: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog channel") catch unreachable; m.put("id", c.cs_call_center_sk) catch unreachable; m.put("sales", c.sales) catch unreachable; m.put("returns", r.returns) catch unreachable; m.put("profit", (c.profit - r.profit_loss)) catch unreachable; break :blk36 m; }) catch unreachable; } } const _tmp51 = _tmp50.toOwnedSlice() catch unreachable; break :blk37 _tmp51; }, blk39: { var _tmp52 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (ws) |w| { for (wr) |r| { if (!((w.wp_web_page_sk == r.wp_web_page_sk))) continue; _tmp52.append(blk38: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web channel") catch unreachable; m.put("id", w.wp_web_page_sk) catch unreachable; m.put("sales", w.sales) catch unreachable; m.put("returns", if ((r == 0)) (0) else (r.returns)) catch unreachable; m.put("profit", (w.profit - (if ((r == 0)) (0) else (r.profit_loss)))) catch unreachable; break :blk38 m; }) catch unreachable; } } const _tmp53 = _tmp52.toOwnedSlice() catch unreachable; break :blk39 _tmp53; });
    result = blk45: { var _tmp60 = std.ArrayList(struct { key: std.AutoHashMap([]const u8, i32), Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp61 = std.AutoHashMap(std.AutoHashMap([]const u8, i32), usize).init(std.heap.page_allocator); for (per_channel) |p| { const _tmp62 = blk40: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("channel", p.channel) catch unreachable; m.put("id", p.id) catch unreachable; break :blk40 m; }; if (_tmp61.get(_tmp62)) |idx| { _tmp60.items[idx].Items.append(p) catch unreachable; } else { var g = struct { key: std.AutoHashMap([]const u8, i32), Items: std.ArrayList(i32) }{ .key = _tmp62, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(p) catch unreachable; _tmp60.append(g) catch unreachable; _tmp61.put(_tmp62, _tmp60.items.len - 1) catch unreachable; } } var _tmp63 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp60.items) |g| { _tmp63.append(blk41: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("channel", g.key.channel) catch unreachable; m.put("id", g.key.id) catch unreachable; m.put("sales", _sum_int(blk42: { var _tmp54 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp54.append(x.p.sales) catch unreachable; } const _tmp55 = _tmp54.toOwnedSlice() catch unreachable; break :blk42 _tmp55; })) catch unreachable; m.put("returns", _sum_int(blk43: { var _tmp56 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp56.append(x.p.returns) catch unreachable; } const _tmp57 = _tmp56.toOwnedSlice() catch unreachable; break :blk43 _tmp57; })) catch unreachable; m.put("profit", _sum_int(blk44: { var _tmp58 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp58.append(x.p.profit) catch unreachable; } const _tmp59 = _tmp58.toOwnedSlice() catch unreachable; break :blk44 _tmp59; })) catch unreachable; break :blk41 m; }) catch unreachable; } break :blk45 _tmp63.toOwnedSlice() catch unreachable; };
    _json(result);
    test_TPCDS_Q77_simplified();
}
