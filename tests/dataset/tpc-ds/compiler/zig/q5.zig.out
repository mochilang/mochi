const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn _sum_int(v: []const i32) i32 {
    var sum: i32 = 0;
    for (v) |it| { sum += it; }
    return sum;
}

fn _contains(comptime T: type, v: []const T, item: T) bool {
    for (v) |it| { if (std.meta.eql(it, item)) return true; }
    return false;
}

fn _union_all(comptime T: type, a: []const T, b: []const T) []T {
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    for (a) |it| { res.append(it) catch unreachable; }
    for (b) |it| { res.append(it) catch unreachable; }
    return res.toOwnedSlice() catch unreachable;
}

fn _union(comptime T: type, a: []const T, b: []const T) []T {
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    for (a) |it| { res.append(it) catch unreachable; }
    for (b) |it| { if (!_contains(T, res.items, it)) res.append(it) catch unreachable; }
    return res.toOwnedSlice() catch unreachable;
}

fn _except(comptime T: type, a: []const T, b: []const T) []T {
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    for (a) |it| { if (!_contains(T, b, it)) res.append(it) catch unreachable; }
    return res.toOwnedSlice() catch unreachable;
}

fn _intersect(comptime T: type, a: []const T, b: []const T) []T {
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    for (a) |it| { if (_contains(T, b, it) and !_contains(T, res.items, it)) res.append(it) catch unreachable; }
    return res.toOwnedSlice() catch unreachable;
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch unreachable;
    std.debug.print("{s}\n", .{buf.items});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    res.appendSlice(a) catch unreachable;
    res.appendSlice(b) catch unreachable;
    return res.toOwnedSlice() catch unreachable;
}

fn _equal(a: anytype, b: anytype) bool {
    if (@TypeOf(a) != @TypeOf(b)) return false;
    return switch (@typeInfo(@TypeOf(a))) {
        .Struct, .Union, .Array, .Vector, .Pointer, .Slice => std.meta.eql(a, b),
        else => a == b,
    };
}

var store_sales: []const i32 = undefined;
var store_returns: []const i32 = undefined;
var store: []const i32 = undefined;
var catalog_sales: []const i32 = undefined;
var catalog_returns: []const i32 = undefined;
var catalog_page: []const i32 = undefined;
var web_sales: []const i32 = undefined;
var web_returns: []const i32 = undefined;
var web_site: []const i32 = undefined;
var date_dim: []const i32 = undefined;
var ss: []const std.AutoHashMap([]const u8, i32) = undefined;
var sr: []const std.AutoHashMap([]const u8, i32) = undefined;
var cs: []const std.AutoHashMap([]const u8, i32) = undefined;
var cr: []const std.AutoHashMap([]const u8, i32) = undefined;
var ws: []const std.AutoHashMap([]const u8, i32) = undefined;
var wr: []const std.AutoHashMap([]const u8, i32) = undefined;
var per_channel: []const i32 = undefined;
var result: []const std.AutoHashMap([]const u8, i32) = undefined;

fn test_TPCDS_Q5_empty() void {
    expect(((result).len == @as(i32,@intCast(0))));
}

pub fn main() void {
    store_sales = &[_]i32{};
    store_returns = &[_]i32{};
    store = &[_]i32{};
    catalog_sales = &[_]i32{};
    catalog_returns = &[_]i32{};
    catalog_page = &[_]i32{};
    web_sales = &[_]i32{};
    web_returns = &[_]i32{};
    web_site = &[_]i32{};
    date_dim = &[_]i32{};
    ss = blk3: { var _tmp4 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp5 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (store_sales) |ss| { for (date_dim) |d| { if (!((ss.ss_sold_date_sk == d.d_date_sk))) continue; for (store) |s| { if (!((ss.ss_store_sk == s.s_store_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp6 = s.s_store_id; if (_tmp5.get(_tmp6)) |idx| { _tmp4.items[idx].Items.append(ss) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp6, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(ss) catch unreachable; _tmp4.append(g) catch unreachable; _tmp5.put(_tmp6, _tmp4.items.len - 1) catch unreachable; } } } } var _tmp7 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp4.items) |g| { _tmp7.append(blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store channel") catch unreachable; m.put("id", _concat_string("store", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", _sum_int(blk1: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp0.append(x.ss.ss_ext_sales_price) catch unreachable; } const _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk1 _tmp1; })) catch unreachable; m.put("returns", 0) catch unreachable; m.put("profit", _sum_int(blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp2.append(x.ss.ss_net_profit) catch unreachable; } const _tmp3 = _tmp2.toOwnedSlice() catch unreachable; break :blk2 _tmp3; })) catch unreachable; m.put("profit_loss", 0) catch unreachable; break :blk0 m; }) catch unreachable; } break :blk3 _tmp7.toOwnedSlice() catch unreachable; };
    sr = blk7: { var _tmp12 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp13 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (store_returns) |sr| { for (date_dim) |d| { if (!((sr.sr_returned_date_sk == d.d_date_sk))) continue; for (store) |s| { if (!((sr.sr_store_sk == s.s_store_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp14 = s.s_store_id; if (_tmp13.get(_tmp14)) |idx| { _tmp12.items[idx].Items.append(sr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp14, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(sr) catch unreachable; _tmp12.append(g) catch unreachable; _tmp13.put(_tmp14, _tmp12.items.len - 1) catch unreachable; } } } } var _tmp15 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp12.items) |g| { _tmp15.append(blk4: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "store channel") catch unreachable; m.put("id", _concat_string("store", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", 0) catch unreachable; m.put("returns", _sum_int(blk5: { var _tmp8 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp8.append(x.sr.sr_return_amt) catch unreachable; } const _tmp9 = _tmp8.toOwnedSlice() catch unreachable; break :blk5 _tmp9; })) catch unreachable; m.put("profit", 0) catch unreachable; m.put("profit_loss", _sum_int(blk6: { var _tmp10 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp10.append(x.sr.sr_net_loss) catch unreachable; } const _tmp11 = _tmp10.toOwnedSlice() catch unreachable; break :blk6 _tmp11; })) catch unreachable; break :blk4 m; }) catch unreachable; } break :blk7 _tmp15.toOwnedSlice() catch unreachable; };
    cs = blk11: { var _tmp20 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp21 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (catalog_sales) |cs| { for (date_dim) |d| { if (!((cs.cs_sold_date_sk == d.d_date_sk))) continue; for (catalog_page) |cp| { if (!((cs.cs_catalog_page_sk == cp.cp_catalog_page_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp22 = cp.cp_catalog_page_id; if (_tmp21.get(_tmp22)) |idx| { _tmp20.items[idx].Items.append(cs) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp22, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(cs) catch unreachable; _tmp20.append(g) catch unreachable; _tmp21.put(_tmp22, _tmp20.items.len - 1) catch unreachable; } } } } var _tmp23 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp20.items) |g| { _tmp23.append(blk8: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog channel") catch unreachable; m.put("id", _concat_string("catalog_page", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", _sum_int(blk9: { var _tmp16 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp16.append(x.cs.cs_ext_sales_price) catch unreachable; } const _tmp17 = _tmp16.toOwnedSlice() catch unreachable; break :blk9 _tmp17; })) catch unreachable; m.put("returns", 0) catch unreachable; m.put("profit", _sum_int(blk10: { var _tmp18 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp18.append(x.cs.cs_net_profit) catch unreachable; } const _tmp19 = _tmp18.toOwnedSlice() catch unreachable; break :blk10 _tmp19; })) catch unreachable; m.put("profit_loss", 0) catch unreachable; break :blk8 m; }) catch unreachable; } break :blk11 _tmp23.toOwnedSlice() catch unreachable; };
    cr = blk15: { var _tmp28 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp29 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (catalog_returns) |cr| { for (date_dim) |d| { if (!((cr.cr_returned_date_sk == d.d_date_sk))) continue; for (catalog_page) |cp| { if (!((cr.cr_catalog_page_sk == cp.cp_catalog_page_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp30 = cp.cp_catalog_page_id; if (_tmp29.get(_tmp30)) |idx| { _tmp28.items[idx].Items.append(cr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp30, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(cr) catch unreachable; _tmp28.append(g) catch unreachable; _tmp29.put(_tmp30, _tmp28.items.len - 1) catch unreachable; } } } } var _tmp31 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp28.items) |g| { _tmp31.append(blk12: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "catalog channel") catch unreachable; m.put("id", _concat_string("catalog_page", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", 0) catch unreachable; m.put("returns", _sum_int(blk13: { var _tmp24 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp24.append(x.cr.cr_return_amount) catch unreachable; } const _tmp25 = _tmp24.toOwnedSlice() catch unreachable; break :blk13 _tmp25; })) catch unreachable; m.put("profit", 0) catch unreachable; m.put("profit_loss", _sum_int(blk14: { var _tmp26 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp26.append(x.cr.cr_net_loss) catch unreachable; } const _tmp27 = _tmp26.toOwnedSlice() catch unreachable; break :blk14 _tmp27; })) catch unreachable; break :blk12 m; }) catch unreachable; } break :blk15 _tmp31.toOwnedSlice() catch unreachable; };
    ws = blk19: { var _tmp36 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp37 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (web_sales) |ws| { for (date_dim) |d| { if (!((ws.ws_sold_date_sk == d.d_date_sk))) continue; for (web_site) |w| { if (!((ws.ws_web_site_sk == w.web_site_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp38 = w.web_site_id; if (_tmp37.get(_tmp38)) |idx| { _tmp36.items[idx].Items.append(ws) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp38, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(ws) catch unreachable; _tmp36.append(g) catch unreachable; _tmp37.put(_tmp38, _tmp36.items.len - 1) catch unreachable; } } } } var _tmp39 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp36.items) |g| { _tmp39.append(blk16: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web channel") catch unreachable; m.put("id", _concat_string("web_site", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", _sum_int(blk17: { var _tmp32 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp32.append(x.ws.ws_ext_sales_price) catch unreachable; } const _tmp33 = _tmp32.toOwnedSlice() catch unreachable; break :blk17 _tmp33; })) catch unreachable; m.put("returns", 0) catch unreachable; m.put("profit", _sum_int(blk18: { var _tmp34 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp34.append(x.ws.ws_net_profit) catch unreachable; } const _tmp35 = _tmp34.toOwnedSlice() catch unreachable; break :blk18 _tmp35; })) catch unreachable; m.put("profit_loss", 0) catch unreachable; break :blk16 m; }) catch unreachable; } break :blk19 _tmp39.toOwnedSlice() catch unreachable; };
    wr = blk23: { var _tmp44 = std.ArrayList(struct { key: i32, Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp45 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (web_returns) |wr| { for (web_sales) |ws| { if (!(((wr.wr_item_sk == ws.ws_item_sk) and (wr.wr_order_number == ws.ws_order_number)))) continue; for (date_dim) |d| { if (!((wr.wr_returned_date_sk == d.d_date_sk))) continue; for (web_site) |w| { if (!((ws.ws_web_site_sk == w.web_site_sk))) continue; if (!(((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15")))) continue; const _tmp46 = w.web_site_id; if (_tmp45.get(_tmp46)) |idx| { _tmp44.items[idx].Items.append(wr) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(i32) }{ .key = _tmp46, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(wr) catch unreachable; _tmp44.append(g) catch unreachable; _tmp45.put(_tmp46, _tmp44.items.len - 1) catch unreachable; } } } } } var _tmp47 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp44.items) |g| { _tmp47.append(blk20: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("channel", "web channel") catch unreachable; m.put("id", _concat_string("web_site", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{g.key}) catch unreachable)) catch unreachable; m.put("sales", 0) catch unreachable; m.put("returns", _sum_int(blk21: { var _tmp40 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp40.append(x.wr.wr_return_amt) catch unreachable; } const _tmp41 = _tmp40.toOwnedSlice() catch unreachable; break :blk21 _tmp41; })) catch unreachable; m.put("profit", 0) catch unreachable; m.put("profit_loss", _sum_int(blk22: { var _tmp42 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp42.append(x.wr.wr_net_loss) catch unreachable; } const _tmp43 = _tmp42.toOwnedSlice() catch unreachable; break :blk22 _tmp43; })) catch unreachable; break :blk20 m; }) catch unreachable; } break :blk23 _tmp47.toOwnedSlice() catch unreachable; };
    per_channel = concat(_union_all(std.AutoHashMap([]const u8, i32), ss, sr), _union_all(std.AutoHashMap([]const u8, i32), cs, cr), _union_all(std.AutoHashMap([]const u8, i32), ws, wr));
    result = blk30: { var _tmp56 = std.ArrayList(struct { key: std.AutoHashMap([]const u8, i32), Items: std.ArrayList(i32) }).init(std.heap.page_allocator); var _tmp57 = std.AutoHashMap(std.AutoHashMap([]const u8, i32), usize).init(std.heap.page_allocator); for (per_channel) |p| { const _tmp58 = blk24: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("channel", p.channel) catch unreachable; m.put("id", p.id) catch unreachable; break :blk24 m; }; if (_tmp57.get(_tmp58)) |idx| { _tmp56.items[idx].Items.append(p) catch unreachable; } else { var g = struct { key: std.AutoHashMap([]const u8, i32), Items: std.ArrayList(i32) }{ .key = _tmp58, .Items = std.ArrayList(i32).init(std.heap.page_allocator) }; g.Items.append(p) catch unreachable; _tmp56.append(g) catch unreachable; _tmp57.put(_tmp58, _tmp56.items.len - 1) catch unreachable; } } var _tmp59 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp56.items) |g| { _tmp59.append(blk25: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("channel", g.key.channel) catch unreachable; m.put("id", g.key.id) catch unreachable; m.put("sales", _sum_int(blk26: { var _tmp48 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp48.append(x.p.sales) catch unreachable; } const _tmp49 = _tmp48.toOwnedSlice() catch unreachable; break :blk26 _tmp49; })) catch unreachable; m.put("returns", _sum_int(blk27: { var _tmp50 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp50.append(x.p.returns) catch unreachable; } const _tmp51 = _tmp50.toOwnedSlice() catch unreachable; break :blk27 _tmp51; })) catch unreachable; m.put("profit", (_sum_int(blk28: { var _tmp52 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp52.append(x.p.profit) catch unreachable; } const _tmp53 = _tmp52.toOwnedSlice() catch unreachable; break :blk28 _tmp53; }) - _sum_int(blk29: { var _tmp54 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp54.append(x.p.profit_loss) catch unreachable; } const _tmp55 = _tmp54.toOwnedSlice() catch unreachable; break :blk29 _tmp55; }))) catch unreachable; break :blk25 m; }) catch unreachable; } break :blk30 _tmp59.toOwnedSlice() catch unreachable; };
    _json(result);
    test_TPCDS_Q5_empty();
}
