# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    customer = [%{c_customer_sk: 1, c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe"}]
    store_sales = [%{ss_customer_sk: 1, ss_sold_date_sk: 1998, ss_ext_list_price: 60}, %{ss_customer_sk: 1, ss_sold_date_sk: 1999, ss_ext_list_price: 90}]
    web_sales = [%{ws_bill_customer_sk: 1, ws_sold_date_sk: 1998, ws_ext_list_price: 50}, %{ws_bill_customer_sk: 1, ws_sold_date_sk: 1999, ws_ext_list_price: 150}]
    ss98 = _sum(for ss <- store_sales, (ss.ss_sold_date_sk == 1998), do: ss.ss_ext_list_price)
    ss99 = _sum(for ss <- store_sales, (ss.ss_sold_date_sk == 1999), do: ss.ss_ext_list_price)
    ws98 = _sum(for ws <- web_sales, (ws.ws_sold_date_sk == 1998), do: ws.ws_ext_list_price)
    ws99 = _sum(for ws <- web_sales, (ws.ws_sold_date_sk == 1999), do: ws.ws_ext_list_price)
    growth_ok = (((ws98 > 0) && (ss98 > 0)) && ((ws99 / ws98) > (ss99 / ss98)))
    result = (fn ->
  if growth_ok do
    [%{customer_id: "C1", customer_first_name: "John", customer_last_name: "Doe"}]
  else
    []
  end
end).()
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
