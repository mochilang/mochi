# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:59Z
defmodule Main do
  @spec count_range(list(any()), list(any()), integer(), integer(), integer()) :: float()
  def count_range(ssales, tdim, hour, start_min, end_min) do
    try do
      total = 0
      _ = total

      {total} =
        Enum.reduce(_iter(ssales), {total}, fn ss, {total} ->
          {total} =
            Enum.reduce(_iter(tdim), {total}, fn t, {total} ->
              if ss.sold_time_sk == t.time_sk && t.hour == hour && t.minute >= start_min &&
                   t.minute < end_min do
                total = total + ss.qty
              end

              {total}
            end)

          _ = total
          {total}
        end)

      _ = total
      throw({:return, total})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # time_dim :: list(map())
    time_dim = [
      %{time_sk: 1, hour: 8, minute: 30},
      %{time_sk: 2, hour: 9, minute: 0},
      %{time_sk: 3, hour: 9, minute: 30},
      %{time_sk: 4, hour: 10, minute: 0},
      %{time_sk: 5, hour: 10, minute: 30},
      %{time_sk: 6, hour: 11, minute: 0},
      %{time_sk: 7, hour: 11, minute: 30},
      %{time_sk: 8, hour: 12, minute: 0}
    ]

    # household_demographics :: list(map())
    household_demographics = [%{hd_demo_sk: 1, hd_dep_count: 1, hd_vehicle_count: 1}]
    # store :: list(map())
    store = [%{s_store_sk: 1, s_store_name: "ese"}]
    # store_sales :: list(map())
    store_sales = [
      %{sold_time_sk: 1, hdemo_sk: 1, store_sk: 1, qty: 10},
      %{sold_time_sk: 2, hdemo_sk: 1, store_sk: 1, qty: 12},
      %{sold_time_sk: 3, hdemo_sk: 1, store_sk: 1, qty: 14},
      %{sold_time_sk: 4, hdemo_sk: 1, store_sk: 1, qty: 11},
      %{sold_time_sk: 5, hdemo_sk: 1, store_sk: 1, qty: 8},
      %{sold_time_sk: 6, hdemo_sk: 1, store_sk: 1, qty: 9},
      %{sold_time_sk: 7, hdemo_sk: 1, store_sk: 1, qty: 10},
      %{sold_time_sk: 8, hdemo_sk: 1, store_sk: 1, qty: 14}
    ]

    # h8_30_to_9 :: float()
    h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)
    # h9_to_9_30 :: float()
    h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)
    # h9_30_to_10 :: float()
    h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)
    # h10_to_10_30 :: float()
    h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)
    # h10_30_to_11 :: float()
    h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)
    # h11_to_11_30 :: float()
    h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)
    # h11_30_to_12 :: float()
    h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)
    # h12_to_12_30 :: float()
    h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)
    # result :: float()
    result =
      h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 +
        h11_30_to_12 + h12_to_12_30

    _json(result)
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
