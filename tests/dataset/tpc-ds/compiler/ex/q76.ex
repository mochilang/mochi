# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:25Z
defmodule Main do
  def main do
    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_year: 1998, d_qoy: 1}]
    # item :: list(map())
    item = [
      %{i_item_sk: 1, i_category: "CatA"},
      %{i_item_sk: 2, i_category: "CatB"},
      %{i_item_sk: 3, i_category: "CatC"}
    ]

    # store_sales :: list(map())
    store_sales = [
      %{ss_customer_sk: nil, ss_item_sk: 1, ss_ext_sales_price: 10, ss_sold_date_sk: 1}
    ]

    # web_sales :: list(map())
    web_sales = [
      %{ws_bill_customer_sk: nil, ws_item_sk: 2, ws_ext_sales_price: 15, ws_sold_date_sk: 1}
    ]

    # catalog_sales :: list(map())
    catalog_sales = [
      %{cs_bill_customer_sk: nil, cs_item_sk: 3, cs_ext_sales_price: 20, cs_sold_date_sk: 1}
    ]

    # store_part :: list(map())
    store_part =
      for ss <- store_sales,
          i <- item,
          d <- date_dim,
          i.i_item_sk == ss.ss_item_sk && d.d_date_sk == ss.ss_sold_date_sk &&
            ss.ss_customer_sk == nil,
          do: %{
            channel: "store",
            col_name: ss.ss_customer_sk,
            d_year: d.d_year,
            d_qoy: d.d_qoy,
            i_category: i.i_category,
            ext_sales_price: ss.ss_ext_sales_price
          }

    # web_part :: list(map())
    web_part =
      for ws <- web_sales,
          i <- item,
          d <- date_dim,
          i.i_item_sk == ws.ws_item_sk && d.d_date_sk == ws.ws_sold_date_sk &&
            ws.ws_bill_customer_sk == nil,
          do: %{
            channel: "web",
            col_name: ws.ws_bill_customer_sk,
            d_year: d.d_year,
            d_qoy: d.d_qoy,
            i_category: i.i_category,
            ext_sales_price: ws.ws_ext_sales_price
          }

    # catalog_part :: list(map())
    catalog_part =
      for cs <- catalog_sales,
          i <- item,
          d <- date_dim,
          i.i_item_sk == cs.cs_item_sk && d.d_date_sk == cs.cs_sold_date_sk &&
            cs.cs_bill_customer_sk == nil,
          do: %{
            channel: "catalog",
            col_name: cs.cs_bill_customer_sk,
            d_year: d.d_year,
            d_qoy: d.d_qoy,
            i_category: i.i_category,
            ext_sales_price: cs.cs_ext_sales_price
          }

    # all_rows :: list(any())
    all_rows = _concat(_concat(store_part, web_part), catalog_part)
    # result :: list(map())
    result =
      (fn ->
         src = all_rows
         rows = _query(src, [], %{select: fn r -> [r] end})

         groups =
           _group_by(rows, fn [r] ->
             %{
               channel: r.channel,
               col_name: r.col_name,
               d_year: r.d_year,
               d_qoy: r.d_qoy,
               i_category: r.i_category
             }
           end)

         items = groups
         items = Enum.sort_by(items, fn g -> g.key.channel end)

         Enum.map(items, fn g ->
           %{
             channel: g.key.channel,
             col_name: g.key.col_name,
             d_year: g.key.d_year,
             d_qoy: g.key.d_qoy,
             i_category: g.key.i_category,
             sales_cnt: _count(g),
             sales_amt: _sum(for x <- g.items, do: x.r.ext_sales_price)
           }
         end)
       end).()

    _json(result)
  end

  defp _concat(a, b) do
    if is_list(a) and is_list(b) do
      a ++ b
    else
      raise "concat expects lists"
    end
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
