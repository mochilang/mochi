# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:37:15Z
defmodule Main do
  @spec distinct(list(any())) :: list(any())
  def distinct(xs) do
    try do
      out = []
      _ = out

      {out} =
        Enum.reduce(_iter(xs), {out}, fn x, {out} ->
          if !contains.(out, x) do
            out = out ++ [x]
          end

          {out}
        end)

      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # web_sales :: list(map())
    web_sales = [
      %{
        ws_order_number: 1,
        ws_ship_date_sk: 1,
        ws_warehouse_sk: 1,
        ws_ship_addr_sk: 1,
        ws_web_site_sk: 1,
        ws_net_profit: 5,
        ws_ext_ship_cost: 2
      },
      %{
        ws_order_number: 1,
        ws_ship_date_sk: 1,
        ws_warehouse_sk: 2,
        ws_ship_addr_sk: 1,
        ws_web_site_sk: 1,
        ws_net_profit: 0,
        ws_ext_ship_cost: 0
      },
      %{
        ws_order_number: 2,
        ws_ship_date_sk: 1,
        ws_warehouse_sk: 3,
        ws_ship_addr_sk: 1,
        ws_web_site_sk: 1,
        ws_net_profit: 3,
        ws_ext_ship_cost: 1
      }
    ]

    # web_returns :: list(map())
    web_returns = [%{wr_order_number: 2}]
    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_date: "2001-02-01"}]
    # customer_address :: list(map())
    customer_address = [%{ca_address_sk: 1, ca_state: "CA"}]
    # web_site :: list(map())
    web_site = [%{web_site_sk: 1, web_company_name: "pri"}]
    # filtered :: list(map())
    filtered =
      for ws <- web_sales,
          d <- date_dim,
          ca <- customer_address,
          w <- web_site,
          ws.ws_ship_date_sk == d.d_date_sk && ws.ws_ship_addr_sk == ca.ca_address_sk &&
            ws.ws_web_site_sk == w.web_site_sk &&
            (ca.ca_state == "CA" && w.web_company_name == "pri" &&
               _exists(
                 for ws2 <- web_sales,
                     ws.ws_order_number == ws2.ws_order_number &&
                       ws.ws_warehouse_sk != ws2.ws_warehouse_sk,
                     do: ws2
               ) &&
               _exists(for wr <- web_returns, wr.wr_order_number == ws.ws_order_number, do: wr) ==
                 false),
          do: ws

    # result :: map()
    result = %{
      order_count: _length(distinct(for x <- filtered, do: x.ws_order_number)),
      total_shipping_cost: _sum(for x <- filtered, do: x.ws_ext_ship_cost),
      total_net_profit: _sum(for x <- filtered, do: x.ws_net_profit)
    }

    _json(result)
  end

  defp _exists(v) do
    cond do
      is_list(v) -> length(v) > 0
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items)) > 0
      is_map(v) -> map_size(v) > 0
      is_binary(v) -> String.length(v) > 0
      true -> raise "exists expects list, map or string"
    end
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _length(v) do
    cond do
      is_binary(v) -> String.length(v)
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      is_map(v) -> map_size(v)
      true -> raise "len expects list, map or string"
    end
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
