# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:47Z
defmodule Main do
  def main do
    # customer :: list(map())
    customer = [
      %{id: 1, current_addr: 1, cdemo: 1, hdemo: 1},
      %{id: 2, current_addr: 1, cdemo: 2, hdemo: 2},
      %{id: 3, current_addr: 1, cdemo: 3, hdemo: 1},
      %{id: 4, current_addr: 1, cdemo: 4, hdemo: 2}
    ]

    # customer_address :: list(map())
    customer_address = [%{ca_address_sk: 1, ca_city: "Springfield"}]
    # customer_demographics :: list(map())
    customer_demographics = [
      %{cd_demo_sk: 1},
      %{cd_demo_sk: 2},
      %{cd_demo_sk: 3},
      %{cd_demo_sk: 4}
    ]

    # household_demographics :: list(map())
    household_demographics = [
      %{hd_demo_sk: 1, income_band_sk: 1},
      %{hd_demo_sk: 2, income_band_sk: 1}
    ]

    # income_band :: list(map())
    income_band = [%{ib_income_band_sk: 1, ib_lower_bound: 0, ib_upper_bound: 50000}]
    # store_returns :: list(map())
    store_returns = [
      %{sr_cdemo_sk: 1, amt: 10},
      %{sr_cdemo_sk: 2, amt: 20},
      %{sr_cdemo_sk: 3, amt: 30},
      %{sr_cdemo_sk: 4, amt: 24}
    ]

    # result :: float()
    result =
      _sum(
        for c <- customer,
            ca <- customer_address,
            cd <- customer_demographics,
            sr <- store_returns,
            hd <- household_demographics,
            ib <- income_band,
            c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield" &&
              c.cdemo == cd.cd_demo_sk && cd.cd_demo_sk == sr.sr_cdemo_sk &&
              c.hdemo == hd.hd_demo_sk && hd.income_band_sk == ib.ib_income_band_sk,
            do: sr.amt
      )

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
