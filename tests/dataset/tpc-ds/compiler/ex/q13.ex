# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:19Z
defmodule Main do
  def main do
    # store_sales :: list(map())
    store_sales = [
      %{
        ss_store_sk: 1,
        ss_sold_date_sk: 1,
        ss_hdemo_sk: 1,
        ss_cdemo_sk: 1,
        ss_addr_sk: 1,
        ss_sales_price: 120,
        ss_net_profit: 150,
        ss_quantity: 10,
        ss_ext_sales_price: 100,
        ss_ext_wholesale_cost: 50
      }
    ]

    # store :: list(map())
    store = [%{s_store_sk: 1, s_state: "CA"}]
    # customer_demographics :: list(map())
    customer_demographics = [
      %{cd_demo_sk: 1, cd_marital_status: "M1", cd_education_status: "ES1"}
    ]

    # household_demographics :: list(map())
    household_demographics = [%{hd_demo_sk: 1, hd_dep_count: 3}]
    # customer_address :: list(map())
    customer_address = [%{ca_address_sk: 1, ca_country: "United States", ca_state: "CA"}]
    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_year: 2001}]
    # filtered :: list(map())
    filtered =
      for ss <- store_sales,
          s <- store,
          cd <- customer_demographics,
          hd <- household_demographics,
          ca <- customer_address,
          d <- date_dim,
          ss.ss_store_sk == s.s_store_sk &&
            (ss.ss_cdemo_sk == cd.cd_demo_sk && cd.cd_marital_status == "M1" &&
               cd.cd_education_status == "ES1") &&
            (ss.ss_hdemo_sk == hd.hd_demo_sk && hd.hd_dep_count == 3) &&
            (ss.ss_addr_sk == ca.ca_address_sk && ca.ca_country == "United States" &&
               ca.ca_state == "CA") && (ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2001),
          do: ss

    # result :: list(map())
    result =
      Enum.map(_group_by(filtered, fn r -> %{} end), fn g ->
        %{
          avg_ss_quantity: _avg(for x <- g.items, do: x.ss_quantity),
          avg_ss_ext_sales_price: _avg(for x <- g.items, do: x.ss_ext_sales_price),
          avg_ss_ext_wholesale_cost: _avg(for x <- g.items, do: x.ss_ext_wholesale_cost),
          sum_ss_ext_wholesale_cost: _sum(for x <- g.items, do: x.ss_ext_wholesale_cost)
        }
      end)

    _json(result)
  end

  defp _avg(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "avg() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      Enum.sum(list) / Enum.count(list)
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
