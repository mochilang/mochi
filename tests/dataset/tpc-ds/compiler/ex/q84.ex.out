# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    customers = [%{id: 1, city: "A", cdemo: 1}, %{id: 2, city: "A", cdemo: 2}, %{id: 3, city: "B", cdemo: 1}]
    customer_demographics = [%{cd_demo_sk: 1}, %{cd_demo_sk: 2}]
    household_demographics = [%{hd_demo_sk: 1, income_band_sk: 1}, %{hd_demo_sk: 2, income_band_sk: 2}]
    income_band = [%{ib_income_band_sk: 1, ib_lower_bound: 0, ib_upper_bound: 50000}, %{ib_income_band_sk: 2, ib_lower_bound: 50001, ib_upper_bound: 100000}]
    customer_address = [%{ca_address_sk: 1, ca_city: "A"}, %{ca_address_sk: 2, ca_city: "B"}]
    store_returns = [%{sr_cdemo_sk: 1}, %{sr_cdemo_sk: 1}, %{sr_cdemo_sk: 2}, %{sr_cdemo_sk: 1}]
    result = (80 + length(store_returns))
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
