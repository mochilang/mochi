# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:27Z
defmodule Main do
	def main do
		# date_dim :: list(map())
		date_dim = [%{d_date_sk: 1, d_date: 1}]
		# store_sales :: list(map())
		store_sales = [%{ss_sold_date_sk: 1, s_store_sk: 1, ss_ext_sales_price: 100, ss_net_profit: 10}]
		# store_returns :: list(map())
		store_returns = [%{sr_returned_date_sk: 1, s_store_sk: 1, sr_return_amt: 5, sr_net_loss: 1}]
		# catalog_sales :: list(map())
		catalog_sales = [%{cs_sold_date_sk: 1, cs_call_center_sk: 1, cs_ext_sales_price: 150, cs_net_profit: 15}]
		# catalog_returns :: list(map())
		catalog_returns = [%{cr_returned_date_sk: 1, cr_call_center_sk: 1, cr_return_amount: 7, cr_net_loss: 3}]
		# web_sales :: list(map())
		web_sales = [%{ws_sold_date_sk: 1, ws_web_page_sk: 1, ws_ext_sales_price: 200, ws_net_profit: 20}]
		# web_returns :: list(map())
		web_returns = [%{wr_returned_date_sk: 1, wr_web_page_sk: 1, wr_return_amt: 10, wr_net_loss: 2}]
		# ss :: list(map())
		ss = (fn ->
	src = store_sales
	rows = _query(src, [
		%{items: date_dim, on: fn ss, d -> (d.d_date_sk == ss.ss_sold_date_sk) end}
	], %{select: fn ss, d -> Map.merge(Map.merge(ss, d), %{ ss: ss, d: d }) end })
	groups = _group_by(rows, fn %{ss: ss, d: d} -> ss.s_store_sk end)
	items = groups
	Enum.map(items, fn g -> %{s_store_sk: g.key, sales: _sum(for x <- g.items, do: x.ss.ss_ext_sales_price), profit: _sum(for x <- g.items, do: x.ss.ss_net_profit)} end)
end).()
		# sr :: list(map())
		sr = (fn ->
	src = store_returns
	rows = _query(src, [
		%{items: date_dim, on: fn sr, d -> (d.d_date_sk == sr.sr_returned_date_sk) end}
	], %{select: fn sr, d -> Map.merge(Map.merge(sr, d), %{ sr: sr, d: d }) end })
	groups = _group_by(rows, fn %{sr: sr, d: d} -> sr.s_store_sk end)
	items = groups
	Enum.map(items, fn g -> %{s_store_sk: g.key, returns: _sum(for x <- g.items, do: x.sr.sr_return_amt), profit_loss: _sum(for x <- g.items, do: x.sr.sr_net_loss)} end)
end).()
		# cs :: list(map())
		cs = (fn ->
	src = catalog_sales
	rows = _query(src, [
		%{items: date_dim, on: fn cs, d -> (d.d_date_sk == cs.cs_sold_date_sk) end}
	], %{select: fn cs, d -> Map.merge(Map.merge(cs, d), %{ cs: cs, d: d }) end })
	groups = _group_by(rows, fn %{cs: cs, d: d} -> cs.cs_call_center_sk end)
	items = groups
	Enum.map(items, fn g -> %{cs_call_center_sk: g.key, sales: _sum(for x <- g.items, do: x.cs.cs_ext_sales_price), profit: _sum(for x <- g.items, do: x.cs.cs_net_profit)} end)
end).()
		# cr :: list(map())
		cr = (fn ->
	src = catalog_returns
	rows = _query(src, [
		%{items: date_dim, on: fn cr, d -> (d.d_date_sk == cr.cr_returned_date_sk) end}
	], %{select: fn cr, d -> Map.merge(Map.merge(cr, d), %{ cr: cr, d: d }) end })
	groups = _group_by(rows, fn %{cr: cr, d: d} -> cr.cr_call_center_sk end)
	items = groups
	Enum.map(items, fn g -> %{cr_call_center_sk: g.key, returns: _sum(for x <- g.items, do: x.cr.cr_return_amount), profit_loss: _sum(for x <- g.items, do: x.cr.cr_net_loss)} end)
end).()
		# ws :: list(map())
		ws = (fn ->
	src = web_sales
	rows = _query(src, [
		%{items: date_dim, on: fn ws, d -> (d.d_date_sk == ws.ws_sold_date_sk) end}
	], %{select: fn ws, d -> Map.merge(Map.merge(ws, d), %{ ws: ws, d: d }) end })
	groups = _group_by(rows, fn %{ws: ws, d: d} -> ws.ws_web_page_sk end)
	items = groups
	Enum.map(items, fn g -> %{wp_web_page_sk: g.key, sales: _sum(for x <- g.items, do: x.ws.ws_ext_sales_price), profit: _sum(for x <- g.items, do: x.ws.ws_net_profit)} end)
end).()
		# wr :: list(map())
		wr = (fn ->
	src = web_returns
	rows = _query(src, [
		%{items: date_dim, on: fn wr, d -> (d.d_date_sk == wr.wr_returned_date_sk) end}
	], %{select: fn wr, d -> Map.merge(Map.merge(wr, d), %{ wr: wr, d: d }) end })
	groups = _group_by(rows, fn %{wr: wr, d: d} -> wr.wr_web_page_sk end)
	items = groups
	Enum.map(items, fn g -> %{wp_web_page_sk: g.key, returns: _sum(for x <- g.items, do: x.wr.wr_return_amt), profit_loss: _sum(for x <- g.items, do: x.wr.wr_net_loss)} end)
end).()
		# per_channel :: list(any())
		per_channel = _concat(_concat(for s <- ss do
	r = Enum.find(sr, fn r -> (s.s_store_sk == r.s_store_sk) end)
	%{channel: "store channel", id: s.s_store_sk, sales: s.sales, returns: (fn ->
	if (r == nil) do
		0
	else
		r.returns
	end
end).(), profit: (s.profit - (fn ->
	if (r == nil) do
		0
	else
		r.profit_loss
	end
end).())}
end, for c <- cs, r <- cr, (c.cs_call_center_sk == r.cr_call_center_sk), do: %{channel: "catalog channel", id: c.cs_call_center_sk, sales: c.sales, returns: r.returns, profit: (c.profit - r.profit_loss)}), for w <- ws do
	r = Enum.find(wr, fn r -> (w.wp_web_page_sk == r.wp_web_page_sk) end)
	%{channel: "web channel", id: w.wp_web_page_sk, sales: w.sales, returns: (fn ->
	if (r == nil) do
		0
	else
		r.returns
	end
end).(), profit: (w.profit - (fn ->
	if (r == nil) do
		0
	else
		r.profit_loss
	end
end).())}
end)
		# result :: list(map())
		result = (fn ->
	src = per_channel
	rows = _query(src, [
	], %{select: fn p -> [p] end })
	groups = _group_by(rows, fn [p] -> %{channel: p.channel, id: p.id} end)
	items = groups
	items = Enum.sort_by(items, fn g -> g.key.channel end)
	Enum.map(items, fn g -> %{channel: g.key.channel, id: g.key.id, sales: _sum(for x <- g.items, do: x.p.sales), returns: _sum(for x <- g.items, do: x.p.returns), profit: _sum(for x <- g.items, do: x.p.profit)} end)
end).()
		_json(result)
	end
	defp _concat(a, b) do
  if is_list(a) and is_list(b) do
    a ++ b
  else
    raise "concat expects lists"
  end
end

	defmodule Group do
  defstruct key: nil, items: []
  def fetch(g, k) do
    case k do
      :key -> {:ok, g.key}
      :items -> {:ok, g.items}
      _ -> :error
    end
  end
  def get_and_update(g, k, f) do
    case k do
      :key ->
        {v, nv} = f.(g.key)
        {v, %{g | key: nv}}
      :items ->
        {v, nv} = f.(g.items)
        {v, %{g | items: nv}}
      _ -> {nil, g}
    end
  end
end

	defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = if is_list(it) do
      arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
      if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
    else
      keyfn.(it)
    end
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    val = if is_list(it) and length(it) == 1, do: hd(it), else: it
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

	defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

	defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined
  end)
  items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; (if n < length(items), do: Enum.drop(items, n), else: [])), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; (if n < length(items), do: Enum.take(items, n), else: items)), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

	defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

	end
Main.main()
