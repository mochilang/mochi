# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    catalog_sales = [%{cs_quantity: 1, cs_list_price: 10, cs_coupon_amt: 1, cs_sales_price: 9, cs_net_profit: 2, cs_bill_cdemo_sk: 1, cs_bill_customer_sk: 1, cs_sold_date_sk: 1, cs_item_sk: 1}]
    customer_demographics = [%{cd_demo_sk: 1, cd_gender: "M", cd_education_status: "College", cd_dep_count: 2}, %{cd_demo_sk: 2, cd_gender: "F", cd_education_status: "College", cd_dep_count: 2}]
    customer = [%{c_customer_sk: 1, c_current_cdemo_sk: 2, c_current_addr_sk: 1, c_birth_year: 1980, c_birth_month: 1}]
    customer_address = [%{ca_address_sk: 1, ca_country: "US", ca_state: "CA", ca_county: "County1"}]
    date_dim = [%{d_date_sk: 1, d_year: 1999}]
    item = [%{i_item_sk: 1, i_item_id: "I1"}]
    joined = for cs <- catalog_sales, cd1 <- customer_demographics, c <- customer, cd2 <- customer_demographics, ca <- customer_address, d <- date_dim, i <- item, (((cs.cs_bill_cdemo_sk == cd1.cd_demo_sk) && (cd1.cd_gender == "M")) && (cd1.cd_education_status == "College")) && (cs.cs_bill_customer_sk == c.c_customer_sk) && (c.c_current_cdemo_sk == cd2.cd_demo_sk) && (c.c_current_addr_sk == ca.ca_address_sk) && ((cs.cs_sold_date_sk == d.d_date_sk) && (d.d_year == 1999)) && (cs.cs_item_sk == i.i_item_sk), do: %{i_item_id: i.i_item_id, ca_country: ca.ca_country, ca_state: ca.ca_state, ca_county: ca.ca_county, q: cs.cs_quantity, lp: cs.cs_list_price, cp: cs.cs_coupon_amt, sp: cs.cs_sales_price, np: cs.cs_net_profit, by: c.c_birth_year, dep: cd1.cd_dep_count}
    result = Enum.map(_group_by(joined, fn j -> %{i_item_id: j.i_item_id, ca_country: j.ca_country, ca_state: j.ca_state, ca_county: j.ca_county} end), fn g -> %{i_item_id: g.key.i_item_id, ca_country: g.key.ca_country, ca_state: g.key.ca_state, ca_county: g.key.ca_county, agg1: _avg(for x <- g.items, do: x.q), agg2: _avg(for x <- g.items, do: x.lp), agg3: _avg(for x <- g.items, do: x.cp), agg4: _avg(for x <- g.items, do: x.sp), agg5: _avg(for x <- g.items, do: x.np), agg6: _avg(for x <- g.items, do: x.by), agg7: _avg(for x <- g.items, do: x.dep)} end)
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
