# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    web_sales = [%{ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_sales_price: 100}, %{ws_item_sk: 1, ws_sold_date_sk: 2, ws_ext_sales_price: 100}, %{ws_item_sk: 2, ws_sold_date_sk: 2, ws_ext_sales_price: 200}, %{ws_item_sk: 3, ws_sold_date_sk: 3, ws_ext_sales_price: 50}]
    item = [%{i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Item One", i_category: "A", i_class: "C1", i_current_price: 10}, %{i_item_sk: 2, i_item_id: "ITEM2", i_item_desc: "Item Two", i_category: "A", i_class: "C1", i_current_price: 20}, %{i_item_sk: 3, i_item_id: "ITEM3", i_item_desc: "Item Three", i_category: "B", i_class: "C2", i_current_price: 30}]
    date_dim = [%{d_date_sk: 1, d_date: "2001-01-20"}, %{d_date_sk: 2, d_date: "2001-02-05"}, %{d_date_sk: 3, d_date: "2001-03-05"}]
    filtered = (fn ->
  src = web_sales
  rows = _query(src, [
    %{items: item, on: fn ws, i -> (ws.ws_item_sk == i.i_item_sk) end},
    %{items: date_dim, on: fn ws, i, d -> (ws.ws_sold_date_sk == d.d_date_sk) end}
  ], %{select: fn ws, i, d -> [ws, i, d] end, where: fn ws, i, d -> (((if is_map(["A", "B", "C"]), do: Map.has_key?(["A", "B", "C"], i.i_category), else: Enum.member?(["A", "B", "C"], i.i_category)) && (d.d_date >= "2001-01-15")) && (d.d_date <= "2001-02-14")) end })
  groups = _group_by(rows, fn ws, i, d -> %{id: i.i_item_id, desc: i.i_item_desc, cat: i.i_category, class: i.i_class, price: i.i_current_price} end)
  groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ws, i, d] -> ws end)} end)
  items = groups
  Enum.map(items, fn g -> %{i_item_id: g.key.id, i_item_desc: g.key.desc, i_category: g.key.cat, i_class: g.key.class, i_current_price: g.key.price, itemrevenue: _sum(for x <- g.items, do: x.ws_ext_sales_price)} end)
end).()
    class_totals = Enum.map(_group_by(filtered, fn f -> f.i_class end), fn g -> %{class: g.key, total: _sum(for x <- g.items, do: x.itemrevenue)} end)
    result = Enum.map(Enum.sort_by((for f <- filtered, t <- class_totals, (f.i_class == t.class), do: {%{i_item_id: f.i_item_id, i_item_desc: f.i_item_desc, i_category: f.i_category, i_class: f.i_class, i_current_price: f.i_current_price, itemrevenue: f.itemrevenue, revenueratio: ((f.itemrevenue * 100) / t.total)}, [f.i_category, f.i_class, f.i_item_id, f.i_item_desc]}), fn {_, k} -> k end), fn {v, _} -> v end)
    _json(result)
  end
  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
