# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:08Z
defmodule Main do
  @web_sales []
  @catalog_sales []
  def main do
    # customer :: list(map())
    customer = [%{c_customer_sk: 1, c_current_addr_sk: 1, c_current_cdemo_sk: 1}]
    # customer_address :: list(map())
    customer_address = [%{ca_address_sk: 1, ca_county: "CountyA"}]
    # customer_demographics :: list(map())
    customer_demographics = [
      %{
        cd_demo_sk: 1,
        cd_gender: "F",
        cd_marital_status: "M",
        cd_education_status: "College",
        cd_purchase_estimate: 5000,
        cd_credit_rating: "Good",
        cd_dep_count: 1,
        cd_dep_employed_count: 1,
        cd_dep_college_count: 0
      }
    ]

    # store_sales :: list(map())
    store_sales = [%{ss_customer_sk: 1, ss_sold_date_sk: 1}]
    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_year: 2000, d_moy: 2}]
    # active :: list(map())
    active =
      for c <- customer,
          ca <- customer_address,
          cd <- customer_demographics,
          c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "CountyA" &&
            c.c_current_cdemo_sk == cd.cd_demo_sk &&
            _exists(
              for ss <- store_sales,
                  d <- date_dim,
                  ss.ss_sold_date_sk == d.d_date_sk &&
                    (ss.ss_customer_sk == c.c_customer_sk && d.d_year == 2000 && d.d_moy >= 2 &&
                       d.d_moy <= 5),
                  do: ss
            ),
          do: cd

    # result :: list(map())
    result =
      Enum.map(
        _group_by(active, fn a ->
          %{
            gender: a.cd_gender,
            marital: a.cd_marital_status,
            education: a.cd_education_status,
            purchase: a.cd_purchase_estimate,
            credit: a.cd_credit_rating,
            dep: a.cd_dep_count,
            depemp: a.cd_dep_employed_count,
            depcol: a.cd_dep_college_count
          }
        end),
        fn g ->
          %{
            cd_gender: g.key.gender,
            cd_marital_status: g.key.marital,
            cd_education_status: g.key.education,
            cnt1: _count(for v <- g.items, do: v),
            cd_purchase_estimate: g.key.purchase,
            cnt2: _count(for v <- g.items, do: v),
            cd_credit_rating: g.key.credit,
            cnt3: _count(for v <- g.items, do: v),
            cd_dep_count: g.key.dep,
            cnt4: _count(for v <- g.items, do: v),
            cd_dep_employed_count: g.key.depemp,
            cnt5: _count(for v <- g.items, do: v),
            cd_dep_college_count: g.key.depcol,
            cnt6: _count(for v <- g.items, do: v)
          }
        end
      )

    _json(result)
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defp _exists(v) do
    cond do
      is_list(v) -> length(v) > 0
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items)) > 0
      is_map(v) -> map_size(v) > 0
      is_binary(v) -> String.length(v) > 0
      true -> raise "exists expects list, map or string"
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
