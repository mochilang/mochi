# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_sold_date_sk: 1, ss_item_sk: 1, ss_store_sk: 1, ss_customer_sk: 1, ss_quantity: 10, ss_ticket_number: 1}]
    store_returns = [%{sr_returned_date_sk: 2, sr_item_sk: 1, sr_customer_sk: 1, sr_ticket_number: 1, sr_return_quantity: 2}]
    catalog_sales = [%{cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 5}]
    date_dim = [%{d_date_sk: 1, d_moy: 4, d_year: 1999}, %{d_date_sk: 2, d_moy: 5, d_year: 1999}, %{d_date_sk: 3, d_moy: 5, d_year: 2000}]
    store = [%{s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1"}]
    item = [%{i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1"}]
    base = for ss <- store_sales, sr <- store_returns, cs <- catalog_sales, d1 <- date_dim, d2 <- date_dim, d3 <- date_dim, s <- store, i <- item, (((ss.ss_ticket_number == sr.sr_ticket_number) && (ss.ss_item_sk == sr.sr_item_sk)) && ((sr.sr_customer_sk == cs.cs_bill_customer_sk) && (sr.sr_item_sk == cs.cs_item_sk)) && (d1.d_date_sk == ss.ss_sold_date_sk) && (d2.d_date_sk == sr.sr_returned_date_sk) && (d3.d_date_sk == cs.cs_sold_date_sk) && (s.s_store_sk == ss.ss_store_sk) && (i.i_item_sk == ss.ss_item_sk)) && ((((((d1.d_moy == 4) && (d1.d_year == 1999)) && (d2.d_moy >= 4)) && (d2.d_moy <= 7)) && (if is_map([1999, 2000, 2001]), do: Map.has_key?([1999, 2000, 2001], d3.d_year), else: Enum.member?([1999, 2000, 2001], d3.d_year)))), do: %{ss_quantity: ss.ss_quantity, sr_return_quantity: sr.sr_return_quantity, cs_quantity: cs.cs_quantity, i_item_id: i.i_item_id, i_item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name}
    result = Enum.map(_group_by(base, fn b -> %{item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name} end), fn g -> %{i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_quantity: _sum(for x <- g.items, do: x.ss_quantity), store_returns_quantity: _sum(for x <- g.items, do: x.sr_return_quantity), catalog_sales_quantity: _sum(for x <- g.items, do: x.cs_quantity)} end)
    _json(result)
  end
  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
