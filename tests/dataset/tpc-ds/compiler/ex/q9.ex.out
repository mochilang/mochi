# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = []
    reason = []

    bucket1 =
      (fn ->
         if _count(for s <- store_sales, s.ss_quantity >= 1 && s.ss_quantity <= 20, do: s) > 10 do
           _avg(
             for s <- store_sales,
                 s.ss_quantity >= 1 && s.ss_quantity <= 20,
                 do: s.ss_ext_discount_amt
           )
         else
           _avg(
             for s <- store_sales, s.ss_quantity >= 1 && s.ss_quantity <= 20, do: s.ss_net_paid
           )
         end
       end).()

    bucket2 =
      (fn ->
         if _count(for s <- store_sales, s.ss_quantity >= 21 && s.ss_quantity <= 40, do: s) > 20 do
           _avg(
             for s <- store_sales,
                 s.ss_quantity >= 21 && s.ss_quantity <= 40,
                 do: s.ss_ext_discount_amt
           )
         else
           _avg(
             for s <- store_sales, s.ss_quantity >= 21 && s.ss_quantity <= 40, do: s.ss_net_paid
           )
         end
       end).()

    bucket3 =
      (fn ->
         if _count(for s <- store_sales, s.ss_quantity >= 41 && s.ss_quantity <= 60, do: s) > 30 do
           _avg(
             for s <- store_sales,
                 s.ss_quantity >= 41 && s.ss_quantity <= 60,
                 do: s.ss_ext_discount_amt
           )
         else
           _avg(
             for s <- store_sales, s.ss_quantity >= 41 && s.ss_quantity <= 60, do: s.ss_net_paid
           )
         end
       end).()

    bucket4 =
      (fn ->
         if _count(for s <- store_sales, s.ss_quantity >= 61 && s.ss_quantity <= 80, do: s) > 40 do
           _avg(
             for s <- store_sales,
                 s.ss_quantity >= 61 && s.ss_quantity <= 80,
                 do: s.ss_ext_discount_amt
           )
         else
           _avg(
             for s <- store_sales, s.ss_quantity >= 61 && s.ss_quantity <= 80, do: s.ss_net_paid
           )
         end
       end).()

    bucket5 =
      (fn ->
         if _count(for s <- store_sales, s.ss_quantity >= 81 && s.ss_quantity <= 100, do: s) > 50 do
           _avg(
             for s <- store_sales,
                 s.ss_quantity >= 81 && s.ss_quantity <= 100,
                 do: s.ss_ext_discount_amt
           )
         else
           _avg(
             for s <- store_sales, s.ss_quantity >= 81 && s.ss_quantity <= 100, do: s.ss_net_paid
           )
         end
       end).()

    result =
      for r <- reason,
          r.r_reason_sk == 1,
          do: %{
            bucket1: bucket1,
            bucket2: bucket2,
            bucket3: bucket3,
            bucket4: bucket4,
            bucket5: bucket5
          }

    _json(result)
  end

  defp _avg(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> v[:items]
        is_list(v) -> v
        true -> raise "avg() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      Enum.sum(list) / Enum.count(list)
    end
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(v[:items])
      true -> raise "count() expects list or group"
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
