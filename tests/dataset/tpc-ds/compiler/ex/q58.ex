# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:35:33Z
defmodule Main do
  def main do
    # ss_items :: map()
    ss_items = %{item_id: 1, ss_item_rev: 50}
    # cs_items :: map()
    cs_items = %{item_id: 1, cs_item_rev: 60}
    # ws_items :: map()
    ws_items = %{item_id: 1, ws_item_rev: 64}
    # avg :: any()
    avg = (ss_items.ss_item_rev + cs_items.cs_item_rev + ws_items.ws_item_rev) / 3
    # result :: list(map())
    result = [%{item_id: ss_items.item_id, average: avg}]
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
