# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_quantity: 3, ss_list_price: 100, ss_coupon_amt: 50, ss_wholesale_cost: 30}, %{ss_quantity: 8, ss_list_price: 80, ss_coupon_amt: 10, ss_wholesale_cost: 20}, %{ss_quantity: 12, ss_list_price: 60, ss_coupon_amt: 5, ss_wholesale_cost: 15}]
    bucket1 = for ss <- store_sales, (((ss.ss_quantity >= 0) && (ss.ss_quantity <= 5)) && ((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)) || ((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))) || ((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50)))), do: ss
    bucket2 = for ss <- store_sales, (((ss.ss_quantity >= 6) && (ss.ss_quantity <= 10)) && ((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)) || ((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))) || ((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50)))), do: ss
    result = %{B1_LP: _avg(for x <- bucket1, do: x.ss_list_price), B1_CNT: _count(bucket1), B1_CNTD: _count(Enum.map(_group_by(bucket1, fn x -> x.ss_list_price end), fn g -> g.key end)), B2_LP: _avg(for x <- bucket2, do: x.ss_list_price), B2_CNT: _count(bucket2), B2_CNTD: _count(Enum.map(_group_by(bucket2, fn x -> x.ss_list_price end), fn g -> g.key end))}
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defp _count(v) do
  cond do
    is_list(v) -> length(v)
    is_map(v) and Map.has_key?(v, :items) -> length(v[:items])
    true -> raise "count() expects list or group"
  end
end

  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
