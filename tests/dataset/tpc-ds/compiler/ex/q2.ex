# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:33:41Z
defmodule Main do
  def main do
    # web_sales :: list(map())
    web_sales = [
      %{ws_sold_date_sk: 1, ws_ext_sales_price: 5, ws_sold_date_name: "Sunday"},
      %{ws_sold_date_sk: 2, ws_ext_sales_price: 5, ws_sold_date_name: "Monday"},
      %{ws_sold_date_sk: 8, ws_ext_sales_price: 10, ws_sold_date_name: "Sunday"},
      %{ws_sold_date_sk: 9, ws_ext_sales_price: 10, ws_sold_date_name: "Monday"}
    ]

    # catalog_sales :: list(map())
    catalog_sales = [
      %{cs_sold_date_sk: 1, cs_ext_sales_price: 5, cs_sold_date_name: "Sunday"},
      %{cs_sold_date_sk: 2, cs_ext_sales_price: 5, cs_sold_date_name: "Monday"},
      %{cs_sold_date_sk: 8, cs_ext_sales_price: 10, cs_sold_date_name: "Sunday"},
      %{cs_sold_date_sk: 9, cs_ext_sales_price: 10, cs_sold_date_name: "Monday"}
    ]

    # date_dim :: list(map())
    date_dim = [
      %{d_date_sk: 1, d_week_seq: 1, d_day_name: "Sunday", d_year: 1998},
      %{d_date_sk: 2, d_week_seq: 1, d_day_name: "Monday", d_year: 1998},
      %{d_date_sk: 8, d_week_seq: 54, d_day_name: "Sunday", d_year: 1999},
      %{d_date_sk: 9, d_week_seq: 54, d_day_name: "Monday", d_year: 1999}
    ]

    # wscs :: list(map())
    wscs =
      _union(
        for(
          ws <- web_sales,
          do: %{
            sold_date_sk: ws.ws_sold_date_sk,
            sales_price: ws.ws_ext_sales_price,
            day: ws.ws_sold_date_name
          }
        ),
        for(
          cs <- catalog_sales,
          do: %{
            sold_date_sk: cs.cs_sold_date_sk,
            sales_price: cs.cs_ext_sales_price,
            day: cs.cs_sold_date_name
          }
        )
      )

    # wswscs :: list(map())
    wswscs =
      (fn ->
         src = wscs

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn w, d -> w.sold_date_sk == d.d_date_sk end}
             ],
             %{select: fn w, d -> Map.merge(Map.merge(w, d), %{w: w, d: d}) end}
           )

         groups = _group_by(rows, fn %{w: w, d: d} -> %{week_seq: d.d_week_seq} end)
         items = groups

         Enum.map(items, fn g ->
           %{
             d_week_seq: g.key.week_seq,
             sun_sales: _sum(for x <- g.items, x.day == "Sunday", do: x.sales_price),
             mon_sales: _sum(for x <- g.items, x.day == "Monday", do: x.sales_price),
             tue_sales: _sum(for x <- g.items, x.day == "Tuesday", do: x.sales_price),
             wed_sales: _sum(for x <- g.items, x.day == "Wednesday", do: x.sales_price),
             thu_sales: _sum(for x <- g.items, x.day == "Thursday", do: x.sales_price),
             fri_sales: _sum(for x <- g.items, x.day == "Friday", do: x.sales_price),
             sat_sales: _sum(for x <- g.items, x.day == "Saturday", do: x.sales_price)
           }
         end)
       end).()

    # year1 :: list(map())
    year1 = for w <- wswscs, w.d_week_seq == 1, do: w
    # year2 :: list(map())
    year2 = for w <- wswscs, w.d_week_seq == 54, do: w
    # result :: list(map())
    result =
      for y <- year1,
          z <- year2,
          y.d_week_seq == z.d_week_seq - 53,
          do: %{
            d_week_seq1: y.d_week_seq,
            sun_ratio: y.sun_sales / z.sun_sales,
            mon_ratio: y.mon_sales / z.mon_sales
          }

    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
