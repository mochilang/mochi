# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ca_county: "A", d_qoy: 1, d_year: 2000, ss_ext_sales_price: 100}, %{ca_county: "A", d_qoy: 2, d_year: 2000, ss_ext_sales_price: 120}, %{ca_county: "A", d_qoy: 3, d_year: 2000, ss_ext_sales_price: 160}, %{ca_county: "B", d_qoy: 1, d_year: 2000, ss_ext_sales_price: 80}, %{ca_county: "B", d_qoy: 2, d_year: 2000, ss_ext_sales_price: 90}, %{ca_county: "B", d_qoy: 3, d_year: 2000, ss_ext_sales_price: 100}]
    web_sales = [%{ca_county: "A", d_qoy: 1, d_year: 2000, ws_ext_sales_price: 100}, %{ca_county: "A", d_qoy: 2, d_year: 2000, ws_ext_sales_price: 150}, %{ca_county: "A", d_qoy: 3, d_year: 2000, ws_ext_sales_price: 250}, %{ca_county: "B", d_qoy: 1, d_year: 2000, ws_ext_sales_price: 80}, %{ca_county: "B", d_qoy: 2, d_year: 2000, ws_ext_sales_price: 90}, %{ca_county: "B", d_qoy: 3, d_year: 2000, ws_ext_sales_price: 95}]
    counties = ["A", "B"]
    result = []
    _ = result
    {result} = Enum.reduce(counties, {result}, fn county, {result} ->
      ss1 = _sum(for s <- store_sales, ((s.ca_county == county) && (s.d_qoy == 1)), do: s.ss_ext_sales_price)
      ss2 = _sum(for s <- store_sales, ((s.ca_county == county) && (s.d_qoy == 2)), do: s.ss_ext_sales_price)
      ss3 = _sum(for s <- store_sales, ((s.ca_county == county) && (s.d_qoy == 3)), do: s.ss_ext_sales_price)
      ws1 = _sum(for w <- web_sales, ((w.ca_county == county) && (w.d_qoy == 1)), do: w.ws_ext_sales_price)
      ws2 = _sum(for w <- web_sales, ((w.ca_county == county) && (w.d_qoy == 2)), do: w.ws_ext_sales_price)
      ws3 = _sum(for w <- web_sales, ((w.ca_county == county) && (w.d_qoy == 3)), do: w.ws_ext_sales_price)
      web_g1 = (ws2 / ws1)
      store_g1 = (ss2 / ss1)
      web_g2 = (ws3 / ws2)
      store_g2 = (ss3 / ss2)
      if ((web_g1 > store_g1) && (web_g2 > store_g2)) do
        result = append.(result, %{ca_county: county, d_year: 2000, web_q1_q2_increase: web_g1, store_q1_q2_increase: store_g1, web_q2_q3_increase: web_g2, store_q2_q3_increase: store_g2})
      end
      {result}
    end)
    _ = result
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
