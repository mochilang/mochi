# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    item = [%{id: 1}, %{id: 2}, %{id: 3}]
    inventory = [%{item: 1, qty: 20}, %{item: 1, qty: 22}, %{item: 1, qty: 5}, %{item: 2, qty: 30}, %{item: 2, qty: 5}, %{item: 3, qty: 10}]
    store_sales = [%{item: 1}, %{item: 2}]
    result = 0
    {result} = Enum.reduce(inventory, {result}, fn inv, {result} ->
      {result} = Enum.reduce(store_sales, {result}, fn s, {result} ->
        if (inv.item == s.item) do
          result = (result + inv.qty)
        end
        {result}
      end)
      _ = result
      {result}
    end)
    _ = result
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
