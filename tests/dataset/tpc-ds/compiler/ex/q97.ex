# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:37:21Z
defmodule Main do
  def main do
    # store_sales :: list(map())
    store_sales = [%{ss_customer_sk: 1, ss_item_sk: 1}, %{ss_customer_sk: 2, ss_item_sk: 1}]
    # catalog_sales :: list(map())
    catalog_sales = [
      %{cs_bill_customer_sk: 1, cs_item_sk: 1},
      %{cs_bill_customer_sk: 3, cs_item_sk: 2}
    ]

    # ssci :: list(map())
    ssci =
      Enum.map(
        _group_by(store_sales, fn ss ->
          %{customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk}
        end),
        fn g -> %{customer_sk: g.key.customer_sk, item_sk: g.key.item_sk} end
      )

    # csci :: list(map())
    csci =
      Enum.map(
        _group_by(catalog_sales, fn cs ->
          %{customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk}
        end),
        fn g -> %{customer_sk: g.key.customer_sk, item_sk: g.key.item_sk} end
      )

    # both :: integer()
    both =
      _count(
        for s <- ssci, c <- csci, s.customer_sk == c.customer_sk && s.item_sk == c.item_sk, do: 1
      )

    # store_only :: integer()
    store_only =
      _count(
        for s <- ssci,
            !_exists(
              for c <- csci, s.customer_sk == c.customer_sk && s.item_sk == c.item_sk, do: c
            ),
            do: 1
      )

    # catalog_only :: integer()
    catalog_only =
      _count(
        for c <- csci,
            !_exists(
              for s <- ssci, s.customer_sk == c.customer_sk && s.item_sk == c.item_sk, do: s
            ),
            do: 1
      )

    # result :: map()
    result = %{store_only: store_only, catalog_only: catalog_only, store_and_catalog: both}
    _json(result)
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defp _exists(v) do
    cond do
      is_list(v) -> length(v) > 0
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items)) > 0
      is_map(v) -> map_size(v) > 0
      is_binary(v) -> String.length(v) > 0
      true -> raise "exists expects list, map or string"
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
