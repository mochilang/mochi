# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:56Z
defmodule Main do
  @web_sales []
  def main do
    # store_sales :: list(map())
    store_sales = [%{cust: "A", price: 5}, %{cust: "B", price: 30}, %{cust: "C", price: 57}]
    # catalog_sales :: list(map())
    catalog_sales = [%{cust: "A"}]
    # store_customers :: list(any())
    store_customers = for s <- store_sales, do: s.cust
    # catalog_customers :: list(String.t())
    catalog_customers = for s <- catalog_sales, do: s.cust
    # web_customers :: list(any())
    web_customers = for s <- @web_sales, do: s.cust
    # store_only :: list(any())
    store_only =
      for c <- store_customers,
          _length(for x <- catalog_customers, x == c, do: x) == 0 &&
            _length(for x <- web_customers, x == c, do: x) == 0,
          do: c

    # result :: float()
    result =
      _sum(
        for s <- store_sales, _length(for x <- store_only, x == s.cust, do: x) > 0, do: s.price
      )

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _length(v) do
    cond do
      is_binary(v) -> String.length(v)
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      is_map(v) -> map_size(v)
      true -> raise "len expects list, map or string"
    end
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
