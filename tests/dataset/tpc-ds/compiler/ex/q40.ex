# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:44Z
defmodule Main do
  @sales_date "2020-01-15"
  def main do
    # catalog_sales :: list(map())
    catalog_sales = [
      %{order: 1, item_sk: 1, warehouse_sk: 1, date_sk: 1, price: 100},
      %{order: 2, item_sk: 1, warehouse_sk: 1, date_sk: 2, price: 150}
    ]

    # catalog_returns :: list(map())
    catalog_returns = [%{order: 2, item_sk: 1, refunded: 150}]
    # item :: list(map())
    item = [%{item_sk: 1, item_id: "I1", current_price: 1.2}]
    # warehouse :: list(map())
    warehouse = [%{warehouse_sk: 1, state: "CA"}]
    # date_dim :: list(map())
    date_dim = [%{date_sk: 1, date: "2020-01-10"}, %{date_sk: 2, date: "2020-01-20"}]
    # records :: list(map())
    records =
      for cs <- catalog_sales,
          w <- warehouse,
          i <- item,
          d <- date_dim,
          cs.warehouse_sk == w.warehouse_sk && cs.item_sk == i.item_sk && cs.date_sk == d.date_sk &&
            (i.current_price >= 0.99 && i.current_price <= 1.49) do
        cr =
          Enum.find(catalog_returns, fn cr -> cs.order == cr.order && cs.item_sk == cr.item_sk end)

        %{
          w_state: w.state,
          i_item_id: i.item_id,
          sold_date: d.date,
          net:
            cs.price -
              (fn ->
                 if cr == nil do
                   0
                 else
                   cr.refunded
                 end
               end).()
        }
      end

    # result :: list(map())
    result =
      Enum.map(
        _group_by(records, fn r -> %{w_state: r.w_state, i_item_id: r.i_item_id} end),
        fn g ->
          %{
            w_state: g.key.w_state,
            i_item_id: g.key.i_item_id,
            sales_before:
              _sum(
                for x <- g.items,
                    do:
                      (fn ->
                         if x.sold_date < @sales_date do
                           x.net
                         else
                           0
                         end
                       end).()
              ),
            sales_after:
              _sum(
                for x <- g.items,
                    do:
                      (fn ->
                         if x.sold_date >= @sales_date do
                           x.net
                         else
                           0
                         end
                       end).()
              )
          }
        end
      )

    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
