# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{price: 20, ret: 5}, %{price: 10, ret: 2}, %{price: 5, ret: 0}]
    catalog_sales = [%{price: 15, ret: 3}, %{price: 8, ret: 1}]
    web_sales = [%{price: 25, ret: 5}, %{price: 15, ret: 8}, %{price: 8, ret: 2}]
    total_profit = ((_sum(for s <- store_sales, do: (s.price - s.ret)) + _sum(for c <- catalog_sales, do: (c.price - c.ret))) + _sum(for w <- web_sales, do: (w.price - w.ret)))
    _json(total_profit)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
