# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:50Z
defmodule Main do
  @month 5
  @year 2020
  def main do
    # store_sales :: list(map())
    store_sales = [
      %{sold_date_sk: 1, item_sk: 1, ext_sales_price: 10},
      %{sold_date_sk: 1, item_sk: 2, ext_sales_price: 20},
      %{sold_date_sk: 2, item_sk: 1, ext_sales_price: 15}
    ]

    # item :: list(map())
    item = [
      %{i_item_sk: 1, i_manager_id: 1, i_category_id: 100, i_category: "CatA"},
      %{i_item_sk: 2, i_manager_id: 1, i_category_id: 200, i_category: "CatB"}
    ]

    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_year: 2020, d_moy: 5}, %{d_date_sk: 2, d_year: 2021, d_moy: 5}]
    # records :: list(map())
    records =
      for dt <- date_dim,
          ss <- store_sales,
          it <- item,
          ss.sold_date_sk == dt.d_date_sk && ss.item_sk == it.i_item_sk &&
            (it.i_manager_id == 1 && dt.d_moy == @month && dt.d_year == @year),
          do: %{
            d_year: dt.d_year,
            i_category_id: it.i_category_id,
            i_category: it.i_category,
            price: ss.ext_sales_price
          }

    # grouped :: list(map())
    grouped =
      Enum.map(
        _group_by(records, fn r ->
          %{d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category}
        end),
        fn g ->
          %{
            d_year: g.key.d_year,
            i_category_id: g.key.i_category_id,
            i_category: g.key.i_category,
            sum_ss_ext_sales_price: _sum(for x <- g.items, do: x.price)
          }
        end
      )

    # base :: list(map())
    base = for g <- Enum.sort_by(grouped, fn g -> -g.sum_ss_ext_sales_price end), do: g
    # result :: list(map())
    result = base
    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
