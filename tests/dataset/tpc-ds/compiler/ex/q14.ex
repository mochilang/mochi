# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:22Z
defmodule Main do
	def main do
		# store_sales :: list(map())
		store_sales = [%{ss_item_sk: 1, ss_list_price: 10, ss_quantity: 2, ss_sold_date_sk: 1}, %{ss_item_sk: 1, ss_list_price: 20, ss_quantity: 3, ss_sold_date_sk: 2}]
		# catalog_sales :: list(map())
		catalog_sales = [%{cs_item_sk: 1, cs_list_price: 10, cs_quantity: 2, cs_sold_date_sk: 1}]
		# web_sales :: list(map())
		web_sales = [%{ws_item_sk: 1, ws_list_price: 30, ws_quantity: 1, ws_sold_date_sk: 1}]
		# item :: list(map())
		item = [%{i_item_sk: 1, i_brand_id: 1, i_class_id: 1, i_category_id: 1}]
		# date_dim :: list(map())
		date_dim = [%{d_date_sk: 1, d_year: 2000, d_moy: 12}, %{d_date_sk: 2, d_year: 2002, d_moy: 11}]
		# cross_items :: list(map())
		cross_items = [%{ss_item_sk: 1}]
		# avg_sales :: float()
		avg_sales = _avg([20, 20, 30])
		# store_filtered :: list(map())
		store_filtered = (fn ->
	src = store_sales
	rows = _query(src, [
		%{items: date_dim, on: fn ss, d -> (((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2002)) && (d.d_moy == 11)) end}
	], %{select: fn ss, d -> Map.merge(Map.merge(ss, d), %{ ss: ss, d: d }) end, where: fn [ss, d] -> (if is_map(for ci <- cross_items, do: ci.ss_item_sk), do: Map.has_key?(for ci <- cross_items, do: ci.ss_item_sk, ss.ss_item_sk), else: Enum.member?(for ci <- cross_items, do: ci.ss_item_sk, ss.ss_item_sk)) end })
	groups = _group_by(rows, fn %{ss: ss, d: d} -> %{brand_id: 1, class_id: 1, category_id: 1} end)
	items = groups
	Enum.map(items, fn g -> %{channel: "store", sales: _sum(for x <- g.items, do: (x.ss_quantity * x.ss_list_price)), number_sales: _count(for v <- g.items, do: v)} end)
end).()
		# result :: list(map())
		result = for r <- store_filtered, (r.sales > avg_sales), do: %{channel: r.channel, i_brand_id: 1, i_class_id: 1, i_category_id: 1, sales: r.sales, number_sales: r.number_sales}
		_json(result)
	end
	defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

	defp _count(v) do
  cond do
    is_list(v) -> length(v)
    is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
    true -> raise "count() expects list or group"
  end
end

	defmodule Group do
  defstruct key: nil, items: []
  def fetch(g, k) do
    case k do
      :key -> {:ok, g.key}
      :items -> {:ok, g.items}
      _ -> :error
    end
  end
  def get_and_update(g, k, f) do
    case k do
      :key ->
        {v, nv} = f.(g.key)
        {v, %{g | key: nv}}
      :items ->
        {v, nv} = f.(g.items)
        {v, %{g | items: nv}}
      _ -> {nil, g}
    end
  end
end

	defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = if is_list(it) do
      arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
      if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
    else
      keyfn.(it)
    end
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    val = if is_list(it) and length(it) == 1, do: hd(it), else: it
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

	defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

	defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined
  end)
  items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; (if n < length(items), do: Enum.drop(items, n), else: [])), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; (if n < length(items), do: Enum.take(items, n), else: items)), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

	defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

	end
Main.main()
