# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:35:39Z
defmodule Main do
  def main do
    # store_sales :: list(map())
    store_sales = [%{item: 1, price: 10}, %{item: 1, price: 20}]
    # catalog_sales :: list(map())
    catalog_sales = [%{item: 1, price: 15}]
    # web_sales :: list(map())
    web_sales = [%{item: 1, price: 15}]
    # all_sales :: list(map())
    all_sales = _union(_union(store_sales, catalog_sales), web_sales)
    # result :: float()
    result = _sum(for s <- all_sales, do: s.price)
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
