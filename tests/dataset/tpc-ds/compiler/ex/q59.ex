# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:35:36Z
defmodule Main do
  def main do
    # sales_year1 :: list(map())
    sales_year1 = [%{week: 1, store: 1, amount: 100}]
    # sales_year2 :: list(map())
    sales_year2 = [%{week: 53, store: 1, amount: 150}]
    # join :: list(map())
    join =
      for y1 <- sales_year1,
          y2 <- sales_year2,
          y1.store == y2.store && y1.week == y2.week - 52,
          do: %{s_store_id1: y1.store, ratio: y2.amount / y1.amount}

    # result :: list(map())
    result = join
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
