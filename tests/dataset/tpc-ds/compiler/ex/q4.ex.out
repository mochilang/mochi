# Generated by Mochi compiler v0.10.25 on 2025-07-15T05:02:00Z
defmodule Main do
  def main do
    # customer :: list(map())
    customer = [
      %{
        c_customer_sk: 1,
        c_customer_id: "C1",
        c_first_name: "Alice",
        c_last_name: "A",
        c_login: "alice"
      }
    ]

    # store_sales :: list(map())
    store_sales = [
      %{
        ss_customer_sk: 1,
        ss_sold_date_sk: 1,
        ss_ext_list_price: 10,
        ss_ext_wholesale_cost: 5,
        ss_ext_discount_amt: 0,
        ss_ext_sales_price: 10
      },
      %{
        ss_customer_sk: 1,
        ss_sold_date_sk: 2,
        ss_ext_list_price: 20,
        ss_ext_wholesale_cost: 5,
        ss_ext_discount_amt: 0,
        ss_ext_sales_price: 20
      }
    ]

    # catalog_sales :: list(map())
    catalog_sales = [
      %{
        cs_bill_customer_sk: 1,
        cs_sold_date_sk: 1,
        cs_ext_list_price: 10,
        cs_ext_wholesale_cost: 2,
        cs_ext_discount_amt: 0,
        cs_ext_sales_price: 10
      },
      %{
        cs_bill_customer_sk: 1,
        cs_sold_date_sk: 2,
        cs_ext_list_price: 30,
        cs_ext_wholesale_cost: 2,
        cs_ext_discount_amt: 0,
        cs_ext_sales_price: 30
      }
    ]

    # web_sales :: list(map())
    web_sales = [
      %{
        ws_bill_customer_sk: 1,
        ws_sold_date_sk: 1,
        ws_ext_list_price: 10,
        ws_ext_wholesale_cost: 5,
        ws_ext_discount_amt: 0,
        ws_ext_sales_price: 10
      },
      %{
        ws_bill_customer_sk: 1,
        ws_sold_date_sk: 2,
        ws_ext_list_price: 12,
        ws_ext_wholesale_cost: 5,
        ws_ext_discount_amt: 0,
        ws_ext_sales_price: 12
      }
    ]

    # date_dim :: list(map())
    date_dim = [%{d_date_sk: 1, d_year: 2001}, %{d_date_sk: 2, d_year: 2002}]
    # year_total :: list(map())
    year_total =
      _union(
        _union(
          (fn ->
             src = customer

             rows =
               _query(
                 src,
                 [
                   %{items: store_sales, on: fn c, s -> c.c_customer_sk == s.ss_customer_sk end},
                   %{items: date_dim, on: fn c, s, d -> s.ss_sold_date_sk == d.d_date_sk end}
                 ],
                 %{
                   select: fn c, s, d ->
                     Map.merge(Map.merge(Map.merge(c, s), d), %{c: c, s: s, d: d})
                   end
                 }
               )

             groups =
               _group_by(rows, fn %{c: c, s: s, d: d} ->
                 %{
                   id: c.c_customer_id,
                   first: c.c_first_name,
                   last: c.c_last_name,
                   login: c.c_login,
                   year: d.d_year
                 }
               end)

             items = groups

             Enum.map(items, fn g ->
               %{
                 customer_id: g.key.id,
                 customer_first_name: g.key.first,
                 customer_last_name: g.key.last,
                 customer_login: g.key.login,
                 dyear: g.key.year,
                 year_total:
                   _sum(
                     for x <- g.items,
                         do:
                           (x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt +
                              x.ss_ext_sales_price) / 2
                   ),
                 sale_type: "s"
               }
             end)
           end).(),
          (fn ->
             src = customer

             rows =
               _query(
                 src,
                 [
                   %{
                     items: catalog_sales,
                     on: fn c, cs -> c.c_customer_sk == cs.cs_bill_customer_sk end
                   },
                   %{items: date_dim, on: fn c, cs, d -> cs.cs_sold_date_sk == d.d_date_sk end}
                 ],
                 %{
                   select: fn c, cs, d ->
                     Map.merge(Map.merge(Map.merge(c, cs), d), %{c: c, cs: cs, d: d})
                   end
                 }
               )

             groups =
               _group_by(rows, fn %{c: c, cs: cs, d: d} ->
                 %{
                   id: c.c_customer_id,
                   first: c.c_first_name,
                   last: c.c_last_name,
                   login: c.c_login,
                   year: d.d_year
                 }
               end)

             items = groups

             Enum.map(items, fn g ->
               %{
                 customer_id: g.key.id,
                 customer_first_name: g.key.first,
                 customer_last_name: g.key.last,
                 customer_login: g.key.login,
                 dyear: g.key.year,
                 year_total:
                   _sum(
                     for x <- g.items,
                         do:
                           (x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt +
                              x.cs_ext_sales_price) / 2
                   ),
                 sale_type: "c"
               }
             end)
           end).()
        ),
        (fn ->
           src = customer

           rows =
             _query(
               src,
               [
                 %{
                   items: web_sales,
                   on: fn c, ws -> c.c_customer_sk == ws.ws_bill_customer_sk end
                 },
                 %{items: date_dim, on: fn c, ws, d -> ws.ws_sold_date_sk == d.d_date_sk end}
               ],
               %{
                 select: fn c, ws, d ->
                   Map.merge(Map.merge(Map.merge(c, ws), d), %{c: c, ws: ws, d: d})
                 end
               }
             )

           groups =
             _group_by(rows, fn %{c: c, ws: ws, d: d} ->
               %{
                 id: c.c_customer_id,
                 first: c.c_first_name,
                 last: c.c_last_name,
                 login: c.c_login,
                 year: d.d_year
               }
             end)

           items = groups

           Enum.map(items, fn g ->
             %{
               customer_id: g.key.id,
               customer_first_name: g.key.first,
               customer_last_name: g.key.last,
               customer_login: g.key.login,
               dyear: g.key.year,
               year_total:
                 _sum(
                   for x <- g.items,
                       do:
                         (x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt +
                            x.ws_ext_sales_price) / 2
                 ),
               sale_type: "w"
             }
           end)
         end).()
      )

    # result :: list(map())
    result =
      Enum.map(
        Enum.sort_by(
          for(
            s1 <- year_total,
            s2 <- year_total,
            c1 <- year_total,
            c2 <- year_total,
            w1 <- year_total,
            w2 <- year_total,
            s2.customer_id == s1.customer_id && c1.customer_id == s1.customer_id &&
              c2.customer_id == s1.customer_id && w1.customer_id == s1.customer_id &&
              w2.customer_id == s1.customer_id &&
              (s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
                 s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" &&
                 s1.dyear == 2001 && s2.dyear == 2002 && c1.dyear == 2001 && c2.dyear == 2002 &&
                 w1.dyear == 2001 && w2.dyear == 2002 && s1.year_total > 0 && c1.year_total > 0 &&
                 w1.year_total > 0 &&
                 (fn ->
                    if c1.year_total > 0 do
                      c2.year_total / c1.year_total
                    else
                      nil
                    end
                  end).() >
                   (fn ->
                      if s1.year_total > 0 do
                        s2.year_total / s1.year_total
                      else
                        nil
                      end
                    end).() &&
                 (fn ->
                    if c1.year_total > 0 do
                      c2.year_total / c1.year_total
                    else
                      nil
                    end
                  end).() >
                   (fn ->
                      if w1.year_total > 0 do
                        w2.year_total / w1.year_total
                      else
                        nil
                      end
                    end).()),
            do:
              {%{
                 customer_id: s2.customer_id,
                 customer_first_name: s2.customer_first_name,
                 customer_last_name: s2.customer_last_name,
                 customer_login: s2.customer_login
               },
               [s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login]}
          ),
          fn {_, k} -> k end
        ),
        fn {v, _} -> v end
      )

    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
