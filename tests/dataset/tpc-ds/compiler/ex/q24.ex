# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_ticket_number: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_store_sk: 1, ss_net_paid: 100}, %{ss_ticket_number: 2, ss_item_sk: 2, ss_customer_sk: 2, ss_store_sk: 1, ss_net_paid: 50}]
    store_returns = [%{sr_ticket_number: 1, sr_item_sk: 1}, %{sr_ticket_number: 2, sr_item_sk: 2}]
    store = [%{s_store_sk: 1, s_store_name: "Store1", s_market_id: 5, s_state: "CA", s_zip: "12345"}]
    item = [%{i_item_sk: 1, i_color: "RED", i_current_price: 10, i_manager_id: 1, i_units: "EA", i_size: "M"}, %{i_item_sk: 2, i_color: "BLUE", i_current_price: 20, i_manager_id: 2, i_units: "EA", i_size: "L"}]
    customer = [%{c_customer_sk: 1, c_first_name: "Ann", c_last_name: "Smith", c_current_addr_sk: 1, c_birth_country: "Canada"}, %{c_customer_sk: 2, c_first_name: "Bob", c_last_name: "Jones", c_current_addr_sk: 2, c_birth_country: "USA"}]
    customer_address = [%{ca_address_sk: 1, ca_state: "CA", ca_country: "USA", ca_zip: "12345"}, %{ca_address_sk: 2, ca_state: "CA", ca_country: "USA", ca_zip: "54321"}]
    ssales = (fn ->
  src = store_sales
  rows = _query(src, [
    %{items: store_returns, on: fn ss, sr -> ((ss.ss_ticket_number == sr.sr_ticket_number) && (ss.ss_item_sk == sr.sr_item_sk)) end},
    %{items: store, on: fn ss, sr, s -> (ss.ss_store_sk == s.s_store_sk) end},
    %{items: item, on: fn ss, sr, s, i -> (ss.ss_item_sk == i.i_item_sk) end},
    %{items: customer, on: fn ss, sr, s, i, c -> (ss.ss_customer_sk == c.c_customer_sk) end},
    %{items: customer_address, on: fn ss, sr, s, i, c, ca -> (c.c_current_addr_sk == ca.ca_address_sk) end}
  ], %{select: fn ss, sr, s, i, c, ca -> [ss, sr, s, i, c, ca] end, where: fn ss, sr, s, i, c, ca -> (((c.c_birth_country != strings.ToUpper(ca.ca_country)) && (s.s_zip == ca.ca_zip)) && (s.s_market_id == 5)) end })
  groups = _group_by(rows, fn ss, sr, s, i, c, ca -> %{last: c.c_last_name, first: c.c_first_name, store_name: s.s_store_name, color: i.i_color} end)
  groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ss, sr, s, i, c, ca] -> ss end)} end)
  items = groups
  Enum.map(items, fn g -> %{c_last_name: g.key.last, c_first_name: g.key.first, s_store_name: g.key.store_name, color: g.key.color, netpaid: _sum(for x <- g.items, do: x.ss_net_paid)} end)
end).()
    avg_paid = _avg(for x <- ssales, do: x.netpaid)
    result = for x <- Enum.sort_by(ssales, fn x -> [x.c_last_name, x.c_first_name, x.s_store_name] end), ((x.color == "RED") && (x.netpaid > (0.05 * avg_paid))), do: %{c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid}
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
