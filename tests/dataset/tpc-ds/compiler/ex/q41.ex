# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:47Z
defmodule Main do
  @lower 100
  def main do
    # item :: list(map())
    item = [
      %{
        product_name: "Blue Shirt",
        manufact_id: 100,
        manufact: 1,
        category: "Women",
        color: "blue",
        units: "pack",
        size: "M"
      },
      %{
        product_name: "Red Dress",
        manufact_id: 120,
        manufact: 1,
        category: "Women",
        color: "red",
        units: "pack",
        size: "M"
      },
      %{
        product_name: "Pants",
        manufact_id: 200,
        manufact: 2,
        category: "Men",
        color: "black",
        units: "pair",
        size: "L"
      }
    ]

    # result :: list(any())
    result =
      for i1 <- Enum.sort_by(item, fn i1 -> i1.product_name end),
          i1.manufact_id >= @lower && i1.manufact_id <= @lower + 40 &&
            _count(
              for i2 <- item, i2.manufact == i1.manufact && i2.category == i1.category, do: i2
            ) > 1,
          do: i1.product_name

    _json(result)
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
