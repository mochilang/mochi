# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_sold_date_sk: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_ticket_number: 1, ss_quantity: 10, ss_store_sk: 1}]
    store_returns = [%{sr_returned_date_sk: 2, sr_customer_sk: 1, sr_item_sk: 1, sr_ticket_number: 1, sr_return_quantity: 2}]
    catalog_sales = [%{cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 5}]
    date_dim = [%{d_date_sk: 1, d_quarter_name: "1998Q1"}, %{d_date_sk: 2, d_quarter_name: "1998Q2"}, %{d_date_sk: 3, d_quarter_name: "1998Q3"}]
    store = [%{s_store_sk: 1, s_state: "CA"}]
    item = [%{i_item_sk: 1, i_item_id: "I1", i_item_desc: "Item 1"}]
    joined = for ss <- store_sales, sr <- store_returns, cs <- catalog_sales, d1 <- date_dim, d2 <- date_dim, d3 <- date_dim, s <- store, i <- item, (((ss.ss_customer_sk == sr.sr_customer_sk) && (ss.ss_item_sk == sr.sr_item_sk)) && (ss.ss_ticket_number == sr.sr_ticket_number)) && ((sr.sr_customer_sk == cs.cs_bill_customer_sk) && (sr.sr_item_sk == cs.cs_item_sk)) && ((ss.ss_sold_date_sk == d1.d_date_sk) && (d1.d_quarter_name == "1998Q1")) && ((sr.sr_returned_date_sk == d2.d_date_sk) && (if is_map(["1998Q1", "1998Q2", "1998Q3"]), do: Map.has_key?(["1998Q1", "1998Q2", "1998Q3"], d2.d_quarter_name), else: Enum.member?(["1998Q1", "1998Q2", "1998Q3"], d2.d_quarter_name))) && ((cs.cs_sold_date_sk == d3.d_date_sk) && (if is_map(["1998Q1", "1998Q2", "1998Q3"]), do: Map.has_key?(["1998Q1", "1998Q2", "1998Q3"], d3.d_quarter_name), else: Enum.member?(["1998Q1", "1998Q2", "1998Q3"], d3.d_quarter_name))) && (ss.ss_store_sk == s.s_store_sk) && (ss.ss_item_sk == i.i_item_sk), do: %{qty: ss.ss_quantity, ret: sr.sr_return_quantity, csq: cs.cs_quantity, i_item_id: i.i_item_id, i_item_desc: i.i_item_desc, s_state: s.s_state}
    result = Enum.map(_group_by(joined, fn j -> %{i_item_id: j.i_item_id, i_item_desc: j.i_item_desc, s_state: j.s_state} end), fn g -> %{i_item_id: g.key.i_item_id, i_item_desc: g.key.i_item_desc, s_state: g.key.s_state, store_sales_quantitycount: _count(for v <- g.items, do: v), store_sales_quantityave: _avg(for x <- g.items, do: x.qty), store_sales_quantitystdev: 0, store_sales_quantitycov: 0, store_returns_quantitycount: _count(for v <- g.items, do: v), store_returns_quantityave: _avg(for x <- g.items, do: x.ret), store_returns_quantitystdev: 0, store_returns_quantitycov: 0, catalog_sales_quantitycount: _count(for v <- g.items, do: v), catalog_sales_quantityave: _avg(for x <- g.items, do: x.csq), catalog_sales_quantitystdev: 0, catalog_sales_quantitycov: 0} end)
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defp _count(v) do
  cond do
    is_list(v) -> length(v)
    is_map(v) and Map.has_key?(v, :items) -> length(v[:items])
    true -> raise "count() expects list or group"
  end
end

  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
