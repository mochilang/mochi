# Generated by Mochi Elixir compiler
defmodule Main do
  def abs(x) do
    try do
      if (x >= 0) do
        x
      else
        -x
      end
    catch {:return, v} -> v end
  end
  
  def main do
    v2 = [%{d_year: 2020, item: "A", avg_monthly_sales: 100, sum_sales: 120}, %{d_year: 2020, item: "B", avg_monthly_sales: 80, sum_sales: 70}, %{d_year: 2019, item: "C", avg_monthly_sales: 50, sum_sales: 60}]
    year = 2020
    orderby = "item"
    result = for v <- Enum.sort_by(v2, fn v -> [(v.sum_sales - v.avg_monthly_sales), v.item] end), (((v.d_year == year) && (v.avg_monthly_sales > 0)) && ((abs((v.sum_sales - v.avg_monthly_sales)) / v.avg_monthly_sales) > 0.1)), do: v
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
