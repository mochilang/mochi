# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:37:18Z
defmodule Main do
  def main do
    # store_sales :: list(map())
    store_sales = [
      %{ss_sold_time_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1},
      %{ss_sold_time_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1},
      %{ss_sold_time_sk: 2, ss_hdemo_sk: 1, ss_store_sk: 1}
    ]

    # household_demographics :: list(map())
    household_demographics = [%{hd_demo_sk: 1, hd_dep_count: 3}]
    # time_dim :: list(map())
    time_dim = [
      %{t_time_sk: 1, t_hour: 20, t_minute: 35},
      %{t_time_sk: 2, t_hour: 20, t_minute: 45}
    ]

    # store :: list(map())
    store = [%{s_store_sk: 1, s_store_name: "ese"}]
    # result :: integer()
    result =
      _count(
        for ss <- store_sales,
            hd <- household_demographics,
            t <- time_dim,
            s <- store,
            ss.ss_hdemo_sk == hd.hd_demo_sk && ss.ss_sold_time_sk == t.t_time_sk &&
              ss.ss_store_sk == s.s_store_sk &&
              (t.t_hour == 20 && t.t_minute >= 30 && hd.hd_dep_count == 3 &&
                 s.s_store_name == "ese"),
            do: ss
      )

    _json(result)
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
