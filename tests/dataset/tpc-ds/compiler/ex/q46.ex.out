# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_ticket_number: 1, ss_customer_sk: 1, ss_addr_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1, ss_sold_date_sk: 1, ss_coupon_amt: 5, ss_net_profit: 20}]
    date_dim = [%{d_date_sk: 1, d_dow: 6, d_year: 2020}]
    store = [%{s_store_sk: 1, s_city: "CityA"}]
    household_demographics = [%{hd_demo_sk: 1, hd_dep_count: 2, hd_vehicle_count: 0}]
    customer_address = [%{ca_address_sk: 1, ca_city: "Portland"}, %{ca_address_sk: 2, ca_city: "Seattle"}]
    customer = [%{c_customer_sk: 1, c_last_name: "Doe", c_first_name: "John", c_current_addr_sk: 2}]
    depcnt = 2
    vehcnt = 0
    year = 2020
    cities = ["CityA"]
    dn = (fn ->
  src = store_sales
  rows = _query(src, [
    %{items: date_dim, on: fn ss, d -> (ss.ss_sold_date_sk == d.d_date_sk) end},
    %{items: store, on: fn ss, d, s -> (ss.ss_store_sk == s.s_store_sk) end},
    %{items: household_demographics, on: fn ss, d, s, hd -> (ss.ss_hdemo_sk == hd.hd_demo_sk) end},
    %{items: customer_address, on: fn ss, d, s, hd, ca -> (ss.ss_addr_sk == ca.ca_address_sk) end}
  ], %{select: fn ss, d, s, hd, ca -> [ss, d, s, hd, ca] end, where: fn ss, d, s, hd, ca -> (((((hd.hd_dep_count == depcnt) || (hd.hd_vehicle_count == vehcnt)) && (if is_map([6, 0]), do: Map.has_key?([6, 0], d.d_dow), else: Enum.member?([6, 0], d.d_dow))) && (d.d_year == year)) && (if is_map(cities), do: Map.has_key?(cities, s.s_city), else: Enum.member?(cities, s.s_city))) end })
  groups = _group_by(rows, fn ss, d, s, hd, ca -> %{ss_ticket_number: ss.ss_ticket_number, ss_customer_sk: ss.ss_customer_sk, ca_city: ca.ca_city} end)
  groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ss, d, s, hd, ca] -> ss end)} end)
  items = groups
  Enum.map(items, fn g -> %{ss_ticket_number: g.key.ss_ticket_number, ss_customer_sk: g.key.ss_customer_sk, bought_city: g.key.ca_city, amt: _sum(for x <- g.items, do: x.ss.ss_coupon_amt), profit: _sum(for x <- g.items, do: x.ss.ss_net_profit)} end)
end).()
    base = Enum.map(Enum.sort_by((for dnrec <- dn, c <- customer, current_addr <- customer_address, ((dnrec.ss_customer_sk == c.c_customer_sk) && (c.c_current_addr_sk == current_addr.ca_address_sk)) && ((current_addr.ca_city != dnrec.bought_city)), do: {%{c_last_name: c.c_last_name, c_first_name: c.c_first_name, ca_city: current_addr.ca_city, bought_city: dnrec.bought_city, ss_ticket_number: dnrec.ss_ticket_number, amt: dnrec.amt, profit: dnrec.profit}, [c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number]}), fn {_, k} -> k end), fn {v, _} -> v end)
    result = base
    _json(result)
  end
  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
