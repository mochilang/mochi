# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    t = [%{id: 1, val: 52}]
    tmp = String.downcase("ignore")
    vals = for r <- t, do: r.val
    result = _first(vals)
    _json(result)
  end
  defp _first(v) do
  cond do
    is_map(v) and Map.has_key?(v, :items) ->
      if length(v[:items]) == 0, do: nil, else: hd(v[:items])
    is_list(v) ->
      if v == [], do: nil, else: hd(v)
    true -> nil
  end
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
