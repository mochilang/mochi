# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:34:54Z
defmodule Main do
  @year 2020
  @gmt 0
  def main do
    # date_dim :: list(map())
    date_dim = [
      %{date_sk: 1, d_day_name: "Sunday", d_year: 2020},
      %{date_sk: 2, d_day_name: "Monday", d_year: 2020},
      %{date_sk: 3, d_day_name: "Tuesday", d_year: 2020},
      %{date_sk: 4, d_day_name: "Wednesday", d_year: 2020},
      %{date_sk: 5, d_day_name: "Thursday", d_year: 2020},
      %{date_sk: 6, d_day_name: "Friday", d_year: 2020},
      %{date_sk: 7, d_day_name: "Saturday", d_year: 2020}
    ]

    # store :: list(map())
    store = [%{store_sk: 1, store_id: "S1", store_name: "Main", gmt_offset: 0}]
    # store_sales :: list(map())
    store_sales = [
      %{sold_date_sk: 1, store_sk: 1, sales_price: 10},
      %{sold_date_sk: 2, store_sk: 1, sales_price: 20},
      %{sold_date_sk: 3, store_sk: 1, sales_price: 30},
      %{sold_date_sk: 4, store_sk: 1, sales_price: 40},
      %{sold_date_sk: 5, store_sk: 1, sales_price: 50},
      %{sold_date_sk: 6, store_sk: 1, sales_price: 60},
      %{sold_date_sk: 7, store_sk: 1, sales_price: 70}
    ]

    # records :: list(map())
    records =
      for d <- date_dim,
          ss <- store_sales,
          s <- store,
          ss.sold_date_sk == d.date_sk && ss.store_sk == s.store_sk &&
            (s.gmt_offset == @gmt && d.d_year == @year),
          do: %{
            d_day_name: d.d_day_name,
            s_store_name: s.store_name,
            s_store_id: s.store_id,
            price: ss.sales_price
          }

    # base :: list(map())
    base =
      Enum.map(_group_by(records, fn r -> %{name: r.s_store_name, id: r.s_store_id} end), fn g ->
        %{
          s_store_name: g.key.name,
          s_store_id: g.key.id,
          sun_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Sunday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          mon_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Monday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          tue_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Tuesday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          wed_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Wednesday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          thu_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Thursday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          fri_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Friday" do
                         x.price
                       else
                         0
                       end
                     end).()
            ),
          sat_sales:
            _sum(
              for x <- g.items,
                  do:
                    (fn ->
                       if x.d_day_name == "Saturday" do
                         x.price
                       else
                         0
                       end
                     end).()
            )
        }
      end)

    # result :: list(map())
    result = base
    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
