# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = []
    store_returns = []
    store = []
    catalog_sales = []
    catalog_returns = []
    catalog_page = []
    web_sales = []
    web_returns = []
    web_site = []
    date_dim = []

    ss =
      (fn ->
         src = store_sales

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn ss, d -> ss.ss_sold_date_sk == d.d_date_sk end},
               %{items: store, on: fn ss, d, s -> ss.ss_store_sk == s.s_store_sk end}
             ],
             %{
               select: fn ss, d, s -> [ss, d, s] end,
               where: fn ss, d, s -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn ss, d, s -> s.s_store_id end)

         groups =
           Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ss, d, s] -> ss end)} end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "store channel",
             id: "store" <> to_string(g.key),
             sales: _sum(for x <- g, do: x.ss.ss_ext_sales_price),
             returns: 0,
             profit: _sum(for x <- g, do: x.ss.ss_net_profit),
             profit_loss: 0
           }
         end)
       end).()

    sr =
      (fn ->
         src = store_returns

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn sr, d -> sr.sr_returned_date_sk == d.d_date_sk end},
               %{items: store, on: fn sr, d, s -> sr.sr_store_sk == s.s_store_sk end}
             ],
             %{
               select: fn sr, d, s -> [sr, d, s] end,
               where: fn sr, d, s -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn sr, d, s -> s.s_store_id end)

         groups =
           Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [sr, d, s] -> sr end)} end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "store channel",
             id: "store" <> to_string(g.key),
             sales: 0,
             returns: _sum(for x <- g, do: x.sr.sr_return_amt),
             profit: 0,
             profit_loss: _sum(for x <- g, do: x.sr.sr_net_loss)
           }
         end)
       end).()

    cs =
      (fn ->
         src = catalog_sales

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn cs, d -> cs.cs_sold_date_sk == d.d_date_sk end},
               %{
                 items: catalog_page,
                 on: fn cs, d, cp -> cs.cs_catalog_page_sk == cp.cp_catalog_page_sk end
               }
             ],
             %{
               select: fn cs, d, cp -> [cs, d, cp] end,
               where: fn cs, d, cp -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn cs, d, cp -> cp.cp_catalog_page_id end)

         groups =
           Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [cs, d, cp] -> cs end)} end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "catalog channel",
             id: "catalog_page" <> to_string(g.key),
             sales: _sum(for x <- g, do: x.cs.cs_ext_sales_price),
             returns: 0,
             profit: _sum(for x <- g, do: x.cs.cs_net_profit),
             profit_loss: 0
           }
         end)
       end).()

    cr =
      (fn ->
         src = catalog_returns

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn cr, d -> cr.cr_returned_date_sk == d.d_date_sk end},
               %{
                 items: catalog_page,
                 on: fn cr, d, cp -> cr.cr_catalog_page_sk == cp.cp_catalog_page_sk end
               }
             ],
             %{
               select: fn cr, d, cp -> [cr, d, cp] end,
               where: fn cr, d, cp -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn cr, d, cp -> cp.cp_catalog_page_id end)

         groups =
           Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [cr, d, cp] -> cr end)} end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "catalog channel",
             id: "catalog_page" <> to_string(g.key),
             sales: 0,
             returns: _sum(for x <- g, do: x.cr.cr_return_amount),
             profit: 0,
             profit_loss: _sum(for x <- g, do: x.cr.cr_net_loss)
           }
         end)
       end).()

    ws =
      (fn ->
         src = web_sales

         rows =
           _query(
             src,
             [
               %{items: date_dim, on: fn ws, d -> ws.ws_sold_date_sk == d.d_date_sk end},
               %{items: web_site, on: fn ws, d, w -> ws.ws_web_site_sk == w.web_site_sk end}
             ],
             %{
               select: fn ws, d, w -> [ws, d, w] end,
               where: fn ws, d, w -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn ws, d, w -> w.web_site_id end)

         groups =
           Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ws, d, w] -> ws end)} end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "web channel",
             id: "web_site" <> to_string(g.key),
             sales: _sum(for x <- g, do: x.ws.ws_ext_sales_price),
             returns: 0,
             profit: _sum(for x <- g, do: x.ws.ws_net_profit),
             profit_loss: 0
           }
         end)
       end).()

    wr =
      (fn ->
         src = web_returns

         rows =
           _query(
             src,
             [
               %{
                 items: web_sales,
                 on: fn wr, ws ->
                   wr.wr_item_sk == ws.ws_item_sk && wr.wr_order_number == ws.ws_order_number
                 end
               },
               %{items: date_dim, on: fn wr, ws, d -> wr.wr_returned_date_sk == d.d_date_sk end},
               %{items: web_site, on: fn wr, ws, d, w -> ws.ws_web_site_sk == w.web_site_sk end}
             ],
             %{
               select: fn wr, ws, d, w -> [wr, ws, d, w] end,
               where: fn wr, ws, d, w -> d.d_date >= "1998-12-01" && d.d_date <= "1998-12-15" end
             }
           )

         groups = _group_by(rows, fn wr, ws, d, w -> w.web_site_id end)

         groups =
           Enum.map(groups, fn g ->
             %{g | items: Enum.map(g.items, fn [wr, ws, d, w] -> wr end)}
           end)

         items = groups

         Enum.map(items, fn g ->
           %{
             channel: "web channel",
             id: "web_site" <> to_string(g.key),
             sales: 0,
             returns: _sum(for x <- g, do: x.wr.wr_return_amt),
             profit: 0,
             profit_loss: _sum(for x <- g, do: x.wr.wr_net_loss)
           }
         end)
       end).()

    per_channel = _concat(_concat(_union(ss, sr), _union(cs, cr)), _union(ws, wr))

    result =
      (fn ->
         src = per_channel
         rows = _query(src, [], %{select: fn p -> [p] end, sortKey: fn g -> g.key.channel end})
         groups = _group_by(rows, fn p -> %{channel: p.channel, id: p.id} end)
         groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [p] -> p end)} end)
         items = groups
         items = Enum.sort_by(items, fn g -> g.key.channel end)

         Enum.map(items, fn g ->
           %{
             channel: g.key.channel,
             id: g.key.id,
             sales: _sum(for x <- g, do: x.p.sales),
             returns: _sum(for x <- g, do: x.p.returns),
             profit: _sum(for x <- g, do: x.p.profit) - _sum(for x <- g, do: x.p.profit_loss)
           }
         end)
       end).()

    _json(result)
  end

  defp _concat(a, b) do
    if is_list(a) and is_list(b) do
      a ++ b
    else
      raise "concat expects lists"
    end
  end

  defmodule Group do
    defstruct key: nil, items: []
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key = keyfn.(it)
        ks = to_string(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)
    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined = if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined
        joined
      end)

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> v[:items]
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
