# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    store_sales = [%{ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10}, %{ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10}]
    date_dim = [%{d_date_sk: 1, d_year: 2000, d_moy: 1}]
    item = [%{i_item_sk: 1}, %{i_item_sk: 2}]
    catalog_sales = [%{cs_sold_date_sk: 1, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 2, cs_list_price: 10}, %{cs_sold_date_sk: 1, cs_item_sk: 2, cs_bill_customer_sk: 2, cs_quantity: 2, cs_list_price: 10}]
    web_sales = [%{ws_sold_date_sk: 1, ws_item_sk: 1, ws_bill_customer_sk: 1, ws_quantity: 3, ws_list_price: 10}, %{ws_sold_date_sk: 1, ws_item_sk: 2, ws_bill_customer_sk: 2, ws_quantity: 1, ws_list_price: 10}]
    frequent_ss_items = (fn ->
  src = store_sales
  rows = _query(src, [
    %{items: date_dim, on: fn ss, d -> (ss.ss_sold_date_sk == d.d_date_sk) end},
    %{items: item, on: fn ss, d, i -> (ss.ss_item_sk == i.i_item_sk) end}
  ], %{select: fn ss, d, i -> [ss, d, i] end, where: fn ss, d, i -> (d.d_year == 2000) end })
  groups = _group_by(rows, fn ss, d, i -> %{item_sk: i.i_item_sk, date_sk: d.d_date_sk} end)
  groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [ss, d, i] -> ss end)} end)
  items = groups
  Enum.map(items, fn g -> g.key.item_sk end)
end).()
    customer_totals = Enum.map(_group_by(store_sales, fn ss -> ss.ss_customer_sk end), fn g -> %{cust: g.key, sales: _sum(for x <- g.items, do: (x.ss_quantity * x.ss_sales_price))} end)
    max_sales = _max(for c <- customer_totals, do: c.sales)
    best_ss_customer = for c <- customer_totals, (c.sales > (0.95 * max_sales)), do: c.cust
    catalog = for cs <- catalog_sales, d <- date_dim, ((cs.cs_sold_date_sk == d.d_date_sk)) && (((((d.d_year == 2000) && (d.d_moy == 1)) && (if is_map(best_ss_customer), do: Map.has_key?(best_ss_customer, cs.cs_bill_customer_sk), else: Enum.member?(best_ss_customer, cs.cs_bill_customer_sk))) && (if is_map(frequent_ss_items), do: Map.has_key?(frequent_ss_items, cs.cs_item_sk), else: Enum.member?(frequent_ss_items, cs.cs_item_sk)))), do: (cs.cs_quantity * cs.cs_list_price)
    web = for ws <- web_sales, d <- date_dim, ((ws.ws_sold_date_sk == d.d_date_sk)) && (((((d.d_year == 2000) && (d.d_moy == 1)) && (if is_map(best_ss_customer), do: Map.has_key?(best_ss_customer, ws.ws_bill_customer_sk), else: Enum.member?(best_ss_customer, ws.ws_bill_customer_sk))) && (if is_map(frequent_ss_items), do: Map.has_key?(frequent_ss_items, ws.ws_item_sk), else: Enum.member?(frequent_ss_items, ws.ws_item_sk)))), do: (ws.ws_quantity * ws.ws_list_price)
    result = (_sum(catalog) + _sum(web))
    _json(result)
  end
  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _max(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "max() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    hd = hd(list)
    Enum.reduce(tl(list), hd, fn it, acc ->
      cond do
        is_binary(acc) and is_binary(it) -> if it > acc, do: it, else: acc
        true -> if Kernel.>(it, acc), do: it, else: acc
      end
    end)
  end
end

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
