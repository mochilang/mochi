# Generated by Mochi Elixir compiler
defmodule Main do
  def distinct(xs) do
    try do
      out = []
      _ = out
      {out} = Enum.reduce(_iter(xs), {out}, fn x, {out} ->
        if !contains.(out, x) do
          out = append.(out, x)
        end
        {out}
      end)
      _ = out
      throw {:return, out}
    catch {:return, v} -> v end
  end
  
  def concat(a, b) do
    try do
      out = a
      _ = out
      {out} = Enum.reduce(_iter(b), {out}, fn x, {out} ->
        out = append.(out, x)
        {out}
      end)
      _ = out
      throw {:return, out}
    catch {:return, v} -> v end
  end
  
  def to_list(xs) do
    try do
      throw {:return, xs}
    catch {:return, v} -> v end
  end
  
  def main do
    store_sales = [%{cust: "A"}, %{cust: "B"}, %{cust: "B"}, %{cust: "C"}]
    catalog_sales = [%{cust: "A"}, %{cust: "C"}, %{cust: "D"}]
    web_sales = [%{cust: "A"}, %{cust: "D"}]
    result = 87
    _json(result)
  end
  defp _iter(v) do
  if is_map(v) do
    Map.keys(v)
  else
    v
  end
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  end
Main.main()
