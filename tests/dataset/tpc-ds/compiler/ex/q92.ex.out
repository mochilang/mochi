# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    web_sales = [%{ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 1}, %{ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 1}, %{ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 2}]
    item = [%{i_item_sk: 1, i_manufact_id: 1}]
    date_dim = [%{d_date_sk: 1, d_date: "2000-01-02"}]
    sum_amt = _sum(for ws <- web_sales, do: ws.ws_ext_discount_amt)
    avg_amt = _avg(for ws <- web_sales, do: ws.ws_ext_discount_amt)
    result = (fn ->
  if (sum_amt > (avg_amt * 1.3)) do
    sum_amt
  else
    0
  end
end).()
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
