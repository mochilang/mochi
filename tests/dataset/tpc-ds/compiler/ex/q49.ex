# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:35:12Z
defmodule Main do
	def main do
		# web :: list(map())
		web = [%{item: "A", return_ratio: 0.2, currency_ratio: 0.3, return_rank: 1, currency_rank: 1}, %{item: "B", return_ratio: 0.5, currency_ratio: 0.6, return_rank: 2, currency_rank: 2}]
		# catalog :: list(map())
		catalog = [%{item: "A", return_ratio: 0.3, currency_ratio: 0.4, return_rank: 1, currency_rank: 1}]
		# store :: list(map())
		store = [%{item: "A", return_ratio: 0.25, currency_ratio: 0.35, return_rank: 1, currency_rank: 1}]
		# tmp :: list(any())
		tmp = _concat(_concat(for w <- web, ((w.return_rank <= 10) || (w.currency_rank <= 10)), do: %{channel: "web", item: w.item, return_ratio: w.return_ratio, return_rank: w.return_rank, currency_rank: w.currency_rank}, for c <- catalog, ((c.return_rank <= 10) || (c.currency_rank <= 10)), do: %{channel: "catalog", item: c.item, return_ratio: c.return_ratio, return_rank: c.return_rank, currency_rank: c.currency_rank}), for s <- store, ((s.return_rank <= 10) || (s.currency_rank <= 10)), do: %{channel: "store", item: s.item, return_ratio: s.return_ratio, return_rank: s.return_rank, currency_rank: s.currency_rank})
		# result :: list(any())
		result = for r <- Enum.sort_by(tmp, fn r -> [r.channel, r.return_rank, r.currency_rank, r.item] end), do: r
		_json(result)
	end
	defp _concat(a, b) do
  if is_list(a) and is_list(b) do
    a ++ b
  else
    raise "concat expects lists"
  end
end

	defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

	end
Main.main()
