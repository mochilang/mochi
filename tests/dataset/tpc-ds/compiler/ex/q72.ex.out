# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    catalog_sales = [%{cs_item_sk: 1, cs_order_number: 1, cs_quantity: 1, cs_sold_date_sk: 1, cs_ship_date_sk: 3, cs_bill_cdemo_sk: 1, cs_bill_hdemo_sk: 1, cs_promo_sk: nil}]
    inventory = [%{inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 2, inv_quantity_on_hand: 0}]
    warehouse = [%{w_warehouse_sk: 1, w_warehouse_name: "Main"}]
    item = [%{i_item_sk: 1, i_item_desc: "ItemA"}]
    customer_demographics = [%{cd_demo_sk: 1, cd_marital_status: "M"}]
    household_demographics = [%{hd_demo_sk: 1, hd_buy_potential: "5001-10000"}]
    date_dim = [%{d_date_sk: 1, d_week_seq: 10, d_date: 1, d_year: 2000}, %{d_date_sk: 2, d_week_seq: 10, d_date: 1, d_year: 2000}, %{d_date_sk: 3, d_week_seq: 10, d_date: 7, d_year: 2000}]
    result = (fn ->
  src = catalog_sales
  rows = _query(src, [
    %{items: inventory, on: fn cs, inv -> (inv.inv_item_sk == cs.cs_item_sk) end},
    %{items: warehouse, on: fn cs, inv, w -> (w.w_warehouse_sk == inv.inv_warehouse_sk) end},
    %{items: item, on: fn cs, inv, w, i -> (i.i_item_sk == cs.cs_item_sk) end},
    %{items: customer_demographics, on: fn cs, inv, w, i, cd -> (cd.cd_demo_sk == cs.cs_bill_cdemo_sk) end},
    %{items: household_demographics, on: fn cs, inv, w, i, cd, hd -> (hd.hd_demo_sk == cs.cs_bill_hdemo_sk) end},
    %{items: date_dim, on: fn cs, inv, w, i, cd, hd, d1 -> (d1.d_date_sk == cs.cs_sold_date_sk) end},
    %{items: date_dim, on: fn cs, inv, w, i, cd, hd, d1, d2 -> (d2.d_date_sk == inv.inv_date_sk) end},
    %{items: date_dim, on: fn cs, inv, w, i, cd, hd, d1, d2, d3 -> (d3.d_date_sk == cs.cs_ship_date_sk) end}
  ], %{select: fn cs, inv, w, i, cd, hd, d1, d2, d3 -> [cs, inv, w, i, cd, hd, d1, d2, d3] end, where: fn cs, inv, w, i, cd, hd, d1, d2, d3 -> ((((((d1.d_week_seq == d2.d_week_seq) && (inv.inv_quantity_on_hand < cs.cs_quantity)) && (d3.d_date > (d1.d_date + 5))) && (hd.hd_buy_potential == "5001-10000")) && (d1.d_year == 2000)) && (cd.cd_marital_status == "M")) end })
  groups = _group_by(rows, fn cs, inv, w, i, cd, hd, d1, d2, d3 -> %{item_desc: i.i_item_desc, warehouse: w.w_warehouse_name, week_seq: d1.d_week_seq} end)
  groups = Enum.map(groups, fn g -> %{g | items: Enum.map(g.items, fn [cs, inv, w, i, cd, hd, d1, d2, d3] -> cs end)} end)
  items = groups
  Enum.map(items, fn g -> %{i_item_desc: g.key.item_desc, w_warehouse_name: g.key.warehouse, d_week_seq: g.key.week_seq, no_promo: _count(for x <- g.items, (x.cs_promo_sk == nil), do: x), promo: _count(for x <- g.items, (x.cs_promo_sk != nil), do: x), total_cnt: _count(g)} end)
end).()
    _json(result)
  end
  defp _count(v) do
  cond do
    is_list(v) -> length(v)
    is_map(v) and Map.has_key?(v, :items) -> length(v[:items])
    true -> raise "count() expects list or group"
  end
end

  defmodule Group do
  defstruct key: nil, items: []
end

  defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  end
Main.main()
