# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:35:17Z
defmodule Main do
  @dms 1
  @spec cumulative(list()) :: list()
  def cumulative(xs) do
    try do
      out = []
      _ = out
      acc = 0
      _ = acc

      {acc, out} =
        Enum.reduce(_iter(xs), {acc, out}, fn x, {acc, out} ->
          acc = acc + x.price
          out = out ++ [%{date: x.date, cum: acc}]
          {acc, out}
        end)

      _ = acc
      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # web_sales :: list(map())
    web_sales = [%{item: 1, date: 1, price: 30}, %{item: 1, date: 2, price: 20}]
    # store_sales :: list(map())
    store_sales = [%{item: 1, date: 1, price: 5}, %{item: 1, date: 2, price: 19}]
    # web_cum :: list()
    web_cum =
      cumulative(
        for w <- Enum.sort_by(web_sales, fn w -> w.date end), do: %{date: w.date, price: w.price}
      )

    # store_cum :: list()
    store_cum =
      cumulative(
        for s <- Enum.sort_by(store_sales, fn s -> s.date end),
            do: %{date: s.date, price: s.price}
      )

    # joined :: list(map())
    joined =
      for w <- web_cum,
          s <- store_cum,
          w.date == s.date && w.cum > s.cum,
          do: %{item_sk: 1, d_date: w.date}

    # result :: list(map())
    result = joined
    _json(result)
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
