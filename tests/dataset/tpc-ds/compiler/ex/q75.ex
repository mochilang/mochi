# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:36:23Z
defmodule Main do
	def main do
		# date_dim :: list(map())
		date_dim = [%{d_date_sk: 1, d_year: 2000}, %{d_date_sk: 2, d_year: 2001}]
		# store_sales :: list(map())
		store_sales = [%{ss_item_sk: 1, ss_quantity: 50, ss_sales_price: 500, ss_sold_date_sk: 1}, %{ss_item_sk: 1, ss_quantity: 40, ss_sales_price: 400, ss_sold_date_sk: 2}]
		# web_sales :: list(map())
		web_sales = [%{ws_item_sk: 1, ws_quantity: 30, ws_sales_price: 300, ws_sold_date_sk: 1}, %{ws_item_sk: 1, ws_quantity: 25, ws_sales_price: 250, ws_sold_date_sk: 2}]
		# catalog_sales :: list(map())
		catalog_sales = [%{cs_item_sk: 1, cs_quantity: 20, cs_sales_price: 200, cs_sold_date_sk: 1}, %{cs_item_sk: 1, cs_quantity: 15, cs_sales_price: 150, cs_sold_date_sk: 2}]
		# item :: list(map())
		item = [%{i_item_sk: 1, i_brand_id: 1, i_class_id: 2, i_category_id: 3, i_manufact_id: 4, i_category: "Electronics"}]
		# sales_detail :: list(any())
		sales_detail = _concat(_concat(for ss <- store_sales, d <- date_dim, (d.d_date_sk == ss.ss_sold_date_sk), do: %{d_year: d.d_year, i_item_sk: ss.ss_item_sk, quantity: ss.ss_quantity, amount: ss.ss_sales_price}, for ws <- web_sales, d <- date_dim, (d.d_date_sk == ws.ws_sold_date_sk), do: %{d_year: d.d_year, i_item_sk: ws.ws_item_sk, quantity: ws.ws_quantity, amount: ws.ws_sales_price}), for cs <- catalog_sales, d <- date_dim, (d.d_date_sk == cs.cs_sold_date_sk), do: %{d_year: d.d_year, i_item_sk: cs.cs_item_sk, quantity: cs.cs_quantity, amount: cs.cs_sales_price})
		# all_sales :: list(map())
		all_sales = (fn ->
	src = sales_detail
	rows = _query(src, [
		%{items: item, on: fn sd, i -> (i.i_item_sk == sd.i_item_sk) end}
	], %{select: fn sd, i -> Map.merge(Map.merge(sd, i), %{ sd: sd, i: i }) end, where: fn [sd, i] -> (i.i_category == "Electronics") end })
	groups = _group_by(rows, fn %{sd: sd, i: i} -> %{year: sd.d_year, brand_id: i.i_brand_id, class_id: i.i_class_id, category_id: i.i_category_id, manuf_id: i.i_manufact_id} end)
	items = groups
	Enum.map(items, fn g -> %{d_year: g.key.year, i_brand_id: g.key.brand_id, i_class_id: g.key.class_id, i_category_id: g.key.category_id, i_manufact_id: g.key.manuf_id, sales_cnt: _sum(for x <- g.items, do: x.sd.quantity), sales_amt: _sum(for x <- g.items, do: x.sd.amount)} end)
end).()
		# prev_yr :: any()
		prev_yr = _first(for a <- all_sales, (a.d_year == 2000), do: a)
		# curr_yr :: any()
		curr_yr = _first(for a <- all_sales, (a.d_year == 2001), do: a)
		# result :: list(map())
		result = (fn ->
	if ((curr_yr.sales_cnt / prev_yr.sales_cnt) < 0.9) do
		[%{prev_year: prev_yr.d_year, year: curr_yr.d_year, i_brand_id: curr_yr.i_brand_id, i_class_id: curr_yr.i_class_id, i_category_id: curr_yr.i_category_id, i_manufact_id: curr_yr.i_manufact_id, prev_yr_cnt: prev_yr.sales_cnt, curr_yr_cnt: curr_yr.sales_cnt, sales_cnt_diff: (curr_yr.sales_cnt - prev_yr.sales_cnt), sales_amt_diff: (curr_yr.sales_amt - prev_yr.sales_amt)}]
	else
		[]
	end
end).()
		_json(result)
	end
	defp _concat(a, b) do
  if is_list(a) and is_list(b) do
    a ++ b
  else
    raise "concat expects lists"
  end
end

	defp _first(v) do
  cond do
    is_map(v) and Map.has_key?(v, :items) ->
      items = Map.get(v, :items)
      if length(items) == 0, do: nil, else: hd(items)
    is_list(v) ->
      if v == [], do: nil, else: hd(v)
    true -> nil
  end
end

	defmodule Group do
  defstruct key: nil, items: []
  def fetch(g, k) do
    case k do
      :key -> {:ok, g.key}
      :items -> {:ok, g.items}
      _ -> :error
    end
  end
  def get_and_update(g, k, f) do
    case k do
      :key ->
        {v, nv} = f.(g.key)
        {v, %{g | key: nv}}
      :items ->
        {v, nv} = f.(g.items)
        {v, %{g | items: nv}}
      _ -> {nil, g}
    end
  end
end

	defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = if is_list(it) do
      arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
      if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
    else
      keyfn.(it)
    end
    ks = :erlang.phash2(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
    end
    val = if is_list(it) and length(it) == 1, do: hd(it), else: it
    groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

	defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

	defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined
  end)
  items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; (if n < length(items), do: Enum.drop(items, n), else: [])), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; (if n < length(items), do: Enum.take(items, n), else: items)), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

	defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

	end
Main.main()
