# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    catalog_sales = [%{cs_item_sk: 1, cs_sold_date_sk: 1, cs_ext_discount_amt: 5}, %{cs_item_sk: 1, cs_sold_date_sk: 2, cs_ext_discount_amt: 10}, %{cs_item_sk: 1, cs_sold_date_sk: 3, cs_ext_discount_amt: 20}]
    item = [%{i_item_sk: 1, i_manufact_id: 1}]
    date_dim = [%{d_date_sk: 1, d_year: 2000}, %{d_date_sk: 2, d_year: 2000}, %{d_date_sk: 3, d_year: 2000}]
    filtered = for cs <- catalog_sales, i <- item, d <- date_dim, ((cs.cs_item_sk == i.i_item_sk) && (cs.cs_sold_date_sk == d.d_date_sk)) && (((i.i_manufact_id == 1) && (d.d_year == 2000))), do: cs.cs_ext_discount_amt
    avg_discount = _avg(filtered)
    result = _sum(for x <- filtered, (x > (avg_discount * 1.3)), do: x)
    _json(result)
  end
  defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :items) -> v[:items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

  end
Main.main()
