# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    ss = [%{ss_sold_year: 1998, ss_item_sk: 1, ss_customer_sk: 1, ss_qty: 10, ss_wc: 50, ss_sp: 100}]
    ws = [%{ws_sold_year: 1998, ws_item_sk: 1, ws_customer_sk: 1, ws_qty: 5, ws_wc: 25, ws_sp: 50}]
    cs = [%{cs_sold_year: 1998, cs_item_sk: 1, cs_customer_sk: 1, cs_qty: 3, cs_wc: 15, cs_sp: 30}]
    result = (fn ->
  src = ss
  _query(src, [
    %{items: ws, on: fn s, w -> (((w.ws_sold_year == s.ss_sold_year) && (w.ws_item_sk == s.ss_item_sk)) && (w.ws_customer_sk == s.ss_customer_sk)) end, left: true},
    %{items: cs, on: fn s, w, c -> (((c.cs_sold_year == s.ss_sold_year) && (c.cs_item_sk == s.ss_item_sk)) && (c.cs_customer_sk == s.ss_customer_sk)) end, left: true}
  ], %{select: fn s, w, c -> %{ss_sold_year: s.ss_sold_year, ss_item_sk: s.ss_item_sk, ss_customer_sk: s.ss_customer_sk, ratio: (s.ss_qty / ((fn ->
  if (w == nil) do
    0
  else
    w.ws_qty
  end
end).() + (fn ->
  if (c == nil) do
    0
  else
    c.cs_qty
  end
end).())), store_qty: s.ss_qty, store_wholesale_cost: s.ss_wc, store_sales_price: s.ss_sp, other_chan_qty: ((fn ->
  if (w == nil) do
    0
  else
    w.ws_qty
  end
end).() + (fn ->
  if (c == nil) do
    0
  else
    c.cs_qty
  end
end).()), other_chan_wholesale_cost: ((fn ->
  if (w == nil) do
    0
  else
    w.ws_wc
  end
end).() + (fn ->
  if (c == nil) do
    0
  else
    c.cs_wc
  end
end).()), other_chan_sales_price: ((fn ->
  if (w == nil) do
    0
  else
    w.ws_sp
  end
end).() + (fn ->
  if (c == nil) do
    0
  else
    c.cs_sp
  end
end).())} end, where: fn s, w, c -> ((((fn ->
  if (w == nil) do
    0
  else
    w.ws_qty
  end
end).() > 0) || ((fn ->
  if (c == nil) do
    0
  else
    c.cs_qty
  end
end).() > 0)) && (s.ss_sold_year == 1998)) end })
end).()
    _json(result)
  end
  defp _escape_json(<<>>), do: ""
defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
defp _to_json(v) when is_number(v), do: to_string(v)
defp _to_json(v) when is_boolean(v), do: if v, do: "true", else: "false"
defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"
defp _to_json(v) when is_map(v) do
  keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()
  inner = Enum.map_join(keys, ",", fn k -> _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k))) end)
  "{" <> inner <> "}"
end
defp _to_json(_), do: "null"
defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = (if where, do: Enum.filter(items, fn r -> where.(r) end), else: items)
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = (if !m, do: acc ++ [left ++ [nil]], else: acc)
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, (if items == [], do: 0, else: length(hd(items))))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = (if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true)
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = (if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined)
    joined
  end)
  items = (if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items)
  items = (if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items)
  items = (if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items)
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

  end
Main.main()
