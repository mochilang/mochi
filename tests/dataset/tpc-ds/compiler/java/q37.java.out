// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:20Z
// q37.mochi
import java.util.*;

class IItemSkIItemIdIItemDescICurrentPriceIManufactId {
    int i_item_sk;
    String i_item_id;
    String i_item_desc;
    double i_current_price;
    int i_manufact_id;
    IItemSkIItemIdIItemDescICurrentPriceIManufactId(int i_item_sk, String i_item_id, String i_item_desc, double i_current_price, int i_manufact_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_current_price = i_current_price;
        this.i_manufact_id = i_manufact_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIItemIdIItemDescICurrentPriceIManufactId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_current_price, other.i_current_price) && Objects.equals(this.i_manufact_id, other.i_manufact_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id);
    }
    int size() { return 5; }
}
class InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand {
    int inv_item_sk;
    int inv_warehouse_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(int inv_item_sk, int inv_warehouse_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_warehouse_sk = inv_warehouse_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_warehouse_sk, other.inv_warehouse_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_warehouse_sk, inv_date_sk, inv_quantity_on_hand);
    }
    int size() { return 4; }
}
class DDateSkDDate {
    int d_date_sk;
    String d_date;
    DDateSkDDate(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDate other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
    int size() { return 2; }
}
class CsItemSkCsSoldDateSk {
    int cs_item_sk;
    int cs_sold_date_sk;
    CsItemSkCsSoldDateSk(int cs_item_sk, int cs_sold_date_sk) {
        this.cs_item_sk = cs_item_sk;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsItemSkCsSoldDateSk other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_sold_date_sk);
    }
    int size() { return 2; }
}
class IInv {
    IItemSkIItemIdIItemDescICurrentPriceIManufactId i;
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv;
    IInv(IItemSkIItemIdIItemDescICurrentPriceIManufactId i, InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv) {
        this.i = i;
        this.inv = inv;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IInv other)) return false;
        return Objects.equals(this.i, other.i) && Objects.equals(this.inv, other.inv);
    }
    @Override public int hashCode() {
        return Objects.hash(i, inv);
    }
    int size() { return 2; }
}
class IdDescPrice {
    String id;
    String desc;
    double price;
    IdDescPrice(String id, String desc, double price) {
        this.id = id;
        this.desc = desc;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdDescPrice other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.desc, other.desc) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(id, desc, price);
    }
    int size() { return 3; }
}
class IItemIdIItemDescICurrentPrice {
    String i_item_id;
    String i_item_desc;
    double i_current_price;
    IItemIdIItemDescICurrentPrice(String i_item_id, String i_item_desc, double i_current_price) {
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_current_price = i_current_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemIdIItemDescICurrentPrice other)) return false;
        return Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_current_price, other.i_current_price);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_id, i_item_desc, i_current_price);
    }
    int size() { return 3; }
}
public class Q37 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IItemSkIItemIdIItemDescICurrentPriceIManufactId> item = new ArrayList<>(Arrays.asList(new IItemSkIItemIdIItemDescICurrentPriceIManufactId(1, "I1", "Item1", 30.000000, 800), new IItemSkIItemIdIItemDescICurrentPriceIManufactId(2, "I2", "Item2", 60.000000, 801)));
    List<InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand> inventory = new ArrayList<>(Arrays.asList(new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 1, 200), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(2, 1, 1, 300)));
    List<DDateSkDDate> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDate(1, "2000-01-15")));
    List<CsItemSkCsSoldDateSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsItemSkCsSoldDateSk(1, 1)));
    List<IItemIdIItemDescICurrentPrice> result = (new java.util.function.Supplier<List<IItemIdIItemDescICurrentPrice>>(){public List<IItemIdIItemDescICurrentPrice> get(){
    List<IItemIdIItemDescICurrentPrice> res0 = new ArrayList<>();
    Map<IdDescPrice,List<IInv>> groups1 = new LinkedHashMap<>();
    for (var i : item) {
        for (var inv : inventory) {
            if (!(i.i_item_sk == inv.inv_item_sk)) continue;
            for (var d : date_dim) {
                if (!(inv.inv_date_sk == d.d_date_sk)) continue;
                for (var cs : catalog_sales) {
                    if (!(cs.cs_item_sk == i.i_item_sk)) continue;
                    if (!(i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500)) continue;
                    IInv row2 = new IInv(i, inv);
                    IdDescPrice key3 = new IdDescPrice(i.i_item_id, i.i_item_desc, i.i_current_price);
                    List<IInv> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<IdDescPrice,List<IInv>> __e : groups1.entrySet()) {
        IdDescPrice g_key = __e.getKey();
        Group<IdDescPrice,IInv> g = new Group<>(g_key, __e.getValue());
        res0.add(new IItemIdIItemDescICurrentPrice(g.key.id, g.key.desc, g.key.price));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IItemIdIItemDescICurrentPrice("I1", "Item1", 30.000000))))) throw new AssertionError("expect failed");
    }
}
