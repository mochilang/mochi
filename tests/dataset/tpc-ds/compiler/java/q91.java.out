public class Main {
    static class CallCenter {
        int cc_call_center_sk;
        String cc_call_center_id;
        String cc_name;
        String cc_manager;
        
        CallCenter(int cc_call_center_sk, String cc_call_center_id, String cc_name, String cc_manager) {
            this.cc_call_center_sk = cc_call_center_sk;
            this.cc_call_center_id = cc_call_center_id;
            this.cc_name = cc_name;
            this.cc_manager = cc_manager;
        }
        
        CallCenter() {}
    }
    
    static class CatalogReturn {
        int cr_call_center_sk;
        int cr_returned_date_sk;
        int cr_returning_customer_sk;
        double cr_net_loss;
        
        CatalogReturn(int cr_call_center_sk, int cr_returned_date_sk, int cr_returning_customer_sk, double cr_net_loss) {
            this.cr_call_center_sk = cr_call_center_sk;
            this.cr_returned_date_sk = cr_returned_date_sk;
            this.cr_returning_customer_sk = cr_returning_customer_sk;
            this.cr_net_loss = cr_net_loss;
        }
        
        CatalogReturn() {}
    }
    
    static class DateDim {
        int d_date_sk;
        int d_year;
        int d_moy;
        
        DateDim(int d_date_sk, int d_year, int d_moy) {
            this.d_date_sk = d_date_sk;
            this.d_year = d_year;
            this.d_moy = d_moy;
        }
        
        DateDim() {}
    }
    
    static class Customer {
        int c_customer_sk;
        int c_current_cdemo_sk;
        int c_current_hdemo_sk;
        int c_current_addr_sk;
        
        Customer(int c_customer_sk, int c_current_cdemo_sk, int c_current_hdemo_sk, int c_current_addr_sk) {
            this.c_customer_sk = c_customer_sk;
            this.c_current_cdemo_sk = c_current_cdemo_sk;
            this.c_current_hdemo_sk = c_current_hdemo_sk;
            this.c_current_addr_sk = c_current_addr_sk;
        }
        
        Customer() {}
    }
    
    static class CustomerAddress {
        int ca_address_sk;
        int ca_gmt_offset;
        
        CustomerAddress(int ca_address_sk, int ca_gmt_offset) {
            this.ca_address_sk = ca_address_sk;
            this.ca_gmt_offset = ca_gmt_offset;
        }
        
        CustomerAddress() {}
    }
    
    static class CustomerDemographics {
        int cd_demo_sk;
        String cd_marital_status;
        String cd_education_status;
        
        CustomerDemographics(int cd_demo_sk, String cd_marital_status, String cd_education_status) {
            this.cd_demo_sk = cd_demo_sk;
            this.cd_marital_status = cd_marital_status;
            this.cd_education_status = cd_education_status;
        }
        
        CustomerDemographics() {}
    }
    
    static class HouseholdDemographics {
        int hd_demo_sk;
        String hd_buy_potential;
        
        HouseholdDemographics(int hd_demo_sk, String hd_buy_potential) {
            this.hd_demo_sk = hd_demo_sk;
            this.hd_buy_potential = hd_buy_potential;
        }
        
        HouseholdDemographics() {}
    }
    
    static void test_TPCDS_Q91_returns() {
        expect((result == new java.util.HashMap<>(java.util.Map.of("Call_Center", "CC1", "Call_Center_Name", "Main", "Manager", "Alice", "Returns_Loss", 10))));
    }
    
    static Object[] call_center = new Object[]{new java.util.HashMap<>(java.util.Map.of("cc_call_center_sk", 1, "cc_call_center_id", "CC1", "cc_name", "Main", "cc_manager", "Alice"))};
    
    static Object[] catalog_returns = new Object[]{new java.util.HashMap<>(java.util.Map.of("cr_call_center_sk", 1, "cr_returned_date_sk", 1, "cr_returning_customer_sk", 1, "cr_net_loss", 10))};
    
    static Object[] date_dim = new Object[]{new java.util.HashMap<>(java.util.Map.of("d_date_sk", 1, "d_year", 2001, "d_moy", 5))};
    
    static Object[] customer = new Object[]{new java.util.HashMap<>(java.util.Map.of("c_customer_sk", 1, "c_current_cdemo_sk", 1, "c_current_hdemo_sk", 1, "c_current_addr_sk", 1))};
    
    static Object[] customer_demographics = new Object[]{new java.util.HashMap<>(java.util.Map.of("cd_demo_sk", 1, "cd_marital_status", "M", "cd_education_status", "Unknown"))};
    
    static Object[] household_demographics = new Object[]{new java.util.HashMap<>(java.util.Map.of("hd_demo_sk", 1, "hd_buy_potential", "1001-5000"))};
    
    static Object[] customer_address = new Object[]{new java.util.HashMap<>(java.util.Map.of("ca_address_sk", 1, "ca_gmt_offset", (-6)))};
    
    static Object result = first.apply((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(call_center);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
            new _JoinSpec(_toList(catalog_returns), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; return (cc.get("cc_call_center_sk") == cr.get("cr_call_center_sk")); }, false, false),
            new _JoinSpec(_toList(date_dim), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; return (cr.get("cr_returned_date_sk") == d.get("d_date_sk")); }, false, false),
            new _JoinSpec(_toList(customer), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; return (cr.get("cr_returning_customer_sk") == c.get("c_customer_sk")); }, false, false),
            new _JoinSpec(_toList(customer_demographics), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; Object cd = a[4]; return (c.get("c_current_cdemo_sk") == cd.get("cd_demo_sk")); }, false, false),
            new _JoinSpec(_toList(household_demographics), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; Object cd = a[4]; Object hd = a[5]; return (c.get("c_current_hdemo_sk") == hd.get("hd_demo_sk")); }, false, false),
            new _JoinSpec(_toList(customer_address), (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; Object cd = a[4]; Object hd = a[5]; Object ca = a[6]; return (c.get("c_current_addr_sk") == ca.get("ca_address_sk")); }, false, false)
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; Object cd = a[4]; Object hd = a[5]; Object ca = a[6]; return new java.util.HashMap<>(java.util.Map.of("Call_Center", g.get("key").id, "Call_Center_Name", g.get("key").name, "Manager", g.get("key").mgr, "Returns_Loss", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("cr_net_loss"); }, null, null, -1, -1));
    }
}).get()))); }, (Object[] a) -> { Object cc = a[0]; Object cr = a[1]; Object d = a[2]; Object c = a[3]; Object cd = a[4]; Object hd = a[5]; Object ca = a[6]; return ((((((d.get("d_year") == 2001) && (d.get("d_moy") == 5)) && (cd.get("cd_marital_status") == "M")) && (cd.get("cd_education_status") == "Unknown")) && (hd.get("hd_buy_potential") == "1001-5000")) && (ca.get("ca_gmt_offset") == (-6))); }, null, -1, -1));
    }
}).get());
    
    public static void main(String[] args) {
        test_TPCDS_Q91_returns();
        _json(result);
    }
    
    static double _sum(Object v) {
        java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
        double sum = 0;
        for (Object it : items) {
            if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("sum() expects numbers");
        }
        return sum;
    }
    
    static void expect(boolean cond) {
        if (!cond) throw new RuntimeException("expect failed");
    }
    
    static void _json(Object v) {
        System.out.println(_toJson(v));
    }
    
    static java.util.List<Object> _toList(Object v) {
        if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
        int n = java.lang.reflect.Array.getLength(v);
        java.util.List<Object> out = new java.util.ArrayList<>(n);
        for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
        return out;
    }
    
    static class _JoinSpec {
        java.util.List<Object> items;
        java.util.function.Function<Object[],Boolean> on;
        boolean left;
        boolean right;
        _JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
            this.items=items; this.on=on; this.left=left; this.right=right;
        }
    }
    
    static class _QueryOpts {
        java.util.function.Function<Object[],Object> selectFn;
        java.util.function.Function<Object[],Boolean> where;
        java.util.function.Function<Object[],Object> sortKey;
        int skip; int take;
        _QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
            this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
        }
    }
    static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
        java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
        for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
        for (_JoinSpec j : joins) {
            java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
            java.util.List<Object> jitems = j.items;
            if (j.right && j.left) {
                boolean[] matched = new boolean[jitems.size()];
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (int ri=0; ri<jitems.size(); ri++) {
                        Object right = jitems.get(ri);
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; matched[ri] = true;
                        java.util.List<Object> row = new java.util.ArrayList<>(left);
                        row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
                for (int ri=0; ri<jitems.size(); ri++) {
                    if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
                }
            } else if (j.right) {
                for (Object right : jitems) {
                    boolean m = false;
                    for (java.util.List<Object> left : items) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
                }
            } else {
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (Object right : jitems) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
            items = joined;
        }
        if (opts.where != null) {
            java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
            for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
            items = filtered;
        }
        if (opts.sortKey != null) {
            class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
            java.util.List<Pair> pairs = new java.util.ArrayList<>();
            for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
            pairs.sort((a,b) -> {
                Object ak=a.key, bk=b.key;
                if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
                if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
                return ak.toString().compareTo(bk.toString());
            });
            for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
        }
        if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
        if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
        java.util.List<Object> res = new java.util.ArrayList<>();
        for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
        return res;
    }
}
