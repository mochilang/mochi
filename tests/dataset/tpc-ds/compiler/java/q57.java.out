// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:36Z
// q57.mochi
import java.util.*;

class ItemCallDatePrice {
    int item;
    int call;
    int date;
    double price;
    ItemCallDatePrice(int item, int call, int date, double price) {
        this.item = item;
        this.call = call;
        this.date = date;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemCallDatePrice other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.call, other.call) && Objects.equals(this.date, other.date) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(item, call, date, price);
    }
    int size() { return 4; }
}
class IItemSkICategoryIBrand {
    int i_item_sk;
    String i_category;
    String i_brand;
    IItemSkICategoryIBrand(int i_item_sk, String i_category, String i_brand) {
        this.i_item_sk = i_item_sk;
        this.i_category = i_category;
        this.i_brand = i_brand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkICategoryIBrand other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_brand, other.i_brand);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_category, i_brand);
    }
    int size() { return 3; }
}
class CcCallCenterSkCcName {
    int cc_call_center_sk;
    String cc_name;
    CcCallCenterSkCcName(int cc_call_center_sk, String cc_name) {
        this.cc_call_center_sk = cc_call_center_sk;
        this.cc_name = cc_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CcCallCenterSkCcName other)) return false;
        return Objects.equals(this.cc_call_center_sk, other.cc_call_center_sk) && Objects.equals(this.cc_name, other.cc_name);
    }
    @Override public int hashCode() {
        return Objects.hash(cc_call_center_sk, cc_name);
    }
    int size() { return 2; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class CsIDCc {
    ItemCallDatePrice cs;
    IItemSkICategoryIBrand i;
    DDateSkDYearDMoy d;
    CcCallCenterSkCcName cc;
    CsIDCc(ItemCallDatePrice cs, IItemSkICategoryIBrand i, DDateSkDYearDMoy d, CcCallCenterSkCcName cc) {
        this.cs = cs;
        this.i = i;
        this.d = d;
        this.cc = cc;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsIDCc other)) return false;
        return Objects.equals(this.cs, other.cs) && Objects.equals(this.i, other.i) && Objects.equals(this.d, other.d) && Objects.equals(this.cc, other.cc);
    }
    @Override public int hashCode() {
        return Objects.hash(cs, i, d, cc);
    }
    int size() { return 4; }
}
class CatCallYear {
    String cat;
    String call;
    int year;
    CatCallYear(String cat, String call, int year) {
        this.cat = cat;
        this.call = call;
        this.year = year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatCallYear other)) return false;
        return Objects.equals(this.cat, other.cat) && Objects.equals(this.call, other.call) && Objects.equals(this.year, other.year);
    }
    @Override public int hashCode() {
        return Objects.hash(cat, call, year);
    }
    int size() { return 3; }
}
class CatCallYearSumSales {
    String cat;
    String call;
    int year;
    int sum_sales;
    CatCallYearSumSales(String cat, String call, int year, int sum_sales) {
        this.cat = cat;
        this.call = call;
        this.year = year;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatCallYearSumSales other)) return false;
        return Objects.equals(this.cat, other.cat) && Objects.equals(this.call, other.call) && Objects.equals(this.year, other.year) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(cat, call, year, sum_sales);
    }
    int size() { return 4; }
}
class CatCall {
    String cat;
    String call;
    CatCall(String cat, String call) {
        this.cat = cat;
        this.call = call;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatCall other)) return false;
        return Objects.equals(this.cat, other.cat) && Objects.equals(this.call, other.call);
    }
    @Override public int hashCode() {
        return Objects.hash(cat, call);
    }
    int size() { return 2; }
}
class CatCallAvgSales {
    String cat;
    String call;
    double avg_sales;
    CatCallAvgSales(String cat, String call, double avg_sales) {
        this.cat = cat;
        this.call = call;
        this.avg_sales = avg_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatCallAvgSales other)) return false;
        return Objects.equals(this.cat, other.cat) && Objects.equals(this.call, other.call) && Objects.equals(this.avg_sales, other.avg_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(cat, call, avg_sales);
    }
    int size() { return 3; }
}
class ICategorySumSales {
    String i_category;
    int sum_sales;
    ICategorySumSales(String i_category, int sum_sales) {
        this.i_category = i_category;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ICategorySumSales other)) return false;
        return Objects.equals(this.i_category, other.i_category) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(i_category, sum_sales);
    }
    int size() { return 2; }
}
public class Q57 {
    static double abs(double x) {
        if (x >= 0.000000) {
            return x;
        }
        return -x;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemCallDatePrice> catalog_sales = new ArrayList<>(Arrays.asList(new ItemCallDatePrice(1, 1, 1, 20.000000), new ItemCallDatePrice(1, 1, 2, 20.000000), new ItemCallDatePrice(1, 1, 3, 40.000000)));
    List<IItemSkICategoryIBrand> item = new ArrayList<>(Arrays.asList(new IItemSkICategoryIBrand(1, "A", "B")));
    List<CcCallCenterSkCcName> call_center = new ArrayList<>(Arrays.asList(new CcCallCenterSkCcName(1, "C1")));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2000, 11), new DDateSkDYearDMoy(2, 2000, 12), new DDateSkDYearDMoy(3, 2001, 1)));
    List<CatCallYearSumSales> grouped = (new java.util.function.Supplier<List<CatCallYearSumSales>>(){public List<CatCallYearSumSales> get(){
    List<CatCallYearSumSales> res0 = new ArrayList<>();
    Map<CatCallYear,List<CsIDCc>> groups1 = new LinkedHashMap<>();
    for (var cs : catalog_sales) {
        for (var i : item) {
            if (!(cs.item == i.i_item_sk)) continue;
            for (var d : date_dim) {
                if (!(cs.date == d.d_date_sk)) continue;
                for (var cc : call_center) {
                    if (!(cs.call == cc.cc_call_center_sk)) continue;
                    CsIDCc row2 = new CsIDCc(cs, i, d, cc);
                    CatCallYear key3 = new CatCallYear(i.i_category, cc.cc_name, d.d_year);
                    List<CsIDCc> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<CatCallYear,List<CsIDCc>> __e : groups1.entrySet()) {
        CatCallYear g_key = __e.getKey();
        Group<CatCallYear,CsIDCc> g = new Group<>(g_key, __e.getValue());
        res0.add(new CatCallYearSumSales(g.key.cat, g.key.call, g.key.year, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<CatCallAvgSales> avg_by_year = (new java.util.function.Supplier<List<CatCallAvgSales>>(){public List<CatCallAvgSales> get(){
    List<CatCallAvgSales> res6 = new ArrayList<>();
    Map<CatCall,List<CatCallYearSumSales>> groups7 = new LinkedHashMap<>();
    for (var g : grouped) {
        var row8 = g;
        CatCall key9 = new CatCall(g.cat, g.call);
        List<CatCallYearSumSales> bucket10 = groups7.get(key9);
        if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
        bucket10.add(row8);
    }
    for (Map.Entry<CatCall,List<CatCallYearSumSales>> __e : groups7.entrySet()) {
        CatCall gg_key = __e.getKey();
        Group<CatCall,CatCallYearSumSales> gg = new Group<>(gg_key, __e.getValue());
        res6.add(new CatCallAvgSales(gg.key.cat, gg.key.call, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res11 = new ArrayList<>();
    for (var x : gg) {
        res11.add(x.sum_sales);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res6;
}}).get();
    List<ICategorySumSales> result = (new java.util.function.Supplier<List<ICategorySumSales>>(){public List<ICategorySumSales> get(){
    List<ICategorySumSales> res12 = new ArrayList<>();
    for (var g : grouped) {
        for (var a : avg_by_year) {
            if (!(Objects.equals(g.cat, a.cat) && Objects.equals(g.call, a.call))) continue;
            if (!(g.year == 2001 && a.avg_sales > 0 && abs(g.sum_sales - a.avg_sales) / a.avg_sales > 0.100000)) continue;
            res12.add(new ICategorySumSales(g.cat, g.sum_sales));
        }
    }
    return res12;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList()))) throw new AssertionError("expect failed");
    }
}
