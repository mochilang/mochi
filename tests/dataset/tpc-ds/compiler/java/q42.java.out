// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:24Z
// q42.mochi
import java.util.*;

class SoldDateSkItemSkExtSalesPrice {
    int sold_date_sk;
    int item_sk;
    double ext_sales_price;
    SoldDateSkItemSkExtSalesPrice(int sold_date_sk, int item_sk, double ext_sales_price) {
        this.sold_date_sk = sold_date_sk;
        this.item_sk = item_sk;
        this.ext_sales_price = ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SoldDateSkItemSkExtSalesPrice other)) return false;
        return Objects.equals(this.sold_date_sk, other.sold_date_sk) && Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.ext_sales_price, other.ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(sold_date_sk, item_sk, ext_sales_price);
    }
    int size() { return 3; }
}
class IItemSkIManagerIdICategoryIdICategory {
    int i_item_sk;
    int i_manager_id;
    int i_category_id;
    String i_category;
    IItemSkIManagerIdICategoryIdICategory(int i_item_sk, int i_manager_id, int i_category_id, String i_category) {
        this.i_item_sk = i_item_sk;
        this.i_manager_id = i_manager_id;
        this.i_category_id = i_category_id;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIManagerIdICategoryIdICategory other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_manager_id, other.i_manager_id) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_manager_id, i_category_id, i_category);
    }
    int size() { return 4; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class DYearICategoryIdICategoryPrice {
    int d_year;
    int i_category_id;
    String i_category;
    double price;
    DYearICategoryIdICategoryPrice(int d_year, int i_category_id, String i_category, double price) {
        this.d_year = d_year;
        this.i_category_id = i_category_id;
        this.i_category = i_category;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearICategoryIdICategoryPrice other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, i_category_id, i_category, price);
    }
    int size() { return 4; }
}
class DYearICategoryIdICategory {
    int d_year;
    int i_category_id;
    String i_category;
    DYearICategoryIdICategory(int d_year, int i_category_id, String i_category) {
        this.d_year = d_year;
        this.i_category_id = i_category_id;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearICategoryIdICategory other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, i_category_id, i_category);
    }
    int size() { return 3; }
}
class DYearICategoryIdICategorySumSsExtSalesPrice {
    int d_year;
    int i_category_id;
    String i_category;
    double sum_ss_ext_sales_price;
    DYearICategoryIdICategorySumSsExtSalesPrice(int d_year, int i_category_id, String i_category, double sum_ss_ext_sales_price) {
        this.d_year = d_year;
        this.i_category_id = i_category_id;
        this.i_category = i_category;
        this.sum_ss_ext_sales_price = sum_ss_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearICategoryIdICategorySumSsExtSalesPrice other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.sum_ss_ext_sales_price, other.sum_ss_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, i_category_id, i_category, sum_ss_ext_sales_price);
    }
    int size() { return 4; }
}
public class Q42 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SoldDateSkItemSkExtSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SoldDateSkItemSkExtSalesPrice(1, 1, 10.000000), new SoldDateSkItemSkExtSalesPrice(1, 2, 20.000000), new SoldDateSkItemSkExtSalesPrice(2, 1, 15.000000)));
    List<IItemSkIManagerIdICategoryIdICategory> item = new ArrayList<>(Arrays.asList(new IItemSkIManagerIdICategoryIdICategory(1, 1, 100, "CatA"), new IItemSkIManagerIdICategoryIdICategory(2, 1, 200, "CatB")));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2020, 5), new DDateSkDYearDMoy(2, 2021, 5)));
    int month = 5;
    int year = 2020;
    List<DYearICategoryIdICategoryPrice> records = (new java.util.function.Supplier<List<DYearICategoryIdICategoryPrice>>(){public List<DYearICategoryIdICategoryPrice> get(){
    List<DYearICategoryIdICategoryPrice> res0 = new ArrayList<>();
    for (var dt : date_dim) {
        for (var ss : store_sales) {
            if (!(ss.sold_date_sk == dt.d_date_sk)) continue;
            for (var it : item) {
                if (!(ss.item_sk == it.i_item_sk)) continue;
                if (!(it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year)) continue;
                res0.add(new DYearICategoryIdICategoryPrice(dt.d_year, it.i_category_id, it.i_category, ss.ext_sales_price));
            }
        }
    }
    return res0;
}}).get();
    List<DYearICategoryIdICategorySumSsExtSalesPrice> grouped = (new java.util.function.Supplier<List<DYearICategoryIdICategorySumSsExtSalesPrice>>(){public List<DYearICategoryIdICategorySumSsExtSalesPrice> get(){
    List<DYearICategoryIdICategorySumSsExtSalesPrice> res1 = new ArrayList<>();
    Map<DYearICategoryIdICategory,List<DYearICategoryIdICategoryPrice>> groups2 = new LinkedHashMap<>();
    for (var r : records) {
        var row3 = r;
        DYearICategoryIdICategory key4 = new DYearICategoryIdICategory(r.d_year, r.i_category_id, r.i_category);
        List<DYearICategoryIdICategoryPrice> bucket5 = groups2.get(key4);
        if (bucket5 == null) { bucket5 = new ArrayList<>(); groups2.put(key4, bucket5); }
        bucket5.add(row3);
    }
    for (Map.Entry<DYearICategoryIdICategory,List<DYearICategoryIdICategoryPrice>> __e : groups2.entrySet()) {
        DYearICategoryIdICategory g_key = __e.getKey();
        Group<DYearICategoryIdICategory,DYearICategoryIdICategoryPrice> g = new Group<>(g_key, __e.getValue());
        res1.add(new DYearICategoryIdICategorySumSsExtSalesPrice(g.key.d_year, g.key.i_category_id, g.key.i_category, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.price);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res1;
}}).get();
    List<DYearICategoryIdICategorySumSsExtSalesPrice> base = (new java.util.function.Supplier<List<DYearICategoryIdICategorySumSsExtSalesPrice>>(){public List<DYearICategoryIdICategorySumSsExtSalesPrice> get(){
    List<DYearICategoryIdICategorySumSsExtSalesPrice> res7 = new ArrayList<>();
    for (var g : grouped) {
        res7.add(g);
    }
    return res7;
}}).get();
    List<DYearICategoryIdICategorySumSsExtSalesPrice> result = base;
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new DYearICategoryIdICategorySumSsExtSalesPrice(2020, 200, "CatB", 20.000000), new DYearICategoryIdICategorySumSsExtSalesPrice(2020, 100, "CatA", 10.000000))))) throw new AssertionError("expect failed");
    }
}
