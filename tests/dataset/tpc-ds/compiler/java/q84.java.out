// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:59Z
// q84.mochi
import java.util.*;

class IdCurrentAddrCdemoHdemo {
    int id;
    int current_addr;
    int cdemo;
    int hdemo;
    IdCurrentAddrCdemoHdemo(int id, int current_addr, int cdemo, int hdemo) {
        this.id = id;
        this.current_addr = current_addr;
        this.cdemo = cdemo;
        this.hdemo = hdemo;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdCurrentAddrCdemoHdemo other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.current_addr, other.current_addr) && Objects.equals(this.cdemo, other.cdemo) && Objects.equals(this.hdemo, other.hdemo);
    }
    @Override public int hashCode() {
        return Objects.hash(id, current_addr, cdemo, hdemo);
    }
    int size() { return 4; }
}
class CaAddressSkCaCity {
    int ca_address_sk;
    String ca_city;
    CaAddressSkCaCity(int ca_address_sk, String ca_city) {
        this.ca_address_sk = ca_address_sk;
        this.ca_city = ca_city;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaCity other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_city, other.ca_city);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_city);
    }
    int size() { return 2; }
}
class CdDemoSk {
    int cd_demo_sk;
    CdDemoSk(int cd_demo_sk) {
        this.cd_demo_sk = cd_demo_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CdDemoSk other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk);
    }
    int size() { return 1; }
}
class HdDemoSkIncomeBandSk {
    int hd_demo_sk;
    int income_band_sk;
    HdDemoSkIncomeBandSk(int hd_demo_sk, int income_band_sk) {
        this.hd_demo_sk = hd_demo_sk;
        this.income_band_sk = income_band_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkIncomeBandSk other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.income_band_sk, other.income_band_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, income_band_sk);
    }
    int size() { return 2; }
}
class IbIncomeBandSkIbLowerBoundIbUpperBound {
    int ib_income_band_sk;
    int ib_lower_bound;
    int ib_upper_bound;
    IbIncomeBandSkIbLowerBoundIbUpperBound(int ib_income_band_sk, int ib_lower_bound, int ib_upper_bound) {
        this.ib_income_band_sk = ib_income_band_sk;
        this.ib_lower_bound = ib_lower_bound;
        this.ib_upper_bound = ib_upper_bound;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IbIncomeBandSkIbLowerBoundIbUpperBound other)) return false;
        return Objects.equals(this.ib_income_band_sk, other.ib_income_band_sk) && Objects.equals(this.ib_lower_bound, other.ib_lower_bound) && Objects.equals(this.ib_upper_bound, other.ib_upper_bound);
    }
    @Override public int hashCode() {
        return Objects.hash(ib_income_band_sk, ib_lower_bound, ib_upper_bound);
    }
    int size() { return 3; }
}
class SrCdemoSkAmt {
    int sr_cdemo_sk;
    double amt;
    SrCdemoSkAmt(int sr_cdemo_sk, double amt) {
        this.sr_cdemo_sk = sr_cdemo_sk;
        this.amt = amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SrCdemoSkAmt other)) return false;
        return Objects.equals(this.sr_cdemo_sk, other.sr_cdemo_sk) && Objects.equals(this.amt, other.amt);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_cdemo_sk, amt);
    }
    int size() { return 2; }
}
public class Q84 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IdCurrentAddrCdemoHdemo> customer = new ArrayList<>(Arrays.asList(new IdCurrentAddrCdemoHdemo(1, 1, 1, 1), new IdCurrentAddrCdemoHdemo(2, 1, 2, 2), new IdCurrentAddrCdemoHdemo(3, 1, 3, 1), new IdCurrentAddrCdemoHdemo(4, 1, 4, 2)));
    List<CaAddressSkCaCity> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaCity(1, "Springfield")));
    List<CdDemoSk> customer_demographics = new ArrayList<>(Arrays.asList(new CdDemoSk(1), new CdDemoSk(2), new CdDemoSk(3), new CdDemoSk(4)));
    List<HdDemoSkIncomeBandSk> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkIncomeBandSk(1, 1), new HdDemoSkIncomeBandSk(2, 1)));
    List<IbIncomeBandSkIbLowerBoundIbUpperBound> income_band = new ArrayList<>(Arrays.asList(new IbIncomeBandSkIbLowerBoundIbUpperBound(1, 0, 50000)));
    List<SrCdemoSkAmt> store_returns = new ArrayList<>(Arrays.asList(new SrCdemoSkAmt(1, 10.000000), new SrCdemoSkAmt(2, 20.000000), new SrCdemoSkAmt(3, 30.000000), new SrCdemoSkAmt(4, 24.000000)));
    double result = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res0 = new ArrayList<>();
    for (var c : customer) {
        for (var ca : customer_address) {
            if (!(c.current_addr == ca.ca_address_sk && Objects.equals(ca.ca_city, "Springfield"))) continue;
            for (var cd : customer_demographics) {
                if (!(c.cdemo == cd.cd_demo_sk)) continue;
                for (var sr : store_returns) {
                    if (!(cd.cd_demo_sk == sr.sr_cdemo_sk)) continue;
                    for (var hd : household_demographics) {
                        if (!(c.hdemo == hd.hd_demo_sk)) continue;
                        for (var ib : income_band) {
                            if (!(hd.income_band_sk == ib.ib_income_band_sk)) continue;
                            res0.add(sr.amt);
                        }
                    }
                }
            }
        }
    }
    return res0;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    json(result);
    if (!(result == 84.000000)) throw new AssertionError("expect failed");
    }
}
