// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:01Z
// q15.mochi
import java.util.*;

class CatalogSale {
    int cs_bill_customer_sk;
    double cs_sales_price;
    int cs_sold_date_sk;
    CatalogSale(int cs_bill_customer_sk, double cs_sales_price, int cs_sold_date_sk) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_sales_price = cs_sales_price;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogSale other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_sales_price, other.cs_sales_price) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, cs_sales_price, cs_sold_date_sk);
    }
}
class Customer {
    int c_customer_sk;
    int c_current_addr_sk;
    Customer(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
}
class CustomerAddress {
    int ca_address_sk;
    String ca_zip;
    String ca_state;
    CustomerAddress(int ca_address_sk, String ca_zip, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAddress other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip, ca_state);
    }
}
class DateDim {
    int d_date_sk;
    int d_qoy;
    int d_year;
    DateDim(int d_date_sk, int d_qoy, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_qoy = d_qoy;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_qoy, other.d_qoy) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_qoy, d_year);
    }
}
class CsBillCustomerSkCsSalesPriceCsSoldDateSk {
    int cs_bill_customer_sk;
    double cs_sales_price;
    int cs_sold_date_sk;
    CsBillCustomerSkCsSalesPriceCsSoldDateSk(int cs_bill_customer_sk, double cs_sales_price, int cs_sold_date_sk) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_sales_price = cs_sales_price;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsBillCustomerSkCsSalesPriceCsSoldDateSk other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_sales_price, other.cs_sales_price) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, cs_sales_price, cs_sold_date_sk);
    }
    int size() { return 3; }
}
class CCustomerSkCCurrentAddrSk {
    int c_customer_sk;
    int c_current_addr_sk;
    CCustomerSkCCurrentAddrSk(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
    int size() { return 2; }
}
class CaAddressSkCaZipCaState {
    int ca_address_sk;
    String ca_zip;
    String ca_state;
    CaAddressSkCaZipCaState(int ca_address_sk, String ca_zip, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaZipCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip, ca_state);
    }
    int size() { return 3; }
}
class DDateSkDQoyDYear {
    int d_date_sk;
    int d_qoy;
    int d_year;
    DDateSkDQoyDYear(int d_date_sk, int d_qoy, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_qoy = d_qoy;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDQoyDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_qoy, other.d_qoy) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_qoy, d_year);
    }
    int size() { return 3; }
}
class CsCaD {
    CsBillCustomerSkCsSalesPriceCsSoldDateSk cs;
    CaAddressSkCaZipCaState ca;
    DDateSkDQoyDYear d;
    CsCaD(CsBillCustomerSkCsSalesPriceCsSoldDateSk cs, CaAddressSkCaZipCaState ca, DDateSkDQoyDYear d) {
        this.cs = cs;
        this.ca = ca;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsCaD other)) return false;
        return Objects.equals(this.cs, other.cs) && Objects.equals(this.ca, other.ca) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(cs, ca, d);
    }
    int size() { return 3; }
}
class Zip {
    String zip;
    Zip(String zip) {
        this.zip = zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Zip other)) return false;
        return Objects.equals(this.zip, other.zip);
    }
    @Override public int hashCode() {
        return Objects.hash(zip);
    }
    int size() { return 1; }
}
class CaZipSumSales {
    String ca_zip;
    int sum_sales;
    CaZipSumSales(String ca_zip, int sum_sales) {
        this.ca_zip = ca_zip;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaZipSumSales other)) return false;
        return Objects.equals(this.ca_zip, other.ca_zip) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_zip, sum_sales);
    }
    int size() { return 2; }
}
public class Q15 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CsBillCustomerSkCsSalesPriceCsSoldDateSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsBillCustomerSkCsSalesPriceCsSoldDateSk(1, 600.000000, 1)));
    List<CCustomerSkCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSk(1, 1)));
    List<CaAddressSkCaZipCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaZipCaState(1, "85669", "CA")));
    List<DDateSkDQoyDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDQoyDYear(1, 1, 2000)));
    List<CaZipSumSales> filtered = (new java.util.function.Supplier<List<CaZipSumSales>>(){public List<CaZipSumSales> get(){
    List<CaZipSumSales> res0 = new ArrayList<>();
    Map<Zip,List<CsCaD>> groups1 = new LinkedHashMap<>();
    for (var cs : catalog_sales) {
        for (var c : customer) {
            if (!(cs.cs_bill_customer_sk == c.c_customer_sk)) continue;
            for (var ca : customer_address) {
                if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
                for (var d : date_dim) {
                    if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
                    if (!((Arrays.asList("85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792").contains(substr(ca.ca_zip, 0, 5)) || Arrays.asList("CA", "WA", "GA").contains(ca.ca_state) || cs.cs_sales_price > 500) && d.d_qoy == 1 && d.d_year == 2000)) continue;
                    CsCaD row2 = new CsCaD(cs, ca, d);
                    Zip key3 = new Zip(ca.ca_zip);
                    List<CsCaD> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<Zip,List<CsCaD>> __e : groups1.entrySet()) {
        Zip g_key = __e.getKey();
        Group<Zip,CsCaD> g = new Group<>(g_key, __e.getValue());
        res0.add(new CaZipSumSales(g.key.zip, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.cs_sales_price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    json(filtered);
    if (!(Objects.equals(filtered, Arrays.asList(new CaZipSumSales("85669", 600.000000))))) throw new AssertionError("expect failed");
    }
}
