// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:35Z
// q56.mochi
import java.util.*;

class ItemPrice {
    int item;
    double price;
    ItemPrice(int item, double price) {
        this.item = item;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemPrice other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(item, price);
    }
    int size() { return 2; }
}
class ItemTotal {
    int item;
    double total;
    ItemTotal(int item, double total) {
        this.item = item;
        this.total = total;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemTotal other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.total, other.total);
    }
    @Override public int hashCode() {
        return Objects.hash(item, total);
    }
    int size() { return 2; }
}
class IItemIdTotalSales {
    int i_item_id;
    double total_sales;
    IItemIdTotalSales(int i_item_id, double total_sales) {
        this.i_item_id = i_item_id;
        this.total_sales = total_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemIdTotalSales other)) return false;
        return Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.total_sales, other.total_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_id, total_sales);
    }
    int size() { return 2; }
}
public class Q56 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemPrice> store_sales = new ArrayList<>(Arrays.asList(new ItemPrice(1, 10.000000)));
    List<ItemPrice> catalog_sales = new ArrayList<>(Arrays.asList(new ItemPrice(1, 20.000000)));
    List<ItemPrice> web_sales = new ArrayList<>(Arrays.asList(new ItemPrice(1, 30.000000)));
    List<ItemTotal> ss = (new java.util.function.Supplier<List<ItemTotal>>(){public List<ItemTotal> get(){
    List<ItemTotal> res0 = new ArrayList<>();
    Map<Integer,List<ItemPrice>> groups1 = new LinkedHashMap<>();
    for (var s : store_sales) {
        var row2 = s;
        int key3 = s.item;
        List<ItemPrice> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Integer,List<ItemPrice>> __e : groups1.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,ItemPrice> g = new Group<>(g_key, __e.getValue());
        res0.add(new ItemTotal(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.price);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<ItemTotal> cs = (new java.util.function.Supplier<List<ItemTotal>>(){public List<ItemTotal> get(){
    List<ItemTotal> res6 = new ArrayList<>();
    Map<Integer,List<ItemPrice>> groups7 = new LinkedHashMap<>();
    for (var s : catalog_sales) {
        var row8 = s;
        int key9 = s.item;
        List<ItemPrice> bucket10 = groups7.get(key9);
        if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
        bucket10.add(row8);
    }
    for (Map.Entry<Integer,List<ItemPrice>> __e : groups7.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,ItemPrice> g = new Group<>(g_key, __e.getValue());
        res6.add(new ItemTotal(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.price);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res6;
}}).get();
    List<ItemTotal> ws = (new java.util.function.Supplier<List<ItemTotal>>(){public List<ItemTotal> get(){
    List<ItemTotal> res12 = new ArrayList<>();
    Map<Integer,List<ItemPrice>> groups13 = new LinkedHashMap<>();
    for (var s : web_sales) {
        var row14 = s;
        int key15 = s.item;
        List<ItemPrice> bucket16 = groups13.get(key15);
        if (bucket16 == null) { bucket16 = new ArrayList<>(); groups13.put(key15, bucket16); }
        bucket16.add(row14);
    }
    for (Map.Entry<Integer,List<ItemPrice>> __e : groups13.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,ItemPrice> g = new Group<>(g_key, __e.getValue());
        res12.add(new ItemTotal(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res17 = new ArrayList<>();
    for (var x : g) {
        res17.add(x.price);
    }
    return res17;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res12;
}}).get();
    List<ItemTotal> union = java.util.stream.Stream.concat(java.util.stream.Stream.concat(ss.stream(), cs.stream()).collect(java.util.stream.Collectors.toList()).stream(), ws.stream()).collect(java.util.stream.Collectors.toList());
    List<IItemIdTotalSales> result = (new java.util.function.Supplier<List<IItemIdTotalSales>>(){public List<IItemIdTotalSales> get(){
    List<IItemIdTotalSales> res18 = new ArrayList<>();
    Map<Integer,List<ItemTotal>> groups19 = new LinkedHashMap<>();
    for (var u : union) {
        var row20 = u;
        int key21 = u.item;
        List<ItemTotal> bucket22 = groups19.get(key21);
        if (bucket22 == null) { bucket22 = new ArrayList<>(); groups19.put(key21, bucket22); }
        bucket22.add(row20);
    }
    for (Map.Entry<Integer,List<ItemTotal>> __e : groups19.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,ItemTotal> g = new Group<>(g_key, __e.getValue());
        res18.add(new IItemIdTotalSales(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res23 = new ArrayList<>();
    for (var x : g) {
        res23.add(x.total);
    }
    return res23;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res18;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IItemIdTotalSales(1, 60.000000))))) throw new AssertionError("expect failed");
    }
}
