// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:20Z
// q38.mochi
import java.util.*;

class CCustomerSkCLastNameCFirstName {
    int c_customer_sk;
    String c_last_name;
    String c_first_name;
    CCustomerSkCLastNameCFirstName(int c_customer_sk, String c_last_name, String c_first_name) {
        this.c_customer_sk = c_customer_sk;
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCLastNameCFirstName other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_last_name, c_first_name);
    }
    int size() { return 3; }
}
class SsCustomerSkDMonthSeq {
    int ss_customer_sk;
    int d_month_seq;
    SsCustomerSkDMonthSeq(int ss_customer_sk, int d_month_seq) {
        this.ss_customer_sk = ss_customer_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkDMonthSeq other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, d_month_seq);
    }
    int size() { return 2; }
}
class CsBillCustomerSkDMonthSeq {
    int cs_bill_customer_sk;
    int d_month_seq;
    CsBillCustomerSkDMonthSeq(int cs_bill_customer_sk, int d_month_seq) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsBillCustomerSkDMonthSeq other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, d_month_seq);
    }
    int size() { return 2; }
}
class WsBillCustomerSkDMonthSeq {
    int ws_bill_customer_sk;
    int d_month_seq;
    WsBillCustomerSkDMonthSeq(int ws_bill_customer_sk, int d_month_seq) {
        this.ws_bill_customer_sk = ws_bill_customer_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsBillCustomerSkDMonthSeq other)) return false;
        return Objects.equals(this.ws_bill_customer_sk, other.ws_bill_customer_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_bill_customer_sk, d_month_seq);
    }
    int size() { return 2; }
}
public class Q38 {
    static List<any> distinct(List<any> xs) {
        List<Object> out = new ArrayList<>(Arrays.asList());
        for (any x : xs) {
            if (!contains(out, x)) {
                out.add(x);
            }
        }
        return out;
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CCustomerSkCLastNameCFirstName> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCLastNameCFirstName(1, "Smith", "John"), new CCustomerSkCLastNameCFirstName(2, "Jones", "Alice")));
    List<SsCustomerSkDMonthSeq> store_sales = new ArrayList<>(Arrays.asList(new SsCustomerSkDMonthSeq(1, 1200), new SsCustomerSkDMonthSeq(2, 1205)));
    List<CsBillCustomerSkDMonthSeq> catalog_sales = new ArrayList<>(Arrays.asList(new CsBillCustomerSkDMonthSeq(1, 1203)));
    List<WsBillCustomerSkDMonthSeq> web_sales = new ArrayList<>(Arrays.asList(new WsBillCustomerSkDMonthSeq(1, 1206)));
    List<any> store_ids = distinct((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res0 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.d_month_seq >= 1200 && s.d_month_seq <= 1211)) continue;
        res0.add(s.ss_customer_sk);
    }
    return res0;
}}).get());
    List<any> catalog_ids = distinct((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res1 = new ArrayList<>();
    for (var c : catalog_sales) {
        if (!(c.d_month_seq >= 1200 && c.d_month_seq <= 1211)) continue;
        res1.add(c.cs_bill_customer_sk);
    }
    return res1;
}}).get());
    List<any> web_ids = distinct((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res2 = new ArrayList<>();
    for (var w : web_sales) {
        if (!(w.d_month_seq >= 1200 && w.d_month_seq <= 1211)) continue;
        res2.add(w.ws_bill_customer_sk);
    }
    return res2;
}}).get());
    List<any> hot = store_ids.stream().filter(catalog_ids::contains).distinct().collect(java.util.stream.Collectors.toList()).stream().filter(web_ids::contains).distinct().collect(java.util.stream.Collectors.toList());
    int result = hot.size();
    json(result);
    if (!(result == 1)) throw new AssertionError("expect failed");
    }
}
