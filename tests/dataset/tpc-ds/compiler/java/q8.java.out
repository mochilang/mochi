// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:55Z
// q8.mochi
import java.util.*;

class SsStoreSkSsSoldDateSkSsNetProfit {
    int ss_store_sk;
    int ss_sold_date_sk;
    double ss_net_profit;
    SsStoreSkSsSoldDateSkSsNetProfit(int ss_store_sk, int ss_sold_date_sk, double ss_net_profit) {
        this.ss_store_sk = ss_store_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsStoreSkSsSoldDateSkSsNetProfit other)) return false;
        return Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_store_sk, ss_sold_date_sk, ss_net_profit);
    }
    int size() { return 3; }
}
class DDateSkDQoyDYear {
    int d_date_sk;
    int d_qoy;
    int d_year;
    DDateSkDQoyDYear(int d_date_sk, int d_qoy, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_qoy = d_qoy;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDQoyDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_qoy, other.d_qoy) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_qoy, d_year);
    }
    int size() { return 3; }
}
class SStoreSkSStoreNameSZip {
    int s_store_sk;
    String s_store_name;
    String s_zip;
    SStoreSkSStoreNameSZip(int s_store_sk, String s_store_name, String s_zip) {
        this.s_store_sk = s_store_sk;
        this.s_store_name = s_store_name;
        this.s_zip = s_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSStoreNameSZip other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.s_zip, other.s_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_store_name, s_zip);
    }
    int size() { return 3; }
}
class CaAddressSkCaZip {
    int ca_address_sk;
    String ca_zip;
    CaAddressSkCaZip(int ca_address_sk, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaZip other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip);
    }
    int size() { return 2; }
}
class CCustomerSkCCurrentAddrSkCPreferredCustFlag {
    int c_customer_sk;
    int c_current_addr_sk;
    String c_preferred_cust_flag;
    CCustomerSkCCurrentAddrSkCPreferredCustFlag(int c_customer_sk, int c_current_addr_sk, String c_preferred_cust_flag) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
        this.c_preferred_cust_flag = c_preferred_cust_flag;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSkCPreferredCustFlag other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk) && Objects.equals(this.c_preferred_cust_flag, other.c_preferred_cust_flag);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk, c_preferred_cust_flag);
    }
    int size() { return 3; }
}
class SsSCa {
    SsStoreSkSsSoldDateSkSsNetProfit ss;
    SStoreSkSStoreNameSZip s;
    CaAddressSkCaZip ca;
    SsSCa(SsStoreSkSsSoldDateSkSsNetProfit ss, SStoreSkSStoreNameSZip s, CaAddressSkCaZip ca) {
        this.ss = ss;
        this.s = s;
        this.ca = ca;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSCa other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.s, other.s) && Objects.equals(this.ca, other.ca);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, s, ca);
    }
    int size() { return 3; }
}
class SStoreNameNetProfit {
    String s_store_name;
    double net_profit;
    SStoreNameNetProfit(String s_store_name, double net_profit) {
        this.s_store_name = s_store_name;
        this.net_profit = net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreNameNetProfit other)) return false;
        return Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.net_profit, other.net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_name, net_profit);
    }
    int size() { return 2; }
}
public class Q8 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsStoreSkSsSoldDateSkSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsStoreSkSsSoldDateSkSsNetProfit(1, 1, 10.000000)));
    List<DDateSkDQoyDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDQoyDYear(1, 1, 1998)));
    List<SStoreSkSStoreNameSZip> store = new ArrayList<>(Arrays.asList(new SStoreSkSStoreNameSZip(1, "Store1", "12345")));
    List<CaAddressSkCaZip> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaZip(1, "12345")));
    List<CCustomerSkCCurrentAddrSkCPreferredCustFlag> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSkCPreferredCustFlag(1, 1, "Y")));
    reverse(substr("zip", 0, 2));
    List<String> zip_list = new ArrayList<>(Arrays.asList("12345"));
    List<SStoreNameNetProfit> result = (new java.util.function.Supplier<List<SStoreNameNetProfit>>(){public List<SStoreNameNetProfit> get(){
    List<SStoreNameNetProfit> res0 = new ArrayList<>();
    Map<String,List<SsSCa>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk && d.d_qoy == 1 && d.d_year == 1998)) continue;
            for (var s : store) {
                if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                for (var ca : customer_address) {
                    if (!(Objects.equals(substr(s.s_zip, 0, 2), substr(ca.ca_zip, 0, 2)))) continue;
                    for (var c : customer) {
                        if (!(ca.ca_address_sk == c.c_current_addr_sk && Objects.equals(c.c_preferred_cust_flag, "Y"))) continue;
                        if (!(zip_list.contains(substr(ca.ca_zip, 0, 5)))) continue;
                        SsSCa row2 = new SsSCa(ss, s, ca);
                        String key3 = s.s_store_name;
                        List<SsSCa> bucket4 = groups1.get(key3);
                        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                        bucket4.add(row2);
                    }
                }
            }
        }
    }
    for (Map.Entry<String,List<SsSCa>> __e : groups1.entrySet()) {
        String g_key = __e.getKey();
        Group<String,SsSCa> g = new Group<>(g_key, __e.getValue());
        res0.add(new SStoreNameNetProfit(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_net_profit);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SStoreNameNetProfit("Store1", 10.000000))))) throw new AssertionError("expect failed");
    }
}
