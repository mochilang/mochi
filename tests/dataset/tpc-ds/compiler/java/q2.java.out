// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:48Z
// q2.mochi
import java.util.*;

class WsSoldDateSkWsExtSalesPriceWsSoldDateName {
    int ws_sold_date_sk;
    double ws_ext_sales_price;
    String ws_sold_date_name;
    WsSoldDateSkWsExtSalesPriceWsSoldDateName(int ws_sold_date_sk, double ws_ext_sales_price, String ws_sold_date_name) {
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_ext_sales_price = ws_ext_sales_price;
        this.ws_sold_date_name = ws_sold_date_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsSoldDateSkWsExtSalesPriceWsSoldDateName other)) return false;
        return Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price) && Objects.equals(this.ws_sold_date_name, other.ws_sold_date_name);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_sold_date_sk, ws_ext_sales_price, ws_sold_date_name);
    }
    int size() { return 3; }
}
class CsSoldDateSkCsExtSalesPriceCsSoldDateName {
    int cs_sold_date_sk;
    double cs_ext_sales_price;
    String cs_sold_date_name;
    CsSoldDateSkCsExtSalesPriceCsSoldDateName(int cs_sold_date_sk, double cs_ext_sales_price, String cs_sold_date_name) {
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_ext_sales_price = cs_ext_sales_price;
        this.cs_sold_date_name = cs_sold_date_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsSoldDateSkCsExtSalesPriceCsSoldDateName other)) return false;
        return Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_ext_sales_price, other.cs_ext_sales_price) && Objects.equals(this.cs_sold_date_name, other.cs_sold_date_name);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_sold_date_sk, cs_ext_sales_price, cs_sold_date_name);
    }
    int size() { return 3; }
}
class DDateSkDWeekSeqDDayNameDYear {
    int d_date_sk;
    int d_week_seq;
    String d_day_name;
    int d_year;
    DDateSkDWeekSeqDDayNameDYear(int d_date_sk, int d_week_seq, String d_day_name, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_week_seq = d_week_seq;
        this.d_day_name = d_day_name;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDWeekSeqDDayNameDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_week_seq, other.d_week_seq) && Objects.equals(this.d_day_name, other.d_day_name) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_week_seq, d_day_name, d_year);
    }
    int size() { return 4; }
}
class SoldDateSkSalesPriceDay {
    int sold_date_sk;
    double sales_price;
    String day;
    SoldDateSkSalesPriceDay(int sold_date_sk, double sales_price, String day) {
        this.sold_date_sk = sold_date_sk;
        this.sales_price = sales_price;
        this.day = day;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SoldDateSkSalesPriceDay other)) return false;
        return Objects.equals(this.sold_date_sk, other.sold_date_sk) && Objects.equals(this.sales_price, other.sales_price) && Objects.equals(this.day, other.day);
    }
    @Override public int hashCode() {
        return Objects.hash(sold_date_sk, sales_price, day);
    }
    int size() { return 3; }
}
class WD {
    ? w;
    DDateSkDWeekSeqDDayNameDYear d;
    WD(? w, DDateSkDWeekSeqDDayNameDYear d) {
        this.w = w;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WD other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(w, d);
    }
    int size() { return 2; }
}
class WeekSeq {
    int week_seq;
    WeekSeq(int week_seq) {
        this.week_seq = week_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WeekSeq other)) return false;
        return Objects.equals(this.week_seq, other.week_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(week_seq);
    }
    int size() { return 1; }
}
class DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales {
    int d_week_seq;
    int sun_sales;
    int mon_sales;
    int tue_sales;
    int wed_sales;
    int thu_sales;
    int fri_sales;
    int sat_sales;
    DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales(int d_week_seq, int sun_sales, int mon_sales, int tue_sales, int wed_sales, int thu_sales, int fri_sales, int sat_sales) {
        this.d_week_seq = d_week_seq;
        this.sun_sales = sun_sales;
        this.mon_sales = mon_sales;
        this.tue_sales = tue_sales;
        this.wed_sales = wed_sales;
        this.thu_sales = thu_sales;
        this.fri_sales = fri_sales;
        this.sat_sales = sat_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales other)) return false;
        return Objects.equals(this.d_week_seq, other.d_week_seq) && Objects.equals(this.sun_sales, other.sun_sales) && Objects.equals(this.mon_sales, other.mon_sales) && Objects.equals(this.tue_sales, other.tue_sales) && Objects.equals(this.wed_sales, other.wed_sales) && Objects.equals(this.thu_sales, other.thu_sales) && Objects.equals(this.fri_sales, other.fri_sales) && Objects.equals(this.sat_sales, other.sat_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(d_week_seq, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales);
    }
    int size() { return 8; }
}
class DWeekSeq1SunRatioMonRatio {
    int d_week_seq1;
    double sun_ratio;
    double mon_ratio;
    DWeekSeq1SunRatioMonRatio(int d_week_seq1, double sun_ratio, double mon_ratio) {
        this.d_week_seq1 = d_week_seq1;
        this.sun_ratio = sun_ratio;
        this.mon_ratio = mon_ratio;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DWeekSeq1SunRatioMonRatio other)) return false;
        return Objects.equals(this.d_week_seq1, other.d_week_seq1) && Objects.equals(this.sun_ratio, other.sun_ratio) && Objects.equals(this.mon_ratio, other.mon_ratio);
    }
    @Override public int hashCode() {
        return Objects.hash(d_week_seq1, sun_ratio, mon_ratio);
    }
    int size() { return 3; }
}
public class Q2 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<WsSoldDateSkWsExtSalesPriceWsSoldDateName> web_sales = new ArrayList<>(Arrays.asList(new WsSoldDateSkWsExtSalesPriceWsSoldDateName(1, 5.000000, "Sunday"), new WsSoldDateSkWsExtSalesPriceWsSoldDateName(2, 5.000000, "Monday"), new WsSoldDateSkWsExtSalesPriceWsSoldDateName(8, 10.000000, "Sunday"), new WsSoldDateSkWsExtSalesPriceWsSoldDateName(9, 10.000000, "Monday")));
    List<CsSoldDateSkCsExtSalesPriceCsSoldDateName> catalog_sales = new ArrayList<>(Arrays.asList(new CsSoldDateSkCsExtSalesPriceCsSoldDateName(1, 5.000000, "Sunday"), new CsSoldDateSkCsExtSalesPriceCsSoldDateName(2, 5.000000, "Monday"), new CsSoldDateSkCsExtSalesPriceCsSoldDateName(8, 10.000000, "Sunday"), new CsSoldDateSkCsExtSalesPriceCsSoldDateName(9, 10.000000, "Monday")));
    List<DDateSkDWeekSeqDDayNameDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDWeekSeqDDayNameDYear(1, 1, "Sunday", 1998), new DDateSkDWeekSeqDDayNameDYear(2, 1, "Monday", 1998), new DDateSkDWeekSeqDDayNameDYear(8, 54, "Sunday", 1999), new DDateSkDWeekSeqDDayNameDYear(9, 54, "Monday", 1999)));
    Object wscs = java.util.stream.Stream.concat(((new java.util.function.Supplier<List<SoldDateSkSalesPriceDay>>(){public List<SoldDateSkSalesPriceDay> get(){
    List<SoldDateSkSalesPriceDay> res0 = new ArrayList<>();
    for (var ws : web_sales) {
        res0.add(new SoldDateSkSalesPriceDay(ws.ws_sold_date_sk, ws.ws_ext_sales_price, ws.ws_sold_date_name));
    }
    return res0;
}}).get()).stream(), ((new java.util.function.Supplier<List<SoldDateSkSalesPriceDay>>(){public List<SoldDateSkSalesPriceDay> get(){
    List<SoldDateSkSalesPriceDay> res1 = new ArrayList<>();
    for (var cs : catalog_sales) {
        res1.add(new SoldDateSkSalesPriceDay(cs.cs_sold_date_sk, cs.cs_ext_sales_price, cs.cs_sold_date_name));
    }
    return res1;
}}).get()).stream()).collect(java.util.stream.Collectors.toList());
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> wswscs = (new java.util.function.Supplier<List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales>>(){public List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> get(){
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> res2 = new ArrayList<>();
    Map<WeekSeq,List<WD>> groups3 = new LinkedHashMap<>();
    for (var w : wscs) {
        for (var d : date_dim) {
            if (!(Objects.equals(w.sold_date_sk, d.d_date_sk))) continue;
            WD row4 = new WD(w, d);
            WeekSeq key5 = new WeekSeq(d.d_week_seq);
            List<WD> bucket6 = groups3.get(key5);
            if (bucket6 == null) { bucket6 = new ArrayList<>(); groups3.put(key5, bucket6); }
            bucket6.add(row4);
        }
    }
    for (Map.Entry<WeekSeq,List<WD>> __e : groups3.entrySet()) {
        WeekSeq g_key = __e.getKey();
        Group<WeekSeq,WD> g = new Group<>(g_key, __e.getValue());
        res2.add(new DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales(g.key.week_seq, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res7 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Sunday"))) continue;
        res7.add(x.sales_price);
    }
    return res7;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res8 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Monday"))) continue;
        res8.add(x.sales_price);
    }
    return res8;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res9 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Tuesday"))) continue;
        res9.add(x.sales_price);
    }
    return res9;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res10 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Wednesday"))) continue;
        res10.add(x.sales_price);
    }
    return res10;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res11 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Thursday"))) continue;
        res11.add(x.sales_price);
    }
    return res11;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res12 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Friday"))) continue;
        res12.add(x.sales_price);
    }
    return res12;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res13 = new ArrayList<>();
    for (var x : g) {
        if (!(Objects.equals(x.day, "Saturday"))) continue;
        res13.add(x.sales_price);
    }
    return res13;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res2;
}}).get();
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> year1 = (new java.util.function.Supplier<List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales>>(){public List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> get(){
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> res14 = new ArrayList<>();
    for (var w : wswscs) {
        if (!(w.d_week_seq == 1)) continue;
        res14.add(w);
    }
    return res14;
}}).get();
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> year2 = (new java.util.function.Supplier<List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales>>(){public List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> get(){
    List<DWeekSeqSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> res15 = new ArrayList<>();
    for (var w : wswscs) {
        if (!(w.d_week_seq == 54)) continue;
        res15.add(w);
    }
    return res15;
}}).get();
    List<DWeekSeq1SunRatioMonRatio> result = (new java.util.function.Supplier<List<DWeekSeq1SunRatioMonRatio>>(){public List<DWeekSeq1SunRatioMonRatio> get(){
    List<DWeekSeq1SunRatioMonRatio> res16 = new ArrayList<>();
    for (var y : year1) {
        for (var z : year2) {
            if (!(Objects.equals(y.d_week_seq, z.d_week_seq - 53))) continue;
            res16.add(new DWeekSeq1SunRatioMonRatio(y.d_week_seq, y.sun_sales / z.sun_sales, y.mon_sales / z.mon_sales));
        }
    }
    return res16;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new DWeekSeq1SunRatioMonRatio(1, 0.500000, 0.500000))))) throw new AssertionError("expect failed");
    }
}
