// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:54Z
// q79.mochi
import java.util.*;

class DDateSkDDowDYear {
    int d_date_sk;
    int d_dow;
    int d_year;
    DDateSkDDowDYear(int d_date_sk, int d_dow, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_dow = d_dow;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDowDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_dow, other.d_dow) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_dow, d_year);
    }
    int size() { return 3; }
}
class SStoreSkSCitySNumberEmployees {
    int s_store_sk;
    String s_city;
    int s_number_employees;
    SStoreSkSCitySNumberEmployees(int s_store_sk, String s_city, int s_number_employees) {
        this.s_store_sk = s_store_sk;
        this.s_city = s_city;
        this.s_number_employees = s_number_employees;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSCitySNumberEmployees other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_city, other.s_city) && Objects.equals(this.s_number_employees, other.s_number_employees);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_city, s_number_employees);
    }
    int size() { return 3; }
}
class HdDemoSkHdDepCountHdVehicleCount {
    int hd_demo_sk;
    int hd_dep_count;
    int hd_vehicle_count;
    HdDemoSkHdDepCountHdVehicleCount(int hd_demo_sk, int hd_dep_count, int hd_vehicle_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_dep_count = hd_dep_count;
        this.hd_vehicle_count = hd_vehicle_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkHdDepCountHdVehicleCount other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_dep_count, other.hd_dep_count) && Objects.equals(this.hd_vehicle_count, other.hd_vehicle_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_dep_count, hd_vehicle_count);
    }
    int size() { return 3; }
}
class SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit {
    int ss_sold_date_sk;
    int ss_store_sk;
    int ss_ticket_number;
    int ss_customer_sk;
    int ss_hdemo_sk;
    double ss_coupon_amt;
    double ss_net_profit;
    SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit(int ss_sold_date_sk, int ss_store_sk, int ss_ticket_number, int ss_customer_sk, int ss_hdemo_sk, double ss_coupon_amt, double ss_net_profit) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_hdemo_sk = ss_hdemo_sk;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_hdemo_sk, other.ss_hdemo_sk) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, ss_store_sk, ss_ticket_number, ss_customer_sk, ss_hdemo_sk, ss_coupon_amt, ss_net_profit);
    }
    int size() { return 7; }
}
class CCustomerSkCLastNameCFirstName {
    int c_customer_sk;
    String c_last_name;
    String c_first_name;
    CCustomerSkCLastNameCFirstName(int c_customer_sk, String c_last_name, String c_first_name) {
        this.c_customer_sk = c_customer_sk;
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCLastNameCFirstName other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_last_name, c_first_name);
    }
    int size() { return 3; }
}
class SsDSHd {
    SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit ss;
    DDateSkDDowDYear d;
    SStoreSkSCitySNumberEmployees s;
    HdDemoSkHdDepCountHdVehicleCount hd;
    SsDSHd(SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit ss, DDateSkDDowDYear d, SStoreSkSCitySNumberEmployees s, HdDemoSkHdDepCountHdVehicleCount hd) {
        this.ss = ss;
        this.d = d;
        this.s = s;
        this.hd = hd;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDSHd other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.s, other.s) && Objects.equals(this.hd, other.hd);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, s, hd);
    }
    int size() { return 4; }
}
class TicketCustomerSkCity {
    int ticket;
    int customer_sk;
    String city;
    TicketCustomerSkCity(int ticket, int customer_sk, String city) {
        this.ticket = ticket;
        this.customer_sk = customer_sk;
        this.city = city;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TicketCustomerSkCity other)) return false;
        return Objects.equals(this.ticket, other.ticket) && Objects.equals(this.customer_sk, other.customer_sk) && Objects.equals(this.city, other.city);
    }
    @Override public int hashCode() {
        return Objects.hash(ticket, customer_sk, city);
    }
    int size() { return 3; }
}
class KeyAmtProfit {
    TicketCustomerSkCity key;
    double amt;
    double profit;
    KeyAmtProfit(TicketCustomerSkCity key, double amt, double profit) {
        this.key = key;
        this.amt = amt;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof KeyAmtProfit other)) return false;
        return Objects.equals(this.key, other.key) && Objects.equals(this.amt, other.amt) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(key, amt, profit);
    }
    int size() { return 3; }
}
class CLastNameCFirstNameSCitySsTicketNumberAmtProfit {
    String c_last_name;
    String c_first_name;
    String s_city;
    int ss_ticket_number;
    double amt;
    double profit;
    CLastNameCFirstNameSCitySsTicketNumberAmtProfit(String c_last_name, String c_first_name, String s_city, int ss_ticket_number, double amt, double profit) {
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.s_city = s_city;
        this.ss_ticket_number = ss_ticket_number;
        this.amt = amt;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CLastNameCFirstNameSCitySsTicketNumberAmtProfit other)) return false;
        return Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.s_city, other.s_city) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.amt, other.amt) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(c_last_name, c_first_name, s_city, ss_ticket_number, amt, profit);
    }
    int size() { return 6; }
}
public class Q79 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DDateSkDDowDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDowDYear(1, 1, 1999)));
    List<SStoreSkSCitySNumberEmployees> store = new ArrayList<>(Arrays.asList(new SStoreSkSCitySNumberEmployees(1, "CityA", 250)));
    List<HdDemoSkHdDepCountHdVehicleCount> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkHdDepCountHdVehicleCount(1, 2, 1)));
    List<SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsSoldDateSkSsStoreSkSsTicketNumberSsCustomerSkSsHdemoSkSsCouponAmtSsNetProfit(1, 1, 1, 1, 1, 5.000000, 10.000000)));
    List<CCustomerSkCLastNameCFirstName> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCLastNameCFirstName(1, "Smith", "Alice")));
    List<KeyAmtProfit> agg = (new java.util.function.Supplier<List<KeyAmtProfit>>(){public List<KeyAmtProfit> get(){
    List<KeyAmtProfit> res0 = new ArrayList<>();
    Map<TicketCustomerSkCity,List<SsDSHd>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            for (var s : store) {
                if (!(s.s_store_sk == ss.ss_store_sk)) continue;
                for (var hd : household_demographics) {
                    if (!(hd.hd_demo_sk == ss.ss_hdemo_sk)) continue;
                    if (!((hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) && d.d_dow == 1 && (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) && s.s_number_employees >= 200 && s.s_number_employees <= 295)) continue;
                    SsDSHd row2 = new SsDSHd(ss, d, s, hd);
                    TicketCustomerSkCity key3 = new TicketCustomerSkCity(ss.ss_ticket_number, ss.ss_customer_sk, s.s_city);
                    List<SsDSHd> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<TicketCustomerSkCity,List<SsDSHd>> __e : groups1.entrySet()) {
        TicketCustomerSkCity g_key = __e.getKey();
        Group<TicketCustomerSkCity,SsDSHd> g = new Group<>(g_key, __e.getValue());
        res0.add(new KeyAmtProfit(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_coupon_amt);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss.ss_net_profit);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<CLastNameCFirstNameSCitySsTicketNumberAmtProfit> result = (new java.util.function.Supplier<List<CLastNameCFirstNameSCitySsTicketNumberAmtProfit>>(){public List<CLastNameCFirstNameSCitySsTicketNumberAmtProfit> get(){
    List<CLastNameCFirstNameSCitySsTicketNumberAmtProfit> res7 = new ArrayList<>();
    for (var a : agg) {
        for (var c : customer) {
            if (!(c.c_customer_sk == a.key.customer_sk)) continue;
            res7.add(new CLastNameCFirstNameSCitySsTicketNumberAmtProfit(c.c_last_name, c.c_first_name, a.key.city, a.key.ticket, a.amt, a.profit));
        }
    }
    return res7;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CLastNameCFirstNameSCitySsTicketNumberAmtProfit("Smith", "Alice", "CityA", 1, 5.000000, 10.000000))))) throw new AssertionError("expect failed");
    }
}
