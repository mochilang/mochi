// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:58Z
// q12.mochi
import java.util.*;

class WebSale {
    int ws_item_sk;
    int ws_sold_date_sk;
    double ws_ext_sales_price;
    WebSale(int ws_item_sk, int ws_sold_date_sk, double ws_ext_sales_price) {
        this.ws_item_sk = ws_item_sk;
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_ext_sales_price = ws_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WebSale other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_sold_date_sk, ws_ext_sales_price);
    }
}
class Item {
    int i_item_sk;
    String i_item_id;
    String i_item_desc;
    String i_category;
    String i_class;
    double i_current_price;
    Item(int i_item_sk, String i_item_id, String i_item_desc, String i_category, String i_class, double i_current_price) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_category = i_category;
        this.i_class = i_class;
        this.i_current_price = i_current_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_current_price, other.i_current_price);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id, i_item_desc, i_category, i_class, i_current_price);
    }
}
class DateDim {
    int d_date_sk;
    String d_date;
    DateDim(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
}
class WsItemSkWsSoldDateSkWsExtSalesPrice {
    int ws_item_sk;
    int ws_sold_date_sk;
    double ws_ext_sales_price;
    WsItemSkWsSoldDateSkWsExtSalesPrice(int ws_item_sk, int ws_sold_date_sk, double ws_ext_sales_price) {
        this.ws_item_sk = ws_item_sk;
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_ext_sales_price = ws_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsItemSkWsSoldDateSkWsExtSalesPrice other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_sold_date_sk, ws_ext_sales_price);
    }
    int size() { return 3; }
}
class IItemSkIItemIdIItemDescICategoryIClassICurrentPrice {
    int i_item_sk;
    String i_item_id;
    String i_item_desc;
    String i_category;
    String i_class;
    double i_current_price;
    IItemSkIItemIdIItemDescICategoryIClassICurrentPrice(int i_item_sk, String i_item_id, String i_item_desc, String i_category, String i_class, double i_current_price) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_category = i_category;
        this.i_class = i_class;
        this.i_current_price = i_current_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIItemIdIItemDescICategoryIClassICurrentPrice other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_current_price, other.i_current_price);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id, i_item_desc, i_category, i_class, i_current_price);
    }
    int size() { return 6; }
}
class DDateSkDDate {
    int d_date_sk;
    String d_date;
    DDateSkDDate(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDate other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
    int size() { return 2; }
}
class WsID {
    WsItemSkWsSoldDateSkWsExtSalesPrice ws;
    IItemSkIItemIdIItemDescICategoryIClassICurrentPrice i;
    DDateSkDDate d;
    WsID(WsItemSkWsSoldDateSkWsExtSalesPrice ws, IItemSkIItemIdIItemDescICategoryIClassICurrentPrice i, DDateSkDDate d) {
        this.ws = ws;
        this.i = i;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsID other)) return false;
        return Objects.equals(this.ws, other.ws) && Objects.equals(this.i, other.i) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(ws, i, d);
    }
    int size() { return 3; }
}
class IdDescCatClassPrice {
    String id;
    String desc;
    String cat;
    String class;
    double price;
    IdDescCatClassPrice(String id, String desc, String cat, String class, double price) {
        this.id = id;
        this.desc = desc;
        this.cat = cat;
        this.class = class;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdDescCatClassPrice other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.desc, other.desc) && Objects.equals(this.cat, other.cat) && Objects.equals(this.class, other.class) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(id, desc, cat, class, price);
    }
    int size() { return 5; }
}
class IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue {
    String i_item_id;
    String i_item_desc;
    String i_category;
    String i_class;
    double i_current_price;
    int itemrevenue;
    IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue(String i_item_id, String i_item_desc, String i_category, String i_class, double i_current_price, int itemrevenue) {
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_category = i_category;
        this.i_class = i_class;
        this.i_current_price = i_current_price;
        this.itemrevenue = itemrevenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue other)) return false;
        return Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_current_price, other.i_current_price) && Objects.equals(this.itemrevenue, other.itemrevenue);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue);
    }
    int size() { return 6; }
}
class ClassTotal {
    String class;
    int total;
    ClassTotal(String class, int total) {
        this.class = class;
        this.total = total;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ClassTotal other)) return false;
        return Objects.equals(this.class, other.class) && Objects.equals(this.total, other.total);
    }
    @Override public int hashCode() {
        return Objects.hash(class, total);
    }
    int size() { return 2; }
}
class IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio {
    String i_item_id;
    String i_item_desc;
    String i_category;
    String i_class;
    double i_current_price;
    int itemrevenue;
    double revenueratio;
    IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio(String i_item_id, String i_item_desc, String i_category, String i_class, double i_current_price, int itemrevenue, double revenueratio) {
        this.i_item_id = i_item_id;
        this.i_item_desc = i_item_desc;
        this.i_category = i_category;
        this.i_class = i_class;
        this.i_current_price = i_current_price;
        this.itemrevenue = itemrevenue;
        this.revenueratio = revenueratio;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio other)) return false;
        return Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.i_item_desc, other.i_item_desc) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_current_price, other.i_current_price) && Objects.equals(this.itemrevenue, other.itemrevenue) && Objects.equals(this.revenueratio, other.revenueratio);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, revenueratio);
    }
    int size() { return 7; }
}
public class Q12 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<WsItemSkWsSoldDateSkWsExtSalesPrice> web_sales = new ArrayList<>(Arrays.asList(new WsItemSkWsSoldDateSkWsExtSalesPrice(1, 1, 100.000000), new WsItemSkWsSoldDateSkWsExtSalesPrice(1, 2, 100.000000), new WsItemSkWsSoldDateSkWsExtSalesPrice(2, 2, 200.000000), new WsItemSkWsSoldDateSkWsExtSalesPrice(3, 3, 50.000000)));
    List<IItemSkIItemIdIItemDescICategoryIClassICurrentPrice> item = new ArrayList<>(Arrays.asList(new IItemSkIItemIdIItemDescICategoryIClassICurrentPrice(1, "ITEM1", "Item One", "A", "C1", 10.000000), new IItemSkIItemIdIItemDescICategoryIClassICurrentPrice(2, "ITEM2", "Item Two", "A", "C1", 20.000000), new IItemSkIItemIdIItemDescICategoryIClassICurrentPrice(3, "ITEM3", "Item Three", "B", "C2", 30.000000)));
    List<DDateSkDDate> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDate(1, "2001-01-20"), new DDateSkDDate(2, "2001-02-05"), new DDateSkDDate(3, "2001-03-05")));
    List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue> filtered = (new java.util.function.Supplier<List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue>>(){public List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue> get(){
    List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue> res0 = new ArrayList<>();
    Map<IdDescCatClassPrice,List<WsID>> groups1 = new LinkedHashMap<>();
    for (var ws : web_sales) {
        for (var i : item) {
            if (!(ws.ws_item_sk == i.i_item_sk)) continue;
            for (var d : date_dim) {
                if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
                if (!(Arrays.asList("A", "B", "C").contains(i.i_category) && String.valueOf(d.d_date).compareTo(String.valueOf("2001-01-15")) >= 0 && String.valueOf(d.d_date).compareTo(String.valueOf("2001-02-14")) <= 0)) continue;
                WsID row2 = new WsID(ws, i, d);
                IdDescCatClassPrice key3 = new IdDescCatClassPrice(i.i_item_id, i.i_item_desc, i.i_category, i.i_class, i.i_current_price);
                List<WsID> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<IdDescCatClassPrice,List<WsID>> __e : groups1.entrySet()) {
        IdDescCatClassPrice g_key = __e.getKey();
        Group<IdDescCatClassPrice,WsID> g = new Group<>(g_key, __e.getValue());
        res0.add(new IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue(g.key.id, g.key.desc, g.key.cat, g.key.class, g.key.price, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ws_ext_sales_price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<ClassTotal> class_totals = (new java.util.function.Supplier<List<ClassTotal>>(){public List<ClassTotal> get(){
    List<ClassTotal> res6 = new ArrayList<>();
    Map<String,List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue>> groups7 = new LinkedHashMap<>();
    for (var f : filtered) {
        var row8 = f;
        String key9 = f.i_class;
        List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue> bucket10 = groups7.get(key9);
        if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
        bucket10.add(row8);
    }
    for (Map.Entry<String,List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue>> __e : groups7.entrySet()) {
        String g_key = __e.getKey();
        Group<String,IItemIdIItemDescICategoryIClassICurrentPriceItemrevenue> g = new Group<>(g_key, __e.getValue());
        res6.add(new ClassTotal(g.key, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.itemrevenue);
    }
    return res11;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res6;
}}).get();
    List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio> result = (new java.util.function.Supplier<List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio>>(){public List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio> get(){
    List<IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio> res12 = new ArrayList<>();
    for (var f : filtered) {
        for (var t : class_totals) {
            if (!(Objects.equals(f.i_class, t.class))) continue;
            res12.add(new IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio(f.i_item_id, f.i_item_desc, f.i_category, f.i_class, f.i_current_price, f.itemrevenue, (f.itemrevenue * 100.000000) / t.total));
        }
    }
    return res12;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio("ITEM1", "Item One", "A", "C1", 10.000000, 200.000000, 50.000000), new IItemIdIItemDescICategoryIClassICurrentPriceItemrevenueRevenueratio("ITEM2", "Item Two", "A", "C1", 20.000000, 200.000000, 50.000000))))) throw new AssertionError("expect failed");
    }
}
