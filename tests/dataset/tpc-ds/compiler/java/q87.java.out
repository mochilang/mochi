// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:52:00Z
// q87.mochi
import java.util.*;

class CustPrice {
    String cust;
    double price;
    CustPrice(String cust, double price) {
        this.cust = cust;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustPrice other)) return false;
        return Objects.equals(this.cust, other.cust) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(cust, price);
    }
    int size() { return 2; }
}
class Cust {
    String cust;
    Cust(String cust) {
        this.cust = cust;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Cust other)) return false;
        return Objects.equals(this.cust, other.cust);
    }
    @Override public int hashCode() {
        return Objects.hash(cust);
    }
    int size() { return 1; }
}
public class Q87 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CustPrice> store_sales = new ArrayList<>(Arrays.asList(new CustPrice("A", 5.000000), new CustPrice("B", 30.000000), new CustPrice("C", 57.000000)));
    List<Cust> catalog_sales = new ArrayList<>(Arrays.asList(new Cust("A")));
    List<Object> web_sales = new ArrayList<>(Arrays.asList());
    List<String> store_customers = (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res0 = new ArrayList<>();
    for (var s : store_sales) {
        res0.add(s.cust);
    }
    return res0;
}}).get();
    List<String> catalog_customers = (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res1 = new ArrayList<>();
    for (var s : catalog_sales) {
        res1.add(s.cust);
    }
    return res1;
}}).get();
    List<Object> web_customers = (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res2 = new ArrayList<>();
    for (var s : web_sales) {
        res2.add(((Map<?,?>)s).get("cust"));
    }
    return res2;
}}).get();
    List<String> store_only = (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res3 = new ArrayList<>();
    for (var c : store_customers) {
        if (!(Objects.equals((new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res4 = new ArrayList<>();
    for (var x : catalog_customers) {
        if (!(Objects.equals(x, c))) continue;
        res4.add(x);
    }
    return res4;
}}).get().size(), 0) && Objects.equals((new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : web_customers) {
        if (!(Objects.equals(x, c))) continue;
        res5.add(x);
    }
    return res5;
}}).get().size(), 0))) continue;
        res3.add(c);
    }
    return res3;
}}).get();
    double result = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(((Number)(new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res7 = new ArrayList<>();
    for (var x : store_only) {
        if (!(Objects.equals(x, s.cust))) continue;
        res7.add(x);
    }
    return res7;
}}).get().size()).doubleValue() > 0)) continue;
        res6.add(s.price);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    json(result);
    if (!(result == 87.000000)) throw new AssertionError("expect failed");
    }
}
