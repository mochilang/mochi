// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:56Z
// q82.mochi
import java.util.*;

class Id {
    int id;
    Id(int id) {
        this.id = id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Id other)) return false;
        return Objects.equals(this.id, other.id);
    }
    @Override public int hashCode() {
        return Objects.hash(id);
    }
    int size() { return 1; }
}
class ItemQty {
    int item;
    int qty;
    ItemQty(int item, int qty) {
        this.item = item;
        this.qty = qty;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemQty other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.qty, other.qty);
    }
    @Override public int hashCode() {
        return Objects.hash(item, qty);
    }
    int size() { return 2; }
}
class Item {
    int item;
    Item(int item) {
        this.item = item;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.item, other.item);
    }
    @Override public int hashCode() {
        return Objects.hash(item);
    }
    int size() { return 1; }
}
public class Q82 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<Id> item = new ArrayList<>(Arrays.asList(new Id(1), new Id(2), new Id(3)));
    List<ItemQty> inventory = new ArrayList<>(Arrays.asList(new ItemQty(1, 20), new ItemQty(1, 22), new ItemQty(1, 5), new ItemQty(2, 30), new ItemQty(2, 5), new ItemQty(3, 10)));
    List<Item> store_sales = new ArrayList<>(Arrays.asList(new Item(1), new Item(2)));
    int result = 0;
    for (ItemQty inv : inventory) {
        for (Item s : store_sales) {
            if (inv.item == s.item) {
                result = (int)(result + inv.qty);
            }
        }
    }
    json(result);
    if (!(result == 82)) throw new AssertionError("expect failed");
    }
}
