// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:48Z
// q73.mochi
import java.util.*;

class SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk {
    int ss_ticket_number;
    int ss_customer_sk;
    int ss_sold_date_sk;
    int ss_store_sk;
    int ss_hdemo_sk;
    SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk(int ss_ticket_number, int ss_customer_sk, int ss_sold_date_sk, int ss_store_sk, int ss_hdemo_sk) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_hdemo_sk = ss_hdemo_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_hdemo_sk, other.ss_hdemo_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_customer_sk, ss_sold_date_sk, ss_store_sk, ss_hdemo_sk);
    }
    int size() { return 5; }
}
class DDateSkDDomDYear {
    int d_date_sk;
    int d_dom;
    int d_year;
    DDateSkDDomDYear(int d_date_sk, int d_dom, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_dom = d_dom;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDomDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_dom, other.d_dom) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_dom, d_year);
    }
    int size() { return 3; }
}
class SStoreSkSCounty {
    int s_store_sk;
    String s_county;
    SStoreSkSCounty(int s_store_sk, String s_county) {
        this.s_store_sk = s_store_sk;
        this.s_county = s_county;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSCounty other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_county, other.s_county);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_county);
    }
    int size() { return 2; }
}
class HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount {
    int hd_demo_sk;
    String hd_buy_potential;
    int hd_vehicle_count;
    int hd_dep_count;
    HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount(int hd_demo_sk, String hd_buy_potential, int hd_vehicle_count, int hd_dep_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_buy_potential = hd_buy_potential;
        this.hd_vehicle_count = hd_vehicle_count;
        this.hd_dep_count = hd_dep_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_buy_potential, other.hd_buy_potential) && Objects.equals(this.hd_vehicle_count, other.hd_vehicle_count) && Objects.equals(this.hd_dep_count, other.hd_dep_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_buy_potential, hd_vehicle_count, hd_dep_count);
    }
    int size() { return 4; }
}
class CCustomerSkCLastNameCFirstNameCSalutationCPreferredCustFlag {
    int c_customer_sk;
    String c_last_name;
    String c_first_name;
    String c_salutation;
    String c_preferred_cust_flag;
    CCustomerSkCLastNameCFirstNameCSalutationCPreferredCustFlag(int c_customer_sk, String c_last_name, String c_first_name, String c_salutation, String c_preferred_cust_flag) {
        this.c_customer_sk = c_customer_sk;
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.c_salutation = c_salutation;
        this.c_preferred_cust_flag = c_preferred_cust_flag;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCLastNameCFirstNameCSalutationCPreferredCustFlag other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_salutation, other.c_salutation) && Objects.equals(this.c_preferred_cust_flag, other.c_preferred_cust_flag);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_last_name, c_first_name, c_salutation, c_preferred_cust_flag);
    }
    int size() { return 5; }
}
class SsDSHd {
    SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk ss;
    DDateSkDDomDYear d;
    SStoreSkSCounty s;
    HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount hd;
    SsDSHd(SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk ss, DDateSkDDomDYear d, SStoreSkSCounty s, HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount hd) {
        this.ss = ss;
        this.d = d;
        this.s = s;
        this.hd = hd;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDSHd other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.s, other.s) && Objects.equals(this.hd, other.hd);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, s, hd);
    }
    int size() { return 4; }
}
class TicketCust {
    int ticket;
    int cust;
    TicketCust(int ticket, int cust) {
        this.ticket = ticket;
        this.cust = cust;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TicketCust other)) return false;
        return Objects.equals(this.ticket, other.ticket) && Objects.equals(this.cust, other.cust);
    }
    @Override public int hashCode() {
        return Objects.hash(ticket, cust);
    }
    int size() { return 2; }
}
class KeyCnt {
    TicketCust key;
    int cnt;
    KeyCnt(TicketCust key, int cnt) {
        this.key = key;
        this.cnt = cnt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof KeyCnt other)) return false;
        return Objects.equals(this.key, other.key) && Objects.equals(this.cnt, other.cnt);
    }
    @Override public int hashCode() {
        return Objects.hash(key, cnt);
    }
    int size() { return 2; }
}
class CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt {
    String c_last_name;
    String c_first_name;
    String c_salutation;
    String c_preferred_cust_flag;
    int ss_ticket_number;
    int cnt;
    CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt(String c_last_name, String c_first_name, String c_salutation, String c_preferred_cust_flag, int ss_ticket_number, int cnt) {
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.c_salutation = c_salutation;
        this.c_preferred_cust_flag = c_preferred_cust_flag;
        this.ss_ticket_number = ss_ticket_number;
        this.cnt = cnt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt other)) return false;
        return Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_salutation, other.c_salutation) && Objects.equals(this.c_preferred_cust_flag, other.c_preferred_cust_flag) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.cnt, other.cnt);
    }
    @Override public int hashCode() {
        return Objects.hash(c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number, cnt);
    }
    int size() { return 6; }
}
public class Q73 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk> store_sales = new ArrayList<>(Arrays.asList(new SsTicketNumberSsCustomerSkSsSoldDateSkSsStoreSkSsHdemoSk(1, 1, 1, 1, 1)));
    List<DDateSkDDomDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDomDYear(1, 1, 1998)));
    List<SStoreSkSCounty> store = new ArrayList<>(Arrays.asList(new SStoreSkSCounty(1, "A")));
    List<HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkHdBuyPotentialHdVehicleCountHdDepCount(1, "1001-5000", 2, 3)));
    List<CCustomerSkCLastNameCFirstNameCSalutationCPreferredCustFlag> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCLastNameCFirstNameCSalutationCPreferredCustFlag(1, "Smith", "Alice", "Ms.", "Y")));
    List<KeyCnt> groups = (new java.util.function.Supplier<List<KeyCnt>>(){public List<KeyCnt> get(){
    List<KeyCnt> res0 = new ArrayList<>();
    Map<TicketCust,List<SsDSHd>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            for (var s : store) {
                if (!(s.s_store_sk == ss.ss_store_sk)) continue;
                for (var hd : household_demographics) {
                    if (!(hd.hd_demo_sk == ss.ss_hdemo_sk)) continue;
                    if (!(d.d_dom >= 1 && d.d_dom <= 2 && (Objects.equals(hd.hd_buy_potential, "1001-5000") || Objects.equals(hd.hd_buy_potential, "0-500")) && hd.hd_vehicle_count > 0 && hd.hd_dep_count / hd.hd_vehicle_count > 1 && (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) && Objects.equals(s.s_county, "A"))) continue;
                    SsDSHd row2 = new SsDSHd(ss, d, s, hd);
                    TicketCust key3 = new TicketCust(ss.ss_ticket_number, ss.ss_customer_sk);
                    List<SsDSHd> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<TicketCust,List<SsDSHd>> __e : groups1.entrySet()) {
        TicketCust g_key = __e.getKey();
        Group<TicketCust,SsDSHd> g = new Group<>(g_key, __e.getValue());
        res0.add(new KeyCnt(g.key, g.size()));
    }
    return res0;
}}).get();
    List<CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt> result = (new java.util.function.Supplier<List<CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt>>(){public List<CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt> get(){
    List<CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt> res5 = new ArrayList<>();
    for (var g : groups) {
        for (var c : customer) {
            if (!(c.c_customer_sk == g.key.cust)) continue;
            if (!(g.cnt >= 1 && g.cnt <= 5)) continue;
            res5.add(new CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt(c.c_last_name, c.c_first_name, c.c_salutation, c.c_preferred_cust_flag, g.key.ticket, g.cnt));
        }
    }
    return res5;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CLastNameCFirstNameCSalutationCPreferredCustFlagSsTicketNumberCnt("Smith", "Alice", "Ms.", "Y", 1, 1))))) throw new AssertionError("expect failed");
    }
}
