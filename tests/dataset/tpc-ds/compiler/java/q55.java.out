// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:33Z
// q55.mochi
import java.util.*;

class ItemSoldDatePrice {
    int item;
    int sold_date;
    double price;
    ItemSoldDatePrice(int item, int sold_date, double price) {
        this.item = item;
        this.sold_date = sold_date;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemSoldDatePrice other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.sold_date, other.sold_date) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(item, sold_date, price);
    }
    int size() { return 3; }
}
class IItemSkIBrandIdIManagerId {
    int i_item_sk;
    int i_brand_id;
    int i_manager_id;
    IItemSkIBrandIdIManagerId(int i_item_sk, int i_brand_id, int i_manager_id) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_manager_id = i_manager_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIBrandIdIManagerId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_manager_id, other.i_manager_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_manager_id);
    }
    int size() { return 3; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class SsI {
    ItemSoldDatePrice ss;
    IItemSkIBrandIdIManagerId i;
    SsI(ItemSoldDatePrice ss, IItemSkIBrandIdIManagerId i) {
        this.ss = ss;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsI other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, i);
    }
    int size() { return 2; }
}
class BrandId {
    int brand_id;
    BrandId(int brand_id) {
        this.brand_id = brand_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BrandId other)) return false;
        return Objects.equals(this.brand_id, other.brand_id);
    }
    @Override public int hashCode() {
        return Objects.hash(brand_id);
    }
    int size() { return 1; }
}
class BrandIdExtPrice {
    int brand_id;
    int ext_price;
    BrandIdExtPrice(int brand_id, int ext_price) {
        this.brand_id = brand_id;
        this.ext_price = ext_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BrandIdExtPrice other)) return false;
        return Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.ext_price, other.ext_price);
    }
    @Override public int hashCode() {
        return Objects.hash(brand_id, ext_price);
    }
    int size() { return 2; }
}
public class Q55 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemSoldDatePrice> store_sales = new ArrayList<>(Arrays.asList(new ItemSoldDatePrice(1, 1, 10.000000), new ItemSoldDatePrice(2, 1, 20.000000), new ItemSoldDatePrice(3, 1, 25.000000)));
    List<IItemSkIBrandIdIManagerId> item = new ArrayList<>(Arrays.asList(new IItemSkIBrandIdIManagerId(1, 10, 1), new IItemSkIBrandIdIManagerId(2, 20, 1), new IItemSkIBrandIdIManagerId(3, 10, 1)));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2001, 11)));
    List<BrandIdExtPrice> grouped = (new java.util.function.Supplier<List<BrandIdExtPrice>>(){public List<BrandIdExtPrice> get(){
    List<BrandIdExtPrice> res0 = new ArrayList<>();
    Map<BrandId,List<SsI>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var i : item) {
            if (!(ss.item == i.i_item_sk && i.i_manager_id == 1)) continue;
            for (var d : date_dim) {
                if (!(ss.sold_date == d.d_date_sk)) continue;
                SsI row2 = new SsI(ss, i);
                BrandId key3 = new BrandId(i.i_brand_id);
                List<SsI> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<BrandId,List<SsI>> __e : groups1.entrySet()) {
        BrandId g_key = __e.getKey();
        Group<BrandId,SsI> g = new Group<>(g_key, __e.getValue());
        res0.add(new BrandIdExtPrice(g.key.brand_id, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<BrandIdExtPrice> result = (new java.util.function.Supplier<List<BrandIdExtPrice>>(){public List<BrandIdExtPrice> get(){
    List<BrandIdExtPrice> res6 = new ArrayList<>();
    for (var g : grouped) {
        res6.add(g);
    }
    return res6;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new BrandIdExtPrice(10, 35.000000), new BrandIdExtPrice(20, 20.000000))))) throw new AssertionError("expect failed");
    }
}
