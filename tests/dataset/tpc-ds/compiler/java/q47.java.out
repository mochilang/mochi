// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:28Z
// q47.mochi
import java.util.*;

class DYearItemAvgMonthlySalesSumSales {
    int d_year;
    String item;
    double avg_monthly_sales;
    double sum_sales;
    DYearItemAvgMonthlySalesSumSales(int d_year, String item, double avg_monthly_sales, double sum_sales) {
        this.d_year = d_year;
        this.item = item;
        this.avg_monthly_sales = avg_monthly_sales;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearItemAvgMonthlySalesSumSales other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.item, other.item) && Objects.equals(this.avg_monthly_sales, other.avg_monthly_sales) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, item, avg_monthly_sales, sum_sales);
    }
    int size() { return 4; }
}
public class Q47 {
    static double abs(double x) {
        if (x >= 0.000000) {
            return x;
        }
        else {
            return -x;
        }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DYearItemAvgMonthlySalesSumSales> v2 = new ArrayList<>(Arrays.asList(new DYearItemAvgMonthlySalesSumSales(2020, "A", 100.000000, 120.000000), new DYearItemAvgMonthlySalesSumSales(2020, "B", 80.000000, 70.000000), new DYearItemAvgMonthlySalesSumSales(2019, "C", 50.000000, 60.000000)));
    int year = 2020;
    String orderby = "item";
    List<DYearItemAvgMonthlySalesSumSales> result = (new java.util.function.Supplier<List<DYearItemAvgMonthlySalesSumSales>>(){public List<DYearItemAvgMonthlySalesSumSales> get(){
    List<DYearItemAvgMonthlySalesSumSales> res0 = new ArrayList<>();
    for (var v : v2) {
        if (!(v.d_year >= year - 1 && v.avg_monthly_sales > 0 && v.sum_sales > v.avg_monthly_sales && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.100000)) continue;
        res0.add(new DYearItemAvgMonthlySalesSumSales(v.d_year, v.item, v.avg_monthly_sales, v.sum_sales));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new DYearItemAvgMonthlySalesSumSales(2019, "C", 50.000000, 60.000000), new DYearItemAvgMonthlySalesSumSales(2020, "A", 100.000000, 120.000000))))) throw new AssertionError("expect failed");
    }
}
