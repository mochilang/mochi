// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:26Z
// q45.mochi
import java.util.*;

class BillCustomerSkItemSkSoldDateSkSalesPrice {
    int bill_customer_sk;
    int item_sk;
    int sold_date_sk;
    double sales_price;
    BillCustomerSkItemSkSoldDateSkSalesPrice(int bill_customer_sk, int item_sk, int sold_date_sk, double sales_price) {
        this.bill_customer_sk = bill_customer_sk;
        this.item_sk = item_sk;
        this.sold_date_sk = sold_date_sk;
        this.sales_price = sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BillCustomerSkItemSkSoldDateSkSalesPrice other)) return false;
        return Objects.equals(this.bill_customer_sk, other.bill_customer_sk) && Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.sold_date_sk, other.sold_date_sk) && Objects.equals(this.sales_price, other.sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(bill_customer_sk, item_sk, sold_date_sk, sales_price);
    }
    int size() { return 4; }
}
class CCustomerSkCCurrentAddrSk {
    int c_customer_sk;
    int c_current_addr_sk;
    CCustomerSkCCurrentAddrSk(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
    int size() { return 2; }
}
class CaAddressSkCaZip {
    int ca_address_sk;
    String ca_zip;
    CaAddressSkCaZip(int ca_address_sk, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaZip other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip);
    }
    int size() { return 2; }
}
class IItemSkIItemId {
    int i_item_sk;
    String i_item_id;
    IItemSkIItemId(int i_item_sk, String i_item_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIItemId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id);
    }
    int size() { return 2; }
}
class DDateSkDQoyDYear {
    int d_date_sk;
    int d_qoy;
    int d_year;
    DDateSkDQoyDYear(int d_date_sk, int d_qoy, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_qoy = d_qoy;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDQoyDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_qoy, other.d_qoy) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_qoy, d_year);
    }
    int size() { return 3; }
}
class WsCaID {
    BillCustomerSkItemSkSoldDateSkSalesPrice ws;
    CaAddressSkCaZip ca;
    IItemSkIItemId i;
    DDateSkDQoyDYear d;
    WsCaID(BillCustomerSkItemSkSoldDateSkSalesPrice ws, CaAddressSkCaZip ca, IItemSkIItemId i, DDateSkDQoyDYear d) {
        this.ws = ws;
        this.ca = ca;
        this.i = i;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsCaID other)) return false;
        return Objects.equals(this.ws, other.ws) && Objects.equals(this.ca, other.ca) && Objects.equals(this.i, other.i) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(ws, ca, i, d);
    }
    int size() { return 4; }
}
class CaZipSumWsSalesPrice {
    String ca_zip;
    double sum_ws_sales_price;
    CaZipSumWsSalesPrice(String ca_zip, double sum_ws_sales_price) {
        this.ca_zip = ca_zip;
        this.sum_ws_sales_price = sum_ws_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaZipSumWsSalesPrice other)) return false;
        return Objects.equals(this.ca_zip, other.ca_zip) && Objects.equals(this.sum_ws_sales_price, other.sum_ws_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_zip, sum_ws_sales_price);
    }
    int size() { return 2; }
}
public class Q45 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<BillCustomerSkItemSkSoldDateSkSalesPrice> web_sales = new ArrayList<>(Arrays.asList(new BillCustomerSkItemSkSoldDateSkSalesPrice(1, 1, 1, 50.000000), new BillCustomerSkItemSkSoldDateSkSalesPrice(2, 2, 1, 30.000000)));
    List<CCustomerSkCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSk(1, 1), new CCustomerSkCCurrentAddrSk(2, 2)));
    List<CaAddressSkCaZip> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaZip(1, "85669"), new CaAddressSkCaZip(2, "99999")));
    List<IItemSkIItemId> item = new ArrayList<>(Arrays.asList(new IItemSkIItemId(1, "I1"), new IItemSkIItemId(2, "I2")));
    List<DDateSkDQoyDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDQoyDYear(1, 1, 2020)));
    List<String> zip_list = new ArrayList<>(Arrays.asList("85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"));
    List<String> item_ids = new ArrayList<>(Arrays.asList("I2"));
    int qoy = 1;
    int year = 2020;
    List<CaZipSumWsSalesPrice> base = (new java.util.function.Supplier<List<CaZipSumWsSalesPrice>>(){public List<CaZipSumWsSalesPrice> get(){
    List<CaZipSumWsSalesPrice> res0 = new ArrayList<>();
    Map<String,List<WsCaID>> groups1 = new LinkedHashMap<>();
    for (var ws : web_sales) {
        for (var c : customer) {
            if (!(ws.bill_customer_sk == c.c_customer_sk)) continue;
            for (var ca : customer_address) {
                if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
                for (var i : item) {
                    if (!(ws.item_sk == i.i_item_sk)) continue;
                    for (var d : date_dim) {
                        if (!(ws.sold_date_sk == d.d_date_sk)) continue;
                        if (!((zip_list.contains(substr(ca.ca_zip, 0, 5)) || item_ids.contains(i.i_item_id)) && d.d_qoy == qoy && d.d_year == year)) continue;
                        WsCaID row2 = new WsCaID(ws, ca, i, d);
                        String key3 = ca.ca_zip;
                        List<WsCaID> bucket4 = groups1.get(key3);
                        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                        bucket4.add(row2);
                    }
                }
            }
        }
    }
    for (Map.Entry<String,List<WsCaID>> __e : groups1.entrySet()) {
        String g_key = __e.getKey();
        Group<String,WsCaID> g = new Group<>(g_key, __e.getValue());
        res0.add(new CaZipSumWsSalesPrice(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ws.sales_price);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<CaZipSumWsSalesPrice> records = base;
    json(records);
    if (!(Objects.equals(records, Arrays.asList(new CaZipSumWsSalesPrice("85669", 50.000000), new CaZipSumWsSalesPrice("99999", 30.000000))))) throw new AssertionError("expect failed");
    }
}
