// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:52Z
// q77.mochi
import java.util.*;

class DDateSkDDate {
    int d_date_sk;
    int d_date;
    DDateSkDDate(int d_date_sk, int d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDate other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
    int size() { return 2; }
}
class SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit {
    int ss_sold_date_sk;
    int s_store_sk;
    double ss_ext_sales_price;
    double ss_net_profit;
    SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit(int ss_sold_date_sk, int s_store_sk, double ss_ext_sales_price, double ss_net_profit) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.s_store_sk = s_store_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, s_store_sk, ss_ext_sales_price, ss_net_profit);
    }
    int size() { return 4; }
}
class SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss {
    int sr_returned_date_sk;
    int s_store_sk;
    double sr_return_amt;
    double sr_net_loss;
    SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss(int sr_returned_date_sk, int s_store_sk, double sr_return_amt, double sr_net_loss) {
        this.sr_returned_date_sk = sr_returned_date_sk;
        this.s_store_sk = s_store_sk;
        this.sr_return_amt = sr_return_amt;
        this.sr_net_loss = sr_net_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss other)) return false;
        return Objects.equals(this.sr_returned_date_sk, other.sr_returned_date_sk) && Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.sr_return_amt, other.sr_return_amt) && Objects.equals(this.sr_net_loss, other.sr_net_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_returned_date_sk, s_store_sk, sr_return_amt, sr_net_loss);
    }
    int size() { return 4; }
}
class CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit {
    int cs_sold_date_sk;
    int cs_call_center_sk;
    double cs_ext_sales_price;
    double cs_net_profit;
    CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit(int cs_sold_date_sk, int cs_call_center_sk, double cs_ext_sales_price, double cs_net_profit) {
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_call_center_sk = cs_call_center_sk;
        this.cs_ext_sales_price = cs_ext_sales_price;
        this.cs_net_profit = cs_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit other)) return false;
        return Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_call_center_sk, other.cs_call_center_sk) && Objects.equals(this.cs_ext_sales_price, other.cs_ext_sales_price) && Objects.equals(this.cs_net_profit, other.cs_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit);
    }
    int size() { return 4; }
}
class CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss {
    int cr_returned_date_sk;
    int cr_call_center_sk;
    double cr_return_amount;
    double cr_net_loss;
    CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss(int cr_returned_date_sk, int cr_call_center_sk, double cr_return_amount, double cr_net_loss) {
        this.cr_returned_date_sk = cr_returned_date_sk;
        this.cr_call_center_sk = cr_call_center_sk;
        this.cr_return_amount = cr_return_amount;
        this.cr_net_loss = cr_net_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss other)) return false;
        return Objects.equals(this.cr_returned_date_sk, other.cr_returned_date_sk) && Objects.equals(this.cr_call_center_sk, other.cr_call_center_sk) && Objects.equals(this.cr_return_amount, other.cr_return_amount) && Objects.equals(this.cr_net_loss, other.cr_net_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(cr_returned_date_sk, cr_call_center_sk, cr_return_amount, cr_net_loss);
    }
    int size() { return 4; }
}
class WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit {
    int ws_sold_date_sk;
    int ws_web_page_sk;
    double ws_ext_sales_price;
    double ws_net_profit;
    WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit(int ws_sold_date_sk, int ws_web_page_sk, double ws_ext_sales_price, double ws_net_profit) {
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_web_page_sk = ws_web_page_sk;
        this.ws_ext_sales_price = ws_ext_sales_price;
        this.ws_net_profit = ws_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit other)) return false;
        return Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_web_page_sk, other.ws_web_page_sk) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price) && Objects.equals(this.ws_net_profit, other.ws_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit);
    }
    int size() { return 4; }
}
class WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss {
    int wr_returned_date_sk;
    int wr_web_page_sk;
    double wr_return_amt;
    double wr_net_loss;
    WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss(int wr_returned_date_sk, int wr_web_page_sk, double wr_return_amt, double wr_net_loss) {
        this.wr_returned_date_sk = wr_returned_date_sk;
        this.wr_web_page_sk = wr_web_page_sk;
        this.wr_return_amt = wr_return_amt;
        this.wr_net_loss = wr_net_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss other)) return false;
        return Objects.equals(this.wr_returned_date_sk, other.wr_returned_date_sk) && Objects.equals(this.wr_web_page_sk, other.wr_web_page_sk) && Objects.equals(this.wr_return_amt, other.wr_return_amt) && Objects.equals(this.wr_net_loss, other.wr_net_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss);
    }
    int size() { return 4; }
}
class SStoreSkSalesProfit {
    int s_store_sk;
    int sales;
    int profit;
    SStoreSkSalesProfit(int s_store_sk, int sales, int profit) {
        this.s_store_sk = s_store_sk;
        this.sales = sales;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSalesProfit other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.sales, other.sales) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, sales, profit);
    }
    int size() { return 3; }
}
class SStoreSkReturnsProfitLoss {
    int s_store_sk;
    int returns;
    int profit_loss;
    SStoreSkReturnsProfitLoss(int s_store_sk, int returns, int profit_loss) {
        this.s_store_sk = s_store_sk;
        this.returns = returns;
        this.profit_loss = profit_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkReturnsProfitLoss other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.returns, other.returns) && Objects.equals(this.profit_loss, other.profit_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, returns, profit_loss);
    }
    int size() { return 3; }
}
class CsCallCenterSkSalesProfit {
    int cs_call_center_sk;
    int sales;
    int profit;
    CsCallCenterSkSalesProfit(int cs_call_center_sk, int sales, int profit) {
        this.cs_call_center_sk = cs_call_center_sk;
        this.sales = sales;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsCallCenterSkSalesProfit other)) return false;
        return Objects.equals(this.cs_call_center_sk, other.cs_call_center_sk) && Objects.equals(this.sales, other.sales) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_call_center_sk, sales, profit);
    }
    int size() { return 3; }
}
class CrCallCenterSkReturnsProfitLoss {
    int cr_call_center_sk;
    int returns;
    int profit_loss;
    CrCallCenterSkReturnsProfitLoss(int cr_call_center_sk, int returns, int profit_loss) {
        this.cr_call_center_sk = cr_call_center_sk;
        this.returns = returns;
        this.profit_loss = profit_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CrCallCenterSkReturnsProfitLoss other)) return false;
        return Objects.equals(this.cr_call_center_sk, other.cr_call_center_sk) && Objects.equals(this.returns, other.returns) && Objects.equals(this.profit_loss, other.profit_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(cr_call_center_sk, returns, profit_loss);
    }
    int size() { return 3; }
}
class WpWebPageSkSalesProfit {
    int wp_web_page_sk;
    int sales;
    int profit;
    WpWebPageSkSalesProfit(int wp_web_page_sk, int sales, int profit) {
        this.wp_web_page_sk = wp_web_page_sk;
        this.sales = sales;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WpWebPageSkSalesProfit other)) return false;
        return Objects.equals(this.wp_web_page_sk, other.wp_web_page_sk) && Objects.equals(this.sales, other.sales) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(wp_web_page_sk, sales, profit);
    }
    int size() { return 3; }
}
class WpWebPageSkReturnsProfitLoss {
    int wp_web_page_sk;
    int returns;
    int profit_loss;
    WpWebPageSkReturnsProfitLoss(int wp_web_page_sk, int returns, int profit_loss) {
        this.wp_web_page_sk = wp_web_page_sk;
        this.returns = returns;
        this.profit_loss = profit_loss;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WpWebPageSkReturnsProfitLoss other)) return false;
        return Objects.equals(this.wp_web_page_sk, other.wp_web_page_sk) && Objects.equals(this.returns, other.returns) && Objects.equals(this.profit_loss, other.profit_loss);
    }
    @Override public int hashCode() {
        return Objects.hash(wp_web_page_sk, returns, profit_loss);
    }
    int size() { return 3; }
}
class ChannelIdSalesReturnsProfit {
    String channel;
    int id;
    int sales;
    int returns;
    int profit;
    ChannelIdSalesReturnsProfit(String channel, int id, int sales, int returns, int profit) {
        this.channel = channel;
        this.id = id;
        this.sales = sales;
        this.returns = returns;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelIdSalesReturnsProfit other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.id, other.id) && Objects.equals(this.sales, other.sales) && Objects.equals(this.returns, other.returns) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, id, sales, returns, profit);
    }
    int size() { return 5; }
}
class ChannelId {
    String channel;
    int id;
    ChannelId(String channel, int id) {
        this.channel = channel;
        this.id = id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelId other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.id, other.id);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, id);
    }
    int size() { return 2; }
}
public class Q77 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DDateSkDDate> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDate(1, 1)));
    List<SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit(1, 1, 100.000000, 10.000000)));
    List<SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss> store_returns = new ArrayList<>(Arrays.asList(new SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss(1, 1, 5.000000, 1.000000)));
    List<CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit> catalog_sales = new ArrayList<>(Arrays.asList(new CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit(1, 1, 150.000000, 15.000000)));
    List<CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss> catalog_returns = new ArrayList<>(Arrays.asList(new CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss(1, 1, 7.000000, 3.000000)));
    List<WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit> web_sales = new ArrayList<>(Arrays.asList(new WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit(1, 1, 200.000000, 20.000000)));
    List<WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss> web_returns = new ArrayList<>(Arrays.asList(new WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss(1, 1, 10.000000, 2.000000)));
    List<SStoreSkSalesProfit> ss = (new java.util.function.Supplier<List<SStoreSkSalesProfit>>(){public List<SStoreSkSalesProfit> get(){
    List<SStoreSkSalesProfit> res0 = new ArrayList<>();
    Map<Integer,List<SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            var row2 = ss;
            int key3 = ss.s_store_sk;
            List<SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit> bucket4 = groups1.get(key3);
            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
            bucket4.add(row2);
        }
    }
    for (Map.Entry<Integer,List<SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit>> __e : groups1.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SsSoldDateSkSStoreSkSsExtSalesPriceSsNetProfit> g = new Group<>(g_key, __e.getValue());
        res0.add(new SStoreSkSalesProfit(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_ext_sales_price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss.ss_net_profit);
    }
    return res6;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<SStoreSkReturnsProfitLoss> sr = (new java.util.function.Supplier<List<SStoreSkReturnsProfitLoss>>(){public List<SStoreSkReturnsProfitLoss> get(){
    List<SStoreSkReturnsProfitLoss> res7 = new ArrayList<>();
    Map<Integer,List<SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss>> groups8 = new LinkedHashMap<>();
    for (var sr : store_returns) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == sr.sr_returned_date_sk)) continue;
            var row9 = sr;
            int key10 = sr.s_store_sk;
            List<SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss> bucket11 = groups8.get(key10);
            if (bucket11 == null) { bucket11 = new ArrayList<>(); groups8.put(key10, bucket11); }
            bucket11.add(row9);
        }
    }
    for (Map.Entry<Integer,List<SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss>> __e : groups8.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SrReturnedDateSkSStoreSkSrReturnAmtSrNetLoss> g = new Group<>(g_key, __e.getValue());
        res7.add(new SStoreSkReturnsProfitLoss(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res12 = new ArrayList<>();
    for (var x : g) {
        res12.add(x.sr.sr_return_amt);
    }
    return res12;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res13 = new ArrayList<>();
    for (var x : g) {
        res13.add(x.sr.sr_net_loss);
    }
    return res13;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res7;
}}).get();
    List<CsCallCenterSkSalesProfit> cs = (new java.util.function.Supplier<List<CsCallCenterSkSalesProfit>>(){public List<CsCallCenterSkSalesProfit> get(){
    List<CsCallCenterSkSalesProfit> res14 = new ArrayList<>();
    Map<Integer,List<CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit>> groups15 = new LinkedHashMap<>();
    for (var cs : catalog_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == cs.cs_sold_date_sk)) continue;
            var row16 = cs;
            int key17 = cs.cs_call_center_sk;
            List<CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit> bucket18 = groups15.get(key17);
            if (bucket18 == null) { bucket18 = new ArrayList<>(); groups15.put(key17, bucket18); }
            bucket18.add(row16);
        }
    }
    for (Map.Entry<Integer,List<CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit>> __e : groups15.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,CsSoldDateSkCsCallCenterSkCsExtSalesPriceCsNetProfit> g = new Group<>(g_key, __e.getValue());
        res14.add(new CsCallCenterSkSalesProfit(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res19 = new ArrayList<>();
    for (var x : g) {
        res19.add(x.cs.cs_ext_sales_price);
    }
    return res19;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res20 = new ArrayList<>();
    for (var x : g) {
        res20.add(x.cs.cs_net_profit);
    }
    return res20;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res14;
}}).get();
    List<CrCallCenterSkReturnsProfitLoss> cr = (new java.util.function.Supplier<List<CrCallCenterSkReturnsProfitLoss>>(){public List<CrCallCenterSkReturnsProfitLoss> get(){
    List<CrCallCenterSkReturnsProfitLoss> res21 = new ArrayList<>();
    Map<Integer,List<CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss>> groups22 = new LinkedHashMap<>();
    for (var cr : catalog_returns) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == cr.cr_returned_date_sk)) continue;
            var row23 = cr;
            int key24 = cr.cr_call_center_sk;
            List<CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss> bucket25 = groups22.get(key24);
            if (bucket25 == null) { bucket25 = new ArrayList<>(); groups22.put(key24, bucket25); }
            bucket25.add(row23);
        }
    }
    for (Map.Entry<Integer,List<CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss>> __e : groups22.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,CrReturnedDateSkCrCallCenterSkCrReturnAmountCrNetLoss> g = new Group<>(g_key, __e.getValue());
        res21.add(new CrCallCenterSkReturnsProfitLoss(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res26 = new ArrayList<>();
    for (var x : g) {
        res26.add(x.cr.cr_return_amount);
    }
    return res26;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res27 = new ArrayList<>();
    for (var x : g) {
        res27.add(x.cr.cr_net_loss);
    }
    return res27;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res21;
}}).get();
    List<WpWebPageSkSalesProfit> ws = (new java.util.function.Supplier<List<WpWebPageSkSalesProfit>>(){public List<WpWebPageSkSalesProfit> get(){
    List<WpWebPageSkSalesProfit> res28 = new ArrayList<>();
    Map<Integer,List<WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit>> groups29 = new LinkedHashMap<>();
    for (var ws : web_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ws.ws_sold_date_sk)) continue;
            var row30 = ws;
            int key31 = ws.ws_web_page_sk;
            List<WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit> bucket32 = groups29.get(key31);
            if (bucket32 == null) { bucket32 = new ArrayList<>(); groups29.put(key31, bucket32); }
            bucket32.add(row30);
        }
    }
    for (Map.Entry<Integer,List<WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit>> __e : groups29.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,WsSoldDateSkWsWebPageSkWsExtSalesPriceWsNetProfit> g = new Group<>(g_key, __e.getValue());
        res28.add(new WpWebPageSkSalesProfit(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res33 = new ArrayList<>();
    for (var x : g) {
        res33.add(x.ws.ws_ext_sales_price);
    }
    return res33;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res34 = new ArrayList<>();
    for (var x : g) {
        res34.add(x.ws.ws_net_profit);
    }
    return res34;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res28;
}}).get();
    List<WpWebPageSkReturnsProfitLoss> wr = (new java.util.function.Supplier<List<WpWebPageSkReturnsProfitLoss>>(){public List<WpWebPageSkReturnsProfitLoss> get(){
    List<WpWebPageSkReturnsProfitLoss> res35 = new ArrayList<>();
    Map<Integer,List<WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss>> groups36 = new LinkedHashMap<>();
    for (var wr : web_returns) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == wr.wr_returned_date_sk)) continue;
            var row37 = wr;
            int key38 = wr.wr_web_page_sk;
            List<WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss> bucket39 = groups36.get(key38);
            if (bucket39 == null) { bucket39 = new ArrayList<>(); groups36.put(key38, bucket39); }
            bucket39.add(row37);
        }
    }
    for (Map.Entry<Integer,List<WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss>> __e : groups36.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,WrReturnedDateSkWrWebPageSkWrReturnAmtWrNetLoss> g = new Group<>(g_key, __e.getValue());
        res35.add(new WpWebPageSkReturnsProfitLoss(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res40 = new ArrayList<>();
    for (var x : g) {
        res40.add(x.wr.wr_return_amt);
    }
    return res40;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res41 = new ArrayList<>();
    for (var x : g) {
        res41.add(x.wr.wr_net_loss);
    }
    return res41;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res35;
}}).get();
    List<ChannelIdSalesReturnsProfit> per_channel = java.util.stream.Stream.concat(java.util.stream.Stream.concat((new java.util.function.Supplier<List<ChannelIdSalesReturnsProfit>>(){public List<ChannelIdSalesReturnsProfit> get(){
    List<ChannelIdSalesReturnsProfit> res42 = new ArrayList<>();
    for (var s : ss) {
        List<SStoreSkReturnsProfitLoss> tmp43 = new ArrayList<>();
        for (var it44 : sr) {
            var r = it44;
            if (!(s.s_store_sk == r.s_store_sk)) continue;
            tmp43.add(it44);
        }
        if (tmp43.isEmpty()) tmp43.add(null);
        for (var r : tmp43) {
            res42.add(new ChannelIdSalesReturnsProfit("store channel", s.s_store_sk, s.sales, (Objects.equals(r, null) ? 0.000000 : r.returns), s.profit - ((Objects.equals(r, null) ? 0.000000 : r.profit_loss))));
        }
    }
    return res42;
}}).get().stream(), (new java.util.function.Supplier<List<ChannelIdSalesReturnsProfit>>(){public List<ChannelIdSalesReturnsProfit> get(){
    List<ChannelIdSalesReturnsProfit> res45 = new ArrayList<>();
    for (var c : cs) {
        for (var r : cr) {
            if (!(c.cs_call_center_sk == r.cr_call_center_sk)) continue;
            res45.add(new ChannelIdSalesReturnsProfit("catalog channel", c.cs_call_center_sk, c.sales, r.returns, c.profit - r.profit_loss));
        }
    }
    return res45;
}}).get().stream()).collect(java.util.stream.Collectors.toList()).stream(), (new java.util.function.Supplier<List<ChannelIdSalesReturnsProfit>>(){public List<ChannelIdSalesReturnsProfit> get(){
    List<ChannelIdSalesReturnsProfit> res46 = new ArrayList<>();
    for (var w : ws) {
        List<WpWebPageSkReturnsProfitLoss> tmp47 = new ArrayList<>();
        for (var it48 : wr) {
            var r = it48;
            if (!(w.wp_web_page_sk == r.wp_web_page_sk)) continue;
            tmp47.add(it48);
        }
        if (tmp47.isEmpty()) tmp47.add(null);
        for (var r : tmp47) {
            res46.add(new ChannelIdSalesReturnsProfit("web channel", w.wp_web_page_sk, w.sales, (Objects.equals(r, null) ? 0.000000 : r.returns), w.profit - ((Objects.equals(r, null) ? 0.000000 : r.profit_loss))));
        }
    }
    return res46;
}}).get().stream()).collect(java.util.stream.Collectors.toList());
    List<ChannelIdSalesReturnsProfit> result = (new java.util.function.Supplier<List<ChannelIdSalesReturnsProfit>>(){public List<ChannelIdSalesReturnsProfit> get(){
    List<ChannelIdSalesReturnsProfit> res49 = new ArrayList<>();
    Map<ChannelId,List<ChannelIdSalesReturnsProfit>> groups50 = new LinkedHashMap<>();
    for (var p : per_channel) {
        var row51 = p;
        ChannelId key52 = new ChannelId(p.channel, p.id);
        List<ChannelIdSalesReturnsProfit> bucket53 = groups50.get(key52);
        if (bucket53 == null) { bucket53 = new ArrayList<>(); groups50.put(key52, bucket53); }
        bucket53.add(row51);
    }
    for (Map.Entry<ChannelId,List<ChannelIdSalesReturnsProfit>> __e : groups50.entrySet()) {
        ChannelId g_key = __e.getKey();
        Group<ChannelId,ChannelIdSalesReturnsProfit> g = new Group<>(g_key, __e.getValue());
        res49.add(new ChannelIdSalesReturnsProfit(g.key.channel, g.key.id, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res54 = new ArrayList<>();
    for (var x : g) {
        res54.add(x.p.sales);
    }
    return res54;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res55 = new ArrayList<>();
    for (var x : g) {
        res55.add(x.p.returns);
    }
    return res55;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res56 = new ArrayList<>();
    for (var x : g) {
        res56.add(x.p.profit);
    }
    return res56;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res49;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new ChannelIdSalesReturnsProfit("catalog channel", 1, 150.000000, 7.000000, 12.000000), new ChannelIdSalesReturnsProfit("store channel", 1, 100.000000, 5.000000, 9.000000), new ChannelIdSalesReturnsProfit("web channel", 1, 200.000000, 10.000000, 18.000000))))) throw new AssertionError("expect failed");
    }
}
