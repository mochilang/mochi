// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:15Z
// q32.mochi
import java.util.*;

class CsItemSkCsSoldDateSkCsExtDiscountAmt {
    int cs_item_sk;
    int cs_sold_date_sk;
    double cs_ext_discount_amt;
    CsItemSkCsSoldDateSkCsExtDiscountAmt(int cs_item_sk, int cs_sold_date_sk, double cs_ext_discount_amt) {
        this.cs_item_sk = cs_item_sk;
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_ext_discount_amt = cs_ext_discount_amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsItemSkCsSoldDateSkCsExtDiscountAmt other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_ext_discount_amt, other.cs_ext_discount_amt);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_sold_date_sk, cs_ext_discount_amt);
    }
    int size() { return 3; }
}
class IItemSkIManufactId {
    int i_item_sk;
    int i_manufact_id;
    IItemSkIManufactId(int i_item_sk, int i_manufact_id) {
        this.i_item_sk = i_item_sk;
        this.i_manufact_id = i_manufact_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIManufactId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_manufact_id, other.i_manufact_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_manufact_id);
    }
    int size() { return 2; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
public class Q32 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CsItemSkCsSoldDateSkCsExtDiscountAmt> catalog_sales = new ArrayList<>(Arrays.asList(new CsItemSkCsSoldDateSkCsExtDiscountAmt(1, 1, 5.000000), new CsItemSkCsSoldDateSkCsExtDiscountAmt(1, 2, 10.000000), new CsItemSkCsSoldDateSkCsExtDiscountAmt(1, 3, 20.000000)));
    List<IItemSkIManufactId> item = new ArrayList<>(Arrays.asList(new IItemSkIManufactId(1, 1)));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000), new DDateSkDYear(2, 2000), new DDateSkDYear(3, 2000)));
    List<Double> filtered = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res0 = new ArrayList<>();
    for (var cs : catalog_sales) {
        for (var i : item) {
            if (!(cs.cs_item_sk == i.i_item_sk)) continue;
            for (var d : date_dim) {
                if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
                if (!(i.i_manufact_id == 1 && d.d_year == 2000)) continue;
                res0.add(cs.cs_ext_discount_amt);
            }
        }
    }
    return res0;
}}).get();
    double avg_discount = filtered.stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0);
    double result = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res1 = new ArrayList<>();
    for (var x : filtered) {
        if (!(String.valueOf(x).compareTo(String.valueOf(avg_discount * 1.300000)) > 0)) continue;
        res1.add(x);
    }
    return res1;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    json(result);
    if (!(result == 20.000000)) throw new AssertionError("expect failed");
    }
}
