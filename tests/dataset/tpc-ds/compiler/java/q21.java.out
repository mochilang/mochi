// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:05Z
// q21.mochi
import java.util.*;

class Inventory {
    int inv_item_sk;
    int inv_warehouse_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    Inventory(int inv_item_sk, int inv_warehouse_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_warehouse_sk = inv_warehouse_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Inventory other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_warehouse_sk, other.inv_warehouse_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_warehouse_sk, inv_date_sk, inv_quantity_on_hand);
    }
}
class Warehouse {
    int w_warehouse_sk;
    String w_warehouse_name;
    Warehouse(int w_warehouse_sk, String w_warehouse_name) {
        this.w_warehouse_sk = w_warehouse_sk;
        this.w_warehouse_name = w_warehouse_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Warehouse other)) return false;
        return Objects.equals(this.w_warehouse_sk, other.w_warehouse_sk) && Objects.equals(this.w_warehouse_name, other.w_warehouse_name);
    }
    @Override public int hashCode() {
        return Objects.hash(w_warehouse_sk, w_warehouse_name);
    }
}
class Item {
    int i_item_sk;
    String i_item_id;
    Item(int i_item_sk, String i_item_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id);
    }
}
class DateDim {
    int d_date_sk;
    String d_date;
    DateDim(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
}
class InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand {
    int inv_item_sk;
    int inv_warehouse_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(int inv_item_sk, int inv_warehouse_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_warehouse_sk = inv_warehouse_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_warehouse_sk, other.inv_warehouse_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_warehouse_sk, inv_date_sk, inv_quantity_on_hand);
    }
    int size() { return 4; }
}
class WWarehouseSkWWarehouseName {
    int w_warehouse_sk;
    String w_warehouse_name;
    WWarehouseSkWWarehouseName(int w_warehouse_sk, String w_warehouse_name) {
        this.w_warehouse_sk = w_warehouse_sk;
        this.w_warehouse_name = w_warehouse_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WWarehouseSkWWarehouseName other)) return false;
        return Objects.equals(this.w_warehouse_sk, other.w_warehouse_sk) && Objects.equals(this.w_warehouse_name, other.w_warehouse_name);
    }
    @Override public int hashCode() {
        return Objects.hash(w_warehouse_sk, w_warehouse_name);
    }
    int size() { return 2; }
}
class IItemSkIItemId {
    int i_item_sk;
    String i_item_id;
    IItemSkIItemId(int i_item_sk, String i_item_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIItemId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id);
    }
    int size() { return 2; }
}
class DDateSkDDate {
    int d_date_sk;
    String d_date;
    DDateSkDDate(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDate other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
    int size() { return 2; }
}
class InvD {
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv;
    DDateSkDDate d;
    InvD(InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv, DDateSkDDate d) {
        this.inv = inv;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvD other)) return false;
        return Objects.equals(this.inv, other.inv) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(inv, d);
    }
    int size() { return 2; }
}
class WI {
    int w;
    int i;
    WI(int w, int i) {
        this.w = w;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WI other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i);
    }
    int size() { return 2; }
}
class WIQty {
    int w;
    int i;
    int qty;
    WIQty(int w, int i, int qty) {
        this.w = w;
        this.i = i;
        this.qty = qty;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WIQty other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i) && Objects.equals(this.qty, other.qty);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i, qty);
    }
    int size() { return 3; }
}
class WNameIIdBeforeQtyAfterQtyRatio {
    String w_name;
    String i_id;
    int before_qty;
    int after_qty;
    double ratio;
    WNameIIdBeforeQtyAfterQtyRatio(String w_name, String i_id, int before_qty, int after_qty, double ratio) {
        this.w_name = w_name;
        this.i_id = i_id;
        this.before_qty = before_qty;
        this.after_qty = after_qty;
        this.ratio = ratio;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WNameIIdBeforeQtyAfterQtyRatio other)) return false;
        return Objects.equals(this.w_name, other.w_name) && Objects.equals(this.i_id, other.i_id) && Objects.equals(this.before_qty, other.before_qty) && Objects.equals(this.after_qty, other.after_qty) && Objects.equals(this.ratio, other.ratio);
    }
    @Override public int hashCode() {
        return Objects.hash(w_name, i_id, before_qty, after_qty, ratio);
    }
    int size() { return 5; }
}
class WWarehouseNameIItemIdInvBeforeInvAfter {
    String w_warehouse_name;
    String i_item_id;
    int inv_before;
    int inv_after;
    WWarehouseNameIItemIdInvBeforeInvAfter(String w_warehouse_name, String i_item_id, int inv_before, int inv_after) {
        this.w_warehouse_name = w_warehouse_name;
        this.i_item_id = i_item_id;
        this.inv_before = inv_before;
        this.inv_after = inv_after;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WWarehouseNameIItemIdInvBeforeInvAfter other)) return false;
        return Objects.equals(this.w_warehouse_name, other.w_warehouse_name) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.inv_before, other.inv_before) && Objects.equals(this.inv_after, other.inv_after);
    }
    @Override public int hashCode() {
        return Objects.hash(w_warehouse_name, i_item_id, inv_before, inv_after);
    }
    int size() { return 4; }
}
public class Q21 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand> inventory = new ArrayList<>(Arrays.asList(new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 1, 30), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 2, 40), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(2, 2, 1, 20), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(2, 2, 2, 20)));
    List<WWarehouseSkWWarehouseName> warehouse = new ArrayList<>(Arrays.asList(new WWarehouseSkWWarehouseName(1, "Main"), new WWarehouseSkWWarehouseName(2, "Backup")));
    List<IItemSkIItemId> item = new ArrayList<>(Arrays.asList(new IItemSkIItemId(1, "ITEM1"), new IItemSkIItemId(2, "ITEM2")));
    List<DDateSkDDate> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDate(1, "2000-03-01"), new DDateSkDDate(2, "2000-03-20")));
    List<WIQty> before = (new java.util.function.Supplier<List<WIQty>>(){public List<WIQty> get(){
    List<WIQty> res0 = new ArrayList<>();
    Map<WI,List<InvD>> groups1 = new LinkedHashMap<>();
    for (var inv : inventory) {
        for (var d : date_dim) {
            if (!(inv.inv_date_sk == d.d_date_sk)) continue;
            if (!(String.valueOf(d.d_date).compareTo(String.valueOf("2000-03-15")) < 0)) continue;
            InvD row2 = new InvD(inv, d);
            WI key3 = new WI(inv.inv_warehouse_sk, inv.inv_item_sk);
            List<InvD> bucket4 = groups1.get(key3);
            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
            bucket4.add(row2);
        }
    }
    for (Map.Entry<WI,List<InvD>> __e : groups1.entrySet()) {
        WI g_key = __e.getKey();
        Group<WI,InvD> g = new Group<>(g_key, __e.getValue());
        res0.add(new WIQty(g.key.w, g.key.i, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.inv_quantity_on_hand);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<WIQty> after = (new java.util.function.Supplier<List<WIQty>>(){public List<WIQty> get(){
    List<WIQty> res6 = new ArrayList<>();
    Map<WI,List<InvD>> groups7 = new LinkedHashMap<>();
    for (var inv : inventory) {
        for (var d : date_dim) {
            if (!(inv.inv_date_sk == d.d_date_sk)) continue;
            if (!(String.valueOf(d.d_date).compareTo(String.valueOf("2000-03-15")) >= 0)) continue;
            InvD row8 = new InvD(inv, d);
            WI key9 = new WI(inv.inv_warehouse_sk, inv.inv_item_sk);
            List<InvD> bucket10 = groups7.get(key9);
            if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
            bucket10.add(row8);
        }
    }
    for (Map.Entry<WI,List<InvD>> __e : groups7.entrySet()) {
        WI g_key = __e.getKey();
        Group<WI,InvD> g = new Group<>(g_key, __e.getValue());
        res6.add(new WIQty(g.key.w, g.key.i, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.inv_quantity_on_hand);
    }
    return res11;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res6;
}}).get();
    List<WNameIIdBeforeQtyAfterQtyRatio> joined = (new java.util.function.Supplier<List<WNameIIdBeforeQtyAfterQtyRatio>>(){public List<WNameIIdBeforeQtyAfterQtyRatio> get(){
    List<WNameIIdBeforeQtyAfterQtyRatio> res12 = new ArrayList<>();
    for (var b : before) {
        for (var a : after) {
            if (!(b.w == a.w && b.i == a.i)) continue;
            for (var w : warehouse) {
                if (!(w.w_warehouse_sk == b.w)) continue;
                for (var it : item) {
                    if (!(it.i_item_sk == b.i)) continue;
                    res12.add(new WNameIIdBeforeQtyAfterQtyRatio(w.w_warehouse_name, it.i_item_id, b.qty, a.qty, a.qty / b.qty));
                }
            }
        }
    }
    return res12;
}}).get();
    List<WWarehouseNameIItemIdInvBeforeInvAfter> result = (new java.util.function.Supplier<List<WWarehouseNameIItemIdInvBeforeInvAfter>>(){public List<WWarehouseNameIItemIdInvBeforeInvAfter> get(){
    List<WWarehouseNameIItemIdInvBeforeInvAfter> res13 = new ArrayList<>();
    for (var r : joined) {
        if (!(r.ratio >= (2.000000 / 3.000000) && r.ratio <= (3.000000 / 2.000000))) continue;
        res13.add(new WWarehouseNameIItemIdInvBeforeInvAfter(r.w_name, r.i_id, r.before_qty, r.after_qty));
    }
    return res13;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new WWarehouseNameIItemIdInvBeforeInvAfter("Backup", "ITEM2", 20, 20), new WWarehouseNameIItemIdInvBeforeInvAfter("Main", "ITEM1", 30, 40))))) throw new AssertionError("expect failed");
    }
}
