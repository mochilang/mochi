public class Main {
    static class WebSale {
        int ws_order_number;
        int ws_ship_date_sk;
        int ws_warehouse_sk;
        int ws_ship_addr_sk;
        int ws_web_site_sk;
        double ws_net_profit;
        double ws_ext_ship_cost;
        
        WebSale(int ws_order_number, int ws_ship_date_sk, int ws_warehouse_sk, int ws_ship_addr_sk, int ws_web_site_sk, double ws_net_profit, double ws_ext_ship_cost) {
            this.ws_order_number = ws_order_number;
            this.ws_ship_date_sk = ws_ship_date_sk;
            this.ws_warehouse_sk = ws_warehouse_sk;
            this.ws_ship_addr_sk = ws_ship_addr_sk;
            this.ws_web_site_sk = ws_web_site_sk;
            this.ws_net_profit = ws_net_profit;
            this.ws_ext_ship_cost = ws_ext_ship_cost;
        }
        
        WebSale() {}
    }
    
    static class WebReturn {
        int wr_order_number;
        
        WebReturn(int wr_order_number) {
            this.wr_order_number = wr_order_number;
        }
        
        WebReturn() {}
    }
    
    static class DateDim {
        int d_date_sk;
        String d_date;
        
        DateDim(int d_date_sk, String d_date) {
            this.d_date_sk = d_date_sk;
            this.d_date = d_date;
        }
        
        DateDim() {}
    }
    
    static class CustomerAddress {
        int ca_address_sk;
        String ca_state;
        
        CustomerAddress(int ca_address_sk, String ca_state) {
            this.ca_address_sk = ca_address_sk;
            this.ca_state = ca_state;
        }
        
        CustomerAddress() {}
    }
    
    static class WebSite {
        int web_site_sk;
        String web_company_name;
        
        WebSite(int web_site_sk, String web_company_name) {
            this.web_site_sk = web_site_sk;
            this.web_company_name = web_company_name;
        }
        
        WebSite() {}
    }
    
    static Object[] distinct(Object[] xs) {
        Object[] out = new Object[]{};
        for (var x : xs) {
            if ((!contains.apply(out, x))) {
                out = append.apply(out, x);
            }
        }
        return out;
    }
    
    static void test_TPCDS_Q94_shipping() {
        expect((result == new java.util.HashMap<>(java.util.Map.of("order_count", 1, "total_shipping_cost", 2, "total_net_profit", 5))));
    }
    
    static Object[] web_sales = new Object[]{new java.util.HashMap<>(java.util.Map.of("ws_order_number", 1, "ws_ship_date_sk", 1, "ws_warehouse_sk", 1, "ws_ship_addr_sk", 1, "ws_web_site_sk", 1, "ws_net_profit", 5, "ws_ext_ship_cost", 2)), new java.util.HashMap<>(java.util.Map.of("ws_order_number", 2, "ws_ship_date_sk", 1, "ws_warehouse_sk", 2, "ws_ship_addr_sk", 1, "ws_web_site_sk", 1, "ws_net_profit", 3, "ws_ext_ship_cost", 1))};
    
    static Object[] web_returns = new Object[]{new java.util.HashMap<>(java.util.Map.of("wr_order_number", 2))};
    
    static Object[] date_dim = new Object[]{new java.util.HashMap<>(java.util.Map.of("d_date_sk", 1, "d_date", "2001-02-01"))};
    
    static Object[] customer_address = new Object[]{new java.util.HashMap<>(java.util.Map.of("ca_address_sk", 1, "ca_state", "CA"))};
    
    static Object[] web_site = new Object[]{new java.util.HashMap<>(java.util.Map.of("web_site_sk", 1, "web_company_name", "pri"))};
    
    static Object[] filtered = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(web_sales);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
            new _JoinSpec(_toList(date_dim), (Object[] a) -> { Object ws = a[0]; Object d = a[1]; return (ws.get("ws_ship_date_sk") == d.get("d_date_sk")); }, false, false),
            new _JoinSpec(_toList(customer_address), (Object[] a) -> { Object ws = a[0]; Object d = a[1]; Object ca = a[2]; return (ws.get("ws_ship_addr_sk") == ca.get("ca_address_sk")); }, false, false),
            new _JoinSpec(_toList(web_site), (Object[] a) -> { Object ws = a[0]; Object d = a[1]; Object ca = a[2]; Object w = a[3]; return (ws.get("ws_web_site_sk") == w.get("web_site_sk")); }, false, false)
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object ws = a[0]; Object d = a[1]; Object ca = a[2]; Object w = a[3]; return ws; }, (Object[] a) -> { Object ws = a[0]; Object d = a[1]; Object ca = a[2]; Object w = a[3]; return (((ca.get("ca_state") == "CA") && (w.get("web_company_name") == "pri")) && (_exists((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(web_returns);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object wr = a[0]; return wr; }, (Object[] a) -> { Object wr = a[0]; return (wr.get("wr_order_number") == ws.get("ws_order_number")); }, null, -1, -1));
    }
}).get()) == false)); }, null, -1, -1));
    }
}).get();
    
    static java.util.Map<String, Object> result = new java.util.HashMap<>(java.util.Map.of("order_count", distinct((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(filtered);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ws_order_number"); }, null, null, -1, -1));
    }
}).get()).length, "total_shipping_cost", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(filtered);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ws_ext_ship_cost"); }, null, null, -1, -1));
    }
}).get()), "total_net_profit", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(filtered);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ws_net_profit"); }, null, null, -1, -1));
    }
}).get())));
    
    public static void main(String[] args) {
        test_TPCDS_Q94_shipping();
        _json(result);
    }
    
    static boolean _exists(Object v) {
        if (v instanceof _Group) return ((_Group)v).length() > 0;
        if (v instanceof java.util.Map<?,?>) return !((java.util.Map<?,?>)v).isEmpty();
        if (v instanceof String) return !((String)v).isEmpty();
        java.util.List<Object> items = _toList(v);
        return !items.isEmpty();
    }
    
    static double _sum(Object v) {
        java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
        double sum = 0;
        for (Object it : items) {
            if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("sum() expects numbers");
        }
        return sum;
    }
    
    static void expect(boolean cond) {
        if (!cond) throw new RuntimeException("expect failed");
    }
    
    static void _json(Object v) {
        System.out.println(_toJson(v));
    }
    
    static java.util.List<Object> _toList(Object v) {
        if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
        int n = java.lang.reflect.Array.getLength(v);
        java.util.List<Object> out = new java.util.ArrayList<>(n);
        for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
        return out;
    }
    
    static class _JoinSpec {
        java.util.List<Object> items;
        java.util.function.Function<Object[],Boolean> on;
        boolean left;
        boolean right;
        _JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
            this.items=items; this.on=on; this.left=left; this.right=right;
        }
    }
    
    static class _QueryOpts {
        java.util.function.Function<Object[],Object> selectFn;
        java.util.function.Function<Object[],Boolean> where;
        java.util.function.Function<Object[],Object> sortKey;
        int skip; int take;
        _QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
            this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
        }
    }
    static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
        java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
        for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
        for (_JoinSpec j : joins) {
            java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
            java.util.List<Object> jitems = j.items;
            if (j.right && j.left) {
                boolean[] matched = new boolean[jitems.size()];
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (int ri=0; ri<jitems.size(); ri++) {
                        Object right = jitems.get(ri);
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; matched[ri] = true;
                        java.util.List<Object> row = new java.util.ArrayList<>(left);
                        row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
                for (int ri=0; ri<jitems.size(); ri++) {
                    if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
                }
            } else if (j.right) {
                for (Object right : jitems) {
                    boolean m = false;
                    for (java.util.List<Object> left : items) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
                }
            } else {
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (Object right : jitems) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
            items = joined;
        }
        if (opts.where != null) {
            java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
            for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
            items = filtered;
        }
        if (opts.sortKey != null) {
            class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
            java.util.List<Pair> pairs = new java.util.ArrayList<>();
            for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
            pairs.sort((a,b) -> {
                Object ak=a.key, bk=b.key;
                if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
                if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
                return ak.toString().compareTo(bk.toString());
            });
            for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
        }
        if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
        if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
        java.util.List<Object> res = new java.util.ArrayList<>();
        for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
        return res;
    }
}
