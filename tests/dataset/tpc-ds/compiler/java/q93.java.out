// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:52:06Z
// q93.mochi
import java.util.*;

class StoreSale {
    int ss_item_sk;
    int ss_ticket_number;
    int ss_customer_sk;
    int ss_quantity;
    double ss_sales_price;
    StoreSale(int ss_item_sk, int ss_ticket_number, int ss_customer_sk, int ss_quantity, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_quantity = ss_quantity;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_ticket_number, ss_customer_sk, ss_quantity, ss_sales_price);
    }
}
class StoreReturn {
    int sr_item_sk;
    int sr_ticket_number;
    int sr_reason_sk;
    int sr_return_quantity;
    StoreReturn(int sr_item_sk, int sr_ticket_number, int sr_reason_sk, int sr_return_quantity) {
        this.sr_item_sk = sr_item_sk;
        this.sr_ticket_number = sr_ticket_number;
        this.sr_reason_sk = sr_reason_sk;
        this.sr_return_quantity = sr_return_quantity;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreReturn other)) return false;
        return Objects.equals(this.sr_item_sk, other.sr_item_sk) && Objects.equals(this.sr_ticket_number, other.sr_ticket_number) && Objects.equals(this.sr_reason_sk, other.sr_reason_sk) && Objects.equals(this.sr_return_quantity, other.sr_return_quantity);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_item_sk, sr_ticket_number, sr_reason_sk, sr_return_quantity);
    }
}
class Reason {
    int r_reason_sk;
    String r_reason_desc;
    Reason(int r_reason_sk, String r_reason_desc) {
        this.r_reason_sk = r_reason_sk;
        this.r_reason_desc = r_reason_desc;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Reason other)) return false;
        return Objects.equals(this.r_reason_sk, other.r_reason_sk) && Objects.equals(this.r_reason_desc, other.r_reason_desc);
    }
    @Override public int hashCode() {
        return Objects.hash(r_reason_sk, r_reason_desc);
    }
}
class SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice {
    int ss_item_sk;
    int ss_ticket_number;
    int ss_customer_sk;
    int ss_quantity;
    double ss_sales_price;
    SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice(int ss_item_sk, int ss_ticket_number, int ss_customer_sk, int ss_quantity, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_quantity = ss_quantity;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_ticket_number, ss_customer_sk, ss_quantity, ss_sales_price);
    }
    int size() { return 5; }
}
class SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity {
    int sr_item_sk;
    int sr_ticket_number;
    int sr_reason_sk;
    int sr_return_quantity;
    SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity(int sr_item_sk, int sr_ticket_number, int sr_reason_sk, int sr_return_quantity) {
        this.sr_item_sk = sr_item_sk;
        this.sr_ticket_number = sr_ticket_number;
        this.sr_reason_sk = sr_reason_sk;
        this.sr_return_quantity = sr_return_quantity;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity other)) return false;
        return Objects.equals(this.sr_item_sk, other.sr_item_sk) && Objects.equals(this.sr_ticket_number, other.sr_ticket_number) && Objects.equals(this.sr_reason_sk, other.sr_reason_sk) && Objects.equals(this.sr_return_quantity, other.sr_return_quantity);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_item_sk, sr_ticket_number, sr_reason_sk, sr_return_quantity);
    }
    int size() { return 4; }
}
class RReasonSkRReasonDesc {
    int r_reason_sk;
    String r_reason_desc;
    RReasonSkRReasonDesc(int r_reason_sk, String r_reason_desc) {
        this.r_reason_sk = r_reason_sk;
        this.r_reason_desc = r_reason_desc;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RReasonSkRReasonDesc other)) return false;
        return Objects.equals(this.r_reason_sk, other.r_reason_sk) && Objects.equals(this.r_reason_desc, other.r_reason_desc);
    }
    @Override public int hashCode() {
        return Objects.hash(r_reason_sk, r_reason_desc);
    }
    int size() { return 2; }
}
class SsCustomerSkActSales {
    int ss_customer_sk;
    Object act_sales;
    SsCustomerSkActSales(int ss_customer_sk, Object act_sales) {
        this.ss_customer_sk = ss_customer_sk;
        this.act_sales = act_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkActSales other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.act_sales, other.act_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, act_sales);
    }
    int size() { return 2; }
}
class SsCustomerSkSumsales {
    int ss_customer_sk;
    int sumsales;
    SsCustomerSkSumsales(int ss_customer_sk, int sumsales) {
        this.ss_customer_sk = ss_customer_sk;
        this.sumsales = sumsales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkSumsales other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.sumsales, other.sumsales);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, sumsales);
    }
    int size() { return 2; }
}
public class Q93 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 5, 10.000000), new SsItemSkSsTicketNumberSsCustomerSkSsQuantitySsSalesPrice(1, 2, 2, 3, 20.000000)));
    List<SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity> store_returns = new ArrayList<>(Arrays.asList(new SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity(1, 1, 1, 1)));
    List<RReasonSkRReasonDesc> reason = new ArrayList<>(Arrays.asList(new RReasonSkRReasonDesc(1, "ReasonA")));
    List<SsCustomerSkActSales> t = (new java.util.function.Supplier<List<SsCustomerSkActSales>>(){public List<SsCustomerSkActSales> get(){
    List<SsCustomerSkActSales> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        List<SrItemSkSrTicketNumberSrReasonSkSrReturnQuantity> tmp1 = new ArrayList<>();
        for (var it2 : store_returns) {
            var sr = it2;
            if (!(ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number)) continue;
            tmp1.add(it2);
        }
        if (tmp1.isEmpty()) tmp1.add(null);
        for (var sr : tmp1) {
            List<RReasonSkRReasonDesc> tmp3 = new ArrayList<>();
            for (var it4 : reason) {
                var r = it4;
                if (!(!Objects.equals(sr, null) && sr.sr_reason_sk == r.r_reason_sk)) continue;
                tmp3.add(it4);
            }
            if (tmp3.isEmpty()) tmp3.add(null);
            for (var r : tmp3) {
                if (!(Objects.equals(r, null) || Objects.equals(r.r_reason_desc, "ReasonA"))) continue;
                res0.add(new SsCustomerSkActSales(ss.ss_customer_sk, (!Objects.equals(sr, null) ? (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price : ss.ss_quantity * ss.ss_sales_price)));
            }
        }
    }
    return res0;
}}).get();
    List<SsCustomerSkSumsales> result = (new java.util.function.Supplier<List<SsCustomerSkSumsales>>(){public List<SsCustomerSkSumsales> get(){
    List<SsCustomerSkSumsales> res5 = new ArrayList<>();
    Map<Integer,List<SsCustomerSkActSales>> groups6 = new LinkedHashMap<>();
    for (var x : t) {
        var row7 = x;
        int key8 = x.ss_customer_sk;
        List<SsCustomerSkActSales> bucket9 = groups6.get(key8);
        if (bucket9 == null) { bucket9 = new ArrayList<>(); groups6.put(key8, bucket9); }
        bucket9.add(row7);
    }
    for (Map.Entry<Integer,List<SsCustomerSkActSales>> __e : groups6.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SsCustomerSkActSales> g = new Group<>(g_key, __e.getValue());
        res5.add(new SsCustomerSkSumsales(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res10 = new ArrayList<>();
    for (var y : g) {
        res10.add(y.act_sales);
    }
    return res10;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res5;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SsCustomerSkSumsales(1, 40.000000), new SsCustomerSkSumsales(2, 60.000000))))) throw new AssertionError("expect failed");
    }
}
