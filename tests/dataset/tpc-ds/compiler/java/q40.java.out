public class Main {
    static void test_TPCDS_Q40_simplified() {
        expect((result == new Object[]{new java.util.HashMap<>(java.util.Map.of("w_state", "CA", "i_item_id", "I1", "sales_before", 100, "sales_after", 0))}));
    }
    
    static Object[] catalog_sales = new Object[]{new java.util.HashMap<>(java.util.Map.of("order", 1, "item_sk", 1, "warehouse_sk", 1, "date_sk", 1, "price", 100)), new java.util.HashMap<>(java.util.Map.of("order", 2, "item_sk", 1, "warehouse_sk", 1, "date_sk", 2, "price", 150))};
    
    static Object[] catalog_returns = new Object[]{new java.util.HashMap<>(java.util.Map.of("order", 2, "item_sk", 1, "refunded", 150))};
    
    static Object[] item = new Object[]{new java.util.HashMap<>(java.util.Map.of("item_sk", 1, "item_id", "I1", "current_price", 1.2))};
    
    static Object[] warehouse = new Object[]{new java.util.HashMap<>(java.util.Map.of("warehouse_sk", 1, "state", "CA"))};
    
    static Object[] date_dim = new Object[]{new java.util.HashMap<>(java.util.Map.of("date_sk", 1, "date", "2020-01-10")), new java.util.HashMap<>(java.util.Map.of("date_sk", 2, "date", "2020-01-20"))};
    
    static String sales_date = "2020-01-15";
    
    static Object[] records = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(catalog_sales);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
            new _JoinSpec(_toList(catalog_returns), (Object[] a) -> { Object cs = a[0]; Object cr = a[1]; return ((cs.get("order") == cr.get("order")) && (cs.get("item_sk") == cr.get("item_sk"))); }, true, false),
            new _JoinSpec(_toList(warehouse), (Object[] a) -> { Object cs = a[0]; Object cr = a[1]; Object w = a[2]; return (cs.get("warehouse_sk") == w.get("warehouse_sk")); }, false, false),
            new _JoinSpec(_toList(item), (Object[] a) -> { Object cs = a[0]; Object cr = a[1]; Object w = a[2]; Object i = a[3]; return (cs.get("item_sk") == i.get("item_sk")); }, false, false),
            new _JoinSpec(_toList(date_dim), (Object[] a) -> { Object cs = a[0]; Object cr = a[1]; Object w = a[2]; Object i = a[3]; Object d = a[4]; return (cs.get("date_sk") == d.get("date_sk")); }, false, false)
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object cs = a[0]; Object cr = a[1]; Object w = a[2]; Object i = a[3]; Object d = a[4]; return new java.util.HashMap<>(java.util.Map.of("w_state", w.get("state"), "i_item_id", i.get("item_id"), "sold_date", d.get("date"), "net", (cs.get("price") - ((cr == null) ? 0 : cr.get("refunded"))))); }, (Object[] a) -> { Object cs = a[0]; Object cr = a[1]; Object w = a[2]; Object i = a[3]; Object d = a[4]; return ((i.get("current_price") >= 0.99) && (i.get("current_price") <= 1.49)); }, null, -1, -1));
    }
}).get();
    
    static Object[] result = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(records);
        java.util.List<_Group> _grps = _group_by(_src, r -> new java.util.HashMap<>(java.util.Map.of("w_state", r.get("w_state"), "i_item_id", r.get("i_item_id"))));
        java.util.List<Object> _res = new java.util.ArrayList<>();
        for (_Group g : _grps) {
            _res.add(new java.util.HashMap<>(java.util.Map.of("w_state", g.get("key").w_state, "i_item_id", g.get("key").i_item_id, "sales_before", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return ((x.get("sold_date") < sales_date) ? x.get("net") : 0); }, null, null, -1, -1));
    }
}).get()), "sales_after", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return ((x.get("sold_date") >= sales_date) ? x.get("net") : 0); }, null, null, -1, -1));
    }
}).get()))));
        }
        return _res;
    }
}).get();
    
    public static void main(String[] args) {
        test_TPCDS_Q40_simplified();
        _json(result);
    }
    
    static double _sum(Object v) {
        java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
        double sum = 0;
        for (Object it : items) {
            if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("sum() expects numbers");
        }
        return sum;
    }
    
    static void expect(boolean cond) {
        if (!cond) throw new RuntimeException("expect failed");
    }
    
    static void _json(Object v) {
        System.out.println(_toJson(v));
    }
    
    static java.util.List<Object> _toList(Object v) {
        if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
        int n = java.lang.reflect.Array.getLength(v);
        java.util.List<Object> out = new java.util.ArrayList<>(n);
        for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
        return out;
    }
    
    static class _JoinSpec {
        java.util.List<Object> items;
        java.util.function.Function<Object[],Boolean> on;
        boolean left;
        boolean right;
        _JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
            this.items=items; this.on=on; this.left=left; this.right=right;
        }
    }
    
    static class _QueryOpts {
        java.util.function.Function<Object[],Object> selectFn;
        java.util.function.Function<Object[],Boolean> where;
        java.util.function.Function<Object[],Object> sortKey;
        int skip; int take;
        _QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
            this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
        }
    }
    static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
        java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
        for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
        for (_JoinSpec j : joins) {
            java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
            java.util.List<Object> jitems = j.items;
            if (j.right && j.left) {
                boolean[] matched = new boolean[jitems.size()];
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (int ri=0; ri<jitems.size(); ri++) {
                        Object right = jitems.get(ri);
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; matched[ri] = true;
                        java.util.List<Object> row = new java.util.ArrayList<>(left);
                        row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
                for (int ri=0; ri<jitems.size(); ri++) {
                    if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
                }
            } else if (j.right) {
                for (Object right : jitems) {
                    boolean m = false;
                    for (java.util.List<Object> left : items) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
                }
            } else {
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (Object right : jitems) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
            items = joined;
        }
        if (opts.where != null) {
            java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
            for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
            items = filtered;
        }
        if (opts.sortKey != null) {
            class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
            java.util.List<Pair> pairs = new java.util.ArrayList<>();
            for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
            pairs.sort((a,b) -> {
                Object ak=a.key, bk=b.key;
                if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
                if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
                return ak.toString().compareTo(bk.toString());
            });
            for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
        }
        if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
        if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
        java.util.List<Object> res = new java.util.ArrayList<>();
        for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
        return res;
    }
    
    static class _Group {
        Object key;
        java.util.List<Object> Items = new java.util.ArrayList<>();
        _Group(Object k) { key = k; }
        int length() { return Items.size(); }
    }
    
    static java.util.List<_Group> _group_by(java.util.List<Object> src, java.util.function.Function<Object,Object> keyfn) {
        java.util.Map<String,_Group> groups = new java.util.LinkedHashMap<>();
        for (Object it : src) {
            Object key = keyfn.apply(it);
            String ks = String.valueOf(key);
            _Group g = groups.get(ks);
            if (g == null) { g = new _Group(key); groups.put(ks, g); }
            g.Items.add(it);
        }
        return new java.util.ArrayList<>(groups.values());
    }
}
