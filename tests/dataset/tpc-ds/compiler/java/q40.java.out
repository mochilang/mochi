// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:22Z
// q40.mochi
import java.util.*;

class OrderItemSkWarehouseSkDateSkPrice {
    int order;
    int item_sk;
    int warehouse_sk;
    int date_sk;
    double price;
    OrderItemSkWarehouseSkDateSkPrice(int order, int item_sk, int warehouse_sk, int date_sk, double price) {
        this.order = order;
        this.item_sk = item_sk;
        this.warehouse_sk = warehouse_sk;
        this.date_sk = date_sk;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OrderItemSkWarehouseSkDateSkPrice other)) return false;
        return Objects.equals(this.order, other.order) && Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.warehouse_sk, other.warehouse_sk) && Objects.equals(this.date_sk, other.date_sk) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(order, item_sk, warehouse_sk, date_sk, price);
    }
    int size() { return 5; }
}
class OrderItemSkRefunded {
    int order;
    int item_sk;
    double refunded;
    OrderItemSkRefunded(int order, int item_sk, double refunded) {
        this.order = order;
        this.item_sk = item_sk;
        this.refunded = refunded;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OrderItemSkRefunded other)) return false;
        return Objects.equals(this.order, other.order) && Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.refunded, other.refunded);
    }
    @Override public int hashCode() {
        return Objects.hash(order, item_sk, refunded);
    }
    int size() { return 3; }
}
class ItemSkItemIdCurrentPrice {
    int item_sk;
    String item_id;
    double current_price;
    ItemSkItemIdCurrentPrice(int item_sk, String item_id, double current_price) {
        this.item_sk = item_sk;
        this.item_id = item_id;
        this.current_price = current_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemSkItemIdCurrentPrice other)) return false;
        return Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.item_id, other.item_id) && Objects.equals(this.current_price, other.current_price);
    }
    @Override public int hashCode() {
        return Objects.hash(item_sk, item_id, current_price);
    }
    int size() { return 3; }
}
class WarehouseSkState {
    int warehouse_sk;
    String state;
    WarehouseSkState(int warehouse_sk, String state) {
        this.warehouse_sk = warehouse_sk;
        this.state = state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WarehouseSkState other)) return false;
        return Objects.equals(this.warehouse_sk, other.warehouse_sk) && Objects.equals(this.state, other.state);
    }
    @Override public int hashCode() {
        return Objects.hash(warehouse_sk, state);
    }
    int size() { return 2; }
}
class DateSkDate {
    int date_sk;
    String date;
    DateSkDate(int date_sk, String date) {
        this.date_sk = date_sk;
        this.date = date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateSkDate other)) return false;
        return Objects.equals(this.date_sk, other.date_sk) && Objects.equals(this.date, other.date);
    }
    @Override public int hashCode() {
        return Objects.hash(date_sk, date);
    }
    int size() { return 2; }
}
class WStateIItemIdSoldDateNet {
    String w_state;
    String i_item_id;
    String sold_date;
    double net;
    WStateIItemIdSoldDateNet(String w_state, String i_item_id, String sold_date, double net) {
        this.w_state = w_state;
        this.i_item_id = i_item_id;
        this.sold_date = sold_date;
        this.net = net;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WStateIItemIdSoldDateNet other)) return false;
        return Objects.equals(this.w_state, other.w_state) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.sold_date, other.sold_date) && Objects.equals(this.net, other.net);
    }
    @Override public int hashCode() {
        return Objects.hash(w_state, i_item_id, sold_date, net);
    }
    int size() { return 4; }
}
class WStateIItemId {
    String w_state;
    String i_item_id;
    WStateIItemId(String w_state, String i_item_id) {
        this.w_state = w_state;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WStateIItemId other)) return false;
        return Objects.equals(this.w_state, other.w_state) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(w_state, i_item_id);
    }
    int size() { return 2; }
}
class WStateIItemIdSalesBeforeSalesAfter {
    String w_state;
    String i_item_id;
    int sales_before;
    int sales_after;
    WStateIItemIdSalesBeforeSalesAfter(String w_state, String i_item_id, int sales_before, int sales_after) {
        this.w_state = w_state;
        this.i_item_id = i_item_id;
        this.sales_before = sales_before;
        this.sales_after = sales_after;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WStateIItemIdSalesBeforeSalesAfter other)) return false;
        return Objects.equals(this.w_state, other.w_state) && Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.sales_before, other.sales_before) && Objects.equals(this.sales_after, other.sales_after);
    }
    @Override public int hashCode() {
        return Objects.hash(w_state, i_item_id, sales_before, sales_after);
    }
    int size() { return 4; }
}
public class Q40 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<OrderItemSkWarehouseSkDateSkPrice> catalog_sales = new ArrayList<>(Arrays.asList(new OrderItemSkWarehouseSkDateSkPrice(1, 1, 1, 1, 100.000000), new OrderItemSkWarehouseSkDateSkPrice(2, 1, 1, 2, 150.000000)));
    List<OrderItemSkRefunded> catalog_returns = new ArrayList<>(Arrays.asList(new OrderItemSkRefunded(2, 1, 150.000000)));
    List<ItemSkItemIdCurrentPrice> item = new ArrayList<>(Arrays.asList(new ItemSkItemIdCurrentPrice(1, "I1", 1.200000)));
    List<WarehouseSkState> warehouse = new ArrayList<>(Arrays.asList(new WarehouseSkState(1, "CA")));
    List<DateSkDate> date_dim = new ArrayList<>(Arrays.asList(new DateSkDate(1, "2020-01-10"), new DateSkDate(2, "2020-01-20")));
    String sales_date = "2020-01-15";
    List<WStateIItemIdSoldDateNet> records = (new java.util.function.Supplier<List<WStateIItemIdSoldDateNet>>(){public List<WStateIItemIdSoldDateNet> get(){
    List<WStateIItemIdSoldDateNet> res0 = new ArrayList<>();
    for (var cs : catalog_sales) {
        List<OrderItemSkRefunded> tmp1 = new ArrayList<>();
        for (var it2 : catalog_returns) {
            var cr = it2;
            if (!(cs.order == cr.order && cs.item_sk == cr.item_sk)) continue;
            tmp1.add(it2);
        }
        if (tmp1.isEmpty()) tmp1.add(null);
        for (var cr : tmp1) {
            for (var w : warehouse) {
                if (!(cs.warehouse_sk == w.warehouse_sk)) continue;
                for (var i : item) {
                    if (!(cs.item_sk == i.item_sk)) continue;
                    for (var d : date_dim) {
                        if (!(cs.date_sk == d.date_sk)) continue;
                        if (!(i.current_price >= 0.990000 && i.current_price <= 1.490000)) continue;
                        res0.add(new WStateIItemIdSoldDateNet(w.state, i.item_id, d.date, cs.price - ((Objects.equals(cr, null) ? 0.000000 : cr.refunded))));
                    }
                }
            }
        }
    }
    return res0;
}}).get();
    List<WStateIItemIdSalesBeforeSalesAfter> result = (new java.util.function.Supplier<List<WStateIItemIdSalesBeforeSalesAfter>>(){public List<WStateIItemIdSalesBeforeSalesAfter> get(){
    List<WStateIItemIdSalesBeforeSalesAfter> res3 = new ArrayList<>();
    Map<WStateIItemId,List<WStateIItemIdSoldDateNet>> groups4 = new LinkedHashMap<>();
    for (var r : records) {
        var row5 = r;
        WStateIItemId key6 = new WStateIItemId(r.w_state, r.i_item_id);
        List<WStateIItemIdSoldDateNet> bucket7 = groups4.get(key6);
        if (bucket7 == null) { bucket7 = new ArrayList<>(); groups4.put(key6, bucket7); }
        bucket7.add(row5);
    }
    for (Map.Entry<WStateIItemId,List<WStateIItemIdSoldDateNet>> __e : groups4.entrySet()) {
        WStateIItemId g_key = __e.getKey();
        Group<WStateIItemId,WStateIItemIdSoldDateNet> g = new Group<>(g_key, __e.getValue());
        res3.add(new WStateIItemIdSalesBeforeSalesAfter(g.key.w_state, g.key.i_item_id, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add((String.valueOf(x.sold_date).compareTo(String.valueOf(sales_date)) < 0 ? x.net : 0.000000));
    }
    return res8;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res9 = new ArrayList<>();
    for (var x : g) {
        res9.add((String.valueOf(x.sold_date).compareTo(String.valueOf(sales_date)) >= 0 ? x.net : 0.000000));
    }
    return res9;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res3;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new WStateIItemIdSalesBeforeSalesAfter("CA", "I1", 100.000000, 0.000000))))) throw new AssertionError("expect failed");
    }
}
