// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:10Z
// q27.mochi
import java.util.*;

class StoreSale {
    int ss_item_sk;
    int ss_store_sk;
    int ss_cdemo_sk;
    int ss_sold_date_sk;
    int ss_quantity;
    double ss_list_price;
    double ss_coupon_amt;
    double ss_sales_price;
    StoreSale(int ss_item_sk, int ss_store_sk, int ss_cdemo_sk, int ss_sold_date_sk, int ss_quantity, double ss_list_price, double ss_coupon_amt, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_cdemo_sk = ss_cdemo_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_quantity = ss_quantity;
        this.ss_list_price = ss_list_price;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_cdemo_sk, other.ss_cdemo_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_store_sk, ss_cdemo_sk, ss_sold_date_sk, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price);
    }
}
class CustomerDemo {
    int cd_demo_sk;
    String cd_gender;
    String cd_marital_status;
    String cd_education_status;
    CustomerDemo(int cd_demo_sk, String cd_gender, String cd_marital_status, String cd_education_status) {
        this.cd_demo_sk = cd_demo_sk;
        this.cd_gender = cd_gender;
        this.cd_marital_status = cd_marital_status;
        this.cd_education_status = cd_education_status;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerDemo other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk) && Objects.equals(this.cd_gender, other.cd_gender) && Objects.equals(this.cd_marital_status, other.cd_marital_status) && Objects.equals(this.cd_education_status, other.cd_education_status);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk, cd_gender, cd_marital_status, cd_education_status);
    }
}
class DateDim {
    int d_date_sk;
    int d_year;
    DateDim(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
}
class Store {
    int s_store_sk;
    String s_state;
    Store(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
}
class Item {
    int i_item_sk;
    String i_item_id;
    Item(int i_item_sk, String i_item_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id);
    }
}
class SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice {
    int ss_item_sk;
    int ss_store_sk;
    int ss_cdemo_sk;
    int ss_sold_date_sk;
    int ss_quantity;
    double ss_list_price;
    double ss_coupon_amt;
    double ss_sales_price;
    SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice(int ss_item_sk, int ss_store_sk, int ss_cdemo_sk, int ss_sold_date_sk, int ss_quantity, double ss_list_price, double ss_coupon_amt, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_cdemo_sk = ss_cdemo_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_quantity = ss_quantity;
        this.ss_list_price = ss_list_price;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_cdemo_sk, other.ss_cdemo_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_store_sk, ss_cdemo_sk, ss_sold_date_sk, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price);
    }
    int size() { return 8; }
}
class CdDemoSkCdGenderCdMaritalStatusCdEducationStatus {
    int cd_demo_sk;
    String cd_gender;
    String cd_marital_status;
    String cd_education_status;
    CdDemoSkCdGenderCdMaritalStatusCdEducationStatus(int cd_demo_sk, String cd_gender, String cd_marital_status, String cd_education_status) {
        this.cd_demo_sk = cd_demo_sk;
        this.cd_gender = cd_gender;
        this.cd_marital_status = cd_marital_status;
        this.cd_education_status = cd_education_status;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CdDemoSkCdGenderCdMaritalStatusCdEducationStatus other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk) && Objects.equals(this.cd_gender, other.cd_gender) && Objects.equals(this.cd_marital_status, other.cd_marital_status) && Objects.equals(this.cd_education_status, other.cd_education_status);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk, cd_gender, cd_marital_status, cd_education_status);
    }
    int size() { return 4; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class SStoreSkSState {
    int s_store_sk;
    String s_state;
    SStoreSkSState(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSState other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
    int size() { return 2; }
}
class IItemSkIItemId {
    int i_item_sk;
    String i_item_id;
    IItemSkIItemId(int i_item_sk, String i_item_id) {
        this.i_item_sk = i_item_sk;
        this.i_item_id = i_item_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIItemId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_item_id, other.i_item_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_item_id);
    }
    int size() { return 2; }
}
class SsCdDSI {
    SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice ss;
    CdDemoSkCdGenderCdMaritalStatusCdEducationStatus cd;
    DDateSkDYear d;
    SStoreSkSState s;
    IItemSkIItemId i;
    SsCdDSI(SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice ss, CdDemoSkCdGenderCdMaritalStatusCdEducationStatus cd, DDateSkDYear d, SStoreSkSState s, IItemSkIItemId i) {
        this.ss = ss;
        this.cd = cd;
        this.d = d;
        this.s = s;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCdDSI other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.cd, other.cd) && Objects.equals(this.d, other.d) && Objects.equals(this.s, other.s) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, cd, d, s, i);
    }
    int size() { return 5; }
}
class ItemIdState {
    String item_id;
    String state;
    ItemIdState(String item_id, String state) {
        this.item_id = item_id;
        this.state = state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemIdState other)) return false;
        return Objects.equals(this.item_id, other.item_id) && Objects.equals(this.state, other.state);
    }
    @Override public int hashCode() {
        return Objects.hash(item_id, state);
    }
    int size() { return 2; }
}
class IItemIdSStateAgg1Agg2Agg3Agg4 {
    String i_item_id;
    String s_state;
    double agg1;
    double agg2;
    double agg3;
    double agg4;
    IItemIdSStateAgg1Agg2Agg3Agg4(String i_item_id, String s_state, double agg1, double agg2, double agg3, double agg4) {
        this.i_item_id = i_item_id;
        this.s_state = s_state;
        this.agg1 = agg1;
        this.agg2 = agg2;
        this.agg3 = agg3;
        this.agg4 = agg4;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemIdSStateAgg1Agg2Agg3Agg4 other)) return false;
        return Objects.equals(this.i_item_id, other.i_item_id) && Objects.equals(this.s_state, other.s_state) && Objects.equals(this.agg1, other.agg1) && Objects.equals(this.agg2, other.agg2) && Objects.equals(this.agg3, other.agg3) && Objects.equals(this.agg4, other.agg4);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_id, s_state, agg1, agg2, agg3, agg4);
    }
    int size() { return 6; }
}
public class Q27 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice(1, 1, 1, 1, 5, 100.000000, 10.000000, 90.000000), new SsItemSkSsStoreSkSsCdemoSkSsSoldDateSkSsQuantitySsListPriceSsCouponAmtSsSalesPrice(2, 2, 2, 1, 2, 50.000000, 5.000000, 45.000000)));
    List<CdDemoSkCdGenderCdMaritalStatusCdEducationStatus> customer_demographics = new ArrayList<>(Arrays.asList(new CdDemoSkCdGenderCdMaritalStatusCdEducationStatus(1, "F", "M", "College"), new CdDemoSkCdGenderCdMaritalStatusCdEducationStatus(2, "M", "S", "College")));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000)));
    List<SStoreSkSState> store = new ArrayList<>(Arrays.asList(new SStoreSkSState(1, "CA"), new SStoreSkSState(2, "TX")));
    List<IItemSkIItemId> item = new ArrayList<>(Arrays.asList(new IItemSkIItemId(1, "ITEM1"), new IItemSkIItemId(2, "ITEM2")));
    List<IItemIdSStateAgg1Agg2Agg3Agg4> result = (new java.util.function.Supplier<List<IItemIdSStateAgg1Agg2Agg3Agg4>>(){public List<IItemIdSStateAgg1Agg2Agg3Agg4> get(){
    List<IItemIdSStateAgg1Agg2Agg3Agg4> res0 = new ArrayList<>();
    Map<ItemIdState,List<SsCdDSI>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var cd : customer_demographics) {
            if (!(ss.ss_cdemo_sk == cd.cd_demo_sk)) continue;
            for (var d : date_dim) {
                if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
                for (var s : store) {
                    if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                    for (var i : item) {
                        if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                        if (!(Objects.equals(cd.cd_gender, "F") && Objects.equals(cd.cd_marital_status, "M") && Objects.equals(cd.cd_education_status, "College") && d.d_year == 2000 && Arrays.asList("CA").contains(s.s_state))) continue;
                        SsCdDSI row2 = new SsCdDSI(ss, cd, d, s, i);
                        ItemIdState key3 = new ItemIdState(i.i_item_id, s.s_state);
                        List<SsCdDSI> bucket4 = groups1.get(key3);
                        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                        bucket4.add(row2);
                    }
                }
            }
        }
    }
    for (Map.Entry<ItemIdState,List<SsCdDSI>> __e : groups1.entrySet()) {
        ItemIdState g_key = __e.getKey();
        Group<ItemIdState,SsCdDSI> g = new Group<>(g_key, __e.getValue());
        res0.add(new IItemIdSStateAgg1Agg2Agg3Agg4(g.key.item_id, g.key.state, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_quantity);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss_list_price);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add(x.ss_coupon_amt);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add(x.ss_sales_price);
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IItemIdSStateAgg1Agg2Agg3Agg4("ITEM1", "CA", 5.000000, 100.000000, 10.000000, 90.000000))))) throw new AssertionError("expect failed");
    }
}
