// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:49Z
// q74.mochi
import java.util.*;

class CCustomerSkCCustomerIdCFirstNameCLastName {
    int c_customer_sk;
    int c_customer_id;
    String c_first_name;
    String c_last_name;
    CCustomerSkCCustomerIdCFirstNameCLastName(int c_customer_sk, int c_customer_id, String c_first_name, String c_last_name) {
        this.c_customer_sk = c_customer_sk;
        this.c_customer_id = c_customer_id;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCustomerIdCFirstNameCLastName other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_customer_id, other.c_customer_id) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_customer_id, c_first_name, c_last_name);
    }
    int size() { return 4; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class SsCustomerSkSsSoldDateSkSsNetPaid {
    int ss_customer_sk;
    int ss_sold_date_sk;
    double ss_net_paid;
    SsCustomerSkSsSoldDateSkSsNetPaid(int ss_customer_sk, int ss_sold_date_sk, double ss_net_paid) {
        this.ss_customer_sk = ss_customer_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_net_paid = ss_net_paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkSsSoldDateSkSsNetPaid other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_net_paid, other.ss_net_paid);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, ss_sold_date_sk, ss_net_paid);
    }
    int size() { return 3; }
}
class WsBillCustomerSkWsSoldDateSkWsNetPaid {
    int ws_bill_customer_sk;
    int ws_sold_date_sk;
    double ws_net_paid;
    WsBillCustomerSkWsSoldDateSkWsNetPaid(int ws_bill_customer_sk, int ws_sold_date_sk, double ws_net_paid) {
        this.ws_bill_customer_sk = ws_bill_customer_sk;
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_net_paid = ws_net_paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsBillCustomerSkWsSoldDateSkWsNetPaid other)) return false;
        return Objects.equals(this.ws_bill_customer_sk, other.ws_bill_customer_sk) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_net_paid, other.ws_net_paid);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_bill_customer_sk, ws_sold_date_sk, ws_net_paid);
    }
    int size() { return 3; }
}
class CD {
    CCustomerSkCCustomerIdCFirstNameCLastName c;
    DDateSkDYear d;
    CD(CCustomerSkCCustomerIdCFirstNameCLastName c, DDateSkDYear d) {
        this.c = c;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CD other)) return false;
        return Objects.equals(this.c, other.c) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(c, d);
    }
    int size() { return 2; }
}
class IdFirstLastYear {
    int id;
    String first;
    String last;
    int year;
    IdFirstLastYear(int id, String first, String last, int year) {
        this.id = id;
        this.first = first;
        this.last = last;
        this.year = year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdFirstLastYear other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.first, other.first) && Objects.equals(this.last, other.last) && Objects.equals(this.year, other.year);
    }
    @Override public int hashCode() {
        return Objects.hash(id, first, last, year);
    }
    int size() { return 4; }
}
class CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType {
    int customer_id;
    String customer_first_name;
    String customer_last_name;
    int year;
    int year_total;
    String sale_type;
    CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType(int customer_id, String customer_first_name, String customer_last_name, int year, int year_total, String sale_type) {
        this.customer_id = customer_id;
        this.customer_first_name = customer_first_name;
        this.customer_last_name = customer_last_name;
        this.year = year;
        this.year_total = year_total;
        this.sale_type = sale_type;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType other)) return false;
        return Objects.equals(this.customer_id, other.customer_id) && Objects.equals(this.customer_first_name, other.customer_first_name) && Objects.equals(this.customer_last_name, other.customer_last_name) && Objects.equals(this.year, other.year) && Objects.equals(this.year_total, other.year_total) && Objects.equals(this.sale_type, other.sale_type);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_id, customer_first_name, customer_last_name, year, year_total, sale_type);
    }
    int size() { return 6; }
}
class CustomerIdCustomerFirstNameCustomerLastName {
    int customer_id;
    String customer_first_name;
    String customer_last_name;
    CustomerIdCustomerFirstNameCustomerLastName(int customer_id, String customer_first_name, String customer_last_name) {
        this.customer_id = customer_id;
        this.customer_first_name = customer_first_name;
        this.customer_last_name = customer_last_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerIdCustomerFirstNameCustomerLastName other)) return false;
        return Objects.equals(this.customer_id, other.customer_id) && Objects.equals(this.customer_first_name, other.customer_first_name) && Objects.equals(this.customer_last_name, other.customer_last_name);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_id, customer_first_name, customer_last_name);
    }
    int size() { return 3; }
}
public class Q74 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CCustomerSkCCustomerIdCFirstNameCLastName> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCustomerIdCFirstNameCLastName(1, 1, "Alice", "Smith")));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 1998), new DDateSkDYear(2, 1999)));
    List<SsCustomerSkSsSoldDateSkSsNetPaid> store_sales = new ArrayList<>(Arrays.asList(new SsCustomerSkSsSoldDateSkSsNetPaid(1, 1, 100.000000), new SsCustomerSkSsSoldDateSkSsNetPaid(1, 2, 110.000000)));
    List<WsBillCustomerSkWsSoldDateSkWsNetPaid> web_sales = new ArrayList<>(Arrays.asList(new WsBillCustomerSkWsSoldDateSkWsNetPaid(1, 1, 40.000000), new WsBillCustomerSkWsSoldDateSkWsNetPaid(1, 2, 80.000000)));
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> year_total = java.util.stream.Stream.concat((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res0 = new ArrayList<>();
    Map<IdFirstLastYear,List<CD>> groups1 = new LinkedHashMap<>();
    for (var c : customer) {
        for (var ss : store_sales) {
            if (!(c.c_customer_sk == ss.ss_customer_sk)) continue;
            for (var d : date_dim) {
                if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
                if (!(d.d_year == 1998 || d.d_year == 1999)) continue;
                CD row2 = new CD(c, d);
                IdFirstLastYear key3 = new IdFirstLastYear(c.c_customer_id, c.c_first_name, c.c_last_name, d.d_year);
                List<CD> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<IdFirstLastYear,List<CD>> __e : groups1.entrySet()) {
        IdFirstLastYear g_key = __e.getKey();
        Group<IdFirstLastYear,CD> g = new Group<>(g_key, __e.getValue());
        res0.add(new CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType(g.key.id, g.key.first, g.key.last, g.key.year, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_net_paid);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), "s"));
    }
    return res0;
}}).get().stream(), (new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res6 = new ArrayList<>();
    Map<IdFirstLastYear,List<CD>> groups7 = new LinkedHashMap<>();
    for (var c : customer) {
        for (var ws : web_sales) {
            if (!(c.c_customer_sk == ws.ws_bill_customer_sk)) continue;
            for (var d : date_dim) {
                if (!(d.d_date_sk == ws.ws_sold_date_sk)) continue;
                if (!(d.d_year == 1998 || d.d_year == 1999)) continue;
                CD row8 = new CD(c, d);
                IdFirstLastYear key9 = new IdFirstLastYear(c.c_customer_id, c.c_first_name, c.c_last_name, d.d_year);
                List<CD> bucket10 = groups7.get(key9);
                if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
                bucket10.add(row8);
            }
        }
    }
    for (Map.Entry<IdFirstLastYear,List<CD>> __e : groups7.entrySet()) {
        IdFirstLastYear g_key = __e.getKey();
        Group<IdFirstLastYear,CD> g = new Group<>(g_key, __e.getValue());
        res6.add(new CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType(g.key.id, g.key.first, g.key.last, g.key.year, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.ws.ws_net_paid);
    }
    return res11;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), "w"));
    }
    return res6;
}}).get().stream()).collect(java.util.stream.Collectors.toList());
    Object s_firstyear = first((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res12 = new ArrayList<>();
    for (var y : year_total) {
        if (!(Objects.equals(y.sale_type, "s") && y.year == 1998)) continue;
        res12.add(y);
    }
    return res12;
}}).get());
    Object s_secyear = first((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res13 = new ArrayList<>();
    for (var y : year_total) {
        if (!(Objects.equals(y.sale_type, "s") && y.year == 1999)) continue;
        res13.add(y);
    }
    return res13;
}}).get());
    Object w_firstyear = first((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res14 = new ArrayList<>();
    for (var y : year_total) {
        if (!(Objects.equals(y.sale_type, "w") && y.year == 1998)) continue;
        res14.add(y);
    }
    return res14;
}}).get());
    Object w_secyear = first((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameYearYearTotalSaleType> res15 = new ArrayList<>();
    for (var y : year_total) {
        if (!(Objects.equals(y.sale_type, "w") && y.year == 1999)) continue;
        res15.add(y);
    }
    return res15;
}}).get());
    Object result = (((Number)((Map<?,?>)s_firstyear).get("year_total")).doubleValue() > 0 && ((Number)((Map<?,?>)w_firstyear).get("year_total")).doubleValue() > 0 && String.valueOf((((Number)((Map<?,?>)w_secyear).get("year_total")).doubleValue() / ((Number)((Map<?,?>)w_firstyear).get("year_total")).doubleValue())).compareTo(String.valueOf((((Number)((Map<?,?>)s_secyear).get("year_total")).doubleValue() / ((Number)((Map<?,?>)s_firstyear).get("year_total")).doubleValue()))) > 0 ? Arrays.asList(new CustomerIdCustomerFirstNameCustomerLastName(((Map<?,?>)s_secyear).get("customer_id"), ((Map<?,?>)s_secyear).get("customer_first_name"), ((Map<?,?>)s_secyear).get("customer_last_name"))) : Arrays.asList());
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CustomerIdCustomerFirstNameCustomerLastName(1, "Alice", "Smith"))))) throw new AssertionError("expect failed");
    }
}
