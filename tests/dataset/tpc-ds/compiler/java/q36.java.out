// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:19Z
// q36.mochi
import java.util.*;

class SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit {
    int ss_item_sk;
    int ss_store_sk;
    int ss_sold_date_sk;
    double ss_ext_sales_price;
    double ss_net_profit;
    SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit(int ss_item_sk, int ss_store_sk, int ss_sold_date_sk, double ss_ext_sales_price, double ss_net_profit) {
        this.ss_item_sk = ss_item_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit);
    }
    int size() { return 5; }
}
class IItemSkICategoryIClass {
    int i_item_sk;
    String i_category;
    String i_class;
    IItemSkICategoryIClass(int i_item_sk, String i_category, String i_class) {
        this.i_item_sk = i_item_sk;
        this.i_category = i_category;
        this.i_class = i_class;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkICategoryIClass other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_category, i_class);
    }
    int size() { return 3; }
}
class SStoreSkSState {
    int s_store_sk;
    String s_state;
    SStoreSkSState(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSState other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
    int size() { return 2; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class SsDIS {
    SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit ss;
    DDateSkDYear d;
    IItemSkICategoryIClass i;
    SStoreSkSState s;
    SsDIS(SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit ss, DDateSkDYear d, IItemSkICategoryIClass i, SStoreSkSState s) {
        this.ss = ss;
        this.d = d;
        this.i = i;
        this.s = s;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDIS other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i) && Objects.equals(this.s, other.s);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, i, s);
    }
    int size() { return 4; }
}
class CategoryClass {
    String category;
    String class;
    CategoryClass(String category, String class) {
        this.category = category;
        this.class = class;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CategoryClass other)) return false;
        return Objects.equals(this.category, other.category) && Objects.equals(this.class, other.class);
    }
    @Override public int hashCode() {
        return Objects.hash(category, class);
    }
    int size() { return 2; }
}
class ICategoryIClassGrossMargin {
    String i_category;
    String i_class;
    double gross_margin;
    ICategoryIClassGrossMargin(String i_category, String i_class, double gross_margin) {
        this.i_category = i_category;
        this.i_class = i_class;
        this.gross_margin = gross_margin;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ICategoryIClassGrossMargin other)) return false;
        return Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.gross_margin, other.gross_margin);
    }
    @Override public int hashCode() {
        return Objects.hash(i_category, i_class, gross_margin);
    }
    int size() { return 3; }
}
public class Q36 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit(1, 1, 1, 100.000000, 20.000000), new SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit(2, 1, 1, 200.000000, 50.000000), new SsItemSkSsStoreSkSsSoldDateSkSsExtSalesPriceSsNetProfit(3, 2, 1, 150.000000, 30.000000)));
    List<IItemSkICategoryIClass> item = new ArrayList<>(Arrays.asList(new IItemSkICategoryIClass(1, "Books", "C1"), new IItemSkICategoryIClass(2, "Books", "C2"), new IItemSkICategoryIClass(3, "Electronics", "C3")));
    List<SStoreSkSState> store = new ArrayList<>(Arrays.asList(new SStoreSkSState(1, "A"), new SStoreSkSState(2, "B")));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000)));
    List<ICategoryIClassGrossMargin> result = (new java.util.function.Supplier<List<ICategoryIClassGrossMargin>>(){public List<ICategoryIClassGrossMargin> get(){
    List<ICategoryIClassGrossMargin> res0 = new ArrayList<>();
    Map<CategoryClass,List<SsDIS>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
            for (var i : item) {
                if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                for (var s : store) {
                    if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                    if (!(d.d_year == 2000 && (Objects.equals(s.s_state, "A") || Objects.equals(s.s_state, "B")))) continue;
                    SsDIS row2 = new SsDIS(ss, d, i, s);
                    CategoryClass key3 = new CategoryClass(i.i_category, i.i_class);
                    List<SsDIS> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<CategoryClass,List<SsDIS>> __e : groups1.entrySet()) {
        CategoryClass g_key = __e.getKey();
        Group<CategoryClass,SsDIS> g = new Group<>(g_key, __e.getValue());
        res0.add(new ICategoryIClassGrossMargin(g.key.category, g.key.class, ((Number)(new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_net_profit);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()).doubleValue() / ((Number)(new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss_ext_sales_price);
    }
    return res6;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()).doubleValue()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new ICategoryIClassGrossMargin("Books", "C1", 0.200000), new ICategoryIClassGrossMargin("Books", "C2", 0.250000), new ICategoryIClassGrossMargin("Electronics", "C3", 0.200000))))) throw new AssertionError("expect failed");
    }
}
