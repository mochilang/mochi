// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:50Z
// q75.mochi
import java.util.*;

class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class SsItemSkSsQuantitySsSalesPriceSsSoldDateSk {
    int ss_item_sk;
    int ss_quantity;
    double ss_sales_price;
    int ss_sold_date_sk;
    SsItemSkSsQuantitySsSalesPriceSsSoldDateSk(int ss_item_sk, int ss_quantity, double ss_sales_price, int ss_sold_date_sk) {
        this.ss_item_sk = ss_item_sk;
        this.ss_quantity = ss_quantity;
        this.ss_sales_price = ss_sales_price;
        this.ss_sold_date_sk = ss_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsQuantitySsSalesPriceSsSoldDateSk other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sales_price, other.ss_sales_price) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_quantity, ss_sales_price, ss_sold_date_sk);
    }
    int size() { return 4; }
}
class WsItemSkWsQuantityWsSalesPriceWsSoldDateSk {
    int ws_item_sk;
    int ws_quantity;
    double ws_sales_price;
    int ws_sold_date_sk;
    WsItemSkWsQuantityWsSalesPriceWsSoldDateSk(int ws_item_sk, int ws_quantity, double ws_sales_price, int ws_sold_date_sk) {
        this.ws_item_sk = ws_item_sk;
        this.ws_quantity = ws_quantity;
        this.ws_sales_price = ws_sales_price;
        this.ws_sold_date_sk = ws_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsItemSkWsQuantityWsSalesPriceWsSoldDateSk other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_quantity, other.ws_quantity) && Objects.equals(this.ws_sales_price, other.ws_sales_price) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_quantity, ws_sales_price, ws_sold_date_sk);
    }
    int size() { return 4; }
}
class CsItemSkCsQuantityCsSalesPriceCsSoldDateSk {
    int cs_item_sk;
    int cs_quantity;
    double cs_sales_price;
    int cs_sold_date_sk;
    CsItemSkCsQuantityCsSalesPriceCsSoldDateSk(int cs_item_sk, int cs_quantity, double cs_sales_price, int cs_sold_date_sk) {
        this.cs_item_sk = cs_item_sk;
        this.cs_quantity = cs_quantity;
        this.cs_sales_price = cs_sales_price;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsItemSkCsQuantityCsSalesPriceCsSoldDateSk other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_quantity, other.cs_quantity) && Objects.equals(this.cs_sales_price, other.cs_sales_price) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_quantity, cs_sales_price, cs_sold_date_sk);
    }
    int size() { return 4; }
}
class IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory {
    int i_item_sk;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    int i_manufact_id;
    String i_category;
    IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory(int i_item_sk, int i_brand_id, int i_class_id, int i_category_id, int i_manufact_id, String i_category) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
        this.i_manufact_id = i_manufact_id;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id, i_category);
    }
    int size() { return 6; }
}
class DYearIItemSkQuantityAmount {
    int d_year;
    int i_item_sk;
    int quantity;
    double amount;
    DYearIItemSkQuantityAmount(int d_year, int i_item_sk, int quantity, double amount) {
        this.d_year = d_year;
        this.i_item_sk = i_item_sk;
        this.quantity = quantity;
        this.amount = amount;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearIItemSkQuantityAmount other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.quantity, other.quantity) && Objects.equals(this.amount, other.amount);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, i_item_sk, quantity, amount);
    }
    int size() { return 4; }
}
class SdI {
    DYearIItemSkQuantityAmount sd;
    IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory i;
    SdI(DYearIItemSkQuantityAmount sd, IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory i) {
        this.sd = sd;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SdI other)) return false;
        return Objects.equals(this.sd, other.sd) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(sd, i);
    }
    int size() { return 2; }
}
class YearBrandIdClassIdCategoryIdManufId {
    int year;
    int brand_id;
    int class_id;
    int category_id;
    int manuf_id;
    YearBrandIdClassIdCategoryIdManufId(int year, int brand_id, int class_id, int category_id, int manuf_id) {
        this.year = year;
        this.brand_id = brand_id;
        this.class_id = class_id;
        this.category_id = category_id;
        this.manuf_id = manuf_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof YearBrandIdClassIdCategoryIdManufId other)) return false;
        return Objects.equals(this.year, other.year) && Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.class_id, other.class_id) && Objects.equals(this.category_id, other.category_id) && Objects.equals(this.manuf_id, other.manuf_id);
    }
    @Override public int hashCode() {
        return Objects.hash(year, brand_id, class_id, category_id, manuf_id);
    }
    int size() { return 5; }
}
class DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt {
    int d_year;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    int i_manufact_id;
    int sales_cnt;
    double sales_amt;
    DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt(int d_year, int i_brand_id, int i_class_id, int i_category_id, int i_manufact_id, int sales_cnt, double sales_amt) {
        this.d_year = d_year;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
        this.i_manufact_id = i_manufact_id;
        this.sales_cnt = sales_cnt;
        this.sales_amt = sales_amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.sales_cnt, other.sales_cnt) && Objects.equals(this.sales_amt, other.sales_amt);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt);
    }
    int size() { return 7; }
}
class PrevYearYearIBrandIdIClassIdICategoryIdIManufactIdPrevYrCntCurrYrCntSalesCntDiffSalesAmtDiff {
    int prev_year;
    int year;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    int i_manufact_id;
    int prev_yr_cnt;
    int curr_yr_cnt;
    int sales_cnt_diff;
    int sales_amt_diff;
    PrevYearYearIBrandIdIClassIdICategoryIdIManufactIdPrevYrCntCurrYrCntSalesCntDiffSalesAmtDiff(int prev_year, int year, int i_brand_id, int i_class_id, int i_category_id, int i_manufact_id, int prev_yr_cnt, int curr_yr_cnt, int sales_cnt_diff, int sales_amt_diff) {
        this.prev_year = prev_year;
        this.year = year;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
        this.i_manufact_id = i_manufact_id;
        this.prev_yr_cnt = prev_yr_cnt;
        this.curr_yr_cnt = curr_yr_cnt;
        this.sales_cnt_diff = sales_cnt_diff;
        this.sales_amt_diff = sales_amt_diff;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PrevYearYearIBrandIdIClassIdICategoryIdIManufactIdPrevYrCntCurrYrCntSalesCntDiffSalesAmtDiff other)) return false;
        return Objects.equals(this.prev_year, other.prev_year) && Objects.equals(this.year, other.year) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.prev_yr_cnt, other.prev_yr_cnt) && Objects.equals(this.curr_yr_cnt, other.curr_yr_cnt) && Objects.equals(this.sales_cnt_diff, other.sales_cnt_diff) && Objects.equals(this.sales_amt_diff, other.sales_amt_diff);
    }
    @Override public int hashCode() {
        return Objects.hash(prev_year, year, i_brand_id, i_class_id, i_category_id, i_manufact_id, prev_yr_cnt, curr_yr_cnt, sales_cnt_diff, sales_amt_diff);
    }
    int size() { return 10; }
}
public class Q75 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000), new DDateSkDYear(2, 2001)));
    List<SsItemSkSsQuantitySsSalesPriceSsSoldDateSk> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsQuantitySsSalesPriceSsSoldDateSk(1, 50, 500.000000, 1), new SsItemSkSsQuantitySsSalesPriceSsSoldDateSk(1, 40, 400.000000, 2)));
    List<WsItemSkWsQuantityWsSalesPriceWsSoldDateSk> web_sales = new ArrayList<>(Arrays.asList(new WsItemSkWsQuantityWsSalesPriceWsSoldDateSk(1, 30, 300.000000, 1), new WsItemSkWsQuantityWsSalesPriceWsSoldDateSk(1, 25, 250.000000, 2)));
    List<CsItemSkCsQuantityCsSalesPriceCsSoldDateSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsItemSkCsQuantityCsSalesPriceCsSoldDateSk(1, 20, 200.000000, 1), new CsItemSkCsQuantityCsSalesPriceCsSoldDateSk(1, 15, 150.000000, 2)));
    List<IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory> item = new ArrayList<>(Arrays.asList(new IItemSkIBrandIdIClassIdICategoryIdIManufactIdICategory(1, 1, 2, 3, 4, "Electronics")));
    List<DYearIItemSkQuantityAmount> sales_detail = java.util.stream.Stream.concat(java.util.stream.Stream.concat((new java.util.function.Supplier<List<DYearIItemSkQuantityAmount>>(){public List<DYearIItemSkQuantityAmount> get(){
    List<DYearIItemSkQuantityAmount> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            res0.add(new DYearIItemSkQuantityAmount(d.d_year, ss.ss_item_sk, ss.ss_quantity, ss.ss_sales_price));
        }
    }
    return res0;
}}).get().stream(), (new java.util.function.Supplier<List<DYearIItemSkQuantityAmount>>(){public List<DYearIItemSkQuantityAmount> get(){
    List<DYearIItemSkQuantityAmount> res1 = new ArrayList<>();
    for (var ws : web_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ws.ws_sold_date_sk)) continue;
            res1.add(new DYearIItemSkQuantityAmount(d.d_year, ws.ws_item_sk, ws.ws_quantity, ws.ws_sales_price));
        }
    }
    return res1;
}}).get().stream()).collect(java.util.stream.Collectors.toList()).stream(), (new java.util.function.Supplier<List<DYearIItemSkQuantityAmount>>(){public List<DYearIItemSkQuantityAmount> get(){
    List<DYearIItemSkQuantityAmount> res2 = new ArrayList<>();
    for (var cs : catalog_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == cs.cs_sold_date_sk)) continue;
            res2.add(new DYearIItemSkQuantityAmount(d.d_year, cs.cs_item_sk, cs.cs_quantity, cs.cs_sales_price));
        }
    }
    return res2;
}}).get().stream()).collect(java.util.stream.Collectors.toList());
    List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> all_sales = (new java.util.function.Supplier<List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt>>(){public List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> get(){
    List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> res3 = new ArrayList<>();
    Map<YearBrandIdClassIdCategoryIdManufId,List<SdI>> groups4 = new LinkedHashMap<>();
    for (var sd : sales_detail) {
        for (var i : item) {
            if (!(i.i_item_sk == sd.i_item_sk)) continue;
            if (!(Objects.equals(i.i_category, "Electronics"))) continue;
            SdI row5 = new SdI(sd, i);
            YearBrandIdClassIdCategoryIdManufId key6 = new YearBrandIdClassIdCategoryIdManufId(sd.d_year, i.i_brand_id, i.i_class_id, i.i_category_id, i.i_manufact_id);
            List<SdI> bucket7 = groups4.get(key6);
            if (bucket7 == null) { bucket7 = new ArrayList<>(); groups4.put(key6, bucket7); }
            bucket7.add(row5);
        }
    }
    for (Map.Entry<YearBrandIdClassIdCategoryIdManufId,List<SdI>> __e : groups4.entrySet()) {
        YearBrandIdClassIdCategoryIdManufId g_key = __e.getKey();
        Group<YearBrandIdClassIdCategoryIdManufId,SdI> g = new Group<>(g_key, __e.getValue());
        res3.add(new DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt(g.key.year, g.key.brand_id, g.key.class_id, g.key.category_id, g.key.manuf_id, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add(x.sd.quantity);
    }
    return res8;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res9 = new ArrayList<>();
    for (var x : g) {
        res9.add(x.sd.amount);
    }
    return res9;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res3;
}}).get();
    Object prev_yr = first((new java.util.function.Supplier<List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt>>(){public List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> get(){
    List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> res10 = new ArrayList<>();
    for (var a : all_sales) {
        if (!(a.d_year == 2000)) continue;
        res10.add(a);
    }
    return res10;
}}).get());
    Object curr_yr = first((new java.util.function.Supplier<List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt>>(){public List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> get(){
    List<DYearIBrandIdIClassIdICategoryIdIManufactIdSalesCntSalesAmt> res11 = new ArrayList<>();
    for (var a : all_sales) {
        if (!(a.d_year == 2001)) continue;
        res11.add(a);
    }
    return res11;
}}).get());
    Object result = (((Number)(((Number)((Map<?,?>)curr_yr).get("sales_cnt")).doubleValue() / ((Number)((Map<?,?>)prev_yr).get("sales_cnt")).doubleValue())).doubleValue() < 0.900000 ? Arrays.asList(new PrevYearYearIBrandIdIClassIdICategoryIdIManufactIdPrevYrCntCurrYrCntSalesCntDiffSalesAmtDiff(((Map<?,?>)prev_yr).get("d_year"), ((Map<?,?>)curr_yr).get("d_year"), ((Map<?,?>)curr_yr).get("i_brand_id"), ((Map<?,?>)curr_yr).get("i_class_id"), ((Map<?,?>)curr_yr).get("i_category_id"), ((Map<?,?>)curr_yr).get("i_manufact_id"), ((Map<?,?>)prev_yr).get("sales_cnt"), ((Map<?,?>)curr_yr).get("sales_cnt"), ((Number)((Map<?,?>)curr_yr).get("sales_cnt")).doubleValue() - ((Number)((Map<?,?>)prev_yr).get("sales_cnt")).doubleValue(), ((Number)((Map<?,?>)curr_yr).get("sales_amt")).doubleValue() - ((Number)((Map<?,?>)prev_yr).get("sales_amt")).doubleValue())) : Arrays.asList());
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new PrevYearYearIBrandIdIClassIdICategoryIdIManufactIdPrevYrCntCurrYrCntSalesCntDiffSalesAmtDiff(2000, 2001, 1, 2, 3, 4, 100, 80, -20, -200.000000))))) throw new AssertionError("expect failed");
    }
}
