// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:37Z
// q59.mochi
import java.util.*;

class WeekStoreAmount {
    int week;
    int store;
    double amount;
    WeekStoreAmount(int week, int store, double amount) {
        this.week = week;
        this.store = store;
        this.amount = amount;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WeekStoreAmount other)) return false;
        return Objects.equals(this.week, other.week) && Objects.equals(this.store, other.store) && Objects.equals(this.amount, other.amount);
    }
    @Override public int hashCode() {
        return Objects.hash(week, store, amount);
    }
    int size() { return 3; }
}
class SStoreId1Ratio {
    int s_store_id1;
    double ratio;
    SStoreId1Ratio(int s_store_id1, double ratio) {
        this.s_store_id1 = s_store_id1;
        this.ratio = ratio;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreId1Ratio other)) return false;
        return Objects.equals(this.s_store_id1, other.s_store_id1) && Objects.equals(this.ratio, other.ratio);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_id1, ratio);
    }
    int size() { return 2; }
}
public class Q59 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<WeekStoreAmount> sales_year1 = new ArrayList<>(Arrays.asList(new WeekStoreAmount(1, 1, 100.000000)));
    List<WeekStoreAmount> sales_year2 = new ArrayList<>(Arrays.asList(new WeekStoreAmount(53, 1, 150.000000)));
    List<SStoreId1Ratio> join = (new java.util.function.Supplier<List<SStoreId1Ratio>>(){public List<SStoreId1Ratio> get(){
    List<SStoreId1Ratio> res0 = new ArrayList<>();
    for (var y1 : sales_year1) {
        for (var y2 : sales_year2) {
            if (!(y1.store == y2.store && Objects.equals(y1.week, y2.week - 52))) continue;
            res0.add(new SStoreId1Ratio(y1.store, y2.amount / y1.amount));
        }
    }
    return res0;
}}).get();
    List<SStoreId1Ratio> result = join;
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SStoreId1Ratio(1, 1.500000))))) throw new AssertionError("expect failed");
    }
}
