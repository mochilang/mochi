// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:52Z
// q5.mochi
import java.util.*;

class ChannelIdSalesReturnsProfit {
    String channel;
    String id;
    double sales;
    double returns;
    double profit;
    ChannelIdSalesReturnsProfit(String channel, String id, double sales, double returns, double profit) {
        this.channel = channel;
        this.id = id;
        this.sales = sales;
        this.returns = returns;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelIdSalesReturnsProfit other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.id, other.id) && Objects.equals(this.sales, other.sales) && Objects.equals(this.returns, other.returns) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, id, sales, returns, profit);
    }
    int size() { return 5; }
}
public class Q5 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ChannelIdSalesReturnsProfit> result = new ArrayList<>(Arrays.asList(new ChannelIdSalesReturnsProfit("catalog channel", "catalog_page100", 30.000000, 3.000000, 8.000000), new ChannelIdSalesReturnsProfit("store channel", "store10", 20.000000, 2.000000, 4.000000), new ChannelIdSalesReturnsProfit("web channel", "web_site200", 40.000000, 4.000000, 10.000000)));
    json(result);
    if (!(Objects.equals(result.size(), 3))) throw new AssertionError("expect failed");
    }
}
