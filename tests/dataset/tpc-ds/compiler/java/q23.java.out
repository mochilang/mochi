// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:07Z
// q23.mochi
import java.util.*;

class CatalogSale {
    int cs_sold_date_sk;
    int cs_item_sk;
    int cs_bill_customer_sk;
    int cs_quantity;
    double cs_list_price;
    CatalogSale(int cs_sold_date_sk, int cs_item_sk, int cs_bill_customer_sk, int cs_quantity, double cs_list_price) {
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_item_sk = cs_item_sk;
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_quantity = cs_quantity;
        this.cs_list_price = cs_list_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogSale other)) return false;
        return Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_quantity, other.cs_quantity) && Objects.equals(this.cs_list_price, other.cs_list_price);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk, cs_quantity, cs_list_price);
    }
}
class WebSale {
    int ws_sold_date_sk;
    int ws_item_sk;
    int ws_bill_customer_sk;
    int ws_quantity;
    double ws_list_price;
    WebSale(int ws_sold_date_sk, int ws_item_sk, int ws_bill_customer_sk, int ws_quantity, double ws_list_price) {
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_item_sk = ws_item_sk;
        this.ws_bill_customer_sk = ws_bill_customer_sk;
        this.ws_quantity = ws_quantity;
        this.ws_list_price = ws_list_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WebSale other)) return false;
        return Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_bill_customer_sk, other.ws_bill_customer_sk) && Objects.equals(this.ws_quantity, other.ws_quantity) && Objects.equals(this.ws_list_price, other.ws_list_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price);
    }
}
class StoreSale {
    int ss_item_sk;
    int ss_sold_date_sk;
    int ss_customer_sk;
    int ss_quantity;
    double ss_sales_price;
    StoreSale(int ss_item_sk, int ss_sold_date_sk, int ss_customer_sk, int ss_quantity, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_quantity = ss_quantity;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price);
    }
}
class DateDim {
    int d_date_sk;
    int d_year;
    int d_moy;
    DateDim(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
}
class Item {
    int i_item_sk;
    Item(int i_item_sk) {
        this.i_item_sk = i_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk);
    }
}
class SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice {
    int ss_item_sk;
    int ss_sold_date_sk;
    int ss_customer_sk;
    int ss_quantity;
    double ss_sales_price;
    SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(int ss_item_sk, int ss_sold_date_sk, int ss_customer_sk, int ss_quantity, double ss_sales_price) {
        this.ss_item_sk = ss_item_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_quantity = ss_quantity;
        this.ss_sales_price = ss_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sales_price, other.ss_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price);
    }
    int size() { return 5; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class IItemSk {
    int i_item_sk;
    IItemSk(int i_item_sk) {
        this.i_item_sk = i_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSk other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk);
    }
    int size() { return 1; }
}
class CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice {
    int cs_sold_date_sk;
    int cs_item_sk;
    int cs_bill_customer_sk;
    int cs_quantity;
    double cs_list_price;
    CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice(int cs_sold_date_sk, int cs_item_sk, int cs_bill_customer_sk, int cs_quantity, double cs_list_price) {
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_item_sk = cs_item_sk;
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_quantity = cs_quantity;
        this.cs_list_price = cs_list_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice other)) return false;
        return Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_quantity, other.cs_quantity) && Objects.equals(this.cs_list_price, other.cs_list_price);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk, cs_quantity, cs_list_price);
    }
    int size() { return 5; }
}
class WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice {
    int ws_sold_date_sk;
    int ws_item_sk;
    int ws_bill_customer_sk;
    int ws_quantity;
    double ws_list_price;
    WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice(int ws_sold_date_sk, int ws_item_sk, int ws_bill_customer_sk, int ws_quantity, double ws_list_price) {
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_item_sk = ws_item_sk;
        this.ws_bill_customer_sk = ws_bill_customer_sk;
        this.ws_quantity = ws_quantity;
        this.ws_list_price = ws_list_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice other)) return false;
        return Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_bill_customer_sk, other.ws_bill_customer_sk) && Objects.equals(this.ws_quantity, other.ws_quantity) && Objects.equals(this.ws_list_price, other.ws_list_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price);
    }
    int size() { return 5; }
}
class SsDI {
    SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice ss;
    DDateSkDYearDMoy d;
    IItemSk i;
    SsDI(SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice ss, DDateSkDYearDMoy d, IItemSk i) {
        this.ss = ss;
        this.d = d;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDI other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, i);
    }
    int size() { return 3; }
}
class ItemSkDateSk {
    int item_sk;
    int date_sk;
    ItemSkDateSk(int item_sk, int date_sk) {
        this.item_sk = item_sk;
        this.date_sk = date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemSkDateSk other)) return false;
        return Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.date_sk, other.date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(item_sk, date_sk);
    }
    int size() { return 2; }
}
class CustSales {
    int cust;
    double sales;
    CustSales(int cust, double sales) {
        this.cust = cust;
        this.sales = sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustSales other)) return false;
        return Objects.equals(this.cust, other.cust) && Objects.equals(this.sales, other.sales);
    }
    @Override public int hashCode() {
        return Objects.hash(cust, sales);
    }
    int size() { return 2; }
}
public class Q23 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(1, 1, 1, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(2, 1, 2, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(2, 1, 2, 1, 10.000000), new SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice(2, 1, 2, 1, 10.000000)));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2000, 1)));
    List<IItemSk> item = new ArrayList<>(Arrays.asList(new IItemSk(1), new IItemSk(2)));
    List<CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice> catalog_sales = new ArrayList<>(Arrays.asList(new CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice(1, 1, 1, 2, 10.000000), new CsSoldDateSkCsItemSkCsBillCustomerSkCsQuantityCsListPrice(1, 2, 2, 2, 10.000000)));
    List<WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice> web_sales = new ArrayList<>(Arrays.asList(new WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice(1, 1, 1, 3, 10.000000), new WsSoldDateSkWsItemSkWsBillCustomerSkWsQuantityWsListPrice(1, 2, 2, 1, 10.000000)));
    List<Object> frequent_ss_items = (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res0 = new ArrayList<>();
    Map<ItemSkDateSk,List<SsDI>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
            for (var i : item) {
                if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                if (!(d.d_year == 2000)) continue;
                SsDI row2 = new SsDI(ss, d, i);
                ItemSkDateSk key3 = new ItemSkDateSk(i.i_item_sk, d.d_date_sk);
                List<SsDI> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<ItemSkDateSk,List<SsDI>> __e : groups1.entrySet()) {
        ItemSkDateSk g_key = __e.getKey();
        Group<ItemSkDateSk,SsDI> g = new Group<>(g_key, __e.getValue());
        if (!(g.size() > 4)) continue;
        res0.add(g.key.item_sk);
    }
    return res0;
}}).get();
    List<CustSales> customer_totals = (new java.util.function.Supplier<List<CustSales>>(){public List<CustSales> get(){
    List<CustSales> res5 = new ArrayList<>();
    Map<Integer,List<SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice>> groups6 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        var row7 = ss;
        int key8 = ss.ss_customer_sk;
        List<SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice> bucket9 = groups6.get(key8);
        if (bucket9 == null) { bucket9 = new ArrayList<>(); groups6.put(key8, bucket9); }
        bucket9.add(row7);
    }
    for (Map.Entry<Integer,List<SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice>> __e : groups6.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SsItemSkSsSoldDateSkSsCustomerSkSsQuantitySsSalesPrice> g = new Group<>(g_key, __e.getValue());
        res5.add(new CustSales(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res10 = new ArrayList<>();
    for (var x : g) {
        res10.add(x.ss_quantity * x.ss_sales_price);
    }
    return res10;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res5;
}}).get();
    double max_sales = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res11 = new ArrayList<>();
    for (var c : customer_totals) {
        res11.add(c.sales);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).max().orElse(-Double.MAX_VALUE);
    List<Integer> best_ss_customer = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res12 = new ArrayList<>();
    for (var c : customer_totals) {
        if (!(c.sales > 0.950000 * max_sales)) continue;
        res12.add(c.cust);
    }
    return res12;
}}).get();
    List<Double> catalog = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res13 = new ArrayList<>();
    for (var cs : catalog_sales) {
        for (var d : date_dim) {
            if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
            if (!(d.d_year == 2000 && d.d_moy == 1 && best_ss_customer.contains(cs.cs_bill_customer_sk) && frequent_ss_items.contains(cs.cs_item_sk))) continue;
            res13.add(cs.cs_quantity * cs.cs_list_price);
        }
    }
    return res13;
}}).get();
    List<Double> web = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res14 = new ArrayList<>();
    for (var ws : web_sales) {
        for (var d : date_dim) {
            if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
            if (!(d.d_year == 2000 && d.d_moy == 1 && best_ss_customer.contains(ws.ws_bill_customer_sk) && frequent_ss_items.contains(ws.ws_item_sk))) continue;
            res14.add(ws.ws_quantity * ws.ws_list_price);
        }
    }
    return res14;
}}).get();
    double result = catalog.stream().mapToDouble(n -> ((Number)n).doubleValue()).sum() + web.stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    json(result);
    if (!(result == 50.000000)) throw new AssertionError("expect failed");
    }
}
