// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:56Z
// q9.mochi
import java.util.*;

class SsQuantitySsExtDiscountAmtSsNetPaid {
    int ss_quantity;
    double ss_ext_discount_amt;
    double ss_net_paid;
    SsQuantitySsExtDiscountAmtSsNetPaid(int ss_quantity, double ss_ext_discount_amt, double ss_net_paid) {
        this.ss_quantity = ss_quantity;
        this.ss_ext_discount_amt = ss_ext_discount_amt;
        this.ss_net_paid = ss_net_paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsQuantitySsExtDiscountAmtSsNetPaid other)) return false;
        return Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_ext_discount_amt, other.ss_ext_discount_amt) && Objects.equals(this.ss_net_paid, other.ss_net_paid);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_quantity, ss_ext_discount_amt, ss_net_paid);
    }
    int size() { return 3; }
}
class RReasonSk {
    int r_reason_sk;
    RReasonSk(int r_reason_sk) {
        this.r_reason_sk = r_reason_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RReasonSk other)) return false;
        return Objects.equals(this.r_reason_sk, other.r_reason_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(r_reason_sk);
    }
    int size() { return 1; }
}
class Bucket1Bucket2Bucket3Bucket4Bucket5 {
    double bucket1;
    double bucket2;
    double bucket3;
    double bucket4;
    double bucket5;
    Bucket1Bucket2Bucket3Bucket4Bucket5(double bucket1, double bucket2, double bucket3, double bucket4, double bucket5) {
        this.bucket1 = bucket1;
        this.bucket2 = bucket2;
        this.bucket3 = bucket3;
        this.bucket4 = bucket4;
        this.bucket5 = bucket5;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Bucket1Bucket2Bucket3Bucket4Bucket5 other)) return false;
        return Objects.equals(this.bucket1, other.bucket1) && Objects.equals(this.bucket2, other.bucket2) && Objects.equals(this.bucket3, other.bucket3) && Objects.equals(this.bucket4, other.bucket4) && Objects.equals(this.bucket5, other.bucket5);
    }
    @Override public int hashCode() {
        return Objects.hash(bucket1, bucket2, bucket3, bucket4, bucket5);
    }
    int size() { return 5; }
}
public class Q9 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsQuantitySsExtDiscountAmtSsNetPaid> store_sales = new ArrayList<>(Arrays.asList(new SsQuantitySsExtDiscountAmtSsNetPaid(5, 5.000000, 7.000000), new SsQuantitySsExtDiscountAmtSsNetPaid(30, 10.000000, 15.000000), new SsQuantitySsExtDiscountAmtSsNetPaid(50, 20.000000, 30.000000), new SsQuantitySsExtDiscountAmtSsNetPaid(70, 25.000000, 35.000000), new SsQuantitySsExtDiscountAmtSsNetPaid(90, 40.000000, 50.000000)));
    List<RReasonSk> reason = new ArrayList<>(Arrays.asList(new RReasonSk(1)));
    Object bucket1 = (((Number)(new java.util.function.Supplier<List<SsQuantitySsExtDiscountAmtSsNetPaid>>(){public List<SsQuantitySsExtDiscountAmtSsNetPaid> get(){
    List<SsQuantitySsExtDiscountAmtSsNetPaid> res0 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 1 && s.ss_quantity <= 20)) continue;
        res0.add(s);
    }
    return res0;
}}).get().size()).doubleValue() > 10 ? (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res1 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 1 && s.ss_quantity <= 20)) continue;
        res1.add(s.ss_ext_discount_amt);
    }
    return res1;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0) : (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res2 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 1 && s.ss_quantity <= 20)) continue;
        res2.add(s.ss_net_paid);
    }
    return res2;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0));
    Object bucket2 = (((Number)(new java.util.function.Supplier<List<SsQuantitySsExtDiscountAmtSsNetPaid>>(){public List<SsQuantitySsExtDiscountAmtSsNetPaid> get(){
    List<SsQuantitySsExtDiscountAmtSsNetPaid> res3 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 21 && s.ss_quantity <= 40)) continue;
        res3.add(s);
    }
    return res3;
}}).get().size()).doubleValue() > 20 ? (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res4 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 21 && s.ss_quantity <= 40)) continue;
        res4.add(s.ss_ext_discount_amt);
    }
    return res4;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0) : (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 21 && s.ss_quantity <= 40)) continue;
        res5.add(s.ss_net_paid);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0));
    Object bucket3 = (((Number)(new java.util.function.Supplier<List<SsQuantitySsExtDiscountAmtSsNetPaid>>(){public List<SsQuantitySsExtDiscountAmtSsNetPaid> get(){
    List<SsQuantitySsExtDiscountAmtSsNetPaid> res6 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 41 && s.ss_quantity <= 60)) continue;
        res6.add(s);
    }
    return res6;
}}).get().size()).doubleValue() > 30 ? (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 41 && s.ss_quantity <= 60)) continue;
        res7.add(s.ss_ext_discount_amt);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0) : (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res8 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 41 && s.ss_quantity <= 60)) continue;
        res8.add(s.ss_net_paid);
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0));
    Object bucket4 = (((Number)(new java.util.function.Supplier<List<SsQuantitySsExtDiscountAmtSsNetPaid>>(){public List<SsQuantitySsExtDiscountAmtSsNetPaid> get(){
    List<SsQuantitySsExtDiscountAmtSsNetPaid> res9 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 61 && s.ss_quantity <= 80)) continue;
        res9.add(s);
    }
    return res9;
}}).get().size()).doubleValue() > 40 ? (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res10 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 61 && s.ss_quantity <= 80)) continue;
        res10.add(s.ss_ext_discount_amt);
    }
    return res10;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0) : (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res11 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 61 && s.ss_quantity <= 80)) continue;
        res11.add(s.ss_net_paid);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0));
    Object bucket5 = (((Number)(new java.util.function.Supplier<List<SsQuantitySsExtDiscountAmtSsNetPaid>>(){public List<SsQuantitySsExtDiscountAmtSsNetPaid> get(){
    List<SsQuantitySsExtDiscountAmtSsNetPaid> res12 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 81 && s.ss_quantity <= 100)) continue;
        res12.add(s);
    }
    return res12;
}}).get().size()).doubleValue() > 50 ? (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res13 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 81 && s.ss_quantity <= 100)) continue;
        res13.add(s.ss_ext_discount_amt);
    }
    return res13;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0) : (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res14 = new ArrayList<>();
    for (var s : store_sales) {
        if (!(s.ss_quantity >= 81 && s.ss_quantity <= 100)) continue;
        res14.add(s.ss_net_paid);
    }
    return res14;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0));
    List<Bucket1Bucket2Bucket3Bucket4Bucket5> result = (new java.util.function.Supplier<List<Bucket1Bucket2Bucket3Bucket4Bucket5>>(){public List<Bucket1Bucket2Bucket3Bucket4Bucket5> get(){
    List<Bucket1Bucket2Bucket3Bucket4Bucket5> res15 = new ArrayList<>();
    for (var r : reason) {
        if (!(r.r_reason_sk == 1)) continue;
        res15.add(new Bucket1Bucket2Bucket3Bucket4Bucket5(bucket1, bucket2, bucket3, bucket4, bucket5));
    }
    return res15;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new Bucket1Bucket2Bucket3Bucket4Bucket5(7.000000, 15.000000, 30.000000, 35.000000, 50.000000))))) throw new AssertionError("expect failed");
    }
}
