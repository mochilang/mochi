// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:29Z
// q48.mochi
import java.util.*;

class CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity {
    int cdemo_sk;
    int addr_sk;
    int sold_date_sk;
    double sales_price;
    double net_profit;
    int quantity;
    CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity(int cdemo_sk, int addr_sk, int sold_date_sk, double sales_price, double net_profit, int quantity) {
        this.cdemo_sk = cdemo_sk;
        this.addr_sk = addr_sk;
        this.sold_date_sk = sold_date_sk;
        this.sales_price = sales_price;
        this.net_profit = net_profit;
        this.quantity = quantity;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity other)) return false;
        return Objects.equals(this.cdemo_sk, other.cdemo_sk) && Objects.equals(this.addr_sk, other.addr_sk) && Objects.equals(this.sold_date_sk, other.sold_date_sk) && Objects.equals(this.sales_price, other.sales_price) && Objects.equals(this.net_profit, other.net_profit) && Objects.equals(this.quantity, other.quantity);
    }
    @Override public int hashCode() {
        return Objects.hash(cdemo_sk, addr_sk, sold_date_sk, sales_price, net_profit, quantity);
    }
    int size() { return 6; }
}
class SStoreSk {
    int s_store_sk;
    SStoreSk(int s_store_sk) {
        this.s_store_sk = s_store_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSk other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk);
    }
    int size() { return 1; }
}
class CdDemoSkCdMaritalStatusCdEducationStatus {
    int cd_demo_sk;
    String cd_marital_status;
    String cd_education_status;
    CdDemoSkCdMaritalStatusCdEducationStatus(int cd_demo_sk, String cd_marital_status, String cd_education_status) {
        this.cd_demo_sk = cd_demo_sk;
        this.cd_marital_status = cd_marital_status;
        this.cd_education_status = cd_education_status;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CdDemoSkCdMaritalStatusCdEducationStatus other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk) && Objects.equals(this.cd_marital_status, other.cd_marital_status) && Objects.equals(this.cd_education_status, other.cd_education_status);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk, cd_marital_status, cd_education_status);
    }
    int size() { return 3; }
}
class CaAddressSkCaCountryCaState {
    int ca_address_sk;
    String ca_country;
    String ca_state;
    CaAddressSkCaCountryCaState(int ca_address_sk, String ca_country, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_country = ca_country;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaCountryCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_country, other.ca_country) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_country, ca_state);
    }
    int size() { return 3; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
public class Q48 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity> store_sales = new ArrayList<>(Arrays.asList(new CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity(1, 1, 1, 120.000000, 1000.000000, 5), new CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity(2, 2, 1, 60.000000, 2000.000000, 10), new CdemoSkAddrSkSoldDateSkSalesPriceNetProfitQuantity(3, 3, 1, 170.000000, 10000.000000, 20)));
    List<SStoreSk> store = new ArrayList<>(Arrays.asList(new SStoreSk(1)));
    List<CdDemoSkCdMaritalStatusCdEducationStatus> customer_demographics = new ArrayList<>(Arrays.asList(new CdDemoSkCdMaritalStatusCdEducationStatus(1, "S", "E1"), new CdDemoSkCdMaritalStatusCdEducationStatus(2, "M", "E2"), new CdDemoSkCdMaritalStatusCdEducationStatus(3, "W", "E3")));
    List<CaAddressSkCaCountryCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaCountryCaState(1, "United States", "TX"), new CaAddressSkCaCountryCaState(2, "United States", "CA"), new CaAddressSkCaCountryCaState(3, "United States", "NY")));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000)));
    int year = 2000;
    List<String> states1 = new ArrayList<>(Arrays.asList("TX"));
    List<String> states2 = new ArrayList<>(Arrays.asList("CA"));
    List<String> states3 = new ArrayList<>(Arrays.asList("NY"));
    List<Integer> qty_base = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        for (var cd : customer_demographics) {
            if (!(ss.cdemo_sk == cd.cd_demo_sk)) continue;
            for (var ca : customer_address) {
                if (!(ss.addr_sk == ca.ca_address_sk)) continue;
                for (var d : date_dim) {
                    if (!(ss.sold_date_sk == d.d_date_sk)) continue;
                    if (!(d.d_year == year && ((Objects.equals(cd.cd_marital_status, "S") && Objects.equals(cd.cd_education_status, "E1") && ss.sales_price >= 100.000000 && ss.sales_price <= 150.000000) || (Objects.equals(cd.cd_marital_status, "M") && Objects.equals(cd.cd_education_status, "E2") && ss.sales_price >= 50.000000 && ss.sales_price <= 100.000000) || (Objects.equals(cd.cd_marital_status, "W") && Objects.equals(cd.cd_education_status, "E3") && ss.sales_price >= 150.000000 && ss.sales_price <= 200.000000)) && ((states1.contains(ca.ca_state) && ss.net_profit >= 0 && ss.net_profit <= 2000) || (states2.contains(ca.ca_state) && ss.net_profit >= 150 && ss.net_profit <= 3000) || (states3.contains(ca.ca_state) && ss.net_profit >= 50 && ss.net_profit <= 25000)))) continue;
                    res0.add(ss.quantity);
                }
            }
        }
    }
    return res0;
}}).get();
    List<Integer> qty = qty_base;
    int result = qty.stream().mapToInt(n -> ((Number)n).intValue()).sum();
    json(result);
    if (!(result == 35)) throw new AssertionError("expect failed");
    }
}
