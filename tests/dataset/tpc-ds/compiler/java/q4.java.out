// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:50Z
// q4.mochi
import java.util.*;

class CCustomerSkCCustomerIdCFirstNameCLastNameCLogin {
    int c_customer_sk;
    String c_customer_id;
    String c_first_name;
    String c_last_name;
    String c_login;
    CCustomerSkCCustomerIdCFirstNameCLastNameCLogin(int c_customer_sk, String c_customer_id, String c_first_name, String c_last_name, String c_login) {
        this.c_customer_sk = c_customer_sk;
        this.c_customer_id = c_customer_id;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
        this.c_login = c_login;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCustomerIdCFirstNameCLastNameCLogin other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_customer_id, other.c_customer_id) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_login, other.c_login);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_customer_id, c_first_name, c_last_name, c_login);
    }
    int size() { return 5; }
}
class SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice {
    int ss_customer_sk;
    int ss_sold_date_sk;
    double ss_ext_list_price;
    double ss_ext_wholesale_cost;
    double ss_ext_discount_amt;
    double ss_ext_sales_price;
    SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice(int ss_customer_sk, int ss_sold_date_sk, double ss_ext_list_price, double ss_ext_wholesale_cost, double ss_ext_discount_amt, double ss_ext_sales_price) {
        this.ss_customer_sk = ss_customer_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_ext_list_price = ss_ext_list_price;
        this.ss_ext_wholesale_cost = ss_ext_wholesale_cost;
        this.ss_ext_discount_amt = ss_ext_discount_amt;
        this.ss_ext_sales_price = ss_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_ext_list_price, other.ss_ext_list_price) && Objects.equals(this.ss_ext_wholesale_cost, other.ss_ext_wholesale_cost) && Objects.equals(this.ss_ext_discount_amt, other.ss_ext_discount_amt) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, ss_sold_date_sk, ss_ext_list_price, ss_ext_wholesale_cost, ss_ext_discount_amt, ss_ext_sales_price);
    }
    int size() { return 6; }
}
class CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice {
    int cs_bill_customer_sk;
    int cs_sold_date_sk;
    double cs_ext_list_price;
    double cs_ext_wholesale_cost;
    double cs_ext_discount_amt;
    double cs_ext_sales_price;
    CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice(int cs_bill_customer_sk, int cs_sold_date_sk, double cs_ext_list_price, double cs_ext_wholesale_cost, double cs_ext_discount_amt, double cs_ext_sales_price) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_ext_list_price = cs_ext_list_price;
        this.cs_ext_wholesale_cost = cs_ext_wholesale_cost;
        this.cs_ext_discount_amt = cs_ext_discount_amt;
        this.cs_ext_sales_price = cs_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_ext_list_price, other.cs_ext_list_price) && Objects.equals(this.cs_ext_wholesale_cost, other.cs_ext_wholesale_cost) && Objects.equals(this.cs_ext_discount_amt, other.cs_ext_discount_amt) && Objects.equals(this.cs_ext_sales_price, other.cs_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, cs_sold_date_sk, cs_ext_list_price, cs_ext_wholesale_cost, cs_ext_discount_amt, cs_ext_sales_price);
    }
    int size() { return 6; }
}
class WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice {
    int ws_bill_customer_sk;
    int ws_sold_date_sk;
    double ws_ext_list_price;
    double ws_ext_wholesale_cost;
    double ws_ext_discount_amt;
    double ws_ext_sales_price;
    WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice(int ws_bill_customer_sk, int ws_sold_date_sk, double ws_ext_list_price, double ws_ext_wholesale_cost, double ws_ext_discount_amt, double ws_ext_sales_price) {
        this.ws_bill_customer_sk = ws_bill_customer_sk;
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_ext_list_price = ws_ext_list_price;
        this.ws_ext_wholesale_cost = ws_ext_wholesale_cost;
        this.ws_ext_discount_amt = ws_ext_discount_amt;
        this.ws_ext_sales_price = ws_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice other)) return false;
        return Objects.equals(this.ws_bill_customer_sk, other.ws_bill_customer_sk) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_ext_list_price, other.ws_ext_list_price) && Objects.equals(this.ws_ext_wholesale_cost, other.ws_ext_wholesale_cost) && Objects.equals(this.ws_ext_discount_amt, other.ws_ext_discount_amt) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_bill_customer_sk, ws_sold_date_sk, ws_ext_list_price, ws_ext_wholesale_cost, ws_ext_discount_amt, ws_ext_sales_price);
    }
    int size() { return 6; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class CD {
    CCustomerSkCCustomerIdCFirstNameCLastNameCLogin c;
    DDateSkDYear d;
    CD(CCustomerSkCCustomerIdCFirstNameCLastNameCLogin c, DDateSkDYear d) {
        this.c = c;
        this.d = d;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CD other)) return false;
        return Objects.equals(this.c, other.c) && Objects.equals(this.d, other.d);
    }
    @Override public int hashCode() {
        return Objects.hash(c, d);
    }
    int size() { return 2; }
}
class IdFirstLastLoginYear {
    String id;
    String first;
    String last;
    String login;
    int year;
    IdFirstLastLoginYear(String id, String first, String last, String login, int year) {
        this.id = id;
        this.first = first;
        this.last = last;
        this.login = login;
        this.year = year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdFirstLastLoginYear other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.first, other.first) && Objects.equals(this.last, other.last) && Objects.equals(this.login, other.login) && Objects.equals(this.year, other.year);
    }
    @Override public int hashCode() {
        return Objects.hash(id, first, last, login, year);
    }
    int size() { return 5; }
}
class CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType {
    String customer_id;
    String customer_first_name;
    String customer_last_name;
    String customer_login;
    int dyear;
    double year_total;
    String sale_type;
    CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType(String customer_id, String customer_first_name, String customer_last_name, String customer_login, int dyear, double year_total, String sale_type) {
        this.customer_id = customer_id;
        this.customer_first_name = customer_first_name;
        this.customer_last_name = customer_last_name;
        this.customer_login = customer_login;
        this.dyear = dyear;
        this.year_total = year_total;
        this.sale_type = sale_type;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType other)) return false;
        return Objects.equals(this.customer_id, other.customer_id) && Objects.equals(this.customer_first_name, other.customer_first_name) && Objects.equals(this.customer_last_name, other.customer_last_name) && Objects.equals(this.customer_login, other.customer_login) && Objects.equals(this.dyear, other.dyear) && Objects.equals(this.year_total, other.year_total) && Objects.equals(this.sale_type, other.sale_type);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_id, customer_first_name, customer_last_name, customer_login, dyear, year_total, sale_type);
    }
    int size() { return 7; }
}
class CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin {
    String customer_id;
    String customer_first_name;
    String customer_last_name;
    String customer_login;
    CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin(String customer_id, String customer_first_name, String customer_last_name, String customer_login) {
        this.customer_id = customer_id;
        this.customer_first_name = customer_first_name;
        this.customer_last_name = customer_last_name;
        this.customer_login = customer_login;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin other)) return false;
        return Objects.equals(this.customer_id, other.customer_id) && Objects.equals(this.customer_first_name, other.customer_first_name) && Objects.equals(this.customer_last_name, other.customer_last_name) && Objects.equals(this.customer_login, other.customer_login);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_id, customer_first_name, customer_last_name, customer_login);
    }
    int size() { return 4; }
}
public class Q4 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CCustomerSkCCustomerIdCFirstNameCLastNameCLogin> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCustomerIdCFirstNameCLastNameCLogin(1, "C1", "Alice", "A", "alice")));
    List<SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice(1, 1, 10.000000, 5.000000, 0.000000, 10.000000), new SsCustomerSkSsSoldDateSkSsExtListPriceSsExtWholesaleCostSsExtDiscountAmtSsExtSalesPrice(1, 2, 20.000000, 5.000000, 0.000000, 20.000000)));
    List<CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice> catalog_sales = new ArrayList<>(Arrays.asList(new CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice(1, 1, 10.000000, 2.000000, 0.000000, 10.000000), new CsBillCustomerSkCsSoldDateSkCsExtListPriceCsExtWholesaleCostCsExtDiscountAmtCsExtSalesPrice(1, 2, 30.000000, 2.000000, 0.000000, 30.000000)));
    List<WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice> web_sales = new ArrayList<>(Arrays.asList(new WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice(1, 1, 10.000000, 5.000000, 0.000000, 10.000000), new WsBillCustomerSkWsSoldDateSkWsExtListPriceWsExtWholesaleCostWsExtDiscountAmtWsExtSalesPrice(1, 2, 12.000000, 5.000000, 0.000000, 12.000000)));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2001), new DDateSkDYear(2, 2002)));
    Object year_total = java.util.stream.Stream.concat(java.util.stream.Stream.concat(((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> res0 = new ArrayList<>();
    Map<IdFirstLastLoginYear,List<CD>> groups1 = new LinkedHashMap<>();
    for (var c : customer) {
        for (var s : store_sales) {
            if (!(c.c_customer_sk == s.ss_customer_sk)) continue;
            for (var d : date_dim) {
                if (!(s.ss_sold_date_sk == d.d_date_sk)) continue;
                CD row2 = new CD(c, d);
                IdFirstLastLoginYear key3 = new IdFirstLastLoginYear(c.c_customer_id, c.c_first_name, c.c_last_name, c.c_login, d.d_year);
                List<CD> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<IdFirstLastLoginYear,List<CD>> __e : groups1.entrySet()) {
        IdFirstLastLoginYear g_key = __e.getKey();
        Group<IdFirstLastLoginYear,CD> g = new Group<>(g_key, __e.getValue());
        res0.add(new CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType(g.key.id, g.key.first, g.key.last, g.key.login, g.key.year, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), "s"));
    }
    return res0;
}}).get()).stream(), ((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> res6 = new ArrayList<>();
    Map<IdFirstLastLoginYear,List<CD>> groups7 = new LinkedHashMap<>();
    for (var c : customer) {
        for (var cs : catalog_sales) {
            if (!(c.c_customer_sk == cs.cs_bill_customer_sk)) continue;
            for (var d : date_dim) {
                if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
                CD row8 = new CD(c, d);
                IdFirstLastLoginYear key9 = new IdFirstLastLoginYear(c.c_customer_id, c.c_first_name, c.c_last_name, c.c_login, d.d_year);
                List<CD> bucket10 = groups7.get(key9);
                if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
                bucket10.add(row8);
            }
        }
    }
    for (Map.Entry<IdFirstLastLoginYear,List<CD>> __e : groups7.entrySet()) {
        IdFirstLastLoginYear g_key = __e.getKey();
        Group<IdFirstLastLoginYear,CD> g = new Group<>(g_key, __e.getValue());
        res6.add(new CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType(g.key.id, g.key.first, g.key.last, g.key.login, g.key.year, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), "c"));
    }
    return res6;
}}).get()).stream()).collect(java.util.stream.Collectors.toList()).stream(), ((new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType> res12 = new ArrayList<>();
    Map<IdFirstLastLoginYear,List<CD>> groups13 = new LinkedHashMap<>();
    for (var c : customer) {
        for (var ws : web_sales) {
            if (!(c.c_customer_sk == ws.ws_bill_customer_sk)) continue;
            for (var d : date_dim) {
                if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
                CD row14 = new CD(c, d);
                IdFirstLastLoginYear key15 = new IdFirstLastLoginYear(c.c_customer_id, c.c_first_name, c.c_last_name, c.c_login, d.d_year);
                List<CD> bucket16 = groups13.get(key15);
                if (bucket16 == null) { bucket16 = new ArrayList<>(); groups13.put(key15, bucket16); }
                bucket16.add(row14);
            }
        }
    }
    for (Map.Entry<IdFirstLastLoginYear,List<CD>> __e : groups13.entrySet()) {
        IdFirstLastLoginYear g_key = __e.getKey();
        Group<IdFirstLastLoginYear,CD> g = new Group<>(g_key, __e.getValue());
        res12.add(new CustomerIdCustomerFirstNameCustomerLastNameCustomerLoginDyearYearTotalSaleType(g.key.id, g.key.first, g.key.last, g.key.login, g.key.year, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res17 = new ArrayList<>();
    for (var x : g) {
        res17.add(((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2);
    }
    return res17;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), "w"));
    }
    return res12;
}}).get()).stream()).collect(java.util.stream.Collectors.toList());
    List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin> result = (new java.util.function.Supplier<List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin>>(){public List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin> get(){
    List<CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin> res18 = new ArrayList<>();
    for (var s1 : year_total) {
        for (var s2 : year_total) {
            if (!(Objects.equals(s2.customer_id, s1.customer_id))) continue;
            for (var c1 : year_total) {
                if (!(Objects.equals(c1.customer_id, s1.customer_id))) continue;
                for (var c2 : year_total) {
                    if (!(Objects.equals(c2.customer_id, s1.customer_id))) continue;
                    for (var w1 : year_total) {
                        if (!(Objects.equals(w1.customer_id, s1.customer_id))) continue;
                        for (var w2 : year_total) {
                            if (!(Objects.equals(w2.customer_id, s1.customer_id))) continue;
                            if (!(Objects.equals(s1.sale_type, "s") && Objects.equals(c1.sale_type, "c") && Objects.equals(w1.sale_type, "w") && Objects.equals(s2.sale_type, "s") && Objects.equals(c2.sale_type, "c") && Objects.equals(w2.sale_type, "w") && Objects.equals(s1.dyear, 2001) && Objects.equals(s2.dyear, 2002) && Objects.equals(c1.dyear, 2001) && Objects.equals(c2.dyear, 2002) && Objects.equals(w1.dyear, 2001) && Objects.equals(w2.dyear, 2002) && s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 && String.valueOf(((c1.year_total > 0 ? c2.year_total / c1.year_total : null))).compareTo(String.valueOf(((s1.year_total > 0 ? s2.year_total / s1.year_total : null)))) > 0 && String.valueOf(((c1.year_total > 0 ? c2.year_total / c1.year_total : null))).compareTo(String.valueOf(((w1.year_total > 0 ? w2.year_total / w1.year_total : null)))) > 0)) continue;
                            res18.add(new CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin(s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login));
                        }
                    }
                }
            }
        }
    }
    return res18;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CustomerIdCustomerFirstNameCustomerLastNameCustomerLogin("C1", "Alice", "A", "alice"))))) throw new AssertionError("expect failed");
    }
}
