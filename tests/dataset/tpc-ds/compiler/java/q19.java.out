// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:04Z
// q19.mochi
import java.util.*;

class Store {
    int s_store_sk;
    String s_zip;
    Store(int s_store_sk, String s_zip) {
        this.s_store_sk = s_store_sk;
        this.s_zip = s_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_zip, other.s_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_zip);
    }
}
class StoreSale {
    int ss_sold_date_sk;
    int ss_item_sk;
    int ss_customer_sk;
    int ss_store_sk;
    double ss_ext_sales_price;
    StoreSale(int ss_sold_date_sk, int ss_item_sk, int ss_customer_sk, int ss_store_sk, double ss_ext_sales_price) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_item_sk = ss_item_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price);
    }
}
class DateDim {
    int d_date_sk;
    int d_year;
    int d_moy;
    DateDim(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
}
class Item {
    int i_item_sk;
    int i_brand_id;
    String i_brand;
    int i_manufact_id;
    String i_manufact;
    int i_manager_id;
    Item(int i_item_sk, int i_brand_id, String i_brand, int i_manufact_id, String i_manufact, int i_manager_id) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_brand = i_brand;
        this.i_manufact_id = i_manufact_id;
        this.i_manufact = i_manufact;
        this.i_manager_id = i_manager_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_manufact, other.i_manufact) && Objects.equals(this.i_manager_id, other.i_manager_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id);
    }
}
class Customer {
    int c_customer_sk;
    int c_current_addr_sk;
    Customer(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
}
class CustomerAddress {
    int ca_address_sk;
    String ca_zip;
    CustomerAddress(int ca_address_sk, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAddress other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip);
    }
}
class SsSoldDateSkSsItemSkSsCustomerSkSsStoreSkSsExtSalesPrice {
    int ss_sold_date_sk;
    int ss_item_sk;
    int ss_customer_sk;
    int ss_store_sk;
    double ss_ext_sales_price;
    SsSoldDateSkSsItemSkSsCustomerSkSsStoreSkSsExtSalesPrice(int ss_sold_date_sk, int ss_item_sk, int ss_customer_sk, int ss_store_sk, double ss_ext_sales_price) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_item_sk = ss_item_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSoldDateSkSsItemSkSsCustomerSkSsStoreSkSsExtSalesPrice other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price);
    }
    int size() { return 5; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId {
    int i_item_sk;
    int i_brand_id;
    String i_brand;
    int i_manufact_id;
    String i_manufact;
    int i_manager_id;
    IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId(int i_item_sk, int i_brand_id, String i_brand, int i_manufact_id, String i_manufact, int i_manager_id) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_brand = i_brand;
        this.i_manufact_id = i_manufact_id;
        this.i_manufact = i_manufact;
        this.i_manager_id = i_manager_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_manufact, other.i_manufact) && Objects.equals(this.i_manager_id, other.i_manager_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id);
    }
    int size() { return 6; }
}
class CCustomerSkCCurrentAddrSk {
    int c_customer_sk;
    int c_current_addr_sk;
    CCustomerSkCCurrentAddrSk(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
    int size() { return 2; }
}
class CaAddressSkCaZip {
    int ca_address_sk;
    String ca_zip;
    CaAddressSkCaZip(int ca_address_sk, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaZip other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_zip);
    }
    int size() { return 2; }
}
class SStoreSkSZip {
    int s_store_sk;
    String s_zip;
    SStoreSkSZip(int s_store_sk, String s_zip) {
        this.s_store_sk = s_store_sk;
        this.s_zip = s_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSZip other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_zip, other.s_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_zip);
    }
    int size() { return 2; }
}
class DI {
    DDateSkDYearDMoy d;
    IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId i;
    DI(DDateSkDYearDMoy d, IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId i) {
        this.d = d;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DI other)) return false;
        return Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(d, i);
    }
    int size() { return 2; }
}
class BrandBrandIdManIdMan {
    String brand;
    int brand_id;
    int man_id;
    String man;
    BrandBrandIdManIdMan(String brand, int brand_id, int man_id, String man) {
        this.brand = brand;
        this.brand_id = brand_id;
        this.man_id = man_id;
        this.man = man;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BrandBrandIdManIdMan other)) return false;
        return Objects.equals(this.brand, other.brand) && Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.man_id, other.man_id) && Objects.equals(this.man, other.man);
    }
    @Override public int hashCode() {
        return Objects.hash(brand, brand_id, man_id, man);
    }
    int size() { return 4; }
}
class IBrandIBrandIdIManufactIdIManufactExtPrice {
    String i_brand;
    int i_brand_id;
    int i_manufact_id;
    String i_manufact;
    int ext_price;
    IBrandIBrandIdIManufactIdIManufactExtPrice(String i_brand, int i_brand_id, int i_manufact_id, String i_manufact, int ext_price) {
        this.i_brand = i_brand;
        this.i_brand_id = i_brand_id;
        this.i_manufact_id = i_manufact_id;
        this.i_manufact = i_manufact;
        this.ext_price = ext_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IBrandIBrandIdIManufactIdIManufactExtPrice other)) return false;
        return Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_manufact, other.i_manufact) && Objects.equals(this.ext_price, other.ext_price);
    }
    @Override public int hashCode() {
        return Objects.hash(i_brand, i_brand_id, i_manufact_id, i_manufact, ext_price);
    }
    int size() { return 5; }
}
public class Q19 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsSoldDateSkSsItemSkSsCustomerSkSsStoreSkSsExtSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsSoldDateSkSsItemSkSsCustomerSkSsStoreSkSsExtSalesPrice(1, 1, 1, 1, 100.000000)));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 1999, 11)));
    List<IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId> item = new ArrayList<>(Arrays.asList(new IItemSkIBrandIdIBrandIManufactIdIManufactIManagerId(1, 1, "B1", 1, "M1", 10)));
    List<CCustomerSkCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSk(1, 1)));
    List<CaAddressSkCaZip> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaZip(1, "11111")));
    List<SStoreSkSZip> store = new ArrayList<>(Arrays.asList(new SStoreSkSZip(1, "99999")));
    List<IBrandIBrandIdIManufactIdIManufactExtPrice> result = (new java.util.function.Supplier<List<IBrandIBrandIdIManufactIdIManufactExtPrice>>(){public List<IBrandIBrandIdIManufactIdIManufactExtPrice> get(){
    List<IBrandIBrandIdIManufactIdIManufactExtPrice> res0 = new ArrayList<>();
    Map<BrandBrandIdManIdMan,List<DI>> groups1 = new LinkedHashMap<>();
    for (var d : date_dim) {
        for (var ss : store_sales) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
            for (var i : item) {
                if (!(ss.ss_item_sk == i.i_item_sk && i.i_manager_id == 10)) continue;
                for (var c : customer) {
                    if (!(ss.ss_customer_sk == c.c_customer_sk)) continue;
                    for (var ca : customer_address) {
                        if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
                        for (var s : store) {
                            if (!(ss.ss_store_sk == s.s_store_sk && !Objects.equals(substr(ca.ca_zip, 0, 5), substr(s.s_zip, 0, 5)))) continue;
                            if (!(d.d_moy == 11 && d.d_year == 1999)) continue;
                            DI row2 = new DI(d, i);
                            BrandBrandIdManIdMan key3 = new BrandBrandIdManIdMan(i.i_brand, i.i_brand_id, i.i_manufact_id, i.i_manufact);
                            List<DI> bucket4 = groups1.get(key3);
                            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                            bucket4.add(row2);
                        }
                    }
                }
            }
        }
    }
    for (Map.Entry<BrandBrandIdManIdMan,List<DI>> __e : groups1.entrySet()) {
        BrandBrandIdManIdMan g_key = __e.getKey();
        Group<BrandBrandIdManIdMan,DI> g = new Group<>(g_key, __e.getValue());
        res0.add(new IBrandIBrandIdIManufactIdIManufactExtPrice(g.key.brand, g.key.brand_id, g.key.man_id, g.key.man, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_ext_sales_price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IBrandIBrandIdIManufactIdIManufactExtPrice("B1", 1, 1, "M1", 100.000000))))) throw new AssertionError("expect failed");
    }
}
