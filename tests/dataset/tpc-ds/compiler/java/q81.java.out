// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:56Z
// q81.mochi
import java.util.*;

class CustStateAmt {
    int cust;
    String state;
    double amt;
    CustStateAmt(int cust, String state, double amt) {
        this.cust = cust;
        this.state = state;
        this.amt = amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustStateAmt other)) return false;
        return Objects.equals(this.cust, other.cust) && Objects.equals(this.state, other.state) && Objects.equals(this.amt, other.amt);
    }
    @Override public int hashCode() {
        return Objects.hash(cust, state, amt);
    }
    int size() { return 3; }
}
class StateAvgAmt {
    String state;
    double avg_amt;
    StateAvgAmt(String state, double avg_amt) {
        this.state = state;
        this.avg_amt = avg_amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StateAvgAmt other)) return false;
        return Objects.equals(this.state, other.state) && Objects.equals(this.avg_amt, other.avg_amt);
    }
    @Override public int hashCode() {
        return Objects.hash(state, avg_amt);
    }
    int size() { return 2; }
}
public class Q81 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CustStateAmt> catalog_returns = new ArrayList<>(Arrays.asList(new CustStateAmt(1, "CA", 40.000000), new CustStateAmt(2, "CA", 50.000000), new CustStateAmt(3, "CA", 81.000000), new CustStateAmt(4, "TX", 30.000000), new CustStateAmt(5, "TX", 20.000000)));
    List<StateAvgAmt> avg_list = (new java.util.function.Supplier<List<StateAvgAmt>>(){public List<StateAvgAmt> get(){
    List<StateAvgAmt> res0 = new ArrayList<>();
    Map<String,List<CustStateAmt>> groups1 = new LinkedHashMap<>();
    for (var r : catalog_returns) {
        var row2 = r;
        String key3 = r.state;
        List<CustStateAmt> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<String,List<CustStateAmt>> __e : groups1.entrySet()) {
        String g_key = __e.getKey();
        Group<String,CustStateAmt> g = new Group<>(g_key, __e.getValue());
        res0.add(new StateAvgAmt(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.amt);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res0;
}}).get();
    Object avg_state = first((new java.util.function.Supplier<List<StateAvgAmt>>(){public List<StateAvgAmt> get(){
    List<StateAvgAmt> res6 = new ArrayList<>();
    for (var a : avg_list) {
        if (!(Objects.equals(a.state, "CA"))) continue;
        res6.add(a);
    }
    return res6;
}}).get());
    List<Double> result_list = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var r : catalog_returns) {
        if (!(Objects.equals(r.state, "CA") && r.amt > ((Number)((Number)((Map<?,?>)avg_state).get("avg_amt")).doubleValue() * 1.200000).doubleValue())) continue;
        res7.add(r.amt);
    }
    return res7;
}}).get();
    Object result = first(result_list);
    json(result);
    if (!(Objects.equals(result, 81.000000))) throw new AssertionError("expect failed");
    }
}
