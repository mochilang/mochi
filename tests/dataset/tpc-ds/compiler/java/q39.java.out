// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:21Z
// q39.mochi
import java.util.*;

class InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand {
    int inv_item_sk;
    int inv_warehouse_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(int inv_item_sk, int inv_warehouse_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_warehouse_sk = inv_warehouse_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_warehouse_sk, other.inv_warehouse_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_warehouse_sk, inv_date_sk, inv_quantity_on_hand);
    }
    int size() { return 4; }
}
class IItemSk {
    int i_item_sk;
    IItemSk(int i_item_sk) {
        this.i_item_sk = i_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSk other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk);
    }
    int size() { return 1; }
}
class WWarehouseSkWWarehouseName {
    int w_warehouse_sk;
    String w_warehouse_name;
    WWarehouseSkWWarehouseName(int w_warehouse_sk, String w_warehouse_name) {
        this.w_warehouse_sk = w_warehouse_sk;
        this.w_warehouse_name = w_warehouse_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WWarehouseSkWWarehouseName other)) return false;
        return Objects.equals(this.w_warehouse_sk, other.w_warehouse_sk) && Objects.equals(this.w_warehouse_name, other.w_warehouse_name);
    }
    @Override public int hashCode() {
        return Objects.hash(w_warehouse_sk, w_warehouse_name);
    }
    int size() { return 2; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class InvDIW {
    InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv;
    DDateSkDYearDMoy d;
    IItemSk i;
    WWarehouseSkWWarehouseName w;
    InvDIW(InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand inv, DDateSkDYearDMoy d, IItemSk i, WWarehouseSkWWarehouseName w) {
        this.inv = inv;
        this.d = d;
        this.i = i;
        this.w = w;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvDIW other)) return false;
        return Objects.equals(this.inv, other.inv) && Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i) && Objects.equals(this.w, other.w);
    }
    @Override public int hashCode() {
        return Objects.hash(inv, d, i, w);
    }
    int size() { return 4; }
}
class WIMonth {
    int w;
    int i;
    int month;
    WIMonth(int w, int i, int month) {
        this.w = w;
        this.i = i;
        this.month = month;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WIMonth other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i) && Objects.equals(this.month, other.month);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i, month);
    }
    int size() { return 3; }
}
class WIQty {
    int w;
    int i;
    int qty;
    WIQty(int w, int i, int qty) {
        this.w = w;
        this.i = i;
        this.qty = qty;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WIQty other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i) && Objects.equals(this.qty, other.qty);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i, qty);
    }
    int size() { return 3; }
}
class WI {
    int w;
    int i;
    WI(int w, int i) {
        this.w = w;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WI other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i);
    }
    int size() { return 2; }
}
class WIQtys {
    Map<String,any> w;
    Map<String,any> i;
    List<Integer> qtys;
    WIQtys(Map<String,any> w, Map<String,any> i, List<Integer> qtys) {
        this.w = w;
        this.i = i;
        this.qtys = qtys;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WIQtys other)) return false;
        return Objects.equals(this.w, other.w) && Objects.equals(this.i, other.i) && Objects.equals(this.qtys, other.qtys);
    }
    @Override public int hashCode() {
        return Objects.hash(w, i, qtys);
    }
    int size() { return 3; }
}
class WWarehouseSkIItemSkCov {
    int w_warehouse_sk;
    int i_item_sk;
    double cov;
    WWarehouseSkIItemSkCov(int w_warehouse_sk, int i_item_sk, double cov) {
        this.w_warehouse_sk = w_warehouse_sk;
        this.i_item_sk = i_item_sk;
        this.cov = cov;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WWarehouseSkIItemSkCov other)) return false;
        return Objects.equals(this.w_warehouse_sk, other.w_warehouse_sk) && Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.cov, other.cov);
    }
    @Override public int hashCode() {
        return Objects.hash(w_warehouse_sk, i_item_sk, cov);
    }
    int size() { return 3; }
}
class math {
    static double pi = Math.PI;
    static double e = Math.E;
    static double sqrt(double x) { return Math.sqrt(x); }
    static double pow(double x, double y) { return Math.pow(x, y); }
    static double sin(double x) { return Math.sin(x); }
    static double log(double x) { return Math.log(x); }
}
public class Q39 {
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    static <K,V> Map.Entry<K,V> entry(K k, V v) { return new AbstractMap.SimpleEntry<>(k, v); }
    static <K,V> LinkedHashMap<K,V> mapOfEntries(Map.Entry<? extends K,? extends V>... entries) {
        LinkedHashMap<K,V> m = new LinkedHashMap<>();
        for (var e : entries) m.put(e.getKey(), e.getValue());
        return m;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand> inventory = new ArrayList<>(Arrays.asList(new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 1, 10), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 2, 10), new InvItemSkInvWarehouseSkInvDateSkInvQuantityOnHand(1, 1, 3, 250)));
    List<IItemSk> item = new ArrayList<>(Arrays.asList(new IItemSk(1)));
    List<WWarehouseSkWWarehouseName> warehouse = new ArrayList<>(Arrays.asList(new WWarehouseSkWWarehouseName(1, "W1")));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2000, 1), new DDateSkDYearDMoy(2, 2000, 2), new DDateSkDYearDMoy(3, 2000, 3)));
    List<WIQty> monthly = (new java.util.function.Supplier<List<WIQty>>(){public List<WIQty> get(){
    List<WIQty> res0 = new ArrayList<>();
    Map<WIMonth,List<InvDIW>> groups1 = new LinkedHashMap<>();
    for (var inv : inventory) {
        for (var d : date_dim) {
            if (!(inv.inv_date_sk == d.d_date_sk)) continue;
            for (var i : item) {
                if (!(inv.inv_item_sk == i.i_item_sk)) continue;
                for (var w : warehouse) {
                    if (!(inv.inv_warehouse_sk == w.w_warehouse_sk)) continue;
                    if (!(d.d_year == 2000)) continue;
                    InvDIW row2 = new InvDIW(inv, d, i, w);
                    WIMonth key3 = new WIMonth(w.w_warehouse_sk, i.i_item_sk, d.d_moy);
                    List<InvDIW> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<WIMonth,List<InvDIW>> __e : groups1.entrySet()) {
        WIMonth g_key = __e.getKey();
        Group<WIMonth,InvDIW> g = new Group<>(g_key, __e.getValue());
        res0.add(new WIQty(g.key.w, g.key.i, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.inv_quantity_on_hand);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    Map<String,Map<String,any>> grouped = new LinkedHashMap<String,Map<String,any>>();
    for (WIQty m : monthly) {
        String key = String.valueOf(new WI(m.w, m.i));
        if (grouped.containsKey(key)) {
            Map<String,Map<String,any>> g = grouped.get(key);
            grouped.put(key, new WIQtys(((Map<String,Map<String,any>>)g).get("w"), ((Map<String,Map<String,any>>)g).get("i"), append(((Map<String,Map<String,any>>)g).get("qtys"), m.qty)));
        }
        else {
            grouped.put(key, new WIQtys(m.w, m.i, Arrays.asList(m.qty)));
        }
    }
    List<Object> summary = new ArrayList<>(Arrays.asList());
    for (Number g : new ArrayList<>(grouped.values())) {
        double mean = g.qtys.stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0);
        double sumsq = 0.000000;
        for (Number q : g.qtys) {
            sumsq = sumsq + (q - mean) * (q - mean);
        }
        double variance = sumsq / (g.qtys.size() - 1);
        double cov = math.sqrt(variance) / mean;
        if (cov > 1.500000) {
            summary.add(new WWarehouseSkIItemSkCov(g.w, g.i, cov));
        }
    }
    json(summary);
    if (!(Objects.equals(summary, Arrays.asList(new WWarehouseSkIItemSkCov(1, 1, 1.539601))))) throw new AssertionError("expect failed");
    }
}
