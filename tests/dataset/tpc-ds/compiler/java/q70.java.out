// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:46Z
// q70.mochi
import java.util.*;

class SStoreSkSStateSCounty {
    int s_store_sk;
    String s_state;
    String s_county;
    SStoreSkSStateSCounty(int s_store_sk, String s_state, String s_county) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
        this.s_county = s_county;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSStateSCounty other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state) && Objects.equals(this.s_county, other.s_county);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state, s_county);
    }
    int size() { return 3; }
}
class DDateSkDMonthSeq {
    int d_date_sk;
    int d_month_seq;
    DDateSkDMonthSeq(int d_date_sk, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDMonthSeq other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_month_seq);
    }
    int size() { return 2; }
}
class SsSoldDateSkSsStoreSkSsNetProfit {
    int ss_sold_date_sk;
    int ss_store_sk;
    double ss_net_profit;
    SsSoldDateSkSsStoreSkSsNetProfit(int ss_sold_date_sk, int ss_store_sk, double ss_net_profit) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSoldDateSkSsStoreSkSsNetProfit other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, ss_store_sk, ss_net_profit);
    }
    int size() { return 3; }
}
class SsDS {
    SsSoldDateSkSsStoreSkSsNetProfit ss;
    DDateSkDMonthSeq d;
    SStoreSkSStateSCounty s;
    SsDS(SsSoldDateSkSsStoreSkSsNetProfit ss, DDateSkDMonthSeq d, SStoreSkSStateSCounty s) {
        this.ss = ss;
        this.d = d;
        this.s = s;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDS other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.s, other.s);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, s);
    }
    int size() { return 3; }
}
class StateCounty {
    String state;
    String county;
    StateCounty(String state, String county) {
        this.state = state;
        this.county = county;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StateCounty other)) return false;
        return Objects.equals(this.state, other.state) && Objects.equals(this.county, other.county);
    }
    @Override public int hashCode() {
        return Objects.hash(state, county);
    }
    int size() { return 2; }
}
class SStateSCountyTotalSum {
    String s_state;
    String s_county;
    double total_sum;
    SStateSCountyTotalSum(String s_state, String s_county, double total_sum) {
        this.s_state = s_state;
        this.s_county = s_county;
        this.total_sum = total_sum;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStateSCountyTotalSum other)) return false;
        return Objects.equals(this.s_state, other.s_state) && Objects.equals(this.s_county, other.s_county) && Objects.equals(this.total_sum, other.total_sum);
    }
    @Override public int hashCode() {
        return Objects.hash(s_state, s_county, total_sum);
    }
    int size() { return 3; }
}
public class Q70 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SStoreSkSStateSCounty> store = new ArrayList<>(Arrays.asList(new SStoreSkSStateSCounty(1, "CA", "Orange"), new SStoreSkSStateSCounty(2, "CA", "Orange"), new SStoreSkSStateSCounty(3, "TX", "Travis")));
    List<DDateSkDMonthSeq> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDMonthSeq(1, 1200), new DDateSkDMonthSeq(2, 1201)));
    List<SsSoldDateSkSsStoreSkSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsSoldDateSkSsStoreSkSsNetProfit(1, 1, 10.000000), new SsSoldDateSkSsStoreSkSsNetProfit(1, 2, 5.000000), new SsSoldDateSkSsStoreSkSsNetProfit(2, 3, 20.000000)));
    int dms = 1200;
    List<SStateSCountyTotalSum> result = (new java.util.function.Supplier<List<SStateSCountyTotalSum>>(){public List<SStateSCountyTotalSum> get(){
    List<SStateSCountyTotalSum> res0 = new ArrayList<>();
    Map<StateCounty,List<SsDS>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            for (var s : store) {
                if (!(s.s_store_sk == ss.ss_store_sk)) continue;
                if (!(d.d_month_seq >= dms && d.d_month_seq <= dms + 11)) continue;
                SsDS row2 = new SsDS(ss, d, s);
                StateCounty key3 = new StateCounty(s.s_state, s.s_county);
                List<SsDS> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<StateCounty,List<SsDS>> __e : groups1.entrySet()) {
        StateCounty g_key = __e.getKey();
        Group<StateCounty,SsDS> g = new Group<>(g_key, __e.getValue());
        res0.add(new SStateSCountyTotalSum(g.key.state, g.key.county, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_net_profit);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SStateSCountyTotalSum("CA", "Orange", 15.000000), new SStateSCountyTotalSum("TX", "Travis", 20.000000))))) throw new AssertionError("expect failed");
    }
}
