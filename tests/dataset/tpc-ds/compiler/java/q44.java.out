// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:25Z
// q44.mochi
import java.util.*;

class SsItemSkSsStoreSkSsNetProfit {
    int ss_item_sk;
    int ss_store_sk;
    double ss_net_profit;
    SsItemSkSsStoreSkSsNetProfit(int ss_item_sk, int ss_store_sk, double ss_net_profit) {
        this.ss_item_sk = ss_item_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsStoreSkSsNetProfit other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_store_sk, ss_net_profit);
    }
    int size() { return 3; }
}
class IItemSkIProductName {
    int i_item_sk;
    String i_product_name;
    IItemSkIProductName(int i_item_sk, String i_product_name) {
        this.i_item_sk = i_item_sk;
        this.i_product_name = i_product_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIProductName other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_product_name, other.i_product_name);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_product_name);
    }
    int size() { return 2; }
}
class ItemSkAvgProfit {
    int item_sk;
    double avg_profit;
    ItemSkAvgProfit(int item_sk, double avg_profit) {
        this.item_sk = item_sk;
        this.avg_profit = avg_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemSkAvgProfit other)) return false;
        return Objects.equals(this.item_sk, other.item_sk) && Objects.equals(this.avg_profit, other.avg_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(item_sk, avg_profit);
    }
    int size() { return 2; }
}
class BestPerformingWorstPerforming {
    String best_performing;
    String worst_performing;
    BestPerformingWorstPerforming(String best_performing, String worst_performing) {
        this.best_performing = best_performing;
        this.worst_performing = worst_performing;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BestPerformingWorstPerforming other)) return false;
        return Objects.equals(this.best_performing, other.best_performing) && Objects.equals(this.worst_performing, other.worst_performing);
    }
    @Override public int hashCode() {
        return Objects.hash(best_performing, worst_performing);
    }
    int size() { return 2; }
}
public class Q44 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsStoreSkSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsStoreSkSsNetProfit(1, 1, 5.000000), new SsItemSkSsStoreSkSsNetProfit(1, 1, 5.000000), new SsItemSkSsStoreSkSsNetProfit(2, 1, -1.000000)));
    List<IItemSkIProductName> item = new ArrayList<>(Arrays.asList(new IItemSkIProductName(1, "ItemA"), new IItemSkIProductName(2, "ItemB")));
    Object grouped_base = ((new java.util.function.Supplier<List<ItemSkAvgProfit>>(){public List<ItemSkAvgProfit> get(){
    List<ItemSkAvgProfit> res0 = new ArrayList<>();
    Map<Integer,List<SsItemSkSsStoreSkSsNetProfit>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        var row2 = ss;
        int key3 = ss.ss_item_sk;
        List<SsItemSkSsStoreSkSsNetProfit> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Integer,List<SsItemSkSsStoreSkSsNetProfit>> __e : groups1.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SsItemSkSsStoreSkSsNetProfit> g = new Group<>(g_key, __e.getValue());
        res0.add(new ItemSkAvgProfit(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_net_profit);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res0;
}}).get());
    Object grouped = grouped_base;
    Object best = first((new java.util.function.Supplier<List<?>>(){public List<?> get(){
    List<?> res6 = new ArrayList<>();
    for (var x : grouped) {
        res6.add(x);
    }
    return res6;
}}).get());
    Object worst = first((new java.util.function.Supplier<List<?>>(){public List<?> get(){
    List<?> res7 = new ArrayList<>();
    for (var x : grouped) {
        res7.add(x);
    }
    return res7;
}}).get());
    Object best_name = first((new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res8 = new ArrayList<>();
    for (var i : item) {
        if (!(Objects.equals(i.i_item_sk, ((Map<?,?>)best).get("item_sk")))) continue;
        res8.add(i.i_product_name);
    }
    return res8;
}}).get());
    Object worst_name = first((new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res9 = new ArrayList<>();
    for (var i : item) {
        if (!(Objects.equals(i.i_item_sk, ((Map<?,?>)worst).get("item_sk")))) continue;
        res9.add(i.i_product_name);
    }
    return res9;
}}).get());
    BestPerformingWorstPerforming result = new BestPerformingWorstPerforming(best_name, worst_name);
    json(result);
    if (!(Objects.equals(result, new BestPerformingWorstPerforming("ItemA", "ItemB")))) throw new AssertionError("expect failed");
    }
}
