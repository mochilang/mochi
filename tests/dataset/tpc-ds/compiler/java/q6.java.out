// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:53Z
// q6.mochi
import java.util.*;

class CaAddressSkCaStateCaZip {
    int ca_address_sk;
    String ca_state;
    String ca_zip;
    CaAddressSkCaStateCaZip(int ca_address_sk, String ca_state, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaStateCaZip other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state, ca_zip);
    }
    int size() { return 3; }
}
class CCustomerSkCCurrentAddrSk {
    int c_customer_sk;
    int c_current_addr_sk;
    CCustomerSkCCurrentAddrSk(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
    int size() { return 2; }
}
class SsCustomerSkSsSoldDateSkSsItemSk {
    int ss_customer_sk;
    int ss_sold_date_sk;
    int ss_item_sk;
    SsCustomerSkSsSoldDateSkSsItemSk(int ss_customer_sk, int ss_sold_date_sk, int ss_item_sk) {
        this.ss_customer_sk = ss_customer_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_item_sk = ss_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkSsSoldDateSkSsItemSk other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, ss_sold_date_sk, ss_item_sk);
    }
    int size() { return 3; }
}
class DDateSkDYearDMoyDMonthSeq {
    int d_date_sk;
    int d_year;
    int d_moy;
    int d_month_seq;
    DDateSkDYearDMoyDMonthSeq(int d_date_sk, int d_year, int d_moy, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoyDMonthSeq other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy, d_month_seq);
    }
    int size() { return 4; }
}
class IItemSkICategoryICurrentPrice {
    int i_item_sk;
    String i_category;
    double i_current_price;
    IItemSkICategoryICurrentPrice(int i_item_sk, String i_category, double i_current_price) {
        this.i_item_sk = i_item_sk;
        this.i_category = i_category;
        this.i_current_price = i_current_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkICategoryICurrentPrice other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.i_current_price, other.i_current_price);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_category, i_current_price);
    }
    int size() { return 3; }
}
class ADI {
    CaAddressSkCaStateCaZip a;
    DDateSkDYearDMoyDMonthSeq d;
    IItemSkICategoryICurrentPrice i;
    ADI(CaAddressSkCaStateCaZip a, DDateSkDYearDMoyDMonthSeq d, IItemSkICategoryICurrentPrice i) {
        this.a = a;
        this.d = d;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ADI other)) return false;
        return Objects.equals(this.a, other.a) && Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(a, d, i);
    }
    int size() { return 3; }
}
class StateCnt {
    String state;
    int cnt;
    StateCnt(String state, int cnt) {
        this.state = state;
        this.cnt = cnt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StateCnt other)) return false;
        return Objects.equals(this.state, other.state) && Objects.equals(this.cnt, other.cnt);
    }
    @Override public int hashCode() {
        return Objects.hash(state, cnt);
    }
    int size() { return 2; }
}
public class Q6 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CaAddressSkCaStateCaZip> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaStateCaZip(1, "CA", "12345")));
    List<CCustomerSkCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSk(1, 1)));
    List<SsCustomerSkSsSoldDateSkSsItemSk> store_sales = new ArrayList<>(Arrays.asList(new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1), new SsCustomerSkSsSoldDateSkSsItemSk(1, 1, 1)));
    List<DDateSkDYearDMoyDMonthSeq> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoyDMonthSeq(1, 1999, 5, 120)));
    List<IItemSkICategoryICurrentPrice> item = new ArrayList<>(Arrays.asList(new IItemSkICategoryICurrentPrice(1, "A", 100.000000), new IItemSkICategoryICurrentPrice(2, "A", 50.000000)));
    int target_month_seq = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res0 = new ArrayList<>();
    for (var d : date_dim) {
        if (!(d.d_year == 1999 && d.d_moy == 5)) continue;
        res0.add(d.d_month_seq);
    }
    return res0;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).max().orElse(Integer.MIN_VALUE);
    List<StateCnt> result = (new java.util.function.Supplier<List<StateCnt>>(){public List<StateCnt> get(){
    List<StateCnt> res1 = new ArrayList<>();
    Map<String,List<ADI>> groups2 = new LinkedHashMap<>();
    for (var a : customer_address) {
        for (var c : customer) {
            if (!(a.ca_address_sk == c.c_current_addr_sk)) continue;
            for (var s : store_sales) {
                if (!(c.c_customer_sk == s.ss_customer_sk)) continue;
                for (var d : date_dim) {
                    if (!(s.ss_sold_date_sk == d.d_date_sk)) continue;
                    for (var i : item) {
                        if (!(s.ss_item_sk == i.i_item_sk)) continue;
                        if (!(d.d_month_seq == target_month_seq && i.i_current_price > ((Number)1.200000 * ((Number)(new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res3 = new ArrayList<>();
    for (var j : item) {
        if (!(Objects.equals(j.i_category, i.i_category))) continue;
        res3.add(j.i_current_price);
    }
    return res3;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)).doubleValue()).doubleValue())) continue;
                        ADI row4 = new ADI(a, d, i);
                        String key5 = a.ca_state;
                        List<ADI> bucket6 = groups2.get(key5);
                        if (bucket6 == null) { bucket6 = new ArrayList<>(); groups2.put(key5, bucket6); }
                        bucket6.add(row4);
                    }
                }
            }
        }
    }
    for (Map.Entry<String,List<ADI>> __e : groups2.entrySet()) {
        String g_key = __e.getKey();
        Group<String,ADI> g = new Group<>(g_key, __e.getValue());
        if (!(g.size() >= 10)) continue;
        res1.add(new StateCnt(g.key, g.size()));
    }
    return res1;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new StateCnt("CA", 10))))) throw new AssertionError("expect failed");
    }
}
