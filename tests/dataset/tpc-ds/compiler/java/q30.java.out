// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:14Z
// q30.mochi
import java.util.*;

class WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk {
    int wr_returning_customer_sk;
    int wr_returned_date_sk;
    double wr_return_amt;
    int wr_returning_addr_sk;
    WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk(int wr_returning_customer_sk, int wr_returned_date_sk, double wr_return_amt, int wr_returning_addr_sk) {
        this.wr_returning_customer_sk = wr_returning_customer_sk;
        this.wr_returned_date_sk = wr_returned_date_sk;
        this.wr_return_amt = wr_return_amt;
        this.wr_returning_addr_sk = wr_returning_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk other)) return false;
        return Objects.equals(this.wr_returning_customer_sk, other.wr_returning_customer_sk) && Objects.equals(this.wr_returned_date_sk, other.wr_returned_date_sk) && Objects.equals(this.wr_return_amt, other.wr_return_amt) && Objects.equals(this.wr_returning_addr_sk, other.wr_returning_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(wr_returning_customer_sk, wr_returned_date_sk, wr_return_amt, wr_returning_addr_sk);
    }
    int size() { return 4; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class CaAddressSkCaState {
    int ca_address_sk;
    String ca_state;
    CaAddressSkCaState(int ca_address_sk, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state);
    }
    int size() { return 2; }
}
class CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk {
    int c_customer_sk;
    String c_customer_id;
    String c_first_name;
    String c_last_name;
    int c_current_addr_sk;
    CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk(int c_customer_sk, String c_customer_id, String c_first_name, String c_last_name, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_customer_id = c_customer_id;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_customer_id, other.c_customer_id) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_customer_id, c_first_name, c_last_name, c_current_addr_sk);
    }
    int size() { return 5; }
}
class WrDCa {
    WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk wr;
    DDateSkDYear d;
    CaAddressSkCaState ca;
    WrDCa(WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk wr, DDateSkDYear d, CaAddressSkCaState ca) {
        this.wr = wr;
        this.d = d;
        this.ca = ca;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WrDCa other)) return false;
        return Objects.equals(this.wr, other.wr) && Objects.equals(this.d, other.d) && Objects.equals(this.ca, other.ca);
    }
    @Override public int hashCode() {
        return Objects.hash(wr, d, ca);
    }
    int size() { return 3; }
}
class CustState {
    int cust;
    String state;
    CustState(int cust, String state) {
        this.cust = cust;
        this.state = state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustState other)) return false;
        return Objects.equals(this.cust, other.cust) && Objects.equals(this.state, other.state);
    }
    @Override public int hashCode() {
        return Objects.hash(cust, state);
    }
    int size() { return 2; }
}
class CtrCustomerSkCtrStateCtrTotalReturn {
    int ctr_customer_sk;
    String ctr_state;
    int ctr_total_return;
    CtrCustomerSkCtrStateCtrTotalReturn(int ctr_customer_sk, String ctr_state, int ctr_total_return) {
        this.ctr_customer_sk = ctr_customer_sk;
        this.ctr_state = ctr_state;
        this.ctr_total_return = ctr_total_return;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CtrCustomerSkCtrStateCtrTotalReturn other)) return false;
        return Objects.equals(this.ctr_customer_sk, other.ctr_customer_sk) && Objects.equals(this.ctr_state, other.ctr_state) && Objects.equals(this.ctr_total_return, other.ctr_total_return);
    }
    @Override public int hashCode() {
        return Objects.hash(ctr_customer_sk, ctr_state, ctr_total_return);
    }
    int size() { return 3; }
}
class StateAvgReturn {
    String state;
    double avg_return;
    StateAvgReturn(String state, double avg_return) {
        this.state = state;
        this.avg_return = avg_return;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StateAvgReturn other)) return false;
        return Objects.equals(this.state, other.state) && Objects.equals(this.avg_return, other.avg_return);
    }
    @Override public int hashCode() {
        return Objects.hash(state, avg_return);
    }
    int size() { return 2; }
}
class CCustomerIdCFirstNameCLastNameCtrTotalReturn {
    String c_customer_id;
    String c_first_name;
    String c_last_name;
    int ctr_total_return;
    CCustomerIdCFirstNameCLastNameCtrTotalReturn(String c_customer_id, String c_first_name, String c_last_name, int ctr_total_return) {
        this.c_customer_id = c_customer_id;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
        this.ctr_total_return = ctr_total_return;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerIdCFirstNameCLastNameCtrTotalReturn other)) return false;
        return Objects.equals(this.c_customer_id, other.c_customer_id) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.ctr_total_return, other.ctr_total_return);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_id, c_first_name, c_last_name, ctr_total_return);
    }
    int size() { return 4; }
}
public class Q30 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk> web_returns = new ArrayList<>(Arrays.asList(new WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk(1, 1, 100.000000, 1), new WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk(2, 1, 30.000000, 2), new WrReturningCustomerSkWrReturnedDateSkWrReturnAmtWrReturningAddrSk(1, 1, 50.000000, 1)));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2000)));
    List<CaAddressSkCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaState(1, "CA"), new CaAddressSkCaState(2, "CA")));
    List<CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk(1, "C1", "John", "Doe", 1), new CCustomerSkCCustomerIdCFirstNameCLastNameCCurrentAddrSk(2, "C2", "Jane", "Smith", 2)));
    List<CtrCustomerSkCtrStateCtrTotalReturn> customer_total_return = (new java.util.function.Supplier<List<CtrCustomerSkCtrStateCtrTotalReturn>>(){public List<CtrCustomerSkCtrStateCtrTotalReturn> get(){
    List<CtrCustomerSkCtrStateCtrTotalReturn> res0 = new ArrayList<>();
    Map<CustState,List<WrDCa>> groups1 = new LinkedHashMap<>();
    for (var wr : web_returns) {
        for (var d : date_dim) {
            if (!(wr.wr_returned_date_sk == d.d_date_sk)) continue;
            for (var ca : customer_address) {
                if (!(wr.wr_returning_addr_sk == ca.ca_address_sk)) continue;
                if (!(d.d_year == 2000 && Objects.equals(ca.ca_state, "CA"))) continue;
                WrDCa row2 = new WrDCa(wr, d, ca);
                CustState key3 = new CustState(wr.wr_returning_customer_sk, ca.ca_state);
                List<WrDCa> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<CustState,List<WrDCa>> __e : groups1.entrySet()) {
        CustState g_key = __e.getKey();
        Group<CustState,WrDCa> g = new Group<>(g_key, __e.getValue());
        res0.add(new CtrCustomerSkCtrStateCtrTotalReturn(g.key.cust, g.key.state, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.wr_return_amt);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    List<StateAvgReturn> avg_by_state = (new java.util.function.Supplier<List<StateAvgReturn>>(){public List<StateAvgReturn> get(){
    List<StateAvgReturn> res6 = new ArrayList<>();
    Map<String,List<CtrCustomerSkCtrStateCtrTotalReturn>> groups7 = new LinkedHashMap<>();
    for (var ctr : customer_total_return) {
        var row8 = ctr;
        String key9 = ctr.ctr_state;
        List<CtrCustomerSkCtrStateCtrTotalReturn> bucket10 = groups7.get(key9);
        if (bucket10 == null) { bucket10 = new ArrayList<>(); groups7.put(key9, bucket10); }
        bucket10.add(row8);
    }
    for (Map.Entry<String,List<CtrCustomerSkCtrStateCtrTotalReturn>> __e : groups7.entrySet()) {
        String g_key = __e.getKey();
        Group<String,CtrCustomerSkCtrStateCtrTotalReturn> g = new Group<>(g_key, __e.getValue());
        res6.add(new StateAvgReturn(g.key, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.ctr_total_return);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res6;
}}).get();
    List<CCustomerIdCFirstNameCLastNameCtrTotalReturn> result = (new java.util.function.Supplier<List<CCustomerIdCFirstNameCLastNameCtrTotalReturn>>(){public List<CCustomerIdCFirstNameCLastNameCtrTotalReturn> get(){
    List<CCustomerIdCFirstNameCLastNameCtrTotalReturn> res12 = new ArrayList<>();
    for (var ctr : customer_total_return) {
        for (var avg : avg_by_state) {
            if (!(Objects.equals(ctr.ctr_state, avg.state))) continue;
            for (var c : customer) {
                if (!(ctr.ctr_customer_sk == c.c_customer_sk)) continue;
                if (!(ctr.ctr_total_return > avg.avg_return * 1.200000)) continue;
                res12.add(new CCustomerIdCFirstNameCLastNameCtrTotalReturn(c.c_customer_id, c.c_first_name, c.c_last_name, ctr.ctr_total_return));
            }
        }
    }
    return res12;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CCustomerIdCFirstNameCLastNameCtrTotalReturn("C1", "John", "Doe", 150.000000))))) throw new AssertionError("expect failed");
    }
}
