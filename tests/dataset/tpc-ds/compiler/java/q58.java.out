// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:36Z
// q58.mochi
import java.util.*;

class ItemIdSsItemRev {
    int item_id;
    double ss_item_rev;
    ItemIdSsItemRev(int item_id, double ss_item_rev) {
        this.item_id = item_id;
        this.ss_item_rev = ss_item_rev;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemIdSsItemRev other)) return false;
        return Objects.equals(this.item_id, other.item_id) && Objects.equals(this.ss_item_rev, other.ss_item_rev);
    }
    @Override public int hashCode() {
        return Objects.hash(item_id, ss_item_rev);
    }
    int size() { return 2; }
}
class ItemIdCsItemRev {
    int item_id;
    double cs_item_rev;
    ItemIdCsItemRev(int item_id, double cs_item_rev) {
        this.item_id = item_id;
        this.cs_item_rev = cs_item_rev;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemIdCsItemRev other)) return false;
        return Objects.equals(this.item_id, other.item_id) && Objects.equals(this.cs_item_rev, other.cs_item_rev);
    }
    @Override public int hashCode() {
        return Objects.hash(item_id, cs_item_rev);
    }
    int size() { return 2; }
}
class ItemIdWsItemRev {
    int item_id;
    double ws_item_rev;
    ItemIdWsItemRev(int item_id, double ws_item_rev) {
        this.item_id = item_id;
        this.ws_item_rev = ws_item_rev;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemIdWsItemRev other)) return false;
        return Objects.equals(this.item_id, other.item_id) && Objects.equals(this.ws_item_rev, other.ws_item_rev);
    }
    @Override public int hashCode() {
        return Objects.hash(item_id, ws_item_rev);
    }
    int size() { return 2; }
}
class ItemIdAverage {
    int item_id;
    double average;
    ItemIdAverage(int item_id, double average) {
        this.item_id = item_id;
        this.average = average;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemIdAverage other)) return false;
        return Objects.equals(this.item_id, other.item_id) && Objects.equals(this.average, other.average);
    }
    @Override public int hashCode() {
        return Objects.hash(item_id, average);
    }
    int size() { return 2; }
}
public class Q58 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    ItemIdSsItemRev ss_items = new ItemIdSsItemRev(1, 50.000000);
    ItemIdCsItemRev cs_items = new ItemIdCsItemRev(1, 60.000000);
    ItemIdWsItemRev ws_items = new ItemIdWsItemRev(1, 64.000000);
    double avg = (ss_items.ss_item_rev + cs_items.cs_item_rev + ws_items.ws_item_rev) / 3.000000;
    List<ItemIdAverage> result = new ArrayList<>(Arrays.asList(new ItemIdAverage(ss_items.item_id, avg)));
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new ItemIdAverage(1, 58.000000))))) throw new AssertionError("expect failed");
    }
}
