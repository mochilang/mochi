// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:49Z
// q3.mochi
import java.util.*;

class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class SsSoldDateSkSsItemSkSsExtSalesPrice {
    int ss_sold_date_sk;
    int ss_item_sk;
    double ss_ext_sales_price;
    SsSoldDateSkSsItemSkSsExtSalesPrice(int ss_sold_date_sk, int ss_item_sk, double ss_ext_sales_price) {
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_item_sk = ss_item_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSoldDateSkSsItemSkSsExtSalesPrice other)) return false;
        return Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_sold_date_sk, ss_item_sk, ss_ext_sales_price);
    }
    int size() { return 3; }
}
class IItemSkIManufactIdIBrandIdIBrand {
    int i_item_sk;
    int i_manufact_id;
    int i_brand_id;
    String i_brand;
    IItemSkIManufactIdIBrandIdIBrand(int i_item_sk, int i_manufact_id, int i_brand_id, String i_brand) {
        this.i_item_sk = i_item_sk;
        this.i_manufact_id = i_manufact_id;
        this.i_brand_id = i_brand_id;
        this.i_brand = i_brand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIManufactIdIBrandIdIBrand other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_brand, other.i_brand);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_manufact_id, i_brand_id, i_brand);
    }
    int size() { return 4; }
}
class DtI {
    DDateSkDYearDMoy dt;
    IItemSkIManufactIdIBrandIdIBrand i;
    DtI(DDateSkDYearDMoy dt, IItemSkIManufactIdIBrandIdIBrand i) {
        this.dt = dt;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DtI other)) return false;
        return Objects.equals(this.dt, other.dt) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(dt, i);
    }
    int size() { return 2; }
}
class DYearBrandIdBrand {
    int d_year;
    int brand_id;
    String brand;
    DYearBrandIdBrand(int d_year, int brand_id, String brand) {
        this.d_year = d_year;
        this.brand_id = brand_id;
        this.brand = brand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearBrandIdBrand other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.brand, other.brand);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, brand_id, brand);
    }
    int size() { return 3; }
}
class DYearBrandIdBrandSumAgg {
    int d_year;
    int brand_id;
    String brand;
    int sum_agg;
    DYearBrandIdBrandSumAgg(int d_year, int brand_id, String brand, int sum_agg) {
        this.d_year = d_year;
        this.brand_id = brand_id;
        this.brand = brand;
        this.sum_agg = sum_agg;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DYearBrandIdBrandSumAgg other)) return false;
        return Objects.equals(this.d_year, other.d_year) && Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.brand, other.brand) && Objects.equals(this.sum_agg, other.sum_agg);
    }
    @Override public int hashCode() {
        return Objects.hash(d_year, brand_id, brand, sum_agg);
    }
    int size() { return 4; }
}
public class Q3 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 1998, 12)));
    List<SsSoldDateSkSsItemSkSsExtSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SsSoldDateSkSsItemSkSsExtSalesPrice(1, 1, 10.000000), new SsSoldDateSkSsItemSkSsExtSalesPrice(1, 2, 20.000000)));
    List<IItemSkIManufactIdIBrandIdIBrand> item = new ArrayList<>(Arrays.asList(new IItemSkIManufactIdIBrandIdIBrand(1, 100, 1, "Brand1"), new IItemSkIManufactIdIBrandIdIBrand(2, 100, 2, "Brand2")));
    List<DYearBrandIdBrandSumAgg> result = (new java.util.function.Supplier<List<DYearBrandIdBrandSumAgg>>(){public List<DYearBrandIdBrandSumAgg> get(){
    List<DYearBrandIdBrandSumAgg> res0 = new ArrayList<>();
    Map<DYearBrandIdBrand,List<DtI>> groups1 = new LinkedHashMap<>();
    for (var dt : date_dim) {
        for (var ss : store_sales) {
            if (!(dt.d_date_sk == ss.ss_sold_date_sk)) continue;
            for (var i : item) {
                if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                if (!(i.i_manufact_id == 100 && dt.d_moy == 12)) continue;
                DtI row2 = new DtI(dt, i);
                DYearBrandIdBrand key3 = new DYearBrandIdBrand(dt.d_year, i.i_brand_id, i.i_brand);
                List<DtI> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<DYearBrandIdBrand,List<DtI>> __e : groups1.entrySet()) {
        DYearBrandIdBrand g_key = __e.getKey();
        Group<DYearBrandIdBrand,DtI> g = new Group<>(g_key, __e.getValue());
        res0.add(new DYearBrandIdBrandSumAgg(g.key.d_year, g.key.brand_id, g.key.brand, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_ext_sales_price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new DYearBrandIdBrandSumAgg(1998, 2, "Brand2", 20.000000), new DYearBrandIdBrandSumAgg(1998, 1, "Brand1", 10.000000))))) throw new AssertionError("expect failed");
    }
}
