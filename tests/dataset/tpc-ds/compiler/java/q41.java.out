// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:23Z
// q41.mochi
import java.util.*;

class ProductNameManufactIdManufactCategoryColorUnitsSize {
    String product_name;
    int manufact_id;
    int manufact;
    String category;
    String color;
    String units;
    String size;
    ProductNameManufactIdManufactCategoryColorUnitsSize(String product_name, int manufact_id, int manufact, String category, String color, String units, String size) {
        this.product_name = product_name;
        this.manufact_id = manufact_id;
        this.manufact = manufact;
        this.category = category;
        this.color = color;
        this.units = units;
        this.size = size;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProductNameManufactIdManufactCategoryColorUnitsSize other)) return false;
        return Objects.equals(this.product_name, other.product_name) && Objects.equals(this.manufact_id, other.manufact_id) && Objects.equals(this.manufact, other.manufact) && Objects.equals(this.category, other.category) && Objects.equals(this.color, other.color) && Objects.equals(this.units, other.units) && Objects.equals(this.size, other.size);
    }
    @Override public int hashCode() {
        return Objects.hash(product_name, manufact_id, manufact, category, color, units, size);
    }
    int size() { return 7; }
}
public class Q41 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ProductNameManufactIdManufactCategoryColorUnitsSize> item = new ArrayList<>(Arrays.asList(new ProductNameManufactIdManufactCategoryColorUnitsSize("Blue Shirt", 100, 1, "Women", "blue", "pack", "M"), new ProductNameManufactIdManufactCategoryColorUnitsSize("Red Dress", 120, 1, "Women", "red", "pack", "M"), new ProductNameManufactIdManufactCategoryColorUnitsSize("Pants", 200, 2, "Men", "black", "pair", "L")));
    int lower = 100;
    List<String> result = (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res0 = new ArrayList<>();
    for (var i1 : item) {
        if (!(i1.manufact_id >= lower && i1.manufact_id <= lower + 40 && ((Number)(new java.util.function.Supplier<List<ProductNameManufactIdManufactCategoryColorUnitsSize>>(){public List<ProductNameManufactIdManufactCategoryColorUnitsSize> get(){
    List<ProductNameManufactIdManufactCategoryColorUnitsSize> res1 = new ArrayList<>();
    for (var i2 : item) {
        if (!(i2.manufact == i1.manufact && Objects.equals(i2.category, i1.category))) continue;
        res1.add(i2);
    }
    return res1;
}}).get().size()).doubleValue() > 1)) continue;
        res0.add(i1.product_name);
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList("Blue Shirt", "Red Dress")))) throw new AssertionError("expect failed");
    }
}
