// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:51:27Z
// q97.mochi
import java.util.*;

class StoreSale {
    int ss_customer_sk;
    int ss_item_sk;
    StoreSale(int ss_customer_sk, int ss_item_sk) {
        this.ss_customer_sk = ss_customer_sk;
        this.ss_item_sk = ss_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, ss_item_sk);
    }
}
class CatalogSale {
    int cs_bill_customer_sk;
    int cs_item_sk;
    CatalogSale(int cs_bill_customer_sk, int cs_item_sk) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_item_sk = cs_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogSale other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_item_sk, other.cs_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, cs_item_sk);
    }
}
class SsCustomerSkSsItemSk {
    int ss_customer_sk;
    int ss_item_sk;
    SsCustomerSkSsItemSk(int ss_customer_sk, int ss_item_sk) {
        this.ss_customer_sk = ss_customer_sk;
        this.ss_item_sk = ss_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsCustomerSkSsItemSk other)) return false;
        return Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_item_sk, other.ss_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_customer_sk, ss_item_sk);
    }
    int size() { return 2; }
}
class CsBillCustomerSkCsItemSk {
    int cs_bill_customer_sk;
    int cs_item_sk;
    CsBillCustomerSkCsItemSk(int cs_bill_customer_sk, int cs_item_sk) {
        this.cs_bill_customer_sk = cs_bill_customer_sk;
        this.cs_item_sk = cs_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsBillCustomerSkCsItemSk other)) return false;
        return Objects.equals(this.cs_bill_customer_sk, other.cs_bill_customer_sk) && Objects.equals(this.cs_item_sk, other.cs_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_bill_customer_sk, cs_item_sk);
    }
    int size() { return 2; }
}
class CustomerSkItemSk {
    int customer_sk;
    int item_sk;
    CustomerSkItemSk(int customer_sk, int item_sk) {
        this.customer_sk = customer_sk;
        this.item_sk = item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerSkItemSk other)) return false;
        return Objects.equals(this.customer_sk, other.customer_sk) && Objects.equals(this.item_sk, other.item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_sk, item_sk);
    }
    int size() { return 2; }
}
class StoreOnlyCatalogOnlyStoreAndCatalog {
    int store_only;
    int catalog_only;
    int store_and_catalog;
    StoreOnlyCatalogOnlyStoreAndCatalog(int store_only, int catalog_only, int store_and_catalog) {
        this.store_only = store_only;
        this.catalog_only = catalog_only;
        this.store_and_catalog = store_and_catalog;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreOnlyCatalogOnlyStoreAndCatalog other)) return false;
        return Objects.equals(this.store_only, other.store_only) && Objects.equals(this.catalog_only, other.catalog_only) && Objects.equals(this.store_and_catalog, other.store_and_catalog);
    }
    @Override public int hashCode() {
        return Objects.hash(store_only, catalog_only, store_and_catalog);
    }
    int size() { return 3; }
}
public class Q97 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsCustomerSkSsItemSk> store_sales = new ArrayList<>(Arrays.asList(new SsCustomerSkSsItemSk(1, 1), new SsCustomerSkSsItemSk(2, 1)));
    List<CsBillCustomerSkCsItemSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsBillCustomerSkCsItemSk(1, 1), new CsBillCustomerSkCsItemSk(3, 2)));
    List<CustomerSkItemSk> ssci = (new java.util.function.Supplier<List<CustomerSkItemSk>>(){public List<CustomerSkItemSk> get(){
    List<CustomerSkItemSk> res0 = new ArrayList<>();
    Map<CustomerSkItemSk,List<SsCustomerSkSsItemSk>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        var row2 = ss;
        CustomerSkItemSk key3 = new CustomerSkItemSk(ss.ss_customer_sk, ss.ss_item_sk);
        List<SsCustomerSkSsItemSk> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<CustomerSkItemSk,List<SsCustomerSkSsItemSk>> __e : groups1.entrySet()) {
        CustomerSkItemSk g_key = __e.getKey();
        Group<CustomerSkItemSk,SsCustomerSkSsItemSk> g = new Group<>(g_key, __e.getValue());
        res0.add(new CustomerSkItemSk(g.key.customer_sk, g.key.item_sk));
    }
    return res0;
}}).get();
    List<CustomerSkItemSk> csci = (new java.util.function.Supplier<List<CustomerSkItemSk>>(){public List<CustomerSkItemSk> get(){
    List<CustomerSkItemSk> res5 = new ArrayList<>();
    Map<CustomerSkItemSk,List<CsBillCustomerSkCsItemSk>> groups6 = new LinkedHashMap<>();
    for (var cs : catalog_sales) {
        var row7 = cs;
        CustomerSkItemSk key8 = new CustomerSkItemSk(cs.cs_bill_customer_sk, cs.cs_item_sk);
        List<CsBillCustomerSkCsItemSk> bucket9 = groups6.get(key8);
        if (bucket9 == null) { bucket9 = new ArrayList<>(); groups6.put(key8, bucket9); }
        bucket9.add(row7);
    }
    for (Map.Entry<CustomerSkItemSk,List<CsBillCustomerSkCsItemSk>> __e : groups6.entrySet()) {
        CustomerSkItemSk g_key = __e.getKey();
        Group<CustomerSkItemSk,CsBillCustomerSkCsItemSk> g = new Group<>(g_key, __e.getValue());
        res5.add(new CustomerSkItemSk(g.key.customer_sk, g.key.item_sk));
    }
    return res5;
}}).get();
    int both = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res10 = new ArrayList<>();
    for (var s : ssci) {
        for (var c : csci) {
            if (!(s.customer_sk == c.customer_sk && s.item_sk == c.item_sk)) continue;
            res10.add(1);
        }
    }
    return res10;
}}).get().size();
    int store_only = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res11 = new ArrayList<>();
    for (var s : ssci) {
        if (!(!(csci.stream().anyMatch(c -> Objects.equals(s.customer_sk, c.customer_sk) && Objects.equals(s.item_sk, c.item_sk))))) continue;
        res11.add(1);
    }
    return res11;
}}).get().size();
    int catalog_only = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res12 = new ArrayList<>();
    for (var c : csci) {
        if (!(!(ssci.stream().anyMatch(s -> Objects.equals(s.customer_sk, c.customer_sk) && Objects.equals(s.item_sk, c.item_sk))))) continue;
        res12.add(1);
    }
    return res12;
}}).get().size();
    StoreOnlyCatalogOnlyStoreAndCatalog result = new StoreOnlyCatalogOnlyStoreAndCatalog(store_only, catalog_only, both);
    json(result);
    if (!(result.store_only == 1 && result.catalog_only == 1 && result.store_and_catalog == 1)) throw new AssertionError("expect failed");
    }
}
