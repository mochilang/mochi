// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:30Z
// q49.mochi
import java.util.*;

class ItemReturnRatioCurrencyRatioReturnRankCurrencyRank {
    String item;
    double return_ratio;
    double currency_ratio;
    int return_rank;
    int currency_rank;
    ItemReturnRatioCurrencyRatioReturnRankCurrencyRank(String item, double return_ratio, double currency_ratio, int return_rank, int currency_rank) {
        this.item = item;
        this.return_ratio = return_ratio;
        this.currency_ratio = currency_ratio;
        this.return_rank = return_rank;
        this.currency_rank = currency_rank;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemReturnRatioCurrencyRatioReturnRankCurrencyRank other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.return_ratio, other.return_ratio) && Objects.equals(this.currency_ratio, other.currency_ratio) && Objects.equals(this.return_rank, other.return_rank) && Objects.equals(this.currency_rank, other.currency_rank);
    }
    @Override public int hashCode() {
        return Objects.hash(item, return_ratio, currency_ratio, return_rank, currency_rank);
    }
    int size() { return 5; }
}
class ChannelItemReturnRatioReturnRankCurrencyRank {
    String channel;
    String item;
    double return_ratio;
    int return_rank;
    int currency_rank;
    ChannelItemReturnRatioReturnRankCurrencyRank(String channel, String item, double return_ratio, int return_rank, int currency_rank) {
        this.channel = channel;
        this.item = item;
        this.return_ratio = return_ratio;
        this.return_rank = return_rank;
        this.currency_rank = currency_rank;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelItemReturnRatioReturnRankCurrencyRank other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.item, other.item) && Objects.equals(this.return_ratio, other.return_ratio) && Objects.equals(this.return_rank, other.return_rank) && Objects.equals(this.currency_rank, other.currency_rank);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, item, return_ratio, return_rank, currency_rank);
    }
    int size() { return 5; }
}
public class Q49 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemReturnRatioCurrencyRatioReturnRankCurrencyRank> web = new ArrayList<>(Arrays.asList(new ItemReturnRatioCurrencyRatioReturnRankCurrencyRank("A", 0.200000, 0.300000, 1, 1), new ItemReturnRatioCurrencyRatioReturnRankCurrencyRank("B", 0.500000, 0.600000, 2, 2)));
    List<ItemReturnRatioCurrencyRatioReturnRankCurrencyRank> catalog = new ArrayList<>(Arrays.asList(new ItemReturnRatioCurrencyRatioReturnRankCurrencyRank("A", 0.300000, 0.400000, 1, 1)));
    List<ItemReturnRatioCurrencyRatioReturnRankCurrencyRank> store = new ArrayList<>(Arrays.asList(new ItemReturnRatioCurrencyRatioReturnRankCurrencyRank("A", 0.250000, 0.350000, 1, 1)));
    Object tmp = (java.util.stream.Stream.concat(java.util.stream.Stream.concat((new java.util.function.Supplier<List<ChannelItemReturnRatioReturnRankCurrencyRank>>(){public List<ChannelItemReturnRatioReturnRankCurrencyRank> get(){
    List<ChannelItemReturnRatioReturnRankCurrencyRank> res0 = new ArrayList<>();
    for (var w : web) {
        if (!(w.return_rank <= 10 || w.currency_rank <= 10)) continue;
        res0.add(new ChannelItemReturnRatioReturnRankCurrencyRank("web", w.item, w.return_ratio, w.return_rank, w.currency_rank));
    }
    return res0;
}}).get().stream(), (new java.util.function.Supplier<List<ChannelItemReturnRatioReturnRankCurrencyRank>>(){public List<ChannelItemReturnRatioReturnRankCurrencyRank> get(){
    List<ChannelItemReturnRatioReturnRankCurrencyRank> res1 = new ArrayList<>();
    for (var c : catalog) {
        if (!(c.return_rank <= 10 || c.currency_rank <= 10)) continue;
        res1.add(new ChannelItemReturnRatioReturnRankCurrencyRank("catalog", c.item, c.return_ratio, c.return_rank, c.currency_rank));
    }
    return res1;
}}).get().stream()).collect(java.util.stream.Collectors.toList()).stream(), (new java.util.function.Supplier<List<ChannelItemReturnRatioReturnRankCurrencyRank>>(){public List<ChannelItemReturnRatioReturnRankCurrencyRank> get(){
    List<ChannelItemReturnRatioReturnRankCurrencyRank> res2 = new ArrayList<>();
    for (var s : store) {
        if (!(s.return_rank <= 10 || s.currency_rank <= 10)) continue;
        res2.add(new ChannelItemReturnRatioReturnRankCurrencyRank("store", s.item, s.return_ratio, s.return_rank, s.currency_rank));
    }
    return res2;
}}).get().stream()).collect(java.util.stream.Collectors.toList()));
    List<?> result = (new java.util.function.Supplier<List<?>>(){public List<?> get(){
    List<?> res3 = new ArrayList<>();
    for (var r : tmp) {
        res3.add(r);
    }
    return res3;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new ChannelItemReturnRatioReturnRankCurrencyRank("catalog", "A", 0.300000, 1, 1), new ChannelItemReturnRatioReturnRankCurrencyRank("store", "A", 0.250000, 1, 1), new ChannelItemReturnRatioReturnRankCurrencyRank("web", "A", 0.200000, 1, 1), new ChannelItemReturnRatioReturnRankCurrencyRank("web", "B", 0.500000, 2, 2))))) throw new AssertionError("expect failed");
    }
}
