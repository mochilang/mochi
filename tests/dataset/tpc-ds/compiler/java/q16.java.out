// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:01Z
// q16.mochi
import java.util.*;

class CatalogSale {
    int cs_order_number;
    int cs_ship_date_sk;
    int cs_ship_addr_sk;
    int cs_call_center_sk;
    int cs_warehouse_sk;
    double cs_ext_ship_cost;
    double cs_net_profit;
    CatalogSale(int cs_order_number, int cs_ship_date_sk, int cs_ship_addr_sk, int cs_call_center_sk, int cs_warehouse_sk, double cs_ext_ship_cost, double cs_net_profit) {
        this.cs_order_number = cs_order_number;
        this.cs_ship_date_sk = cs_ship_date_sk;
        this.cs_ship_addr_sk = cs_ship_addr_sk;
        this.cs_call_center_sk = cs_call_center_sk;
        this.cs_warehouse_sk = cs_warehouse_sk;
        this.cs_ext_ship_cost = cs_ext_ship_cost;
        this.cs_net_profit = cs_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogSale other)) return false;
        return Objects.equals(this.cs_order_number, other.cs_order_number) && Objects.equals(this.cs_ship_date_sk, other.cs_ship_date_sk) && Objects.equals(this.cs_ship_addr_sk, other.cs_ship_addr_sk) && Objects.equals(this.cs_call_center_sk, other.cs_call_center_sk) && Objects.equals(this.cs_warehouse_sk, other.cs_warehouse_sk) && Objects.equals(this.cs_ext_ship_cost, other.cs_ext_ship_cost) && Objects.equals(this.cs_net_profit, other.cs_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_order_number, cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_ext_ship_cost, cs_net_profit);
    }
}
class DateDim {
    int d_date_sk;
    String d_date;
    DateDim(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
}
class CustomerAddress {
    int ca_address_sk;
    String ca_state;
    CustomerAddress(int ca_address_sk, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAddress other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state);
    }
}
class CallCenter {
    int cc_call_center_sk;
    String cc_county;
    CallCenter(int cc_call_center_sk, String cc_county) {
        this.cc_call_center_sk = cc_call_center_sk;
        this.cc_county = cc_county;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CallCenter other)) return false;
        return Objects.equals(this.cc_call_center_sk, other.cc_call_center_sk) && Objects.equals(this.cc_county, other.cc_county);
    }
    @Override public int hashCode() {
        return Objects.hash(cc_call_center_sk, cc_county);
    }
}
class CatalogReturn {
    int cr_order_number;
    CatalogReturn(int cr_order_number) {
        this.cr_order_number = cr_order_number;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogReturn other)) return false;
        return Objects.equals(this.cr_order_number, other.cr_order_number);
    }
    @Override public int hashCode() {
        return Objects.hash(cr_order_number);
    }
}
class CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit {
    int cs_order_number;
    int cs_ship_date_sk;
    int cs_ship_addr_sk;
    int cs_call_center_sk;
    int cs_warehouse_sk;
    double cs_ext_ship_cost;
    double cs_net_profit;
    CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit(int cs_order_number, int cs_ship_date_sk, int cs_ship_addr_sk, int cs_call_center_sk, int cs_warehouse_sk, double cs_ext_ship_cost, double cs_net_profit) {
        this.cs_order_number = cs_order_number;
        this.cs_ship_date_sk = cs_ship_date_sk;
        this.cs_ship_addr_sk = cs_ship_addr_sk;
        this.cs_call_center_sk = cs_call_center_sk;
        this.cs_warehouse_sk = cs_warehouse_sk;
        this.cs_ext_ship_cost = cs_ext_ship_cost;
        this.cs_net_profit = cs_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit other)) return false;
        return Objects.equals(this.cs_order_number, other.cs_order_number) && Objects.equals(this.cs_ship_date_sk, other.cs_ship_date_sk) && Objects.equals(this.cs_ship_addr_sk, other.cs_ship_addr_sk) && Objects.equals(this.cs_call_center_sk, other.cs_call_center_sk) && Objects.equals(this.cs_warehouse_sk, other.cs_warehouse_sk) && Objects.equals(this.cs_ext_ship_cost, other.cs_ext_ship_cost) && Objects.equals(this.cs_net_profit, other.cs_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_order_number, cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_ext_ship_cost, cs_net_profit);
    }
    int size() { return 7; }
}
class DDateSkDDate {
    int d_date_sk;
    String d_date;
    DDateSkDDate(int d_date_sk, String d_date) {
        this.d_date_sk = d_date_sk;
        this.d_date = d_date;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDate other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_date, other.d_date);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_date);
    }
    int size() { return 2; }
}
class CaAddressSkCaState {
    int ca_address_sk;
    String ca_state;
    CaAddressSkCaState(int ca_address_sk, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state);
    }
    int size() { return 2; }
}
class CcCallCenterSkCcCounty {
    int cc_call_center_sk;
    String cc_county;
    CcCallCenterSkCcCounty(int cc_call_center_sk, String cc_county) {
        this.cc_call_center_sk = cc_call_center_sk;
        this.cc_county = cc_county;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CcCallCenterSkCcCounty other)) return false;
        return Objects.equals(this.cc_call_center_sk, other.cc_call_center_sk) && Objects.equals(this.cc_county, other.cc_county);
    }
    @Override public int hashCode() {
        return Objects.hash(cc_call_center_sk, cc_county);
    }
    int size() { return 2; }
}
class OrderCountTotalShippingCostTotalNetProfit {
    int order_count;
    double total_shipping_cost;
    double total_net_profit;
    OrderCountTotalShippingCostTotalNetProfit(int order_count, double total_shipping_cost, double total_net_profit) {
        this.order_count = order_count;
        this.total_shipping_cost = total_shipping_cost;
        this.total_net_profit = total_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OrderCountTotalShippingCostTotalNetProfit other)) return false;
        return Objects.equals(this.order_count, other.order_count) && Objects.equals(this.total_shipping_cost, other.total_shipping_cost) && Objects.equals(this.total_net_profit, other.total_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(order_count, total_shipping_cost, total_net_profit);
    }
    int size() { return 3; }
}
public class Q16 {
    static List<any> distinct(List<any> xs) {
        List<Object> out = new ArrayList<>(Arrays.asList());
        for (any x : xs) {
            if (!contains(out, x)) {
                out.add(x);
            }
        }
        return out;
    }
    static <T> List<T> append(List<T> list, T item) {
        List<T> res = new ArrayList<>(list);
        res.add(item);
        return res;
    }
    static <K,V> Map.Entry<K,V> entry(K k, V v) { return new AbstractMap.SimpleEntry<>(k, v); }
    static <K,V> LinkedHashMap<K,V> mapOfEntries(Map.Entry<? extends K,? extends V>... entries) {
        LinkedHashMap<K,V> m = new LinkedHashMap<>();
        for (var e : entries) m.put(e.getKey(), e.getValue());
        return m;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit> catalog_sales = new ArrayList<>(Arrays.asList(new CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit(1, 1, 1, 1, 1, 5.000000, 20.000000), new CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit(1, 1, 1, 1, 2, 0.000000, 0.000000)));
    List<DDateSkDDate> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDate(1, "2000-03-01")));
    List<CaAddressSkCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaState(1, "CA")));
    List<CcCallCenterSkCcCounty> call_center = new ArrayList<>(Arrays.asList(new CcCallCenterSkCcCounty(1, "CountyA")));
    List<Object> catalog_returns = new ArrayList<>(Arrays.asList());
    List<OrderCountTotalShippingCostTotalNetProfit> filtered = (new java.util.function.Supplier<List<OrderCountTotalShippingCostTotalNetProfit>>(){public List<OrderCountTotalShippingCostTotalNetProfit> get(){
    List<OrderCountTotalShippingCostTotalNetProfit> res0 = new ArrayList<>();
    Map<Map<Object,Object>,List<CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit>> groups1 = new LinkedHashMap<>();
    for (var cs1 : catalog_sales) {
        for (var d : date_dim) {
            if (!(cs1.cs_ship_date_sk == d.d_date_sk && String.valueOf(d.d_date).compareTo(String.valueOf("2000-03-01")) >= 0 && String.valueOf(d.d_date).compareTo(String.valueOf("2000-04-30")) <= 0)) continue;
            for (var ca : customer_address) {
                if (!(cs1.cs_ship_addr_sk == ca.ca_address_sk && Objects.equals(ca.ca_state, "CA"))) continue;
                for (var cc : call_center) {
                    if (!(cs1.cs_call_center_sk == cc.cc_call_center_sk && Objects.equals(cc.cc_county, "CountyA"))) continue;
                    if (!(catalog_sales.stream().anyMatch(cs2 -> Objects.equals(cs1.cs_order_number, cs2.cs_order_number) && !Objects.equals(cs1.cs_warehouse_sk, cs2.cs_warehouse_sk)) && Objects.equals(catalog_returns.stream().anyMatch(cr -> Objects.equals(cs1.cs_order_number, cr.cr_order_number)), false))) continue;
                    var row2 = cs1;
                    Map<Object,Object> key3 = new LinkedHashMap<>();
                    List<CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<Map<Object,Object>,List<CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit>> __e : groups1.entrySet()) {
        Map<Object,Object> g_key = __e.getKey();
        Group<Map<Object,Object>,CsOrderNumberCsShipDateSkCsShipAddrSkCsCallCenterSkCsWarehouseSkCsExtShipCostCsNetProfit> g = new Group<>(g_key, __e.getValue());
        res0.add(new OrderCountTotalShippingCostTotalNetProfit(distinct((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.cs_order_number);
    }
    return res5;
}}).get()).size(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.cs_ext_ship_cost);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add(x.cs_net_profit);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    json(filtered);
    if (!(Objects.equals(filtered, Arrays.asList(new OrderCountTotalShippingCostTotalNetProfit(1, 5.000000, 20.000000))))) throw new AssertionError("expect failed");
    }
}
