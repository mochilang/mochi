// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:12Z
// q28.mochi
import java.util.*;

class StoreSale {
    int ss_quantity;
    double ss_list_price;
    double ss_coupon_amt;
    double ss_wholesale_cost;
    StoreSale(int ss_quantity, double ss_list_price, double ss_coupon_amt, double ss_wholesale_cost) {
        this.ss_quantity = ss_quantity;
        this.ss_list_price = ss_list_price;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_wholesale_cost = ss_wholesale_cost;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_wholesale_cost, other.ss_wholesale_cost);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_quantity, ss_list_price, ss_coupon_amt, ss_wholesale_cost);
    }
}
class SsQuantitySsListPriceSsCouponAmtSsWholesaleCost {
    int ss_quantity;
    double ss_list_price;
    double ss_coupon_amt;
    double ss_wholesale_cost;
    SsQuantitySsListPriceSsCouponAmtSsWholesaleCost(int ss_quantity, double ss_list_price, double ss_coupon_amt, double ss_wholesale_cost) {
        this.ss_quantity = ss_quantity;
        this.ss_list_price = ss_list_price;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_wholesale_cost = ss_wholesale_cost;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsQuantitySsListPriceSsCouponAmtSsWholesaleCost other)) return false;
        return Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_wholesale_cost, other.ss_wholesale_cost);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_quantity, ss_list_price, ss_coupon_amt, ss_wholesale_cost);
    }
    int size() { return 4; }
}
class B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD {
    double B1_LP;
    int B1_CNT;
    int B1_CNTD;
    double B2_LP;
    int B2_CNT;
    int B2_CNTD;
    B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD(double B1_LP, int B1_CNT, int B1_CNTD, double B2_LP, int B2_CNT, int B2_CNTD) {
        this.B1_LP = B1_LP;
        this.B1_CNT = B1_CNT;
        this.B1_CNTD = B1_CNTD;
        this.B2_LP = B2_LP;
        this.B2_CNT = B2_CNT;
        this.B2_CNTD = B2_CNTD;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD other)) return false;
        return Objects.equals(this.B1_LP, other.B1_LP) && Objects.equals(this.B1_CNT, other.B1_CNT) && Objects.equals(this.B1_CNTD, other.B1_CNTD) && Objects.equals(this.B2_LP, other.B2_LP) && Objects.equals(this.B2_CNT, other.B2_CNT) && Objects.equals(this.B2_CNTD, other.B2_CNTD);
    }
    @Override public int hashCode() {
        return Objects.hash(B1_LP, B1_CNT, B1_CNTD, B2_LP, B2_CNT, B2_CNTD);
    }
    int size() { return 6; }
}
public class Q28 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> store_sales = new ArrayList<>(Arrays.asList(new SsQuantitySsListPriceSsCouponAmtSsWholesaleCost(3, 100.000000, 50.000000, 30.000000), new SsQuantitySsListPriceSsCouponAmtSsWholesaleCost(8, 80.000000, 10.000000, 20.000000), new SsQuantitySsListPriceSsCouponAmtSsWholesaleCost(12, 60.000000, 5.000000, 15.000000)));
    List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> bucket1 = (new java.util.function.Supplier<List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>>(){public List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> get(){
    List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        if (!(ss.ss_quantity >= 0 && ss.ss_quantity <= 5 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)))) continue;
        res0.add(ss);
    }
    return res0;
}}).get();
    List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> bucket2 = (new java.util.function.Supplier<List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>>(){public List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> get(){
    List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> res1 = new ArrayList<>();
    for (var ss : store_sales) {
        if (!(ss.ss_quantity >= 6 && ss.ss_quantity <= 10 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)))) continue;
        res1.add(ss);
    }
    return res1;
}}).get();
    B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD result = new B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD((new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res2 = new ArrayList<>();
    for (var x : bucket1) {
        res2.add(x.ss_list_price);
    }
    return res2;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), bucket1.size(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res3 = new ArrayList<>();
    Map<Double,List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>> groups4 = new LinkedHashMap<>();
    for (var x : bucket1) {
        var row5 = x;
        double key6 = x.ss_list_price;
        List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> bucket7 = groups4.get(key6);
        if (bucket7 == null) { bucket7 = new ArrayList<>(); groups4.put(key6, bucket7); }
        bucket7.add(row5);
    }
    for (Map.Entry<Double,List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>> __e : groups4.entrySet()) {
        double g_key = __e.getKey();
        Group<Double,SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> g = new Group<>(g_key, __e.getValue());
        res3.add(g.key);
    }
    return res3;
}}).get().size(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res8 = new ArrayList<>();
    for (var x : bucket2) {
        res8.add(x.ss_list_price);
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), bucket2.size(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res9 = new ArrayList<>();
    Map<Double,List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>> groups10 = new LinkedHashMap<>();
    for (var x : bucket2) {
        var row11 = x;
        double key12 = x.ss_list_price;
        List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> bucket13 = groups10.get(key12);
        if (bucket13 == null) { bucket13 = new ArrayList<>(); groups10.put(key12, bucket13); }
        bucket13.add(row11);
    }
    for (Map.Entry<Double,List<SsQuantitySsListPriceSsCouponAmtSsWholesaleCost>> __e : groups10.entrySet()) {
        double g_key = __e.getKey();
        Group<Double,SsQuantitySsListPriceSsCouponAmtSsWholesaleCost> g = new Group<>(g_key, __e.getValue());
        res9.add(g.key);
    }
    return res9;
}}).get().size());
    json(result);
    if (!(Objects.equals(result, new B1LPB1CNTB1CNTDB2LPB2CNTB2CNTD(100.000000, 1, 1, 80.000000, 1, 1)))) throw new AssertionError("expect failed");
    }
}
