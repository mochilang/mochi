// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:08Z
// q24.mochi
import java.util.*;

class Store {
    int s_store_sk;
    String s_store_name;
    int s_market_id;
    String s_state;
    String s_zip;
    Store(int s_store_sk, String s_store_name, int s_market_id, String s_state, String s_zip) {
        this.s_store_sk = s_store_sk;
        this.s_store_name = s_store_name;
        this.s_market_id = s_market_id;
        this.s_state = s_state;
        this.s_zip = s_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.s_market_id, other.s_market_id) && Objects.equals(this.s_state, other.s_state) && Objects.equals(this.s_zip, other.s_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_store_name, s_market_id, s_state, s_zip);
    }
}
class Item {
    int i_item_sk;
    String i_color;
    double i_current_price;
    int i_manager_id;
    String i_units;
    String i_size;
    Item(int i_item_sk, String i_color, double i_current_price, int i_manager_id, String i_units, String i_size) {
        this.i_item_sk = i_item_sk;
        this.i_color = i_color;
        this.i_current_price = i_current_price;
        this.i_manager_id = i_manager_id;
        this.i_units = i_units;
        this.i_size = i_size;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_color, other.i_color) && Objects.equals(this.i_current_price, other.i_current_price) && Objects.equals(this.i_manager_id, other.i_manager_id) && Objects.equals(this.i_units, other.i_units) && Objects.equals(this.i_size, other.i_size);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_color, i_current_price, i_manager_id, i_units, i_size);
    }
}
class Customer {
    int c_customer_sk;
    String c_first_name;
    String c_last_name;
    int c_current_addr_sk;
    String c_birth_country;
    Customer(int c_customer_sk, String c_first_name, String c_last_name, int c_current_addr_sk, String c_birth_country) {
        this.c_customer_sk = c_customer_sk;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
        this.c_current_addr_sk = c_current_addr_sk;
        this.c_birth_country = c_birth_country;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk) && Objects.equals(this.c_birth_country, other.c_birth_country);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_first_name, c_last_name, c_current_addr_sk, c_birth_country);
    }
}
class CustomerAddress {
    int ca_address_sk;
    String ca_state;
    String ca_country;
    String ca_zip;
    CustomerAddress(int ca_address_sk, String ca_state, String ca_country, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
        this.ca_country = ca_country;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAddress other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state) && Objects.equals(this.ca_country, other.ca_country) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state, ca_country, ca_zip);
    }
}
class StoreSale {
    int ss_ticket_number;
    int ss_item_sk;
    int ss_customer_sk;
    int ss_store_sk;
    double ss_net_paid;
    StoreSale(int ss_ticket_number, int ss_item_sk, int ss_customer_sk, int ss_store_sk, double ss_net_paid) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_item_sk = ss_item_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_net_paid = ss_net_paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_net_paid, other.ss_net_paid);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_item_sk, ss_customer_sk, ss_store_sk, ss_net_paid);
    }
}
class StoreReturn {
    int sr_ticket_number;
    int sr_item_sk;
    StoreReturn(int sr_ticket_number, int sr_item_sk) {
        this.sr_ticket_number = sr_ticket_number;
        this.sr_item_sk = sr_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreReturn other)) return false;
        return Objects.equals(this.sr_ticket_number, other.sr_ticket_number) && Objects.equals(this.sr_item_sk, other.sr_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_ticket_number, sr_item_sk);
    }
}
class SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid {
    int ss_ticket_number;
    int ss_item_sk;
    int ss_customer_sk;
    int ss_store_sk;
    double ss_net_paid;
    SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid(int ss_ticket_number, int ss_item_sk, int ss_customer_sk, int ss_store_sk, double ss_net_paid) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_item_sk = ss_item_sk;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_net_paid = ss_net_paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_net_paid, other.ss_net_paid);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_item_sk, ss_customer_sk, ss_store_sk, ss_net_paid);
    }
    int size() { return 5; }
}
class SrTicketNumberSrItemSk {
    int sr_ticket_number;
    int sr_item_sk;
    SrTicketNumberSrItemSk(int sr_ticket_number, int sr_item_sk) {
        this.sr_ticket_number = sr_ticket_number;
        this.sr_item_sk = sr_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SrTicketNumberSrItemSk other)) return false;
        return Objects.equals(this.sr_ticket_number, other.sr_ticket_number) && Objects.equals(this.sr_item_sk, other.sr_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_ticket_number, sr_item_sk);
    }
    int size() { return 2; }
}
class SStoreSkSStoreNameSMarketIdSStateSZip {
    int s_store_sk;
    String s_store_name;
    int s_market_id;
    String s_state;
    String s_zip;
    SStoreSkSStoreNameSMarketIdSStateSZip(int s_store_sk, String s_store_name, int s_market_id, String s_state, String s_zip) {
        this.s_store_sk = s_store_sk;
        this.s_store_name = s_store_name;
        this.s_market_id = s_market_id;
        this.s_state = s_state;
        this.s_zip = s_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSStoreNameSMarketIdSStateSZip other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.s_market_id, other.s_market_id) && Objects.equals(this.s_state, other.s_state) && Objects.equals(this.s_zip, other.s_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_store_name, s_market_id, s_state, s_zip);
    }
    int size() { return 5; }
}
class IItemSkIColorICurrentPriceIManagerIdIUnitsISize {
    int i_item_sk;
    String i_color;
    double i_current_price;
    int i_manager_id;
    String i_units;
    String i_size;
    IItemSkIColorICurrentPriceIManagerIdIUnitsISize(int i_item_sk, String i_color, double i_current_price, int i_manager_id, String i_units, String i_size) {
        this.i_item_sk = i_item_sk;
        this.i_color = i_color;
        this.i_current_price = i_current_price;
        this.i_manager_id = i_manager_id;
        this.i_units = i_units;
        this.i_size = i_size;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIColorICurrentPriceIManagerIdIUnitsISize other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_color, other.i_color) && Objects.equals(this.i_current_price, other.i_current_price) && Objects.equals(this.i_manager_id, other.i_manager_id) && Objects.equals(this.i_units, other.i_units) && Objects.equals(this.i_size, other.i_size);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_color, i_current_price, i_manager_id, i_units, i_size);
    }
    int size() { return 6; }
}
class CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry {
    int c_customer_sk;
    String c_first_name;
    String c_last_name;
    int c_current_addr_sk;
    String c_birth_country;
    CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry(int c_customer_sk, String c_first_name, String c_last_name, int c_current_addr_sk, String c_birth_country) {
        this.c_customer_sk = c_customer_sk;
        this.c_first_name = c_first_name;
        this.c_last_name = c_last_name;
        this.c_current_addr_sk = c_current_addr_sk;
        this.c_birth_country = c_birth_country;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk) && Objects.equals(this.c_birth_country, other.c_birth_country);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_first_name, c_last_name, c_current_addr_sk, c_birth_country);
    }
    int size() { return 5; }
}
class CaAddressSkCaStateCaCountryCaZip {
    int ca_address_sk;
    String ca_state;
    String ca_country;
    String ca_zip;
    CaAddressSkCaStateCaCountryCaZip(int ca_address_sk, String ca_state, String ca_country, String ca_zip) {
        this.ca_address_sk = ca_address_sk;
        this.ca_state = ca_state;
        this.ca_country = ca_country;
        this.ca_zip = ca_zip;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaStateCaCountryCaZip other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_state, other.ca_state) && Objects.equals(this.ca_country, other.ca_country) && Objects.equals(this.ca_zip, other.ca_zip);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_state, ca_country, ca_zip);
    }
    int size() { return 4; }
}
class SsSICCa {
    SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid ss;
    SStoreSkSStoreNameSMarketIdSStateSZip s;
    IItemSkIColorICurrentPriceIManagerIdIUnitsISize i;
    CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry c;
    CaAddressSkCaStateCaCountryCaZip ca;
    SsSICCa(SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid ss, SStoreSkSStoreNameSMarketIdSStateSZip s, IItemSkIColorICurrentPriceIManagerIdIUnitsISize i, CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry c, CaAddressSkCaStateCaCountryCaZip ca) {
        this.ss = ss;
        this.s = s;
        this.i = i;
        this.c = c;
        this.ca = ca;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsSICCa other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.s, other.s) && Objects.equals(this.i, other.i) && Objects.equals(this.c, other.c) && Objects.equals(this.ca, other.ca);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, s, i, c, ca);
    }
    int size() { return 5; }
}
class LastFirstStoreNameColor {
    String last;
    String first;
    String store_name;
    String color;
    LastFirstStoreNameColor(String last, String first, String store_name, String color) {
        this.last = last;
        this.first = first;
        this.store_name = store_name;
        this.color = color;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LastFirstStoreNameColor other)) return false;
        return Objects.equals(this.last, other.last) && Objects.equals(this.first, other.first) && Objects.equals(this.store_name, other.store_name) && Objects.equals(this.color, other.color);
    }
    @Override public int hashCode() {
        return Objects.hash(last, first, store_name, color);
    }
    int size() { return 4; }
}
class CLastNameCFirstNameSStoreNameColorNetpaid {
    String c_last_name;
    String c_first_name;
    String s_store_name;
    String color;
    int netpaid;
    CLastNameCFirstNameSStoreNameColorNetpaid(String c_last_name, String c_first_name, String s_store_name, String color, int netpaid) {
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.s_store_name = s_store_name;
        this.color = color;
        this.netpaid = netpaid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CLastNameCFirstNameSStoreNameColorNetpaid other)) return false;
        return Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.color, other.color) && Objects.equals(this.netpaid, other.netpaid);
    }
    @Override public int hashCode() {
        return Objects.hash(c_last_name, c_first_name, s_store_name, color, netpaid);
    }
    int size() { return 5; }
}
class CLastNameCFirstNameSStoreNamePaid {
    String c_last_name;
    String c_first_name;
    String s_store_name;
    int paid;
    CLastNameCFirstNameSStoreNamePaid(String c_last_name, String c_first_name, String s_store_name, int paid) {
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.s_store_name = s_store_name;
        this.paid = paid;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CLastNameCFirstNameSStoreNamePaid other)) return false;
        return Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.paid, other.paid);
    }
    @Override public int hashCode() {
        return Objects.hash(c_last_name, c_first_name, s_store_name, paid);
    }
    int size() { return 4; }
}
public class Q24 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid> store_sales = new ArrayList<>(Arrays.asList(new SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid(1, 1, 1, 1, 100.000000), new SsTicketNumberSsItemSkSsCustomerSkSsStoreSkSsNetPaid(2, 2, 2, 1, 50.000000)));
    List<SrTicketNumberSrItemSk> store_returns = new ArrayList<>(Arrays.asList(new SrTicketNumberSrItemSk(1, 1), new SrTicketNumberSrItemSk(2, 2)));
    List<SStoreSkSStoreNameSMarketIdSStateSZip> store = new ArrayList<>(Arrays.asList(new SStoreSkSStoreNameSMarketIdSStateSZip(1, "Store1", 5, "CA", "12345")));
    List<IItemSkIColorICurrentPriceIManagerIdIUnitsISize> item = new ArrayList<>(Arrays.asList(new IItemSkIColorICurrentPriceIManagerIdIUnitsISize(1, "RED", 10.000000, 1, "EA", "M"), new IItemSkIColorICurrentPriceIManagerIdIUnitsISize(2, "BLUE", 20.000000, 2, "EA", "L")));
    List<CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry(1, "Ann", "Smith", 1, "Canada"), new CCustomerSkCFirstNameCLastNameCCurrentAddrSkCBirthCountry(2, "Bob", "Jones", 2, "USA")));
    List<CaAddressSkCaStateCaCountryCaZip> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaStateCaCountryCaZip(1, "CA", "USA", "12345"), new CaAddressSkCaStateCaCountryCaZip(2, "CA", "USA", "54321")));
    List<CLastNameCFirstNameSStoreNameColorNetpaid> ssales = (new java.util.function.Supplier<List<CLastNameCFirstNameSStoreNameColorNetpaid>>(){public List<CLastNameCFirstNameSStoreNameColorNetpaid> get(){
    List<CLastNameCFirstNameSStoreNameColorNetpaid> res0 = new ArrayList<>();
    Map<LastFirstStoreNameColor,List<SsSICCa>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var sr : store_returns) {
            if (!(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk)) continue;
            for (var s : store) {
                if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                for (var i : item) {
                    if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                    for (var c : customer) {
                        if (!(ss.ss_customer_sk == c.c_customer_sk)) continue;
                        for (var ca : customer_address) {
                            if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
                            if (!(!Objects.equals(c.c_birth_country, strings.ToUpper(ca.ca_country)) && Objects.equals(s.s_zip, ca.ca_zip) && s.s_market_id == 5)) continue;
                            SsSICCa row2 = new SsSICCa(ss, s, i, c, ca);
                            LastFirstStoreNameColor key3 = new LastFirstStoreNameColor(c.c_last_name, c.c_first_name, s.s_store_name, i.i_color);
                            List<SsSICCa> bucket4 = groups1.get(key3);
                            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                            bucket4.add(row2);
                        }
                    }
                }
            }
        }
    }
    for (Map.Entry<LastFirstStoreNameColor,List<SsSICCa>> __e : groups1.entrySet()) {
        LastFirstStoreNameColor g_key = __e.getKey();
        Group<LastFirstStoreNameColor,SsSICCa> g = new Group<>(g_key, __e.getValue());
        res0.add(new CLastNameCFirstNameSStoreNameColorNetpaid(g.key.last, g.key.first, g.key.store_name, g.key.color, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss_net_paid);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    double avg_paid = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res6 = new ArrayList<>();
    for (var x : ssales) {
        res6.add(x.netpaid);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0);
    List<CLastNameCFirstNameSStoreNamePaid> result = (new java.util.function.Supplier<List<CLastNameCFirstNameSStoreNamePaid>>(){public List<CLastNameCFirstNameSStoreNamePaid> get(){
    List<CLastNameCFirstNameSStoreNamePaid> res7 = new ArrayList<>();
    for (var x : ssales) {
        if (!(Objects.equals(x.color, "RED") && x.netpaid > 0.050000 * avg_paid)) continue;
        res7.add(new CLastNameCFirstNameSStoreNamePaid(x.c_last_name, x.c_first_name, x.s_store_name, x.netpaid));
    }
    return res7;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CLastNameCFirstNameSStoreNamePaid("Smith", "Ann", "Store1", 100.000000))))) throw new AssertionError("expect failed");
    }
}
