// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:52:01Z
// q88.mochi
import java.util.*;

class TimeSkHourMinute {
    int time_sk;
    int hour;
    int minute;
    TimeSkHourMinute(int time_sk, int hour, int minute) {
        this.time_sk = time_sk;
        this.hour = hour;
        this.minute = minute;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TimeSkHourMinute other)) return false;
        return Objects.equals(this.time_sk, other.time_sk) && Objects.equals(this.hour, other.hour) && Objects.equals(this.minute, other.minute);
    }
    @Override public int hashCode() {
        return Objects.hash(time_sk, hour, minute);
    }
    int size() { return 3; }
}
class HdDemoSkHdDepCountHdVehicleCount {
    int hd_demo_sk;
    int hd_dep_count;
    int hd_vehicle_count;
    HdDemoSkHdDepCountHdVehicleCount(int hd_demo_sk, int hd_dep_count, int hd_vehicle_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_dep_count = hd_dep_count;
        this.hd_vehicle_count = hd_vehicle_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkHdDepCountHdVehicleCount other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_dep_count, other.hd_dep_count) && Objects.equals(this.hd_vehicle_count, other.hd_vehicle_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_dep_count, hd_vehicle_count);
    }
    int size() { return 3; }
}
class SStoreSkSStoreName {
    int s_store_sk;
    String s_store_name;
    SStoreSkSStoreName(int s_store_sk, String s_store_name) {
        this.s_store_sk = s_store_sk;
        this.s_store_name = s_store_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSStoreName other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_store_name, other.s_store_name);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_store_name);
    }
    int size() { return 2; }
}
class SoldTimeSkHdemoSkStoreSkQty {
    int sold_time_sk;
    int hdemo_sk;
    int store_sk;
    double qty;
    SoldTimeSkHdemoSkStoreSkQty(int sold_time_sk, int hdemo_sk, int store_sk, double qty) {
        this.sold_time_sk = sold_time_sk;
        this.hdemo_sk = hdemo_sk;
        this.store_sk = store_sk;
        this.qty = qty;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SoldTimeSkHdemoSkStoreSkQty other)) return false;
        return Objects.equals(this.sold_time_sk, other.sold_time_sk) && Objects.equals(this.hdemo_sk, other.hdemo_sk) && Objects.equals(this.store_sk, other.store_sk) && Objects.equals(this.qty, other.qty);
    }
    @Override public int hashCode() {
        return Objects.hash(sold_time_sk, hdemo_sk, store_sk, qty);
    }
    int size() { return 4; }
}
public class Q88 {
    static double count_range(List<any> ssales, List<any> tdim, int hour, int start_min, int end_min) {
        double total = 0.000000;
        for (any ss : ssales) {
            for (any t : tdim) {
                if (Objects.equals(ss.sold_time_sk, t.time_sk) && Objects.equals(t.hour, hour) && t.minute >= start_min && t.minute < end_min) {
                    total = total + ss.qty;
                }
            }
        }
        return total;
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<TimeSkHourMinute> time_dim = new ArrayList<>(Arrays.asList(new TimeSkHourMinute(1, 8, 30), new TimeSkHourMinute(2, 9, 0), new TimeSkHourMinute(3, 9, 30), new TimeSkHourMinute(4, 10, 0), new TimeSkHourMinute(5, 10, 30), new TimeSkHourMinute(6, 11, 0), new TimeSkHourMinute(7, 11, 30), new TimeSkHourMinute(8, 12, 0)));
    List<HdDemoSkHdDepCountHdVehicleCount> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkHdDepCountHdVehicleCount(1, 1, 1)));
    List<SStoreSkSStoreName> store = new ArrayList<>(Arrays.asList(new SStoreSkSStoreName(1, "ese")));
    List<SoldTimeSkHdemoSkStoreSkQty> store_sales = new ArrayList<>(Arrays.asList(new SoldTimeSkHdemoSkStoreSkQty(1, 1, 1, 10.000000), new SoldTimeSkHdemoSkStoreSkQty(2, 1, 1, 12.000000), new SoldTimeSkHdemoSkStoreSkQty(3, 1, 1, 14.000000), new SoldTimeSkHdemoSkStoreSkQty(4, 1, 1, 11.000000), new SoldTimeSkHdemoSkStoreSkQty(5, 1, 1, 8.000000), new SoldTimeSkHdemoSkStoreSkQty(6, 1, 1, 9.000000), new SoldTimeSkHdemoSkStoreSkQty(7, 1, 1, 10.000000), new SoldTimeSkHdemoSkStoreSkQty(8, 1, 1, 14.000000)));
    double h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60);
    double h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30);
    double h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60);
    double h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30);
    double h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60);
    double h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30);
    double h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60);
    double h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30);
    double result = h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 + h11_30_to_12 + h12_to_12_30;
    json(result);
    if (!(result == 88)) throw new AssertionError("expect failed");
    }
}
