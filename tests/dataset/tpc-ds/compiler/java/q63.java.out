// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:41Z
// q63.mochi
import java.util.*;

class MgrAmount {
    int mgr;
    int amount;
    MgrAmount(int mgr, int amount) {
        this.mgr = mgr;
        this.amount = amount;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MgrAmount other)) return false;
        return Objects.equals(this.mgr, other.mgr) && Objects.equals(this.amount, other.amount);
    }
    @Override public int hashCode() {
        return Objects.hash(mgr, amount);
    }
    int size() { return 2; }
}
class Mgr {
    int mgr;
    Mgr(int mgr) {
        this.mgr = mgr;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Mgr other)) return false;
        return Objects.equals(this.mgr, other.mgr);
    }
    @Override public int hashCode() {
        return Objects.hash(mgr);
    }
    int size() { return 1; }
}
class MgrSumSales {
    int mgr;
    int sum_sales;
    MgrSumSales(int mgr, int sum_sales) {
        this.mgr = mgr;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MgrSumSales other)) return false;
        return Objects.equals(this.mgr, other.mgr) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(mgr, sum_sales);
    }
    int size() { return 2; }
}
public class Q63 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<MgrAmount> sales = new ArrayList<>(Arrays.asList(new MgrAmount(1, 30), new MgrAmount(2, 33)));
    List<MgrSumSales> by_mgr = (new java.util.function.Supplier<List<MgrSumSales>>(){public List<MgrSumSales> get(){
    List<MgrSumSales> res0 = new ArrayList<>();
    Map<Mgr,List<MgrAmount>> groups1 = new LinkedHashMap<>();
    for (var s : sales) {
        var row2 = s;
        Mgr key3 = new Mgr(s.mgr);
        List<MgrAmount> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Mgr,List<MgrAmount>> __e : groups1.entrySet()) {
        Mgr g_key = __e.getKey();
        Group<Mgr,MgrAmount> g = new Group<>(g_key, __e.getValue());
        res0.add(new MgrSumSales(g.key.mgr, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.amount);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
    int result = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res6 = new ArrayList<>();
    for (var x : by_mgr) {
        res6.add(x.sum_sales);
    }
    return res6;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum();
    json(result);
    if (!(result == 63)) throw new AssertionError("expect failed");
    }
}
