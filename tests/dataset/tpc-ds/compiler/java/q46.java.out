// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:27Z
// q46.mochi
import java.util.*;

class SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit {
    int ss_ticket_number;
    int ss_customer_sk;
    int ss_addr_sk;
    int ss_hdemo_sk;
    int ss_store_sk;
    int ss_sold_date_sk;
    double ss_coupon_amt;
    double ss_net_profit;
    SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit(int ss_ticket_number, int ss_customer_sk, int ss_addr_sk, int ss_hdemo_sk, int ss_store_sk, int ss_sold_date_sk, double ss_coupon_amt, double ss_net_profit) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ss_addr_sk = ss_addr_sk;
        this.ss_hdemo_sk = ss_hdemo_sk;
        this.ss_store_sk = ss_store_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_coupon_amt = ss_coupon_amt;
        this.ss_net_profit = ss_net_profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ss_addr_sk, other.ss_addr_sk) && Objects.equals(this.ss_hdemo_sk, other.ss_hdemo_sk) && Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_coupon_amt, other.ss_coupon_amt) && Objects.equals(this.ss_net_profit, other.ss_net_profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_customer_sk, ss_addr_sk, ss_hdemo_sk, ss_store_sk, ss_sold_date_sk, ss_coupon_amt, ss_net_profit);
    }
    int size() { return 8; }
}
class DDateSkDDowDYear {
    int d_date_sk;
    int d_dow;
    int d_year;
    DDateSkDDowDYear(int d_date_sk, int d_dow, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_dow = d_dow;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDDowDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_dow, other.d_dow) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_dow, d_year);
    }
    int size() { return 3; }
}
class SStoreSkSCity {
    int s_store_sk;
    String s_city;
    SStoreSkSCity(int s_store_sk, String s_city) {
        this.s_store_sk = s_store_sk;
        this.s_city = s_city;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSCity other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_city, other.s_city);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_city);
    }
    int size() { return 2; }
}
class HdDemoSkHdDepCountHdVehicleCount {
    int hd_demo_sk;
    int hd_dep_count;
    int hd_vehicle_count;
    HdDemoSkHdDepCountHdVehicleCount(int hd_demo_sk, int hd_dep_count, int hd_vehicle_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_dep_count = hd_dep_count;
        this.hd_vehicle_count = hd_vehicle_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkHdDepCountHdVehicleCount other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_dep_count, other.hd_dep_count) && Objects.equals(this.hd_vehicle_count, other.hd_vehicle_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_dep_count, hd_vehicle_count);
    }
    int size() { return 3; }
}
class CaAddressSkCaCity {
    int ca_address_sk;
    String ca_city;
    CaAddressSkCaCity(int ca_address_sk, String ca_city) {
        this.ca_address_sk = ca_address_sk;
        this.ca_city = ca_city;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaCity other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_city, other.ca_city);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_city);
    }
    int size() { return 2; }
}
class CCustomerSkCLastNameCFirstNameCCurrentAddrSk {
    int c_customer_sk;
    String c_last_name;
    String c_first_name;
    int c_current_addr_sk;
    CCustomerSkCLastNameCFirstNameCCurrentAddrSk(int c_customer_sk, String c_last_name, String c_first_name, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCLastNameCFirstNameCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_last_name, c_first_name, c_current_addr_sk);
    }
    int size() { return 4; }
}
class SsDSHdCa {
    SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit ss;
    DDateSkDDowDYear d;
    SStoreSkSCity s;
    HdDemoSkHdDepCountHdVehicleCount hd;
    CaAddressSkCaCity ca;
    SsDSHdCa(SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit ss, DDateSkDDowDYear d, SStoreSkSCity s, HdDemoSkHdDepCountHdVehicleCount hd, CaAddressSkCaCity ca) {
        this.ss = ss;
        this.d = d;
        this.s = s;
        this.hd = hd;
        this.ca = ca;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsDSHdCa other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.d, other.d) && Objects.equals(this.s, other.s) && Objects.equals(this.hd, other.hd) && Objects.equals(this.ca, other.ca);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, d, s, hd, ca);
    }
    int size() { return 5; }
}
class SsTicketNumberSsCustomerSkCaCity {
    int ss_ticket_number;
    int ss_customer_sk;
    String ca_city;
    SsTicketNumberSsCustomerSkCaCity(int ss_ticket_number, int ss_customer_sk, String ca_city) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.ca_city = ca_city;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsTicketNumberSsCustomerSkCaCity other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.ca_city, other.ca_city);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_customer_sk, ca_city);
    }
    int size() { return 3; }
}
class SsTicketNumberSsCustomerSkBoughtCityAmtProfit {
    int ss_ticket_number;
    int ss_customer_sk;
    String bought_city;
    double amt;
    double profit;
    SsTicketNumberSsCustomerSkBoughtCityAmtProfit(int ss_ticket_number, int ss_customer_sk, String bought_city, double amt, double profit) {
        this.ss_ticket_number = ss_ticket_number;
        this.ss_customer_sk = ss_customer_sk;
        this.bought_city = bought_city;
        this.amt = amt;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsTicketNumberSsCustomerSkBoughtCityAmtProfit other)) return false;
        return Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.ss_customer_sk, other.ss_customer_sk) && Objects.equals(this.bought_city, other.bought_city) && Objects.equals(this.amt, other.amt) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_ticket_number, ss_customer_sk, bought_city, amt, profit);
    }
    int size() { return 5; }
}
class CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit {
    String c_last_name;
    String c_first_name;
    String ca_city;
    String bought_city;
    int ss_ticket_number;
    double amt;
    double profit;
    CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit(String c_last_name, String c_first_name, String ca_city, String bought_city, int ss_ticket_number, double amt, double profit) {
        this.c_last_name = c_last_name;
        this.c_first_name = c_first_name;
        this.ca_city = ca_city;
        this.bought_city = bought_city;
        this.ss_ticket_number = ss_ticket_number;
        this.amt = amt;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit other)) return false;
        return Objects.equals(this.c_last_name, other.c_last_name) && Objects.equals(this.c_first_name, other.c_first_name) && Objects.equals(this.ca_city, other.ca_city) && Objects.equals(this.bought_city, other.bought_city) && Objects.equals(this.ss_ticket_number, other.ss_ticket_number) && Objects.equals(this.amt, other.amt) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, amt, profit);
    }
    int size() { return 7; }
}
public class Q46 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit> store_sales = new ArrayList<>(Arrays.asList(new SsTicketNumberSsCustomerSkSsAddrSkSsHdemoSkSsStoreSkSsSoldDateSkSsCouponAmtSsNetProfit(1, 1, 1, 1, 1, 1, 5.000000, 20.000000)));
    List<DDateSkDDowDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDDowDYear(1, 6, 2020)));
    List<SStoreSkSCity> store = new ArrayList<>(Arrays.asList(new SStoreSkSCity(1, "CityA")));
    List<HdDemoSkHdDepCountHdVehicleCount> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkHdDepCountHdVehicleCount(1, 2, 0)));
    List<CaAddressSkCaCity> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaCity(1, "Portland"), new CaAddressSkCaCity(2, "Seattle")));
    List<CCustomerSkCLastNameCFirstNameCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCLastNameCFirstNameCCurrentAddrSk(1, "Doe", "John", 2)));
    int depcnt = 2;
    int vehcnt = 0;
    int year = 2020;
    List<String> cities = new ArrayList<>(Arrays.asList("CityA"));
    List<SsTicketNumberSsCustomerSkBoughtCityAmtProfit> dn = (new java.util.function.Supplier<List<SsTicketNumberSsCustomerSkBoughtCityAmtProfit>>(){public List<SsTicketNumberSsCustomerSkBoughtCityAmtProfit> get(){
    List<SsTicketNumberSsCustomerSkBoughtCityAmtProfit> res0 = new ArrayList<>();
    Map<SsTicketNumberSsCustomerSkCaCity,List<SsDSHdCa>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
            for (var s : store) {
                if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                for (var hd : household_demographics) {
                    if (!(ss.ss_hdemo_sk == hd.hd_demo_sk)) continue;
                    for (var ca : customer_address) {
                        if (!(ss.ss_addr_sk == ca.ca_address_sk)) continue;
                        if (!((hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) && Arrays.asList(6, 0).contains(d.d_dow) && d.d_year == year && cities.contains(s.s_city))) continue;
                        SsDSHdCa row2 = new SsDSHdCa(ss, d, s, hd, ca);
                        SsTicketNumberSsCustomerSkCaCity key3 = new SsTicketNumberSsCustomerSkCaCity(ss.ss_ticket_number, ss.ss_customer_sk, ca.ca_city);
                        List<SsDSHdCa> bucket4 = groups1.get(key3);
                        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                        bucket4.add(row2);
                    }
                }
            }
        }
    }
    for (Map.Entry<SsTicketNumberSsCustomerSkCaCity,List<SsDSHdCa>> __e : groups1.entrySet()) {
        SsTicketNumberSsCustomerSkCaCity g_key = __e.getKey();
        Group<SsTicketNumberSsCustomerSkCaCity,SsDSHdCa> g = new Group<>(g_key, __e.getValue());
        res0.add(new SsTicketNumberSsCustomerSkBoughtCityAmtProfit(g.key.ss_ticket_number, g.key.ss_customer_sk, g.key.ca_city, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.ss.ss_coupon_amt);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss.ss_net_profit);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit> base = (new java.util.function.Supplier<List<CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit>>(){public List<CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit> get(){
    List<CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit> res7 = new ArrayList<>();
    for (var dnrec : dn) {
        for (var c : customer) {
            if (!(dnrec.ss_customer_sk == c.c_customer_sk)) continue;
            for (var current_addr : customer_address) {
                if (!(c.c_current_addr_sk == current_addr.ca_address_sk)) continue;
                if (!(!Objects.equals(current_addr.ca_city, dnrec.bought_city))) continue;
                res7.add(new CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit(c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number, dnrec.amt, dnrec.profit));
            }
        }
    }
    return res7;
}}).get();
    List<CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit> result = base;
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CLastNameCFirstNameCaCityBoughtCitySsTicketNumberAmtProfit("Doe", "John", "Seattle", "Portland", 1, 5.000000, 20.000000))))) throw new AssertionError("expect failed");
    }
}
