public class Main {
    static class StoreSale {
        int ss_store_sk;
        int ss_sold_date_sk;
        int ss_hdemo_sk;
        int ss_cdemo_sk;
        int ss_addr_sk;
        double ss_sales_price;
        double ss_net_profit;
        int ss_quantity;
        double ss_ext_sales_price;
        double ss_ext_wholesale_cost;
        
        StoreSale(int ss_store_sk, int ss_sold_date_sk, int ss_hdemo_sk, int ss_cdemo_sk, int ss_addr_sk, double ss_sales_price, double ss_net_profit, int ss_quantity, double ss_ext_sales_price, double ss_ext_wholesale_cost) {
            this.ss_store_sk = ss_store_sk;
            this.ss_sold_date_sk = ss_sold_date_sk;
            this.ss_hdemo_sk = ss_hdemo_sk;
            this.ss_cdemo_sk = ss_cdemo_sk;
            this.ss_addr_sk = ss_addr_sk;
            this.ss_sales_price = ss_sales_price;
            this.ss_net_profit = ss_net_profit;
            this.ss_quantity = ss_quantity;
            this.ss_ext_sales_price = ss_ext_sales_price;
            this.ss_ext_wholesale_cost = ss_ext_wholesale_cost;
        }
        
        StoreSale() {}
    }
    
    static class Store {
        int s_store_sk;
        String s_state;
        
        Store(int s_store_sk, String s_state) {
            this.s_store_sk = s_store_sk;
            this.s_state = s_state;
        }
        
        Store() {}
    }
    
    static class CustomerDemographics {
        int cd_demo_sk;
        String cd_marital_status;
        String cd_education_status;
        
        CustomerDemographics(int cd_demo_sk, String cd_marital_status, String cd_education_status) {
            this.cd_demo_sk = cd_demo_sk;
            this.cd_marital_status = cd_marital_status;
            this.cd_education_status = cd_education_status;
        }
        
        CustomerDemographics() {}
    }
    
    static class HouseholdDemographics {
        int hd_demo_sk;
        int hd_dep_count;
        
        HouseholdDemographics(int hd_demo_sk, int hd_dep_count) {
            this.hd_demo_sk = hd_demo_sk;
            this.hd_dep_count = hd_dep_count;
        }
        
        HouseholdDemographics() {}
    }
    
    static class CustomerAddress {
        int ca_address_sk;
        String ca_country;
        String ca_state;
        
        CustomerAddress(int ca_address_sk, String ca_country, String ca_state) {
            this.ca_address_sk = ca_address_sk;
            this.ca_country = ca_country;
            this.ca_state = ca_state;
        }
        
        CustomerAddress() {}
    }
    
    static class DateDim {
        int d_date_sk;
        int d_year;
        
        DateDim(int d_date_sk, int d_year) {
            this.d_date_sk = d_date_sk;
            this.d_year = d_year;
        }
        
        DateDim() {}
    }
    
    static void test_TPCDS_Q13_averages() {
        expect((result == new Object[]{new java.util.HashMap<>(java.util.Map.of("avg_ss_quantity", 10, "avg_ss_ext_sales_price", 100, "avg_ss_ext_wholesale_cost", 50, "sum_ss_ext_wholesale_cost", 50))}));
    }
    
    static Object[] store_sales = new Object[]{new java.util.HashMap<>(java.util.Map.of("ss_store_sk", 1, "ss_sold_date_sk", 1, "ss_hdemo_sk", 1, "ss_cdemo_sk", 1, "ss_addr_sk", 1, "ss_sales_price", 120, "ss_net_profit", 150, "ss_quantity", 10, "ss_ext_sales_price", 100, "ss_ext_wholesale_cost", 50))};
    
    static Object[] store = new Object[]{new java.util.HashMap<>(java.util.Map.of("s_store_sk", 1, "s_state", "CA"))};
    
    static Object[] customer_demographics = new Object[]{new java.util.HashMap<>(java.util.Map.of("cd_demo_sk", 1, "cd_marital_status", "M1", "cd_education_status", "ES1"))};
    
    static Object[] household_demographics = new Object[]{new java.util.HashMap<>(java.util.Map.of("hd_demo_sk", 1, "hd_dep_count", 3))};
    
    static Object[] customer_address = new Object[]{new java.util.HashMap<>(java.util.Map.of("ca_address_sk", 1, "ca_country", "United States", "ca_state", "CA"))};
    
    static Object[] date_dim = new Object[]{new java.util.HashMap<>(java.util.Map.of("d_date_sk", 1, "d_year", 2001))};
    
    static Object[] filtered = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(store_sales);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
            new _JoinSpec(_toList(store), (Object[] a) -> { Object ss = a[0]; Object s = a[1]; return (ss.get("ss_store_sk") == s.get("s_store_sk")); }, false, false),
            new _JoinSpec(_toList(customer_demographics), (Object[] a) -> { Object ss = a[0]; Object s = a[1]; Object cd = a[2]; return (((ss.get("ss_cdemo_sk") == cd.get("cd_demo_sk")) && (cd.get("cd_marital_status") == "M1")) && (cd.get("cd_education_status") == "ES1")); }, false, false),
            new _JoinSpec(_toList(household_demographics), (Object[] a) -> { Object ss = a[0]; Object s = a[1]; Object cd = a[2]; Object hd = a[3]; return ((ss.get("ss_hdemo_sk") == hd.get("hd_demo_sk")) && (hd.get("hd_dep_count") == 3)); }, false, false),
            new _JoinSpec(_toList(customer_address), (Object[] a) -> { Object ss = a[0]; Object s = a[1]; Object cd = a[2]; Object hd = a[3]; Object ca = a[4]; return (((ss.get("ss_addr_sk") == ca.get("ca_address_sk")) && (ca.get("ca_country") == "United States")) && (ca.get("ca_state") == "CA")); }, false, false),
            new _JoinSpec(_toList(date_dim), (Object[] a) -> { Object ss = a[0]; Object s = a[1]; Object cd = a[2]; Object hd = a[3]; Object ca = a[4]; Object d = a[5]; return ((ss.get("ss_sold_date_sk") == d.get("d_date_sk")) && (d.get("d_year") == 2001)); }, false, false)
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object ss = a[0]; Object s = a[1]; Object cd = a[2]; Object hd = a[3]; Object ca = a[4]; Object d = a[5]; return ss; }, null, null, -1, -1));
    }
}).get();
    
    static Object[] result = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(filtered);
        java.util.List<_Group> _grps = _group_by(_src, r -> new java.util.HashMap<>());
        java.util.List<Object> _res = new java.util.ArrayList<>();
        for (_Group g : _grps) {
            _res.add(new java.util.HashMap<>(java.util.Map.of("avg_ss_quantity", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ss_quantity"); }, null, null, -1, -1));
    }
}).get()), "avg_ss_ext_sales_price", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ss_ext_sales_price"); }, null, null, -1, -1));
    }
}).get()), "avg_ss_ext_wholesale_cost", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ss_ext_wholesale_cost"); }, null, null, -1, -1));
    }
}).get()), "sum_ss_ext_wholesale_cost", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.get("ss_ext_wholesale_cost"); }, null, null, -1, -1));
    }
}).get()))));
        }
        return _res;
    }
}).get();
    
    public static void main(String[] args) {
        test_TPCDS_Q13_averages();
        _json(result);
    }
    
    static double _sum(Object v) {
        java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
        double sum = 0;
        for (Object it : items) {
            if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("sum() expects numbers");
        }
        return sum;
    }
    
    static double _avg(Object v) {
        java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
        if (items.isEmpty()) return 0;
        double sum = 0;
        for (Object it : items) {
            if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("avg() expects numbers");
        }
        return sum / items.size();
    }
    
    static void expect(boolean cond) {
        if (!cond) throw new RuntimeException("expect failed");
    }
    
    static void _json(Object v) {
        System.out.println(_toJson(v));
    }
    
    static java.util.List<Object> _toList(Object v) {
        if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
        int n = java.lang.reflect.Array.getLength(v);
        java.util.List<Object> out = new java.util.ArrayList<>(n);
        for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
        return out;
    }
    
    static class _JoinSpec {
        java.util.List<Object> items;
        java.util.function.Function<Object[],Boolean> on;
        boolean left;
        boolean right;
        _JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
            this.items=items; this.on=on; this.left=left; this.right=right;
        }
    }
    
    static class _QueryOpts {
        java.util.function.Function<Object[],Object> selectFn;
        java.util.function.Function<Object[],Boolean> where;
        java.util.function.Function<Object[],Object> sortKey;
        int skip; int take;
        _QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
            this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
        }
    }
    static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
        java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
        for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
        for (_JoinSpec j : joins) {
            java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
            java.util.List<Object> jitems = j.items;
            if (j.right && j.left) {
                boolean[] matched = new boolean[jitems.size()];
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (int ri=0; ri<jitems.size(); ri++) {
                        Object right = jitems.get(ri);
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; matched[ri] = true;
                        java.util.List<Object> row = new java.util.ArrayList<>(left);
                        row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
                for (int ri=0; ri<jitems.size(); ri++) {
                    if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
                }
            } else if (j.right) {
                for (Object right : jitems) {
                    boolean m = false;
                    for (java.util.List<Object> left : items) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
                }
            } else {
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (Object right : jitems) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
            items = joined;
        }
        if (opts.where != null) {
            java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
            for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
            items = filtered;
        }
        if (opts.sortKey != null) {
            class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
            java.util.List<Pair> pairs = new java.util.ArrayList<>();
            for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
            pairs.sort((a,b) -> {
                Object ak=a.key, bk=b.key;
                if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
                if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
                return ak.toString().compareTo(bk.toString());
            });
            for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
        }
        if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
        if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
        java.util.List<Object> res = new java.util.ArrayList<>();
        for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
        return res;
    }
    
    static class _Group {
        Object key;
        java.util.List<Object> Items = new java.util.ArrayList<>();
        _Group(Object k) { key = k; }
        int length() { return Items.size(); }
    }
    
    static java.util.List<_Group> _group_by(java.util.List<Object> src, java.util.function.Function<Object,Object> keyfn) {
        java.util.Map<String,_Group> groups = new java.util.LinkedHashMap<>();
        for (Object it : src) {
            Object key = keyfn.apply(it);
            String ks = String.valueOf(key);
            _Group g = groups.get(ks);
            if (g == null) { g = new _Group(key); groups.put(ks, g); }
            g.Items.add(it);
        }
        return new java.util.ArrayList<>(groups.values());
    }
}
