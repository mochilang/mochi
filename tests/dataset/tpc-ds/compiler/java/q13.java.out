// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:59Z
// q13.mochi
import java.util.*;

class HouseholdDemographics {
    int hd_demo_sk;
    int hd_dep_count;
    HouseholdDemographics(int hd_demo_sk, int hd_dep_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_dep_count = hd_dep_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HouseholdDemographics other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_dep_count, other.hd_dep_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_dep_count);
    }
}
class CustomerAddress {
    int ca_address_sk;
    String ca_country;
    String ca_state;
    CustomerAddress(int ca_address_sk, String ca_country, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_country = ca_country;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAddress other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_country, other.ca_country) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_country, ca_state);
    }
}
class DateDim {
    int d_date_sk;
    int d_year;
    DateDim(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
}
class StoreSale {
    int ss_store_sk;
    int ss_sold_date_sk;
    int ss_hdemo_sk;
    int ss_cdemo_sk;
    int ss_addr_sk;
    double ss_sales_price;
    double ss_net_profit;
    int ss_quantity;
    double ss_ext_sales_price;
    double ss_ext_wholesale_cost;
    StoreSale(int ss_store_sk, int ss_sold_date_sk, int ss_hdemo_sk, int ss_cdemo_sk, int ss_addr_sk, double ss_sales_price, double ss_net_profit, int ss_quantity, double ss_ext_sales_price, double ss_ext_wholesale_cost) {
        this.ss_store_sk = ss_store_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_hdemo_sk = ss_hdemo_sk;
        this.ss_cdemo_sk = ss_cdemo_sk;
        this.ss_addr_sk = ss_addr_sk;
        this.ss_sales_price = ss_sales_price;
        this.ss_net_profit = ss_net_profit;
        this.ss_quantity = ss_quantity;
        this.ss_ext_sales_price = ss_ext_sales_price;
        this.ss_ext_wholesale_cost = ss_ext_wholesale_cost;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_hdemo_sk, other.ss_hdemo_sk) && Objects.equals(this.ss_cdemo_sk, other.ss_cdemo_sk) && Objects.equals(this.ss_addr_sk, other.ss_addr_sk) && Objects.equals(this.ss_sales_price, other.ss_sales_price) && Objects.equals(this.ss_net_profit, other.ss_net_profit) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price) && Objects.equals(this.ss_ext_wholesale_cost, other.ss_ext_wholesale_cost);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_store_sk, ss_sold_date_sk, ss_hdemo_sk, ss_cdemo_sk, ss_addr_sk, ss_sales_price, ss_net_profit, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost);
    }
}
class Store {
    int s_store_sk;
    String s_state;
    Store(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
}
class CustomerDemographics {
    int cd_demo_sk;
    String cd_marital_status;
    String cd_education_status;
    CustomerDemographics(int cd_demo_sk, String cd_marital_status, String cd_education_status) {
        this.cd_demo_sk = cd_demo_sk;
        this.cd_marital_status = cd_marital_status;
        this.cd_education_status = cd_education_status;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerDemographics other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk) && Objects.equals(this.cd_marital_status, other.cd_marital_status) && Objects.equals(this.cd_education_status, other.cd_education_status);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk, cd_marital_status, cd_education_status);
    }
}
class SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost {
    int ss_store_sk;
    int ss_sold_date_sk;
    int ss_hdemo_sk;
    int ss_cdemo_sk;
    int ss_addr_sk;
    double ss_sales_price;
    double ss_net_profit;
    int ss_quantity;
    double ss_ext_sales_price;
    double ss_ext_wholesale_cost;
    SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost(int ss_store_sk, int ss_sold_date_sk, int ss_hdemo_sk, int ss_cdemo_sk, int ss_addr_sk, double ss_sales_price, double ss_net_profit, int ss_quantity, double ss_ext_sales_price, double ss_ext_wholesale_cost) {
        this.ss_store_sk = ss_store_sk;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_hdemo_sk = ss_hdemo_sk;
        this.ss_cdemo_sk = ss_cdemo_sk;
        this.ss_addr_sk = ss_addr_sk;
        this.ss_sales_price = ss_sales_price;
        this.ss_net_profit = ss_net_profit;
        this.ss_quantity = ss_quantity;
        this.ss_ext_sales_price = ss_ext_sales_price;
        this.ss_ext_wholesale_cost = ss_ext_wholesale_cost;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost other)) return false;
        return Objects.equals(this.ss_store_sk, other.ss_store_sk) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_hdemo_sk, other.ss_hdemo_sk) && Objects.equals(this.ss_cdemo_sk, other.ss_cdemo_sk) && Objects.equals(this.ss_addr_sk, other.ss_addr_sk) && Objects.equals(this.ss_sales_price, other.ss_sales_price) && Objects.equals(this.ss_net_profit, other.ss_net_profit) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price) && Objects.equals(this.ss_ext_wholesale_cost, other.ss_ext_wholesale_cost);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_store_sk, ss_sold_date_sk, ss_hdemo_sk, ss_cdemo_sk, ss_addr_sk, ss_sales_price, ss_net_profit, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost);
    }
    int size() { return 10; }
}
class SStoreSkSState {
    int s_store_sk;
    String s_state;
    SStoreSkSState(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSState other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
    int size() { return 2; }
}
class CdDemoSkCdMaritalStatusCdEducationStatus {
    int cd_demo_sk;
    String cd_marital_status;
    String cd_education_status;
    CdDemoSkCdMaritalStatusCdEducationStatus(int cd_demo_sk, String cd_marital_status, String cd_education_status) {
        this.cd_demo_sk = cd_demo_sk;
        this.cd_marital_status = cd_marital_status;
        this.cd_education_status = cd_education_status;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CdDemoSkCdMaritalStatusCdEducationStatus other)) return false;
        return Objects.equals(this.cd_demo_sk, other.cd_demo_sk) && Objects.equals(this.cd_marital_status, other.cd_marital_status) && Objects.equals(this.cd_education_status, other.cd_education_status);
    }
    @Override public int hashCode() {
        return Objects.hash(cd_demo_sk, cd_marital_status, cd_education_status);
    }
    int size() { return 3; }
}
class HdDemoSkHdDepCount {
    int hd_demo_sk;
    int hd_dep_count;
    HdDemoSkHdDepCount(int hd_demo_sk, int hd_dep_count) {
        this.hd_demo_sk = hd_demo_sk;
        this.hd_dep_count = hd_dep_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof HdDemoSkHdDepCount other)) return false;
        return Objects.equals(this.hd_demo_sk, other.hd_demo_sk) && Objects.equals(this.hd_dep_count, other.hd_dep_count);
    }
    @Override public int hashCode() {
        return Objects.hash(hd_demo_sk, hd_dep_count);
    }
    int size() { return 2; }
}
class CaAddressSkCaCountryCaState {
    int ca_address_sk;
    String ca_country;
    String ca_state;
    CaAddressSkCaCountryCaState(int ca_address_sk, String ca_country, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_country = ca_country;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaCountryCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_country, other.ca_country) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_country, ca_state);
    }
    int size() { return 3; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost {
    double avg_ss_quantity;
    double avg_ss_ext_sales_price;
    double avg_ss_ext_wholesale_cost;
    double sum_ss_ext_wholesale_cost;
    AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost(double avg_ss_quantity, double avg_ss_ext_sales_price, double avg_ss_ext_wholesale_cost, double sum_ss_ext_wholesale_cost) {
        this.avg_ss_quantity = avg_ss_quantity;
        this.avg_ss_ext_sales_price = avg_ss_ext_sales_price;
        this.avg_ss_ext_wholesale_cost = avg_ss_ext_wholesale_cost;
        this.sum_ss_ext_wholesale_cost = sum_ss_ext_wholesale_cost;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost other)) return false;
        return Objects.equals(this.avg_ss_quantity, other.avg_ss_quantity) && Objects.equals(this.avg_ss_ext_sales_price, other.avg_ss_ext_sales_price) && Objects.equals(this.avg_ss_ext_wholesale_cost, other.avg_ss_ext_wholesale_cost) && Objects.equals(this.sum_ss_ext_wholesale_cost, other.sum_ss_ext_wholesale_cost);
    }
    @Override public int hashCode() {
        return Objects.hash(avg_ss_quantity, avg_ss_ext_sales_price, avg_ss_ext_wholesale_cost, sum_ss_ext_wholesale_cost);
    }
    int size() { return 4; }
}
public class Q13 {
    static <K,V> Map.Entry<K,V> entry(K k, V v) { return new AbstractMap.SimpleEntry<>(k, v); }
    static <K,V> LinkedHashMap<K,V> mapOfEntries(Map.Entry<? extends K,? extends V>... entries) {
        LinkedHashMap<K,V> m = new LinkedHashMap<>();
        for (var e : entries) m.put(e.getKey(), e.getValue());
        return m;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> store_sales = new ArrayList<>(Arrays.asList(new SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost(1, 1, 1, 1, 1, 120.000000, 150.000000, 10, 100.000000, 50.000000)));
    List<SStoreSkSState> store = new ArrayList<>(Arrays.asList(new SStoreSkSState(1, "CA")));
    List<CdDemoSkCdMaritalStatusCdEducationStatus> customer_demographics = new ArrayList<>(Arrays.asList(new CdDemoSkCdMaritalStatusCdEducationStatus(1, "M1", "ES1")));
    List<HdDemoSkHdDepCount> household_demographics = new ArrayList<>(Arrays.asList(new HdDemoSkHdDepCount(1, 3)));
    List<CaAddressSkCaCountryCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaCountryCaState(1, "United States", "CA")));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 2001)));
    List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> filtered = (new java.util.function.Supplier<List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost>>(){public List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> get(){
    List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        for (var s : store) {
            if (!(ss.ss_store_sk == s.s_store_sk)) continue;
            for (var cd : customer_demographics) {
                if (!(ss.ss_cdemo_sk == cd.cd_demo_sk && Objects.equals(cd.cd_marital_status, "M1") && Objects.equals(cd.cd_education_status, "ES1"))) continue;
                for (var hd : household_demographics) {
                    if (!(ss.ss_hdemo_sk == hd.hd_demo_sk && hd.hd_dep_count == 3)) continue;
                    for (var ca : customer_address) {
                        if (!(ss.ss_addr_sk == ca.ca_address_sk && Objects.equals(ca.ca_country, "United States") && Objects.equals(ca.ca_state, "CA"))) continue;
                        for (var d : date_dim) {
                            if (!(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2001)) continue;
                            res0.add(ss);
                        }
                    }
                }
            }
        }
    }
    return res0;
}}).get();
    List<AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost> result = (new java.util.function.Supplier<List<AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost>>(){public List<AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost> get(){
    List<AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost> res1 = new ArrayList<>();
    Map<Map<Object,Object>,List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost>> groups2 = new LinkedHashMap<>();
    for (var r : filtered) {
        var row3 = r;
        Map<Object,Object> key4 = new LinkedHashMap<>();
        List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> bucket5 = groups2.get(key4);
        if (bucket5 == null) { bucket5 = new ArrayList<>(); groups2.put(key4, bucket5); }
        bucket5.add(row3);
    }
    for (Map.Entry<Map<Object,Object>,List<SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost>> __e : groups2.entrySet()) {
        Map<Object,Object> g_key = __e.getKey();
        Group<Map<Object,Object>,SsStoreSkSsSoldDateSkSsHdemoSkSsCdemoSkSsAddrSkSsSalesPriceSsNetProfitSsQuantitySsExtSalesPriceSsExtWholesaleCost> g = new Group<>(g_key, __e.getValue());
        res1.add(new AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss_quantity);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add(x.ss_ext_sales_price);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add(x.ss_ext_wholesale_cost);
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res9 = new ArrayList<>();
    for (var x : g) {
        res9.add(x.ss_ext_wholesale_cost);
    }
    return res9;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res1;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new AvgSsQuantityAvgSsExtSalesPriceAvgSsExtWholesaleCostSumSsExtWholesaleCost(10.000000, 100.000000, 50.000000, 50.000000))))) throw new AssertionError("expect failed");
    }
}
