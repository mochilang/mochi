// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:33Z
// q54.mochi
import java.util.*;

class CustomerSoldDatePrice {
    int customer;
    int sold_date;
    double price;
    CustomerSoldDatePrice(int customer, int sold_date, double price) {
        this.customer = customer;
        this.sold_date = sold_date;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerSoldDatePrice other)) return false;
        return Objects.equals(this.customer, other.customer) && Objects.equals(this.sold_date, other.sold_date) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(customer, sold_date, price);
    }
    int size() { return 3; }
}
class DDateSkDMonthSeq {
    int d_date_sk;
    int d_month_seq;
    DDateSkDMonthSeq(int d_date_sk, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDMonthSeq other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_month_seq);
    }
    int size() { return 2; }
}
class CCustomerSkCCurrentAddrSk {
    int c_customer_sk;
    int c_current_addr_sk;
    CCustomerSkCCurrentAddrSk(int c_customer_sk, int c_current_addr_sk) {
        this.c_customer_sk = c_customer_sk;
        this.c_current_addr_sk = c_current_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCurrentAddrSk other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_current_addr_sk, other.c_current_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_current_addr_sk);
    }
    int size() { return 2; }
}
class CaAddressSkCaCountyCaState {
    int ca_address_sk;
    String ca_county;
    String ca_state;
    CaAddressSkCaCountyCaState(int ca_address_sk, String ca_county, String ca_state) {
        this.ca_address_sk = ca_address_sk;
        this.ca_county = ca_county;
        this.ca_state = ca_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaCountyCaState other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_county, other.ca_county) && Objects.equals(this.ca_state, other.ca_state);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_county, ca_state);
    }
    int size() { return 3; }
}
class SStoreSkSCountySState {
    int s_store_sk;
    String s_county;
    String s_state;
    SStoreSkSCountySState(int s_store_sk, String s_county, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_county = s_county;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSCountySState other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_county, other.s_county) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_county, s_state);
    }
    int size() { return 3; }
}
class CustomerAmt {
    int customer;
    double amt;
    CustomerAmt(int customer, double amt) {
        this.customer = customer;
        this.amt = amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerAmt other)) return false;
        return Objects.equals(this.customer, other.customer) && Objects.equals(this.amt, other.amt);
    }
    @Override public int hashCode() {
        return Objects.hash(customer, amt);
    }
    int size() { return 2; }
}
class CustomerRevenue {
    int customer;
    double revenue;
    CustomerRevenue(int customer, double revenue) {
        this.customer = customer;
        this.revenue = revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerRevenue other)) return false;
        return Objects.equals(this.customer, other.customer) && Objects.equals(this.revenue, other.revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(customer, revenue);
    }
    int size() { return 2; }
}
class Seg {
    int seg;
    Seg(int seg) {
        this.seg = seg;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Seg other)) return false;
        return Objects.equals(this.seg, other.seg);
    }
    @Override public int hashCode() {
        return Objects.hash(seg);
    }
    int size() { return 1; }
}
class SegmentNumCustomersSegmentBase {
    int segment;
    int num_customers;
    int segment_base;
    SegmentNumCustomersSegmentBase(int segment, int num_customers, int segment_base) {
        this.segment = segment;
        this.num_customers = num_customers;
        this.segment_base = segment_base;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SegmentNumCustomersSegmentBase other)) return false;
        return Objects.equals(this.segment, other.segment) && Objects.equals(this.num_customers, other.num_customers) && Objects.equals(this.segment_base, other.segment_base);
    }
    @Override public int hashCode() {
        return Objects.hash(segment, num_customers, segment_base);
    }
    int size() { return 3; }
}
public class Q54 {
    static int int(double x) {
        return Integer.parseInt(x);
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<CustomerSoldDatePrice> store_sales = new ArrayList<>(Arrays.asList(new CustomerSoldDatePrice(1, 2, 60.000000), new CustomerSoldDatePrice(2, 2, 40.000000)));
    List<DDateSkDMonthSeq> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDMonthSeq(2, 5)));
    List<CCustomerSkCCurrentAddrSk> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCurrentAddrSk(1, 1), new CCustomerSkCCurrentAddrSk(2, 1)));
    List<CaAddressSkCaCountyCaState> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaCountyCaState(1, "X", "Y")));
    List<SStoreSkSCountySState> store = new ArrayList<>(Arrays.asList(new SStoreSkSCountySState(1, "X", "Y")));
    List<CustomerAmt> revenue = (new java.util.function.Supplier<List<CustomerAmt>>(){public List<CustomerAmt> get(){
    List<CustomerAmt> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.sold_date == d.d_date_sk)) continue;
            for (var c : customer) {
                if (!(ss.customer == c.c_customer_sk)) continue;
                for (var ca : customer_address) {
                    if (!(c.c_current_addr_sk == ca.ca_address_sk && Objects.equals(ca.ca_county, "X") && Objects.equals(ca.ca_state, "Y"))) continue;
                    for (var s : store) {
                        if (!(1 == s.s_store_sk && Objects.equals(ca.ca_county, s.s_county) && Objects.equals(ca.ca_state, s.s_state))) continue;
                        res0.add(new CustomerAmt(c.c_customer_sk, ss.price));
                    }
                }
            }
        }
    }
    return res0;
}}).get();
    List<CustomerRevenue> by_customer = (new java.util.function.Supplier<List<CustomerRevenue>>(){public List<CustomerRevenue> get(){
    List<CustomerRevenue> res1 = new ArrayList<>();
    Map<Integer,List<CustomerAmt>> groups2 = new LinkedHashMap<>();
    for (var r : revenue) {
        var row3 = r;
        int key4 = r.customer;
        List<CustomerAmt> bucket5 = groups2.get(key4);
        if (bucket5 == null) { bucket5 = new ArrayList<>(); groups2.put(key4, bucket5); }
        bucket5.add(row3);
    }
    for (Map.Entry<Integer,List<CustomerAmt>> __e : groups2.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,CustomerAmt> g = new Group<>(g_key, __e.getValue());
        res1.add(new CustomerRevenue(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.amt);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res1;
}}).get();
    List<SegmentNumCustomersSegmentBase> segments = (new java.util.function.Supplier<List<SegmentNumCustomersSegmentBase>>(){public List<SegmentNumCustomersSegmentBase> get(){
    List<SegmentNumCustomersSegmentBase> res7 = new ArrayList<>();
    Map<Seg,List<CustomerRevenue>> groups8 = new LinkedHashMap<>();
    for (var r : by_customer) {
        var row9 = r;
        Seg key10 = new Seg(int(r.revenue / 50));
        List<CustomerRevenue> bucket11 = groups8.get(key10);
        if (bucket11 == null) { bucket11 = new ArrayList<>(); groups8.put(key10, bucket11); }
        bucket11.add(row9);
    }
    for (Map.Entry<Seg,List<CustomerRevenue>> __e : groups8.entrySet()) {
        Seg g_key = __e.getKey();
        Group<Seg,CustomerRevenue> g = new Group<>(g_key, __e.getValue());
        res7.add(new SegmentNumCustomersSegmentBase(g.key.seg, g.size(), g.key.seg * 50));
    }
    return res7;
}}).get();
    List<SegmentNumCustomersSegmentBase> result = segments;
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SegmentNumCustomersSegmentBase(1, 1, 50), new SegmentNumCustomersSegmentBase(0, 1, 0))))) throw new AssertionError("expect failed");
    }
}
