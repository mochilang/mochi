public class Main {
    static class CatalogSale {
        int cs_ship_date_sk;
        int cs_sold_date_sk;
        int cs_warehouse_sk;
        int cs_ship_mode_sk;
        int cs_call_center_sk;
        
        CatalogSale(int cs_ship_date_sk, int cs_sold_date_sk, int cs_warehouse_sk, int cs_ship_mode_sk, int cs_call_center_sk) {
            this.cs_ship_date_sk = cs_ship_date_sk;
            this.cs_sold_date_sk = cs_sold_date_sk;
            this.cs_warehouse_sk = cs_warehouse_sk;
            this.cs_ship_mode_sk = cs_ship_mode_sk;
            this.cs_call_center_sk = cs_call_center_sk;
        }
        
        CatalogSale() {}
    }
    
    static class Warehouse {
        int w_warehouse_sk;
        String w_warehouse_name;
        
        Warehouse(int w_warehouse_sk, String w_warehouse_name) {
            this.w_warehouse_sk = w_warehouse_sk;
            this.w_warehouse_name = w_warehouse_name;
        }
        
        Warehouse() {}
    }
    
    static class ShipMode {
        int sm_ship_mode_sk;
        String sm_type;
        
        ShipMode(int sm_ship_mode_sk, String sm_type) {
            this.sm_ship_mode_sk = sm_ship_mode_sk;
            this.sm_type = sm_type;
        }
        
        ShipMode() {}
    }
    
    static class CallCenter {
        int cc_call_center_sk;
        String cc_name;
        
        CallCenter(int cc_call_center_sk, String cc_name) {
            this.cc_call_center_sk = cc_call_center_sk;
            this.cc_name = cc_name;
        }
        
        CallCenter() {}
    }
    
    static void test_TPCDS_Q99_buckets() {
        expect((grouped == new Object[]{new java.util.HashMap<>(java.util.Map.of("warehouse", "Warehouse1", "sm_type", "EXP", "cc_name", "CC1", "d30", 1, "d60", 1, "d90", 1, "d120", 1, "dmore", 1))}));
    }
    
    static Object[] catalog_sales = new Object[]{new java.util.HashMap<>(java.util.Map.of("cs_ship_date_sk", 31, "cs_sold_date_sk", 1, "cs_warehouse_sk", 1, "cs_ship_mode_sk", 1, "cs_call_center_sk", 1)), new java.util.HashMap<>(java.util.Map.of("cs_ship_date_sk", 51, "cs_sold_date_sk", 1, "cs_warehouse_sk", 1, "cs_ship_mode_sk", 1, "cs_call_center_sk", 1)), new java.util.HashMap<>(java.util.Map.of("cs_ship_date_sk", 71, "cs_sold_date_sk", 1, "cs_warehouse_sk", 1, "cs_ship_mode_sk", 1, "cs_call_center_sk", 1)), new java.util.HashMap<>(java.util.Map.of("cs_ship_date_sk", 101, "cs_sold_date_sk", 1, "cs_warehouse_sk", 1, "cs_ship_mode_sk", 1, "cs_call_center_sk", 1)), new java.util.HashMap<>(java.util.Map.of("cs_ship_date_sk", 131, "cs_sold_date_sk", 1, "cs_warehouse_sk", 1, "cs_ship_mode_sk", 1, "cs_call_center_sk", 1))};
    
    static Object[] warehouse = new Object[]{new java.util.HashMap<>(java.util.Map.of("w_warehouse_sk", 1, "w_warehouse_name", "Warehouse1"))};
    
    static Object[] ship_mode = new Object[]{new java.util.HashMap<>(java.util.Map.of("sm_ship_mode_sk", 1, "sm_type", "EXP"))};
    
    static Object[] call_center = new Object[]{new java.util.HashMap<>(java.util.Map.of("cc_call_center_sk", 1, "cc_name", "CC1"))};
    
    static Object[] grouped = (new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(catalog_sales);
        java.util.List<_JoinSpec> _joins = java.util.List.of(
            new _JoinSpec(_toList(warehouse), (Object[] a) -> { Object cs = a[0]; Object w = a[1]; return (cs.get("cs_warehouse_sk") == w.get("w_warehouse_sk")); }, false, false),
            new _JoinSpec(_toList(ship_mode), (Object[] a) -> { Object cs = a[0]; Object w = a[1]; Object sm = a[2]; return (cs.get("cs_ship_mode_sk") == sm.get("sm_ship_mode_sk")); }, false, false),
            new _JoinSpec(_toList(call_center), (Object[] a) -> { Object cs = a[0]; Object w = a[1]; Object sm = a[2]; Object cc = a[3]; return (cs.get("cs_call_center_sk") == cc.get("cc_call_center_sk")); }, false, false)
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object cs = a[0]; Object w = a[1]; Object sm = a[2]; Object cc = a[3]; return new java.util.HashMap<>(java.util.Map.of("warehouse", g.get("key").warehouse, "sm_type", g.get("key").sm_type, "cc_name", g.get("key").cc_name, "d30", _count((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        _src = _filter(_src, (Object x) -> { return ((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) <= 30); });
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x; }, null, null, -1, -1));
    }
}).get()), "d60", _count((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        _src = _filter(_src, (Object x) -> { return (((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) > 30) && ((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) <= 60)); });
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x; }, null, null, -1, -1));
    }
}).get()), "d90", _count((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        _src = _filter(_src, (Object x) -> { return (((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) > 60) && ((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) <= 90)); });
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x; }, null, null, -1, -1));
    }
}).get()), "d120", _count((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        _src = _filter(_src, (Object x) -> { return (((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) > 90) && ((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) <= 120)); });
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x; }, null, null, -1, -1));
    }
}).get()), "dmore", _count((new java.util.function.Supplier<java.util.List<Object>>() {
    public java.util.List<Object> get() {
        java.util.List<Object> _src = _toList(g);
        _src = _filter(_src, (Object x) -> { return ((x.get("cs_ship_date_sk") - x.get("cs_sold_date_sk")) > 120); });
        java.util.List<_JoinSpec> _joins = java.util.List.of(
        );
        return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x; }, null, null, -1, -1));
    }
}).get()))); }, null, null, -1, -1));
    }
}).get();
    
    public static void main(String[] args) {
        test_TPCDS_Q99_buckets();
        _json(grouped);
    }
    
    static int _count(Object v) {
        if (v instanceof _Group) return ((_Group)v).length();
        java.util.List<Object> items = _toList(v);
        return items.size();
    }
    
    static void expect(boolean cond) {
        if (!cond) throw new RuntimeException("expect failed");
    }
    
    static void _json(Object v) {
        System.out.println(_toJson(v));
    }
    
    static java.util.List<Object> _toList(Object v) {
        if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
        int n = java.lang.reflect.Array.getLength(v);
        java.util.List<Object> out = new java.util.ArrayList<>(n);
        for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
        return out;
    }
    
    static java.util.List<Object> _filter(java.util.List<Object> src, java.util.function.Function<Object,Boolean> pred) {
        java.util.List<Object> out = new java.util.ArrayList<>();
        for (Object it : src) { if (pred.apply(it)) out.add(it); }
        return out;
    }
    
    static class _JoinSpec {
        java.util.List<Object> items;
        java.util.function.Function<Object[],Boolean> on;
        boolean left;
        boolean right;
        _JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
            this.items=items; this.on=on; this.left=left; this.right=right;
        }
    }
    
    static class _QueryOpts {
        java.util.function.Function<Object[],Object> selectFn;
        java.util.function.Function<Object[],Boolean> where;
        java.util.function.Function<Object[],Object> sortKey;
        int skip; int take;
        _QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
            this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
        }
    }
    static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
        java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
        for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
        for (_JoinSpec j : joins) {
            java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
            java.util.List<Object> jitems = j.items;
            if (j.right && j.left) {
                boolean[] matched = new boolean[jitems.size()];
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (int ri=0; ri<jitems.size(); ri++) {
                        Object right = jitems.get(ri);
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; matched[ri] = true;
                        java.util.List<Object> row = new java.util.ArrayList<>(left);
                        row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
                for (int ri=0; ri<jitems.size(); ri++) {
                    if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
                }
            } else if (j.right) {
                for (Object right : jitems) {
                    boolean m = false;
                    for (java.util.List<Object> left : items) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
                }
            } else {
                for (java.util.List<Object> left : items) {
                    boolean m = false;
                    for (Object right : jitems) {
                        boolean keep = true;
                        if (j.on != null) {
                            Object[] args = new Object[left.size()+1];
                            for (int i=0;i<left.size();i++) args[i]=left.get(i);
                            args[left.size()] = right;
                            keep = j.on.apply(args);
                        }
                        if (!keep) continue;
                        m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
                    }
                    if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
                }
            items = joined;
        }
        if (opts.where != null) {
            java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
            for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
            items = filtered;
        }
        if (opts.sortKey != null) {
            class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
            java.util.List<Pair> pairs = new java.util.ArrayList<>();
            for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
            pairs.sort((a,b) -> {
                Object ak=a.key, bk=b.key;
                if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
                if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
                return ak.toString().compareTo(bk.toString());
            });
            for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
        }
        if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
        if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
        java.util.List<Object> res = new java.util.ArrayList<>();
        for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
        return res;
    }
}
