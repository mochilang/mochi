// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:07Z
// q22.mochi
import java.util.*;

class DateDim {
    int d_date_sk;
    int d_month_seq;
    DateDim(int d_date_sk, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_month_seq);
    }
}
class Item {
    int i_item_sk;
    String i_product_name;
    String i_brand;
    String i_class;
    String i_category;
    Item(int i_item_sk, String i_product_name, String i_brand, String i_class, String i_category) {
        this.i_item_sk = i_item_sk;
        this.i_product_name = i_product_name;
        this.i_brand = i_brand;
        this.i_class = i_class;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_product_name, other.i_product_name) && Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_product_name, i_brand, i_class, i_category);
    }
}
class Inventory {
    int inv_item_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    Inventory(int inv_item_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Inventory other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_date_sk, inv_quantity_on_hand);
    }
}
class InvItemSkInvDateSkInvQuantityOnHand {
    int inv_item_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
    InvItemSkInvDateSkInvQuantityOnHand(int inv_item_sk, int inv_date_sk, int inv_quantity_on_hand) {
        this.inv_item_sk = inv_item_sk;
        this.inv_date_sk = inv_date_sk;
        this.inv_quantity_on_hand = inv_quantity_on_hand;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvItemSkInvDateSkInvQuantityOnHand other)) return false;
        return Objects.equals(this.inv_item_sk, other.inv_item_sk) && Objects.equals(this.inv_date_sk, other.inv_date_sk) && Objects.equals(this.inv_quantity_on_hand, other.inv_quantity_on_hand);
    }
    @Override public int hashCode() {
        return Objects.hash(inv_item_sk, inv_date_sk, inv_quantity_on_hand);
    }
    int size() { return 3; }
}
class DDateSkDMonthSeq {
    int d_date_sk;
    int d_month_seq;
    DDateSkDMonthSeq(int d_date_sk, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDMonthSeq other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_month_seq);
    }
    int size() { return 2; }
}
class IItemSkIProductNameIBrandIClassICategory {
    int i_item_sk;
    String i_product_name;
    String i_brand;
    String i_class;
    String i_category;
    IItemSkIProductNameIBrandIClassICategory(int i_item_sk, String i_product_name, String i_brand, String i_class, String i_category) {
        this.i_item_sk = i_item_sk;
        this.i_product_name = i_product_name;
        this.i_brand = i_brand;
        this.i_class = i_class;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIProductNameIBrandIClassICategory other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_product_name, other.i_product_name) && Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_product_name, i_brand, i_class, i_category);
    }
    int size() { return 5; }
}
class InvDI {
    InvItemSkInvDateSkInvQuantityOnHand inv;
    DDateSkDMonthSeq d;
    IItemSkIProductNameIBrandIClassICategory i;
    InvDI(InvItemSkInvDateSkInvQuantityOnHand inv, DDateSkDMonthSeq d, IItemSkIProductNameIBrandIClassICategory i) {
        this.inv = inv;
        this.d = d;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InvDI other)) return false;
        return Objects.equals(this.inv, other.inv) && Objects.equals(this.d, other.d) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(inv, d, i);
    }
    int size() { return 3; }
}
class ProductNameBrandClassCategory {
    String product_name;
    String brand;
    String class;
    String category;
    ProductNameBrandClassCategory(String product_name, String brand, String class, String category) {
        this.product_name = product_name;
        this.brand = brand;
        this.class = class;
        this.category = category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProductNameBrandClassCategory other)) return false;
        return Objects.equals(this.product_name, other.product_name) && Objects.equals(this.brand, other.brand) && Objects.equals(this.class, other.class) && Objects.equals(this.category, other.category);
    }
    @Override public int hashCode() {
        return Objects.hash(product_name, brand, class, category);
    }
    int size() { return 4; }
}
class IProductNameIBrandIClassICategoryQoh {
    String i_product_name;
    String i_brand;
    String i_class;
    String i_category;
    double qoh;
    IProductNameIBrandIClassICategoryQoh(String i_product_name, String i_brand, String i_class, String i_category, double qoh) {
        this.i_product_name = i_product_name;
        this.i_brand = i_brand;
        this.i_class = i_class;
        this.i_category = i_category;
        this.qoh = qoh;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IProductNameIBrandIClassICategoryQoh other)) return false;
        return Objects.equals(this.i_product_name, other.i_product_name) && Objects.equals(this.i_brand, other.i_brand) && Objects.equals(this.i_class, other.i_class) && Objects.equals(this.i_category, other.i_category) && Objects.equals(this.qoh, other.qoh);
    }
    @Override public int hashCode() {
        return Objects.hash(i_product_name, i_brand, i_class, i_category, qoh);
    }
    int size() { return 5; }
}
public class Q22 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<InvItemSkInvDateSkInvQuantityOnHand> inventory = new ArrayList<>(Arrays.asList(new InvItemSkInvDateSkInvQuantityOnHand(1, 1, 10), new InvItemSkInvDateSkInvQuantityOnHand(1, 2, 20), new InvItemSkInvDateSkInvQuantityOnHand(1, 3, 10), new InvItemSkInvDateSkInvQuantityOnHand(1, 4, 20), new InvItemSkInvDateSkInvQuantityOnHand(2, 1, 50)));
    List<DDateSkDMonthSeq> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDMonthSeq(1, 0), new DDateSkDMonthSeq(2, 1), new DDateSkDMonthSeq(3, 2), new DDateSkDMonthSeq(4, 3)));
    List<IItemSkIProductNameIBrandIClassICategory> item = new ArrayList<>(Arrays.asList(new IItemSkIProductNameIBrandIClassICategory(1, "Prod1", "Brand1", "Class1", "Cat1"), new IItemSkIProductNameIBrandIClassICategory(2, "Prod2", "Brand2", "Class2", "Cat2")));
    List<IProductNameIBrandIClassICategoryQoh> qoh = (new java.util.function.Supplier<List<IProductNameIBrandIClassICategoryQoh>>(){public List<IProductNameIBrandIClassICategoryQoh> get(){
    List<IProductNameIBrandIClassICategoryQoh> res0 = new ArrayList<>();
    Map<ProductNameBrandClassCategory,List<InvDI>> groups1 = new LinkedHashMap<>();
    for (var inv : inventory) {
        for (var d : date_dim) {
            if (!(inv.inv_date_sk == d.d_date_sk)) continue;
            for (var i : item) {
                if (!(inv.inv_item_sk == i.i_item_sk)) continue;
                if (!(d.d_month_seq >= 0 && d.d_month_seq <= 11)) continue;
                InvDI row2 = new InvDI(inv, d, i);
                ProductNameBrandClassCategory key3 = new ProductNameBrandClassCategory(i.i_product_name, i.i_brand, i.i_class, i.i_category);
                List<InvDI> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<ProductNameBrandClassCategory,List<InvDI>> __e : groups1.entrySet()) {
        ProductNameBrandClassCategory g_key = __e.getKey();
        Group<ProductNameBrandClassCategory,InvDI> g = new Group<>(g_key, __e.getValue());
        res0.add(new IProductNameIBrandIClassICategoryQoh(g.key.product_name, g.key.brand, g.key.class, g.key.category, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.inv_quantity_on_hand);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res0;
}}).get();
    json(qoh);
    if (!(Objects.equals(qoh, Arrays.asList(new IProductNameIBrandIClassICategoryQoh("Prod1", "Brand1", "Class1", "Cat1", 15.000000), new IProductNameIBrandIClassICategoryQoh("Prod2", "Brand2", "Class2", "Cat2", 50.000000))))) throw new AssertionError("expect failed");
    }
}
