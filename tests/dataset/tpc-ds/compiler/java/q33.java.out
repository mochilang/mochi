// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:16Z
// q33.mochi
import java.util.*;

class IItemSkIManufactIdICategory {
    int i_item_sk;
    int i_manufact_id;
    String i_category;
    IItemSkIManufactIdICategory(int i_item_sk, int i_manufact_id, String i_category) {
        this.i_item_sk = i_item_sk;
        this.i_manufact_id = i_manufact_id;
        this.i_category = i_category;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIManufactIdICategory other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.i_category, other.i_category);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_manufact_id, i_category);
    }
    int size() { return 3; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class CaAddressSkCaGmtOffset {
    int ca_address_sk;
    int ca_gmt_offset;
    CaAddressSkCaGmtOffset(int ca_address_sk, int ca_gmt_offset) {
        this.ca_address_sk = ca_address_sk;
        this.ca_gmt_offset = ca_gmt_offset;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CaAddressSkCaGmtOffset other)) return false;
        return Objects.equals(this.ca_address_sk, other.ca_address_sk) && Objects.equals(this.ca_gmt_offset, other.ca_gmt_offset);
    }
    @Override public int hashCode() {
        return Objects.hash(ca_address_sk, ca_gmt_offset);
    }
    int size() { return 2; }
}
class SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk {
    int ss_item_sk;
    double ss_ext_sales_price;
    int ss_sold_date_sk;
    int ss_addr_sk;
    SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk(int ss_item_sk, double ss_ext_sales_price, int ss_sold_date_sk, int ss_addr_sk) {
        this.ss_item_sk = ss_item_sk;
        this.ss_ext_sales_price = ss_ext_sales_price;
        this.ss_sold_date_sk = ss_sold_date_sk;
        this.ss_addr_sk = ss_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_ext_sales_price, other.ss_ext_sales_price) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk) && Objects.equals(this.ss_addr_sk, other.ss_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_ext_sales_price, ss_sold_date_sk, ss_addr_sk);
    }
    int size() { return 4; }
}
class CsItemSkCsExtSalesPriceCsSoldDateSkCsBillAddrSk {
    int cs_item_sk;
    double cs_ext_sales_price;
    int cs_sold_date_sk;
    int cs_bill_addr_sk;
    CsItemSkCsExtSalesPriceCsSoldDateSkCsBillAddrSk(int cs_item_sk, double cs_ext_sales_price, int cs_sold_date_sk, int cs_bill_addr_sk) {
        this.cs_item_sk = cs_item_sk;
        this.cs_ext_sales_price = cs_ext_sales_price;
        this.cs_sold_date_sk = cs_sold_date_sk;
        this.cs_bill_addr_sk = cs_bill_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsItemSkCsExtSalesPriceCsSoldDateSkCsBillAddrSk other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_ext_sales_price, other.cs_ext_sales_price) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk) && Objects.equals(this.cs_bill_addr_sk, other.cs_bill_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_ext_sales_price, cs_sold_date_sk, cs_bill_addr_sk);
    }
    int size() { return 4; }
}
class WsItemSkWsExtSalesPriceWsSoldDateSkWsBillAddrSk {
    int ws_item_sk;
    double ws_ext_sales_price;
    int ws_sold_date_sk;
    int ws_bill_addr_sk;
    WsItemSkWsExtSalesPriceWsSoldDateSkWsBillAddrSk(int ws_item_sk, double ws_ext_sales_price, int ws_sold_date_sk, int ws_bill_addr_sk) {
        this.ws_item_sk = ws_item_sk;
        this.ws_ext_sales_price = ws_ext_sales_price;
        this.ws_sold_date_sk = ws_sold_date_sk;
        this.ws_bill_addr_sk = ws_bill_addr_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsItemSkWsExtSalesPriceWsSoldDateSkWsBillAddrSk other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_ext_sales_price, other.ws_ext_sales_price) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk) && Objects.equals(this.ws_bill_addr_sk, other.ws_bill_addr_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_ext_sales_price, ws_sold_date_sk, ws_bill_addr_sk);
    }
    int size() { return 4; }
}
class ManuPrice {
    int manu;
    double price;
    ManuPrice(int manu, double price) {
        this.manu = manu;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ManuPrice other)) return false;
        return Objects.equals(this.manu, other.manu) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(manu, price);
    }
    int size() { return 2; }
}
class IManufactIdTotalSales {
    int i_manufact_id;
    double total_sales;
    IManufactIdTotalSales(int i_manufact_id, double total_sales) {
        this.i_manufact_id = i_manufact_id;
        this.total_sales = total_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IManufactIdTotalSales other)) return false;
        return Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.total_sales, other.total_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(i_manufact_id, total_sales);
    }
    int size() { return 2; }
}
public class Q33 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IItemSkIManufactIdICategory> item = new ArrayList<>(Arrays.asList(new IItemSkIManufactIdICategory(1, 1, "Books"), new IItemSkIManufactIdICategory(2, 2, "Books")));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2000, 1)));
    List<CaAddressSkCaGmtOffset> customer_address = new ArrayList<>(Arrays.asList(new CaAddressSkCaGmtOffset(1, -5), new CaAddressSkCaGmtOffset(2, -5)));
    List<SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk(1, 100.000000, 1, 1), new SsItemSkSsExtSalesPriceSsSoldDateSkSsAddrSk(2, 50.000000, 1, 2)));
    List<CsItemSkCsExtSalesPriceCsSoldDateSkCsBillAddrSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsItemSkCsExtSalesPriceCsSoldDateSkCsBillAddrSk(1, 20.000000, 1, 1)));
    List<WsItemSkWsExtSalesPriceWsSoldDateSkWsBillAddrSk> web_sales = new ArrayList<>(Arrays.asList(new WsItemSkWsExtSalesPriceWsSoldDateSkWsBillAddrSk(1, 30.000000, 1, 1)));
    int month = 1;
    int year = 2000;
    List<ManuPrice> union_sales = java.util.stream.Stream.concat(java.util.stream.Stream.concat((new java.util.function.Supplier<List<ManuPrice>>(){public List<ManuPrice> get(){
    List<ManuPrice> res0 = new ArrayList<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
            for (var ca : customer_address) {
                if (!(ss.ss_addr_sk == ca.ca_address_sk)) continue;
                for (var i : item) {
                    if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                    if (!(Objects.equals(i.i_category, "Books") && d.d_year == year && d.d_moy == month && Objects.equals(ca.ca_gmt_offset, (-5)))) continue;
                    res0.add(new ManuPrice(i.i_manufact_id, ss.ss_ext_sales_price));
                }
            }
        }
    }
    return res0;
}}).get().stream(), (new java.util.function.Supplier<List<ManuPrice>>(){public List<ManuPrice> get(){
    List<ManuPrice> res1 = new ArrayList<>();
    for (var cs : catalog_sales) {
        for (var d : date_dim) {
            if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
            for (var ca : customer_address) {
                if (!(cs.cs_bill_addr_sk == ca.ca_address_sk)) continue;
                for (var i : item) {
                    if (!(cs.cs_item_sk == i.i_item_sk)) continue;
                    if (!(Objects.equals(i.i_category, "Books") && d.d_year == year && d.d_moy == month && Objects.equals(ca.ca_gmt_offset, (-5)))) continue;
                    res1.add(new ManuPrice(i.i_manufact_id, cs.cs_ext_sales_price));
                }
            }
        }
    }
    return res1;
}}).get().stream()).collect(java.util.stream.Collectors.toList()).stream(), (new java.util.function.Supplier<List<ManuPrice>>(){public List<ManuPrice> get(){
    List<ManuPrice> res2 = new ArrayList<>();
    for (var ws : web_sales) {
        for (var d : date_dim) {
            if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
            for (var ca : customer_address) {
                if (!(ws.ws_bill_addr_sk == ca.ca_address_sk)) continue;
                for (var i : item) {
                    if (!(ws.ws_item_sk == i.i_item_sk)) continue;
                    if (!(Objects.equals(i.i_category, "Books") && d.d_year == year && d.d_moy == month && Objects.equals(ca.ca_gmt_offset, (-5)))) continue;
                    res2.add(new ManuPrice(i.i_manufact_id, ws.ws_ext_sales_price));
                }
            }
        }
    }
    return res2;
}}).get().stream()).collect(java.util.stream.Collectors.toList());
    List<IManufactIdTotalSales> result = (new java.util.function.Supplier<List<IManufactIdTotalSales>>(){public List<IManufactIdTotalSales> get(){
    List<IManufactIdTotalSales> res3 = new ArrayList<>();
    Map<Integer,List<ManuPrice>> groups4 = new LinkedHashMap<>();
    for (var s : union_sales) {
        var row5 = s;
        int key6 = s.manu;
        List<ManuPrice> bucket7 = groups4.get(key6);
        if (bucket7 == null) { bucket7 = new ArrayList<>(); groups4.put(key6, bucket7); }
        bucket7.add(row5);
    }
    for (Map.Entry<Integer,List<ManuPrice>> __e : groups4.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,ManuPrice> g = new Group<>(g_key, __e.getValue());
        res3.add(new IManufactIdTotalSales(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add(x.price);
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res3;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IManufactIdTotalSales(1, 150.000000), new IManufactIdTotalSales(2, 50.000000))))) throw new AssertionError("expect failed");
    }
}
