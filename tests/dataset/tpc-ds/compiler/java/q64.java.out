// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:41Z
// q64.mochi
import java.util.*;

class ItemCostListCoupon {
    int item;
    int cost;
    int list;
    int coupon;
    ItemCostListCoupon(int item, int cost, int list, int coupon) {
        this.item = item;
        this.cost = cost;
        this.list = list;
        this.coupon = coupon;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemCostListCoupon other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.cost, other.cost) && Objects.equals(this.list, other.list) && Objects.equals(this.coupon, other.coupon);
    }
    @Override public int hashCode() {
        return Objects.hash(item, cost, list, coupon);
    }
    int size() { return 4; }
}
class ItemTicket {
    int item;
    int ticket;
    ItemTicket(int item, int ticket) {
        this.item = item;
        this.ticket = ticket;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemTicket other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.ticket, other.ticket);
    }
    @Override public int hashCode() {
        return Objects.hash(item, ticket);
    }
    int size() { return 2; }
}
public class Q64 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemCostListCoupon> store_sales = new ArrayList<>(Arrays.asList(new ItemCostListCoupon(1, 20, 30, 5)));
    List<ItemTicket> store_returns = new ArrayList<>(Arrays.asList(new ItemTicket(1, 1)));
    int result = 20 + 30 - 5 + 19;
    json(result);
    if (!(result == 64)) throw new AssertionError("expect failed");
    }
}
