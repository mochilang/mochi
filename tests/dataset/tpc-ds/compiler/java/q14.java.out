// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:00Z
// q14.mochi
import java.util.*;

class CatalogSale {
    int cs_item_sk;
    double cs_list_price;
    int cs_quantity;
    int cs_sold_date_sk;
    CatalogSale(int cs_item_sk, double cs_list_price, int cs_quantity, int cs_sold_date_sk) {
        this.cs_item_sk = cs_item_sk;
        this.cs_list_price = cs_list_price;
        this.cs_quantity = cs_quantity;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CatalogSale other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_list_price, other.cs_list_price) && Objects.equals(this.cs_quantity, other.cs_quantity) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_list_price, cs_quantity, cs_sold_date_sk);
    }
}
class WebSale {
    int ws_item_sk;
    double ws_list_price;
    int ws_quantity;
    int ws_sold_date_sk;
    WebSale(int ws_item_sk, double ws_list_price, int ws_quantity, int ws_sold_date_sk) {
        this.ws_item_sk = ws_item_sk;
        this.ws_list_price = ws_list_price;
        this.ws_quantity = ws_quantity;
        this.ws_sold_date_sk = ws_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WebSale other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_list_price, other.ws_list_price) && Objects.equals(this.ws_quantity, other.ws_quantity) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_list_price, ws_quantity, ws_sold_date_sk);
    }
}
class Item {
    int i_item_sk;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    Item(int i_item_sk, int i_brand_id, int i_class_id, int i_category_id) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_class_id, i_category_id);
    }
}
class DateDim {
    int d_date_sk;
    int d_year;
    int d_moy;
    DateDim(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateDim other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
}
class StoreSale {
    int ss_item_sk;
    double ss_list_price;
    int ss_quantity;
    int ss_sold_date_sk;
    StoreSale(int ss_item_sk, double ss_list_price, int ss_quantity, int ss_sold_date_sk) {
        this.ss_item_sk = ss_item_sk;
        this.ss_list_price = ss_list_price;
        this.ss_quantity = ss_quantity;
        this.ss_sold_date_sk = ss_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSale other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_list_price, ss_quantity, ss_sold_date_sk);
    }
}
class SsItemSkSsListPriceSsQuantitySsSoldDateSk {
    int ss_item_sk;
    double ss_list_price;
    int ss_quantity;
    int ss_sold_date_sk;
    SsItemSkSsListPriceSsQuantitySsSoldDateSk(int ss_item_sk, double ss_list_price, int ss_quantity, int ss_sold_date_sk) {
        this.ss_item_sk = ss_item_sk;
        this.ss_list_price = ss_list_price;
        this.ss_quantity = ss_quantity;
        this.ss_sold_date_sk = ss_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSkSsListPriceSsQuantitySsSoldDateSk other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk) && Objects.equals(this.ss_list_price, other.ss_list_price) && Objects.equals(this.ss_quantity, other.ss_quantity) && Objects.equals(this.ss_sold_date_sk, other.ss_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk, ss_list_price, ss_quantity, ss_sold_date_sk);
    }
    int size() { return 4; }
}
class CsItemSkCsListPriceCsQuantityCsSoldDateSk {
    int cs_item_sk;
    double cs_list_price;
    int cs_quantity;
    int cs_sold_date_sk;
    CsItemSkCsListPriceCsQuantityCsSoldDateSk(int cs_item_sk, double cs_list_price, int cs_quantity, int cs_sold_date_sk) {
        this.cs_item_sk = cs_item_sk;
        this.cs_list_price = cs_list_price;
        this.cs_quantity = cs_quantity;
        this.cs_sold_date_sk = cs_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CsItemSkCsListPriceCsQuantityCsSoldDateSk other)) return false;
        return Objects.equals(this.cs_item_sk, other.cs_item_sk) && Objects.equals(this.cs_list_price, other.cs_list_price) && Objects.equals(this.cs_quantity, other.cs_quantity) && Objects.equals(this.cs_sold_date_sk, other.cs_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(cs_item_sk, cs_list_price, cs_quantity, cs_sold_date_sk);
    }
    int size() { return 4; }
}
class WsItemSkWsListPriceWsQuantityWsSoldDateSk {
    int ws_item_sk;
    double ws_list_price;
    int ws_quantity;
    int ws_sold_date_sk;
    WsItemSkWsListPriceWsQuantityWsSoldDateSk(int ws_item_sk, double ws_list_price, int ws_quantity, int ws_sold_date_sk) {
        this.ws_item_sk = ws_item_sk;
        this.ws_list_price = ws_list_price;
        this.ws_quantity = ws_quantity;
        this.ws_sold_date_sk = ws_sold_date_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WsItemSkWsListPriceWsQuantityWsSoldDateSk other)) return false;
        return Objects.equals(this.ws_item_sk, other.ws_item_sk) && Objects.equals(this.ws_list_price, other.ws_list_price) && Objects.equals(this.ws_quantity, other.ws_quantity) && Objects.equals(this.ws_sold_date_sk, other.ws_sold_date_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ws_item_sk, ws_list_price, ws_quantity, ws_sold_date_sk);
    }
    int size() { return 4; }
}
class IItemSkIBrandIdIClassIdICategoryId {
    int i_item_sk;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    IItemSkIBrandIdIClassIdICategoryId(int i_item_sk, int i_brand_id, int i_class_id, int i_category_id) {
        this.i_item_sk = i_item_sk;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIBrandIdIClassIdICategoryId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_brand_id, i_class_id, i_category_id);
    }
    int size() { return 4; }
}
class DDateSkDYearDMoy {
    int d_date_sk;
    int d_year;
    int d_moy;
    DDateSkDYearDMoy(int d_date_sk, int d_year, int d_moy) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
        this.d_moy = d_moy;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYearDMoy other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year) && Objects.equals(this.d_moy, other.d_moy);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year, d_moy);
    }
    int size() { return 3; }
}
class SsItemSk {
    int ss_item_sk;
    SsItemSk(int ss_item_sk) {
        this.ss_item_sk = ss_item_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsItemSk other)) return false;
        return Objects.equals(this.ss_item_sk, other.ss_item_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(ss_item_sk);
    }
    int size() { return 1; }
}
class BrandIdClassIdCategoryId {
    int brand_id;
    int class_id;
    int category_id;
    BrandIdClassIdCategoryId(int brand_id, int class_id, int category_id) {
        this.brand_id = brand_id;
        this.class_id = class_id;
        this.category_id = category_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BrandIdClassIdCategoryId other)) return false;
        return Objects.equals(this.brand_id, other.brand_id) && Objects.equals(this.class_id, other.class_id) && Objects.equals(this.category_id, other.category_id);
    }
    @Override public int hashCode() {
        return Objects.hash(brand_id, class_id, category_id);
    }
    int size() { return 3; }
}
class ChannelSalesNumberSales {
    String channel;
    double sales;
    int number_sales;
    ChannelSalesNumberSales(String channel, double sales, int number_sales) {
        this.channel = channel;
        this.sales = sales;
        this.number_sales = number_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelSalesNumberSales other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.sales, other.sales) && Objects.equals(this.number_sales, other.number_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, sales, number_sales);
    }
    int size() { return 3; }
}
class ChannelIBrandIdIClassIdICategoryIdSalesNumberSales {
    String channel;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
    double sales;
    int number_sales;
    ChannelIBrandIdIClassIdICategoryIdSalesNumberSales(String channel, int i_brand_id, int i_class_id, int i_category_id, double sales, int number_sales) {
        this.channel = channel;
        this.i_brand_id = i_brand_id;
        this.i_class_id = i_class_id;
        this.i_category_id = i_category_id;
        this.sales = sales;
        this.number_sales = number_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChannelIBrandIdIClassIdICategoryIdSalesNumberSales other)) return false;
        return Objects.equals(this.channel, other.channel) && Objects.equals(this.i_brand_id, other.i_brand_id) && Objects.equals(this.i_class_id, other.i_class_id) && Objects.equals(this.i_category_id, other.i_category_id) && Objects.equals(this.sales, other.sales) && Objects.equals(this.number_sales, other.number_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(channel, i_brand_id, i_class_id, i_category_id, sales, number_sales);
    }
    int size() { return 6; }
}
public class Q14 {
    static boolean inOp(Object item, Object collection) {
        if (collection instanceof Map<?,?> m) return m.containsKey(item);
        if (collection instanceof Collection<?> c) return c.contains(item);
        if (collection instanceof String s) return s.contains(String.valueOf(item));
        return false;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SsItemSkSsListPriceSsQuantitySsSoldDateSk> store_sales = new ArrayList<>(Arrays.asList(new SsItemSkSsListPriceSsQuantitySsSoldDateSk(1, 10.000000, 2, 1), new SsItemSkSsListPriceSsQuantitySsSoldDateSk(1, 20.000000, 3, 2)));
    List<CsItemSkCsListPriceCsQuantityCsSoldDateSk> catalog_sales = new ArrayList<>(Arrays.asList(new CsItemSkCsListPriceCsQuantityCsSoldDateSk(1, 10.000000, 2, 1)));
    List<WsItemSkWsListPriceWsQuantityWsSoldDateSk> web_sales = new ArrayList<>(Arrays.asList(new WsItemSkWsListPriceWsQuantityWsSoldDateSk(1, 30.000000, 1, 1)));
    List<IItemSkIBrandIdIClassIdICategoryId> item = new ArrayList<>(Arrays.asList(new IItemSkIBrandIdIClassIdICategoryId(1, 1, 1, 1)));
    List<DDateSkDYearDMoy> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYearDMoy(1, 2000, 12), new DDateSkDYearDMoy(2, 2002, 11)));
    List<SsItemSk> cross_items = new ArrayList<>(Arrays.asList(new SsItemSk(1)));
    double avg_sales = Arrays.asList(20.000000, 20.000000, 30.000000).stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0);
    List<ChannelSalesNumberSales> store_filtered = (new java.util.function.Supplier<List<ChannelSalesNumberSales>>(){public List<ChannelSalesNumberSales> get(){
    List<ChannelSalesNumberSales> res0 = new ArrayList<>();
    Map<BrandIdClassIdCategoryId,List<SsItemSkSsListPriceSsQuantitySsSoldDateSk>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var d : date_dim) {
            if (!(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2002 && d.d_moy == 11)) continue;
            if (!(inOp(ss.ss_item_sk, ((new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res2 = new ArrayList<>();
    for (var ci : cross_items) {
        res2.add(ci.ss_item_sk);
    }
    return res2;
}}).get())))) continue;
            var row3 = ss;
            BrandIdClassIdCategoryId key4 = new BrandIdClassIdCategoryId(1, 1, 1);
            List<SsItemSkSsListPriceSsQuantitySsSoldDateSk> bucket5 = groups1.get(key4);
            if (bucket5 == null) { bucket5 = new ArrayList<>(); groups1.put(key4, bucket5); }
            bucket5.add(row3);
        }
    }
    for (Map.Entry<BrandIdClassIdCategoryId,List<SsItemSkSsListPriceSsQuantitySsSoldDateSk>> __e : groups1.entrySet()) {
        BrandIdClassIdCategoryId g_key = __e.getKey();
        Group<BrandIdClassIdCategoryId,SsItemSkSsListPriceSsQuantitySsSoldDateSk> g = new Group<>(g_key, __e.getValue());
        res0.add(new ChannelSalesNumberSales("store", (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.ss_quantity * x.ss_list_price);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<SsItemSkSsListPriceSsQuantitySsSoldDateSk>>(){public List<SsItemSkSsListPriceSsQuantitySsSoldDateSk> get(){
    List<SsItemSkSsListPriceSsQuantitySsSoldDateSk> res7 = new ArrayList<>();
    for (var _ : g) {
        res7.add(_);
    }
    return res7;
}}).get().size()));
    }
    return res0;
}}).get();
    List<ChannelIBrandIdIClassIdICategoryIdSalesNumberSales> result = (new java.util.function.Supplier<List<ChannelIBrandIdIClassIdICategoryIdSalesNumberSales>>(){public List<ChannelIBrandIdIClassIdICategoryIdSalesNumberSales> get(){
    List<ChannelIBrandIdIClassIdICategoryIdSalesNumberSales> res8 = new ArrayList<>();
    for (var r : store_filtered) {
        if (!(r.sales > avg_sales)) continue;
        res8.add(new ChannelIBrandIdIClassIdICategoryIdSalesNumberSales(r.channel, 1, 1, 1, r.sales, r.number_sales));
    }
    return res8;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new ChannelIBrandIdIClassIdICategoryIdSalesNumberSales("store", 1, 1, 1, 60.000000, 1))))) throw new AssertionError("expect failed");
    }
}
