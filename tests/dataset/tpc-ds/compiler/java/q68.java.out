// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:44Z
// q68.mochi
import java.util.*;

class ItemProfit {
    int item;
    int profit;
    ItemProfit(int item, int profit) {
        this.item = item;
        this.profit = profit;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemProfit other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.profit, other.profit);
    }
    @Override public int hashCode() {
        return Objects.hash(item, profit);
    }
    int size() { return 2; }
}
public class Q68 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<ItemProfit> catalog_sales = new ArrayList<>(Arrays.asList(new ItemProfit(1, 30), new ItemProfit(2, 38)));
    List<ItemProfit> store_sales = new ArrayList<>(Arrays.asList(new ItemProfit(1, 30)));
    int result = ((Number)((Number)(new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res0 = new ArrayList<>();
    for (var c : catalog_sales) {
        res0.add(c.profit);
    }
    return res0;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()).doubleValue() - ((Number)(new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res1 = new ArrayList<>();
    for (var s : store_sales) {
        res1.add(s.profit);
    }
    return res1;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()).doubleValue()).doubleValue() + 30;
    json(result);
    if (!(result == 68)) throw new AssertionError("expect failed");
    }
}
