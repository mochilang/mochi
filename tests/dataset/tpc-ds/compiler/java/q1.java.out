// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:47Z
// q1.mochi
import java.util.*;

class SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt {
    int sr_returned_date_sk;
    int sr_customer_sk;
    int sr_store_sk;
    double sr_return_amt;
    SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt(int sr_returned_date_sk, int sr_customer_sk, int sr_store_sk, double sr_return_amt) {
        this.sr_returned_date_sk = sr_returned_date_sk;
        this.sr_customer_sk = sr_customer_sk;
        this.sr_store_sk = sr_store_sk;
        this.sr_return_amt = sr_return_amt;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt other)) return false;
        return Objects.equals(this.sr_returned_date_sk, other.sr_returned_date_sk) && Objects.equals(this.sr_customer_sk, other.sr_customer_sk) && Objects.equals(this.sr_store_sk, other.sr_store_sk) && Objects.equals(this.sr_return_amt, other.sr_return_amt);
    }
    @Override public int hashCode() {
        return Objects.hash(sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt);
    }
    int size() { return 4; }
}
class DDateSkDYear {
    int d_date_sk;
    int d_year;
    DDateSkDYear(int d_date_sk, int d_year) {
        this.d_date_sk = d_date_sk;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDYear other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_year);
    }
    int size() { return 2; }
}
class SStoreSkSState {
    int s_store_sk;
    String s_state;
    SStoreSkSState(int s_store_sk, String s_state) {
        this.s_store_sk = s_store_sk;
        this.s_state = s_state;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreSkSState other)) return false;
        return Objects.equals(this.s_store_sk, other.s_store_sk) && Objects.equals(this.s_state, other.s_state);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_sk, s_state);
    }
    int size() { return 2; }
}
class CCustomerSkCCustomerId {
    int c_customer_sk;
    String c_customer_id;
    CCustomerSkCCustomerId(int c_customer_sk, String c_customer_id) {
        this.c_customer_sk = c_customer_sk;
        this.c_customer_id = c_customer_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerSkCCustomerId other)) return false;
        return Objects.equals(this.c_customer_sk, other.c_customer_sk) && Objects.equals(this.c_customer_id, other.c_customer_id);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_sk, c_customer_id);
    }
    int size() { return 2; }
}
class CustomerSkStoreSk {
    int customer_sk;
    int store_sk;
    CustomerSkStoreSk(int customer_sk, int store_sk) {
        this.customer_sk = customer_sk;
        this.store_sk = store_sk;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CustomerSkStoreSk other)) return false;
        return Objects.equals(this.customer_sk, other.customer_sk) && Objects.equals(this.store_sk, other.store_sk);
    }
    @Override public int hashCode() {
        return Objects.hash(customer_sk, store_sk);
    }
    int size() { return 2; }
}
class CtrCustomerSkCtrStoreSkCtrTotalReturn {
    int ctr_customer_sk;
    int ctr_store_sk;
    double ctr_total_return;
    CtrCustomerSkCtrStoreSkCtrTotalReturn(int ctr_customer_sk, int ctr_store_sk, double ctr_total_return) {
        this.ctr_customer_sk = ctr_customer_sk;
        this.ctr_store_sk = ctr_store_sk;
        this.ctr_total_return = ctr_total_return;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CtrCustomerSkCtrStoreSkCtrTotalReturn other)) return false;
        return Objects.equals(this.ctr_customer_sk, other.ctr_customer_sk) && Objects.equals(this.ctr_store_sk, other.ctr_store_sk) && Objects.equals(this.ctr_total_return, other.ctr_total_return);
    }
    @Override public int hashCode() {
        return Objects.hash(ctr_customer_sk, ctr_store_sk, ctr_total_return);
    }
    int size() { return 3; }
}
class CCustomerId {
    String c_customer_id;
    CCustomerId(String c_customer_id) {
        this.c_customer_id = c_customer_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CCustomerId other)) return false;
        return Objects.equals(this.c_customer_id, other.c_customer_id);
    }
    @Override public int hashCode() {
        return Objects.hash(c_customer_id);
    }
    int size() { return 1; }
}
public class Q1 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt> store_returns = new ArrayList<>(Arrays.asList(new SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt(1, 1, 10, 20.000000), new SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt(1, 2, 10, 50.000000)));
    List<DDateSkDYear> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDYear(1, 1998)));
    List<SStoreSkSState> store = new ArrayList<>(Arrays.asList(new SStoreSkSState(10, "TN")));
    List<CCustomerSkCCustomerId> customer = new ArrayList<>(Arrays.asList(new CCustomerSkCCustomerId(1, "C1"), new CCustomerSkCCustomerId(2, "C2")));
    List<CtrCustomerSkCtrStoreSkCtrTotalReturn> customer_total_return = (new java.util.function.Supplier<List<CtrCustomerSkCtrStoreSkCtrTotalReturn>>(){public List<CtrCustomerSkCtrStoreSkCtrTotalReturn> get(){
    List<CtrCustomerSkCtrStoreSkCtrTotalReturn> res0 = new ArrayList<>();
    Map<CustomerSkStoreSk,List<SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt>> groups1 = new LinkedHashMap<>();
    for (var sr : store_returns) {
        for (var d : date_dim) {
            if (!(sr.sr_returned_date_sk == d.d_date_sk && d.d_year == 1998)) continue;
            var row2 = sr;
            CustomerSkStoreSk key3 = new CustomerSkStoreSk(sr.sr_customer_sk, sr.sr_store_sk);
            List<SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt> bucket4 = groups1.get(key3);
            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
            bucket4.add(row2);
        }
    }
    for (Map.Entry<CustomerSkStoreSk,List<SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt>> __e : groups1.entrySet()) {
        CustomerSkStoreSk g_key = __e.getKey();
        Group<CustomerSkStoreSk,SrReturnedDateSkSrCustomerSkSrStoreSkSrReturnAmt> g = new Group<>(g_key, __e.getValue());
        res0.add(new CtrCustomerSkCtrStoreSkCtrTotalReturn(g.key.customer_sk, g.key.store_sk, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.sr_return_amt);
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<CCustomerId> result = (new java.util.function.Supplier<List<CCustomerId>>(){public List<CCustomerId> get(){
    List<CCustomerId> res6 = new ArrayList<>();
    for (var ctr1 : customer_total_return) {
        for (var s : store) {
            if (!(ctr1.ctr_store_sk == s.s_store_sk)) continue;
            for (var c : customer) {
                if (!(ctr1.ctr_customer_sk == c.c_customer_sk)) continue;
                if (!(ctr1.ctr_total_return > ((Number)((Number)(new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var ctr2 : customer_total_return) {
        if (!(ctr1.ctr_store_sk == ctr2.ctr_store_sk)) continue;
        res7.add(ctr2.ctr_total_return);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)).doubleValue() * 1.200000).doubleValue() && Objects.equals(s.s_state, "TN"))) continue;
                res6.add(new CCustomerId(c.c_customer_id));
            }
        }
    }
    return res6;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new CCustomerId("C2"))))) throw new AssertionError("expect failed");
    }
}
