// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:25Z
// q43.mochi
import java.util.*;

class DateSkDDayNameDYear {
    int date_sk;
    String d_day_name;
    int d_year;
    DateSkDDayNameDYear(int date_sk, String d_day_name, int d_year) {
        this.date_sk = date_sk;
        this.d_day_name = d_day_name;
        this.d_year = d_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DateSkDDayNameDYear other)) return false;
        return Objects.equals(this.date_sk, other.date_sk) && Objects.equals(this.d_day_name, other.d_day_name) && Objects.equals(this.d_year, other.d_year);
    }
    @Override public int hashCode() {
        return Objects.hash(date_sk, d_day_name, d_year);
    }
    int size() { return 3; }
}
class StoreSkStoreIdStoreNameGmtOffset {
    int store_sk;
    String store_id;
    String store_name;
    int gmt_offset;
    StoreSkStoreIdStoreNameGmtOffset(int store_sk, String store_id, String store_name, int gmt_offset) {
        this.store_sk = store_sk;
        this.store_id = store_id;
        this.store_name = store_name;
        this.gmt_offset = gmt_offset;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StoreSkStoreIdStoreNameGmtOffset other)) return false;
        return Objects.equals(this.store_sk, other.store_sk) && Objects.equals(this.store_id, other.store_id) && Objects.equals(this.store_name, other.store_name) && Objects.equals(this.gmt_offset, other.gmt_offset);
    }
    @Override public int hashCode() {
        return Objects.hash(store_sk, store_id, store_name, gmt_offset);
    }
    int size() { return 4; }
}
class SoldDateSkStoreSkSalesPrice {
    int sold_date_sk;
    int store_sk;
    double sales_price;
    SoldDateSkStoreSkSalesPrice(int sold_date_sk, int store_sk, double sales_price) {
        this.sold_date_sk = sold_date_sk;
        this.store_sk = store_sk;
        this.sales_price = sales_price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SoldDateSkStoreSkSalesPrice other)) return false;
        return Objects.equals(this.sold_date_sk, other.sold_date_sk) && Objects.equals(this.store_sk, other.store_sk) && Objects.equals(this.sales_price, other.sales_price);
    }
    @Override public int hashCode() {
        return Objects.hash(sold_date_sk, store_sk, sales_price);
    }
    int size() { return 3; }
}
class DDayNameSStoreNameSStoreIdPrice {
    String d_day_name;
    String s_store_name;
    String s_store_id;
    double price;
    DDayNameSStoreNameSStoreIdPrice(String d_day_name, String s_store_name, String s_store_id, double price) {
        this.d_day_name = d_day_name;
        this.s_store_name = s_store_name;
        this.s_store_id = s_store_id;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDayNameSStoreNameSStoreIdPrice other)) return false;
        return Objects.equals(this.d_day_name, other.d_day_name) && Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.s_store_id, other.s_store_id) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(d_day_name, s_store_name, s_store_id, price);
    }
    int size() { return 4; }
}
class NameId {
    String name;
    String id;
    NameId(String name, String id) {
        this.name = name;
        this.id = id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NameId other)) return false;
        return Objects.equals(this.name, other.name) && Objects.equals(this.id, other.id);
    }
    @Override public int hashCode() {
        return Objects.hash(name, id);
    }
    int size() { return 2; }
}
class SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales {
    String s_store_name;
    String s_store_id;
    int sun_sales;
    int mon_sales;
    int tue_sales;
    int wed_sales;
    int thu_sales;
    int fri_sales;
    int sat_sales;
    SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales(String s_store_name, String s_store_id, int sun_sales, int mon_sales, int tue_sales, int wed_sales, int thu_sales, int fri_sales, int sat_sales) {
        this.s_store_name = s_store_name;
        this.s_store_id = s_store_id;
        this.sun_sales = sun_sales;
        this.mon_sales = mon_sales;
        this.tue_sales = tue_sales;
        this.wed_sales = wed_sales;
        this.thu_sales = thu_sales;
        this.fri_sales = fri_sales;
        this.sat_sales = sat_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales other)) return false;
        return Objects.equals(this.s_store_name, other.s_store_name) && Objects.equals(this.s_store_id, other.s_store_id) && Objects.equals(this.sun_sales, other.sun_sales) && Objects.equals(this.mon_sales, other.mon_sales) && Objects.equals(this.tue_sales, other.tue_sales) && Objects.equals(this.wed_sales, other.wed_sales) && Objects.equals(this.thu_sales, other.thu_sales) && Objects.equals(this.fri_sales, other.fri_sales) && Objects.equals(this.sat_sales, other.sat_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(s_store_name, s_store_id, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales);
    }
    int size() { return 9; }
}
public class Q43 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<DateSkDDayNameDYear> date_dim = new ArrayList<>(Arrays.asList(new DateSkDDayNameDYear(1, "Sunday", 2020), new DateSkDDayNameDYear(2, "Monday", 2020), new DateSkDDayNameDYear(3, "Tuesday", 2020), new DateSkDDayNameDYear(4, "Wednesday", 2020), new DateSkDDayNameDYear(5, "Thursday", 2020), new DateSkDDayNameDYear(6, "Friday", 2020), new DateSkDDayNameDYear(7, "Saturday", 2020)));
    List<StoreSkStoreIdStoreNameGmtOffset> store = new ArrayList<>(Arrays.asList(new StoreSkStoreIdStoreNameGmtOffset(1, "S1", "Main", 0)));
    List<SoldDateSkStoreSkSalesPrice> store_sales = new ArrayList<>(Arrays.asList(new SoldDateSkStoreSkSalesPrice(1, 1, 10.000000), new SoldDateSkStoreSkSalesPrice(2, 1, 20.000000), new SoldDateSkStoreSkSalesPrice(3, 1, 30.000000), new SoldDateSkStoreSkSalesPrice(4, 1, 40.000000), new SoldDateSkStoreSkSalesPrice(5, 1, 50.000000), new SoldDateSkStoreSkSalesPrice(6, 1, 60.000000), new SoldDateSkStoreSkSalesPrice(7, 1, 70.000000)));
    int year = 2020;
    int gmt = 0;
    List<DDayNameSStoreNameSStoreIdPrice> records = (new java.util.function.Supplier<List<DDayNameSStoreNameSStoreIdPrice>>(){public List<DDayNameSStoreNameSStoreIdPrice> get(){
    List<DDayNameSStoreNameSStoreIdPrice> res0 = new ArrayList<>();
    for (var d : date_dim) {
        for (var ss : store_sales) {
            if (!(ss.sold_date_sk == d.date_sk)) continue;
            for (var s : store) {
                if (!(ss.store_sk == s.store_sk)) continue;
                if (!(s.gmt_offset == gmt && d.d_year == year)) continue;
                res0.add(new DDayNameSStoreNameSStoreIdPrice(d.d_day_name, s.store_name, s.store_id, ss.sales_price));
            }
        }
    }
    return res0;
}}).get();
    List<SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> base = (new java.util.function.Supplier<List<SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales>>(){public List<SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> get(){
    List<SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> res1 = new ArrayList<>();
    Map<NameId,List<DDayNameSStoreNameSStoreIdPrice>> groups2 = new LinkedHashMap<>();
    for (var r : records) {
        var row3 = r;
        NameId key4 = new NameId(r.s_store_name, r.s_store_id);
        List<DDayNameSStoreNameSStoreIdPrice> bucket5 = groups2.get(key4);
        if (bucket5 == null) { bucket5 = new ArrayList<>(); groups2.put(key4, bucket5); }
        bucket5.add(row3);
    }
    for (Map.Entry<NameId,List<DDayNameSStoreNameSStoreIdPrice>> __e : groups2.entrySet()) {
        NameId g_key = __e.getKey();
        Group<NameId,DDayNameSStoreNameSStoreIdPrice> g = new Group<>(g_key, __e.getValue());
        res1.add(new SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales(g.key.name, g.key.id, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add((Objects.equals(x.d_day_name, "Sunday") ? x.price : 0.000000));
    }
    return res6;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add((Objects.equals(x.d_day_name, "Monday") ? x.price : 0.000000));
    }
    return res7;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add((Objects.equals(x.d_day_name, "Tuesday") ? x.price : 0.000000));
    }
    return res8;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res9 = new ArrayList<>();
    for (var x : g) {
        res9.add((Objects.equals(x.d_day_name, "Wednesday") ? x.price : 0.000000));
    }
    return res9;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res10 = new ArrayList<>();
    for (var x : g) {
        res10.add((Objects.equals(x.d_day_name, "Thursday") ? x.price : 0.000000));
    }
    return res10;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add((Objects.equals(x.d_day_name, "Friday") ? x.price : 0.000000));
    }
    return res11;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res12 = new ArrayList<>();
    for (var x : g) {
        res12.add((Objects.equals(x.d_day_name, "Saturday") ? x.price : 0.000000));
    }
    return res12;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res1;
}}).get();
    List<SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales> result = base;
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SStoreNameSStoreIdSunSalesMonSalesTueSalesWedSalesThuSalesFriSalesSatSales("Main", "S1", 10.000000, 20.000000, 30.000000, 40.000000, 50.000000, 60.000000, 70.000000))))) throw new AssertionError("expect failed");
    }
}
