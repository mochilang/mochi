// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:51:32Z
// q53.mochi
import java.util.*;

class IItemSkIManufactId {
    int i_item_sk;
    int i_manufact_id;
    IItemSkIManufactId(int i_item_sk, int i_manufact_id) {
        this.i_item_sk = i_item_sk;
        this.i_manufact_id = i_manufact_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IItemSkIManufactId other)) return false;
        return Objects.equals(this.i_item_sk, other.i_item_sk) && Objects.equals(this.i_manufact_id, other.i_manufact_id);
    }
    @Override public int hashCode() {
        return Objects.hash(i_item_sk, i_manufact_id);
    }
    int size() { return 2; }
}
class ItemDatePrice {
    int item;
    int date;
    double price;
    ItemDatePrice(int item, int date, double price) {
        this.item = item;
        this.date = date;
        this.price = price;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemDatePrice other)) return false;
        return Objects.equals(this.item, other.item) && Objects.equals(this.date, other.date) && Objects.equals(this.price, other.price);
    }
    @Override public int hashCode() {
        return Objects.hash(item, date, price);
    }
    int size() { return 3; }
}
class DDateSkDMonthSeq {
    int d_date_sk;
    int d_month_seq;
    DDateSkDMonthSeq(int d_date_sk, int d_month_seq) {
        this.d_date_sk = d_date_sk;
        this.d_month_seq = d_month_seq;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DDateSkDMonthSeq other)) return false;
        return Objects.equals(this.d_date_sk, other.d_date_sk) && Objects.equals(this.d_month_seq, other.d_month_seq);
    }
    @Override public int hashCode() {
        return Objects.hash(d_date_sk, d_month_seq);
    }
    int size() { return 2; }
}
class SsI {
    ItemDatePrice ss;
    IItemSkIManufactId i;
    SsI(ItemDatePrice ss, IItemSkIManufactId i) {
        this.ss = ss;
        this.i = i;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SsI other)) return false;
        return Objects.equals(this.ss, other.ss) && Objects.equals(this.i, other.i);
    }
    @Override public int hashCode() {
        return Objects.hash(ss, i);
    }
    int size() { return 2; }
}
class ManuSumSalesAvgSales {
    int manu;
    int sum_sales;
    double avg_sales;
    ManuSumSalesAvgSales(int manu, int sum_sales, double avg_sales) {
        this.manu = manu;
        this.sum_sales = sum_sales;
        this.avg_sales = avg_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ManuSumSalesAvgSales other)) return false;
        return Objects.equals(this.manu, other.manu) && Objects.equals(this.sum_sales, other.sum_sales) && Objects.equals(this.avg_sales, other.avg_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(manu, sum_sales, avg_sales);
    }
    int size() { return 3; }
}
class IManufactIdSumSales {
    int i_manufact_id;
    int sum_sales;
    IManufactIdSumSales(int i_manufact_id, int sum_sales) {
        this.i_manufact_id = i_manufact_id;
        this.sum_sales = sum_sales;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IManufactIdSumSales other)) return false;
        return Objects.equals(this.i_manufact_id, other.i_manufact_id) && Objects.equals(this.sum_sales, other.sum_sales);
    }
    @Override public int hashCode() {
        return Objects.hash(i_manufact_id, sum_sales);
    }
    int size() { return 2; }
}
public class Q53 {
    static double abs(double x) {
        if (x >= 0.000000) {
            return x;
        }
        return -x;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IItemSkIManufactId> item = new ArrayList<>(Arrays.asList(new IItemSkIManufactId(1, 1), new IItemSkIManufactId(2, 2)));
    List<ItemDatePrice> store_sales = new ArrayList<>(Arrays.asList(new ItemDatePrice(1, 1, 10.000000), new ItemDatePrice(1, 2, 10.000000), new ItemDatePrice(2, 1, 30.000000), new ItemDatePrice(2, 2, 23.000000)));
    List<DDateSkDMonthSeq> date_dim = new ArrayList<>(Arrays.asList(new DDateSkDMonthSeq(1, 1), new DDateSkDMonthSeq(2, 2)));
    List<ManuSumSalesAvgSales> grouped = (new java.util.function.Supplier<List<ManuSumSalesAvgSales>>(){public List<ManuSumSalesAvgSales> get(){
    List<ManuSumSalesAvgSales> res0 = new ArrayList<>();
    Map<Integer,List<SsI>> groups1 = new LinkedHashMap<>();
    for (var ss : store_sales) {
        for (var i : item) {
            if (!(ss.item == i.i_item_sk)) continue;
            for (var d : date_dim) {
                if (!(ss.date == d.d_date_sk)) continue;
                SsI row2 = new SsI(ss, i);
                int key3 = i.i_manufact_id;
                List<SsI> bucket4 = groups1.get(key3);
                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                bucket4.add(row2);
            }
        }
    }
    for (Map.Entry<Integer,List<SsI>> __e : groups1.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,SsI> g = new Group<>(g_key, __e.getValue());
        res0.add(new ManuSumSalesAvgSales(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.price);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.price);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)));
    }
    return res0;
}}).get();
    List<IManufactIdSumSales> result = (new java.util.function.Supplier<List<IManufactIdSumSales>>(){public List<IManufactIdSumSales> get(){
    List<IManufactIdSumSales> res7 = new ArrayList<>();
    for (var g : grouped) {
        if (!(g.avg_sales > 0.000000 && abs(g.sum_sales - g.avg_sales) / g.avg_sales > 0.100000)) continue;
        res7.add(new IManufactIdSumSales(g.manu, g.sum_sales));
    }
    return res7;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new IManufactIdSumSales(1, 20.000000), new IManufactIdSumSales(2, 53.000000))))) throw new AssertionError("expect failed");
    }
}
