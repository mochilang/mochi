// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct WebSale {
  int ws_order_number;
  int ws_ship_date_sk;
  int ws_warehouse_sk;
  int ws_ship_addr_sk;
  int ws_web_site_sk;
  double ws_net_profit;
  double ws_ext_ship_cost;
};

struct WebReturn {
  int wr_order_number;
};

struct DateDim {
  int d_date_sk;
  string d_date;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_state;
};

struct WebSite {
  int web_site_sk;
  string web_company_name;
};

vector<any> distinct(vector<any> xs) {
  vector<any> out = vector<int>{};
  for (const any &x : xs) {
    if (!contains(out, x)) {
      out = append(out, x);
    }
  }
  return out;
}

int main() {
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_order_number"), any(1)},
                                     {string("ws_ship_date_sk"), any(1)},
                                     {string("ws_warehouse_sk"), any(1)},
                                     {string("ws_ship_addr_sk"), any(1)},
                                     {string("ws_web_site_sk"), any(1)},
                                     {string("ws_net_profit"), any(5.0)},
                                     {string("ws_ext_ship_cost"), any(2.0)}},
          unordered_map<string, any>{{string("ws_order_number"), any(2)},
                                     {string("ws_ship_date_sk"), any(1)},
                                     {string("ws_warehouse_sk"), any(2)},
                                     {string("ws_ship_addr_sk"), any(1)},
                                     {string("ws_web_site_sk"), any(1)},
                                     {string("ws_net_profit"), any(3.0)},
                                     {string("ws_ext_ship_cost"), any(1.0)}}};
  vector<unordered_map<string, int>> web_returns =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("wr_order_number"), 2}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("d_date_sk"), any(1)},
          {string("d_date"), any(string("2001-02-01"))}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))}}};
  vector<unordered_map<string, any>> web_site =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("web_site_sk"), any(1)},
          {string("web_company_name"), any(string("pri"))}}};
  auto filtered = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      for (auto &d : date_dim) {
        if (!(ws["ws_ship_date_sk"] == d["d_date_sk"]))
          continue;
        for (auto &ca : customer_address) {
          if (!(ws["ws_ship_addr_sk"] == ca["ca_address_sk"]))
            continue;
          for (auto &w : web_site) {
            if (!(ws["ws_web_site_sk"] == w["web_site_sk"]))
              continue;
            if (ca["ca_state"] == string("CA") &&
                w["web_company_name"] == string("pri") &&
                exists(([&]() -> vector<unordered_map<string, int>> {
                  vector<unordered_map<string, int>> _res;
                  for (auto &wr : web_returns) {
                    if (wr["wr_order_number"] == ws["ws_order_number"]) {
                      _res.push_back(wr);
                    }
                  }
                  return _res;
                })()) == false) {
              _res.push_back(ws);
            }
          }
        }
      }
    }
    return _res;
  })();
  unordered_map<string, any> result = unordered_map<string, any>{
      {string("order_count"),
       any(distinct(([&]() -> vector<unordered_map<string, any>> {
             vector<unordered_map<string, any>> _res;
             for (auto &x : filtered) {
               _res.push_back(x["ws_order_number"]);
             }
             return _res;
           })())
               .size())},
      {string("total_shipping_cost"),
       any(_sum(([&]() -> vector<unordered_map<string, any>> {
         vector<unordered_map<string, any>> _res;
         for (auto &x : filtered) {
           _res.push_back(x["ws_ext_ship_cost"]);
         }
         return _res;
       })()))},
      {string("total_net_profit"),
       any(_sum(([&]() -> vector<unordered_map<string, any>> {
         vector<unordered_map<string, any>> _res;
         for (auto &x : filtered) {
           _res.push_back(x["ws_net_profit"]);
         }
         return _res;
       })()))}};
  _json(result);
  auto test_TPCDS_Q94_shipping = [&]() {
    if (!(result ==
          unordered_map<string, any>{{string("order_count"), any(1)},
                                     {string("total_shipping_cost"), any(2.0)},
                                     {string("total_net_profit"), any(5.0)}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q94_shipping();
  return 0;
}
