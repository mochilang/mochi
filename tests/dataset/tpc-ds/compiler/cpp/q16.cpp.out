// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  int cs_order_number;
  int cs_ship_date_sk;
  int cs_ship_addr_sk;
  int cs_call_center_sk;
  int cs_warehouse_sk;
  float cs_ext_ship_cost;
  float cs_net_profit;
};
struct DateDim {
  int d_date_sk;
  std::string d_date;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_state;
};
struct CallCenter {
  int cc_call_center_sk;
  std::string cc_county;
};
struct CatalogReturn {
  int cr_order_number;
};
struct CatalogSale {
  decltype(1) cs_order_number;
  decltype(1) cs_ship_date_sk;
  decltype(1) cs_ship_addr_sk;
  decltype(1) cs_call_center_sk;
  decltype(1) cs_warehouse_sk;
  decltype(5) cs_ext_ship_cost;
  decltype(20) cs_net_profit;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-03-01")) d_date;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
};
struct CallCenter {
  decltype(1) cc_call_center_sk;
  decltype(std::string("CountyA")) cc_county;
};
struct Filtered {
  decltype(cs1) cs1;
  decltype(d) d;
  decltype(ca) ca;
  decltype(cc) cc;
};
struct __struct6 {
  decltype(std::unordered_map<int, int>{}) key;
  std::vector<Filtered> items;
};
struct __struct7 {
  int order_count;
  double total_shipping_cost;
  double total_net_profit;
};
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_county\":";
  __json(v.cc_county);
  std::cout << "}";
}
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_order_number\":";
  __json(v.cr_order_number);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_order_number\":";
  __json(v.cs_order_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_date_sk\":";
  __json(v.cs_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_addr_sk\":";
  __json(v.cs_ship_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_warehouse_sk\":";
  __json(v.cs_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_ship_cost\":";
  __json(v.cs_ext_ship_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_net_profit\":";
  __json(v.cs_net_profit);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_county\":";
  __json(v.cc_county);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_order_number\":";
  __json(v.cs_order_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_date_sk\":";
  __json(v.cs_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_addr_sk\":";
  __json(v.cs_ship_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_warehouse_sk\":";
  __json(v.cs_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_ship_cost\":";
  __json(v.cs_ext_ship_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_net_profit\":";
  __json(v.cs_net_profit);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"order_count\":";
  __json(v.order_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_shipping_cost\":";
  __json(v.total_shipping_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_net_profit\":";
  __json(v.total_net_profit);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs1\":";
  __json(v.cs1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc\":";
  __json(v.cc);
  std::cout << "}";
}
std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1, 1, 1, 1, 5, 20},
                                          CatalogSale{1, 1, 1, 1, 2, 0, 0}};
std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-03-01")}};
std::vector<CustomerAddres> customer_address = {
    CustomerAddres{1, std::string("CA")}};
std::vector<CallCenter> call_center = {CallCenter{1, std::string("CountyA")}};
std::vector<int> catalog_returns = {};

auto distinct(auto xs) {
  std::vector<int> out = {};
  for (auto x : xs) {
    if ((!contains(out, x))) {
      out.push_back(x);
    }
  }
  return out;
}

int main() {
  std::vector<Filtered> filtered = ([&]() {
    std::vector<__struct6> __groups;
    for (auto cs1 : catalog_sales) {
      for (auto d : date_dim) {
        if (!((((cs1.cs_ship_date_sk == d.d_date_sk) &&
                (d.d_date >= std::string("2000-03-01"))) &&
               (d.d_date <= std::string("2000-04-30")))))
          continue;
        for (auto ca : customer_address) {
          if (!(((cs1.cs_ship_addr_sk == ca.ca_address_sk) &&
                 (ca.ca_state == std::string("CA")))))
            continue;
          for (auto cc : call_center) {
            if (!(((cs1.cs_call_center_sk == cc.cc_call_center_sk) &&
                   (cc.cc_county == std::string("CountyA")))))
              continue;
            if (!((std::any_of(
                       catalog_sales.begin(), catalog_sales.end(),
                       [&](auto cs2) {
                         return ((cs1.cs_order_number == cs2.cs_order_number) &&
                                 (cs1.cs_warehouse_sk != cs2.cs_warehouse_sk));
                       }) &&
                   (std::any_of(catalog_returns.begin(), catalog_returns.end(),
                                [&](auto cr) {
                                  return (cs1.cs_order_number ==
                                          cr.cr_order_number);
                                }) == false))))
              continue;
            auto __key = std::unordered_map<int, int>{};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(Filtered{cs1, d, ca, cc});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct6{
                  __key, std::vector<Filtered>{Filtered{cs1, d, ca, cc}}});
            }
          }
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          distinct(([&]() {
            std::vector<decltype(std::declval<Filtered>().cs_order_number)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.cs_order_number);
            }
            return __items;
          })())
              .size(),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype(std::declval<Filtered>().cs_ext_ship_cost)>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(x.cs_ext_ship_cost);
                }
                return __items;
              })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype(std::declval<Filtered>().cs_net_profit)>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(x.cs_net_profit);
                }
                return __items;
              })())});
    }
    return __items;
  })();
  (__json(filtered));
  // test TPCDS Q16 shipping
  return 0;
}
