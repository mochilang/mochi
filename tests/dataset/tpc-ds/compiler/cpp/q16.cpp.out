// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CatalogSale {
  int cs_order_number;
  int cs_ship_date_sk;
  int cs_ship_addr_sk;
  int cs_call_center_sk;
  int cs_warehouse_sk;
  double cs_ext_ship_cost;
  double cs_net_profit;
};

struct DateDim {
  int d_date_sk;
  string d_date;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_state;
};

struct CallCenter {
  int cc_call_center_sk;
  string cc_county;
};

struct CatalogReturn {
  int cr_order_number;
};

vector<any> distinct(vector<any> xs) {
  vector<any> out = vector<int>{};
  for (const any &x : xs) {
    if (!contains(out, x)) {
      out = append(out, x);
    }
  }
  return out;
}

int main() {
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_order_number"), any(1)},
                                     {string("cs_ship_date_sk"), any(1)},
                                     {string("cs_ship_addr_sk"), any(1)},
                                     {string("cs_call_center_sk"), any(1)},
                                     {string("cs_warehouse_sk"), any(1)},
                                     {string("cs_ext_ship_cost"), any(5.0)},
                                     {string("cs_net_profit"), any(20.0)}},
          unordered_map<string, any>{{string("cs_order_number"), any(1)},
                                     {string("cs_ship_date_sk"), any(1)},
                                     {string("cs_ship_addr_sk"), any(1)},
                                     {string("cs_call_center_sk"), any(1)},
                                     {string("cs_warehouse_sk"), any(2)},
                                     {string("cs_ext_ship_cost"), any(0.0)},
                                     {string("cs_net_profit"), any(0.0)}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("d_date_sk"), any(1)},
          {string("d_date"), any(string("2000-03-01"))}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))}}};
  vector<unordered_map<string, any>> call_center =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cc_call_center_sk"), any(1)},
          {string("cc_county"), any(string("CountyA"))}}};
  vector<any> catalog_returns = vector<any>{};
  struct GroupKey5 {};
  inline bool operator==(const GroupKey5 &a, const GroupKey5 &b) { return; }
  namespace std {
  template <> struct hash<GroupKey5> {
    size_t operator()(const GroupKey5 &k) const noexcept {
      size_t h = 0;
      return h;
    }
  };
  } // namespace std

  auto filtered = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey5;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cs1 : catalog_sales) {
      for (auto &d : date_dim) {
        if (!(cs1["cs_ship_date_sk"] == d["d_date_sk"] &&
              d["d_date"] >= string("2000-03-01") &&
              d["d_date"] <= string("2000-04-30")))
          continue;
        for (auto &ca : customer_address) {
          if (!(cs1["cs_ship_addr_sk"] == ca["ca_address_sk"] &&
                ca["ca_state"] == string("CA")))
            continue;
          for (auto &cc : call_center) {
            if (!(cs1["cs_call_center_sk"] == cc["cc_call_center_sk"] &&
                  cc["cc_county"] == string("CountyA")))
              continue;
            if (exists(([&]() -> vector<unordered_map<string, any>> {
                  vector<unordered_map<string, any>> _res;
                  for (auto &cs2 : catalog_sales) {
                    if (cs1["cs_order_number"] == cs2["cs_order_number"] &&
                        cs1["cs_warehouse_sk"] != cs2["cs_warehouse_sk"]) {
                      _res.push_back(cs2);
                    }
                  }
                  return _res;
                })()) &&
                exists(([&]() -> vector<any> {
                  vector<any> _res;
                  for (auto &cr : catalog_returns) {
                    if (cs1["cs_order_number"] ==
                        _cast<unordered_map<string, any>>(
                            cr)["cr_order_number"]) {
                      _res.push_back(cr);
                    }
                  }
                  return _res;
                })()) == false) {
              KeyT _k = GroupKey5{};
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(cs1);
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("order_count"), any(distinct(([&]() -> vector<any> {
                                        vector<any> _res;
                                        for (auto &x : g) {
                                          _res.push_back(
                                              _cast<unordered_map<string, any>>(
                                                  x)["cs_order_number"]);
                                        }
                                        return _res;
                                      })())
                                          .size())},
          {string("total_shipping_cost"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_ext_ship_cost"]);
             }
             return _res;
           })()))},
          {string("total_net_profit"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_net_profit"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(filtered);
  auto test_TPCDS_Q16_shipping = [&]() {
    if (!(filtered ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("order_count"), any(1)},
              {string("total_shipping_cost"), any(5.0)},
              {string("total_net_profit"), any(20.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q16_shipping();
  return 0;
}
