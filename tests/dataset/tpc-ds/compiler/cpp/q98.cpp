// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_item_sk;
  int ss_sold_date_sk;
  float ss_ext_sales_price;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
  std::string i_item_desc;
  std::string i_category;
  std::string i_class;
  float i_current_price;
};
struct DateDim {
  int d_date_sk;
  std::string d_date;
};
struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(1) ss_sold_date_sk;
  decltype(50) ss_ext_sales_price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("I1")) i_item_id;
  decltype(std::string("desc1")) i_item_desc;
  decltype(std::string("CatA")) i_category;
  decltype(std::string("Class1")) i_class;
  decltype(100) i_current_price;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-02-01")) d_date;
};
struct Grouped {
  decltype(i.i_item_id) item_id;
  decltype(i.i_item_desc) item_desc;
  decltype(i.i_category) category;
  decltype(i.i_class) class;
  decltype(i.i_current_price) price;
};
struct __struct5 {
  decltype(ss) ss;
  decltype(i) i;
  decltype(d) d;
};
struct __struct6 {
  Grouped key;
  std::vector<__struct5> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.item_id) i_item_id;
  decltype(std::declval<__struct6>().key.item_desc) i_item_desc;
  decltype(std::declval<__struct6>().key.category) i_category;
  decltype(std::declval<__struct6>().key.class) i_class;
  decltype(std::declval<__struct6>().key.price) i_current_price;
  double itemrevenue;
};
struct __struct8 {
  decltype(std::declval<__struct5>().i_class) key;
  std::vector<__struct5> items;
};
struct Total {
  decltype(std::declval<__struct8>().key) class;
  double total;
};
struct Result {
  decltype(std::declval<__struct5>().i_item_id) i_item_id;
  decltype(std::declval<__struct5>().i_item_desc) i_item_desc;
  decltype(std::declval<__struct5>().i_category) i_category;
  decltype(std::declval<__struct5>().i_class) i_class;
  decltype(std::declval<__struct5>().i_current_price) i_current_price;
  decltype(std::declval<__struct5>().itemrevenue) itemrevenue;
  decltype(((std::declval<__struct5>().itemrevenue * 100) /
            std::declval<__struct5>().total)) revenueratio;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const Total &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"itemrevenue\":";
  __json(v.itemrevenue);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"itemrevenue\":";
  __json(v.itemrevenue);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenueratio\":";
  __json(v.revenueratio);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_desc\":";
  __json(v.item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"category\":";
  __json(v.category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 50},
                                        StoreSale{2, 1, 100}};
  std::vector<Item> item = {
      Item{1, std::string("I1"), std::string("desc1"), std::string("CatA"),
           std::string("Class1"), 100},
      Item{2, std::string("I2"), std::string("desc2"), std::string("CatB"),
           std::string("Class1"), 200}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-02-01")}};
  std::vector<__struct5> grouped = ([&]() {
    std::vector<__struct6> __groups;
    for (auto ss : store_sales) {
      for (auto i : item) {
        if (!((ss.ss_item_sk == i.i_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((ss.ss_sold_date_sk == d.d_date_sk)))
            continue;
          auto __key = Grouped{i.i_item_id, i.i_item_desc, i.i_category,
                               i.i_class, i.i_current_price};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{ss, i, d});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{ss, i, d}}});
          }
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.item_id, g.key.item_desc, g.key.category, g.key.class,
          g.key.price, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct5>().ss_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_ext_sales_price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct5> totals = ([&]() {
    std::vector<__struct8> __groups;
    for (auto g : grouped) {
      auto __key = g.i_class;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct5{g});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct8{__key, std::vector<__struct5>{__struct5{g}}});
      }
    }
    std::vector<Total> __items;
    for (auto &cg : __groups) {
      __items.push_back(
          Total{cg.key, ([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype(std::declval<__struct5>().itemrevenue)>
                      __items;
                  for (auto x : cg.items) {
                    __items.push_back(x.itemrevenue);
                  }
                  return __items;
                })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<
        std::pair<decltype(std::declval<__struct5>().i_category), Result>>
        __items;
    for (auto g : grouped) {
      for (auto t : totals) {
        if (!((g.i_class == t.class)))
          continue;
        __items.push_back({std::vector<decltype(g.i_category)>{
                               g.i_category, g.i_class, g.i_item_id},
                           Result{g.i_item_id, g.i_item_desc, g.i_category,
                                  g.i_class, g.i_current_price, g.itemrevenue,
                                  ((g.itemrevenue * 100) / t.total)}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q98 revenue
  return 0;
}
