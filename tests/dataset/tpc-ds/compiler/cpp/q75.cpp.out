// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 2000}},
          unordered_map<string, int>{{string("d_date_sk"), 2},
                                     {string("d_year"), 2001}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_quantity"), any(50)},
                                     {string("ss_sales_price"), any(500.0)},
                                     {string("ss_sold_date_sk"), any(1)}},
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_quantity"), any(40)},
                                     {string("ss_sales_price"), any(400.0)},
                                     {string("ss_sold_date_sk"), any(2)}}};
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_item_sk"), any(1)},
                                     {string("ws_quantity"), any(30)},
                                     {string("ws_sales_price"), any(300.0)},
                                     {string("ws_sold_date_sk"), any(1)}},
          unordered_map<string, any>{{string("ws_item_sk"), any(1)},
                                     {string("ws_quantity"), any(25)},
                                     {string("ws_sales_price"), any(250.0)},
                                     {string("ws_sold_date_sk"), any(2)}}};
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_item_sk"), any(1)},
                                     {string("cs_quantity"), any(20)},
                                     {string("cs_sales_price"), any(200.0)},
                                     {string("cs_sold_date_sk"), any(1)}},
          unordered_map<string, any>{{string("cs_item_sk"), any(1)},
                                     {string("cs_quantity"), any(15)},
                                     {string("cs_sales_price"), any(150.0)},
                                     {string("cs_sold_date_sk"), any(2)}}};
  vector<unordered_map<string, any>> item =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("i_item_sk"), any(1)},
          {string("i_brand_id"), any(1)},
          {string("i_class_id"), any(2)},
          {string("i_category_id"), any(3)},
          {string("i_manufact_id"), any(4)},
          {string("i_category"), any(string("Electronics"))}}};
  auto sales_detail =
      _concat(_concat(([&]() -> vector<unordered_map<string, any>> {
                        vector<unordered_map<string, any>> _res;
                        for (auto &ss : store_sales) {
                          for (auto &d : date_dim) {
                            if (!(d["d_date_sk"] == ss["ss_sold_date_sk"]))
                              continue;
                            _res.push_back(unordered_map<string, any>{
                                {string("d_year"), any(d["d_year"])},
                                {string("i_item_sk"), any(ss["ss_item_sk"])},
                                {string("quantity"), any(ss["ss_quantity"])},
                                {string("amount"), any(ss["ss_sales_price"])}});
                          }
                        }
                        return _res;
                      })(),
                      ([&]() -> vector<unordered_map<string, any>> {
                        vector<unordered_map<string, any>> _res;
                        for (auto &ws : web_sales) {
                          for (auto &d : date_dim) {
                            if (!(d["d_date_sk"] == ws["ws_sold_date_sk"]))
                              continue;
                            _res.push_back(unordered_map<string, any>{
                                {string("d_year"), any(d["d_year"])},
                                {string("i_item_sk"), any(ws["ws_item_sk"])},
                                {string("quantity"), any(ws["ws_quantity"])},
                                {string("amount"), any(ws["ws_sales_price"])}});
                          }
                        }
                        return _res;
                      })()),
              ([&]() -> vector<unordered_map<string, any>> {
                vector<unordered_map<string, any>> _res;
                for (auto &cs : catalog_sales) {
                  for (auto &d : date_dim) {
                    if (!(d["d_date_sk"] == cs["cs_sold_date_sk"]))
                      continue;
                    _res.push_back(unordered_map<string, any>{
                        {string("d_year"), any(d["d_year"])},
                        {string("i_item_sk"), any(cs["cs_item_sk"])},
                        {string("quantity"), any(cs["cs_quantity"])},
                        {string("amount"), any(cs["cs_sales_price"])}});
                  }
                }
                return _res;
              })());
  struct GroupKey0 {
    any year;
    unordered_map<string, any> brand_id;
    unordered_map<string, any> class_id;
    unordered_map<string, any> category_id;
    unordered_map<string, any> manuf_id;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.year == b.year && a.brand_id == b.brand_id &&
           a.class_id == b.class_id && a.category_id == b.category_id &&
           a.manuf_id == b.manuf_id;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.year);
      _hash_combine(h, k.brand_id);
      _hash_combine(h, k.class_id);
      _hash_combine(h, k.category_id);
      _hash_combine(h, k.manuf_id);
      return h;
    }
  };
  } // namespace std

  auto all_sales = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &sd : sales_detail) {
      for (auto &i : item) {
        if (!(i["i_item_sk"] ==
              _cast<unordered_map<string, any>>(sd)["i_item_sk"]))
          continue;
        if (i["i_category"] == string("Electronics")) {
          KeyT _k = GroupKey0{_cast<unordered_map<string, any>>(sd)["d_year"],
                              i["i_brand_id"], i["i_class_id"],
                              i["i_category_id"], i["i_manufact_id"]};
          if (!groups.count(_k)) {
            groups[_k] = Group{_k, {}};
            order.push_back(_k);
          }
          groups[_k].Items.push_back(sd);
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("d_year"), any(g.key.year)},
          {string("i_brand_id"), any(g.key.brand_id)},
          {string("i_class_id"), any(g.key.class_id)},
          {string("i_category_id"), any(g.key.category_id)},
          {string("i_manufact_id"), any(g.key.manuf_id)},
          {string("sales_cnt"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.sd.quantity);
             }
             return _res;
           })()))},
          {string("sales_amt"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.sd.amount);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto prev_yr = first(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &a : all_sales) {
      if (a["d_year"] == 2000) {
        _res.push_back(a);
      }
    }
    return _res;
  })());
  auto curr_yr = first(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &a : all_sales) {
      if (a["d_year"] == 2001) {
        _res.push_back(a);
      }
    }
    return _res;
  })());
  auto result = ([&]() {
    if ((_cast<unordered_map<string, any>>(curr_yr)["sales_cnt"] /
         _cast<unordered_map<string, any>>(prev_yr)["sales_cnt"]) < 0.9)
      return vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("prev_year"),
           _cast<unordered_map<string, any>>(prev_yr)["d_year"]},
          {string("year"),
           _cast<unordered_map<string, any>>(curr_yr)["d_year"]},
          {string("i_brand_id"),
           _cast<unordered_map<string, any>>(curr_yr)["i_brand_id"]},
          {string("i_class_id"),
           _cast<unordered_map<string, any>>(curr_yr)["i_class_id"]},
          {string("i_category_id"),
           _cast<unordered_map<string, any>>(curr_yr)["i_category_id"]},
          {string("i_manufact_id"),
           _cast<unordered_map<string, any>>(curr_yr)["i_manufact_id"]},
          {string("prev_yr_cnt"),
           _cast<unordered_map<string, any>>(prev_yr)["sales_cnt"]},
          {string("curr_yr_cnt"),
           _cast<unordered_map<string, any>>(curr_yr)["sales_cnt"]},
          {string("sales_cnt_diff"),
           _cast<unordered_map<string, any>>(curr_yr)["sales_cnt"] -
               _cast<unordered_map<string, any>>(prev_yr)["sales_cnt"]},
          {string("sales_amt_diff"),
           _cast<unordered_map<string, any>>(curr_yr)["sales_amt"] -
               _cast<unordered_map<string, any>>(prev_yr)["sales_amt"]}}};
    return vector<int>{};
  })();
  _json(result);
  auto test_TPCDS_Q75_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("prev_year"), any(2000)},
              {string("year"), any(2001)},
              {string("i_brand_id"), any(1)},
              {string("i_class_id"), any(2)},
              {string("i_category_id"), any(3)},
              {string("i_manufact_id"), any(4)},
              {string("prev_yr_cnt"), any(100)},
              {string("curr_yr_cnt"), any(80)},
              {string("sales_cnt_diff"), any(-20)},
              {string("sales_amt_diff"), any(-200.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q75_simplified();
  return 0;
}
