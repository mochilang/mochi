// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct Customer {
  int c_customer_sk;
  string c_customer_id;
  string c_first_name;
  string c_last_name;
};

struct StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  double ss_ext_list_price;
};

struct WebSale {
  int ws_bill_customer_sk;
  int ws_sold_date_sk;
  double ws_ext_list_price;
};

int main() {
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("c_customer_sk"), any(1)},
          {string("c_customer_id"), any(string("C1"))},
          {string("c_first_name"), any(string("John"))},
          {string("c_last_name"), any(string("Doe"))}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_customer_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(1998)},
                                     {string("ss_ext_list_price"), any(60.0)}},
          unordered_map<string, any>{{string("ss_customer_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(1999)},
                                     {string("ss_ext_list_price"), any(90.0)}}};
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_bill_customer_sk"), any(1)},
                                     {string("ws_sold_date_sk"), any(1998)},
                                     {string("ws_ext_list_price"), any(50.0)}},
          unordered_map<string, any>{
              {string("ws_bill_customer_sk"), any(1)},
              {string("ws_sold_date_sk"), any(1999)},
              {string("ws_ext_list_price"), any(150.0)}}};
  auto ss98 = _sum(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      if (ss["ss_sold_date_sk"] == 1998) {
        _res.push_back(ss["ss_ext_list_price"]);
      }
    }
    return _res;
  })());
  auto ss99 = _sum(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      if (ss["ss_sold_date_sk"] == 1999) {
        _res.push_back(ss["ss_ext_list_price"]);
      }
    }
    return _res;
  })());
  auto ws98 = _sum(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      if (ws["ws_sold_date_sk"] == 1998) {
        _res.push_back(ws["ws_ext_list_price"]);
      }
    }
    return _res;
  })());
  auto ws99 = _sum(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      if (ws["ws_sold_date_sk"] == 1999) {
        _res.push_back(ws["ws_ext_list_price"]);
      }
    }
    return _res;
  })());
  bool growth_ok = ws98 > 0 && ss98 > 0 && (ws99 / ws98) > (ss99 / ss98);
  auto result = ([&]() {
    if (growth_ok)
      return vector<unordered_map<string, string>>{
          unordered_map<string, string>{
              {string("customer_id"), string("C1")},
              {string("customer_first_name"), string("John")},
              {string("customer_last_name"), string("Doe")}}};
    return vector<int>{};
  })();
  _json(result);
  auto test_TPCDS_Q11_growth = [&]() {
    if (!(result ==
          vector<unordered_map<string, string>>{unordered_map<string, string>{
              {string("customer_id"), string("C1")},
              {string("customer_first_name"), string("John")},
              {string("customer_last_name"), string("Doe")}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q11_growth();
  return 0;
}
