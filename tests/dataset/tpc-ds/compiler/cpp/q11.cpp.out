// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  int c_customer_sk;
  std::string c_customer_id;
  std::string c_first_name;
  std::string c_last_name;
};
struct StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  float ss_ext_list_price;
};
struct WebSale {
  int ws_bill_customer_sk;
  int ws_sold_date_sk;
  float ws_ext_list_price;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("C1")) c_customer_id;
  decltype(std::string("John")) c_first_name;
  decltype(std::string("Doe")) c_last_name;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1998) ss_sold_date_sk;
  decltype(60) ss_ext_list_price;
};
struct WebSale {
  decltype(1) ws_bill_customer_sk;
  decltype(1998) ws_sold_date_sk;
  decltype(50) ws_ext_list_price;
};
struct Result {
  decltype(std::string("C1")) customer_id;
  decltype(std::string("John")) customer_first_name;
  decltype(std::string("Doe")) customer_last_name;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_list_price\":";
  __json(v.ss_ext_list_price);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_list_price\":";
  __json(v.ws_ext_list_price);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_id\":";
  __json(v.customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_first_name\":";
  __json(v.customer_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_last_name\":";
  __json(v.customer_last_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_list_price\":";
  __json(v.ss_ext_list_price);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_list_price\":";
  __json(v.ws_ext_list_price);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {
      Customer{1, std::string("C1"), std::string("John"), std::string("Doe")}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1998, 60},
                                        StoreSale{1, 1999, 90}};
  std::vector<WebSale> web_sales = {WebSale{1, 1998, 50},
                                    WebSale{1, 1999, 150}};
  auto ss98 = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ss.ss_ext_list_price)> __items;
    for (auto ss : store_sales) {
      if (!((ss.ss_sold_date_sk == 1998)))
        continue;
      __items.push_back(ss.ss_ext_list_price);
    }
    return __items;
  })());
  auto ss99 = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ss.ss_ext_list_price)> __items;
    for (auto ss : store_sales) {
      if (!((ss.ss_sold_date_sk == 1999)))
        continue;
      __items.push_back(ss.ss_ext_list_price);
    }
    return __items;
  })());
  auto ws98 = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ws.ws_ext_list_price)> __items;
    for (auto ws : web_sales) {
      if (!((ws.ws_sold_date_sk == 1998)))
        continue;
      __items.push_back(ws.ws_ext_list_price);
    }
    return __items;
  })());
  auto ws99 = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ws.ws_ext_list_price)> __items;
    for (auto ws : web_sales) {
      if (!((ws.ws_sold_date_sk == 1999)))
        continue;
      __items.push_back(ws.ws_ext_list_price);
    }
    return __items;
  })());
  auto growth_ok =
      (((ws98 > 0) && (ss98 > 0)) && (((ws99 / ws98)) > ((ss99 / ss98))));
  auto result =
      (growth_ok
           ? std::vector<Result>{Result{std::string("C1"), std::string("John"),
                                        std::string("Doe")}}
           : std::vector<int>{});
  (__json(result));
  // test TPCDS Q11 growth
  return 0;
}
