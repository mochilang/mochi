// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_date;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) s_store_sk;
  decltype(100) ss_ext_sales_price;
  decltype(10) ss_net_profit;
};
struct StoreReturn {
  decltype(1) sr_returned_date_sk;
  decltype(1) s_store_sk;
  decltype(5) sr_return_amt;
  decltype(1) sr_net_loss;
};
struct CatalogSale {
  decltype(1) cs_sold_date_sk;
  decltype(1) cs_call_center_sk;
  decltype(150) cs_ext_sales_price;
  decltype(15) cs_net_profit;
};
struct CatalogReturn {
  decltype(1) cr_returned_date_sk;
  decltype(1) cr_call_center_sk;
  decltype(7) cr_return_amount;
  decltype(3) cr_net_loss;
};
struct WebSale {
  decltype(1) ws_sold_date_sk;
  decltype(1) ws_web_page_sk;
  decltype(200) ws_ext_sales_price;
  decltype(20) ws_net_profit;
};
struct WebReturn {
  decltype(1) wr_returned_date_sk;
  decltype(1) wr_web_page_sk;
  decltype(10) wr_return_amt;
  decltype(2) wr_net_loss;
};
struct S {
  decltype(ss) ss;
  decltype(d) d;
};
struct __struct9 {
  decltype(std::declval<S>().s_store_sk) key;
  std::vector<S> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key) s_store_sk;
  double sales;
  double profit;
};
struct Sr {
  decltype(sr) sr;
  decltype(d) d;
};
struct __struct12 {
  decltype(std::declval<Sr>().s_store_sk) key;
  std::vector<Sr> items;
};
struct __struct13 {
  decltype(std::declval<__struct12>().key) s_store_sk;
  double returns;
  double profit_loss;
};
struct C {
  decltype(cs) cs;
  decltype(d) d;
};
struct __struct15 {
  decltype(std::declval<C>().cs_call_center_sk) key;
  std::vector<C> items;
};
struct __struct16 {
  decltype(std::declval<__struct15>().key) cs_call_center_sk;
  double sales;
  double profit;
};
struct Cr {
  decltype(cr) cr;
  decltype(d) d;
};
struct __struct18 {
  decltype(std::declval<Cr>().cr_call_center_sk) key;
  std::vector<Cr> items;
};
struct __struct19 {
  decltype(std::declval<__struct18>().key) cr_call_center_sk;
  double returns;
  double profit_loss;
};
struct W {
  decltype(ws) ws;
  decltype(d) d;
};
struct __struct21 {
  decltype(std::declval<W>().ws_web_page_sk) key;
  std::vector<W> items;
};
struct __struct22 {
  decltype(std::declval<__struct21>().key) wp_web_page_sk;
  double sales;
  double profit;
};
struct Wr {
  decltype(wr) wr;
  decltype(d) d;
};
struct __struct24 {
  decltype(std::declval<Wr>().wr_web_page_sk) key;
  std::vector<Wr> items;
};
struct __struct25 {
  decltype(std::declval<__struct24>().key) wp_web_page_sk;
  double returns;
  double profit_loss;
};
struct PerChannel {
  decltype(std::string("store channel")) channel;
  decltype(std::declval<S>().s_store_sk) id;
  decltype(std::declval<S>().sales) sales;
  bool returns;
  bool profit;
};
struct Result {
  decltype(std::declval<PerChannel>().channel) channel;
  decltype(std::declval<PerChannel>().id) id;
};
struct __struct28 {
  Result key;
  std::vector<PerChannel> items;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  std::cout << "}";
}
inline void __json(const PerChannel &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returns\":";
  __json(v.returns);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const __struct19 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_call_center_sk\":";
  __json(v.cr_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returns\":";
  __json(v.returns);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit_loss\":";
  __json(v.profit_loss);
  std::cout << "}";
}
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_returned_date_sk\":";
  __json(v.cr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_call_center_sk\":";
  __json(v.cr_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_return_amount\":";
  __json(v.cr_return_amount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_net_loss\":";
  __json(v.cr_net_loss);
  std::cout << "}";
}
inline void __json(const __struct16 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_net_profit\":";
  __json(v.cs_net_profit);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const __struct13 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returns\":";
  __json(v.returns);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit_loss\":";
  __json(v.profit_loss);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_amt\":";
  __json(v.sr_return_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_net_loss\":";
  __json(v.sr_net_loss);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const Cr &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr\":";
  __json(v.cr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const C &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const Sr &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr\":";
  __json(v.sr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const S &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const Wr &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr\":";
  __json(v.wr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const W &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws\":";
  __json(v.ws);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const __struct25 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wp_web_page_sk\":";
  __json(v.wp_web_page_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returns\":";
  __json(v.returns);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit_loss\":";
  __json(v.profit_loss);
  std::cout << "}";
}
inline void __json(const __struct22 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wp_web_page_sk\":";
  __json(v.wp_web_page_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const WebReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_returned_date_sk\":";
  __json(v.wr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_web_page_sk\":";
  __json(v.wr_web_page_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_return_amt\":";
  __json(v.wr_return_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_net_loss\":";
  __json(v.wr_net_loss);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_web_page_sk\":";
  __json(v.ws_web_page_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_net_profit\":";
  __json(v.ws_net_profit);
  std::cout << "}";
}
int main() {
  std::vector<DateDim> date_dim = {DateDim{1, 1}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 100, 10}};
  std::vector<StoreReturn> store_returns = {StoreReturn{1, 1, 5, 1}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1, 150, 15}};
  std::vector<CatalogReturn> catalog_returns = {CatalogReturn{1, 1, 7, 3}};
  std::vector<WebSale> web_sales = {WebSale{1, 1, 200, 20}};
  std::vector<WebReturn> web_returns = {WebReturn{1, 1, 10, 2}};
  std::vector<S> ss = ([&]() {
    std::vector<__struct9> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == ss.ss_sold_date_sk)))
          continue;
        auto __key = ss.s_store_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(S{ss, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct9{__key, std::vector<S>{S{ss, d}}});
        }
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<S>().ss.ss_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_ext_sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<S>().ss.ss_net_profit)> __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Sr> sr = ([&]() {
    std::vector<__struct12> __groups;
    for (auto sr : store_returns) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == sr.sr_returned_date_sk)))
          continue;
        auto __key = sr.s_store_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(Sr{sr, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct12{__key, std::vector<Sr>{Sr{sr, d}}});
        }
      }
    }
    std::vector<__struct13> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct13{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Sr>().sr.sr_return_amt)> __items;
            for (auto x : g.items) {
              __items.push_back(x.sr.sr_return_amt);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Sr>().sr.sr_net_loss)> __items;
            for (auto x : g.items) {
              __items.push_back(x.sr.sr_net_loss);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<C> cs = ([&]() {
    std::vector<__struct15> __groups;
    for (auto cs : catalog_sales) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == cs.cs_sold_date_sk)))
          continue;
        auto __key = cs.cs_call_center_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(C{cs, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct15{__key, std::vector<C>{C{cs, d}}});
        }
      }
    }
    std::vector<__struct16> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct16{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<C>().cs.cs_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.cs.cs_ext_sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<C>().cs.cs_net_profit)> __items;
            for (auto x : g.items) {
              __items.push_back(x.cs.cs_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Cr> cr = ([&]() {
    std::vector<__struct18> __groups;
    for (auto cr : catalog_returns) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == cr.cr_returned_date_sk)))
          continue;
        auto __key = cr.cr_call_center_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(Cr{cr, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct18{__key, std::vector<Cr>{Cr{cr, d}}});
        }
      }
    }
    std::vector<__struct19> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct19{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Cr>().cr.cr_return_amount)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.cr.cr_return_amount);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Cr>().cr.cr_net_loss)> __items;
            for (auto x : g.items) {
              __items.push_back(x.cr.cr_net_loss);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<W> ws = ([&]() {
    std::vector<__struct21> __groups;
    for (auto ws : web_sales) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == ws.ws_sold_date_sk)))
          continue;
        auto __key = ws.ws_web_page_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(W{ws, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct21{__key, std::vector<W>{W{ws, d}}});
        }
      }
    }
    std::vector<__struct22> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct22{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<W>().ws.ws_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ws.ws_ext_sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<W>().ws.ws_net_profit)> __items;
            for (auto x : g.items) {
              __items.push_back(x.ws.ws_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Wr> wr = ([&]() {
    std::vector<__struct24> __groups;
    for (auto wr : web_returns) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == wr.wr_returned_date_sk)))
          continue;
        auto __key = wr.wr_web_page_sk;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(Wr{wr, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct24{__key, std::vector<Wr>{Wr{wr, d}}});
        }
      }
    }
    std::vector<__struct25> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct25{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wr>().wr.wr_return_amt)> __items;
            for (auto x : g.items) {
              __items.push_back(x.wr.wr_return_amt);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wr>().wr.wr_net_loss)> __items;
            for (auto x : g.items) {
              __items.push_back(x.wr.wr_net_loss);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<PerChannel> per_channel =
      concat(([&]() {
               std::vector<PerChannel> __items;
               for (auto s : ss) {
                 {
                   bool __matched0 = false;
                   for (auto r : sr) {
                     if (!((s.s_store_sk == r.s_store_sk)))
                       continue;
                     __matched0 = true;
                     __items.push_back(PerChannel{
                         std::string("store channel"), s.s_store_sk, s.sales,
                         ((r == nullptr) ? 0 : r.returns),
                         (s.profit - (((r == nullptr) ? 0 : r.profit_loss)))});
                   }
                   if (!__matched0) {
                     auto r = std::decay_t<decltype(*(sr).begin())>{};
                     __items.push_back(PerChannel{
                         std::string("store channel"), s.s_store_sk, s.sales,
                         ((r == nullptr) ? 0 : r.returns),
                         (s.profit - (((r == nullptr) ? 0 : r.profit_loss)))});
                   }
                 }
               }
               return __items;
             })(),
             ([&]() {
               std::vector<PerChannel> __items;
               for (auto c : cs) {
                 for (auto r : cr) {
                   if (!((c.cs_call_center_sk == r.cr_call_center_sk)))
                     continue;
                   __items.push_back(PerChannel{
                       std::string("catalog channel"), c.cs_call_center_sk,
                       c.sales, r.returns, (c.profit - r.profit_loss)});
                 }
               }
               return __items;
             })(),
             ([&]() {
               std::vector<PerChannel> __items;
               for (auto w : ws) {
                 {
                   bool __matched0 = false;
                   for (auto r : wr) {
                     if (!((w.wp_web_page_sk == r.wp_web_page_sk)))
                       continue;
                     __matched0 = true;
                     __items.push_back(PerChannel{
                         std::string("web channel"), w.wp_web_page_sk, w.sales,
                         ((r == nullptr) ? 0 : r.returns),
                         (w.profit - (((r == nullptr) ? 0 : r.profit_loss)))});
                   }
                   if (!__matched0) {
                     auto r = std::decay_t<decltype(*(wr).begin())>{};
                     __items.push_back(PerChannel{
                         std::string("web channel"), w.wp_web_page_sk, w.sales,
                         ((r == nullptr) ? 0 : r.returns),
                         (w.profit - (((r == nullptr) ? 0 : r.profit_loss)))});
                   }
                 }
               }
               return __items;
             })());
  std::vector<PerChannel> result = ([&]() {
    std::vector<__struct28> __groups;
    for (auto p : per_channel) {
      auto __key = Result{p.channel, p.id};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(PerChannel{p});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct28{__key, std::vector<PerChannel>{PerChannel{p}}});
      }
    }
    std::vector<
        std::pair<decltype(std::declval<__struct28>().key.channel), PerChannel>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {g.key.channel,
           PerChannel{
               g.key.channel, g.key.id, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<PerChannel>().p.sales)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.p.sales);
                 }
                 return __items;
               })()),
               ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<PerChannel>().p.returns)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.p.returns);
                 }
                 return __items;
               })()),
               ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<PerChannel>().p.profit)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.p.profit);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<PerChannel> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q77 simplified
  return 0;
}
