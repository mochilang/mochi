// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_ticket_number"), 1},
                                     {string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_store_sk"), 1},
                                     {string("ss_hdemo_sk"), 1}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_dom"), 1},
                                     {string("d_year"), 1998}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("s_store_sk"), any(1)},
                                 {string("s_county"), any(string("A"))}}};
  vector<unordered_map<string, any>> household_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("hd_demo_sk"), any(1)},
          {string("hd_buy_potential"), any(string("1001-5000"))},
          {string("hd_vehicle_count"), any(2)},
          {string("hd_dep_count"), any(3)}}};
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("c_customer_sk"), any(1)},
          {string("c_last_name"), any(string("Smith"))},
          {string("c_first_name"), any(string("Alice"))},
          {string("c_salutation"), any(string("Ms."))},
          {string("c_preferred_cust_flag"), any(string("Y"))}}};
  struct GroupKey0 {
    unordered_map<string, int> ticket;
    unordered_map<string, int> cust;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.ticket == b.ticket && a.cust == b.cust;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.ticket);
      _hash_combine(h, k.cust);
      return h;
    }
  };
  } // namespace std

  auto groups = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, int>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ss : store_sales) {
      for (auto &d : date_dim) {
        if (!(d["d_date_sk"] == ss["ss_sold_date_sk"]))
          continue;
        for (auto &s : store) {
          if (!(s["s_store_sk"] == ss["ss_store_sk"]))
            continue;
          for (auto &hd : household_demographics) {
            if (!(hd["hd_demo_sk"] == ss["ss_hdemo_sk"]))
              continue;
            if (d["d_dom"] >= 1 && d["d_dom"] <= 2 &&
                (hd["hd_buy_potential"] == string("1001-5000") ||
                 hd["hd_buy_potential"] == string("0-500")) &&
                hd["hd_vehicle_count"] > 0 &&
                hd["hd_dep_count"] / hd["hd_vehicle_count"] > 1 &&
                (d["d_year"] == 1998 || d["d_year"] == 1999 ||
                 d["d_year"] == 2000) &&
                s["s_county"] == string("A")) {
              KeyT _k = GroupKey0{ss["ss_ticket_number"], ss["ss_customer_sk"]};
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(ss);
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("key"), any(g.key)}, {string("cnt"), any(_count(g))}});
    }
    return _res;
  })();
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<pair<unordered_map<string, unordered_map<string, any>>,
                    unordered_map<string, unordered_map<string, any>>>>
            _tmp;
        for (auto &g : groups) {
          for (auto &c : customer) {
            if (!(c["c_customer_sk"] == g.key.cust))
              continue;
            if (g["cnt"] >= 1 && g["cnt"] <= 5) {
              _tmp.push_back({vector<unordered_map<string, any>>{
                                  -g["cnt"], c["c_last_name"]},
                              unordered_map<string, unordered_map<string, any>>{
                                  {string("c_last_name"), c["c_last_name"]},
                                  {string("c_first_name"), c["c_first_name"]},
                                  {string("c_salutation"), c["c_salutation"]},
                                  {string("c_preferred_cust_flag"),
                                   c["c_preferred_cust_flag"]},
                                  {string("ss_ticket_number"), g.key.ticket},
                                  {string("cnt"), g["cnt"]}}});
            }
          }
        }
        std::sort(_tmp.begin(), _tmp.end(), [](const auto &a, const auto &b) {
          return a.first < b.first;
        });
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        _res.reserve(_tmp.size());
        for (auto &_it : _tmp)
          _res.push_back(_it.second);
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q73_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("c_last_name"), any(string("Smith"))},
              {string("c_first_name"), any(string("Alice"))},
              {string("c_salutation"), any(string("Ms."))},
              {string("c_preferred_cust_flag"), any(string("Y"))},
              {string("ss_ticket_number"), any(1)},
              {string("cnt"), any(1)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q73_simplified();
  return 0;
}
