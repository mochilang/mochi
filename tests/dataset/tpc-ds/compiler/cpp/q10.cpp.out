// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  int c_current_cdemo_sk;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_county;
};

struct CustomerDemographics {
  int cd_demo_sk;
  string cd_gender;
  string cd_marital_status;
  string cd_education_status;
  int cd_purchase_estimate;
  string cd_credit_rating;
  int cd_dep_count;
  int cd_dep_employed_count;
  int cd_dep_college_count;
};

struct StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
};

struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};

int main() {
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("c_customer_sk"), 1},
                                     {string("c_current_addr_sk"), 1},
                                     {string("c_current_cdemo_sk"), 1}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("ca_address_sk"), any(1)},
          {string("ca_county"), any(string("CountyA"))}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cd_demo_sk"), any(1)},
          {string("cd_gender"), any(string("F"))},
          {string("cd_marital_status"), any(string("M"))},
          {string("cd_education_status"), any(string("College"))},
          {string("cd_purchase_estimate"), any(5000)},
          {string("cd_credit_rating"), any(string("Good"))},
          {string("cd_dep_count"), any(1)},
          {string("cd_dep_employed_count"), any(1)},
          {string("cd_dep_college_count"), any(0)}}};
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("ss_customer_sk"), 1}, {string("ss_sold_date_sk"), 1}}};
  vector<any> web_sales = vector<any>{};
  vector<any> catalog_sales = vector<any>{};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 2000},
                                     {string("d_moy"), 2}}};
  auto active = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &c : customer) {
      for (auto &ca : customer_address) {
        if (!(c["c_current_addr_sk"] == ca["ca_address_sk"] &&
              ca["ca_county"] == string("CountyA")))
          continue;
        for (auto &cd : customer_demographics) {
          if (!(c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))
            continue;
          if (exists(([&]() -> vector<unordered_map<string, int>> {
                vector<unordered_map<string, int>> _res;
                for (auto &ss : store_sales) {
                  for (auto &d : date_dim) {
                    if (!(ss["ss_sold_date_sk"] == d["d_date_sk"]))
                      continue;
                    if (ss["ss_customer_sk"] == c["c_customer_sk"] &&
                        d["d_year"] == 2000 && d["d_moy"] >= 2 &&
                        d["d_moy"] <= 5) {
                      _res.push_back(ss);
                    }
                  }
                }
                return _res;
              })())) {
            _res.push_back(cd);
          }
        }
      }
    }
    return _res;
  })();
  struct GroupKey5 {
    unordered_map<string, any> gender;
    unordered_map<string, any> marital;
    unordered_map<string, any> education;
    unordered_map<string, any> purchase;
    unordered_map<string, any> credit;
    unordered_map<string, any> dep;
    unordered_map<string, any> depemp;
    unordered_map<string, any> depcol;
  };
  inline bool operator==(const GroupKey5 &a, const GroupKey5 &b) {
    return a.gender == b.gender && a.marital == b.marital &&
           a.education == b.education && a.purchase == b.purchase &&
           a.credit == b.credit && a.dep == b.dep && a.depemp == b.depemp &&
           a.depcol == b.depcol;
  }
  namespace std {
  template <> struct hash<GroupKey5> {
    size_t operator()(const GroupKey5 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.gender);
      _hash_combine(h, k.marital);
      _hash_combine(h, k.education);
      _hash_combine(h, k.purchase);
      _hash_combine(h, k.credit);
      _hash_combine(h, k.dep);
      _hash_combine(h, k.depemp);
      _hash_combine(h, k.depcol);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = active;
    auto _groups = _group_by(_src, [&](auto &a) {
      return GroupKey5{a["cd_gender"],
                       a["cd_marital_status"],
                       a["cd_education_status"],
                       a["cd_purchase_estimate"],
                       a["cd_credit_rating"],
                       a["cd_dep_count"],
                       a["cd_dep_employed_count"],
                       a["cd_dep_college_count"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("cd_gender"), any(g.key.gender)},
          {string("cd_marital_status"), any(g.key.marital)},
          {string("cd_education_status"), any(g.key.education)},
          {string("cnt1"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("cd_purchase_estimate"), any(g.key.purchase)},
          {string("cnt2"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("cd_credit_rating"), any(g.key.credit)},
          {string("cnt3"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("cd_dep_count"), any(g.key.dep)},
          {string("cnt4"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("cd_dep_employed_count"), any(g.key.depemp)},
          {string("cnt5"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("cd_dep_college_count"), any(g.key.depcol)},
          {string("cnt6"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q10_demographics_count = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("cd_gender"), any(string("F"))},
              {string("cd_marital_status"), any(string("M"))},
              {string("cd_education_status"), any(string("College"))},
              {string("cnt1"), any(1)},
              {string("cd_purchase_estimate"), any(5000)},
              {string("cnt2"), any(1)},
              {string("cd_credit_rating"), any(string("Good"))},
              {string("cnt3"), any(1)},
              {string("cd_dep_count"), any(1)},
              {string("cnt4"), any(1)},
              {string("cd_dep_employed_count"), any(1)},
              {string("cnt5"), any(1)},
              {string("cd_dep_college_count"), any(0)},
              {string("cnt6"), any(1)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q10_demographics_count();
  return 0;
}
