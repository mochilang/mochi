// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:28Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  int c_current_cdemo_sk;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_county;
};
struct CustomerDemographics {
  int cd_demo_sk;
  std::string cd_gender;
  std::string cd_marital_status;
  std::string cd_education_status;
  int cd_purchase_estimate;
  std::string cd_credit_rating;
  int cd_dep_count;
  int cd_dep_employed_count;
  int cd_dep_college_count;
};
struct StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
};
struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
  decltype(1) c_current_cdemo_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CountyA")) ca_county;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("F")) cd_gender;
  decltype(std::string("M")) cd_marital_status;
  decltype(std::string("College")) cd_education_status;
  decltype(5000) cd_purchase_estimate;
  decltype(std::string("Good")) cd_credit_rating;
  decltype(1) cd_dep_count;
  decltype(1) cd_dep_employed_count;
  decltype(0) cd_dep_college_count;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
  decltype(2) d_moy;
};
struct Result {
  decltype(a.cd_gender) gender;
  decltype(a.cd_marital_status) marital;
  decltype(a.cd_education_status) education;
  decltype(a.cd_purchase_estimate) purchase;
  decltype(a.cd_credit_rating) credit;
  decltype(a.cd_dep_count) dep;
  decltype(a.cd_dep_employed_count) depemp;
  decltype(a.cd_dep_college_count) depcol;
};
struct __struct7 {
  decltype(a) a;
};
struct __struct8 {
  Result key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key.gender) cd_gender;
  decltype(std::declval<__struct8>().key.marital) cd_marital_status;
  decltype(std::declval<__struct8>().key.education) cd_education_status;
  int cnt1;
  decltype(std::declval<__struct8>().key.purchase) cd_purchase_estimate;
  int cnt2;
  decltype(std::declval<__struct8>().key.credit) cd_credit_rating;
  int cnt3;
  decltype(std::declval<__struct8>().key.dep) cd_dep_count;
  int cnt4;
  decltype(std::declval<__struct8>().key.depemp) cd_dep_employed_count;
  int cnt5;
  decltype(std::declval<__struct8>().key.depcol) cd_dep_college_count;
  int cnt6;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  std::cout << "}";
}
inline void __json(const CustomerDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_purchase_estimate\":";
  __json(v.cd_purchase_estimate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_credit_rating\":";
  __json(v.cd_credit_rating);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_employed_count\":";
  __json(v.cd_dep_employed_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_college_count\":";
  __json(v.cd_dep_college_count);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_purchase_estimate\":";
  __json(v.cd_purchase_estimate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_credit_rating\":";
  __json(v.cd_credit_rating);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_employed_count\":";
  __json(v.cd_dep_employed_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_college_count\":";
  __json(v.cd_dep_college_count);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt1\":";
  __json(v.cnt1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_purchase_estimate\":";
  __json(v.cd_purchase_estimate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt2\":";
  __json(v.cnt2);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_credit_rating\":";
  __json(v.cd_credit_rating);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt3\":";
  __json(v.cnt3);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt4\":";
  __json(v.cnt4);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_employed_count\":";
  __json(v.cd_dep_employed_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt5\":";
  __json(v.cnt5);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_college_count\":";
  __json(v.cd_dep_college_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt6\":";
  __json(v.cnt6);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"gender\":";
  __json(v.gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"marital\":";
  __json(v.marital);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"education\":";
  __json(v.education);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"purchase\":";
  __json(v.purchase);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"credit\":";
  __json(v.credit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dep\":";
  __json(v.dep);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"depemp\":";
  __json(v.depemp);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"depcol\":";
  __json(v.depcol);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"a\":";
  __json(v.a);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {Customer{1, 1, 1}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CountyA")}};
  std::vector<CustomerDemographic> customer_demographics = {CustomerDemographic{
      1, std::string("F"), std::string("M"), std::string("College"), 5000,
      std::string("Good"), 1, 1, 0}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1}};
  std::vector<int> web_sales = {};
  std::vector<int> catalog_sales = {};
  std::vector<DateDim> date_dim = {DateDim{1, 2000, 2}};
  auto active = ([&]() {
    std::vector<decltype(cd)> __items;
    for (auto c : customer) {
      for (auto ca : customer_address) {
        if (!(((c.c_current_addr_sk == ca.ca_address_sk) &&
               (ca.ca_county == std::string("CountyA")))))
          continue;
        for (auto cd : customer_demographics) {
          if (!((c.c_current_cdemo_sk == cd.cd_demo_sk)))
            continue;
          if (!((!([&]() {
                    std::vector<decltype(ss)> __items;
                    for (auto ss : store_sales) {
                      for (auto d : date_dim) {
                        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
                          continue;
                        if (!(((((ss.ss_customer_sk == c.c_customer_sk) &&
                                 (d.d_year == 2000)) &&
                                (d.d_moy >= 2)) &&
                               (d.d_moy <= 5))))
                          continue;
                        __items.push_back(ss);
                      }
                    }
                    return __items;
                  })()
                      .empty())))
            continue;
          __items.push_back(cd);
        }
      }
    }
    return __items;
  })();
  std::vector<__struct7> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto a : active) {
      auto __key = Result{a.cd_gender,
                          a.cd_marital_status,
                          a.cd_education_status,
                          a.cd_purchase_estimate,
                          a.cd_credit_rating,
                          a.cd_dep_count,
                          a.cd_dep_employed_count,
                          a.cd_dep_college_count};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct7{a});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct8{__key, std::vector<__struct7>{__struct7{a}}});
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{g.key.gender, g.key.marital, g.key.education,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size()),
                                  g.key.purchase,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size()),
                                  g.key.credit,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size()),
                                  g.key.dep,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size()),
                                  g.key.depemp,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size()),
                                  g.key.depcol,
                                  ((int)([&]() {
                                     std::vector<__struct7> __items;
                                     for (auto _ : g.items) {
                                       __items.push_back(_);
                                     }
                                     return __items;
                                   })()
                                       .size())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q10 demographics count
  return 0;
}
