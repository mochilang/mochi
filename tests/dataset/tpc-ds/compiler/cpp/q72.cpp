// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  decltype(1) cs_item_sk;
  decltype(1) cs_order_number;
  decltype(1) cs_quantity;
  decltype(1) cs_sold_date_sk;
  decltype(3) cs_ship_date_sk;
  decltype(1) cs_bill_cdemo_sk;
  decltype(1) cs_bill_hdemo_sk;
  decltype(nullptr) cs_promo_sk;
};
struct Inventory {
  decltype(1) inv_item_sk;
  decltype(1) inv_warehouse_sk;
  decltype(2) inv_date_sk;
  decltype(0) inv_quantity_on_hand;
};
struct Warehouse {
  decltype(1) w_warehouse_sk;
  decltype(std::string("Main")) w_warehouse_name;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ItemA")) i_item_desc;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("M")) cd_marital_status;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(std::string("5001-10000")) hd_buy_potential;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(10) d_week_seq;
  decltype(1) d_date;
  decltype(2000) d_year;
};
struct Result {
  decltype(i.i_item_desc) item_desc;
  decltype(w.w_warehouse_name) warehouse;
  decltype(d1.d_week_seq) week_seq;
};
struct __struct9 {
  decltype(cs) cs;
  decltype(inv) inv;
  decltype(w) w;
  decltype(i) i;
  decltype(cd) cd;
  decltype(hd) hd;
  decltype(d1) d1;
  decltype(d2) d2;
  decltype(d3) d3;
};
struct __struct10 {
  Result key;
  std::vector<__struct9> items;
};
struct __struct11 {
  decltype(std::declval<__struct10>().key.item_desc) i_item_desc;
  decltype(std::declval<__struct10>().key.warehouse) w_warehouse_name;
  decltype(std::declval<__struct10>().key.week_seq) d_week_seq;
  int no_promo;
  int promo;
  int total_cnt;
};
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_order_number\":";
  __json(v.cs_order_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_date_sk\":";
  __json(v.cs_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_cdemo_sk\":";
  __json(v.cs_bill_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_hdemo_sk\":";
  __json(v.cs_bill_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_promo_sk\":";
  __json(v.cs_promo_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_week_seq\":";
  __json(v.d_week_seq);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_buy_potential\":";
  __json(v.hd_buy_potential);
  std::cout << "}";
}
inline void __json(const __struct11 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_week_seq\":";
  __json(v.d_week_seq);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"no_promo\":";
  __json(v.no_promo);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"promo\":";
  __json(v.promo);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_cnt\":";
  __json(v.total_cnt);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_warehouse_sk\":";
  __json(v.inv_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_desc\":";
  __json(v.item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"warehouse\":";
  __json(v.warehouse);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"week_seq\":";
  __json(v.week_seq);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv\":";
  __json(v.inv);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w\":";
  __json(v.w);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd\":";
  __json(v.cd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd\":";
  __json(v.hd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d1\":";
  __json(v.d1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d2\":";
  __json(v.d2);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d3\":";
  __json(v.d3);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_sk\":";
  __json(v.w_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {
      CatalogSale{1, 1, 1, 1, 3, 1, 1, nullptr}};
  std::vector<Inventory> inventory = {Inventory{1, 1, 2, 0}};
  std::vector<Warehouse> warehouse = {Warehouse{1, std::string("Main")}};
  std::vector<Item> item = {Item{1, std::string("ItemA")}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("M")}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, std::string("5001-10000")}};
  std::vector<DateDim> date_dim = {DateDim{1, 10, 1, 2000},
                                   DateDim{2, 10, 1, 2000},
                                   DateDim{3, 10, 7, 2000}};
  std::vector<__struct9> result = ([&]() {
    std::vector<__struct10> __groups;
    for (auto cs : catalog_sales) {
      for (auto inv : inventory) {
        if (!((inv.inv_item_sk == cs.cs_item_sk)))
          continue;
        for (auto w : warehouse) {
          if (!((w.w_warehouse_sk == inv.inv_warehouse_sk)))
            continue;
          for (auto i : item) {
            if (!((i.i_item_sk == cs.cs_item_sk)))
              continue;
            for (auto cd : customer_demographics) {
              if (!((cd.cd_demo_sk == cs.cs_bill_cdemo_sk)))
                continue;
              for (auto hd : household_demographics) {
                if (!((hd.hd_demo_sk == cs.cs_bill_hdemo_sk)))
                  continue;
                for (auto d1 : date_dim) {
                  if (!((d1.d_date_sk == cs.cs_sold_date_sk)))
                    continue;
                  for (auto d2 : date_dim) {
                    if (!((d2.d_date_sk == inv.inv_date_sk)))
                      continue;
                    for (auto d3 : date_dim) {
                      if (!((d3.d_date_sk == cs.cs_ship_date_sk)))
                        continue;
                      if (!(((((((d1.d_week_seq == d2.d_week_seq) &&
                                 (inv.inv_quantity_on_hand < cs.cs_quantity)) &&
                                (d3.d_date > (d1.d_date + 5))) &&
                               (hd.hd_buy_potential ==
                                std::string("5001-10000"))) &&
                              (d1.d_year == 2000)) &&
                             (cd.cd_marital_status == std::string("M")))))
                        continue;
                      auto __key = Result{i.i_item_desc, w.w_warehouse_name,
                                          d1.d_week_seq};
                      bool __found = false;
                      for (auto &__g : __groups) {
                        if (__g.key == __key) {
                          __g.items.push_back(
                              __struct9{cs, inv, w, i, cd, hd, d1, d2, d3});
                          __found = true;
                          break;
                        }
                      }
                      if (!__found) {
                        __groups.push_back(__struct10{
                            __key, std::vector<__struct9>{__struct9{
                                       cs, inv, w, i, cd, hd, d1, d2, d3}}});
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    std::vector<__struct11> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct11{g.key.item_desc, g.key.warehouse,
                                   g.key.week_seq,
                                   ((int)([&]() {
                                      std::vector<__struct9> __items;
                                      for (auto x : g.items) {
                                        if (!((x.cs_promo_sk == nullptr)))
                                          continue;
                                        __items.push_back(x);
                                      }
                                      return __items;
                                    })()
                                        .size()),
                                   ((int)([&]() {
                                      std::vector<__struct9> __items;
                                      for (auto x : g.items) {
                                        if (!((x.cs_promo_sk != nullptr)))
                                          continue;
                                        __items.push_back(x);
                                      }
                                      return __items;
                                    })()
                                        .size()),
                                   ((int)g.items.size())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q72 simplified
  return 0;
}
