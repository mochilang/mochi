// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  int cs_item_sk;
  int cs_sold_date_sk;
  float cs_ext_sales_price;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
  std::string i_item_desc;
  std::string i_category;
  std::string i_class;
  float i_current_price;
};
struct DateDim {
  int d_date_sk;
  std::string d_date;
};
struct CatalogSale {
  decltype(1) cs_item_sk;
  decltype(1) cs_sold_date_sk;
  decltype(100) cs_ext_sales_price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ITEM1")) i_item_id;
  decltype(std::string("Item One")) i_item_desc;
  decltype(std::string("A")) i_category;
  decltype(std::string("X")) i_class;
  decltype(10) i_current_price;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-02-10")) d_date;
};
struct Filtered {
  decltype(i.i_item_id) id;
  decltype(i.i_item_desc) desc;
  decltype(i.i_category) cat;
  decltype(i.i_class) class;
  decltype(i.i_current_price) price;
};
struct __struct5 {
  decltype(cs) cs;
  decltype(i) i;
  decltype(d) d;
};
struct __struct6 {
  Filtered key;
  std::vector<__struct5> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.id) i_item_id;
  decltype(std::declval<__struct6>().key.desc) i_item_desc;
  decltype(std::declval<__struct6>().key.cat) i_category;
  decltype(std::declval<__struct6>().key.class) i_class;
  decltype(std::declval<__struct6>().key.price) i_current_price;
  double itemrevenue;
};
struct __struct8 {
  decltype(std::declval<__struct5>().i_class) key;
  std::vector<__struct5> items;
};
struct ClassTotal {
  decltype(std::declval<__struct8>().key) class;
  double total;
};
struct Result {
  decltype(std::declval<__struct5>().i_item_id) i_item_id;
  decltype(std::declval<__struct5>().i_item_desc) i_item_desc;
  decltype(std::declval<__struct5>().i_category) i_category;
  decltype(std::declval<__struct5>().i_class) i_class;
  decltype(std::declval<__struct5>().i_current_price) i_current_price;
  decltype(std::declval<__struct5>().itemrevenue) itemrevenue;
  decltype((((std::declval<__struct5>().itemrevenue * 100)) /
            std::declval<__struct5>().total)) revenueratio;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const ClassTotal &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"itemrevenue\":";
  __json(v.itemrevenue);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"itemrevenue\":";
  __json(v.itemrevenue);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenueratio\":";
  __json(v.revenueratio);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"desc\":";
  __json(v.desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {
      CatalogSale{1, 1, 100}, CatalogSale{1, 1, 200}, CatalogSale{2, 1, 150},
      CatalogSale{1, 2, 300}, CatalogSale{2, 2, 150}, CatalogSale{3, 1, 50}};
  std::vector<Item> item = {
      Item{1, std::string("ITEM1"), std::string("Item One"), std::string("A"),
           std::string("X"), 10},
      Item{2, std::string("ITEM2"), std::string("Item Two"), std::string("A"),
           std::string("X"), 20},
      Item{3, std::string("ITEM3"), std::string("Item Three"), std::string("D"),
           std::string("Y"), 15}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-02-10")},
                                   DateDim{2, std::string("2000-02-20")}};
  std::vector<__struct5> filtered = ([&]() {
    std::vector<__struct6> __groups;
    for (auto cs : catalog_sales) {
      for (auto i : item) {
        if (!((cs.cs_item_sk == i.i_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((cs.cs_sold_date_sk == d.d_date_sk)))
            continue;
          if (!((((std::find(
                       std::vector<std::string>{
                           std::string("A"), std::string("B"), std::string("C")}
                           .begin(),
                       std::vector<std::string>{
                           std::string("A"), std::string("B"), std::string("C")}
                           .end(),
                       i.i_category) !=
                   std::vector<std::string>{std::string("A"), std::string("B"),
                                            std::string("C")}
                       .end()) &&
                  (d.d_date >= std::string("2000-02-01"))) &&
                 (d.d_date <= std::string("2000-03-02")))))
            continue;
          auto __key = Filtered{i.i_item_id, i.i_item_desc, i.i_category,
                                i.i_class, i.i_current_price};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{cs, i, d});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{cs, i, d}}});
          }
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.id, g.key.desc, g.key.cat, g.key.class, g.key.price,
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct5>().cs_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.cs_ext_sales_price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct5> class_totals = ([&]() {
    std::vector<__struct8> __groups;
    for (auto f : filtered) {
      auto __key = f.i_class;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct5{f});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct8{__key, std::vector<__struct5>{__struct5{f}}});
      }
    }
    std::vector<ClassTotal> __items;
    for (auto &g : __groups) {
      __items.push_back(ClassTotal{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct5>().itemrevenue)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.itemrevenue);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<
        std::pair<decltype(std::declval<__struct5>().i_category), Result>>
        __items;
    for (auto f : filtered) {
      for (auto t : class_totals) {
        if (!((f.i_class == t.class)))
          continue;
        __items.push_back(
            {std::vector<decltype(f.i_category)>{f.i_category, f.i_class,
                                                 f.i_item_id, f.i_item_desc},
             Result{f.i_item_id, f.i_item_desc, f.i_category, f.i_class,
                    f.i_current_price, f.itemrevenue,
                    (((f.itemrevenue * 100)) / t.total)}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q20 revenue ratio
  return 0;
}
