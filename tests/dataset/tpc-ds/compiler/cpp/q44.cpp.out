// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(1) ss_store_sk;
  decltype(5) ss_net_profit;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ItemA")) i_product_name;
};
struct GroupedBase {
  decltype(ss) ss;
};
struct __struct4 {
  decltype(std::declval<GroupedBase>().ss_item_sk) key;
  std::vector<GroupedBase> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct5 {
  decltype(std::declval<__struct4>().key) item_sk;
  double avg_profit;
};
struct Result {
  decltype(best_name) best_performing;
  decltype(worst_name) worst_performing;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"best_performing\":";
  __json(v.best_performing);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"worst_performing\":";
  __json(v.worst_performing);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_product_name\":";
  __json(v.i_product_name);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_profit\":";
  __json(v.avg_profit);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const GroupedBase &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 5}, StoreSale{1, 1, 5},
                                        StoreSale{2, 1, -1}};
  std::vector<Item> item = {Item{1, std::string("ItemA")},
                            Item{2, std::string("ItemB")}};
  std::vector<GroupedBase> grouped_base = (([&]() {
    std::vector<__struct4> __groups;
    for (auto ss : store_sales) {
      auto __key = ss.ss_item_sk;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(GroupedBase{ss});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct4{__key, std::vector<GroupedBase>{GroupedBase{ss}}});
      }
    }
    std::vector<__struct5> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct5{
          g.key, __avg(([&]() {
            std::vector<decltype(std::declval<GroupedBase>().ss_net_profit)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })());
  std::vector<GroupedBase> grouped = grouped_base;
  auto best = first(([&]() {
    std::vector<std::pair<decltype(std::declval<GroupedBase>().avg_profit),
                          GroupedBase>>
        __items;
    for (auto x : grouped) {
      __items.push_back({(-x.avg_profit), x});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<GroupedBase> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })());
  auto worst = first(([&]() {
    std::vector<std::pair<decltype(std::declval<GroupedBase>().avg_profit),
                          GroupedBase>>
        __items;
    for (auto x : grouped) {
      __items.push_back({x.avg_profit, x});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<GroupedBase> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })());
  auto best_name = first(([&]() {
    std::vector<decltype(i.i_product_name)> __items;
    for (auto i : item) {
      if (!((i.i_item_sk == best.item_sk)))
        continue;
      __items.push_back(i.i_product_name);
    }
    return __items;
  })());
  auto worst_name = first(([&]() {
    std::vector<decltype(i.i_product_name)> __items;
    for (auto i : item) {
      if (!((i.i_item_sk == worst.item_sk)))
        continue;
      __items.push_back(i.i_product_name);
    }
    return __items;
  })());
  auto result = Result{best_name, worst_name};
  (__json(result));
  // test TPCDS Q44 simplified
  return 0;
}
