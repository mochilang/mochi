// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_store_sk"), any(1)},
                                     {string("ss_net_profit"), any(5.0)}},
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_store_sk"), any(1)},
                                     {string("ss_net_profit"), any(5.0)}},
          unordered_map<string, any>{{string("ss_item_sk"), any(2)},
                                     {string("ss_store_sk"), any(1)},
                                     {string("ss_net_profit"), any(-1.0)}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{
          {string("i_item_sk"), any(1)},
          {string("i_product_name"), any(string("ItemA"))}},
      unordered_map<string, any>{
          {string("i_item_sk"), any(2)},
          {string("i_product_name"), any(string("ItemB"))}}};
  auto grouped_base = (([&]() -> vector<unordered_map<string, any>> {
    auto _src = store_sales;
    auto _groups = _group_by(_src, [&](auto &ss) { return ss["ss_item_sk"]; });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("item_sk"), any(g.key)},
          {string("avg_profit"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ss_net_profit"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })());
  vector<unordered_map<string, any>> grouped = grouped_base;
  auto best = first(([&]() -> vector<unordered_map<string, any>> {
    vector<pair<unordered_map<string, any>, unordered_map<string, any>>> _tmp;
    for (auto &x : grouped) {
      _tmp.push_back({-x["avg_profit"], x});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<unordered_map<string, any>> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })());
  auto worst = first(([&]() -> vector<unordered_map<string, any>> {
    vector<pair<unordered_map<string, any>, unordered_map<string, any>>> _tmp;
    for (auto &x : grouped) {
      _tmp.push_back({x["avg_profit"], x});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<unordered_map<string, any>> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })());
  auto best_name = first(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &i : item) {
      if (i["i_item_sk"] ==
          _cast<unordered_map<string, any>>(best)["item_sk"]) {
        _res.push_back(i["i_product_name"]);
      }
    }
    return _res;
  })());
  auto worst_name = first(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &i : item) {
      if (i["i_item_sk"] ==
          _cast<unordered_map<string, any>>(worst)["item_sk"]) {
        _res.push_back(i["i_product_name"]);
      }
    }
    return _res;
  })());
  unordered_map<string, any> result =
      unordered_map<string, any>{{string("best_performing"), best_name},
                                 {string("worst_performing"), worst_name}};
  _json(result);
  auto test_TPCDS_Q44_simplified = [&]() {
    if (!(result == unordered_map<string, string>{
                        {string("best_performing"), string("ItemA")},
                        {string("worst_performing"), string("ItemB")}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q44_simplified();
  return 0;
}
