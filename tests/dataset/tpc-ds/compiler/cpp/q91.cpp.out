// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CallCenter {
  int cc_call_center_sk;
  string cc_call_center_id;
  string cc_name;
  string cc_manager;
};

struct CatalogReturn {
  int cr_call_center_sk;
  int cr_returned_date_sk;
  int cr_returning_customer_sk;
  double cr_net_loss;
};

struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};

struct Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_hdemo_sk;
  int c_current_addr_sk;
};

struct CustomerAddress {
  int ca_address_sk;
  int ca_gmt_offset;
};

struct CustomerDemographics {
  int cd_demo_sk;
  string cd_marital_status;
  string cd_education_status;
};

struct HouseholdDemographics {
  int hd_demo_sk;
  string hd_buy_potential;
};

int main() {
  vector<unordered_map<string, any>> call_center =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cc_call_center_sk"), any(1)},
          {string("cc_call_center_id"), any(string("CC1"))},
          {string("cc_name"), any(string("Main"))},
          {string("cc_manager"), any(string("Alice"))}}};
  vector<unordered_map<string, any>> catalog_returns =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cr_call_center_sk"), any(1)},
          {string("cr_returned_date_sk"), any(1)},
          {string("cr_returning_customer_sk"), any(1)},
          {string("cr_net_loss"), any(10.0)}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 2001},
                                     {string("d_moy"), 5}}};
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("c_customer_sk"), 1},
                                     {string("c_current_cdemo_sk"), 1},
                                     {string("c_current_hdemo_sk"), 1},
                                     {string("c_current_addr_sk"), 1}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cd_demo_sk"), any(1)},
          {string("cd_marital_status"), any(string("M"))},
          {string("cd_education_status"), any(string("Unknown"))}}};
  vector<unordered_map<string, any>> household_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("hd_demo_sk"), any(1)},
          {string("hd_buy_potential"), any(string("1001-5000"))}}};
  vector<unordered_map<string, int>> customer_address =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("ca_address_sk"), 1}, {string("ca_gmt_offset"), -6}}};
  struct GroupKey7 {
    unordered_map<string, any> id;
    unordered_map<string, any> name;
    unordered_map<string, any> mgr;
  };
  inline bool operator==(const GroupKey7 &a, const GroupKey7 &b) {
    return a.id == b.id && a.name == b.name && a.mgr == b.mgr;
  }
  namespace std {
  template <> struct hash<GroupKey7> {
    size_t operator()(const GroupKey7 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.name);
      _hash_combine(h, k.mgr);
      return h;
    }
  };
  } // namespace std

  auto result = first(([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey7;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cc : call_center) {
      for (auto &cr : catalog_returns) {
        if (!(cc["cc_call_center_sk"] == cr["cr_call_center_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(cr["cr_returned_date_sk"] == d["d_date_sk"]))
            continue;
          for (auto &c : customer) {
            if (!(cr["cr_returning_customer_sk"] == c["c_customer_sk"]))
              continue;
            for (auto &cd : customer_demographics) {
              if (!(c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))
                continue;
              for (auto &hd : household_demographics) {
                if (!(c["c_current_hdemo_sk"] == hd["hd_demo_sk"]))
                  continue;
                for (auto &ca : customer_address) {
                  if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
                    continue;
                  if (d["d_year"] == 2001 && d["d_moy"] == 5 &&
                      cd["cd_marital_status"] == string("M") &&
                      cd["cd_education_status"] == string("Unknown") &&
                      hd["hd_buy_potential"] == string("1001-5000") &&
                      ca["ca_gmt_offset"] == (-6)) {
                    KeyT _k = GroupKey7{cc["cc_call_center_id"], cc["cc_name"],
                                        cc["cc_manager"]};
                    if (!groups.count(_k)) {
                      groups[_k] = Group{_k, {}};
                      order.push_back(_k);
                    }
                    groups[_k].Items.push_back(cc);
                  }
                }
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("Call_Center"), any(g.key.id)},
          {string("Call_Center_Name"), any(g.key.name)},
          {string("Manager"), any(g.key.mgr)},
          {string("Returns_Loss"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cr_net_loss"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })());
  _json(result);
  auto test_TPCDS_Q91_returns = [&]() {
    if (!(result == unordered_map<string, any>{
                        {string("Call_Center"), any(string("CC1"))},
                        {string("Call_Center_Name"), any(string("Main"))},
                        {string("Manager"), any(string("Alice"))},
                        {string("Returns_Loss"), any(10.0)}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q91_returns();
  return 0;
}
