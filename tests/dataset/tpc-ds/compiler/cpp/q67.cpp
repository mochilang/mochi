// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) reason;
  decltype(40) price;
};
struct Reason {
  decltype(1) id;
  decltype(std::string("PROMO")) name;
};
inline void __json(const Reason &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"reason\":";
  __json(v.reason);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 40}, StoreSale{2, 27}};
  std::vector<Reason> reason = {Reason{1, std::string("PROMO")},
                                Reason{2, std::string("RETURN")}};
  auto result = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ss.price)> __items;
    for (auto ss : store_sales) {
      for (auto r : reason) {
        if (!((ss.reason == r.id)))
          continue;
        if (!((std::find(std::vector<std::string>{std::string("PROMO"),
                                                  std::string("RETURN")}
                             .begin(),
                         std::vector<std::string>{std::string("PROMO"),
                                                  std::string("RETURN")}
                             .end(),
                         r.name) !=
               std::vector<std::string>{std::string("PROMO"),
                                        std::string("RETURN")}
                   .end())))
          continue;
        __items.push_back(ss.price);
      }
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q67 simplified
  return 0;
}
