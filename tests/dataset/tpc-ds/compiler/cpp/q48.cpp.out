// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cdemo_sk"), any(1)},
                                     {string("addr_sk"), any(1)},
                                     {string("sold_date_sk"), any(1)},
                                     {string("sales_price"), any(120.0)},
                                     {string("net_profit"), any(1000.0)},
                                     {string("quantity"), any(5)}},
          unordered_map<string, any>{{string("cdemo_sk"), any(2)},
                                     {string("addr_sk"), any(2)},
                                     {string("sold_date_sk"), any(1)},
                                     {string("sales_price"), any(60.0)},
                                     {string("net_profit"), any(2000.0)},
                                     {string("quantity"), any(10)}},
          unordered_map<string, any>{{string("cdemo_sk"), any(3)},
                                     {string("addr_sk"), any(3)},
                                     {string("sold_date_sk"), any(1)},
                                     {string("sales_price"), any(170.0)},
                                     {string("net_profit"), any(10000.0)},
                                     {string("quantity"), any(20)}}};
  vector<unordered_map<string, int>> store = vector<unordered_map<string, int>>{
      unordered_map<string, int>{{string("s_store_sk"), 1}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(1)},
              {string("cd_marital_status"), any(string("S"))},
              {string("cd_education_status"), any(string("E1"))}},
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(2)},
              {string("cd_marital_status"), any(string("M"))},
              {string("cd_education_status"), any(string("E2"))}},
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(3)},
              {string("cd_marital_status"), any(string("W"))},
              {string("cd_education_status"), any(string("E3"))}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("ca_address_sk"), any(1)},
              {string("ca_country"), any(string("United States"))},
              {string("ca_state"), any(string("TX"))}},
          unordered_map<string, any>{
              {string("ca_address_sk"), any(2)},
              {string("ca_country"), any(string("United States"))},
              {string("ca_state"), any(string("CA"))}},
          unordered_map<string, any>{
              {string("ca_address_sk"), any(3)},
              {string("ca_country"), any(string("United States"))},
              {string("ca_state"), any(string("NY"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 2000}}};
  int year = 2000;
  vector<string> states1 = vector<string>{string("TX")};
  vector<string> states2 = vector<string>{string("CA")};
  vector<string> states3 = vector<string>{string("NY")};
  auto qty_base = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      for (auto &cd : customer_demographics) {
        if (!(ss["cdemo_sk"] == cd["cd_demo_sk"]))
          continue;
        for (auto &ca : customer_address) {
          if (!(ss["addr_sk"] == ca["ca_address_sk"]))
            continue;
          for (auto &d : date_dim) {
            if (!(ss["sold_date_sk"] == d["d_date_sk"]))
              continue;
            if (d["d_year"] == year &&
                ((cd["cd_marital_status"] == string("S") &&
                  cd["cd_education_status"] == string("E1") &&
                  ss["sales_price"] >= 100.0 && ss["sales_price"] <= 150.0) ||
                 (cd["cd_marital_status"] == string("M") &&
                  cd["cd_education_status"] == string("E2") &&
                  ss["sales_price"] >= 50.0 && ss["sales_price"] <= 100.0) ||
                 (cd["cd_marital_status"] == string("W") &&
                  cd["cd_education_status"] == string("E3") &&
                  ss["sales_price"] >= 150.0 && ss["sales_price"] <= 200.0)) &&
                (((find(states1.begin(), states1.end(), ca["ca_state"]) !=
                   states1.end()) &&
                  ss["net_profit"] >= 0 && ss["net_profit"] <= 2000) ||
                 ((find(states2.begin(), states2.end(), ca["ca_state"]) !=
                   states2.end()) &&
                  ss["net_profit"] >= 150 && ss["net_profit"] <= 3000) ||
                 ((find(states3.begin(), states3.end(), ca["ca_state"]) !=
                   states3.end()) &&
                  ss["net_profit"] >= 50 && ss["net_profit"] <= 25000))) {
              _res.push_back(ss["quantity"]);
            }
          }
        }
      }
    }
    return _res;
  })();
  vector<any> qty = qty_base;
  auto result = _sum(qty);
  _json(result);
  auto test_TPCDS_Q48_simplified = [&]() {
    if (!(result == 35)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q48_simplified();
  return 0;
}
