// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:33Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) cdemo_sk;
  decltype(1) addr_sk;
  decltype(1) sold_date_sk;
  decltype(120) sales_price;
  decltype(1000) net_profit;
  decltype(5) quantity;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("S")) cd_marital_status;
  decltype(std::string("E1")) cd_education_status;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("United States")) ca_country;
  decltype(std::string("TX")) ca_state;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
};
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cdemo_sk\":";
  __json(v.cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"addr_sk\":";
  __json(v.addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date_sk\":";
  __json(v.sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_price\":";
  __json(v.sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"net_profit\":";
  __json(v.net_profit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"quantity\":";
  __json(v.quantity);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 120, 1000, 5},
                                        StoreSale{2, 2, 1, 60, 2000, 10},
                                        StoreSale{3, 3, 1, 170, 10000, 20}};
  std::vector<std::string> store =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("s_store_sk"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("s_store_sk"), 1}}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("S"), std::string("E1")},
      CustomerDemographic{2, std::string("M"), std::string("E2")},
      CustomerDemographic{3, std::string("W"), std::string("E3")}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("United States"), std::string("TX")},
      CustomerAddres{2, std::string("United States"), std::string("CA")},
      CustomerAddres{3, std::string("United States"), std::string("NY")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000}};
  auto year = 2000;
  std::vector<std::string> states1 = {std::string("TX")};
  std::vector<std::string> states2 = {std::string("CA")};
  std::vector<std::string> states3 = {std::string("NY")};
  auto qty_base = ([&]() {
    std::vector<decltype(ss.quantity)> __items;
    for (auto ss : store_sales) {
      for (auto cd : customer_demographics) {
        if (!((ss.cdemo_sk == cd.cd_demo_sk)))
          continue;
        for (auto ca : customer_address) {
          if (!((ss.addr_sk == ca.ca_address_sk)))
            continue;
          for (auto d : date_dim) {
            if (!((ss.sold_date_sk == d.d_date_sk)))
              continue;
            if (!((((d.d_year == year) &&
                    ((((((((cd.cd_marital_status == std::string("S")) &&
                           (cd.cd_education_status == std::string("E1"))) &&
                          (ss.sales_price >= 100)) &&
                         (ss.sales_price <= 150))) ||
                       (((((cd.cd_marital_status == std::string("M")) &&
                           (cd.cd_education_status == std::string("E2"))) &&
                          (ss.sales_price >= 50)) &&
                         (ss.sales_price <= 100)))) ||
                      (((((cd.cd_marital_status == std::string("W")) &&
                          (cd.cd_education_status == std::string("E3"))) &&
                         (ss.sales_price >= 150)) &&
                        (ss.sales_price <= 200)))))) &&
                   (((((((std::find(states1.begin(), states1.end(),
                                    ca.ca_state) != states1.end()) &&
                         (ss.net_profit >= 0)) &&
                        (ss.net_profit <= 2000))) ||
                      ((((std::find(states2.begin(), states2.end(),
                                    ca.ca_state) != states2.end()) &&
                         (ss.net_profit >= 150)) &&
                        (ss.net_profit <= 3000)))) ||
                     ((((std::find(states3.begin(), states3.end(),
                                   ca.ca_state) != states3.end()) &&
                        (ss.net_profit >= 50)) &&
                       (ss.net_profit <= 25000))))))))
              continue;
            __items.push_back(ss.quantity);
          }
        }
      }
    }
    return __items;
  })();
  auto qty = qty_base;
  auto result =
      ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(qty);
  (__json(result));
  // test TPCDS Q48 simplified
  return 0;
}
