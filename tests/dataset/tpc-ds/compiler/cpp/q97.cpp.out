// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct StoreSale {
  int ss_customer_sk;
  int ss_item_sk;
};

struct CatalogSale {
  int cs_bill_customer_sk;
  int cs_item_sk;
};

int main() {
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 2},
                                     {string("ss_item_sk"), 1}}};
  vector<unordered_map<string, int>> catalog_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("cs_bill_customer_sk"), 1},
                                     {string("cs_item_sk"), 1}},
          unordered_map<string, int>{{string("cs_bill_customer_sk"), 3},
                                     {string("cs_item_sk"), 2}}};
  struct GroupKey2 {
    unordered_map<string, int> customer_sk;
    unordered_map<string, int> item_sk;
  };
  inline bool operator==(const GroupKey2 &a, const GroupKey2 &b) {
    return a.customer_sk == b.customer_sk && a.item_sk == b.item_sk;
  }
  namespace std {
  template <> struct hash<GroupKey2> {
    size_t operator()(const GroupKey2 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.customer_sk);
      _hash_combine(h, k.item_sk);
      return h;
    }
  };
  } // namespace std

  auto ssci = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = store_sales;
    auto _groups = _group_by(_src, [&](auto &ss) {
      return GroupKey2{ss["ss_customer_sk"], ss["ss_item_sk"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("customer_sk"), any(g.key.customer_sk)},
          {string("item_sk"), any(g.key.item_sk)}});
    }
    return _res;
  })();
  struct GroupKey3 {
    unordered_map<string, int> customer_sk;
    unordered_map<string, int> item_sk;
  };
  inline bool operator==(const GroupKey3 &a, const GroupKey3 &b) {
    return a.customer_sk == b.customer_sk && a.item_sk == b.item_sk;
  }
  namespace std {
  template <> struct hash<GroupKey3> {
    size_t operator()(const GroupKey3 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.customer_sk);
      _hash_combine(h, k.item_sk);
      return h;
    }
  };
  } // namespace std

  auto csci = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = catalog_sales;
    auto _groups = _group_by(_src, [&](auto &cs) {
      return GroupKey3{cs["cs_bill_customer_sk"], cs["cs_item_sk"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("customer_sk"), any(g.key.customer_sk)},
          {string("item_sk"), any(g.key.item_sk)}});
    }
    return _res;
  })();
  auto joined = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &s : ssci) {
      for (auto &c : csci) {
        if (!(s["customer_sk"] == c["customer_sk"] &&
              s["item_sk"] == c["item_sk"]))
          continue;
        _res.push_back(unordered_map<string, any>{
            {string("store_only"), any(([&]() {
               if (s["customer_sk"] != &&(c == || c["customer_sk"] ==))
                 return 1;
               return 0;
             })())},
            {string("catalog_only"), any(([&]() {
               if ((s == || s["customer_sk"] ==) && c != &&c["customer_sk"] !=)
                 return 1;
               return 0;
             })())},
            {string("both"), any(([&]() {
               if (s["customer_sk"] != &&c != &&c["customer_sk"] !=)
                 return 1;
               return 0;
             })())}});
      }
    }
    return _res;
  })();
  unordered_map<string, any> result = unordered_map<string, any>{
      {string("store_only"),
       any(_sum(([&]() -> vector<unordered_map<string, int>> {
         vector<unordered_map<string, int>> _res;
         for (auto &x : joined) {
           _res.push_back(x["store_only"]);
         }
         return _res;
       })()))},
      {string("catalog_only"),
       any(_sum(([&]() -> vector<unordered_map<string, int>> {
         vector<unordered_map<string, int>> _res;
         for (auto &x : joined) {
           _res.push_back(x["catalog_only"]);
         }
         return _res;
       })()))},
      {string("store_and_catalog"),
       any(_sum(([&]() -> vector<unordered_map<string, int>> {
         vector<unordered_map<string, int>> _res;
         for (auto &x : joined) {
           _res.push_back(x["both"]);
         }
         return _res;
       })()))}};
  _json(result);
  auto test_TPCDS_Q97_overlap = [&]() {
    if (!(result["store_only"] == 1 && result["catalog_only"] == 1 &&
          result["store_and_catalog"] == 1)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q97_overlap();
  return 0;
}
