// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_customer_sk;
  int ss_item_sk;
};
struct CatalogSale {
  int cs_bill_customer_sk;
  int cs_item_sk;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_item_sk;
};
struct CatalogSale {
  decltype(1) cs_bill_customer_sk;
  decltype(1) cs_item_sk;
};
struct Ssci {
  decltype(ss.ss_customer_sk) customer_sk;
  decltype(ss.ss_item_sk) item_sk;
};
struct __struct4 {
  decltype(ss) ss;
};
struct __struct5 {
  Ssci key;
  std::vector<__struct4> items;
};
struct Csci {
  decltype(cs) cs;
};
struct __struct7 {
  Ssci key;
  std::vector<Csci> items;
};
struct Result {
  decltype(store_only) store_only;
  decltype(catalog_only) catalog_only;
  decltype(both) store_and_catalog;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  std::cout << "}";
}
inline void __json(const Ssci &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_sk\":";
  __json(v.customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_only\":";
  __json(v.store_only);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_only\":";
  __json(v.catalog_only);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_and_catalog\":";
  __json(v.store_and_catalog);
  std::cout << "}";
}
inline void __json(const Csci &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  std::cout << "}";
}
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1}, StoreSale{2, 1}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1},
                                            CatalogSale{3, 2}};
  std::vector<__struct4> ssci = ([&]() {
    std::vector<__struct5> __groups;
    for (auto ss : store_sales) {
      auto __key = Ssci{ss.ss_customer_sk, ss.ss_item_sk};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct4{ss});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct5{__key, std::vector<__struct4>{__struct4{ss}}});
      }
    }
    std::vector<Ssci> __items;
    for (auto &g : __groups) {
      __items.push_back(Ssci{g.key.customer_sk, g.key.item_sk});
    }
    return __items;
  })();
  std::vector<Csci> csci = ([&]() {
    std::vector<__struct7> __groups;
    for (auto cs : catalog_sales) {
      auto __key = Ssci{cs.cs_bill_customer_sk, cs.cs_item_sk};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Csci{cs});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct7{__key, std::vector<Csci>{Csci{cs}}});
      }
    }
    std::vector<Ssci> __items;
    for (auto &g : __groups) {
      __items.push_back(Ssci{g.key.customer_sk, g.key.item_sk});
    }
    return __items;
  })();
  std::vector<int> both = ((int)([&]() {
                             std::vector<decltype(1)> __items;
                             for (auto s : ssci) {
                               for (auto c : csci) {
                                 if (!(((s.customer_sk == c.customer_sk) &&
                                        (s.item_sk == c.item_sk))))
                                   continue;
                                 __items.push_back(1);
                               }
                             }
                             return __items;
                           })()
                               .size());
  std::vector<int> store_only =
      ((int)([&]() {
         std::vector<decltype(1)> __items;
         for (auto s : ssci) {
           if (!((!(std::any_of(csci.begin(), csci.end(), [&](auto c) {
                 return ((s.customer_sk == c.customer_sk) &&
                         (s.item_sk == c.item_sk));
               })))))
             continue;
           __items.push_back(1);
         }
         return __items;
       })()
           .size());
  std::vector<int> catalog_only =
      ((int)([&]() {
         std::vector<decltype(1)> __items;
         for (auto c : csci) {
           if (!((!(std::any_of(ssci.begin(), ssci.end(), [&](auto s) {
                 return ((s.customer_sk == c.customer_sk) &&
                         (s.item_sk == c.item_sk));
               })))))
             continue;
           __items.push_back(1);
         }
         return __items;
       })()
           .size());
  auto result = Result{store_only, catalog_only, both};
  (__json(result));
  // test TPCDS Q97 overlap
  return 0;
}
