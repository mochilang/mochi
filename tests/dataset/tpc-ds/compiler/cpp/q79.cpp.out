// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_dow;
  decltype(1999) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CityA")) s_city;
  decltype(250) s_number_employees;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(2) hd_dep_count;
  decltype(1) hd_vehicle_count;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_ticket_number;
  decltype(1) ss_customer_sk;
  decltype(1) ss_hdemo_sk;
  decltype(5) ss_coupon_amt;
  decltype(10) ss_net_profit;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("Smith")) c_last_name;
  decltype(std::string("Alice")) c_first_name;
};
struct Agg {
  decltype(ss.ss_ticket_number) ticket;
  decltype(ss.ss_customer_sk) customer_sk;
  decltype(s.s_city) city;
};
struct __struct7 {
  decltype(ss) ss;
  decltype(d) d;
  decltype(s) s;
  decltype(hd) hd;
};
struct __struct8 {
  Agg key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key) key;
  double amt;
  double profit;
};
struct Result {
  decltype(c.c_last_name) c_last_name;
  decltype(c.c_first_name) c_first_name;
  decltype(std::declval<__struct7>().key.city) s_city;
  decltype(std::declval<__struct7>().key.ticket) ss_ticket_number;
  decltype(std::declval<__struct7>().amt) amt;
  decltype(std::declval<__struct7>().profit) profit;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_city\":";
  __json(v.s_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_dow\":";
  __json(v.d_dow);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_vehicle_count\":";
  __json(v.hd_vehicle_count);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"key\":";
  __json(v.key);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_city\":";
  __json(v.s_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_number_employees\":";
  __json(v.s_number_employees);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const Agg &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ticket\":";
  __json(v.ticket);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_sk\":";
  __json(v.customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"city\":";
  __json(v.city);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd\":";
  __json(v.hd);
  std::cout << "}";
}
int main() {
  std::vector<DateDim> date_dim = {DateDim{1, 1, 1999}};
  std::vector<Store> store = {Store{1, std::string("CityA"), 250}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 2, 1}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 1, 5, 10}};
  std::vector<Customer> customer = {
      Customer{1, std::string("Smith"), std::string("Alice")}};
  std::vector<__struct7> agg = ([&]() {
    std::vector<__struct8> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == ss.ss_sold_date_sk)))
          continue;
        for (auto s : store) {
          if (!((s.s_store_sk == ss.ss_store_sk)))
            continue;
          for (auto hd : household_demographics) {
            if (!((hd.hd_demo_sk == ss.ss_hdemo_sk)))
              continue;
            if (!((((((((hd.hd_dep_count == 2) || (hd.hd_vehicle_count > 1))) &&
                      (d.d_dow == 1)) &&
                     ((((d.d_year == 1998) || (d.d_year == 1999)) ||
                       (d.d_year == 2000)))) &&
                    (s.s_number_employees >= 200)) &&
                   (s.s_number_employees <= 295))))
              continue;
            auto __key = Agg{ss.ss_ticket_number, ss.ss_customer_sk, s.s_city};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct7{ss, d, s, hd});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct8{
                  __key, std::vector<__struct7>{__struct7{ss, d, s, hd}}});
            }
          }
        }
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct7>().ss.ss_coupon_amt)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_coupon_amt);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct7>().ss.ss_net_profit)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<__struct7>().key), Result>>
        __items;
    for (auto a : agg) {
      for (auto c : customer) {
        if (!((c.c_customer_sk == a.key.customer_sk)))
          continue;
        __items.push_back(
            {std::vector<decltype(c.c_last_name)>{c.c_last_name, c.c_first_name,
                                                  a.key.city, a.profit},
             Result{c.c_last_name, c.c_first_name, a.key.city, a.key.ticket,
                    a.amt, a.profit}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q79 simplified
  return 0;
}
