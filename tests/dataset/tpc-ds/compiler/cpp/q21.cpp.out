// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:31Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Inventory {
  int inv_item_sk;
  int inv_warehouse_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
};
struct Warehouse {
  int w_warehouse_sk;
  std::string w_warehouse_name;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
};
struct DateDim {
  int d_date_sk;
  std::string d_date;
};
struct Inventory {
  decltype(1) inv_item_sk;
  decltype(1) inv_warehouse_sk;
  decltype(1) inv_date_sk;
  decltype(30) inv_quantity_on_hand;
};
struct Warehouse {
  decltype(1) w_warehouse_sk;
  decltype(std::string("Main")) w_warehouse_name;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ITEM1")) i_item_id;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-03-01")) d_date;
};
struct Before {
  decltype(inv.inv_warehouse_sk) w;
  decltype(inv.inv_item_sk) i;
};
struct __struct6 {
  decltype(inv) inv;
  decltype(d) d;
};
struct __struct7 {
  Before key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.w) w;
  decltype(std::declval<__struct7>().key.i) i;
  double qty;
};
struct __struct6 {
  decltype(inv) inv;
  decltype(d) d;
};
struct __struct9 {
  Before key;
  std::vector<__struct6> items;
};
struct Joined {
  decltype(w.w_warehouse_name) w_name;
  decltype(it.i_item_id) i_id;
  decltype(std::declval<__struct6>().qty) before_qty;
  decltype(std::declval<__struct6>().qty) after_qty;
  decltype((std::declval<__struct6>().qty /
            std::declval<__struct6>().qty)) ratio;
};
struct Result {
  decltype(std::declval<Joined>().w_name) w_warehouse_name;
  decltype(std::declval<Joined>().i_id) i_item_id;
  decltype(std::declval<Joined>().before_qty) inv_before;
  decltype(std::declval<Joined>().after_qty) inv_after;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_warehouse_sk\":";
  __json(v.inv_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_sk\":";
  __json(v.w_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_warehouse_sk\":";
  __json(v.inv_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv\":";
  __json(v.inv);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const Before &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w\":";
  __json(v.w);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w\":";
  __json(v.w);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  std::cout << "}";
}
inline void __json(const Joined &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_name\":";
  __json(v.w_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_id\":";
  __json(v.i_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"before_qty\":";
  __json(v.before_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"after_qty\":";
  __json(v.after_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ratio\":";
  __json(v.ratio);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_before\":";
  __json(v.inv_before);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_after\":";
  __json(v.inv_after);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_sk\":";
  __json(v.w_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  std::cout << "}";
}
int main() {
  std::vector<Inventory> inventory = {
      Inventory{1, 1, 1, 30}, Inventory{1, 1, 2, 40}, Inventory{2, 2, 1, 20},
      Inventory{2, 2, 2, 20}};
  std::vector<Warehouse> warehouse = {Warehouse{1, std::string("Main")},
                                      Warehouse{2, std::string("Backup")}};
  std::vector<Item> item = {Item{1, std::string("ITEM1")},
                            Item{2, std::string("ITEM2")}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-03-01")},
                                   DateDim{2, std::string("2000-03-20")}};
  std::vector<__struct6> before = ([&]() {
    std::vector<__struct7> __groups;
    for (auto inv : inventory) {
      for (auto d : date_dim) {
        if (!((inv.inv_date_sk == d.d_date_sk)))
          continue;
        if (!((d.d_date < std::string("2000-03-15"))))
          continue;
        auto __key = Before{inv.inv_warehouse_sk, inv.inv_item_sk};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct6{inv, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct7{__key, std::vector<__struct6>{__struct6{inv, d}}});
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.w, g.key.i, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<
                decltype(std::declval<__struct6>().inv_quantity_on_hand)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.inv_quantity_on_hand);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct6> after = ([&]() {
    std::vector<__struct9> __groups;
    for (auto inv : inventory) {
      for (auto d : date_dim) {
        if (!((inv.inv_date_sk == d.d_date_sk)))
          continue;
        if (!((d.d_date >= std::string("2000-03-15"))))
          continue;
        auto __key = Before{inv.inv_warehouse_sk, inv.inv_item_sk};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct6{inv, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct9{__key, std::vector<__struct6>{__struct6{inv, d}}});
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.w, g.key.i, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<
                decltype(std::declval<__struct6>().inv_quantity_on_hand)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.inv_quantity_on_hand);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Joined> joined = ([&]() {
    std::vector<Joined> __items;
    for (auto b : before) {
      for (auto a : after) {
        if (!(((b.w == a.w) && (b.i == a.i))))
          continue;
        for (auto w : warehouse) {
          if (!((w.w_warehouse_sk == b.w)))
            continue;
          for (auto it : item) {
            if (!((it.i_item_sk == b.i)))
              continue;
            __items.push_back(Joined{w.w_warehouse_name, it.i_item_id, b.qty,
                                     a.qty, (a.qty / b.qty)});
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Joined>().w_name), Result>>
        __items;
    for (auto r : joined) {
      if (!(((r.ratio >= (0.6666666666666666)) && (r.ratio <= (1.5)))))
        continue;
      __items.push_back({std::vector<decltype(r.w_name)>{r.w_name, r.i_id},
                         Result{r.w_name, r.i_id, r.before_qty, r.after_qty}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q21 inventory ratio
  return 0;
}
