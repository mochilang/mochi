// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct Inventory {
  int inv_item_sk;
  int inv_warehouse_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
};

struct Warehouse {
  int w_warehouse_sk;
  string w_warehouse_name;
};

struct Item {
  int i_item_sk;
  string i_item_id;
};

struct DateDim {
  int d_date_sk;
  string d_date;
};

int main() {
  vector<unordered_map<string, int>> inventory =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 30}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 2},
                                     {string("inv_quantity_on_hand"), 40}},
          unordered_map<string, int>{{string("inv_item_sk"), 2},
                                     {string("inv_warehouse_sk"), 2},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 20}},
          unordered_map<string, int>{{string("inv_item_sk"), 2},
                                     {string("inv_warehouse_sk"), 2},
                                     {string("inv_date_sk"), 2},
                                     {string("inv_quantity_on_hand"), 20}}};
  vector<unordered_map<string, any>> warehouse =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("w_warehouse_sk"), any(1)},
              {string("w_warehouse_name"), any(string("Main"))}},
          unordered_map<string, any>{
              {string("w_warehouse_sk"), any(2)},
              {string("w_warehouse_name"), any(string("Backup"))}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("ITEM1"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_item_id"), any(string("ITEM2"))}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("d_date_sk"), any(1)},
              {string("d_date"), any(string("2000-03-01"))}},
          unordered_map<string, any>{
              {string("d_date_sk"), any(2)},
              {string("d_date"), any(string("2000-03-20"))}}};
  struct GroupKey4 {
    unordered_map<string, int> w;
    unordered_map<string, int> i;
  };
  inline bool operator==(const GroupKey4 &a, const GroupKey4 &b) {
    return a.w == b.w && a.i == b.i;
  }
  namespace std {
  template <> struct hash<GroupKey4> {
    size_t operator()(const GroupKey4 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.w);
      _hash_combine(h, k.i);
      return h;
    }
  };
  } // namespace std

  auto before = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, int>;
    using KeyT = GroupKey4;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &inv : inventory) {
      for (auto &d : date_dim) {
        if (!(inv["inv_date_sk"] == d["d_date_sk"]))
          continue;
        if (d["d_date"] < string("2000-03-15")) {
          KeyT _k = GroupKey4{inv["inv_warehouse_sk"], inv["inv_item_sk"]};
          if (!groups.count(_k)) {
            groups[_k] = Group{_k, {}};
            order.push_back(_k);
          }
          groups[_k].Items.push_back(inv);
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("w"), any(g.key.w)},
          {string("i"), any(g.key.i)},
          {string("qty"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(
                   x)["inv_quantity_on_hand"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  struct GroupKey5 {
    unordered_map<string, int> w;
    unordered_map<string, int> i;
  };
  inline bool operator==(const GroupKey5 &a, const GroupKey5 &b) {
    return a.w == b.w && a.i == b.i;
  }
  namespace std {
  template <> struct hash<GroupKey5> {
    size_t operator()(const GroupKey5 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.w);
      _hash_combine(h, k.i);
      return h;
    }
  };
  } // namespace std

  auto after = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, int>;
    using KeyT = GroupKey5;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &inv : inventory) {
      for (auto &d : date_dim) {
        if (!(inv["inv_date_sk"] == d["d_date_sk"]))
          continue;
        if (d["d_date"] >= string("2000-03-15")) {
          KeyT _k = GroupKey5{inv["inv_warehouse_sk"], inv["inv_item_sk"]};
          if (!groups.count(_k)) {
            groups[_k] = Group{_k, {}};
            order.push_back(_k);
          }
          groups[_k].Items.push_back(inv);
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("w"), any(g.key.w)},
          {string("i"), any(g.key.i)},
          {string("qty"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(
                   x)["inv_quantity_on_hand"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto joined =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        for (auto &b : before) {
          for (auto &a : after) {
            if (!(b["w"] == a["w"] && b["i"] == a["i"]))
              continue;
            for (auto &w : warehouse) {
              if (!(w["w_warehouse_sk"] == b["w"]))
                continue;
              for (auto &it : item) {
                if (!(it["i_item_sk"] == b["i"]))
                  continue;
                _res.push_back(
                    unordered_map<string, unordered_map<string, any>>{
                        {string("w_name"), w["w_warehouse_name"]},
                        {string("i_id"), it["i_item_id"]},
                        {string("before_qty"), b["qty"]},
                        {string("after_qty"), a["qty"]},
                        {string("ratio"), a["qty"] / b["qty"]}});
              }
            }
          }
        }
        return _res;
      })();
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<pair<unordered_map<string, unordered_map<string, any>>,
                    unordered_map<string, unordered_map<string, any>>>>
            _tmp;
        for (auto &r : joined) {
          if (r["ratio"] >= (2.0 / 3.0) && r["ratio"] <= (3.0 / 2.0)) {
            _tmp.push_back(
                {vector<unordered_map<string, any>>{r["w_name"], r["i_id"]},
                 unordered_map<string, unordered_map<string, any>>{
                     {string("w_warehouse_name"), r["w_name"]},
                     {string("i_item_id"), r["i_id"]},
                     {string("inv_before"), r["before_qty"]},
                     {string("inv_after"), r["after_qty"]}}});
          }
        }
        std::sort(_tmp.begin(), _tmp.end(), [](const auto &a, const auto &b) {
          return a.first < b.first;
        });
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        _res.reserve(_tmp.size());
        for (auto &_it : _tmp)
          _res.push_back(_it.second);
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q21_inventory_ratio = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("w_warehouse_name"), any(string("Main"))},
              {string("i_item_id"), any(string("ITEM1"))},
              {string("inv_before"), any(30)},
              {string("inv_after"), any(40)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q21_inventory_ratio();
  return 0;
}
