// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("c_customer_sk"), 1},
                                     {string("c_current_addr_sk"), 1},
                                     {string("c_current_cdemo_sk"), 1}},
          unordered_map<string, int>{{string("c_customer_sk"), 2},
                                     {string("c_current_addr_sk"), 2},
                                     {string("c_current_cdemo_sk"), 2}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))}},
          unordered_map<string, any>{{string("ca_address_sk"), any(2)},
                                     {string("ca_state"), any(string("NY"))}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(1)},
              {string("cd_gender"), any(string("M"))},
              {string("cd_marital_status"), any(string("S"))},
              {string("cd_dep_count"), any(1)},
              {string("cd_dep_employed_count"), any(1)},
              {string("cd_dep_college_count"), any(0)}},
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(2)},
              {string("cd_gender"), any(string("F"))},
              {string("cd_marital_status"), any(string("M"))},
              {string("cd_dep_count"), any(2)},
              {string("cd_dep_employed_count"), any(1)},
              {string("cd_dep_college_count"), any(1)}}};
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("ss_customer_sk"), 1}, {string("ss_sold_date_sk"), 1}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 2000},
                                     {string("d_qoy"), 1}}};
  auto purchased = ([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &ss : store_sales) {
      for (auto &d : date_dim) {
        if (!(ss["ss_sold_date_sk"] == d["d_date_sk"]))
          continue;
        if (d["d_year"] == 2000 && d["d_qoy"] < 4) {
          _res.push_back(ss["ss_customer_sk"]);
        }
      }
    }
    return _res;
  })();
  struct GroupKey0 {
    unordered_map<string, any> state;
    unordered_map<string, any> gender;
    unordered_map<string, any> marital;
    unordered_map<string, any> dep;
    unordered_map<string, any> emp;
    unordered_map<string, any> col;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.state == b.state && a.gender == b.gender &&
           a.marital == b.marital && a.dep == b.dep && a.emp == b.emp &&
           a.col == b.col;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.state);
      _hash_combine(h, k.gender);
      _hash_combine(h, k.marital);
      _hash_combine(h, k.dep);
      _hash_combine(h, k.emp);
      _hash_combine(h, k.col);
      return h;
    }
  };
  } // namespace std

  auto groups = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, int>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &c : customer) {
      for (auto &ca : customer_address) {
        if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
          continue;
        for (auto &cd : customer_demographics) {
          if (!(c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))
            continue;
          if ((find(purchased.begin(), purchased.end(), c["c_customer_sk"]) !=
               purchased.end())) {
            KeyT _k = GroupKey0{ca["ca_state"],
                                cd["cd_gender"],
                                cd["cd_marital_status"],
                                cd["cd_dep_count"],
                                cd["cd_dep_employed_count"],
                                cd["cd_dep_college_count"]};
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(c);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("ca_state"), any(g.key.state)},
          {string("cd_gender"), any(g.key.gender)},
          {string("cd_marital_status"), any(g.key.marital)},
          {string("cd_dep_count"), any(g.key.dep)},
          {string("cd_dep_employed_count"), any(g.key.emp)},
          {string("cd_dep_college_count"), any(g.key.col)},
          {string("cnt"), any(_count(g))}});
    }
    return _res;
  })();
  _json(groups);
  auto test_TPCDS_Q35_simplified = [&]() {
    if (!(groups ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("ca_state"), any(string("CA"))},
              {string("cd_gender"), any(string("M"))},
              {string("cd_marital_status"), any(string("S"))},
              {string("cd_dep_count"), any(1)},
              {string("cd_dep_employed_count"), any(1)},
              {string("cd_dep_college_count"), any(0)},
              {string("cnt"), any(1)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q35_simplified();
  return 0;
}
