// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
  decltype(1) c_current_cdemo_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("M")) cd_gender;
  decltype(std::string("S")) cd_marital_status;
  decltype(1) cd_dep_count;
  decltype(1) cd_dep_employed_count;
  decltype(0) cd_dep_college_count;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
  decltype(1) d_qoy;
};
struct Group {
  decltype(ca.ca_state) state;
  decltype(cd.cd_gender) gender;
  decltype(cd.cd_marital_status) marital;
  decltype(cd.cd_dep_count) dep;
  decltype(cd.cd_dep_employed_count) emp;
  decltype(cd.cd_dep_college_count) col;
};
struct __struct7 {
  decltype(c) c;
  decltype(ca) ca;
  decltype(cd) cd;
};
struct __struct8 {
  Group key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key.state) ca_state;
  decltype(std::declval<__struct8>().key.gender) cd_gender;
  decltype(std::declval<__struct8>().key.marital) cd_marital_status;
  decltype(std::declval<__struct8>().key.dep) cd_dep_count;
  decltype(std::declval<__struct8>().key.emp) cd_dep_employed_count;
  decltype(std::declval<__struct8>().key.col) cd_dep_college_count;
  int cnt;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_employed_count\":";
  __json(v.cd_dep_employed_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_college_count\":";
  __json(v.cd_dep_college_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt\":";
  __json(v.cnt);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_employed_count\":";
  __json(v.cd_dep_employed_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_college_count\":";
  __json(v.cd_dep_college_count);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const Group &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"gender\":";
  __json(v.gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"marital\":";
  __json(v.marital);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dep\":";
  __json(v.dep);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"emp\":";
  __json(v.emp);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"col\":";
  __json(v.col);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd\":";
  __json(v.cd);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {Customer{1, 1, 1}, Customer{2, 2, 2}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CA")},
      CustomerAddres{2, std::string("NY")}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("M"), std::string("S"), 1, 1, 0},
      CustomerDemographic{2, std::string("F"), std::string("M"), 2, 1, 1}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000, 1}};
  auto purchased = ([&]() {
    std::vector<decltype(ss.ss_customer_sk)> __items;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
          continue;
        if (!(((d.d_year == 2000) && (d.d_qoy < 4))))
          continue;
        __items.push_back(ss.ss_customer_sk);
      }
    }
    return __items;
  })();
  std::vector<__struct7> groups = ([&]() {
    std::vector<__struct8> __groups;
    for (auto c : customer) {
      for (auto ca : customer_address) {
        if (!((c.c_current_addr_sk == ca.ca_address_sk)))
          continue;
        for (auto cd : customer_demographics) {
          if (!((c.c_current_cdemo_sk == cd.cd_demo_sk)))
            continue;
          if (!((std::find(purchased.begin(), purchased.end(),
                           c.c_customer_sk) != purchased.end())))
            continue;
          auto __key = Group{ca.ca_state,
                             cd.cd_gender,
                             cd.cd_marital_status,
                             cd.cd_dep_count,
                             cd.cd_dep_employed_count,
                             cd.cd_dep_college_count};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct7{c, ca, cd});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct8{__key, std::vector<__struct7>{__struct7{c, ca, cd}}});
          }
        }
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{g.key.state, g.key.gender, g.key.marital,
                                  g.key.dep, g.key.emp, g.key.col,
                                  ((int)g.items.size())});
    }
    return __items;
  })();
  (__json(groups));
  // test TPCDS Q35 simplified
  return 0;
}
