// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_manufact_id;
  decltype(std::string("Books")) i_category;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
  decltype(1) d_moy;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(-5) ca_gmt_offset;
};
struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(100) ss_ext_sales_price;
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_addr_sk;
};
struct CatalogSale {
  decltype(1) cs_item_sk;
  decltype(20) cs_ext_sales_price;
  decltype(1) cs_sold_date_sk;
  decltype(1) cs_bill_addr_sk;
};
struct WebSale {
  decltype(1) ws_item_sk;
  decltype(30) ws_ext_sales_price;
  decltype(1) ws_sold_date_sk;
  decltype(1) ws_bill_addr_sk;
};
struct UnionSale {
  decltype(i.i_manufact_id) manu;
  decltype(ss.ss_ext_sales_price) price;
};
struct __struct8 {
  decltype(std::declval<UnionSale>().manu) key;
  std::vector<UnionSale> items;
};
struct Result {
  decltype(std::declval<__struct8>().key) i_manufact_id;
  double total_sales;
};
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_gmt_offset\":";
  __json(v.ca_gmt_offset);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_addr_sk\":";
  __json(v.cs_bill_addr_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_sales\":";
  __json(v.total_sales);
  std::cout << "}";
}
inline void __json(const UnionSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"manu\":";
  __json(v.manu);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_addr_sk\":";
  __json(v.ss_addr_sk);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_addr_sk\":";
  __json(v.ws_bill_addr_sk);
  std::cout << "}";
}
int main() {
  std::vector<Item> item = {Item{1, 1, std::string("Books")},
                            Item{2, 2, std::string("Books")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000, 1}};
  std::vector<CustomerAddres> customer_address = {CustomerAddres{1, -5},
                                                  CustomerAddres{2, -5}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 100, 1, 1},
                                        StoreSale{2, 50, 1, 2}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 20, 1, 1}};
  std::vector<WebSale> web_sales = {WebSale{1, 30, 1, 1}};
  auto month = 1;
  auto year = 2000;
  std::vector<UnionSale> union_sales =
      concat(([&]() {
               std::vector<UnionSale> __items;
               for (auto ss : store_sales) {
                 for (auto d : date_dim) {
                   if (!((ss.ss_sold_date_sk == d.d_date_sk)))
                     continue;
                   for (auto ca : customer_address) {
                     if (!((ss.ss_addr_sk == ca.ca_address_sk)))
                       continue;
                     for (auto i : item) {
                       if (!((ss.ss_item_sk == i.i_item_sk)))
                         continue;
                       if (!(((((i.i_category == std::string("Books")) &&
                                (d.d_year == year)) &&
                               (d.d_moy == month)) &&
                              (ca.ca_gmt_offset == (-5)))))
                         continue;
                       __items.push_back(
                           UnionSale{i.i_manufact_id, ss.ss_ext_sales_price});
                     }
                   }
                 }
               }
               return __items;
             })(),
             ([&]() {
               std::vector<UnionSale> __items;
               for (auto cs : catalog_sales) {
                 for (auto d : date_dim) {
                   if (!((cs.cs_sold_date_sk == d.d_date_sk)))
                     continue;
                   for (auto ca : customer_address) {
                     if (!((cs.cs_bill_addr_sk == ca.ca_address_sk)))
                       continue;
                     for (auto i : item) {
                       if (!((cs.cs_item_sk == i.i_item_sk)))
                         continue;
                       if (!(((((i.i_category == std::string("Books")) &&
                                (d.d_year == year)) &&
                               (d.d_moy == month)) &&
                              (ca.ca_gmt_offset == (-5)))))
                         continue;
                       __items.push_back(
                           UnionSale{i.i_manufact_id, cs.cs_ext_sales_price});
                     }
                   }
                 }
               }
               return __items;
             })(),
             ([&]() {
               std::vector<UnionSale> __items;
               for (auto ws : web_sales) {
                 for (auto d : date_dim) {
                   if (!((ws.ws_sold_date_sk == d.d_date_sk)))
                     continue;
                   for (auto ca : customer_address) {
                     if (!((ws.ws_bill_addr_sk == ca.ca_address_sk)))
                       continue;
                     for (auto i : item) {
                       if (!((ws.ws_item_sk == i.i_item_sk)))
                         continue;
                       if (!(((((i.i_category == std::string("Books")) &&
                                (d.d_year == year)) &&
                               (d.d_moy == month)) &&
                              (ca.ca_gmt_offset == (-5)))))
                         continue;
                       __items.push_back(
                           UnionSale{i.i_manufact_id, ws.ws_ext_sales_price});
                     }
                   }
                 }
               }
               return __items;
             })());
  std::vector<UnionSale> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto s : union_sales) {
      auto __key = s.manu;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(UnionSale{s});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct8{__key, std::vector<UnionSale>{UnionSale{s}}});
      }
    }
    std::vector<std::pair<double, Result>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {(-([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
               ([&]() {
                 std::vector<decltype(std::declval<UnionSale>().price)> __items;
                 for (auto x : g.items) {
                   __items.push_back(x.price);
                 }
                 return __items;
               })())),
           Result{
               g.key, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<UnionSale>().price)> __items;
                 for (auto x : g.items) {
                   __items.push_back(x.price);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q33 simplified
  return 0;
}
