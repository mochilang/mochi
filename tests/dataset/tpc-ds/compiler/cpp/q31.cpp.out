// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> store_sales = vector<
      unordered_map<string, any>>{
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(1)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(100.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(2)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(120.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(3)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(160.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(1)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(80.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(2)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(90.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(3)},
                                 {string("d_year"), any(2000)},
                                 {string("ss_ext_sales_price"), any(100.0)}}};
  vector<unordered_map<string, any>> web_sales = vector<
      unordered_map<string, any>>{
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(1)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(100.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(2)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(150.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("A"))},
                                 {string("d_qoy"), any(3)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(250.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(1)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(80.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(2)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(90.0)}},
      unordered_map<string, any>{{string("ca_county"), any(string("B"))},
                                 {string("d_qoy"), any(3)},
                                 {string("d_year"), any(2000)},
                                 {string("ws_ext_sales_price"), any(95.0)}}};
  vector<string> counties = vector<string>{string("A"), string("B")};
  vector<any> result = vector<any>{};
  for (const string &county : counties) {
    auto ss1 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ca_county"] == county && s["d_qoy"] == 1) {
          _res.push_back(s["ss_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto ss2 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ca_county"] == county && s["d_qoy"] == 2) {
          _res.push_back(s["ss_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto ss3 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ca_county"] == county && s["d_qoy"] == 3) {
          _res.push_back(s["ss_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto ws1 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &w : web_sales) {
        if (w["ca_county"] == county && w["d_qoy"] == 1) {
          _res.push_back(w["ws_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto ws2 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &w : web_sales) {
        if (w["ca_county"] == county && w["d_qoy"] == 2) {
          _res.push_back(w["ws_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto ws3 = _sum(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &w : web_sales) {
        if (w["ca_county"] == county && w["d_qoy"] == 3) {
          _res.push_back(w["ws_ext_sales_price"]);
        }
      }
      return _res;
    })());
    auto web_g1 = ws2 / ws1;
    auto store_g1 = ss2 / ss1;
    auto web_g2 = ws3 / ws2;
    auto store_g2 = ss3 / ss2;
    if (web_g1 > store_g1 && web_g2 > store_g2) {
      result =
          append(result, unordered_map<string, any>{
                             {string("ca_county"), any(county)},
                             {string("d_year"), any(2000)},
                             {string("web_q1_q2_increase"), any(web_g1)},
                             {string("store_q1_q2_increase"), any(store_g1)},
                             {string("web_q2_q3_increase"), any(web_g2)},
                             {string("store_q2_q3_increase"), any(store_g2)}});
    }
  }
  _json(result);
  auto test_TPCDS_Q31_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("ca_county"), any(string("A"))},
              {string("d_year"), any(2000)},
              {string("web_q1_q2_increase"), any(1.5)},
              {string("store_q1_q2_increase"), any(1.2)},
              {string("web_q2_q3_increase"), any(1.6666666666666667)},
              {string("store_q2_q3_increase"), any(1.3333333333333333)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q31_simplified();
  return 0;
}
