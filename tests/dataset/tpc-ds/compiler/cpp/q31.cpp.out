// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(std::string("A")) ca_county;
  decltype(1) d_qoy;
  decltype(2000) d_year;
  decltype(100) ss_ext_sales_price;
};
struct WebSale {
  decltype(std::string("A")) ca_county;
  decltype(1) d_qoy;
  decltype(2000) d_year;
  decltype(100) ws_ext_sales_price;
};
struct __struct3 {
  decltype(county) ca_county;
  decltype(2000) d_year;
  decltype(web_g1) web_q1_q2_increase;
  decltype(store_g1) store_q1_q2_increase;
  decltype(web_g2) web_q2_q3_increase;
  decltype(store_g2) store_q2_q3_increase;
};
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct3 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_q1_q2_increase\":";
  __json(v.web_q1_q2_increase);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_q1_q2_increase\":";
  __json(v.store_q1_q2_increase);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_q2_q3_increase\":";
  __json(v.web_q2_q3_increase);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_q2_q3_increase\":";
  __json(v.store_q2_q3_increase);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{std::string("A"), 1, 2000, 100},
      StoreSale{std::string("A"), 2, 2000, 120},
      StoreSale{std::string("A"), 3, 2000, 160},
      StoreSale{std::string("B"), 1, 2000, 80},
      StoreSale{std::string("B"), 2, 2000, 90},
      StoreSale{std::string("B"), 3, 2000, 100}};
  std::vector<WebSale> web_sales = {WebSale{std::string("A"), 1, 2000, 100},
                                    WebSale{std::string("A"), 2, 2000, 150},
                                    WebSale{std::string("A"), 3, 2000, 250},
                                    WebSale{std::string("B"), 1, 2000, 80},
                                    WebSale{std::string("B"), 2, 2000, 90},
                                    WebSale{std::string("B"), 3, 2000, 95}};
  std::vector<std::string> counties = {std::string("A"), std::string("B")};
  std::vector<int> result = {};
  for (auto county : counties) {
    auto ss1 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(s.ss_ext_sales_price)> __items;
      for (auto s : store_sales) {
        if (!(((s.ca_county == county) && (s.d_qoy == 1))))
          continue;
        __items.push_back(s.ss_ext_sales_price);
      }
      return __items;
    })());
    auto ss2 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(s.ss_ext_sales_price)> __items;
      for (auto s : store_sales) {
        if (!(((s.ca_county == county) && (s.d_qoy == 2))))
          continue;
        __items.push_back(s.ss_ext_sales_price);
      }
      return __items;
    })());
    auto ss3 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(s.ss_ext_sales_price)> __items;
      for (auto s : store_sales) {
        if (!(((s.ca_county == county) && (s.d_qoy == 3))))
          continue;
        __items.push_back(s.ss_ext_sales_price);
      }
      return __items;
    })());
    auto ws1 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(w.ws_ext_sales_price)> __items;
      for (auto w : web_sales) {
        if (!(((w.ca_county == county) && (w.d_qoy == 1))))
          continue;
        __items.push_back(w.ws_ext_sales_price);
      }
      return __items;
    })());
    auto ws2 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(w.ws_ext_sales_price)> __items;
      for (auto w : web_sales) {
        if (!(((w.ca_county == county) && (w.d_qoy == 2))))
          continue;
        __items.push_back(w.ws_ext_sales_price);
      }
      return __items;
    })());
    auto ws3 = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<decltype(w.ws_ext_sales_price)> __items;
      for (auto w : web_sales) {
        if (!(((w.ca_county == county) && (w.d_qoy == 3))))
          continue;
        __items.push_back(w.ws_ext_sales_price);
      }
      return __items;
    })());
    auto web_g1 = (ws2 / ws1);
    auto store_g1 = (ss2 / ss1);
    auto web_g2 = (ws3 / ws2);
    auto store_g2 = (ss3 / ss2);
    if (((web_g1 > store_g1) && (web_g2 > store_g2))) {
      result.push_back(
          __struct3{county, 2000, web_g1, store_g1, web_g2, store_g2});
    }
  }
  (__json(result));
  // test TPCDS Q31 simplified
  return 0;
}
