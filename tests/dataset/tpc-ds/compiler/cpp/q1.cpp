// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreReturn {
  decltype(1) sr_returned_date_sk;
  decltype(1) sr_customer_sk;
  decltype(10) sr_store_sk;
  decltype(20) sr_return_amt;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1998) d_year;
};
struct Store {
  decltype(10) s_store_sk;
  decltype(std::string("TN")) s_state;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("C1")) c_customer_id;
};
struct CustomerTotalReturn {
  decltype(sr.sr_customer_sk) customer_sk;
  decltype(sr.sr_store_sk) store_sk;
};
struct __struct6 {
  decltype(sr) sr;
  decltype(d) d;
};
struct __struct7 {
  CustomerTotalReturn key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.customer_sk) ctr_customer_sk;
  decltype(std::declval<__struct7>().key.store_sk) ctr_store_sk;
  double ctr_total_return;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_customer_sk\":";
  __json(v.ctr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_store_sk\":";
  __json(v.ctr_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_total_return\":";
  __json(v.ctr_total_return);
  std::cout << "}";
}
inline void __json(const CustomerTotalReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_sk\":";
  __json(v.customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sk\":";
  __json(v.store_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_customer_sk\":";
  __json(v.sr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_store_sk\":";
  __json(v.sr_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_amt\":";
  __json(v.sr_return_amt);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr\":";
  __json(v.sr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
int main() {
  std::vector<StoreReturn> store_returns = {StoreReturn{1, 1, 10, 20},
                                            StoreReturn{1, 2, 10, 50}};
  std::vector<DateDim> date_dim = {DateDim{1, 1998}};
  std::vector<Store> store = {Store{10, std::string("TN")}};
  std::vector<Customer> customer = {Customer{1, std::string("C1")},
                                    Customer{2, std::string("C2")}};
  std::vector<__struct6> customer_total_return = ([&]() {
    std::vector<__struct7> __groups;
    for (auto sr : store_returns) {
      for (auto d : date_dim) {
        if (!(((sr.sr_returned_date_sk == d.d_date_sk) && (d.d_year == 1998))))
          continue;
        auto __key = CustomerTotalReturn{sr.sr_customer_sk, sr.sr_store_sk};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct6{sr, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct7{__key, std::vector<__struct6>{__struct6{sr, d}}});
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.customer_sk, g.key.store_sk, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct6>().sr_return_amt)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.sr_return_amt);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto result = ([&]() {
    std::vector<std::pair<
        decltype(c.c_customer_id),
        decltype(std::unordered_map<std::string, decltype(c.c_customer_id)>{
            {std::string("c_customer_id"), c.c_customer_id}})>>
        __items;
    for (auto ctr1 : customer_total_return) {
      for (auto s : store) {
        if (!((ctr1.ctr_store_sk == s.s_store_sk)))
          continue;
        for (auto c : customer) {
          if (!((ctr1.ctr_customer_sk == c.c_customer_sk)))
            continue;
          if (!(((ctr1.ctr_total_return >
                  (__avg(([&]() {
                     std::vector<
                         decltype(std::declval<__struct6>().ctr_total_return)>
                         __items;
                     for (auto ctr2 : customer_total_return) {
                       if (!((ctr1.ctr_store_sk == ctr2.ctr_store_sk)))
                         continue;
                       __items.push_back(ctr2.ctr_total_return);
                     }
                     return __items;
                   })()) *
                   1.2)) &&
                 (s.s_state == std::string("TN")))))
            continue;
          __items.push_back(
              {c.c_customer_id,
               std::unordered_map<std::string, decltype(c.c_customer_id)>{
                   {std::string("c_customer_id"), c.c_customer_id}}});
        }
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<
        decltype(std::unordered_map<std::string, decltype(c.c_customer_id)>{
            {std::string("c_customer_id"), c.c_customer_id}})>
        __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q1 result
  return 0;
}
