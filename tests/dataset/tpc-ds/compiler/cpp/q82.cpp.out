// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Inventory {
  decltype(1) item;
  decltype(20) qty;
};
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  std::cout << "}";
}
int main() {
  std::vector<std::string> item =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("id"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{{std::string("id"), 1}},
          std::unordered_map<std::string, decltype(2)>{{std::string("id"), 2}},
          std::unordered_map<std::string, decltype(3)>{{std::string("id"), 3}}};
  std::vector<Inventory> inventory = {Inventory{1, 20}, Inventory{1, 22},
                                      Inventory{1, 5},  Inventory{2, 30},
                                      Inventory{2, 5},  Inventory{3, 10}};
  std::vector<std::string> store_sales =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("item"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("item"), 1}},
          std::unordered_map<std::string, decltype(2)>{
              {std::string("item"), 2}}};
  auto result = 0;
  for (auto inv : inventory) {
    for (auto s : store_sales) {
      if ((inv.item == s.item)) {
        result = (result + inv.qty);
      }
    }
  }
  (__json(result));
  // test TPCDS Q82 sample
  return 0;
}
