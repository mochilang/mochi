// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CA")) s_state;
  decltype(std::string("Orange")) s_county;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1200) d_month_seq;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_store_sk;
  decltype(10) ss_net_profit;
};
struct Result {
  decltype(s.s_state) state;
  decltype(s.s_county) county;
};
struct __struct5 {
  decltype(ss) ss;
  decltype(d) d;
  decltype(s) s;
};
struct __struct6 {
  Result key;
  std::vector<__struct5> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.state) s_state;
  decltype(std::declval<__struct6>().key.county) s_county;
  double total_sum;
};
struct __struct8 {
  decltype(std::declval<__struct6>().key.state) f0;
  decltype(std::declval<__struct6>().key.county) f1;
};
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_county\":";
  __json(v.s_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_sum\":";
  __json(v.total_sum);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_county\":";
  __json(v.s_county);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"county\":";
  __json(v.county);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  std::cout << "}";
}
int main() {
  std::vector<Store> store = {
      Store{1, std::string("CA"), std::string("Orange")},
      Store{2, std::string("CA"), std::string("Orange")},
      Store{3, std::string("TX"), std::string("Travis")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1200}, DateDim{2, 1201}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 10}, StoreSale{1, 2, 5},
                                        StoreSale{2, 3, 20}};
  auto dms = 1200;
  std::vector<__struct5> result = ([&]() {
    std::vector<__struct6> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((d.d_date_sk == ss.ss_sold_date_sk)))
          continue;
        for (auto s : store) {
          if (!((s.s_store_sk == ss.ss_store_sk)))
            continue;
          if (!(((d.d_month_seq >= dms) && (d.d_month_seq <= (dms + 11)))))
            continue;
          auto __key = Result{s.s_state, s.s_county};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{ss, d, s});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{ss, d, s}}});
          }
        }
      }
    }
    std::vector<std::pair<__struct8, __struct7>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct8{g.key.state, g.key.county},
           __struct7{g.key.state, g.key.county, ([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<
                           decltype(std::declval<__struct5>().ss.ss_net_profit)>
                           __items;
                       for (auto x : g.items) {
                         __items.push_back(x.ss.ss_net_profit);
                       }
                       return __items;
                     })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q70 simplified
  return 0;
}
