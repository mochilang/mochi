// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_ticket_number;
  int ss_quantity;
  int ss_store_sk;
};
struct StoreReturn {
  int sr_returned_date_sk;
  int sr_customer_sk;
  int sr_item_sk;
  int sr_ticket_number;
  int sr_return_quantity;
};
struct CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
};
struct DateDim {
  int d_date_sk;
  std::string d_quarter_name;
};
struct Store {
  int s_store_sk;
  std::string s_state;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
  std::string i_item_desc;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_item_sk;
  decltype(1) ss_customer_sk;
  decltype(1) ss_ticket_number;
  decltype(10) ss_quantity;
  decltype(1) ss_store_sk;
};
struct StoreReturn {
  decltype(2) sr_returned_date_sk;
  decltype(1) sr_customer_sk;
  decltype(1) sr_item_sk;
  decltype(1) sr_ticket_number;
  decltype(2) sr_return_quantity;
};
struct CatalogSale {
  decltype(3) cs_sold_date_sk;
  decltype(1) cs_item_sk;
  decltype(1) cs_bill_customer_sk;
  decltype(5) cs_quantity;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("1998Q1")) d_quarter_name;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CA")) s_state;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("I1")) i_item_id;
  decltype(std::string("Item 1")) i_item_desc;
};
struct Joined {
  decltype(ss.ss_quantity) qty;
  decltype(sr.sr_return_quantity) ret;
  decltype(cs.cs_quantity) csq;
  decltype(i.i_item_id) i_item_id;
  decltype(i.i_item_desc) i_item_desc;
  decltype(s.s_state) s_state;
};
struct Result {
  decltype(std::declval<Joined>().i_item_id) i_item_id;
  decltype(std::declval<Joined>().i_item_desc) i_item_desc;
  decltype(std::declval<Joined>().s_state) s_state;
};
struct __struct9 {
  Result key;
  std::vector<Joined> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct10 {
  decltype(std::declval<__struct9>().key.i_item_id) i_item_id;
  decltype(std::declval<__struct9>().key.i_item_desc) i_item_desc;
  decltype(std::declval<__struct9>().key.s_state) s_state;
  int store_sales_quantitycount;
  double store_sales_quantityave;
  decltype(0) store_sales_quantitystdev;
  decltype(0) store_sales_quantitycov;
  int store_returns_quantitycount;
  double store_returns_quantityave;
  decltype(0) store_returns_quantitystdev;
  decltype(0) store_returns_quantitycov;
  int catalog_sales_quantitycount;
  double catalog_sales_quantityave;
  decltype(0) catalog_sales_quantitystdev;
  decltype(0) catalog_sales_quantitycov;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_quarter_name\":";
  __json(v.d_quarter_name);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_customer_sk\":";
  __json(v.sr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_quarter_name\":";
  __json(v.d_quarter_name);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_quantitycount\":";
  __json(v.store_sales_quantitycount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_quantityave\":";
  __json(v.store_sales_quantityave);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_quantitystdev\":";
  __json(v.store_sales_quantitystdev);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_quantitycov\":";
  __json(v.store_sales_quantitycov);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_returns_quantitycount\":";
  __json(v.store_returns_quantitycount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_returns_quantityave\":";
  __json(v.store_returns_quantityave);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_returns_quantitystdev\":";
  __json(v.store_returns_quantitystdev);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_returns_quantitycov\":";
  __json(v.store_returns_quantitycov);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_sales_quantitycount\":";
  __json(v.catalog_sales_quantitycount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_sales_quantityave\":";
  __json(v.catalog_sales_quantityave);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_sales_quantitystdev\":";
  __json(v.catalog_sales_quantitystdev);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_sales_quantitycov\":";
  __json(v.catalog_sales_quantitycov);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  std::cout << "}";
}
inline void __json(const Joined &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ret\":";
  __json(v.ret);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"csq\":";
  __json(v.csq);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_customer_sk\":";
  __json(v.sr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 10, 1}};
  std::vector<StoreReturn> store_returns = {StoreReturn{2, 1, 1, 1, 2}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{3, 1, 1, 5}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("1998Q1")},
                                   DateDim{2, std::string("1998Q2")},
                                   DateDim{3, std::string("1998Q3")}};
  std::vector<Store> store = {Store{1, std::string("CA")}};
  std::vector<Item> item = {Item{1, std::string("I1"), std::string("Item 1")}};
  std::vector<Joined> joined = ([&]() {
    std::vector<Joined> __items;
    for (auto ss : store_sales) {
      for (auto sr : store_returns) {
        if (!((((ss.ss_customer_sk == sr.sr_customer_sk) &&
                (ss.ss_item_sk == sr.sr_item_sk)) &&
               (ss.ss_ticket_number == sr.sr_ticket_number))))
          continue;
        for (auto cs : catalog_sales) {
          if (!(((sr.sr_customer_sk == cs.cs_bill_customer_sk) &&
                 (sr.sr_item_sk == cs.cs_item_sk))))
            continue;
          for (auto d1 : date_dim) {
            if (!(((ss.ss_sold_date_sk == d1.d_date_sk) &&
                   (d1.d_quarter_name == std::string("1998Q1")))))
              continue;
            for (auto d2 : date_dim) {
              if (!(((sr.sr_returned_date_sk == d2.d_date_sk) &&
                     (std::find(std::vector<std::string>{std::string("1998Q1"),
                                                         std::string("1998Q2"),
                                                         std::string("1998Q3")}
                                    .begin(),
                                std::vector<std::string>{std::string("1998Q1"),
                                                         std::string("1998Q2"),
                                                         std::string("1998Q3")}
                                    .end(),
                                d2.d_quarter_name) !=
                      std::vector<std::string>{std::string("1998Q1"),
                                               std::string("1998Q2"),
                                               std::string("1998Q3")}
                          .end()))))
                continue;
              for (auto d3 : date_dim) {
                if (!(((cs.cs_sold_date_sk == d3.d_date_sk) &&
                       (std::find(
                            std::vector<std::string>{std::string("1998Q1"),
                                                     std::string("1998Q2"),
                                                     std::string("1998Q3")}
                                .begin(),
                            std::vector<std::string>{std::string("1998Q1"),
                                                     std::string("1998Q2"),
                                                     std::string("1998Q3")}
                                .end(),
                            d3.d_quarter_name) !=
                        std::vector<std::string>{std::string("1998Q1"),
                                                 std::string("1998Q2"),
                                                 std::string("1998Q3")}
                            .end()))))
                  continue;
                for (auto s : store) {
                  if (!((ss.ss_store_sk == s.s_store_sk)))
                    continue;
                  for (auto i : item) {
                    if (!((ss.ss_item_sk == i.i_item_sk)))
                      continue;
                    __items.push_back(Joined{
                        ss.ss_quantity, sr.sr_return_quantity, cs.cs_quantity,
                        i.i_item_id, i.i_item_desc, s.s_state});
                  }
                }
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Joined> result = ([&]() {
    std::vector<__struct9> __groups;
    for (auto j : joined) {
      auto __key = Result{j.i_item_id, j.i_item_desc, j.s_state};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Joined{j});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct9{__key, std::vector<Joined>{Joined{j}}});
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key.i_item_id, g.key.i_item_desc, g.key.s_state,
          ((int)([&]() {
             std::vector<Joined> __items;
             for (auto _ : g.items) {
               __items.push_back(_);
             }
             return __items;
           })()
               .size()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().qty)> __items;
            for (auto x : g.items) {
              __items.push_back(x.qty);
            }
            return __items;
          })()),
          0, 0,
          ((int)([&]() {
             std::vector<Joined> __items;
             for (auto _ : g.items) {
               __items.push_back(_);
             }
             return __items;
           })()
               .size()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().ret)> __items;
            for (auto x : g.items) {
              __items.push_back(x.ret);
            }
            return __items;
          })()),
          0, 0,
          ((int)([&]() {
             std::vector<Joined> __items;
             for (auto _ : g.items) {
               __items.push_back(_);
             }
             return __items;
           })()
               .size()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().csq)> __items;
            for (auto x : g.items) {
              __items.push_back(x.csq);
            }
            return __items;
          })()),
          0, 0});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q17 stats
  return 0;
}
