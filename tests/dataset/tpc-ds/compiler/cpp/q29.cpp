// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_store_sk;
  int ss_customer_sk;
  int ss_quantity;
  int ss_ticket_number;
};
struct StoreReturn {
  int sr_returned_date_sk;
  int sr_item_sk;
  int sr_customer_sk;
  int sr_ticket_number;
  int sr_return_quantity;
};
struct CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
};
struct DateDim {
  int d_date_sk;
  int d_moy;
  int d_year;
};
struct Store {
  int s_store_sk;
  std::string s_store_id;
  std::string s_store_name;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
  std::string i_item_desc;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_item_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_customer_sk;
  decltype(10) ss_quantity;
  decltype(1) ss_ticket_number;
};
struct StoreReturn {
  decltype(2) sr_returned_date_sk;
  decltype(1) sr_item_sk;
  decltype(1) sr_customer_sk;
  decltype(1) sr_ticket_number;
  decltype(2) sr_return_quantity;
};
struct CatalogSale {
  decltype(3) cs_sold_date_sk;
  decltype(1) cs_item_sk;
  decltype(1) cs_bill_customer_sk;
  decltype(5) cs_quantity;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(4) d_moy;
  decltype(1999) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("S1")) s_store_id;
  decltype(std::string("Store1")) s_store_name;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ITEM1")) i_item_id;
  decltype(std::string("Desc1")) i_item_desc;
};
struct Base {
  decltype(ss.ss_quantity) ss_quantity;
  decltype(sr.sr_return_quantity) sr_return_quantity;
  decltype(cs.cs_quantity) cs_quantity;
  decltype(i.i_item_id) i_item_id;
  decltype(i.i_item_desc) i_item_desc;
  decltype(s.s_store_id) s_store_id;
  decltype(s.s_store_name) s_store_name;
};
struct Result {
  decltype(std::declval<Base>().i_item_id) item_id;
  decltype(std::declval<Base>().i_item_desc) item_desc;
  decltype(std::declval<Base>().s_store_id) s_store_id;
  decltype(std::declval<Base>().s_store_name) s_store_name;
};
struct __struct9 {
  Result key;
  std::vector<Base> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key.item_id) i_item_id;
  decltype(std::declval<__struct9>().key.item_desc) i_item_desc;
  decltype(std::declval<__struct9>().key.s_store_id) s_store_id;
  decltype(std::declval<__struct9>().key.s_store_name) s_store_name;
  double store_sales_quantity;
  double store_returns_quantity;
  double catalog_sales_quantity;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_customer_sk\":";
  __json(v.sr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_quantity\":";
  __json(v.store_sales_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_returns_quantity\":";
  __json(v.store_returns_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"catalog_sales_quantity\":";
  __json(v.catalog_sales_quantity);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_desc\":";
  __json(v.item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_returned_date_sk\":";
  __json(v.sr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_customer_sk\":";
  __json(v.sr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const Base &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 10, 1}};
  std::vector<StoreReturn> store_returns = {StoreReturn{2, 1, 1, 1, 2}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{3, 1, 1, 5}};
  std::vector<DateDim> date_dim = {DateDim{1, 4, 1999}, DateDim{2, 5, 1999},
                                   DateDim{3, 5, 2000}};
  std::vector<Store> store = {
      Store{1, std::string("S1"), std::string("Store1")}};
  std::vector<Item> item = {
      Item{1, std::string("ITEM1"), std::string("Desc1")}};
  std::vector<Base> base = ([&]() {
    std::vector<Base> __items;
    for (auto ss : store_sales) {
      for (auto sr : store_returns) {
        if (!(((ss.ss_ticket_number == sr.sr_ticket_number) &&
               (ss.ss_item_sk == sr.sr_item_sk))))
          continue;
        for (auto cs : catalog_sales) {
          if (!(((sr.sr_customer_sk == cs.cs_bill_customer_sk) &&
                 (sr.sr_item_sk == cs.cs_item_sk))))
            continue;
          for (auto d1 : date_dim) {
            if (!((d1.d_date_sk == ss.ss_sold_date_sk)))
              continue;
            for (auto d2 : date_dim) {
              if (!((d2.d_date_sk == sr.sr_returned_date_sk)))
                continue;
              for (auto d3 : date_dim) {
                if (!((d3.d_date_sk == cs.cs_sold_date_sk)))
                  continue;
                for (auto s : store) {
                  if (!((s.s_store_sk == ss.ss_store_sk)))
                    continue;
                  for (auto i : item) {
                    if (!((i.i_item_sk == ss.ss_item_sk)))
                      continue;
                    if (!((((((d1.d_moy == 4) && (d1.d_year == 1999)) &&
                             (d2.d_moy >= 4)) &&
                            (d2.d_moy <= 7)) &&
                           (std::find(
                                std::vector<int>{1999, 2000, 2001}.begin(),
                                std::vector<int>{1999, 2000, 2001}.end(),
                                d3.d_year) !=
                            std::vector<int>{1999, 2000, 2001}.end()))))
                      continue;
                    __items.push_back(
                        Base{ss.ss_quantity, sr.sr_return_quantity,
                             cs.cs_quantity, i.i_item_id, i.i_item_desc,
                             s.s_store_id, s.s_store_name});
                  }
                }
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Base> result = ([&]() {
    std::vector<__struct9> __groups;
    for (auto b : base) {
      auto __key =
          Result{b.i_item_id, b.i_item_desc, b.s_store_id, b.s_store_name};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Base{b});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct9{__key, std::vector<Base>{Base{b}}});
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key.item_id, g.key.item_desc, g.key.s_store_id, g.key.s_store_name,
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype(std::declval<Base>().ss_quantity)> __items;
                for (auto x : g.items) {
                  __items.push_back(x.ss_quantity);
                }
                return __items;
              })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype(std::declval<Base>().sr_return_quantity)>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(x.sr_return_quantity);
                }
                return __items;
              })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype(std::declval<Base>().cs_quantity)> __items;
                for (auto x : g.items) {
                  __items.push_back(x.cs_quantity);
                }
                return __items;
              })())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q29 quantity summary
  return 0;
}
