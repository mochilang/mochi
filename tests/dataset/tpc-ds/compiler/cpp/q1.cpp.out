// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<any> store_returns = vector<any>{};
  vector<any> date_dim = vector<any>{};
  vector<any> store = vector<any>{};
  vector<any> customer = vector<any>{};
  struct GroupKey0 {
    any customer_sk;
    any store_sk;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.customer_sk == b.customer_sk && a.store_sk == b.store_sk;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.customer_sk);
      _hash_combine(h, k.store_sk);
      return h;
    }
  };
  } // namespace std

  auto customer_total_return = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &sr : store_returns) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(sr)["sr_returned_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        if (_cast<unordered_map<string, any>>(d)["d_year"] == 1998) {
          KeyT _k =
              GroupKey0{_cast<unordered_map<string, any>>(sr)["sr_customer_sk"],
                        _cast<unordered_map<string, any>>(sr)["sr_store_sk"]};
          if (!groups.count(_k)) {
            groups[_k] = Group{_k, {}};
            order.push_back(_k);
          }
          groups[_k].Items.push_back(sr);
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("ctr_customer_sk"), any(g.key.customer_sk)},
          {string("ctr_store_sk"), any(g.key.store_sk)},
          {string("ctr_total_return"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["sr_return_amt"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    vector<pair<unordered_map<string, any>, unordered_map<string, any>>> _tmp;
    for (auto &ctr1 : customer_total_return) {
      for (auto &s : store) {
        if (!(ctr1["ctr_store_sk"] ==
              _cast<unordered_map<string, any>>(s)["s_store_sk"]))
          continue;
        for (auto &c : customer) {
          if (!(ctr1["ctr_customer_sk"] ==
                _cast<unordered_map<string, any>>(c)["c_customer_sk"]))
            continue;
          if (ctr1["ctr_total_return"] >
                  _avg(([&]() -> vector<unordered_map<string, any>> {
                    vector<unordered_map<string, any>> _res;
                    for (auto &ctr2 : customer_total_return) {
                      if (ctr1["ctr_store_sk"] == ctr2["ctr_store_sk"]) {
                        _res.push_back(ctr2["ctr_total_return"]);
                      }
                    }
                    return _res;
                  })()) *
                      1.2 &&
              _cast<unordered_map<string, any>>(s)["s_state"] == string("TN")) {
            _tmp.push_back(
                {_cast<unordered_map<string, any>>(c)["c_customer_id"],
                 unordered_map<string, any>{
                     {string("c_customer_id"),
                      _cast<unordered_map<string, any>>(c)["c_customer_id"]}}});
          }
        }
      }
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<unordered_map<string, any>> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q1_empty = [&]() {
    if (!(result.size() == 0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q1_empty();
  return 0;
}
