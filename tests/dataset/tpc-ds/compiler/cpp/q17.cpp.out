// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_ticket_number;
  int ss_quantity;
  int ss_store_sk;
};

struct StoreReturn {
  int sr_returned_date_sk;
  int sr_customer_sk;
  int sr_item_sk;
  int sr_ticket_number;
  int sr_return_quantity;
};

struct CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
};

struct DateDim {
  int d_date_sk;
  string d_quarter_name;
};

struct Store {
  int s_store_sk;
  string s_state;
};

struct Item {
  int i_item_sk;
  string i_item_id;
  string i_item_desc;
};

int main() {
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1},
                                     {string("ss_customer_sk"), 1},
                                     {string("ss_ticket_number"), 1},
                                     {string("ss_quantity"), 10},
                                     {string("ss_store_sk"), 1}}};
  vector<unordered_map<string, int>> store_returns =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("sr_returned_date_sk"), 2},
                                     {string("sr_customer_sk"), 1},
                                     {string("sr_item_sk"), 1},
                                     {string("sr_ticket_number"), 1},
                                     {string("sr_return_quantity"), 2}}};
  vector<unordered_map<string, int>> catalog_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("cs_sold_date_sk"), 3},
                                     {string("cs_item_sk"), 1},
                                     {string("cs_bill_customer_sk"), 1},
                                     {string("cs_quantity"), 5}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("d_date_sk"), any(1)},
              {string("d_quarter_name"), any(string("1998Q1"))}},
          unordered_map<string, any>{
              {string("d_date_sk"), any(2)},
              {string("d_quarter_name"), any(string("1998Q2"))}},
          unordered_map<string, any>{
              {string("d_date_sk"), any(3)},
              {string("d_quarter_name"), any(string("1998Q3"))}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("s_store_sk"), any(1)},
                                 {string("s_state"), any(string("CA"))}}};
  vector<unordered_map<string, any>> item =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("i_item_sk"), any(1)},
          {string("i_item_id"), any(string("I1"))},
          {string("i_item_desc"), any(string("Item 1"))}}};
  auto joined = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      for (auto &sr : store_returns) {
        if (!(ss["ss_customer_sk"] == sr["sr_customer_sk"] &&
              ss["ss_item_sk"] == sr["sr_item_sk"] &&
              ss["ss_ticket_number"] == sr["sr_ticket_number"]))
          continue;
        for (auto &cs : catalog_sales) {
          if (!(sr["sr_customer_sk"] == cs["cs_bill_customer_sk"] &&
                sr["sr_item_sk"] == cs["cs_item_sk"]))
            continue;
          for (auto &d1 : date_dim) {
            if (!(ss["ss_sold_date_sk"] == d1["d_date_sk"] &&
                  d1["d_quarter_name"] == string("1998Q1")))
              continue;
            for (auto &d2 : date_dim) {
              if (!((find(vector<string>{string("1998Q1"), string("1998Q2"),
                                         string("1998Q3")}
                              .begin(),
                          vector<string>{string("1998Q1"), string("1998Q2"),
                                         string("1998Q3")}
                              .end(),
                          sr["sr_returned_date_sk"] == d2["d_date_sk"] &&
                              d2["d_quarter_name"]) !=
                     vector<string>{string("1998Q1"), string("1998Q2"),
                                    string("1998Q3")}
                         .end())))
                continue;
              for (auto &d3 : date_dim) {
                if (!((find(vector<string>{string("1998Q1"), string("1998Q2"),
                                           string("1998Q3")}
                                .begin(),
                            vector<string>{string("1998Q1"), string("1998Q2"),
                                           string("1998Q3")}
                                .end(),
                            cs["cs_sold_date_sk"] == d3["d_date_sk"] &&
                                d3["d_quarter_name"]) !=
                       vector<string>{string("1998Q1"), string("1998Q2"),
                                      string("1998Q3")}
                           .end())))
                  continue;
                for (auto &s : store) {
                  if (!(ss["ss_store_sk"] == s["s_store_sk"]))
                    continue;
                  for (auto &i : item) {
                    if (!(ss["ss_item_sk"] == i["i_item_sk"]))
                      continue;
                    _res.push_back(unordered_map<string, any>{
                        {string("qty"), any(ss["ss_quantity"])},
                        {string("ret"), any(sr["sr_return_quantity"])},
                        {string("csq"), any(cs["cs_quantity"])},
                        {string("i_item_id"), any(i["i_item_id"])},
                        {string("i_item_desc"), any(i["i_item_desc"])},
                        {string("s_state"), any(s["s_state"])}});
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  struct GroupKey6 {
    unordered_map<string, int> i_item_id;
    unordered_map<string, int> i_item_desc;
    unordered_map<string, int> s_state;
  };
  inline bool operator==(const GroupKey6 &a, const GroupKey6 &b) {
    return a.i_item_id == b.i_item_id && a.i_item_desc == b.i_item_desc &&
           a.s_state == b.s_state;
  }
  namespace std {
  template <> struct hash<GroupKey6> {
    size_t operator()(const GroupKey6 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.i_item_id);
      _hash_combine(h, k.i_item_desc);
      _hash_combine(h, k.s_state);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = joined;
    auto _groups = _group_by(_src, [&](auto &j) {
      return GroupKey6{j["i_item_id"], j["i_item_desc"], j["s_state"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key.i_item_id)},
          {string("i_item_desc"), any(g.key.i_item_desc)},
          {string("s_state"), any(g.key.s_state)},
          {string("store_sales_quantitycount"),
           any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("store_sales_quantityave"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["qty"]);
             }
             return _res;
           })()))},
          {string("store_sales_quantitystdev"), any(0.0)},
          {string("store_sales_quantitycov"), any(0.0)},
          {string("store_returns_quantitycount"),
           any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("store_returns_quantityave"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["ret"]);
             }
             return _res;
           })()))},
          {string("store_returns_quantitystdev"), any(0.0)},
          {string("store_returns_quantitycov"), any(0.0)},
          {string("catalog_sales_quantitycount"),
           any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &_ : g) {
               _res.push_back(_);
             }
             return _res;
           })()))},
          {string("catalog_sales_quantityave"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["csq"]);
             }
             return _res;
           })()))},
          {string("catalog_sales_quantitystdev"), any(0.0)},
          {string("catalog_sales_quantitycov"), any(0.0)}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q17_stats = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_id"), any(string("I1"))},
              {string("i_item_desc"), any(string("Item 1"))},
              {string("s_state"), any(string("CA"))},
              {string("store_sales_quantitycount"), any(1)},
              {string("store_sales_quantityave"), any(10.0)},
              {string("store_sales_quantitystdev"), any(0.0)},
              {string("store_sales_quantitycov"), any(0.0)},
              {string("store_returns_quantitycount"), any(1)},
              {string("store_returns_quantityave"), any(2.0)},
              {string("store_returns_quantitystdev"), any(0.0)},
              {string("store_returns_quantitycov"), any(0.0)},
              {string("catalog_sales_quantitycount"), any(1)},
              {string("catalog_sales_quantityave"), any(5.0)},
              {string("catalog_sales_quantitystdev"), any(0.0)},
              {string("catalog_sales_quantitycov"), any(0.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q17_stats();
  return 0;
}
