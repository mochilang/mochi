// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct SalesYear1 {
  decltype(1) week;
  decltype(1) store;
  decltype(100) amount;
};
struct Join {
  decltype(y1.store) s_store_id1;
  decltype((y2.amount / y1.amount)) ratio;
};
inline void __json(const Join &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id1\":";
  __json(v.s_store_id1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ratio\":";
  __json(v.ratio);
  std::cout << "}";
}
inline void __json(const SalesYear1 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"week\":";
  __json(v.week);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store\":";
  __json(v.store);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amount\":";
  __json(v.amount);
  std::cout << "}";
}
int main() {
  std::vector<SalesYear1> sales_year1 = {SalesYear1{1, 1, 100}};
  std::vector<SalesYear1> sales_year2 = {SalesYear1{53, 1, 150}};
  std::vector<Join> join = ([&]() {
    std::vector<Join> __items;
    for (auto y1 : sales_year1) {
      for (auto y2 : sales_year2) {
        if (!(((y1.store == y2.store) && (y1.week == (y2.week - 52)))))
          continue;
        __items.push_back(Join{y1.store, (y2.amount / y1.amount)});
      }
    }
    return __items;
  })();
  std::vector<Join> result = join;
  (__json(result));
  // test TPCDS Q59 simplified
  return 0;
}
