// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) customer;
  decltype(2) sold_date;
  decltype(60) price;
};
struct DateDim {
  decltype(2) d_date_sk;
  decltype(5) d_month_seq;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("X")) ca_county;
  decltype(std::string("Y")) ca_state;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("X")) s_county;
  decltype(std::string("Y")) s_state;
};
struct Revenue {
  decltype(c.c_customer_sk) customer;
  decltype(ss.price) amt;
};
struct __struct7 {
  decltype(std::declval<Revenue>().customer) key;
  std::vector<Revenue> items;
};
struct ByCustomer {
  decltype(std::declval<__struct7>().key) customer;
  double revenue;
};
struct __struct9 {
  decltype(std::unordered_map<
           std::string, decltype(int((std::declval<Revenue>().revenue / 50)))>{
      {std::string("seg"), int((std::declval<Revenue>().revenue / 50))}}) key;
  std::vector<Revenue> items;
};
struct Segment {
  decltype(std::declval<__struct9>().key.seg) segment;
  int num_customers;
  decltype((std::declval<__struct9>().key.seg * 50)) segment_base;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const Revenue &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer\":";
  __json(v.customer);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  std::cout << "}";
}
inline void __json(const ByCustomer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer\":";
  __json(v.customer);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer\":";
  __json(v.customer);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date\":";
  __json(v.sold_date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_county\":";
  __json(v.s_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const Segment &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"segment\":";
  __json(v.segment);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"num_customers\":";
  __json(v.num_customers);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"segment_base\":";
  __json(v.segment_base);
  std::cout << "}";
}
std::vector<StoreSale> store_sales = {StoreSale{1, 2, 60}, StoreSale{2, 2, 40}};
std::vector<DateDim> date_dim = {DateDim{2, 5}};
std::vector<Customer> customer = {Customer{1, 1}, Customer{2, 1}};
std::vector<CustomerAddres> customer_address = {
    CustomerAddres{1, std::string("X"), std::string("Y")}};
std::vector<Store> store = {Store{1, std::string("X"), std::string("Y")}};

int int(float x) { return std::stoi(x); }

int main() {
  std::vector<Revenue> revenue = ([&]() {
    std::vector<Revenue> __items;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((ss.sold_date == d.d_date_sk)))
          continue;
        for (auto c : customer) {
          if (!((ss.customer == c.c_customer_sk)))
            continue;
          for (auto ca : customer_address) {
            if (!((((c.c_current_addr_sk == ca.ca_address_sk) &&
                    (ca.ca_county == std::string("X"))) &&
                   (ca.ca_state == std::string("Y")))))
              continue;
            for (auto s : store) {
              if (!((((1 == s.s_store_sk) && (ca.ca_county == s.s_county)) &&
                     (ca.ca_state == s.s_state))))
                continue;
              __items.push_back(Revenue{c.c_customer_sk, ss.price});
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Revenue> by_customer = ([&]() {
    std::vector<__struct7> __groups;
    for (auto r : revenue) {
      auto __key = r.customer;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Revenue{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct7{__key, std::vector<Revenue>{Revenue{r}}});
      }
    }
    std::vector<ByCustomer> __items;
    for (auto &g : __groups) {
      __items.push_back(ByCustomer{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Revenue>().amt)> __items;
            for (auto x : g.items) {
              __items.push_back(x.amt);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Revenue> segments = ([&]() {
    std::vector<__struct9> __groups;
    for (auto r : by_customer) {
      auto __key =
          std::unordered_map<std::string, decltype(int((r.revenue / 50)))>{
              {std::string("seg"), int((r.revenue / 50))}};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Revenue{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct9{__key, std::vector<Revenue>{Revenue{r}}});
      }
    }
    std::vector<Segment> __items;
    for (auto &g : __groups) {
      __items.push_back(
          Segment{g.key.seg, ((int)g.items.size()), (g.key.seg * 50)});
    }
    return __items;
  })();
  std::vector<Revenue> result = segments;
  (__json(result));
  // test TPCDS Q54 simplified
  return 0;
}
