// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(1) i_item_sk;
  decltype(10) i_brand_id;
  decltype(std::string("BrandA")) i_brand;
  decltype(1) i_manager_id;
};
struct TimeDim {
  decltype(1) t_time_sk;
  decltype(8) t_hour;
  decltype(30) t_minute;
  decltype(std::string("breakfast")) t_meal_time;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(12) d_moy;
  decltype(1998) d_year;
};
struct WebSale {
  decltype(100) ws_ext_sales_price;
  decltype(1) ws_sold_date_sk;
  decltype(1) ws_item_sk;
  decltype(1) ws_sold_time_sk;
};
struct CatalogSale {
  decltype(200) cs_ext_sales_price;
  decltype(1) cs_sold_date_sk;
  decltype(1) cs_item_sk;
  decltype(2) cs_sold_time_sk;
};
struct StoreSale {
  decltype(150) ss_ext_sales_price;
  decltype(1) ss_sold_date_sk;
  decltype(2) ss_item_sk;
  decltype(1) ss_sold_time_sk;
};
struct UnionSale {
  decltype(ws.ws_ext_sales_price) ext_price;
  decltype(ws.ws_item_sk) item_sk;
  decltype(ws.ws_sold_time_sk) time_sk;
};
struct Result {
  decltype(i.i_brand_id) brand_id;
  decltype(i.i_brand) brand;
  decltype(t.t_hour) t_hour;
  decltype(t.t_minute) t_minute;
};
struct __struct9 {
  decltype(i) i;
  UnionSale s;
  decltype(t) t;
};
struct __struct10 {
  Result key;
  std::vector<__struct9> items;
};
struct __struct11 {
  decltype(std::declval<__struct10>().key.brand_id) i_brand_id;
  decltype(std::declval<__struct10>().key.brand) i_brand;
  decltype(std::declval<__struct10>().key.t_hour) t_hour;
  decltype(std::declval<__struct10>().key.t_minute) t_minute;
  double ext_price;
};
struct __struct12 {
  double f0;
  decltype(std::declval<__struct10>().key.brand_id) f1;
};
inline void __json(const __struct12 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_minute\":";
  __json(v.t_minute);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_time_sk\":";
  __json(v.cs_sold_time_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const UnionSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_price\":";
  __json(v.ext_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"time_sk\":";
  __json(v.time_sk);
  std::cout << "}";
}
inline void __json(const __struct11 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_minute\":";
  __json(v.t_minute);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_price\":";
  __json(v.ext_price);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_time_sk\":";
  __json(v.ss_sold_time_sk);
  std::cout << "}";
}
inline void __json(const TimeDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_time_sk\":";
  __json(v.t_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_minute\":";
  __json(v.t_minute);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_meal_time\":";
  __json(v.t_meal_time);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t\":";
  __json(v.t);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_time_sk\":";
  __json(v.ws_sold_time_sk);
  std::cout << "}";
}
int main() {
  std::vector<Item> item = {Item{1, 10, std::string("BrandA"), 1},
                            Item{2, 20, std::string("BrandB"), 1}};
  std::vector<TimeDim> time_dim = {TimeDim{1, 8, 30, std::string("breakfast")},
                                   TimeDim{2, 18, 0, std::string("dinner")},
                                   TimeDim{3, 12, 0, std::string("lunch")}};
  std::vector<DateDim> date_dim = {DateDim{1, 12, 1998}};
  std::vector<WebSale> web_sales = {WebSale{100, 1, 1, 1}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{200, 1, 1, 2}};
  std::vector<StoreSale> store_sales = {StoreSale{150, 1, 2, 1}};
  auto month = 12;
  auto year = 1998;
  std::vector<UnionSale> union_sales = concat(
      ([&]() {
        std::vector<UnionSale> __items;
        for (auto ws : web_sales) {
          for (auto d : date_dim) {
            if (!((d.d_date_sk == ws.ws_sold_date_sk)))
              continue;
            if (!(((d.d_moy == month) && (d.d_year == year))))
              continue;
            __items.push_back(UnionSale{ws.ws_ext_sales_price, ws.ws_item_sk,
                                        ws.ws_sold_time_sk});
          }
        }
        return __items;
      })(),
      ([&]() {
        std::vector<UnionSale> __items;
        for (auto cs : catalog_sales) {
          for (auto d : date_dim) {
            if (!((d.d_date_sk == cs.cs_sold_date_sk)))
              continue;
            if (!(((d.d_moy == month) && (d.d_year == year))))
              continue;
            __items.push_back(UnionSale{cs.cs_ext_sales_price, cs.cs_item_sk,
                                        cs.cs_sold_time_sk});
          }
        }
        return __items;
      })(),
      ([&]() {
        std::vector<UnionSale> __items;
        for (auto ss : store_sales) {
          for (auto d : date_dim) {
            if (!((d.d_date_sk == ss.ss_sold_date_sk)))
              continue;
            if (!(((d.d_moy == month) && (d.d_year == year))))
              continue;
            __items.push_back(UnionSale{ss.ss_ext_sales_price, ss.ss_item_sk,
                                        ss.ss_sold_time_sk});
          }
        }
        return __items;
      })());
  std::vector<__struct9> result = ([&]() {
    std::vector<__struct10> __groups;
    for (auto i : item) {
      for (auto s : union_sales) {
        if (!((s.item_sk == i.i_item_sk)))
          continue;
        for (auto t : time_dim) {
          if (!((t.t_time_sk == s.time_sk)))
            continue;
          if (!(((i.i_manager_id == 1) &&
                 (((t.t_meal_time == std::string("breakfast")) ||
                   (t.t_meal_time == std::string("dinner")))))))
            continue;
          auto __key = Result{i.i_brand_id, i.i_brand, t.t_hour, t.t_minute};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct9{i, s, t});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct10{__key, std::vector<__struct9>{__struct9{i, s, t}}});
          }
        }
      }
    }
    std::vector<std::pair<__struct12, __struct11>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct12{
               (-([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<__struct9>().s.ext_price)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.s.ext_price);
                 }
                 return __items;
               })())),
               g.key.brand_id},
           __struct11{
               g.key.brand_id, g.key.brand, g.key.t_hour, g.key.t_minute,
               ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<__struct9>().s.ext_price)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.s.ext_price);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct11> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q71 simplified
  return 0;
}
