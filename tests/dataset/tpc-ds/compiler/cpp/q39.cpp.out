// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, int>> inventory =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 10}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 2},
                                     {string("inv_quantity_on_hand"), 10}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 3},
                                     {string("inv_quantity_on_hand"), 250}}};
  vector<unordered_map<string, int>> item = vector<unordered_map<string, int>>{
      unordered_map<string, int>{{string("i_item_sk"), 1}}};
  vector<unordered_map<string, any>> warehouse =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("w_warehouse_sk"), any(1)},
          {string("w_warehouse_name"), any(string("W1"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 2000},
                                     {string("d_moy"), 1}},
          unordered_map<string, int>{{string("d_date_sk"), 2},
                                     {string("d_year"), 2000},
                                     {string("d_moy"), 2}},
          unordered_map<string, int>{{string("d_date_sk"), 3},
                                     {string("d_year"), 2000},
                                     {string("d_moy"), 3}}};
  struct GroupKey0 {
    unordered_map<string, any> w;
    unordered_map<string, int> i;
    unordered_map<string, int> month;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.w == b.w && a.i == b.i && a.month == b.month;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.w);
      _hash_combine(h, k.i);
      _hash_combine(h, k.month);
      return h;
    }
  };
  } // namespace std

  auto monthly =
      ([&]() -> vector<unordered_map<unordered_map<string, any>, any>> {
        using ElemT = unordered_map<string, int>;
        using KeyT = GroupKey0;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &inv : inventory) {
          for (auto &d : date_dim) {
            if (!(inv["inv_date_sk"] == d["d_date_sk"]))
              continue;
            for (auto &i : item) {
              if (!(inv["inv_item_sk"] == i["i_item_sk"]))
                continue;
              for (auto &w : warehouse) {
                if (!(inv["inv_warehouse_sk"] == w["w_warehouse_sk"]))
                  continue;
                if (d["d_year"] == 2000) {
                  KeyT _k = GroupKey0{w["w_warehouse_sk"], i["i_item_sk"],
                                      d["d_moy"]};
                  if (!groups.count(_k)) {
                    groups[_k] = Group{_k, {}};
                    order.push_back(_k);
                  }
                  groups[_k].Items.push_back(inv);
                }
              }
            }
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<unordered_map<string, any>, any>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<unordered_map<string, any>, any>{
              {string("w"), any(g.key.w)},
              {string("i"), any(g.key.i)},
              {string("qty"), any(_sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(_cast<unordered_map<string, any>>(
                       x)["inv_quantity_on_hand"]);
                 }
                 return _res;
               })()))}});
        }
        return _res;
      })();
  unordered_map<string, unordered_map<string, any>> grouped =
      unordered_map<string, unordered_map<string, any>>{};
  for (const unordered_map<string, any> &m : monthly) {
    auto key = to_string(unordered_map<string, unordered_map<string, any> &>{
        {string("w"), m["w"]}, {string("i"), m["i"]}});
    if ((grouped.count(key) != 0)) {
      unordered_map<string, any> g = grouped[key];
      grouped[key] = unordered_map<string, any>{
          {string("w"), any(g["w"])},
          {string("i"), any(g["i"])},
          {string("qtys"), any(append(g["qtys"], m["qty"]))}};
    } else {
      grouped[key] = unordered_map<string, any>{
          {string("w"), any(m["w"])},
          {string("i"), any(m["i"])},
          {string("qtys"),
           any(vector<unordered_map<string, any> &>{m["qty"]})}};
    }
  }
  vector<any> summary = vector<any>{};
  for (auto g : values(grouped)) {
    auto mean = _avg(g.qtys);
    double sumsq = 0.0;
    for (auto q : g.qtys) {
      sumsq = sumsq + (q - mean) * (q - mean);
    }
    double variance = sumsq / (g.qtys.size() - 1);
    any cov = _cast<unordered_map<string, any>>(math)["sqrt"](variance) / mean;
    if (cov > 1.5) {
      summary = append(summary, unordered_map<string, any>{
                                    {string("w_warehouse_sk"), any(g.w)},
                                    {string("i_item_sk"), any(g.i)},
                                    {string("cov"), any(cov)}});
    }
  }
  _json(summary);
  auto test_TPCDS_Q39_simplified = [&]() {
    if (!(summary ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("w_warehouse_sk"), any(1)},
              {string("i_item_sk"), any(1)},
              {string("cov"), any(1.539600717839002)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q39_simplified();
  return 0;
}
