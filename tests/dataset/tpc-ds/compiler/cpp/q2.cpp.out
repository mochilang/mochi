// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _union_all(const vector<T> &a, const vector<T> &b) {
  vector<T> res = a;
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<any> web_sales = vector<any>{};
  vector<any> catalog_sales = vector<any>{};
  vector<any> date_dim = vector<any>{};
  auto wscs = _union_all(
      (([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &ws : web_sales) {
          _res.push_back(unordered_map<string, any>{
              {string("sold_date_sk"),
               _cast<unordered_map<string, any>>(ws)["ws_sold_date_sk"]},
              {string("sales_price"),
               _cast<unordered_map<string, any>>(ws)["ws_ext_sales_price"]},
              {string("day"),
               _cast<unordered_map<string, any>>(ws)["ws_sold_date_name"]}});
        }
        return _res;
      })()),
      (([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &cs : catalog_sales) {
          _res.push_back(unordered_map<string, any>{
              {string("sold_date_sk"),
               _cast<unordered_map<string, any>>(cs)["cs_sold_date_sk"]},
              {string("sales_price"),
               _cast<unordered_map<string, any>>(cs)["cs_ext_sales_price"]},
              {string("day"),
               _cast<unordered_map<string, any>>(cs)["cs_sold_date_name"]}});
        }
        return _res;
      })()));
  struct GroupKey0 {
    any week_seq;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.week_seq == b.week_seq;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.week_seq);
      return h;
    }
  };
  } // namespace std

  auto wswscs = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &w : wscs) {
      for (auto &d : date_dim) {
        if (!(w["sold_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        KeyT _k = GroupKey0{_cast<unordered_map<string, any>>(d)["d_week_seq"]};
        if (!groups.count(_k)) {
          groups[_k] = Group{_k, {}};
          order.push_back(_k);
        }
        groups[_k].Items.push_back(w);
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("d_week_seq"), any(g.key.week_seq)},
          {string("sun_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Sunday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("mon_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Monday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("tue_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Tuesday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("wed_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Wednesday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("thu_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Thursday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("fri_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Friday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))},
          {string("sat_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["day"] ==
                   string("Saturday")) {
                 _res.push_back(
                     _cast<unordered_map<string, any>>(x)["sales_price"]);
               }
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  vector<any> result = vector<any>{};
  _json(result);
  auto test_TPCDS_Q2_empty = [&]() {
    if (!(result.size() == 0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q2_empty();
  return 0;
}
