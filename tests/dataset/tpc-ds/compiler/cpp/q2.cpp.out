// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  decltype(1) ws_sold_date_sk;
  decltype(5) ws_ext_sales_price;
  decltype(std::string("Sunday")) ws_sold_date_name;
};
struct CatalogSale {
  decltype(1) cs_sold_date_sk;
  decltype(5) cs_ext_sales_price;
  decltype(std::string("Sunday")) cs_sold_date_name;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_week_seq;
  decltype(std::string("Sunday")) d_day_name;
  decltype(1998) d_year;
};
struct Wsc {
  decltype(ws.ws_sold_date_sk) sold_date_sk;
  decltype(ws.ws_ext_sales_price) sales_price;
  decltype(ws.ws_sold_date_name) day;
};
struct Wswsc {
  Wsc w;
  decltype(d) d;
};
struct __struct6 {
  decltype(std::unordered_map<std::string, decltype(d.d_week_seq)>{
      {std::string("week_seq"), d.d_week_seq}}) key;
  std::vector<Wswsc> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.week_seq) d_week_seq;
  double sun_sales;
  double mon_sales;
  double tue_sales;
  double wed_sales;
  double thu_sales;
  double fri_sales;
  double sat_sales;
};
struct Result {
  decltype(std::declval<Wswsc>().d_week_seq) d_week_seq1;
  decltype((std::declval<Wswsc>().sun_sales /
            std::declval<Wswsc>().sun_sales)) sun_ratio;
  decltype((std::declval<Wswsc>().mon_sales /
            std::declval<Wswsc>().mon_sales)) mon_ratio;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_name\":";
  __json(v.cs_sold_date_name);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_week_seq\":";
  __json(v.d_week_seq);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_day_name\":";
  __json(v.d_day_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_week_seq\":";
  __json(v.d_week_seq);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sun_sales\":";
  __json(v.sun_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mon_sales\":";
  __json(v.mon_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"tue_sales\":";
  __json(v.tue_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wed_sales\":";
  __json(v.wed_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"thu_sales\":";
  __json(v.thu_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"fri_sales\":";
  __json(v.fri_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sat_sales\":";
  __json(v.sat_sales);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_week_seq1\":";
  __json(v.d_week_seq1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sun_ratio\":";
  __json(v.sun_ratio);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mon_ratio\":";
  __json(v.mon_ratio);
  std::cout << "}";
}
inline void __json(const Wsc &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date_sk\":";
  __json(v.sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_price\":";
  __json(v.sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"day\":";
  __json(v.day);
  std::cout << "}";
}
inline void __json(const Wswsc &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w\":";
  __json(v.w);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_name\":";
  __json(v.ws_sold_date_name);
  std::cout << "}";
}
int main() {
  std::vector<WebSale> web_sales = {WebSale{1, 5, std::string("Sunday")},
                                    WebSale{2, 5, std::string("Monday")},
                                    WebSale{8, 10, std::string("Sunday")},
                                    WebSale{9, 10, std::string("Monday")}};
  std::vector<CatalogSale> catalog_sales = {
      CatalogSale{1, 5, std::string("Sunday")},
      CatalogSale{2, 5, std::string("Monday")},
      CatalogSale{8, 10, std::string("Sunday")},
      CatalogSale{9, 10, std::string("Monday")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1, std::string("Sunday"), 1998},
                                   DateDim{2, 1, std::string("Monday"), 1998},
                                   DateDim{8, 54, std::string("Sunday"), 1999},
                                   DateDim{9, 54, std::string("Monday"), 1999}};
  std::vector<Wsc> wscs = ([&](auto a, auto b) {
    a.insert(a.end(), b.begin(), b.end());
    std::sort(a.begin(), a.end());
    a.erase(std::unique(a.begin(), a.end()), a.end());
    return a;
  })((([&]() {
       std::vector<Wsc> __items;
       for (auto ws : web_sales) {
         __items.push_back(Wsc{ws.ws_sold_date_sk, ws.ws_ext_sales_price,
                               ws.ws_sold_date_name});
       }
       return __items;
     })()),
     (([&]() {
       std::vector<Wsc> __items;
       for (auto cs : catalog_sales) {
         __items.push_back(Wsc{cs.cs_sold_date_sk, cs.cs_ext_sales_price,
                               cs.cs_sold_date_name});
       }
       return __items;
     })()));
  std::vector<Wswsc> wswscs = ([&]() {
    std::vector<__struct6> __groups;
    for (auto w : wscs) {
      for (auto d : date_dim) {
        if (!((w.sold_date_sk == d.d_date_sk)))
          continue;
        auto __key = std::unordered_map<std::string, decltype(d.d_week_seq)>{
            {std::string("week_seq"), d.d_week_seq}};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(Wswsc{w, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct6{__key, std::vector<Wswsc>{Wswsc{w, d}}});
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.week_seq, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Sunday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Monday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Tuesday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Wednesday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Thursday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Friday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Wswsc>().sales_price)> __items;
            for (auto x : g.items) {
              if (!((x.day == std::string("Saturday"))))
                continue;
              __items.push_back(x.sales_price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Wswsc> year1 = ([&]() {
    std::vector<Wswsc> __items;
    for (auto w : wswscs) {
      if (!((w.d_week_seq == 1)))
        continue;
      __items.push_back(w);
    }
    return __items;
  })();
  std::vector<Wswsc> year2 = ([&]() {
    std::vector<Wswsc> __items;
    for (auto w : wswscs) {
      if (!((w.d_week_seq == 54)))
        continue;
      __items.push_back(w);
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto y : year1) {
      for (auto z : year2) {
        if (!((y.d_week_seq == (z.d_week_seq - 53))))
          continue;
        __items.push_back(Result{y.d_week_seq, (y.sun_sales / z.sun_sales),
                                 (y.mon_sales / z.mon_sales)});
      }
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q2 result
  return 0;
}
