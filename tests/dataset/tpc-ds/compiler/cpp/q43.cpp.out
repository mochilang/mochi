// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct DateDim {
  decltype(1) date_sk;
  decltype(std::string("Sunday")) d_day_name;
  decltype(2020) d_year;
};
struct Store {
  decltype(1) store_sk;
  decltype(std::string("S1")) store_id;
  decltype(std::string("Main")) store_name;
  decltype(0) gmt_offset;
};
struct StoreSale {
  decltype(1) sold_date_sk;
  decltype(1) store_sk;
  decltype(10) sales_price;
};
struct Record {
  decltype(d.d_day_name) d_day_name;
  decltype(s.store_name) s_store_name;
  decltype(s.store_id) s_store_id;
  decltype(ss.sales_price) price;
};
struct Base {
  decltype(std::declval<Record>().s_store_name) name;
  decltype(std::declval<Record>().s_store_id) id;
};
struct __struct6 {
  Base key;
  std::vector<Record> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.name) s_store_name;
  decltype(std::declval<__struct6>().key.id) s_store_id;
  double sun_sales;
  double mon_sales;
  double tue_sales;
  double wed_sales;
  double thu_sales;
  double fri_sales;
  double sat_sales;
};
inline void __json(const Record &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_day_name\":";
  __json(v.d_day_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date_sk\":";
  __json(v.date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_day_name\":";
  __json(v.d_day_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Base &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_id\":";
  __json(v.s_store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sun_sales\":";
  __json(v.sun_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mon_sales\":";
  __json(v.mon_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"tue_sales\":";
  __json(v.tue_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wed_sales\":";
  __json(v.wed_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"thu_sales\":";
  __json(v.thu_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"fri_sales\":";
  __json(v.fri_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sat_sales\":";
  __json(v.sat_sales);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date_sk\":";
  __json(v.sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sk\":";
  __json(v.store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_price\":";
  __json(v.sales_price);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sk\":";
  __json(v.store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_id\":";
  __json(v.store_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_name\":";
  __json(v.store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"gmt_offset\":";
  __json(v.gmt_offset);
  std::cout << "}";
}
int main() {
  std::vector<DateDim> date_dim = {DateDim{1, std::string("Sunday"), 2020},
                                   DateDim{2, std::string("Monday"), 2020},
                                   DateDim{3, std::string("Tuesday"), 2020},
                                   DateDim{4, std::string("Wednesday"), 2020},
                                   DateDim{5, std::string("Thursday"), 2020},
                                   DateDim{6, std::string("Friday"), 2020},
                                   DateDim{7, std::string("Saturday"), 2020}};
  std::vector<Store> store = {
      Store{1, std::string("S1"), std::string("Main"), 0}};
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 1, 10}, StoreSale{2, 1, 20}, StoreSale{3, 1, 30},
      StoreSale{4, 1, 40}, StoreSale{5, 1, 50}, StoreSale{6, 1, 60},
      StoreSale{7, 1, 70}};
  auto year = 2020;
  auto gmt = 0;
  std::vector<Record> records = ([&]() {
    std::vector<Record> __items;
    for (auto d : date_dim) {
      for (auto ss : store_sales) {
        if (!((ss.sold_date_sk == d.date_sk)))
          continue;
        for (auto s : store) {
          if (!((ss.store_sk == s.store_sk)))
            continue;
          if (!(((s.gmt_offset == gmt) && (d.d_year == year))))
            continue;
          __items.push_back(
              Record{d.d_day_name, s.store_name, s.store_id, ss.sales_price});
        }
      }
    }
    return __items;
  })();
  std::vector<Record> base = ([&]() {
    std::vector<__struct6> __groups;
    for (auto r : records) {
      auto __key = Base{r.s_store_name, r.s_store_id};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Record{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct6{__key, std::vector<Record>{Record{r}}});
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.name, g.key.id, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().d_day_name == std::string("Sunday"))
                    ? std::declval<Record>().price
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(
                  ((x.d_day_name == std::string("Sunday")) ? x.price : 0));
            }
            return __items;
          })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype((
                    (std::declval<Record>().d_day_name == std::string("Monday"))
                        ? std::declval<Record>().price
                        : 0))>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(
                      ((x.d_day_name == std::string("Monday")) ? x.price : 0));
                }
                return __items;
              })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().d_day_name == std::string("Tuesday"))
                    ? std::declval<Record>().price
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(
                  ((x.d_day_name == std::string("Tuesday")) ? x.price : 0));
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().d_day_name == std::string("Wednesday"))
                    ? std::declval<Record>().price
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(
                  ((x.d_day_name == std::string("Wednesday")) ? x.price : 0));
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().d_day_name == std::string("Thursday"))
                    ? std::declval<Record>().price
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(
                  ((x.d_day_name == std::string("Thursday")) ? x.price : 0));
            }
            return __items;
          })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype((
                    (std::declval<Record>().d_day_name == std::string("Friday"))
                        ? std::declval<Record>().price
                        : 0))>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(
                      ((x.d_day_name == std::string("Friday")) ? x.price : 0));
                }
                return __items;
              })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().d_day_name == std::string("Saturday"))
                    ? std::declval<Record>().price
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(
                  ((x.d_day_name == std::string("Saturday")) ? x.price : 0));
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Record> result = base;
  (__json(result));
  // test TPCDS Q43 simplified
  return 0;
}
