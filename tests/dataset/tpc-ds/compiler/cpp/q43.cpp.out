// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> date_dim = vector<
      unordered_map<string, any>>{
      unordered_map<string, any>{{string("date_sk"), any(1)},
                                 {string("d_day_name"), any(string("Sunday"))},
                                 {string("d_year"), any(2020)}},
      unordered_map<string, any>{{string("date_sk"), any(2)},
                                 {string("d_day_name"), any(string("Monday"))},
                                 {string("d_year"), any(2020)}},
      unordered_map<string, any>{{string("date_sk"), any(3)},
                                 {string("d_day_name"), any(string("Tuesday"))},
                                 {string("d_year"), any(2020)}},
      unordered_map<string, any>{
          {string("date_sk"), any(4)},
          {string("d_day_name"), any(string("Wednesday"))},
          {string("d_year"), any(2020)}},
      unordered_map<string, any>{
          {string("date_sk"), any(5)},
          {string("d_day_name"), any(string("Thursday"))},
          {string("d_year"), any(2020)}},
      unordered_map<string, any>{{string("date_sk"), any(6)},
                                 {string("d_day_name"), any(string("Friday"))},
                                 {string("d_year"), any(2020)}},
      unordered_map<string, any>{
          {string("date_sk"), any(7)},
          {string("d_day_name"), any(string("Saturday"))},
          {string("d_year"), any(2020)}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("store_sk"), any(1)},
                                 {string("store_id"), any(string("S1"))},
                                 {string("store_name"), any(string("Main"))},
                                 {string("gmt_offset"), any(0)}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("sold_date_sk"), any(1)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(10.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(2)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(20.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(3)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(30.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(4)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(40.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(5)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(50.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(6)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(60.0)}},
          unordered_map<string, any>{{string("sold_date_sk"), any(7)},
                                     {string("store_sk"), any(1)},
                                     {string("sales_price"), any(70.0)}}};
  int year = 2020;
  int gmt = 0;
  auto records =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        for (auto &d : date_dim) {
          for (auto &ss : store_sales) {
            if (!(ss["sold_date_sk"] == d["date_sk"]))
              continue;
            for (auto &s : store) {
              if (!(ss["store_sk"] == s["store_sk"]))
                continue;
              if (s["gmt_offset"] == gmt && d["d_year"] == year) {
                _res.push_back(
                    unordered_map<string, unordered_map<string, any>>{
                        {string("d_day_name"), d["d_day_name"]},
                        {string("s_store_name"), s["store_name"]},
                        {string("s_store_id"), s["store_id"]},
                        {string("price"), ss["sales_price"]}});
              }
            }
          }
        }
        return _res;
      })();
  struct GroupKey0 {
    unordered_map<string, any> name;
    unordered_map<string, any> id;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.name == b.name && a.id == b.id;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.name);
      _hash_combine(h, k.id);
      return h;
    }
  };
  } // namespace std

  auto base = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = records;
    auto _groups = _group_by(_src, [&](auto &r) {
      return GroupKey0{r["s_store_name"], r["s_store_id"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("s_store_name"), any(g.key.name)},
          {string("s_store_id"), any(g.key.id)},
          {string("sun_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Sunday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("mon_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Monday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("tue_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Tuesday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("wed_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Wednesday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("thu_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Thursday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("fri_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Friday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))},
          {string("sat_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(any(([&]() {
                 if (_cast<unordered_map<string, any>>(x)["d_day_name"] ==
                     string("Saturday"))
                   return _cast<unordered_map<string, any>>(x)["price"];
                 return 0.0;
               })()));
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  vector<unordered_map<string, any>> result = base;
  _json(result);
  auto test_TPCDS_Q43_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("s_store_name"), any(string("Main"))},
              {string("s_store_id"), any(string("S1"))},
              {string("sun_sales"), any(10.0)},
              {string("mon_sales"), any(20.0)},
              {string("tue_sales"), any(30.0)},
              {string("wed_sales"), any(40.0)},
              {string("thu_sales"), any(50.0)},
              {string("fri_sales"), any(60.0)},
              {string("sat_sales"), any(70.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q43_simplified();
  return 0;
}
