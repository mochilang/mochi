// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct S {
  decltype(1998) ss_sold_year;
  decltype(1) ss_item_sk;
  decltype(1) ss_customer_sk;
  decltype(10) ss_qty;
  decltype(50) ss_wc;
  decltype(100) ss_sp;
};
struct W {
  decltype(1998) ws_sold_year;
  decltype(1) ws_item_sk;
  decltype(1) ws_customer_sk;
  decltype(5) ws_qty;
  decltype(25) ws_wc;
  decltype(50) ws_sp;
};
struct C {
  decltype(1998) cs_sold_year;
  decltype(1) cs_item_sk;
  decltype(1) cs_customer_sk;
  decltype(3) cs_qty;
  decltype(15) cs_wc;
  decltype(30) cs_sp;
};
struct Result {
  decltype(s.ss_sold_year) ss_sold_year;
  decltype(s.ss_item_sk) ss_item_sk;
  decltype(s.ss_customer_sk) ss_customer_sk;
  bool ratio;
  decltype(s.ss_qty) store_qty;
  decltype(s.ss_wc) store_wholesale_cost;
  decltype(s.ss_sp) store_sales_price;
  bool other_chan_qty;
  bool other_chan_wholesale_cost;
  bool other_chan_sales_price;
};
inline void __json(const C &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_year\":";
  __json(v.cs_sold_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_customer_sk\":";
  __json(v.cs_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_qty\":";
  __json(v.cs_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_wc\":";
  __json(v.cs_wc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sp\":";
  __json(v.cs_sp);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_year\":";
  __json(v.ss_sold_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ratio\":";
  __json(v.ratio);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_qty\":";
  __json(v.store_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_wholesale_cost\":";
  __json(v.store_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sales_price\":";
  __json(v.store_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"other_chan_qty\":";
  __json(v.other_chan_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"other_chan_wholesale_cost\":";
  __json(v.other_chan_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"other_chan_sales_price\":";
  __json(v.other_chan_sales_price);
  std::cout << "}";
}
inline void __json(const S &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_year\":";
  __json(v.ss_sold_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_qty\":";
  __json(v.ss_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_wc\":";
  __json(v.ss_wc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sp\":";
  __json(v.ss_sp);
  std::cout << "}";
}
inline void __json(const W &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_year\":";
  __json(v.ws_sold_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_customer_sk\":";
  __json(v.ws_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_qty\":";
  __json(v.ws_qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_wc\":";
  __json(v.ws_wc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sp\":";
  __json(v.ws_sp);
  std::cout << "}";
}
int main() {
  std::vector<S> ss = {S{1998, 1, 1, 10, 50, 100}};
  std::vector<W> ws = {W{1998, 1, 1, 5, 25, 50}};
  std::vector<C> cs = {C{1998, 1, 1, 3, 15, 30}};
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto s : ss) {
      {
        bool __matched0 = false;
        for (auto w : ws) {
          if (!((((w.ws_sold_year == s.ss_sold_year) &&
                  (w.ws_item_sk == s.ss_item_sk)) &&
                 (w.ws_customer_sk == s.ss_customer_sk))))
            continue;
          __matched0 = true;
          {
            bool __matched1 = false;
            for (auto c : cs) {
              if (!((((c.cs_sold_year == s.ss_sold_year) &&
                      (c.cs_item_sk == s.ss_item_sk)) &&
                     (c.cs_customer_sk == s.ss_customer_sk))))
                continue;
              __matched1 = true;
              if (!((((((((w == nullptr) ? 0 : w.ws_qty)) > 0) ||
                       ((((c == nullptr) ? 0 : c.cs_qty)) > 0))) &&
                     (s.ss_sold_year == 1998))))
                continue;
              __items.push_back(
                  Result{s.ss_sold_year, s.ss_item_sk, s.ss_customer_sk,
                         (s.ss_qty / (((((w == nullptr) ? 0 : w.ws_qty)) +
                                       (((c == nullptr) ? 0 : c.cs_qty))))),
                         s.ss_qty, s.ss_wc, s.ss_sp,
                         ((((w == nullptr) ? 0 : w.ws_qty)) +
                          (((c == nullptr) ? 0 : c.cs_qty))),
                         ((((w == nullptr) ? 0 : w.ws_wc)) +
                          (((c == nullptr) ? 0 : c.cs_wc))),
                         ((((w == nullptr) ? 0 : w.ws_sp)) +
                          (((c == nullptr) ? 0 : c.cs_sp)))});
            }
            if (!__matched1) {
              auto c = std::decay_t<decltype(*(cs).begin())>{};
              if (!((((((((w == nullptr) ? 0 : w.ws_qty)) > 0) ||
                       ((((c == nullptr) ? 0 : c.cs_qty)) > 0))) &&
                     (s.ss_sold_year == 1998))))
                continue;
              __items.push_back(
                  Result{s.ss_sold_year, s.ss_item_sk, s.ss_customer_sk,
                         (s.ss_qty / (((((w == nullptr) ? 0 : w.ws_qty)) +
                                       (((c == nullptr) ? 0 : c.cs_qty))))),
                         s.ss_qty, s.ss_wc, s.ss_sp,
                         ((((w == nullptr) ? 0 : w.ws_qty)) +
                          (((c == nullptr) ? 0 : c.cs_qty))),
                         ((((w == nullptr) ? 0 : w.ws_wc)) +
                          (((c == nullptr) ? 0 : c.cs_wc))),
                         ((((w == nullptr) ? 0 : w.ws_sp)) +
                          (((c == nullptr) ? 0 : c.cs_sp)))});
            }
          }
        }
        if (!__matched0) {
          auto w = std::decay_t<decltype(*(ws).begin())>{};
          {
            bool __matched1 = false;
            for (auto c : cs) {
              if (!((((c.cs_sold_year == s.ss_sold_year) &&
                      (c.cs_item_sk == s.ss_item_sk)) &&
                     (c.cs_customer_sk == s.ss_customer_sk))))
                continue;
              __matched1 = true;
              if (!((((((((w == nullptr) ? 0 : w.ws_qty)) > 0) ||
                       ((((c == nullptr) ? 0 : c.cs_qty)) > 0))) &&
                     (s.ss_sold_year == 1998))))
                continue;
              __items.push_back(
                  Result{s.ss_sold_year, s.ss_item_sk, s.ss_customer_sk,
                         (s.ss_qty / (((((w == nullptr) ? 0 : w.ws_qty)) +
                                       (((c == nullptr) ? 0 : c.cs_qty))))),
                         s.ss_qty, s.ss_wc, s.ss_sp,
                         ((((w == nullptr) ? 0 : w.ws_qty)) +
                          (((c == nullptr) ? 0 : c.cs_qty))),
                         ((((w == nullptr) ? 0 : w.ws_wc)) +
                          (((c == nullptr) ? 0 : c.cs_wc))),
                         ((((w == nullptr) ? 0 : w.ws_sp)) +
                          (((c == nullptr) ? 0 : c.cs_sp)))});
            }
            if (!__matched1) {
              auto c = std::decay_t<decltype(*(cs).begin())>{};
              if (!((((((((w == nullptr) ? 0 : w.ws_qty)) > 0) ||
                       ((((c == nullptr) ? 0 : c.cs_qty)) > 0))) &&
                     (s.ss_sold_year == 1998))))
                continue;
              __items.push_back(
                  Result{s.ss_sold_year, s.ss_item_sk, s.ss_customer_sk,
                         (s.ss_qty / (((((w == nullptr) ? 0 : w.ws_qty)) +
                                       (((c == nullptr) ? 0 : c.cs_qty))))),
                         s.ss_qty, s.ss_wc, s.ss_sp,
                         ((((w == nullptr) ? 0 : w.ws_qty)) +
                          (((c == nullptr) ? 0 : c.cs_qty))),
                         ((((w == nullptr) ? 0 : w.ws_wc)) +
                          (((c == nullptr) ? 0 : c.cs_wc))),
                         ((((w == nullptr) ? 0 : w.ws_sp)) +
                          (((c == nullptr) ? 0 : c.cs_sp)))});
            }
          }
        }
      }
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q78 simplified
  return 0;
}
