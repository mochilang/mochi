// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> ss = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("ss_sold_year"), any(1998)},
                                 {string("ss_item_sk"), any(1)},
                                 {string("ss_customer_sk"), any(1)},
                                 {string("ss_qty"), any(10)},
                                 {string("ss_wc"), any(50.0)},
                                 {string("ss_sp"), any(100.0)}}};
  vector<unordered_map<string, any>> ws = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("ws_sold_year"), any(1998)},
                                 {string("ws_item_sk"), any(1)},
                                 {string("ws_customer_sk"), any(1)},
                                 {string("ws_qty"), any(5)},
                                 {string("ws_wc"), any(25.0)},
                                 {string("ws_sp"), any(50.0)}}};
  vector<unordered_map<string, any>> cs = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("cs_sold_year"), any(1998)},
                                 {string("cs_item_sk"), any(1)},
                                 {string("cs_customer_sk"), any(1)},
                                 {string("cs_qty"), any(3)},
                                 {string("cs_wc"), any(15.0)},
                                 {string("cs_sp"), any(30.0)}}};
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &s : ss) {
      for (auto &w : ws) {
        if (!(w["ws_sold_year"] == s["ss_sold_year"] &&
              w["ws_item_sk"] == s["ss_item_sk"] &&
              w["ws_customer_sk"] == s["ss_customer_sk"]))
          continue;
        for (auto &c : cs) {
          if (!(c["cs_sold_year"] == s["ss_sold_year"] &&
                c["cs_item_sk"] == s["ss_item_sk"] &&
                c["cs_customer_sk"] == s["ss_customer_sk"]))
            continue;
          if (((([&]() {
                 if (w ==)
                   return 0;
                 return w["ws_qty"];
               })()) > 0 ||
               (([&]() {
                 if (c ==)
                   return 0;
                 return c["cs_qty"];
               })()) > 0) &&
              s["ss_sold_year"] == 1998) {
            _res.push_back(unordered_map<string, any>{
                {string("ss_sold_year"), any(s["ss_sold_year"])},
                {string("ss_item_sk"), any(s["ss_item_sk"])},
                {string("ss_customer_sk"), any(s["ss_customer_sk"])},
                {string("ratio"), any(s["ss_qty"] / ((([&]() {
                                                       if (w ==)
                                                         return 0;
                                                       return w["ws_qty"];
                                                     })()) +
                                                     (([&]() {
                                                       if (c ==)
                                                         return 0;
                                                       return c["cs_qty"];
                                                     })())))},
                {string("store_qty"), any(s["ss_qty"])},
                {string("store_wholesale_cost"), any(s["ss_wc"])},
                {string("store_sales_price"), any(s["ss_sp"])},
                {string("other_chan_qty"), any((([&]() {
                                                 if (w ==)
                                                   return 0;
                                                 return w["ws_qty"];
                                               })()) +
                                               (([&]() {
                                                 if (c ==)
                                                   return 0;
                                                 return c["cs_qty"];
                                               })()))},
                {string("other_chan_wholesale_cost"), any((([&]() {
                                                            if (w ==)
                                                              return 0.0;
                                                            return w["ws_wc"];
                                                          })()) +
                                                          (([&]() {
                                                            if (c ==)
                                                              return 0.0;
                                                            return c["cs_wc"];
                                                          })()))},
                {string("other_chan_sales_price"), any((([&]() {
                                                         if (w ==)
                                                           return 0.0;
                                                         return w["ws_sp"];
                                                       })()) +
                                                       (([&]() {
                                                         if (c ==)
                                                           return 0.0;
                                                         return c["cs_sp"];
                                                       })()))}});
          }
        }
      }
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q78_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("ss_sold_year"), any(1998)},
              {string("ss_item_sk"), any(1)},
              {string("ss_customer_sk"), any(1)},
              {string("ratio"), any(1.25)},
              {string("store_qty"), any(10)},
              {string("store_wholesale_cost"), any(50.0)},
              {string("store_sales_price"), any(100.0)},
              {string("other_chan_qty"), any(8)},
              {string("other_chan_wholesale_cost"), any(40.0)},
              {string("other_chan_sales_price"), any(80.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q78_simplified();
  return 0;
}
