// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

string _sliceString(const string &s, int start, int end) {
  int n = s.size();
  if (start < 0)
    start += n;
  if (end < 0)
    end += n;
  if (start < 0)
    start = 0;
  if (end > n)
    end = n;
  if (end < start)
    end = start;
  return s.substr(start, end - start);
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CatalogSale {
  int cs_ship_date_sk;
  int cs_sold_date_sk;
  int cs_warehouse_sk;
  int cs_ship_mode_sk;
  int cs_call_center_sk;
};

struct Warehouse {
  int w_warehouse_sk;
  string w_warehouse_name;
};

struct ShipMode {
  int sm_ship_mode_sk;
  string sm_type;
};

struct CallCenter {
  int cc_call_center_sk;
  string cc_name;
};

int main() {
  vector<unordered_map<string, int>> catalog_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("cs_ship_date_sk"), 31},
                                     {string("cs_sold_date_sk"), 1},
                                     {string("cs_warehouse_sk"), 1},
                                     {string("cs_ship_mode_sk"), 1},
                                     {string("cs_call_center_sk"), 1}},
          unordered_map<string, int>{{string("cs_ship_date_sk"), 51},
                                     {string("cs_sold_date_sk"), 1},
                                     {string("cs_warehouse_sk"), 1},
                                     {string("cs_ship_mode_sk"), 1},
                                     {string("cs_call_center_sk"), 1}},
          unordered_map<string, int>{{string("cs_ship_date_sk"), 71},
                                     {string("cs_sold_date_sk"), 1},
                                     {string("cs_warehouse_sk"), 1},
                                     {string("cs_ship_mode_sk"), 1},
                                     {string("cs_call_center_sk"), 1}},
          unordered_map<string, int>{{string("cs_ship_date_sk"), 101},
                                     {string("cs_sold_date_sk"), 1},
                                     {string("cs_warehouse_sk"), 1},
                                     {string("cs_ship_mode_sk"), 1},
                                     {string("cs_call_center_sk"), 1}},
          unordered_map<string, int>{{string("cs_ship_date_sk"), 131},
                                     {string("cs_sold_date_sk"), 1},
                                     {string("cs_warehouse_sk"), 1},
                                     {string("cs_ship_mode_sk"), 1},
                                     {string("cs_call_center_sk"), 1}}};
  vector<unordered_map<string, any>> warehouse =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("w_warehouse_sk"), any(1)},
          {string("w_warehouse_name"), any(string("Warehouse1"))}}};
  vector<unordered_map<string, any>> ship_mode =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("sm_ship_mode_sk"), any(1)},
                                     {string("sm_type"), any(string("EXP"))}}};
  vector<unordered_map<string, any>> call_center =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cc_call_center_sk"), any(1)},
                                     {string("cc_name"), any(string("CC1"))}}};
  struct GroupKey4 {
    any warehouse;
    unordered_map<string, any> sm_type;
    unordered_map<string, any> cc_name;
  };
  inline bool operator==(const GroupKey4 &a, const GroupKey4 &b) {
    return a.warehouse == b.warehouse && a.sm_type == b.sm_type &&
           a.cc_name == b.cc_name;
  }
  namespace std {
  template <> struct hash<GroupKey4> {
    size_t operator()(const GroupKey4 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.warehouse);
      _hash_combine(h, k.sm_type);
      _hash_combine(h, k.cc_name);
      return h;
    }
  };
  } // namespace std

  auto grouped =
      ([&]() -> vector<unordered_map<vector<unordered_map<string, any>>, any>> {
        using ElemT = unordered_map<string, int>;
        using KeyT = GroupKey4;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &cs : catalog_sales) {
          for (auto &w : warehouse) {
            if (!(cs["cs_warehouse_sk"] == w["w_warehouse_sk"]))
              continue;
            for (auto &sm : ship_mode) {
              if (!(cs["cs_ship_mode_sk"] == sm["sm_ship_mode_sk"]))
                continue;
              for (auto &cc : call_center) {
                if (!(cs["cs_call_center_sk"] == cc["cc_call_center_sk"]))
                  continue;
                KeyT _k = GroupKey4{_sliceString(w["w_warehouse_name"], 0, 20),
                                    sm["sm_type"], cc["cc_name"]};
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(cs);
              }
            }
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<vector<unordered_map<string, any>>, any>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<vector<unordered_map<string, any>>, any>{
              {string("warehouse"), any(g.key.warehouse)},
              {string("sm_type"), any(g.key.sm_type)},
              {string("cc_name"), any(g.key.cc_name)},
              {string("d30"), any(_count(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   if (_cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                           _cast<unordered_map<string, any>>(
                               x)["cs_sold_date_sk"] <=
                       30) {
                     _res.push_back(x);
                   }
                 }
                 return _res;
               })()))},
              {string("d60"), any(_count(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   if (_cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] >
                           30 &&
                       _cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] <=
                           60) {
                     _res.push_back(x);
                   }
                 }
                 return _res;
               })()))},
              {string("d90"), any(_count(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   if (_cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] >
                           60 &&
                       _cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] <=
                           90) {
                     _res.push_back(x);
                   }
                 }
                 return _res;
               })()))},
              {string("d120"), any(_count(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   if (_cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] >
                           90 &&
                       _cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                               _cast<unordered_map<string, any>>(
                                   x)["cs_sold_date_sk"] <=
                           120) {
                     _res.push_back(x);
                   }
                 }
                 return _res;
               })()))},
              {string("dmore"), any(_count(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   if (_cast<unordered_map<string, any>>(x)["cs_ship_date_sk"] -
                           _cast<unordered_map<string, any>>(
                               x)["cs_sold_date_sk"] >
                       120) {
                     _res.push_back(x);
                   }
                 }
                 return _res;
               })()))}});
        }
        return _res;
      })();
  _json(grouped);
  auto test_TPCDS_Q99_buckets = [&]() {
    if (!(grouped ==
          vector<unordered_map<vector<unordered_map<string, any>>, any>>{
              unordered_map<vector<unordered_map<string, any>>, any>{
                  {string("warehouse"), any(string("Warehouse1"))},
                  {string("sm_type"), any(string("EXP"))},
                  {string("cc_name"), any(string("CC1"))},
                  {string("d30"), any(1)},
                  {string("d60"), any(1)},
                  {string("d90"), any(1)},
                  {string("d120"), any(1)},
                  {string("dmore"), any(1)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q99_buckets();
  return 0;
}
