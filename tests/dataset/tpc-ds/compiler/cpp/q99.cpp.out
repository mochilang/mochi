// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  int cs_ship_date_sk;
  int cs_sold_date_sk;
  int cs_warehouse_sk;
  int cs_ship_mode_sk;
  int cs_call_center_sk;
};
struct Warehouse {
  int w_warehouse_sk;
  std::string w_warehouse_name;
};
struct ShipMode {
  int sm_ship_mode_sk;
  std::string sm_type;
};
struct CallCenter {
  int cc_call_center_sk;
  std::string cc_name;
};
struct CatalogSale {
  decltype(31) cs_ship_date_sk;
  decltype(1) cs_sold_date_sk;
  decltype(1) cs_warehouse_sk;
  decltype(1) cs_ship_mode_sk;
  decltype(1) cs_call_center_sk;
};
struct Warehouse {
  decltype(1) w_warehouse_sk;
  decltype(std::string("Warehouse1")) w_warehouse_name;
};
struct ShipMode {
  decltype(1) sm_ship_mode_sk;
  decltype(std::string("EXP")) sm_type;
};
struct CallCenter {
  decltype(1) cc_call_center_sk;
  decltype(std::string("CC1")) cc_name;
};
struct Grouped {
  decltype(substr(w.w_warehouse_name, 0, 20)) warehouse;
  decltype(sm.sm_type) sm_type;
  decltype(cc.cc_name) cc_name;
};
struct __struct6 {
  decltype(cs) cs;
  decltype(w) w;
  decltype(sm) sm;
  decltype(cc) cc;
};
struct __struct7 {
  Grouped key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.warehouse) warehouse;
  decltype(std::declval<__struct7>().key.sm_type) sm_type;
  decltype(std::declval<__struct7>().key.cc_name) cc_name;
  int d30;
  int d60;
  int d90;
  int d120;
  int dmore;
};
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_date_sk\":";
  __json(v.cs_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_warehouse_sk\":";
  __json(v.cs_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_mode_sk\":";
  __json(v.cs_ship_mode_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  std::cout << "}";
}
inline void __json(const ShipMode &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_ship_mode_sk\":";
  __json(v.sm_ship_mode_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_type\":";
  __json(v.sm_type);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_sk\":";
  __json(v.w_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  std::cout << "}";
}
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_date_sk\":";
  __json(v.cs_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_warehouse_sk\":";
  __json(v.cs_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ship_mode_sk\":";
  __json(v.cs_ship_mode_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_call_center_sk\":";
  __json(v.cs_call_center_sk);
  std::cout << "}";
}
inline void __json(const ShipMode &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_ship_mode_sk\":";
  __json(v.sm_ship_mode_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_type\":";
  __json(v.sm_type);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w\":";
  __json(v.w);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm\":";
  __json(v.sm);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc\":";
  __json(v.cc);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_sk\":";
  __json(v.w_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_warehouse_name\":";
  __json(v.w_warehouse_name);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"warehouse\":";
  __json(v.warehouse);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_type\":";
  __json(v.sm_type);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"warehouse\":";
  __json(v.warehouse);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sm_type\":";
  __json(v.sm_type);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d30\":";
  __json(v.d30);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d60\":";
  __json(v.d60);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d90\":";
  __json(v.d90);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d120\":";
  __json(v.d120);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dmore\":";
  __json(v.dmore);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {
      CatalogSale{31, 1, 1, 1, 1}, CatalogSale{51, 1, 1, 1, 1},
      CatalogSale{71, 1, 1, 1, 1}, CatalogSale{101, 1, 1, 1, 1},
      CatalogSale{131, 1, 1, 1, 1}};
  std::vector<Warehouse> warehouse = {Warehouse{1, std::string("Warehouse1")}};
  std::vector<ShipMode> ship_mode = {ShipMode{1, std::string("EXP")}};
  std::vector<CallCenter> call_center = {CallCenter{1, std::string("CC1")}};
  std::vector<__struct6> grouped = ([&]() {
    std::vector<__struct7> __groups;
    for (auto cs : catalog_sales) {
      for (auto w : warehouse) {
        if (!((cs.cs_warehouse_sk == w.w_warehouse_sk)))
          continue;
        for (auto sm : ship_mode) {
          if (!((cs.cs_ship_mode_sk == sm.sm_ship_mode_sk)))
            continue;
          for (auto cc : call_center) {
            if (!((cs.cs_call_center_sk == cc.cc_call_center_sk)))
              continue;
            auto __key = Grouped{substr(w.w_warehouse_name, 0, 20), sm.sm_type,
                                 cc.cc_name};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct6{cs, w, sm, cc});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct7{
                  __key, std::vector<__struct6>{__struct6{cs, w, sm, cc}}});
            }
          }
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.warehouse, g.key.sm_type, g.key.cc_name,
          ((int)([&]() {
             std::vector<__struct6> __items;
             for (auto x : g.items) {
               if (!(((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 30)))
                 continue;
               __items.push_back(x);
             }
             return __items;
           })()
               .size()),
          ((int)([&]() {
             std::vector<__struct6> __items;
             for (auto x : g.items) {
               if (!((((x.cs_ship_date_sk - x.cs_sold_date_sk) > 30) &&
                      ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 60))))
                 continue;
               __items.push_back(x);
             }
             return __items;
           })()
               .size()),
          ((int)([&]() {
             std::vector<__struct6> __items;
             for (auto x : g.items) {
               if (!((((x.cs_ship_date_sk - x.cs_sold_date_sk) > 60) &&
                      ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 90))))
                 continue;
               __items.push_back(x);
             }
             return __items;
           })()
               .size()),
          ((int)([&]() {
             std::vector<__struct6> __items;
             for (auto x : g.items) {
               if (!((((x.cs_ship_date_sk - x.cs_sold_date_sk) > 90) &&
                      ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 120))))
                 continue;
               __items.push_back(x);
             }
             return __items;
           })()
               .size()),
          ((int)([&]() {
             std::vector<__struct6> __items;
             for (auto x : g.items) {
               if (!(((x.cs_ship_date_sk - x.cs_sold_date_sk) > 120)))
                 continue;
               __items.push_back(x);
             }
             return __items;
           })()
               .size())});
    }
    return __items;
  })();
  (__json(grouped));
  // test TPCDS Q99 buckets
  return 0;
}
