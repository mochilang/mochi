// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CallCenter {
  int cc_call_center_sk;
  std::string cc_call_center_id;
  std::string cc_name;
  std::string cc_manager;
};
struct CatalogReturn {
  int cr_call_center_sk;
  int cr_returned_date_sk;
  int cr_returning_customer_sk;
  float cr_net_loss;
};
struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};
struct Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_hdemo_sk;
  int c_current_addr_sk;
};
struct CustomerAddress {
  int ca_address_sk;
  int ca_gmt_offset;
};
struct CustomerDemographics {
  int cd_demo_sk;
  std::string cd_marital_status;
  std::string cd_education_status;
};
struct HouseholdDemographics {
  int hd_demo_sk;
  std::string hd_buy_potential;
};
struct CallCenter {
  decltype(1) cc_call_center_sk;
  decltype(std::string("CC1")) cc_call_center_id;
  decltype(std::string("Main")) cc_name;
  decltype(std::string("Alice")) cc_manager;
};
struct CatalogReturn {
  decltype(1) cr_call_center_sk;
  decltype(1) cr_returned_date_sk;
  decltype(1) cr_returning_customer_sk;
  decltype(10) cr_net_loss;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2001) d_year;
  decltype(5) d_moy;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_cdemo_sk;
  decltype(1) c_current_hdemo_sk;
  decltype(1) c_current_addr_sk;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("M")) cd_marital_status;
  decltype(std::string("Unknown")) cd_education_status;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(std::string("1001-5000")) hd_buy_potential;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(-6) ca_gmt_offset;
};
struct Result {
  decltype(cc.cc_call_center_id) id;
  decltype(cc.cc_name) name;
  decltype(cc.cc_manager) mgr;
};
struct __struct9 {
  decltype(cc) cc;
  decltype(cr) cr;
  decltype(d) d;
  decltype(c) c;
  decltype(cd) cd;
  decltype(hd) hd;
  decltype(ca) ca;
};
struct __struct10 {
  Result key;
  std::vector<__struct9> items;
};
struct __struct11 {
  decltype(std::declval<__struct10>().key.id) Call_Center;
  decltype(std::declval<__struct10>().key.name) Call_Center_Name;
  decltype(std::declval<__struct10>().key.mgr) Manager;
  double Returns_Loss;
};
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_id\":";
  __json(v.cc_call_center_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_manager\":";
  __json(v.cc_manager);
  std::cout << "}";
}
inline void __json(const __struct11 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"Call_Center\":";
  __json(v.Call_Center);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"Call_Center_Name\":";
  __json(v.Call_Center_Name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"Manager\":";
  __json(v.Manager);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"Returns_Loss\":";
  __json(v.Returns_Loss);
  std::cout << "}";
}
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_call_center_sk\":";
  __json(v.cr_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_returned_date_sk\":";
  __json(v.cr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_returning_customer_sk\":";
  __json(v.cr_returning_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_net_loss\":";
  __json(v.cr_net_loss);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_hdemo_sk\":";
  __json(v.c_current_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_gmt_offset\":";
  __json(v.ca_gmt_offset);
  std::cout << "}";
}
inline void __json(const CustomerDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const HouseholdDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_buy_potential\":";
  __json(v.hd_buy_potential);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_hdemo_sk\":";
  __json(v.c_current_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_gmt_offset\":";
  __json(v.ca_gmt_offset);
  std::cout << "}";
}
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_id\":";
  __json(v.cc_call_center_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_manager\":";
  __json(v.cc_manager);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_call_center_sk\":";
  __json(v.cr_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_returned_date_sk\":";
  __json(v.cr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_returning_customer_sk\":";
  __json(v.cr_returning_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr_net_loss\":";
  __json(v.cr_net_loss);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_buy_potential\":";
  __json(v.hd_buy_potential);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mgr\":";
  __json(v.mgr);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc\":";
  __json(v.cc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cr\":";
  __json(v.cr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd\":";
  __json(v.cd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd\":";
  __json(v.hd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  std::cout << "}";
}
int main() {
  std::vector<CallCenter> call_center = {CallCenter{
      1, std::string("CC1"), std::string("Main"), std::string("Alice")}};
  std::vector<CatalogReturn> catalog_returns = {CatalogReturn{1, 1, 1, 10}};
  std::vector<DateDim> date_dim = {DateDim{1, 2001, 5}};
  std::vector<Customer> customer = {Customer{1, 1, 1, 1}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("M"), std::string("Unknown")}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, std::string("1001-5000")}};
  std::vector<CustomerAddres> customer_address = {CustomerAddres{1, -6}};
  std::vector<__struct9> result = first(([&]() {
    std::vector<__struct10> __groups;
    for (auto cc : call_center) {
      for (auto cr : catalog_returns) {
        if (!((cc.cc_call_center_sk == cr.cr_call_center_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((cr.cr_returned_date_sk == d.d_date_sk)))
            continue;
          for (auto c : customer) {
            if (!((cr.cr_returning_customer_sk == c.c_customer_sk)))
              continue;
            for (auto cd : customer_demographics) {
              if (!((c.c_current_cdemo_sk == cd.cd_demo_sk)))
                continue;
              for (auto hd : household_demographics) {
                if (!((c.c_current_hdemo_sk == hd.hd_demo_sk)))
                  continue;
                for (auto ca : customer_address) {
                  if (!((c.c_current_addr_sk == ca.ca_address_sk)))
                    continue;
                  if (!(((((((d.d_year == 2001) && (d.d_moy == 5)) &&
                            (cd.cd_marital_status == std::string("M"))) &&
                           (cd.cd_education_status ==
                            std::string("Unknown"))) &&
                          (hd.hd_buy_potential == std::string("1001-5000"))) &&
                         (ca.ca_gmt_offset == (-6)))))
                    continue;
                  auto __key =
                      Result{cc.cc_call_center_id, cc.cc_name, cc.cc_manager};
                  bool __found = false;
                  for (auto &__g : __groups) {
                    if (__g.key == __key) {
                      __g.items.push_back(__struct9{cc, cr, d, c, cd, hd, ca});
                      __found = true;
                      break;
                    }
                  }
                  if (!__found) {
                    __groups.push_back(
                        __struct10{__key, std::vector<__struct9>{__struct9{
                                              cc, cr, d, c, cd, hd, ca}}});
                  }
                }
              }
            }
          }
        }
      }
    }
    std::vector<__struct11> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct11{
          g.key.id, g.key.name, g.key.mgr, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct9>().cr_net_loss)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.cr_net_loss);
            }
            return __items;
          })())});
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q91 returns
  return 0;
}
