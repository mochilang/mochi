// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  decltype(std::string("A")) cat;
  decltype(std::string("B")) class;
  decltype(40) net;
};
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"net\":";
  __json(v.net);
  std::cout << "}";
}
int main() {
  std::vector<WebSale> web_sales = {
      WebSale{std::string("A"), std::string("B"), 40},
      WebSale{std::string("A"), std::string("B"), 46},
      WebSale{std::string("A"), std::string("C"), 10},
      WebSale{std::string("B"), std::string("B"), 20}};
  auto result = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ws.net)> __items;
    for (auto ws : web_sales) {
      if (!(((ws.cat == std::string("A")) && (ws.class == std::string("B")))))
        continue;
      __items.push_back(ws.net);
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q86 sample
  return 0;
}
