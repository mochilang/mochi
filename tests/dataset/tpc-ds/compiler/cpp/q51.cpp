// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  decltype(1) item;
  decltype(1) date;
  decltype(30) price;
};
struct __struct2 {
  decltype(x.date) date;
  int cum;
};
struct WebCum {
  decltype(w.date) date;
  decltype(w.price) price;
};
struct Joined {
  decltype(1) item_sk;
  decltype(w.date) d_date;
};
inline void __json(const __struct2 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cum\":";
  __json(v.cum);
  std::cout << "}";
}
inline void __json(const WebCum &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const Joined &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
std::vector<WebSale> web_sales = {WebSale{1, 1, 30}, WebSale{1, 2, 20}};
std::vector<WebSale> store_sales = {WebSale{1, 1, 5}, WebSale{1, 2, 19}};
auto dms = 1;

auto cumulative(auto xs) {
  std::vector<int> out = {};
  auto acc = 0;
  for (auto x : xs) {
    acc = (acc + x.price);
    out.push_back(__struct2{x.date, acc});
  }
  return out;
}

int main() {
  auto web_cum = cumulative((([&]() {
    std::vector<std::pair<decltype(w.date), WebCum>> __items;
    for (auto w : web_sales) {
      __items.push_back({w.date, WebCum{w.date, w.price}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<WebCum> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })()));
  auto store_cum = cumulative((([&]() {
    std::vector<std::pair<decltype(s.date), WebCum>> __items;
    for (auto s : store_sales) {
      __items.push_back({s.date, WebCum{s.date, s.price}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<WebCum> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })()));
  std::vector<Joined> joined = ([&]() {
    std::vector<Joined> __items;
    for (auto w : web_cum) {
      for (auto s : store_cum) {
        if (!((w.date == s.date)))
          continue;
        if (!((w.cum > s.cum)))
          continue;
        __items.push_back(Joined{1, w.date});
      }
    }
    return __items;
  })();
  std::vector<Joined> result = joined;
  (__json(result));
  // test TPCDS Q51 simplified
  return 0;
}
