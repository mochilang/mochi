// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Web {
  decltype(std::string("A")) item;
  decltype(0.2) return_ratio;
  decltype(0.3) currency_ratio;
  decltype(1) return_rank;
  decltype(1) currency_rank;
};
struct Tmp {
  decltype(std::string("web")) channel;
  decltype(w.item) item;
  decltype(w.return_ratio) return_ratio;
  decltype(w.return_rank) return_rank;
  decltype(w.currency_rank) currency_rank;
};
inline void __json(const Tmp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"return_ratio\":";
  __json(v.return_ratio);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"return_rank\":";
  __json(v.return_rank);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"currency_rank\":";
  __json(v.currency_rank);
  std::cout << "}";
}
inline void __json(const Web &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"return_ratio\":";
  __json(v.return_ratio);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"currency_ratio\":";
  __json(v.currency_ratio);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"return_rank\":";
  __json(v.return_rank);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"currency_rank\":";
  __json(v.currency_rank);
  std::cout << "}";
}
int main() {
  std::vector<Web> web = {Web{std::string("A"), 0.2, 0.3, 1, 1},
                          Web{std::string("B"), 0.5, 0.6, 2, 2}};
  std::vector<Web> catalog = {Web{std::string("A"), 0.3, 0.4, 1, 1}};
  std::vector<Web> store = {Web{std::string("A"), 0.25, 0.35, 1, 1}};
  std::vector<Tmp> tmp = (concat(
      ([&]() {
        std::vector<Tmp> __items;
        for (auto w : web) {
          if (!(((w.return_rank <= 10) || (w.currency_rank <= 10))))
            continue;
          __items.push_back(Tmp{std::string("web"), w.item, w.return_ratio,
                                w.return_rank, w.currency_rank});
        }
        return __items;
      })(),
      ([&]() {
        std::vector<Tmp> __items;
        for (auto c : catalog) {
          if (!(((c.return_rank <= 10) || (c.currency_rank <= 10))))
            continue;
          __items.push_back(Tmp{std::string("catalog"), c.item, c.return_ratio,
                                c.return_rank, c.currency_rank});
        }
        return __items;
      })(),
      ([&]() {
        std::vector<Tmp> __items;
        for (auto s : store) {
          if (!(((s.return_rank <= 10) || (s.currency_rank <= 10))))
            continue;
          __items.push_back(Tmp{std::string("store"), s.item, s.return_ratio,
                                s.return_rank, s.currency_rank});
        }
        return __items;
      })()));
  std::vector<Tmp> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Tmp>().channel), Tmp>> __items;
    for (auto r : tmp) {
      __items.push_back({std::vector<decltype(r.channel)>{
                             r.channel, r.return_rank, r.currency_rank, r.item},
                         r});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Tmp> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q49 simplified
  return 0;
}
