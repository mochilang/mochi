// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> web = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("item"), any(string("A"))},
                                 {string("return_ratio"), any(0.2)},
                                 {string("currency_ratio"), any(0.3)},
                                 {string("return_rank"), any(1)},
                                 {string("currency_rank"), any(1)}},
      unordered_map<string, any>{{string("item"), any(string("B"))},
                                 {string("return_ratio"), any(0.5)},
                                 {string("currency_ratio"), any(0.6)},
                                 {string("return_rank"), any(2)},
                                 {string("currency_rank"), any(2)}}};
  vector<unordered_map<string, any>> catalog =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("item"), any(string("A"))},
                                     {string("return_ratio"), any(0.3)},
                                     {string("currency_ratio"), any(0.4)},
                                     {string("return_rank"), any(1)},
                                     {string("currency_rank"), any(1)}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("item"), any(string("A"))},
                                 {string("return_ratio"), any(0.25)},
                                 {string("currency_ratio"), any(0.35)},
                                 {string("return_rank"), any(1)},
                                 {string("currency_rank"), any(1)}}};
  auto tmp = (_concat(
      _concat(([&]() -> vector<unordered_map<string, any>> {
                vector<unordered_map<string, any>> _res;
                for (auto &w : web) {
                  if (w["return_rank"] <= 10 || w["currency_rank"] <= 10) {
                    _res.push_back(unordered_map<string, any>{
                        {string("channel"), any(string("web"))},
                        {string("item"), any(w["item"])},
                        {string("return_ratio"), any(w["return_ratio"])},
                        {string("return_rank"), any(w["return_rank"])},
                        {string("currency_rank"), any(w["currency_rank"])}});
                  }
                }
                return _res;
              })(),
              ([&]() -> vector<unordered_map<string, any>> {
                vector<unordered_map<string, any>> _res;
                for (auto &c : catalog) {
                  if (c["return_rank"] <= 10 || c["currency_rank"] <= 10) {
                    _res.push_back(unordered_map<string, any>{
                        {string("channel"), any(string("catalog"))},
                        {string("item"), any(c["item"])},
                        {string("return_ratio"), any(c["return_ratio"])},
                        {string("return_rank"), any(c["return_rank"])},
                        {string("currency_rank"), any(c["currency_rank"])}});
                  }
                }
                return _res;
              })()),
      ([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store) {
          if (s["return_rank"] <= 10 || s["currency_rank"] <= 10) {
            _res.push_back(unordered_map<string, any>{
                {string("channel"), any(string("store"))},
                {string("item"), any(s["item"])},
                {string("return_ratio"), any(s["return_ratio"])},
                {string("return_rank"), any(s["return_rank"])},
                {string("currency_rank"), any(s["currency_rank"])}});
          }
        }
        return _res;
      })()));
  auto result = ([&]() -> vector<any> {
    vector<pair<any, any>> _tmp;
    for (auto &r : tmp) {
      _tmp.push_back(
          {vector<any>{_cast<unordered_map<string, any>>(r)["channel"],
                       _cast<unordered_map<string, any>>(r)["return_rank"],
                       _cast<unordered_map<string, any>>(r)["currency_rank"],
                       _cast<unordered_map<string, any>>(r)["item"]},
           r});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<any> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q49_simplified = [&]() {
    if (!(result == vector<unordered_map<string, any>>{
                        unordered_map<string, any>{
                            {string("channel"), any(string("catalog"))},
                            {string("item"), any(string("A"))},
                            {string("return_ratio"), any(0.3)},
                            {string("return_rank"), any(1)},
                            {string("currency_rank"), any(1)}},
                        unordered_map<string, any>{
                            {string("channel"), any(string("store"))},
                            {string("item"), any(string("A"))},
                            {string("return_ratio"), any(0.25)},
                            {string("return_rank"), any(1)},
                            {string("currency_rank"), any(1)}},
                        unordered_map<string, any>{
                            {string("channel"), any(string("web"))},
                            {string("item"), any(string("A"))},
                            {string("return_ratio"), any(0.2)},
                            {string("return_rank"), any(1)},
                            {string("currency_rank"), any(1)}},
                        unordered_map<string, any>{
                            {string("channel"), any(string("web"))},
                            {string("item"), any(string("B"))},
                            {string("return_ratio"), any(0.5)},
                            {string("return_rank"), any(2)},
                            {string("currency_rank"), any(2)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q49_simplified();
  return 0;
}
