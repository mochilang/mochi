// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_store_sk;
  float ss_ext_sales_price;
};
struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};
struct Item {
  int i_item_sk;
  int i_brand_id;
  std::string i_brand;
  int i_manufact_id;
  std::string i_manufact;
  int i_manager_id;
};
struct Customer {
  int c_customer_sk;
  int c_current_addr_sk;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_zip;
};
struct Store {
  int s_store_sk;
  std::string s_zip;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_item_sk;
  decltype(1) ss_customer_sk;
  decltype(1) ss_store_sk;
  decltype(100) ss_ext_sales_price;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1999) d_year;
  decltype(11) d_moy;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_brand_id;
  decltype(std::string("B1")) i_brand;
  decltype(1) i_manufact_id;
  decltype(std::string("M1")) i_manufact;
  decltype(10) i_manager_id;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("11111")) ca_zip;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("99999")) s_zip;
};
struct Result {
  decltype(i.i_brand) brand;
  decltype(i.i_brand_id) brand_id;
  decltype(i.i_manufact_id) man_id;
  decltype(i.i_manufact) man;
};
struct __struct8 {
  decltype(d) d;
  decltype(ss) ss;
  decltype(i) i;
  decltype(c) c;
  decltype(ca) ca;
  decltype(s) s;
};
struct __struct9 {
  Result key;
  std::vector<__struct8> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key.brand) i_brand;
  decltype(std::declval<__struct9>().key.brand_id) i_brand_id;
  decltype(std::declval<__struct9>().key.man_id) i_manufact_id;
  decltype(std::declval<__struct9>().key.man) i_manufact;
  double ext_price;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact\":";
  __json(v.i_manufact);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"man_id\":";
  __json(v.man_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"man\":";
  __json(v.man);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact\":";
  __json(v.i_manufact);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_price\":";
  __json(v.ext_price);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact\":";
  __json(v.i_manufact);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 100}};
  std::vector<DateDim> date_dim = {DateDim{1, 1999, 11}};
  std::vector<Item> item = {
      Item{1, 1, std::string("B1"), 1, std::string("M1"), 10}};
  std::vector<Customer> customer = {Customer{1, 1}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("11111")}};
  std::vector<Store> store = {Store{1, std::string("99999")}};
  std::vector<__struct8> result = ([&]() {
    std::vector<__struct9> __groups;
    for (auto d : date_dim) {
      for (auto ss : store_sales) {
        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
          continue;
        for (auto i : item) {
          if (!(((ss.ss_item_sk == i.i_item_sk) && (i.i_manager_id == 10))))
            continue;
          for (auto c : customer) {
            if (!((ss.ss_customer_sk == c.c_customer_sk)))
              continue;
            for (auto ca : customer_address) {
              if (!((c.c_current_addr_sk == ca.ca_address_sk)))
                continue;
              for (auto s : store) {
                if (!(((ss.ss_store_sk == s.s_store_sk) &&
                       (substr(ca.ca_zip, 0, 5) != substr(s.s_zip, 0, 5)))))
                  continue;
                if (!(((d.d_moy == 11) && (d.d_year == 1999))))
                  continue;
                auto __key = Result{i.i_brand, i.i_brand_id, i.i_manufact_id,
                                    i.i_manufact};
                bool __found = false;
                for (auto &__g : __groups) {
                  if (__g.key == __key) {
                    __g.items.push_back(__struct8{d, ss, i, c, ca, s});
                    __found = true;
                    break;
                  }
                }
                if (!__found) {
                  __groups.push_back(__struct9{
                      __key,
                      std::vector<__struct8>{__struct8{d, ss, i, c, ca, s}}});
                }
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<
        decltype(std::vector<decltype(std::declval<__struct9>().key.brand)>{
            std::declval<__struct9>().key.brand}),
        __struct10>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {std::vector<decltype(g.key.brand)>{g.key.brand},
           __struct10{g.key.brand, g.key.brand_id, g.key.man_id, g.key.man,
                      ([&](auto v) {
                        return std::accumulate(v.begin(), v.end(), 0.0);
                      })(([&]() {
                        std::vector<decltype(std::declval<__struct8>()
                                                 .ss_ext_sales_price)>
                            __items;
                        for (auto x : g.items) {
                          __items.push_back(x.ss_ext_sales_price);
                        }
                        return __items;
                      })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct10> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q19 brand
  return 0;
}
