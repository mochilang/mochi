// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) id;
  decltype(1) current_addr;
  decltype(1) cdemo;
  decltype(1) hdemo;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("Springfield")) ca_city;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(1) income_band_sk;
};
struct IncomeBand {
  decltype(1) ib_income_band_sk;
  decltype(0) ib_lower_bound;
  decltype(50000) ib_upper_bound;
};
struct StoreReturn {
  decltype(1) sr_cdemo_sk;
  decltype(10) amt;
};
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_city\":";
  __json(v.ca_city);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"income_band_sk\":";
  __json(v.income_band_sk);
  std::cout << "}";
}
inline void __json(const IncomeBand &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ib_income_band_sk\":";
  __json(v.ib_income_band_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ib_lower_bound\":";
  __json(v.ib_lower_bound);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ib_upper_bound\":";
  __json(v.ib_upper_bound);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"current_addr\":";
  __json(v.current_addr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cdemo\":";
  __json(v.cdemo);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hdemo\":";
  __json(v.hdemo);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_cdemo_sk\":";
  __json(v.sr_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {Customer{1, 1, 1, 1}, Customer{2, 1, 2, 2},
                                    Customer{3, 1, 3, 1}, Customer{4, 1, 4, 2}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("Springfield")}};
  std::vector<std::string> customer_demographics =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("cd_demo_sk"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("cd_demo_sk"), 1}},
          std::unordered_map<std::string, decltype(2)>{
              {std::string("cd_demo_sk"), 2}},
          std::unordered_map<std::string, decltype(3)>{
              {std::string("cd_demo_sk"), 3}},
          std::unordered_map<std::string, decltype(4)>{
              {std::string("cd_demo_sk"), 4}}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 1}, HouseholdDemographic{2, 1}};
  std::vector<IncomeBand> income_band = {IncomeBand{1, 0, 50000}};
  std::vector<StoreReturn> store_returns = {
      StoreReturn{1, 10}, StoreReturn{2, 20}, StoreReturn{3, 30},
      StoreReturn{4, 24}};
  auto result = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(sr.amt)> __items;
    for (auto c : customer) {
      for (auto ca : customer_address) {
        if (!(((c.current_addr == ca.ca_address_sk) &&
               (ca.ca_city == std::string("Springfield")))))
          continue;
        for (auto cd : customer_demographics) {
          if (!((c.cdemo == cd.cd_demo_sk)))
            continue;
          for (auto sr : store_returns) {
            if (!((cd.cd_demo_sk == sr.sr_cdemo_sk)))
              continue;
            for (auto hd : household_demographics) {
              if (!((c.hdemo == hd.hd_demo_sk)))
                continue;
              for (auto ib : income_band) {
                if (!((hd.income_band_sk == ib.ib_income_band_sk)))
                  continue;
                __items.push_back(sr.amt);
              }
            }
          }
        }
      }
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q84 sample
  return 0;
}
