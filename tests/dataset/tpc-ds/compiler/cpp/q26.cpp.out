// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_cdemo_sk;
  int cs_promo_sk;
  int cs_quantity;
  double cs_list_price;
  double cs_coupon_amt;
  double cs_sales_price;
};

struct CustomerDemo {
  int cd_demo_sk;
  string cd_gender;
  string cd_marital_status;
  string cd_education_status;
};

struct DateDim {
  int d_date_sk;
  int d_year;
};

struct Item {
  int i_item_sk;
  string i_item_id;
};

struct Promotion {
  int p_promo_sk;
  string p_channel_email;
  string p_channel_event;
};

int main() {
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_sold_date_sk"), any(1)},
                                     {string("cs_item_sk"), any(1)},
                                     {string("cs_bill_cdemo_sk"), any(1)},
                                     {string("cs_promo_sk"), any(1)},
                                     {string("cs_quantity"), any(10)},
                                     {string("cs_list_price"), any(100.0)},
                                     {string("cs_coupon_amt"), any(5.0)},
                                     {string("cs_sales_price"), any(95.0)}},
          unordered_map<string, any>{{string("cs_sold_date_sk"), any(1)},
                                     {string("cs_item_sk"), any(2)},
                                     {string("cs_bill_cdemo_sk"), any(2)},
                                     {string("cs_promo_sk"), any(2)},
                                     {string("cs_quantity"), any(5)},
                                     {string("cs_list_price"), any(50.0)},
                                     {string("cs_coupon_amt"), any(2.0)},
                                     {string("cs_sales_price"), any(48.0)}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(1)},
              {string("cd_gender"), any(string("M"))},
              {string("cd_marital_status"), any(string("S"))},
              {string("cd_education_status"), any(string("College"))}},
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(2)},
              {string("cd_gender"), any(string("F"))},
              {string("cd_marital_status"), any(string("M"))},
              {string("cd_education_status"), any(string("High School"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 2000}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("ITEM1"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_item_id"), any(string("ITEM2"))}}};
  vector<unordered_map<string, any>> promotion =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("p_promo_sk"), any(1)},
              {string("p_channel_email"), any(string("N"))},
              {string("p_channel_event"), any(string("Y"))}},
          unordered_map<string, any>{
              {string("p_promo_sk"), any(2)},
              {string("p_channel_email"), any(string("Y"))},
              {string("p_channel_event"), any(string("N"))}}};
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = unordered_map<string, any>;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cs : catalog_sales) {
      for (auto &cd : customer_demographics) {
        if (!(cs["cs_bill_cdemo_sk"] == cd["cd_demo_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(cs["cs_sold_date_sk"] == d["d_date_sk"]))
            continue;
          for (auto &i : item) {
            if (!(cs["cs_item_sk"] == i["i_item_sk"]))
              continue;
            for (auto &p : promotion) {
              if (!(cs["cs_promo_sk"] == p["p_promo_sk"]))
                continue;
              if (cd["cd_gender"] == string("M") &&
                  cd["cd_marital_status"] == string("S") &&
                  cd["cd_education_status"] == string("College") &&
                  (p["p_channel_email"] == string("N") ||
                   p["p_channel_event"] == string("N")) &&
                  d["d_year"] == 2000) {
                KeyT _k = i["i_item_id"];
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(cs);
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key)},
          {string("agg1"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_quantity"]);
             }
             return _res;
           })()))},
          {string("agg2"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_list_price"]);
             }
             return _res;
           })()))},
          {string("agg3"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_coupon_amt"]);
             }
             return _res;
           })()))},
          {string("agg4"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_sales_price"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q26_demographic_averages = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_id"), any(string("ITEM1"))},
              {string("agg1"), any(10.0)},
              {string("agg2"), any(100.0)},
              {string("agg3"), any(5.0)},
              {string("agg4"), any(95.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q26_demographic_averages();
  return 0;
}
