// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

double abs(double x) {
  if (x >= 0.0) {
    x;
  } else {
    -x;
  }
}

int main() {
  vector<unordered_map<string, any>> v2 = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("d_year"), any(2020)},
                                 {string("item"), any(string("A"))},
                                 {string("avg_monthly_sales"), any(100.0)},
                                 {string("sum_sales"), any(120.0)}},
      unordered_map<string, any>{{string("d_year"), any(2020)},
                                 {string("item"), any(string("B"))},
                                 {string("avg_monthly_sales"), any(80.0)},
                                 {string("sum_sales"), any(70.0)}},
      unordered_map<string, any>{{string("d_year"), any(2019)},
                                 {string("item"), any(string("C"))},
                                 {string("avg_monthly_sales"), any(50.0)},
                                 {string("sum_sales"), any(60.0)}}};
  int year = 2020;
  string orderby = string("item");
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    vector<pair<unordered_map<string, any>, unordered_map<string, any>>> _tmp;
    for (auto &v : v2) {
      if (v["d_year"] == year && v["avg_monthly_sales"] > 0 &&
          abs(v["sum_sales"] - v["avg_monthly_sales"]) /
                  v["avg_monthly_sales"] >
              0.1) {
        _tmp.push_back({vector<unordered_map<string, any>>{
                            v["sum_sales"] - v["avg_monthly_sales"], v["item"]},
                        v});
      }
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<unordered_map<string, any>> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q47_simplified = [&]() {
    if (!(result == vector<unordered_map<string, any>>{
                        unordered_map<string, any>{
                            {string("d_year"), any(2019)},
                            {string("item"), any(string("C"))},
                            {string("avg_monthly_sales"), any(50.0)},
                            {string("sum_sales"), any(60.0)}},
                        unordered_map<string, any>{
                            {string("d_year"), any(2020)},
                            {string("item"), any(string("A"))},
                            {string("avg_monthly_sales"), any(100.0)},
                            {string("sum_sales"), any(120.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q47_simplified();
  return 0;
}
