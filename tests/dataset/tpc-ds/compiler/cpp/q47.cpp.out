// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:33Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct V2 {
  decltype(2020) d_year;
  decltype(std::string("A")) item;
  decltype(100) avg_monthly_sales;
  decltype(120) sum_sales;
};
inline void __json(const V2 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_monthly_sales\":";
  __json(v.avg_monthly_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
std::vector<V2> v2 = {V2{2020, std::string("A"), 100, 120},
                      V2{2020, std::string("B"), 80, 70},
                      V2{2019, std::string("C"), 50, 60}};
auto year = 2020;
auto orderby = std::string("item");

float abs(float x) {
  if ((x >= 0)) {
    return x;
  } else {
    return (-x);
  }
}

int main() {
  std::vector<V2> result = ([&]() {
    std::vector<std::pair<
        decltype(std::vector<decltype((v.sum_sales - v.avg_monthly_sales))>{
            (v.sum_sales - v.avg_monthly_sales), v.item}),
        V2>>
        __items;
    for (auto v : v2) {
      if (!(((((v.d_year >= (year - 1)) && (v.avg_monthly_sales > 0)) &&
              (v.sum_sales > v.avg_monthly_sales)) &&
             ((abs((v.sum_sales - v.avg_monthly_sales)) / v.avg_monthly_sales) >
              0.1))))
        continue;
      __items.push_back(
          {std::vector<decltype((v.sum_sales - v.avg_monthly_sales))>{
               (v.sum_sales - v.avg_monthly_sales), v.item},
           V2{v.d_year, v.item, v.avg_monthly_sales, v.sum_sales}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<V2> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q47 simplified
  return 0;
}
