// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) sold_date_sk;
  decltype(1) item_sk;
  decltype(10) ext_sales_price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_manager_id;
  decltype(100) i_category_id;
  decltype(std::string("CatA")) i_category;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2020) d_year;
  decltype(5) d_moy;
};
struct Record {
  decltype(dt.d_year) d_year;
  decltype(it.i_category_id) i_category_id;
  decltype(it.i_category) i_category;
  decltype(ss.ext_sales_price) price;
};
struct Grouped {
  decltype(std::declval<Record>().d_year) d_year;
  decltype(std::declval<Record>().i_category_id) i_category_id;
  decltype(std::declval<Record>().i_category) i_category;
};
struct __struct6 {
  Grouped key;
  std::vector<Record> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.d_year) d_year;
  decltype(std::declval<__struct6>().key.i_category_id) i_category_id;
  decltype(std::declval<__struct6>().key.i_category) i_category;
  double sum_ss_ext_sales_price;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const Record &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_ss_ext_sales_price\":";
  __json(v.sum_ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date_sk\":";
  __json(v.sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_sales_price\":";
  __json(v.ext_sales_price);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 1, 10}, StoreSale{1, 2, 20}, StoreSale{2, 1, 15}};
  std::vector<Item> item = {Item{1, 1, 100, std::string("CatA")},
                            Item{2, 1, 200, std::string("CatB")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2020, 5}, DateDim{2, 2021, 5}};
  auto month = 5;
  auto year = 2020;
  std::vector<Record> records = ([&]() {
    std::vector<Record> __items;
    for (auto dt : date_dim) {
      for (auto ss : store_sales) {
        if (!((ss.sold_date_sk == dt.d_date_sk)))
          continue;
        for (auto it : item) {
          if (!((ss.item_sk == it.i_item_sk)))
            continue;
          if (!((((it.i_manager_id == 1) && (dt.d_moy == month)) &&
                 (dt.d_year == year))))
            continue;
          __items.push_back(Record{dt.d_year, it.i_category_id, it.i_category,
                                   ss.ext_sales_price});
        }
      }
    }
    return __items;
  })();
  std::vector<Record> grouped = ([&]() {
    std::vector<__struct6> __groups;
    for (auto r : records) {
      auto __key = Grouped{r.d_year, r.i_category_id, r.i_category};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Record{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct6{__key, std::vector<Record>{Record{r}}});
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.d_year, g.key.i_category_id, g.key.i_category, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Record>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Record> base = ([&]() {
    std::vector<std::pair<
        decltype(std::declval<Record>().sum_ss_ext_sales_price), Record>>
        __items;
    for (auto g : grouped) {
      __items.push_back({(-g.sum_ss_ext_sales_price), g});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Record> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  std::vector<Record> result = base;
  (__json(result));
  // test TPCDS Q42 simplified
  return 0;
}
