// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Sale {
  decltype(1) mgr;
  decltype(30) amount;
};
struct ByMgr {
  decltype(s) s;
};
struct __struct3 {
  decltype(std::unordered_map<std::string, decltype(std::declval<ByMgr>().mgr)>{
      {std::string("mgr"), std::declval<ByMgr>().mgr}}) key;
  std::vector<ByMgr> items;
};
struct __struct4 {
  decltype(std::declval<__struct3>().key.mgr) mgr;
  double sum_sales;
};
inline void __json(const Sale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mgr\":";
  __json(v.mgr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amount\":";
  __json(v.amount);
  std::cout << "}";
}
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mgr\":";
  __json(v.mgr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
inline void __json(const ByMgr &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  std::cout << "}";
}
int main() {
  std::vector<Sale> sales = {Sale{1, 30}, Sale{2, 33}};
  std::vector<ByMgr> by_mgr = ([&]() {
    std::vector<__struct3> __groups;
    for (auto s : sales) {
      auto __key = std::unordered_map<std::string, decltype(s.mgr)>{
          {std::string("mgr"), s.mgr}};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(ByMgr{s});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<ByMgr>{ByMgr{s}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct4{
          g.key.mgr, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<ByMgr>().amount)> __items;
            for (auto x : g.items) {
              __items.push_back(x.amount);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto result = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(std::declval<ByMgr>().sum_sales)> __items;
    for (auto x : by_mgr) {
      __items.push_back(x.sum_sales);
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q63 simplified
  return 0;
}
