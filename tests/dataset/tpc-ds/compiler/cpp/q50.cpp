// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ticket;
  decltype(101) item;
  decltype(1) sold;
  decltype(1) customer;
  decltype(1) store;
};
struct StoreReturn {
  decltype(1) ticket;
  decltype(101) item;
  decltype(16) returned;
  decltype(1) customer;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2001) d_year;
  decltype(7) d_moy;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("Main")) s_store_name;
  decltype(1) s_company_id;
  decltype(std::string("1")) s_street_number;
  decltype(std::string("Main")) s_street_name;
  decltype(std::string("St")) s_street_type;
  decltype(std::string("100")) s_suite_number;
  decltype(std::string("City")) s_city;
  decltype(std::string("County")) s_county;
  decltype(std::string("CA")) s_state;
  decltype(std::string("12345")) s_zip;
};
struct Joined {
  decltype(s) s;
  decltype((sr.returned - ss.sold)) diff;
};
struct __struct6 {
  decltype(std::declval<Joined>().s) key;
  std::vector<Joined> items;
};
struct Result {
  decltype(std::declval<__struct6>().key.s_store_name) s_store_name;
  int d30;
  int d31_60;
  int d61_90;
  int d91_120;
  int d_gt_120;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Joined &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"diff\":";
  __json(v.diff);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d30\":";
  __json(v.d30);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d31_60\":";
  __json(v.d31_60);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d61_90\":";
  __json(v.d61_90);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d91_120\":";
  __json(v.d91_120);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_gt_120\":";
  __json(v.d_gt_120);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_company_id\":";
  __json(v.s_company_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_street_number\":";
  __json(v.s_street_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_street_name\":";
  __json(v.s_street_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_street_type\":";
  __json(v.s_street_type);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suite_number\":";
  __json(v.s_suite_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_city\":";
  __json(v.s_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_county\":";
  __json(v.s_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ticket\":";
  __json(v.ticket);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returned\":";
  __json(v.returned);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer\":";
  __json(v.customer);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ticket\":";
  __json(v.ticket);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold\":";
  __json(v.sold);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer\":";
  __json(v.customer);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store\":";
  __json(v.store);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 101, 1, 1, 1}, StoreSale{2, 102, 1, 1, 1},
      StoreSale{3, 103, 1, 1, 1}, StoreSale{4, 104, 1, 1, 1},
      StoreSale{5, 105, 1, 1, 1}};
  std::vector<StoreReturn> store_returns = {
      StoreReturn{1, 101, 16, 1}, StoreReturn{2, 102, 46, 1},
      StoreReturn{3, 103, 76, 1}, StoreReturn{4, 104, 111, 1},
      StoreReturn{5, 105, 151, 1}};
  std::vector<DateDim> date_dim = {
      DateDim{1, 2001, 7},  DateDim{16, 2001, 8},  DateDim{46, 2001, 8},
      DateDim{76, 2001, 8}, DateDim{111, 2001, 8}, DateDim{151, 2001, 8}};
  std::vector<Store> store = {
      Store{1, std::string("Main"), 1, std::string("1"), std::string("Main"),
            std::string("St"), std::string("100"), std::string("City"),
            std::string("County"), std::string("CA"), std::string("12345")}};
  auto year = 2001;
  auto month = 8;
  std::vector<Joined> joined = ([&]() {
    std::vector<Joined> __items;
    for (auto ss : store_sales) {
      for (auto sr : store_returns) {
        if (!((((ss.ticket == sr.ticket) && (ss.item == sr.item)) &&
               (ss.customer == sr.customer))))
          continue;
        for (auto d1 : date_dim) {
          if (!((ss.sold == d1.d_date_sk)))
            continue;
          for (auto d2 : date_dim) {
            if (!((((sr.returned == d2.d_date_sk) && (d2.d_year == year)) &&
                   (d2.d_moy == month))))
              continue;
            for (auto s : store) {
              if (!((ss.store == s.s_store_sk)))
                continue;
              __items.push_back(Joined{s, (sr.returned - ss.sold)});
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Joined> result = ([&]() {
    std::vector<__struct6> __groups;
    for (auto j : joined) {
      auto __key = j.s;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Joined{j});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct6{__key, std::vector<Joined>{Joined{j}}});
      }
    }
    std::vector<Result> __items;
    for (auto &g : __groups) {
      __items.push_back(Result{g.key.s_store_name,
                               ((int)([&]() {
                                  std::vector<decltype(1)> __items;
                                  for (auto x : g.items) {
                                    if (!((x.diff <= 30)))
                                      continue;
                                    __items.push_back(1);
                                  }
                                  return __items;
                                })()
                                    .size()),
                               ((int)([&]() {
                                  std::vector<decltype(1)> __items;
                                  for (auto x : g.items) {
                                    if (!(((x.diff > 30) && (x.diff <= 60))))
                                      continue;
                                    __items.push_back(1);
                                  }
                                  return __items;
                                })()
                                    .size()),
                               ((int)([&]() {
                                  std::vector<decltype(1)> __items;
                                  for (auto x : g.items) {
                                    if (!(((x.diff > 60) && (x.diff <= 90))))
                                      continue;
                                    __items.push_back(1);
                                  }
                                  return __items;
                                })()
                                    .size()),
                               ((int)([&]() {
                                  std::vector<decltype(1)> __items;
                                  for (auto x : g.items) {
                                    if (!(((x.diff > 90) && (x.diff <= 120))))
                                      continue;
                                    __items.push_back(1);
                                  }
                                  return __items;
                                })()
                                    .size()),
                               ((int)([&]() {
                                  std::vector<decltype(1)> __items;
                                  for (auto x : g.items) {
                                    if (!((x.diff > 120)))
                                      continue;
                                    __items.push_back(1);
                                  }
                                  return __items;
                                })()
                                    .size())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q50 simplified
  return 0;
}
