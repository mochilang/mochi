// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

int main() {
  std::vector<std::string> web_sales =
      std::vector<decltype(std::unordered_map<std::string, decltype(30)>{
          {std::string("net"), 30}})>{
          std::unordered_map<std::string, decltype(30)>{
              {std::string("net"), 30}}};
  std::vector<std::string> catalog_sales =
      std::vector<decltype(std::unordered_map<std::string, decltype(36)>{
          {std::string("net"), 36}})>{
          std::unordered_map<std::string, decltype(36)>{
              {std::string("net"), 36}}};
  auto result = (([&](auto v) {
                   return std::accumulate(v.begin(), v.end(), 0.0);
                 })(([&]() {
                   std::vector<decltype(w.net)> __items;
                   for (auto w : web_sales) {
                     __items.push_back(w.net);
                   }
                   return __items;
                 })()) +
                 ([&](auto v) {
                   return std::accumulate(v.begin(), v.end(), 0.0);
                 })(([&]() {
                   std::vector<decltype(c.net)> __items;
                   for (auto c : catalog_sales) {
                     __items.push_back(c.net);
                   }
                   return __items;
                 })()));
  (__json(result));
  // test TPCDS Q66 simplified
  return 0;
}
