// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogReturn {
  decltype(1) cust;
  decltype(std::string("CA")) state;
  decltype(40) amt;
};
struct AvgList {
  decltype(r) r;
};
struct __struct3 {
  decltype(std::declval<AvgList>().state) key;
  std::vector<AvgList> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct4 {
  decltype(std::declval<__struct3>().key) state;
  double avg_amt;
};
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cust\":";
  __json(v.cust);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  std::cout << "}";
}
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_amt\":";
  __json(v.avg_amt);
  std::cout << "}";
}
inline void __json(const AvgList &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r\":";
  __json(v.r);
  std::cout << "}";
}
int main() {
  std::vector<CatalogReturn> catalog_returns = {
      CatalogReturn{1, std::string("CA"), 40},
      CatalogReturn{2, std::string("CA"), 50},
      CatalogReturn{3, std::string("CA"), 81},
      CatalogReturn{4, std::string("TX"), 30},
      CatalogReturn{5, std::string("TX"), 20}};
  std::vector<AvgList> avg_list = ([&]() {
    std::vector<__struct3> __groups;
    for (auto r : catalog_returns) {
      auto __key = r.state;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(AvgList{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<AvgList>{AvgList{r}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct4{
          g.key, __avg(([&]() {
            std::vector<decltype(std::declval<AvgList>().amt)> __items;
            for (auto x : g.items) {
              __items.push_back(x.amt);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto avg_state = first(([&]() {
    std::vector<AvgList> __items;
    for (auto a : avg_list) {
      if (!((a.state == std::string("CA"))))
        continue;
      __items.push_back(a);
    }
    return __items;
  })());
  auto result_list = ([&]() {
    std::vector<decltype(r.amt)> __items;
    for (auto r : catalog_returns) {
      if (!(((r.state == std::string("CA")) &&
             (r.amt > (avg_state.avg_amt * 1.2)))))
        continue;
      __items.push_back(r.amt);
    }
    return __items;
  })();
  auto result = first(result_list);
  (__json(result));
  // test TPCDS Q81 sample
  return 0;
}
