// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
  decltype(std::string("12345")) ca_zip;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_item_sk;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1999) d_year;
  decltype(5) d_moy;
  decltype(120) d_month_seq;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("A")) i_category;
  decltype(100) i_current_price;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct Result {
  decltype(a) a;
  decltype(c) c;
  decltype(s) s;
  decltype(d) d;
  decltype(i) i;
};
struct __struct7 {
  decltype(std::declval<Result>().ca_state) key;
  std::vector<Result> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key) state;
  int cnt;
};
struct __struct9 {
  decltype(((int)std::declval<__struct7>().items.size())) f0;
  decltype(std::declval<__struct7>().key) f1;
};
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt\":";
  __json(v.cnt);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"a\":";
  __json(v.a);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
int main() {
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CA"), std::string("12345")}};
  std::vector<Customer> customer = {Customer{1, 1}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                        StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                        StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                        StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                        StoreSale{1, 1, 1}, StoreSale{1, 1, 1}};
  std::vector<DateDim> date_dim = {DateDim{1, 1999, 5, 120}};
  std::vector<Item> item = {Item{1, std::string("A"), 100},
                            Item{2, std::string("A"), 50}};
  auto target_month_seq =
      (*std::max_element(([&]() {
                           std::vector<decltype(d.d_month_seq)> __items;
                           for (auto d : date_dim) {
                             if (!(((d.d_year == 1999) && (d.d_moy == 5))))
                               continue;
                             __items.push_back(d.d_month_seq);
                           }
                           return __items;
                         })()
                             .begin(),
                         ([&]() {
                           std::vector<decltype(d.d_month_seq)> __items;
                           for (auto d : date_dim) {
                             if (!(((d.d_year == 1999) && (d.d_moy == 5))))
                               continue;
                             __items.push_back(d.d_month_seq);
                           }
                           return __items;
                         })()
                             .end()));
  std::vector<__struct8> result = ([&]() {
    std::vector<__struct7> __groups;
    for (auto a : customer_address) {
      for (auto c : customer) {
        if (!((a.ca_address_sk == c.c_current_addr_sk)))
          continue;
        for (auto s : store_sales) {
          if (!((c.c_customer_sk == s.ss_customer_sk)))
            continue;
          for (auto d : date_dim) {
            if (!((s.ss_sold_date_sk == d.d_date_sk)))
              continue;
            for (auto i : item) {
              if (!((s.ss_item_sk == i.i_item_sk)))
                continue;
              if (!(((d.d_month_seq == target_month_seq) &&
                     (i.i_current_price >
                      (1.2 * __avg(([&]() {
                         std::vector<decltype(j.i_current_price)> __items;
                         for (auto j : item) {
                           if (!((j.i_category == i.i_category)))
                             continue;
                           __items.push_back(j.i_current_price);
                         }
                         return __items;
                       })()))))))
                continue;
              auto __key = a.ca_state;
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(Result{a, c, s, d, i});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct7{
                    __key, std::vector<Result>{Result{a, c, s, d, i}}});
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<__struct9, __struct8>> __items;
    for (auto &g : __groups) {
      if (!((((int)g.items.size()) >= 10)))
        continue;
      __items.push_back({__struct9{((int)g.items.size()), g.key},
                         __struct8{g.key, ((int)g.items.size())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    if ((size_t)100 < __items.size())
      __items.resize(100);
    std::vector<__struct8> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q6 result
  return 0;
}
