// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))},
                                     {string("ca_zip"), any(string("12345"))}}};
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("c_customer_sk"), 1}, {string("c_current_addr_sk"), 1}}};
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}},
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("ss_sold_date_sk"), 1},
                                     {string("ss_item_sk"), 1}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 1999},
                                     {string("d_moy"), 5},
                                     {string("d_month_seq"), 120}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_category"), any(string("A"))},
                                 {string("i_current_price"), any(100.0)}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_category"), any(string("A"))},
                                 {string("i_current_price"), any(50.0)}}};
  auto target_month_seq = max(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &d : date_dim) {
      if (d["d_year"] == 1999 && d["d_moy"] == 5) {
        _res.push_back(d["d_month_seq"]);
      }
    }
    return _res;
  })());
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = unordered_map<string, any>;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &a : customer_address) {
      for (auto &c : customer) {
        if (!(a["ca_address_sk"] == c["c_current_addr_sk"]))
          continue;
        for (auto &s : store_sales) {
          if (!(c["c_customer_sk"] == s["ss_customer_sk"]))
            continue;
          for (auto &d : date_dim) {
            if (!(s["ss_sold_date_sk"] == d["d_date_sk"]))
              continue;
            for (auto &i : item) {
              if (!(s["ss_item_sk"] == i["i_item_sk"]))
                continue;
              if (d["d_month_seq"] == target_month_seq &&
                  i["i_current_price"] >
                      1.2 * _avg(([&]() -> vector<unordered_map<string, any>> {
                        vector<unordered_map<string, any>> _res;
                        for (auto &j : item) {
                          if (j["i_category"] == i["i_category"]) {
                            _res.push_back(j["i_current_price"]);
                          }
                        }
                        return _res;
                      })())) {
                KeyT _k = a["ca_state"];
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(a);
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<vector<any>, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({vector<int>{_count(g), g.key}, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    int _take = 100;
    if (_take < (int)items.size())
      items.resize(_take);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      if (!(_count(g) >= 10))
        continue;
      _res.push_back(unordered_map<string, any>{
          {string("state"), any(g.key)}, {string("cnt"), any(_count(g))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q6_result = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{
              unordered_map<string, any>{{string("state"), any(string("CA"))},
                                         {string("cnt"), any(10)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q6_result();
  return 0;
}
