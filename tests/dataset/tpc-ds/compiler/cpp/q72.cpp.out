// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_item_sk"), any(1)},
                                     {string("cs_order_number"), any(1)},
                                     {string("cs_quantity"), any(1)},
                                     {string("cs_sold_date_sk"), any(1)},
                                     {string("cs_ship_date_sk"), any(3)},
                                     {string("cs_bill_cdemo_sk"), any(1)},
                                     {string("cs_bill_hdemo_sk"), any(1)},
                                     {string("cs_promo_sk"), any()}}};
  vector<unordered_map<string, int>> inventory =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 2},
                                     {string("inv_quantity_on_hand"), 0}}};
  vector<unordered_map<string, any>> warehouse =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("w_warehouse_sk"), any(1)},
          {string("w_warehouse_name"), any(string("Main"))}}};
  vector<unordered_map<string, any>> item =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("i_item_sk"), any(1)},
          {string("i_item_desc"), any(string("ItemA"))}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cd_demo_sk"), any(1)},
          {string("cd_marital_status"), any(string("M"))}}};
  vector<unordered_map<string, any>> household_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("hd_demo_sk"), any(1)},
          {string("hd_buy_potential"), any(string("5001-10000"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_week_seq"), 10},
                                     {string("d_date"), 1},
                                     {string("d_year"), 2000}},
          unordered_map<string, int>{{string("d_date_sk"), 2},
                                     {string("d_week_seq"), 10},
                                     {string("d_date"), 1},
                                     {string("d_year"), 2000}},
          unordered_map<string, int>{{string("d_date_sk"), 3},
                                     {string("d_week_seq"), 10},
                                     {string("d_date"), 7},
                                     {string("d_year"), 2000}}};
  struct GroupKey0 {
    unordered_map<string, any> item_desc;
    unordered_map<string, any> warehouse;
    unordered_map<string, int> week_seq;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.item_desc == b.item_desc && a.warehouse == b.warehouse &&
           a.week_seq == b.week_seq;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.item_desc);
      _hash_combine(h, k.warehouse);
      _hash_combine(h, k.week_seq);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cs : catalog_sales) {
      for (auto &inv : inventory) {
        if (!(inv["inv_item_sk"] == cs["cs_item_sk"]))
          continue;
        for (auto &w : warehouse) {
          if (!(w["w_warehouse_sk"] == inv["inv_warehouse_sk"]))
            continue;
          for (auto &i : item) {
            if (!(i["i_item_sk"] == cs["cs_item_sk"]))
              continue;
            for (auto &cd : customer_demographics) {
              if (!(cd["cd_demo_sk"] == cs["cs_bill_cdemo_sk"]))
                continue;
              for (auto &hd : household_demographics) {
                if (!(hd["hd_demo_sk"] == cs["cs_bill_hdemo_sk"]))
                  continue;
                for (auto &d1 : date_dim) {
                  if (!(d1["d_date_sk"] == cs["cs_sold_date_sk"]))
                    continue;
                  for (auto &d2 : date_dim) {
                    if (!(d2["d_date_sk"] == inv["inv_date_sk"]))
                      continue;
                    for (auto &d3 : date_dim) {
                      if (!(d3["d_date_sk"] == cs["cs_ship_date_sk"]))
                        continue;
                      if (d1["d_week_seq"] == d2["d_week_seq"] &&
                          inv["inv_quantity_on_hand"] < cs["cs_quantity"] &&
                          d3["d_date"] > d1["d_date"] + 5 &&
                          hd["hd_buy_potential"] == string("5001-10000") &&
                          d1["d_year"] == 2000 &&
                          cd["cd_marital_status"] == string("M")) {
                        KeyT _k =
                            GroupKey0{i["i_item_desc"], w["w_warehouse_name"],
                                      d1["d_week_seq"]};
                        if (!groups.count(_k)) {
                          groups[_k] = Group{_k, {}};
                          order.push_back(_k);
                        }
                        groups[_k].Items.push_back(cs);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_desc"), any(g.key.item_desc)},
          {string("w_warehouse_name"), any(g.key.warehouse)},
          {string("d_week_seq"), any(g.key.week_seq)},
          {string("no_promo"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["cs_promo_sk"] ==) {
                 _res.push_back(x);
               }
             }
             return _res;
           })()))},
          {string("promo"), any(_count(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               if (_cast<unordered_map<string, any>>(x)["cs_promo_sk"] !=) {
                 _res.push_back(x);
               }
             }
             return _res;
           })()))},
          {string("total_cnt"), any(_count(g))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q72_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_desc"), any(string("ItemA"))},
              {string("w_warehouse_name"), any(string("Main"))},
              {string("d_week_seq"), any(10)},
              {string("no_promo"), any(1)},
              {string("promo"), any(0)},
              {string("total_cnt"), any(1)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q72_simplified();
  return 0;
}
