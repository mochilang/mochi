// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(20) price;
  decltype(5) ret;
};
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ret\":";
  __json(v.ret);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{20, 5}, StoreSale{10, 2},
                                        StoreSale{5, 0}};
  std::vector<StoreSale> catalog_sales = {StoreSale{15, 3}, StoreSale{8, 1}};
  std::vector<StoreSale> web_sales = {StoreSale{25, 5}, StoreSale{15, 8},
                                      StoreSale{8, 2}};
  auto total_profit = ((([&](auto v) {
                          return std::accumulate(v.begin(), v.end(), 0.0);
                        })(([&]() {
                          std::vector<decltype((s.price - s.ret))> __items;
                          for (auto s : store_sales) {
                            __items.push_back((s.price - s.ret));
                          }
                          return __items;
                        })()) +
                        ([&](auto v) {
                          return std::accumulate(v.begin(), v.end(), 0.0);
                        })(([&]() {
                          std::vector<decltype((c.price - c.ret))> __items;
                          for (auto c : catalog_sales) {
                            __items.push_back((c.price - c.ret));
                          }
                          return __items;
                        })())) +
                       ([&](auto v) {
                         return std::accumulate(v.begin(), v.end(), 0.0);
                       })(([&]() {
                         std::vector<decltype((w.price - w.ret))> __items;
                         for (auto w : web_sales) {
                           __items.push_back((w.price - w.ret));
                         }
                         return __items;
                       })()));
  (__json(total_profit));
  // test TPCDS Q80 sample
  return 0;
}
