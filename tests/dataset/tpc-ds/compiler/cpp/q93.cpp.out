// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct StoreSale {
  int ss_item_sk;
  int ss_ticket_number;
  int ss_customer_sk;
  int ss_quantity;
  double ss_sales_price;
};

struct StoreReturn {
  int sr_item_sk;
  int sr_ticket_number;
  int sr_reason_sk;
  int sr_return_quantity;
};

struct Reason {
  int r_reason_sk;
  string r_reason_desc;
};

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_ticket_number"), any(1)},
                                     {string("ss_customer_sk"), any(1)},
                                     {string("ss_quantity"), any(5)},
                                     {string("ss_sales_price"), any(10.0)}},
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_ticket_number"), any(2)},
                                     {string("ss_customer_sk"), any(2)},
                                     {string("ss_quantity"), any(3)},
                                     {string("ss_sales_price"), any(20.0)}}};
  vector<unordered_map<string, int>> store_returns =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("sr_item_sk"), 1},
                                     {string("sr_ticket_number"), 1},
                                     {string("sr_reason_sk"), 1},
                                     {string("sr_return_quantity"), 1}}};
  vector<unordered_map<string, any>> reason =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("r_reason_sk"), any(1)},
          {string("r_reason_desc"), any(string("ReasonA"))}}};
  auto t = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      for (auto &sr : store_returns) {
        if (!(ss["ss_item_sk"] == sr["sr_item_sk"] &&
              ss["ss_ticket_number"] == sr["sr_ticket_number"]))
          continue;
        for (auto &r : reason) {
          if (!(sr["sr_reason_sk"] == r["r_reason_sk"]))
            continue;
          if (r["r_reason_desc"] == string("ReasonA")) {
            _res.push_back(unordered_map<string, any>{
                {string("ss_customer_sk"), any(ss["ss_customer_sk"])},
                {string("act_sales"), any(([&]() {
                   if (sr !=)
                     return (ss["ss_quantity"] - sr["sr_return_quantity"]) *
                            ss["ss_sales_price"];
                   return ss["ss_quantity"] * ss["ss_sales_price"];
                 })())}});
          }
        }
      }
    }
    return _res;
  })();
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = t;
    auto _groups =
        _group_by(_src, [&](auto &x) { return x["ss_customer_sk"]; });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("ss_customer_sk"), any(g.key)},
          {string("sumsales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &y : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(y)["act_sales"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q93_active_sales = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{
              unordered_map<string, any>{{string("ss_customer_sk"), any(1)},
                                         {string("sumsales"), any(40.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q93_active_sales();
  return 0;
}
