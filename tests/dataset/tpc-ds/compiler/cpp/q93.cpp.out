// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_item_sk;
  int ss_ticket_number;
  int ss_customer_sk;
  int ss_quantity;
  float ss_sales_price;
};
struct StoreReturn {
  int sr_item_sk;
  int sr_ticket_number;
  int sr_reason_sk;
  int sr_return_quantity;
};
struct Reason {
  int r_reason_sk;
  std::string r_reason_desc;
};
struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(1) ss_ticket_number;
  decltype(1) ss_customer_sk;
  decltype(5) ss_quantity;
  decltype(10) ss_sales_price;
};
struct StoreReturn {
  decltype(1) sr_item_sk;
  decltype(1) sr_ticket_number;
  decltype(1) sr_reason_sk;
  decltype(1) sr_return_quantity;
};
struct Reason {
  decltype(1) r_reason_sk;
  decltype(std::string("ReasonA")) r_reason_desc;
};
struct T {
  decltype(ss.ss_customer_sk) ss_customer_sk;
  bool act_sales;
};
struct __struct5 {
  decltype(std::declval<T>().ss_customer_sk) key;
  std::vector<T> items;
};
struct Result {
  decltype(std::declval<__struct5>().key) ss_customer_sk;
  double sumsales;
};
struct __struct7 {
  double f0;
  decltype(std::declval<__struct5>().key) f1;
};
inline void __json(const Reason &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_reason_sk\":";
  __json(v.r_reason_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_reason_desc\":";
  __json(v.r_reason_desc);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_reason_sk\":";
  __json(v.sr_reason_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Reason &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_reason_sk\":";
  __json(v.r_reason_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_reason_desc\":";
  __json(v.r_reason_desc);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_reason_sk\":";
  __json(v.sr_reason_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_return_quantity\":";
  __json(v.sr_return_quantity);
  std::cout << "}";
}
inline void __json(const T &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"act_sales\":";
  __json(v.act_sales);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sumsales\":";
  __json(v.sumsales);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 5, 10},
                                        StoreSale{1, 2, 2, 3, 20}};
  std::vector<StoreReturn> store_returns = {StoreReturn{1, 1, 1, 1}};
  std::vector<Reason> reason = {Reason{1, std::string("ReasonA")}};
  std::vector<T> t = ([&]() {
    std::vector<T> __items;
    for (auto ss : store_sales) {
      {
        bool __matched0 = false;
        for (auto sr : store_returns) {
          if (!(((ss.ss_item_sk == sr.sr_item_sk) &&
                 (ss.ss_ticket_number == sr.sr_ticket_number))))
            continue;
          __matched0 = true;
          {
            bool __matched1 = false;
            for (auto r : reason) {
              if (!(((sr != nullptr) && (sr.sr_reason_sk == r.r_reason_sk))))
                continue;
              __matched1 = true;
              if (!(((r == nullptr) ||
                     (r.r_reason_desc == std::string("ReasonA")))))
                continue;
              __items.push_back(
                  T{ss.ss_customer_sk,
                    ((sr != nullptr)
                         ? (((ss.ss_quantity - sr.sr_return_quantity)) *
                            ss.ss_sales_price)
                         : (ss.ss_quantity * ss.ss_sales_price))});
            }
            if (!__matched1) {
              auto r = std::decay_t<decltype(*(reason).begin())>{};
              if (!(((r == nullptr) ||
                     (r.r_reason_desc == std::string("ReasonA")))))
                continue;
              __items.push_back(
                  T{ss.ss_customer_sk,
                    ((sr != nullptr)
                         ? (((ss.ss_quantity - sr.sr_return_quantity)) *
                            ss.ss_sales_price)
                         : (ss.ss_quantity * ss.ss_sales_price))});
            }
          }
        }
        if (!__matched0) {
          auto sr = std::decay_t<decltype(*(store_returns).begin())>{};
          {
            bool __matched1 = false;
            for (auto r : reason) {
              if (!(((sr != nullptr) && (sr.sr_reason_sk == r.r_reason_sk))))
                continue;
              __matched1 = true;
              if (!(((r == nullptr) ||
                     (r.r_reason_desc == std::string("ReasonA")))))
                continue;
              __items.push_back(
                  T{ss.ss_customer_sk,
                    ((sr != nullptr)
                         ? (((ss.ss_quantity - sr.sr_return_quantity)) *
                            ss.ss_sales_price)
                         : (ss.ss_quantity * ss.ss_sales_price))});
            }
            if (!__matched1) {
              auto r = std::decay_t<decltype(*(reason).begin())>{};
              if (!(((r == nullptr) ||
                     (r.r_reason_desc == std::string("ReasonA")))))
                continue;
              __items.push_back(
                  T{ss.ss_customer_sk,
                    ((sr != nullptr)
                         ? (((ss.ss_quantity - sr.sr_return_quantity)) *
                            ss.ss_sales_price)
                         : (ss.ss_quantity * ss.ss_sales_price))});
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<T> result = ([&]() {
    std::vector<__struct5> __groups;
    for (auto x : t) {
      auto __key = x.ss_customer_sk;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(T{x});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct5{__key, std::vector<T>{T{x}}});
      }
    }
    std::vector<std::pair<__struct7, Result>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct7{
               ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<T>().act_sales)> __items;
                 for (auto y : g.items) {
                   __items.push_back(y.act_sales);
                 }
                 return __items;
               })()),
               g.key},
           Result{g.key, ([&](auto v) {
                    return std::accumulate(v.begin(), v.end(), 0.0);
                  })(([&]() {
                    std::vector<decltype(std::declval<T>().act_sales)> __items;
                    for (auto y : g.items) {
                      __items.push_back(y.act_sales);
                    }
                    return __items;
                  })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q93 active sales
  return 0;
}
