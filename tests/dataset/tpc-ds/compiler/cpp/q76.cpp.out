// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 1998},
                                     {string("d_qoy"), 1}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_category"), any(string("CatA"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_category"), any(string("CatB"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(3)},
                                 {string("i_category"), any(string("CatC"))}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_customer_sk"), any()},
                                     {string("ss_item_sk"), any(1)},
                                     {string("ss_ext_sales_price"), any(10.0)},
                                     {string("ss_sold_date_sk"), any(1)}}};
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_bill_customer_sk"), any()},
                                     {string("ws_item_sk"), any(2)},
                                     {string("ws_ext_sales_price"), any(15.0)},
                                     {string("ws_sold_date_sk"), any(1)}}};
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_bill_customer_sk"), any()},
                                     {string("cs_item_sk"), any(3)},
                                     {string("cs_ext_sales_price"), any(20.0)},
                                     {string("cs_sold_date_sk"), any(1)}}};
  auto store_part = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      for (auto &i : item) {
        if (!(i["i_item_sk"] == ss["ss_item_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(d["d_date_sk"] == ss["ss_sold_date_sk"]))
            continue;
          if (ss["ss_customer_sk"] ==) {
            _res.push_back(unordered_map<string, any>{
                {string("channel"), any(string("store"))},
                {string("col_name"), any(ss["ss_customer_sk"])},
                {string("d_year"), any(d["d_year"])},
                {string("d_qoy"), any(d["d_qoy"])},
                {string("i_category"), any(i["i_category"])},
                {string("ext_sales_price"), any(ss["ss_ext_sales_price"])}});
          }
        }
      }
    }
    return _res;
  })();
  auto web_part = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      for (auto &i : item) {
        if (!(i["i_item_sk"] == ws["ws_item_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(d["d_date_sk"] == ws["ws_sold_date_sk"]))
            continue;
          if (ws["ws_bill_customer_sk"] ==) {
            _res.push_back(unordered_map<string, any>{
                {string("channel"), any(string("web"))},
                {string("col_name"), any(ws["ws_bill_customer_sk"])},
                {string("d_year"), any(d["d_year"])},
                {string("d_qoy"), any(d["d_qoy"])},
                {string("i_category"), any(i["i_category"])},
                {string("ext_sales_price"), any(ws["ws_ext_sales_price"])}});
          }
        }
      }
    }
    return _res;
  })();
  auto catalog_part = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &cs : catalog_sales) {
      for (auto &i : item) {
        if (!(i["i_item_sk"] == cs["cs_item_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(d["d_date_sk"] == cs["cs_sold_date_sk"]))
            continue;
          if (cs["cs_bill_customer_sk"] ==) {
            _res.push_back(unordered_map<string, any>{
                {string("channel"), any(string("catalog"))},
                {string("col_name"), any(cs["cs_bill_customer_sk"])},
                {string("d_year"), any(d["d_year"])},
                {string("d_qoy"), any(d["d_qoy"])},
                {string("i_category"), any(i["i_category"])},
                {string("ext_sales_price"), any(cs["cs_ext_sales_price"])}});
          }
        }
      }
    }
    return _res;
  })();
  auto all_rows = _concat(_concat(store_part, web_part), catalog_part);
  struct GroupKey0 {
    any channel;
    any col_name;
    any d_year;
    any d_qoy;
    any i_category;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.channel == b.channel && a.col_name == b.col_name &&
           a.d_year == b.d_year && a.d_qoy == b.d_qoy &&
           a.i_category == b.i_category;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.channel);
      _hash_combine(h, k.col_name);
      _hash_combine(h, k.d_year);
      _hash_combine(h, k.d_qoy);
      _hash_combine(h, k.i_category);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &r : all_rows) {
      KeyT _k = GroupKey0{_cast<unordered_map<string, any>>(r)["channel"],
                          _cast<unordered_map<string, any>>(r)["col_name"],
                          _cast<unordered_map<string, any>>(r)["d_year"],
                          _cast<unordered_map<string, any>>(r)["d_qoy"],
                          _cast<unordered_map<string, any>>(r)["i_category"]};
      if (!groups.count(_k)) {
        groups[_k] = Group{_k, {}};
        order.push_back(_k);
      }
      groups[_k].Items.push_back(r);
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<Group *, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({g.key.channel, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(g.key.channel)},
          {string("col_name"), any(g.key.col_name)},
          {string("d_year"), any(g.key.d_year)},
          {string("d_qoy"), any(g.key.d_qoy)},
          {string("i_category"), any(g.key.i_category)},
          {string("sales_cnt"), any(_count(g))},
          {string("sales_amt"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.r.ext_sales_price);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q76_simplified = [&]() {
    if (!(result == vector<unordered_map<string, any>>{
                        unordered_map<string, any>{
                            {string("channel"), any(string("store"))},
                            {string("col_name"), any()},
                            {string("d_year"), any(1998)},
                            {string("d_qoy"), any(1)},
                            {string("i_category"), any(string("CatA"))},
                            {string("sales_cnt"), any(1)},
                            {string("sales_amt"), any(10.0)}},
                        unordered_map<string, any>{
                            {string("channel"), any(string("web"))},
                            {string("col_name"), any()},
                            {string("d_year"), any(1998)},
                            {string("d_qoy"), any(1)},
                            {string("i_category"), any(string("CatB"))},
                            {string("sales_cnt"), any(1)},
                            {string("sales_amt"), any(15.0)}},
                        unordered_map<string, any>{
                            {string("channel"), any(string("catalog"))},
                            {string("col_name"), any()},
                            {string("d_year"), any(1998)},
                            {string("d_qoy"), any(1)},
                            {string("i_category"), any(string("CatC"))},
                            {string("sales_cnt"), any(1)},
                            {string("sales_amt"), any(20.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q76_simplified();
  return 0;
}
