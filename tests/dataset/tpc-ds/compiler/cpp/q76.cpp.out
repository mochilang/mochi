// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct DateDim {
  decltype(1) d_date_sk;
  decltype(1998) d_year;
  decltype(1) d_qoy;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("CatA")) i_category;
};
struct StoreSale {
  decltype(nullptr) ss_customer_sk;
  decltype(1) ss_item_sk;
  decltype(10) ss_ext_sales_price;
  decltype(1) ss_sold_date_sk;
};
struct WebSale {
  decltype(nullptr) ws_bill_customer_sk;
  decltype(2) ws_item_sk;
  decltype(15) ws_ext_sales_price;
  decltype(1) ws_sold_date_sk;
};
struct CatalogSale {
  decltype(nullptr) cs_bill_customer_sk;
  decltype(3) cs_item_sk;
  decltype(20) cs_ext_sales_price;
  decltype(1) cs_sold_date_sk;
};
struct StorePart {
  decltype(std::string("store")) channel;
  decltype(ss.ss_customer_sk) col_name;
  decltype(d.d_year) d_year;
  decltype(d.d_qoy) d_qoy;
  decltype(i.i_category) i_category;
  decltype(ss.ss_ext_sales_price) ext_sales_price;
};
struct Result {
  decltype(r.channel) channel;
  decltype(r.col_name) col_name;
  decltype(r.d_year) d_year;
  decltype(r.d_qoy) d_qoy;
  decltype(r.i_category) i_category;
};
struct __struct8 {
  decltype(r) r;
};
struct __struct9 {
  Result key;
  std::vector<__struct8> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key.channel) channel;
  decltype(std::declval<__struct9>().key.col_name) col_name;
  decltype(std::declval<__struct9>().key.d_year) d_year;
  decltype(std::declval<__struct9>().key.d_qoy) d_qoy;
  decltype(std::declval<__struct9>().key.i_category) i_category;
  int sales_cnt;
  double sales_amt;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"col_name\":";
  __json(v.col_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const StorePart &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"col_name\":";
  __json(v.col_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_sales_price\":";
  __json(v.ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"col_name\":";
  __json(v.col_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_cnt\":";
  __json(v.sales_cnt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_amt\":";
  __json(v.sales_amt);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r\":";
  __json(v.r);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  std::cout << "}";
}
int main() {
  std::vector<DateDim> date_dim = {DateDim{1, 1998, 1}};
  std::vector<Item> item = {Item{1, std::string("CatA")},
                            Item{2, std::string("CatB")},
                            Item{3, std::string("CatC")}};
  std::vector<StoreSale> store_sales = {StoreSale{nullptr, 1, 10, 1}};
  std::vector<WebSale> web_sales = {WebSale{nullptr, 2, 15, 1}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{nullptr, 3, 20, 1}};
  std::vector<StorePart> store_part = ([&]() {
    std::vector<StorePart> __items;
    for (auto ss : store_sales) {
      for (auto i : item) {
        if (!((i.i_item_sk == ss.ss_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((d.d_date_sk == ss.ss_sold_date_sk)))
            continue;
          if (!((ss.ss_customer_sk == nullptr)))
            continue;
          __items.push_back(StorePart{std::string("store"), ss.ss_customer_sk,
                                      d.d_year, d.d_qoy, i.i_category,
                                      ss.ss_ext_sales_price});
        }
      }
    }
    return __items;
  })();
  std::vector<StorePart> web_part = ([&]() {
    std::vector<StorePart> __items;
    for (auto ws : web_sales) {
      for (auto i : item) {
        if (!((i.i_item_sk == ws.ws_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((d.d_date_sk == ws.ws_sold_date_sk)))
            continue;
          if (!((ws.ws_bill_customer_sk == nullptr)))
            continue;
          __items.push_back(StorePart{std::string("web"),
                                      ws.ws_bill_customer_sk, d.d_year, d.d_qoy,
                                      i.i_category, ws.ws_ext_sales_price});
        }
      }
    }
    return __items;
  })();
  std::vector<StorePart> catalog_part = ([&]() {
    std::vector<StorePart> __items;
    for (auto cs : catalog_sales) {
      for (auto i : item) {
        if (!((i.i_item_sk == cs.cs_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((d.d_date_sk == cs.cs_sold_date_sk)))
            continue;
          if (!((cs.cs_bill_customer_sk == nullptr)))
            continue;
          __items.push_back(StorePart{std::string("catalog"),
                                      cs.cs_bill_customer_sk, d.d_year, d.d_qoy,
                                      i.i_category, cs.cs_ext_sales_price});
        }
      }
    }
    return __items;
  })();
  auto all_rows = concat(store_part, web_part, catalog_part);
  std::vector<__struct8> result = ([&]() {
    std::vector<__struct9> __groups;
    for (auto r : all_rows) {
      auto __key =
          Result{r.channel, r.col_name, r.d_year, r.d_qoy, r.i_category};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct8{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct9{__key, std::vector<__struct8>{__struct8{r}}});
      }
    }
    std::vector<
        std::pair<decltype(std::declval<__struct9>().key.channel), __struct10>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {g.key.channel,
           __struct10{g.key.channel, g.key.col_name, g.key.d_year, g.key.d_qoy,
                      g.key.i_category, ((int)g.items.size()), ([&](auto v) {
                        return std::accumulate(v.begin(), v.end(), 0.0);
                      })(([&]() {
                        std::vector<decltype(std::declval<__struct8>()
                                                 .r.ext_sales_price)>
                            __items;
                        for (auto x : g.items) {
                          __items.push_back(x.r.ext_sales_price);
                        }
                        return __items;
                      })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct10> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q76 simplified
  return 0;
}
