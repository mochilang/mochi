// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct StoreSale {
  int ss_store_sk;
  int ss_sold_date_sk;
  int ss_hdemo_sk;
  int ss_cdemo_sk;
  int ss_addr_sk;
  double ss_sales_price;
  double ss_net_profit;
  int ss_quantity;
  double ss_ext_sales_price;
  double ss_ext_wholesale_cost;
};

struct Store {
  int s_store_sk;
  string s_state;
};

struct CustomerDemographics {
  int cd_demo_sk;
  string cd_marital_status;
  string cd_education_status;
};

struct HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_country;
  string ca_state;
};

struct DateDim {
  int d_date_sk;
  int d_year;
};

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("ss_store_sk"), any(1)},
          {string("ss_sold_date_sk"), any(1)},
          {string("ss_hdemo_sk"), any(1)},
          {string("ss_cdemo_sk"), any(1)},
          {string("ss_addr_sk"), any(1)},
          {string("ss_sales_price"), any(120.0)},
          {string("ss_net_profit"), any(150.0)},
          {string("ss_quantity"), any(10)},
          {string("ss_ext_sales_price"), any(100.0)},
          {string("ss_ext_wholesale_cost"), any(50.0)}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("s_store_sk"), any(1)},
                                 {string("s_state"), any(string("CA"))}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cd_demo_sk"), any(1)},
          {string("cd_marital_status"), any(string("M1"))},
          {string("cd_education_status"), any(string("ES1"))}}};
  vector<unordered_map<string, int>> household_demographics =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("hd_demo_sk"), 1}, {string("hd_dep_count"), 3}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("ca_address_sk"), any(1)},
          {string("ca_country"), any(string("United States"))},
          {string("ca_state"), any(string("CA"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 2001}}};
  auto filtered = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      for (auto &s : store) {
        if (!(ss["ss_store_sk"] == s["s_store_sk"]))
          continue;
        for (auto &cd : customer_demographics) {
          if (!(ss["ss_cdemo_sk"] == cd["cd_demo_sk"] &&
                cd["cd_marital_status"] == string("M1") &&
                cd["cd_education_status"] == string("ES1")))
            continue;
          for (auto &hd : household_demographics) {
            if (!(ss["ss_hdemo_sk"] == hd["hd_demo_sk"] &&
                  hd["hd_dep_count"] == 3))
              continue;
            for (auto &ca : customer_address) {
              if (!(ss["ss_addr_sk"] == ca["ca_address_sk"] &&
                    ca["ca_country"] == string("United States") &&
                    ca["ca_state"] == string("CA")))
                continue;
              for (auto &d : date_dim) {
                if (!(ss["ss_sold_date_sk"] == d["d_date_sk"] &&
                      d["d_year"] == 2001))
                  continue;
                _res.push_back(ss);
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  struct GroupKey6 {};
  inline bool operator==(const GroupKey6 &a, const GroupKey6 &b) { return; }
  namespace std {
  template <> struct hash<GroupKey6> {
    size_t operator()(const GroupKey6 &k) const noexcept {
      size_t h = 0;
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = filtered;
    auto _groups = _group_by(_src, [&](auto &r) { return GroupKey6{}; });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("avg_ss_quantity"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ss_quantity"]);
             }
             return _res;
           })()))},
          {string("avg_ss_ext_sales_price"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ss_ext_sales_price"]);
             }
             return _res;
           })()))},
          {string("avg_ss_ext_wholesale_cost"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(
                   x)["ss_ext_wholesale_cost"]);
             }
             return _res;
           })()))},
          {string("sum_ss_ext_wholesale_cost"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(
                   x)["ss_ext_wholesale_cost"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q13_averages = [&]() {
    if (!(result ==
          vector<unordered_map<string, double>>{unordered_map<string, double>{
              {string("avg_ss_quantity"), 10.0},
              {string("avg_ss_ext_sales_price"), 100.0},
              {string("avg_ss_ext_wholesale_cost"), 50.0},
              {string("sum_ss_ext_wholesale_cost"), 50.0}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q13_averages();
  return 0;
}
