// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

string _sliceString(const string &s, int start, int end) {
  int n = s.size();
  if (start < 0)
    start += n;
  if (end < 0)
    end += n;
  if (start < 0)
    start = 0;
  if (end > n)
    end = n;
  if (end < start)
    end = start;
  return s.substr(start, end - start);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CatalogSale {
  int cs_bill_customer_sk;
  double cs_sales_price;
  int cs_sold_date_sk;
};

struct Customer {
  int c_customer_sk;
  int c_current_addr_sk;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_zip;
  string ca_state;
};

struct DateDim {
  int d_date_sk;
  int d_qoy;
  int d_year;
};

int main() {
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_bill_customer_sk"), any(1)},
                                     {string("cs_sales_price"), any(600.0)},
                                     {string("cs_sold_date_sk"), any(1)}}};
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("c_customer_sk"), 1}, {string("c_current_addr_sk"), 1}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_zip"), any(string("85669"))},
                                     {string("ca_state"), any(string("CA"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_qoy"), 1},
                                     {string("d_year"), 2000}}};
  struct GroupKey4 {
    unordered_map<string, any> zip;
  };
  inline bool operator==(const GroupKey4 &a, const GroupKey4 &b) {
    return a.zip == b.zip;
  }
  namespace std {
  template <> struct hash<GroupKey4> {
    size_t operator()(const GroupKey4 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.zip);
      return h;
    }
  };
  } // namespace std

  auto filtered = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey4;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cs : catalog_sales) {
      for (auto &c : customer) {
        if (!(cs["cs_bill_customer_sk"] == c["c_customer_sk"]))
          continue;
        for (auto &ca : customer_address) {
          if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
            continue;
          for (auto &d : date_dim) {
            if (!(cs["cs_sold_date_sk"] == d["d_date_sk"]))
              continue;
            if (((find(vector<string>{string("CA"), string("WA"), string("GA")}
                           .begin(),
                       vector<string>{string("CA"), string("WA"), string("GA")}
                           .end(),
                       (find(vector<string>{string("85669"), string("86197"),
                                            string("88274"), string("83405"),
                                            string("86475"), string("85392"),
                                            string("85460"), string("80348"),
                                            string("81792")}
                                 .begin(),
                             vector<string>{string("85669"), string("86197"),
                                            string("88274"), string("83405"),
                                            string("86475"), string("85392"),
                                            string("85460"), string("80348"),
                                            string("81792")}
                                 .end(),
                             _sliceString(ca["ca_zip"], 0, 5)) !=
                        vector<string>{
                            string("85669"), string("86197"), string("88274"),
                            string("83405"), string("86475"), string("85392"),
                            string("85460"), string("80348"), string("81792")}
                            .end()) ||
                           ca["ca_state"]) !=
                  vector<string>{string("CA"), string("WA"), string("GA")}
                      .end()) ||
                 cs["cs_sales_price"] > 500) &&
                d["d_qoy"] == 1 && d["d_year"] == 2000) {
              KeyT _k = GroupKey4{ca["ca_zip"]};
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(cs);
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<Group *, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({g.key.zip, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("ca_zip"), any(g.key.zip)},
          {string("sum_sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["cs_sales_price"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(filtered);
  auto test_TPCDS_Q15_zip = [&]() {
    if (!(filtered ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("ca_zip"), any(string("85669"))},
              {string("sum_sales"), any(600.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q15_zip();
  return 0;
}
