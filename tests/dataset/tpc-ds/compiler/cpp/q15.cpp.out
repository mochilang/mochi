// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  int cs_bill_customer_sk;
  float cs_sales_price;
  int cs_sold_date_sk;
};
struct Customer {
  int c_customer_sk;
  int c_current_addr_sk;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_zip;
  std::string ca_state;
};
struct DateDim {
  int d_date_sk;
  int d_qoy;
  int d_year;
};
struct CatalogSale {
  decltype(1) cs_bill_customer_sk;
  decltype(600) cs_sales_price;
  decltype(1) cs_sold_date_sk;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("85669")) ca_zip;
  decltype(std::string("CA")) ca_state;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_qoy;
  decltype(2000) d_year;
};
struct Filtered {
  decltype(cs) cs;
  decltype(c) c;
  decltype(ca) ca;
  decltype(d) d;
};
struct __struct6 {
  decltype(std::unordered_map<std::string, decltype(ca.ca_zip)>{
      {std::string("zip"), ca.ca_zip}}) key;
  std::vector<Filtered> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.zip) ca_zip;
  double sum_sales;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sales_price\":";
  __json(v.cs_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sales_price\":";
  __json(v.cs_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 600, 1}};
  std::vector<Customer> customer = {Customer{1, 1}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("85669"), std::string("CA")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1, 2000}};
  std::vector<Filtered> filtered = ([&]() {
    std::vector<__struct6> __groups;
    for (auto cs : catalog_sales) {
      for (auto c : customer) {
        if (!((cs.cs_bill_customer_sk == c.c_customer_sk)))
          continue;
        for (auto ca : customer_address) {
          if (!((c.c_current_addr_sk == ca.ca_address_sk)))
            continue;
          for (auto d : date_dim) {
            if (!((cs.cs_sold_date_sk == d.d_date_sk)))
              continue;
            if (!(((((((std::find(
                            std::vector<std::string>{
                                std::string("85669"), std::string("86197"),
                                std::string("88274"), std::string("83405"),
                                std::string("86475"), std::string("85392"),
                                std::string("85460"), std::string("80348"),
                                std::string("81792")}
                                .begin(),
                            std::vector<std::string>{
                                std::string("85669"), std::string("86197"),
                                std::string("88274"), std::string("83405"),
                                std::string("86475"), std::string("85392"),
                                std::string("85460"), std::string("80348"),
                                std::string("81792")}
                                .end(),
                            substr(ca.ca_zip, 0, 5)) !=
                        std::vector<std::string>{
                            std::string("85669"), std::string("86197"),
                            std::string("88274"), std::string("83405"),
                            std::string("86475"), std::string("85392"),
                            std::string("85460"), std::string("80348"),
                            std::string("81792")}
                            .end()) ||
                       (std::find(std::vector<std::string>{std::string("CA"),
                                                           std::string("WA"),
                                                           std::string("GA")}
                                      .begin(),
                                  std::vector<std::string>{std::string("CA"),
                                                           std::string("WA"),
                                                           std::string("GA")}
                                      .end(),
                                  ca.ca_state) !=
                        std::vector<std::string>{std::string("CA"),
                                                 std::string("WA"),
                                                 std::string("GA")}
                            .end())) ||
                      (cs.cs_sales_price > 500))) &&
                    (d.d_qoy == 1)) &&
                   (d.d_year == 2000))))
              continue;
            auto __key = std::unordered_map<std::string, decltype(ca.ca_zip)>{
                {std::string("zip"), ca.ca_zip}};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(Filtered{cs, c, ca, d});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct6{
                  __key, std::vector<Filtered>{Filtered{cs, c, ca, d}}});
            }
          }
        }
      }
    }
    std::vector<
        std::pair<decltype(std::declval<__struct6>().key.zip), __struct7>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {g.key.zip,
           __struct7{
               g.key.zip, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<Filtered>().cs_sales_price)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.cs_sales_price);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(filtered));
  // test TPCDS Q15 zip
  return 0;
}
