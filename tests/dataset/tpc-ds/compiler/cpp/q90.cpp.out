// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct WebSale {
  int ws_sold_time_sk;
  int ws_ship_hdemo_sk;
  int ws_web_page_sk;
};

int main() {
  vector<unordered_map<string, int>> web_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ws_sold_time_sk"), 1},
                                     {string("ws_ship_hdemo_sk"), 1},
                                     {string("ws_web_page_sk"), 10}},
          unordered_map<string, int>{{string("ws_sold_time_sk"), 1},
                                     {string("ws_ship_hdemo_sk"), 1},
                                     {string("ws_web_page_sk"), 10}},
          unordered_map<string, int>{{string("ws_sold_time_sk"), 2},
                                     {string("ws_ship_hdemo_sk"), 1},
                                     {string("ws_web_page_sk"), 10}}};
  vector<unordered_map<string, int>> household_demographics =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("hd_demo_sk"), 1}, {string("hd_dep_count"), 2}}};
  vector<unordered_map<string, int>> time_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("t_time_sk"), 1},
                                     {string("t_hour"), 7}},
          unordered_map<string, int>{{string("t_time_sk"), 2},
                                     {string("t_hour"), 14}}};
  vector<unordered_map<string, int>> web_page =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("wp_web_page_sk"), 10}, {string("wp_char_count"), 5100}}};
  auto amc = _count(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &ws : web_sales) {
      for (auto &hd : household_demographics) {
        if (!(ws["ws_ship_hdemo_sk"] == hd["hd_demo_sk"]))
          continue;
        for (auto &t : time_dim) {
          if (!(ws["ws_sold_time_sk"] == t["t_time_sk"]))
            continue;
          for (auto &wp : web_page) {
            if (!(ws["ws_web_page_sk"] == wp["wp_web_page_sk"]))
              continue;
            if (t["t_hour"] >= 7 && t["t_hour"] <= 8 &&
                hd["hd_dep_count"] == 2 && wp["wp_char_count"] >= 5000 &&
                wp["wp_char_count"] <= 5200) {
              _res.push_back(ws);
            }
          }
        }
      }
    }
    return _res;
  })());
  auto pmc = _count(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &ws : web_sales) {
      for (auto &hd : household_demographics) {
        if (!(ws["ws_ship_hdemo_sk"] == hd["hd_demo_sk"]))
          continue;
        for (auto &t : time_dim) {
          if (!(ws["ws_sold_time_sk"] == t["t_time_sk"]))
            continue;
          for (auto &wp : web_page) {
            if (!(ws["ws_web_page_sk"] == wp["wp_web_page_sk"]))
              continue;
            if (t["t_hour"] >= 14 && t["t_hour"] <= 15 &&
                hd["hd_dep_count"] == 2 && wp["wp_char_count"] >= 5000 &&
                wp["wp_char_count"] <= 5200) {
              _res.push_back(ws);
            }
          }
        }
      }
    }
    return _res;
  })());
  auto result = (_cast<double>(amc)) / (_cast<double>(pmc));
  _json(result);
  auto test_TPCDS_Q90_ratio = [&]() {
    if (!(result == 2.0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q90_ratio();
  return 0;
}
