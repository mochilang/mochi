// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebReturn {
  decltype(60) qty;
  decltype(20) cash;
  decltype(1) fee;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
inline void __json(const WebReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cash\":";
  __json(v.cash);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"fee\":";
  __json(v.fee);
  std::cout << "}";
}
int main() {
  std::vector<WebReturn> web_returns = {
      WebReturn{60, 20, 1}, WebReturn{100, 30, 2}, WebReturn{95, 25, 3}};
  auto result = __avg(([&]() {
    std::vector<decltype(r.qty)> __items;
    for (auto r : web_returns) {
      __items.push_back(r.qty);
    }
    return __items;
  })());
  (__json(result));
  // test TPCDS Q85 sample
  return 0;
}
