// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ss_ticket_number;
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_hdemo_sk;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2) d_dom;
  decltype(2000) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("A")) s_county;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(std::string(">10000")) hd_buy_potential;
  decltype(2) hd_vehicle_count;
  decltype(3) hd_dep_count;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("Smith")) c_last_name;
  decltype(std::string("John")) c_first_name;
  decltype(std::string("Mr.")) c_salutation;
  decltype(std::string("Y")) c_preferred_cust_flag;
};
struct Dn {
  decltype(ss.ss_ticket_number) ticket;
  decltype(ss.ss_customer_sk) cust;
};
struct __struct7 {
  decltype(ss) ss;
  decltype(d) d;
  decltype(s) s;
  decltype(hd) hd;
};
struct __struct8 {
  Dn key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key.ticket) ss_ticket_number;
  decltype(std::declval<__struct8>().key.cust) ss_customer_sk;
  int cnt;
};
struct Result {
  decltype(c.c_last_name) c_last_name;
  decltype(c.c_first_name) c_first_name;
  decltype(c.c_salutation) c_salutation;
  decltype(c.c_preferred_cust_flag) c_preferred_cust_flag;
  decltype(std::declval<__struct7>().ss_ticket_number) ss_ticket_number;
  decltype(std::declval<__struct7>().cnt) cnt;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_salutation\":";
  __json(v.c_salutation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_preferred_cust_flag\":";
  __json(v.c_preferred_cust_flag);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_salutation\":";
  __json(v.c_salutation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_preferred_cust_flag\":";
  __json(v.c_preferred_cust_flag);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt\":";
  __json(v.cnt);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_dom\":";
  __json(v.d_dom);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_buy_potential\":";
  __json(v.hd_buy_potential);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_vehicle_count\":";
  __json(v.hd_vehicle_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_county\":";
  __json(v.s_county);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cnt\":";
  __json(v.cnt);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  std::cout << "}";
}
inline void __json(const Dn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ticket\":";
  __json(v.ticket);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cust\":";
  __json(v.cust);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd\":";
  __json(v.hd);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{1, 1, 1, 1, 1}, StoreSale{1, 1, 1, 1, 1},
      StoreSale{2, 2, 1, 1, 2}, StoreSale{2, 2, 1, 1, 2},
      StoreSale{2, 2, 1, 1, 2}, StoreSale{2, 2, 1, 1, 2},
      StoreSale{2, 2, 1, 1, 2}, StoreSale{2, 2, 1, 1, 2},
      StoreSale{2, 2, 1, 1, 2}, StoreSale{2, 2, 1, 1, 2},
      StoreSale{2, 2, 1, 1, 2}, StoreSale{2, 2, 1, 1, 2}};
  std::vector<DateDim> date_dim = {DateDim{1, 2, 2000}};
  std::vector<Store> store = {Store{1, std::string("A")}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, std::string(">10000"), 2, 3},
      HouseholdDemographic{2, std::string(">10000"), 2, 1}};
  std::vector<Customer> customer = {
      Customer{1, std::string("Smith"), std::string("John"), std::string("Mr."),
               std::string("Y")},
      Customer{2, std::string("Jones"), std::string("Alice"),
               std::string("Ms."), std::string("N")}};
  std::vector<__struct7> dn = ([&]() {
    std::vector<__struct8> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
          continue;
        for (auto s : store) {
          if (!((ss.ss_store_sk == s.s_store_sk)))
            continue;
          for (auto hd : household_demographics) {
            if (!((ss.ss_hdemo_sk == hd.hd_demo_sk)))
              continue;
            if (!(((((((((d.d_dom >= 1) && (d.d_dom <= 3))) &&
                       (hd.hd_buy_potential == std::string(">10000"))) &&
                      (hd.hd_vehicle_count > 0)) &&
                     (((hd.hd_dep_count / hd.hd_vehicle_count)) > 1.2)) &&
                    (d.d_year == 2000)) &&
                   (s.s_county == std::string("A")))))
              continue;
            auto __key = Dn{ss.ss_ticket_number, ss.ss_customer_sk};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct7{ss, d, s, hd});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct8{
                  __key, std::vector<__struct7>{__struct7{ss, d, s, hd}}});
            }
          }
        }
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(
          __struct9{g.key.ticket, g.key.cust, ((int)g.items.size())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(c.c_last_name), Result>> __items;
    for (auto dn1 : dn) {
      for (auto c : customer) {
        if (!((dn1.ss_customer_sk == c.c_customer_sk)))
          continue;
        if (!(((dn1.cnt >= 15) && (dn1.cnt <= 20))))
          continue;
        __items.push_back(
            {c.c_last_name,
             Result{c.c_last_name, c.c_first_name, c.c_salutation,
                    c.c_preferred_cust_flag, dn1.ss_ticket_number, dn1.cnt}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q34 simplified
  return 0;
}
