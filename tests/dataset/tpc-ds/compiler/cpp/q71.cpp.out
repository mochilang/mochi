// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_brand_id"), any(10)},
                                 {string("i_brand"), any(string("BrandA"))},
                                 {string("i_manager_id"), any(1)}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_brand_id"), any(20)},
                                 {string("i_brand"), any(string("BrandB"))},
                                 {string("i_manager_id"), any(1)}}};
  vector<unordered_map<string, any>> time_dim =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("t_time_sk"), any(1)},
              {string("t_hour"), any(8)},
              {string("t_minute"), any(30)},
              {string("t_meal_time"), any(string("breakfast"))}},
          unordered_map<string, any>{
              {string("t_time_sk"), any(2)},
              {string("t_hour"), any(18)},
              {string("t_minute"), any(0)},
              {string("t_meal_time"), any(string("dinner"))}},
          unordered_map<string, any>{
              {string("t_time_sk"), any(3)},
              {string("t_hour"), any(12)},
              {string("t_minute"), any(0)},
              {string("t_meal_time"), any(string("lunch"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_moy"), 12},
                                     {string("d_year"), 1998}}};
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_ext_sales_price"), any(100.0)},
                                     {string("ws_sold_date_sk"), any(1)},
                                     {string("ws_item_sk"), any(1)},
                                     {string("ws_sold_time_sk"), any(1)}}};
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_ext_sales_price"), any(200.0)},
                                     {string("cs_sold_date_sk"), any(1)},
                                     {string("cs_item_sk"), any(1)},
                                     {string("cs_sold_time_sk"), any(2)}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_ext_sales_price"), any(150.0)},
                                     {string("ss_sold_date_sk"), any(1)},
                                     {string("ss_item_sk"), any(2)},
                                     {string("ss_sold_time_sk"), any(1)}}};
  int month = 12;
  int year = 1998;
  auto union_sales = _concat(
      _concat(
          ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
            vector<unordered_map<string, unordered_map<string, any>>> _res;
            for (auto &ws : web_sales) {
              for (auto &d : date_dim) {
                if (!(d["d_date_sk"] == ws["ws_sold_date_sk"]))
                  continue;
                if (d["d_moy"] == month && d["d_year"] == year) {
                  _res.push_back(
                      unordered_map<string, unordered_map<string, any>>{
                          {string("ext_price"), ws["ws_ext_sales_price"]},
                          {string("item_sk"), ws["ws_item_sk"]},
                          {string("time_sk"), ws["ws_sold_time_sk"]}});
                }
              }
            }
            return _res;
          })(),
          ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
            vector<unordered_map<string, unordered_map<string, any>>> _res;
            for (auto &cs : catalog_sales) {
              for (auto &d : date_dim) {
                if (!(d["d_date_sk"] == cs["cs_sold_date_sk"]))
                  continue;
                if (d["d_moy"] == month && d["d_year"] == year) {
                  _res.push_back(
                      unordered_map<string, unordered_map<string, any>>{
                          {string("ext_price"), cs["cs_ext_sales_price"]},
                          {string("item_sk"), cs["cs_item_sk"]},
                          {string("time_sk"), cs["cs_sold_time_sk"]}});
                }
              }
            }
            return _res;
          })()),
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        for (auto &ss : store_sales) {
          for (auto &d : date_dim) {
            if (!(d["d_date_sk"] == ss["ss_sold_date_sk"]))
              continue;
            if (d["d_moy"] == month && d["d_year"] == year) {
              _res.push_back(unordered_map<string, unordered_map<string, any>>{
                  {string("ext_price"), ss["ss_ext_sales_price"]},
                  {string("item_sk"), ss["ss_item_sk"]},
                  {string("time_sk"), ss["ss_sold_time_sk"]}});
            }
          }
        }
        return _res;
      })());
  struct GroupKey0 {
    unordered_map<string, any> brand_id;
    unordered_map<string, any> brand;
    unordered_map<string, any> t_hour;
    unordered_map<string, any> t_minute;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.brand_id == b.brand_id && a.brand == b.brand &&
           a.t_hour == b.t_hour && a.t_minute == b.t_minute;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.brand_id);
      _hash_combine(h, k.brand);
      _hash_combine(h, k.t_hour);
      _hash_combine(h, k.t_minute);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &i : item) {
      for (auto &s : union_sales) {
        if (!(_cast<unordered_map<string, any>>(s)["item_sk"] ==
              i["i_item_sk"]))
          continue;
        for (auto &t : time_dim) {
          if (!(t["t_time_sk"] ==
                _cast<unordered_map<string, any>>(s)["time_sk"]))
            continue;
          if (i["i_manager_id"] == 1 &&
              (t["t_meal_time"] == string("breakfast") ||
               t["t_meal_time"] == string("dinner"))) {
            KeyT _k = GroupKey0{i["i_brand_id"], i["i_brand"], t["t_hour"],
                                t["t_minute"]};
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(i);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<vector<any>, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({vector<int>{-_sum(([&]() -> vector<any> {
                                    vector<any> _res;
                                    for (auto &x : g) {
                                      _res.push_back(x.s.ext_price);
                                    }
                                    return _res;
                                  })()),
                                  g.key.brand_id},
                      g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_brand_id"), any(g.key.brand_id)},
          {string("i_brand"), any(g.key.brand)},
          {string("t_hour"), any(g.key.t_hour)},
          {string("t_minute"), any(g.key.t_minute)},
          {string("ext_price"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.s.ext_price);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q71_simplified = [&]() {
    if (!(result == vector<unordered_map<string, any>>{
                        unordered_map<string, any>{
                            {string("i_brand_id"), any(10)},
                            {string("i_brand"), any(string("BrandA"))},
                            {string("t_hour"), any(18)},
                            {string("t_minute"), any(0)},
                            {string("ext_price"), any(200.0)}},
                        unordered_map<string, any>{
                            {string("i_brand_id"), any(20)},
                            {string("i_brand"), any(string("BrandB"))},
                            {string("t_hour"), any(8)},
                            {string("t_minute"), any(30)},
                            {string("ext_price"), any(150.0)}},
                        unordered_map<string, any>{
                            {string("i_brand_id"), any(10)},
                            {string("i_brand"), any(string("BrandA"))},
                            {string("t_hour"), any(8)},
                            {string("t_minute"), any(30)},
                            {string("ext_price"), any(100.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q71_simplified();
  return 0;
}
