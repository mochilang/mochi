// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  decltype(1) order;
  decltype(1) item_sk;
  decltype(1) warehouse_sk;
  decltype(1) date_sk;
  decltype(100) price;
};
struct CatalogReturn {
  decltype(2) order;
  decltype(1) item_sk;
  decltype(150) refunded;
};
struct Item {
  decltype(1) item_sk;
  decltype(std::string("I1")) item_id;
  decltype(1.2) current_price;
};
struct Warehouse {
  decltype(1) warehouse_sk;
  decltype(std::string("CA")) state;
};
struct DateDim {
  decltype(1) date_sk;
  decltype(std::string("2020-01-10")) date;
};
struct Record {
  decltype(w.state) w_state;
  decltype(i.item_id) i_item_id;
  decltype(d.date) sold_date;
  bool net;
};
struct Result {
  decltype(std::declval<Record>().w_state) w_state;
  decltype(std::declval<Record>().i_item_id) i_item_id;
};
struct __struct8 {
  Result key;
  std::vector<Record> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key.w_state) w_state;
  decltype(std::declval<__struct8>().key.i_item_id) i_item_id;
  double sales_before;
  double sales_after;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date_sk\":";
  __json(v.date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"current_price\":";
  __json(v.current_price);
  std::cout << "}";
}
inline void __json(const CatalogReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"order\":";
  __json(v.order);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"refunded\":";
  __json(v.refunded);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"order\":";
  __json(v.order);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"warehouse_sk\":";
  __json(v.warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date_sk\":";
  __json(v.date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_state\":";
  __json(v.w_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_state\":";
  __json(v.w_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_before\":";
  __json(v.sales_before);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_after\":";
  __json(v.sales_after);
  std::cout << "}";
}
inline void __json(const Record &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"w_state\":";
  __json(v.w_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date\":";
  __json(v.sold_date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"net\":";
  __json(v.net);
  std::cout << "}";
}
inline void __json(const Warehouse &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"warehouse_sk\":";
  __json(v.warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1, 1, 1, 100},
                                            CatalogSale{2, 1, 1, 2, 150}};
  std::vector<CatalogReturn> catalog_returns = {CatalogReturn{2, 1, 150}};
  std::vector<Item> item = {Item{1, std::string("I1"), 1.2}};
  std::vector<Warehouse> warehouse = {Warehouse{1, std::string("CA")}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2020-01-10")},
                                   DateDim{2, std::string("2020-01-20")}};
  auto sales_date = std::string("2020-01-15");
  std::vector<Record> records = ([&]() {
    std::vector<Record> __items;
    for (auto cs : catalog_sales) {
      {
        bool __matched0 = false;
        for (auto cr : catalog_returns) {
          if (!(((cs.order == cr.order) && (cs.item_sk == cr.item_sk))))
            continue;
          __matched0 = true;
          for (auto w : warehouse) {
            if (!((cs.warehouse_sk == w.warehouse_sk)))
              continue;
            for (auto i : item) {
              if (!((cs.item_sk == i.item_sk)))
                continue;
              for (auto d : date_dim) {
                if (!((cs.date_sk == d.date_sk)))
                  continue;
                if (!(((i.current_price >= 0.99) && (i.current_price <= 1.49))))
                  continue;
                __items.push_back(
                    Record{w.state, i.item_id, d.date,
                           (cs.price - (((cr == nullptr) ? 0 : cr.refunded)))});
              }
            }
          }
        }
        if (!__matched0) {
          auto cr = std::decay_t<decltype(*(catalog_returns).begin())>{};
          for (auto w : warehouse) {
            if (!((cs.warehouse_sk == w.warehouse_sk)))
              continue;
            for (auto i : item) {
              if (!((cs.item_sk == i.item_sk)))
                continue;
              for (auto d : date_dim) {
                if (!((cs.date_sk == d.date_sk)))
                  continue;
                if (!(((i.current_price >= 0.99) && (i.current_price <= 1.49))))
                  continue;
                __items.push_back(
                    Record{w.state, i.item_id, d.date,
                           (cs.price - (((cr == nullptr) ? 0 : cr.refunded)))});
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Record> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto r : records) {
      auto __key = Result{r.w_state, r.i_item_id};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Record{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct8{__key, std::vector<Record>{Record{r}}});
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{
          g.key.w_state, g.key.i_item_id, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((
                (std::declval<Record>().sold_date < sales_date)
                    ? std::declval<Record>().net
                    : 0))>
                __items;
            for (auto x : g.items) {
              __items.push_back(((x.sold_date < sales_date) ? x.net : 0));
            }
            return __items;
          })()),
          ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
              ([&]() {
                std::vector<decltype((
                    (std::declval<Record>().sold_date >= sales_date)
                        ? std::declval<Record>().net
                        : 0))>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(((x.sold_date >= sales_date) ? x.net : 0));
                }
                return __items;
              })())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q40 simplified
  return 0;
}
