// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:29Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_item_sk;
  float ss_list_price;
  int ss_quantity;
  int ss_sold_date_sk;
};
struct CatalogSale {
  int cs_item_sk;
  float cs_list_price;
  int cs_quantity;
  int cs_sold_date_sk;
};
struct WebSale {
  int ws_item_sk;
  float ws_list_price;
  int ws_quantity;
  int ws_sold_date_sk;
};
struct Item {
  int i_item_sk;
  int i_brand_id;
  int i_class_id;
  int i_category_id;
};
struct DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
};
struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(10) ss_list_price;
  decltype(2) ss_quantity;
  decltype(1) ss_sold_date_sk;
};
struct CatalogSale {
  decltype(1) cs_item_sk;
  decltype(10) cs_list_price;
  decltype(2) cs_quantity;
  decltype(1) cs_sold_date_sk;
};
struct WebSale {
  decltype(1) ws_item_sk;
  decltype(30) ws_list_price;
  decltype(1) ws_quantity;
  decltype(1) ws_sold_date_sk;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_brand_id;
  decltype(1) i_class_id;
  decltype(1) i_category_id;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
  decltype(12) d_moy;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct StoreFiltered {
  decltype(1) brand_id;
  decltype(1) class_id;
  decltype(1) category_id;
};
struct __struct7 {
  decltype(ss) ss;
  decltype(d) d;
};
struct __struct8 {
  StoreFiltered key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::string("store")) channel;
  double sales;
  int number_sales;
};
struct Result {
  decltype(std::declval<__struct9>().channel) channel;
  decltype(1) i_brand_id;
  decltype(1) i_class_id;
  decltype(1) i_category_id;
  decltype(std::declval<__struct9>().sales) sales;
  decltype(std::declval<__struct9>().number_sales) number_sales;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_list_price\":";
  __json(v.cs_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class_id\":";
  __json(v.i_class_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_list_price\":";
  __json(v.ws_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_quantity\":";
  __json(v.ws_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  std::cout << "}";
}
inline void __json(const StoreFiltered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class_id\":";
  __json(v.class_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"category_id\":";
  __json(v.category_id);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class_id\":";
  __json(v.i_class_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"number_sales\":";
  __json(v.number_sales);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"number_sales\":";
  __json(v.number_sales);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_list_price\":";
  __json(v.cs_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class_id\":";
  __json(v.i_class_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category_id\":";
  __json(v.i_category_id);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_list_price\":";
  __json(v.ws_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_quantity\":";
  __json(v.ws_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 10, 2, 1},
                                        StoreSale{1, 20, 3, 2}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 10, 2, 1}};
  std::vector<WebSale> web_sales = {WebSale{1, 30, 1, 1}};
  std::vector<Item> item = {Item{1, 1, 1, 1}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000, 12}, DateDim{2, 2002, 11}};
  std::vector<std::string> cross_items =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("ss_item_sk"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("ss_item_sk"), 1}}};
  auto avg_sales = __avg(std::vector<int>{20, 20, 30});
  std::vector<__struct9> store_filtered = ([&]() {
    std::vector<__struct8> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2002)) &&
               (d.d_moy == 11))))
          continue;
        if (!((std::find((([&]() {
                           std::vector<decltype(ci.ss_item_sk)> __items;
                           for (auto ci : cross_items) {
                             __items.push_back(ci.ss_item_sk);
                           }
                           return __items;
                         })())
                             .begin(),
                         (([&]() {
                           std::vector<decltype(ci.ss_item_sk)> __items;
                           for (auto ci : cross_items) {
                             __items.push_back(ci.ss_item_sk);
                           }
                           return __items;
                         })())
                             .end(),
                         ss.ss_item_sk) !=
               (([&]() {
                 std::vector<decltype(ci.ss_item_sk)> __items;
                 for (auto ci : cross_items) {
                   __items.push_back(ci.ss_item_sk);
                 }
                 return __items;
               })())
                   .end())))
          continue;
        auto __key = StoreFiltered{1, 1, 1};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct7{ss, d});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct8{__key, std::vector<__struct7>{__struct7{ss, d}}});
        }
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{
          std::string("store"), ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((std::declval<__struct7>().ss_quantity *
                                  std::declval<__struct7>().ss_list_price))>
                __items;
            for (auto x : g.items) {
              __items.push_back((x.ss_quantity * x.ss_list_price));
            }
            return __items;
          })()),
          ((int)([&]() {
             std::vector<__struct7> __items;
             for (auto _ : g.items) {
               __items.push_back(_);
             }
             return __items;
           })()
               .size())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto r : store_filtered) {
      if (!((r.sales > avg_sales)))
        continue;
      __items.push_back(Result{r.channel, 1, 1, 1, r.sales, r.number_sales});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q14 cross channel
  return 0;
}
