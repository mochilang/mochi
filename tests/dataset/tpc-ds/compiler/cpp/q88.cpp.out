// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct TimeDim {
  decltype(1) time_sk;
  decltype(8) hour;
  decltype(30) minute;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(1) hd_dep_count;
  decltype(1) hd_vehicle_count;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("ese")) s_store_name;
};
struct StoreSale {
  decltype(1) sold_time_sk;
  decltype(1) hdemo_sk;
  decltype(1) store_sk;
  decltype(10) qty;
};
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_vehicle_count\":";
  __json(v.hd_vehicle_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_time_sk\":";
  __json(v.sold_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hdemo_sk\":";
  __json(v.hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_sk\":";
  __json(v.store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  std::cout << "}";
}
inline void __json(const TimeDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"time_sk\":";
  __json(v.time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hour\":";
  __json(v.hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"minute\":";
  __json(v.minute);
  std::cout << "}";
}
std::vector<TimeDim> time_dim = {TimeDim{1, 8, 30},  TimeDim{2, 9, 0},
                                 TimeDim{3, 9, 30},  TimeDim{4, 10, 0},
                                 TimeDim{5, 10, 30}, TimeDim{6, 11, 0},
                                 TimeDim{7, 11, 30}, TimeDim{8, 12, 0}};
std::vector<HouseholdDemographic> household_demographics = {
    HouseholdDemographic{1, 1, 1}};
std::vector<Store> store = {Store{1, std::string("ese")}};
std::vector<StoreSale> store_sales = {
    StoreSale{1, 1, 1, 10}, StoreSale{2, 1, 1, 12}, StoreSale{3, 1, 1, 14},
    StoreSale{4, 1, 1, 11}, StoreSale{5, 1, 1, 8},  StoreSale{6, 1, 1, 9},
    StoreSale{7, 1, 1, 10}, StoreSale{8, 1, 1, 14}};

float count_range(auto ssales, auto tdim, int hour, int start_min,
                  int end_min) {
  auto total = 0;
  for (auto ss : ssales) {
    for (auto t : tdim) {
      if (((((ss.sold_time_sk == t.time_sk) && (t.hour == hour)) &&
            (t.minute >= start_min)) &&
           (t.minute < end_min))) {
        total = (total + ss.qty);
      }
    }
  }
  return total;
}

int main() {
  auto h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60);
  auto h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30);
  auto h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60);
  auto h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30);
  auto h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60);
  auto h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30);
  auto h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60);
  auto h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30);
  auto result = (((((((h8_30_to_9 + h9_to_9_30) + h9_30_to_10) + h10_to_10_30) +
                    h10_30_to_11) +
                   h11_to_11_30) +
                  h11_30_to_12) +
                 h12_to_12_30);
  (__json(result));
  // test TPCDS Q88 sample
  return 0;
}
