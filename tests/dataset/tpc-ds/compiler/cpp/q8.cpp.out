// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ss_store_sk;
  decltype(1) ss_sold_date_sk;
  decltype(10) ss_net_profit;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_qoy;
  decltype(1998) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("Store1")) s_store_name;
  decltype(std::string("12345")) s_zip;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("12345")) ca_zip;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
  decltype(std::string("Y")) c_preferred_cust_flag;
};
struct Result {
  decltype(ss) ss;
  decltype(d) d;
  decltype(s) s;
  decltype(ca) ca;
  decltype(c) c;
};
struct __struct7 {
  decltype(s.s_store_name) key;
  std::vector<Result> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key) s_store_name;
  double net_profit;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_preferred_cust_flag\":";
  __json(v.c_preferred_cust_flag);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"net_profit\":";
  __json(v.net_profit);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 10}};
  std::vector<DateDim> date_dim = {DateDim{1, 1, 1998}};
  std::vector<Store> store = {
      Store{1, std::string("Store1"), std::string("12345")}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("12345")}};
  std::vector<Customer> customer = {Customer{1, 1, std::string("Y")}};
  reverse(substr(std::string("zip"), 0, 2));
  std::vector<std::string> zip_list = {std::string("12345")};
  std::vector<Result> result = ([&]() {
    std::vector<__struct7> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_qoy == 1)) &&
               (d.d_year == 1998))))
          continue;
        for (auto s : store) {
          if (!((ss.ss_store_sk == s.s_store_sk)))
            continue;
          for (auto ca : customer_address) {
            if (!((substr(s.s_zip, 0, 2) == substr(ca.ca_zip, 0, 2))))
              continue;
            for (auto c : customer) {
              if (!(((ca.ca_address_sk == c.c_current_addr_sk) &&
                     (c.c_preferred_cust_flag == std::string("Y")))))
                continue;
              if (!((std::find(zip_list.begin(), zip_list.end(),
                               substr(ca.ca_zip, 0, 5)) != zip_list.end())))
                continue;
              auto __key = s.s_store_name;
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(Result{ss, d, s, ca, c});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct7{
                    __key, std::vector<Result>{Result{ss, d, s, ca, c}}});
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<decltype(std::declval<__struct7>().key), __struct8>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {g.key,
           __struct8{
               g.key, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<Result>().ss.ss_net_profit)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.ss.ss_net_profit);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct8> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q8 result
  return 0;
}
