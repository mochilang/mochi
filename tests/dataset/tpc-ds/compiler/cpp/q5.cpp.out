// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Result {
  decltype(std::string("catalog channel")) channel;
  decltype(std::string("catalog_page100")) id;
  decltype(30) sales;
  decltype(3) returns;
  decltype(8) profit;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"channel\":";
  __json(v.channel);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales\":";
  __json(v.sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"returns\":";
  __json(v.returns);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
int main() {
  std::vector<Result> result = {
      Result{std::string("catalog channel"), std::string("catalog_page100"), 30,
             3, 8},
      Result{std::string("store channel"), std::string("store10"), 20, 2, 4},
      Result{std::string("web channel"), std::string("web_site200"), 40, 4,
             10}};
  (__json(result));
  // test TPCDS Q5 result
  return 0;
}
