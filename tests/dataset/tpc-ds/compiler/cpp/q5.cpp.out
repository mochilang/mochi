// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

template <typename T>
vector<T> _union_all(const vector<T> &a, const vector<T> &b) {
  vector<T> res = a;
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<any> store_sales = vector<any>{};
  vector<any> store_returns = vector<any>{};
  vector<any> store = vector<any>{};
  vector<any> catalog_sales = vector<any>{};
  vector<any> catalog_returns = vector<any>{};
  vector<any> catalog_page = vector<any>{};
  vector<any> web_sales = vector<any>{};
  vector<any> web_returns = vector<any>{};
  vector<any> web_site = vector<any>{};
  vector<any> date_dim = vector<any>{};
  auto ss = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ss : store_sales) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(ss)["ss_sold_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        for (auto &s : store) {
          if (!(_cast<unordered_map<string, any>>(ss)["ss_store_sk"] ==
                _cast<unordered_map<string, any>>(s)["s_store_sk"]))
            continue;
          if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                  string("1998-12-01") &&
              _cast<unordered_map<string, any>>(d)["d_date"] <=
                  string("1998-12-15")) {
            KeyT _k = _cast<unordered_map<string, any>>(s)["s_store_id"];
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(ss);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("store channel"))},
          {string("id"), any(string("store") + to_string(to_string(g.key)))},
          {string("sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_ext_sales_price);
             }
             return _res;
           })()))},
          {string("returns"), any(0.0)},
          {string("profit"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_net_profit);
             }
             return _res;
           })()))},
          {string("profit_loss"), any(0.0)}});
    }
    return _res;
  })();
  auto sr = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &sr : store_returns) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(sr)["sr_returned_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        for (auto &s : store) {
          if (!(_cast<unordered_map<string, any>>(sr)["sr_store_sk"] ==
                _cast<unordered_map<string, any>>(s)["s_store_sk"]))
            continue;
          if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                  string("1998-12-01") &&
              _cast<unordered_map<string, any>>(d)["d_date"] <=
                  string("1998-12-15")) {
            KeyT _k = _cast<unordered_map<string, any>>(s)["s_store_id"];
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(sr);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("store channel"))},
          {string("id"), any(string("store") + to_string(to_string(g.key)))},
          {string("sales"), any(0.0)},
          {string("returns"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.sr.sr_return_amt);
             }
             return _res;
           })()))},
          {string("profit"), any(0.0)},
          {string("profit_loss"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.sr.sr_net_loss);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto cs = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cs : catalog_sales) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(cs)["cs_sold_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        for (auto &cp : catalog_page) {
          if (!(_cast<unordered_map<string, any>>(cs)["cs_catalog_page_sk"] ==
                _cast<unordered_map<string, any>>(cp)["cp_catalog_page_sk"]))
            continue;
          if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                  string("1998-12-01") &&
              _cast<unordered_map<string, any>>(d)["d_date"] <=
                  string("1998-12-15")) {
            KeyT _k =
                _cast<unordered_map<string, any>>(cp)["cp_catalog_page_id"];
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(cs);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("catalog channel"))},
          {string("id"),
           any(string("catalog_page") + to_string(to_string(g.key)))},
          {string("sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.cs.cs_ext_sales_price);
             }
             return _res;
           })()))},
          {string("returns"), any(0.0)},
          {string("profit"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.cs.cs_net_profit);
             }
             return _res;
           })()))},
          {string("profit_loss"), any(0.0)}});
    }
    return _res;
  })();
  auto cr = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &cr : catalog_returns) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(cr)["cr_returned_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        for (auto &cp : catalog_page) {
          if (!(_cast<unordered_map<string, any>>(cr)["cr_catalog_page_sk"] ==
                _cast<unordered_map<string, any>>(cp)["cp_catalog_page_sk"]))
            continue;
          if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                  string("1998-12-01") &&
              _cast<unordered_map<string, any>>(d)["d_date"] <=
                  string("1998-12-15")) {
            KeyT _k =
                _cast<unordered_map<string, any>>(cp)["cp_catalog_page_id"];
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(cr);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("catalog channel"))},
          {string("id"),
           any(string("catalog_page") + to_string(to_string(g.key)))},
          {string("sales"), any(0.0)},
          {string("returns"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.cr.cr_return_amount);
             }
             return _res;
           })()))},
          {string("profit"), any(0.0)},
          {string("profit_loss"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.cr.cr_net_loss);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto ws = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ws : web_sales) {
      for (auto &d : date_dim) {
        if (!(_cast<unordered_map<string, any>>(ws)["ws_sold_date_sk"] ==
              _cast<unordered_map<string, any>>(d)["d_date_sk"]))
          continue;
        for (auto &w : web_site) {
          if (!(_cast<unordered_map<string, any>>(ws)["ws_web_site_sk"] ==
                _cast<unordered_map<string, any>>(w)["web_site_sk"]))
            continue;
          if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                  string("1998-12-01") &&
              _cast<unordered_map<string, any>>(d)["d_date"] <=
                  string("1998-12-15")) {
            KeyT _k = _cast<unordered_map<string, any>>(w)["web_site_id"];
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(ws);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("web channel"))},
          {string("id"), any(string("web_site") + to_string(to_string(g.key)))},
          {string("sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ws.ws_ext_sales_price);
             }
             return _res;
           })()))},
          {string("returns"), any(0.0)},
          {string("profit"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ws.ws_net_profit);
             }
             return _res;
           })()))},
          {string("profit_loss"), any(0.0)}});
    }
    return _res;
  })();
  auto wr = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = any;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &wr : web_returns) {
      for (auto &ws : web_sales) {
        if (!(_cast<unordered_map<string, any>>(wr)["wr_item_sk"] ==
                  _cast<unordered_map<string, any>>(ws)["ws_item_sk"] &&
              _cast<unordered_map<string, any>>(wr)["wr_order_number"] ==
                  _cast<unordered_map<string, any>>(ws)["ws_order_number"]))
          continue;
        for (auto &d : date_dim) {
          if (!(_cast<unordered_map<string, any>>(wr)["wr_returned_date_sk"] ==
                _cast<unordered_map<string, any>>(d)["d_date_sk"]))
            continue;
          for (auto &w : web_site) {
            if (!(_cast<unordered_map<string, any>>(ws)["ws_web_site_sk"] ==
                  _cast<unordered_map<string, any>>(w)["web_site_sk"]))
              continue;
            if (_cast<unordered_map<string, any>>(d)["d_date"] >=
                    string("1998-12-01") &&
                _cast<unordered_map<string, any>>(d)["d_date"] <=
                    string("1998-12-15")) {
              KeyT _k = _cast<unordered_map<string, any>>(w)["web_site_id"];
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(wr);
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(string("web channel"))},
          {string("id"), any(string("web_site") + to_string(to_string(g.key)))},
          {string("sales"), any(0.0)},
          {string("returns"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.wr.wr_return_amt);
             }
             return _res;
           })()))},
          {string("profit"), any(0.0)},
          {string("profit_loss"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.wr.wr_net_loss);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto per_channel = _concat(_concat(_union_all(ss, sr), _union_all(cs, cr)),
                             _union_all(ws, wr));
  struct GroupKey0 {
    any channel;
    any id;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.channel == b.channel && a.id == b.id;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.channel);
      _hash_combine(h, k.id);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = any;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &p : per_channel) {
      KeyT _k = GroupKey0{_cast<unordered_map<string, any>>(p)["channel"],
                          _cast<unordered_map<string, any>>(p)["id"]};
      if (!groups.count(_k)) {
        groups[_k] = Group{_k, {}};
        order.push_back(_k);
      }
      groups[_k].Items.push_back(p);
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<Group *, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({g.key.channel, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("channel"), any(g.key.channel)},
          {string("id"), any(g.key.id)},
          {string("sales"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.p.sales);
             }
             return _res;
           })()))},
          {string("returns"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.p.returns);
             }
             return _res;
           })()))},
          {string("profit"), any(_sum(([&]() -> vector<any> {
                                   vector<any> _res;
                                   for (auto &x : g) {
                                     _res.push_back(x.p.profit);
                                   }
                                   return _res;
                                 })()) -
                                 _sum(([&]() -> vector<any> {
                                   vector<any> _res;
                                   for (auto &x : g) {
                                     _res.push_back(x.p.profit_loss);
                                   }
                                   return _res;
                                 })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q5_empty = [&]() {
    if (!(result.size() == 0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q5_empty();
  return 0;
}
