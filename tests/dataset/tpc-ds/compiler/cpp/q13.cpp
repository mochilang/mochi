// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_store_sk;
  int ss_sold_date_sk;
  int ss_hdemo_sk;
  int ss_cdemo_sk;
  int ss_addr_sk;
  float ss_sales_price;
  float ss_net_profit;
  int ss_quantity;
  float ss_ext_sales_price;
  float ss_ext_wholesale_cost;
};
struct Store {
  int s_store_sk;
  std::string s_state;
};
struct CustomerDemographics {
  int cd_demo_sk;
  std::string cd_marital_status;
  std::string cd_education_status;
};
struct HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_country;
  std::string ca_state;
};
struct DateDim {
  int d_date_sk;
  int d_year;
};
struct StoreSale {
  decltype(1) ss_store_sk;
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_hdemo_sk;
  decltype(1) ss_cdemo_sk;
  decltype(1) ss_addr_sk;
  decltype(120) ss_sales_price;
  decltype(150) ss_net_profit;
  decltype(10) ss_quantity;
  decltype(100) ss_ext_sales_price;
  decltype(50) ss_ext_wholesale_cost;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CA")) s_state;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("M1")) cd_marital_status;
  decltype(std::string("ES1")) cd_education_status;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(3) hd_dep_count;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("United States")) ca_country;
  decltype(std::string("CA")) ca_state;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2001) d_year;
};
struct Result {
  decltype(r) r;
};
struct __struct8 {
  decltype(std::unordered_map<int, int>{}) key;
  std::vector<Result> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct9 {
  double avg_ss_quantity;
  double avg_ss_ext_sales_price;
  double avg_ss_ext_wholesale_cost;
  double sum_ss_ext_wholesale_cost;
};
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const CustomerDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_cdemo_sk\":";
  __json(v.ss_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_addr_sk\":";
  __json(v.ss_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_wholesale_cost\":";
  __json(v.ss_ext_wholesale_cost);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_ss_quantity\":";
  __json(v.avg_ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_ss_ext_sales_price\":";
  __json(v.avg_ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_ss_ext_wholesale_cost\":";
  __json(v.avg_ss_ext_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_ss_ext_wholesale_cost\":";
  __json(v.sum_ss_ext_wholesale_cost);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_cdemo_sk\":";
  __json(v.ss_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_addr_sk\":";
  __json(v.ss_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_wholesale_cost\":";
  __json(v.ss_ext_wholesale_cost);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r\":";
  __json(v.r);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 1, 1, 1, 1, 120, 150, 10, 100, 50}};
  std::vector<Store> store = {Store{1, std::string("CA")}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("M1"), std::string("ES1")}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 3}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("United States"), std::string("CA")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2001}};
  auto filtered = ([&]() {
    std::vector<decltype(ss)> __items;
    for (auto ss : store_sales) {
      for (auto s : store) {
        if (!((ss.ss_store_sk == s.s_store_sk)))
          continue;
        for (auto cd : customer_demographics) {
          if (!((((ss.ss_cdemo_sk == cd.cd_demo_sk) &&
                  (cd.cd_marital_status == std::string("M1"))) &&
                 (cd.cd_education_status == std::string("ES1")))))
            continue;
          for (auto hd : household_demographics) {
            if (!(((ss.ss_hdemo_sk == hd.hd_demo_sk) &&
                   (hd.hd_dep_count == 3))))
              continue;
            for (auto ca : customer_address) {
              if (!((((ss.ss_addr_sk == ca.ca_address_sk) &&
                      (ca.ca_country == std::string("United States"))) &&
                     (ca.ca_state == std::string("CA")))))
                continue;
              for (auto d : date_dim) {
                if (!(((ss.ss_sold_date_sk == d.d_date_sk) &&
                       (d.d_year == 2001))))
                  continue;
                __items.push_back(ss);
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto r : filtered) {
      auto __key = std::unordered_map<int, int>{};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Result{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct8{__key, std::vector<Result>{Result{r}}});
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{
          __avg(([&]() {
            std::vector<decltype(std::declval<Result>().ss_quantity)> __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_quantity);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Result>().ss_ext_sales_price)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_ext_sales_price);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Result>().ss_ext_wholesale_cost)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_ext_wholesale_cost);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Result>().ss_ext_wholesale_cost)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_ext_wholesale_cost);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q13 averages
  return 0;
}
