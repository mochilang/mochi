// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("I1")) i_item_id;
  decltype(std::string("Item1")) i_item_desc;
  decltype(30) i_current_price;
  decltype(800) i_manufact_id;
};
struct Inventory {
  decltype(1) inv_item_sk;
  decltype(1) inv_warehouse_sk;
  decltype(1) inv_date_sk;
  decltype(200) inv_quantity_on_hand;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-01-15")) d_date;
};
struct CatalogSale {
  decltype(1) cs_item_sk;
  decltype(1) cs_sold_date_sk;
};
struct Result {
  decltype(i.i_item_id) id;
  decltype(i.i_item_desc) desc;
  decltype(i.i_current_price) price;
};
struct __struct6 {
  decltype(i) i;
  decltype(inv) inv;
  decltype(d) d;
  decltype(cs) cs;
};
struct __struct7 {
  Result key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.id) i_item_id;
  decltype(std::declval<__struct7>().key.desc) i_item_desc;
  decltype(std::declval<__struct7>().key.price) i_current_price;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_desc\":";
  __json(v.i_item_desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"desc\":";
  __json(v.desc);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_warehouse_sk\":";
  __json(v.inv_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv\":";
  __json(v.inv);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  std::cout << "}";
}
int main() {
  std::vector<Item> item = {
      Item{1, std::string("I1"), std::string("Item1"), 30, 800},
      Item{2, std::string("I2"), std::string("Item2"), 60, 801}};
  std::vector<Inventory> inventory = {Inventory{1, 1, 1, 200},
                                      Inventory{2, 1, 1, 300}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-01-15")}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1}};
  std::vector<__struct6> result = ([&]() {
    std::vector<__struct7> __groups;
    for (auto i : item) {
      for (auto inv : inventory) {
        if (!((i.i_item_sk == inv.inv_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((inv.inv_date_sk == d.d_date_sk)))
            continue;
          for (auto cs : catalog_sales) {
            if (!((cs.cs_item_sk == i.i_item_sk)))
              continue;
            if (!(((((((i.i_current_price >= 20) &&
                       (i.i_current_price <= 50)) &&
                      (i.i_manufact_id >= 800)) &&
                     (i.i_manufact_id <= 803)) &&
                    (inv.inv_quantity_on_hand >= 100)) &&
                   (inv.inv_quantity_on_hand <= 500))))
              continue;
            auto __key = Result{i.i_item_id, i.i_item_desc, i.i_current_price};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct6{i, inv, d, cs});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct7{
                  __key, std::vector<__struct6>{__struct6{i, inv, d, cs}}});
            }
          }
        }
      }
    }
    std::vector<
        std::pair<decltype(std::declval<__struct7>().key.id), __struct8>>
        __items;
    for (auto &g : __groups) {
      __items.push_back(
          {g.key.id, __struct8{g.key.id, g.key.desc, g.key.price}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct8> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q37 simplified
  return 0;
}
