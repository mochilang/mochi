// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("I1"))},
                                 {string("i_item_desc"), any(string("Item1"))},
                                 {string("i_current_price"), any(30.0)},
                                 {string("i_manufact_id"), any(800)}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_item_id"), any(string("I2"))},
                                 {string("i_item_desc"), any(string("Item2"))},
                                 {string("i_current_price"), any(60.0)},
                                 {string("i_manufact_id"), any(801)}}};
  vector<unordered_map<string, int>> inventory =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 200}},
          unordered_map<string, int>{{string("inv_item_sk"), 2},
                                     {string("inv_warehouse_sk"), 1},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 300}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("d_date_sk"), any(1)},
          {string("d_date"), any(string("2000-01-15"))}}};
  vector<unordered_map<string, int>> catalog_sales =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("cs_item_sk"), 1}, {string("cs_sold_date_sk"), 1}}};
  struct GroupKey0 {
    unordered_map<string, any> id;
    unordered_map<string, any> desc;
    unordered_map<string, any> price;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.id == b.id && a.desc == b.desc && a.price == b.price;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.desc);
      _hash_combine(h, k.price);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &i : item) {
      for (auto &inv : inventory) {
        if (!(i["i_item_sk"] == inv["inv_item_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(inv["inv_date_sk"] == d["d_date_sk"]))
            continue;
          for (auto &cs : catalog_sales) {
            if (!(cs["cs_item_sk"] == i["i_item_sk"]))
              continue;
            if (i["i_current_price"] >= 20 && i["i_current_price"] <= 50 &&
                i["i_manufact_id"] >= 800 && i["i_manufact_id"] <= 803 &&
                inv["inv_quantity_on_hand"] >= 100 &&
                inv["inv_quantity_on_hand"] <= 500) {
              KeyT _k = GroupKey0{i["i_item_id"], i["i_item_desc"],
                                  i["i_current_price"]};
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(i);
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<Group *, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({g.key.id, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key.id)},
          {string("i_item_desc"), any(g.key.desc)},
          {string("i_current_price"), any(g.key.price)}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q37_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_id"), any(string("I1"))},
              {string("i_item_desc"), any(string("Item1"))},
              {string("i_current_price"), any(30.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q37_simplified();
  return 0;
}
