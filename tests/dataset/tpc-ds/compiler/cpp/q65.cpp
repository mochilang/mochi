// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) store;
  decltype(1) item;
  decltype(1) price;
};
struct ItemRevenue {
  decltype(ss) ss;
};
struct __struct3 {
  decltype(std::unordered_map<std::string,
                              decltype(std::declval<ItemRevenue>().item)>{
      {std::string("item"), std::declval<ItemRevenue>().item}}) key;
  std::vector<ItemRevenue> items;
};
struct __struct4 {
  decltype(std::declval<__struct3>().key.item) item;
  double revenue;
};
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store\":";
  __json(v.store);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const ItemRevenue &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  std::cout << "}";
}
std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                      StoreSale{1, 2, 60}};

float average(auto xs) {
  if ((xs.size() == 0)) {
    return 0;
  }
  auto sum = 0;
  for (auto x : xs) {
    sum = (sum + x);
  }
  return (sum / (xs.size()));
}

int main() {
  std::vector<ItemRevenue> item_revenue = ([&]() {
    std::vector<__struct3> __groups;
    for (auto ss : store_sales) {
      auto __key = std::unordered_map<std::string, decltype(ss.item)>{
          {std::string("item"), ss.item}};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(ItemRevenue{ss});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct3{__key, std::vector<ItemRevenue>{ItemRevenue{ss}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct4{
          g.key.item, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<ItemRevenue>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto avg_rev = average(([&]() {
    std::vector<decltype(std::declval<ItemRevenue>().revenue)> __items;
    for (auto ir : item_revenue) {
      __items.push_back(ir.revenue);
    }
    return __items;
  })());
  auto low_rev = ([&]() {
    std::vector<decltype(std::declval<ItemRevenue>().revenue)> __items;
    for (auto ir : item_revenue) {
      if (!((ir.revenue <= (0.1 * avg_rev))))
        continue;
      __items.push_back(ir.revenue);
    }
    return __items;
  })();
  auto result = (([&](auto v) {
                   return std::accumulate(v.begin(), v.end(), 0.0);
                 })(low_rev) +
                 63);
  (__json(result));
  // test TPCDS Q65 simplified
  return 0;
}
