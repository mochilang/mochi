// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_item_sk;
  int ss_store_sk;
  int ss_cdemo_sk;
  int ss_sold_date_sk;
  int ss_quantity;
  float ss_list_price;
  float ss_coupon_amt;
  float ss_sales_price;
};
struct CustomerDemo {
  int cd_demo_sk;
  std::string cd_gender;
  std::string cd_marital_status;
  std::string cd_education_status;
};
struct DateDim {
  int d_date_sk;
  int d_year;
};
struct Store {
  int s_store_sk;
  std::string s_state;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
};
struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_cdemo_sk;
  decltype(1) ss_sold_date_sk;
  decltype(5) ss_quantity;
  decltype(100) ss_list_price;
  decltype(10) ss_coupon_amt;
  decltype(90) ss_sales_price;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("F")) cd_gender;
  decltype(std::string("M")) cd_marital_status;
  decltype(std::string("College")) cd_education_status;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CA")) s_state;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("ITEM1")) i_item_id;
};
struct Result {
  decltype(i.i_item_id) item_id;
  decltype(s.s_state) state;
};
struct __struct7 {
  decltype(ss) ss;
  decltype(cd) cd;
  decltype(d) d;
  decltype(s) s;
  decltype(i) i;
};
struct __struct8 {
  Result key;
  std::vector<__struct7> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct9 {
  decltype(std::declval<__struct8>().key.item_id) i_item_id;
  decltype(std::declval<__struct8>().key.state) s_state;
  double agg1;
  double agg2;
  double agg3;
  double agg4;
};
struct __struct10 {
  decltype(std::declval<__struct8>().key.item_id) f0;
  decltype(std::declval<__struct8>().key.state) f1;
};
inline void __json(const CustomerDemo &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_cdemo_sk\":";
  __json(v.ss_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_marital_status\":";
  __json(v.cd_marital_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg1\":";
  __json(v.agg1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg2\":";
  __json(v.agg2);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg3\":";
  __json(v.agg3);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg4\":";
  __json(v.agg4);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_cdemo_sk\":";
  __json(v.ss_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sales_price\":";
  __json(v.ss_sales_price);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd\":";
  __json(v.cd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 5, 100, 10, 90},
                                        StoreSale{2, 2, 2, 1, 2, 50, 5, 45}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("F"), std::string("M"),
                          std::string("College")},
      CustomerDemographic{2, std::string("M"), std::string("S"),
                          std::string("College")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000}};
  std::vector<Store> store = {Store{1, std::string("CA")},
                              Store{2, std::string("TX")}};
  std::vector<Item> item = {Item{1, std::string("ITEM1")},
                            Item{2, std::string("ITEM2")}};
  std::vector<__struct7> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto ss : store_sales) {
      for (auto cd : customer_demographics) {
        if (!((ss.ss_cdemo_sk == cd.cd_demo_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((ss.ss_sold_date_sk == d.d_date_sk)))
            continue;
          for (auto s : store) {
            if (!((ss.ss_store_sk == s.s_store_sk)))
              continue;
            for (auto i : item) {
              if (!((ss.ss_item_sk == i.i_item_sk)))
                continue;
              if (!((((((cd.cd_gender == std::string("F")) &&
                        (cd.cd_marital_status == std::string("M"))) &&
                       (cd.cd_education_status == std::string("College"))) &&
                      (d.d_year == 2000)) &&
                     (std::find(
                          std::vector<std::string>{std::string("CA")}.begin(),
                          std::vector<std::string>{std::string("CA")}.end(),
                          s.s_state) !=
                      std::vector<std::string>{std::string("CA")}.end()))))
                continue;
              auto __key = Result{i.i_item_id, s.s_state};
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(__struct7{ss, cd, d, s, i});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct8{
                    __key, std::vector<__struct7>{__struct7{ss, cd, d, s, i}}});
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<__struct10, __struct9>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct10{g.key.item_id, g.key.state},
           __struct9{
               g.key.item_id, g.key.state, __avg(([&]() {
                 std::vector<decltype(std::declval<__struct7>().ss_quantity)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.ss_quantity);
                 }
                 return __items;
               })()),
               __avg(([&]() {
                 std::vector<decltype(std::declval<__struct7>().ss_list_price)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.ss_list_price);
                 }
                 return __items;
               })()),
               __avg(([&]() {
                 std::vector<decltype(std::declval<__struct7>().ss_coupon_amt)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.ss_coupon_amt);
                 }
                 return __items;
               })()),
               __avg(([&]() {
                 std::vector<decltype(std::declval<__struct7>().ss_sales_price)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.ss_sales_price);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct9> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q27 averages by state
  return 0;
}
