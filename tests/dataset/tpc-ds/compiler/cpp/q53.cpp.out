// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_manufact_id;
};
struct StoreSale {
  decltype(1) item;
  decltype(1) date;
  decltype(10) price;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_month_seq;
};
struct Grouped {
  decltype(ss) ss;
  decltype(i) i;
  decltype(d) d;
};
struct __struct5 {
  decltype(i.i_manufact_id) key;
  std::vector<Grouped> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct6 {
  decltype(std::declval<__struct5>().key) manu;
  double sum_sales;
  double avg_sales;
};
struct Result {
  decltype(std::declval<Grouped>().manu) i_manufact_id;
  decltype(std::declval<Grouped>().sum_sales) sum_sales;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"manu\":";
  __json(v.manu);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_sales\":";
  __json(v.avg_sales);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
std::vector<Item> item = {Item{1, 1}, Item{2, 2}};
std::vector<StoreSale> store_sales = {StoreSale{1, 1, 10}, StoreSale{1, 2, 10},
                                      StoreSale{2, 1, 30}, StoreSale{2, 2, 23}};
std::vector<DateDim> date_dim = {DateDim{1, 1}, DateDim{2, 2}};

float abs(float x) {
  if ((x >= 0)) {
    return x;
  }
  return (-x);
}

int main() {
  std::vector<Grouped> grouped = ([&]() {
    std::vector<__struct5> __groups;
    for (auto ss : store_sales) {
      for (auto i : item) {
        if (!((ss.item == i.i_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((ss.date == d.d_date_sk)))
            continue;
          auto __key = i.i_manufact_id;
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(Grouped{ss, i, d});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct5{__key, std::vector<Grouped>{Grouped{ss, i, d}}});
          }
        }
      }
    }
    std::vector<__struct6> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct6{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Grouped>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Grouped>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto g : grouped) {
      if (!(((g.avg_sales > 0) &&
             ((abs((g.sum_sales - g.avg_sales)) / g.avg_sales) > 0.1))))
        continue;
      __items.push_back(Result{g.manu, g.sum_sales});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q53 simplified
  return 0;
}
