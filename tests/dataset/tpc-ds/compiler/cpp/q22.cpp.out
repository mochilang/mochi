// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:31Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Inventory {
  int inv_item_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
};
struct DateDim {
  int d_date_sk;
  int d_month_seq;
};
struct Item {
  int i_item_sk;
  std::string i_product_name;
  std::string i_brand;
  std::string i_class;
  std::string i_category;
};
struct Inventory {
  decltype(1) inv_item_sk;
  decltype(1) inv_date_sk;
  decltype(10) inv_quantity_on_hand;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(0) d_month_seq;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("Prod1")) i_product_name;
  decltype(std::string("Brand1")) i_brand;
  decltype(std::string("Class1")) i_class;
  decltype(std::string("Cat1")) i_category;
};
struct Qoh {
  decltype(i.i_product_name) product_name;
  decltype(i.i_brand) brand;
  decltype(i.i_class) class;
  decltype(i.i_category) category;
};
struct __struct5 {
  decltype(inv) inv;
  decltype(d) d;
  decltype(i) i;
};
struct __struct6 {
  Qoh key;
  std::vector<__struct5> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct7 {
  decltype(std::declval<__struct6>().key.product_name) i_product_name;
  decltype(std::declval<__struct6>().key.brand) i_brand;
  decltype(std::declval<__struct6>().key.class) i_class;
  decltype(std::declval<__struct6>().key.category) i_category;
  double qoh;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_product_name\":";
  __json(v.i_product_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_product_name\":";
  __json(v.i_product_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_product_name\":";
  __json(v.i_product_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qoh\":";
  __json(v.qoh);
  std::cout << "}";
}
inline void __json(const Inventory &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_item_sk\":";
  __json(v.inv_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_date_sk\":";
  __json(v.inv_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv_quantity_on_hand\":";
  __json(v.inv_quantity_on_hand);
  std::cout << "}";
}
inline void __json(const Qoh &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"product_name\":";
  __json(v.product_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"category\":";
  __json(v.category);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"inv\":";
  __json(v.inv);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
int main() {
  std::vector<Inventory> inventory = {Inventory{1, 1, 10}, Inventory{1, 2, 20},
                                      Inventory{1, 3, 10}, Inventory{1, 4, 20},
                                      Inventory{2, 1, 50}};
  std::vector<DateDim> date_dim = {DateDim{1, 0}, DateDim{2, 1}, DateDim{3, 2},
                                   DateDim{4, 3}};
  std::vector<Item> item = {Item{1, std::string("Prod1"), std::string("Brand1"),
                                 std::string("Class1"), std::string("Cat1")},
                            Item{2, std::string("Prod2"), std::string("Brand2"),
                                 std::string("Class2"), std::string("Cat2")}};
  std::vector<__struct5> qoh = ([&]() {
    std::vector<__struct6> __groups;
    for (auto inv : inventory) {
      for (auto d : date_dim) {
        if (!((inv.inv_date_sk == d.d_date_sk)))
          continue;
        for (auto i : item) {
          if (!((inv.inv_item_sk == i.i_item_sk)))
            continue;
          if (!(((d.d_month_seq >= 0) && (d.d_month_seq <= 11))))
            continue;
          auto __key =
              Qoh{i.i_product_name, i.i_brand, i.i_class, i.i_category};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{inv, d, i});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{inv, d, i}}});
          }
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.product_name, g.key.brand, g.key.class, g.key.category,
          __avg(([&]() {
            std::vector<
                decltype(std::declval<__struct5>().inv_quantity_on_hand)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.inv_quantity_on_hand);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  (__json(qoh));
  // test TPCDS Q22 average inventory
  return 0;
}
