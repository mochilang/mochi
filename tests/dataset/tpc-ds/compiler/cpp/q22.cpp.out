// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct Inventory {
  int inv_item_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
};

struct DateDim {
  int d_date_sk;
  int d_month_seq;
};

struct Item {
  int i_item_sk;
  string i_product_name;
  string i_brand;
  string i_class;
  string i_category;
};

int main() {
  vector<unordered_map<string, int>> inventory =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 10}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_date_sk"), 2},
                                     {string("inv_quantity_on_hand"), 20}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_date_sk"), 3},
                                     {string("inv_quantity_on_hand"), 10}},
          unordered_map<string, int>{{string("inv_item_sk"), 1},
                                     {string("inv_date_sk"), 4},
                                     {string("inv_quantity_on_hand"), 20}},
          unordered_map<string, int>{{string("inv_item_sk"), 2},
                                     {string("inv_date_sk"), 1},
                                     {string("inv_quantity_on_hand"), 50}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_month_seq"), 0}},
          unordered_map<string, int>{{string("d_date_sk"), 2},
                                     {string("d_month_seq"), 1}},
          unordered_map<string, int>{{string("d_date_sk"), 3},
                                     {string("d_month_seq"), 2}},
          unordered_map<string, int>{{string("d_date_sk"), 4},
                                     {string("d_month_seq"), 3}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{
          {string("i_item_sk"), any(1)},
          {string("i_product_name"), any(string("Prod1"))},
          {string("i_brand"), any(string("Brand1"))},
          {string("i_class"), any(string("Class1"))},
          {string("i_category"), any(string("Cat1"))}},
      unordered_map<string, any>{
          {string("i_item_sk"), any(2)},
          {string("i_product_name"), any(string("Prod2"))},
          {string("i_brand"), any(string("Brand2"))},
          {string("i_class"), any(string("Class2"))},
          {string("i_category"), any(string("Cat2"))}}};
  struct GroupKey3 {
    unordered_map<string, any> product_name;
    unordered_map<string, any> brand;
    unordered_map<string, any> class;
    unordered_map<string, any> category;
  };
  inline bool operator==(const GroupKey3 &a, const GroupKey3 &b) {
    return a.product_name == b.product_name && a.brand == b.brand &&
           a.class == b.class && a.category == b.category;
  }
  namespace std {
  template <> struct hash<GroupKey3> {
    size_t operator()(const GroupKey3 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.product_name);
      _hash_combine(h, k.brand);
      _hash_combine(h, k.class);
      _hash_combine(h, k.category);
      return h;
    }
  };
  } // namespace std

  auto qoh = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, int>;
    using KeyT = GroupKey3;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &inv : inventory) {
      for (auto &d : date_dim) {
        if (!(inv["inv_date_sk"] == d["d_date_sk"]))
          continue;
        for (auto &i : item) {
          if (!(inv["inv_item_sk"] == i["i_item_sk"]))
            continue;
          if (d["d_month_seq"] >= 0 && d["d_month_seq"] <= 11) {
            KeyT _k = GroupKey3{i["i_product_name"], i["i_brand"], i["i_class"],
                                i["i_category"]};
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(inv);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_product_name"), any(g.key.product_name)},
          {string("i_brand"), any(g.key.brand)},
          {string("i_class"), any(g.key.class)},
          {string("i_category"), any(g.key.category)},
          {string("qoh"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(
                   x)["inv_quantity_on_hand"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(qoh);
  auto test_TPCDS_Q22_average_inventory = [&]() {
    if (!(qoh == vector<unordered_map<string, any>>{
                     unordered_map<string, any>{
                         {string("i_product_name"), any(string("Prod1"))},
                         {string("i_brand"), any(string("Brand1"))},
                         {string("i_class"), any(string("Class1"))},
                         {string("i_category"), any(string("Cat1"))},
                         {string("qoh"), any(15.0)}},
                     unordered_map<string, any>{
                         {string("i_product_name"), any(string("Prod2"))},
                         {string("i_brand"), any(string("Brand2"))},
                         {string("i_class"), any(string("Class2"))},
                         {string("i_category"), any(string("Cat2"))},
                         {string("qoh"), any(50.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q22_average_inventory();
  return 0;
}
