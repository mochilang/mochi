// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  decltype(1) item;
  decltype(30) profit;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 30},
                                            CatalogSale{2, 38}};
  std::vector<CatalogSale> store_sales = {CatalogSale{1, 30}};
  auto result = ((([&](auto v) {
                    return std::accumulate(v.begin(), v.end(), 0.0);
                  })(([&]() {
                    std::vector<decltype(c.profit)> __items;
                    for (auto c : catalog_sales) {
                      __items.push_back(c.profit);
                    }
                    return __items;
                  })()) -
                  ([&](auto v) {
                    return std::accumulate(v.begin(), v.end(), 0.0);
                  })(([&]() {
                    std::vector<decltype(s.profit)> __items;
                    for (auto s : store_sales) {
                      __items.push_back(s.profit);
                    }
                    return __items;
                  })())) +
                 30);
  (__json(result));
  // test TPCDS Q68 simplified
  return 0;
}
