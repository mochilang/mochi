// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct DateDim {
  decltype(1) d_date_sk;
  decltype(1998) d_year;
  decltype(12) d_moy;
};
struct StoreSale {
  decltype(1) ss_sold_date_sk;
  decltype(1) ss_item_sk;
  decltype(10) ss_ext_sales_price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(100) i_manufact_id;
  decltype(1) i_brand_id;
  decltype(std::string("Brand1")) i_brand;
};
struct Result {
  decltype(dt.d_year) d_year;
  decltype(i.i_brand_id) brand_id;
  decltype(i.i_brand) brand;
};
struct __struct5 {
  decltype(dt) dt;
  decltype(ss) ss;
  decltype(i) i;
};
struct __struct6 {
  Result key;
  std::vector<__struct5> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.d_year) d_year;
  decltype(std::declval<__struct6>().key.brand_id) brand_id;
  decltype(std::declval<__struct6>().key.brand) brand;
  double sum_agg;
};
struct __struct8 {
  decltype(std::declval<__struct6>().key.d_year) f0;
  double f1;
  decltype(std::declval<__struct6>().key.brand_id) f2;
};
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f2\":";
  __json(v.f2);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_agg\":";
  __json(v.sum_agg);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dt\":";
  __json(v.dt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
int main() {
  std::vector<DateDim> date_dim = {DateDim{1, 1998, 12}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 10},
                                        StoreSale{1, 2, 20}};
  std::vector<Item> item = {Item{1, 100, 1, std::string("Brand1")},
                            Item{2, 100, 2, std::string("Brand2")}};
  std::vector<__struct5> result = ([&]() {
    std::vector<__struct6> __groups;
    for (auto dt : date_dim) {
      for (auto ss : store_sales) {
        if (!((dt.d_date_sk == ss.ss_sold_date_sk)))
          continue;
        for (auto i : item) {
          if (!((ss.ss_item_sk == i.i_item_sk)))
            continue;
          if (!(((i.i_manufact_id == 100) && (dt.d_moy == 12))))
            continue;
          auto __key = Result{dt.d_year, i.i_brand_id, i.i_brand};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{dt, ss, i});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{dt, ss, i}}});
          }
        }
      }
    }
    std::vector<std::pair<__struct8, __struct7>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct8{g.key.d_year, (-([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype(std::declval<__struct5>()
                                                .ss_ext_sales_price)>
                           __items;
                       for (auto x : g.items) {
                         __items.push_back(x.ss_ext_sales_price);
                       }
                       return __items;
                     })())),
                     g.key.brand_id},
           __struct7{g.key.d_year, g.key.brand_id, g.key.brand, ([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype(std::declval<__struct5>()
                                                .ss_ext_sales_price)>
                           __items;
                       for (auto x : g.items) {
                         __items.push_back(x.ss_ext_sales_price);
                       }
                       return __items;
                     })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1, a.first.f2) <
             std::tie(b.first.f0, b.first.f1, b.first.f2);
    });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q3 result
  return 0;
}
