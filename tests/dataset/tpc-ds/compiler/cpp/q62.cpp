// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

int main() {
  std::vector<std::string> web_sales =
      std::vector<decltype(std::unordered_map<std::string, decltype(10)>{
          {std::string("days"), 10}})>{
          std::unordered_map<std::string, decltype(10)>{
              {std::string("days"), 10}},
          std::unordered_map<std::string, decltype(40)>{
              {std::string("days"), 40}},
          std::unordered_map<std::string, decltype(70)>{
              {std::string("days"), 70}},
          std::unordered_map<std::string, decltype(100)>{
              {std::string("days"), 100}},
          std::unordered_map<std::string, decltype(130)>{
              {std::string("days"), 130}}};
  auto result = ((((int)web_sales.size()) * 12) + 2);
  (__json(result));
  // test TPCDS Q62 simplified
  return 0;
}
