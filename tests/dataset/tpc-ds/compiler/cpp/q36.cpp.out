// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ss_item_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_sold_date_sk;
  decltype(100) ss_ext_sales_price;
  decltype(20) ss_net_profit;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("Books")) i_category;
  decltype(std::string("C1")) i_class;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("A")) s_state;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
};
struct Result {
  decltype(i.i_category) category;
  decltype(i.i_class) class;
};
struct __struct6 {
  decltype(ss) ss;
  decltype(d) d;
  decltype(i) i;
  decltype(s) s;
};
struct __struct7 {
  Result key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.category) i_category;
  decltype(std::declval<__struct7>().key.class) i_class;
  double gross_margin;
};
struct __struct9 {
  decltype(std::declval<__struct7>().key.catestd::declval<__struct7>() ory) f0;
  decltype(std::declval<__struct7>().key.class) f1;
};
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"category\":";
  __json(v.category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"class\":";
  __json(v.class);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"gross_margin\":";
  __json(v.gross_margin);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_class\":";
  __json(v.i_class);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 100, 20},
                                        StoreSale{2, 1, 1, 200, 50},
                                        StoreSale{3, 2, 1, 150, 30}};
  std::vector<Item> item = {
      Item{1, std::string("Books"), std::string("C1")},
      Item{2, std::string("Books"), std::string("C2")},
      Item{3, std::string("Electronics"), std::string("C3")}};
  std::vector<Store> store = {Store{1, std::string("A")},
                              Store{2, std::string("B")}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000}};
  std::vector<__struct6> result = ([&]() {
    std::vector<__struct7> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
          continue;
        for (auto i : item) {
          if (!((ss.ss_item_sk == i.i_item_sk)))
            continue;
          for (auto s : store) {
            if (!((ss.ss_store_sk == s.s_store_sk)))
              continue;
            if (!(((d.d_year == 2000) && (((s.s_state == std::string("A")) ||
                                           (s.s_state == std::string("B")))))))
              continue;
            auto __key = Result{i.i_category, i.i_class};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct6{ss, d, i, s});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct7{
                  __key, std::vector<__struct6>{__struct6{ss, d, i, s}}});
            }
          }
        }
      }
    }
    std::vector<std::pair<__struct9, __struct8>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct9{g.key.category, g.key.class},
           __struct8{
               g.key.category, g.key.class,
               (([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype(std::declval<__struct6>().ss_net_profit)>
                      __items;
                  for (auto x : g.items) {
                    __items.push_back(x.ss_net_profit);
                  }
                  return __items;
                })()) /
                ([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<
                      decltype(std::declval<__struct6>().ss_ext_sales_price)>
                      __items;
                  for (auto x : g.items) {
                    __items.push_back(x.ss_ext_sales_price);
                  }
                  return __items;
                })()))}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct8> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q36 simplified
  return 0;
}
