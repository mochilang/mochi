// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(std::string("Blue Shirt")) product_name;
  decltype(100) manufact_id;
  decltype(1) manufact;
  decltype(std::string("Women")) category;
  decltype(std::string("blue")) color;
  decltype(std::string("pack")) units;
  decltype(std::string("M")) size;
};
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"product_name\":";
  __json(v.product_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"manufact_id\":";
  __json(v.manufact_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"manufact\":";
  __json(v.manufact);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"category\":";
  __json(v.category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"color\":";
  __json(v.color);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"units\":";
  __json(v.units);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"size\":";
  __json(v.size);
  std::cout << "}";
}
int main() {
  std::vector<Item> item = {
      Item{std::string("Blue Shirt"), 100, 1, std::string("Women"),
           std::string("blue"), std::string("pack"), std::string("M")},
      Item{std::string("Red Dress"), 120, 1, std::string("Women"),
           std::string("red"), std::string("pack"), std::string("M")},
      Item{std::string("Pants"), 200, 2, std::string("Men"),
           std::string("black"), std::string("pair"), std::string("L")}};
  auto lower = 100;
  auto result = ([&]() {
    std::vector<std::pair<decltype(i1.product_name), decltype(i1.product_name)>>
        __items;
    for (auto i1 : item) {
      if (!((((i1.manufact_id >= lower) && (i1.manufact_id <= (lower + 40))) &&
             (((int)([&]() {
                 std::vector<decltype(i2)> __items;
                 for (auto i2 : item) {
                   if (!(((i2.manufact == i1.manufact) &&
                          (i2.category == i1.category))))
                     continue;
                   __items.push_back(i2);
                 }
                 return __items;
               })()
                   .size()) > 1))))
        continue;
      __items.push_back({i1.product_name, i1.product_name});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<decltype(i1.product_name)> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q41 simplified
  return 0;
}
