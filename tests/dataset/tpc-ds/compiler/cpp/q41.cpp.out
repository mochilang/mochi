// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{
          {string("product_name"), any(string("Blue Shirt"))},
          {string("manufact_id"), any(100)},
          {string("manufact"), any(1)},
          {string("category"), any(string("Women"))},
          {string("color"), any(string("blue"))},
          {string("units"), any(string("pack"))},
          {string("size"), any(string("M"))}},
      unordered_map<string, any>{
          {string("product_name"), any(string("Red Dress"))},
          {string("manufact_id"), any(120)},
          {string("manufact"), any(1)},
          {string("category"), any(string("Women"))},
          {string("color"), any(string("red"))},
          {string("units"), any(string("pack"))},
          {string("size"), any(string("M"))}},
      unordered_map<string, any>{{string("product_name"), any(string("Pants"))},
                                 {string("manufact_id"), any(200)},
                                 {string("manufact"), any(2)},
                                 {string("category"), any(string("Men"))},
                                 {string("color"), any(string("black"))},
                                 {string("units"), any(string("pair"))},
                                 {string("size"), any(string("L"))}}};
  int lower = 100;
  auto result = ([&]() -> vector<unordered_map<string, any>> {
    vector<pair<unordered_map<string, any>, unordered_map<string, any>>> _tmp;
    for (auto &i1 : item) {
      if (i1["manufact_id"] >= lower && i1["manufact_id"] <= lower + 40 &&
          _count(([&]() -> vector<unordered_map<string, any>> {
            vector<unordered_map<string, any>> _res;
            for (auto &i2 : item) {
              if (i2["manufact"] == i1["manufact"] &&
                  i2["category"] == i1["category"]) {
                _res.push_back(i2);
              }
            }
            return _res;
          })()) > 1) {
        _tmp.push_back({i1["product_name"], i1["product_name"]});
      }
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    vector<unordered_map<string, any>> _res;
    _res.reserve(_tmp.size());
    for (auto &_it : _tmp)
      _res.push_back(_it.second);
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q41_simplified = [&]() {
    if (!(result ==
          vector<string>{string("Blue Shirt"), string("Red Dress")})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q41_simplified();
  return 0;
}
