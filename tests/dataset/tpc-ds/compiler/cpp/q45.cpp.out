// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

string _sliceString(const string &s, int start, int end) {
  int n = s.size();
  if (start < 0)
    start += n;
  if (end < 0)
    end += n;
  if (start < 0)
    start = 0;
  if (end > n)
    end = n;
  if (end < start)
    end = start;
  return s.substr(start, end - start);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("bill_customer_sk"), any(1)},
                                     {string("item_sk"), any(1)},
                                     {string("sold_date_sk"), any(1)},
                                     {string("sales_price"), any(50.0)}},
          unordered_map<string, any>{{string("bill_customer_sk"), any(2)},
                                     {string("item_sk"), any(2)},
                                     {string("sold_date_sk"), any(1)},
                                     {string("sales_price"), any(30.0)}}};
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("c_customer_sk"), 1},
                                     {string("c_current_addr_sk"), 1}},
          unordered_map<string, int>{{string("c_customer_sk"), 2},
                                     {string("c_current_addr_sk"), 2}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_zip"), any(string("85669"))}},
          unordered_map<string, any>{{string("ca_address_sk"), any(2)},
                                     {string("ca_zip"), any(string("99999"))}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("I1"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_item_id"), any(string("I2"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_qoy"), 1},
                                     {string("d_year"), 2020}}};
  vector<string> zip_list =
      vector<string>{string("85669"), string("86197"), string("88274"),
                     string("83405"), string("86475"), string("85392"),
                     string("85460"), string("80348"), string("81792")};
  vector<string> item_ids = vector<string>{string("I2")};
  int qoy = 1;
  int year = 2020;
  auto base = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = unordered_map<string, any>;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ws : web_sales) {
      for (auto &c : customer) {
        if (!(ws["bill_customer_sk"] == c["c_customer_sk"]))
          continue;
        for (auto &ca : customer_address) {
          if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
            continue;
          for (auto &i : item) {
            if (!(ws["item_sk"] == i["i_item_sk"]))
              continue;
            for (auto &d : date_dim) {
              if (!(ws["sold_date_sk"] == d["d_date_sk"]))
                continue;
              if (((find(item_ids.begin(), item_ids.end(),
                         (find(zip_list.begin(), zip_list.end(),
                               _sliceString(ca["ca_zip"], 0, 5)) !=
                          zip_list.end()) ||
                             i["i_item_id"]) != item_ids.end())) &&
                  d["d_qoy"] == qoy && d["d_year"] == year) {
                KeyT _k = ca["ca_zip"];
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(ws);
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("ca_zip"), any(g.key)},
          {string("sum_ws_sales_price"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ws.sales_price);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  vector<unordered_map<string, any>> records = base;
  _json(records);
  auto test_TPCDS_Q45_simplified = [&]() {
    if (!(records == vector<unordered_map<string, any>>{
                         unordered_map<string, any>{
                             {string("ca_zip"), any(string("85669"))},
                             {string("sum_ws_sales_price"), any(50.0)}},
                         unordered_map<string, any>{
                             {string("ca_zip"), any(string("99999"))},
                             {string("sum_ws_sales_price"), any(30.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q45_simplified();
  return 0;
}
