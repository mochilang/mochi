// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:33Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  decltype(1) bill_customer_sk;
  decltype(1) item_sk;
  decltype(1) sold_date_sk;
  decltype(50) sales_price;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_current_addr_sk;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("85669")) ca_zip;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("I1")) i_item_id;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1) d_qoy;
  decltype(2020) d_year;
};
struct Base {
  decltype(ws) ws;
  decltype(c) c;
  decltype(ca) ca;
  decltype(i) i;
  decltype(d) d;
};
struct __struct7 {
  decltype(ca.ca_zip) key;
  std::vector<Base> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key) ca_zip;
  double sum_ws_sales_price;
};
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bill_customer_sk\":";
  __json(v.bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_sk\":";
  __json(v.item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date_sk\":";
  __json(v.sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sales_price\":";
  __json(v.sales_price);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_ws_sales_price\":";
  __json(v.sum_ws_sales_price);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_qoy\":";
  __json(v.d_qoy);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Base &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws\":";
  __json(v.ws);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
int main() {
  std::vector<WebSale> web_sales = {WebSale{1, 1, 1, 50}, WebSale{2, 2, 1, 30}};
  std::vector<Customer> customer = {Customer{1, 1}, Customer{2, 2}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("85669")},
      CustomerAddres{2, std::string("99999")}};
  std::vector<Item> item = {Item{1, std::string("I1")},
                            Item{2, std::string("I2")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1, 2020}};
  std::vector<std::string> zip_list = {
      std::string("85669"), std::string("86197"), std::string("88274"),
      std::string("83405"), std::string("86475"), std::string("85392"),
      std::string("85460"), std::string("80348"), std::string("81792")};
  std::vector<std::string> item_ids = {std::string("I2")};
  auto qoy = 1;
  auto year = 2020;
  std::vector<Base> base = ([&]() {
    std::vector<__struct7> __groups;
    for (auto ws : web_sales) {
      for (auto c : customer) {
        if (!((ws.bill_customer_sk == c.c_customer_sk)))
          continue;
        for (auto ca : customer_address) {
          if (!((c.c_current_addr_sk == ca.ca_address_sk)))
            continue;
          for (auto i : item) {
            if (!((ws.item_sk == i.i_item_sk)))
              continue;
            for (auto d : date_dim) {
              if (!((ws.sold_date_sk == d.d_date_sk)))
                continue;
              if (!((((((std::find(zip_list.begin(), zip_list.end(),
                                   substr(ca.ca_zip, 0, 5)) !=
                         zip_list.end()) ||
                        (std::find(item_ids.begin(), item_ids.end(),
                                   i.i_item_id) != item_ids.end()))) &&
                      (d.d_qoy == qoy)) &&
                     (d.d_year == year))))
                continue;
              auto __key = ca.ca_zip;
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(Base{ws, c, ca, i, d});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(
                    __struct7{__key, std::vector<Base>{Base{ws, c, ca, i, d}}});
              }
            }
          }
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Base>().ws.sales_price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.ws.sales_price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Base> records = base;
  (__json(records));
  // test TPCDS Q45 simplified
  return 0;
}
