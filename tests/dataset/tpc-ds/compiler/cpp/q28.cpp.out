// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct StoreSale {
  int ss_quantity;
  double ss_list_price;
  double ss_coupon_amt;
  double ss_wholesale_cost;
};

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_quantity"), any(3)},
                                     {string("ss_list_price"), any(100.0)},
                                     {string("ss_coupon_amt"), any(50.0)},
                                     {string("ss_wholesale_cost"), any(30.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(8)},
                                     {string("ss_list_price"), any(80.0)},
                                     {string("ss_coupon_amt"), any(10.0)},
                                     {string("ss_wholesale_cost"), any(20.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(12)},
                                     {string("ss_list_price"), any(60.0)},
                                     {string("ss_coupon_amt"), any(5.0)},
                                     {string("ss_wholesale_cost"), any(15.0)}}};
  auto bucket1 = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      if (ss["ss_quantity"] >= 0 && ss["ss_quantity"] <= 5 &&
          ((ss["ss_list_price"] >= 0 && ss["ss_list_price"] <= 110) ||
           (ss["ss_coupon_amt"] >= 0 && ss["ss_coupon_amt"] <= 1000) ||
           (ss["ss_wholesale_cost"] >= 0 && ss["ss_wholesale_cost"] <= 50))) {
        _res.push_back(ss);
      }
    }
    return _res;
  })();
  auto bucket2 = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ss : store_sales) {
      if (ss["ss_quantity"] >= 6 && ss["ss_quantity"] <= 10 &&
          ((ss["ss_list_price"] >= 0 && ss["ss_list_price"] <= 110) ||
           (ss["ss_coupon_amt"] >= 0 && ss["ss_coupon_amt"] <= 1000) ||
           (ss["ss_wholesale_cost"] >= 0 && ss["ss_wholesale_cost"] <= 50))) {
        _res.push_back(ss);
      }
    }
    return _res;
  })();
  unordered_map<string, any> result = unordered_map<string, any>{
      {string("B1_LP"), any(_avg(([&]() -> vector<unordered_map<string, any>> {
         vector<unordered_map<string, any>> _res;
         for (auto &x : bucket1) {
           _res.push_back(x["ss_list_price"]);
         }
         return _res;
       })()))},
      {string("B1_CNT"), any(_count(bucket1))},
      {string("B1_CNTD"), any(_count(([&]() -> vector<any> {
         auto _src = bucket1;
         auto _groups =
             _group_by(_src, [&](auto &x) { return x["ss_list_price"]; });
         vector<any> _res;
         for (auto &g : _groups) {
           _res.push_back(any(g.key));
         }
         return _res;
       })()))},
      {string("B2_LP"), any(_avg(([&]() -> vector<unordered_map<string, any>> {
         vector<unordered_map<string, any>> _res;
         for (auto &x : bucket2) {
           _res.push_back(x["ss_list_price"]);
         }
         return _res;
       })()))},
      {string("B2_CNT"), any(_count(bucket2))},
      {string("B2_CNTD"), any(_count(([&]() -> vector<any> {
         auto _src = bucket2;
         auto _groups =
             _group_by(_src, [&](auto &x) { return x["ss_list_price"]; });
         vector<any> _res;
         for (auto &g : _groups) {
           _res.push_back(any(g.key));
         }
         return _res;
       })()))}};
  _json(result);
  auto test_TPCDS_Q28_buckets = [&]() {
    if (!(result == unordered_map<string, any>{{string("B1_LP"), any(100.0)},
                                               {string("B1_CNT"), any(1)},
                                               {string("B1_CNTD"), any(1)},
                                               {string("B2_LP"), any(80.0)},
                                               {string("B2_CNT"), any(1)},
                                               {string("B2_CNTD"), any(1)}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q28_buckets();
  return 0;
}
