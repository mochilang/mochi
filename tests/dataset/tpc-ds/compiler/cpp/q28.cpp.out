// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_quantity;
  float ss_list_price;
  float ss_coupon_amt;
  float ss_wholesale_cost;
};
struct StoreSale {
  decltype(3) ss_quantity;
  decltype(100) ss_list_price;
  decltype(50) ss_coupon_amt;
  decltype(30) ss_wholesale_cost;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct Result {
  decltype(x) x;
};
struct __struct3 {
  decltype(std::declval<Result>().ss_list_price) key;
  std::vector<Result> items;
};
struct Result {
  decltype(x) x;
};
struct __struct4 {
  decltype(std::declval<Result>().ss_list_price) key;
  std::vector<Result> items;
};
struct __struct5 {
  double B1_LP;
  int B1_CNT;
  bool B1_CNTD;
  double B2_LP;
  int B2_CNT;
  bool B2_CNTD;
};
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B1_LP\":";
  __json(v.B1_LP);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B1_CNT\":";
  __json(v.B1_CNT);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B1_CNTD\":";
  __json(v.B1_CNTD);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B2_LP\":";
  __json(v.B2_LP);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B2_CNT\":";
  __json(v.B2_CNT);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"B2_CNTD\":";
  __json(v.B2_CNTD);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_wholesale_cost\":";
  __json(v.ss_wholesale_cost);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_list_price\":";
  __json(v.ss_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_wholesale_cost\":";
  __json(v.ss_wholesale_cost);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"x\":";
  __json(v.x);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{3, 100, 50, 30},
                                        StoreSale{8, 80, 10, 20},
                                        StoreSale{12, 60, 5, 15}};
  auto bucket1 = ([&]() {
    std::vector<decltype(ss)> __items;
    for (auto ss : store_sales) {
      if (!((((ss.ss_quantity >= 0) && (ss.ss_quantity <= 5)) &&
             ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110))) ||
                (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000)))) ||
               (((ss.ss_wholesale_cost >= 0) &&
                 (ss.ss_wholesale_cost <= 50))))))))
        continue;
      __items.push_back(ss);
    }
    return __items;
  })();
  auto bucket2 = ([&]() {
    std::vector<decltype(ss)> __items;
    for (auto ss : store_sales) {
      if (!((((ss.ss_quantity >= 6) && (ss.ss_quantity <= 10)) &&
             ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110))) ||
                (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000)))) ||
               (((ss.ss_wholesale_cost >= 0) &&
                 (ss.ss_wholesale_cost <= 50))))))))
        continue;
      __items.push_back(ss);
    }
    return __items;
  })();
  auto result =
      __struct5{__avg(([&]() {
                  std::vector<decltype(x.ss_list_price)> __items;
                  for (auto x : bucket1) {
                    __items.push_back(x.ss_list_price);
                  }
                  return __items;
                })()),
                ((int)bucket1.size()),
                ((int)([&]() {
                   std::vector<__struct3> __groups;
                   for (auto x : bucket1) {
                     auto __key = x.ss_list_price;
                     bool __found = false;
                     for (auto &__g : __groups) {
                       if (__g.key == __key) {
                         __g.items.push_back(Result{x});
                         __found = true;
                         break;
                       }
                     }
                     if (!__found) {
                       __groups.push_back(
                           __struct3{__key, std::vector<Result>{Result{x}}});
                     }
                   }
                   std::vector<decltype(std::declval<__struct3>().key)> __items;
                   for (auto &g : __groups) {
                     __items.push_back(g.key);
                   }
                   return __items;
                 })()
                     .size()),
                __avg(([&]() {
                  std::vector<decltype(x.ss_list_price)> __items;
                  for (auto x : bucket2) {
                    __items.push_back(x.ss_list_price);
                  }
                  return __items;
                })()),
                ((int)bucket2.size()),
                ((int)([&]() {
                   std::vector<__struct4> __groups;
                   for (auto x : bucket2) {
                     auto __key = x.ss_list_price;
                     bool __found = false;
                     for (auto &__g : __groups) {
                       if (__g.key == __key) {
                         __g.items.push_back(Result{x});
                         __found = true;
                         break;
                       }
                     }
                     if (!__found) {
                       __groups.push_back(
                           __struct4{__key, std::vector<Result>{Result{x}}});
                     }
                   }
                   std::vector<decltype(std::declval<__struct4>().key)> __items;
                   for (auto &g : __groups) {
                     __items.push_back(g.key);
                   }
                   return __items;
                 })()
                     .size())};
  (__json(result));
  // test TPCDS Q28 buckets
  return 0;
}
