// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct SsItem {
  decltype(1) item_id;
  decltype(50) ss_item_rev;
};
struct CsItem {
  decltype(1) item_id;
  decltype(60) cs_item_rev;
};
struct WsItem {
  decltype(1) item_id;
  decltype(64) ws_item_rev;
};
struct Result {
  decltype(ss_items.item_id) item_id;
  decltype(avg) average;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"average\":";
  __json(v.average);
  std::cout << "}";
}
inline void __json(const CsItem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_rev\":";
  __json(v.cs_item_rev);
  std::cout << "}";
}
inline void __json(const SsItem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_rev\":";
  __json(v.ss_item_rev);
  std::cout << "}";
}
inline void __json(const WsItem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item_id\":";
  __json(v.item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_rev\":";
  __json(v.ws_item_rev);
  std::cout << "}";
}
int main() {
  auto ss_items = SsItem{1, 50};
  auto cs_items = CsItem{1, 60};
  auto ws_items = WsItem{1, 64};
  auto avg = ((((ss_items.ss_item_rev + cs_items.cs_item_rev) +
                ws_items.ws_item_rev)) /
              3);
  std::vector<Result> result = {Result{ss_items.item_id, avg}};
  (__json(result));
  // test TPCDS Q58 simplified
  return 0;
}
