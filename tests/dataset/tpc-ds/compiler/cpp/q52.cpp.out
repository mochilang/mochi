// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) item;
  decltype(1) sold_date;
  decltype(10) price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_brand_id;
  decltype(std::string("B1")) i_brand;
  decltype(1) i_manager_id;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2001) d_year;
  decltype(11) d_moy;
};
struct Filtered {
  decltype(d.d_year) year;
  decltype(i.i_brand_id) brand_id;
  decltype(i.i_brand) brand;
};
struct __struct5 {
  decltype(ss) ss;
  decltype(i) i;
  decltype(d) d;
};
struct __struct6 {
  Filtered key;
  std::vector<__struct5> items;
};
struct __struct7 {
  decltype(std::declval<__struct6>().key.year) d_year;
  decltype(std::declval<__struct6>().key.brand_id) brand_id;
  double ext_price;
};
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ext_price\":";
  __json(v.ext_price);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand_id\":";
  __json(v.i_brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sold_date\":";
  __json(v.sold_date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand_id\":";
  __json(v.brand_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"brand\":";
  __json(v.brand);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{1, 1, 10}, StoreSale{2, 1, 22}, StoreSale{1, 1, 20}};
  std::vector<Item> item = {Item{1, 1, std::string("B1"), 1},
                            Item{2, 2, std::string("B2"), 1}};
  std::vector<DateDim> date_dim = {DateDim{1, 2001, 11}};
  std::vector<__struct5> filtered = ([&]() {
    std::vector<__struct6> __groups;
    for (auto ss : store_sales) {
      for (auto i : item) {
        if (!(((ss.item == i.i_item_sk) && (i.i_manager_id == 1))))
          continue;
        for (auto d : date_dim) {
          if (!((((ss.sold_date == d.d_date_sk) && (d.d_year == 2001)) &&
                 (d.d_moy == 11))))
            continue;
          auto __key = Filtered{d.d_year, i.i_brand_id, i.i_brand};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct5{ss, i, d});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct6{__key, std::vector<__struct5>{__struct5{ss, i, d}}});
          }
        }
      }
    }
    std::vector<__struct7> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct7{
          g.key.year, g.key.brand_id, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct5>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct5> result = ([&]() {
    std::vector<
        std::pair<decltype(std::declval<__struct5>().d_year), __struct5>>
        __items;
    for (auto r : filtered) {
      __items.push_back({std::vector<decltype(r.d_year)>{
                             r.d_year, (-r.ext_price), r.brand_id},
                         r});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct5> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q52 simplified
  return 0;
}
