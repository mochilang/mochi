// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebReturn {
  decltype(1) wr_returning_customer_sk;
  decltype(1) wr_returned_date_sk;
  decltype(100) wr_return_amt;
  decltype(1) wr_returning_addr_sk;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("C1")) c_customer_id;
  decltype(std::string("John")) c_first_name;
  decltype(std::string("Doe")) c_last_name;
  decltype(1) c_current_addr_sk;
};
struct CustomerTotalReturn {
  decltype(wr.wr_returning_customer_sk) cust;
  decltype(ca.ca_state) state;
};
struct __struct6 {
  decltype(wr) wr;
  decltype(d) d;
  decltype(ca) ca;
};
struct __struct7 {
  CustomerTotalReturn key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.cust) ctr_customer_sk;
  decltype(std::declval<__struct7>().key.state) ctr_state;
  double ctr_total_return;
};
struct __struct9 {
  decltype(std::declval<__struct6>().ctr_state) key;
  std::vector<__struct6> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct AvgByState {
  decltype(std::declval<__struct9>().key) state;
  double avg_return;
};
struct Result {
  decltype(c.c_customer_id) c_customer_id;
  decltype(c.c_first_name) c_first_name;
  decltype(c.c_last_name) c_last_name;
  decltype(std::declval<__struct6>().ctr_total_return) ctr_total_return;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_total_return\":";
  __json(v.ctr_total_return);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_customer_sk\":";
  __json(v.ctr_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_state\":";
  __json(v.ctr_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ctr_total_return\":";
  __json(v.ctr_total_return);
  std::cout << "}";
}
inline void __json(const CustomerTotalReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cust\":";
  __json(v.cust);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const AvgByState &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"state\":";
  __json(v.state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_return\":";
  __json(v.avg_return);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr\":";
  __json(v.wr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  std::cout << "}";
}
inline void __json(const WebReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_returning_customer_sk\":";
  __json(v.wr_returning_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_returned_date_sk\":";
  __json(v.wr_returned_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_return_amt\":";
  __json(v.wr_return_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_returning_addr_sk\":";
  __json(v.wr_returning_addr_sk);
  std::cout << "}";
}
int main() {
  std::vector<WebReturn> web_returns = {
      WebReturn{1, 1, 100, 1}, WebReturn{2, 1, 30, 2}, WebReturn{1, 1, 50, 1}};
  std::vector<DateDim> date_dim = {DateDim{1, 2000}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CA")},
      CustomerAddres{2, std::string("CA")}};
  std::vector<Customer> customer = {
      Customer{1, std::string("C1"), std::string("John"), std::string("Doe"),
               1},
      Customer{2, std::string("C2"), std::string("Jane"), std::string("Smith"),
               2}};
  std::vector<__struct6> customer_total_return = ([&]() {
    std::vector<__struct7> __groups;
    for (auto wr : web_returns) {
      for (auto d : date_dim) {
        if (!((wr.wr_returned_date_sk == d.d_date_sk)))
          continue;
        for (auto ca : customer_address) {
          if (!((wr.wr_returning_addr_sk == ca.ca_address_sk)))
            continue;
          if (!(((d.d_year == 2000) && (ca.ca_state == std::string("CA")))))
            continue;
          auto __key =
              CustomerTotalReturn{wr.wr_returning_customer_sk, ca.ca_state};
          bool __found = false;
          for (auto &__g : __groups) {
            if (__g.key == __key) {
              __g.items.push_back(__struct6{wr, d, ca});
              __found = true;
              break;
            }
          }
          if (!__found) {
            __groups.push_back(
                __struct7{__key, std::vector<__struct6>{__struct6{wr, d, ca}}});
          }
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.cust, g.key.state, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct6>().wr_return_amt)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.wr_return_amt);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct6> avg_by_state = ([&]() {
    std::vector<__struct9> __groups;
    for (auto ctr : customer_total_return) {
      auto __key = ctr.ctr_state;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct6{ctr});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct9{__key, std::vector<__struct6>{__struct6{ctr}}});
      }
    }
    std::vector<AvgByState> __items;
    for (auto &g : __groups) {
      __items.push_back(AvgByState{
          g.key, __avg(([&]() {
            std::vector<decltype(std::declval<__struct6>().ctr_total_return)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ctr_total_return);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto ctr : customer_total_return) {
      for (auto avg : avg_by_state) {
        if (!((ctr.ctr_state == avg.state)))
          continue;
        for (auto c : customer) {
          if (!((ctr.ctr_customer_sk == c.c_customer_sk)))
            continue;
          if (!((ctr.ctr_total_return > (avg.avg_return * 1.2))))
            continue;
          __items.push_back(Result{c.c_customer_id, c.c_first_name,
                                   c.c_last_name, ctr.ctr_total_return});
        }
      }
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q30 simplified
  return 0;
}
