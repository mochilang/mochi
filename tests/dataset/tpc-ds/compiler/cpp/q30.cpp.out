// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> web_returns =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("wr_returning_customer_sk"), any(1)},
              {string("wr_returned_date_sk"), any(1)},
              {string("wr_return_amt"), any(100.0)},
              {string("wr_returning_addr_sk"), any(1)}},
          unordered_map<string, any>{
              {string("wr_returning_customer_sk"), any(2)},
              {string("wr_returned_date_sk"), any(1)},
              {string("wr_return_amt"), any(30.0)},
              {string("wr_returning_addr_sk"), any(2)}},
          unordered_map<string, any>{
              {string("wr_returning_customer_sk"), any(1)},
              {string("wr_returned_date_sk"), any(1)},
              {string("wr_return_amt"), any(50.0)},
              {string("wr_returning_addr_sk"), any(1)}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 2000}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))}},
          unordered_map<string, any>{{string("ca_address_sk"), any(2)},
                                     {string("ca_state"), any(string("CA"))}}};
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("c_customer_sk"), any(1)},
              {string("c_customer_id"), any(string("C1"))},
              {string("c_first_name"), any(string("John"))},
              {string("c_last_name"), any(string("Doe"))},
              {string("c_current_addr_sk"), any(1)}},
          unordered_map<string, any>{
              {string("c_customer_sk"), any(2)},
              {string("c_customer_id"), any(string("C2"))},
              {string("c_first_name"), any(string("Jane"))},
              {string("c_last_name"), any(string("Smith"))},
              {string("c_current_addr_sk"), any(2)}}};
  struct GroupKey0 {
    unordered_map<string, any> cust;
    unordered_map<string, any> state;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.cust == b.cust && a.state == b.state;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.cust);
      _hash_combine(h, k.state);
      return h;
    }
  };
  } // namespace std

  auto customer_total_return = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &wr : web_returns) {
      for (auto &d : date_dim) {
        if (!(wr["wr_returned_date_sk"] == d["d_date_sk"]))
          continue;
        for (auto &ca : customer_address) {
          if (!(wr["wr_returning_addr_sk"] == ca["ca_address_sk"]))
            continue;
          if (d["d_year"] == 2000 && ca["ca_state"] == string("CA")) {
            KeyT _k = GroupKey0{wr["wr_returning_customer_sk"], ca["ca_state"]};
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(wr);
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("ctr_customer_sk"), any(g.key.cust)},
          {string("ctr_state"), any(g.key.state)},
          {string("ctr_total_return"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["wr_return_amt"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto avg_by_state = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = customer_total_return;
    auto _groups = _group_by(_src, [&](auto &ctr) { return ctr["ctr_state"]; });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("state"), any(g.key)},
          {string("avg_return"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ctr_total_return"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        for (auto &ctr : customer_total_return) {
          for (auto &avg : avg_by_state) {
            if (!(ctr["ctr_state"] == avg["state"]))
              continue;
            for (auto &c : customer) {
              if (!(ctr["ctr_customer_sk"] == c["c_customer_sk"]))
                continue;
              if (ctr["ctr_total_return"] > avg["avg_return"] * 1.2) {
                _res.push_back(
                    unordered_map<string, unordered_map<string, any>>{
                        {string("c_customer_id"), c["c_customer_id"]},
                        {string("c_first_name"), c["c_first_name"]},
                        {string("c_last_name"), c["c_last_name"]},
                        {string("ctr_total_return"), ctr["ctr_total_return"]}});
              }
            }
          }
        }
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q30_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("c_customer_id"), any(string("C1"))},
              {string("c_first_name"), any(string("John"))},
              {string("c_last_name"), any(string("Doe"))},
              {string("ctr_total_return"), any(150.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q30_simplified();
  return 0;
}
