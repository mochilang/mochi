// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  int ws_sold_time_sk;
  int ws_ship_hdemo_sk;
  int ws_web_page_sk;
};
struct WebSale {
  decltype(1) ws_sold_time_sk;
  decltype(1) ws_ship_hdemo_sk;
  decltype(10) ws_web_page_sk;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(2) hd_dep_count;
};
struct TimeDim {
  decltype(1) t_time_sk;
  decltype(7) t_hour;
};
struct WebPage {
  decltype(10) wp_web_page_sk;
  decltype(5100) wp_char_count;
};
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_time_sk\":";
  __json(v.ws_sold_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_hdemo_sk\":";
  __json(v.ws_ship_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_web_page_sk\":";
  __json(v.ws_web_page_sk);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const TimeDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_time_sk\":";
  __json(v.t_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  std::cout << "}";
}
inline void __json(const WebPage &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wp_web_page_sk\":";
  __json(v.wp_web_page_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wp_char_count\":";
  __json(v.wp_char_count);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_time_sk\":";
  __json(v.ws_sold_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_hdemo_sk\":";
  __json(v.ws_ship_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_web_page_sk\":";
  __json(v.ws_web_page_sk);
  std::cout << "}";
}
int main() {
  std::vector<WebSale> web_sales = {WebSale{1, 1, 10}, WebSale{1, 1, 10},
                                    WebSale{2, 1, 10}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 2}};
  std::vector<TimeDim> time_dim = {TimeDim{1, 7}, TimeDim{2, 14}};
  std::vector<WebPage> web_page = {WebPage{10, 5100}};
  auto amc = ((int)([&]() {
                std::vector<decltype(ws)> __items;
                for (auto ws : web_sales) {
                  for (auto hd : household_demographics) {
                    if (!((ws.ws_ship_hdemo_sk == hd.hd_demo_sk)))
                      continue;
                    for (auto t : time_dim) {
                      if (!((ws.ws_sold_time_sk == t.t_time_sk)))
                        continue;
                      for (auto wp : web_page) {
                        if (!((ws.ws_web_page_sk == wp.wp_web_page_sk)))
                          continue;
                        if (!((((((t.t_hour >= 7) && (t.t_hour <= 8)) &&
                                 (hd.hd_dep_count == 2)) &&
                                (wp.wp_char_count >= 5000)) &&
                               (wp.wp_char_count <= 5200))))
                          continue;
                        __items.push_back(ws);
                      }
                    }
                  }
                }
                return __items;
              })()
                  .size());
  auto pmc = ((int)([&]() {
                std::vector<decltype(ws)> __items;
                for (auto ws : web_sales) {
                  for (auto hd : household_demographics) {
                    if (!((ws.ws_ship_hdemo_sk == hd.hd_demo_sk)))
                      continue;
                    for (auto t : time_dim) {
                      if (!((ws.ws_sold_time_sk == t.t_time_sk)))
                        continue;
                      for (auto wp : web_page) {
                        if (!((ws.ws_web_page_sk == wp.wp_web_page_sk)))
                          continue;
                        if (!((((((t.t_hour >= 14) && (t.t_hour <= 15)) &&
                                 (hd.hd_dep_count == 2)) &&
                                (wp.wp_char_count >= 5000)) &&
                               (wp.wp_char_count <= 5200))))
                          continue;
                        __items.push_back(ws);
                      }
                    }
                  }
                }
                return __items;
              })()
                  .size());
  auto result = ((amc) / (pmc));
  (__json(result));
  // test TPCDS Q90 ratio
  return 0;
}
