// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) ss_ticket_number;
  decltype(1) ss_customer_sk;
  decltype(1) ss_addr_sk;
  decltype(1) ss_hdemo_sk;
  decltype(1) ss_store_sk;
  decltype(1) ss_sold_date_sk;
  decltype(5) ss_coupon_amt;
  decltype(20) ss_net_profit;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(6) d_dow;
  decltype(2020) d_year;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("CityA")) s_city;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(2) hd_dep_count;
  decltype(0) hd_vehicle_count;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("Portland")) ca_city;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("Doe")) c_last_name;
  decltype(std::string("John")) c_first_name;
  decltype(2) c_current_addr_sk;
};
struct Dn {
  decltype(ss.ss_ticket_number) ss_ticket_number;
  decltype(ss.ss_customer_sk) ss_customer_sk;
  decltype(ca.ca_city) ca_city;
};
struct __struct8 {
  decltype(ss) ss;
  decltype(d) d;
  decltype(s) s;
  decltype(hd) hd;
  decltype(ca) ca;
};
struct __struct9 {
  Dn key;
  std::vector<__struct8> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key.ss_ticket_number) ss_ticket_number;
  decltype(std::declval<__struct9>().key.ss_customer_sk) ss_customer_sk;
  decltype(std::declval<__struct9>().key.ca_city) bought_city;
  double amt;
  double profit;
};
struct Base {
  decltype(c.c_last_name) c_last_name;
  decltype(c.c_first_name) c_first_name;
  decltype(current_addr.ca_city) ca_city;
  decltype(std::declval<__struct8>().bought_city) bought_city;
  decltype(std::declval<__struct8>().ss_ticket_number) ss_ticket_number;
  decltype(std::declval<__struct8>().amt) amt;
  decltype(std::declval<__struct8>().profit) profit;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  std::cout << "}";
}
inline void __json(const Base &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_city\":";
  __json(v.ca_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bought_city\":";
  __json(v.bought_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_city\":";
  __json(v.ca_city);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_dow\":";
  __json(v.d_dow);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_vehicle_count\":";
  __json(v.hd_vehicle_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_city\":";
  __json(v.s_city);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bought_city\":";
  __json(v.bought_city);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"amt\":";
  __json(v.amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"profit\":";
  __json(v.profit);
  std::cout << "}";
}
inline void __json(const Dn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_city\":";
  __json(v.ca_city);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_addr_sk\":";
  __json(v.ss_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_coupon_amt\":";
  __json(v.ss_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_profit\":";
  __json(v.ss_net_profit);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd\":";
  __json(v.hd);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 1, 1, 5, 20}};
  std::vector<DateDim> date_dim = {DateDim{1, 6, 2020}};
  std::vector<Store> store = {Store{1, std::string("CityA")}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 2, 0}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("Portland")},
      CustomerAddres{2, std::string("Seattle")}};
  std::vector<Customer> customer = {
      Customer{1, std::string("Doe"), std::string("John"), 2}};
  auto depcnt = 2;
  auto vehcnt = 0;
  auto year = 2020;
  std::vector<std::string> cities = {std::string("CityA")};
  std::vector<__struct8> dn = ([&]() {
    std::vector<__struct9> __groups;
    for (auto ss : store_sales) {
      for (auto d : date_dim) {
        if (!((ss.ss_sold_date_sk == d.d_date_sk)))
          continue;
        for (auto s : store) {
          if (!((ss.ss_store_sk == s.s_store_sk)))
            continue;
          for (auto hd : household_demographics) {
            if (!((ss.ss_hdemo_sk == hd.hd_demo_sk)))
              continue;
            for (auto ca : customer_address) {
              if (!((ss.ss_addr_sk == ca.ca_address_sk)))
                continue;
              if (!(((((((hd.hd_dep_count == depcnt) ||
                         (hd.hd_vehicle_count == vehcnt))) &&
                       (std::find(std::vector<int>{6, 0}.begin(),
                                  std::vector<int>{6, 0}.end(),
                                  d.d_dow) != std::vector<int>{6, 0}.end())) &&
                      (d.d_year == year)) &&
                     (std::find(cities.begin(), cities.end(), s.s_city) !=
                      cities.end()))))
                continue;
              auto __key =
                  Dn{ss.ss_ticket_number, ss.ss_customer_sk, ca.ca_city};
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(__struct8{ss, d, s, hd, ca});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct9{
                    __key,
                    std::vector<__struct8>{__struct8{ss, d, s, hd, ca}}});
              }
            }
          }
        }
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key.ss_ticket_number, g.key.ss_customer_sk, g.key.ca_city,
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct8>().ss.ss_coupon_amt)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_coupon_amt);
            }
            return __items;
          })()),
          ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct8>().ss.ss_net_profit)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss.ss_net_profit);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Base> base = ([&]() {
    std::vector<
        std::pair<decltype(std::declval<__struct8>().bought_city), Base>>
        __items;
    for (auto dnrec : dn) {
      for (auto c : customer) {
        if (!((dnrec.ss_customer_sk == c.c_customer_sk)))
          continue;
        for (auto current_addr : customer_address) {
          if (!((c.c_current_addr_sk == current_addr.ca_address_sk)))
            continue;
          if (!((current_addr.ca_city != dnrec.bought_city)))
            continue;
          __items.push_back(
              {std::vector<decltype(c.c_last_name)>{
                   c.c_last_name, c.c_first_name, current_addr.ca_city,
                   dnrec.bought_city, dnrec.ss_ticket_number},
               Base{c.c_last_name, c.c_first_name, current_addr.ca_city,
                    dnrec.bought_city, dnrec.ss_ticket_number, dnrec.amt,
                    dnrec.profit}});
        }
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Base> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  std::vector<Base> result = base;
  (__json(result));
  // test TPCDS Q46 simplified
  return 0;
}
