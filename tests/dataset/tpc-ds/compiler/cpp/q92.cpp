// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  int ws_item_sk;
  int ws_sold_date_sk;
  float ws_ext_discount_amt;
};
struct WebSale {
  decltype(1) ws_item_sk;
  decltype(1) ws_sold_date_sk;
  decltype(1) ws_ext_discount_amt;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(1) i_manufact_id;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2000-01-02")) d_date;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_discount_amt\":";
  __json(v.ws_ext_discount_amt);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manufact_id\":";
  __json(v.i_manufact_id);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_item_sk\":";
  __json(v.ws_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_discount_amt\":";
  __json(v.ws_ext_discount_amt);
  std::cout << "}";
}
int main() {
  std::vector<WebSale> web_sales = {WebSale{1, 1, 1}, WebSale{1, 1, 1},
                                    WebSale{1, 1, 2}};
  std::vector<Item> item = {Item{1, 1}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2000-01-02")}};
  auto sum_amt = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(ws.ws_ext_discount_amt)> __items;
    for (auto ws : web_sales) {
      __items.push_back(ws.ws_ext_discount_amt);
    }
    return __items;
  })());
  auto avg_amt = __avg(([&]() {
    std::vector<decltype(ws.ws_ext_discount_amt)> __items;
    for (auto ws : web_sales) {
      __items.push_back(ws.ws_ext_discount_amt);
    }
    return __items;
  })());
  auto result = ((sum_amt > (avg_amt * 1.3)) ? sum_amt : 0);
  (__json(result));
  // test TPCDS Q92 threshold
  return 0;
}
