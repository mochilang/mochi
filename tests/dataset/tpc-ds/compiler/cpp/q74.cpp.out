// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _concat(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  res.reserve(a.size() + b.size());
  res.insert(res.end(), a.begin(), a.end());
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("c_customer_sk"), any(1)},
          {string("c_customer_id"), any(1)},
          {string("c_first_name"), any(string("Alice"))},
          {string("c_last_name"), any(string("Smith"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("d_date_sk"), 1},
                                     {string("d_year"), 1998}},
          unordered_map<string, int>{{string("d_date_sk"), 2},
                                     {string("d_year"), 1999}}};
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_customer_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(1)},
                                     {string("ss_net_paid"), any(100.0)}},
          unordered_map<string, any>{{string("ss_customer_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(2)},
                                     {string("ss_net_paid"), any(110.0)}}};
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_bill_customer_sk"), any(1)},
                                     {string("ws_sold_date_sk"), any(1)},
                                     {string("ws_net_paid"), any(40.0)}},
          unordered_map<string, any>{{string("ws_bill_customer_sk"), any(1)},
                                     {string("ws_sold_date_sk"), any(2)},
                                     {string("ws_net_paid"), any(80.0)}}};
  struct GroupKey0 {
    unordered_map<string, any> id;
    unordered_map<string, any> first;
    unordered_map<string, any> last;
    unordered_map<string, int> year;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.id == b.id && a.first == b.first && a.last == b.last &&
           a.year == b.year;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.first);
      _hash_combine(h, k.last);
      _hash_combine(h, k.year);
      return h;
    }
  };
  } // namespace std

  struct GroupKey1 {
    unordered_map<string, any> id;
    unordered_map<string, any> first;
    unordered_map<string, any> last;
    unordered_map<string, int> year;
  };
  inline bool operator==(const GroupKey1 &a, const GroupKey1 &b) {
    return a.id == b.id && a.first == b.first && a.last == b.last &&
           a.year == b.year;
  }
  namespace std {
  template <> struct hash<GroupKey1> {
    size_t operator()(const GroupKey1 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.first);
      _hash_combine(h, k.last);
      _hash_combine(h, k.year);
      return h;
    }
  };
  } // namespace std

  auto year_total = _concat(
      ([&]() -> vector<unordered_map<string, any>> {
        using ElemT = unordered_map<string, any>;
        using KeyT = GroupKey0;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &c : customer) {
          for (auto &ss : store_sales) {
            if (!(c["c_customer_sk"] == ss["ss_customer_sk"]))
              continue;
            for (auto &d : date_dim) {
              if (!(d["d_date_sk"] == ss["ss_sold_date_sk"]))
                continue;
              if (d["d_year"] == 1998 || d["d_year"] == 1999) {
                KeyT _k = GroupKey0{c["c_customer_id"], c["c_first_name"],
                                    c["c_last_name"], d["d_year"]};
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(c);
              }
            }
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<string, any>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<string, any>{
              {string("customer_id"), any(g.key.id)},
              {string("customer_first_name"), any(g.key.first)},
              {string("customer_last_name"), any(g.key.last)},
              {string("year"), any(g.key.year)},
              {string("year_total"), any(_sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(x.ss.ss_net_paid);
                 }
                 return _res;
               })()))},
              {string("sale_type"), any(string("s"))}});
        }
        return _res;
      })(),
      ([&]() -> vector<unordered_map<string, any>> {
        using ElemT = unordered_map<string, any>;
        using KeyT = GroupKey1;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &c : customer) {
          for (auto &ws : web_sales) {
            if (!(c["c_customer_sk"] == ws["ws_bill_customer_sk"]))
              continue;
            for (auto &d : date_dim) {
              if (!(d["d_date_sk"] == ws["ws_sold_date_sk"]))
                continue;
              if (d["d_year"] == 1998 || d["d_year"] == 1999) {
                KeyT _k = GroupKey1{c["c_customer_id"], c["c_first_name"],
                                    c["c_last_name"], d["d_year"]};
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(c);
              }
            }
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<string, any>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<string, any>{
              {string("customer_id"), any(g.key.id)},
              {string("customer_first_name"), any(g.key.first)},
              {string("customer_last_name"), any(g.key.last)},
              {string("year"), any(g.key.year)},
              {string("year_total"), any(_sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(x.ws.ws_net_paid);
                 }
                 return _res;
               })()))},
              {string("sale_type"), any(string("w"))}});
        }
        return _res;
      })());
  auto s_firstyear = first(([&]() -> vector<any> {
    vector<any> _res;
    for (auto &y : year_total) {
      if (_cast<unordered_map<string, any>>(y)["sale_type"] == string("s") &&
          _cast<unordered_map<string, any>>(y)["year"] == 1998) {
        _res.push_back(y);
      }
    }
    return _res;
  })());
  auto s_secyear = first(([&]() -> vector<any> {
    vector<any> _res;
    for (auto &y : year_total) {
      if (_cast<unordered_map<string, any>>(y)["sale_type"] == string("s") &&
          _cast<unordered_map<string, any>>(y)["year"] == 1999) {
        _res.push_back(y);
      }
    }
    return _res;
  })());
  auto w_firstyear = first(([&]() -> vector<any> {
    vector<any> _res;
    for (auto &y : year_total) {
      if (_cast<unordered_map<string, any>>(y)["sale_type"] == string("w") &&
          _cast<unordered_map<string, any>>(y)["year"] == 1998) {
        _res.push_back(y);
      }
    }
    return _res;
  })());
  auto w_secyear = first(([&]() -> vector<any> {
    vector<any> _res;
    for (auto &y : year_total) {
      if (_cast<unordered_map<string, any>>(y)["sale_type"] == string("w") &&
          _cast<unordered_map<string, any>>(y)["year"] == 1999) {
        _res.push_back(y);
      }
    }
    return _res;
  })());
  auto result = ([&]() {
    if (_cast<unordered_map<string, any>>(s_firstyear)["year_total"] > 0 &&
        _cast<unordered_map<string, any>>(w_firstyear)["year_total"] > 0 &&
        (_cast<unordered_map<string, any>>(w_secyear)["year_total"] /
         _cast<unordered_map<string, any>>(w_firstyear)["year_total"]) >
            (_cast<unordered_map<string, any>>(s_secyear)["year_total"] /
             _cast<unordered_map<string, any>>(s_firstyear)["year_total"]))
      return vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("customer_id"),
           _cast<unordered_map<string, any>>(s_secyear)["customer_id"]},
          {string("customer_first_name"),
           _cast<unordered_map<string, any>>(s_secyear)["customer_first_name"]},
          {string("customer_last_name"),
           _cast<unordered_map<string, any>>(
               s_secyear)["customer_last_name"]}}};
    return vector<int>{};
  })();
  _json(result);
  auto test_TPCDS_Q74_simplified = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("customer_id"), any(1)},
              {string("customer_first_name"), any(string("Alice"))},
              {string("customer_last_name"), any(string("Smith"))}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q74_simplified();
  return 0;
}
