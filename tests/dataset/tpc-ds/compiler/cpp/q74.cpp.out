// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) c_customer_sk;
  decltype(1) c_customer_id;
  decltype(std::string("Alice")) c_first_name;
  decltype(std::string("Smith")) c_last_name;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1998) d_year;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
  decltype(100) ss_net_paid;
};
struct WebSale {
  decltype(1) ws_bill_customer_sk;
  decltype(1) ws_sold_date_sk;
  decltype(40) ws_net_paid;
};
struct YearTotal {
  decltype(c.c_customer_id) id;
  decltype(c.c_first_name) first;
  decltype(c.c_last_name) last;
  decltype(d.d_year) year;
};
struct __struct6 {
  decltype(c) c;
  decltype(ss) ss;
  decltype(d) d;
};
struct __struct7 {
  YearTotal key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.id) customer_id;
  decltype(std::declval<__struct7>().key.first) customer_first_name;
  decltype(std::declval<__struct7>().key.last) customer_last_name;
  decltype(std::declval<__struct7>().key.year) year;
  double year_total;
  decltype(std::string("s")) sale_type;
};
struct __struct9 {
  decltype(c) c;
  decltype(ws) ws;
  decltype(d) d;
};
struct __struct10 {
  YearTotal key;
  std::vector<__struct9> items;
};
struct Result {
  decltype(std::declval<__struct6>().customer_id) customer_id;
  decltype(std::declval<__struct6>().customer_first_name) customer_first_name;
  decltype(std::declval<__struct6>().customer_last_name) customer_last_name;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_id\":";
  __json(v.customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_first_name\":";
  __json(v.customer_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_last_name\":";
  __json(v.customer_last_name);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_id\":";
  __json(v.customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_first_name\":";
  __json(v.customer_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_last_name\":";
  __json(v.customer_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year_total\":";
  __json(v.year_total);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sale_type\":";
  __json(v.sale_type);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const YearTotal &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"first\":";
  __json(v.first);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"last\":";
  __json(v.last);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_paid\":";
  __json(v.ss_net_paid);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws\":";
  __json(v.ws);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_net_paid\":";
  __json(v.ws_net_paid);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {
      Customer{1, 1, std::string("Alice"), std::string("Smith")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1998}, DateDim{2, 1999}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 100},
                                        StoreSale{1, 2, 110}};
  std::vector<WebSale> web_sales = {WebSale{1, 1, 40}, WebSale{1, 2, 80}};
  std::vector<__struct6> year_total = concat(
      ([&]() {
        std::vector<__struct7> __groups;
        for (auto c : customer) {
          for (auto ss : store_sales) {
            if (!((c.c_customer_sk == ss.ss_customer_sk)))
              continue;
            for (auto d : date_dim) {
              if (!((d.d_date_sk == ss.ss_sold_date_sk)))
                continue;
              if (!(((d.d_year == 1998) || (d.d_year == 1999))))
                continue;
              auto __key = YearTotal{c.c_customer_id, c.c_first_name,
                                     c.c_last_name, d.d_year};
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(__struct6{c, ss, d});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct7{
                    __key, std::vector<__struct6>{__struct6{c, ss, d}}});
              }
            }
          }
        }
        std::vector<__struct8> __items;
        for (auto &g : __groups) {
          __items.push_back(__struct8{
              g.key.id, g.key.first, g.key.last, g.key.year, ([&](auto v) {
                return std::accumulate(v.begin(), v.end(), 0.0);
              })(([&]() {
                std::vector<decltype(std::declval<__struct6>().ss.ss_net_paid)>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(x.ss.ss_net_paid);
                }
                return __items;
              })()),
              std::string("s")});
        }
        return __items;
      })(),
      ([&]() {
        std::vector<__struct10> __groups;
        for (auto c : customer) {
          for (auto ws : web_sales) {
            if (!((c.c_customer_sk == ws.ws_bill_customer_sk)))
              continue;
            for (auto d : date_dim) {
              if (!((d.d_date_sk == ws.ws_sold_date_sk)))
                continue;
              if (!(((d.d_year == 1998) || (d.d_year == 1999))))
                continue;
              auto __key = YearTotal{c.c_customer_id, c.c_first_name,
                                     c.c_last_name, d.d_year};
              bool __found = false;
              for (auto &__g : __groups) {
                if (__g.key == __key) {
                  __g.items.push_back(__struct9{c, ws, d});
                  __found = true;
                  break;
                }
              }
              if (!__found) {
                __groups.push_back(__struct10{
                    __key, std::vector<__struct9>{__struct9{c, ws, d}}});
              }
            }
          }
        }
        std::vector<__struct8> __items;
        for (auto &g : __groups) {
          __items.push_back(__struct8{
              g.key.id, g.key.first, g.key.last, g.key.year, ([&](auto v) {
                return std::accumulate(v.begin(), v.end(), 0.0);
              })(([&]() {
                std::vector<decltype(std::declval<__struct9>().ws.ws_net_paid)>
                    __items;
                for (auto x : g.items) {
                  __items.push_back(x.ws.ws_net_paid);
                }
                return __items;
              })()),
              std::string("w")});
        }
        return __items;
      })());
  auto s_firstyear = first(([&]() {
    std::vector<__struct6> __items;
    for (auto y : year_total) {
      if (!(((y.sale_type == std::string("s")) && (y.year == 1998))))
        continue;
      __items.push_back(y);
    }
    return __items;
  })());
  auto s_secyear = first(([&]() {
    std::vector<__struct6> __items;
    for (auto y : year_total) {
      if (!(((y.sale_type == std::string("s")) && (y.year == 1999))))
        continue;
      __items.push_back(y);
    }
    return __items;
  })());
  auto w_firstyear = first(([&]() {
    std::vector<__struct6> __items;
    for (auto y : year_total) {
      if (!(((y.sale_type == std::string("w")) && (y.year == 1998))))
        continue;
      __items.push_back(y);
    }
    return __items;
  })());
  auto w_secyear = first(([&]() {
    std::vector<__struct6> __items;
    for (auto y : year_total) {
      if (!(((y.sale_type == std::string("w")) && (y.year == 1999))))
        continue;
      __items.push_back(y);
    }
    return __items;
  })());
  auto result =
      ((((s_firstyear.year_total > 0) && (w_firstyear.year_total > 0)) &&
        (((w_secyear.year_total / w_firstyear.year_total)) >
         ((s_secyear.year_total / s_firstyear.year_total))))
           ? std::vector<Result>{Result{s_secyear.customer_id,
                                        s_secyear.customer_first_name,
                                        s_secyear.customer_last_name}}
           : std::vector<int>{});
  (__json(result));
  // test TPCDS Q74 simplified
  return 0;
}
