// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(1) item;
  decltype(10) price;
};
struct S {
  decltype(s) s;
};
struct __struct3 {
  decltype(std::declval<S>().item) key;
  std::vector<S> items;
};
struct __struct4 {
  decltype(std::declval<__struct3>().key) item;
  double total;
};
struct S {
  decltype(s) s;
};
struct __struct5 {
  decltype(std::declval<S>().item) key;
  std::vector<S> items;
};
struct S {
  decltype(s) s;
};
struct __struct6 {
  decltype(std::declval<S>().item) key;
  std::vector<S> items;
};
struct Result {
  decltype(u) u;
};
struct __struct8 {
  decltype(std::declval<Result>().item) key;
  std::vector<Result> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key) i_item_id;
  double total_sales;
};
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_sales\":";
  __json(v.total_sales);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const S &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"u\":";
  __json(v.u);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 10}};
  std::vector<StoreSale> catalog_sales = {StoreSale{1, 20}};
  std::vector<StoreSale> web_sales = {StoreSale{1, 30}};
  std::vector<S> ss = ([&]() {
    std::vector<__struct3> __groups;
    for (auto s : store_sales) {
      auto __key = s.item;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(S{s});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<S>{S{s}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(
          __struct4{g.key, ([&](auto v) {
                      return std::accumulate(v.begin(), v.end(), 0.0);
                    })(([&]() {
                      std::vector<decltype(std::declval<S>().price)> __items;
                      for (auto x : g.items) {
                        __items.push_back(x.price);
                      }
                      return __items;
                    })())});
    }
    return __items;
  })();
  std::vector<S> cs = ([&]() {
    std::vector<__struct5> __groups;
    for (auto s : catalog_sales) {
      auto __key = s.item;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(S{s});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct5{__key, std::vector<S>{S{s}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(
          __struct4{g.key, ([&](auto v) {
                      return std::accumulate(v.begin(), v.end(), 0.0);
                    })(([&]() {
                      std::vector<decltype(std::declval<S>().price)> __items;
                      for (auto x : g.items) {
                        __items.push_back(x.price);
                      }
                      return __items;
                    })())});
    }
    return __items;
  })();
  std::vector<S> ws = ([&]() {
    std::vector<__struct6> __groups;
    for (auto s : web_sales) {
      auto __key = s.item;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(S{s});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct6{__key, std::vector<S>{S{s}}});
      }
    }
    std::vector<__struct4> __items;
    for (auto &g : __groups) {
      __items.push_back(
          __struct4{g.key, ([&](auto v) {
                      return std::accumulate(v.begin(), v.end(), 0.0);
                    })(([&]() {
                      std::vector<decltype(std::declval<S>().price)> __items;
                      for (auto x : g.items) {
                        __items.push_back(x.price);
                      }
                      return __items;
                    })())});
    }
    return __items;
  })();
  auto union = concat(ss, cs, ws);
  std::vector<Result> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto u : union) {
      auto __key = u.item;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Result{u});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct8{__key, std::vector<Result>{Result{u}}});
      }
    }
    std::vector<__struct9> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct9{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Result>().total)> __items;
            for (auto x : g.items) {
              __items.push_back(x.total);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q56 simplified
  return 0;
}
