// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct StoreSale {
  int ss_item_sk;
  int ss_sold_date_sk;
  double ss_ext_sales_price;
};

struct Item {
  int i_item_sk;
  string i_item_id;
  string i_item_desc;
  string i_category;
  string i_class;
  double i_current_price;
};

struct DateDim {
  int d_date_sk;
  string d_date;
};

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_item_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(1)},
                                     {string("ss_ext_sales_price"), any(50.0)}},
          unordered_map<string, any>{
              {string("ss_item_sk"), any(2)},
              {string("ss_sold_date_sk"), any(1)},
              {string("ss_ext_sales_price"), any(100.0)}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("I1"))},
                                 {string("i_item_desc"), any(string("desc1"))},
                                 {string("i_category"), any(string("CatA"))},
                                 {string("i_class"), any(string("Class1"))},
                                 {string("i_current_price"), any(100.0)}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_item_id"), any(string("I2"))},
                                 {string("i_item_desc"), any(string("desc2"))},
                                 {string("i_category"), any(string("CatB"))},
                                 {string("i_class"), any(string("Class1"))},
                                 {string("i_current_price"), any(200.0)}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("d_date_sk"), any(1)},
          {string("d_date"), any(string("2000-02-01"))}}};
  struct GroupKey3 {
    unordered_map<string, any> item_id;
    unordered_map<string, any> item_desc;
    unordered_map<string, any> category;
    unordered_map<string, any> class;
    unordered_map<string, any> price;
  };
  inline bool operator==(const GroupKey3 &a, const GroupKey3 &b) {
    return a.item_id == b.item_id && a.item_desc == b.item_desc &&
           a.category == b.category && a.class == b.class && a.price == b.price;
  }
  namespace std {
  template <> struct hash<GroupKey3> {
    size_t operator()(const GroupKey3 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.item_id);
      _hash_combine(h, k.item_desc);
      _hash_combine(h, k.category);
      _hash_combine(h, k.class);
      _hash_combine(h, k.price);
      return h;
    }
  };
  } // namespace std

  auto grouped = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey3;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ss : store_sales) {
      for (auto &i : item) {
        if (!(ss["ss_item_sk"] == i["i_item_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(ss["ss_sold_date_sk"] == d["d_date_sk"]))
            continue;
          KeyT _k = GroupKey3{i["i_item_id"], i["i_item_desc"], i["i_category"],
                              i["i_class"], i["i_current_price"]};
          if (!groups.count(_k)) {
            groups[_k] = Group{_k, {}};
            order.push_back(_k);
          }
          groups[_k].Items.push_back(ss);
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key.item_id)},
          {string("i_item_desc"), any(g.key.item_desc)},
          {string("i_category"), any(g.key.category)},
          {string("i_class"), any(g.key.class)},
          {string("i_current_price"), any(g.key.price)},
          {string("itemrevenue"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ss_ext_sales_price"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto totals = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = grouped;
    auto _groups = _group_by(_src, [&](auto &g) { return g["i_class"]; });
    vector<unordered_map<string, any>> _res;
    for (auto &cg : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("class"), any(cg.key)},
          {string("total"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : cg) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["itemrevenue"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        for (auto &g : grouped) {
          for (auto &t : totals) {
            if (!(g["i_class"] == t["class"]))
              continue;
            _res.push_back(unordered_map<string, unordered_map<string, any>>{
                {string("i_item_id"), g["i_item_id"]},
                {string("i_item_desc"), g["i_item_desc"]},
                {string("i_category"), g["i_category"]},
                {string("i_class"), g["i_class"]},
                {string("i_current_price"), g["i_current_price"]},
                {string("itemrevenue"), g["itemrevenue"]},
                {string("revenueratio"), g["itemrevenue"] * 100 / t["total"]}});
          }
        }
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q98_revenue = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{
              unordered_map<string, any>{
                  {string("i_item_id"), any(string("I1"))},
                  {string("i_item_desc"), any(string("desc1"))},
                  {string("i_category"), any(string("CatA"))},
                  {string("i_class"), any(string("Class1"))},
                  {string("i_current_price"), any(100.0)},
                  {string("itemrevenue"), any(50.0)},
                  {string("revenueratio"), any(33.333333333333336)}},
              unordered_map<string, any>{
                  {string("i_item_id"), any(string("I2"))},
                  {string("i_item_desc"), any(string("desc2"))},
                  {string("i_category"), any(string("CatB"))},
                  {string("i_class"), any(string("Class1"))},
                  {string("i_current_price"), any(200.0)},
                  {string("itemrevenue"), any(100.0)},
                  {string("revenueratio"), any(66.66666666666667)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q98_revenue();
  return 0;
}
