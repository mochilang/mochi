// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
vector<T> _union_all(const vector<T> &a, const vector<T> &b) {
  vector<T> res = a;
  res.insert(res.end(), b.begin(), b.end());
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<any> customer = vector<any>{};
  vector<any> store_sales = vector<any>{};
  vector<any> catalog_sales = vector<any>{};
  vector<any> web_sales = vector<any>{};
  vector<any> date_dim = vector<any>{};
  struct GroupKey0 {
    any id;
    any first;
    any last;
    any login;
    any year;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.id == b.id && a.first == b.first && a.last == b.last &&
           a.login == b.login && a.year == b.year;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.first);
      _hash_combine(h, k.last);
      _hash_combine(h, k.login);
      _hash_combine(h, k.year);
      return h;
    }
  };
  } // namespace std

  struct GroupKey1 {
    any id;
    any first;
    any last;
    any login;
    any year;
  };
  inline bool operator==(const GroupKey1 &a, const GroupKey1 &b) {
    return a.id == b.id && a.first == b.first && a.last == b.last &&
           a.login == b.login && a.year == b.year;
  }
  namespace std {
  template <> struct hash<GroupKey1> {
    size_t operator()(const GroupKey1 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.first);
      _hash_combine(h, k.last);
      _hash_combine(h, k.login);
      _hash_combine(h, k.year);
      return h;
    }
  };
  } // namespace std

  struct GroupKey2 {
    any id;
    any first;
    any last;
    any login;
    any year;
  };
  inline bool operator==(const GroupKey2 &a, const GroupKey2 &b) {
    return a.id == b.id && a.first == b.first && a.last == b.last &&
           a.login == b.login && a.year == b.year;
  }
  namespace std {
  template <> struct hash<GroupKey2> {
    size_t operator()(const GroupKey2 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.id);
      _hash_combine(h, k.first);
      _hash_combine(h, k.last);
      _hash_combine(h, k.login);
      _hash_combine(h, k.year);
      return h;
    }
  };
  } // namespace std

  auto year_total = _union_all(
      _union_all(
          (([&]() -> vector<unordered_map<string, any>> {
            using ElemT = any;
            using KeyT = GroupKey0;
            struct Group {
              KeyT Key;
              vector<ElemT> Items;
            };
            unordered_map<KeyT, Group> groups;
            vector<KeyT> order;
            for (auto &c : customer) {
              for (auto &s : store_sales) {
                if (!(_cast<unordered_map<string, any>>(c)["c_customer_sk"] ==
                      _cast<unordered_map<string, any>>(s)["ss_customer_sk"]))
                  continue;
                for (auto &d : date_dim) {
                  if (!(_cast<unordered_map<string, any>>(
                            s)["ss_sold_date_sk"] ==
                        _cast<unordered_map<string, any>>(d)["d_date_sk"]))
                    continue;
                  KeyT _k = GroupKey0{
                      _cast<unordered_map<string, any>>(c)["c_customer_id"],
                      _cast<unordered_map<string, any>>(c)["c_first_name"],
                      _cast<unordered_map<string, any>>(c)["c_last_name"],
                      _cast<unordered_map<string, any>>(c)["c_login"],
                      _cast<unordered_map<string, any>>(d)["d_year"]};
                  if (!groups.count(_k)) {
                    groups[_k] = Group{_k, {}};
                    order.push_back(_k);
                  }
                  groups[_k].Items.push_back(c);
                }
              }
            }
            vector<Group *> items;
            for (auto &_k : order)
              items.push_back(&groups[_k]);
            vector<unordered_map<string, any>> _res;
            for (auto *g : items) {
              _res.push_back(unordered_map<string, any>{
                  {string("customer_id"), any(g.key.id)},
                  {string("customer_first_name"), any(g.key.first)},
                  {string("customer_last_name"), any(g.key.last)},
                  {string("customer_login"), any(g.key.login)},
                  {string("dyear"), any(g.key.year)},
                  {string("year_total"), any(_sum(([&]() -> vector<any> {
                     vector<any> _res;
                     for (auto &x : g) {
                       _res.push_back(any(((_cast<unordered_map<string, any>>(
                                                x)["ss_ext_list_price"] -
                                            _cast<unordered_map<string, any>>(
                                                x)["ss_ext_wholesale_cost"] -
                                            _cast<unordered_map<string, any>>(
                                                x)["ss_ext_discount_amt"]) +
                                           _cast<unordered_map<string, any>>(
                                               x)["ss_ext_sales_price"]) /
                                          2));
                     }
                     return _res;
                   })()))},
                  {string("sale_type"), any(string("s"))}});
            }
            return _res;
          })()),
          (([&]() -> vector<unordered_map<string, any>> {
            using ElemT = any;
            using KeyT = GroupKey1;
            struct Group {
              KeyT Key;
              vector<ElemT> Items;
            };
            unordered_map<KeyT, Group> groups;
            vector<KeyT> order;
            for (auto &c : customer) {
              for (auto &cs : catalog_sales) {
                if (!(_cast<unordered_map<string, any>>(c)["c_customer_sk"] ==
                      _cast<unordered_map<string, any>>(
                          cs)["cs_bill_customer_sk"]))
                  continue;
                for (auto &d : date_dim) {
                  if (!(_cast<unordered_map<string, any>>(
                            cs)["cs_sold_date_sk"] ==
                        _cast<unordered_map<string, any>>(d)["d_date_sk"]))
                    continue;
                  KeyT _k = GroupKey1{
                      _cast<unordered_map<string, any>>(c)["c_customer_id"],
                      _cast<unordered_map<string, any>>(c)["c_first_name"],
                      _cast<unordered_map<string, any>>(c)["c_last_name"],
                      _cast<unordered_map<string, any>>(c)["c_login"],
                      _cast<unordered_map<string, any>>(d)["d_year"]};
                  if (!groups.count(_k)) {
                    groups[_k] = Group{_k, {}};
                    order.push_back(_k);
                  }
                  groups[_k].Items.push_back(c);
                }
              }
            }
            vector<Group *> items;
            for (auto &_k : order)
              items.push_back(&groups[_k]);
            vector<unordered_map<string, any>> _res;
            for (auto *g : items) {
              _res.push_back(unordered_map<string, any>{
                  {string("customer_id"), any(g.key.id)},
                  {string("customer_first_name"), any(g.key.first)},
                  {string("customer_last_name"), any(g.key.last)},
                  {string("customer_login"), any(g.key.login)},
                  {string("dyear"), any(g.key.year)},
                  {string("year_total"), any(_sum(([&]() -> vector<any> {
                     vector<any> _res;
                     for (auto &x : g) {
                       _res.push_back(any(((_cast<unordered_map<string, any>>(
                                                x)["cs_ext_list_price"] -
                                            _cast<unordered_map<string, any>>(
                                                x)["cs_ext_wholesale_cost"] -
                                            _cast<unordered_map<string, any>>(
                                                x)["cs_ext_discount_amt"]) +
                                           _cast<unordered_map<string, any>>(
                                               x)["cs_ext_sales_price"]) /
                                          2));
                     }
                     return _res;
                   })()))},
                  {string("sale_type"), any(string("c"))}});
            }
            return _res;
          })())),
      (([&]() -> vector<unordered_map<string, any>> {
        using ElemT = any;
        using KeyT = GroupKey2;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &c : customer) {
          for (auto &ws : web_sales) {
            if (!(_cast<unordered_map<string, any>>(c)["c_customer_sk"] ==
                  _cast<unordered_map<string, any>>(ws)["ws_bill_customer_sk"]))
              continue;
            for (auto &d : date_dim) {
              if (!(_cast<unordered_map<string, any>>(ws)["ws_sold_date_sk"] ==
                    _cast<unordered_map<string, any>>(d)["d_date_sk"]))
                continue;
              KeyT _k = GroupKey2{
                  _cast<unordered_map<string, any>>(c)["c_customer_id"],
                  _cast<unordered_map<string, any>>(c)["c_first_name"],
                  _cast<unordered_map<string, any>>(c)["c_last_name"],
                  _cast<unordered_map<string, any>>(c)["c_login"],
                  _cast<unordered_map<string, any>>(d)["d_year"]};
              if (!groups.count(_k)) {
                groups[_k] = Group{_k, {}};
                order.push_back(_k);
              }
              groups[_k].Items.push_back(c);
            }
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<string, any>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<string, any>{
              {string("customer_id"), any(g.key.id)},
              {string("customer_first_name"), any(g.key.first)},
              {string("customer_last_name"), any(g.key.last)},
              {string("customer_login"), any(g.key.login)},
              {string("dyear"), any(g.key.year)},
              {string("year_total"), any(_sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(any(((_cast<unordered_map<string, any>>(
                                            x)["ws_ext_list_price"] -
                                        _cast<unordered_map<string, any>>(
                                            x)["ws_ext_wholesale_cost"] -
                                        _cast<unordered_map<string, any>>(
                                            x)["ws_ext_discount_amt"]) +
                                       _cast<unordered_map<string, any>>(
                                           x)["ws_ext_sales_price"]) /
                                      2));
                 }
                 return _res;
               })()))},
              {string("sale_type"), any(string("w"))}});
        }
        return _res;
      })()));
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<pair<unordered_map<string, unordered_map<string, any>>,
                    unordered_map<string, unordered_map<string, any>>>>
            _tmp;
        for (auto &s1 : year_total) {
          for (auto &s2 : year_total) {
            if (!(s2["customer_id"] == s1["customer_id"]))
              continue;
            for (auto &c1 : year_total) {
              if (!(c1["customer_id"] == s1["customer_id"]))
                continue;
              for (auto &c2 : year_total) {
                if (!(c2["customer_id"] == s1["customer_id"]))
                  continue;
                for (auto &w1 : year_total) {
                  if (!(w1["customer_id"] == s1["customer_id"]))
                    continue;
                  for (auto &w2 : year_total) {
                    if (!(w2["customer_id"] == s1["customer_id"]))
                      continue;
                    if (s1["sale_type"] == string("s") &&
                        c1["sale_type"] == string("c") &&
                        w1["sale_type"] == string("w") &&
                        s2["sale_type"] == string("s") &&
                        c2["sale_type"] == string("c") &&
                        w2["sale_type"] == string("w") && s1["dyear"] == 2001 &&
                        s2["dyear"] == 2002 && c1["dyear"] == 2001 &&
                        c2["dyear"] == 2002 && w1["dyear"] == 2001 &&
                        w2["dyear"] == 2002 && s1["year_total"] > 0 &&
                        c1["year_total"] > 0 && w1["year_total"] > 0 && ()>() &&
                        ()>()) {
                      _tmp.push_back(
                          {vector<unordered_map<string, any>>{
                               s2["customer_id"], s2["customer_first_name"],
                               s2["customer_last_name"], s2["customer_login"]},
                           unordered_map<string, unordered_map<string, any>>{
                               {string("customer_id"), s2["customer_id"]},
                               {string("customer_first_name"),
                                s2["customer_first_name"]},
                               {string("customer_last_name"),
                                s2["customer_last_name"]},
                               {string("customer_login"),
                                s2["customer_login"]}}});
                    }
                  }
                }
              }
            }
          }
        }
        std::sort(_tmp.begin(), _tmp.end(), [](const auto &a, const auto &b) {
          return a.first < b.first;
        });
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        _res.reserve(_tmp.size());
        for (auto &_it : _tmp)
          _res.push_back(_it.second);
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q4_empty = [&]() {
    if (!(result.size() == 0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q4_empty();
  return 0;
}
