// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("C1")) c_customer_id;
  decltype(std::string("Alice")) c_first_name;
  decltype(std::string("A")) c_last_name;
  decltype(std::string("alice")) c_login;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1) ss_sold_date_sk;
  decltype(10) ss_ext_list_price;
  decltype(5) ss_ext_wholesale_cost;
  decltype(0) ss_ext_discount_amt;
  decltype(10) ss_ext_sales_price;
};
struct CatalogSale {
  decltype(1) cs_bill_customer_sk;
  decltype(1) cs_sold_date_sk;
  decltype(10) cs_ext_list_price;
  decltype(2) cs_ext_wholesale_cost;
  decltype(0) cs_ext_discount_amt;
  decltype(10) cs_ext_sales_price;
};
struct WebSale {
  decltype(1) ws_bill_customer_sk;
  decltype(1) ws_sold_date_sk;
  decltype(10) ws_ext_list_price;
  decltype(5) ws_ext_wholesale_cost;
  decltype(0) ws_ext_discount_amt;
  decltype(10) ws_ext_sales_price;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2001) d_year;
};
struct YearTotal {
  decltype(c.c_customer_id) id;
  decltype(c.c_first_name) first;
  decltype(c.c_last_name) last;
  decltype(c.c_login) login;
  decltype(d.d_year) year;
};
struct __struct7 {
  decltype(c) c;
  decltype(s) s;
  decltype(d) d;
};
struct __struct8 {
  YearTotal key;
  std::vector<__struct7> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key.id) customer_id;
  decltype(std::declval<__struct8>().key.first) customer_first_name;
  decltype(std::declval<__struct8>().key.last) customer_last_name;
  decltype(std::declval<__struct8>().key.login) customer_login;
  decltype(std::declval<__struct8>().key.year) dyear;
  double year_total;
  decltype(std::string("s")) sale_type;
};
struct __struct10 {
  decltype(c) c;
  decltype(cs) cs;
  decltype(d) d;
};
struct __struct11 {
  YearTotal key;
  std::vector<__struct10> items;
};
struct __struct12 {
  decltype(c) c;
  decltype(ws) ws;
  decltype(d) d;
};
struct __struct13 {
  YearTotal key;
  std::vector<__struct12> items;
};
struct Result {
  decltype(std::declval<__struct7>().customer_id) customer_id;
  decltype(std::declval<__struct7>().customer_first_name) customer_first_name;
  decltype(std::declval<__struct7>().customer_last_name) customer_last_name;
  decltype(std::declval<__struct7>().customer_login) customer_login;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_id\":";
  __json(v.c_customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_login\":";
  __json(v.c_login);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_list_price\":";
  __json(v.cs_ext_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_wholesale_cost\":";
  __json(v.cs_ext_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_discount_amt\":";
  __json(v.cs_ext_discount_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_ext_sales_price\":";
  __json(v.cs_ext_sales_price);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_id\":";
  __json(v.customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_first_name\":";
  __json(v.customer_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_last_name\":";
  __json(v.customer_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_login\":";
  __json(v.customer_login);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_id\":";
  __json(v.customer_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_first_name\":";
  __json(v.customer_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_last_name\":";
  __json(v.customer_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"customer_login\":";
  __json(v.customer_login);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dyear\":";
  __json(v.dyear);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year_total\":";
  __json(v.year_total);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sale_type\":";
  __json(v.sale_type);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const YearTotal &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"first\":";
  __json(v.first);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"last\":";
  __json(v.last);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"login\":";
  __json(v.login);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_date_sk\":";
  __json(v.ss_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_list_price\":";
  __json(v.ss_ext_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_wholesale_cost\":";
  __json(v.ss_ext_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_discount_amt\":";
  __json(v.ss_ext_discount_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_sales_price\":";
  __json(v.ss_ext_sales_price);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const __struct12 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws\":";
  __json(v.ws);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_sold_date_sk\":";
  __json(v.ws_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_list_price\":";
  __json(v.ws_ext_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_wholesale_cost\":";
  __json(v.ws_ext_wholesale_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_discount_amt\":";
  __json(v.ws_ext_discount_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_sales_price\":";
  __json(v.ws_ext_sales_price);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {
      Customer{1, std::string("C1"), std::string("Alice"), std::string("A"),
               std::string("alice")}};
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 10, 5, 0, 10},
                                        StoreSale{1, 2, 20, 5, 0, 20}};
  std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1, 10, 2, 0, 10},
                                            CatalogSale{1, 2, 30, 2, 0, 30}};
  std::vector<WebSale> web_sales = {WebSale{1, 1, 10, 5, 0, 10},
                                    WebSale{1, 2, 12, 5, 0, 12}};
  std::vector<DateDim> date_dim = {DateDim{1, 2001}, DateDim{2, 2002}};
  std::vector<__struct7> year_total = ([&](auto a, auto b) {
    a.insert(a.end(), b.begin(), b.end());
    std::sort(a.begin(), a.end());
    a.erase(std::unique(a.begin(), a.end()), a.end());
    return a;
  })(([&](auto a, auto b) {
       a.insert(a.end(), b.begin(), b.end());
       std::sort(a.begin(), a.end());
       a.erase(std::unique(a.begin(), a.end()), a.end());
       return a;
     })((([&]() {
          std::vector<__struct8> __groups;
          for (auto c : customer) {
            for (auto s : store_sales) {
              if (!((c.c_customer_sk == s.ss_customer_sk)))
                continue;
              for (auto d : date_dim) {
                if (!((s.ss_sold_date_sk == d.d_date_sk)))
                  continue;
                auto __key = YearTotal{c.c_customer_id, c.c_first_name,
                                       c.c_last_name, c.c_login, d.d_year};
                bool __found = false;
                for (auto &__g : __groups) {
                  if (__g.key == __key) {
                    __g.items.push_back(__struct7{c, s, d});
                    __found = true;
                    break;
                  }
                }
                if (!__found) {
                  __groups.push_back(__struct8{
                      __key, std::vector<__struct7>{__struct7{c, s, d}}});
                }
              }
            }
          }
          std::vector<__struct9> __items;
          for (auto &g : __groups) {
            __items.push_back(__struct9{
                g.key.id, g.key.first, g.key.last, g.key.login, g.key.year,
                ([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype((
                      (((((std::declval<__struct7>().ss_ext_list_price -
                           std::declval<__struct7>().ss_ext_wholesale_cost) -
                          std::declval<__struct7>().ss_ext_discount_amt)) +
                        std::declval<__struct7>().ss_ext_sales_price)) /
                      2))>
                      __items;
                  for (auto x : g.items) {
                    __items.push_back(
                        ((((((x.ss_ext_list_price - x.ss_ext_wholesale_cost) -
                             x.ss_ext_discount_amt)) +
                           x.ss_ext_sales_price)) /
                         2));
                  }
                  return __items;
                })()),
                std::string("s")});
          }
          return __items;
        })()),
        (([&]() {
          std::vector<__struct11> __groups;
          for (auto c : customer) {
            for (auto cs : catalog_sales) {
              if (!((c.c_customer_sk == cs.cs_bill_customer_sk)))
                continue;
              for (auto d : date_dim) {
                if (!((cs.cs_sold_date_sk == d.d_date_sk)))
                  continue;
                auto __key = YearTotal{c.c_customer_id, c.c_first_name,
                                       c.c_last_name, c.c_login, d.d_year};
                bool __found = false;
                for (auto &__g : __groups) {
                  if (__g.key == __key) {
                    __g.items.push_back(__struct10{c, cs, d});
                    __found = true;
                    break;
                  }
                }
                if (!__found) {
                  __groups.push_back(__struct11{
                      __key, std::vector<__struct10>{__struct10{c, cs, d}}});
                }
              }
            }
          }
          std::vector<__struct9> __items;
          for (auto &g : __groups) {
            __items.push_back(__struct9{
                g.key.id, g.key.first, g.key.last, g.key.login, g.key.year,
                ([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype((
                      (((((std::declval<__struct10>().cs_ext_list_price -
                           std::declval<__struct10>().cs_ext_wholesale_cost) -
                          std::declval<__struct10>().cs_ext_discount_amt)) +
                        std::declval<__struct10>().cs_ext_sales_price)) /
                      2))>
                      __items;
                  for (auto x : g.items) {
                    __items.push_back(
                        ((((((x.cs_ext_list_price - x.cs_ext_wholesale_cost) -
                             x.cs_ext_discount_amt)) +
                           x.cs_ext_sales_price)) /
                         2));
                  }
                  return __items;
                })()),
                std::string("c")});
          }
          return __items;
        })())),
     (([&]() {
       std::vector<__struct13> __groups;
       for (auto c : customer) {
         for (auto ws : web_sales) {
           if (!((c.c_customer_sk == ws.ws_bill_customer_sk)))
             continue;
           for (auto d : date_dim) {
             if (!((ws.ws_sold_date_sk == d.d_date_sk)))
               continue;
             auto __key = YearTotal{c.c_customer_id, c.c_first_name,
                                    c.c_last_name, c.c_login, d.d_year};
             bool __found = false;
             for (auto &__g : __groups) {
               if (__g.key == __key) {
                 __g.items.push_back(__struct12{c, ws, d});
                 __found = true;
                 break;
               }
             }
             if (!__found) {
               __groups.push_back(__struct13{
                   __key, std::vector<__struct12>{__struct12{c, ws, d}}});
             }
           }
         }
       }
       std::vector<__struct9> __items;
       for (auto &g : __groups) {
         __items.push_back(__struct9{
             g.key.id, g.key.first, g.key.last, g.key.login, g.key.year,
             ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
                 ([&]() {
                   std::vector<decltype((
                       (((((std::declval<__struct12>().ws_ext_list_price -
                            std::declval<__struct12>().ws_ext_wholesale_cost) -
                           std::declval<__struct12>().ws_ext_discount_amt)) +
                         std::declval<__struct12>().ws_ext_sales_price)) /
                       2))>
                       __items;
                   for (auto x : g.items) {
                     __items.push_back(
                         ((((((x.ws_ext_list_price - x.ws_ext_wholesale_cost) -
                              x.ws_ext_discount_amt)) +
                            x.ws_ext_sales_price)) /
                          2));
                   }
                   return __items;
                 })()),
             std::string("w")});
       }
       return __items;
     })()));
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::vector<decltype(s2.customer_id)>{
                              s2.customer_id, s2.customer_first_name,
                              s2.customer_last_name, s2.customer_login}),
                          Result>>
        __items;
    for (auto s1 : year_total) {
      for (auto s2 : year_total) {
        if (!((s2.customer_id == s1.customer_id)))
          continue;
        for (auto c1 : year_total) {
          if (!((c1.customer_id == s1.customer_id)))
            continue;
          for (auto c2 : year_total) {
            if (!((c2.customer_id == s1.customer_id)))
              continue;
            for (auto w1 : year_total) {
              if (!((w1.customer_id == s1.customer_id)))
                continue;
              for (auto w2 : year_total) {
                if (!((w2.customer_id == s1.customer_id)))
                  continue;
                if (!((((((((((((((((((s1.sale_type == std::string("s")) &&
                                      (c1.sale_type == std::string("c"))) &&
                                     (w1.sale_type == std::string("w"))) &&
                                    (s2.sale_type == std::string("s"))) &&
                                   (c2.sale_type == std::string("c"))) &&
                                  (w2.sale_type == std::string("w"))) &&
                                 (s1.dyear == 2001)) &&
                                (s2.dyear == 2002)) &&
                               (c1.dyear == 2001)) &&
                              (c2.dyear == 2002)) &&
                             (w1.dyear == 2001)) &&
                            (w2.dyear == 2002)) &&
                           (s1.year_total > 0)) &&
                          (c1.year_total > 0)) &&
                         (w1.year_total > 0)) &&
                        ((((c1.year_total > 0) ? (c2.year_total / c1.year_total)
                                               : nullptr)) >
                         (((s1.year_total > 0) ? (s2.year_total / s1.year_total)
                                               : nullptr)))) &&
                       ((((c1.year_total > 0) ? (c2.year_total / c1.year_total)
                                              : nullptr)) >
                        (((w1.year_total > 0) ? (w2.year_total / w1.year_total)
                                              : nullptr))))))
                  continue;
                __items.push_back(
                    {std::vector<decltype(s2.customer_id)>{
                         s2.customer_id, s2.customer_first_name,
                         s2.customer_last_name, s2.customer_login},
                     Result{s2.customer_id, s2.customer_first_name,
                            s2.customer_last_name, s2.customer_login}});
              }
            }
          }
        }
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q4 result
  return 0;
}
