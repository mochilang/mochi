// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct WebSale {
  int ws_item_sk;
  int ws_sold_date_sk;
  double ws_ext_discount_amt;
};

int main() {
  vector<unordered_map<string, any>> web_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ws_item_sk"), any(1)},
                                     {string("ws_sold_date_sk"), any(1)},
                                     {string("ws_ext_discount_amt"), any(1.0)}},
          unordered_map<string, any>{{string("ws_item_sk"), any(1)},
                                     {string("ws_sold_date_sk"), any(1)},
                                     {string("ws_ext_discount_amt"), any(1.0)}},
          unordered_map<string, any>{
              {string("ws_item_sk"), any(1)},
              {string("ws_sold_date_sk"), any(1)},
              {string("ws_ext_discount_amt"), any(2.0)}}};
  vector<unordered_map<string, int>> item =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("i_item_sk"), 1}, {string("i_manufact_id"), 1}}};
  vector<unordered_map<string, any>> date_dim =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("d_date_sk"), any(1)},
          {string("d_date"), any(string("2000-01-02"))}}};
  auto sum_amt = _sum(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      _res.push_back(ws["ws_ext_discount_amt"]);
    }
    return _res;
  })());
  auto avg_amt = _avg(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ws : web_sales) {
      _res.push_back(ws["ws_ext_discount_amt"]);
    }
    return _res;
  })());
  auto result = ([&]() {
    if (sum_amt > avg_amt * 1.3)
      return sum_amt;
    return 0.0;
  })();
  _json(result);
  auto test_TPCDS_Q92_threshold = [&]() {
    if (!(result == 4.0)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q92_threshold();
  return 0;
}
