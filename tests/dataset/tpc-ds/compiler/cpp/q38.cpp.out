// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T>
vector<T> _intersect(const vector<T> &a, const vector<T> &b) {
  vector<T> res;
  for (const auto &it : a) {
    if (find(b.begin(), b.end(), it) != b.end() &&
        find(res.begin(), res.end(), it) == res.end())
      res.push_back(it);
  }
  return res;
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

vector<any> distinct(vector<any> xs) {
  vector<any> out = vector<int>{};
  for (const any &x : xs) {
    if (!contains(out, x)) {
      out = append(out, x);
    }
  }
  return out;
}

int main() {
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("c_customer_sk"), any(1)},
              {string("c_last_name"), any(string("Smith"))},
              {string("c_first_name"), any(string("John"))}},
          unordered_map<string, any>{
              {string("c_customer_sk"), any(2)},
              {string("c_last_name"), any(string("Jones"))},
              {string("c_first_name"), any(string("Alice"))}}};
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_customer_sk"), 1},
                                     {string("d_month_seq"), 1200}},
          unordered_map<string, int>{{string("ss_customer_sk"), 2},
                                     {string("d_month_seq"), 1205}}};
  vector<unordered_map<string, int>> catalog_sales =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("cs_bill_customer_sk"), 1}, {string("d_month_seq"), 1203}}};
  vector<unordered_map<string, int>> web_sales =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("ws_bill_customer_sk"), 1}, {string("d_month_seq"), 1206}}};
  auto store_ids = distinct(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &s : store_sales) {
      if (s["d_month_seq"] >= 1200 && s["d_month_seq"] <= 1211) {
        _res.push_back(s["ss_customer_sk"]);
      }
    }
    return _res;
  })());
  auto catalog_ids = distinct(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &c : catalog_sales) {
      if (c["d_month_seq"] >= 1200 && c["d_month_seq"] <= 1211) {
        _res.push_back(c["cs_bill_customer_sk"]);
      }
    }
    return _res;
  })());
  auto web_ids = distinct(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &w : web_sales) {
      if (w["d_month_seq"] >= 1200 && w["d_month_seq"] <= 1211) {
        _res.push_back(w["ws_bill_customer_sk"]);
      }
    }
    return _res;
  })());
  vector<any> hot = _intersect(_intersect(store_ids, catalog_ids), web_ids);
  auto result = hot.size();
  _json(result);
  auto test_TPCDS_Q38_simplified = [&]() {
    if (!(result == 1)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q38_simplified();
  return 0;
}
