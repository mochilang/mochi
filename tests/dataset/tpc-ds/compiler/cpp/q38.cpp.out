// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:54:32Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("Smith")) c_last_name;
  decltype(std::string("John")) c_first_name;
};
struct StoreSale {
  decltype(1) ss_customer_sk;
  decltype(1200) d_month_seq;
};
struct CatalogSale {
  decltype(1) cs_bill_customer_sk;
  decltype(1203) d_month_seq;
};
struct WebSale {
  decltype(1) ws_bill_customer_sk;
  decltype(1206) d_month_seq;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_bill_customer_sk\":";
  __json(v.ws_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_month_seq\":";
  __json(v.d_month_seq);
  std::cout << "}";
}
std::vector<Customer> customer = {
    Customer{1, std::string("Smith"), std::string("John")},
    Customer{2, std::string("Jones"), std::string("Alice")}};
std::vector<StoreSale> store_sales = {StoreSale{1, 1200}, StoreSale{2, 1205}};
std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1203}};
std::vector<WebSale> web_sales = {WebSale{1, 1206}};

auto distinct(auto xs) {
  std::vector<int> out = {};
  for (auto x : xs) {
    if ((!contains(out, x))) {
      out.push_back(x);
    }
  }
  return out;
}

int main() {
  auto store_ids = distinct(([&]() {
    std::vector<decltype(s.ss_customer_sk)> __items;
    for (auto s : store_sales) {
      if (!(((s.d_month_seq >= 1200) && (s.d_month_seq <= 1211))))
        continue;
      __items.push_back(s.ss_customer_sk);
    }
    return __items;
  })());
  auto catalog_ids = distinct(([&]() {
    std::vector<decltype(c.cs_bill_customer_sk)> __items;
    for (auto c : catalog_sales) {
      if (!(((c.d_month_seq >= 1200) && (c.d_month_seq <= 1211))))
        continue;
      __items.push_back(c.cs_bill_customer_sk);
    }
    return __items;
  })());
  auto web_ids = distinct(([&]() {
    std::vector<decltype(w.ws_bill_customer_sk)> __items;
    for (auto w : web_sales) {
      if (!(((w.d_month_seq >= 1200) && (w.d_month_seq <= 1211))))
        continue;
      __items.push_back(w.ws_bill_customer_sk);
    }
    return __items;
  })());
  auto hot = ([&](auto a, auto b) {
    std::vector<std::decay_t<decltype(a[0])>> r_;
    for (auto &x : a)
      if (std::find(b.begin(), b.end(), x) != b.end())
        r_.push_back(x);
    return r_;
  })(([&](auto a, auto b) {
       std::vector<std::decay_t<decltype(a[0])>> r_;
       for (auto &x : a)
         if (std::find(b.begin(), b.end(), x) != b.end())
           r_.push_back(x);
       return r_;
     })(store_ids, catalog_ids),
     web_ids);
  auto result = hot.size();
  (__json(result));
  // test TPCDS Q38 simplified
  return 0;
}
