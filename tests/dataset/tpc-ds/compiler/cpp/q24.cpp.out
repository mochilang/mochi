// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_ticket_number;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_store_sk;
  float ss_net_paid;
};
struct StoreReturn {
  int sr_ticket_number;
  int sr_item_sk;
};
struct Store {
  int s_store_sk;
  std::string s_store_name;
  int s_market_id;
  std::string s_state;
  std::string s_zip;
};
struct Item {
  int i_item_sk;
  std::string i_color;
  float i_current_price;
  int i_manager_id;
  std::string i_units;
  std::string i_size;
};
struct Customer {
  int c_customer_sk;
  std::string c_first_name;
  std::string c_last_name;
  int c_current_addr_sk;
  std::string c_birth_country;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_state;
  std::string ca_country;
  std::string ca_zip;
};
struct StoreSale {
  decltype(1) ss_ticket_number;
  decltype(1) ss_item_sk;
  decltype(1) ss_customer_sk;
  decltype(1) ss_store_sk;
  decltype(100) ss_net_paid;
};
struct StoreReturn {
  decltype(1) sr_ticket_number;
  decltype(1) sr_item_sk;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("Store1")) s_store_name;
  decltype(5) s_market_id;
  decltype(std::string("CA")) s_state;
  decltype(std::string("12345")) s_zip;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("RED")) i_color;
  decltype(10) i_current_price;
  decltype(1) i_manager_id;
  decltype(std::string("EA")) i_units;
  decltype(std::string("M")) i_size;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(std::string("Ann")) c_first_name;
  decltype(std::string("Smith")) c_last_name;
  decltype(1) c_current_addr_sk;
  decltype(std::string("Canada")) c_birth_country;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
  decltype(std::string("USA")) ca_country;
  decltype(std::string("12345")) ca_zip;
};
struct Ssale {
  decltype(c.c_last_name) last;
  decltype(c.c_first_name) first;
  decltype(s.s_store_name) store_name;
  decltype(i.i_color) color;
};
struct __struct8 {
  decltype(ss) ss;
  decltype(sr) sr;
  decltype(s) s;
  decltype(i) i;
  decltype(c) c;
  decltype(ca) ca;
};
struct __struct9 {
  Ssale key;
  std::vector<__struct8> items;
};
struct __struct10 {
  decltype(std::declval<__struct9>().key.last) c_last_name;
  decltype(std::declval<__struct9>().key.first) c_first_name;
  decltype(std::declval<__struct9>().key.store_name) s_store_name;
  decltype(std::declval<__struct9>().key.color) color;
  double netpaid;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct Result {
  decltype(std::declval<__struct8>().c_last_name) c_last_name;
  decltype(std::declval<__struct8>().c_first_name) c_first_name;
  decltype(std::declval<__struct8>().s_store_name) s_store_name;
  decltype(std::declval<__struct8>().netpaid) paid;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_country\":";
  __json(v.c_birth_country);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_color\":";
  __json(v.i_color);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_units\":";
  __json(v.i_units);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_size\":";
  __json(v.i_size);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_market_id\":";
  __json(v.s_market_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_paid\":";
  __json(v.ss_net_paid);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_country\":";
  __json(v.c_birth_country);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"color\":";
  __json(v.color);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"netpaid\":";
  __json(v.netpaid);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_last_name\":";
  __json(v.c_last_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_first_name\":";
  __json(v.c_first_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"paid\":";
  __json(v.paid);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_zip\":";
  __json(v.ca_zip);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_color\":";
  __json(v.i_color);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_current_price\":";
  __json(v.i_current_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_manager_id\":";
  __json(v.i_manager_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_units\":";
  __json(v.i_units);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_size\":";
  __json(v.i_size);
  std::cout << "}";
}
inline void __json(const Ssale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"last\":";
  __json(v.last);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"first\":";
  __json(v.first);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"store_name\":";
  __json(v.store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"color\":";
  __json(v.color);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_market_id\":";
  __json(v.s_market_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_state\":";
  __json(v.s_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_zip\":";
  __json(v.s_zip);
  std::cout << "}";
}
inline void __json(const StoreReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_ticket_number\":";
  __json(v.sr_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr_item_sk\":";
  __json(v.sr_item_sk);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ticket_number\":";
  __json(v.ss_ticket_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_item_sk\":";
  __json(v.ss_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_customer_sk\":";
  __json(v.ss_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_paid\":";
  __json(v.ss_net_paid);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss\":";
  __json(v.ss);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sr\":";
  __json(v.sr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca\":";
  __json(v.ca);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1, 1, 100},
                                        StoreSale{2, 2, 2, 1, 50}};
  std::vector<StoreReturn> store_returns = {StoreReturn{1, 1},
                                            StoreReturn{2, 2}};
  std::vector<Store> store = {Store{1, std::string("Store1"), 5,
                                    std::string("CA"), std::string("12345")}};
  std::vector<Item> item = {
      Item{1, std::string("RED"), 10, 1, std::string("EA"), std::string("M")},
      Item{2, std::string("BLUE"), 20, 2, std::string("EA"), std::string("L")}};
  std::vector<Customer> customer = {
      Customer{1, std::string("Ann"), std::string("Smith"), 1,
               std::string("Canada")},
      Customer{2, std::string("Bob"), std::string("Jones"), 2,
               std::string("USA")}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CA"), std::string("USA"),
                     std::string("12345")},
      CustomerAddres{2, std::string("CA"), std::string("USA"),
                     std::string("54321")}};
  std::vector<__struct8> ssales = ([&]() {
    std::vector<__struct9> __groups;
    for (auto ss : store_sales) {
      for (auto sr : store_returns) {
        if (!(((ss.ss_ticket_number == sr.sr_ticket_number) &&
               (ss.ss_item_sk == sr.sr_item_sk))))
          continue;
        for (auto s : store) {
          if (!((ss.ss_store_sk == s.s_store_sk)))
            continue;
          for (auto i : item) {
            if (!((ss.ss_item_sk == i.i_item_sk)))
              continue;
            for (auto c : customer) {
              if (!((ss.ss_customer_sk == c.c_customer_sk)))
                continue;
              for (auto ca : customer_address) {
                if (!((c.c_current_addr_sk == ca.ca_address_sk)))
                  continue;
                if (!((((c.c_birth_country !=
                         strings::ToUpper(ca.ca_country)) &&
                        (s.s_zip == ca.ca_zip)) &&
                       (s.s_market_id == 5))))
                  continue;
                auto __key = Ssale{c.c_last_name, c.c_first_name,
                                   s.s_store_name, i.i_color};
                bool __found = false;
                for (auto &__g : __groups) {
                  if (__g.key == __key) {
                    __g.items.push_back(__struct8{ss, sr, s, i, c, ca});
                    __found = true;
                    break;
                  }
                }
                if (!__found) {
                  __groups.push_back(__struct9{
                      __key,
                      std::vector<__struct8>{__struct8{ss, sr, s, i, c, ca}}});
                }
              }
            }
          }
        }
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key.last, g.key.first, g.key.store_name, g.key.color, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct8>().ss_net_paid)>
                __items;
            for (auto x : g.items) {
              __items.push_back(x.ss_net_paid);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto avg_paid = __avg(([&]() {
    std::vector<decltype(std::declval<__struct8>().netpaid)> __items;
    for (auto x : ssales) {
      __items.push_back(x.netpaid);
    }
    return __items;
  })());
  std::vector<Result> result = ([&]() {
    std::vector<
        std::pair<decltype(std::declval<__struct8>().c_last_name), Result>>
        __items;
    for (auto x : ssales) {
      if (!(((x.color == std::string("RED")) &&
             (x.netpaid > (0.05 * avg_paid)))))
        continue;
      __items.push_back(
          {std::vector<decltype(x.c_last_name)>{x.c_last_name, x.c_first_name,
                                                x.s_store_name},
           Result{x.c_last_name, x.c_first_name, x.s_store_name, x.netpaid}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test TPCDS Q24 customer net paid
  return 0;
}
