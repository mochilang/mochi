// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T> auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct StoreSale {
  int ss_ticket_number;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_store_sk;
  double ss_net_paid;
};

struct StoreReturn {
  int sr_ticket_number;
  int sr_item_sk;
};

struct Store {
  int s_store_sk;
  string s_store_name;
  int s_market_id;
  string s_state;
  string s_zip;
};

struct Item {
  int i_item_sk;
  string i_color;
  double i_current_price;
  int i_manager_id;
  string i_units;
  string i_size;
};

struct Customer {
  int c_customer_sk;
  string c_first_name;
  string c_last_name;
  int c_current_addr_sk;
  string c_birth_country;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_state;
  string ca_country;
  string ca_zip;
};

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_ticket_number"), any(1)},
                                     {string("ss_item_sk"), any(1)},
                                     {string("ss_customer_sk"), any(1)},
                                     {string("ss_store_sk"), any(1)},
                                     {string("ss_net_paid"), any(100.0)}},
          unordered_map<string, any>{{string("ss_ticket_number"), any(2)},
                                     {string("ss_item_sk"), any(2)},
                                     {string("ss_customer_sk"), any(2)},
                                     {string("ss_store_sk"), any(1)},
                                     {string("ss_net_paid"), any(50.0)}}};
  vector<unordered_map<string, int>> store_returns =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("sr_ticket_number"), 1},
                                     {string("sr_item_sk"), 1}},
          unordered_map<string, int>{{string("sr_ticket_number"), 2},
                                     {string("sr_item_sk"), 2}}};
  vector<unordered_map<string, any>> store =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("s_store_sk"), any(1)},
          {string("s_store_name"), any(string("Store1"))},
          {string("s_market_id"), any(5)},
          {string("s_state"), any(string("CA"))},
          {string("s_zip"), any(string("12345"))}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_color"), any(string("RED"))},
                                 {string("i_current_price"), any(10.0)},
                                 {string("i_manager_id"), any(1)},
                                 {string("i_units"), any(string("EA"))},
                                 {string("i_size"), any(string("M"))}},
      unordered_map<string, any>{{string("i_item_sk"), any(2)},
                                 {string("i_color"), any(string("BLUE"))},
                                 {string("i_current_price"), any(20.0)},
                                 {string("i_manager_id"), any(2)},
                                 {string("i_units"), any(string("EA"))},
                                 {string("i_size"), any(string("L"))}}};
  vector<unordered_map<string, any>> customer =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("c_customer_sk"), any(1)},
              {string("c_first_name"), any(string("Ann"))},
              {string("c_last_name"), any(string("Smith"))},
              {string("c_current_addr_sk"), any(1)},
              {string("c_birth_country"), any(string("Canada"))}},
          unordered_map<string, any>{
              {string("c_customer_sk"), any(2)},
              {string("c_first_name"), any(string("Bob"))},
              {string("c_last_name"), any(string("Jones"))},
              {string("c_current_addr_sk"), any(2)},
              {string("c_birth_country"), any(string("USA"))}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ca_address_sk"), any(1)},
                                     {string("ca_state"), any(string("CA"))},
                                     {string("ca_country"), any(string("USA"))},
                                     {string("ca_zip"), any(string("12345"))}},
          unordered_map<string, any>{{string("ca_address_sk"), any(2)},
                                     {string("ca_state"), any(string("CA"))},
                                     {string("ca_country"), any(string("USA"))},
                                     {string("ca_zip"), any(string("54321"))}}};
  struct GroupKey6 {
    unordered_map<string, any> last;
    unordered_map<string, any> first;
    unordered_map<string, any> store_name;
    unordered_map<string, any> color;
  };
  inline bool operator==(const GroupKey6 &a, const GroupKey6 &b) {
    return a.last == b.last && a.first == b.first &&
           a.store_name == b.store_name && a.color == b.color;
  }
  namespace std {
  template <> struct hash<GroupKey6> {
    size_t operator()(const GroupKey6 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.last);
      _hash_combine(h, k.first);
      _hash_combine(h, k.store_name);
      _hash_combine(h, k.color);
      return h;
    }
  };
  } // namespace std

  auto ssales = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey6;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ss : store_sales) {
      for (auto &sr : store_returns) {
        if (!(ss["ss_ticket_number"] == sr["sr_ticket_number"] &&
              ss["ss_item_sk"] == sr["sr_item_sk"]))
          continue;
        for (auto &s : store) {
          if (!(ss["ss_store_sk"] == s["s_store_sk"]))
            continue;
          for (auto &i : item) {
            if (!(ss["ss_item_sk"] == i["i_item_sk"]))
              continue;
            for (auto &c : customer) {
              if (!(ss["ss_customer_sk"] == c["c_customer_sk"]))
                continue;
              for (auto &ca : customer_address) {
                if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
                  continue;
                if (c["c_birth_country"] !=
                        _cast<unordered_map<string, any>>(strings)["ToUpper"](
                            ca["ca_country"]) &&
                    s["s_zip"] == ca["ca_zip"] && s["s_market_id"] == 5) {
                  KeyT _k = GroupKey6{c["c_last_name"], c["c_first_name"],
                                      s["s_store_name"], i["i_color"]};
                  if (!groups.count(_k)) {
                    groups[_k] = Group{_k, {}};
                    order.push_back(_k);
                  }
                  groups[_k].Items.push_back(ss);
                }
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("c_last_name"), any(g.key.last)},
          {string("c_first_name"), any(g.key.first)},
          {string("s_store_name"), any(g.key.store_name)},
          {string("color"), any(g.key.color)},
          {string("netpaid"), any(_sum(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(
                   _cast<unordered_map<string, any>>(x)["ss_net_paid"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  auto avg_paid = _avg(([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &x : ssales) {
      _res.push_back(x["netpaid"]);
    }
    return _res;
  })());
  auto result =
      ([&]() -> vector<unordered_map<string, unordered_map<string, any>>> {
        vector<pair<unordered_map<string, unordered_map<string, any>>,
                    unordered_map<string, unordered_map<string, any>>>>
            _tmp;
        for (auto &x : ssales) {
          if (x["color"] == string("RED") && x["netpaid"] > 0.05 * avg_paid) {
            _tmp.push_back(
                {vector<unordered_map<string, any>>{
                     x["c_last_name"], x["c_first_name"], x["s_store_name"]},
                 unordered_map<string, unordered_map<string, any>>{
                     {string("c_last_name"), x["c_last_name"]},
                     {string("c_first_name"), x["c_first_name"]},
                     {string("s_store_name"), x["s_store_name"]},
                     {string("paid"), x["netpaid"]}}});
          }
        }
        std::sort(_tmp.begin(), _tmp.end(), [](const auto &a, const auto &b) {
          return a.first < b.first;
        });
        vector<unordered_map<string, unordered_map<string, any>>> _res;
        _res.reserve(_tmp.size());
        for (auto &_it : _tmp)
          _res.push_back(_it.second);
        return _res;
      })();
  _json(result);
  auto test_TPCDS_Q24_customer_net_paid = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("c_last_name"), any(string("Smith"))},
              {string("c_first_name"), any(string("Ann"))},
              {string("s_store_name"), any(string("Store1"))},
              {string("paid"), any(100.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q24_customer_net_paid();
  return 0;
}
