// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_cdemo_sk"), any(1)},
                                     {string("ss_sold_date_sk"), any(1)},
                                     {string("ss_item_sk"), any(1)},
                                     {string("ss_promo_sk"), any(1)},
                                     {string("ss_quantity"), any(5)},
                                     {string("ss_list_price"), any(10.0)},
                                     {string("ss_coupon_amt"), any(2.0)},
                                     {string("ss_sales_price"), any(8.0)}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("cd_demo_sk"), any(1)},
          {string("cd_gender"), any(string("M"))},
          {string("cd_marital_status"), any(string("S"))},
          {string("cd_education_status"), any(string("College"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 1998}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("I1"))}}};
  vector<unordered_map<string, any>> promotion =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("p_promo_sk"), any(1)},
          {string("p_channel_email"), any(string("N"))},
          {string("p_channel_event"), any(string("Y"))}}};
  struct GroupKey0 {
    unordered_map<string, any> i_item_id;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.i_item_id == b.i_item_id;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.i_item_id);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = GroupKey0;
    struct Group {
      KeyT Key;
      vector<ElemT> Items;
    };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto &ss : store_sales) {
      for (auto &cd : customer_demographics) {
        if (!(ss["ss_cdemo_sk"] == cd["cd_demo_sk"]))
          continue;
        for (auto &d : date_dim) {
          if (!(ss["ss_sold_date_sk"] == d["d_date_sk"]))
            continue;
          for (auto &i : item) {
            if (!(ss["ss_item_sk"] == i["i_item_sk"]))
              continue;
            for (auto &p : promotion) {
              if (!(ss["ss_promo_sk"] == p["p_promo_sk"]))
                continue;
              if (cd["cd_gender"] == string("M") &&
                  cd["cd_marital_status"] == string("S") &&
                  cd["cd_education_status"] == string("College") &&
                  (p["p_channel_email"] == string("N") ||
                   p["p_channel_event"] == string("N")) &&
                  d["d_year"] == 1998) {
                KeyT _k = GroupKey0{i["i_item_id"]};
                if (!groups.count(_k)) {
                  groups[_k] = Group{_k, {}};
                  order.push_back(_k);
                }
                groups[_k].Items.push_back(ss);
              }
            }
          }
        }
      }
    }
    vector<Group *> items;
    for (auto &_k : order)
      items.push_back(&groups[_k]);
    vector<pair<Group *, Group *>> _tmp;
    for (auto *g : items) {
      _tmp.push_back({g.key.i_item_id, g});
    }
    std::sort(_tmp.begin(), _tmp.end(),
              [](const auto &a, const auto &b) { return a.first < b.first; });
    for (size_t i = 0; i < _tmp.size(); i++)
      items[i] = _tmp[i].second;
    vector<unordered_map<string, any>> _res;
    for (auto *g : items) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key.i_item_id)},
          {string("agg1"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_quantity);
             }
             return _res;
           })()))},
          {string("agg2"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_list_price);
             }
             return _res;
           })()))},
          {string("agg3"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_coupon_amt);
             }
             return _res;
           })()))},
          {string("agg4"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(x.ss.ss_sales_price);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q7_result = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_id"), any(string("I1"))},
              {string("agg1"), any(5.0)},
              {string("agg2"), any(10.0)},
              {string("agg3"), any(2.0)},
              {string("agg4"), any(8.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q7_result();
  return 0;
}
