// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct WebSale {
  int ws_order_number;
  int ws_warehouse_sk;
  int ws_ship_date_sk;
  int ws_ship_addr_sk;
  int ws_web_site_sk;
  float ws_ext_ship_cost;
  float ws_net_profit;
};
struct WebReturn {
  int wr_order_number;
};
struct DateDim {
  int d_date_sk;
  std::string d_date;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_state;
};
struct WebSite {
  int web_site_sk;
  std::string web_company_name;
};
struct WebSale {
  decltype(1) ws_order_number;
  decltype(1) ws_warehouse_sk;
  decltype(1) ws_ship_date_sk;
  decltype(1) ws_ship_addr_sk;
  decltype(1) ws_web_site_sk;
  decltype(2) ws_ext_ship_cost;
  decltype(5) ws_net_profit;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(std::string("2001-02-01")) d_date;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("CA")) ca_state;
};
struct WebSite {
  decltype(1) web_site_sk;
  decltype(std::string("pri")) web_company_name;
};
struct Result {
  int order_count;
  double total_shipping_cost;
  double total_net_profit;
};
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const WebReturn &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"wr_order_number\":";
  __json(v.wr_order_number);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_order_number\":";
  __json(v.ws_order_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_warehouse_sk\":";
  __json(v.ws_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_date_sk\":";
  __json(v.ws_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_addr_sk\":";
  __json(v.ws_ship_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_web_site_sk\":";
  __json(v.ws_web_site_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_ship_cost\":";
  __json(v.ws_ext_ship_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_net_profit\":";
  __json(v.ws_net_profit);
  std::cout << "}";
}
inline void __json(const WebSite &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_site_sk\":";
  __json(v.web_site_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_company_name\":";
  __json(v.web_company_name);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date\":";
  __json(v.d_date);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"order_count\":";
  __json(v.order_count);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_shipping_cost\":";
  __json(v.total_shipping_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_net_profit\":";
  __json(v.total_net_profit);
  std::cout << "}";
}
inline void __json(const WebSite &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_site_sk\":";
  __json(v.web_site_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"web_company_name\":";
  __json(v.web_company_name);
  std::cout << "}";
}
inline void __json(const WebSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_order_number\":";
  __json(v.ws_order_number);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_warehouse_sk\":";
  __json(v.ws_warehouse_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_date_sk\":";
  __json(v.ws_ship_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ship_addr_sk\":";
  __json(v.ws_ship_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_web_site_sk\":";
  __json(v.ws_web_site_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_ext_ship_cost\":";
  __json(v.ws_ext_ship_cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ws_net_profit\":";
  __json(v.ws_net_profit);
  std::cout << "}";
}

auto distinct(auto xs) {
  std::vector<int> out = {};
  for (auto x : xs) {
    if ((!contains(out, x))) {
      out.push_back(x);
    }
  }
  return out;
}

int main() {
  std::vector<WebSale> web_sales = {WebSale{1, 1, 1, 1, 1, 2, 5},
                                    WebSale{1, 2, 1, 1, 1, 0, 0}};
  std::vector<std::string> web_returns =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("wr_order_number"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("wr_order_number"), 1}}};
  std::vector<DateDim> date_dim = {DateDim{1, std::string("2001-02-01")}};
  std::vector<CustomerAddres> customer_address = {
      CustomerAddres{1, std::string("CA")}};
  std::vector<WebSite> web_site = {WebSite{1, std::string("pri")}};
  auto ws_wh = ([&]() {
    std::vector<
        decltype(std::unordered_map<std::string, decltype(ws1.ws_order_number)>{
            {std::string("ws_order_number"), ws1.ws_order_number}})>
        __items;
    for (auto ws1 : web_sales) {
      for (auto ws2 : web_sales) {
        if (!(((ws1.ws_order_number == ws2.ws_order_number) &&
               (ws1.ws_warehouse_sk != ws2.ws_warehouse_sk))))
          continue;
        __items.push_back(
            std::unordered_map<std::string, decltype(ws1.ws_order_number)>{
                {std::string("ws_order_number"), ws1.ws_order_number}});
      }
    }
    return __items;
  })();
  auto filtered = ([&]() {
    std::vector<decltype(ws)> __items;
    for (auto ws : web_sales) {
      for (auto d : date_dim) {
        if (!((ws.ws_ship_date_sk == d.d_date_sk)))
          continue;
        for (auto ca : customer_address) {
          if (!((ws.ws_ship_addr_sk == ca.ca_address_sk)))
            continue;
          for (auto w : web_site) {
            if (!((ws.ws_web_site_sk == w.web_site_sk)))
              continue;
            if (!(((((ca.ca_state == std::string("CA")) &&
                     (w.web_company_name == std::string("pri"))) &&
                    (std::find(
                         (([&]() {
                           std::vector<decltype(x.ws_order_number)> __items;
                           for (auto x : ws_wh) {
                             __items.push_back(x.ws_order_number);
                           }
                           return __items;
                         })())
                             .begin(),
                         (([&]() {
                           std::vector<decltype(x.ws_order_number)> __items;
                           for (auto x : ws_wh) {
                             __items.push_back(x.ws_order_number);
                           }
                           return __items;
                         })())
                             .end(),
                         ws.ws_order_number) !=
                     (([&]() {
                       std::vector<decltype(x.ws_order_number)> __items;
                       for (auto x : ws_wh) {
                         __items.push_back(x.ws_order_number);
                       }
                       return __items;
                     })())
                         .end())) &&
                   (std::find(
                        (([&]() {
                          std::vector<decltype(wr.wr_order_number)> __items;
                          for (auto wr : web_returns) {
                            __items.push_back(wr.wr_order_number);
                          }
                          return __items;
                        })())
                            .begin(),
                        (([&]() {
                          std::vector<decltype(wr.wr_order_number)> __items;
                          for (auto wr : web_returns) {
                            __items.push_back(wr.wr_order_number);
                          }
                          return __items;
                        })())
                            .end(),
                        ws.ws_order_number) !=
                    (([&]() {
                      std::vector<decltype(wr.wr_order_number)> __items;
                      for (auto wr : web_returns) {
                        __items.push_back(wr.wr_order_number);
                      }
                      return __items;
                    })())
                        .end()))))
              continue;
            __items.push_back(ws);
          }
        }
      }
    }
    return __items;
  })();
  auto result = Result{distinct(([&]() {
                         std::vector<decltype(x.ws_order_number)> __items;
                         for (auto x : filtered) {
                           __items.push_back(x.ws_order_number);
                         }
                         return __items;
                       })())
                           .size(),
                       ([&](auto v) {
                         return std::accumulate(v.begin(), v.end(), 0.0);
                       })(([&]() {
                         std::vector<decltype(x.ws_ext_ship_cost)> __items;
                         for (auto x : filtered) {
                           __items.push_back(x.ws_ext_ship_cost);
                         }
                         return __items;
                       })()),
                       ([&](auto v) {
                         return std::accumulate(v.begin(), v.end(), 0.0);
                       })(([&]() {
                         std::vector<decltype(x.ws_net_profit)> __items;
                         for (auto x : filtered) {
                           __items.push_back(x.ws_net_profit);
                         }
                         return __items;
                       })())};
  (__json(result));
  // test TPCDS Q95 shipping returns
  return 0;
}
