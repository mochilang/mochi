// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename Src, typename KeyFunc>
auto _group_by(const Src &src, KeyFunc keyfn) {
  using ElemT = typename std::decay<decltype(*std::begin(src))>::type;
  using KeyT = decltype(keyfn(*std::begin(src)));
  struct _Group {
    KeyT Key;
    vector<ElemT> Items;
  };
  unordered_map<KeyT, _Group> groups;
  vector<KeyT> order;
  for (const auto &it : src) {
    KeyT k = keyfn(it);
    if (!groups.count(k)) {
      groups[k] = _Group{k, {}};
      order.push_back(k);
    }
    groups[k].Items.push_back(it);
  }
  vector<_Group> res;
  for (const auto &k : order)
    res.push_back(groups[k]);
  return res;
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

struct CatalogSale {
  int cs_quantity;
  double cs_list_price;
  double cs_coupon_amt;
  double cs_sales_price;
  double cs_net_profit;
  int cs_bill_cdemo_sk;
  int cs_bill_customer_sk;
  int cs_sold_date_sk;
  int cs_item_sk;
};

struct CustomerDemographics {
  int cd_demo_sk;
  string cd_gender;
  string cd_education_status;
  int cd_dep_count;
};

struct Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_addr_sk;
  int c_birth_year;
  int c_birth_month;
};

struct CustomerAddress {
  int ca_address_sk;
  string ca_country;
  string ca_state;
  string ca_county;
};

struct DateDim {
  int d_date_sk;
  int d_year;
};

struct Item {
  int i_item_sk;
  string i_item_id;
};

int main() {
  vector<unordered_map<string, any>> catalog_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("cs_quantity"), any(1)},
                                     {string("cs_list_price"), any(10.0)},
                                     {string("cs_coupon_amt"), any(1.0)},
                                     {string("cs_sales_price"), any(9.0)},
                                     {string("cs_net_profit"), any(2.0)},
                                     {string("cs_bill_cdemo_sk"), any(1)},
                                     {string("cs_bill_customer_sk"), any(1)},
                                     {string("cs_sold_date_sk"), any(1)},
                                     {string("cs_item_sk"), any(1)}}};
  vector<unordered_map<string, any>> customer_demographics =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(1)},
              {string("cd_gender"), any(string("M"))},
              {string("cd_education_status"), any(string("College"))},
              {string("cd_dep_count"), any(2)}},
          unordered_map<string, any>{
              {string("cd_demo_sk"), any(2)},
              {string("cd_gender"), any(string("F"))},
              {string("cd_education_status"), any(string("College"))},
              {string("cd_dep_count"), any(2)}}};
  vector<unordered_map<string, int>> customer =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("c_customer_sk"), 1},
                                     {string("c_current_cdemo_sk"), 2},
                                     {string("c_current_addr_sk"), 1},
                                     {string("c_birth_year"), 1980},
                                     {string("c_birth_month"), 1}}};
  vector<unordered_map<string, any>> customer_address =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("ca_address_sk"), any(1)},
          {string("ca_country"), any(string("US"))},
          {string("ca_state"), any(string("CA"))},
          {string("ca_county"), any(string("County1"))}}};
  vector<unordered_map<string, int>> date_dim =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("d_date_sk"), 1}, {string("d_year"), 1999}}};
  vector<unordered_map<string, any>> item = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("i_item_sk"), any(1)},
                                 {string("i_item_id"), any(string("I1"))}}};
  auto joined = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &cs : catalog_sales) {
      for (auto &cd1 : customer_demographics) {
        if (!(cs["cs_bill_cdemo_sk"] == cd1["cd_demo_sk"] &&
              cd1["cd_gender"] == string("M") &&
              cd1["cd_education_status"] == string("College")))
          continue;
        for (auto &c : customer) {
          if (!(cs["cs_bill_customer_sk"] == c["c_customer_sk"]))
            continue;
          for (auto &cd2 : customer_demographics) {
            if (!(c["c_current_cdemo_sk"] == cd2["cd_demo_sk"]))
              continue;
            for (auto &ca : customer_address) {
              if (!(c["c_current_addr_sk"] == ca["ca_address_sk"]))
                continue;
              for (auto &d : date_dim) {
                if (!(cs["cs_sold_date_sk"] == d["d_date_sk"] &&
                      d["d_year"] == 1999))
                  continue;
                for (auto &i : item) {
                  if (!(cs["cs_item_sk"] == i["i_item_sk"]))
                    continue;
                  _res.push_back(unordered_map<string, any>{
                      {string("i_item_id"), any(i["i_item_id"])},
                      {string("ca_country"), any(ca["ca_country"])},
                      {string("ca_state"), any(ca["ca_state"])},
                      {string("ca_county"), any(ca["ca_county"])},
                      {string("q"), any(cs["cs_quantity"])},
                      {string("lp"), any(cs["cs_list_price"])},
                      {string("cp"), any(cs["cs_coupon_amt"])},
                      {string("sp"), any(cs["cs_sales_price"])},
                      {string("np"), any(cs["cs_net_profit"])},
                      {string("by"), any(c["c_birth_year"])},
                      {string("dep"), any(cd1["cd_dep_count"])}});
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  struct GroupKey6 {
    unordered_map<string, any> i_item_id;
    unordered_map<string, any> ca_country;
    unordered_map<string, any> ca_state;
    unordered_map<string, any> ca_county;
  };
  inline bool operator==(const GroupKey6 &a, const GroupKey6 &b) {
    return a.i_item_id == b.i_item_id && a.ca_country == b.ca_country &&
           a.ca_state == b.ca_state && a.ca_county == b.ca_county;
  }
  namespace std {
  template <> struct hash<GroupKey6> {
    size_t operator()(const GroupKey6 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.i_item_id);
      _hash_combine(h, k.ca_country);
      _hash_combine(h, k.ca_state);
      _hash_combine(h, k.ca_county);
      return h;
    }
  };
  } // namespace std

  auto result = ([&]() -> vector<unordered_map<string, any>> {
    auto _src = joined;
    auto _groups = _group_by(_src, [&](auto &j) {
      return GroupKey6{j["i_item_id"], j["ca_country"], j["ca_state"],
                       j["ca_county"]};
    });
    vector<unordered_map<string, any>> _res;
    for (auto &g : _groups) {
      _res.push_back(unordered_map<string, any>{
          {string("i_item_id"), any(g.key.i_item_id)},
          {string("ca_country"), any(g.key.ca_country)},
          {string("ca_state"), any(g.key.ca_state)},
          {string("ca_county"), any(g.key.ca_county)},
          {string("agg1"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["q"]);
             }
             return _res;
           })()))},
          {string("agg2"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["lp"]);
             }
             return _res;
           })()))},
          {string("agg3"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["cp"]);
             }
             return _res;
           })()))},
          {string("agg4"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["sp"]);
             }
             return _res;
           })()))},
          {string("agg5"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["np"]);
             }
             return _res;
           })()))},
          {string("agg6"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["by"]);
             }
             return _res;
           })()))},
          {string("agg7"), any(_avg(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : g) {
               _res.push_back(_cast<unordered_map<string, any>>(x)["dep"]);
             }
             return _res;
           })()))}});
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q18_averages = [&]() {
    if (!(result ==
          vector<unordered_map<string, any>>{unordered_map<string, any>{
              {string("i_item_id"), any(string("I1"))},
              {string("ca_country"), any(string("US"))},
              {string("ca_state"), any(string("CA"))},
              {string("ca_county"), any(string("County1"))},
              {string("agg1"), any(1.0)},
              {string("agg2"), any(10.0)},
              {string("agg3"), any(1.0)},
              {string("agg4"), any(9.0)},
              {string("agg5"), any(2.0)},
              {string("agg6"), any(1980.0)},
              {string("agg7"), any(2.0)}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q18_averages();
  return 0;
}
