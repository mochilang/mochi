// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  int cs_quantity;
  float cs_list_price;
  float cs_coupon_amt;
  float cs_sales_price;
  float cs_net_profit;
  int cs_bill_cdemo_sk;
  int cs_bill_customer_sk;
  int cs_sold_date_sk;
  int cs_item_sk;
};
struct CustomerDemographics {
  int cd_demo_sk;
  std::string cd_gender;
  std::string cd_education_status;
  int cd_dep_count;
};
struct Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_addr_sk;
  int c_birth_year;
  int c_birth_month;
};
struct CustomerAddress {
  int ca_address_sk;
  std::string ca_country;
  std::string ca_state;
  std::string ca_county;
};
struct DateDim {
  int d_date_sk;
  int d_year;
};
struct Item {
  int i_item_sk;
  std::string i_item_id;
};
struct CatalogSale {
  decltype(1) cs_quantity;
  decltype(10) cs_list_price;
  decltype(1) cs_coupon_amt;
  decltype(9) cs_sales_price;
  decltype(2) cs_net_profit;
  decltype(1) cs_bill_cdemo_sk;
  decltype(1) cs_bill_customer_sk;
  decltype(1) cs_sold_date_sk;
  decltype(1) cs_item_sk;
};
struct CustomerDemographic {
  decltype(1) cd_demo_sk;
  decltype(std::string("M")) cd_gender;
  decltype(std::string("College")) cd_education_status;
  decltype(2) cd_dep_count;
};
struct Customer {
  decltype(1) c_customer_sk;
  decltype(2) c_current_cdemo_sk;
  decltype(1) c_current_addr_sk;
  decltype(1980) c_birth_year;
  decltype(1) c_birth_month;
};
struct CustomerAddres {
  decltype(1) ca_address_sk;
  decltype(std::string("US")) ca_country;
  decltype(std::string("CA")) ca_state;
  decltype(std::string("County1")) ca_county;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(1999) d_year;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("I1")) i_item_id;
};
struct Joined {
  decltype(i.i_item_id) i_item_id;
  decltype(ca.ca_country) ca_country;
  decltype(ca.ca_state) ca_state;
  decltype(ca.ca_county) ca_county;
  decltype(cs.cs_quantity) q;
  decltype(cs.cs_list_price) lp;
  decltype(cs.cs_coupon_amt) cp;
  decltype(cs.cs_sales_price) sp;
  decltype(cs.cs_net_profit) np;
  decltype(c.c_birth_year) by;
  decltype(cd1.cd_dep_count) dep;
};
struct Result {
  decltype(std::declval<Joined>().i_item_id) i_item_id;
  decltype(std::declval<Joined>().ca_country) ca_country;
  decltype(std::declval<Joined>().ca_state) ca_state;
  decltype(std::declval<Joined>().ca_county) ca_county;
};
struct __struct9 {
  Result key;
  std::vector<Joined> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct10 {
  decltype(std::declval<__struct9>().key.i_item_id) i_item_id;
  decltype(std::declval<__struct9>().key.ca_country) ca_country;
  decltype(std::declval<__struct9>().key.ca_state) ca_state;
  decltype(std::declval<__struct9>().key.ca_county) ca_county;
  double agg1;
  double agg2;
  double agg3;
  double agg4;
  double agg5;
  double agg6;
  double agg7;
};
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_list_price\":";
  __json(v.cs_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_coupon_amt\":";
  __json(v.cs_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sales_price\":";
  __json(v.cs_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_net_profit\":";
  __json(v.cs_net_profit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_cdemo_sk\":";
  __json(v.cs_bill_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_year\":";
  __json(v.c_birth_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_month\":";
  __json(v.c_birth_month);
  std::cout << "}";
}
inline void __json(const CustomerAddress &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  std::cout << "}";
}
inline void __json(const CustomerDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_customer_sk\":";
  __json(v.c_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_cdemo_sk\":";
  __json(v.c_current_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_current_addr_sk\":";
  __json(v.c_current_addr_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_year\":";
  __json(v.c_birth_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_birth_month\":";
  __json(v.c_birth_month);
  std::cout << "}";
}
inline void __json(const CustomerAddres &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_address_sk\":";
  __json(v.ca_address_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  std::cout << "}";
}
inline void __json(const CustomerDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_demo_sk\":";
  __json(v.cd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_gender\":";
  __json(v.cd_gender);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_education_status\":";
  __json(v.cd_education_status);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cd_dep_count\":";
  __json(v.cd_dep_count);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_quantity\":";
  __json(v.cs_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_list_price\":";
  __json(v.cs_list_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_coupon_amt\":";
  __json(v.cs_coupon_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sales_price\":";
  __json(v.cs_sales_price);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_net_profit\":";
  __json(v.cs_net_profit);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_cdemo_sk\":";
  __json(v.cs_bill_cdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_bill_customer_sk\":";
  __json(v.cs_bill_customer_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_sold_date_sk\":";
  __json(v.cs_sold_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs_item_sk\":";
  __json(v.cs_item_sk);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  std::cout << "}";
}
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg1\":";
  __json(v.agg1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg2\":";
  __json(v.agg2);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg3\":";
  __json(v.agg3);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg4\":";
  __json(v.agg4);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg5\":";
  __json(v.agg5);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg6\":";
  __json(v.agg6);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"agg7\":";
  __json(v.agg7);
  std::cout << "}";
}
inline void __json(const Joined &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_country\":";
  __json(v.ca_country);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_state\":";
  __json(v.ca_state);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ca_county\":";
  __json(v.ca_county);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"q\":";
  __json(v.q);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"lp\":";
  __json(v.lp);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cp\":";
  __json(v.cp);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sp\":";
  __json(v.sp);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"np\":";
  __json(v.np);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"by\":";
  __json(v.by);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"dep\":";
  __json(v.dep);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_id\":";
  __json(v.i_item_id);
  std::cout << "}";
}
int main() {
  std::vector<CatalogSale> catalog_sales = {
      CatalogSale{1, 10, 1, 9, 2, 1, 1, 1, 1}};
  std::vector<CustomerDemographic> customer_demographics = {
      CustomerDemographic{1, std::string("M"), std::string("College"), 2},
      CustomerDemographic{2, std::string("F"), std::string("College"), 2}};
  std::vector<Customer> customer = {Customer{1, 2, 1, 1980, 1}};
  std::vector<CustomerAddres> customer_address = {CustomerAddres{
      1, std::string("US"), std::string("CA"), std::string("County1")}};
  std::vector<DateDim> date_dim = {DateDim{1, 1999}};
  std::vector<Item> item = {Item{1, std::string("I1")}};
  std::vector<Joined> joined = ([&]() {
    std::vector<Joined> __items;
    for (auto cs : catalog_sales) {
      for (auto cd1 : customer_demographics) {
        if (!((((cs.cs_bill_cdemo_sk == cd1.cd_demo_sk) &&
                (cd1.cd_gender == std::string("M"))) &&
               (cd1.cd_education_status == std::string("College")))))
          continue;
        for (auto c : customer) {
          if (!((cs.cs_bill_customer_sk == c.c_customer_sk)))
            continue;
          for (auto cd2 : customer_demographics) {
            if (!((c.c_current_cdemo_sk == cd2.cd_demo_sk)))
              continue;
            for (auto ca : customer_address) {
              if (!((c.c_current_addr_sk == ca.ca_address_sk)))
                continue;
              for (auto d : date_dim) {
                if (!(((cs.cs_sold_date_sk == d.d_date_sk) &&
                       (d.d_year == 1999))))
                  continue;
                for (auto i : item) {
                  if (!((cs.cs_item_sk == i.i_item_sk)))
                    continue;
                  __items.push_back(Joined{
                      i.i_item_id, ca.ca_country, ca.ca_state, ca.ca_county,
                      cs.cs_quantity, cs.cs_list_price, cs.cs_coupon_amt,
                      cs.cs_sales_price, cs.cs_net_profit, c.c_birth_year,
                      cd1.cd_dep_count});
                }
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Joined> result = ([&]() {
    std::vector<__struct9> __groups;
    for (auto j : joined) {
      auto __key = Result{j.i_item_id, j.ca_country, j.ca_state, j.ca_county};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Joined{j});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct9{__key, std::vector<Joined>{Joined{j}}});
      }
    }
    std::vector<__struct10> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct10{
          g.key.i_item_id, g.key.ca_country, g.key.ca_state, g.key.ca_county,
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().q)> __items;
            for (auto x : g.items) {
              __items.push_back(x.q);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().lp)> __items;
            for (auto x : g.items) {
              __items.push_back(x.lp);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().cp)> __items;
            for (auto x : g.items) {
              __items.push_back(x.cp);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().sp)> __items;
            for (auto x : g.items) {
              __items.push_back(x.sp);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().np)> __items;
            for (auto x : g.items) {
              __items.push_back(x.np);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().by)> __items;
            for (auto x : g.items) {
              __items.push_back(x.by);
            }
            return __items;
          })()),
          __avg(([&]() {
            std::vector<decltype(std::declval<Joined>().dep)> __items;
            for (auto x : g.items) {
              __items.push_back(x.dep);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q18 averages
  return 0;
}
