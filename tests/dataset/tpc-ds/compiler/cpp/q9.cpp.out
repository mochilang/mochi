// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T> auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T> auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> store_sales =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("ss_quantity"), any(5)},
                                     {string("ss_ext_discount_amt"), any(5.0)},
                                     {string("ss_net_paid"), any(7.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(30)},
                                     {string("ss_ext_discount_amt"), any(10.0)},
                                     {string("ss_net_paid"), any(15.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(50)},
                                     {string("ss_ext_discount_amt"), any(20.0)},
                                     {string("ss_net_paid"), any(30.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(70)},
                                     {string("ss_ext_discount_amt"), any(25.0)},
                                     {string("ss_net_paid"), any(35.0)}},
          unordered_map<string, any>{{string("ss_quantity"), any(90)},
                                     {string("ss_ext_discount_amt"), any(40.0)},
                                     {string("ss_net_paid"), any(50.0)}}};
  vector<unordered_map<string, int>> reason =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("r_reason_sk"), 1}}};
  auto bucket1 = ([&]() {
    if (_count(([&]() -> vector<unordered_map<string, any>> {
          vector<unordered_map<string, any>> _res;
          for (auto &s : store_sales) {
            if (s["ss_quantity"] >= 1 && s["ss_quantity"] <= 20) {
              _res.push_back(s);
            }
          }
          return _res;
        })()) > 10)
      return _avg(([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store_sales) {
          if (s["ss_quantity"] >= 1 && s["ss_quantity"] <= 20) {
            _res.push_back(s["ss_ext_discount_amt"]);
          }
        }
        return _res;
      })());
    return _avg(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ss_quantity"] >= 1 && s["ss_quantity"] <= 20) {
          _res.push_back(s["ss_net_paid"]);
        }
      }
      return _res;
    })());
  })();
  auto bucket2 = ([&]() {
    if (_count(([&]() -> vector<unordered_map<string, any>> {
          vector<unordered_map<string, any>> _res;
          for (auto &s : store_sales) {
            if (s["ss_quantity"] >= 21 && s["ss_quantity"] <= 40) {
              _res.push_back(s);
            }
          }
          return _res;
        })()) > 20)
      return _avg(([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store_sales) {
          if (s["ss_quantity"] >= 21 && s["ss_quantity"] <= 40) {
            _res.push_back(s["ss_ext_discount_amt"]);
          }
        }
        return _res;
      })());
    return _avg(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ss_quantity"] >= 21 && s["ss_quantity"] <= 40) {
          _res.push_back(s["ss_net_paid"]);
        }
      }
      return _res;
    })());
  })();
  auto bucket3 = ([&]() {
    if (_count(([&]() -> vector<unordered_map<string, any>> {
          vector<unordered_map<string, any>> _res;
          for (auto &s : store_sales) {
            if (s["ss_quantity"] >= 41 && s["ss_quantity"] <= 60) {
              _res.push_back(s);
            }
          }
          return _res;
        })()) > 30)
      return _avg(([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store_sales) {
          if (s["ss_quantity"] >= 41 && s["ss_quantity"] <= 60) {
            _res.push_back(s["ss_ext_discount_amt"]);
          }
        }
        return _res;
      })());
    return _avg(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ss_quantity"] >= 41 && s["ss_quantity"] <= 60) {
          _res.push_back(s["ss_net_paid"]);
        }
      }
      return _res;
    })());
  })();
  auto bucket4 = ([&]() {
    if (_count(([&]() -> vector<unordered_map<string, any>> {
          vector<unordered_map<string, any>> _res;
          for (auto &s : store_sales) {
            if (s["ss_quantity"] >= 61 && s["ss_quantity"] <= 80) {
              _res.push_back(s);
            }
          }
          return _res;
        })()) > 40)
      return _avg(([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store_sales) {
          if (s["ss_quantity"] >= 61 && s["ss_quantity"] <= 80) {
            _res.push_back(s["ss_ext_discount_amt"]);
          }
        }
        return _res;
      })());
    return _avg(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ss_quantity"] >= 61 && s["ss_quantity"] <= 80) {
          _res.push_back(s["ss_net_paid"]);
        }
      }
      return _res;
    })());
  })();
  auto bucket5 = ([&]() {
    if (_count(([&]() -> vector<unordered_map<string, any>> {
          vector<unordered_map<string, any>> _res;
          for (auto &s : store_sales) {
            if (s["ss_quantity"] >= 81 && s["ss_quantity"] <= 100) {
              _res.push_back(s);
            }
          }
          return _res;
        })()) > 50)
      return _avg(([&]() -> vector<unordered_map<string, any>> {
        vector<unordered_map<string, any>> _res;
        for (auto &s : store_sales) {
          if (s["ss_quantity"] >= 81 && s["ss_quantity"] <= 100) {
            _res.push_back(s["ss_ext_discount_amt"]);
          }
        }
        return _res;
      })());
    return _avg(([&]() -> vector<unordered_map<string, any>> {
      vector<unordered_map<string, any>> _res;
      for (auto &s : store_sales) {
        if (s["ss_quantity"] >= 81 && s["ss_quantity"] <= 100) {
          _res.push_back(s["ss_net_paid"]);
        }
      }
      return _res;
    })());
  })();
  auto result = ([&]() -> vector<unordered_map<double, double>> {
    vector<unordered_map<double, double>> _res;
    for (auto &r : reason) {
      if (r["r_reason_sk"] == 1) {
        _res.push_back(
            unordered_map<double, double>{{string("bucket1"), bucket1},
                                          {string("bucket2"), bucket2},
                                          {string("bucket3"), bucket3},
                                          {string("bucket4"), bucket4},
                                          {string("bucket5"), bucket5}});
      }
    }
    return _res;
  })();
  _json(result);
  auto test_TPCDS_Q9_result = [&]() {
    if (!(result ==
          vector<unordered_map<double, double>>{
              unordered_map<double, double>{{string("bucket1"), 7.0},
                                            {string("bucket2"), 15.0},
                                            {string("bucket3"), 30.0},
                                            {string("bucket4"), 35.0},
                                            {string("bucket5"), 50.0}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q9_result();
  return 0;
}
