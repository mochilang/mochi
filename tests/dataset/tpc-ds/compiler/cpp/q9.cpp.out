// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  decltype(5) ss_quantity;
  decltype(5) ss_ext_discount_amt;
  decltype(7) ss_net_paid;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct Result {
  decltype(bucket1) bucket1;
  decltype(bucket2) bucket2;
  decltype(bucket3) bucket3;
  decltype(bucket4) bucket4;
  decltype(bucket5) bucket5;
};
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bucket1\":";
  __json(v.bucket1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bucket2\":";
  __json(v.bucket2);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bucket3\":";
  __json(v.bucket3);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bucket4\":";
  __json(v.bucket4);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"bucket5\":";
  __json(v.bucket5);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_quantity\":";
  __json(v.ss_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_ext_discount_amt\":";
  __json(v.ss_ext_discount_amt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_net_paid\":";
  __json(v.ss_net_paid);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {
      StoreSale{5, 5, 7}, StoreSale{30, 10, 15}, StoreSale{50, 20, 30},
      StoreSale{70, 25, 35}, StoreSale{90, 40, 50}};
  std::vector<std::string> reason =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("r_reason_sk"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{
              {std::string("r_reason_sk"), 1}}};
  auto bucket1 =
      ((((int)([&]() {
           std::vector<decltype(s)> __items;
           for (auto s : store_sales) {
             if (!(((s.ss_quantity >= 1) && (s.ss_quantity <= 20))))
               continue;
             __items.push_back(s);
           }
           return __items;
         })()
             .size()) > 10)
           ? __avg(([&]() {
               std::vector<decltype(s.ss_ext_discount_amt)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 1) && (s.ss_quantity <= 20))))
                   continue;
                 __items.push_back(s.ss_ext_discount_amt);
               }
               return __items;
             })())
           : __avg(([&]() {
               std::vector<decltype(s.ss_net_paid)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 1) && (s.ss_quantity <= 20))))
                   continue;
                 __items.push_back(s.ss_net_paid);
               }
               return __items;
             })()));
  auto bucket2 =
      ((((int)([&]() {
           std::vector<decltype(s)> __items;
           for (auto s : store_sales) {
             if (!(((s.ss_quantity >= 21) && (s.ss_quantity <= 40))))
               continue;
             __items.push_back(s);
           }
           return __items;
         })()
             .size()) > 20)
           ? __avg(([&]() {
               std::vector<decltype(s.ss_ext_discount_amt)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 21) && (s.ss_quantity <= 40))))
                   continue;
                 __items.push_back(s.ss_ext_discount_amt);
               }
               return __items;
             })())
           : __avg(([&]() {
               std::vector<decltype(s.ss_net_paid)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 21) && (s.ss_quantity <= 40))))
                   continue;
                 __items.push_back(s.ss_net_paid);
               }
               return __items;
             })()));
  auto bucket3 =
      ((((int)([&]() {
           std::vector<decltype(s)> __items;
           for (auto s : store_sales) {
             if (!(((s.ss_quantity >= 41) && (s.ss_quantity <= 60))))
               continue;
             __items.push_back(s);
           }
           return __items;
         })()
             .size()) > 30)
           ? __avg(([&]() {
               std::vector<decltype(s.ss_ext_discount_amt)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 41) && (s.ss_quantity <= 60))))
                   continue;
                 __items.push_back(s.ss_ext_discount_amt);
               }
               return __items;
             })())
           : __avg(([&]() {
               std::vector<decltype(s.ss_net_paid)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 41) && (s.ss_quantity <= 60))))
                   continue;
                 __items.push_back(s.ss_net_paid);
               }
               return __items;
             })()));
  auto bucket4 =
      ((((int)([&]() {
           std::vector<decltype(s)> __items;
           for (auto s : store_sales) {
             if (!(((s.ss_quantity >= 61) && (s.ss_quantity <= 80))))
               continue;
             __items.push_back(s);
           }
           return __items;
         })()
             .size()) > 40)
           ? __avg(([&]() {
               std::vector<decltype(s.ss_ext_discount_amt)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 61) && (s.ss_quantity <= 80))))
                   continue;
                 __items.push_back(s.ss_ext_discount_amt);
               }
               return __items;
             })())
           : __avg(([&]() {
               std::vector<decltype(s.ss_net_paid)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 61) && (s.ss_quantity <= 80))))
                   continue;
                 __items.push_back(s.ss_net_paid);
               }
               return __items;
             })()));
  auto bucket5 =
      ((((int)([&]() {
           std::vector<decltype(s)> __items;
           for (auto s : store_sales) {
             if (!(((s.ss_quantity >= 81) && (s.ss_quantity <= 100))))
               continue;
             __items.push_back(s);
           }
           return __items;
         })()
             .size()) > 50)
           ? __avg(([&]() {
               std::vector<decltype(s.ss_ext_discount_amt)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 81) && (s.ss_quantity <= 100))))
                   continue;
                 __items.push_back(s.ss_ext_discount_amt);
               }
               return __items;
             })())
           : __avg(([&]() {
               std::vector<decltype(s.ss_net_paid)> __items;
               for (auto s : store_sales) {
                 if (!(((s.ss_quantity >= 81) && (s.ss_quantity <= 100))))
                   continue;
                 __items.push_back(s.ss_net_paid);
               }
               return __items;
             })()));
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto r : reason) {
      if (!((r.r_reason_sk == 1)))
        continue;
      __items.push_back(Result{bucket1, bucket2, bucket3, bucket4, bucket5});
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q9 result
  return 0;
}
