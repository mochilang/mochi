// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T> auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

struct StoreSale {
  int ss_sold_time_sk;
  int ss_hdemo_sk;
  int ss_store_sk;
};

struct HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
};

struct TimeDim {
  int t_time_sk;
  int t_hour;
  int t_minute;
};

struct Store {
  int s_store_sk;
  string s_store_name;
};

int main() {
  vector<unordered_map<string, int>> store_sales =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("ss_sold_time_sk"), 1},
                                     {string("ss_hdemo_sk"), 1},
                                     {string("ss_store_sk"), 1}},
          unordered_map<string, int>{{string("ss_sold_time_sk"), 1},
                                     {string("ss_hdemo_sk"), 1},
                                     {string("ss_store_sk"), 1}},
          unordered_map<string, int>{{string("ss_sold_time_sk"), 2},
                                     {string("ss_hdemo_sk"), 1},
                                     {string("ss_store_sk"), 1}}};
  vector<unordered_map<string, int>> household_demographics =
      vector<unordered_map<string, int>>{unordered_map<string, int>{
          {string("hd_demo_sk"), 1}, {string("hd_dep_count"), 3}}};
  vector<unordered_map<string, int>> time_dim =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("t_time_sk"), 1},
                                     {string("t_hour"), 20},
                                     {string("t_minute"), 35}},
          unordered_map<string, int>{{string("t_time_sk"), 2},
                                     {string("t_hour"), 20},
                                     {string("t_minute"), 45}}};
  vector<unordered_map<string, any>> store = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("s_store_sk"), any(1)},
                                 {string("s_store_name"), any(string("ese"))}}};
  auto result = _count(([&]() -> vector<unordered_map<string, int>> {
    vector<unordered_map<string, int>> _res;
    for (auto &ss : store_sales) {
      for (auto &hd : household_demographics) {
        if (!(ss["ss_hdemo_sk"] == hd["hd_demo_sk"]))
          continue;
        for (auto &t : time_dim) {
          if (!(ss["ss_sold_time_sk"] == t["t_time_sk"]))
            continue;
          for (auto &s : store) {
            if (!(ss["ss_store_sk"] == s["s_store_sk"]))
              continue;
            if (t["t_hour"] == 20 && t["t_minute"] >= 30 &&
                hd["hd_dep_count"] == 3 && s["s_store_name"] == string("ese")) {
              _res.push_back(ss);
            }
          }
        }
      }
    }
    return _res;
  })());
  _json(result);
  auto test_TPCDS_Q96_count = [&]() {
    if (!(result == 3)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_TPCDS_Q96_count();
  return 0;
}
