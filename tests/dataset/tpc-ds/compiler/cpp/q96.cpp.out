// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct StoreSale {
  int ss_sold_time_sk;
  int ss_hdemo_sk;
  int ss_store_sk;
};
struct HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
};
struct TimeDim {
  int t_time_sk;
  int t_hour;
  int t_minute;
};
struct Store {
  int s_store_sk;
  std::string s_store_name;
};
struct StoreSale {
  decltype(1) ss_sold_time_sk;
  decltype(1) ss_hdemo_sk;
  decltype(1) ss_store_sk;
};
struct HouseholdDemographic {
  decltype(1) hd_demo_sk;
  decltype(3) hd_dep_count;
};
struct TimeDim {
  decltype(1) t_time_sk;
  decltype(20) t_hour;
  decltype(35) t_minute;
};
struct Store {
  decltype(1) s_store_sk;
  decltype(std::string("ese")) s_store_name;
};
inline void __json(const HouseholdDemographics &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_time_sk\":";
  __json(v.ss_sold_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  std::cout << "}";
}
inline void __json(const TimeDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_time_sk\":";
  __json(v.t_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_minute\":";
  __json(v.t_minute);
  std::cout << "}";
}
inline void __json(const HouseholdDemographic &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_demo_sk\":";
  __json(v.hd_demo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"hd_dep_count\":";
  __json(v.hd_dep_count);
  std::cout << "}";
}
inline void __json(const Store &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_sk\":";
  __json(v.s_store_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_store_name\":";
  __json(v.s_store_name);
  std::cout << "}";
}
inline void __json(const StoreSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_sold_time_sk\":";
  __json(v.ss_sold_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_hdemo_sk\":";
  __json(v.ss_hdemo_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ss_store_sk\":";
  __json(v.ss_store_sk);
  std::cout << "}";
}
inline void __json(const TimeDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_time_sk\":";
  __json(v.t_time_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_hour\":";
  __json(v.t_hour);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"t_minute\":";
  __json(v.t_minute);
  std::cout << "}";
}
int main() {
  std::vector<StoreSale> store_sales = {StoreSale{1, 1, 1}, StoreSale{1, 1, 1},
                                        StoreSale{2, 1, 1}};
  std::vector<HouseholdDemographic> household_demographics = {
      HouseholdDemographic{1, 3}};
  std::vector<TimeDim> time_dim = {TimeDim{1, 20, 35}, TimeDim{2, 20, 45}};
  std::vector<Store> store = {Store{1, std::string("ese")}};
  auto result = ((int)([&]() {
                   std::vector<decltype(ss)> __items;
                   for (auto ss : store_sales) {
                     for (auto hd : household_demographics) {
                       if (!((ss.ss_hdemo_sk == hd.hd_demo_sk)))
                         continue;
                       for (auto t : time_dim) {
                         if (!((ss.ss_sold_time_sk == t.t_time_sk)))
                           continue;
                         for (auto s : store) {
                           if (!((ss.ss_store_sk == s.s_store_sk)))
                             continue;
                           if (!(((((t.t_hour == 20) && (t.t_minute >= 30)) &&
                                   (hd.hd_dep_count == 3)) &&
                                  (s.s_store_name == std::string("ese")))))
                             continue;
                           __items.push_back(ss);
                         }
                       }
                     }
                   }
                   return __items;
                 })()
                     .size());
  (__json(result));
  // test TPCDS Q96 count
  return 0;
}
