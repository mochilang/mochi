// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CatalogSale {
  decltype(1) item;
  decltype(1) call;
  decltype(1) date;
  decltype(20) price;
};
struct Item {
  decltype(1) i_item_sk;
  decltype(std::string("A")) i_category;
  decltype(std::string("B")) i_brand;
};
struct CallCenter {
  decltype(1) cc_call_center_sk;
  decltype(std::string("C1")) cc_name;
};
struct DateDim {
  decltype(1) d_date_sk;
  decltype(2000) d_year;
  decltype(11) d_moy;
};
struct Grouped {
  decltype(i.i_category) cat;
  decltype(cc.cc_name) call;
  decltype(d.d_year) year;
};
struct __struct6 {
  decltype(cs) cs;
  decltype(i) i;
  decltype(d) d;
  decltype(cc) cc;
};
struct __struct7 {
  Grouped key;
  std::vector<__struct6> items;
};
struct __struct8 {
  decltype(std::declval<__struct7>().key.cat) cat;
  decltype(std::declval<__struct7>().key.call) call;
  decltype(std::declval<__struct7>().key.year) year;
  double sum_sales;
};
struct AvgByYear {
  decltype(std::declval<__struct6>().cat) cat;
  decltype(std::declval<__struct6>().call) call;
};
struct __struct10 {
  AvgByYear key;
  std::vector<__struct6> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct __struct11 {
  decltype(std::declval<__struct10>().key.cat) cat;
  decltype(std::declval<__struct10>().key.call) call;
  double avg_sales;
};
struct Result {
  decltype(std::declval<__struct6>().cat) i_category;
  decltype(std::declval<__struct6>().sum_sales) sum_sales;
};
inline void __json(const AvgByYear &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"call\":";
  __json(v.call);
  std::cout << "}";
}
inline void __json(const __struct11 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"call\":";
  __json(v.call);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"avg_sales\":";
  __json(v.avg_sales);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"call\":";
  __json(v.call);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"call\":";
  __json(v.call);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
inline void __json(const CallCenter &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_call_center_sk\":";
  __json(v.cc_call_center_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc_name\":";
  __json(v.cc_name);
  std::cout << "}";
}
inline void __json(const DateDim &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_date_sk\":";
  __json(v.d_date_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_year\":";
  __json(v.d_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d_moy\":";
  __json(v.d_moy);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"sum_sales\":";
  __json(v.sum_sales);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_item_sk\":";
  __json(v.i_item_sk);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_category\":";
  __json(v.i_category);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i_brand\":";
  __json(v.i_brand);
  std::cout << "}";
}
inline void __json(const CatalogSale &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"item\":";
  __json(v.item);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"call\":";
  __json(v.call);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"date\":";
  __json(v.date);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"price\":";
  __json(v.price);
  std::cout << "}";
}
inline void __json(const __struct6 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cs\":";
  __json(v.cs);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"d\":";
  __json(v.d);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cc\":";
  __json(v.cc);
  std::cout << "}";
}
std::vector<CatalogSale> catalog_sales = {CatalogSale{1, 1, 1, 20},
                                          CatalogSale{1, 1, 2, 20},
                                          CatalogSale{1, 1, 3, 40}};
std::vector<Item> item = {Item{1, std::string("A"), std::string("B")}};
std::vector<CallCenter> call_center = {CallCenter{1, std::string("C1")}};
std::vector<DateDim> date_dim = {DateDim{1, 2000, 11}, DateDim{2, 2000, 12},
                                 DateDim{3, 2001, 1}};

float abs(float x) {
  if ((x >= 0)) {
    return x;
  }
  return (-x);
}

int main() {
  std::vector<__struct6> grouped = ([&]() {
    std::vector<__struct7> __groups;
    for (auto cs : catalog_sales) {
      for (auto i : item) {
        if (!((cs.item == i.i_item_sk)))
          continue;
        for (auto d : date_dim) {
          if (!((cs.date == d.d_date_sk)))
            continue;
          for (auto cc : call_center) {
            if (!((cs.call == cc.cc_call_center_sk)))
              continue;
            auto __key = Grouped{i.i_category, cc.cc_name, d.d_year};
            bool __found = false;
            for (auto &__g : __groups) {
              if (__g.key == __key) {
                __g.items.push_back(__struct6{cs, i, d, cc});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(__struct7{
                  __key, std::vector<__struct6>{__struct6{cs, i, d, cc}}});
            }
          }
        }
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{
          g.key.cat, g.key.call, g.key.year, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<__struct6>().price)> __items;
            for (auto x : g.items) {
              __items.push_back(x.price);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<__struct6> avg_by_year = ([&]() {
    std::vector<__struct10> __groups;
    for (auto g : grouped) {
      auto __key = AvgByYear{g.cat, g.call};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(__struct6{g});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct10{__key, std::vector<__struct6>{__struct6{g}}});
      }
    }
    std::vector<__struct11> __items;
    for (auto &gg : __groups) {
      __items.push_back(__struct11{
          gg.key.cat, gg.key.call, __avg(([&]() {
            std::vector<decltype(std::declval<__struct6>().sum_sales)> __items;
            for (auto x : gg.items) {
              __items.push_back(x.sum_sales);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto g : grouped) {
      for (auto a : avg_by_year) {
        if (!(((g.cat == a.cat) && (g.call == a.call))))
          continue;
        if (!((((g.year == 2001) && (a.avg_sales > 0)) &&
               ((abs((g.sum_sales - a.avg_sales)) / a.avg_sales) > 0.1))))
          continue;
        __items.push_back(Result{g.cat, g.sum_sales});
      }
    }
    return __items;
  })();
  (__json(result));
  // test TPCDS Q57 simplified
  return 0;
}
