// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:55Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q31.mochi

data class Store_sale(var ca_county: String, var d_qoy: Int, var d_year: Int, var ss_ext_sales_price: Double)

data class Web_sale(var ca_county: String, var d_qoy: Int, var d_year: Int, var ws_ext_sales_price: Double)

val store_sales = mutableListOf(Store_sale(ca_county = "A", d_qoy = 1, d_year = 2000, ss_ext_sales_price = 100.0), Store_sale(ca_county = "A", d_qoy = 2, d_year = 2000, ss_ext_sales_price = 120.0), Store_sale(ca_county = "A", d_qoy = 3, d_year = 2000, ss_ext_sales_price = 160.0), Store_sale(ca_county = "B", d_qoy = 1, d_year = 2000, ss_ext_sales_price = 80.0), Store_sale(ca_county = "B", d_qoy = 2, d_year = 2000, ss_ext_sales_price = 90.0), Store_sale(ca_county = "B", d_qoy = 3, d_year = 2000, ss_ext_sales_price = 100.0))

val web_sales = mutableListOf(Web_sale(ca_county = "A", d_qoy = 1, d_year = 2000, ws_ext_sales_price = 100.0), Web_sale(ca_county = "A", d_qoy = 2, d_year = 2000, ws_ext_sales_price = 150.0), Web_sale(ca_county = "A", d_qoy = 3, d_year = 2000, ws_ext_sales_price = 250.0), Web_sale(ca_county = "B", d_qoy = 1, d_year = 2000, ws_ext_sales_price = 80.0), Web_sale(ca_county = "B", d_qoy = 2, d_year = 2000, ws_ext_sales_price = 90.0), Web_sale(ca_county = "B", d_qoy = 3, d_year = 2000, ws_ext_sales_price = 95.0))

val counties = mutableListOf("A", "B")

var result = mutableListOf()

fun main() {
    for (county in counties) {
        val ss1 = sum(run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ca_county == county && s.d_qoy == 1) {
            __res.add(s.ss_ext_sales_price)
        }
    }
    __res
})
        val ss2 = sum(run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ca_county == county && s.d_qoy == 2) {
            __res.add(s.ss_ext_sales_price)
        }
    }
    __res
})
        val ss3 = sum(run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ca_county == county && s.d_qoy == 3) {
            __res.add(s.ss_ext_sales_price)
        }
    }
    __res
})
        val ws1 = sum(run {
    val __res = mutableListOf<Double>()
    for (w in web_sales) {
        if (w.ca_county == county && w.d_qoy == 1) {
            __res.add(w.ws_ext_sales_price)
        }
    }
    __res
})
        val ws2 = sum(run {
    val __res = mutableListOf<Double>()
    for (w in web_sales) {
        if (w.ca_county == county && w.d_qoy == 2) {
            __res.add(w.ws_ext_sales_price)
        }
    }
    __res
})
        val ws3 = sum(run {
    val __res = mutableListOf<Double>()
    for (w in web_sales) {
        if (w.ca_county == county && w.d_qoy == 3) {
            __res.add(w.ws_ext_sales_price)
        }
    }
    __res
})
        val web_g1 = toDouble(ws2) / toDouble(ws1)
        val store_g1 = toDouble(ss2) / toDouble(ss1)
        val web_g2 = toDouble(ws3) / toDouble(ws2)
        val store_g2 = toDouble(ss3) / toDouble(ss2)
        if (toDouble(toDouble(web_g1) > toDouble(store_g1) && web_g2) > toDouble(store_g2)) {
            result = result + mutableMapOf("ca_county" to county, "d_year" to 2000, "web_q1_q2_increase" to web_g1, "store_q1_q2_increase" to store_g1, "web_q2_q3_increase" to web_g2, "store_q2_q3_increase" to store_g2)
        }
    }
    json(result)
}
