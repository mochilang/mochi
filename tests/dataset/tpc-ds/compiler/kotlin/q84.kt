// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:44Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q84.mochi

data class Customer(var id: Int, var current_addr: Int, var cdemo: Int, var hdemo: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_city: String)

data class Customer_demographic(var cd_demo_sk: Int)

data class Household_demographic(var hd_demo_sk: Int, var income_band_sk: Int)

data class Income_band(var ib_income_band_sk: Int, var ib_lower_bound: Int, var ib_upper_bound: Int)

data class Store_return(var sr_cdemo_sk: Int, var amt: Double)

val customer = mutableListOf(Customer(id = 1, current_addr = 1, cdemo = 1, hdemo = 1), Customer(id = 2, current_addr = 1, cdemo = 2, hdemo = 2), Customer(id = 3, current_addr = 1, cdemo = 3, hdemo = 1), Customer(id = 4, current_addr = 1, cdemo = 4, hdemo = 2))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_city = "Springfield"))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1), Customer_demographic(cd_demo_sk = 2), Customer_demographic(cd_demo_sk = 3), Customer_demographic(cd_demo_sk = 4))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, income_band_sk = 1), Household_demographic(hd_demo_sk = 2, income_band_sk = 1))

val income_band = mutableListOf(Income_band(ib_income_band_sk = 1, ib_lower_bound = 0, ib_upper_bound = 50000))

val store_returns = mutableListOf(Store_return(sr_cdemo_sk = 1, amt = 10.0), Store_return(sr_cdemo_sk = 2, amt = 20.0), Store_return(sr_cdemo_sk = 3, amt = 30.0), Store_return(sr_cdemo_sk = 4, amt = 24.0))

val result = sum(run {
    val __res = mutableListOf<Double>()
    for (c in customer) {
        for (ca in customer_address) {
            if (c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield") {
                for (cd in customer_demographics) {
                    if (c.cdemo == cd.cd_demo_sk) {
                        for (sr in store_returns) {
                            if (cd.cd_demo_sk == sr.sr_cdemo_sk) {
                                for (hd in household_demographics) {
                                    if (c.hdemo == hd.hd_demo_sk) {
                                        for (ib in income_band) {
                                            if (hd.income_band_sk == ib.ib_income_band_sk) {
                                                __res.add(sr.amt)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
})

fun main() {
    json(result)
}
