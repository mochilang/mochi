// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:24:12Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q54.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_county: String, var ca_state: String)

data class Date_dim(var d_date_sk: Int, var d_month_seq: Int)

data class Store(var s_store_sk: Int, var s_county: String, var s_state: String)

data class Store_sale(var customer: Int, var sold_date: Int, var price: Double)

val store_sales = mutableListOf(Store_sale(customer = 1, sold_date = 2, price = 60.0), Store_sale(customer = 2, sold_date = 2, price = 40.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 2, d_month_seq = 5))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1), Customer(c_customer_sk = 2, c_current_addr_sk = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_county = "X", ca_state = "Y"))

val store = mutableListOf(Store(s_store_sk = 1, s_county = "X", s_state = "Y"))

val revenue = run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.sold_date == d.d_date_sk) {
                for (c in customer) {
                    if (ss.customer == c.c_customer_sk) {
                        for (ca in customer_address) {
                            if (c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "X" && ca.ca_state == "Y") {
                                for (s in store) {
                                    if (1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state) {
                                        __res.add(mutableMapOf("customer" to c.c_customer_sk, "amt" to ss.price))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val by_customer = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Int>>>()
    val __order = mutableListOf<Int>()
    for (r in revenue) {
        val __k = (r as MutableMap<String, Int>)["customer"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Int>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer" to g.key, "revenue" to sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add((x as MutableMap<String, Int>)["amt"])
    }
    __res
})))
    }
    __res
}

val segments = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (r in by_customer) {
        val __k = (mutableMapOf("seg" to int(div(toInt((r as MutableMap<String, Any?>)["revenue"]), (50).toDouble()))) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("segment" to (g.key as MutableMap<String, Any?>)["seg"], "num_customers" to g.size, "segment_base" to toInt((g.key as MutableMap<String, Any?>)["seg"]) * 50))
    }
    __res
}

val result = segments

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Int
 */
fun int(x: Double): Int {
    return (x).toInt()
}

fun main() {
    json(result)
}
