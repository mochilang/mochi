// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:54Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q70.mochi

data class Date_dim(var d_date_sk: Int, var d_month_seq: Int)

data class Store(var s_store_sk: Int, var s_state: String, var s_county: String)

data class Store_sale(var ss_sold_date_sk: Int, var ss_store_sk: Int, var ss_net_profit: Double)

val store = mutableListOf(Store(s_store_sk = 1, s_state = "CA", s_county = "Orange"), Store(s_store_sk = 2, s_state = "CA", s_county = "Orange"), Store(s_store_sk = 3, s_state = "TX", s_county = "Travis"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_month_seq = 1200), Date_dim(d_date_sk = 2, d_month_seq = 1201))

val store_sales = mutableListOf(Store_sale(ss_sold_date_sk = 1, ss_store_sk = 1, ss_net_profit = 10.0), Store_sale(ss_sold_date_sk = 1, ss_store_sk = 2, ss_net_profit = 5.0), Store_sale(ss_sold_date_sk = 2, ss_store_sk = 3, ss_net_profit = 20.0))

val dms = 1200

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ss.ss_sold_date_sk) {
                for (s in store) {
                    if (s.s_store_sk == ss.ss_store_sk) {
                        if (d.d_month_seq >= dms && d.d_month_seq <= dms + 11) {
                            val __k = (mutableMapOf("state" to s.s_state, "county" to s.s_county) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("ss" to ss, "d" to d, "s" to s) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf((g.key as MutableMap<String, Any?>)["state"], (g.key as MutableMap<String, Any?>)["county"]) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_state" to (g.key as MutableMap<String, Any?>)["state"], "s_county" to (g.key as MutableMap<String, Any?>)["county"], "total_sum" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_profit"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
