kotlinc: exit status 1
OpenJDK 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:105:20: error: type inference failed: inline fun <T> T.apply(block: T.() -> Unit): T
cannot be applied to
receiver: MutableList<Any?>  arguments: (MutableList<Any?>.() -> Boolean)

}).toMutableList().apply { addAll((run {
                   ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:105:26: error: type mismatch: inferred type is MutableList<Any?>.() -> Boolean but MutableList<Any?>.() -> Unit was expected
}).toMutableList().apply { addAll((run {
                         ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:117:29: error: type inference failed: Cannot infer type parameter V in inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit
None of the following substitutions
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>)
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?)
can be applied to
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?)

                            __groups[__k] = __g
                            ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:120:25: error: smart cast to 'Group<MutableMap<String, Any?>, MutableMap<String, Any?>>' is impossible, because '__g' is a local variable that is captured by a changing closure
                        __g.add(mutableMapOf("c" to c, "cs" to cs, "d" to d) as MutableMap<String, Any?>)
                        ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:138:23: error: type inference failed: inline fun <T> T.apply(block: T.() -> Unit): T
cannot be applied to
receiver: MutableList<Any?>  arguments: (MutableList<Any?>.() -> Boolean)

})) }.toMutableList().apply { addAll((run {
                      ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:138:29: error: type mismatch: inferred type is MutableList<Any?>.() -> Boolean but MutableList<Any?>.() -> Unit was expected
})) }.toMutableList().apply { addAll((run {
                            ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:150:29: error: type inference failed: Cannot infer type parameter V in inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit
None of the following substitutions
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>)
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?)
can be applied to
receiver: MutableMap<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>  arguments: (MutableMap<String, Any?>,Group<MutableMap<String, Any?>, MutableMap<String, Any?>>?)

                            __groups[__k] = __g
                            ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:153:25: error: smart cast to 'Group<MutableMap<String, Any?>, MutableMap<String, Any?>>' is impossible, because '__g' is a local variable that is captured by a changing closure
                        __g.add(mutableMapOf("c" to c, "ws" to ws, "d" to d) as MutableMap<String, Any?>)
                        ^
/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:743: error: type mismatch: inferred type is Any? but Boolean was expected
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:798: error: type mismatch: inferred type is Any? but Boolean was expected
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:853: error: type mismatch: inferred type is Any? but Boolean was expected
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:972: error: type mismatch: inferred type is Double but Boolean was expected
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:1097: error: null can not be a value of a non-null type Boolean
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:1378: error: type mismatch: inferred type is Double but Boolean was expected
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

/tmp/TestKotlinCompiler_TPCDSq41916209628/001/Main.kt:186:1503: error: null can not be a value of a non-null type Boolean
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {

