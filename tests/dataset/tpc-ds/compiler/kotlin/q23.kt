// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:28Z
fun max(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) > (m as Comparable<Any?>)) m = n
    }
    return m
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q23.mochi

data class StoreSale(var ss_item_sk: Int, var ss_sold_date_sk: Int, var ss_customer_sk: Int, var ss_quantity: Int, var ss_sales_price: Double)

data class DateDim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int)

data class CatalogSale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_customer_sk: Int, var cs_quantity: Int, var cs_list_price: Double)

data class WebSale(var ws_sold_date_sk: Int, var ws_item_sk: Int, var ws_bill_customer_sk: Int, var ws_quantity: Int, var ws_list_price: Double)

data class Catalog_sale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_customer_sk: Int, var cs_quantity: Int, var cs_list_price: Double)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int)

data class Store_sale(var ss_item_sk: Int, var ss_sold_date_sk: Int, var ss_customer_sk: Int, var ss_quantity: Int, var ss_sales_price: Double)

data class Web_sale(var ws_sold_date_sk: Int, var ws_item_sk: Int, var ws_bill_customer_sk: Int, var ws_quantity: Int, var ws_list_price: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_customer_sk = 1, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_customer_sk = 1, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_customer_sk = 1, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_customer_sk = 1, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_customer_sk = 1, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 2, ss_sold_date_sk = 1, ss_customer_sk = 2, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 2, ss_sold_date_sk = 1, ss_customer_sk = 2, ss_quantity = 1, ss_sales_price = 10.0), Store_sale(ss_item_sk = 2, ss_sold_date_sk = 1, ss_customer_sk = 2, ss_quantity = 1, ss_sales_price = 10.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_moy = 1))

val item = mutableListOf(Item(i_item_sk = 1), Item(i_item_sk = 2))

val catalog_sales = mutableListOf(Catalog_sale(cs_sold_date_sk = 1, cs_item_sk = 1, cs_bill_customer_sk = 1, cs_quantity = 2, cs_list_price = 10.0), Catalog_sale(cs_sold_date_sk = 1, cs_item_sk = 2, cs_bill_customer_sk = 2, cs_quantity = 2, cs_list_price = 10.0))

val web_sales = mutableListOf(Web_sale(ws_sold_date_sk = 1, ws_item_sk = 1, ws_bill_customer_sk = 1, ws_quantity = 3, ws_list_price = 10.0), Web_sale(ws_sold_date_sk = 1, ws_item_sk = 2, ws_bill_customer_sk = 2, ws_quantity = 1, ws_list_price = 10.0))

val frequent_ss_items = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                for (i in item) {
                    if (ss.ss_item_sk == i.i_item_sk) {
                        if (d.d_year == 2000) {
                            val __k = (mutableMapOf("item_sk" to i.i_item_sk, "date_sk" to d.d_date_sk) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("ss" to ss, "d" to d, "i" to i) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        if (g.size > 4) {
            __res.add((g.key as MutableMap<String, Any?>)["item_sk"])
        }
    }
    __res
}

val customer_totals = run {
    val __groups = mutableMapOf<Int, Group<Int, Store_sale>>()
    val __order = mutableListOf<Int>()
    for (ss in store_sales) {
        val __k = ss.ss_customer_sk
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(ss)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cust" to g.key, "sales" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.ss_quantity * toDouble(x.ss_sales_price))
    }
    __res
})))
    }
    __res
}

val max_sales = max(run {
    val __res = mutableListOf<Any?>()
    for (c in customer_totals) {
        __res.add((c as MutableMap<String, Any?>)["sales"])
    }
    __res
})

val best_ss_customer = run {
    val __res = mutableListOf<Any?>()
    for (c in customer_totals) {
        if (toDouble(toDouble((c as MutableMap<String, Any?>)["sales"]) > toDouble(0.95)) * toDouble(max_sales)) {
            __res.add((c as MutableMap<String, Any?>)["cust"])
        }
    }
    __res
}

val catalog = run {
    val __res = mutableListOf<Double>()
    for (cs in catalog_sales) {
        for (d in date_dim) {
            if (cs.cs_sold_date_sk == d.d_date_sk) {
                if (d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items) {
                    __res.add(cs.cs_quantity * toDouble(cs.cs_list_price))
                }
            }
        }
    }
    __res
}

val web = run {
    val __res = mutableListOf<Double>()
    for (ws in web_sales) {
        for (d in date_dim) {
            if (ws.ws_sold_date_sk == d.d_date_sk) {
                if (d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items) {
                    __res.add(ws.ws_quantity * toDouble(ws.ws_list_price))
                }
            }
        }
    }
    __res
}

val result = toDouble(sum(catalog)) + toDouble(sum(web))

fun main() {
    json(result)
}
