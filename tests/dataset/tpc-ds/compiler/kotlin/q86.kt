// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:52Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q86.mochi

data class Web_sale(var cat: String, var `class`: String, var net: Double)

val web_sales = mutableListOf(Web_sale(cat = "A", `class` = "B", net = 40.0), Web_sale(cat = "A", `class` = "B", net = 46.0), Web_sale(cat = "A", `class` = "C", net = 10.0), Web_sale(cat = "B", `class` = "B", net = 20.0))

val result = sum(run {
    val __res = mutableListOf<Double>()
    for (ws in web_sales) {
        if (ws.cat == "A" && ws.`class` == "B") {
            __res.add(ws.net)
        }
    }
    __res
})

fun main() {
    json(result)
}
