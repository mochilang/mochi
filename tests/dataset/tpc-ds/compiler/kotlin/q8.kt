// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:11:11Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q8.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int, var c_preferred_cust_flag: String)

data class Customer_addres(var ca_address_sk: Int, var ca_zip: String)

data class Date_dim(var d_date_sk: Int, var d_qoy: Int, var d_year: Int)

data class Store(var s_store_sk: Int, var s_store_name: String, var s_zip: String)

data class Store_sale(var ss_store_sk: Int, var ss_sold_date_sk: Int, var ss_net_profit: Double)

val store_sales = mutableListOf(Store_sale(ss_store_sk = 1, ss_sold_date_sk = 1, ss_net_profit = 10.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_qoy = 1, d_year = 1998))

val store = mutableListOf(Store(s_store_sk = 1, s_store_name = "Store1", s_zip = "12345"))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_zip = "12345"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1, c_preferred_cust_flag = "Y"))

val zip_list = mutableListOf("12345")

val result = run {
    val __groups = mutableMapOf<String, Group<String, MutableMap<String, Any?>>>()
    val __order = mutableListOf<String>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk && d.d_qoy == 1 && d.d_year == 1998) {
                for (s in store) {
                    if (ss.ss_store_sk == s.s_store_sk) {
                        for (ca in customer_address) {
                            if (substr(s.s_zip, 0, 2) == substr(ca.ca_zip, 0, 2)) {
                                for (c in customer) {
                                    if (ca.ca_address_sk == c.c_current_addr_sk && c.c_preferred_cust_flag == "Y") {
                                        if (substr(ca.ca_zip, 0, 5) in zip_list) {
                                            val __k = s.s_store_name
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("ss" to ss, "d" to d, "s" to s, "ca" to ca, "c" to c) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        g.key as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_store_name" to g.key, "net_profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_profit"])
    }
    __res
})))
    }
    __res
}

fun main() {
    reverse(substr("zip", 0, 2))
    json(result)
}
