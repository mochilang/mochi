// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:08Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q17.mochi

data class StoreSale(var ss_sold_date_sk: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_ticket_number: Int, var ss_quantity: Int, var ss_store_sk: Int)

data class StoreReturn(var sr_returned_date_sk: Int, var sr_customer_sk: Int, var sr_item_sk: Int, var sr_ticket_number: Int, var sr_return_quantity: Int)

data class CatalogSale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_customer_sk: Int, var cs_quantity: Int)

data class DateDim(var d_date_sk: Int, var d_quarter_name: String)

data class Store(var s_store_sk: Int, var s_state: String)

data class Item(var i_item_sk: Int, var i_item_id: String, var i_item_desc: String)

data class Catalog_sale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_customer_sk: Int, var cs_quantity: Int)

data class Date_dim(var d_date_sk: Int, var d_quarter_name: String)

data class Item(var i_item_sk: Int, var i_item_id: String, var i_item_desc: String)

data class Store(var s_store_sk: Int, var s_state: String)

data class Store_return(var sr_returned_date_sk: Int, var sr_customer_sk: Int, var sr_item_sk: Int, var sr_ticket_number: Int, var sr_return_quantity: Int)

data class Store_sale(var ss_sold_date_sk: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_ticket_number: Int, var ss_quantity: Int, var ss_store_sk: Int)

val store_sales = mutableListOf(Store_sale(ss_sold_date_sk = 1, ss_item_sk = 1, ss_customer_sk = 1, ss_ticket_number = 1, ss_quantity = 10, ss_store_sk = 1))

val store_returns = mutableListOf(Store_return(sr_returned_date_sk = 2, sr_customer_sk = 1, sr_item_sk = 1, sr_ticket_number = 1, sr_return_quantity = 2))

val catalog_sales = mutableListOf(Catalog_sale(cs_sold_date_sk = 3, cs_item_sk = 1, cs_bill_customer_sk = 1, cs_quantity = 5))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_quarter_name = "1998Q1"), Date_dim(d_date_sk = 2, d_quarter_name = "1998Q2"), Date_dim(d_date_sk = 3, d_quarter_name = "1998Q3"))

val store = mutableListOf(Store(s_store_sk = 1, s_state = "CA"))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "I1", i_item_desc = "Item 1"))

val joined = run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (sr in store_returns) {
            if (ss.ss_customer_sk == sr.sr_customer_sk && ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number) {
                for (cs in catalog_sales) {
                    if (sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) {
                        for (d1 in date_dim) {
                            if (ss.ss_sold_date_sk == d1.d_date_sk && d1.d_quarter_name == "1998Q1") {
                                for (d2 in date_dim) {
                                    if (sr.sr_returned_date_sk == d2.d_date_sk && d2.d_quarter_name in mutableListOf("1998Q1", "1998Q2", "1998Q3")) {
                                        for (d3 in date_dim) {
                                            if (cs.cs_sold_date_sk == d3.d_date_sk && d3.d_quarter_name in mutableListOf("1998Q1", "1998Q2", "1998Q3")) {
                                                for (s in store) {
                                                    if (ss.ss_store_sk == s.s_store_sk) {
                                                        for (i in item) {
                                                            if (ss.ss_item_sk == i.i_item_sk) {
                                                                __res.add(mutableMapOf("qty" to ss.ss_quantity, "ret" to sr.sr_return_quantity, "csq" to cs.cs_quantity, "i_item_id" to i.i_item_id, "i_item_desc" to i.i_item_desc, "s_state" to s.s_state))
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Int>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (j in joined) {
        val __k = (mutableMapOf("i_item_id" to (j as MutableMap<String, Int>)["i_item_id"], "i_item_desc" to (j as MutableMap<String, Int>)["i_item_desc"], "s_state" to (j as MutableMap<String, Int>)["s_state"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Int>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(j)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to (g.key as MutableMap<String, Any?>)["i_item_id"], "i_item_desc" to (g.key as MutableMap<String, Any?>)["i_item_desc"], "s_state" to (g.key as MutableMap<String, Any?>)["s_state"], "store_sales_quantitycount" to run {
    val __res = mutableListOf<MutableMap<String, Int>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Int>))
    }
    __res
}.size, "store_sales_quantityave" to run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add((x as MutableMap<String, Int>)["qty"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "store_sales_quantitystdev" to 0.0, "store_sales_quantitycov" to 0.0, "store_returns_quantitycount" to run {
    val __res = mutableListOf<MutableMap<String, Int>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Int>))
    }
    __res
}.size, "store_returns_quantityave" to run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add((x as MutableMap<String, Int>)["ret"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "store_returns_quantitystdev" to 0.0, "store_returns_quantitycov" to 0.0, "catalog_sales_quantitycount" to run {
    val __res = mutableListOf<MutableMap<String, Int>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Int>))
    }
    __res
}.size, "catalog_sales_quantityave" to run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add((x as MutableMap<String, Int>)["csq"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "catalog_sales_quantitystdev" to 0.0, "catalog_sales_quantitycov" to 0.0))
    }
    __res
}

fun main() {
    json(result)
}
