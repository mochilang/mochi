// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:52Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q30.mochi

data class Customer(var c_customer_sk: Int, var c_customer_id: String, var c_first_name: String, var c_last_name: String, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_state: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Web_return(var wr_returning_customer_sk: Int, var wr_returned_date_sk: Int, var wr_return_amt: Double, var wr_returning_addr_sk: Int)

val web_returns = mutableListOf(Web_return(wr_returning_customer_sk = 1, wr_returned_date_sk = 1, wr_return_amt = 100.0, wr_returning_addr_sk = 1), Web_return(wr_returning_customer_sk = 2, wr_returned_date_sk = 1, wr_return_amt = 30.0, wr_returning_addr_sk = 2), Web_return(wr_returning_customer_sk = 1, wr_returned_date_sk = 1, wr_return_amt = 50.0, wr_returning_addr_sk = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_state = "CA"), Customer_addres(ca_address_sk = 2, ca_state = "CA"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_customer_id = "C1", c_first_name = "John", c_last_name = "Doe", c_current_addr_sk = 1), Customer(c_customer_sk = 2, c_customer_id = "C2", c_first_name = "Jane", c_last_name = "Smith", c_current_addr_sk = 2))

val customer_total_return = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (wr in web_returns) {
        for (d in date_dim) {
            if (wr.wr_returned_date_sk == d.d_date_sk) {
                for (ca in customer_address) {
                    if (wr.wr_returning_addr_sk == ca.ca_address_sk) {
                        if (d.d_year == 2000 && ca.ca_state == "CA") {
                            val __k = (mutableMapOf("cust" to wr.wr_returning_customer_sk, "state" to ca.ca_state) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("wr" to wr, "d" to d, "ca" to ca) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ctr_customer_sk" to (g.key as MutableMap<String, Any?>)["cust"], "ctr_state" to (g.key as MutableMap<String, Any?>)["state"], "ctr_total_return" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["wr_return_amt"])
    }
    __res
})))
    }
    __res
}

val avg_by_state = run {
    val __groups = mutableMapOf<Any?, Group<Any?, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Any?>()
    for (ctr in customer_total_return) {
        val __k = (ctr as MutableMap<String, Any?>)["ctr_state"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(ctr)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("state" to g.key, "avg_return" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ctr_total_return"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (ctr in customer_total_return) {
        for (avg in avg_by_state) {
            if ((ctr as MutableMap<String, Any?>)["ctr_state"] == (avg as MutableMap<String, Any?>)["state"]) {
                for (c in customer) {
                    if ((ctr as MutableMap<String, Any?>)["ctr_customer_sk"] == c.c_customer_sk) {
                        if (toDouble(toDouble((ctr as MutableMap<String, Any?>)["ctr_total_return"]) > toDouble((avg as MutableMap<String, Any?>)["avg_return"])) * toDouble(1.2)) {
                            __res.add(mutableMapOf("c_customer_id" to c.c_customer_id, "c_first_name" to c.c_first_name, "c_last_name" to c.c_last_name, "ctr_total_return" to (ctr as MutableMap<String, Any?>)["ctr_total_return"]))
                        }
                    }
                }
            }
        }
    }
    __res
}

fun main() {
    json(result)
}
