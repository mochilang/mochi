// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:13Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q93.mochi

data class StoreSale(var ss_item_sk: Int, var ss_ticket_number: Int, var ss_customer_sk: Int, var ss_quantity: Int, var ss_sales_price: Double)

data class StoreReturn(var sr_item_sk: Int, var sr_ticket_number: Int, var sr_reason_sk: Int, var sr_return_quantity: Int)

data class Reason(var r_reason_sk: Int, var r_reason_desc: String)

data class Reason(var r_reason_sk: Int, var r_reason_desc: String)

data class Store_return(var sr_item_sk: Int, var sr_ticket_number: Int, var sr_reason_sk: Int, var sr_return_quantity: Int)

data class Store_sale(var ss_item_sk: Int, var ss_ticket_number: Int, var ss_customer_sk: Int, var ss_quantity: Int, var ss_sales_price: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_ticket_number = 1, ss_customer_sk = 1, ss_quantity = 5, ss_sales_price = 10.0), Store_sale(ss_item_sk = 1, ss_ticket_number = 2, ss_customer_sk = 2, ss_quantity = 3, ss_sales_price = 20.0))

val store_returns = mutableListOf(Store_return(sr_item_sk = 1, sr_ticket_number = 1, sr_reason_sk = 1, sr_return_quantity = 1))

val reason = mutableListOf(Reason(r_reason_sk = 1, r_reason_desc = "ReasonA"))

val t = run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (sr in store_returns) {
            if (ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number) {
                for (r in reason) {
                    if (sr != null && sr.sr_reason_sk == r.r_reason_sk) {
                        if (r == null || r.r_reason_desc == "ReasonA") {
                            __res.add(mutableMapOf("ss_customer_sk" to ss.ss_customer_sk, "act_sales" to if (sr != null) (ss.ss_quantity - sr.sr_return_quantity) * toDouble(ss.ss_sales_price) else ss.ss_quantity * toDouble(ss.ss_sales_price)))
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<Any?, Group<Any?, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Any?>()
    for (x in t) {
        val __k = (x as MutableMap<String, Any?>)["ss_customer_sk"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf(sum(run {
    val __res = mutableListOf<Any?>()
    for (y in g) {
        __res.add((y as MutableMap<String, Any?>)["act_sales"])
    }
    __res
}), g.key) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ss_customer_sk" to g.key, "sumsales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (y in g) {
        __res.add((y as MutableMap<String, Any?>)["act_sales"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
