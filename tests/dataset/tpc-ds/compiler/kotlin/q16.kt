// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:04Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q16.mochi

data class CatalogSale(var cs_order_number: Int, var cs_ship_date_sk: Int, var cs_ship_addr_sk: Int, var cs_call_center_sk: Int, var cs_warehouse_sk: Int, var cs_ext_ship_cost: Double, var cs_net_profit: Double)

data class DateDim(var d_date_sk: Int, var d_date: String)

data class CustomerAddress(var ca_address_sk: Int, var ca_state: String)

data class CallCenter(var cc_call_center_sk: Int, var cc_county: String)

data class CatalogReturn(var cr_order_number: Int)

data class Call_center(var cc_call_center_sk: Int, var cc_county: String)

data class Catalog_sale(var cs_order_number: Int, var cs_ship_date_sk: Int, var cs_ship_addr_sk: Int, var cs_call_center_sk: Int, var cs_warehouse_sk: Int, var cs_ext_ship_cost: Double, var cs_net_profit: Double)

data class Customer_addres(var ca_address_sk: Int, var ca_state: String)

data class Date_dim(var d_date_sk: Int, var d_date: String)

val catalog_sales = mutableListOf(Catalog_sale(cs_order_number = 1, cs_ship_date_sk = 1, cs_ship_addr_sk = 1, cs_call_center_sk = 1, cs_warehouse_sk = 1, cs_ext_ship_cost = 5.0, cs_net_profit = 20.0), Catalog_sale(cs_order_number = 1, cs_ship_date_sk = 1, cs_ship_addr_sk = 1, cs_call_center_sk = 1, cs_warehouse_sk = 2, cs_ext_ship_cost = 0.0, cs_net_profit = 0.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_date = "2000-03-01"))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_state = "CA"))

val call_center = mutableListOf(Call_center(cc_call_center_sk = 1, cc_county = "CountyA"))

val catalog_returns = mutableListOf()

val filtered = run {
    val __groups = mutableMapOf<MutableMap<Any?, Any?>, Group<MutableMap<Any?, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<Any?, Any?>>()
    for (cs1 in catalog_sales) {
        for (d in date_dim) {
            if (cs1.cs_ship_date_sk == d.d_date_sk && d.d_date >= "2000-03-01" && d.d_date <= "2000-04-30") {
                for (ca in customer_address) {
                    if (cs1.cs_ship_addr_sk == ca.ca_address_sk && ca.ca_state == "CA") {
                        for (cc in call_center) {
                            if (cs1.cs_call_center_sk == cc.cc_call_center_sk && cc.cc_county == "CountyA") {
                                if (run {
    val __res = mutableListOf<Catalog_sale>()
    for (cs2 in catalog_sales) {
        if (cs1.cs_order_number == cs2.cs_order_number && cs1.cs_warehouse_sk != cs2.cs_warehouse_sk) {
            __res.add(cs2)
        }
    }
    __res
}.isNotEmpty() && run {
    val __res = mutableListOf<Any?>()
    for (cr in catalog_returns) {
        if (cs1.cs_order_number == (cr as MutableMap<*, *>)["cr_order_number"]) {
            __res.add(cr)
        }
    }
    __res
}.isNotEmpty() == false) {
                                    val __k = (mutableMapOf() as MutableMap<Any?, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("cs1" to cs1, "d" to d, "ca" to ca, "cc" to cc) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("order_count" to distinct(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_order_number"])
    }
    __res
}).size, "total_shipping_cost" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_ext_ship_cost"])
    }
    __res
}), "total_net_profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_net_profit"])
    }
    __res
})))
    }
    __res
}

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Any>
 * @return MutableList<Any>
 */
fun distinct(xs: MutableList<Any>): MutableList<Any> {
    var out = mutableListOf()
    for (x in xs) {
        if (!contains(out, x)) {
            out = out + x
        }
    }
    return out
}

fun main() {
    json(filtered)
}
