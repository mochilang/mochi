// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:28Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q98.mochi

data class StoreSale(var ss_item_sk: Int, var ss_sold_date_sk: Int, var ss_ext_sales_price: Double)

data class Item(var i_item_sk: Int, var i_item_id: String, var i_item_desc: String, var i_category: String, var i_class: String, var i_current_price: Double)

data class DateDim(var d_date_sk: Int, var d_date: String)

data class Date_dim(var d_date_sk: Int, var d_date: String)

data class Item(var i_item_sk: Int, var i_item_id: String, var i_item_desc: String, var i_category: String, var i_class: String, var i_current_price: Double)

data class Store_sale(var ss_item_sk: Int, var ss_sold_date_sk: Int, var ss_ext_sales_price: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_sold_date_sk = 1, ss_ext_sales_price = 50.0), Store_sale(ss_item_sk = 2, ss_sold_date_sk = 1, ss_ext_sales_price = 100.0))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "I1", i_item_desc = "desc1", i_category = "CatA", i_class = "Class1", i_current_price = 100.0), Item(i_item_sk = 2, i_item_id = "I2", i_item_desc = "desc2", i_category = "CatB", i_class = "Class1", i_current_price = 200.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_date = "2000-02-01"))

val grouped = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (i in item) {
            if (ss.ss_item_sk == i.i_item_sk) {
                for (d in date_dim) {
                    if (ss.ss_sold_date_sk == d.d_date_sk) {
                        val __k = (mutableMapOf("item_id" to i.i_item_id, "item_desc" to i.i_item_desc, "category" to i.i_category, "class" to i.i_class, "price" to i.i_current_price) as MutableMap<String, Any?>)
                        var __g = __groups[__k]
                        if (__g == null) {
                            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                            __groups[__k] = __g
                            __order.add(__k)
                        }
                        __g.add(mutableMapOf("ss" to ss, "i" to i, "d" to d) as MutableMap<String, Any?>)
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to (g.key as MutableMap<String, Any?>)["item_id"], "i_item_desc" to (g.key as MutableMap<String, Any?>)["item_desc"], "i_category" to (g.key as MutableMap<String, Any?>)["category"], "i_class" to (g.key as MutableMap<String, Any?>)["class"], "i_current_price" to (g.key as MutableMap<String, Any?>)["price"], "itemrevenue" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_ext_sales_price"])
    }
    __res
})))
    }
    __res
}

val totals = run {
    val __groups = mutableMapOf<Any?, Group<Any?, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Any?>()
    for (g in grouped) {
        val __k = (g as MutableMap<String, Any?>)["i_class"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(g)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        val cg = g
        __res.add(mutableMapOf("class" to cg.key, "total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in cg) {
        __res.add((x as MutableMap<String, Any?>)["itemrevenue"])
    }
    __res
})))
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (g in grouped) {
        for (t in totals) {
            if ((g as MutableMap<String, Any?>)["i_class"] == (t as MutableMap<String, Any?>)["class"]) {
                __res.add(mutableMapOf("i_item_id" to (g as MutableMap<String, Any?>)["i_item_id"], "i_item_desc" to (g as MutableMap<String, Any?>)["i_item_desc"], "i_category" to (g as MutableMap<String, Any?>)["i_category"], "i_class" to (g as MutableMap<String, Any?>)["i_class"], "i_current_price" to (g as MutableMap<String, Any?>)["i_current_price"], "itemrevenue" to (g as MutableMap<String, Any?>)["itemrevenue"], "revenueratio" to div((toInt((g as MutableMap<String, Any?>)["itemrevenue"]) * 100).toDouble(), toInt((t as MutableMap<String, Any?>)["total"]))))
            }
        }
    }
    __res
}.sortedBy { mutableListOf((it as MutableMap<String, Any?>)["i_category"], (it as MutableMap<String, Any?>)["i_class"], (it as MutableMap<String, Any?>)["i_item_id"]) as Comparable<Any> }

fun main() {
    json(result)
}
