// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:55Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q59.mochi

data class Sales_year1(var week: Int, var store: Int, var amount: Double)

data class Sales_year2(var week: Int, var store: Int, var amount: Double)

val sales_year1 = mutableListOf(Sales_year1(week = 1, store = 1, amount = 100.0))

val sales_year2 = mutableListOf(Sales_year2(week = 53, store = 1, amount = 150.0))

val join = run {
    val __res = mutableListOf<Any?>()
    for (y1 in sales_year1) {
        for (y2 in sales_year2) {
            if (y1.store == y2.store && y1.week == y2.week - 52) {
                __res.add(mutableMapOf("s_store_id1" to y1.store, "ratio" to toDouble(y2.amount) / toDouble(y1.amount)))
            }
        }
    }
    __res
}

val result = join

fun main() {
    json(result)
}
