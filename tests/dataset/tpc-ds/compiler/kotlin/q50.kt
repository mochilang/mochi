// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:24:00Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q50.mochi

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Store(var s_store_sk: Int, var s_store_name: String, var s_company_id: Int, var s_street_number: String, var s_street_name: String, var s_street_type: String, var s_suite_number: String, var s_city: String, var s_county: String, var s_state: String, var s_zip: String)

data class Store_return(var ticket: Int, var item: Int, var returned: Int, var customer: Int)

data class Store_sale(var ticket: Int, var item: Int, var sold: Int, var customer: Int, var store: Int)

val store_sales = mutableListOf(Store_sale(ticket = 1, item = 101, sold = 1, customer = 1, store = 1), Store_sale(ticket = 2, item = 102, sold = 1, customer = 1, store = 1), Store_sale(ticket = 3, item = 103, sold = 1, customer = 1, store = 1), Store_sale(ticket = 4, item = 104, sold = 1, customer = 1, store = 1), Store_sale(ticket = 5, item = 105, sold = 1, customer = 1, store = 1))

val store_returns = mutableListOf(Store_return(ticket = 1, item = 101, returned = 16, customer = 1), Store_return(ticket = 2, item = 102, returned = 46, customer = 1), Store_return(ticket = 3, item = 103, returned = 76, customer = 1), Store_return(ticket = 4, item = 104, returned = 111, customer = 1), Store_return(ticket = 5, item = 105, returned = 151, customer = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2001, d_moy = 7), Date_dim(d_date_sk = 16, d_year = 2001, d_moy = 8), Date_dim(d_date_sk = 46, d_year = 2001, d_moy = 8), Date_dim(d_date_sk = 76, d_year = 2001, d_moy = 8), Date_dim(d_date_sk = 111, d_year = 2001, d_moy = 8), Date_dim(d_date_sk = 151, d_year = 2001, d_moy = 8))

val store = mutableListOf(Store(s_store_sk = 1, s_store_name = "Main", s_company_id = 1, s_street_number = "1", s_street_name = "Main", s_street_type = "St", s_suite_number = "100", s_city = "City", s_county = "County", s_state = "CA", s_zip = "12345"))

val year = 2001

val month = 8

val joined = run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (sr in store_returns) {
            if (ss.ticket == sr.ticket && ss.item == sr.item && ss.customer == sr.customer) {
                for (d1 in date_dim) {
                    if (ss.sold == d1.d_date_sk) {
                        for (d2 in date_dim) {
                            if (sr.returned == d2.d_date_sk && d2.d_year == year && d2.d_moy == month) {
                                for (s in store) {
                                    if (ss.store == s.s_store_sk) {
                                        __res.add(mutableMapOf("s" to s, "diff" to sr.returned - ss.sold))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<Any?, Group<Any?, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Any?>()
    for (j in joined) {
        val __k = (j as MutableMap<String, Any?>)["s"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(j)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_store_name" to (g.key as MutableMap<*, *>)["s_store_name"], "d30" to run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        if (toInt((x as MutableMap<String, Any?>)["diff"]) <= 30) {
            __res.add(1)
        }
    }
    __res
}.size, "d31_60" to run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        if (toInt(toInt((x as MutableMap<String, Any?>)["diff"]) > 30 && (x as MutableMap<String, Any?>)["diff"]) <= 60) {
            __res.add(1)
        }
    }
    __res
}.size, "d61_90" to run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        if (toInt(toInt((x as MutableMap<String, Any?>)["diff"]) > 60 && (x as MutableMap<String, Any?>)["diff"]) <= 90) {
            __res.add(1)
        }
    }
    __res
}.size, "d91_120" to run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        if (toInt(toInt((x as MutableMap<String, Any?>)["diff"]) > 90 && (x as MutableMap<String, Any?>)["diff"]) <= 120) {
            __res.add(1)
        }
    }
    __res
}.size, "d_gt_120" to run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        if (toInt((x as MutableMap<String, Any?>)["diff"]) > 120) {
            __res.add(1)
        }
    }
    __res
}.size))
    }
    __res
}

fun main() {
    json(result)
}
