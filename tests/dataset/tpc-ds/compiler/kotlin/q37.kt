// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:18Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q37.mochi

data class Catalog_sale(var cs_item_sk: Int, var cs_sold_date_sk: Int)

data class Date_dim(var d_date_sk: Int, var d_date: String)

data class Inventory(var inv_item_sk: Int, var inv_warehouse_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Item(var i_item_sk: Int, var i_item_id: String, var i_item_desc: String, var i_current_price: Double, var i_manufact_id: Int)

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "I1", i_item_desc = "Item1", i_current_price = 30.0, i_manufact_id = 800), Item(i_item_sk = 2, i_item_id = "I2", i_item_desc = "Item2", i_current_price = 60.0, i_manufact_id = 801))

val inventory = mutableListOf(Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 1, inv_quantity_on_hand = 200), Inventory(inv_item_sk = 2, inv_warehouse_sk = 1, inv_date_sk = 1, inv_quantity_on_hand = 300))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_date = "2000-01-15"))

val catalog_sales = mutableListOf(Catalog_sale(cs_item_sk = 1, cs_sold_date_sk = 1))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (i in item) {
        for (inv in inventory) {
            if (i.i_item_sk == inv.inv_item_sk) {
                for (d in date_dim) {
                    if (inv.inv_date_sk == d.d_date_sk) {
                        for (cs in catalog_sales) {
                            if (cs.cs_item_sk == i.i_item_sk) {
                                if (toDouble(toDouble(i.i_current_price) >= 20 && i.i_current_price) <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500) {
                                    val __k = (mutableMapOf("id" to i.i_item_id, "desc" to i.i_item_desc, "price" to i.i_current_price) as MutableMap<String, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("i" to i, "inv" to inv, "d" to d, "cs" to cs) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        (g.key as MutableMap<String, Any?>)["id"] as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to (g.key as MutableMap<String, Any?>)["id"], "i_item_desc" to (g.key as MutableMap<String, Any?>)["desc"], "i_current_price" to (g.key as MutableMap<String, Any?>)["price"]))
    }
    __res
}

fun main() {
    json(result)
}
