// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:01Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q72.mochi

data class Catalog_sale(var cs_item_sk: Int, var cs_order_number: Int, var cs_quantity: Int, var cs_sold_date_sk: Int, var cs_ship_date_sk: Int, var cs_bill_cdemo_sk: Int, var cs_bill_hdemo_sk: Int, var cs_promo_sk: Any?)

data class Customer_demographic(var cd_demo_sk: Int, var cd_marital_status: String)

data class Date_dim(var d_date_sk: Int, var d_week_seq: Int, var d_date: Int, var d_year: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_buy_potential: String)

data class Inventory(var inv_item_sk: Int, var inv_warehouse_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Item(var i_item_sk: Int, var i_item_desc: String)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

val catalog_sales = mutableListOf(Catalog_sale(cs_item_sk = 1, cs_order_number = 1, cs_quantity = 1, cs_sold_date_sk = 1, cs_ship_date_sk = 3, cs_bill_cdemo_sk = 1, cs_bill_hdemo_sk = 1, cs_promo_sk = null))

val inventory = mutableListOf(Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 2, inv_quantity_on_hand = 0))

val warehouse = mutableListOf(Warehouse(w_warehouse_sk = 1, w_warehouse_name = "Main"))

val item = mutableListOf(Item(i_item_sk = 1, i_item_desc = "ItemA"))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_marital_status = "M"))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_buy_potential = "5001-10000"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_week_seq = 10, d_date = 1, d_year = 2000), Date_dim(d_date_sk = 2, d_week_seq = 10, d_date = 1, d_year = 2000), Date_dim(d_date_sk = 3, d_week_seq = 10, d_date = 7, d_year = 2000))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cs in catalog_sales) {
        for (inv in inventory) {
            if (inv.inv_item_sk == cs.cs_item_sk) {
                for (w in warehouse) {
                    if (w.w_warehouse_sk == inv.inv_warehouse_sk) {
                        for (i in item) {
                            if (i.i_item_sk == cs.cs_item_sk) {
                                for (cd in customer_demographics) {
                                    if (cd.cd_demo_sk == cs.cs_bill_cdemo_sk) {
                                        for (hd in household_demographics) {
                                            if (hd.hd_demo_sk == cs.cs_bill_hdemo_sk) {
                                                for (d1 in date_dim) {
                                                    if (d1.d_date_sk == cs.cs_sold_date_sk) {
                                                        for (d2 in date_dim) {
                                                            if (d2.d_date_sk == inv.inv_date_sk) {
                                                                for (d3 in date_dim) {
                                                                    if (d3.d_date_sk == cs.cs_ship_date_sk) {
                                                                        if (d1.d_week_seq == d2.d_week_seq && inv.inv_quantity_on_hand < cs.cs_quantity && d3.d_date > d1.d_date + 5 && hd.hd_buy_potential == "5001-10000" && d1.d_year == 2000 && cd.cd_marital_status == "M") {
                                                                            val __k = (mutableMapOf("item_desc" to i.i_item_desc, "warehouse" to w.w_warehouse_name, "week_seq" to d1.d_week_seq) as MutableMap<String, Any?>)
                                                                            var __g = __groups[__k]
                                                                            if (__g == null) {
                                                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                                                __groups[__k] = __g
                                                                                __order.add(__k)
                                                                            }
                                                                            __g.add(mutableMapOf("cs" to cs, "inv" to inv, "w" to w, "i" to i, "cd" to cd, "hd" to hd, "d1" to d1, "d2" to d2, "d3" to d3) as MutableMap<String, Any?>)
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_desc" to (g.key as MutableMap<String, Any?>)["item_desc"], "w_warehouse_name" to (g.key as MutableMap<String, Any?>)["warehouse"], "d_week_seq" to (g.key as MutableMap<String, Any?>)["week_seq"], "no_promo" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["cs_promo_sk"] == null) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "promo" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["cs_promo_sk"] != null) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "total_cnt" to g.size))
    }
    __res
}

fun main() {
    json(result)
}
