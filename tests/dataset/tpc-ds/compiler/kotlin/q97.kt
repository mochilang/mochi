// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:24Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q97.mochi

data class StoreSale(var ss_customer_sk: Int, var ss_item_sk: Int)

data class CatalogSale(var cs_bill_customer_sk: Int, var cs_item_sk: Int)

data class Catalog_sale(var cs_bill_customer_sk: Int, var cs_item_sk: Int)

data class Store_sale(var ss_customer_sk: Int, var ss_item_sk: Int)

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 2, ss_item_sk = 1))

val catalog_sales = mutableListOf(Catalog_sale(cs_bill_customer_sk = 1, cs_item_sk = 1), Catalog_sale(cs_bill_customer_sk = 3, cs_item_sk = 2))

val ssci = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Store_sale>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        val __k = (mutableMapOf("customer_sk" to ss.ss_customer_sk, "item_sk" to ss.ss_item_sk) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(ss)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_sk" to (g.key as MutableMap<String, Any?>)["customer_sk"], "item_sk" to (g.key as MutableMap<String, Any?>)["item_sk"]))
    }
    __res
}

val csci = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Catalog_sale>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cs in catalog_sales) {
        val __k = (mutableMapOf("customer_sk" to cs.cs_bill_customer_sk, "item_sk" to cs.cs_item_sk) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Catalog_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(cs)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_sk" to (g.key as MutableMap<String, Any?>)["customer_sk"], "item_sk" to (g.key as MutableMap<String, Any?>)["item_sk"]))
    }
    __res
}

val both = run {
    val __res = mutableListOf<Int>()
    for (s in ssci) {
        for (c in csci) {
            if ((s as MutableMap<String, Int>)["customer_sk"] == (c as MutableMap<String, Int>)["customer_sk"] && (s as MutableMap<String, Int>)["item_sk"] == (c as MutableMap<String, Int>)["item_sk"]) {
                __res.add(1)
            }
        }
    }
    __res
}.size

val store_only = run {
    val __res = mutableListOf<Int>()
    for (s in ssci) {
        if (!(run {
    val __res = mutableListOf<MutableMap<String, Int>>()
    for (c in csci) {
        if ((s as MutableMap<String, Int>)["customer_sk"] == (c as MutableMap<String, Int>)["customer_sk"] && (s as MutableMap<String, Int>)["item_sk"] == (c as MutableMap<String, Int>)["item_sk"]) {
            __res.add((c as MutableMap<String, Int>))
        }
    }
    __res
}.isNotEmpty())) {
            __res.add(1)
        }
    }
    __res
}.size

val catalog_only = run {
    val __res = mutableListOf<Int>()
    for (c in csci) {
        if (!(run {
    val __res = mutableListOf<MutableMap<String, Int>>()
    for (s in ssci) {
        if ((s as MutableMap<String, Int>)["customer_sk"] == (c as MutableMap<String, Int>)["customer_sk"] && (s as MutableMap<String, Int>)["item_sk"] == (c as MutableMap<String, Int>)["item_sk"]) {
            __res.add((s as MutableMap<String, Int>))
        }
    }
    __res
}.isNotEmpty())) {
            __res.add(1)
        }
    }
    __res
}.size

val result = mutableMapOf("store_only" to store_only, "catalog_only" to catalog_only, "store_and_catalog" to both)

fun main() {
    json(result)
}
