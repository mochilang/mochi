// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:16Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q57.mochi

data class Call_center(var cc_call_center_sk: Int, var cc_name: String)

data class Catalog_sale(var item: Int, var call: Int, var date: Int, var price: Double)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int, var i_category: String, var i_brand: String)

val catalog_sales = mutableListOf(Catalog_sale(item = 1, call = 1, date = 1, price = 20.0), Catalog_sale(item = 1, call = 1, date = 2, price = 20.0), Catalog_sale(item = 1, call = 1, date = 3, price = 40.0))

val item = mutableListOf(Item(i_item_sk = 1, i_category = "A", i_brand = "B"))

val call_center = mutableListOf(Call_center(cc_call_center_sk = 1, cc_name = "C1"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_moy = 11), Date_dim(d_date_sk = 2, d_year = 2000, d_moy = 12), Date_dim(d_date_sk = 3, d_year = 2001, d_moy = 1))

val grouped = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cs in catalog_sales) {
        for (i in item) {
            if (cs.item == i.i_item_sk) {
                for (d in date_dim) {
                    if (cs.date == d.d_date_sk) {
                        for (cc in call_center) {
                            if (cs.call == cc.cc_call_center_sk) {
                                val __k = (mutableMapOf("cat" to i.i_category, "call" to cc.cc_name, "year" to d.d_year) as MutableMap<String, Any?>)
                                var __g = __groups[__k]
                                if (__g == null) {
                                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                    __groups[__k] = __g
                                    __order.add(__k)
                                }
                                __g.add(mutableMapOf("cs" to cs, "i" to i, "d" to d, "cc" to cc) as MutableMap<String, Any?>)
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cat" to (g.key as MutableMap<String, Any?>)["cat"], "call" to (g.key as MutableMap<String, Any?>)["call"], "year" to (g.key as MutableMap<String, Any?>)["year"], "sum_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["price"])
    }
    __res
})))
    }
    __res
}

val avg_by_year = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (g in grouped) {
        val __k = (mutableMapOf("cat" to (g as MutableMap<String, Any?>)["cat"], "call" to (g as MutableMap<String, Any?>)["call"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(g)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        val gg = g
        __res.add(mutableMapOf("cat" to (gg.key as MutableMap<String, Any?>)["cat"], "call" to (gg.key as MutableMap<String, Any?>)["call"], "avg_sales" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in gg) {
        __res.add((x as MutableMap<String, Any?>)["sum_sales"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (g in grouped) {
        for (a in avg_by_year) {
            if ((g as MutableMap<String, Any?>)["cat"] == (a as MutableMap<String, Any?>)["cat"] && (g as MutableMap<String, Any?>)["call"] == (a as MutableMap<String, Any?>)["call"]) {
                if (toDouble(div(toDouble(toInt((g as MutableMap<String, Any?>)["year"] == 2001 && (a as MutableMap<String, Any?>)["avg_sales"]) > 0 && abs(toDouble((g as MutableMap<String, Any?>)["sum_sales"]) - toDouble((a as MutableMap<String, Any?>)["avg_sales"]))), toDouble((a as MutableMap<String, Any?>)["avg_sales"]))) > toDouble(0.1)) {
                    __res.add(mutableMapOf("i_category" to (g as MutableMap<String, Any?>)["cat"], "sum_sales" to (g as MutableMap<String, Any?>)["sum_sales"]))
                }
            }
        }
    }
    __res
}

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun abs(x: Double): Double {
    if (toDouble(x) >= toDouble(0.0)) {
        return x
    }
    return -x
}

fun main() {
    json(result)
}
