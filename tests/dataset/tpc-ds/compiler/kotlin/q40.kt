// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:26Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q40.mochi

data class Catalog_return(var order: Int, var item_sk: Int, var refunded: Double)

data class Catalog_sale(var order: Int, var item_sk: Int, var warehouse_sk: Int, var date_sk: Int, var price: Double)

data class Date_dim(var date_sk: Int, var date: String)

data class Item(var item_sk: Int, var item_id: String, var current_price: Double)

data class Warehouse(var warehouse_sk: Int, var state: String)

val catalog_sales = mutableListOf(Catalog_sale(order = 1, item_sk = 1, warehouse_sk = 1, date_sk = 1, price = 100.0), Catalog_sale(order = 2, item_sk = 1, warehouse_sk = 1, date_sk = 2, price = 150.0))

val catalog_returns = mutableListOf(Catalog_return(order = 2, item_sk = 1, refunded = 150.0))

val item = mutableListOf(Item(item_sk = 1, item_id = "I1", current_price = 1.2))

val warehouse = mutableListOf(Warehouse(warehouse_sk = 1, state = "CA"))

val date_dim = mutableListOf(Date_dim(date_sk = 1, date = "2020-01-10"), Date_dim(date_sk = 2, date = "2020-01-20"))

val sales_date = "2020-01-15"

val records = run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (cr in catalog_returns) {
            if (cs.order == cr.order && cs.item_sk == cr.item_sk) {
                for (w in warehouse) {
                    if (cs.warehouse_sk == w.warehouse_sk) {
                        for (i in item) {
                            if (cs.item_sk == i.item_sk) {
                                for (d in date_dim) {
                                    if (cs.date_sk == d.date_sk) {
                                        if (toDouble(toDouble(i.current_price) >= toDouble(0.99) && i.current_price) <= toDouble(1.49)) {
                                            __res.add(mutableMapOf("w_state" to w.state, "i_item_id" to i.item_id, "sold_date" to d.date, "net" to toDouble(cs.price) - toDouble((if (cr == null) 0.0 else cr.refunded))))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (r in records) {
        val __k = (mutableMapOf("w_state" to (r as MutableMap<String, Any?>)["w_state"], "i_item_id" to (r as MutableMap<String, Any?>)["i_item_id"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("w_state" to (g.key as MutableMap<String, Any?>)["w_state"], "i_item_id" to (g.key as MutableMap<String, Any?>)["i_item_id"], "sales_before" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["sold_date"] < sales_date) (x as MutableMap<String, Any?>)["net"] else 0.0)
    }
    __res
}), "sales_after" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["sold_date"] >= sales_date) (x as MutableMap<String, Any?>)["net"] else 0.0)
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
