// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:04Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q90.mochi

data class WebSale(var ws_sold_time_sk: Int, var ws_ship_hdemo_sk: Int, var ws_web_page_sk: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_dep_count: Int)

data class Time_dim(var t_time_sk: Int, var t_hour: Int)

data class Web_page(var wp_web_page_sk: Int, var wp_char_count: Int)

data class Web_sale(var ws_sold_time_sk: Int, var ws_ship_hdemo_sk: Int, var ws_web_page_sk: Int)

val web_sales = mutableListOf(Web_sale(ws_sold_time_sk = 1, ws_ship_hdemo_sk = 1, ws_web_page_sk = 10), Web_sale(ws_sold_time_sk = 1, ws_ship_hdemo_sk = 1, ws_web_page_sk = 10), Web_sale(ws_sold_time_sk = 2, ws_ship_hdemo_sk = 1, ws_web_page_sk = 10))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_dep_count = 2))

val time_dim = mutableListOf(Time_dim(t_time_sk = 1, t_hour = 7), Time_dim(t_time_sk = 2, t_hour = 14))

val web_page = mutableListOf(Web_page(wp_web_page_sk = 10, wp_char_count = 5100))

val amc = run {
    val __res = mutableListOf<Web_sale>()
    for (ws in web_sales) {
        for (hd in household_demographics) {
            if (ws.ws_ship_hdemo_sk == hd.hd_demo_sk) {
                for (t in time_dim) {
                    if (ws.ws_sold_time_sk == t.t_time_sk) {
                        for (wp in web_page) {
                            if (ws.ws_web_page_sk == wp.wp_web_page_sk) {
                                if (t.t_hour >= 7 && t.t_hour <= 8 && hd.hd_dep_count == 2 && wp.wp_char_count >= 5000 && wp.wp_char_count <= 5200) {
                                    __res.add(ws)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}.size

val pmc = run {
    val __res = mutableListOf<Web_sale>()
    for (ws in web_sales) {
        for (hd in household_demographics) {
            if (ws.ws_ship_hdemo_sk == hd.hd_demo_sk) {
                for (t in time_dim) {
                    if (ws.ws_sold_time_sk == t.t_time_sk) {
                        for (wp in web_page) {
                            if (ws.ws_web_page_sk == wp.wp_web_page_sk) {
                                if (t.t_hour >= 14 && t.t_hour <= 15 && hd.hd_dep_count == 2 && wp.wp_char_count >= 5000 && wp.wp_char_count <= 5200) {
                                    __res.add(ws)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}.size

val result = toDouble((amc as Double)) / toDouble((pmc as Double))

fun main() {
    json(result)
}
