// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:21:08Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q2.mochi

data class Catalog_sale(var cs_sold_date_sk: Int, var cs_ext_sales_price: Double, var cs_sold_date_name: String)

data class Date_dim(var d_date_sk: Int, var d_week_seq: Int, var d_day_name: String, var d_year: Int)

data class Web_sale(var ws_sold_date_sk: Int, var ws_ext_sales_price: Double, var ws_sold_date_name: String)

val web_sales = mutableListOf(Web_sale(ws_sold_date_sk = 1, ws_ext_sales_price = 5.0, ws_sold_date_name = "Sunday"), Web_sale(ws_sold_date_sk = 2, ws_ext_sales_price = 5.0, ws_sold_date_name = "Monday"), Web_sale(ws_sold_date_sk = 8, ws_ext_sales_price = 10.0, ws_sold_date_name = "Sunday"), Web_sale(ws_sold_date_sk = 9, ws_ext_sales_price = 10.0, ws_sold_date_name = "Monday"))

val catalog_sales = mutableListOf(Catalog_sale(cs_sold_date_sk = 1, cs_ext_sales_price = 5.0, cs_sold_date_name = "Sunday"), Catalog_sale(cs_sold_date_sk = 2, cs_ext_sales_price = 5.0, cs_sold_date_name = "Monday"), Catalog_sale(cs_sold_date_sk = 8, cs_ext_sales_price = 10.0, cs_sold_date_name = "Sunday"), Catalog_sale(cs_sold_date_sk = 9, cs_ext_sales_price = 10.0, cs_sold_date_name = "Monday"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_week_seq = 1, d_day_name = "Sunday", d_year = 1998), Date_dim(d_date_sk = 2, d_week_seq = 1, d_day_name = "Monday", d_year = 1998), Date_dim(d_date_sk = 8, d_week_seq = 54, d_day_name = "Sunday", d_year = 1999), Date_dim(d_date_sk = 9, d_week_seq = 54, d_day_name = "Monday", d_year = 1999))

val wscs = (run {
    val __res = mutableListOf<Any?>()
    for (ws in web_sales) {
        __res.add(mutableMapOf("sold_date_sk" to ws.ws_sold_date_sk, "sales_price" to ws.ws_ext_sales_price, "day" to ws.ws_sold_date_name))
    }
    __res
}).toMutableList().apply { addAll((run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        __res.add(mutableMapOf("sold_date_sk" to cs.cs_sold_date_sk, "sales_price" to cs.cs_ext_sales_price, "day" to cs.cs_sold_date_name))
    }
    __res
})) }

val wswscs = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (w in wscs) {
        for (d in date_dim) {
            if ((w as MutableMap<String, Any?>)["sold_date_sk"] == d.d_date_sk) {
                val __k = (mutableMapOf("week_seq" to d.d_week_seq) as MutableMap<String, Any?>)
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("w" to w, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("d_week_seq" to (g.key as MutableMap<String, Any?>)["week_seq"], "sun_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Sunday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "mon_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Monday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "tue_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Tuesday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "wed_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Wednesday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "thu_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Thursday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "fri_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Friday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
}), "sat_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        if ((x as MutableMap<String, Any?>)["day"] == "Saturday") {
            __res.add((x as MutableMap<String, Any?>)["sales_price"])
        }
    }
    __res
})))
    }
    __res
}

val year1 = run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (w in wswscs) {
        if ((w as MutableMap<String, Any?>)["d_week_seq"] == 1) {
            __res.add((w as MutableMap<String, Any?>))
        }
    }
    __res
}

val year2 = run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (w in wswscs) {
        if ((w as MutableMap<String, Any?>)["d_week_seq"] == 54) {
            __res.add((w as MutableMap<String, Any?>))
        }
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (y in year1) {
        for (z in year2) {
            if (toInt((y as MutableMap<String, Any?>)["d_week_seq"] == (z as MutableMap<String, Any?>)["d_week_seq"]) - 53) {
                __res.add(mutableMapOf("d_week_seq1" to (y as MutableMap<String, Any?>)["d_week_seq"], "sun_ratio" to div(toDouble((y as MutableMap<String, Any?>)["sun_sales"]), toDouble((z as MutableMap<String, Any?>)["sun_sales"])), "mon_ratio" to div(toDouble((y as MutableMap<String, Any?>)["mon_sales"]), toDouble((z as MutableMap<String, Any?>)["mon_sales"]))))
            }
        }
    }
    __res
}

fun main() {
    json(result)
}
