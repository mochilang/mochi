// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:24:15Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q55.mochi

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int, var i_brand_id: Int, var i_manager_id: Int)

data class Store_sale(var item: Int, var sold_date: Int, var price: Double)

val store_sales = mutableListOf(Store_sale(item = 1, sold_date = 1, price = 10.0), Store_sale(item = 2, sold_date = 1, price = 20.0), Store_sale(item = 3, sold_date = 1, price = 25.0))

val item = mutableListOf(Item(i_item_sk = 1, i_brand_id = 10, i_manager_id = 1), Item(i_item_sk = 2, i_brand_id = 20, i_manager_id = 1), Item(i_item_sk = 3, i_brand_id = 10, i_manager_id = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2001, d_moy = 11))

val grouped = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (i in item) {
            if (ss.item == i.i_item_sk && i.i_manager_id == 1) {
                for (d in date_dim) {
                    if (ss.sold_date == d.d_date_sk) {
                        val __k = (mutableMapOf("brand_id" to i.i_brand_id) as MutableMap<String, Any?>)
                        var __g = __groups[__k]
                        if (__g == null) {
                            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                            __groups[__k] = __g
                            __order.add(__k)
                        }
                        __g.add(mutableMapOf("ss" to ss, "i" to i, "d" to d) as MutableMap<String, Any?>)
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("brand_id" to (g.key as MutableMap<String, Any?>)["brand_id"], "ext_price" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["price"])
    }
    __res
})))
    }
    __res
}

val result = run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (g in grouped) {
        __res.add((g as MutableMap<String, Any?>))
    }
    __res
}.sortedBy { mutableListOf(-(it as MutableMap<String, Any?>)["ext_price"], (it as MutableMap<String, Any?>)["brand_id"]) as Comparable<Any> }

fun main() {
    json(result)
}
