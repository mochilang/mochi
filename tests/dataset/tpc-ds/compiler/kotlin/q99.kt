// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:31Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q99.mochi

data class CatalogSale(var cs_ship_date_sk: Int, var cs_sold_date_sk: Int, var cs_warehouse_sk: Int, var cs_ship_mode_sk: Int, var cs_call_center_sk: Int)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

data class ShipMode(var sm_ship_mode_sk: Int, var sm_type: String)

data class CallCenter(var cc_call_center_sk: Int, var cc_name: String)

data class Call_center(var cc_call_center_sk: Int, var cc_name: String)

data class Catalog_sale(var cs_ship_date_sk: Int, var cs_sold_date_sk: Int, var cs_warehouse_sk: Int, var cs_ship_mode_sk: Int, var cs_call_center_sk: Int)

data class Ship_mode(var sm_ship_mode_sk: Int, var sm_type: String)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

val catalog_sales = mutableListOf(Catalog_sale(cs_ship_date_sk = 31, cs_sold_date_sk = 1, cs_warehouse_sk = 1, cs_ship_mode_sk = 1, cs_call_center_sk = 1), Catalog_sale(cs_ship_date_sk = 51, cs_sold_date_sk = 1, cs_warehouse_sk = 1, cs_ship_mode_sk = 1, cs_call_center_sk = 1), Catalog_sale(cs_ship_date_sk = 71, cs_sold_date_sk = 1, cs_warehouse_sk = 1, cs_ship_mode_sk = 1, cs_call_center_sk = 1), Catalog_sale(cs_ship_date_sk = 101, cs_sold_date_sk = 1, cs_warehouse_sk = 1, cs_ship_mode_sk = 1, cs_call_center_sk = 1), Catalog_sale(cs_ship_date_sk = 131, cs_sold_date_sk = 1, cs_warehouse_sk = 1, cs_ship_mode_sk = 1, cs_call_center_sk = 1))

val warehouse = mutableListOf(Warehouse(w_warehouse_sk = 1, w_warehouse_name = "Warehouse1"))

val ship_mode = mutableListOf(Ship_mode(sm_ship_mode_sk = 1, sm_type = "EXP"))

val call_center = mutableListOf(Call_center(cc_call_center_sk = 1, cc_name = "CC1"))

val grouped = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cs in catalog_sales) {
        for (w in warehouse) {
            if (cs.cs_warehouse_sk == w.w_warehouse_sk) {
                for (sm in ship_mode) {
                    if (cs.cs_ship_mode_sk == sm.sm_ship_mode_sk) {
                        for (cc in call_center) {
                            if (cs.cs_call_center_sk == cc.cc_call_center_sk) {
                                val __k = (mutableMapOf("warehouse" to substr(w.w_warehouse_name, 0, 20), "sm_type" to sm.sm_type, "cc_name" to cc.cc_name) as MutableMap<String, Any?>)
                                var __g = __groups[__k]
                                if (__g == null) {
                                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                    __groups[__k] = __g
                                    __order.add(__k)
                                }
                                __g.add(mutableMapOf("cs" to cs, "w" to w, "sm" to sm, "cc" to cc) as MutableMap<String, Any?>)
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("warehouse" to (g.key as MutableMap<String, Any?>)["warehouse"], "sm_type" to (g.key as MutableMap<String, Any?>)["sm_type"], "cc_name" to (g.key as MutableMap<String, Any?>)["cc_name"], "d30" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if (toInt(toDouble((x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) <= 30) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "d60" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if (toInt(toDouble(toInt(toDouble((x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) > 30 && (x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) <= 60) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "d90" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if (toInt(toDouble(toInt(toDouble((x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) > 60 && (x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) <= 90) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "d120" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if (toInt(toDouble(toInt(toDouble((x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) > 90 && (x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) <= 120) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size, "dmore" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in g) {
        if (toInt(toDouble((x as MutableMap<String, Any?>)["cs_ship_date_sk"]) - toDouble((x as MutableMap<String, Any?>)["cs_sold_date_sk"])) > 120) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.size))
    }
    __res
}

fun main() {
    json(grouped)
}
