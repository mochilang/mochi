// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:21Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q21.mochi

data class Inventory(var inv_item_sk: Int, var inv_warehouse_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class DateDim(var d_date_sk: Int, var d_date: String)

data class Date_dim(var d_date_sk: Int, var d_date: String)

data class Inventory(var inv_item_sk: Int, var inv_warehouse_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

val inventory = mutableListOf(Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 1, inv_quantity_on_hand = 30), Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 2, inv_quantity_on_hand = 40), Inventory(inv_item_sk = 2, inv_warehouse_sk = 2, inv_date_sk = 1, inv_quantity_on_hand = 20), Inventory(inv_item_sk = 2, inv_warehouse_sk = 2, inv_date_sk = 2, inv_quantity_on_hand = 20))

val warehouse = mutableListOf(Warehouse(w_warehouse_sk = 1, w_warehouse_name = "Main"), Warehouse(w_warehouse_sk = 2, w_warehouse_name = "Backup"))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "ITEM1"), Item(i_item_sk = 2, i_item_id = "ITEM2"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_date = "2000-03-01"), Date_dim(d_date_sk = 2, d_date = "2000-03-20"))

val before = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (inv in inventory) {
        for (d in date_dim) {
            if (inv.inv_date_sk == d.d_date_sk) {
                if (d.d_date < "2000-03-15") {
                    val __k = (mutableMapOf("w" to inv.inv_warehouse_sk, "i" to inv.inv_item_sk) as MutableMap<String, Any?>)
                    var __g = __groups[__k]
                    if (__g == null) {
                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                        __groups[__k] = __g
                        __order.add(__k)
                    }
                    __g.add(mutableMapOf("inv" to inv, "d" to d) as MutableMap<String, Any?>)
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("w" to (g.key as MutableMap<String, Any?>)["w"], "i" to (g.key as MutableMap<String, Any?>)["i"], "qty" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["inv_quantity_on_hand"])
    }
    __res
})))
    }
    __res
}

val after = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (inv in inventory) {
        for (d in date_dim) {
            if (inv.inv_date_sk == d.d_date_sk) {
                if (d.d_date >= "2000-03-15") {
                    val __k = (mutableMapOf("w" to inv.inv_warehouse_sk, "i" to inv.inv_item_sk) as MutableMap<String, Any?>)
                    var __g = __groups[__k]
                    if (__g == null) {
                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                        __groups[__k] = __g
                        __order.add(__k)
                    }
                    __g.add(mutableMapOf("inv" to inv, "d" to d) as MutableMap<String, Any?>)
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("w" to (g.key as MutableMap<String, Any?>)["w"], "i" to (g.key as MutableMap<String, Any?>)["i"], "qty" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["inv_quantity_on_hand"])
    }
    __res
})))
    }
    __res
}

val joined = run {
    val __res = mutableListOf<Any?>()
    for (b in before) {
        for (a in after) {
            if ((b as MutableMap<String, Any?>)["w"] == (a as MutableMap<String, Any?>)["w"] && (b as MutableMap<String, Any?>)["i"] == (a as MutableMap<String, Any?>)["i"]) {
                for (w in warehouse) {
                    if (w.w_warehouse_sk == (b as MutableMap<String, Any?>)["w"]) {
                        for (it in item) {
                            if (it.i_item_sk == (b as MutableMap<String, Any?>)["i"]) {
                                __res.add(mutableMapOf("w_name" to w.w_warehouse_name, "i_id" to it.i_item_id, "before_qty" to (b as MutableMap<String, Any?>)["qty"], "after_qty" to (a as MutableMap<String, Any?>)["qty"], "ratio" to div(toDouble((a as MutableMap<String, Any?>)["qty"]), toDouble((b as MutableMap<String, Any?>)["qty"]))))
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (r in joined) {
        if (toDouble(toDouble((r as MutableMap<String, Any?>)["ratio"]) >= toDouble((toDouble(2.0) / toDouble(3.0))) && (r as MutableMap<String, Any?>)["ratio"]) <= toDouble((toDouble(3.0) / toDouble(2.0)))) {
            __res.add(mutableMapOf("w_warehouse_name" to (r as MutableMap<String, Any?>)["w_name"], "i_item_id" to (r as MutableMap<String, Any?>)["i_id"], "inv_before" to (r as MutableMap<String, Any?>)["before_qty"], "inv_after" to (r as MutableMap<String, Any?>)["after_qty"]))
        }
    }
    __res
}.sortedBy { mutableListOf((it as MutableMap<String, Any?>)["w_name"], (it as MutableMap<String, Any?>)["i_id"]) as Comparable<Any> }

fun main() {
    json(result)
}
