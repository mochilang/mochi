// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:21:15Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q4.mochi

data class Catalog_sale(var cs_bill_customer_sk: Int, var cs_sold_date_sk: Int, var cs_ext_list_price: Double, var cs_ext_wholesale_cost: Double, var cs_ext_discount_amt: Double, var cs_ext_sales_price: Double)

data class Customer(var c_customer_sk: Int, var c_customer_id: String, var c_first_name: String, var c_last_name: String, var c_login: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Store_sale(var ss_customer_sk: Int, var ss_sold_date_sk: Int, var ss_ext_list_price: Double, var ss_ext_wholesale_cost: Double, var ss_ext_discount_amt: Double, var ss_ext_sales_price: Double)

data class Web_sale(var ws_bill_customer_sk: Int, var ws_sold_date_sk: Int, var ws_ext_list_price: Double, var ws_ext_wholesale_cost: Double, var ws_ext_discount_amt: Double, var ws_ext_sales_price: Double)

val customer = mutableListOf(Customer(c_customer_sk = 1, c_customer_id = "C1", c_first_name = "Alice", c_last_name = "A", c_login = "alice"))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_ext_list_price = 10.0, ss_ext_wholesale_cost = 5.0, ss_ext_discount_amt = 0.0, ss_ext_sales_price = 10.0), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 2, ss_ext_list_price = 20.0, ss_ext_wholesale_cost = 5.0, ss_ext_discount_amt = 0.0, ss_ext_sales_price = 20.0))

val catalog_sales = mutableListOf(Catalog_sale(cs_bill_customer_sk = 1, cs_sold_date_sk = 1, cs_ext_list_price = 10.0, cs_ext_wholesale_cost = 2.0, cs_ext_discount_amt = 0.0, cs_ext_sales_price = 10.0), Catalog_sale(cs_bill_customer_sk = 1, cs_sold_date_sk = 2, cs_ext_list_price = 30.0, cs_ext_wholesale_cost = 2.0, cs_ext_discount_amt = 0.0, cs_ext_sales_price = 30.0))

val web_sales = mutableListOf(Web_sale(ws_bill_customer_sk = 1, ws_sold_date_sk = 1, ws_ext_list_price = 10.0, ws_ext_wholesale_cost = 5.0, ws_ext_discount_amt = 0.0, ws_ext_sales_price = 10.0), Web_sale(ws_bill_customer_sk = 1, ws_sold_date_sk = 2, ws_ext_list_price = 12.0, ws_ext_wholesale_cost = 5.0, ws_ext_discount_amt = 0.0, ws_ext_sales_price = 12.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2001), Date_dim(d_date_sk = 2, d_year = 2002))

val year_total = (run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (s in store_sales) {
            if (c.c_customer_sk == s.ss_customer_sk) {
                for (d in date_dim) {
                    if (s.ss_sold_date_sk == d.d_date_sk) {
                        val __k = (mutableMapOf("id" to c.c_customer_id, "first" to c.c_first_name, "last" to c.c_last_name, "login" to c.c_login, "year" to d.d_year) as MutableMap<String, Any?>)
                        var __g = __groups[__k]
                        if (__g == null) {
                            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                            __groups[__k] = __g
                            __order.add(__k)
                        }
                        __g.add(mutableMapOf("c" to c, "s" to s, "d" to d) as MutableMap<String, Any?>)
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_id" to (g.key as MutableMap<String, Any?>)["id"], "customer_first_name" to (g.key as MutableMap<String, Any?>)["first"], "customer_last_name" to (g.key as MutableMap<String, Any?>)["last"], "customer_login" to (g.key as MutableMap<String, Any?>)["login"], "dyear" to (g.key as MutableMap<String, Any?>)["year"], "year_total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(div(toInt((toDouble((toDouble(toDouble((x as MutableMap<String, Any?>)["ss_ext_list_price"]) - toDouble((x as MutableMap<String, Any?>)["ss_ext_wholesale_cost"])) - toDouble((x as MutableMap<String, Any?>)["ss_ext_discount_amt"]))) + toDouble((x as MutableMap<String, Any?>)["ss_ext_sales_price"]))), (2).toDouble()))
    }
    __res
}), "sale_type" to "s"))
    }
    __res
}).toMutableList().apply { addAll((run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (cs in catalog_sales) {
            if (c.c_customer_sk == cs.cs_bill_customer_sk) {
                for (d in date_dim) {
                    if (cs.cs_sold_date_sk == d.d_date_sk) {
                        val __k = (mutableMapOf("id" to c.c_customer_id, "first" to c.c_first_name, "last" to c.c_last_name, "login" to c.c_login, "year" to d.d_year) as MutableMap<String, Any?>)
                        var __g = __groups[__k]
                        if (__g == null) {
                            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                            __groups[__k] = __g
                            __order.add(__k)
                        }
                        __g.add(mutableMapOf("c" to c, "cs" to cs, "d" to d) as MutableMap<String, Any?>)
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_id" to (g.key as MutableMap<String, Any?>)["id"], "customer_first_name" to (g.key as MutableMap<String, Any?>)["first"], "customer_last_name" to (g.key as MutableMap<String, Any?>)["last"], "customer_login" to (g.key as MutableMap<String, Any?>)["login"], "dyear" to (g.key as MutableMap<String, Any?>)["year"], "year_total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(div(toInt((toDouble((toDouble(toDouble((x as MutableMap<String, Any?>)["cs_ext_list_price"]) - toDouble((x as MutableMap<String, Any?>)["cs_ext_wholesale_cost"])) - toDouble((x as MutableMap<String, Any?>)["cs_ext_discount_amt"]))) + toDouble((x as MutableMap<String, Any?>)["cs_ext_sales_price"]))), (2).toDouble()))
    }
    __res
}), "sale_type" to "c"))
    }
    __res
})) }.toMutableList().apply { addAll((run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (ws in web_sales) {
            if (c.c_customer_sk == ws.ws_bill_customer_sk) {
                for (d in date_dim) {
                    if (ws.ws_sold_date_sk == d.d_date_sk) {
                        val __k = (mutableMapOf("id" to c.c_customer_id, "first" to c.c_first_name, "last" to c.c_last_name, "login" to c.c_login, "year" to d.d_year) as MutableMap<String, Any?>)
                        var __g = __groups[__k]
                        if (__g == null) {
                            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                            __groups[__k] = __g
                            __order.add(__k)
                        }
                        __g.add(mutableMapOf("c" to c, "ws" to ws, "d" to d) as MutableMap<String, Any?>)
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_id" to (g.key as MutableMap<String, Any?>)["id"], "customer_first_name" to (g.key as MutableMap<String, Any?>)["first"], "customer_last_name" to (g.key as MutableMap<String, Any?>)["last"], "customer_login" to (g.key as MutableMap<String, Any?>)["login"], "dyear" to (g.key as MutableMap<String, Any?>)["year"], "year_total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(div(toInt((toDouble((toDouble(toDouble((x as MutableMap<String, Any?>)["ws_ext_list_price"]) - toDouble((x as MutableMap<String, Any?>)["ws_ext_wholesale_cost"])) - toDouble((x as MutableMap<String, Any?>)["ws_ext_discount_amt"]))) + toDouble((x as MutableMap<String, Any?>)["ws_ext_sales_price"]))), (2).toDouble()))
    }
    __res
}), "sale_type" to "w"))
    }
    __res
})) }

val result = run {
    val __res = mutableListOf<Any?>()
    for (s1 in year_total) {
        for (s2 in year_total) {
            if ((s2 as MutableMap<String, Any?>)["customer_id"] == (s1 as MutableMap<String, Any?>)["customer_id"]) {
                for (c1 in year_total) {
                    if ((c1 as MutableMap<String, Any?>)["customer_id"] == (s1 as MutableMap<String, Any?>)["customer_id"]) {
                        for (c2 in year_total) {
                            if ((c2 as MutableMap<String, Any?>)["customer_id"] == (s1 as MutableMap<String, Any?>)["customer_id"]) {
                                for (w1 in year_total) {
                                    if ((w1 as MutableMap<String, Any?>)["customer_id"] == (s1 as MutableMap<String, Any?>)["customer_id"]) {
                                        for (w2 in year_total) {
                                            if ((w2 as MutableMap<String, Any?>)["customer_id"] == (s1 as MutableMap<String, Any?>)["customer_id"]) {
                                                if (toDouble(toDouble(toInt(toInt(toInt((s1 as MutableMap<String, Any?>)["sale_type"] == "s" && (c1 as MutableMap<String, Any?>)["sale_type"] == "c" && (w1 as MutableMap<String, Any?>)["sale_type"] == "w" && (s2 as MutableMap<String, Any?>)["sale_type"] == "s" && (c2 as MutableMap<String, Any?>)["sale_type"] == "c" && (w2 as MutableMap<String, Any?>)["sale_type"] == "w" && (s1 as MutableMap<String, Any?>)["dyear"] == 2001 && (s2 as MutableMap<String, Any?>)["dyear"] == 2002 && (c1 as MutableMap<String, Any?>)["dyear"] == 2001 && (c2 as MutableMap<String, Any?>)["dyear"] == 2002 && (w1 as MutableMap<String, Any?>)["dyear"] == 2001 && (w2 as MutableMap<String, Any?>)["dyear"] == 2002 && (s1 as MutableMap<String, Any?>)["year_total"]) > 0 && (c1 as MutableMap<String, Any?>)["year_total"]) > 0 && (w1 as MutableMap<String, Any?>)["year_total"]) > 0 && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((s1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((s2 as MutableMap<String, Any?>)["year_total"]), toDouble((s1 as MutableMap<String, Any?>)["year_total"])) else null)) && (if (toInt((c1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((c2 as MutableMap<String, Any?>)["year_total"]), toDouble((c1 as MutableMap<String, Any?>)["year_total"])) else null)) > toDouble((if (toInt((w1 as MutableMap<String, Any?>)["year_total"]) > 0) div(toDouble((w2 as MutableMap<String, Any?>)["year_total"]), toDouble((w1 as MutableMap<String, Any?>)["year_total"])) else null))) {
                                                    __res.add(mutableMapOf("customer_id" to (s2 as MutableMap<String, Any?>)["customer_id"], "customer_first_name" to (s2 as MutableMap<String, Any?>)["customer_first_name"], "customer_last_name" to (s2 as MutableMap<String, Any?>)["customer_last_name"], "customer_login" to (s2 as MutableMap<String, Any?>)["customer_login"]))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}.sortedBy { mutableListOf((it as MutableMap<String, Any?>)["customer_id"], (it as MutableMap<String, Any?>)["customer_first_name"], (it as MutableMap<String, Any?>)["customer_last_name"], (it as MutableMap<String, Any?>)["customer_login"]) as Comparable<Any> }

fun main() {
    json(result)
}
