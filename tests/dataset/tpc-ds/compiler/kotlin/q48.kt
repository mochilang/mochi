// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:54Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q48.mochi

data class Customer_addres(var ca_address_sk: Int, var ca_country: String, var ca_state: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_marital_status: String, var cd_education_status: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Store(var s_store_sk: Int)

data class Store_sale(var cdemo_sk: Int, var addr_sk: Int, var sold_date_sk: Int, var sales_price: Double, var net_profit: Double, var quantity: Int)

val store_sales = mutableListOf(Store_sale(cdemo_sk = 1, addr_sk = 1, sold_date_sk = 1, sales_price = 120.0, net_profit = 1000.0, quantity = 5), Store_sale(cdemo_sk = 2, addr_sk = 2, sold_date_sk = 1, sales_price = 60.0, net_profit = 2000.0, quantity = 10), Store_sale(cdemo_sk = 3, addr_sk = 3, sold_date_sk = 1, sales_price = 170.0, net_profit = 10000.0, quantity = 20))

val store = mutableListOf(Store(s_store_sk = 1))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_marital_status = "S", cd_education_status = "E1"), Customer_demographic(cd_demo_sk = 2, cd_marital_status = "M", cd_education_status = "E2"), Customer_demographic(cd_demo_sk = 3, cd_marital_status = "W", cd_education_status = "E3"))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_country = "United States", ca_state = "TX"), Customer_addres(ca_address_sk = 2, ca_country = "United States", ca_state = "CA"), Customer_addres(ca_address_sk = 3, ca_country = "United States", ca_state = "NY"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000))

val year = 2000

val states1 = mutableListOf("TX")

val states2 = mutableListOf("CA")

val states3 = mutableListOf("NY")

val qty_base = run {
    val __res = mutableListOf<Int>()
    for (ss in store_sales) {
        for (cd in customer_demographics) {
            if (ss.cdemo_sk == cd.cd_demo_sk) {
                for (ca in customer_address) {
                    if (ss.addr_sk == ca.ca_address_sk) {
                        for (d in date_dim) {
                            if (ss.sold_date_sk == d.d_date_sk) {
                                if (d.d_year == year && ((toDouble(toDouble(cd.cd_marital_status == "S" && cd.cd_education_status == "E1" && ss.sales_price) >= toDouble(100.0) && ss.sales_price) <= toDouble(150.0)) || (toDouble(toDouble(cd.cd_marital_status == "M" && cd.cd_education_status == "E2" && ss.sales_price) >= toDouble(50.0) && ss.sales_price) <= toDouble(100.0)) || (toDouble(toDouble(cd.cd_marital_status == "W" && cd.cd_education_status == "E3" && ss.sales_price) >= toDouble(150.0) && ss.sales_price) <= toDouble(200.0))) && ((toDouble(toDouble(ca.ca_state in states1 && ss.net_profit) >= 0 && ss.net_profit) <= 2000) || (toDouble(toDouble(ca.ca_state in states2 && ss.net_profit) >= 150 && ss.net_profit) <= 3000) || (toDouble(toDouble(ca.ca_state in states3 && ss.net_profit) >= 50 && ss.net_profit) <= 25000))) {
                                    __res.add(ss.quantity)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val qty = qty_base

val result = sum(qty)

fun main() {
    json(result)
}
