// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:58Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q88.mochi

data class Household_demographic(var hd_demo_sk: Int, var hd_dep_count: Int, var hd_vehicle_count: Int)

data class Store(var s_store_sk: Int, var s_store_name: String)

data class Store_sale(var sold_time_sk: Int, var hdemo_sk: Int, var store_sk: Int, var qty: Double)

data class Time_dim(var time_sk: Int, var hour: Int, var minute: Int)

val time_dim = mutableListOf(Time_dim(time_sk = 1, hour = 8, minute = 30), Time_dim(time_sk = 2, hour = 9, minute = 0), Time_dim(time_sk = 3, hour = 9, minute = 30), Time_dim(time_sk = 4, hour = 10, minute = 0), Time_dim(time_sk = 5, hour = 10, minute = 30), Time_dim(time_sk = 6, hour = 11, minute = 0), Time_dim(time_sk = 7, hour = 11, minute = 30), Time_dim(time_sk = 8, hour = 12, minute = 0))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_dep_count = 1, hd_vehicle_count = 1))

val store = mutableListOf(Store(s_store_sk = 1, s_store_name = "ese"))

val store_sales = mutableListOf(Store_sale(sold_time_sk = 1, hdemo_sk = 1, store_sk = 1, qty = 10.0), Store_sale(sold_time_sk = 2, hdemo_sk = 1, store_sk = 1, qty = 12.0), Store_sale(sold_time_sk = 3, hdemo_sk = 1, store_sk = 1, qty = 14.0), Store_sale(sold_time_sk = 4, hdemo_sk = 1, store_sk = 1, qty = 11.0), Store_sale(sold_time_sk = 5, hdemo_sk = 1, store_sk = 1, qty = 8.0), Store_sale(sold_time_sk = 6, hdemo_sk = 1, store_sk = 1, qty = 9.0), Store_sale(sold_time_sk = 7, hdemo_sk = 1, store_sk = 1, qty = 10.0), Store_sale(sold_time_sk = 8, hdemo_sk = 1, store_sk = 1, qty = 14.0))

val h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)

val h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)

val h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)

val h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)

val h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)

val h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)

val h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)

val h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)

val result = toDouble(toDouble(toDouble(toDouble(toDouble(toDouble(toDouble(h8_30_to_9) + toDouble(h9_to_9_30)) + toDouble(h9_30_to_10)) + toDouble(h10_to_10_30)) + toDouble(h10_30_to_11)) + toDouble(h11_to_11_30)) + toDouble(h11_30_to_12)) + toDouble(h12_to_12_30)

/**
 * Auto-generated from Mochi
 * @param ssales MutableList<Any>
 * @param tdim MutableList<Any>
 * @param hour Int
 * @param start_min Int
 * @param end_min Int
 * @return Double
 */
fun count_range(ssales: MutableList<Any>, tdim: MutableList<Any>, hour: Int, start_min: Int, end_min: Int): Double {
    var total = 0.0
    for (ss in ssales) {
        for (t in tdim) {
            if (toInt(toInt((ss as MutableMap<*, *>)["sold_time_sk"] == (t as MutableMap<*, *>)["time_sk"] && (t as MutableMap<*, *>)["hour"] == hour && (t as MutableMap<*, *>)["minute"]) >= start_min && (t as MutableMap<*, *>)["minute"]) < end_min) {
                total = toDouble(total) + toDouble((ss as MutableMap<*, *>)["qty"])
            }
        }
    }
    return total
}

fun main() {
    json(result)
}
