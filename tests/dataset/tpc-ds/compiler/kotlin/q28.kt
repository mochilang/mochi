// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:45Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q28.mochi

data class StoreSale(var ss_quantity: Int, var ss_list_price: Double, var ss_coupon_amt: Double, var ss_wholesale_cost: Double)

data class Store_sale(var ss_quantity: Int, var ss_list_price: Double, var ss_coupon_amt: Double, var ss_wholesale_cost: Double)

val store_sales = mutableListOf(Store_sale(ss_quantity = 3, ss_list_price = 100.0, ss_coupon_amt = 50.0, ss_wholesale_cost = 30.0), Store_sale(ss_quantity = 8, ss_list_price = 80.0, ss_coupon_amt = 10.0, ss_wholesale_cost = 20.0), Store_sale(ss_quantity = 12, ss_list_price = 60.0, ss_coupon_amt = 5.0, ss_wholesale_cost = 15.0))

val bucket1 = run {
    val __res = mutableListOf<Store_sale>()
    for (ss in store_sales) {
        if (ss.ss_quantity >= 0 && ss.ss_quantity <= 5 && ((toDouble(toDouble(ss.ss_list_price) >= 0 && ss.ss_list_price) <= 110) || (toDouble(toDouble(ss.ss_coupon_amt) >= 0 && ss.ss_coupon_amt) <= 1000) || (toDouble(toDouble(ss.ss_wholesale_cost) >= 0 && ss.ss_wholesale_cost) <= 50))) {
            __res.add(ss)
        }
    }
    __res
}

val bucket2 = run {
    val __res = mutableListOf<Store_sale>()
    for (ss in store_sales) {
        if (ss.ss_quantity >= 6 && ss.ss_quantity <= 10 && ((toDouble(toDouble(ss.ss_list_price) >= 0 && ss.ss_list_price) <= 110) || (toDouble(toDouble(ss.ss_coupon_amt) >= 0 && ss.ss_coupon_amt) <= 1000) || (toDouble(toDouble(ss.ss_wholesale_cost) >= 0 && ss.ss_wholesale_cost) <= 50))) {
            __res.add(ss)
        }
    }
    __res
}

val result = mutableMapOf("B1_LP" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in bucket1) {
        __res.add(x.ss_list_price)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "B1_CNT" to bucket1.size, "B1_CNTD" to run {
    val __groups = mutableMapOf<Double, Group<Double, Store_sale>>()
    val __order = mutableListOf<Double>()
    for (x in bucket1) {
        val __k = x.ss_list_price
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(g.key)
    }
    __res
}.size, "B2_LP" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in bucket2) {
        __res.add(x.ss_list_price)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "B2_CNT" to bucket2.size, "B2_CNTD" to run {
    val __groups = mutableMapOf<Double, Group<Double, Store_sale>>()
    val __order = mutableListOf<Double>()
    for (x in bucket2) {
        val __k = x.ss_list_price
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(g.key)
    }
    __res
}.size)

fun main() {
    json(result)
}
