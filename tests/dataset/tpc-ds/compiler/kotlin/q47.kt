// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:52Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q47.mochi

data class V2(var d_year: Int, var item: String, var avg_monthly_sales: Double, var sum_sales: Double)

val v2 = mutableListOf(V2(d_year = 2020, item = "A", avg_monthly_sales = 100.0, sum_sales = 120.0), V2(d_year = 2020, item = "B", avg_monthly_sales = 80.0, sum_sales = 70.0), V2(d_year = 2019, item = "C", avg_monthly_sales = 50.0, sum_sales = 60.0))

val year = 2020

val orderby = "item"

val result = run {
    val __res = mutableListOf<Any?>()
    for (v in v2) {
        if (toDouble(toDouble(toDouble(toDouble(v.d_year >= year - 1 && v.avg_monthly_sales) > 0 && v.sum_sales) > toDouble(v.avg_monthly_sales) && abs(toDouble(v.sum_sales) - toDouble(v.avg_monthly_sales))) / toDouble(v.avg_monthly_sales)) > toDouble(0.1)) {
            __res.add(V2(d_year = v.d_year, item = v.item, avg_monthly_sales = v.avg_monthly_sales, sum_sales = v.sum_sales))
        }
    }
    __res
}.sortedBy { mutableListOf(toDouble(it.sum_sales) - toDouble(it.avg_monthly_sales), it.item) as Comparable<Any> }

/**
 * Auto-generated from Mochi
 * @param x Double
 * @return Double
 */
fun abs(x: Double): Double {
    if (toDouble(x) >= toDouble(0.0)) {
        return x
    }
    else {
        return -x
    }
}

fun main() {
    json(result)
}
