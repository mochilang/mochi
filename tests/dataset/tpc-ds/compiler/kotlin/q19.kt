// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:15Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q19.mochi

data class StoreSale(var ss_sold_date_sk: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_store_sk: Int, var ss_ext_sales_price: Double)

data class DateDim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int, var i_brand_id: Int, var i_brand: String, var i_manufact_id: Int, var i_manufact: String, var i_manager_id: Int)

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_zip: String)

data class Store(var s_store_sk: Int, var s_zip: String)

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_zip: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int, var i_brand_id: Int, var i_brand: String, var i_manufact_id: Int, var i_manufact: String, var i_manager_id: Int)

data class Store(var s_store_sk: Int, var s_zip: String)

data class Store_sale(var ss_sold_date_sk: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_store_sk: Int, var ss_ext_sales_price: Double)

val store_sales = mutableListOf(Store_sale(ss_sold_date_sk = 1, ss_item_sk = 1, ss_customer_sk = 1, ss_store_sk = 1, ss_ext_sales_price = 100.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1999, d_moy = 11))

val item = mutableListOf(Item(i_item_sk = 1, i_brand_id = 1, i_brand = "B1", i_manufact_id = 1, i_manufact = "M1", i_manager_id = 10))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_zip = "11111"))

val store = mutableListOf(Store(s_store_sk = 1, s_zip = "99999"))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (d in date_dim) {
        for (ss in store_sales) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                for (i in item) {
                    if (ss.ss_item_sk == i.i_item_sk && i.i_manager_id == 10) {
                        for (c in customer) {
                            if (ss.ss_customer_sk == c.c_customer_sk) {
                                for (ca in customer_address) {
                                    if (c.c_current_addr_sk == ca.ca_address_sk) {
                                        for (s in store) {
                                            if (ss.ss_store_sk == s.s_store_sk && substr(ca.ca_zip, 0, 5) != substr(s.s_zip, 0, 5)) {
                                                if (d.d_moy == 11 && d.d_year == 1999) {
                                                    val __k = (mutableMapOf("brand" to i.i_brand, "brand_id" to i.i_brand_id, "man_id" to i.i_manufact_id, "man" to i.i_manufact) as MutableMap<String, Any?>)
                                                    var __g = __groups[__k]
                                                    if (__g == null) {
                                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                        __groups[__k] = __g
                                                        __order.add(__k)
                                                    }
                                                    __g.add(mutableMapOf("d" to d, "ss" to ss, "i" to i, "c" to c, "ca" to ca, "s" to s) as MutableMap<String, Any?>)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf((g.key as MutableMap<String, Any?>)["brand"]) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_brand" to (g.key as MutableMap<String, Any?>)["brand"], "i_brand_id" to (g.key as MutableMap<String, Any?>)["brand_id"], "i_manufact_id" to (g.key as MutableMap<String, Any?>)["man_id"], "i_manufact" to (g.key as MutableMap<String, Any?>)["man"], "ext_price" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_ext_sales_price"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
