// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:10Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q75.mochi

data class Catalog_sale(var cs_item_sk: Int, var cs_quantity: Int, var cs_sales_price: Double, var cs_sold_date_sk: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_brand_id: Int, var i_class_id: Int, var i_category_id: Int, var i_manufact_id: Int, var i_category: String)

data class Store_sale(var ss_item_sk: Int, var ss_quantity: Int, var ss_sales_price: Double, var ss_sold_date_sk: Int)

data class Web_sale(var ws_item_sk: Int, var ws_quantity: Int, var ws_sales_price: Double, var ws_sold_date_sk: Int)

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000), Date_dim(d_date_sk = 2, d_year = 2001))

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_quantity = 50, ss_sales_price = 500.0, ss_sold_date_sk = 1), Store_sale(ss_item_sk = 1, ss_quantity = 40, ss_sales_price = 400.0, ss_sold_date_sk = 2))

val web_sales = mutableListOf(Web_sale(ws_item_sk = 1, ws_quantity = 30, ws_sales_price = 300.0, ws_sold_date_sk = 1), Web_sale(ws_item_sk = 1, ws_quantity = 25, ws_sales_price = 250.0, ws_sold_date_sk = 2))

val catalog_sales = mutableListOf(Catalog_sale(cs_item_sk = 1, cs_quantity = 20, cs_sales_price = 200.0, cs_sold_date_sk = 1), Catalog_sale(cs_item_sk = 1, cs_quantity = 15, cs_sales_price = 150.0, cs_sold_date_sk = 2))

val item = mutableListOf(Item(i_item_sk = 1, i_brand_id = 1, i_class_id = 2, i_category_id = 3, i_manufact_id = 4, i_category = "Electronics"))

val sales_detail = concat(run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ss.ss_sold_date_sk) {
                __res.add(mutableMapOf("d_year" to d.d_year, "i_item_sk" to ss.ss_item_sk, "quantity" to ss.ss_quantity, "amount" to ss.ss_sales_price))
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (ws in web_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ws.ws_sold_date_sk) {
                __res.add(mutableMapOf("d_year" to d.d_year, "i_item_sk" to ws.ws_item_sk, "quantity" to ws.ws_quantity, "amount" to ws.ws_sales_price))
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == cs.cs_sold_date_sk) {
                __res.add(mutableMapOf("d_year" to d.d_year, "i_item_sk" to cs.cs_item_sk, "quantity" to cs.cs_quantity, "amount" to cs.cs_sales_price))
            }
        }
    }
    __res
})

val all_sales = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (sd in sales_detail) {
        for (i in item) {
            if (i.i_item_sk == (sd as MutableMap<*, *>)["i_item_sk"]) {
                if (i.i_category == "Electronics") {
                    val __k = (mutableMapOf("year" to (sd as MutableMap<*, *>)["d_year"], "brand_id" to i.i_brand_id, "class_id" to i.i_class_id, "category_id" to i.i_category_id, "manuf_id" to i.i_manufact_id) as MutableMap<String, Any?>)
                    var __g = __groups[__k]
                    if (__g == null) {
                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                        __groups[__k] = __g
                        __order.add(__k)
                    }
                    __g.add(mutableMapOf("sd" to sd, "i" to i) as MutableMap<String, Any?>)
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("d_year" to (g.key as MutableMap<String, Any?>)["year"], "i_brand_id" to (g.key as MutableMap<String, Any?>)["brand_id"], "i_class_id" to (g.key as MutableMap<String, Any?>)["class_id"], "i_category_id" to (g.key as MutableMap<String, Any?>)["category_id"], "i_manufact_id" to (g.key as MutableMap<String, Any?>)["manuf_id"], "sales_cnt" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["sd"] as MutableMap<*, *>)["quantity"])
    }
    __res
}), "sales_amt" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["sd"] as MutableMap<*, *>)["amount"])
    }
    __res
})))
    }
    __res
}

val prev_yr = first(run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (a in all_sales) {
        if ((a as MutableMap<String, Any?>)["d_year"] == 2000) {
            __res.add((a as MutableMap<String, Any?>))
        }
    }
    __res
})

val curr_yr = first(run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (a in all_sales) {
        if ((a as MutableMap<String, Any?>)["d_year"] == 2001) {
            __res.add((a as MutableMap<String, Any?>))
        }
    }
    __res
})

val result = if (toDouble((div(toDouble((curr_yr as MutableMap<String, Any?>)["sales_cnt"]), toDouble((prev_yr as MutableMap<String, Any?>)["sales_cnt"])))) < toDouble(0.9)) mutableListOf(mutableMapOf("prev_year" to (prev_yr as MutableMap<String, Any?>)["d_year"], "year" to (curr_yr as MutableMap<String, Any?>)["d_year"], "i_brand_id" to (curr_yr as MutableMap<String, Any?>)["i_brand_id"], "i_class_id" to (curr_yr as MutableMap<String, Any?>)["i_class_id"], "i_category_id" to (curr_yr as MutableMap<String, Any?>)["i_category_id"], "i_manufact_id" to (curr_yr as MutableMap<String, Any?>)["i_manufact_id"], "prev_yr_cnt" to (prev_yr as MutableMap<String, Any?>)["sales_cnt"], "curr_yr_cnt" to (curr_yr as MutableMap<String, Any?>)["sales_cnt"], "sales_cnt_diff" to toDouble((curr_yr as MutableMap<String, Any?>)["sales_cnt"]) - toDouble((prev_yr as MutableMap<String, Any?>)["sales_cnt"]), "sales_amt_diff" to toDouble((curr_yr as MutableMap<String, Any?>)["sales_amt"]) - toDouble((prev_yr as MutableMap<String, Any?>)["sales_amt"]))) else mutableListOf()

fun main() {
    json(result)
}
