// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:12Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q18.mochi

data class CatalogSale(var cs_quantity: Int, var cs_list_price: Double, var cs_coupon_amt: Double, var cs_sales_price: Double, var cs_net_profit: Double, var cs_bill_cdemo_sk: Int, var cs_bill_customer_sk: Int, var cs_sold_date_sk: Int, var cs_item_sk: Int)

data class CustomerDemographics(var cd_demo_sk: Int, var cd_gender: String, var cd_education_status: String, var cd_dep_count: Int)

data class Customer(var c_customer_sk: Int, var c_current_cdemo_sk: Int, var c_current_addr_sk: Int, var c_birth_year: Int, var c_birth_month: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_country: String, var ca_state: String, var ca_county: String)

data class DateDim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Catalog_sale(var cs_quantity: Int, var cs_list_price: Double, var cs_coupon_amt: Double, var cs_sales_price: Double, var cs_net_profit: Double, var cs_bill_cdemo_sk: Int, var cs_bill_customer_sk: Int, var cs_sold_date_sk: Int, var cs_item_sk: Int)

data class Customer(var c_customer_sk: Int, var c_current_cdemo_sk: Int, var c_current_addr_sk: Int, var c_birth_year: Int, var c_birth_month: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_country: String, var ca_state: String, var ca_county: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_gender: String, var cd_education_status: String, var cd_dep_count: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

val catalog_sales = mutableListOf(Catalog_sale(cs_quantity = 1, cs_list_price = 10.0, cs_coupon_amt = 1.0, cs_sales_price = 9.0, cs_net_profit = 2.0, cs_bill_cdemo_sk = 1, cs_bill_customer_sk = 1, cs_sold_date_sk = 1, cs_item_sk = 1))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_gender = "M", cd_education_status = "College", cd_dep_count = 2), Customer_demographic(cd_demo_sk = 2, cd_gender = "F", cd_education_status = "College", cd_dep_count = 2))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_cdemo_sk = 2, c_current_addr_sk = 1, c_birth_year = 1980, c_birth_month = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_country = "US", ca_state = "CA", ca_county = "County1"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1999))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "I1"))

val joined = run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (cd1 in customer_demographics) {
            if (cs.cs_bill_cdemo_sk == cd1.cd_demo_sk && cd1.cd_gender == "M" && cd1.cd_education_status == "College") {
                for (c in customer) {
                    if (cs.cs_bill_customer_sk == c.c_customer_sk) {
                        for (cd2 in customer_demographics) {
                            if (c.c_current_cdemo_sk == cd2.cd_demo_sk) {
                                for (ca in customer_address) {
                                    if (c.c_current_addr_sk == ca.ca_address_sk) {
                                        for (d in date_dim) {
                                            if (cs.cs_sold_date_sk == d.d_date_sk && d.d_year == 1999) {
                                                for (i in item) {
                                                    if (cs.cs_item_sk == i.i_item_sk) {
                                                        __res.add(mutableMapOf("i_item_id" to i.i_item_id, "ca_country" to ca.ca_country, "ca_state" to ca.ca_state, "ca_county" to ca.ca_county, "q" to cs.cs_quantity, "lp" to cs.cs_list_price, "cp" to cs.cs_coupon_amt, "sp" to cs.cs_sales_price, "np" to cs.cs_net_profit, "by" to c.c_birth_year, "dep" to cd1.cd_dep_count))
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (j in joined) {
        val __k = (mutableMapOf("i_item_id" to (j as MutableMap<String, Any?>)["i_item_id"], "ca_country" to (j as MutableMap<String, Any?>)["ca_country"], "ca_state" to (j as MutableMap<String, Any?>)["ca_state"], "ca_county" to (j as MutableMap<String, Any?>)["ca_county"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(j)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to (g.key as MutableMap<String, Any?>)["i_item_id"], "ca_country" to (g.key as MutableMap<String, Any?>)["ca_country"], "ca_state" to (g.key as MutableMap<String, Any?>)["ca_state"], "ca_county" to (g.key as MutableMap<String, Any?>)["ca_county"], "agg1" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["q"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg2" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["lp"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg3" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cp"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg4" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["sp"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg5" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["np"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg6" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["by"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg7" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["dep"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

fun main() {
    json(result)
}
