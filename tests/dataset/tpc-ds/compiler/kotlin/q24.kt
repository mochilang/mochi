// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:32Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q24.mochi

data class StoreSale(var ss_ticket_number: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_store_sk: Int, var ss_net_paid: Double)

data class StoreReturn(var sr_ticket_number: Int, var sr_item_sk: Int)

data class Store(var s_store_sk: Int, var s_store_name: String, var s_market_id: Int, var s_state: String, var s_zip: String)

data class Item(var i_item_sk: Int, var i_color: String, var i_current_price: Double, var i_manager_id: Int, var i_units: String, var i_size: String)

data class Customer(var c_customer_sk: Int, var c_first_name: String, var c_last_name: String, var c_current_addr_sk: Int, var c_birth_country: String)

data class CustomerAddress(var ca_address_sk: Int, var ca_state: String, var ca_country: String, var ca_zip: String)

data class Customer(var c_customer_sk: Int, var c_first_name: String, var c_last_name: String, var c_current_addr_sk: Int, var c_birth_country: String)

data class Customer_addres(var ca_address_sk: Int, var ca_state: String, var ca_country: String, var ca_zip: String)

data class Item(var i_item_sk: Int, var i_color: String, var i_current_price: Double, var i_manager_id: Int, var i_units: String, var i_size: String)

data class Store(var s_store_sk: Int, var s_store_name: String, var s_market_id: Int, var s_state: String, var s_zip: String)

data class Store_return(var sr_ticket_number: Int, var sr_item_sk: Int)

data class Store_sale(var ss_ticket_number: Int, var ss_item_sk: Int, var ss_customer_sk: Int, var ss_store_sk: Int, var ss_net_paid: Double)

val store_sales = mutableListOf(Store_sale(ss_ticket_number = 1, ss_item_sk = 1, ss_customer_sk = 1, ss_store_sk = 1, ss_net_paid = 100.0), Store_sale(ss_ticket_number = 2, ss_item_sk = 2, ss_customer_sk = 2, ss_store_sk = 1, ss_net_paid = 50.0))

val store_returns = mutableListOf(Store_return(sr_ticket_number = 1, sr_item_sk = 1), Store_return(sr_ticket_number = 2, sr_item_sk = 2))

val store = mutableListOf(Store(s_store_sk = 1, s_store_name = "Store1", s_market_id = 5, s_state = "CA", s_zip = "12345"))

val item = mutableListOf(Item(i_item_sk = 1, i_color = "RED", i_current_price = 10.0, i_manager_id = 1, i_units = "EA", i_size = "M"), Item(i_item_sk = 2, i_color = "BLUE", i_current_price = 20.0, i_manager_id = 2, i_units = "EA", i_size = "L"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_first_name = "Ann", c_last_name = "Smith", c_current_addr_sk = 1, c_birth_country = "Canada"), Customer(c_customer_sk = 2, c_first_name = "Bob", c_last_name = "Jones", c_current_addr_sk = 2, c_birth_country = "USA"))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_state = "CA", ca_country = "USA", ca_zip = "12345"), Customer_addres(ca_address_sk = 2, ca_state = "CA", ca_country = "USA", ca_zip = "54321"))

val ssales = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (sr in store_returns) {
            if (ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) {
                for (s in store) {
                    if (ss.ss_store_sk == s.s_store_sk) {
                        for (i in item) {
                            if (ss.ss_item_sk == i.i_item_sk) {
                                for (c in customer) {
                                    if (ss.ss_customer_sk == c.c_customer_sk) {
                                        for (ca in customer_address) {
                                            if (c.c_current_addr_sk == ca.ca_address_sk) {
                                                if (c.c_birth_country != (strings as MutableMap<*, *>)["ToUpper"](ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5) {
                                                    val __k = (mutableMapOf("last" to c.c_last_name, "first" to c.c_first_name, "store_name" to s.s_store_name, "color" to i.i_color) as MutableMap<String, Any?>)
                                                    var __g = __groups[__k]
                                                    if (__g == null) {
                                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                        __groups[__k] = __g
                                                        __order.add(__k)
                                                    }
                                                    __g.add(mutableMapOf("ss" to ss, "sr" to sr, "s" to s, "i" to i, "c" to c, "ca" to ca) as MutableMap<String, Any?>)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("c_last_name" to (g.key as MutableMap<String, Any?>)["last"], "c_first_name" to (g.key as MutableMap<String, Any?>)["first"], "s_store_name" to (g.key as MutableMap<String, Any?>)["store_name"], "color" to (g.key as MutableMap<String, Any?>)["color"], "netpaid" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_net_paid"])
    }
    __res
})))
    }
    __res
}

val avg_paid = run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in ssales) {
        __res.add((x as MutableMap<String, Any?>)["netpaid"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val result = run {
    val __res = mutableListOf<Any?>()
    for (x in ssales) {
        if (toDouble(toDouble((x as MutableMap<String, Any?>)["color"] == "RED" && (x as MutableMap<String, Any?>)["netpaid"]) > toDouble(0.05)) * toDouble(avg_paid)) {
            __res.add(mutableMapOf("c_last_name" to (x as MutableMap<String, Any?>)["c_last_name"], "c_first_name" to (x as MutableMap<String, Any?>)["c_first_name"], "s_store_name" to (x as MutableMap<String, Any?>)["s_store_name"], "paid" to (x as MutableMap<String, Any?>)["netpaid"]))
        }
    }
    __res
}.sortedBy { mutableListOf((it as MutableMap<String, Any?>)["c_last_name"], (it as MutableMap<String, Any?>)["c_first_name"], (it as MutableMap<String, Any?>)["s_store_name"]) as Comparable<Any> }

fun main() {
    json(result)
}
