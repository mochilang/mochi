// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:11:04Z
fun max(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) > (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q6.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_state: String, var ca_zip: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int, var d_month_seq: Int)

data class Item(var i_item_sk: Int, var i_category: String, var i_current_price: Double)

data class Store_sale(var ss_customer_sk: Int, var ss_sold_date_sk: Int, var ss_item_sk: Int)

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_state = "CA", ca_zip = "12345"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_item_sk = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1999, d_moy = 5, d_month_seq = 120))

val item = mutableListOf(Item(i_item_sk = 1, i_category = "A", i_current_price = 100.0), Item(i_item_sk = 2, i_category = "A", i_current_price = 50.0))

val target_month_seq = max(run {
    val __res = mutableListOf<Int>()
    for (d in date_dim) {
        if (d.d_year == 1999 && d.d_moy == 5) {
            __res.add(d.d_month_seq)
        }
    }
    __res
})

val result = run {
    val __groups = mutableMapOf<String, Group<String, MutableMap<String, Any?>>>()
    val __order = mutableListOf<String>()
    for (a in customer_address) {
        for (c in customer) {
            if (a.ca_address_sk == c.c_current_addr_sk) {
                for (s in store_sales) {
                    if (c.c_customer_sk == s.ss_customer_sk) {
                        for (d in date_dim) {
                            if (s.ss_sold_date_sk == d.d_date_sk) {
                                for (i in item) {
                                    if (s.ss_item_sk == i.i_item_sk) {
                                        if (toDouble(toDouble(d.d_month_seq == target_month_seq && i.i_current_price) > toDouble(1.2)) * toDouble(run { val r = run {
    val __res = mutableListOf<Double>()
    for (j in item) {
        if (j.i_category == i.i_category) {
            __res.add(j.i_current_price)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r })) {
                                            val __k = a.ca_state
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("a" to a, "c" to c, "s" to s, "d" to d, "i" to i) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf(g.size, g.key) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        if (g.size >= 10) {
            __res.add(mutableMapOf("state" to g.key, "cnt" to g.size))
        }
    }
    __res
}.take(100)

fun main() {
    json(result)
}
