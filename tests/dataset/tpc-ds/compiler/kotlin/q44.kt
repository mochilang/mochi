// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:42Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q44.mochi

data class Item(var i_item_sk: Int, var i_product_name: String)

data class Store_sale(var ss_item_sk: Int, var ss_store_sk: Int, var ss_net_profit: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_store_sk = 1, ss_net_profit = 5.0), Store_sale(ss_item_sk = 1, ss_store_sk = 1, ss_net_profit = 5.0), Store_sale(ss_item_sk = 2, ss_store_sk = 1, ss_net_profit = -1.0))

val item = mutableListOf(Item(i_item_sk = 1, i_product_name = "ItemA"), Item(i_item_sk = 2, i_product_name = "ItemB"))

val grouped_base = (run {
    val __groups = mutableMapOf<Int, Group<Int, Store_sale>>()
    val __order = mutableListOf<Int>()
    for (ss in store_sales) {
        val __k = ss.ss_item_sk
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(ss)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("item_sk" to g.key, "avg_profit" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.ss_net_profit)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
})

val grouped = grouped_base

val best = first(run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in grouped) {
        __res.add((x as MutableMap<String, Any?>))
    }
    __res
}.sortedByDescending { (it as MutableMap<String, Any?>)["avg_profit"] as Comparable<Any> })

val worst = first(run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in grouped) {
        __res.add((x as MutableMap<String, Any?>))
    }
    __res
}.sortedBy { (it as MutableMap<String, Any?>)["avg_profit"] as Comparable<Any> })

val best_name = first(run {
    val __res = mutableListOf<String>()
    for (i in item) {
        if (i.i_item_sk == (best as MutableMap<String, Any?>)["item_sk"]) {
            __res.add(i.i_product_name)
        }
    }
    __res
})

val worst_name = first(run {
    val __res = mutableListOf<String>()
    for (i in item) {
        if (i.i_item_sk == (worst as MutableMap<String, Any?>)["item_sk"]) {
            __res.add(i.i_product_name)
        }
    }
    __res
})

val result = mutableMapOf("best_performing" to best_name, "worst_performing" to worst_name)

fun main() {
    json(result)
}
