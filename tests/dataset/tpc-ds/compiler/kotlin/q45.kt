// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:46Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q45.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_zip: String)

data class Date_dim(var d_date_sk: Int, var d_qoy: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Web_sale(var bill_customer_sk: Int, var item_sk: Int, var sold_date_sk: Int, var sales_price: Double)

val web_sales = mutableListOf(Web_sale(bill_customer_sk = 1, item_sk = 1, sold_date_sk = 1, sales_price = 50.0), Web_sale(bill_customer_sk = 2, item_sk = 2, sold_date_sk = 1, sales_price = 30.0))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1), Customer(c_customer_sk = 2, c_current_addr_sk = 2))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_zip = "85669"), Customer_addres(ca_address_sk = 2, ca_zip = "99999"))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "I1"), Item(i_item_sk = 2, i_item_id = "I2"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_qoy = 1, d_year = 2020))

val zip_list = mutableListOf("85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792")

val item_ids = mutableListOf("I2")

val qoy = 1

val year = 2020

val base = run {
    val __groups = mutableMapOf<String, Group<String, MutableMap<String, Any?>>>()
    val __order = mutableListOf<String>()
    for (ws in web_sales) {
        for (c in customer) {
            if (ws.bill_customer_sk == c.c_customer_sk) {
                for (ca in customer_address) {
                    if (c.c_current_addr_sk == ca.ca_address_sk) {
                        for (i in item) {
                            if (ws.item_sk == i.i_item_sk) {
                                for (d in date_dim) {
                                    if (ws.sold_date_sk == d.d_date_sk) {
                                        if ((substr(ca.ca_zip, 0, 5) in zip_list || i.i_item_id in item_ids) && d.d_qoy == qoy && d.d_year == year) {
                                            val __k = ca.ca_zip
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("ws" to ws, "c" to c, "ca" to ca, "i" to i, "d" to d) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ca_zip" to g.key, "sum_ws_sales_price" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ws"] as MutableMap<*, *>)["sales_price"])
    }
    __res
})))
    }
    __res
}

val records = base

fun main() {
    json(records)
}
