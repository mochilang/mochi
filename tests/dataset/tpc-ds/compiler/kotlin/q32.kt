// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:58Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q32.mochi

data class Catalog_sale(var cs_item_sk: Int, var cs_sold_date_sk: Int, var cs_ext_discount_amt: Double)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_manufact_id: Int)

val catalog_sales = mutableListOf(Catalog_sale(cs_item_sk = 1, cs_sold_date_sk = 1, cs_ext_discount_amt = 5.0), Catalog_sale(cs_item_sk = 1, cs_sold_date_sk = 2, cs_ext_discount_amt = 10.0), Catalog_sale(cs_item_sk = 1, cs_sold_date_sk = 3, cs_ext_discount_amt = 20.0))

val item = mutableListOf(Item(i_item_sk = 1, i_manufact_id = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000), Date_dim(d_date_sk = 2, d_year = 2000), Date_dim(d_date_sk = 3, d_year = 2000))

val filtered = run {
    val __res = mutableListOf<Double>()
    for (cs in catalog_sales) {
        for (i in item) {
            if (cs.cs_item_sk == i.i_item_sk) {
                for (d in date_dim) {
                    if (cs.cs_sold_date_sk == d.d_date_sk) {
                        if (i.i_manufact_id == 1 && d.d_year == 2000) {
                            __res.add(cs.cs_ext_discount_amt)
                        }
                    }
                }
            }
        }
    }
    __res
}

val avg_discount = run { val r = filtered.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val result = sum(run {
    val __res = mutableListOf<Any?>()
    for (x in filtered) {
        if (toDouble(toDouble(x) > toDouble(avg_discount)) * toDouble(1.3)) {
            __res.add(x)
        }
    }
    __res
})

fun main() {
    json(result)
}
