// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:21:45Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q10.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int, var c_current_cdemo_sk: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_county: String)

data class CustomerDemographics(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String, var cd_purchase_estimate: Int, var cd_credit_rating: String, var cd_dep_count: Int, var cd_dep_employed_count: Int, var cd_dep_college_count: Int)

data class StoreSale(var ss_customer_sk: Int, var ss_sold_date_sk: Int)

data class DateDim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int, var c_current_cdemo_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_county: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String, var cd_purchase_estimate: Int, var cd_credit_rating: String, var cd_dep_count: Int, var cd_dep_employed_count: Int, var cd_dep_college_count: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Store_sale(var ss_customer_sk: Int, var ss_sold_date_sk: Int)

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1, c_current_cdemo_sk = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_county = "CountyA"))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_gender = "F", cd_marital_status = "M", cd_education_status = "College", cd_purchase_estimate = 5000, cd_credit_rating = "Good", cd_dep_count = 1, cd_dep_employed_count = 1, cd_dep_college_count = 0))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1))

val web_sales = mutableListOf()

val catalog_sales = mutableListOf()

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_moy = 2))

val active = run {
    val __res = mutableListOf<Customer_demographic>()
    for (c in customer) {
        for (ca in customer_address) {
            if (c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "CountyA") {
                for (cd in customer_demographics) {
                    if (c.c_current_cdemo_sk == cd.cd_demo_sk) {
                        if (run {
    val __res = mutableListOf<Store_sale>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                if (ss.ss_customer_sk == c.c_customer_sk && d.d_year == 2000 && d.d_moy >= 2 && d.d_moy <= 5) {
                    __res.add(ss)
                }
            }
        }
    }
    __res
}.isNotEmpty()) {
                            __res.add(cd)
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (a in active) {
        val __k = (mutableMapOf("gender" to (a as MutableMap<String, Any?>)["cd_gender"], "marital" to (a as MutableMap<String, Any?>)["cd_marital_status"], "education" to (a as MutableMap<String, Any?>)["cd_education_status"], "purchase" to (a as MutableMap<String, Any?>)["cd_purchase_estimate"], "credit" to (a as MutableMap<String, Any?>)["cd_credit_rating"], "dep" to (a as MutableMap<String, Any?>)["cd_dep_count"], "depemp" to (a as MutableMap<String, Any?>)["cd_dep_employed_count"], "depcol" to (a as MutableMap<String, Any?>)["cd_dep_college_count"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(a)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cd_gender" to (g.key as MutableMap<String, Any?>)["gender"], "cd_marital_status" to (g.key as MutableMap<String, Any?>)["marital"], "cd_education_status" to (g.key as MutableMap<String, Any?>)["education"], "cnt1" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size, "cd_purchase_estimate" to (g.key as MutableMap<String, Any?>)["purchase"], "cnt2" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size, "cd_credit_rating" to (g.key as MutableMap<String, Any?>)["credit"], "cnt3" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size, "cd_dep_count" to (g.key as MutableMap<String, Any?>)["dep"], "cnt4" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size, "cd_dep_employed_count" to (g.key as MutableMap<String, Any?>)["depemp"], "cnt5" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size, "cd_dep_college_count" to (g.key as MutableMap<String, Any?>)["depcol"], "cnt6" to run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (_ in g) {
        __res.add((_ as MutableMap<String, Any?>))
    }
    __res
}.size))
    }
    __res
}

fun main() {
    json(result)
}
