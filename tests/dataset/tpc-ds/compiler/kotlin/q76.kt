// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:13Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q76.mochi

data class Catalog_sale(var cs_bill_customer_sk: Any?, var cs_item_sk: Int, var cs_ext_sales_price: Double, var cs_sold_date_sk: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_qoy: Int)

data class Item(var i_item_sk: Int, var i_category: String)

data class Store_sale(var ss_customer_sk: Any?, var ss_item_sk: Int, var ss_ext_sales_price: Double, var ss_sold_date_sk: Int)

data class Web_sale(var ws_bill_customer_sk: Any?, var ws_item_sk: Int, var ws_ext_sales_price: Double, var ws_sold_date_sk: Int)

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1998, d_qoy = 1))

val item = mutableListOf(Item(i_item_sk = 1, i_category = "CatA"), Item(i_item_sk = 2, i_category = "CatB"), Item(i_item_sk = 3, i_category = "CatC"))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = null, ss_item_sk = 1, ss_ext_sales_price = 10.0, ss_sold_date_sk = 1))

val web_sales = mutableListOf(Web_sale(ws_bill_customer_sk = null, ws_item_sk = 2, ws_ext_sales_price = 15.0, ws_sold_date_sk = 1))

val catalog_sales = mutableListOf(Catalog_sale(cs_bill_customer_sk = null, cs_item_sk = 3, cs_ext_sales_price = 20.0, cs_sold_date_sk = 1))

val store_part = run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (i in item) {
            if (i.i_item_sk == ss.ss_item_sk) {
                for (d in date_dim) {
                    if (d.d_date_sk == ss.ss_sold_date_sk) {
                        if (ss.ss_customer_sk == null) {
                            __res.add(mutableMapOf("channel" to "store", "col_name" to ss.ss_customer_sk, "d_year" to d.d_year, "d_qoy" to d.d_qoy, "i_category" to i.i_category, "ext_sales_price" to ss.ss_ext_sales_price))
                        }
                    }
                }
            }
        }
    }
    __res
}

val web_part = run {
    val __res = mutableListOf<Any?>()
    for (ws in web_sales) {
        for (i in item) {
            if (i.i_item_sk == ws.ws_item_sk) {
                for (d in date_dim) {
                    if (d.d_date_sk == ws.ws_sold_date_sk) {
                        if (ws.ws_bill_customer_sk == null) {
                            __res.add(mutableMapOf("channel" to "web", "col_name" to ws.ws_bill_customer_sk, "d_year" to d.d_year, "d_qoy" to d.d_qoy, "i_category" to i.i_category, "ext_sales_price" to ws.ws_ext_sales_price))
                        }
                    }
                }
            }
        }
    }
    __res
}

val catalog_part = run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (i in item) {
            if (i.i_item_sk == cs.cs_item_sk) {
                for (d in date_dim) {
                    if (d.d_date_sk == cs.cs_sold_date_sk) {
                        if (cs.cs_bill_customer_sk == null) {
                            __res.add(mutableMapOf("channel" to "catalog", "col_name" to cs.cs_bill_customer_sk, "d_year" to d.d_year, "d_qoy" to d.d_qoy, "i_category" to i.i_category, "ext_sales_price" to cs.cs_ext_sales_price))
                        }
                    }
                }
            }
        }
    }
    __res
}

val all_rows = concat(store_part, web_part, catalog_part)

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Any?>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (r in all_rows) {
        val __k = (mutableMapOf("channel" to (r as MutableMap<*, *>)["channel"], "col_name" to (r as MutableMap<*, *>)["col_name"], "d_year" to (r as MutableMap<*, *>)["d_year"], "d_qoy" to (r as MutableMap<*, *>)["d_qoy"], "i_category" to (r as MutableMap<*, *>)["i_category"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Any?>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        (g.key as MutableMap<String, Any?>)["channel"] as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("channel" to (g.key as MutableMap<String, Any?>)["channel"], "col_name" to (g.key as MutableMap<String, Any?>)["col_name"], "d_year" to (g.key as MutableMap<String, Any?>)["d_year"], "d_qoy" to (g.key as MutableMap<String, Any?>)["d_qoy"], "i_category" to (g.key as MutableMap<String, Any?>)["i_category"], "sales_cnt" to g.size, "sales_amt" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<*, *>)["r"] as MutableMap<*, *>)["ext_sales_price"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
