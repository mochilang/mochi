// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:42Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q27.mochi

data class StoreSale(var ss_item_sk: Int, var ss_store_sk: Int, var ss_cdemo_sk: Int, var ss_sold_date_sk: Int, var ss_quantity: Int, var ss_list_price: Double, var ss_coupon_amt: Double, var ss_sales_price: Double)

data class CustomerDemo(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String)

data class DateDim(var d_date_sk: Int, var d_year: Int)

data class Store(var s_store_sk: Int, var s_state: String)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Store(var s_store_sk: Int, var s_state: String)

data class Store_sale(var ss_item_sk: Int, var ss_store_sk: Int, var ss_cdemo_sk: Int, var ss_sold_date_sk: Int, var ss_quantity: Int, var ss_list_price: Double, var ss_coupon_amt: Double, var ss_sales_price: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_store_sk = 1, ss_cdemo_sk = 1, ss_sold_date_sk = 1, ss_quantity = 5, ss_list_price = 100.0, ss_coupon_amt = 10.0, ss_sales_price = 90.0), Store_sale(ss_item_sk = 2, ss_store_sk = 2, ss_cdemo_sk = 2, ss_sold_date_sk = 1, ss_quantity = 2, ss_list_price = 50.0, ss_coupon_amt = 5.0, ss_sales_price = 45.0))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_gender = "F", cd_marital_status = "M", cd_education_status = "College"), Customer_demographic(cd_demo_sk = 2, cd_gender = "M", cd_marital_status = "S", cd_education_status = "College"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000))

val store = mutableListOf(Store(s_store_sk = 1, s_state = "CA"), Store(s_store_sk = 2, s_state = "TX"))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "ITEM1"), Item(i_item_sk = 2, i_item_id = "ITEM2"))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (cd in customer_demographics) {
            if (ss.ss_cdemo_sk == cd.cd_demo_sk) {
                for (d in date_dim) {
                    if (ss.ss_sold_date_sk == d.d_date_sk) {
                        for (s in store) {
                            if (ss.ss_store_sk == s.s_store_sk) {
                                for (i in item) {
                                    if (ss.ss_item_sk == i.i_item_sk) {
                                        if (cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state in mutableListOf("CA")) {
                                            val __k = (mutableMapOf("item_id" to i.i_item_id, "state" to s.s_state) as MutableMap<String, Any?>)
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("ss" to ss, "cd" to cd, "d" to d, "s" to s, "i" to i) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf((g.key as MutableMap<String, Any?>)["item_id"], (g.key as MutableMap<String, Any?>)["state"]) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to (g.key as MutableMap<String, Any?>)["item_id"], "s_state" to (g.key as MutableMap<String, Any?>)["state"], "agg1" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_quantity"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg2" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_list_price"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg3" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_coupon_amt"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg4" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_sales_price"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

fun main() {
    json(result)
}
