// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:24:03Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q51.mochi

data class Store_sale(var item: Int, var date: Int, var price: Double)

data class Web_sale(var item: Int, var date: Int, var price: Double)

val web_sales = mutableListOf(Web_sale(item = 1, date = 1, price = 30.0), Web_sale(item = 1, date = 2, price = 20.0))

val store_sales = mutableListOf(Store_sale(item = 1, date = 1, price = 5.0), Store_sale(item = 1, date = 2, price = 19.0))

val dms = 1

val web_cum = cumulative((run {
    val __res = mutableListOf<Any?>()
    for (w in web_sales) {
        __res.add(mutableMapOf("date" to w.date, "price" to w.price))
    }
    __res
}.sortedBy { it.date as Comparable<Any> }) as MutableList<Any>)

val store_cum = cumulative((run {
    val __res = mutableListOf<Any?>()
    for (s in store_sales) {
        __res.add(mutableMapOf("date" to s.date, "price" to s.price))
    }
    __res
}.sortedBy { it.date as Comparable<Any> }) as MutableList<Any>)

val joined = run {
    val __res = mutableListOf<Any?>()
    for (w in web_cum) {
        for (s in store_cum) {
            if (w.date == s.date) {
                if (toDouble(w.cum) > toDouble(s.cum)) {
                    __res.add(mutableMapOf("item_sk" to 1, "d_date" to w.date))
                }
            }
        }
    }
    __res
}

val result = joined

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Any>
 * @return MutableList<Any>
 */
fun cumulative(xs: MutableList<Any>): MutableList<Any> {
    var out = mutableListOf()
    var acc = 0.0
    for (x in xs) {
        acc = toDouble(acc) + toDouble(x.price)
        out = out + mutableMapOf("date" to x.date, "cum" to acc)
    }
    return out
}

fun main() {
    json(result)
}
