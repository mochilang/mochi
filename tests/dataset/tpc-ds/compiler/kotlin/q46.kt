// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:48Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q46.mochi

data class Customer(var c_customer_sk: Int, var c_last_name: String, var c_first_name: String, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_city: String)

data class Date_dim(var d_date_sk: Int, var d_dow: Int, var d_year: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_dep_count: Int, var hd_vehicle_count: Int)

data class Store(var s_store_sk: Int, var s_city: String)

data class Store_sale(var ss_ticket_number: Int, var ss_customer_sk: Int, var ss_addr_sk: Int, var ss_hdemo_sk: Int, var ss_store_sk: Int, var ss_sold_date_sk: Int, var ss_coupon_amt: Double, var ss_net_profit: Double)

val store_sales = mutableListOf(Store_sale(ss_ticket_number = 1, ss_customer_sk = 1, ss_addr_sk = 1, ss_hdemo_sk = 1, ss_store_sk = 1, ss_sold_date_sk = 1, ss_coupon_amt = 5.0, ss_net_profit = 20.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_dow = 6, d_year = 2020))

val store = mutableListOf(Store(s_store_sk = 1, s_city = "CityA"))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_dep_count = 2, hd_vehicle_count = 0))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_city = "Portland"), Customer_addres(ca_address_sk = 2, ca_city = "Seattle"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_last_name = "Doe", c_first_name = "John", c_current_addr_sk = 2))

val depcnt = 2

val vehcnt = 0

val year = 2020

val cities = mutableListOf("CityA")

val dn = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                for (s in store) {
                    if (ss.ss_store_sk == s.s_store_sk) {
                        for (hd in household_demographics) {
                            if (ss.ss_hdemo_sk == hd.hd_demo_sk) {
                                for (ca in customer_address) {
                                    if (ss.ss_addr_sk == ca.ca_address_sk) {
                                        if ((hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) && d.d_dow in mutableListOf(6, 0) && d.d_year == year && s.s_city in cities) {
                                            val __k = (mutableMapOf("ss_ticket_number" to ss.ss_ticket_number, "ss_customer_sk" to ss.ss_customer_sk, "ca_city" to ca.ca_city) as MutableMap<String, Any?>)
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("ss" to ss, "d" to d, "s" to s, "hd" to hd, "ca" to ca) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ss_ticket_number" to (g.key as MutableMap<String, Any?>)["ss_ticket_number"], "ss_customer_sk" to (g.key as MutableMap<String, Any?>)["ss_customer_sk"], "bought_city" to (g.key as MutableMap<String, Any?>)["ca_city"], "amt" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_coupon_amt"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_profit"])
    }
    __res
})))
    }
    __res
}

val base = run {
    val __res = mutableListOf<Any?>()
    for (dnrec in dn) {
        for (c in customer) {
            if ((dnrec as MutableMap<String, Any?>)["ss_customer_sk"] == c.c_customer_sk) {
                for (current_addr in customer_address) {
                    if (c.c_current_addr_sk == current_addr.ca_address_sk) {
                        if (current_addr.ca_city != (dnrec as MutableMap<String, Any?>)["bought_city"]) {
                            __res.add(mutableMapOf("c_last_name" to c.c_last_name, "c_first_name" to c.c_first_name, "ca_city" to current_addr.ca_city, "bought_city" to (dnrec as MutableMap<String, Any?>)["bought_city"], "ss_ticket_number" to (dnrec as MutableMap<String, Any?>)["ss_ticket_number"], "amt" to (dnrec as MutableMap<String, Any?>)["amt"], "profit" to (dnrec as MutableMap<String, Any?>)["profit"]))
                        }
                    }
                }
            }
        }
    }
    __res
}.sortedBy { mutableListOf(it.c_last_name, it.c_first_name, it.ca_city, (it as MutableMap<String, Any?>)["bought_city"], (it as MutableMap<String, Any?>)["ss_ticket_number"]) as Comparable<Any> }

val result = base

fun main() {
    json(result)
}
