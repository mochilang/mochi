// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:14Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q36.mochi

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_category: String, var i_class: String)

data class Store(var s_store_sk: Int, var s_state: String)

data class Store_sale(var ss_item_sk: Int, var ss_store_sk: Int, var ss_sold_date_sk: Int, var ss_ext_sales_price: Double, var ss_net_profit: Double)

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_store_sk = 1, ss_sold_date_sk = 1, ss_ext_sales_price = 100.0, ss_net_profit = 20.0), Store_sale(ss_item_sk = 2, ss_store_sk = 1, ss_sold_date_sk = 1, ss_ext_sales_price = 200.0, ss_net_profit = 50.0), Store_sale(ss_item_sk = 3, ss_store_sk = 2, ss_sold_date_sk = 1, ss_ext_sales_price = 150.0, ss_net_profit = 30.0))

val item = mutableListOf(Item(i_item_sk = 1, i_category = "Books", i_class = "C1"), Item(i_item_sk = 2, i_category = "Books", i_class = "C2"), Item(i_item_sk = 3, i_category = "Electronics", i_class = "C3"))

val store = mutableListOf(Store(s_store_sk = 1, s_state = "A"), Store(s_store_sk = 2, s_state = "B"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                for (i in item) {
                    if (ss.ss_item_sk == i.i_item_sk) {
                        for (s in store) {
                            if (ss.ss_store_sk == s.s_store_sk) {
                                if (d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")) {
                                    val __k = (mutableMapOf("category" to i.i_category, "class" to i.i_class) as MutableMap<String, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("ss" to ss, "d" to d, "i" to i, "s" to s) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf((g.key as MutableMap<String, Any?>)["category"], (g.key as MutableMap<String, Any?>)["class"]) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_category" to (g.key as MutableMap<String, Any?>)["category"], "i_class" to (g.key as MutableMap<String, Any?>)["class"], "gross_margin" to toDouble(sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_net_profit"])
    }
    __res
})) / toDouble(sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["ss_ext_sales_price"])
    }
    __res
}))))
    }
    __res
}

fun main() {
    json(result)
}
