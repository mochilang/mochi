// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:40Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q65.mochi

data class Store_sale(var store: Int, var item: Int, var price: Int)

val store_sales = mutableListOf(Store_sale(store = 1, item = 1, price = 1), Store_sale(store = 1, item = 1, price = 1), Store_sale(store = 1, item = 2, price = 60))

val item_revenue = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Store_sale>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        val __k = (mutableMapOf("item" to ss.item) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(ss)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("item" to (g.key as MutableMap<String, Any?>)["item"], "revenue" to sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.price)
    }
    __res
})))
    }
    __res
}

val avg_rev = average(run {
    val __res = mutableListOf<Any?>()
    for (ir in item_revenue) {
        __res.add((ir as MutableMap<String, Any?>)["revenue"])
    }
    __res
})

val low_rev = run {
    val __res = mutableListOf<Any?>()
    for (ir in item_revenue) {
        if (toDouble(toDouble((ir as MutableMap<String, Any?>)["revenue"]) <= toDouble(0.1)) * toDouble(avg_rev)) {
            __res.add((ir as MutableMap<String, Any?>)["revenue"])
        }
    }
    __res
}

val result = toDouble(sum(low_rev)) + 63

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Double>
 * @return Double
 */
fun average(xs: MutableList<Double>): Double {
    if (xs.size == 0) {
        return 0.0
    }
    var sum = 0.0
    for (x in xs) {
        sum = sum + toDouble(x)
    }
    return sum / toDouble((xs.size as Double))
}

fun main() {
    json(result)
}
