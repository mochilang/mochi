// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:00Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q33.mochi

data class Catalog_sale(var cs_item_sk: Int, var cs_ext_sales_price: Double, var cs_sold_date_sk: Int, var cs_bill_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_gmt_offset: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Item(var i_item_sk: Int, var i_manufact_id: Int, var i_category: String)

data class Store_sale(var ss_item_sk: Int, var ss_ext_sales_price: Double, var ss_sold_date_sk: Int, var ss_addr_sk: Int)

data class Web_sale(var ws_item_sk: Int, var ws_ext_sales_price: Double, var ws_sold_date_sk: Int, var ws_bill_addr_sk: Int)

val item = mutableListOf(Item(i_item_sk = 1, i_manufact_id = 1, i_category = "Books"), Item(i_item_sk = 2, i_manufact_id = 2, i_category = "Books"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_moy = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_gmt_offset = -5), Customer_addres(ca_address_sk = 2, ca_gmt_offset = -5))

val store_sales = mutableListOf(Store_sale(ss_item_sk = 1, ss_ext_sales_price = 100.0, ss_sold_date_sk = 1, ss_addr_sk = 1), Store_sale(ss_item_sk = 2, ss_ext_sales_price = 50.0, ss_sold_date_sk = 1, ss_addr_sk = 2))

val catalog_sales = mutableListOf(Catalog_sale(cs_item_sk = 1, cs_ext_sales_price = 20.0, cs_sold_date_sk = 1, cs_bill_addr_sk = 1))

val web_sales = mutableListOf(Web_sale(ws_item_sk = 1, ws_ext_sales_price = 30.0, ws_sold_date_sk = 1, ws_bill_addr_sk = 1))

val month = 1

val year = 2000

val union_sales = concat(run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                for (ca in customer_address) {
                    if (ss.ss_addr_sk == ca.ca_address_sk) {
                        for (i in item) {
                            if (ss.ss_item_sk == i.i_item_sk) {
                                if (i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) {
                                    __res.add(mutableMapOf("manu" to i.i_manufact_id, "price" to ss.ss_ext_sales_price))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (d in date_dim) {
            if (cs.cs_sold_date_sk == d.d_date_sk) {
                for (ca in customer_address) {
                    if (cs.cs_bill_addr_sk == ca.ca_address_sk) {
                        for (i in item) {
                            if (cs.cs_item_sk == i.i_item_sk) {
                                if (i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) {
                                    __res.add(mutableMapOf("manu" to i.i_manufact_id, "price" to cs.cs_ext_sales_price))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (ws in web_sales) {
        for (d in date_dim) {
            if (ws.ws_sold_date_sk == d.d_date_sk) {
                for (ca in customer_address) {
                    if (ws.ws_bill_addr_sk == ca.ca_address_sk) {
                        for (i in item) {
                            if (ws.ws_item_sk == i.i_item_sk) {
                                if (i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) {
                                    __res.add(mutableMapOf("manu" to i.i_manufact_id, "price" to ws.ws_ext_sales_price))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
})

val result = run {
    val __groups = mutableMapOf<Any?, Group<Any?, Any?>>()
    val __order = mutableListOf<Any?>()
    for (s in union_sales) {
        val __k = (s as MutableMap<*, *>)["manu"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Any?>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(s)
    }
    __order.sortByDescending { k ->
        val g = __groups[k]!!
        sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<*, *>)["price"])
    }
    __res
}) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_manufact_id" to g.key, "total_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<*, *>)["price"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
