// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:23Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q39.mochi

object math {
    const val pi: Double = kotlin.math.PI
    const val e: Double = kotlin.math.E
    fun sqrt(x: Double): Double = kotlin.math.sqrt(x)
    fun pow(x: Double, y: Double): Double = Math.pow(x, y)
    fun sin(x: Double): Double = kotlin.math.sin(x)
    fun log(x: Double): Double = kotlin.math.ln(x)
}

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Inventory(var inv_item_sk: Int, var inv_warehouse_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Item(var i_item_sk: Int)

data class Warehouse(var w_warehouse_sk: Int, var w_warehouse_name: String)

val inventory = mutableListOf(Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 1, inv_quantity_on_hand = 10), Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 2, inv_quantity_on_hand = 10), Inventory(inv_item_sk = 1, inv_warehouse_sk = 1, inv_date_sk = 3, inv_quantity_on_hand = 250))

val item = mutableListOf(Item(i_item_sk = 1))

val warehouse = mutableListOf(Warehouse(w_warehouse_sk = 1, w_warehouse_name = "W1"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_moy = 1), Date_dim(d_date_sk = 2, d_year = 2000, d_moy = 2), Date_dim(d_date_sk = 3, d_year = 2000, d_moy = 3))

val monthly = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (inv in inventory) {
        for (d in date_dim) {
            if (inv.inv_date_sk == d.d_date_sk) {
                for (i in item) {
                    if (inv.inv_item_sk == i.i_item_sk) {
                        for (w in warehouse) {
                            if (inv.inv_warehouse_sk == w.w_warehouse_sk) {
                                if (d.d_year == 2000) {
                                    val __k = (mutableMapOf("w" to w.w_warehouse_sk, "i" to i.i_item_sk, "month" to d.d_moy) as MutableMap<String, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("inv" to inv, "d" to d, "i" to i, "w" to w) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("w" to (g.key as MutableMap<String, Any?>)["w"], "i" to (g.key as MutableMap<String, Any?>)["i"], "qty" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["inv_quantity_on_hand"])
    }
    __res
})))
    }
    __res
}

var grouped: MutableMap<String, MutableMap<String, Any>> = mutableMapOf()

var summary = mutableListOf()

fun main() {
    for (m in monthly) {
        val key = mutableMapOf("w" to (m as MutableMap<String, Any?>)["w"], "i" to (m as MutableMap<String, Any?>)["i"]).toString()
        if (key in grouped) {
            val g = grouped[key]
            grouped[key] = mutableMapOf("w" to (g as MutableMap<String, Any?>)["w"], "i" to (g as MutableMap<String, Any?>)["i"], "qtys" to (g as MutableMap<String, Any?>)["qtys"] + (m as MutableMap<String, Any?>)["qty"])
        }
        else {
            grouped[key] = mutableMapOf("w" to (m as MutableMap<String, Any?>)["w"], "i" to (m as MutableMap<String, Any?>)["i"], "qtys" to mutableListOf((m as MutableMap<String, Any?>)["qty"]))
        }
    }
    for (g in grouped.values.toMutableList()) {
        val mean = run { val r = (g as MutableMap<*, *>)["qtys"].map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }
        var sumsq = 0.0
        for (q in (g as MutableMap<*, *>)["qtys"]) {
            sumsq = toDouble(toDouble(sumsq) + toDouble((toDouble(q) - toDouble(mean)))) * toDouble((toDouble(q) - toDouble(mean)))
        }
        val variance = toDouble(sumsq) / (((g as MutableMap<*, *>)["qtys"].size - 1)).toDouble()
        val cov = toDouble(math.sqrt(variance)) / toDouble(mean)
        if (toDouble(cov) > toDouble(1.5)) {
            summary = summary + mutableMapOf("w_warehouse_sk" to (g as MutableMap<*, *>)["w"], "i_item_sk" to (g as MutableMap<*, *>)["i"], "cov" to cov)
        }
    }
    json(summary)
}
