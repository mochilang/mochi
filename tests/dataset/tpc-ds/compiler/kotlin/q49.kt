// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:58Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q49.mochi

data class Catalog(var item: String, var return_ratio: Double, var currency_ratio: Double, var return_rank: Int, var currency_rank: Int)

data class Store(var item: String, var return_ratio: Double, var currency_ratio: Double, var return_rank: Int, var currency_rank: Int)

data class Web(var item: String, var return_ratio: Double, var currency_ratio: Double, var return_rank: Int, var currency_rank: Int)

val web = mutableListOf(Web(item = "A", return_ratio = 0.2, currency_ratio = 0.3, return_rank = 1, currency_rank = 1), Web(item = "B", return_ratio = 0.5, currency_ratio = 0.6, return_rank = 2, currency_rank = 2))

val catalog = mutableListOf(Catalog(item = "A", return_ratio = 0.3, currency_ratio = 0.4, return_rank = 1, currency_rank = 1))

val store = mutableListOf(Store(item = "A", return_ratio = 0.25, currency_ratio = 0.35, return_rank = 1, currency_rank = 1))

val tmp = (concat(run {
    val __res = mutableListOf<Any?>()
    for (w in web) {
        if (w.return_rank <= 10 || w.currency_rank <= 10) {
            __res.add(mutableMapOf("channel" to "web", "item" to w.item, "return_ratio" to w.return_ratio, "return_rank" to w.return_rank, "currency_rank" to w.currency_rank))
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (c in catalog) {
        if (c.return_rank <= 10 || c.currency_rank <= 10) {
            __res.add(mutableMapOf("channel" to "catalog", "item" to c.item, "return_ratio" to c.return_ratio, "return_rank" to c.return_rank, "currency_rank" to c.currency_rank))
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (s in store) {
        if (s.return_rank <= 10 || s.currency_rank <= 10) {
            __res.add(mutableMapOf("channel" to "store", "item" to s.item, "return_ratio" to s.return_ratio, "return_rank" to s.return_rank, "currency_rank" to s.currency_rank))
        }
    }
    __res
}))

val result = run {
    val __res = mutableListOf<Any?>()
    for (r in tmp) {
        __res.add(r)
    }
    __res
}.sortedBy { mutableListOf((it as MutableMap<*, *>)["channel"], (it as MutableMap<*, *>)["return_rank"], (it as MutableMap<*, *>)["currency_rank"], (it as MutableMap<*, *>)["item"]) as Comparable<Any> }

fun main() {
    json(result)
}
