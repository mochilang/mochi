// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:49Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q68.mochi

data class Catalog_sale(var item: Int, var profit: Int)

data class Store_sale(var item: Int, var profit: Int)

val catalog_sales = mutableListOf(Catalog_sale(item = 1, profit = 30), Catalog_sale(item = 2, profit = 38))

val store_sales = mutableListOf(Store_sale(item = 1, profit = 30))

val result = toDouble(toDouble(sum(run {
    val __res = mutableListOf<Int>()
    for (c in catalog_sales) {
        __res.add(c.profit)
    }
    __res
})) - toDouble(sum(run {
    val __res = mutableListOf<Int>()
    for (s in store_sales) {
        __res.add(s.profit)
    }
    __res
}))) + 30

fun main() {
    json(result)
}
