// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:26Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q79.mochi

data class Customer(var c_customer_sk: Int, var c_last_name: String, var c_first_name: String)

data class Date_dim(var d_date_sk: Int, var d_dow: Int, var d_year: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_dep_count: Int, var hd_vehicle_count: Int)

data class Store(var s_store_sk: Int, var s_city: String, var s_number_employees: Int)

data class Store_sale(var ss_sold_date_sk: Int, var ss_store_sk: Int, var ss_ticket_number: Int, var ss_customer_sk: Int, var ss_hdemo_sk: Int, var ss_coupon_amt: Double, var ss_net_profit: Double)

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_dow = 1, d_year = 1999))

val store = mutableListOf(Store(s_store_sk = 1, s_city = "CityA", s_number_employees = 250))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_dep_count = 2, hd_vehicle_count = 1))

val store_sales = mutableListOf(Store_sale(ss_sold_date_sk = 1, ss_store_sk = 1, ss_ticket_number = 1, ss_customer_sk = 1, ss_hdemo_sk = 1, ss_coupon_amt = 5.0, ss_net_profit = 10.0))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_last_name = "Smith", c_first_name = "Alice"))

val agg = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ss.ss_sold_date_sk) {
                for (s in store) {
                    if (s.s_store_sk == ss.ss_store_sk) {
                        for (hd in household_demographics) {
                            if (hd.hd_demo_sk == ss.ss_hdemo_sk) {
                                if ((hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) && d.d_dow == 1 && (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) && s.s_number_employees >= 200 && s.s_number_employees <= 295) {
                                    val __k = (mutableMapOf("ticket" to ss.ss_ticket_number, "customer_sk" to ss.ss_customer_sk, "city" to s.s_city) as MutableMap<String, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("ss" to ss, "d" to d, "s" to s, "hd" to hd) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("key" to g.key, "amt" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_coupon_amt"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_profit"])
    }
    __res
})))
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (a in agg) {
        for (c in customer) {
            if (c.c_customer_sk == ((a as MutableMap<String, Any?>)["key"] as MutableMap<*, *>)["customer_sk"]) {
                __res.add(mutableMapOf("c_last_name" to c.c_last_name, "c_first_name" to c.c_first_name, "s_city" to ((a as MutableMap<String, Any?>)["key"] as MutableMap<*, *>)["city"], "ss_ticket_number" to ((a as MutableMap<String, Any?>)["key"] as MutableMap<*, *>)["ticket"], "amt" to (a as MutableMap<String, Any?>)["amt"], "profit" to (a as MutableMap<String, Any?>)["profit"]))
            }
        }
    }
    __res
}.sortedBy { mutableListOf(it.c_last_name, it.c_first_name, ((it as MutableMap<String, Any?>)["key"] as MutableMap<*, *>)["city"], (it as MutableMap<String, Any?>)["profit"]) as Comparable<Any> }

fun main() {
    json(result)
}
