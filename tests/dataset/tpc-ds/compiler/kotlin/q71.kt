// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:57Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q71.mochi

data class Catalog_sale(var cs_ext_sales_price: Double, var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_sold_time_sk: Int)

data class Date_dim(var d_date_sk: Int, var d_moy: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_brand_id: Int, var i_brand: String, var i_manager_id: Int)

data class Store_sale(var ss_ext_sales_price: Double, var ss_sold_date_sk: Int, var ss_item_sk: Int, var ss_sold_time_sk: Int)

data class Time_dim(var t_time_sk: Int, var t_hour: Int, var t_minute: Int, var t_meal_time: String)

data class Web_sale(var ws_ext_sales_price: Double, var ws_sold_date_sk: Int, var ws_item_sk: Int, var ws_sold_time_sk: Int)

val item = mutableListOf(Item(i_item_sk = 1, i_brand_id = 10, i_brand = "BrandA", i_manager_id = 1), Item(i_item_sk = 2, i_brand_id = 20, i_brand = "BrandB", i_manager_id = 1))

val time_dim = mutableListOf(Time_dim(t_time_sk = 1, t_hour = 8, t_minute = 30, t_meal_time = "breakfast"), Time_dim(t_time_sk = 2, t_hour = 18, t_minute = 0, t_meal_time = "dinner"), Time_dim(t_time_sk = 3, t_hour = 12, t_minute = 0, t_meal_time = "lunch"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_moy = 12, d_year = 1998))

val web_sales = mutableListOf(Web_sale(ws_ext_sales_price = 100.0, ws_sold_date_sk = 1, ws_item_sk = 1, ws_sold_time_sk = 1))

val catalog_sales = mutableListOf(Catalog_sale(cs_ext_sales_price = 200.0, cs_sold_date_sk = 1, cs_item_sk = 1, cs_sold_time_sk = 2))

val store_sales = mutableListOf(Store_sale(ss_ext_sales_price = 150.0, ss_sold_date_sk = 1, ss_item_sk = 2, ss_sold_time_sk = 1))

val month = 12

val year = 1998

val union_sales = concat(run {
    val __res = mutableListOf<Any?>()
    for (ws in web_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ws.ws_sold_date_sk) {
                if (d.d_moy == month && d.d_year == year) {
                    __res.add(mutableMapOf("ext_price" to ws.ws_ext_sales_price, "item_sk" to ws.ws_item_sk, "time_sk" to ws.ws_sold_time_sk))
                }
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (cs in catalog_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == cs.cs_sold_date_sk) {
                if (d.d_moy == month && d.d_year == year) {
                    __res.add(mutableMapOf("ext_price" to cs.cs_ext_sales_price, "item_sk" to cs.cs_item_sk, "time_sk" to cs.cs_sold_time_sk))
                }
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ss.ss_sold_date_sk) {
                if (d.d_moy == month && d.d_year == year) {
                    __res.add(mutableMapOf("ext_price" to ss.ss_ext_sales_price, "item_sk" to ss.ss_item_sk, "time_sk" to ss.ss_sold_time_sk))
                }
            }
        }
    }
    __res
})

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (i in item) {
        for (s in union_sales) {
            if ((s as MutableMap<*, *>)["item_sk"] == i.i_item_sk) {
                for (t in time_dim) {
                    if (t.t_time_sk == (s as MutableMap<*, *>)["time_sk"]) {
                        if (i.i_manager_id == 1 && (t.t_meal_time == "breakfast" || t.t_meal_time == "dinner")) {
                            val __k = (mutableMapOf("brand_id" to i.i_brand_id, "brand" to i.i_brand, "t_hour" to t.t_hour, "t_minute" to t.t_minute) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("i" to i, "s" to s, "t" to t) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf(-sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["s"] as MutableMap<*, *>)["ext_price"])
    }
    __res
}), (g.key as MutableMap<String, Any?>)["brand_id"]) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_brand_id" to (g.key as MutableMap<String, Any?>)["brand_id"], "i_brand" to (g.key as MutableMap<String, Any?>)["brand"], "t_hour" to (g.key as MutableMap<String, Any?>)["t_hour"], "t_minute" to (g.key as MutableMap<String, Any?>)["t_minute"], "ext_price" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["s"] as MutableMap<*, *>)["ext_price"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
