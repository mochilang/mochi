// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:17Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q77.mochi

data class Catalog_return(var cr_returned_date_sk: Int, var cr_call_center_sk: Int, var cr_return_amount: Double, var cr_net_loss: Double)

data class Catalog_sale(var cs_sold_date_sk: Int, var cs_call_center_sk: Int, var cs_ext_sales_price: Double, var cs_net_profit: Double)

data class Date_dim(var d_date_sk: Int, var d_date: Int)

data class Store_return(var sr_returned_date_sk: Int, var s_store_sk: Int, var sr_return_amt: Double, var sr_net_loss: Double)

data class Store_sale(var ss_sold_date_sk: Int, var s_store_sk: Int, var ss_ext_sales_price: Double, var ss_net_profit: Double)

data class Web_return(var wr_returned_date_sk: Int, var wr_web_page_sk: Int, var wr_return_amt: Double, var wr_net_loss: Double)

data class Web_sale(var ws_sold_date_sk: Int, var ws_web_page_sk: Int, var ws_ext_sales_price: Double, var ws_net_profit: Double)

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_date = 1))

val store_sales = mutableListOf(Store_sale(ss_sold_date_sk = 1, s_store_sk = 1, ss_ext_sales_price = 100.0, ss_net_profit = 10.0))

val store_returns = mutableListOf(Store_return(sr_returned_date_sk = 1, s_store_sk = 1, sr_return_amt = 5.0, sr_net_loss = 1.0))

val catalog_sales = mutableListOf(Catalog_sale(cs_sold_date_sk = 1, cs_call_center_sk = 1, cs_ext_sales_price = 150.0, cs_net_profit = 15.0))

val catalog_returns = mutableListOf(Catalog_return(cr_returned_date_sk = 1, cr_call_center_sk = 1, cr_return_amount = 7.0, cr_net_loss = 3.0))

val web_sales = mutableListOf(Web_sale(ws_sold_date_sk = 1, ws_web_page_sk = 1, ws_ext_sales_price = 200.0, ws_net_profit = 20.0))

val web_returns = mutableListOf(Web_return(wr_returned_date_sk = 1, wr_web_page_sk = 1, wr_return_amt = 10.0, wr_net_loss = 2.0))

val ss = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ss.ss_sold_date_sk) {
                val __k = ss.s_store_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("ss" to ss, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_store_sk" to g.key, "sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_ext_sales_price"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_profit"])
    }
    __res
})))
    }
    __res
}

val sr = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (sr in store_returns) {
        for (d in date_dim) {
            if (d.d_date_sk == sr.sr_returned_date_sk) {
                val __k = sr.s_store_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("sr" to sr, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_store_sk" to g.key, "returns" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["sr"] as MutableMap<*, *>)["sr_return_amt"])
    }
    __res
}), "profit_loss" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["sr"] as MutableMap<*, *>)["sr_net_loss"])
    }
    __res
})))
    }
    __res
}

val cs = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (cs in catalog_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == cs.cs_sold_date_sk) {
                val __k = cs.cs_call_center_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("cs" to cs, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cs_call_center_sk" to g.key, "sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["cs"] as MutableMap<*, *>)["cs_ext_sales_price"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["cs"] as MutableMap<*, *>)["cs_net_profit"])
    }
    __res
})))
    }
    __res
}

val cr = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (cr in catalog_returns) {
        for (d in date_dim) {
            if (d.d_date_sk == cr.cr_returned_date_sk) {
                val __k = cr.cr_call_center_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("cr" to cr, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cr_call_center_sk" to g.key, "returns" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["cr"] as MutableMap<*, *>)["cr_return_amount"])
    }
    __res
}), "profit_loss" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["cr"] as MutableMap<*, *>)["cr_net_loss"])
    }
    __res
})))
    }
    __res
}

val ws = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (ws in web_sales) {
        for (d in date_dim) {
            if (d.d_date_sk == ws.ws_sold_date_sk) {
                val __k = ws.ws_web_page_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("ws" to ws, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("wp_web_page_sk" to g.key, "sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ws"] as MutableMap<*, *>)["ws_ext_sales_price"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ws"] as MutableMap<*, *>)["ws_net_profit"])
    }
    __res
})))
    }
    __res
}

val wr = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Int>()
    for (wr in web_returns) {
        for (d in date_dim) {
            if (d.d_date_sk == wr.wr_returned_date_sk) {
                val __k = wr.wr_web_page_sk
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("wr" to wr, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("wp_web_page_sk" to g.key, "returns" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["wr"] as MutableMap<*, *>)["wr_return_amt"])
    }
    __res
}), "profit_loss" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["wr"] as MutableMap<*, *>)["wr_net_loss"])
    }
    __res
})))
    }
    __res
}

val per_channel = concat(run {
    val __res = mutableListOf<Any?>()
    for (s in ss) {
        for (r in sr) {
            if ((s as MutableMap<String, Any?>)["s_store_sk"] == (r as MutableMap<String, Any?>)["s_store_sk"]) {
                __res.add(mutableMapOf("channel" to "store channel", "id" to (s as MutableMap<String, Any?>)["s_store_sk"], "sales" to (s as MutableMap<String, Any?>)["sales"], "returns" to if (r == null) 0.0 else (r as MutableMap<String, Any?>)["returns"], "profit" to toDouble((s as MutableMap<String, Any?>)["profit"]) - toDouble((if (r == null) 0.0 else (r as MutableMap<String, Any?>)["profit_loss"]))))
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (c in cs) {
        for (r in cr) {
            if ((c as MutableMap<String, Any?>)["cs_call_center_sk"] == (r as MutableMap<String, Any?>)["cr_call_center_sk"]) {
                __res.add(mutableMapOf("channel" to "catalog channel", "id" to (c as MutableMap<String, Any?>)["cs_call_center_sk"], "sales" to (c as MutableMap<String, Any?>)["sales"], "returns" to (r as MutableMap<String, Any?>)["returns"], "profit" to toDouble((c as MutableMap<String, Any?>)["profit"]) - toDouble((r as MutableMap<String, Any?>)["profit_loss"])))
            }
        }
    }
    __res
}, run {
    val __res = mutableListOf<Any?>()
    for (w in ws) {
        for (r in wr) {
            if ((w as MutableMap<String, Any?>)["wp_web_page_sk"] == (r as MutableMap<String, Any?>)["wp_web_page_sk"]) {
                __res.add(mutableMapOf("channel" to "web channel", "id" to (w as MutableMap<String, Any?>)["wp_web_page_sk"], "sales" to (w as MutableMap<String, Any?>)["sales"], "returns" to if (r == null) 0.0 else (r as MutableMap<String, Any?>)["returns"], "profit" to toDouble((w as MutableMap<String, Any?>)["profit"]) - toDouble((if (r == null) 0.0 else (r as MutableMap<String, Any?>)["profit_loss"]))))
            }
        }
    }
    __res
})

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Any?>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (p in per_channel) {
        val __k = (mutableMapOf("channel" to (p as MutableMap<*, *>)["channel"], "id" to (p as MutableMap<*, *>)["id"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Any?>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(p)
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        (g.key as MutableMap<String, Any?>)["channel"] as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("channel" to (g.key as MutableMap<String, Any?>)["channel"], "id" to (g.key as MutableMap<String, Any?>)["id"], "sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<*, *>)["p"] as MutableMap<*, *>)["sales"])
    }
    __res
}), "returns" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<*, *>)["p"] as MutableMap<*, *>)["returns"])
    }
    __res
}), "profit" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<*, *>)["p"] as MutableMap<*, *>)["profit"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
