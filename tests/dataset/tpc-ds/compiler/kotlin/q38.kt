// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:23:20Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun <T> intersect(a: MutableList<T>, b: MutableList<T>): MutableList<T> {
    val res = mutableListOf<T>()
    for (x in a) if (b.contains(x)) res.add(x)
    return res
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q38.mochi

data class Catalog_sale(var cs_bill_customer_sk: Int, var d_month_seq: Int)

data class Customer(var c_customer_sk: Int, var c_last_name: String, var c_first_name: String)

data class Store_sale(var ss_customer_sk: Int, var d_month_seq: Int)

data class Web_sale(var ws_bill_customer_sk: Int, var d_month_seq: Int)

val customer = mutableListOf(Customer(c_customer_sk = 1, c_last_name = "Smith", c_first_name = "John"), Customer(c_customer_sk = 2, c_last_name = "Jones", c_first_name = "Alice"))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, d_month_seq = 1200), Store_sale(ss_customer_sk = 2, d_month_seq = 1205))

val catalog_sales = mutableListOf(Catalog_sale(cs_bill_customer_sk = 1, d_month_seq = 1203))

val web_sales = mutableListOf(Web_sale(ws_bill_customer_sk = 1, d_month_seq = 1206))

val store_ids = distinct(run {
    val __res = mutableListOf<Int>()
    for (s in store_sales) {
        if (s.d_month_seq >= 1200 && s.d_month_seq <= 1211) {
            __res.add(s.ss_customer_sk)
        }
    }
    __res
})

val catalog_ids = distinct(run {
    val __res = mutableListOf<Int>()
    for (c in catalog_sales) {
        if (c.d_month_seq >= 1200 && c.d_month_seq <= 1211) {
            __res.add(c.cs_bill_customer_sk)
        }
    }
    __res
})

val web_ids = distinct(run {
    val __res = mutableListOf<Int>()
    for (w in web_sales) {
        if (w.d_month_seq >= 1200 && w.d_month_seq <= 1211) {
            __res.add(w.ws_bill_customer_sk)
        }
    }
    __res
})

val hot = intersect(intersect(store_ids.toMutableList(), catalog_ids.toMutableList()).toMutableList(), web_ids.toMutableList())

val result = hot.size

/**
 * Auto-generated from Mochi
 * @param xs MutableList<Any>
 * @return MutableList<Any>
 */
fun distinct(xs: MutableList<Any>): MutableList<Any> {
    var out = mutableListOf()
    for (x in xs) {
        if (!contains(out, x)) {
            out = out + x
        }
    }
    return out
}

fun main() {
    json(result)
}
