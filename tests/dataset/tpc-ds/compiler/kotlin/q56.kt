// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:24:17Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q56.mochi

data class Catalog_sale(var item: Int, var price: Double)

data class Store_sale(var item: Int, var price: Double)

data class Web_sale(var item: Int, var price: Double)

val store_sales = mutableListOf(Store_sale(item = 1, price = 10.0))

val catalog_sales = mutableListOf(Catalog_sale(item = 1, price = 20.0))

val web_sales = mutableListOf(Web_sale(item = 1, price = 30.0))

val ss = run {
    val __groups = mutableMapOf<Int, Group<Int, Store_sale>>()
    val __order = mutableListOf<Int>()
    for (s in store_sales) {
        val __k = s.item
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(s)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("item" to g.key, "total" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.price)
    }
    __res
})))
    }
    __res
}

val cs = run {
    val __groups = mutableMapOf<Int, Group<Int, Catalog_sale>>()
    val __order = mutableListOf<Int>()
    for (s in catalog_sales) {
        val __k = s.item
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Catalog_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(s)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("item" to g.key, "total" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.price)
    }
    __res
})))
    }
    __res
}

val ws = run {
    val __groups = mutableMapOf<Int, Group<Int, Web_sale>>()
    val __order = mutableListOf<Int>()
    for (s in web_sales) {
        val __k = s.item
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Web_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(s)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("item" to g.key, "total" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.price)
    }
    __res
})))
    }
    __res
}

val union = concat(ss, cs, ws)

val result = run {
    val __groups = mutableMapOf<Any?, Group<Any?, Any?>>()
    val __order = mutableListOf<Any?>()
    for (u in union) {
        val __k = (u as MutableMap<*, *>)["item"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Any?>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(u)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to g.key, "total_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<*, *>)["total"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
