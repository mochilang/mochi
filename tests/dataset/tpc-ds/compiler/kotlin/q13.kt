// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:21:55Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q13.mochi

data class StoreSale(var ss_store_sk: Int, var ss_sold_date_sk: Int, var ss_hdemo_sk: Int, var ss_cdemo_sk: Int, var ss_addr_sk: Int, var ss_sales_price: Double, var ss_net_profit: Double, var ss_quantity: Int, var ss_ext_sales_price: Double, var ss_ext_wholesale_cost: Double)

data class Store(var s_store_sk: Int, var s_state: String)

data class CustomerDemographics(var cd_demo_sk: Int, var cd_marital_status: String, var cd_education_status: String)

data class HouseholdDemographics(var hd_demo_sk: Int, var hd_dep_count: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_country: String, var ca_state: String)

data class DateDim(var d_date_sk: Int, var d_year: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_country: String, var ca_state: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_marital_status: String, var cd_education_status: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_dep_count: Int)

data class Store(var s_store_sk: Int, var s_state: String)

data class Store_sale(var ss_store_sk: Int, var ss_sold_date_sk: Int, var ss_hdemo_sk: Int, var ss_cdemo_sk: Int, var ss_addr_sk: Int, var ss_sales_price: Double, var ss_net_profit: Double, var ss_quantity: Int, var ss_ext_sales_price: Double, var ss_ext_wholesale_cost: Double)

val store_sales = mutableListOf(Store_sale(ss_store_sk = 1, ss_sold_date_sk = 1, ss_hdemo_sk = 1, ss_cdemo_sk = 1, ss_addr_sk = 1, ss_sales_price = 120.0, ss_net_profit = 150.0, ss_quantity = 10, ss_ext_sales_price = 100.0, ss_ext_wholesale_cost = 50.0))

val store = mutableListOf(Store(s_store_sk = 1, s_state = "CA"))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_marital_status = "M1", cd_education_status = "ES1"))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_dep_count = 3))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_country = "United States", ca_state = "CA"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2001))

val filtered = run {
    val __res = mutableListOf<Store_sale>()
    for (ss in store_sales) {
        for (s in store) {
            if (ss.ss_store_sk == s.s_store_sk) {
                for (cd in customer_demographics) {
                    if (ss.ss_cdemo_sk == cd.cd_demo_sk && cd.cd_marital_status == "M1" && cd.cd_education_status == "ES1") {
                        for (hd in household_demographics) {
                            if (ss.ss_hdemo_sk == hd.hd_demo_sk && hd.hd_dep_count == 3) {
                                for (ca in customer_address) {
                                    if (ss.ss_addr_sk == ca.ca_address_sk && ca.ca_country == "United States" && ca.ca_state == "CA") {
                                        for (d in date_dim) {
                                            if (ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2001) {
                                                __res.add(ss)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<MutableMap<Any?, Any?>, Group<MutableMap<Any?, Any?>, Store_sale>>()
    val __order = mutableListOf<MutableMap<Any?, Any?>>()
    for (r in filtered) {
        val __k = (mutableMapOf() as MutableMap<Any?, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Store_sale>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("avg_ss_quantity" to run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.ss_quantity)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "avg_ss_ext_sales_price" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.ss_ext_sales_price)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "avg_ss_ext_wholesale_cost" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.ss_ext_wholesale_cost)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "sum_ss_ext_wholesale_cost" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.ss_ext_wholesale_cost)
    }
    __res
})))
    }
    __res
}

fun main() {
    json(result)
}
