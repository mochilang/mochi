// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:32Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q81.mochi

data class Catalog_return(var cust: Int, var state: String, var amt: Double)

val catalog_returns = mutableListOf(Catalog_return(cust = 1, state = "CA", amt = 40.0), Catalog_return(cust = 2, state = "CA", amt = 50.0), Catalog_return(cust = 3, state = "CA", amt = 81.0), Catalog_return(cust = 4, state = "TX", amt = 30.0), Catalog_return(cust = 5, state = "TX", amt = 20.0))

val avg_list = run {
    val __groups = mutableMapOf<String, Group<String, Catalog_return>>()
    val __order = mutableListOf<String>()
    for (r in catalog_returns) {
        val __k = r.state
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Catalog_return>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("state" to g.key, "avg_amt" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.amt)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

val avg_state = first(run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (a in avg_list) {
        if ((a as MutableMap<String, Any?>)["state"] == "CA") {
            __res.add((a as MutableMap<String, Any?>))
        }
    }
    __res
})

val result_list = run {
    val __res = mutableListOf<Double>()
    for (r in catalog_returns) {
        if (toDouble(toDouble(r.state == "CA" && r.amt) > toDouble((avg_state as MutableMap<String, Any?>)["avg_amt"])) * toDouble(1.2)) {
            __res.add(r.amt)
        }
    }
    __res
}

val result = first(result_list)

fun main() {
    json(result)
}
