// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:25Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q22.mochi

data class Inventory(var inv_item_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class DateDim(var d_date_sk: Int, var d_month_seq: Int)

data class Item(var i_item_sk: Int, var i_product_name: String, var i_brand: String, var i_class: String, var i_category: String)

data class Date_dim(var d_date_sk: Int, var d_month_seq: Int)

data class Inventory(var inv_item_sk: Int, var inv_date_sk: Int, var inv_quantity_on_hand: Int)

data class Item(var i_item_sk: Int, var i_product_name: String, var i_brand: String, var i_class: String, var i_category: String)

val inventory = mutableListOf(Inventory(inv_item_sk = 1, inv_date_sk = 1, inv_quantity_on_hand = 10), Inventory(inv_item_sk = 1, inv_date_sk = 2, inv_quantity_on_hand = 20), Inventory(inv_item_sk = 1, inv_date_sk = 3, inv_quantity_on_hand = 10), Inventory(inv_item_sk = 1, inv_date_sk = 4, inv_quantity_on_hand = 20), Inventory(inv_item_sk = 2, inv_date_sk = 1, inv_quantity_on_hand = 50))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_month_seq = 0), Date_dim(d_date_sk = 2, d_month_seq = 1), Date_dim(d_date_sk = 3, d_month_seq = 2), Date_dim(d_date_sk = 4, d_month_seq = 3))

val item = mutableListOf(Item(i_item_sk = 1, i_product_name = "Prod1", i_brand = "Brand1", i_class = "Class1", i_category = "Cat1"), Item(i_item_sk = 2, i_product_name = "Prod2", i_brand = "Brand2", i_class = "Class2", i_category = "Cat2"))

val qoh = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (inv in inventory) {
        for (d in date_dim) {
            if (inv.inv_date_sk == d.d_date_sk) {
                for (i in item) {
                    if (inv.inv_item_sk == i.i_item_sk) {
                        if (d.d_month_seq >= 0 && d.d_month_seq <= 11) {
                            val __k = (mutableMapOf("product_name" to i.i_product_name, "brand" to i.i_brand, "class" to i.i_class, "category" to i.i_category) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("inv" to inv, "d" to d, "i" to i) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_product_name" to (g.key as MutableMap<String, Any?>)["product_name"], "i_brand" to (g.key as MutableMap<String, Any?>)["brand"], "i_class" to (g.key as MutableMap<String, Any?>)["class"], "i_category" to (g.key as MutableMap<String, Any?>)["category"], "qoh" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["inv_quantity_on_hand"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

fun main() {
    json(qoh)
}
