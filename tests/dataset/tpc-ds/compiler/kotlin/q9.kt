// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:11:14Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q9.mochi

data class Reason(var r_reason_sk: Int)

data class Store_sale(var ss_quantity: Int, var ss_ext_discount_amt: Double, var ss_net_paid: Double)

val store_sales = mutableListOf(Store_sale(ss_quantity = 5, ss_ext_discount_amt = 5.0, ss_net_paid = 7.0), Store_sale(ss_quantity = 30, ss_ext_discount_amt = 10.0, ss_net_paid = 15.0), Store_sale(ss_quantity = 50, ss_ext_discount_amt = 20.0, ss_net_paid = 30.0), Store_sale(ss_quantity = 70, ss_ext_discount_amt = 25.0, ss_net_paid = 35.0), Store_sale(ss_quantity = 90, ss_ext_discount_amt = 40.0, ss_net_paid = 50.0))

val reason = mutableListOf(Reason(r_reason_sk = 1))

val bucket1 = if (run {
    val __res = mutableListOf<Store_sale>()
    for (s in store_sales) {
        if (s.ss_quantity >= 1 && s.ss_quantity <= 20) {
            __res.add(s)
        }
    }
    __res
}.size > 10) run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 1 && s.ss_quantity <= 20) {
            __res.add(s.ss_ext_discount_amt)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r } else run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 1 && s.ss_quantity <= 20) {
            __res.add(s.ss_net_paid)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val bucket2 = if (run {
    val __res = mutableListOf<Store_sale>()
    for (s in store_sales) {
        if (s.ss_quantity >= 21 && s.ss_quantity <= 40) {
            __res.add(s)
        }
    }
    __res
}.size > 20) run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 21 && s.ss_quantity <= 40) {
            __res.add(s.ss_ext_discount_amt)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r } else run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 21 && s.ss_quantity <= 40) {
            __res.add(s.ss_net_paid)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val bucket3 = if (run {
    val __res = mutableListOf<Store_sale>()
    for (s in store_sales) {
        if (s.ss_quantity >= 41 && s.ss_quantity <= 60) {
            __res.add(s)
        }
    }
    __res
}.size > 30) run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 41 && s.ss_quantity <= 60) {
            __res.add(s.ss_ext_discount_amt)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r } else run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 41 && s.ss_quantity <= 60) {
            __res.add(s.ss_net_paid)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val bucket4 = if (run {
    val __res = mutableListOf<Store_sale>()
    for (s in store_sales) {
        if (s.ss_quantity >= 61 && s.ss_quantity <= 80) {
            __res.add(s)
        }
    }
    __res
}.size > 40) run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 61 && s.ss_quantity <= 80) {
            __res.add(s.ss_ext_discount_amt)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r } else run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 61 && s.ss_quantity <= 80) {
            __res.add(s.ss_net_paid)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val bucket5 = if (run {
    val __res = mutableListOf<Store_sale>()
    for (s in store_sales) {
        if (s.ss_quantity >= 81 && s.ss_quantity <= 100) {
            __res.add(s)
        }
    }
    __res
}.size > 50) run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 81 && s.ss_quantity <= 100) {
            __res.add(s.ss_ext_discount_amt)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r } else run { val r = run {
    val __res = mutableListOf<Double>()
    for (s in store_sales) {
        if (s.ss_quantity >= 81 && s.ss_quantity <= 100) {
            __res.add(s.ss_net_paid)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val result = run {
    val __res = mutableListOf<Any?>()
    for (r in reason) {
        if (r.r_reason_sk == 1) {
            __res.add(mutableMapOf("bucket1" to bucket1, "bucket2" to bucket2, "bucket3" to bucket3, "bucket4" to bucket4, "bucket5" to bucket5))
        }
    }
    __res
}

fun main() {
    json(result)
}
