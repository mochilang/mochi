// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:19:07Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q91.mochi

data class CallCenter(var cc_call_center_sk: Int, var cc_call_center_id: String, var cc_name: String, var cc_manager: String)

data class CatalogReturn(var cr_call_center_sk: Int, var cr_returned_date_sk: Int, var cr_returning_customer_sk: Int, var cr_net_loss: Double)

data class DateDim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Customer(var c_customer_sk: Int, var c_current_cdemo_sk: Int, var c_current_hdemo_sk: Int, var c_current_addr_sk: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_gmt_offset: Int)

data class CustomerDemographics(var cd_demo_sk: Int, var cd_marital_status: String, var cd_education_status: String)

data class HouseholdDemographics(var hd_demo_sk: Int, var hd_buy_potential: String)

data class Call_center(var cc_call_center_sk: Int, var cc_call_center_id: String, var cc_name: String, var cc_manager: String)

data class Catalog_return(var cr_call_center_sk: Int, var cr_returned_date_sk: Int, var cr_returning_customer_sk: Int, var cr_net_loss: Double)

data class Customer(var c_customer_sk: Int, var c_current_cdemo_sk: Int, var c_current_hdemo_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_gmt_offset: Int)

data class Customer_demographic(var cd_demo_sk: Int, var cd_marital_status: String, var cd_education_status: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_moy: Int)

data class Household_demographic(var hd_demo_sk: Int, var hd_buy_potential: String)

val call_center = mutableListOf(Call_center(cc_call_center_sk = 1, cc_call_center_id = "CC1", cc_name = "Main", cc_manager = "Alice"))

val catalog_returns = mutableListOf(Catalog_return(cr_call_center_sk = 1, cr_returned_date_sk = 1, cr_returning_customer_sk = 1, cr_net_loss = 10.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2001, d_moy = 5))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_cdemo_sk = 1, c_current_hdemo_sk = 1, c_current_addr_sk = 1))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_marital_status = "M", cd_education_status = "Unknown"))

val household_demographics = mutableListOf(Household_demographic(hd_demo_sk = 1, hd_buy_potential = "1001-5000"))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_gmt_offset = -6))

val result = first(run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cc in call_center) {
        for (cr in catalog_returns) {
            if (cc.cc_call_center_sk == cr.cr_call_center_sk) {
                for (d in date_dim) {
                    if (cr.cr_returned_date_sk == d.d_date_sk) {
                        for (c in customer) {
                            if (cr.cr_returning_customer_sk == c.c_customer_sk) {
                                for (cd in customer_demographics) {
                                    if (c.c_current_cdemo_sk == cd.cd_demo_sk) {
                                        for (hd in household_demographics) {
                                            if (c.c_current_hdemo_sk == hd.hd_demo_sk) {
                                                for (ca in customer_address) {
                                                    if (c.c_current_addr_sk == ca.ca_address_sk) {
                                                        if (d.d_year == 2001 && d.d_moy == 5 && cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" && hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)) {
                                                            val __k = (mutableMapOf("id" to cc.cc_call_center_id, "name" to cc.cc_name, "mgr" to cc.cc_manager) as MutableMap<String, Any?>)
                                                            var __g = __groups[__k]
                                                            if (__g == null) {
                                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                                __groups[__k] = __g
                                                                __order.add(__k)
                                                            }
                                                            __g.add(mutableMapOf("cc" to cc, "cr" to cr, "d" to d, "c" to c, "cd" to cd, "hd" to hd, "ca" to ca) as MutableMap<String, Any?>)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("Call_Center" to (g.key as MutableMap<String, Any?>)["id"], "Call_Center_Name" to (g.key as MutableMap<String, Any?>)["name"], "Manager" to (g.key as MutableMap<String, Any?>)["mgr"], "Returns_Loss" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cr_net_loss"])
    }
    __res
})))
    }
    __res
})

fun main() {
    json(result)
}
