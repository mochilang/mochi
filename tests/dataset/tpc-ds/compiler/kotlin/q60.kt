// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:17:27Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q60.mochi

data class Catalog_sale(var item: Int, var price: Int)

data class Store_sale(var item: Int, var price: Int)

data class Web_sale(var item: Int, var price: Int)

val store_sales = mutableListOf(Store_sale(item = 1, price = 10), Store_sale(item = 1, price = 20))

val catalog_sales = mutableListOf(Catalog_sale(item = 1, price = 15))

val web_sales = mutableListOf(Web_sale(item = 1, price = 15))

val all_sales = store_sales.toMutableList().apply { addAll(catalog_sales) }.toMutableList().apply { addAll(web_sales) }

val result = sum(run {
    val __res = mutableListOf<Int>()
    for (s in all_sales) {
        __res.add((s as MutableMap<String, Int>)["price"])
    }
    __res
})

fun main() {
    json(result)
}
