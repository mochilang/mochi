// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:38Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q26.mochi

data class CatalogSale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_cdemo_sk: Int, var cs_promo_sk: Int, var cs_quantity: Int, var cs_list_price: Double, var cs_coupon_amt: Double, var cs_sales_price: Double)

data class CustomerDemo(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String)

data class DateDim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Promotion(var p_promo_sk: Int, var p_channel_email: String, var p_channel_event: String)

data class Catalog_sale(var cs_sold_date_sk: Int, var cs_item_sk: Int, var cs_bill_cdemo_sk: Int, var cs_promo_sk: Int, var cs_quantity: Int, var cs_list_price: Double, var cs_coupon_amt: Double, var cs_sales_price: Double)

data class Customer_demographic(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_education_status: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Item(var i_item_sk: Int, var i_item_id: String)

data class Promotion(var p_promo_sk: Int, var p_channel_email: String, var p_channel_event: String)

val catalog_sales = mutableListOf(Catalog_sale(cs_sold_date_sk = 1, cs_item_sk = 1, cs_bill_cdemo_sk = 1, cs_promo_sk = 1, cs_quantity = 10, cs_list_price = 100.0, cs_coupon_amt = 5.0, cs_sales_price = 95.0), Catalog_sale(cs_sold_date_sk = 1, cs_item_sk = 2, cs_bill_cdemo_sk = 2, cs_promo_sk = 2, cs_quantity = 5, cs_list_price = 50.0, cs_coupon_amt = 2.0, cs_sales_price = 48.0))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_gender = "M", cd_marital_status = "S", cd_education_status = "College"), Customer_demographic(cd_demo_sk = 2, cd_gender = "F", cd_marital_status = "M", cd_education_status = "High School"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000))

val item = mutableListOf(Item(i_item_sk = 1, i_item_id = "ITEM1"), Item(i_item_sk = 2, i_item_id = "ITEM2"))

val promotion = mutableListOf(Promotion(p_promo_sk = 1, p_channel_email = "N", p_channel_event = "Y"), Promotion(p_promo_sk = 2, p_channel_email = "Y", p_channel_event = "N"))

val result = run {
    val __groups = mutableMapOf<String, Group<String, MutableMap<String, Any?>>>()
    val __order = mutableListOf<String>()
    for (cs in catalog_sales) {
        for (cd in customer_demographics) {
            if (cs.cs_bill_cdemo_sk == cd.cd_demo_sk) {
                for (d in date_dim) {
                    if (cs.cs_sold_date_sk == d.d_date_sk) {
                        for (i in item) {
                            if (cs.cs_item_sk == i.i_item_sk) {
                                for (p in promotion) {
                                    if (cs.cs_promo_sk == p.p_promo_sk) {
                                        if (cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) {
                                            val __k = i.i_item_id
                                            var __g = __groups[__k]
                                            if (__g == null) {
                                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                                __groups[__k] = __g
                                                __order.add(__k)
                                            }
                                            __g.add(mutableMapOf("cs" to cs, "cd" to cd, "d" to d, "i" to i, "p" to p) as MutableMap<String, Any?>)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("i_item_id" to g.key, "agg1" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_quantity"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg2" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_list_price"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg3" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_coupon_amt"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "agg4" to run { val r = run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_sales_price"])
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }))
    }
    __res
}

fun main() {
    json(result)
}
