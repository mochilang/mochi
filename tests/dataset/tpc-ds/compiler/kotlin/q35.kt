// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:42Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q35.mochi

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int, var c_current_cdemo_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_state: String)

data class Customer_demographic(var cd_demo_sk: Int, var cd_gender: String, var cd_marital_status: String, var cd_dep_count: Int, var cd_dep_employed_count: Int, var cd_dep_college_count: Int)

data class Date_dim(var d_date_sk: Int, var d_year: Int, var d_qoy: Int)

data class Store_sale(var ss_customer_sk: Int, var ss_sold_date_sk: Int)

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1, c_current_cdemo_sk = 1), Customer(c_customer_sk = 2, c_current_addr_sk = 2, c_current_cdemo_sk = 2))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_state = "CA"), Customer_addres(ca_address_sk = 2, ca_state = "NY"))

val customer_demographics = mutableListOf(Customer_demographic(cd_demo_sk = 1, cd_gender = "M", cd_marital_status = "S", cd_dep_count = 1, cd_dep_employed_count = 1, cd_dep_college_count = 0), Customer_demographic(cd_demo_sk = 2, cd_gender = "F", cd_marital_status = "M", cd_dep_count = 2, cd_dep_employed_count = 1, cd_dep_college_count = 1))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 2000, d_qoy = 1))

val purchased = run {
    val __res = mutableListOf<Int>()
    for (ss in store_sales) {
        for (d in date_dim) {
            if (ss.ss_sold_date_sk == d.d_date_sk) {
                if (d.d_year == 2000 && d.d_qoy < 4) {
                    __res.add(ss.ss_customer_sk)
                }
            }
        }
    }
    __res
}

val groups = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (ca in customer_address) {
            if (c.c_current_addr_sk == ca.ca_address_sk) {
                for (cd in customer_demographics) {
                    if (c.c_current_cdemo_sk == cd.cd_demo_sk) {
                        if (c.c_customer_sk in purchased) {
                            val __k = (mutableMapOf("state" to ca.ca_state, "gender" to cd.cd_gender, "marital" to cd.cd_marital_status, "dep" to cd.cd_dep_count, "emp" to cd.cd_dep_employed_count, "col" to cd.cd_dep_college_count) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("c" to c, "ca" to ca, "cd" to cd) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ca_state" to (g.key as MutableMap<String, Any?>)["state"], "cd_gender" to (g.key as MutableMap<String, Any?>)["gender"], "cd_marital_status" to (g.key as MutableMap<String, Any?>)["marital"], "cd_dep_count" to (g.key as MutableMap<String, Any?>)["dep"], "cd_dep_employed_count" to (g.key as MutableMap<String, Any?>)["emp"], "cd_dep_college_count" to (g.key as MutableMap<String, Any?>)["col"], "cnt" to g.size))
    }
    __res
}

fun main() {
    json(groups)
}
