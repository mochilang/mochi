// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:18:07Z
fun div(a: Any?, b: Any?): Double {
    val x = toDouble(a)
    val y = toDouble(b)
    return if (y == 0.0) 0.0 else x / y
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q74.mochi

data class Customer(var c_customer_sk: Int, var c_customer_id: Int, var c_first_name: String, var c_last_name: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Store_sale(var ss_customer_sk: Int, var ss_sold_date_sk: Int, var ss_net_paid: Double)

data class Web_sale(var ws_bill_customer_sk: Int, var ws_sold_date_sk: Int, var ws_net_paid: Double)

val customer = mutableListOf(Customer(c_customer_sk = 1, c_customer_id = 1, c_first_name = "Alice", c_last_name = "Smith"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1998), Date_dim(d_date_sk = 2, d_year = 1999))

val store_sales = mutableListOf(Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 1, ss_net_paid = 100.0), Store_sale(ss_customer_sk = 1, ss_sold_date_sk = 2, ss_net_paid = 110.0))

val web_sales = mutableListOf(Web_sale(ws_bill_customer_sk = 1, ws_sold_date_sk = 1, ws_net_paid = 40.0), Web_sale(ws_bill_customer_sk = 1, ws_sold_date_sk = 2, ws_net_paid = 80.0))

val year_total = concat(run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (ss in store_sales) {
            if (c.c_customer_sk == ss.ss_customer_sk) {
                for (d in date_dim) {
                    if (d.d_date_sk == ss.ss_sold_date_sk) {
                        if (d.d_year == 1998 || d.d_year == 1999) {
                            val __k = (mutableMapOf("id" to c.c_customer_id, "first" to c.c_first_name, "last" to c.c_last_name, "year" to d.d_year) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("c" to c, "ss" to ss, "d" to d) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_id" to (g.key as MutableMap<String, Any?>)["id"], "customer_first_name" to (g.key as MutableMap<String, Any?>)["first"], "customer_last_name" to (g.key as MutableMap<String, Any?>)["last"], "year" to (g.key as MutableMap<String, Any?>)["year"], "year_total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ss"] as MutableMap<*, *>)["ss_net_paid"])
    }
    __res
}), "sale_type" to "s"))
    }
    __res
}, run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (c in customer) {
        for (ws in web_sales) {
            if (c.c_customer_sk == ws.ws_bill_customer_sk) {
                for (d in date_dim) {
                    if (d.d_date_sk == ws.ws_sold_date_sk) {
                        if (d.d_year == 1998 || d.d_year == 1999) {
                            val __k = (mutableMapOf("id" to c.c_customer_id, "first" to c.c_first_name, "last" to c.c_last_name, "year" to d.d_year) as MutableMap<String, Any?>)
                            var __g = __groups[__k]
                            if (__g == null) {
                                __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                __groups[__k] = __g
                                __order.add(__k)
                            }
                            __g.add(mutableMapOf("c" to c, "ws" to ws, "d" to d) as MutableMap<String, Any?>)
                        }
                    }
                }
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("customer_id" to (g.key as MutableMap<String, Any?>)["id"], "customer_first_name" to (g.key as MutableMap<String, Any?>)["first"], "customer_last_name" to (g.key as MutableMap<String, Any?>)["last"], "year" to (g.key as MutableMap<String, Any?>)["year"], "year_total" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(((x as MutableMap<String, Any?>)["ws"] as MutableMap<*, *>)["ws_net_paid"])
    }
    __res
}), "sale_type" to "w"))
    }
    __res
})

val s_firstyear = first(run {
    val __res = mutableListOf<Any?>()
    for (y in year_total) {
        if ((y as MutableMap<*, *>)["sale_type"] == "s" && (y as MutableMap<*, *>)["year"] == 1998) {
            __res.add(y)
        }
    }
    __res
})

val s_secyear = first(run {
    val __res = mutableListOf<Any?>()
    for (y in year_total) {
        if ((y as MutableMap<*, *>)["sale_type"] == "s" && (y as MutableMap<*, *>)["year"] == 1999) {
            __res.add(y)
        }
    }
    __res
})

val w_firstyear = first(run {
    val __res = mutableListOf<Any?>()
    for (y in year_total) {
        if ((y as MutableMap<*, *>)["sale_type"] == "w" && (y as MutableMap<*, *>)["year"] == 1998) {
            __res.add(y)
        }
    }
    __res
})

val w_secyear = first(run {
    val __res = mutableListOf<Any?>()
    for (y in year_total) {
        if ((y as MutableMap<*, *>)["sale_type"] == "w" && (y as MutableMap<*, *>)["year"] == 1999) {
            __res.add(y)
        }
    }
    __res
})

val result = if (toDouble(toInt(toInt((s_firstyear as MutableMap<*, *>)["year_total"]) > 0 && (w_firstyear as MutableMap<*, *>)["year_total"]) > 0 && (div(toDouble((w_secyear as MutableMap<*, *>)["year_total"]), toDouble((w_firstyear as MutableMap<*, *>)["year_total"])))) > toDouble((div(toDouble((s_secyear as MutableMap<*, *>)["year_total"]), toDouble((s_firstyear as MutableMap<*, *>)["year_total"]))))) mutableListOf(mutableMapOf("customer_id" to (s_secyear as MutableMap<*, *>)["customer_id"], "customer_first_name" to (s_secyear as MutableMap<*, *>)["customer_first_name"], "customer_last_name" to (s_secyear as MutableMap<*, *>)["customer_last_name"])) else mutableListOf()

fun main() {
    json(result)
}
