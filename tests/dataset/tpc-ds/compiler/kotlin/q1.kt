// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:10:12Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q1.mochi

data class Customer(var c_customer_sk: Int, var c_customer_id: String)

data class Date_dim(var d_date_sk: Int, var d_year: Int)

data class Store(var s_store_sk: Int, var s_state: String)

data class Store_return(var sr_returned_date_sk: Int, var sr_customer_sk: Int, var sr_store_sk: Int, var sr_return_amt: Double)

val store_returns = mutableListOf(Store_return(sr_returned_date_sk = 1, sr_customer_sk = 1, sr_store_sk = 10, sr_return_amt = 20.0), Store_return(sr_returned_date_sk = 1, sr_customer_sk = 2, sr_store_sk = 10, sr_return_amt = 50.0))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_year = 1998))

val store = mutableListOf(Store(s_store_sk = 10, s_state = "TN"))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_customer_id = "C1"), Customer(c_customer_sk = 2, c_customer_id = "C2"))

val customer_total_return = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (sr in store_returns) {
        for (d in date_dim) {
            if (sr.sr_returned_date_sk == d.d_date_sk && d.d_year == 1998) {
                val __k = (mutableMapOf("customer_sk" to sr.sr_customer_sk, "store_sk" to sr.sr_store_sk) as MutableMap<String, Any?>)
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(mutableMapOf("sr" to sr, "d" to d) as MutableMap<String, Any?>)
            }
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ctr_customer_sk" to (g.key as MutableMap<String, Any?>)["customer_sk"], "ctr_store_sk" to (g.key as MutableMap<String, Any?>)["store_sk"], "ctr_total_return" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["sr_return_amt"])
    }
    __res
})))
    }
    __res
}

val result = run {
    val __res = mutableListOf<Any?>()
    for (ctr1 in customer_total_return) {
        for (s in store) {
            if ((ctr1 as MutableMap<String, Any?>)["ctr_store_sk"] == s.s_store_sk) {
                for (c in customer) {
                    if ((ctr1 as MutableMap<String, Any?>)["ctr_customer_sk"] == c.c_customer_sk) {
                        if (toDouble(toDouble((ctr1 as MutableMap<String, Any?>)["ctr_total_return"]) > toDouble(run { val r = run {
    val __res = mutableListOf<Any?>()
    for (ctr2 in customer_total_return) {
        if ((ctr1 as MutableMap<String, Any?>)["ctr_store_sk"] == (ctr2 as MutableMap<String, Any?>)["ctr_store_sk"]) {
            __res.add((ctr2 as MutableMap<String, Any?>)["ctr_total_return"])
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r })) * toDouble(1.2) && s.s_state == "TN") {
                            __res.add(mutableMapOf("c_customer_id" to c.c_customer_id))
                        }
                    }
                }
            }
        }
    }
    __res
}.sortedBy { it.c_customer_id as Comparable<Any> }

fun main() {
    json(result)
}
