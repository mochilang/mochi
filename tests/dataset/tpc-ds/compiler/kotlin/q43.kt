// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:47Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q43.mochi

data class Date_dim(var date_sk: Int, var d_day_name: String, var d_year: Int)

data class Store(var store_sk: Int, var store_id: String, var store_name: String, var gmt_offset: Int)

data class Store_sale(var sold_date_sk: Int, var store_sk: Int, var sales_price: Double)

val date_dim = mutableListOf(Date_dim(date_sk = 1, d_day_name = "Sunday", d_year = 2020), Date_dim(date_sk = 2, d_day_name = "Monday", d_year = 2020), Date_dim(date_sk = 3, d_day_name = "Tuesday", d_year = 2020), Date_dim(date_sk = 4, d_day_name = "Wednesday", d_year = 2020), Date_dim(date_sk = 5, d_day_name = "Thursday", d_year = 2020), Date_dim(date_sk = 6, d_day_name = "Friday", d_year = 2020), Date_dim(date_sk = 7, d_day_name = "Saturday", d_year = 2020))

val store = mutableListOf(Store(store_sk = 1, store_id = "S1", store_name = "Main", gmt_offset = 0))

val store_sales = mutableListOf(Store_sale(sold_date_sk = 1, store_sk = 1, sales_price = 10.0), Store_sale(sold_date_sk = 2, store_sk = 1, sales_price = 20.0), Store_sale(sold_date_sk = 3, store_sk = 1, sales_price = 30.0), Store_sale(sold_date_sk = 4, store_sk = 1, sales_price = 40.0), Store_sale(sold_date_sk = 5, store_sk = 1, sales_price = 50.0), Store_sale(sold_date_sk = 6, store_sk = 1, sales_price = 60.0), Store_sale(sold_date_sk = 7, store_sk = 1, sales_price = 70.0))

val year = 2020

val gmt = 0

val records = run {
    val __res = mutableListOf<Any?>()
    for (d in date_dim) {
        for (ss in store_sales) {
            if (ss.sold_date_sk == d.date_sk) {
                for (s in store) {
                    if (ss.store_sk == s.store_sk) {
                        if (s.gmt_offset == gmt && d.d_year == year) {
                            __res.add(mutableMapOf("d_day_name" to d.d_day_name, "s_store_name" to s.store_name, "s_store_id" to s.store_id, "price" to ss.sales_price))
                        }
                    }
                }
            }
        }
    }
    __res
}

val base = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (r in records) {
        val __k = (mutableMapOf("name" to (r as MutableMap<String, Any?>)["s_store_name"], "id" to (r as MutableMap<String, Any?>)["s_store_id"]) as MutableMap<String, Any?>)
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("s_store_name" to (g.key as MutableMap<String, Any?>)["name"], "s_store_id" to (g.key as MutableMap<String, Any?>)["id"], "sun_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Sunday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "mon_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Monday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "tue_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Tuesday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "wed_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Wednesday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "thu_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Thursday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "fri_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Friday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
}), "sat_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add(if ((x as MutableMap<String, Any?>)["d_day_name"] == "Saturday") (x as MutableMap<String, Any?>)["price"] else 0.0)
    }
    __res
})))
    }
    __res
}

val result = base

fun main() {
    json(result)
}
