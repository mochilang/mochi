// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:01Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q15.mochi

data class CatalogSale(var cs_bill_customer_sk: Int, var cs_sales_price: Double, var cs_sold_date_sk: Int)

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class CustomerAddress(var ca_address_sk: Int, var ca_zip: String, var ca_state: String)

data class DateDim(var d_date_sk: Int, var d_qoy: Int, var d_year: Int)

data class Catalog_sale(var cs_bill_customer_sk: Int, var cs_sales_price: Double, var cs_sold_date_sk: Int)

data class Customer(var c_customer_sk: Int, var c_current_addr_sk: Int)

data class Customer_addres(var ca_address_sk: Int, var ca_zip: String, var ca_state: String)

data class Date_dim(var d_date_sk: Int, var d_qoy: Int, var d_year: Int)

val catalog_sales = mutableListOf(Catalog_sale(cs_bill_customer_sk = 1, cs_sales_price = 600.0, cs_sold_date_sk = 1))

val customer = mutableListOf(Customer(c_customer_sk = 1, c_current_addr_sk = 1))

val customer_address = mutableListOf(Customer_addres(ca_address_sk = 1, ca_zip = "85669", ca_state = "CA"))

val date_dim = mutableListOf(Date_dim(d_date_sk = 1, d_qoy = 1, d_year = 2000))

val filtered = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, MutableMap<String, Any?>>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (cs in catalog_sales) {
        for (c in customer) {
            if (cs.cs_bill_customer_sk == c.c_customer_sk) {
                for (ca in customer_address) {
                    if (c.c_current_addr_sk == ca.ca_address_sk) {
                        for (d in date_dim) {
                            if (cs.cs_sold_date_sk == d.d_date_sk) {
                                if ((toDouble(substr(ca.ca_zip, 0, 5) in mutableListOf("85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792") || ca.ca_state in mutableListOf("CA", "WA", "GA") || cs.cs_sales_price) > 500) && d.d_qoy == 1 && d.d_year == 2000) {
                                    val __k = (mutableMapOf("zip" to ca.ca_zip) as MutableMap<String, Any?>)
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(mutableMapOf("cs" to cs, "c" to c, "ca" to ca, "d" to d) as MutableMap<String, Any?>)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        (g.key as MutableMap<String, Any?>)["zip"] as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ca_zip" to (g.key as MutableMap<String, Any?>)["zip"], "sum_sales" to sum(run {
    val __res = mutableListOf<Any?>()
    for (x in g) {
        __res.add((x as MutableMap<String, Any?>)["cs_sales_price"])
    }
    __res
})))
    }
    __res
}

fun main() {
    json(filtered)
}
