<?php
class CatalogSale {
    public $cs_quantity;
    public $cs_list_price;
    public $cs_coupon_amt;
    public $cs_sales_price;
    public $cs_net_profit;
    public $cs_bill_cdemo_sk;
    public $cs_bill_customer_sk;
    public $cs_sold_date_sk;
    public $cs_item_sk;
    public function __construct($fields = []) {
        $this->cs_quantity = $fields['cs_quantity'] ?? null;
        $this->cs_list_price = $fields['cs_list_price'] ?? null;
        $this->cs_coupon_amt = $fields['cs_coupon_amt'] ?? null;
        $this->cs_sales_price = $fields['cs_sales_price'] ?? null;
        $this->cs_net_profit = $fields['cs_net_profit'] ?? null;
        $this->cs_bill_cdemo_sk = $fields['cs_bill_cdemo_sk'] ?? null;
        $this->cs_bill_customer_sk = $fields['cs_bill_customer_sk'] ?? null;
        $this->cs_sold_date_sk = $fields['cs_sold_date_sk'] ?? null;
        $this->cs_item_sk = $fields['cs_item_sk'] ?? null;
    }
}
class CustomerDemographics {
    public $cd_demo_sk;
    public $cd_gender;
    public $cd_education_status;
    public $cd_dep_count;
    public function __construct($fields = []) {
        $this->cd_demo_sk = $fields['cd_demo_sk'] ?? null;
        $this->cd_gender = $fields['cd_gender'] ?? null;
        $this->cd_education_status = $fields['cd_education_status'] ?? null;
        $this->cd_dep_count = $fields['cd_dep_count'] ?? null;
    }
}
class Customer {
    public $c_customer_sk;
    public $c_current_cdemo_sk;
    public $c_current_addr_sk;
    public $c_birth_year;
    public $c_birth_month;
    public function __construct($fields = []) {
        $this->c_customer_sk = $fields['c_customer_sk'] ?? null;
        $this->c_current_cdemo_sk = $fields['c_current_cdemo_sk'] ?? null;
        $this->c_current_addr_sk = $fields['c_current_addr_sk'] ?? null;
        $this->c_birth_year = $fields['c_birth_year'] ?? null;
        $this->c_birth_month = $fields['c_birth_month'] ?? null;
    }
}
class CustomerAddress {
    public $ca_address_sk;
    public $ca_country;
    public $ca_state;
    public $ca_county;
    public function __construct($fields = []) {
        $this->ca_address_sk = $fields['ca_address_sk'] ?? null;
        $this->ca_country = $fields['ca_country'] ?? null;
        $this->ca_state = $fields['ca_state'] ?? null;
        $this->ca_county = $fields['ca_county'] ?? null;
    }
}
class DateDim {
    public $d_date_sk;
    public $d_year;
    public function __construct($fields = []) {
        $this->d_date_sk = $fields['d_date_sk'] ?? null;
        $this->d_year = $fields['d_year'] ?? null;
    }
}
class Item {
    public $i_item_sk;
    public $i_item_id;
    public function __construct($fields = []) {
        $this->i_item_sk = $fields['i_item_sk'] ?? null;
        $this->i_item_id = $fields['i_item_id'] ?? null;
    }
}
$catalog_sales = [
    [
        "cs_quantity" => 1,
        "cs_list_price" => 10,
        "cs_coupon_amt" => 1,
        "cs_sales_price" => 9,
        "cs_net_profit" => 2,
        "cs_bill_cdemo_sk" => 1,
        "cs_bill_customer_sk" => 1,
        "cs_sold_date_sk" => 1,
        "cs_item_sk" => 1
    ]
];
$customer_demographics = [
    [
        "cd_demo_sk" => 1,
        "cd_gender" => "M",
        "cd_education_status" => "College",
        "cd_dep_count" => 2
    ],
    [
        "cd_demo_sk" => 2,
        "cd_gender" => "F",
        "cd_education_status" => "College",
        "cd_dep_count" => 2
    ]
];
$customer = [
    [
        "c_customer_sk" => 1,
        "c_current_cdemo_sk" => 2,
        "c_current_addr_sk" => 1,
        "c_birth_year" => 1980,
        "c_birth_month" => 1
    ]
];
$customer_address = [
    [
        "ca_address_sk" => 1,
        "ca_country" => "US",
        "ca_state" => "CA",
        "ca_county" => "County1"
    ]
];
$date_dim = [["d_date_sk" => 1, "d_year" => 1999]];
$item = [
    ["i_item_sk" => 1, "i_item_id" => "I1"]
];
$joined = (function() use ($catalog_sales, $customer, $customer_address, $customer_demographics, $date_dim, $item) {
    $result = [];
    foreach ($catalog_sales as $cs) {
        foreach ($customer_demographics as $cd1) {
            if ($cs['cs_bill_cdemo_sk'] == $cd1['cd_demo_sk'] && $cd1['cd_gender'] == "M" && $cd1['cd_education_status'] == "College") {
                foreach ($customer as $c) {
                    if ($cs['cs_bill_customer_sk'] == $c['c_customer_sk']) {
                        foreach ($customer_demographics as $cd2) {
                            if ($c['c_current_cdemo_sk'] == $cd2['cd_demo_sk']) {
                                foreach ($customer_address as $ca) {
                                    if ($c['c_current_addr_sk'] == $ca['ca_address_sk']) {
                                        foreach ($date_dim as $d) {
                                            if ($cs['cs_sold_date_sk'] == $d['d_date_sk'] && $d['d_year'] == 1999) {
                                                foreach ($item as $i) {
                                                    if ($cs['cs_item_sk'] == $i['i_item_sk']) {
                                                        $result[] = [
    "i_item_id" => $i['i_item_id'],
    "ca_country" => $ca['ca_country'],
    "ca_state" => $ca['ca_state'],
    "ca_county" => $ca['ca_county'],
    "q" => $cs['cs_quantity'],
    "lp" => $cs['cs_list_price'],
    "cp" => $cs['cs_coupon_amt'],
    "sp" => $cs['cs_sales_price'],
    "np" => $cs['cs_net_profit'],
    "by" => $c['c_birth_year'],
    "dep" => $cd1['cd_dep_count']
];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $result;
})();
$result = (function() use ($joined) {
    $groups = [];
    foreach ($joined as $j) {
        $_k = json_encode([
    "i_item_id" => $j['i_item_id'],
    "ca_country" => $j['ca_country'],
    "ca_state" => $j['ca_state'],
    "ca_county" => $j['ca_county']
]);
        $groups[$_k][] = $j;
    }
    $result = [];
    foreach ($groups as $_k => $__g) {
        $_key = json_decode($_k, true);
        $g = ['key'=>$_key,'items'=> $__g];
        $result[] = [
    "i_item_id" => $g['key']['i_item_id'],
    "ca_country" => $g['key']['ca_country'],
    "ca_state" => $g['key']['ca_state'],
    "ca_county" => $g['key']['ca_county'],
    "agg1" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['q'];
        }
        return $result;
    })()),
    "agg2" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['lp'];
        }
        return $result;
    })()),
    "agg3" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['cp'];
        }
        return $result;
    })()),
    "agg4" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['sp'];
        }
        return $result;
    })()),
    "agg5" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['np'];
        }
        return $result;
    })()),
    "agg6" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['by'];
        }
        return $result;
    })()),
    "agg7" => _avg((function() use ($g) {
        $result = [];
        foreach ($g['items'] as $x) {
            $result[] = $x['dep'];
        }
        return $result;
    })())
];
    }
    return $result;
})();
echo json_encode($result), PHP_EOL;
function _avg($v) {
    if (is_array($v) && array_key_exists('items', $v)) {
        $v = $v['items'];
    } elseif (is_object($v) && property_exists($v, 'items')) {
        $v = $v->items;
    }
    if (!is_array($v)) {
        throw new Exception('avg() expects list or group');
    }
    if (!$v) return 0;
    $sum = 0;
    foreach ($v as $it) {
        if (is_int($it) || is_float($it)) {
            $sum += $it;
        } else {
            throw new Exception('avg() expects numbers');
        }
    }
    return $sum / count($v);
}
?>
