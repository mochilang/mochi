<?php
class StoreSale {
    public $ss_quantity;
    public $ss_list_price;
    public $ss_coupon_amt;
    public $ss_wholesale_cost;
    public function __construct($fields = []) {
        $this->ss_quantity = $fields['ss_quantity'] ?? null;
        $this->ss_list_price = $fields['ss_list_price'] ?? null;
        $this->ss_coupon_amt = $fields['ss_coupon_amt'] ?? null;
        $this->ss_wholesale_cost = $fields['ss_wholesale_cost'] ?? null;
    }
}
$store_sales = [
    [
        "ss_quantity" => 3,
        "ss_list_price" => 100,
        "ss_coupon_amt" => 50,
        "ss_wholesale_cost" => 30
    ],
    [
        "ss_quantity" => 8,
        "ss_list_price" => 80,
        "ss_coupon_amt" => 10,
        "ss_wholesale_cost" => 20
    ],
    [
        "ss_quantity" => 12,
        "ss_list_price" => 60,
        "ss_coupon_amt" => 5,
        "ss_wholesale_cost" => 15
    ]
];
$bucket1 = (function() use ($store_sales) {
    $result = [];
    foreach ($store_sales as $ss) {
        if ($ss['ss_quantity'] >= 0 && $ss['ss_quantity'] <= 5 && (($ss['ss_list_price'] >= 0 && $ss['ss_list_price'] <= 110) || ($ss['ss_coupon_amt'] >= 0 && $ss['ss_coupon_amt'] <= 1000) || ($ss['ss_wholesale_cost'] >= 0 && $ss['ss_wholesale_cost'] <= 50))) {
            $result[] = $ss;
        }
    }
    return $result;
})();
$bucket2 = (function() use ($store_sales) {
    $result = [];
    foreach ($store_sales as $ss) {
        if ($ss['ss_quantity'] >= 6 && $ss['ss_quantity'] <= 10 && (($ss['ss_list_price'] >= 0 && $ss['ss_list_price'] <= 110) || ($ss['ss_coupon_amt'] >= 0 && $ss['ss_coupon_amt'] <= 1000) || ($ss['ss_wholesale_cost'] >= 0 && $ss['ss_wholesale_cost'] <= 50))) {
            $result[] = $ss;
        }
    }
    return $result;
})();
$result = [
    "B1_LP" => _avg((function() use ($bucket1) {
        $result = [];
        foreach ($bucket1 as $x) {
            $result[] = $x['ss_list_price'];
        }
        return $result;
    })()),
    "B1_CNT" => count($bucket1),
    "B1_CNTD" => count((function() use ($bucket1) {
        $groups = [];
        foreach ($bucket1 as $x) {
            $_k = json_encode($x['ss_list_price']);
            $groups[$_k][] = $x;
        }
        $result = [];
        foreach ($groups as $_k => $__g) {
            $_key = json_decode($_k, true);
            $g = ['key'=>$_key,'items'=> $__g];
            $result[] = $g['key'];
        }
        return $result;
    })()),
    "B2_LP" => _avg((function() use ($bucket2) {
        $result = [];
        foreach ($bucket2 as $x) {
            $result[] = $x['ss_list_price'];
        }
        return $result;
    })()),
    "B2_CNT" => count($bucket2),
    "B2_CNTD" => count((function() use ($bucket2) {
        $groups = [];
        foreach ($bucket2 as $x) {
            $_k = json_encode($x['ss_list_price']);
            $groups[$_k][] = $x;
        }
        $result = [];
        foreach ($groups as $_k => $__g) {
            $_key = json_decode($_k, true);
            $g = ['key'=>$_key,'items'=> $__g];
            $result[] = $g['key'];
        }
        return $result;
    })())
];
echo json_encode($result), PHP_EOL;
function _avg($v) {
    if (is_array($v) && array_key_exists('items', $v)) {
        $v = $v['items'];
    } elseif (is_object($v) && property_exists($v, 'items')) {
        $v = $v->items;
    }
    if (!is_array($v)) {
        throw new Exception('avg() expects list or group');
    }
    if (!$v) return 0;
    $sum = 0;
    foreach ($v as $it) {
        if (is_int($it) || is_float($it)) {
            $sum += $it;
        } else {
            throw new Exception('avg() expects numbers');
        }
    }
    return $sum / count($v);
}
?>
