<?php
function mochi_test_TPCDS_Q4_empty() {
	global $result;
	if (!(((is_array($result) ? count($result) : strlen($result)) == 0))) { throw new Exception('expect failed'); }
}

$customer = [];
$store_sales = [];
$catalog_sales = [];
$web_sales = [];
$date_dim = [];
$year_total = array_merge(array_merge(((function() use ($customer, $date_dim, $store_sales) {
	$_src = $customer;
	return _query($_src, [
		[ 'items' => $store_sales, 'on' => function($c, $s) use ($customer, $date_dim, $store_sales) { return ($c['c_customer_sk'] == $s['ss_customer_sk']); } ],
		[ 'items' => $date_dim, 'on' => function($c, $s, $d) use ($customer, $date_dim, $store_sales) { return ($s['ss_sold_date_sk'] == $d['d_date_sk']); } ]
	], [ 'select' => function($c, $s, $d) use ($customer, $date_dim, $store_sales) { return ["customer_id" => $g['key']['id'], "customer_first_name" => $g['key']['first'], "customer_last_name" => $g['key']['last'], "customer_login" => $g['key']['login'], "dyear" => $g['key']['year'], "year_total" => array_sum((function() {
	$res = [];
	foreach ((is_string($g) ? str_split($g) : $g) as $x) {
		$res[] = ((is_int((((is_array(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) && is_array($x['ss_ext_sales_price'])) ? array_merge(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])), $x['ss_ext_sales_price']) : ((is_string(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) || is_string($x['ss_ext_sales_price'])) ? (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) . $x['ss_ext_sales_price']) : (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) + $x['ss_ext_sales_price']))))) && is_int(2)) ? intdiv((((is_array(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) && is_array($x['ss_ext_sales_price'])) ? array_merge(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])), $x['ss_ext_sales_price']) : ((is_string(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) || is_string($x['ss_ext_sales_price'])) ? (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) . $x['ss_ext_sales_price']) : (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) + $x['ss_ext_sales_price'])))), 2) : ((((is_array(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) && is_array($x['ss_ext_sales_price'])) ? array_merge(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])), $x['ss_ext_sales_price']) : ((is_string(((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt']))) || is_string($x['ss_ext_sales_price'])) ? (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) . $x['ss_ext_sales_price']) : (((($x['ss_ext_list_price'] - $x['ss_ext_wholesale_cost']) - $x['ss_ext_discount_amt'])) + $x['ss_ext_sales_price'])))) / 2));
	}
	return $res;
})()), "sale_type" => "s"]; } ]);
})()), ((function() use ($catalog_sales, $customer, $date_dim) {
	$_src = $customer;
	return _query($_src, [
		[ 'items' => $catalog_sales, 'on' => function($c, $cs) use ($catalog_sales, $customer, $date_dim) { return ($c['c_customer_sk'] == $cs['cs_bill_customer_sk']); } ],
		[ 'items' => $date_dim, 'on' => function($c, $cs, $d) use ($catalog_sales, $customer, $date_dim) { return ($cs['cs_sold_date_sk'] == $d['d_date_sk']); } ]
	], [ 'select' => function($c, $cs, $d) use ($catalog_sales, $customer, $date_dim) { return ["customer_id" => $g['key']['id'], "customer_first_name" => $g['key']['first'], "customer_last_name" => $g['key']['last'], "customer_login" => $g['key']['login'], "dyear" => $g['key']['year'], "year_total" => array_sum((function() {
	$res = [];
	foreach ((is_string($g) ? str_split($g) : $g) as $x) {
		$res[] = ((is_int((((is_array(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) && is_array($x['cs_ext_sales_price'])) ? array_merge(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])), $x['cs_ext_sales_price']) : ((is_string(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) || is_string($x['cs_ext_sales_price'])) ? (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) . $x['cs_ext_sales_price']) : (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) + $x['cs_ext_sales_price']))))) && is_int(2)) ? intdiv((((is_array(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) && is_array($x['cs_ext_sales_price'])) ? array_merge(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])), $x['cs_ext_sales_price']) : ((is_string(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) || is_string($x['cs_ext_sales_price'])) ? (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) . $x['cs_ext_sales_price']) : (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) + $x['cs_ext_sales_price'])))), 2) : ((((is_array(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) && is_array($x['cs_ext_sales_price'])) ? array_merge(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])), $x['cs_ext_sales_price']) : ((is_string(((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt']))) || is_string($x['cs_ext_sales_price'])) ? (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) . $x['cs_ext_sales_price']) : (((($x['cs_ext_list_price'] - $x['cs_ext_wholesale_cost']) - $x['cs_ext_discount_amt'])) + $x['cs_ext_sales_price'])))) / 2));
	}
	return $res;
})()), "sale_type" => "c"]; } ]);
})())), ((function() use ($customer, $date_dim, $web_sales) {
	$_src = $customer;
	return _query($_src, [
		[ 'items' => $web_sales, 'on' => function($c, $ws) use ($customer, $date_dim, $web_sales) { return ($c['c_customer_sk'] == $ws['ws_bill_customer_sk']); } ],
		[ 'items' => $date_dim, 'on' => function($c, $ws, $d) use ($customer, $date_dim, $web_sales) { return ($ws['ws_sold_date_sk'] == $d['d_date_sk']); } ]
	], [ 'select' => function($c, $ws, $d) use ($customer, $date_dim, $web_sales) { return ["customer_id" => $g['key']['id'], "customer_first_name" => $g['key']['first'], "customer_last_name" => $g['key']['last'], "customer_login" => $g['key']['login'], "dyear" => $g['key']['year'], "year_total" => array_sum((function() {
	$res = [];
	foreach ((is_string($g) ? str_split($g) : $g) as $x) {
		$res[] = ((is_int((((is_array(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) && is_array($x['ws_ext_sales_price'])) ? array_merge(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])), $x['ws_ext_sales_price']) : ((is_string(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) || is_string($x['ws_ext_sales_price'])) ? (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) . $x['ws_ext_sales_price']) : (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) + $x['ws_ext_sales_price']))))) && is_int(2)) ? intdiv((((is_array(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) && is_array($x['ws_ext_sales_price'])) ? array_merge(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])), $x['ws_ext_sales_price']) : ((is_string(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) || is_string($x['ws_ext_sales_price'])) ? (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) . $x['ws_ext_sales_price']) : (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) + $x['ws_ext_sales_price'])))), 2) : ((((is_array(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) && is_array($x['ws_ext_sales_price'])) ? array_merge(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])), $x['ws_ext_sales_price']) : ((is_string(((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt']))) || is_string($x['ws_ext_sales_price'])) ? (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) . $x['ws_ext_sales_price']) : (((($x['ws_ext_list_price'] - $x['ws_ext_wholesale_cost']) - $x['ws_ext_discount_amt'])) + $x['ws_ext_sales_price'])))) / 2));
	}
	return $res;
})()), "sale_type" => "w"]; } ]);
})()));
$result = (function() use ($year_total) {
	$_src = $year_total;
	return _query($_src, [
		[ 'items' => $year_total, 'on' => function($s1, $s2) use ($year_total) { return ($s2['customer_id'] == $s1['customer_id']); } ],
		[ 'items' => $year_total, 'on' => function($s1, $s2, $c1) use ($year_total) { return ($c1['customer_id'] == $s1['customer_id']); } ],
		[ 'items' => $year_total, 'on' => function($s1, $s2, $c1, $c2) use ($year_total) { return ($c2['customer_id'] == $s1['customer_id']); } ],
		[ 'items' => $year_total, 'on' => function($s1, $s2, $c1, $c2, $w1) use ($year_total) { return ($w1['customer_id'] == $s1['customer_id']); } ],
		[ 'items' => $year_total, 'on' => function($s1, $s2, $c1, $c2, $w1, $w2) use ($year_total) { return ($w2['customer_id'] == $s1['customer_id']); } ]
	], [ 'select' => function($s1, $s2, $c1, $c2, $w1, $w2) use ($year_total) { return ["customer_id" => $s2['customer_id'], "customer_first_name" => $s2['customer_first_name'], "customer_last_name" => $s2['customer_last_name'], "customer_login" => $s2['customer_login']]; }, 'where' => function($s1, $s2, $c1, $c2, $w1, $w2) use ($year_total) { return (((((((((((((((((($s1['sale_type'] == "s") && ($c1['sale_type'] == "c")) && ($w1['sale_type'] == "w")) && ($s2['sale_type'] == "s")) && ($c2['sale_type'] == "c")) && ($w2['sale_type'] == "w")) && ($s1['dyear'] == 2001)) && ($s2['dyear'] == 2002)) && ($c1['dyear'] == 2001)) && ($c2['dyear'] == 2002)) && ($w1['dyear'] == 2001)) && ($w2['dyear'] == 2002)) && ($s1['year_total'] > 0)) && ($c1['year_total'] > 0)) && ($w1['year_total'] > 0)) && (((($c1['year_total'] > 0) ? ((is_int($c2['year_total']) && is_int($c1['year_total'])) ? intdiv($c2['year_total'], $c1['year_total']) : ($c2['year_total'] / $c1['year_total'])) : null)) > ((($s1['year_total'] > 0) ? ((is_int($s2['year_total']) && is_int($s1['year_total'])) ? intdiv($s2['year_total'], $s1['year_total']) : ($s2['year_total'] / $s1['year_total'])) : null)))) && (((($c1['year_total'] > 0) ? ((is_int($c2['year_total']) && is_int($c1['year_total'])) ? intdiv($c2['year_total'], $c1['year_total']) : ($c2['year_total'] / $c1['year_total'])) : null)) > ((($w1['year_total'] > 0) ? ((is_int($w2['year_total']) && is_int($w1['year_total'])) ? intdiv($w2['year_total'], $w1['year_total']) : ($w2['year_total'] / $w1['year_total'])) : null))))); }, 'sortKey' => function($s1, $s2, $c1, $c2, $w1, $w2) use ($year_total) { return ([$s2['customer_id'], $s2['customer_first_name'], $s2['customer_last_name'], $s2['customer_login']]); } ]);
})();
echo json_encode($result), PHP_EOL;
mochi_test_TPCDS_Q4_empty();

function _query($src, $joins, $opts) {
    $items = array_map(fn($v) => [$v], $src);
    foreach ($joins as $j) {
        $joined = [];
        if (!empty($j['right']) && !empty($j['left'])) {
            $matched = array_fill(0, count($j['items']), false);
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $ri => $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $matched[$ri] = true;
                    $joined[] = array_merge($left, [$right]);
                }
                if (!$m) { $joined[] = array_merge($left, [null]); }
            }
            foreach ($j['items'] as $ri => $right) {
                if (!$matched[$ri]) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } elseif (!empty($j['right'])) {
            foreach ($j['items'] as $right) {
                $m = false;
                foreach ($items as $left) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!$m) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } else {
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!empty($j['left']) && !$m) { $joined[] = array_merge($left, [null]); }
            }
        }
        $items = $joined;
    }
    if (isset($opts['where'])) {
        $filtered = [];
        foreach ($items as $r) { if ($opts['where'](...$r)) $filtered[] = $r; }
        $items = $filtered;
    }
    if (isset($opts['sortKey'])) {
        $pairs = [];
        foreach ($items as $it) { $pairs[] = ['item' => $it, 'key' => $opts['sortKey'](...$it)]; }
        usort($pairs, function($a, $b) {
            $ak = $a['key']; $bk = $b['key'];
            if (is_int($ak) && is_int($bk)) return $ak <=> $bk;
            if (is_string($ak) && is_string($bk)) return $ak <=> $bk;
            return strcmp(strval($ak), strval($bk));
        });
        $items = array_map(fn($p) => $p['item'], $pairs);
    }
    if (array_key_exists('skip', $opts)) {
        $n = $opts['skip'];
        $items = $n < count($items) ? array_slice($items, $n) : [];
    }
    if (array_key_exists('take', $opts)) {
        $n = $opts['take'];
        if ($n < count($items)) $items = array_slice($items, 0, $n);
    }
    $res = [];
    foreach ($items as $r) { $res[] = $opts['select'](...$r); }
    return $res;
}
