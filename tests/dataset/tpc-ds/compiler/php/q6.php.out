<?php
$customer_address = [
    [
        "ca_address_sk" => 1,
        "ca_state" => "CA",
        "ca_zip" => "12345"
    ]
];
$customer = [
    [
        "c_customer_sk" => 1,
        "c_current_addr_sk" => 1
    ]
];
$store_sales = [
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ],
    [
        "ss_customer_sk" => 1,
        "ss_sold_date_sk" => 1,
        "ss_item_sk" => 1
    ]
];
$date_dim = [
    [
        "d_date_sk" => 1,
        "d_year" => 1999,
        "d_moy" => 5,
        "d_month_seq" => 120
    ]
];
$item = [
    [
        "i_item_sk" => 1,
        "i_category" => "A",
        "i_current_price" => 100
    ],
    [
        "i_item_sk" => 2,
        "i_category" => "A",
        "i_current_price" => 50
    ]
];
$target_month_seq = max((function() use ($date_dim) {
    $result = [];
    foreach ($date_dim as $d) {
        if ($d['d_year'] == 1999 && $d['d_moy'] == 5) {
            $result[] = $d['d_month_seq'];
        }
    }
    return $result;
})());
$result = (function() use ($customer, $customer_address, $date_dim, $item, $store_sales, $target_month_seq) {
    $groups = [];
    foreach ($customer_address as $a) {
        foreach ($customer as $c) {
            if ($a['ca_address_sk'] == $c['c_current_addr_sk']) {
                foreach ($store_sales as $s) {
                    if ($c['c_customer_sk'] == $s['ss_customer_sk']) {
                        foreach ($date_dim as $d) {
                            if ($s['ss_sold_date_sk'] == $d['d_date_sk']) {
                                foreach ($item as $i) {
                                    if ($s['ss_item_sk'] == $i['i_item_sk']) {
                                        if ($d['d_month_seq'] == $target_month_seq && $i['i_current_price'] > 1.2 * _avg((function() use ($i, $item) {
    $result = [];
    foreach ($item as $j) {
        if ($j['i_category'] == $i['i_category']) {
            $result[] = $j['i_current_price'];
        }
    }
    return $result;
})())) {
                                            $_k = json_encode($a['ca_state']);
                                            $groups[$_k][] = ["a" => $a, "c" => $c, "s" => $s, "d" => $d, "i" => $i];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    $result = [];
    foreach ($groups as $_k => $__g) {
        $_key = json_decode($_k, true);
        $g = ['key'=>$_key,'items'=> $__g];
        if (count($g['items']) >= 10) {
        $result[] = [[count($g['items']), $g['key']], [
    "state" => $g['key'],
    "cnt" => count($g['items'])
]];
        }
    }
    usort($result, function($a, $b) { return $a[0] <=> $b[0]; });
    $result = array_map(fn($r) => $r[1], $result);
    $result = array_slice($result, 0, 100);
    return $result;
})();
echo json_encode($result), PHP_EOL;
function _avg($v) {
    if (is_array($v) && array_key_exists('items', $v)) {
        $v = $v['items'];
    } elseif (is_object($v) && property_exists($v, 'items')) {
        $v = $v->items;
    }
    if (!is_array($v)) {
        throw new Exception('avg() expects list or group');
    }
    if (!$v) return 0;
    $sum = 0;
    foreach ($v as $it) {
        if (is_int($it) || is_float($it)) {
            $sum += $it;
        } else {
            throw new Exception('avg() expects numbers');
        }
    }
    return $sum / count($v);
}
?>
