Smalltalk at: #class_totals put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #filtered put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newWebSale: ws_item_sk ws_sold_date_sk: ws_sold_date_sk ws_ext_sales_price: ws_ext_sales_price | dict |
    dict := Dictionary new.
    dict at: 'ws_item_sk' put: ws_item_sk.
    dict at: 'ws_sold_date_sk' put: ws_sold_date_sk.
    dict at: 'ws_ext_sales_price' put: ws_ext_sales_price.
    ^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk i_item_id: i_item_id i_item_desc: i_item_desc i_category: i_category i_class: i_class i_current_price: i_current_price | dict |
    dict := Dictionary new.
    dict at: 'i_item_sk' put: i_item_sk.
    dict at: 'i_item_id' put: i_item_id.
    dict at: 'i_item_desc' put: i_item_desc.
    dict at: 'i_category' put: i_category.
    dict at: 'i_class' put: i_class.
    dict at: 'i_current_price' put: i_current_price.
    ^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_date: d_date | dict |
    dict := Dictionary new.
    dict at: 'd_date_sk' put: d_date_sk.
    dict at: 'd_date' put: d_date.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q12_revenue_ratio
    ((result = Array with: (Dictionary from: {'i_item_id' -> 'ITEM1'. 'i_item_desc' -> 'Item One'. 'i_category' -> 'A'. 'i_class' -> 'C1'. 'i_current_price' -> 10.000000. 'itemrevenue' -> 200.000000. 'revenueratio' -> 50.000000}) with: (Dictionary from: {'i_item_id' -> 'ITEM2'. 'i_item_desc' -> 'Item Two'. 'i_category' -> 'A'. 'i_class' -> 'C1'. 'i_current_price' -> 20.000000. 'itemrevenue' -> 200.000000. 'revenueratio' -> 50.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
web_sales := Array with: (Dictionary from: {'ws_item_sk' -> 1. 'ws_sold_date_sk' -> 1. 'ws_ext_sales_price' -> 100.000000}) with: (Dictionary from: {'ws_item_sk' -> 1. 'ws_sold_date_sk' -> 2. 'ws_ext_sales_price' -> 100.000000}) with: (Dictionary from: {'ws_item_sk' -> 2. 'ws_sold_date_sk' -> 2. 'ws_ext_sales_price' -> 200.000000}) with: (Dictionary from: {'ws_item_sk' -> 3. 'ws_sold_date_sk' -> 3. 'ws_ext_sales_price' -> 50.000000}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_item_id' -> 'ITEM1'. 'i_item_desc' -> 'Item One'. 'i_category' -> 'A'. 'i_class' -> 'C1'. 'i_current_price' -> 10.000000}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_item_id' -> 'ITEM2'. 'i_item_desc' -> 'Item Two'. 'i_category' -> 'A'. 'i_class' -> 'C1'. 'i_current_price' -> 20.000000}) with: (Dictionary from: {'i_item_sk' -> 3. 'i_item_id' -> 'ITEM3'. 'i_item_desc' -> 'Item Three'. 'i_category' -> 'B'. 'i_class' -> 'C2'. 'i_current_price' -> 30.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_date' -> '2001-01-20'}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_date' -> '2001-02-05'}) with: (Dictionary from: {'d_date_sk' -> 3. 'd_date' -> '2001-03-05'}).
filtered := ((| rows groups |
rows := OrderedCollection new.
(web_sales) do: [:ws |
    ((((((Array with: 'A' with: 'B' with: 'C' includes: i at: 'i_category') and: [d at: 'd_date']) >= '2001-01-15') and: [d at: 'd_date']) <= '2001-02-14')) ifTrue: [ rows add: ws ].
]
groups := (Main _group_by: rows keyFn: [:ws | Dictionary from: {'id' -> i at: 'i_item_id'. 'desc' -> i at: 'i_item_desc'. 'cat' -> i at: 'i_category'. 'class' -> i at: 'i_class'. 'price' -> i at: 'i_current_price'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'i_item_id' -> g at: 'key' at: 'id'. 'i_item_desc' -> g at: 'key' at: 'desc'. 'i_category' -> g at: 'key' at: 'cat'. 'i_class' -> g at: 'key' at: 'class'. 'i_current_price' -> g at: 'key' at: 'price'. 'itemrevenue' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ws_ext_sales_price'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
class_totals := ((| rows groups |
rows := OrderedCollection new.
(filtered) do: [:f |
    rows add: f.
]
groups := (Main _group_by: rows keyFn: [:f | f at: 'i_class']).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'class' -> g at: 'key'. 'total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'itemrevenue'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
result := ((| res |
res := OrderedCollection new.
((filtered) select: [:f | (f at: 'i_class' = t at: 'class')]) do: [:f |
    (class_totals) do: [:t |
        res add: { Array with: (f at: 'i_category') with: (f at: 'i_class') with: (f at: 'i_item_id') with: (f at: 'i_item_desc') . Dictionary from: {'i_item_id' -> f at: 'i_item_id'. 'i_item_desc' -> f at: 'i_item_desc'. 'i_category' -> f at: 'i_category'. 'i_class' -> f at: 'i_class'. 'i_current_price' -> f at: 'i_current_price'. 'itemrevenue' -> f at: 'itemrevenue'. 'revenueratio' -> (((f at: 'itemrevenue' * 100.000000)) / t at: 'total')} }.
    ]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q12_revenue_ratio.
