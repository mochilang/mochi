Smalltalk at: #all_rows put: nil.
Smalltalk at: #catalog_part put: nil.
Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_part put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #web_part put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q76_simplified
	((result = Array with: (Dictionary from: {'channel' -> 'store'. 'col_name' -> nil. 'd_year' -> 1998. 'd_qoy' -> 1. 'i_category' -> 'CatA'. 'sales_cnt' -> 1. 'sales_amt' -> 10.000000}) with: (Dictionary from: {'channel' -> 'web'. 'col_name' -> nil. 'd_year' -> 1998. 'd_qoy' -> 1. 'i_category' -> 'CatB'. 'sales_cnt' -> 1. 'sales_amt' -> 15.000000}) with: (Dictionary from: {'channel' -> 'catalog'. 'col_name' -> nil. 'd_year' -> 1998. 'd_qoy' -> 1. 'i_category' -> 'CatC'. 'sales_cnt' -> 1. 'sales_amt' -> 20.000000}))) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__count: v
	(v respondsTo: #size) ifTrue: [ ^ v size ]
	^ self error: 'count() expects collection'
!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
!!
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 1998. 'd_qoy' -> 1}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_category' -> 'CatA'}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_category' -> 'CatB'}) with: (Dictionary from: {'i_item_sk' -> 3. 'i_category' -> 'CatC'}).
store_sales := Array with: (Dictionary from: {'ss_customer_sk' -> nil. 'ss_item_sk' -> 1. 'ss_ext_sales_price' -> 10.000000. 'ss_sold_date_sk' -> 1}).
web_sales := Array with: (Dictionary from: {'ws_bill_customer_sk' -> nil. 'ws_item_sk' -> 2. 'ws_ext_sales_price' -> 15.000000. 'ws_sold_date_sk' -> 1}).
catalog_sales := Array with: (Dictionary from: {'cs_bill_customer_sk' -> nil. 'cs_item_sk' -> 3. 'cs_ext_sales_price' -> 20.000000. 'cs_sold_date_sk' -> 1}).
store_part := ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | (((ss at: 'ss_customer_sk' = nil) and: [(i at: 'i_item_sk' = ss at: 'ss_item_sk')]) and: [(d at: 'd_date_sk' = ss at: 'ss_sold_date_sk')])]) do: [:ss |
	(item) do: [:i |
		(date_dim) do: [:d |
			res add: Dictionary from: {'channel' -> 'store'. 'col_name' -> ss at: 'ss_customer_sk'. 'd_year' -> d at: 'd_year'. 'd_qoy' -> d at: 'd_qoy'. 'i_category' -> i at: 'i_category'. 'ext_sales_price' -> ss at: 'ss_ext_sales_price'}.
		]
	]
]
res := res asArray.
res)).
web_part := ((| res |
res := OrderedCollection new.
((web_sales) select: [:ws | (((ws at: 'ws_bill_customer_sk' = nil) and: [(i at: 'i_item_sk' = ws at: 'ws_item_sk')]) and: [(d at: 'd_date_sk' = ws at: 'ws_sold_date_sk')])]) do: [:ws |
	(item) do: [:i |
		(date_dim) do: [:d |
			res add: Dictionary from: {'channel' -> 'web'. 'col_name' -> ws at: 'ws_bill_customer_sk'. 'd_year' -> d at: 'd_year'. 'd_qoy' -> d at: 'd_qoy'. 'i_category' -> i at: 'i_category'. 'ext_sales_price' -> ws at: 'ws_ext_sales_price'}.
		]
	]
]
res := res asArray.
res)).
catalog_part := ((| res |
res := OrderedCollection new.
((catalog_sales) select: [:cs | (((cs at: 'cs_bill_customer_sk' = nil) and: [(i at: 'i_item_sk' = cs at: 'cs_item_sk')]) and: [(d at: 'd_date_sk' = cs at: 'cs_sold_date_sk')])]) do: [:cs |
	(item) do: [:i |
		(date_dim) do: [:d |
			res add: Dictionary from: {'channel' -> 'catalog'. 'col_name' -> cs at: 'cs_bill_customer_sk'. 'd_year' -> d at: 'd_year'. 'd_qoy' -> d at: 'd_qoy'. 'i_category' -> i at: 'i_category'. 'ext_sales_price' -> cs at: 'cs_ext_sales_price'}.
		]
	]
]
res := res asArray.
res)).
all_rows := concat value: store_part value: web_part value: catalog_part.
result := ((| res |
res := OrderedCollection new.
(all_rows) do: [:r |
	res add: { g at: 'key' at: 'channel' . Dictionary from: {'channel' -> g at: 'key' at: 'channel'. 'col_name' -> g at: 'key' at: 'col_name'. 'd_year' -> g at: 'key' at: 'd_year'. 'd_qoy' -> g at: 'key' at: 'd_qoy'. 'i_category' -> g at: 'key' at: 'i_category'. 'sales_cnt' -> (Main __count: g). 'sales_amt' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'r' at: 'ext_sales_price'.
]
res := res asArray.
res)))} }.
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q76_simplified.
