Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #customer_demographics put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #joined put: nil.
Smalltalk at: #result put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newCatalogSale: cs_quantity cs_list_price: cs_list_price cs_coupon_amt: cs_coupon_amt cs_sales_price: cs_sales_price cs_net_profit: cs_net_profit cs_bill_cdemo_sk: cs_bill_cdemo_sk cs_bill_customer_sk: cs_bill_customer_sk cs_sold_date_sk: cs_sold_date_sk cs_item_sk: cs_item_sk | dict |
    dict := Dictionary new.
    dict at: 'cs_quantity' put: cs_quantity.
    dict at: 'cs_list_price' put: cs_list_price.
    dict at: 'cs_coupon_amt' put: cs_coupon_amt.
    dict at: 'cs_sales_price' put: cs_sales_price.
    dict at: 'cs_net_profit' put: cs_net_profit.
    dict at: 'cs_bill_cdemo_sk' put: cs_bill_cdemo_sk.
    dict at: 'cs_bill_customer_sk' put: cs_bill_customer_sk.
    dict at: 'cs_sold_date_sk' put: cs_sold_date_sk.
    dict at: 'cs_item_sk' put: cs_item_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomerDemographics: cd_demo_sk cd_gender: cd_gender cd_education_status: cd_education_status cd_dep_count: cd_dep_count | dict |
    dict := Dictionary new.
    dict at: 'cd_demo_sk' put: cd_demo_sk.
    dict at: 'cd_gender' put: cd_gender.
    dict at: 'cd_education_status' put: cd_education_status.
    dict at: 'cd_dep_count' put: cd_dep_count.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomer: c_customer_sk c_current_cdemo_sk: c_current_cdemo_sk c_current_addr_sk: c_current_addr_sk c_birth_year: c_birth_year c_birth_month: c_birth_month | dict |
    dict := Dictionary new.
    dict at: 'c_customer_sk' put: c_customer_sk.
    dict at: 'c_current_cdemo_sk' put: c_current_cdemo_sk.
    dict at: 'c_current_addr_sk' put: c_current_addr_sk.
    dict at: 'c_birth_year' put: c_birth_year.
    dict at: 'c_birth_month' put: c_birth_month.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomerAddress: ca_address_sk ca_country: ca_country ca_state: ca_state ca_county: ca_county | dict |
    dict := Dictionary new.
    dict at: 'ca_address_sk' put: ca_address_sk.
    dict at: 'ca_country' put: ca_country.
    dict at: 'ca_state' put: ca_state.
    dict at: 'ca_county' put: ca_county.
    ^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_year: d_year | dict |
    dict := Dictionary new.
    dict at: 'd_date_sk' put: d_date_sk.
    dict at: 'd_year' put: d_year.
    ^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk i_item_id: i_item_id | dict |
    dict := Dictionary new.
    dict at: 'i_item_sk' put: i_item_sk.
    dict at: 'i_item_id' put: i_item_id.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q18_averages
    ((result = Array with: (Dictionary from: {'i_item_id' -> 'I1'. 'ca_country' -> 'US'. 'ca_state' -> 'CA'. 'ca_county' -> 'County1'. 'agg1' -> 1.000000. 'agg2' -> 10.000000. 'agg3' -> 1.000000. 'agg4' -> 9.000000. 'agg5' -> 2.000000. 'agg6' -> 1980.000000. 'agg7' -> 2.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__avg: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'avg() expects collection' ]
    v size = 0 ifTrue: [ ^ 0 ]
    | sum |
    sum := 0.
    v do: [:it | sum := sum + it].
    ^ sum / v size
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
catalog_sales := Array with: (Dictionary from: {'cs_quantity' -> 1. 'cs_list_price' -> 10.000000. 'cs_coupon_amt' -> 1.000000. 'cs_sales_price' -> 9.000000. 'cs_net_profit' -> 2.000000. 'cs_bill_cdemo_sk' -> 1. 'cs_bill_customer_sk' -> 1. 'cs_sold_date_sk' -> 1. 'cs_item_sk' -> 1}).
customer_demographics := Array with: (Dictionary from: {'cd_demo_sk' -> 1. 'cd_gender' -> 'M'. 'cd_education_status' -> 'College'. 'cd_dep_count' -> 2}) with: (Dictionary from: {'cd_demo_sk' -> 2. 'cd_gender' -> 'F'. 'cd_education_status' -> 'College'. 'cd_dep_count' -> 2}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_current_cdemo_sk' -> 2. 'c_current_addr_sk' -> 1. 'c_birth_year' -> 1980. 'c_birth_month' -> 1}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_country' -> 'US'. 'ca_state' -> 'CA'. 'ca_county' -> 'County1'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 1999}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_item_id' -> 'I1'}).
joined := ((| res |
res := OrderedCollection new.
((catalog_sales) select: [:cs | ((((((((((cs at: 'cs_bill_cdemo_sk' = cd1 at: 'cd_demo_sk') and: [cd1 at: 'cd_gender']) = 'M') and: [cd1 at: 'cd_education_status']) = 'College') and: [(cs at: 'cs_bill_customer_sk' = c at: 'c_customer_sk')]) and: [(c at: 'c_current_cdemo_sk' = cd2 at: 'cd_demo_sk')]) and: [(c at: 'c_current_addr_sk' = ca at: 'ca_address_sk')]) and: [(((cs at: 'cs_sold_date_sk' = d at: 'd_date_sk') and: [d at: 'd_year']) = 1999)]) and: [(cs at: 'cs_item_sk' = i at: 'i_item_sk')])]) do: [:cs |
    (customer_demographics) do: [:cd1 |
        (customer) do: [:c |
            (customer_demographics) do: [:cd2 |
                (customer_address) do: [:ca |
                    (date_dim) do: [:d |
                        (item) do: [:i |
                            res add: Dictionary from: {'i_item_id' -> i at: 'i_item_id'. 'ca_country' -> ca at: 'ca_country'. 'ca_state' -> ca at: 'ca_state'. 'ca_county' -> ca at: 'ca_county'. 'q' -> cs at: 'cs_quantity'. 'lp' -> cs at: 'cs_list_price'. 'cp' -> cs at: 'cs_coupon_amt'. 'sp' -> cs at: 'cs_sales_price'. 'np' -> cs at: 'cs_net_profit'. 'by' -> c at: 'c_birth_year'. 'dep' -> cd1 at: 'cd_dep_count'}.
                        ]
                    ]
                ]
            ]
        ]
    ]
]
res := res asArray.
res)).
result := ((| rows groups |
rows := OrderedCollection new.
(joined) do: [:j |
    rows add: j.
]
groups := (Main _group_by: rows keyFn: [:j | Dictionary from: {'i_item_id' -> j at: 'i_item_id'. 'ca_country' -> j at: 'ca_country'. 'ca_state' -> j at: 'ca_state'. 'ca_county' -> j at: 'ca_county'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'i_item_id' -> g at: 'key' at: 'i_item_id'. 'ca_country' -> g at: 'key' at: 'ca_country'. 'ca_state' -> g at: 'key' at: 'ca_state'. 'ca_county' -> g at: 'key' at: 'ca_county'. 'agg1' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'q'.
]
res := res asArray.
res))). 'agg2' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'lp'.
]
res := res asArray.
res))). 'agg3' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'cp'.
]
res := res asArray.
res))). 'agg4' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'sp'.
]
res := res asArray.
res))). 'agg5' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'np'.
]
res := res asArray.
res))). 'agg6' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'by'.
]
res := res asArray.
res))). 'agg7' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'dep'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q18_averages.
