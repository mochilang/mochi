Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #total_profit put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q80_sample
	((total_profit = 80.000000)) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
!!
store_sales := Array with: (Dictionary from: {'price' -> 20.000000. 'ret' -> 5.000000}) with: (Dictionary from: {'price' -> 10.000000. 'ret' -> 2.000000}) with: (Dictionary from: {'price' -> 5.000000. 'ret' -> 0.000000}).
catalog_sales := Array with: (Dictionary from: {'price' -> 15.000000. 'ret' -> 3.000000}) with: (Dictionary from: {'price' -> 8.000000. 'ret' -> 1.000000}).
web_sales := Array with: (Dictionary from: {'price' -> 25.000000. 'ret' -> 5.000000}) with: (Dictionary from: {'price' -> 15.000000. 'ret' -> 8.000000}) with: (Dictionary from: {'price' -> 8.000000. 'ret' -> 2.000000}).
total_profit := (((Main __sum: ((| res |
res := OrderedCollection new.
(store_sales) do: [:s |
	res add: (s at: 'price' - s at: 'ret').
]
res := res asArray.
res))) + (Main __sum: ((| res |
res := OrderedCollection new.
(catalog_sales) do: [:c |
	res add: (c at: 'price' - c at: 'ret').
]
res := res asArray.
res)))) + (Main __sum: ((| res |
res := OrderedCollection new.
(web_sales) do: [:w |
	res add: (w at: 'price' - w at: 'ret').
]
res := res asArray.
res)))).
(total_profit toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q80_sample.
