Smalltalk at: #reason put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_returns put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #t put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newStoreSale: ss_item_sk ss_ticket_number: ss_ticket_number ss_customer_sk: ss_customer_sk ss_quantity: ss_quantity ss_sales_price: ss_sales_price | dict |
	dict := Dictionary new.
	dict at: 'ss_item_sk' put: ss_item_sk.
	dict at: 'ss_ticket_number' put: ss_ticket_number.
	dict at: 'ss_customer_sk' put: ss_customer_sk.
	dict at: 'ss_quantity' put: ss_quantity.
	dict at: 'ss_sales_price' put: ss_sales_price.
	^ dict
!
!Main class methodsFor: 'types'!
newStoreReturn: sr_item_sk sr_ticket_number: sr_ticket_number sr_reason_sk: sr_reason_sk sr_return_quantity: sr_return_quantity | dict |
	dict := Dictionary new.
	dict at: 'sr_item_sk' put: sr_item_sk.
	dict at: 'sr_ticket_number' put: sr_ticket_number.
	dict at: 'sr_reason_sk' put: sr_reason_sk.
	dict at: 'sr_return_quantity' put: sr_return_quantity.
	^ dict
!
!Main class methodsFor: 'types'!
newReason: r_reason_sk r_reason_desc: r_reason_desc | dict |
	dict := Dictionary new.
	dict at: 'r_reason_sk' put: r_reason_sk.
	dict at: 'r_reason_desc' put: r_reason_desc.
	^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q93_active_sales
	((result = Array with: (Dictionary from: {'ss_customer_sk' -> 1. 'sumsales' -> 40.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_ticket_number' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 5. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_ticket_number' -> 2. 'ss_customer_sk' -> 2. 'ss_quantity' -> 3. 'ss_sales_price' -> 20.000000}).
store_returns := Array with: (Dictionary from: {'sr_item_sk' -> 1. 'sr_ticket_number' -> 1. 'sr_reason_sk' -> 1. 'sr_return_quantity' -> 1}).
reason := Array with: (Dictionary from: {'r_reason_sk' -> 1. 'r_reason_desc' -> 'ReasonA'}).
t := ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | (((r at: 'r_reason_desc' = 'ReasonA') and: [(((ss at: 'ss_item_sk' = sr at: 'sr_item_sk') and: [ss at: 'ss_ticket_number']) = sr at: 'sr_ticket_number')]) and: [(sr at: 'sr_reason_sk' = r at: 'r_reason_sk')])]) do: [:ss |
	(store_returns) do: [:sr |
		(reason) do: [:r |
			res add: Dictionary from: {'ss_customer_sk' -> ss at: 'ss_customer_sk'. 'act_sales' -> (((sr ~= nil)) ifTrue: [(((ss at: 'ss_quantity' - sr at: 'sr_return_quantity')) * ss at: 'ss_sales_price')] ifFalse: [(ss at: 'ss_quantity' * ss at: 'ss_sales_price')])}.
		]
	]
]
res := res asArray.
res)).
result := ((| rows groups |
rows := OrderedCollection new.
(t) do: [:x |
	rows add: x.
]
groups := (Main _group_by: rows keyFn: [:x | x at: 'ss_customer_sk']).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'ss_customer_sk' -> g at: 'key'. 'sumsales' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:y |
	res add: y at: 'act_sales'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q93_active_sales.
