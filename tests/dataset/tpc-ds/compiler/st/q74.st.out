Smalltalk at: #customer put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #s_firstyear put: nil.
Smalltalk at: #s_secyear put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #w_firstyear put: nil.
Smalltalk at: #w_secyear put: nil.
Smalltalk at: #web_sales put: nil.
Smalltalk at: #year_total put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q74_simplified
	((result = Array with: (Dictionary from: {'customer_id' -> 1. 'customer_first_name' -> 'Alice'. 'customer_last_name' -> 'Smith'}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_customer_id' -> 1. 'c_first_name' -> 'Alice'. 'c_last_name' -> 'Smith'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 1998}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_year' -> 1999}).
store_sales := Array with: (Dictionary from: {'ss_customer_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_net_paid' -> 100.000000}) with: (Dictionary from: {'ss_customer_sk' -> 1. 'ss_sold_date_sk' -> 2. 'ss_net_paid' -> 110.000000}).
web_sales := Array with: (Dictionary from: {'ws_bill_customer_sk' -> 1. 'ws_sold_date_sk' -> 1. 'ws_net_paid' -> 40.000000}) with: (Dictionary from: {'ws_bill_customer_sk' -> 1. 'ws_sold_date_sk' -> 2. 'ws_net_paid' -> 80.000000}).
year_total := concat value: ((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
	((((d at: 'd_year' = 1998) or: [d at: 'd_year']) = 1999)) ifTrue: [ rows add: c ].
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'id' -> c at: 'c_customer_id'. 'first' -> c at: 'c_first_name'. 'last' -> c at: 'c_last_name'. 'year' -> d at: 'd_year'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'customer_id' -> g at: 'key' at: 'id'. 'customer_first_name' -> g at: 'key' at: 'first'. 'customer_last_name' -> g at: 'key' at: 'last'. 'year' -> g at: 'key' at: 'year'. 'year_total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'ss' at: 'ss_net_paid'.
]
res := res asArray.
res))). 'sale_type' -> 's'}.
]
rows := rows asArray.
rows)) value: ((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
	((((d at: 'd_year' = 1998) or: [d at: 'd_year']) = 1999)) ifTrue: [ rows add: c ].
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'id' -> c at: 'c_customer_id'. 'first' -> c at: 'c_first_name'. 'last' -> c at: 'c_last_name'. 'year' -> d at: 'd_year'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'customer_id' -> g at: 'key' at: 'id'. 'customer_first_name' -> g at: 'key' at: 'first'. 'customer_last_name' -> g at: 'key' at: 'last'. 'year' -> g at: 'key' at: 'year'. 'year_total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'ws' at: 'ws_net_paid'.
]
res := res asArray.
res))). 'sale_type' -> 'w'}.
]
rows := rows asArray.
rows)).
s_firstyear := first value: ((| res |
res := OrderedCollection new.
((year_total) select: [:y | (((y at: 'sale_type' = 's') and: [y at: 'year']) = 1998)]) do: [:y |
	res add: y.
]
res := res asArray.
res)).
s_secyear := first value: ((| res |
res := OrderedCollection new.
((year_total) select: [:y | (((y at: 'sale_type' = 's') and: [y at: 'year']) = 1999)]) do: [:y |
	res add: y.
]
res := res asArray.
res)).
w_firstyear := first value: ((| res |
res := OrderedCollection new.
((year_total) select: [:y | (((y at: 'sale_type' = 'w') and: [y at: 'year']) = 1998)]) do: [:y |
	res add: y.
]
res := res asArray.
res)).
w_secyear := first value: ((| res |
res := OrderedCollection new.
((year_total) select: [:y | (((y at: 'sale_type' = 'w') and: [y at: 'year']) = 1999)]) do: [:y |
	res add: y.
]
res := res asArray.
res)).
result := (((((((s_firstyear at: 'year_total' > 0) and: [w_firstyear at: 'year_total']) > 0) and: [((w_secyear at: 'year_total' / w_firstyear at: 'year_total'))]) > ((s_secyear at: 'year_total' / s_firstyear at: 'year_total')))) ifTrue: [Array with: (Dictionary from: {'customer_id' -> s_secyear at: 'customer_id'. 'customer_first_name' -> s_secyear at: 'customer_first_name'. 'customer_last_name' -> s_secyear at: 'customer_last_name'})] ifFalse: [Array new]).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q74_simplified.
