Smalltalk at: #avg_sales put: nil.
Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #cross_items put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_filtered put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newStoreSale: ss_item_sk ss_list_price: ss_list_price ss_quantity: ss_quantity ss_sold_date_sk: ss_sold_date_sk | dict |
    dict := Dictionary new.
    dict at: 'ss_item_sk' put: ss_item_sk.
    dict at: 'ss_list_price' put: ss_list_price.
    dict at: 'ss_quantity' put: ss_quantity.
    dict at: 'ss_sold_date_sk' put: ss_sold_date_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newCatalogSale: cs_item_sk cs_list_price: cs_list_price cs_quantity: cs_quantity cs_sold_date_sk: cs_sold_date_sk | dict |
    dict := Dictionary new.
    dict at: 'cs_item_sk' put: cs_item_sk.
    dict at: 'cs_list_price' put: cs_list_price.
    dict at: 'cs_quantity' put: cs_quantity.
    dict at: 'cs_sold_date_sk' put: cs_sold_date_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newWebSale: ws_item_sk ws_list_price: ws_list_price ws_quantity: ws_quantity ws_sold_date_sk: ws_sold_date_sk | dict |
    dict := Dictionary new.
    dict at: 'ws_item_sk' put: ws_item_sk.
    dict at: 'ws_list_price' put: ws_list_price.
    dict at: 'ws_quantity' put: ws_quantity.
    dict at: 'ws_sold_date_sk' put: ws_sold_date_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk i_brand_id: i_brand_id i_class_id: i_class_id i_category_id: i_category_id | dict |
    dict := Dictionary new.
    dict at: 'i_item_sk' put: i_item_sk.
    dict at: 'i_brand_id' put: i_brand_id.
    dict at: 'i_class_id' put: i_class_id.
    dict at: 'i_category_id' put: i_category_id.
    ^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_year: d_year d_moy: d_moy | dict |
    dict := Dictionary new.
    dict at: 'd_date_sk' put: d_date_sk.
    dict at: 'd_year' put: d_year.
    dict at: 'd_moy' put: d_moy.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q14_cross_channel
    ((result = Array with: (Dictionary from: {'channel' -> 'store'. 'i_brand_id' -> 1. 'i_class_id' -> 1. 'i_category_id' -> 1. 'sales' -> 60.000000. 'number_sales' -> 1}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__count: v
    (v respondsTo: #size) ifTrue: [ ^ v size ]
    ^ self error: 'count() expects collection'
!
__avg: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'avg() expects collection' ]
    v size = 0 ifTrue: [ ^ 0 ]
    | sum |
    sum := 0.
    v do: [:it | sum := sum + it].
    ^ sum / v size
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_list_price' -> 10.000000. 'ss_quantity' -> 2. 'ss_sold_date_sk' -> 1}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_list_price' -> 20.000000. 'ss_quantity' -> 3. 'ss_sold_date_sk' -> 2}).
catalog_sales := Array with: (Dictionary from: {'cs_item_sk' -> 1. 'cs_list_price' -> 10.000000. 'cs_quantity' -> 2. 'cs_sold_date_sk' -> 1}).
web_sales := Array with: (Dictionary from: {'ws_item_sk' -> 1. 'ws_list_price' -> 30.000000. 'ws_quantity' -> 1. 'ws_sold_date_sk' -> 1}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_brand_id' -> 1. 'i_class_id' -> 1. 'i_category_id' -> 1}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000. 'd_moy' -> 12}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_year' -> 2002. 'd_moy' -> 11}).
cross_items := Array with: (Dictionary from: {'ss_item_sk' -> 1}).
avg_sales := (Main __avg: Array with: 20.000000 with: 20.000000 with: 30.000000).
store_filtered := ((| rows groups |
rows := OrderedCollection new.
(store_sales) do: [:ss |
    (((((| res |
res := OrderedCollection new.
(cross_items) do: [:ci |
    res add: ci at: 'ss_item_sk'.
]
res := res asArray.
res))) includes: ss at: 'ss_item_sk')) ifTrue: [ rows add: ss ].
]
groups := (Main _group_by: rows keyFn: [:ss | Dictionary from: {'brand_id' -> 1. 'class_id' -> 1. 'category_id' -> 1}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'channel' -> 'store'. 'sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: (x at: 'ss_quantity' * x at: 'ss_list_price').
]
res := res asArray.
res))). 'number_sales' -> (Main __count: ((| res |
res := OrderedCollection new.
(g) do: [:_ |
    res add: _.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
result := ((| res |
res := OrderedCollection new.
((store_filtered) select: [:r | (r at: 'sales' > avg_sales)]) do: [:r |
    res add: Dictionary from: {'channel' -> r at: 'channel'. 'i_brand_id' -> 1. 'i_class_id' -> 1. 'i_category_id' -> 1. 'sales' -> r at: 'sales'. 'number_sales' -> r at: 'number_sales'}.
]
res := res asArray.
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q14_cross_channel.
