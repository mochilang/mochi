Smalltalk at: #all_sales put: nil.
Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #curr_yr put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #prev_yr put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #sales_detail put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q75_simplified
	((result = Array with: (Dictionary from: {'prev_year' -> 2000. 'year' -> 2001. 'i_brand_id' -> 1. 'i_class_id' -> 2. 'i_category_id' -> 3. 'i_manufact_id' -> 4. 'prev_yr_cnt' -> 100. 'curr_yr_cnt' -> 80. 'sales_cnt_diff' -> (20 negated). 'sales_amt_diff' -> (200.000000 negated)}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_year' -> 2001}).
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_quantity' -> 50. 'ss_sales_price' -> 500.000000. 'ss_sold_date_sk' -> 1}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_quantity' -> 40. 'ss_sales_price' -> 400.000000. 'ss_sold_date_sk' -> 2}).
web_sales := Array with: (Dictionary from: {'ws_item_sk' -> 1. 'ws_quantity' -> 30. 'ws_sales_price' -> 300.000000. 'ws_sold_date_sk' -> 1}) with: (Dictionary from: {'ws_item_sk' -> 1. 'ws_quantity' -> 25. 'ws_sales_price' -> 250.000000. 'ws_sold_date_sk' -> 2}).
catalog_sales := Array with: (Dictionary from: {'cs_item_sk' -> 1. 'cs_quantity' -> 20. 'cs_sales_price' -> 200.000000. 'cs_sold_date_sk' -> 1}) with: (Dictionary from: {'cs_item_sk' -> 1. 'cs_quantity' -> 15. 'cs_sales_price' -> 150.000000. 'cs_sold_date_sk' -> 2}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_brand_id' -> 1. 'i_class_id' -> 2. 'i_category_id' -> 3. 'i_manufact_id' -> 4. 'i_category' -> 'Electronics'}).
sales_detail := concat value: ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | (d at: 'd_date_sk' = ss at: 'ss_sold_date_sk')]) do: [:ss |
	(date_dim) do: [:d |
		res add: Dictionary from: {'d_year' -> d at: 'd_year'. 'i_item_sk' -> ss at: 'ss_item_sk'. 'quantity' -> ss at: 'ss_quantity'. 'amount' -> ss at: 'ss_sales_price'}.
	]
]
res := res asArray.
res)) value: ((| res |
res := OrderedCollection new.
((web_sales) select: [:ws | (d at: 'd_date_sk' = ws at: 'ws_sold_date_sk')]) do: [:ws |
	(date_dim) do: [:d |
		res add: Dictionary from: {'d_year' -> d at: 'd_year'. 'i_item_sk' -> ws at: 'ws_item_sk'. 'quantity' -> ws at: 'ws_quantity'. 'amount' -> ws at: 'ws_sales_price'}.
	]
]
res := res asArray.
res)) value: ((| res |
res := OrderedCollection new.
((catalog_sales) select: [:cs | (d at: 'd_date_sk' = cs at: 'cs_sold_date_sk')]) do: [:cs |
	(date_dim) do: [:d |
		res add: Dictionary from: {'d_year' -> d at: 'd_year'. 'i_item_sk' -> cs at: 'cs_item_sk'. 'quantity' -> cs at: 'cs_quantity'. 'amount' -> cs at: 'cs_sales_price'}.
	]
]
res := res asArray.
res)).
all_sales := ((| rows groups |
rows := OrderedCollection new.
(sales_detail) do: [:sd |
	((i at: 'i_category' = 'Electronics')) ifTrue: [ rows add: sd ].
]
groups := (Main _group_by: rows keyFn: [:sd | Dictionary from: {'year' -> sd at: 'd_year'. 'brand_id' -> i at: 'i_brand_id'. 'class_id' -> i at: 'i_class_id'. 'category_id' -> i at: 'i_category_id'. 'manuf_id' -> i at: 'i_manufact_id'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'d_year' -> g at: 'key' at: 'year'. 'i_brand_id' -> g at: 'key' at: 'brand_id'. 'i_class_id' -> g at: 'key' at: 'class_id'. 'i_category_id' -> g at: 'key' at: 'category_id'. 'i_manufact_id' -> g at: 'key' at: 'manuf_id'. 'sales_cnt' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'sd' at: 'quantity'.
]
res := res asArray.
res))). 'sales_amt' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'sd' at: 'amount'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
prev_yr := first value: ((| res |
res := OrderedCollection new.
((all_sales) select: [:a | (a at: 'd_year' = 2000)]) do: [:a |
	res add: a.
]
res := res asArray.
res)).
curr_yr := first value: ((| res |
res := OrderedCollection new.
((all_sales) select: [:a | (a at: 'd_year' = 2001)]) do: [:a |
	res add: a.
]
res := res asArray.
res)).
result := (((((curr_yr at: 'sales_cnt' / prev_yr at: 'sales_cnt')) < 0.900000)) ifTrue: [Array with: (Dictionary from: {'prev_year' -> prev_yr at: 'd_year'. 'year' -> curr_yr at: 'd_year'. 'i_brand_id' -> curr_yr at: 'i_brand_id'. 'i_class_id' -> curr_yr at: 'i_class_id'. 'i_category_id' -> curr_yr at: 'i_category_id'. 'i_manufact_id' -> curr_yr at: 'i_manufact_id'. 'prev_yr_cnt' -> prev_yr at: 'sales_cnt'. 'curr_yr_cnt' -> curr_yr at: 'sales_cnt'. 'sales_cnt_diff' -> (curr_yr at: 'sales_cnt' - prev_yr at: 'sales_cnt'). 'sales_amt_diff' -> (curr_yr at: 'sales_amt' - prev_yr at: 'sales_amt')})] ifFalse: [Array new]).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q75_simplified.
