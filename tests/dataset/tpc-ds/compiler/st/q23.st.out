Smalltalk at: #best_ss_customer put: nil.
Smalltalk at: #catalog put: nil.
Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #customer_totals put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #frequent_ss_items put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #max_sales put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #web put: nil.
Smalltalk at: #web_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newStoreSale: ss_item_sk ss_sold_date_sk: ss_sold_date_sk ss_customer_sk: ss_customer_sk ss_quantity: ss_quantity ss_sales_price: ss_sales_price | dict |
    dict := Dictionary new.
    dict at: 'ss_item_sk' put: ss_item_sk.
    dict at: 'ss_sold_date_sk' put: ss_sold_date_sk.
    dict at: 'ss_customer_sk' put: ss_customer_sk.
    dict at: 'ss_quantity' put: ss_quantity.
    dict at: 'ss_sales_price' put: ss_sales_price.
    ^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_year: d_year d_moy: d_moy | dict |
    dict := Dictionary new.
    dict at: 'd_date_sk' put: d_date_sk.
    dict at: 'd_year' put: d_year.
    dict at: 'd_moy' put: d_moy.
    ^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk | dict |
    dict := Dictionary new.
    dict at: 'i_item_sk' put: i_item_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newCatalogSale: cs_sold_date_sk cs_item_sk: cs_item_sk cs_bill_customer_sk: cs_bill_customer_sk cs_quantity: cs_quantity cs_list_price: cs_list_price | dict |
    dict := Dictionary new.
    dict at: 'cs_sold_date_sk' put: cs_sold_date_sk.
    dict at: 'cs_item_sk' put: cs_item_sk.
    dict at: 'cs_bill_customer_sk' put: cs_bill_customer_sk.
    dict at: 'cs_quantity' put: cs_quantity.
    dict at: 'cs_list_price' put: cs_list_price.
    ^ dict
!
!Main class methodsFor: 'types'!
newWebSale: ws_sold_date_sk ws_item_sk: ws_item_sk ws_bill_customer_sk: ws_bill_customer_sk ws_quantity: ws_quantity ws_list_price: ws_list_price | dict |
    dict := Dictionary new.
    dict at: 'ws_sold_date_sk' put: ws_sold_date_sk.
    dict at: 'ws_item_sk' put: ws_item_sk.
    dict at: 'ws_bill_customer_sk' put: ws_bill_customer_sk.
    dict at: 'ws_quantity' put: ws_quantity.
    dict at: 'ws_list_price' put: ws_list_price.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q23_cross_channel_sales
    ((result = 50.000000)) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__count: v
    (v respondsTo: #size) ifTrue: [ ^ v size ]
    ^ self error: 'count() expects collection'
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
__max: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'max() expects collection' ]
    | m first |
    first := true.
    v do: [:it | first ifTrue: [ m := it. first := false ] ifFalse: [ (it > m) ifTrue: [ m := it ] ] ].
    ^ first ifTrue: [ 0 ] ifFalse: [ m ]
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 2. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 2. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 2. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 2. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_item_sk' -> 2. 'ss_sold_date_sk' -> 1. 'ss_customer_sk' -> 2. 'ss_quantity' -> 1. 'ss_sales_price' -> 10.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000. 'd_moy' -> 1}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1}) with: (Dictionary from: {'i_item_sk' -> 2}).
catalog_sales := Array with: (Dictionary from: {'cs_sold_date_sk' -> 1. 'cs_item_sk' -> 1. 'cs_bill_customer_sk' -> 1. 'cs_quantity' -> 2. 'cs_list_price' -> 10.000000}) with: (Dictionary from: {'cs_sold_date_sk' -> 1. 'cs_item_sk' -> 2. 'cs_bill_customer_sk' -> 2. 'cs_quantity' -> 2. 'cs_list_price' -> 10.000000}).
web_sales := Array with: (Dictionary from: {'ws_sold_date_sk' -> 1. 'ws_item_sk' -> 1. 'ws_bill_customer_sk' -> 1. 'ws_quantity' -> 3. 'ws_list_price' -> 10.000000}) with: (Dictionary from: {'ws_sold_date_sk' -> 1. 'ws_item_sk' -> 2. 'ws_bill_customer_sk' -> 2. 'ws_quantity' -> 1. 'ws_list_price' -> 10.000000}).
frequent_ss_items := ((| rows groups |
rows := OrderedCollection new.
(store_sales) do: [:ss |
    ((d at: 'd_year' = 2000)) ifTrue: [ rows add: ss ].
]
groups := (Main _group_by: rows keyFn: [:ss | Dictionary from: {'item_sk' -> i at: 'i_item_sk'. 'date_sk' -> d at: 'd_date_sk'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    (((Main __count: g) > 4)) ifTrue: [ rows add: g at: 'key' at: 'item_sk' ].
]
rows := rows asArray.
rows)).
customer_totals := ((| rows groups |
rows := OrderedCollection new.
(store_sales) do: [:ss |
    rows add: ss.
]
groups := (Main _group_by: rows keyFn: [:ss | ss at: 'ss_customer_sk']).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'cust' -> g at: 'key'. 'sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: (x at: 'ss_quantity' * x at: 'ss_sales_price').
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
max_sales := (Main __max: ((| res |
res := OrderedCollection new.
(customer_totals) do: [:c |
    res add: c at: 'sales'.
]
res := res asArray.
res))).
best_ss_customer := ((| res |
res := OrderedCollection new.
((customer_totals) select: [:c | ((c at: 'sales' > 0.950000) * max_sales)]) do: [:c |
    res add: c at: 'cust'.
]
res := res asArray.
res)).
catalog := ((| res |
res := OrderedCollection new.
((catalog_sales) select: [:cs | ((frequent_ss_items includes: d at: 'd_year') and: [(cs at: 'cs_sold_date_sk' = d at: 'd_date_sk')])]) do: [:cs |
    (date_dim) do: [:d |
        res add: (cs at: 'cs_quantity' * cs at: 'cs_list_price').
    ]
]
res := res asArray.
res)).
web := ((| res |
res := OrderedCollection new.
((web_sales) select: [:ws | ((frequent_ss_items includes: d at: 'd_year') and: [(ws at: 'ws_sold_date_sk' = d at: 'd_date_sk')])]) do: [:ws |
    (date_dim) do: [:d |
        res add: (ws at: 'ws_quantity' * ws at: 'ws_list_price').
    ]
]
res := res asArray.
res)).
result := ((Main __sum: catalog) + (Main __sum: web)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q23_cross_channel_sales.
