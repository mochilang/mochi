Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #filtered put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newCatalogSale: cs_bill_customer_sk cs_sales_price: cs_sales_price cs_sold_date_sk: cs_sold_date_sk | dict |
    dict := Dictionary new.
    dict at: 'cs_bill_customer_sk' put: cs_bill_customer_sk.
    dict at: 'cs_sales_price' put: cs_sales_price.
    dict at: 'cs_sold_date_sk' put: cs_sold_date_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomer: c_customer_sk c_current_addr_sk: c_current_addr_sk | dict |
    dict := Dictionary new.
    dict at: 'c_customer_sk' put: c_customer_sk.
    dict at: 'c_current_addr_sk' put: c_current_addr_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomerAddress: ca_address_sk ca_zip: ca_zip ca_state: ca_state | dict |
    dict := Dictionary new.
    dict at: 'ca_address_sk' put: ca_address_sk.
    dict at: 'ca_zip' put: ca_zip.
    dict at: 'ca_state' put: ca_state.
    ^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_qoy: d_qoy d_year: d_year | dict |
    dict := Dictionary new.
    dict at: 'd_date_sk' put: d_date_sk.
    dict at: 'd_qoy' put: d_qoy.
    dict at: 'd_year' put: d_year.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q15_zip
    ((filtered = Array with: (Dictionary from: {'ca_zip' -> '85669'. 'sum_sales' -> 600.000000}))) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__slice_string: s start: i end: j
    | start end n |
    start := i.
    end := j.
    n := s size.
    start < 0 ifTrue: [ start := start + n ].
    end < 0 ifTrue: [ end := end + n ].
    start < 0 ifTrue: [ start := 0 ].
    end > n ifTrue: [ end := n ].
    end < start ifTrue: [ end := start ].
    ^ (s copyFrom: start + 1 to: end)
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
!!
catalog_sales := Array with: (Dictionary from: {'cs_bill_customer_sk' -> 1. 'cs_sales_price' -> 600.000000. 'cs_sold_date_sk' -> 1}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_current_addr_sk' -> 1}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_zip' -> '85669'. 'ca_state' -> 'CA'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_qoy' -> 1. 'd_year' -> 2000}).
filtered := ((| res |
res := OrderedCollection new.
((catalog_sales) select: [:cs | (((((((((((Array with: 'CA' with: 'WA' with: 'GA' includes: (Main __slice_string: ca at: 'ca_zip' start: 0 end: 0 + 5)) or: [cs at: 'cs_sales_price']) > 500)) and: [d at: 'd_qoy']) = 1) and: [d at: 'd_year']) = 2000) and: [(cs at: 'cs_bill_customer_sk' = c at: 'c_customer_sk')]) and: [(c at: 'c_current_addr_sk' = ca at: 'ca_address_sk')]) and: [(cs at: 'cs_sold_date_sk' = d at: 'd_date_sk')])]) do: [:cs |
    (customer) do: [:c |
        (customer_address) do: [:ca |
            (date_dim) do: [:d |
                res add: { g at: 'key' at: 'zip' . Dictionary from: {'ca_zip' -> g at: 'key' at: 'zip'. 'sum_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'cs_sales_price'.
]
res := res asArray.
res)))} }.
            ]
        ]
    ]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(filtered toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q15_zip.
