Smalltalk at: #avg_by_state put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #customer_total_return put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #web_returns put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q30_simplified
    ((result = Array with: (Dictionary from: {'c_customer_id' -> 'C1'. 'c_first_name' -> 'John'. 'c_last_name' -> 'Doe'. 'ctr_total_return' -> 150.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__avg: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'avg() expects collection' ]
    v size = 0 ifTrue: [ ^ 0 ]
    | sum |
    sum := 0.
    v do: [:it | sum := sum + it].
    ^ sum / v size
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
web_returns := Array with: (Dictionary from: {'wr_returning_customer_sk' -> 1. 'wr_returned_date_sk' -> 1. 'wr_return_amt' -> 100.000000. 'wr_returning_addr_sk' -> 1}) with: (Dictionary from: {'wr_returning_customer_sk' -> 2. 'wr_returned_date_sk' -> 1. 'wr_return_amt' -> 30.000000. 'wr_returning_addr_sk' -> 2}) with: (Dictionary from: {'wr_returning_customer_sk' -> 1. 'wr_returned_date_sk' -> 1. 'wr_return_amt' -> 50.000000. 'wr_returning_addr_sk' -> 1}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_state' -> 'CA'}) with: (Dictionary from: {'ca_address_sk' -> 2. 'ca_state' -> 'CA'}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_customer_id' -> 'C1'. 'c_first_name' -> 'John'. 'c_last_name' -> 'Doe'. 'c_current_addr_sk' -> 1}) with: (Dictionary from: {'c_customer_sk' -> 2. 'c_customer_id' -> 'C2'. 'c_first_name' -> 'Jane'. 'c_last_name' -> 'Smith'. 'c_current_addr_sk' -> 2}).
customer_total_return := ((| rows groups |
rows := OrderedCollection new.
(web_returns) do: [:wr |
    ((((d at: 'd_year' = 2000) and: [ca at: 'ca_state']) = 'CA')) ifTrue: [ rows add: wr ].
]
groups := (Main _group_by: rows keyFn: [:wr | Dictionary from: {'cust' -> wr at: 'wr_returning_customer_sk'. 'state' -> ca at: 'ca_state'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'ctr_customer_sk' -> g at: 'key' at: 'cust'. 'ctr_state' -> g at: 'key' at: 'state'. 'ctr_total_return' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'wr_return_amt'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
avg_by_state := ((| rows groups |
rows := OrderedCollection new.
(customer_total_return) do: [:ctr |
    rows add: ctr.
]
groups := (Main _group_by: rows keyFn: [:ctr | ctr at: 'ctr_state']).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'state' -> g at: 'key'. 'avg_return' -> (Main __avg: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ctr_total_return'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
result := ((| res |
res := OrderedCollection new.
((customer_total_return) select: [:ctr | ((((ctr at: 'ctr_total_return' > avg at: 'avg_return') * 1.200000) and: [(ctr at: 'ctr_state' = avg at: 'state')]) and: [(ctr at: 'ctr_customer_sk' = c at: 'c_customer_sk')])]) do: [:ctr |
    (avg_by_state) do: [:avg |
        (customer) do: [:c |
            res add: Dictionary from: {'c_customer_id' -> c at: 'c_customer_id'. 'c_first_name' -> c at: 'c_first_name'. 'c_last_name' -> c at: 'c_last_name'. 'ctr_total_return' -> ctr at: 'ctr_total_return'}.
        ]
    ]
]
res := res asArray.
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q30_simplified.
