Smalltalk at: #call_center put: nil.
Smalltalk at: #catalog_returns put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #customer_demographics put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #household_demographics put: nil.
Smalltalk at: #result put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newCallCenter: cc_call_center_sk cc_call_center_id: cc_call_center_id cc_name: cc_name cc_manager: cc_manager | dict |
	dict := Dictionary new.
	dict at: 'cc_call_center_sk' put: cc_call_center_sk.
	dict at: 'cc_call_center_id' put: cc_call_center_id.
	dict at: 'cc_name' put: cc_name.
	dict at: 'cc_manager' put: cc_manager.
	^ dict
!
!Main class methodsFor: 'types'!
newCatalogReturn: cr_call_center_sk cr_returned_date_sk: cr_returned_date_sk cr_returning_customer_sk: cr_returning_customer_sk cr_net_loss: cr_net_loss | dict |
	dict := Dictionary new.
	dict at: 'cr_call_center_sk' put: cr_call_center_sk.
	dict at: 'cr_returned_date_sk' put: cr_returned_date_sk.
	dict at: 'cr_returning_customer_sk' put: cr_returning_customer_sk.
	dict at: 'cr_net_loss' put: cr_net_loss.
	^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_year: d_year d_moy: d_moy | dict |
	dict := Dictionary new.
	dict at: 'd_date_sk' put: d_date_sk.
	dict at: 'd_year' put: d_year.
	dict at: 'd_moy' put: d_moy.
	^ dict
!
!Main class methodsFor: 'types'!
newCustomer: c_customer_sk c_current_cdemo_sk: c_current_cdemo_sk c_current_hdemo_sk: c_current_hdemo_sk c_current_addr_sk: c_current_addr_sk | dict |
	dict := Dictionary new.
	dict at: 'c_customer_sk' put: c_customer_sk.
	dict at: 'c_current_cdemo_sk' put: c_current_cdemo_sk.
	dict at: 'c_current_hdemo_sk' put: c_current_hdemo_sk.
	dict at: 'c_current_addr_sk' put: c_current_addr_sk.
	^ dict
!
!Main class methodsFor: 'types'!
newCustomerAddress: ca_address_sk ca_gmt_offset: ca_gmt_offset | dict |
	dict := Dictionary new.
	dict at: 'ca_address_sk' put: ca_address_sk.
	dict at: 'ca_gmt_offset' put: ca_gmt_offset.
	^ dict
!
!Main class methodsFor: 'types'!
newCustomerDemographics: cd_demo_sk cd_marital_status: cd_marital_status cd_education_status: cd_education_status | dict |
	dict := Dictionary new.
	dict at: 'cd_demo_sk' put: cd_demo_sk.
	dict at: 'cd_marital_status' put: cd_marital_status.
	dict at: 'cd_education_status' put: cd_education_status.
	^ dict
!
!Main class methodsFor: 'types'!
newHouseholdDemographics: hd_demo_sk hd_buy_potential: hd_buy_potential | dict |
	dict := Dictionary new.
	dict at: 'hd_demo_sk' put: hd_demo_sk.
	dict at: 'hd_buy_potential' put: hd_buy_potential.
	^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q91_returns
	((result = Dictionary from: {'Call_Center' -> 'CC1'. 'Call_Center_Name' -> 'Main'. 'Manager' -> 'Alice'. 'Returns_Loss' -> 10.000000})) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
call_center := Array with: (Dictionary from: {'cc_call_center_sk' -> 1. 'cc_call_center_id' -> 'CC1'. 'cc_name' -> 'Main'. 'cc_manager' -> 'Alice'}).
catalog_returns := Array with: (Dictionary from: {'cr_call_center_sk' -> 1. 'cr_returned_date_sk' -> 1. 'cr_returning_customer_sk' -> 1. 'cr_net_loss' -> 10.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2001. 'd_moy' -> 5}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_current_cdemo_sk' -> 1. 'c_current_hdemo_sk' -> 1. 'c_current_addr_sk' -> 1}).
customer_demographics := Array with: (Dictionary from: {'cd_demo_sk' -> 1. 'cd_marital_status' -> 'M'. 'cd_education_status' -> 'Unknown'}).
household_demographics := Array with: (Dictionary from: {'hd_demo_sk' -> 1. 'hd_buy_potential' -> '1001-5000'}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_gmt_offset' -> (6 negated)}).
result := first value: ((| rows groups |
rows := OrderedCollection new.
(call_center) do: [:cc |
	((((((((((((d at: 'd_year' = 2001) and: [d at: 'd_moy']) = 5) and: [cd at: 'cd_marital_status']) = 'M') and: [cd at: 'cd_education_status']) = 'Unknown') and: [hd at: 'hd_buy_potential']) = '1001-5000') and: [ca at: 'ca_gmt_offset']) = ((6 negated)))) ifTrue: [ rows add: cc ].
]
groups := (Main _group_by: rows keyFn: [:cc | Dictionary from: {'id' -> cc at: 'cc_call_center_id'. 'name' -> cc at: 'cc_name'. 'mgr' -> cc at: 'cc_manager'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'Call_Center' -> g at: 'key' at: 'id'. 'Call_Center_Name' -> g at: 'key' at: 'name'. 'Manager' -> g at: 'key' at: 'mgr'. 'Returns_Loss' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'cr_net_loss'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q91_returns.
