Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #customer_demographics put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #groups put: nil.
Smalltalk at: #purchased put: nil.
Smalltalk at: #store_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q35_simplified
    ((groups = Array with: (Dictionary from: {'ca_state' -> 'CA'. 'cd_gender' -> 'M'. 'cd_marital_status' -> 'S'. 'cd_dep_count' -> 1. 'cd_dep_employed_count' -> 1. 'cd_dep_college_count' -> 0. 'cnt' -> 1}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__count: v
    (v respondsTo: #size) ifTrue: [ ^ v size ]
    ^ self error: 'count() expects collection'
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_current_addr_sk' -> 1. 'c_current_cdemo_sk' -> 1}) with: (Dictionary from: {'c_customer_sk' -> 2. 'c_current_addr_sk' -> 2. 'c_current_cdemo_sk' -> 2}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_state' -> 'CA'}) with: (Dictionary from: {'ca_address_sk' -> 2. 'ca_state' -> 'NY'}).
customer_demographics := Array with: (Dictionary from: {'cd_demo_sk' -> 1. 'cd_gender' -> 'M'. 'cd_marital_status' -> 'S'. 'cd_dep_count' -> 1. 'cd_dep_employed_count' -> 1. 'cd_dep_college_count' -> 0}) with: (Dictionary from: {'cd_demo_sk' -> 2. 'cd_gender' -> 'F'. 'cd_marital_status' -> 'M'. 'cd_dep_count' -> 2. 'cd_dep_employed_count' -> 1. 'cd_dep_college_count' -> 1}).
store_sales := Array with: (Dictionary from: {'ss_customer_sk' -> 1. 'ss_sold_date_sk' -> 1}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000. 'd_qoy' -> 1}).
purchased := ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | ((((d at: 'd_year' = 2000) and: [d at: 'd_qoy']) < 4) and: [(ss at: 'ss_sold_date_sk' = d at: 'd_date_sk')])]) do: [:ss |
    (date_dim) do: [:d |
        res add: ss at: 'ss_customer_sk'.
    ]
]
res := res asArray.
res)).
groups := ((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
    ((purchased includes: c at: 'c_customer_sk')) ifTrue: [ rows add: c ].
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'state' -> ca at: 'ca_state'. 'gender' -> cd at: 'cd_gender'. 'marital' -> cd at: 'cd_marital_status'. 'dep' -> cd at: 'cd_dep_count'. 'emp' -> cd at: 'cd_dep_employed_count'. 'col' -> cd at: 'cd_dep_college_count'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'ca_state' -> g at: 'key' at: 'state'. 'cd_gender' -> g at: 'key' at: 'gender'. 'cd_marital_status' -> g at: 'key' at: 'marital'. 'cd_dep_count' -> g at: 'key' at: 'dep'. 'cd_dep_employed_count' -> g at: 'key' at: 'emp'. 'cd_dep_college_count' -> g at: 'key' at: 'col'. 'cnt' -> (Main __count: g)}.
]
rows := rows asArray.
rows)).
(groups toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q35_simplified.
