Smalltalk at: #base put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #item_ids put: nil.
Smalltalk at: #qoy put: nil.
Smalltalk at: #records put: nil.
Smalltalk at: #web_sales put: nil.
Smalltalk at: #year put: nil.
Smalltalk at: #zip_list put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q45_simplified
    ((records = Array with: (Dictionary from: {'ca_zip' -> '85669'. 'sum_ws_sales_price' -> 50.000000}) with: (Dictionary from: {'ca_zip' -> '99999'. 'sum_ws_sales_price' -> 30.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__slice_string: s start: i end: j
    | start end n |
    start := i.
    end := j.
    n := s size.
    start < 0 ifTrue: [ start := start + n ].
    end < 0 ifTrue: [ end := end + n ].
    start < 0 ifTrue: [ start := 0 ].
    end > n ifTrue: [ end := n ].
    end < start ifTrue: [ end := start ].
    ^ (s copyFrom: start + 1 to: end)
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
web_sales := Array with: (Dictionary from: {'bill_customer_sk' -> 1. 'item_sk' -> 1. 'sold_date_sk' -> 1. 'sales_price' -> 50.000000}) with: (Dictionary from: {'bill_customer_sk' -> 2. 'item_sk' -> 2. 'sold_date_sk' -> 1. 'sales_price' -> 30.000000}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_current_addr_sk' -> 1}) with: (Dictionary from: {'c_customer_sk' -> 2. 'c_current_addr_sk' -> 2}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_zip' -> '85669'}) with: (Dictionary from: {'ca_address_sk' -> 2. 'ca_zip' -> '99999'}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_item_id' -> 'I1'}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_item_id' -> 'I2'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_qoy' -> 1. 'd_year' -> 2020}).
zip_list := Array with: '85669' with: '86197' with: '88274' with: '83405' with: '86475' with: '85392' with: '85460' with: '80348' with: '81792'.
item_ids := Array with: 'I2'.
qoy := 1.
year := 2020.
base := ((| rows groups |
rows := OrderedCollection new.
(web_sales) do: [:ws |
    (((((((item_ids includes: (Main __slice_string: ca at: 'ca_zip' start: 0 end: 0 + 5))) and: [d at: 'd_qoy']) = qoy) and: [d at: 'd_year']) = year)) ifTrue: [ rows add: ws ].
]
groups := (Main _group_by: rows keyFn: [:ws | ca at: 'ca_zip']).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'ca_zip' -> g at: 'key'. 'sum_ws_sales_price' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ws' at: 'sales_price'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
records := base.
(records toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q45_simplified.
