Smalltalk at: #date_dim put: nil.
Smalltalk at: #dms put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store put: nil.
Smalltalk at: #store_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q70_simplified
	((result = Array with: (Dictionary from: {'s_state' -> 'CA'. 's_county' -> 'Orange'. 'total_sum' -> 15.000000}) with: (Dictionary from: {'s_state' -> 'TX'. 's_county' -> 'Travis'. 'total_sum' -> 20.000000}))) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
!!
store := Array with: (Dictionary from: {'s_store_sk' -> 1. 's_state' -> 'CA'. 's_county' -> 'Orange'}) with: (Dictionary from: {'s_store_sk' -> 2. 's_state' -> 'CA'. 's_county' -> 'Orange'}) with: (Dictionary from: {'s_store_sk' -> 3. 's_state' -> 'TX'. 's_county' -> 'Travis'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_month_seq' -> 1200}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_month_seq' -> 1201}).
store_sales := Array with: (Dictionary from: {'ss_sold_date_sk' -> 1. 'ss_store_sk' -> 1. 'ss_net_profit' -> 10.000000}) with: (Dictionary from: {'ss_sold_date_sk' -> 1. 'ss_store_sk' -> 2. 'ss_net_profit' -> 5.000000}) with: (Dictionary from: {'ss_sold_date_sk' -> 2. 'ss_store_sk' -> 3. 'ss_net_profit' -> 20.000000}).
dms := 1200.
result := ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | ((((((d at: 'd_month_seq' >= dms) and: [d at: 'd_month_seq']) <= dms) + 11) and: [(d at: 'd_date_sk' = ss at: 'ss_sold_date_sk')]) and: [(s at: 's_store_sk' = ss at: 'ss_store_sk')])]) do: [:ss |
	(date_dim) do: [:d |
		(store) do: [:s |
			res add: { Array with: (g at: 'key' at: 'state') with: (g at: 'key' at: 'county') . Dictionary from: {'s_state' -> g at: 'key' at: 'state'. 's_county' -> g at: 'key' at: 'county'. 'total_sum' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'ss' at: 'ss_net_profit'.
]
res := res asArray.
res)))} }.
		]
	]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q70_simplified.
