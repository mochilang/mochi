Smalltalk at: #date_dim put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store put: nil.
Smalltalk at: #store_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q36_simplified
    ((result = Array with: (Dictionary from: {'i_category' -> 'Books'. 'i_class' -> 'C1'. 'gross_margin' -> 0.200000}) with: (Dictionary from: {'i_category' -> 'Books'. 'i_class' -> 'C2'. 'gross_margin' -> 0.250000}) with: (Dictionary from: {'i_category' -> 'Electronics'. 'i_class' -> 'C3'. 'gross_margin' -> 0.200000}))) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
!!
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_store_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_ext_sales_price' -> 100.000000. 'ss_net_profit' -> 20.000000}) with: (Dictionary from: {'ss_item_sk' -> 2. 'ss_store_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_ext_sales_price' -> 200.000000. 'ss_net_profit' -> 50.000000}) with: (Dictionary from: {'ss_item_sk' -> 3. 'ss_store_sk' -> 2. 'ss_sold_date_sk' -> 1. 'ss_ext_sales_price' -> 150.000000. 'ss_net_profit' -> 30.000000}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_category' -> 'Books'. 'i_class' -> 'C1'}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_category' -> 'Books'. 'i_class' -> 'C2'}) with: (Dictionary from: {'i_item_sk' -> 3. 'i_category' -> 'Electronics'. 'i_class' -> 'C3'}).
store := Array with: (Dictionary from: {'s_store_sk' -> 1. 's_state' -> 'A'}) with: (Dictionary from: {'s_store_sk' -> 2. 's_state' -> 'B'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2000}).
result := ((| res |
res := OrderedCollection new.
((store_sales) select: [:ss | (((((d at: 'd_year' = 2000) and: [((((s at: 's_state' = 'A') or: [s at: 's_state']) = 'B'))]) and: [(ss at: 'ss_sold_date_sk' = d at: 'd_date_sk')]) and: [(ss at: 'ss_item_sk' = i at: 'i_item_sk')]) and: [(ss at: 'ss_store_sk' = s at: 's_store_sk')])]) do: [:ss |
    (date_dim) do: [:d |
        (item) do: [:i |
            (store) do: [:s |
                res add: { Array with: (g at: 'key' at: 'category') with: (g at: 'key' at: 'class') . Dictionary from: {'i_category' -> g at: 'key' at: 'category'. 'i_class' -> g at: 'key' at: 'class'. 'gross_margin' -> ((Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ss_net_profit'.
]
res := res asArray.
res))) / (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ss_ext_sales_price'.
]
res := res asArray.
res))))} }.
            ]
        ]
    ]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q36_simplified.
