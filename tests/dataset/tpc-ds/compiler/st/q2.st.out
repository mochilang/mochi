Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #web_sales put: nil.
Smalltalk at: #wscs put: nil.
Smalltalk at: #wswscs put: nil.
Smalltalk at: #year1 put: nil.
Smalltalk at: #year2 put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q2_result
	((result = Array with: (Dictionary from: {'d_week_seq1' -> 1. 'sun_ratio' -> 0.500000. 'mon_ratio' -> 0.500000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__union_all: a with: b
	| out |
	out := OrderedCollection new.
	a ifNotNil: [ a do: [:v | out add: v ] ].
	b ifNotNil: [ b do: [:v | out add: v ] ].
	^ out asArray
!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
web_sales := Array with: (Dictionary from: {'ws_sold_date_sk' -> 1. 'ws_ext_sales_price' -> 5.000000. 'ws_sold_date_name' -> 'Sunday'}) with: (Dictionary from: {'ws_sold_date_sk' -> 2. 'ws_ext_sales_price' -> 5.000000. 'ws_sold_date_name' -> 'Monday'}) with: (Dictionary from: {'ws_sold_date_sk' -> 8. 'ws_ext_sales_price' -> 10.000000. 'ws_sold_date_name' -> 'Sunday'}) with: (Dictionary from: {'ws_sold_date_sk' -> 9. 'ws_ext_sales_price' -> 10.000000. 'ws_sold_date_name' -> 'Monday'}).
catalog_sales := Array with: (Dictionary from: {'cs_sold_date_sk' -> 1. 'cs_ext_sales_price' -> 5.000000. 'cs_sold_date_name' -> 'Sunday'}) with: (Dictionary from: {'cs_sold_date_sk' -> 2. 'cs_ext_sales_price' -> 5.000000. 'cs_sold_date_name' -> 'Monday'}) with: (Dictionary from: {'cs_sold_date_sk' -> 8. 'cs_ext_sales_price' -> 10.000000. 'cs_sold_date_name' -> 'Sunday'}) with: (Dictionary from: {'cs_sold_date_sk' -> 9. 'cs_ext_sales_price' -> 10.000000. 'cs_sold_date_name' -> 'Monday'}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_week_seq' -> 1. 'd_day_name' -> 'Sunday'. 'd_year' -> 1998}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_week_seq' -> 1. 'd_day_name' -> 'Monday'. 'd_year' -> 1998}) with: (Dictionary from: {'d_date_sk' -> 8. 'd_week_seq' -> 54. 'd_day_name' -> 'Sunday'. 'd_year' -> 1999}) with: (Dictionary from: {'d_date_sk' -> 9. 'd_week_seq' -> 54. 'd_day_name' -> 'Monday'. 'd_year' -> 1999}).
wscs := (Main __union_all: ((((| res |
res := OrderedCollection new.
(web_sales) do: [:ws |
	res add: Dictionary from: {'sold_date_sk' -> ws at: 'ws_sold_date_sk'. 'sales_price' -> ws at: 'ws_ext_sales_price'. 'day' -> ws at: 'ws_sold_date_name'}.
]
res := res asArray.
res)))) with: ((((| res |
res := OrderedCollection new.
(catalog_sales) do: [:cs |
	res add: Dictionary from: {'sold_date_sk' -> cs at: 'cs_sold_date_sk'. 'sales_price' -> cs at: 'cs_ext_sales_price'. 'day' -> cs at: 'cs_sold_date_name'}.
]
res := res asArray.
res))))).
wswscs := ((| rows groups |
rows := OrderedCollection new.
(wscs) do: [:w |
	rows add: w.
]
groups := (Main _group_by: rows keyFn: [:w | Dictionary from: {'week_seq' -> d at: 'd_week_seq'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'d_week_seq' -> g at: 'key' at: 'week_seq'. 'sun_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Sunday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'mon_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Monday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'tue_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Tuesday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'wed_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Wednesday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'thu_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Thursday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'fri_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Friday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res))). 'sat_sales' -> (Main __sum: ((| res |
res := OrderedCollection new.
((g) select: [:x | (x at: 'day' = 'Saturday')]) do: [:x |
	res add: x at: 'sales_price'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
year1 := ((| res |
res := OrderedCollection new.
((wswscs) select: [:w | (w at: 'd_week_seq' = 1)]) do: [:w |
	res add: w.
]
res := res asArray.
res)).
year2 := ((| res |
res := OrderedCollection new.
((wswscs) select: [:w | (w at: 'd_week_seq' = 54)]) do: [:w |
	res add: w.
]
res := res asArray.
res)).
result := ((| res |
res := OrderedCollection new.
((year1) select: [:y | ((y at: 'd_week_seq' = z at: 'd_week_seq') - 53)]) do: [:y |
	(year2) do: [:z |
		res add: Dictionary from: {'d_week_seq1' -> y at: 'd_week_seq'. 'sun_ratio' -> (y at: 'sun_sales' / z at: 'sun_sales'). 'mon_ratio' -> (y at: 'mon_sales' / z at: 'mon_sales')}.
	]
]
res := res asArray.
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q2_result.
