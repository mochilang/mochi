Smalltalk at: #avg_paid put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #customer_address put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #ssales put: nil.
Smalltalk at: #store put: nil.
Smalltalk at: #store_returns put: nil.
Smalltalk at: #store_sales put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newStoreSale: ss_ticket_number ss_item_sk: ss_item_sk ss_customer_sk: ss_customer_sk ss_store_sk: ss_store_sk ss_net_paid: ss_net_paid | dict |
    dict := Dictionary new.
    dict at: 'ss_ticket_number' put: ss_ticket_number.
    dict at: 'ss_item_sk' put: ss_item_sk.
    dict at: 'ss_customer_sk' put: ss_customer_sk.
    dict at: 'ss_store_sk' put: ss_store_sk.
    dict at: 'ss_net_paid' put: ss_net_paid.
    ^ dict
!
!Main class methodsFor: 'types'!
newStoreReturn: sr_ticket_number sr_item_sk: sr_item_sk | dict |
    dict := Dictionary new.
    dict at: 'sr_ticket_number' put: sr_ticket_number.
    dict at: 'sr_item_sk' put: sr_item_sk.
    ^ dict
!
!Main class methodsFor: 'types'!
newStore: s_store_sk s_store_name: s_store_name s_market_id: s_market_id s_state: s_state s_zip: s_zip | dict |
    dict := Dictionary new.
    dict at: 's_store_sk' put: s_store_sk.
    dict at: 's_store_name' put: s_store_name.
    dict at: 's_market_id' put: s_market_id.
    dict at: 's_state' put: s_state.
    dict at: 's_zip' put: s_zip.
    ^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk i_color: i_color i_current_price: i_current_price i_manager_id: i_manager_id i_units: i_units i_size: i_size | dict |
    dict := Dictionary new.
    dict at: 'i_item_sk' put: i_item_sk.
    dict at: 'i_color' put: i_color.
    dict at: 'i_current_price' put: i_current_price.
    dict at: 'i_manager_id' put: i_manager_id.
    dict at: 'i_units' put: i_units.
    dict at: 'i_size' put: i_size.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomer: c_customer_sk c_first_name: c_first_name c_last_name: c_last_name c_current_addr_sk: c_current_addr_sk c_birth_country: c_birth_country | dict |
    dict := Dictionary new.
    dict at: 'c_customer_sk' put: c_customer_sk.
    dict at: 'c_first_name' put: c_first_name.
    dict at: 'c_last_name' put: c_last_name.
    dict at: 'c_current_addr_sk' put: c_current_addr_sk.
    dict at: 'c_birth_country' put: c_birth_country.
    ^ dict
!
!Main class methodsFor: 'types'!
newCustomerAddress: ca_address_sk ca_state: ca_state ca_country: ca_country ca_zip: ca_zip | dict |
    dict := Dictionary new.
    dict at: 'ca_address_sk' put: ca_address_sk.
    dict at: 'ca_state' put: ca_state.
    dict at: 'ca_country' put: ca_country.
    dict at: 'ca_zip' put: ca_zip.
    ^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q24_customer_net_paid
    ((result = Array with: (Dictionary from: {'c_last_name' -> 'Smith'. 'c_first_name' -> 'Ann'. 's_store_name' -> 'Store1'. 'paid' -> 100.000000}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__avg: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'avg() expects collection' ]
    v size = 0 ifTrue: [ ^ 0 ]
    | sum |
    sum := 0.
    v do: [:it | sum := sum + it].
    ^ sum / v size
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
store_sales := Array with: (Dictionary from: {'ss_ticket_number' -> 1. 'ss_item_sk' -> 1. 'ss_customer_sk' -> 1. 'ss_store_sk' -> 1. 'ss_net_paid' -> 100.000000}) with: (Dictionary from: {'ss_ticket_number' -> 2. 'ss_item_sk' -> 2. 'ss_customer_sk' -> 2. 'ss_store_sk' -> 1. 'ss_net_paid' -> 50.000000}).
store_returns := Array with: (Dictionary from: {'sr_ticket_number' -> 1. 'sr_item_sk' -> 1}) with: (Dictionary from: {'sr_ticket_number' -> 2. 'sr_item_sk' -> 2}).
store := Array with: (Dictionary from: {'s_store_sk' -> 1. 's_store_name' -> 'Store1'. 's_market_id' -> 5. 's_state' -> 'CA'. 's_zip' -> '12345'}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_color' -> 'RED'. 'i_current_price' -> 10.000000. 'i_manager_id' -> 1. 'i_units' -> 'EA'. 'i_size' -> 'M'}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_color' -> 'BLUE'. 'i_current_price' -> 20.000000. 'i_manager_id' -> 2. 'i_units' -> 'EA'. 'i_size' -> 'L'}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_first_name' -> 'Ann'. 'c_last_name' -> 'Smith'. 'c_current_addr_sk' -> 1. 'c_birth_country' -> 'Canada'}) with: (Dictionary from: {'c_customer_sk' -> 2. 'c_first_name' -> 'Bob'. 'c_last_name' -> 'Jones'. 'c_current_addr_sk' -> 2. 'c_birth_country' -> 'USA'}).
customer_address := Array with: (Dictionary from: {'ca_address_sk' -> 1. 'ca_state' -> 'CA'. 'ca_country' -> 'USA'. 'ca_zip' -> '12345'}) with: (Dictionary from: {'ca_address_sk' -> 2. 'ca_state' -> 'CA'. 'ca_country' -> 'USA'. 'ca_zip' -> '54321'}).
ssales := ((| rows groups |
rows := OrderedCollection new.
(store_sales) do: [:ss |
    ((((((c at: 'c_birth_country' ~= (strings at: 'ToUpper' value: ca at: 'ca_country')) and: [s at: 's_zip']) = ca at: 'ca_zip') and: [s at: 's_market_id']) = 5)) ifTrue: [ rows add: ss ].
]
groups := (Main _group_by: rows keyFn: [:ss | Dictionary from: {'last' -> c at: 'c_last_name'. 'first' -> c at: 'c_first_name'. 'store_name' -> s at: 's_store_name'. 'color' -> i at: 'i_color'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'c_last_name' -> g at: 'key' at: 'last'. 'c_first_name' -> g at: 'key' at: 'first'. 's_store_name' -> g at: 'key' at: 'store_name'. 'color' -> g at: 'key' at: 'color'. 'netpaid' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: x at: 'ss_net_paid'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
avg_paid := (Main __avg: ((| res |
res := OrderedCollection new.
(ssales) do: [:x |
    res add: x at: 'netpaid'.
]
res := res asArray.
res))).
result := ((| res |
res := OrderedCollection new.
((ssales) select: [:x | ((((x at: 'color' = 'RED') and: [x at: 'netpaid']) > 0.050000) * avg_paid)]) do: [:x |
    res add: { Array with: (x at: 'c_last_name') with: (x at: 'c_first_name') with: (x at: 's_store_name') . Dictionary from: {'c_last_name' -> x at: 'c_last_name'. 'c_first_name' -> x at: 'c_first_name'. 's_store_name' -> x at: 's_store_name'. 'paid' -> x at: 'netpaid'} }.
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q24_customer_net_paid.
