Smalltalk at: #catalog_sales put: nil.
Smalltalk at: #customer put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #web_sales put: nil.
Smalltalk at: #year_total put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q4_result
    ((result = Array with: (Dictionary from: {'customer_id' -> 'C1'. 'customer_first_name' -> 'Alice'. 'customer_last_name' -> 'A'. 'customer_login' -> 'alice'}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
    g := self new.
    g key: k.
    g initialize.
    ^ g
!
!_Group methodsFor: 'initialization'!
initialize
    items := OrderedCollection new.
    ^ self
!
!_Group methodsFor: 'accessing'!
key
    ^ key
!
key: k
    key := k
!
add: it
    items add: it
!
do: blk
    items do: blk
!
size
    ^ items size
!
!Main class methodsFor: 'runtime'!
__union_all: a with: b
    | out |
    out := OrderedCollection new.
    a ifNotNil: [ a do: [:v | out add: v ] ].
    b ifNotNil: [ b do: [:v | out add: v ] ].
    ^ out asArray
!
__sum: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
    | s |
    s := 0.
    v do: [:it | s := s + it].
    ^ s
!
_group_by: src keyFn: blk
    | groups order |
    groups := Dictionary new.
    order := OrderedCollection new.
    src do: [:it |
        | key ks g |
        key := blk value: it.
        ks := key printString.
        g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
        g add: it.
    ]
    ^ order collect: [:k | groups at: k ]
!
!!
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_customer_id' -> 'C1'. 'c_first_name' -> 'Alice'. 'c_last_name' -> 'A'. 'c_login' -> 'alice'}).
store_sales := Array with: (Dictionary from: {'ss_customer_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_ext_list_price' -> 10.000000. 'ss_ext_wholesale_cost' -> 5.000000. 'ss_ext_discount_amt' -> 0.000000. 'ss_ext_sales_price' -> 10.000000}) with: (Dictionary from: {'ss_customer_sk' -> 1. 'ss_sold_date_sk' -> 2. 'ss_ext_list_price' -> 20.000000. 'ss_ext_wholesale_cost' -> 5.000000. 'ss_ext_discount_amt' -> 0.000000. 'ss_ext_sales_price' -> 20.000000}).
catalog_sales := Array with: (Dictionary from: {'cs_bill_customer_sk' -> 1. 'cs_sold_date_sk' -> 1. 'cs_ext_list_price' -> 10.000000. 'cs_ext_wholesale_cost' -> 2.000000. 'cs_ext_discount_amt' -> 0.000000. 'cs_ext_sales_price' -> 10.000000}) with: (Dictionary from: {'cs_bill_customer_sk' -> 1. 'cs_sold_date_sk' -> 2. 'cs_ext_list_price' -> 30.000000. 'cs_ext_wholesale_cost' -> 2.000000. 'cs_ext_discount_amt' -> 0.000000. 'cs_ext_sales_price' -> 30.000000}).
web_sales := Array with: (Dictionary from: {'ws_bill_customer_sk' -> 1. 'ws_sold_date_sk' -> 1. 'ws_ext_list_price' -> 10.000000. 'ws_ext_wholesale_cost' -> 5.000000. 'ws_ext_discount_amt' -> 0.000000. 'ws_ext_sales_price' -> 10.000000}) with: (Dictionary from: {'ws_bill_customer_sk' -> 1. 'ws_sold_date_sk' -> 2. 'ws_ext_list_price' -> 12.000000. 'ws_ext_wholesale_cost' -> 5.000000. 'ws_ext_discount_amt' -> 0.000000. 'ws_ext_sales_price' -> 12.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 2001}) with: (Dictionary from: {'d_date_sk' -> 2. 'd_year' -> 2002}).
year_total := (Main __union_all: ((Main __union_all: ((((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
    rows add: c.
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'id' -> c at: 'c_customer_id'. 'first' -> c at: 'c_first_name'. 'last' -> c at: 'c_last_name'. 'login' -> c at: 'c_login'. 'year' -> d at: 'd_year'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'customer_id' -> g at: 'key' at: 'id'. 'customer_first_name' -> g at: 'key' at: 'first'. 'customer_last_name' -> g at: 'key' at: 'last'. 'customer_login' -> g at: 'key' at: 'login'. 'dyear' -> g at: 'key' at: 'year'. 'year_total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: ((((((x at: 'ss_ext_list_price' - x at: 'ss_ext_wholesale_cost') - x at: 'ss_ext_discount_amt')) + x at: 'ss_ext_sales_price')) / 2).
]
res := res asArray.
res))). 'sale_type' -> 's'}.
]
rows := rows asArray.
rows)))) with: ((((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
    rows add: c.
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'id' -> c at: 'c_customer_id'. 'first' -> c at: 'c_first_name'. 'last' -> c at: 'c_last_name'. 'login' -> c at: 'c_login'. 'year' -> d at: 'd_year'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'customer_id' -> g at: 'key' at: 'id'. 'customer_first_name' -> g at: 'key' at: 'first'. 'customer_last_name' -> g at: 'key' at: 'last'. 'customer_login' -> g at: 'key' at: 'login'. 'dyear' -> g at: 'key' at: 'year'. 'year_total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: ((((((x at: 'cs_ext_list_price' - x at: 'cs_ext_wholesale_cost') - x at: 'cs_ext_discount_amt')) + x at: 'cs_ext_sales_price')) / 2).
]
res := res asArray.
res))). 'sale_type' -> 'c'}.
]
rows := rows asArray.
rows)))))) with: ((((| rows groups |
rows := OrderedCollection new.
(customer) do: [:c |
    rows add: c.
]
groups := (Main _group_by: rows keyFn: [:c | Dictionary from: {'id' -> c at: 'c_customer_id'. 'first' -> c at: 'c_first_name'. 'last' -> c at: 'c_last_name'. 'login' -> c at: 'c_login'. 'year' -> d at: 'd_year'}]).
rows := OrderedCollection new.
(groups) do: [:g |
    rows add: Dictionary from: {'customer_id' -> g at: 'key' at: 'id'. 'customer_first_name' -> g at: 'key' at: 'first'. 'customer_last_name' -> g at: 'key' at: 'last'. 'customer_login' -> g at: 'key' at: 'login'. 'dyear' -> g at: 'key' at: 'year'. 'year_total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
    res add: ((((((x at: 'ws_ext_list_price' - x at: 'ws_ext_wholesale_cost') - x at: 'ws_ext_discount_amt')) + x at: 'ws_ext_sales_price')) / 2).
]
res := res asArray.
res))). 'sale_type' -> 'w'}.
]
rows := rows asArray.
rows))))).
result := ((| res |
res := OrderedCollection new.
((year_total) select: [:s1 | ((((((((((((((((((((((((((((((((((((((s1 at: 'sale_type' = 's') and: [c1 at: 'sale_type']) = 'c') and: [w1 at: 'sale_type']) = 'w') and: [s2 at: 'sale_type']) = 's') and: [c2 at: 'sale_type']) = 'c') and: [w2 at: 'sale_type']) = 'w') and: [s1 at: 'dyear']) = 2001) and: [s2 at: 'dyear']) = 2002) and: [c1 at: 'dyear']) = 2001) and: [c2 at: 'dyear']) = 2002) and: [w1 at: 'dyear']) = 2001) and: [w2 at: 'dyear']) = 2002) and: [s1 at: 'year_total']) > 0) and: [c1 at: 'year_total']) > 0) and: [w1 at: 'year_total']) > 0) and: [((((c1 at: 'year_total' > 0)) ifTrue: [(c2 at: 'year_total' / c1 at: 'year_total')] ifFalse: [nil]))]) > ((((s1 at: 'year_total' > 0)) ifTrue: [(s2 at: 'year_total' / s1 at: 'year_total')] ifFalse: [nil]))) and: [((((c1 at: 'year_total' > 0)) ifTrue: [(c2 at: 'year_total' / c1 at: 'year_total')] ifFalse: [nil]))]) > ((((w1 at: 'year_total' > 0)) ifTrue: [(w2 at: 'year_total' / w1 at: 'year_total')] ifFalse: [nil]))) and: [(s2 at: 'customer_id' = s1 at: 'customer_id')]) and: [(c1 at: 'customer_id' = s1 at: 'customer_id')]) and: [(c2 at: 'customer_id' = s1 at: 'customer_id')]) and: [(w1 at: 'customer_id' = s1 at: 'customer_id')]) and: [(w2 at: 'customer_id' = s1 at: 'customer_id')])]) do: [:s1 |
    (year_total) do: [:s2 |
        (year_total) do: [:c1 |
            (year_total) do: [:c2 |
                (year_total) do: [:w1 |
                    (year_total) do: [:w2 |
                        res add: { Array with: (s2 at: 'customer_id') with: (s2 at: 'customer_first_name') with: (s2 at: 'customer_last_name') with: (s2 at: 'customer_login') . Dictionary from: {'customer_id' -> s2 at: 'customer_id'. 'customer_first_name' -> s2 at: 'customer_first_name'. 'customer_last_name' -> s2 at: 'customer_last_name'. 'customer_login' -> s2 at: 'customer_login'} }.
                    ]
                ]
            ]
        ]
    ]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q4_result.
