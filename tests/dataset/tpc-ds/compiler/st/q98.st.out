Smalltalk at: #date_dim put: nil.
Smalltalk at: #grouped put: nil.
Smalltalk at: #item put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store_sales put: nil.
Smalltalk at: #totals put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'types'!
newStoreSale: ss_item_sk ss_sold_date_sk: ss_sold_date_sk ss_ext_sales_price: ss_ext_sales_price | dict |
	dict := Dictionary new.
	dict at: 'ss_item_sk' put: ss_item_sk.
	dict at: 'ss_sold_date_sk' put: ss_sold_date_sk.
	dict at: 'ss_ext_sales_price' put: ss_ext_sales_price.
	^ dict
!
!Main class methodsFor: 'types'!
newItem: i_item_sk i_item_id: i_item_id i_item_desc: i_item_desc i_category: i_category i_class: i_class i_current_price: i_current_price | dict |
	dict := Dictionary new.
	dict at: 'i_item_sk' put: i_item_sk.
	dict at: 'i_item_id' put: i_item_id.
	dict at: 'i_item_desc' put: i_item_desc.
	dict at: 'i_category' put: i_category.
	dict at: 'i_class' put: i_class.
	dict at: 'i_current_price' put: i_current_price.
	^ dict
!
!Main class methodsFor: 'types'!
newDateDim: d_date_sk d_date: d_date | dict |
	dict := Dictionary new.
	dict at: 'd_date_sk' put: d_date_sk.
	dict at: 'd_date' put: d_date.
	^ dict
!
!Main class methodsFor: 'tests'!
test_TPCDS_Q98_revenue
	((result = Array with: (Dictionary from: {'i_item_id' -> 'I1'. 'i_item_desc' -> 'desc1'. 'i_category' -> 'CatA'. 'i_class' -> 'Class1'. 'i_current_price' -> 100.000000. 'itemrevenue' -> 50.000000. 'revenueratio' -> 33.333333}) with: (Dictionary from: {'i_item_id' -> 'I2'. 'i_item_desc' -> 'desc2'. 'i_category' -> 'CatB'. 'i_class' -> 'Class1'. 'i_current_price' -> 200.000000. 'itemrevenue' -> 100.000000. 'revenueratio' -> 66.666667}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
store_sales := Array with: (Dictionary from: {'ss_item_sk' -> 1. 'ss_sold_date_sk' -> 1. 'ss_ext_sales_price' -> 50.000000}) with: (Dictionary from: {'ss_item_sk' -> 2. 'ss_sold_date_sk' -> 1. 'ss_ext_sales_price' -> 100.000000}).
item := Array with: (Dictionary from: {'i_item_sk' -> 1. 'i_item_id' -> 'I1'. 'i_item_desc' -> 'desc1'. 'i_category' -> 'CatA'. 'i_class' -> 'Class1'. 'i_current_price' -> 100.000000}) with: (Dictionary from: {'i_item_sk' -> 2. 'i_item_id' -> 'I2'. 'i_item_desc' -> 'desc2'. 'i_category' -> 'CatB'. 'i_class' -> 'Class1'. 'i_current_price' -> 200.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_date' -> '2000-02-01'}).
grouped := ((| rows groups |
rows := OrderedCollection new.
(store_sales) do: [:ss |
	rows add: ss.
]
groups := (Main _group_by: rows keyFn: [:ss | Dictionary from: {'item_id' -> i at: 'i_item_id'. 'item_desc' -> i at: 'i_item_desc'. 'category' -> i at: 'i_category'. 'class' -> i at: 'i_class'. 'price' -> i at: 'i_current_price'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'i_item_id' -> g at: 'key' at: 'item_id'. 'i_item_desc' -> g at: 'key' at: 'item_desc'. 'i_category' -> g at: 'key' at: 'category'. 'i_class' -> g at: 'key' at: 'class'. 'i_current_price' -> g at: 'key' at: 'price'. 'itemrevenue' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'ss_ext_sales_price'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
totals := ((| rows groups |
rows := OrderedCollection new.
(grouped) do: [:g |
	rows add: g.
]
groups := (Main _group_by: rows keyFn: [:g | g at: 'i_class']).
rows := OrderedCollection new.
(groups) do: [:cg |
	rows add: Dictionary from: {'class' -> cg at: 'key'. 'total' -> (Main __sum: ((| res |
res := OrderedCollection new.
(cg) do: [:x |
	res add: x at: 'itemrevenue'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
result := ((| res |
res := OrderedCollection new.
((grouped) select: [:g | (g at: 'i_class' = t at: 'class')]) do: [:g |
	(totals) do: [:t |
		res add: Dictionary from: {'i_item_id' -> g at: 'i_item_id'. 'i_item_desc' -> g at: 'i_item_desc'. 'i_category' -> g at: 'i_category'. 'i_class' -> g at: 'i_class'. 'i_current_price' -> g at: 'i_current_price'. 'itemrevenue' -> g at: 'itemrevenue'. 'revenueratio' -> ((g at: 'itemrevenue' * 100) / t at: 'total')}.
	]
]
res := res asArray.
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q98_revenue.
