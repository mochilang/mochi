Smalltalk at: #customer put: nil.
Smalltalk at: #customer_total_return put: nil.
Smalltalk at: #date_dim put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #store put: nil.
Smalltalk at: #store_returns put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_TPCDS_Q1_result
	((result = Array with: (Dictionary from: {'c_customer_id' -> 'C2'}))) ifFalse: [ self error: 'expect failed' ]
!

Object subclass: #_Group instanceVariableNames: 'key items' classVariableNames: '' poolDictionaries: '' category: nil!

!_Group class methodsFor: 'instance creation'!
key: k | g |
	g := self new.
	g key: k.
	g initialize.
	^ g
!
!_Group methodsFor: 'initialization'!
initialize
	items := OrderedCollection new.
	^ self
!
!_Group methodsFor: 'accessing'!
key
	^ key
!
key: k
	key := k
!
add: it
	items add: it
!
do: blk
	items do: blk
!
size
	^ items size
!
!Main class methodsFor: 'runtime'!
__avg: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'avg() expects collection' ]
	v size = 0 ifTrue: [ ^ 0 ]
	| sum |
	sum := 0.
	v do: [:it | sum := sum + it].
	^ sum / v size
!
__sum: v
	(v respondsTo: #do:) ifFalse: [ ^ self error: 'sum() expects collection' ]
	| s |
	s := 0.
	v do: [:it | s := s + it].
	^ s
!
_group_by: src keyFn: blk
	| groups order |
	groups := Dictionary new.
	order := OrderedCollection new.
	src do: [:it |
		| key ks g |
		key := blk value: it.
		ks := key printString.
		g := groups at: ks ifAbsentPut: [ |_g | _g := _Group key: key. order add: ks. groups at: ks put: _g. _g ].
		g add: it.
	]
	^ order collect: [:k | groups at: k ]
!
!!
store_returns := Array with: (Dictionary from: {'sr_returned_date_sk' -> 1. 'sr_customer_sk' -> 1. 'sr_store_sk' -> 10. 'sr_return_amt' -> 20.000000}) with: (Dictionary from: {'sr_returned_date_sk' -> 1. 'sr_customer_sk' -> 2. 'sr_store_sk' -> 10. 'sr_return_amt' -> 50.000000}).
date_dim := Array with: (Dictionary from: {'d_date_sk' -> 1. 'd_year' -> 1998}).
store := Array with: (Dictionary from: {'s_store_sk' -> 10. 's_state' -> 'TN'}).
customer := Array with: (Dictionary from: {'c_customer_sk' -> 1. 'c_customer_id' -> 'C1'}) with: (Dictionary from: {'c_customer_sk' -> 2. 'c_customer_id' -> 'C2'}).
customer_total_return := ((| rows groups |
rows := OrderedCollection new.
(store_returns) do: [:sr |
	rows add: sr.
]
groups := (Main _group_by: rows keyFn: [:sr | Dictionary from: {'customer_sk' -> sr at: 'sr_customer_sk'. 'store_sk' -> sr at: 'sr_store_sk'}]).
rows := OrderedCollection new.
(groups) do: [:g |
	rows add: Dictionary from: {'ctr_customer_sk' -> g at: 'key' at: 'customer_sk'. 'ctr_store_sk' -> g at: 'key' at: 'store_sk'. 'ctr_total_return' -> (Main __sum: ((| res |
res := OrderedCollection new.
(g) do: [:x |
	res add: x at: 'sr_return_amt'.
]
res := res asArray.
res)))}.
]
rows := rows asArray.
rows)).
result := ((| res |
res := OrderedCollection new.
((customer_total_return) select: [:ctr1 | ((((((ctr1 at: 'ctr_total_return' > (Main __avg: ((| res |
res := OrderedCollection new.
((customer_total_return) select: [:ctr2 | (ctr1 at: 'ctr_store_sk' = ctr2 at: 'ctr_store_sk')]) do: [:ctr2 |
	res add: ctr2 at: 'ctr_total_return'.
]
res := res asArray.
res)))) * 1.200000) and: [s at: 's_state']) = 'TN') and: [(ctr1 at: 'ctr_store_sk' = s at: 's_store_sk')]) and: [(ctr1 at: 'ctr_customer_sk' = c at: 'c_customer_sk')])]) do: [:ctr1 |
	(store) do: [:s |
		(customer) do: [:c |
			res add: { c at: 'c_customer_id' . Dictionary from: {'c_customer_id' -> c at: 'c_customer_id'} }.
		]
	]
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_TPCDS_Q1_result.
