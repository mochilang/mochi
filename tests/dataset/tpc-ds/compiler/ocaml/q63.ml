(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable mgr : int; mutable amount : int }
type record2 = { mutable mgr : int }
type record3 = { mutable mgr : Obj.t; mutable sum_sales : float }
type record4 = { mutable mgr : int; mutable sum_sales : float }

let sales : record1 list = [{ mgr = 1; amount = 30 };{ mgr = 2; amount = 33 }]
let by_mgr : record4 list = (let (__groups0 : (record2 * record1 list) list ref) = ref [] in
  List.iter (fun (s : record1) ->
      let (key : record2) = [("mgr",Obj.repr (s.mgr))] in
      let cur = try List.assoc key !__groups0 with Not_found -> [] in
      __groups0 := (key, s :: cur) :: List.remove_assoc key !__groups0;
  ) sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record2), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { mgr = g.key.mgr; sum_sales = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.amount :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let result : float = (sum_float (let __res2 = ref [] in
  List.iter (fun (x : record4) ->
      __res2 := x.sum_sales :: !__res2;
  ) by_mgr;
List.rev !__res2)
)

let () =
  json result;
  assert ((result = 63))
