(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type record1 = { mutable ss_quantity : int; mutable ss_ext_discount_amt : float; mutable ss_net_paid : float }
type record2 = { mutable r_reason_sk : int }
type record3 = { mutable bucket1 : float; mutable bucket2 : float; mutable bucket3 : float; mutable bucket4 : float; mutable bucket5 : float }

let store_sales : record1 list = [{ ss_quantity = 5; ss_ext_discount_amt = 5.; ss_net_paid = 7. };{ ss_quantity = 30; ss_ext_discount_amt = 10.; ss_net_paid = 15. };{ ss_quantity = 50; ss_ext_discount_amt = 20.; ss_net_paid = 30. };{ ss_quantity = 70; ss_ext_discount_amt = 25.; ss_net_paid = 35. };{ ss_quantity = 90; ss_ext_discount_amt = 40.; ss_net_paid = 50. }]
let reason : record2 list = [[("r_reason_sk",Obj.repr (1))]]
let bucket1 : float = (if (List.length (let __res0 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
    __res0 := s :: !__res0;
  ) store_sales;
List.rev !__res0)
 > 10) then (float_of_int (List.fold_left (+) 0 (let __res1 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
    __res1 := s.ss_ext_discount_amt :: !__res1;
  ) store_sales;
List.rev !__res1)
) /. float_of_int (List.length (let __res1 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
    __res1 := s.ss_ext_discount_amt :: !__res1;
  ) store_sales;
List.rev !__res1)
)) else (float_of_int (List.fold_left (+) 0 (let __res2 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
    __res2 := s.ss_net_paid :: !__res2;
  ) store_sales;
List.rev !__res2)
) /. float_of_int (List.length (let __res2 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
    __res2 := s.ss_net_paid :: !__res2;
  ) store_sales;
List.rev !__res2)
)))
let bucket2 : float = (if (List.length (let __res3 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
    __res3 := s :: !__res3;
  ) store_sales;
List.rev !__res3)
 > 20) then (float_of_int (List.fold_left (+) 0 (let __res4 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
    __res4 := s.ss_ext_discount_amt :: !__res4;
  ) store_sales;
List.rev !__res4)
) /. float_of_int (List.length (let __res4 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
    __res4 := s.ss_ext_discount_amt :: !__res4;
  ) store_sales;
List.rev !__res4)
)) else (float_of_int (List.fold_left (+) 0 (let __res5 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
    __res5 := s.ss_net_paid :: !__res5;
  ) store_sales;
List.rev !__res5)
) /. float_of_int (List.length (let __res5 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
    __res5 := s.ss_net_paid :: !__res5;
  ) store_sales;
List.rev !__res5)
)))
let bucket3 : float = (if (List.length (let __res6 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
    __res6 := s :: !__res6;
  ) store_sales;
List.rev !__res6)
 > 30) then (float_of_int (List.fold_left (+) 0 (let __res7 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
    __res7 := s.ss_ext_discount_amt :: !__res7;
  ) store_sales;
List.rev !__res7)
) /. float_of_int (List.length (let __res7 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
    __res7 := s.ss_ext_discount_amt :: !__res7;
  ) store_sales;
List.rev !__res7)
)) else (float_of_int (List.fold_left (+) 0 (let __res8 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
    __res8 := s.ss_net_paid :: !__res8;
  ) store_sales;
List.rev !__res8)
) /. float_of_int (List.length (let __res8 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
    __res8 := s.ss_net_paid :: !__res8;
  ) store_sales;
List.rev !__res8)
)))
let bucket4 : float = (if (List.length (let __res9 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
    __res9 := s :: !__res9;
  ) store_sales;
List.rev !__res9)
 > 40) then (float_of_int (List.fold_left (+) 0 (let __res10 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
    __res10 := s.ss_ext_discount_amt :: !__res10;
  ) store_sales;
List.rev !__res10)
) /. float_of_int (List.length (let __res10 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
    __res10 := s.ss_ext_discount_amt :: !__res10;
  ) store_sales;
List.rev !__res10)
)) else (float_of_int (List.fold_left (+) 0 (let __res11 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
    __res11 := s.ss_net_paid :: !__res11;
  ) store_sales;
List.rev !__res11)
) /. float_of_int (List.length (let __res11 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
    __res11 := s.ss_net_paid :: !__res11;
  ) store_sales;
List.rev !__res11)
)))
let bucket5 : float = (if (List.length (let __res12 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
    __res12 := s :: !__res12;
  ) store_sales;
List.rev !__res12)
 > 50) then (float_of_int (List.fold_left (+) 0 (let __res13 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
    __res13 := s.ss_ext_discount_amt :: !__res13;
  ) store_sales;
List.rev !__res13)
) /. float_of_int (List.length (let __res13 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
    __res13 := s.ss_ext_discount_amt :: !__res13;
  ) store_sales;
List.rev !__res13)
)) else (float_of_int (List.fold_left (+) 0 (let __res14 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
    __res14 := s.ss_net_paid :: !__res14;
  ) store_sales;
List.rev !__res14)
) /. float_of_int (List.length (let __res14 = ref [] in
  List.iter (fun (s : record1) ->
      if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
    __res14 := s.ss_net_paid :: !__res14;
  ) store_sales;
List.rev !__res14)
)))
let result : record3 list = (let __res15 = ref [] in
  List.iter (fun r ->
      if (Obj.obj (List.assoc "r_reason_sk" r) = 1) then
    __res15 := { bucket1 = bucket1; bucket2 = bucket2; bucket3 = bucket3; bucket4 = bucket4; bucket5 = bucket5 } :: !__res15;
  ) reason;
List.rev !__res15)


let () =
  json result;
  assert ((result = [{ bucket1 = 7.; bucket2 = 15.; bucket3 = 30.; bucket4 = 35.; bucket5 = 50. }]))
