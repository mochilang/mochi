(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_store_sk : int; mutable ss_sold_date_sk : int; mutable ss_hdemo_sk : int; mutable ss_cdemo_sk : int; mutable ss_addr_sk : int; mutable ss_sales_price : float; mutable ss_net_profit : float; mutable ss_quantity : int; mutable ss_ext_sales_price : float; mutable ss_ext_wholesale_cost : float }
type record2 = { mutable s_store_sk : int; mutable s_state : string }
type record3 = { mutable cd_demo_sk : int; mutable cd_marital_status : string; mutable cd_education_status : string }
type record4 = { mutable hd_demo_sk : int; mutable hd_dep_count : int }
type record5 = { mutable ca_address_sk : int; mutable ca_country : string; mutable ca_state : string }
type record6 = { mutable d_date_sk : int; mutable d_year : int }
type record7 = { mutable avg_ss_quantity : float; mutable avg_ss_ext_sales_price : float; mutable avg_ss_ext_wholesale_cost : float; mutable sum_ss_ext_wholesale_cost : float }

type storesale = { mutable ss_store_sk : int; mutable ss_sold_date_sk : int; mutable ss_hdemo_sk : int; mutable ss_cdemo_sk : int; mutable ss_addr_sk : int; mutable ss_sales_price : float; mutable ss_net_profit : float; mutable ss_quantity : int; mutable ss_ext_sales_price : float; mutable ss_ext_wholesale_cost : float }
type store = { mutable s_store_sk : int; mutable s_state : string }
type customerdemographics = { mutable cd_demo_sk : int; mutable cd_marital_status : string; mutable cd_education_status : string }
type householddemographics = { mutable hd_demo_sk : int; mutable hd_dep_count : int }
type customeraddress = { mutable ca_address_sk : int; mutable ca_country : string; mutable ca_state : string }
type datedim = { mutable d_date_sk : int; mutable d_year : int }
let store_sales : record1 list = [{ ss_store_sk = 1; ss_sold_date_sk = 1; ss_hdemo_sk = 1; ss_cdemo_sk = 1; ss_addr_sk = 1; ss_sales_price = 120.; ss_net_profit = 150.; ss_quantity = 10; ss_ext_sales_price = 100.; ss_ext_wholesale_cost = 50. }]
let store : record2 list = [{ s_store_sk = 1; s_state = "CA" }]
let customer_demographics : record3 list = [{ cd_demo_sk = 1; cd_marital_status = "M1"; cd_education_status = "ES1" }]
let household_demographics : record4 list = [{ hd_demo_sk = 1; hd_dep_count = 3 }]
let customer_address : record5 list = [{ ca_address_sk = 1; ca_country = "United States"; ca_state = "CA" }]
let date_dim : record6 list = [{ d_date_sk = 1; d_year = 2001 }]
let filtered : record1 list = (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (s : record2) ->
            List.iter (fun (cd : record3) ->
                    List.iter (fun (hd : record4) ->
                              List.iter (fun (ca : record5) ->
                                          List.iter (fun (d : record6) ->
                                                                  if (ss.ss_store_sk = s.s_store_sk) && (((ss.ss_cdemo_sk = cd.cd_demo_sk) && (cd.cd_marital_status = "M1")) && (cd.cd_education_status = "ES1")) && ((ss.ss_hdemo_sk = hd.hd_demo_sk) && (hd.hd_dep_count = 3)) && (((ss.ss_addr_sk = ca.ca_address_sk) && (ca.ca_country = "United States")) && (ca.ca_state = "CA")) && ((ss.ss_sold_date_sk = d.d_date_sk) && (d.d_year = 2001)) then
              __res0 := ss :: !__res0;
                                          ) date_dim;
                              ) customer_address;
                    ) household_demographics;
            ) customer_demographics;
      ) store;
  ) store_sales;
List.rev !__res0)

let result : record7 list = (let (__groups1 : ((Obj.t * Obj.t) list * record1 list) list ref) = ref [] in
  List.iter (fun (r : record1) ->
      let (key : (Obj.t * Obj.t) list) = [] in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, r :: cur) :: List.remove_assoc key !__groups1;
  ) filtered;
  let __res1 = ref [] in
  List.iter (fun ((gKey : (Obj.t * Obj.t) list), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { avg_ss_quantity = (float_of_int (List.fold_left (+) 0 (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.ss_quantity :: !__res2;
  ) g.items;
List.rev !__res2)
) /. float_of_int (List.length (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.ss_quantity :: !__res2;
  ) g.items;
List.rev !__res2)
)); avg_ss_ext_sales_price = (List.fold_left (+.) 0.0 (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.ss_ext_sales_price :: !__res3;
  ) g.items;
List.rev !__res3)
 /. float_of_int (List.length (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.ss_ext_sales_price :: !__res3;
  ) g.items;
List.rev !__res3)
)); avg_ss_ext_wholesale_cost = (List.fold_left (+.) 0.0 (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.ss_ext_wholesale_cost :: !__res4;
  ) g.items;
List.rev !__res4)
 /. float_of_int (List.length (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.ss_ext_wholesale_cost :: !__res4;
  ) g.items;
List.rev !__res4)
)); sum_ss_ext_wholesale_cost = (sum_float (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.ss_ext_wholesale_cost :: !__res5;
  ) g.items;
List.rev !__res5)
) } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ avg_ss_quantity = 10.; avg_ss_ext_sales_price = 100.; avg_ss_ext_wholesale_cost = 50.; sum_ss_ext_wholesale_cost = 50. }]))
