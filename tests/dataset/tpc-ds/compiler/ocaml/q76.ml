(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable d_date_sk : int; mutable d_year : int; mutable d_qoy : int }
type record2 = { mutable i_item_sk : int; mutable i_category : string }
type record3 = { mutable ss_customer_sk : Obj.t; mutable ss_item_sk : int; mutable ss_ext_sales_price : float; mutable ss_sold_date_sk : int }
type record4 = { mutable ws_bill_customer_sk : Obj.t; mutable ws_item_sk : int; mutable ws_ext_sales_price : float; mutable ws_sold_date_sk : int }
type record5 = { mutable cs_bill_customer_sk : Obj.t; mutable cs_item_sk : int; mutable cs_ext_sales_price : float; mutable cs_sold_date_sk : int }
type record6 = { mutable channel : string; mutable col_name : Obj.t; mutable d_year : int; mutable d_qoy : int; mutable i_category : string; mutable ext_sales_price : float }
type record7 = { mutable channel : Obj.t; mutable col_name : Obj.t; mutable d_year : Obj.t; mutable d_qoy : Obj.t; mutable i_category : Obj.t }
type record8 = { mutable channel : Obj.t; mutable col_name : Obj.t; mutable d_year : Obj.t; mutable d_qoy : Obj.t; mutable i_category : Obj.t; mutable sales_cnt : int; mutable sales_amt : float }
type record9 = { mutable channel : string; mutable col_name : Obj.t; mutable d_year : int; mutable d_qoy : int; mutable i_category : string; mutable sales_cnt : int; mutable sales_amt : float }

let date_dim : record1 list = [{ d_date_sk = 1; d_year = 1998; d_qoy = 1 }]
let item : record2 list = [{ i_item_sk = 1; i_category = "CatA" };{ i_item_sk = 2; i_category = "CatB" };{ i_item_sk = 3; i_category = "CatC" }]
let store_sales : record3 list = [{ ss_customer_sk = (); ss_item_sk = 1; ss_ext_sales_price = 10.; ss_sold_date_sk = 1 }]
let web_sales : record4 list = [{ ws_bill_customer_sk = (); ws_item_sk = 2; ws_ext_sales_price = 15.; ws_sold_date_sk = 1 }]
let catalog_sales : record5 list = [{ cs_bill_customer_sk = (); cs_item_sk = 3; cs_ext_sales_price = 20.; cs_sold_date_sk = 1 }]
let store_part : record6 list = (let __res0 = ref [] in
  List.iter (fun (ss : record3) ->
      List.iter (fun (i : record2) ->
            List.iter (fun (d : record1) ->
                        if (i.i_item_sk = ss.ss_item_sk) && (d.d_date_sk = ss.ss_sold_date_sk) && (ss.ss_customer_sk = ()) then
        __res0 := { channel = "store"; col_name = ss.ss_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = ss.ss_ext_sales_price } :: !__res0;
            ) date_dim;
      ) item;
  ) store_sales;
List.rev !__res0)

let web_part : record6 list = (let __res1 = ref [] in
  List.iter (fun (ws : record4) ->
      List.iter (fun (i : record2) ->
            List.iter (fun (d : record1) ->
                        if (i.i_item_sk = ws.ws_item_sk) && (d.d_date_sk = ws.ws_sold_date_sk) && (ws.ws_bill_customer_sk = ()) then
        __res1 := { channel = "web"; col_name = ws.ws_bill_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = ws.ws_ext_sales_price } :: !__res1;
            ) date_dim;
      ) item;
  ) web_sales;
List.rev !__res1)

let catalog_part : record6 list = (let __res2 = ref [] in
  List.iter (fun (cs : record5) ->
      List.iter (fun (i : record2) ->
            List.iter (fun (d : record1) ->
                        if (i.i_item_sk = cs.cs_item_sk) && (d.d_date_sk = cs.cs_sold_date_sk) && (cs.cs_bill_customer_sk = ()) then
        __res2 := { channel = "catalog"; col_name = cs.cs_bill_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = cs.cs_ext_sales_price } :: !__res2;
            ) date_dim;
      ) item;
  ) catalog_sales;
List.rev !__res2)

let all_rows : Obj.t list = concat store_part web_part catalog_part
let result : record8 list = (let (__groups3 : (record7 * Obj.t list) list ref) = ref [] in
  List.iter (fun r ->
      let (key : record7) = { channel = r.channel; col_name = r.col_name; d_year = r.d_year; d_qoy = r.d_qoy; i_category = r.i_category } in
      let cur = try List.assoc key !__groups3 with Not_found -> [] in
      __groups3 := (key, r :: cur) :: List.remove_assoc key !__groups3;
  ) all_rows;
  let __res3 = ref [] in
  List.iter (fun ((gKey : record7), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res3 := { channel = g.key.channel; col_name = g.key.col_name; d_year = g.key.d_year; d_qoy = g.key.d_qoy; i_category = g.key.i_category; sales_cnt = List.length g.items; sales_amt = (sum_float (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.r.ext_sales_price :: !__res4;
  ) g.items;
List.rev !__res4)
) } :: !__res3
  ) !__groups3;
  List.rev !__res3)


let () =
  json result;
  assert ((result = [{ channel = "store"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatA"; sales_cnt = 1; sales_amt = 10. };{ channel = "web"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatB"; sales_cnt = 1; sales_amt = 15. };{ channel = "catalog"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatC"; sales_cnt = 1; sales_amt = 20. }]))
