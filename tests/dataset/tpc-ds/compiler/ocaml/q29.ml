(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_store_sk : int; mutable ss_customer_sk : int; mutable ss_quantity : int; mutable ss_ticket_number : int }
type record2 = { mutable sr_returned_date_sk : int; mutable sr_item_sk : int; mutable sr_customer_sk : int; mutable sr_ticket_number : int; mutable sr_return_quantity : int }
type record3 = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int }
type record4 = { mutable d_date_sk : int; mutable d_moy : int; mutable d_year : int }
type record5 = { mutable s_store_sk : int; mutable s_store_id : string; mutable s_store_name : string }
type record6 = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string }
type record7 = { mutable ss_quantity : int; mutable sr_return_quantity : int; mutable cs_quantity : int; mutable i_item_id : string; mutable i_item_desc : string; mutable s_store_id : string; mutable s_store_name : string }
type record8 = { mutable item_id : string; mutable item_desc : string; mutable s_store_id : string; mutable s_store_name : string }
type record9 = { mutable i_item_id : Obj.t; mutable i_item_desc : Obj.t; mutable s_store_id : Obj.t; mutable s_store_name : Obj.t; mutable store_sales_quantity : float; mutable store_returns_quantity : float; mutable catalog_sales_quantity : float }
type record10 = { mutable i_item_id : string; mutable i_item_desc : string; mutable s_store_id : string; mutable s_store_name : string; mutable store_sales_quantity : float; mutable store_returns_quantity : float; mutable catalog_sales_quantity : float }
type record11 = { mutable i_item_id : string; mutable i_item_desc : string; mutable s_store_id : string; mutable s_store_name : string; mutable store_sales_quantity : int; mutable store_returns_quantity : int; mutable catalog_sales_quantity : int }

type storesale = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_store_sk : int; mutable ss_customer_sk : int; mutable ss_quantity : int; mutable ss_ticket_number : int }
type storereturn = { mutable sr_returned_date_sk : int; mutable sr_item_sk : int; mutable sr_customer_sk : int; mutable sr_ticket_number : int; mutable sr_return_quantity : int }
type catalogsale = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int }
type datedim = { mutable d_date_sk : int; mutable d_moy : int; mutable d_year : int }
type store = { mutable s_store_sk : int; mutable s_store_id : string; mutable s_store_name : string }
type item = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string }
let store_sales : record1 list = [{ ss_sold_date_sk = 1; ss_item_sk = 1; ss_store_sk = 1; ss_customer_sk = 1; ss_quantity = 10; ss_ticket_number = 1 }]
let store_returns : record2 list = [{ sr_returned_date_sk = 2; sr_item_sk = 1; sr_customer_sk = 1; sr_ticket_number = 1; sr_return_quantity = 2 }]
let catalog_sales : record3 list = [{ cs_sold_date_sk = 3; cs_item_sk = 1; cs_bill_customer_sk = 1; cs_quantity = 5 }]
let date_dim : record4 list = [{ d_date_sk = 1; d_moy = 4; d_year = 1999 };{ d_date_sk = 2; d_moy = 5; d_year = 1999 };{ d_date_sk = 3; d_moy = 5; d_year = 2000 }]
let store : record5 list = [{ s_store_sk = 1; s_store_id = "S1"; s_store_name = "Store1" }]
let item : record6 list = [{ i_item_sk = 1; i_item_id = "ITEM1"; i_item_desc = "Desc1" }]
let base : record7 list = (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (sr : record2) ->
            List.iter (fun (cs : record3) ->
                    List.iter (fun (d1 : record4) ->
                              List.iter (fun (d2 : record4) ->
                                          List.iter (fun (d3 : record4) ->
                                                        List.iter (fun (s : record5) ->
                                                                        List.iter (fun (i : record6) ->
                                                                                                        if ((ss.ss_ticket_number = sr.sr_ticket_number) && (ss.ss_item_sk = sr.sr_item_sk)) && ((sr.sr_customer_sk = cs.cs_bill_customer_sk) && (sr.sr_item_sk = cs.cs_item_sk)) && (d1.d_date_sk = ss.ss_sold_date_sk) && (d2.d_date_sk = sr.sr_returned_date_sk) && (d3.d_date_sk = cs.cs_sold_date_sk) && (s.s_store_sk = ss.ss_store_sk) && (i.i_item_sk = ss.ss_item_sk) && (List.mem (((((d1.d_moy = 4) && (d1.d_year = 1999)) && (d2.d_moy >= 4)) && (d2.d_moy <= 7)) && d3.d_year) [1999;2000;2001]) then
                  __res0 := { ss_quantity = ss.ss_quantity; sr_return_quantity = sr.sr_return_quantity; cs_quantity = cs.cs_quantity; i_item_id = i.i_item_id; i_item_desc = i.i_item_desc; s_store_id = s.s_store_id; s_store_name = s.s_store_name } :: !__res0;
                                                                        ) item;
                                                        ) store;
                                          ) date_dim;
                              ) date_dim;
                    ) date_dim;
            ) catalog_sales;
      ) store_returns;
  ) store_sales;
List.rev !__res0)

let result : record10 list = (let (__groups1 : (record8 * record7 list) list ref) = ref [] in
  List.iter (fun (b : record7) ->
      let (key : record8) = { item_id = b.i_item_id; item_desc = b.i_item_desc; s_store_id = b.s_store_id; s_store_name = b.s_store_name } in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, b :: cur) :: List.remove_assoc key !__groups1;
  ) base;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { i_item_id = g.key.item_id; i_item_desc = g.key.item_desc; s_store_id = g.key.s_store_id; s_store_name = g.key.s_store_name; store_sales_quantity = (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.ss_quantity :: !__res2;
  ) g.items;
List.rev !__res2)
); store_returns_quantity = (sum_float (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.sr_return_quantity :: !__res3;
  ) g.items;
List.rev !__res3)
); catalog_sales_quantity = (sum_float (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.cs_quantity :: !__res4;
  ) g.items;
List.rev !__res4)
) } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ i_item_id = "ITEM1"; i_item_desc = "Desc1"; s_store_id = "S1"; s_store_name = "Store1"; store_sales_quantity = 10; store_returns_quantity = 2; catalog_sales_quantity = 5 }]))
