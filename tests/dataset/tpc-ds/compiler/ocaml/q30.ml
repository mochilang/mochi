(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable wr_returning_customer_sk : int; mutable wr_returned_date_sk : int; mutable wr_return_amt : float; mutable wr_returning_addr_sk : int }
type record2 = { mutable d_date_sk : int; mutable d_year : int }
type record3 = { mutable ca_address_sk : int; mutable ca_state : string }
type record4 = { mutable c_customer_sk : int; mutable c_customer_id : string; mutable c_first_name : string; mutable c_last_name : string; mutable c_current_addr_sk : int }
type record5 = { mutable cust : int; mutable state : string }
type record6 = { mutable ctr_customer_sk : Obj.t; mutable ctr_state : Obj.t; mutable ctr_total_return : float }
type record7 = { mutable ctr_customer_sk : int; mutable ctr_state : string; mutable ctr_total_return : float }
type record8 = { mutable state : Obj.t; mutable avg_return : float }
type record9 = { mutable state : string; mutable avg_return : float }
type record10 = { mutable c_customer_id : string; mutable c_first_name : string; mutable c_last_name : string; mutable ctr_total_return : float }

let web_returns : record1 list = [{ wr_returning_customer_sk = 1; wr_returned_date_sk = 1; wr_return_amt = 100.; wr_returning_addr_sk = 1 };{ wr_returning_customer_sk = 2; wr_returned_date_sk = 1; wr_return_amt = 30.; wr_returning_addr_sk = 2 };{ wr_returning_customer_sk = 1; wr_returned_date_sk = 1; wr_return_amt = 50.; wr_returning_addr_sk = 1 }]
let date_dim : record2 list = [{ d_date_sk = 1; d_year = 2000 }]
let customer_address : record3 list = [{ ca_address_sk = 1; ca_state = "CA" };{ ca_address_sk = 2; ca_state = "CA" }]
let customer : record4 list = [{ c_customer_sk = 1; c_customer_id = "C1"; c_first_name = "John"; c_last_name = "Doe"; c_current_addr_sk = 1 };{ c_customer_sk = 2; c_customer_id = "C2"; c_first_name = "Jane"; c_last_name = "Smith"; c_current_addr_sk = 2 }]
let customer_total_return : record7 list = (let (__groups0 : (record5 * record1 list) list ref) = ref [] in
  List.iter (fun (wr : record1) ->
      List.iter (fun (d : record2) ->
            List.iter (fun (ca : record3) ->
                        if (wr.wr_returned_date_sk = d.d_date_sk) && (wr.wr_returning_addr_sk = ca.ca_address_sk) && ((d.d_year = 2000) && (ca.ca_state = "CA")) then (
          let (key : record5) = { cust = wr.wr_returning_customer_sk; state = ca.ca_state } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, wr :: cur) :: List.remove_assoc key !__groups0);
            ) customer_address;
      ) date_dim;
  ) web_returns;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { ctr_customer_sk = g.key.cust; ctr_state = g.key.state; ctr_total_return = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.wr_return_amt :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let avg_by_state : record9 list = (let (__groups2 : (string * record7 list) list ref) = ref [] in
  List.iter (fun (ctr : record7) ->
      let (key : string) = ctr.ctr_state in
      let cur = try List.assoc key !__groups2 with Not_found -> [] in
      __groups2 := (key, ctr :: cur) :: List.remove_assoc key !__groups2;
  ) customer_total_return;
  let __res2 = ref [] in
  List.iter (fun ((gKey : string), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res2 := { state = g.key; avg_return = (List.fold_left (+.) 0.0 (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.ctr_total_return :: !__res3;
  ) g.items;
List.rev !__res3)
 /. float_of_int (List.length (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.ctr_total_return :: !__res3;
  ) g.items;
List.rev !__res3)
)) } :: !__res2
  ) !__groups2;
  List.rev !__res2)

let result : record10 list = (let __res4 = ref [] in
  List.iter (fun (ctr : record7) ->
      List.iter (fun (avg : record9) ->
            List.iter (fun (c : record4) ->
                        if (ctr.ctr_state = avg.state) && (ctr.ctr_customer_sk = c.c_customer_sk) && ((ctr.ctr_total_return > avg.avg_return) *. 1.2) then
        __res4 := { c_customer_id = c.c_customer_id; c_first_name = c.c_first_name; c_last_name = c.c_last_name; ctr_total_return = ctr.ctr_total_return } :: !__res4;
            ) customer;
      ) avg_by_state;
  ) customer_total_return;
List.rev !__res4)


let () =
  json result;
  assert ((result = [{ c_customer_id = "C1"; c_first_name = "John"; c_last_name = "Doe"; ctr_total_return = 150. }]))
