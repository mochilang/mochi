(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_store_sk : int; mutable ss_sold_date_sk : int; mutable ss_net_profit : float }
type record2 = { mutable d_date_sk : int; mutable d_qoy : int; mutable d_year : int }
type record3 = { mutable s_store_sk : int; mutable s_store_name : string; mutable s_zip : string }
type record4 = { mutable ca_address_sk : int; mutable ca_zip : string }
type record5 = { mutable c_customer_sk : int; mutable c_current_addr_sk : int; mutable c_preferred_cust_flag : string }
type record6 = { mutable s_store_name : Obj.t; mutable net_profit : float }
type record7 = { mutable s_store_name : string; mutable net_profit : float }

let store_sales : record1 list = [{ ss_store_sk = 1; ss_sold_date_sk = 1; ss_net_profit = 10. }]
let date_dim : record2 list = [{ d_date_sk = 1; d_qoy = 1; d_year = 1998 }]
let store : record3 list = [{ s_store_sk = 1; s_store_name = "Store1"; s_zip = "12345" }]
let customer_address : record4 list = [{ ca_address_sk = 1; ca_zip = "12345" }]
let customer : record5 list = [{ c_customer_sk = 1; c_current_addr_sk = 1; c_preferred_cust_flag = "Y" }]
let zip_list : string list = ["12345"]
let result : record7 list = (let (__groups0 : (string * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (d : record2) ->
            List.iter (fun (s : record3) ->
                    List.iter (fun (ca : record4) ->
                              List.iter (fun (c : record5) ->
                                                  if (((ss.ss_sold_date_sk = d.d_date_sk) && (d.d_qoy = 1)) && (d.d_year = 1998)) && (ss.ss_store_sk = s.s_store_sk) && (substr s.s_zip 0 2 = substr ca.ca_zip 0 2) && ((ca.ca_address_sk = c.c_current_addr_sk) && (c.c_preferred_cust_flag = "Y")) && (List.mem substr ca.ca_zip 0 5 zip_list) then (
              let (key : string) = s.s_store_name in
              let cur = try List.assoc key !__groups0 with Not_found -> [] in
              __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
                              ) customer;
                    ) customer_address;
            ) store;
      ) date_dim;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : string), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { s_store_name = g.key; net_profit = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss.ss_net_profit :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  reverse substr "zip" 0 2;
  json result;
  assert ((result = [{ s_store_name = "Store1"; net_profit = 10. }]))
