(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_brand : string; mutable i_manager_id : int }
type record2 = { mutable t_time_sk : int; mutable t_hour : int; mutable t_minute : int; mutable t_meal_time : string }
type record3 = { mutable d_date_sk : int; mutable d_moy : int; mutable d_year : int }
type record4 = { mutable ws_ext_sales_price : float; mutable ws_sold_date_sk : int; mutable ws_item_sk : int; mutable ws_sold_time_sk : int }
type record5 = { mutable cs_ext_sales_price : float; mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_sold_time_sk : int }
type record6 = { mutable ss_ext_sales_price : float; mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_sold_time_sk : int }
type record7 = { mutable ext_price : float; mutable item_sk : int; mutable time_sk : int }
type record8 = { mutable brand_id : int; mutable brand : string; mutable t_hour : int; mutable t_minute : int }
type record9 = { mutable i_brand_id : Obj.t; mutable i_brand : Obj.t; mutable t_hour : Obj.t; mutable t_minute : Obj.t; mutable ext_price : float }
type record10 = { mutable i_brand_id : int; mutable i_brand : string; mutable t_hour : int; mutable t_minute : int; mutable ext_price : float }

let item : record1 list = [{ i_item_sk = 1; i_brand_id = 10; i_brand = "BrandA"; i_manager_id = 1 };{ i_item_sk = 2; i_brand_id = 20; i_brand = "BrandB"; i_manager_id = 1 }]
let time_dim : record2 list = [{ t_time_sk = 1; t_hour = 8; t_minute = 30; t_meal_time = "breakfast" };{ t_time_sk = 2; t_hour = 18; t_minute = 0; t_meal_time = "dinner" };{ t_time_sk = 3; t_hour = 12; t_minute = 0; t_meal_time = "lunch" }]
let date_dim : record3 list = [{ d_date_sk = 1; d_moy = 12; d_year = 1998 }]
let web_sales : record4 list = [{ ws_ext_sales_price = 100.; ws_sold_date_sk = 1; ws_item_sk = 1; ws_sold_time_sk = 1 }]
let catalog_sales : record5 list = [{ cs_ext_sales_price = 200.; cs_sold_date_sk = 1; cs_item_sk = 1; cs_sold_time_sk = 2 }]
let store_sales : record6 list = [{ ss_ext_sales_price = 150.; ss_sold_date_sk = 1; ss_item_sk = 2; ss_sold_time_sk = 1 }]
let month : int = 12
let year : int = 1998
let union_sales : Obj.t list = concat (let __res0 = ref [] in
  List.iter (fun ws ->
    List.iter (fun d ->
      if (d.d_date_sk = ws.ws_sold_date_sk) then (
        if ((d.d_moy = month) && (d.d_year = year)) then __res0 := { ext_price = ws.ws_ext_sales_price; item_sk = ws.ws_item_sk; time_sk = ws.ws_sold_time_sk } :: !__res0;
      )
    ) date_dim;
  ) web_sales;
  List.rev !__res0)
 (let __res1 = ref [] in
  List.iter (fun cs ->
    List.iter (fun d ->
      if (d.d_date_sk = cs.cs_sold_date_sk) then (
        if ((d.d_moy = month) && (d.d_year = year)) then __res1 := { ext_price = cs.cs_ext_sales_price; item_sk = cs.cs_item_sk; time_sk = cs.cs_sold_time_sk } :: !__res1;
      )
    ) date_dim;
  ) catalog_sales;
  List.rev !__res1)
 (let __res2 = ref [] in
  List.iter (fun ss ->
    List.iter (fun d ->
      if (d.d_date_sk = ss.ss_sold_date_sk) then (
        if ((d.d_moy = month) && (d.d_year = year)) then __res2 := { ext_price = ss.ss_ext_sales_price; item_sk = ss.ss_item_sk; time_sk = ss.ss_sold_time_sk } :: !__res2;
      )
    ) date_dim;
  ) store_sales;
  List.rev !__res2)

let result : record10 list = (let (__groups3 : (record8 * record1 list) list ref) = ref [] in
  List.iter (fun (i : record1) ->
      List.iter (fun s ->
            List.iter (fun (t : record2) ->
                        if (s.item_sk = i.i_item_sk) && (t.t_time_sk = s.time_sk) && ((i.i_manager_id = 1) && (((t.t_meal_time = "breakfast") || (t.t_meal_time = "dinner")))) then (
          let (key : record8) = { brand_id = i.i_brand_id; brand = i.i_brand; t_hour = t.t_hour; t_minute = t.t_minute } in
          let cur = try List.assoc key !__groups3 with Not_found -> [] in
          __groups3 := (key, i :: cur) :: List.remove_assoc key !__groups3);
            ) time_dim;
      ) union_sales;
  ) item;
  let __res3 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res3 := { i_brand_id = g.key.brand_id; i_brand = g.key.brand; t_hour = g.key.t_hour; t_minute = g.key.t_minute; ext_price = (sum_float (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.s.ext_price :: !__res4;
  ) g.items;
List.rev !__res4)
) } :: !__res3
  ) !__groups3;
  List.rev !__res3)


let () =
  json result;
  assert ((result = [{ i_brand_id = 10; i_brand = "BrandA"; t_hour = 18; t_minute = 0; ext_price = 200. };{ i_brand_id = 20; i_brand = "BrandB"; t_hour = 8; t_minute = 30; ext_price = 150. };{ i_brand_id = 10; i_brand = "BrandA"; t_hour = 8; t_minute = 30; ext_price = 100. }]))
