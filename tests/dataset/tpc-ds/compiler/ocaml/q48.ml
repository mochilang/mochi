(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable cdemo_sk : int; mutable addr_sk : int; mutable sold_date_sk : int; mutable sales_price : float; mutable net_profit : float; mutable quantity : int }
type record2 = { mutable s_store_sk : int }
type record3 = { mutable cd_demo_sk : int; mutable cd_marital_status : string; mutable cd_education_status : string }
type record4 = { mutable ca_address_sk : int; mutable ca_country : string; mutable ca_state : string }
type record5 = { mutable d_date_sk : int; mutable d_year : int }

let store_sales : record1 list = [{ cdemo_sk = 1; addr_sk = 1; sold_date_sk = 1; sales_price = 120.; net_profit = 1000.; quantity = 5 };{ cdemo_sk = 2; addr_sk = 2; sold_date_sk = 1; sales_price = 60.; net_profit = 2000.; quantity = 10 };{ cdemo_sk = 3; addr_sk = 3; sold_date_sk = 1; sales_price = 170.; net_profit = 10000.; quantity = 20 }]
let store : record2 list = [[("s_store_sk",Obj.repr (1))]]
let customer_demographics : record3 list = [{ cd_demo_sk = 1; cd_marital_status = "S"; cd_education_status = "E1" };{ cd_demo_sk = 2; cd_marital_status = "M"; cd_education_status = "E2" };{ cd_demo_sk = 3; cd_marital_status = "W"; cd_education_status = "E3" }]
let customer_address : record4 list = [{ ca_address_sk = 1; ca_country = "United States"; ca_state = "TX" };{ ca_address_sk = 2; ca_country = "United States"; ca_state = "CA" };{ ca_address_sk = 3; ca_country = "United States"; ca_state = "NY" }]
let date_dim : record5 list = [{ d_date_sk = 1; d_year = 2000 }]
let year : int = 2000
let states1 : string list = ["TX"]
let states2 : string list = ["CA"]
let states3 : string list = ["NY"]
let qty_base : Obj.t list = (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (cd : record3) ->
            List.iter (fun (ca : record4) ->
                    List.iter (fun (d : record5) ->
                                    if (ss.cdemo_sk = cd.cd_demo_sk) && (ss.addr_sk = ca.ca_address_sk) && (ss.sold_date_sk = d.d_date_sk) && (((d.d_year = year) && ((((((((cd.cd_marital_status = "S") && (cd.cd_education_status = "E1")) && (ss.sales_price >= 100.)) && (ss.sales_price <= 150.))) || (((((cd.cd_marital_status = "M") && (cd.cd_education_status = "E2")) && (ss.sales_price >= 50.)) && (ss.sales_price <= 100.)))) || (((((cd.cd_marital_status = "W") && (cd.cd_education_status = "E3")) && (ss.sales_price >= 150.)) && (ss.sales_price <= 200.)))))) && (((((((List.mem ca.ca_state states1) && (ss.net_profit >= 0)) && (ss.net_profit <= 2000))) || ((((List.mem ca.ca_state states2) && (ss.net_profit >= 150)) && (ss.net_profit <= 3000)))) || ((((List.mem ca.ca_state states3) && (ss.net_profit >= 50)) && (ss.net_profit <= 25000)))))) then
          __res0 := ss.quantity :: !__res0;
                    ) date_dim;
            ) customer_address;
      ) customer_demographics;
  ) store_sales;
List.rev !__res0)

let qty : Obj.t list = qty_base
let result : float = (sum_float qty)

let () =
  json result;
  assert ((result = 35))
