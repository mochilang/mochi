(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable c_customer_sk : int; mutable c_customer_id : string; mutable c_first_name : string; mutable c_last_name : string }
type record2 = { mutable ss_customer_sk : int; mutable ss_sold_date_sk : int; mutable ss_ext_list_price : float }
type record3 = { mutable ws_bill_customer_sk : int; mutable ws_sold_date_sk : int; mutable ws_ext_list_price : float }
type record4 = { mutable customer_id : string; mutable customer_first_name : string; mutable customer_last_name : string }

type customer = { mutable c_customer_sk : int; mutable c_customer_id : string; mutable c_first_name : string; mutable c_last_name : string }
type storesale = { mutable ss_customer_sk : int; mutable ss_sold_date_sk : int; mutable ss_ext_list_price : float }
type websale = { mutable ws_bill_customer_sk : int; mutable ws_sold_date_sk : int; mutable ws_ext_list_price : float }
let customer : record1 list = [{ c_customer_sk = 1; c_customer_id = "C1"; c_first_name = "John"; c_last_name = "Doe" }]
let store_sales : record2 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1998; ss_ext_list_price = 60. };{ ss_customer_sk = 1; ss_sold_date_sk = 1999; ss_ext_list_price = 90. }]
let web_sales : record3 list = [{ ws_bill_customer_sk = 1; ws_sold_date_sk = 1998; ws_ext_list_price = 50. };{ ws_bill_customer_sk = 1; ws_sold_date_sk = 1999; ws_ext_list_price = 150. }]
let ss98 : float = (sum_float (let __res0 = ref [] in
  List.iter (fun (ss : record2) ->
      if (ss.ss_sold_date_sk = 1998) then
    __res0 := ss.ss_ext_list_price :: !__res0;
  ) store_sales;
List.rev !__res0)
)
let ss99 : float = (sum_float (let __res1 = ref [] in
  List.iter (fun (ss : record2) ->
      if (ss.ss_sold_date_sk = 1999) then
    __res1 := ss.ss_ext_list_price :: !__res1;
  ) store_sales;
List.rev !__res1)
)
let ws98 : float = (sum_float (let __res2 = ref [] in
  List.iter (fun (ws : record3) ->
      if (ws.ws_sold_date_sk = 1998) then
    __res2 := ws.ws_ext_list_price :: !__res2;
  ) web_sales;
List.rev !__res2)
)
let ws99 : float = (sum_float (let __res3 = ref [] in
  List.iter (fun (ws : record3) ->
      if (ws.ws_sold_date_sk = 1999) then
    __res3 := ws.ws_ext_list_price :: !__res3;
  ) web_sales;
List.rev !__res3)
)
let growth_ok : bool = (((ws98 > 0) && (ss98 > 0)) && (((ws99 /. ws98)) > ((ss99 /. ss98))))
let result = (if growth_ok then [{ customer_id = "C1"; customer_first_name = "John"; customer_last_name = "Doe" }] else [])

let () =
  json result;
  assert ((result = [{ customer_id = "C1"; customer_first_name = "John"; customer_last_name = "Doe" }]))
