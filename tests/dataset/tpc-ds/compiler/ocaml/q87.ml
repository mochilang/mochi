(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable cust : string; mutable price : float }
type record2 = { mutable cust : string }

let store_sales : record1 list = [{ cust = "A"; price = 5. };{ cust = "B"; price = 30. };{ cust = "C"; price = 57. }]
let catalog_sales : record2 list = [[("cust",Obj.repr ("A"))]]
let web_sales : Obj.t list = []
let store_customers : Obj.t list = (let __res0 = ref [] in
  List.iter (fun (s : record1) ->
      __res0 := s.cust :: !__res0;
  ) store_sales;
List.rev !__res0)

let catalog_customers : string list = (let __res1 = ref [] in
  List.iter (fun s ->
      __res1 := Obj.obj (List.assoc "cust" s) :: !__res1;
  ) catalog_sales;
List.rev !__res1)

let web_customers : Obj.t list = (let __res2 = ref [] in
  List.iter (fun s ->
      __res2 := s.cust :: !__res2;
  ) web_sales;
List.rev !__res2)

let store_only : Obj.t list = (let __res5 = ref [] in
  List.iter (fun c ->
      if ((List.length (let __res3 = ref [] in
  List.iter (fun x ->
      if (x = c) then
    __res3 := x :: !__res3;
  ) catalog_customers;
List.rev !__res3)
 = 0) && (List.length (let __res4 = ref [] in
  List.iter (fun x ->
      if (x = c) then
    __res4 := x :: !__res4;
  ) web_customers;
List.rev !__res4)
 = 0)) then
    __res5 := c :: !__res5;
  ) store_customers;
List.rev !__res5)

let result : float = (sum_float (let __res7 = ref [] in
  List.iter (fun (s : record1) ->
      if (List.length (let __res6 = ref [] in
  List.iter (fun x ->
      if (x = s.cust) then
    __res6 := x :: !__res6;
  ) store_only;
List.rev !__res6)
 > 0) then
    __res7 := s.price :: !__res7;
  ) store_sales;
List.rev !__res7)
)

let () =
  json result;
  assert ((result = 87.))
