(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:15Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable sr_returned_date_sk : int; mutable sr_customer_sk : int; mutable sr_store_sk : int; mutable sr_return_amt : float }
type record2 = { mutable d_date_sk : int; mutable d_year : int }
type record3 = { mutable s_store_sk : int; mutable s_state : string }
type record4 = { mutable c_customer_sk : int; mutable c_customer_id : string }
type record5 = { mutable customer_sk : int; mutable store_sk : int }
type record6 = { mutable ctr_customer_sk : Obj.t; mutable ctr_store_sk : Obj.t; mutable ctr_total_return : float }
type record7 = { mutable ctr_customer_sk : int; mutable ctr_store_sk : int; mutable ctr_total_return : float }
type record8 = { mutable c_customer_id : Obj.t }

let store_returns : record1 list = [{ sr_returned_date_sk = 1; sr_customer_sk = 1; sr_store_sk = 10; sr_return_amt = 20. };{ sr_returned_date_sk = 1; sr_customer_sk = 2; sr_store_sk = 10; sr_return_amt = 50. }]
let date_dim : record2 list = [{ d_date_sk = 1; d_year = 1998 }]
let store : record3 list = [{ s_store_sk = 10; s_state = "TN" }]
let customer : record4 list = [{ c_customer_sk = 1; c_customer_id = "C1" };{ c_customer_sk = 2; c_customer_id = "C2" }]
let customer_total_return : record7 list = (let (__groups0 : (record5 * record1 list) list ref) = ref [] in
  List.iter (fun (sr : record1) ->
      List.iter (fun (d : record2) ->
              if ((sr.sr_returned_date_sk = d.d_date_sk) && (d.d_year = 1998)) then (
        let (key : record5) = { customer_sk = sr.sr_customer_sk; store_sk = sr.sr_store_sk } in
        let cur = try List.assoc key !__groups0 with Not_found -> [] in
        __groups0 := (key, sr :: cur) :: List.remove_assoc key !__groups0);
      ) date_dim;
  ) store_returns;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { ctr_customer_sk = g.key.customer_sk; ctr_store_sk = g.key.store_sk; ctr_total_return = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.sr_return_amt :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let result : record8 list = (let __res3 = ref [] in
  List.iter (fun (ctr1 : record7) ->
      List.iter (fun (s : record3) ->
            List.iter (fun (c : record4) ->
                        if (ctr1.ctr_store_sk = s.s_store_sk) && (ctr1.ctr_customer_sk = c.c_customer_sk) && (((ctr1.ctr_total_return > (float_of_int (List.fold_left (+) 0 (let __res2 = ref [] in
  List.iter (fun (ctr2 : record7) ->
      if (ctr1.ctr_store_sk = ctr2.ctr_store_sk) then
    __res2 := ctr2.ctr_total_return :: !__res2;
  ) customer_total_return;
List.rev !__res2)
) /. float_of_int (List.length (let __res2 = ref [] in
  List.iter (fun (ctr2 : record7) ->
      if (ctr1.ctr_store_sk = ctr2.ctr_store_sk) then
    __res2 := ctr2.ctr_total_return :: !__res2;
  ) customer_total_return;
List.rev !__res2)
))) *. 1.2) && (s.s_state = "TN")) then
        __res3 := [("c_customer_id",Obj.repr (c.c_customer_id))] :: !__res3;
            ) customer;
      ) store;
  ) customer_total_return;
List.rev !__res3)


let () =
  json result;
  assert ((result = [[("c_customer_id",Obj.repr ("C2"))]]))
