(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
type record1 = { mutable ss_sold_year : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_qty : int; mutable ss_wc : float; mutable ss_sp : float }
type record2 = { mutable ws_sold_year : int; mutable ws_item_sk : int; mutable ws_customer_sk : int; mutable ws_qty : int; mutable ws_wc : float; mutable ws_sp : float }
type record3 = { mutable cs_sold_year : int; mutable cs_item_sk : int; mutable cs_customer_sk : int; mutable cs_qty : int; mutable cs_wc : float; mutable cs_sp : float }
type record4 = { mutable ss_sold_year : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ratio : float; mutable store_qty : int; mutable store_wholesale_cost : float; mutable store_sales_price : float; mutable other_chan_qty : int; mutable other_chan_wholesale_cost : float; mutable other_chan_sales_price : float }

let ss : record1 list = [{ ss_sold_year = 1998; ss_item_sk = 1; ss_customer_sk = 1; ss_qty = 10; ss_wc = 50.; ss_sp = 100. }]
let ws : record2 list = [{ ws_sold_year = 1998; ws_item_sk = 1; ws_customer_sk = 1; ws_qty = 5; ws_wc = 25.; ws_sp = 50. }]
let cs : record3 list = [{ cs_sold_year = 1998; cs_item_sk = 1; cs_customer_sk = 1; cs_qty = 3; cs_wc = 15.; cs_sp = 30. }]
let result : record4 list = (let __res0 = ref [] in
  List.iter (fun (s : record1) ->
      List.iter (fun (w : record2) ->
      let matched = ref false in
      List.iter (fun c ->
        if (((w.ws_sold_year = s.ss_sold_year) && (w.ws_item_sk = s.ss_item_sk)) && (w.ws_customer_sk = s.ss_customer_sk)) && (((c.cs_sold_year = s.ss_sold_year) && (c.cs_item_sk = s.ss_item_sk)) && (c.cs_customer_sk = s.ss_customer_sk)) && ((((((if (w = ()) then 0 else w.ws_qty)) > 0) || (((if (c = ()) then 0 else c.cs_qty)) > 0))) && (s.ss_sold_year = 1998)) then (
          __res0 := { ss_sold_year = s.ss_sold_year; ss_item_sk = s.ss_item_sk; ss_customer_sk = s.ss_customer_sk; ratio = (s.ss_qty / ((((if (w = ()) then 0 else w.ws_qty)) + ((if (c = ()) then 0 else c.cs_qty))))); store_qty = s.ss_qty; store_wholesale_cost = s.ss_wc; store_sales_price = s.ss_sp; other_chan_qty = (((if (w = ()) then 0 else w.ws_qty)) + ((if (c = ()) then 0 else c.cs_qty))); other_chan_wholesale_cost = (((if (w = ()) then 0. else w.ws_wc)) +. ((if (c = ()) then 0. else c.cs_wc))); other_chan_sales_price = (((if (w = ()) then 0. else w.ws_sp)) +. ((if (c = ()) then 0. else c.cs_sp))) } :: !__res0;
          matched := true)
      ) cs;
      if not !matched then (
        let c = Obj.magic () in
        if (((w.ws_sold_year = s.ss_sold_year) && (w.ws_item_sk = s.ss_item_sk)) && (w.ws_customer_sk = s.ss_customer_sk)) && ((((((if (w = ()) then 0 else w.ws_qty)) > 0) || (((if (c = ()) then 0 else c.cs_qty)) > 0))) && (s.ss_sold_year = 1998)) then __res0 := { ss_sold_year = s.ss_sold_year; ss_item_sk = s.ss_item_sk; ss_customer_sk = s.ss_customer_sk; ratio = (s.ss_qty / ((((if (w = ()) then 0 else w.ws_qty)) + ((if (c = ()) then 0 else c.cs_qty))))); store_qty = s.ss_qty; store_wholesale_cost = s.ss_wc; store_sales_price = s.ss_sp; other_chan_qty = (((if (w = ()) then 0 else w.ws_qty)) + ((if (c = ()) then 0 else c.cs_qty))); other_chan_wholesale_cost = (((if (w = ()) then 0. else w.ws_wc)) +. ((if (c = ()) then 0. else c.cs_wc))); other_chan_sales_price = (((if (w = ()) then 0. else w.ws_sp)) +. ((if (c = ()) then 0. else c.cs_sp))) } :: !__res0;
      );
      ) ws;
  ) ss;
List.rev !__res0)


let () =
  json result;
  assert ((result = [{ ss_sold_year = 1998; ss_item_sk = 1; ss_customer_sk = 1; ratio = 1.25; store_qty = 10; store_wholesale_cost = 50.; store_sales_price = 100.; other_chan_qty = 8; other_chan_wholesale_cost = 40.; other_chan_sales_price = 80. }]))
