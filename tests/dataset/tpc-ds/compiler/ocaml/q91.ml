(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable cc_call_center_sk : int; mutable cc_call_center_id : string; mutable cc_name : string; mutable cc_manager : string }
type record2 = { mutable cr_call_center_sk : int; mutable cr_returned_date_sk : int; mutable cr_returning_customer_sk : int; mutable cr_net_loss : float }
type record3 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record4 = { mutable c_customer_sk : int; mutable c_current_cdemo_sk : int; mutable c_current_hdemo_sk : int; mutable c_current_addr_sk : int }
type record5 = { mutable cd_demo_sk : int; mutable cd_marital_status : string; mutable cd_education_status : string }
type record6 = { mutable hd_demo_sk : int; mutable hd_buy_potential : string }
type record7 = { mutable ca_address_sk : int; mutable ca_gmt_offset : int }
type record8 = { mutable id : string; mutable name : string; mutable mgr : string }
type record9 = { mutable Call_Center : Obj.t; mutable Call_Center_Name : Obj.t; mutable Manager : Obj.t; mutable Returns_Loss : float }
type record10 = { mutable Call_Center : string; mutable Call_Center_Name : string; mutable Manager : string; mutable Returns_Loss : float }

type callcenter = { mutable cc_call_center_sk : int; mutable cc_call_center_id : string; mutable cc_name : string; mutable cc_manager : string }
type catalogreturn = { mutable cr_call_center_sk : int; mutable cr_returned_date_sk : int; mutable cr_returning_customer_sk : int; mutable cr_net_loss : float }
type datedim = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type customer = { mutable c_customer_sk : int; mutable c_current_cdemo_sk : int; mutable c_current_hdemo_sk : int; mutable c_current_addr_sk : int }
type customeraddress = { mutable ca_address_sk : int; mutable ca_gmt_offset : int }
type customerdemographics = { mutable cd_demo_sk : int; mutable cd_marital_status : string; mutable cd_education_status : string }
type householddemographics = { mutable hd_demo_sk : int; mutable hd_buy_potential : string }
let call_center : record1 list = [{ cc_call_center_sk = 1; cc_call_center_id = "CC1"; cc_name = "Main"; cc_manager = "Alice" }]
let catalog_returns : record2 list = [{ cr_call_center_sk = 1; cr_returned_date_sk = 1; cr_returning_customer_sk = 1; cr_net_loss = 10. }]
let date_dim : record3 list = [{ d_date_sk = 1; d_year = 2001; d_moy = 5 }]
let customer : record4 list = [{ c_customer_sk = 1; c_current_cdemo_sk = 1; c_current_hdemo_sk = 1; c_current_addr_sk = 1 }]
let customer_demographics : record5 list = [{ cd_demo_sk = 1; cd_marital_status = "M"; cd_education_status = "Unknown" }]
let household_demographics : record6 list = [{ hd_demo_sk = 1; hd_buy_potential = "1001-5000" }]
let customer_address : record7 list = [{ ca_address_sk = 1; ca_gmt_offset = -6 }]
let result : record9 = first (let (__groups0 : (record8 * record1 list) list ref) = ref [] in
  List.iter (fun (cc : record1) ->
      List.iter (fun (cr : record2) ->
            List.iter (fun (d : record3) ->
                    List.iter (fun (c : record4) ->
                              List.iter (fun (cd : record5) ->
                                          List.iter (fun (hd : record6) ->
                                                        List.iter (fun (ca : record7) ->
                                                                                    if (cc.cc_call_center_sk = cr.cr_call_center_sk) && (cr.cr_returned_date_sk = d.d_date_sk) && (cr.cr_returning_customer_sk = c.c_customer_sk) && (c.c_current_cdemo_sk = cd.cd_demo_sk) && (c.c_current_hdemo_sk = hd.hd_demo_sk) && (c.c_current_addr_sk = ca.ca_address_sk) && ((((((d.d_year = 2001) && (d.d_moy = 5)) && (cd.cd_marital_status = "M")) && (cd.cd_education_status = "Unknown")) && (hd.hd_buy_potential = "1001-5000")) && (ca.ca_gmt_offset = (-6))) then (
                  let (key : record8) = { id = cc.cc_call_center_id; name = cc.cc_name; mgr = cc.cc_manager } in
                  let cur = try List.assoc key !__groups0 with Not_found -> [] in
                  __groups0 := (key, cc :: cur) :: List.remove_assoc key !__groups0);
                                                        ) customer_address;
                                          ) household_demographics;
                              ) customer_demographics;
                    ) customer;
            ) date_dim;
      ) catalog_returns;
  ) call_center;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { Call_Center = g.key.id; Call_Center_Name = g.key.name; Manager = g.key.mgr; Returns_Loss = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.cr_net_loss :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = { Call_Center = "CC1"; Call_Center_Name = "Main"; Manager = "Alice"; Returns_Loss = 10. }))
