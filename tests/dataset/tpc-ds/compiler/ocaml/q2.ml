(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:15Z *)
let list_union a b = List.sort_uniq compare (a @ b)
let list_except a b = List.filter (fun x -> not (List.mem x b)) a
let list_intersect a b = List.filter (fun x -> List.mem x b) a |> List.sort_uniq compare
let list_union_all a b = a @ b
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ws_sold_date_sk : int; mutable ws_ext_sales_price : float; mutable ws_sold_date_name : string }
type record2 = { mutable cs_sold_date_sk : int; mutable cs_ext_sales_price : float; mutable cs_sold_date_name : string }
type record3 = { mutable d_date_sk : int; mutable d_week_seq : int; mutable d_day_name : string; mutable d_year : int }
type record4 = { mutable sold_date_sk : int; mutable sales_price : float; mutable day : string }
type record5 = { mutable sold_date_sk : Obj.t; mutable sales_price : Obj.t; mutable day : Obj.t }
type record6 = { mutable week_seq : int }
type record7 = { mutable d_week_seq : Obj.t; mutable sun_sales : float; mutable mon_sales : float; mutable tue_sales : float; mutable wed_sales : float; mutable thu_sales : float; mutable fri_sales : float; mutable sat_sales : float }
type record8 = { mutable d_week_seq : int; mutable sun_sales : float; mutable mon_sales : float; mutable tue_sales : float; mutable wed_sales : float; mutable thu_sales : float; mutable fri_sales : float; mutable sat_sales : float }
type record9 = { mutable d_week_seq1 : int; mutable sun_ratio : float; mutable mon_ratio : float }

let web_sales : record1 list = [{ ws_sold_date_sk = 1; ws_ext_sales_price = 5.; ws_sold_date_name = "Sunday" };{ ws_sold_date_sk = 2; ws_ext_sales_price = 5.; ws_sold_date_name = "Monday" };{ ws_sold_date_sk = 8; ws_ext_sales_price = 10.; ws_sold_date_name = "Sunday" };{ ws_sold_date_sk = 9; ws_ext_sales_price = 10.; ws_sold_date_name = "Monday" }]
let catalog_sales : record2 list = [{ cs_sold_date_sk = 1; cs_ext_sales_price = 5.; cs_sold_date_name = "Sunday" };{ cs_sold_date_sk = 2; cs_ext_sales_price = 5.; cs_sold_date_name = "Monday" };{ cs_sold_date_sk = 8; cs_ext_sales_price = 10.; cs_sold_date_name = "Sunday" };{ cs_sold_date_sk = 9; cs_ext_sales_price = 10.; cs_sold_date_name = "Monday" }]
let date_dim : record3 list = [{ d_date_sk = 1; d_week_seq = 1; d_day_name = "Sunday"; d_year = 1998 };{ d_date_sk = 2; d_week_seq = 1; d_day_name = "Monday"; d_year = 1998 };{ d_date_sk = 8; d_week_seq = 54; d_day_name = "Sunday"; d_year = 1999 };{ d_date_sk = 9; d_week_seq = 54; d_day_name = "Monday"; d_year = 1999 }]
let wscs : record5 list = (list_union_all ((let __res0 = ref [] in
  List.iter (fun (ws : record1) ->
      __res0 := { sold_date_sk = ws.ws_sold_date_sk; sales_price = ws.ws_ext_sales_price; day = ws.ws_sold_date_name } :: !__res0;
  ) web_sales;
List.rev !__res0)
) ((let __res1 = ref [] in
  List.iter (fun (cs : record2) ->
      __res1 := { sold_date_sk = cs.cs_sold_date_sk; sales_price = cs.cs_ext_sales_price; day = cs.cs_sold_date_name } :: !__res1;
  ) catalog_sales;
List.rev !__res1)
))
let wswscs : record8 list = (let (__groups2 : (record6 * (string * Obj.t) list list) list ref) = ref [] in
  List.iter (fun w ->
      List.iter (fun (d : record3) ->
              if (Obj.obj (List.assoc "sold_date_sk" w) = d.d_date_sk) then (
        let (key : record6) = [("week_seq",Obj.repr (d.d_week_seq))] in
        let cur = try List.assoc key !__groups2 with Not_found -> [] in
        __groups2 := (key, w :: cur) :: List.remove_assoc key !__groups2);
      ) date_dim;
  ) wscs;
  let __res2 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res2 := { d_week_seq = g.key.week_seq; sun_sales = (sum_float (let __res3 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Sunday") then
    __res3 := Obj.obj (List.assoc "sales_price" x) :: !__res3;
  ) g.items;
List.rev !__res3)
); mon_sales = (sum_float (let __res4 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Monday") then
    __res4 := Obj.obj (List.assoc "sales_price" x) :: !__res4;
  ) g.items;
List.rev !__res4)
); tue_sales = (sum_float (let __res5 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Tuesday") then
    __res5 := Obj.obj (List.assoc "sales_price" x) :: !__res5;
  ) g.items;
List.rev !__res5)
); wed_sales = (sum_float (let __res6 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Wednesday") then
    __res6 := Obj.obj (List.assoc "sales_price" x) :: !__res6;
  ) g.items;
List.rev !__res6)
); thu_sales = (sum_float (let __res7 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Thursday") then
    __res7 := Obj.obj (List.assoc "sales_price" x) :: !__res7;
  ) g.items;
List.rev !__res7)
); fri_sales = (sum_float (let __res8 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Friday") then
    __res8 := Obj.obj (List.assoc "sales_price" x) :: !__res8;
  ) g.items;
List.rev !__res8)
); sat_sales = (sum_float (let __res9 = ref [] in
  List.iter (fun x ->
      if (Obj.obj (List.assoc "day" x) = "Saturday") then
    __res9 := Obj.obj (List.assoc "sales_price" x) :: !__res9;
  ) g.items;
List.rev !__res9)
) } :: !__res2
  ) !__groups2;
  List.rev !__res2)

let year1 : record8 list = (let __res10 = ref [] in
  List.iter (fun (w : record8) ->
      if (w.d_week_seq = 1) then
    __res10 := w :: !__res10;
  ) wswscs;
List.rev !__res10)

let year2 : record8 list = (let __res11 = ref [] in
  List.iter (fun (w : record8) ->
      if (w.d_week_seq = 54) then
    __res11 := w :: !__res11;
  ) wswscs;
List.rev !__res11)

let result : record9 list = (let __res12 = ref [] in
  List.iter (fun y ->
    List.iter (fun z ->
      if ((y.d_week_seq = z.d_week_seq) - 53) then (
        __res12 := { d_week_seq1 = y.d_week_seq; sun_ratio = (y.sun_sales /. z.sun_sales); mon_ratio = (y.mon_sales /. z.mon_sales) } :: !__res12;
      )
    ) year2;
  ) year1;
  List.rev !__res12)


let () =
  json result;
  assert ((result = [{ d_week_seq1 = 1; sun_ratio = 0.5; mon_ratio = 0.5 }]))
