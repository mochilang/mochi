(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ticket : int; mutable item : int; mutable sold : int; mutable customer : int; mutable store : int }
type record2 = { mutable ticket : int; mutable item : int; mutable returned : int; mutable customer : int }
type record3 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record4 = { mutable s_store_sk : int; mutable s_store_name : string; mutable s_company_id : int; mutable s_street_number : string; mutable s_street_name : string; mutable s_street_type : string; mutable s_suite_number : string; mutable s_city : string; mutable s_county : string; mutable s_state : string; mutable s_zip : string }
type record5 = { mutable s : record4; mutable diff : int }
type record6 = { mutable s_store_name : Obj.t; mutable d30 : int; mutable d31_60 : int; mutable d61_90 : int; mutable d91_120 : int; mutable d_gt_120 : int }
type record7 = { mutable s_store_name : string; mutable d30 : int; mutable d31_60 : int; mutable d61_90 : int; mutable d91_120 : int; mutable d_gt_120 : int }

let store_sales : record1 list = [{ ticket = 1; item = 101; sold = 1; customer = 1; store = 1 };{ ticket = 2; item = 102; sold = 1; customer = 1; store = 1 };{ ticket = 3; item = 103; sold = 1; customer = 1; store = 1 };{ ticket = 4; item = 104; sold = 1; customer = 1; store = 1 };{ ticket = 5; item = 105; sold = 1; customer = 1; store = 1 }]
let store_returns : record2 list = [{ ticket = 1; item = 101; returned = 16; customer = 1 };{ ticket = 2; item = 102; returned = 46; customer = 1 };{ ticket = 3; item = 103; returned = 76; customer = 1 };{ ticket = 4; item = 104; returned = 111; customer = 1 };{ ticket = 5; item = 105; returned = 151; customer = 1 }]
let date_dim : record3 list = [{ d_date_sk = 1; d_year = 2001; d_moy = 7 };{ d_date_sk = 16; d_year = 2001; d_moy = 8 };{ d_date_sk = 46; d_year = 2001; d_moy = 8 };{ d_date_sk = 76; d_year = 2001; d_moy = 8 };{ d_date_sk = 111; d_year = 2001; d_moy = 8 };{ d_date_sk = 151; d_year = 2001; d_moy = 8 }]
let store : record4 list = [{ s_store_sk = 1; s_store_name = "Main"; s_company_id = 1; s_street_number = "1"; s_street_name = "Main"; s_street_type = "St"; s_suite_number = "100"; s_city = "City"; s_county = "County"; s_state = "CA"; s_zip = "12345" }]
let year : int = 2001
let month : int = 8
let joined : record5 list = (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (sr : record2) ->
            List.iter (fun (d1 : record3) ->
                    List.iter (fun (d2 : record3) ->
                              List.iter (fun (s : record4) ->
                                                  if (((ss.ticket = sr.ticket) && (ss.item = sr.item)) && (ss.customer = sr.customer)) && (ss.sold = d1.d_date_sk) && (((sr.returned = d2.d_date_sk) && (d2.d_year = year)) && (d2.d_moy = month)) && (ss.store = s.s_store_sk) then
            __res0 := { s = s; diff = (sr.returned - ss.sold) } :: !__res0;
                              ) store;
                    ) date_dim;
            ) date_dim;
      ) store_returns;
  ) store_sales;
List.rev !__res0)

let result : record7 list = (let (__groups1 : (record4 * record5 list) list ref) = ref [] in
  List.iter (fun (j : record5) ->
      let (key : record4) = j.s in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, j :: cur) :: List.remove_assoc key !__groups1;
  ) joined;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { s_store_name = g.key.s_store_name; d30 = List.length (let __res2 = ref [] in
  List.iter (fun x ->
      if (x.diff <= 30) then
    __res2 := 1 :: !__res2;
  ) g.items;
List.rev !__res2)
; d31_60 = List.length (let __res3 = ref [] in
  List.iter (fun x ->
      if ((x.diff > 30) && (x.diff <= 60)) then
    __res3 := 1 :: !__res3;
  ) g.items;
List.rev !__res3)
; d61_90 = List.length (let __res4 = ref [] in
  List.iter (fun x ->
      if ((x.diff > 60) && (x.diff <= 90)) then
    __res4 := 1 :: !__res4;
  ) g.items;
List.rev !__res4)
; d91_120 = List.length (let __res5 = ref [] in
  List.iter (fun x ->
      if ((x.diff > 90) && (x.diff <= 120)) then
    __res5 := 1 :: !__res5;
  ) g.items;
List.rev !__res5)
; d_gt_120 = List.length (let __res6 = ref [] in
  List.iter (fun x ->
      if (x.diff > 120) then
    __res6 := 1 :: !__res6;
  ) g.items;
List.rev !__res6)
 } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ s_store_name = "Main"; d30 = 1; d31_60 = 1; d61_90 = 1; d91_120 = 1; d_gt_120 = 1 }]))
