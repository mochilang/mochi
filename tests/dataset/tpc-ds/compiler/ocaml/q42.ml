(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable sold_date_sk : int; mutable item_sk : int; mutable ext_sales_price : float }
type record2 = { mutable i_item_sk : int; mutable i_manager_id : int; mutable i_category_id : int; mutable i_category : string }
type record3 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record4 = { mutable d_year : int; mutable i_category_id : int; mutable i_category : string; mutable price : float }
type record5 = { mutable d_year : int; mutable i_category_id : int; mutable i_category : string }
type record6 = { mutable d_year : Obj.t; mutable i_category_id : Obj.t; mutable i_category : Obj.t; mutable sum_ss_ext_sales_price : float }
type record7 = { mutable d_year : int; mutable i_category_id : int; mutable i_category : string; mutable sum_ss_ext_sales_price : float }

let store_sales : record1 list = [{ sold_date_sk = 1; item_sk = 1; ext_sales_price = 10. };{ sold_date_sk = 1; item_sk = 2; ext_sales_price = 20. };{ sold_date_sk = 2; item_sk = 1; ext_sales_price = 15. }]
let item : record2 list = [{ i_item_sk = 1; i_manager_id = 1; i_category_id = 100; i_category = "CatA" };{ i_item_sk = 2; i_manager_id = 1; i_category_id = 200; i_category = "CatB" }]
let date_dim : record3 list = [{ d_date_sk = 1; d_year = 2020; d_moy = 5 };{ d_date_sk = 2; d_year = 2021; d_moy = 5 }]
let month : int = 5
let year : int = 2020
let records : record4 list = (let __res0 = ref [] in
  List.iter (fun (dt : record3) ->
      List.iter (fun (ss : record1) ->
            List.iter (fun (it : record2) ->
                        if (ss.sold_date_sk = dt.d_date_sk) && (ss.item_sk = it.i_item_sk) && (((it.i_manager_id = 1) && (dt.d_moy = month)) && (dt.d_year = year)) then
        __res0 := { d_year = dt.d_year; i_category_id = it.i_category_id; i_category = it.i_category; price = ss.ext_sales_price } :: !__res0;
            ) item;
      ) store_sales;
  ) date_dim;
List.rev !__res0)

let grouped : record7 list = (let (__groups1 : (record5 * record4 list) list ref) = ref [] in
  List.iter (fun (r : record4) ->
      let (key : record5) = { d_year = r.d_year; i_category_id = r.i_category_id; i_category = r.i_category } in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, r :: cur) :: List.remove_assoc key !__groups1;
  ) records;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { d_year = g.key.d_year; i_category_id = g.key.i_category_id; i_category = g.key.i_category; sum_ss_ext_sales_price = (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.price :: !__res2;
  ) g.items;
List.rev !__res2)
) } :: !__res1
  ) !__groups1;
  List.rev !__res1)

let base : record7 list = (let __res3 = ref [] in
  List.iter (fun (g : record7) ->
      __res3 := g :: !__res3;
  ) grouped;
List.rev !__res3)

let result : (string * Obj.t) list list = base

let () =
  json result;
  assert ((result = [{ d_year = 2020; i_category_id = 200; i_category = "CatB"; sum_ss_ext_sales_price = 20. };{ d_year = 2020; i_category_id = 100; i_category = "CatA"; sum_ss_ext_sales_price = 10. }]))
