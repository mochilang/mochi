(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
  exception Break
  exception Continue

  let sum lst = List.fold_left (+) 0 lst
  let sum_float lst = List.fold_left (+.) 0.0 lst

  type record1 = { mutable ws_order_number : int; mutable ws_ship_date_sk : int; mutable ws_warehouse_sk : int; mutable ws_ship_addr_sk : int; mutable ws_web_site_sk : int; mutable ws_net_profit : float; mutable ws_ext_ship_cost : float }
  type record2 = { mutable wr_order_number : int }
  type record3 = { mutable d_date_sk : int; mutable d_date : string }
  type record4 = { mutable ca_address_sk : int; mutable ca_state : string }
  type record5 = { mutable web_site_sk : int; mutable web_company_name : string }
  type record6 = { mutable order_count : int; mutable total_shipping_cost : float; mutable total_net_profit : float }

type websale = { mutable ws_order_number : int; mutable ws_ship_date_sk : int; mutable ws_warehouse_sk : int; mutable ws_ship_addr_sk : int; mutable ws_web_site_sk : int; mutable ws_net_profit : float; mutable ws_ext_ship_cost : float }
type webreturn = { mutable wr_order_number : int }
type datedim = { mutable d_date_sk : int; mutable d_date : string }
type customeraddress = { mutable ca_address_sk : int; mutable ca_state : string }
type website = { mutable web_site_sk : int; mutable web_company_name : string }
let web_sales : record1 list = [{ ws_order_number = 1; ws_ship_date_sk = 1; ws_warehouse_sk = 1; ws_ship_addr_sk = 1; ws_web_site_sk = 1; ws_net_profit = 5.; ws_ext_ship_cost = 2. };{ ws_order_number = 1; ws_ship_date_sk = 1; ws_warehouse_sk = 2; ws_ship_addr_sk = 1; ws_web_site_sk = 1; ws_net_profit = 0.; ws_ext_ship_cost = 0. };{ ws_order_number = 2; ws_ship_date_sk = 1; ws_warehouse_sk = 3; ws_ship_addr_sk = 1; ws_web_site_sk = 1; ws_net_profit = 3.; ws_ext_ship_cost = 1. }]
let web_returns : record2 list = [[("wr_order_number",Obj.repr (2))]]
let date_dim : record3 list = [{ d_date_sk = 1; d_date = "2001-02-01" }]
let customer_address : record4 list = [{ ca_address_sk = 1; ca_state = "CA" }]
let web_site : record5 list = [{ web_site_sk = 1; web_company_name = "pri" }]
let rec distinct (xs : any list) : any list =
  let out : Obj.t list ref = ref [] in
  let rec __loop0 lst =
    match lst with
      | [] -> ()
      | x::rest ->
        (try
          if not (contains (!out) x) then (
            out := ((!out) @ [x]);
          ) ;
        with Continue -> ())
        ; __loop0 rest
    in
    try __loop0 xs with Break -> ()
    (!out)

  let filtered : record1 list = (let __res3 = ref [] in
  List.iter (fun (ws : record1) ->
      List.iter (fun (d : record3) ->
            List.iter (fun (ca : record4) ->
                    List.iter (fun (w : record5) ->
                                    if (ws.ws_ship_date_sk = d.d_date_sk) && (ws.ws_ship_addr_sk = ca.ca_address_sk) && (ws.ws_web_site_sk = w.web_site_sk) && ((((ca.ca_state = "CA") && (w.web_company_name = "pri")) && ((let __res1 = ref [] in
  List.iter (fun (ws2 : record1) ->
      if ((ws.ws_order_number = ws2.ws_order_number) && (ws.ws_warehouse_sk <> ws2.ws_warehouse_sk)) then
    __res1 := ws2 :: !__res1;
  ) web_sales;
List.rev !__res1)
 <> [])) && (((let __res2 = ref [] in
  List.iter (fun wr ->
      if (Obj.obj (List.assoc "wr_order_number" wr) = ws.ws_order_number) then
    __res2 := wr :: !__res2;
  ) web_returns;
List.rev !__res2)
 <> []) = false)) then
          __res3 := ws :: !__res3;
                    ) web_site;
            ) customer_address;
      ) date_dim;
  ) web_sales;
List.rev !__res3)

  let result : record6 = { order_count = List.length distinct (let __res4 = ref [] in
  List.iter (fun (x : record1) ->
      __res4 := x.ws_order_number :: !__res4;
  ) filtered;
List.rev !__res4)
; total_shipping_cost = (sum_float (let __res5 = ref [] in
  List.iter (fun (x : record1) ->
      __res5 := x.ws_ext_ship_cost :: !__res5;
  ) filtered;
List.rev !__res5)
); total_net_profit = (sum_float (let __res6 = ref [] in
  List.iter (fun (x : record1) ->
      __res6 := x.ws_net_profit :: !__res6;
  ) filtered;
List.rev !__res6)
) }

  let () =
    json result;
    assert ((result = { order_count = 1; total_shipping_cost = 2.; total_net_profit = 5. }))
