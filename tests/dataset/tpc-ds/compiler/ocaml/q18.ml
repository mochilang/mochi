(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable cs_quantity : int; mutable cs_list_price : float; mutable cs_coupon_amt : float; mutable cs_sales_price : float; mutable cs_net_profit : float; mutable cs_bill_cdemo_sk : int; mutable cs_bill_customer_sk : int; mutable cs_sold_date_sk : int; mutable cs_item_sk : int }
type record2 = { mutable cd_demo_sk : int; mutable cd_gender : string; mutable cd_education_status : string; mutable cd_dep_count : int }
type record3 = { mutable c_customer_sk : int; mutable c_current_cdemo_sk : int; mutable c_current_addr_sk : int; mutable c_birth_year : int; mutable c_birth_month : int }
type record4 = { mutable ca_address_sk : int; mutable ca_country : string; mutable ca_state : string; mutable ca_county : string }
type record5 = { mutable d_date_sk : int; mutable d_year : int }
type record6 = { mutable i_item_sk : int; mutable i_item_id : string }
type record7 = { mutable i_item_id : string; mutable ca_country : string; mutable ca_state : string; mutable ca_county : string; mutable q : int; mutable lp : float; mutable cp : float; mutable sp : float; mutable np : float; mutable by : int; mutable dep : int }
type record8 = { mutable i_item_id : string; mutable ca_country : string; mutable ca_state : string; mutable ca_county : string }
type record9 = { mutable i_item_id : Obj.t; mutable ca_country : Obj.t; mutable ca_state : Obj.t; mutable ca_county : Obj.t; mutable agg1 : float; mutable agg2 : float; mutable agg3 : float; mutable agg4 : float; mutable agg5 : float; mutable agg6 : float; mutable agg7 : float }
type record10 = { mutable i_item_id : string; mutable ca_country : string; mutable ca_state : string; mutable ca_county : string; mutable agg1 : float; mutable agg2 : float; mutable agg3 : float; mutable agg4 : float; mutable agg5 : float; mutable agg6 : float; mutable agg7 : float }

type catalogsale = { mutable cs_quantity : int; mutable cs_list_price : float; mutable cs_coupon_amt : float; mutable cs_sales_price : float; mutable cs_net_profit : float; mutable cs_bill_cdemo_sk : int; mutable cs_bill_customer_sk : int; mutable cs_sold_date_sk : int; mutable cs_item_sk : int }
type customerdemographics = { mutable cd_demo_sk : int; mutable cd_gender : string; mutable cd_education_status : string; mutable cd_dep_count : int }
type customer = { mutable c_customer_sk : int; mutable c_current_cdemo_sk : int; mutable c_current_addr_sk : int; mutable c_birth_year : int; mutable c_birth_month : int }
type customeraddress = { mutable ca_address_sk : int; mutable ca_country : string; mutable ca_state : string; mutable ca_county : string }
type datedim = { mutable d_date_sk : int; mutable d_year : int }
type item = { mutable i_item_sk : int; mutable i_item_id : string }
let catalog_sales : record1 list = [{ cs_quantity = 1; cs_list_price = 10.; cs_coupon_amt = 1.; cs_sales_price = 9.; cs_net_profit = 2.; cs_bill_cdemo_sk = 1; cs_bill_customer_sk = 1; cs_sold_date_sk = 1; cs_item_sk = 1 }]
let customer_demographics : record2 list = [{ cd_demo_sk = 1; cd_gender = "M"; cd_education_status = "College"; cd_dep_count = 2 };{ cd_demo_sk = 2; cd_gender = "F"; cd_education_status = "College"; cd_dep_count = 2 }]
let customer : record3 list = [{ c_customer_sk = 1; c_current_cdemo_sk = 2; c_current_addr_sk = 1; c_birth_year = 1980; c_birth_month = 1 }]
let customer_address : record4 list = [{ ca_address_sk = 1; ca_country = "US"; ca_state = "CA"; ca_county = "County1" }]
let date_dim : record5 list = [{ d_date_sk = 1; d_year = 1999 }]
let item : record6 list = [{ i_item_sk = 1; i_item_id = "I1" }]
let joined : record7 list = (let __res0 = ref [] in
  List.iter (fun (cs : record1) ->
      List.iter (fun (cd1 : record2) ->
            List.iter (fun (c : record3) ->
                    List.iter (fun (cd2 : record2) ->
                              List.iter (fun (ca : record4) ->
                                          List.iter (fun (d : record5) ->
                                                        List.iter (fun (i : record6) ->
                                                                                    if (((cs.cs_bill_cdemo_sk = cd1.cd_demo_sk) && (cd1.cd_gender = "M")) && (cd1.cd_education_status = "College")) && (cs.cs_bill_customer_sk = c.c_customer_sk) && (c.c_current_cdemo_sk = cd2.cd_demo_sk) && (c.c_current_addr_sk = ca.ca_address_sk) && ((cs.cs_sold_date_sk = d.d_date_sk) && (d.d_year = 1999)) && (cs.cs_item_sk = i.i_item_sk) then
                __res0 := { i_item_id = i.i_item_id; ca_country = ca.ca_country; ca_state = ca.ca_state; ca_county = ca.ca_county; q = cs.cs_quantity; lp = cs.cs_list_price; cp = cs.cs_coupon_amt; sp = cs.cs_sales_price; np = cs.cs_net_profit; by = c.c_birth_year; dep = cd1.cd_dep_count } :: !__res0;
                                                        ) item;
                                          ) date_dim;
                              ) customer_address;
                    ) customer_demographics;
            ) customer;
      ) customer_demographics;
  ) catalog_sales;
List.rev !__res0)

let result : record10 list = (let (__groups1 : (record8 * record7 list) list ref) = ref [] in
  List.iter (fun (j : record7) ->
      let (key : record8) = { i_item_id = j.i_item_id; ca_country = j.ca_country; ca_state = j.ca_state; ca_county = j.ca_county } in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, j :: cur) :: List.remove_assoc key !__groups1;
  ) joined;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { i_item_id = g.key.i_item_id; ca_country = g.key.ca_country; ca_state = g.key.ca_state; ca_county = g.key.ca_county; agg1 = (float_of_int (List.fold_left (+) 0 (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.q :: !__res2;
  ) g.items;
List.rev !__res2)
) /. float_of_int (List.length (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.q :: !__res2;
  ) g.items;
List.rev !__res2)
)); agg2 = (List.fold_left (+.) 0.0 (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.lp :: !__res3;
  ) g.items;
List.rev !__res3)
 /. float_of_int (List.length (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.lp :: !__res3;
  ) g.items;
List.rev !__res3)
)); agg3 = (List.fold_left (+.) 0.0 (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.cp :: !__res4;
  ) g.items;
List.rev !__res4)
 /. float_of_int (List.length (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := x.cp :: !__res4;
  ) g.items;
List.rev !__res4)
)); agg4 = (List.fold_left (+.) 0.0 (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.sp :: !__res5;
  ) g.items;
List.rev !__res5)
 /. float_of_int (List.length (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.sp :: !__res5;
  ) g.items;
List.rev !__res5)
)); agg5 = (List.fold_left (+.) 0.0 (let __res6 = ref [] in
  List.iter (fun x ->
      __res6 := x.np :: !__res6;
  ) g.items;
List.rev !__res6)
 /. float_of_int (List.length (let __res6 = ref [] in
  List.iter (fun x ->
      __res6 := x.np :: !__res6;
  ) g.items;
List.rev !__res6)
)); agg6 = (float_of_int (List.fold_left (+) 0 (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.by :: !__res7;
  ) g.items;
List.rev !__res7)
) /. float_of_int (List.length (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.by :: !__res7;
  ) g.items;
List.rev !__res7)
)); agg7 = (float_of_int (List.fold_left (+) 0 (let __res8 = ref [] in
  List.iter (fun x ->
      __res8 := x.dep :: !__res8;
  ) g.items;
List.rev !__res8)
) /. float_of_int (List.length (let __res8 = ref [] in
  List.iter (fun x ->
      __res8 := x.dep :: !__res8;
  ) g.items;
List.rev !__res8)
)) } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ i_item_id = "I1"; ca_country = "US"; ca_state = "CA"; ca_county = "County1"; agg1 = 1.; agg2 = 10.; agg3 = 1.; agg4 = 9.; agg5 = 2.; agg6 = 1980.; agg7 = 2. }]))
