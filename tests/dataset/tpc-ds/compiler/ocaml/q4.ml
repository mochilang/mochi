(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:15Z *)
let list_union a b = List.sort_uniq compare (a @ b)
let list_except a b = List.filter (fun x -> not (List.mem x b)) a
let list_intersect a b = List.filter (fun x -> List.mem x b) a |> List.sort_uniq compare
let list_union_all a b = a @ b
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable c_customer_sk : int; mutable c_customer_id : string; mutable c_first_name : string; mutable c_last_name : string; mutable c_login : string }
type record2 = { mutable ss_customer_sk : int; mutable ss_sold_date_sk : int; mutable ss_ext_list_price : float; mutable ss_ext_wholesale_cost : float; mutable ss_ext_discount_amt : float; mutable ss_ext_sales_price : float }
type record3 = { mutable cs_bill_customer_sk : int; mutable cs_sold_date_sk : int; mutable cs_ext_list_price : float; mutable cs_ext_wholesale_cost : float; mutable cs_ext_discount_amt : float; mutable cs_ext_sales_price : float }
type record4 = { mutable ws_bill_customer_sk : int; mutable ws_sold_date_sk : int; mutable ws_ext_list_price : float; mutable ws_ext_wholesale_cost : float; mutable ws_ext_discount_amt : float; mutable ws_ext_sales_price : float }
type record5 = { mutable d_date_sk : int; mutable d_year : int }
type record6 = { mutable id : string; mutable first : string; mutable last : string; mutable login : string; mutable year : int }
type record7 = { mutable customer_id : Obj.t; mutable customer_first_name : Obj.t; mutable customer_last_name : Obj.t; mutable customer_login : Obj.t; mutable dyear : Obj.t; mutable year_total : float; mutable sale_type : string }
type record8 = { mutable customer_id : Obj.t; mutable customer_first_name : Obj.t; mutable customer_last_name : Obj.t; mutable customer_login : Obj.t; mutable dyear : int; mutable year_total : float; mutable sale_type : string }
type record9 = { mutable customer_id : Obj.t; mutable customer_first_name : Obj.t; mutable customer_last_name : Obj.t; mutable customer_login : Obj.t }
type record10 = { mutable customer_id : string; mutable customer_first_name : string; mutable customer_last_name : string; mutable customer_login : string }

let customer : record1 list = [{ c_customer_sk = 1; c_customer_id = "C1"; c_first_name = "Alice"; c_last_name = "A"; c_login = "alice" }]
let store_sales : record2 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1; ss_ext_list_price = 10.; ss_ext_wholesale_cost = 5.; ss_ext_discount_amt = 0.; ss_ext_sales_price = 10. };{ ss_customer_sk = 1; ss_sold_date_sk = 2; ss_ext_list_price = 20.; ss_ext_wholesale_cost = 5.; ss_ext_discount_amt = 0.; ss_ext_sales_price = 20. }]
let catalog_sales : record3 list = [{ cs_bill_customer_sk = 1; cs_sold_date_sk = 1; cs_ext_list_price = 10.; cs_ext_wholesale_cost = 2.; cs_ext_discount_amt = 0.; cs_ext_sales_price = 10. };{ cs_bill_customer_sk = 1; cs_sold_date_sk = 2; cs_ext_list_price = 30.; cs_ext_wholesale_cost = 2.; cs_ext_discount_amt = 0.; cs_ext_sales_price = 30. }]
let web_sales : record4 list = [{ ws_bill_customer_sk = 1; ws_sold_date_sk = 1; ws_ext_list_price = 10.; ws_ext_wholesale_cost = 5.; ws_ext_discount_amt = 0.; ws_ext_sales_price = 10. };{ ws_bill_customer_sk = 1; ws_sold_date_sk = 2; ws_ext_list_price = 12.; ws_ext_wholesale_cost = 5.; ws_ext_discount_amt = 0.; ws_ext_sales_price = 12. }]
let date_dim : record5 list = [{ d_date_sk = 1; d_year = 2001 };{ d_date_sk = 2; d_year = 2002 }]
let year_total : record8 list = (list_union_all (list_union_all ((let (__groups0 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (c : record1) ->
      List.iter (fun (s : record2) ->
            List.iter (fun (d : record5) ->
                        if (c.c_customer_sk = s.ss_customer_sk) && (s.ss_sold_date_sk = d.d_date_sk) then (
          let (key : record6) = { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, c :: cur) :: List.remove_assoc key !__groups0);
            ) date_dim;
      ) store_sales;
  ) customer;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := ((((((x.ss_ext_list_price - x.ss_ext_wholesale_cost) - x.ss_ext_discount_amt)) + x.ss_ext_sales_price)) / 2) :: !__res1;
  ) g.items;
List.rev !__res1)
); sale_type = "s" } :: !__res0
  ) !__groups0;
  List.rev !__res0)
) ((let (__groups2 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (c : record1) ->
      List.iter (fun (cs : record3) ->
            List.iter (fun (d : record5) ->
                        if (c.c_customer_sk = cs.cs_bill_customer_sk) && (cs.cs_sold_date_sk = d.d_date_sk) then (
          let (key : record6) = { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year } in
          let cur = try List.assoc key !__groups2 with Not_found -> [] in
          __groups2 := (key, c :: cur) :: List.remove_assoc key !__groups2);
            ) date_dim;
      ) catalog_sales;
  ) customer;
  let __res2 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res2 := { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = (sum_float (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := ((((((x.cs_ext_list_price - x.cs_ext_wholesale_cost) - x.cs_ext_discount_amt)) + x.cs_ext_sales_price)) / 2) :: !__res3;
  ) g.items;
List.rev !__res3)
); sale_type = "c" } :: !__res2
  ) !__groups2;
  List.rev !__res2)
)) ((let (__groups4 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (c : record1) ->
      List.iter (fun (ws : record4) ->
            List.iter (fun (d : record5) ->
                        if (c.c_customer_sk = ws.ws_bill_customer_sk) && (ws.ws_sold_date_sk = d.d_date_sk) then (
          let (key : record6) = { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year } in
          let cur = try List.assoc key !__groups4 with Not_found -> [] in
          __groups4 := (key, c :: cur) :: List.remove_assoc key !__groups4);
            ) date_dim;
      ) web_sales;
  ) customer;
  let __res4 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res4 := { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = (sum_float (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := ((((((x.ws_ext_list_price - x.ws_ext_wholesale_cost) - x.ws_ext_discount_amt)) + x.ws_ext_sales_price)) / 2) :: !__res5;
  ) g.items;
List.rev !__res5)
); sale_type = "w" } :: !__res4
  ) !__groups4;
  List.rev !__res4)
))
let result : record9 list = (let __res6 = ref [] in
  List.iter (fun s1 ->
      List.iter (fun s2 ->
            List.iter (fun c1 ->
                    List.iter (fun c2 ->
                              List.iter (fun w1 ->
                                          List.iter (fun w2 ->
                                                                  if (Obj.obj (List.assoc "customer_id" s2) = Obj.obj (List.assoc "customer_id" s1)) && (Obj.obj (List.assoc "customer_id" c1) = Obj.obj (List.assoc "customer_id" s1)) && (Obj.obj (List.assoc "customer_id" c2) = Obj.obj (List.assoc "customer_id" s1)) && (Obj.obj (List.assoc "customer_id" w1) = Obj.obj (List.assoc "customer_id" s1)) && (Obj.obj (List.assoc "customer_id" w2) = Obj.obj (List.assoc "customer_id" s1)) && (((((((((((((((((Obj.obj (List.assoc "sale_type" s1) = "s") && (Obj.obj (List.assoc "sale_type" c1) = "c")) && (Obj.obj (List.assoc "sale_type" w1) = "w")) && (Obj.obj (List.assoc "sale_type" s2) = "s")) && (Obj.obj (List.assoc "sale_type" c2) = "c")) && (Obj.obj (List.assoc "sale_type" w2) = "w")) && (Obj.obj (List.assoc "dyear" s1) = 2001)) && (Obj.obj (List.assoc "dyear" s2) = 2002)) && (Obj.obj (List.assoc "dyear" c1) = 2001)) && (Obj.obj (List.assoc "dyear" c2) = 2002)) && (Obj.obj (List.assoc "dyear" w1) = 2001)) && (Obj.obj (List.assoc "dyear" w2) = 2002)) && (Obj.obj (List.assoc "year_total" s1) > 0)) && (Obj.obj (List.assoc "year_total" c1) > 0)) && (Obj.obj (List.assoc "year_total" w1) > 0)) && (((if (Obj.obj (List.assoc "year_total" c1) > 0) then (Obj.obj (List.assoc "year_total" c2) / Obj.obj (List.assoc "year_total" c1)) else ())) > ((if (Obj.obj (List.assoc "year_total" s1) > 0) then (Obj.obj (List.assoc "year_total" s2) / Obj.obj (List.assoc "year_total" s1)) else ())))) && (((if (Obj.obj (List.assoc "year_total" c1) > 0) then (Obj.obj (List.assoc "year_total" c2) / Obj.obj (List.assoc "year_total" c1)) else ())) > ((if (Obj.obj (List.assoc "year_total" w1) > 0) then (Obj.obj (List.assoc "year_total" w2) / Obj.obj (List.assoc "year_total" w1)) else ())))) then
              __res6 := { customer_id = Obj.obj (List.assoc "customer_id" s2); customer_first_name = Obj.obj (List.assoc "customer_first_name" s2); customer_last_name = Obj.obj (List.assoc "customer_last_name" s2); customer_login = Obj.obj (List.assoc "customer_login" s2) } :: !__res6;
                                          ) year_total;
                              ) year_total;
                    ) year_total;
            ) year_total;
      ) year_total;
  ) year_total;
List.rev !__res6)


let () =
  json result;
  assert ((result = [{ customer_id = "C1"; customer_first_name = "Alice"; customer_last_name = "A"; customer_login = "alice" }]))
