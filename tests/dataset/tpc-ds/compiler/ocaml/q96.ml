(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
type record1 = { mutable ss_sold_time_sk : int; mutable ss_hdemo_sk : int; mutable ss_store_sk : int }
type record2 = { mutable hd_demo_sk : int; mutable hd_dep_count : int }
type record3 = { mutable t_time_sk : int; mutable t_hour : int; mutable t_minute : int }
type record4 = { mutable s_store_sk : int; mutable s_store_name : string }

type storesale = { mutable ss_sold_time_sk : int; mutable ss_hdemo_sk : int; mutable ss_store_sk : int }
type householddemographics = { mutable hd_demo_sk : int; mutable hd_dep_count : int }
type timedim = { mutable t_time_sk : int; mutable t_hour : int; mutable t_minute : int }
type store = { mutable s_store_sk : int; mutable s_store_name : string }
let store_sales : record1 list = [{ ss_sold_time_sk = 1; ss_hdemo_sk = 1; ss_store_sk = 1 };{ ss_sold_time_sk = 1; ss_hdemo_sk = 1; ss_store_sk = 1 };{ ss_sold_time_sk = 2; ss_hdemo_sk = 1; ss_store_sk = 1 }]
let household_demographics : record2 list = [{ hd_demo_sk = 1; hd_dep_count = 3 }]
let time_dim : record3 list = [{ t_time_sk = 1; t_hour = 20; t_minute = 35 };{ t_time_sk = 2; t_hour = 20; t_minute = 45 }]
let store : record4 list = [{ s_store_sk = 1; s_store_name = "ese" }]
let result : int = List.length (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (hd : record2) ->
            List.iter (fun (t : record3) ->
                    List.iter (fun (s : record4) ->
                                    if (ss.ss_hdemo_sk = hd.hd_demo_sk) && (ss.ss_sold_time_sk = t.t_time_sk) && (ss.ss_store_sk = s.s_store_sk) && ((((t.t_hour = 20) && (t.t_minute >= 30)) && (hd.hd_dep_count = 3)) && (s.s_store_name = "ese")) then
          __res0 := ss :: !__res0;
                    ) store;
            ) time_dim;
      ) household_demographics;
  ) store_sales;
List.rev !__res0)


let () =
  json result;
  assert ((result = 3))
