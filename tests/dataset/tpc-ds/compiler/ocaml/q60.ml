(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let list_union a b = List.sort_uniq compare (a @ b)
let list_except a b = List.filter (fun x -> not (List.mem x b)) a
let list_intersect a b = List.filter (fun x -> List.mem x b) a |> List.sort_uniq compare
let list_union_all a b = a @ b
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable item : int; mutable price : int }

let store_sales : record1 list = [{ item = 1; price = 10 };{ item = 1; price = 20 }]
let catalog_sales : record1 list = [{ item = 1; price = 15 }]
let web_sales : record1 list = [{ item = 1; price = 15 }]
let all_sales : (string * Obj.t) list list = (list_union_all (list_union_all store_sales catalog_sales) web_sales)
let result : float = (sum_float (let __res0 = ref [] in
  List.iter (fun s ->
      __res0 := Obj.obj (List.assoc "price" s) :: !__res0;
  ) all_sales;
List.rev !__res0)
)

let () =
  json result;
  assert ((result = 60))
