(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable c_customer_sk : int; mutable c_current_addr_sk : int; mutable c_current_cdemo_sk : int }
type record2 = { mutable ca_address_sk : int; mutable ca_state : string }
type record3 = { mutable cd_demo_sk : int; mutable cd_gender : string; mutable cd_marital_status : string; mutable cd_dep_count : int; mutable cd_dep_employed_count : int; mutable cd_dep_college_count : int }
type record4 = { mutable ss_customer_sk : int; mutable ss_sold_date_sk : int }
type record5 = { mutable d_date_sk : int; mutable d_year : int; mutable d_qoy : int }
type record6 = { mutable state : string; mutable gender : string; mutable marital : string; mutable dep : int; mutable emp : int; mutable col : int }
type record7 = { mutable ca_state : Obj.t; mutable cd_gender : Obj.t; mutable cd_marital_status : Obj.t; mutable cd_dep_count : Obj.t; mutable cd_dep_employed_count : Obj.t; mutable cd_dep_college_count : Obj.t; mutable cnt : int }
type record8 = { mutable ca_state : string; mutable cd_gender : string; mutable cd_marital_status : string; mutable cd_dep_count : int; mutable cd_dep_employed_count : int; mutable cd_dep_college_count : int; mutable cnt : int }

let customer : record1 list = [{ c_customer_sk = 1; c_current_addr_sk = 1; c_current_cdemo_sk = 1 };{ c_customer_sk = 2; c_current_addr_sk = 2; c_current_cdemo_sk = 2 }]
let customer_address : record2 list = [{ ca_address_sk = 1; ca_state = "CA" };{ ca_address_sk = 2; ca_state = "NY" }]
let customer_demographics : record3 list = [{ cd_demo_sk = 1; cd_gender = "M"; cd_marital_status = "S"; cd_dep_count = 1; cd_dep_employed_count = 1; cd_dep_college_count = 0 };{ cd_demo_sk = 2; cd_gender = "F"; cd_marital_status = "M"; cd_dep_count = 2; cd_dep_employed_count = 1; cd_dep_college_count = 1 }]
let store_sales : record4 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1 }]
let date_dim : record5 list = [{ d_date_sk = 1; d_year = 2000; d_qoy = 1 }]
let purchased : int list = (let __res0 = ref [] in
  List.iter (fun ss ->
    List.iter (fun d ->
      if (ss.ss_sold_date_sk = d.d_date_sk) then (
        if ((d.d_year = 2000) && (d.d_qoy < 4)) then __res0 := ss.ss_customer_sk :: !__res0;
      )
    ) date_dim;
  ) store_sales;
  List.rev !__res0)

let groups : record8 list = (let (__groups1 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (c : record1) ->
      List.iter (fun (ca : record2) ->
            List.iter (fun (cd : record3) ->
                        if (c.c_current_addr_sk = ca.ca_address_sk) && (c.c_current_cdemo_sk = cd.cd_demo_sk) && (List.mem c.c_customer_sk purchased) then (
          let (key : record6) = { state = ca.ca_state; gender = cd.cd_gender; marital = cd.cd_marital_status; dep = cd.cd_dep_count; emp = cd.cd_dep_employed_count; col = cd.cd_dep_college_count } in
          let cur = try List.assoc key !__groups1 with Not_found -> [] in
          __groups1 := (key, c :: cur) :: List.remove_assoc key !__groups1);
            ) customer_demographics;
      ) customer_address;
  ) customer;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { ca_state = g.key.state; cd_gender = g.key.gender; cd_marital_status = g.key.marital; cd_dep_count = g.key.dep; cd_dep_employed_count = g.key.emp; cd_dep_college_count = g.key.col; cnt = List.length g.items } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json groups;
  assert ((groups = [{ ca_state = "CA"; cd_gender = "M"; cd_marital_status = "S"; cd_dep_count = 1; cd_dep_employed_count = 1; cd_dep_college_count = 0; cnt = 1 }]))
