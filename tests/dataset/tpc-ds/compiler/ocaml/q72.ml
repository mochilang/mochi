(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable cs_item_sk : int; mutable cs_order_number : int; mutable cs_quantity : int; mutable cs_sold_date_sk : int; mutable cs_ship_date_sk : int; mutable cs_bill_cdemo_sk : int; mutable cs_bill_hdemo_sk : int; mutable cs_promo_sk : Obj.t }
type record2 = { mutable inv_item_sk : int; mutable inv_warehouse_sk : int; mutable inv_date_sk : int; mutable inv_quantity_on_hand : int }
type record3 = { mutable w_warehouse_sk : int; mutable w_warehouse_name : string }
type record4 = { mutable i_item_sk : int; mutable i_item_desc : string }
type record5 = { mutable cd_demo_sk : int; mutable cd_marital_status : string }
type record6 = { mutable hd_demo_sk : int; mutable hd_buy_potential : string }
type record7 = { mutable d_date_sk : int; mutable d_week_seq : int; mutable d_date : int; mutable d_year : int }
type record8 = { mutable item_desc : string; mutable warehouse : string; mutable week_seq : int }
type record9 = { mutable i_item_desc : Obj.t; mutable w_warehouse_name : Obj.t; mutable d_week_seq : Obj.t; mutable no_promo : int; mutable promo : int; mutable total_cnt : int }
type record10 = { mutable i_item_desc : string; mutable w_warehouse_name : string; mutable d_week_seq : int; mutable no_promo : int; mutable promo : int; mutable total_cnt : int }

let catalog_sales : record1 list = [{ cs_item_sk = 1; cs_order_number = 1; cs_quantity = 1; cs_sold_date_sk = 1; cs_ship_date_sk = 3; cs_bill_cdemo_sk = 1; cs_bill_hdemo_sk = 1; cs_promo_sk = () }]
let inventory : record2 list = [{ inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 2; inv_quantity_on_hand = 0 }]
let warehouse : record3 list = [{ w_warehouse_sk = 1; w_warehouse_name = "Main" }]
let item : record4 list = [{ i_item_sk = 1; i_item_desc = "ItemA" }]
let customer_demographics : record5 list = [{ cd_demo_sk = 1; cd_marital_status = "M" }]
let household_demographics : record6 list = [{ hd_demo_sk = 1; hd_buy_potential = "5001-10000" }]
let date_dim : record7 list = [{ d_date_sk = 1; d_week_seq = 10; d_date = 1; d_year = 2000 };{ d_date_sk = 2; d_week_seq = 10; d_date = 1; d_year = 2000 };{ d_date_sk = 3; d_week_seq = 10; d_date = 7; d_year = 2000 }]
let result : record10 list = (let (__groups0 : (record8 * record1 list) list ref) = ref [] in
  List.iter (fun (cs : record1) ->
      List.iter (fun (inv : record2) ->
            List.iter (fun (w : record3) ->
                    List.iter (fun (i : record4) ->
                              List.iter (fun (cd : record5) ->
                                          List.iter (fun (hd : record6) ->
                                                        List.iter (fun (d1 : record7) ->
                                                                        List.iter (fun (d2 : record7) ->
                                                                                          List.iter (fun (d3 : record7) ->
                                                                                                                              if (inv.inv_item_sk = cs.cs_item_sk) && (w.w_warehouse_sk = inv.inv_warehouse_sk) && (i.i_item_sk = cs.cs_item_sk) && (cd.cd_demo_sk = cs.cs_bill_cdemo_sk) && (hd.hd_demo_sk = cs.cs_bill_hdemo_sk) && (d1.d_date_sk = cs.cs_sold_date_sk) && (d2.d_date_sk = inv.inv_date_sk) && (d3.d_date_sk = cs.cs_ship_date_sk) && (((((((d1.d_week_seq = d2.d_week_seq) && (inv.inv_quantity_on_hand < cs.cs_quantity)) && (d3.d_date > d1.d_date)) + 5) && (hd.hd_buy_potential = "5001-10000")) && (d1.d_year = 2000)) && (cd.cd_marital_status = "M")) then (
                      let (key : record8) = { item_desc = i.i_item_desc; warehouse = w.w_warehouse_name; week_seq = d1.d_week_seq } in
                      let cur = try List.assoc key !__groups0 with Not_found -> [] in
                      __groups0 := (key, cs :: cur) :: List.remove_assoc key !__groups0);
                                                                                          ) date_dim;
                                                                        ) date_dim;
                                                        ) date_dim;
                                          ) household_demographics;
                              ) customer_demographics;
                    ) item;
            ) warehouse;
      ) inventory;
  ) catalog_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { i_item_desc = g.key.item_desc; w_warehouse_name = g.key.warehouse; d_week_seq = g.key.week_seq; no_promo = List.length (let __res1 = ref [] in
  List.iter (fun x ->
      if (x.cs_promo_sk = ()) then
    __res1 := x :: !__res1;
  ) g.items;
List.rev !__res1)
; promo = List.length (let __res2 = ref [] in
  List.iter (fun x ->
      if (x.cs_promo_sk <> ()) then
    __res2 := x :: !__res2;
  ) g.items;
List.rev !__res2)
; total_cnt = List.length g.items } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ i_item_desc = "ItemA"; w_warehouse_name = "Main"; d_week_seq = 10; no_promo = 1; promo = 0; total_cnt = 1 }]))
