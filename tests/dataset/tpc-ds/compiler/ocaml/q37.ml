(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string; mutable i_current_price : float; mutable i_manufact_id : int }
type record2 = { mutable inv_item_sk : int; mutable inv_warehouse_sk : int; mutable inv_date_sk : int; mutable inv_quantity_on_hand : int }
type record3 = { mutable d_date_sk : int; mutable d_date : string }
type record4 = { mutable cs_item_sk : int; mutable cs_sold_date_sk : int }
type record5 = { mutable id : string; mutable desc : string; mutable price : float }
type record6 = { mutable i_item_id : Obj.t; mutable i_item_desc : Obj.t; mutable i_current_price : Obj.t }
type record7 = { mutable i_item_id : string; mutable i_item_desc : string; mutable i_current_price : float }

let item : record1 list = [{ i_item_sk = 1; i_item_id = "I1"; i_item_desc = "Item1"; i_current_price = 30.; i_manufact_id = 800 };{ i_item_sk = 2; i_item_id = "I2"; i_item_desc = "Item2"; i_current_price = 60.; i_manufact_id = 801 }]
let inventory : record2 list = [{ inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 200 };{ inv_item_sk = 2; inv_warehouse_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 300 }]
let date_dim : record3 list = [{ d_date_sk = 1; d_date = "2000-01-15" }]
let catalog_sales : record4 list = [{ cs_item_sk = 1; cs_sold_date_sk = 1 }]
let result : record7 list = (let (__groups0 : (record5 * record1 list) list ref) = ref [] in
  List.iter (fun (i : record1) ->
      List.iter (fun (inv : record2) ->
            List.iter (fun (d : record3) ->
                    List.iter (fun (cs : record4) ->
                                    if (i.i_item_sk = inv.inv_item_sk) && (inv.inv_date_sk = d.d_date_sk) && (cs.cs_item_sk = i.i_item_sk) && ((((((i.i_current_price >= 20) && (i.i_current_price <= 50)) && (i.i_manufact_id >= 800)) && (i.i_manufact_id <= 803)) && (inv.inv_quantity_on_hand >= 100)) && (inv.inv_quantity_on_hand <= 500)) then (
            let (key : record5) = { id = i.i_item_id; desc = i.i_item_desc; price = i.i_current_price } in
            let cur = try List.assoc key !__groups0 with Not_found -> [] in
            __groups0 := (key, i :: cur) :: List.remove_assoc key !__groups0);
                    ) catalog_sales;
            ) date_dim;
      ) inventory;
  ) item;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { i_item_id = g.key.id; i_item_desc = g.key.desc; i_current_price = g.key.price } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ i_item_id = "I1"; i_item_desc = "Item1"; i_current_price = 30. }]))
