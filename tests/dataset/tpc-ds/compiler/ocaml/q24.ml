(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_ticket_number : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_store_sk : int; mutable ss_net_paid : float }
type record2 = { mutable sr_ticket_number : int; mutable sr_item_sk : int }
type record3 = { mutable s_store_sk : int; mutable s_store_name : string; mutable s_market_id : int; mutable s_state : string; mutable s_zip : string }
type record4 = { mutable i_item_sk : int; mutable i_color : string; mutable i_current_price : float; mutable i_manager_id : int; mutable i_units : string; mutable i_size : string }
type record5 = { mutable c_customer_sk : int; mutable c_first_name : string; mutable c_last_name : string; mutable c_current_addr_sk : int; mutable c_birth_country : string }
type record6 = { mutable ca_address_sk : int; mutable ca_state : string; mutable ca_country : string; mutable ca_zip : string }
type record7 = { mutable last : string; mutable first : string; mutable store_name : string; mutable color : string }
type record8 = { mutable c_last_name : Obj.t; mutable c_first_name : Obj.t; mutable s_store_name : Obj.t; mutable color : Obj.t; mutable netpaid : float }
type record9 = { mutable c_last_name : string; mutable c_first_name : string; mutable s_store_name : string; mutable color : string; mutable netpaid : float }
type record10 = { mutable c_last_name : string; mutable c_first_name : string; mutable s_store_name : string; mutable paid : float }

type storesale = { mutable ss_ticket_number : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_store_sk : int; mutable ss_net_paid : float }
type storereturn = { mutable sr_ticket_number : int; mutable sr_item_sk : int }
type store = { mutable s_store_sk : int; mutable s_store_name : string; mutable s_market_id : int; mutable s_state : string; mutable s_zip : string }
type item = { mutable i_item_sk : int; mutable i_color : string; mutable i_current_price : float; mutable i_manager_id : int; mutable i_units : string; mutable i_size : string }
type customer = { mutable c_customer_sk : int; mutable c_first_name : string; mutable c_last_name : string; mutable c_current_addr_sk : int; mutable c_birth_country : string }
type customeraddress = { mutable ca_address_sk : int; mutable ca_state : string; mutable ca_country : string; mutable ca_zip : string }
let store_sales : record1 list = [{ ss_ticket_number = 1; ss_item_sk = 1; ss_customer_sk = 1; ss_store_sk = 1; ss_net_paid = 100. };{ ss_ticket_number = 2; ss_item_sk = 2; ss_customer_sk = 2; ss_store_sk = 1; ss_net_paid = 50. }]
let store_returns : record2 list = [{ sr_ticket_number = 1; sr_item_sk = 1 };{ sr_ticket_number = 2; sr_item_sk = 2 }]
let store : record3 list = [{ s_store_sk = 1; s_store_name = "Store1"; s_market_id = 5; s_state = "CA"; s_zip = "12345" }]
let item : record4 list = [{ i_item_sk = 1; i_color = "RED"; i_current_price = 10.; i_manager_id = 1; i_units = "EA"; i_size = "M" };{ i_item_sk = 2; i_color = "BLUE"; i_current_price = 20.; i_manager_id = 2; i_units = "EA"; i_size = "L" }]
let customer : record5 list = [{ c_customer_sk = 1; c_first_name = "Ann"; c_last_name = "Smith"; c_current_addr_sk = 1; c_birth_country = "Canada" };{ c_customer_sk = 2; c_first_name = "Bob"; c_last_name = "Jones"; c_current_addr_sk = 2; c_birth_country = "USA" }]
let customer_address : record6 list = [{ ca_address_sk = 1; ca_state = "CA"; ca_country = "USA"; ca_zip = "12345" };{ ca_address_sk = 2; ca_state = "CA"; ca_country = "USA"; ca_zip = "54321" }]
let ssales : record9 list = (let (__groups0 : (record7 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (sr : record2) ->
            List.iter (fun (s : record3) ->
                    List.iter (fun (i : record4) ->
                              List.iter (fun (c : record5) ->
                                          List.iter (fun (ca : record6) ->
                                                                  if ((ss.ss_ticket_number = sr.sr_ticket_number) && (ss.ss_item_sk = sr.sr_item_sk)) && (ss.ss_store_sk = s.s_store_sk) && (ss.ss_item_sk = i.i_item_sk) && (ss.ss_customer_sk = c.c_customer_sk) && (c.c_current_addr_sk = ca.ca_address_sk) && (((c.c_birth_country <> strings.ToUpper ca.ca_country) && (s.s_zip = ca.ca_zip)) && (s.s_market_id = 5)) then (
                let (key : record7) = { last = c.c_last_name; first = c.c_first_name; store_name = s.s_store_name; color = i.i_color } in
                let cur = try List.assoc key !__groups0 with Not_found -> [] in
                __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
                                          ) customer_address;
                              ) customer;
                    ) item;
            ) store;
      ) store_returns;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record7), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { c_last_name = g.key.last; c_first_name = g.key.first; s_store_name = g.key.store_name; color = g.key.color; netpaid = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss_net_paid :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let avg_paid : float = (float_of_int (List.fold_left (+) 0 (let __res2 = ref [] in
  List.iter (fun (x : record9) ->
      __res2 := x.netpaid :: !__res2;
  ) ssales;
List.rev !__res2)
) /. float_of_int (List.length (let __res2 = ref [] in
  List.iter (fun (x : record9) ->
      __res2 := x.netpaid :: !__res2;
  ) ssales;
List.rev !__res2)
))
let result : record10 list = (let __res3 = ref [] in
  List.iter (fun (x : record9) ->
      if (((x.color = "RED") && (x.netpaid > 0.05)) *. avg_paid) then
    __res3 := { c_last_name = x.c_last_name; c_first_name = x.c_first_name; s_store_name = x.s_store_name; paid = x.netpaid } :: !__res3;
  ) ssales;
List.rev !__res3)


let () =
  json result;
  assert ((result = [{ c_last_name = "Smith"; c_first_name = "Ann"; s_store_name = "Store1"; paid = 100. }]))
