(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
    exception Break
    exception Continue


    type record1 = { mutable id : int }
    type record2 = { mutable item : int; mutable qty : int }
    type record3 = { mutable item : int }

let item : record1 list = [[("id",Obj.repr (1))];[("id",Obj.repr (2))];[("id",Obj.repr (3))]]
let inventory : record2 list = [{ item = 1; qty = 20 };{ item = 1; qty = 22 };{ item = 1; qty = 5 };{ item = 2; qty = 30 };{ item = 2; qty = 5 };{ item = 3; qty = 10 }]
let store_sales : record3 list = [[("item",Obj.repr (1))];[("item",Obj.repr (2))]]
let result : int ref = ref 0

let () =
  let rec __loop0 lst =
    match lst with
      | [] -> ()
      | (inv : record2)::rest ->
        (try
          let rec __loop1 lst =
            match lst with
              | [] -> ()
              | s::rest ->
                (try
                  if (inv.item = Obj.obj (List.assoc "item" s)) then (
                    result := ((!result) + inv.qty);
                  ) ;
                with Continue -> ())
                ; __loop1 rest
            in
            try __loop1 store_sales with Break -> ()
          with Continue -> ())
          ; __loop0 rest
      in
      try __loop0 inventory with Break -> ()
      json (!result);
      assert (((!result) = 82))
