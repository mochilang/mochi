(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable cs_bill_customer_sk : int; mutable cs_sales_price : float; mutable cs_sold_date_sk : int }
type record2 = { mutable c_customer_sk : int; mutable c_current_addr_sk : int }
type record3 = { mutable ca_address_sk : int; mutable ca_zip : string; mutable ca_state : string }
type record4 = { mutable d_date_sk : int; mutable d_qoy : int; mutable d_year : int }
type record5 = { mutable zip : string }
type record6 = { mutable ca_zip : Obj.t; mutable sum_sales : float }
type record7 = { mutable ca_zip : string; mutable sum_sales : float }

type catalogsale = { mutable cs_bill_customer_sk : int; mutable cs_sales_price : float; mutable cs_sold_date_sk : int }
type customer = { mutable c_customer_sk : int; mutable c_current_addr_sk : int }
type customeraddress = { mutable ca_address_sk : int; mutable ca_zip : string; mutable ca_state : string }
type datedim = { mutable d_date_sk : int; mutable d_qoy : int; mutable d_year : int }
let catalog_sales : record1 list = [{ cs_bill_customer_sk = 1; cs_sales_price = 600.; cs_sold_date_sk = 1 }]
let customer : record2 list = [{ c_customer_sk = 1; c_current_addr_sk = 1 }]
let customer_address : record3 list = [{ ca_address_sk = 1; ca_zip = "85669"; ca_state = "CA" }]
let date_dim : record4 list = [{ d_date_sk = 1; d_qoy = 1; d_year = 2000 }]
let filtered : record7 list = (let (__groups0 : (record5 * record1 list) list ref) = ref [] in
  List.iter (fun (cs : record1) ->
      List.iter (fun (c : record2) ->
            List.iter (fun (ca : record3) ->
                    List.iter (fun (d : record4) ->
                                    if (cs.cs_bill_customer_sk = c.c_customer_sk) && (c.c_current_addr_sk = ca.ca_address_sk) && (cs.cs_sold_date_sk = d.d_date_sk) && (((((List.mem ((List.mem substr ca.ca_zip 0 5 ["85669";"86197";"88274";"83405";"86475";"85392";"85460";"80348";"81792"]) || ca.ca_state) ["CA";"WA";"GA"]) || (cs.cs_sales_price > 500))) && (d.d_qoy = 1)) && (d.d_year = 2000)) then (
            let (key : record5) = [("zip",Obj.repr (ca.ca_zip))] in
            let cur = try List.assoc key !__groups0 with Not_found -> [] in
            __groups0 := (key, cs :: cur) :: List.remove_assoc key !__groups0);
                    ) date_dim;
            ) customer_address;
      ) customer;
  ) catalog_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { ca_zip = g.key.zip; sum_sales = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.cs_sales_price :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json filtered;
  assert ((filtered = [{ ca_zip = "85669"; sum_sales = 600. }]))
