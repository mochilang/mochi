(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:15Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record2 = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_ext_sales_price : float }
type record3 = { mutable i_item_sk : int; mutable i_manufact_id : int; mutable i_brand_id : int; mutable i_brand : string }
type record4 = { mutable d_year : int; mutable brand_id : int; mutable brand : string }
type record5 = { mutable d_year : Obj.t; mutable brand_id : Obj.t; mutable brand : Obj.t; mutable sum_agg : float }
type record6 = { mutable d_year : int; mutable brand_id : int; mutable brand : string; mutable sum_agg : float }

let date_dim : record1 list = [{ d_date_sk = 1; d_year = 1998; d_moy = 12 }]
let store_sales : record2 list = [{ ss_sold_date_sk = 1; ss_item_sk = 1; ss_ext_sales_price = 10. };{ ss_sold_date_sk = 1; ss_item_sk = 2; ss_ext_sales_price = 20. }]
let item : record3 list = [{ i_item_sk = 1; i_manufact_id = 100; i_brand_id = 1; i_brand = "Brand1" };{ i_item_sk = 2; i_manufact_id = 100; i_brand_id = 2; i_brand = "Brand2" }]
let result : record6 list = (let (__groups0 : (record4 * record1 list) list ref) = ref [] in
  List.iter (fun (dt : record1) ->
      List.iter (fun (ss : record2) ->
            List.iter (fun (i : record3) ->
                        if (dt.d_date_sk = ss.ss_sold_date_sk) && (ss.ss_item_sk = i.i_item_sk) && ((i.i_manufact_id = 100) && (dt.d_moy = 12)) then (
          let (key : record4) = { d_year = dt.d_year; brand_id = i.i_brand_id; brand = i.i_brand } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, dt :: cur) :: List.remove_assoc key !__groups0);
            ) item;
      ) store_sales;
  ) date_dim;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { d_year = g.key.d_year; brand_id = g.key.brand_id; brand = g.key.brand; sum_agg = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss_ext_sales_price :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ d_year = 1998; brand_id = 2; brand = "Brand2"; sum_agg = 20. };{ d_year = 1998; brand_id = 1; brand = "Brand1"; sum_agg = 10. }]))
