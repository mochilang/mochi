(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable item : int; mutable sold_date : int; mutable price : float }
type record2 = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_brand : string; mutable i_manager_id : int }
type record3 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record4 = { mutable year : int; mutable brand_id : int; mutable brand : string }
type record5 = { mutable d_year : Obj.t; mutable brand_id : Obj.t; mutable ext_price : float }
type record6 = { mutable d_year : int; mutable brand_id : int; mutable ext_price : float }

let store_sales : record1 list = [{ item = 1; sold_date = 1; price = 10. };{ item = 2; sold_date = 1; price = 22. };{ item = 1; sold_date = 1; price = 20. }]
let item : record2 list = [{ i_item_sk = 1; i_brand_id = 1; i_brand = "B1"; i_manager_id = 1 };{ i_item_sk = 2; i_brand_id = 2; i_brand = "B2"; i_manager_id = 1 }]
let date_dim : record3 list = [{ d_date_sk = 1; d_year = 2001; d_moy = 11 }]
let filtered : record6 list = (let (__groups0 : (record4 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (i : record2) ->
            List.iter (fun (d : record3) ->
                        if ((ss.item = i.i_item_sk) && (i.i_manager_id = 1)) && (((ss.sold_date = d.d_date_sk) && (d.d_year = 2001)) && (d.d_moy = 11)) then (
          let (key : record4) = { year = d.d_year; brand_id = i.i_brand_id; brand = i.i_brand } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
            ) date_dim;
      ) item;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { d_year = g.key.year; brand_id = g.key.brand_id; ext_price = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.price :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let result : record6 list = (let __res2 = ref [] in
  List.iter (fun (r : record6) ->
      __res2 := r :: !__res2;
  ) filtered;
List.rev !__res2)


let () =
  json result;
  assert ((result = [{ d_year = 2001; brand_id = 1; ext_price = 30. };{ d_year = 2001; brand_id = 2; ext_price = 22. }]))
