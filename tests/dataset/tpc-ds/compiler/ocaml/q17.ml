(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_ticket_number : int; mutable ss_quantity : int; mutable ss_store_sk : int }
type record2 = { mutable sr_returned_date_sk : int; mutable sr_customer_sk : int; mutable sr_item_sk : int; mutable sr_ticket_number : int; mutable sr_return_quantity : int }
type record3 = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int }
type record4 = { mutable d_date_sk : int; mutable d_quarter_name : string }
type record5 = { mutable s_store_sk : int; mutable s_state : string }
type record6 = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string }
type record7 = { mutable qty : int; mutable ret : int; mutable csq : int; mutable i_item_id : string; mutable i_item_desc : string; mutable s_state : string }
type record8 = { mutable i_item_id : string; mutable i_item_desc : string; mutable s_state : string }
type record9 = { mutable i_item_id : Obj.t; mutable i_item_desc : Obj.t; mutable s_state : Obj.t; mutable store_sales_quantitycount : int; mutable store_sales_quantityave : float; mutable store_sales_quantitystdev : float; mutable store_sales_quantitycov : float; mutable store_returns_quantitycount : int; mutable store_returns_quantityave : float; mutable store_returns_quantitystdev : float; mutable store_returns_quantitycov : float; mutable catalog_sales_quantitycount : int; mutable catalog_sales_quantityave : float; mutable catalog_sales_quantitystdev : float; mutable catalog_sales_quantitycov : float }
type record10 = { mutable i_item_id : string; mutable i_item_desc : string; mutable s_state : string; mutable store_sales_quantitycount : int; mutable store_sales_quantityave : float; mutable store_sales_quantitystdev : float; mutable store_sales_quantitycov : float; mutable store_returns_quantitycount : int; mutable store_returns_quantityave : float; mutable store_returns_quantitystdev : float; mutable store_returns_quantitycov : float; mutable catalog_sales_quantitycount : int; mutable catalog_sales_quantityave : float; mutable catalog_sales_quantitystdev : float; mutable catalog_sales_quantitycov : float }

type storesale = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_ticket_number : int; mutable ss_quantity : int; mutable ss_store_sk : int }
type storereturn = { mutable sr_returned_date_sk : int; mutable sr_customer_sk : int; mutable sr_item_sk : int; mutable sr_ticket_number : int; mutable sr_return_quantity : int }
type catalogsale = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int }
type datedim = { mutable d_date_sk : int; mutable d_quarter_name : string }
type store = { mutable s_store_sk : int; mutable s_state : string }
type item = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string }
let store_sales : record1 list = [{ ss_sold_date_sk = 1; ss_item_sk = 1; ss_customer_sk = 1; ss_ticket_number = 1; ss_quantity = 10; ss_store_sk = 1 }]
let store_returns : record2 list = [{ sr_returned_date_sk = 2; sr_customer_sk = 1; sr_item_sk = 1; sr_ticket_number = 1; sr_return_quantity = 2 }]
let catalog_sales : record3 list = [{ cs_sold_date_sk = 3; cs_item_sk = 1; cs_bill_customer_sk = 1; cs_quantity = 5 }]
let date_dim : record4 list = [{ d_date_sk = 1; d_quarter_name = "1998Q1" };{ d_date_sk = 2; d_quarter_name = "1998Q2" };{ d_date_sk = 3; d_quarter_name = "1998Q3" }]
let store : record5 list = [{ s_store_sk = 1; s_state = "CA" }]
let item : record6 list = [{ i_item_sk = 1; i_item_id = "I1"; i_item_desc = "Item 1" }]
let joined : record7 list = (let __res0 = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (sr : record2) ->
            List.iter (fun (cs : record3) ->
                    List.iter (fun (d1 : record4) ->
                              List.iter (fun (d2 : record4) ->
                                          List.iter (fun (d3 : record4) ->
                                                        List.iter (fun (s : record5) ->
                                                                        List.iter (fun (i : record6) ->
                                                                                                        if (((ss.ss_customer_sk = sr.sr_customer_sk) && (ss.ss_item_sk = sr.sr_item_sk)) && (ss.ss_ticket_number = sr.sr_ticket_number)) && ((sr.sr_customer_sk = cs.cs_bill_customer_sk) && (sr.sr_item_sk = cs.cs_item_sk)) && ((ss.ss_sold_date_sk = d1.d_date_sk) && (d1.d_quarter_name = "1998Q1")) && (List.mem ((sr.sr_returned_date_sk = d2.d_date_sk) && d2.d_quarter_name) ["1998Q1";"1998Q2";"1998Q3"]) && (List.mem ((cs.cs_sold_date_sk = d3.d_date_sk) && d3.d_quarter_name) ["1998Q1";"1998Q2";"1998Q3"]) && (ss.ss_store_sk = s.s_store_sk) && (ss.ss_item_sk = i.i_item_sk) then
                  __res0 := { qty = ss.ss_quantity; ret = sr.sr_return_quantity; csq = cs.cs_quantity; i_item_id = i.i_item_id; i_item_desc = i.i_item_desc; s_state = s.s_state } :: !__res0;
                                                                        ) item;
                                                        ) store;
                                          ) date_dim;
                              ) date_dim;
                    ) date_dim;
            ) catalog_sales;
      ) store_returns;
  ) store_sales;
List.rev !__res0)

let result : record10 list = (let (__groups1 : (record8 * record7 list) list ref) = ref [] in
  List.iter (fun (j : record7) ->
      let (key : record8) = { i_item_id = j.i_item_id; i_item_desc = j.i_item_desc; s_state = j.s_state } in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, j :: cur) :: List.remove_assoc key !__groups1;
  ) joined;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record8), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { i_item_id = g.key.i_item_id; i_item_desc = g.key.i_item_desc; s_state = g.key.s_state; store_sales_quantitycount = List.length (let __res2 = ref [] in
  List.iter (fun _ ->
      __res2 := _ :: !__res2;
  ) g.items;
List.rev !__res2)
; store_sales_quantityave = (float_of_int (List.fold_left (+) 0 (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.qty :: !__res3;
  ) g.items;
List.rev !__res3)
) /. float_of_int (List.length (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.qty :: !__res3;
  ) g.items;
List.rev !__res3)
)); store_sales_quantitystdev = 0.; store_sales_quantitycov = 0.; store_returns_quantitycount = List.length (let __res4 = ref [] in
  List.iter (fun _ ->
      __res4 := _ :: !__res4;
  ) g.items;
List.rev !__res4)
; store_returns_quantityave = (float_of_int (List.fold_left (+) 0 (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.ret :: !__res5;
  ) g.items;
List.rev !__res5)
) /. float_of_int (List.length (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.ret :: !__res5;
  ) g.items;
List.rev !__res5)
)); store_returns_quantitystdev = 0.; store_returns_quantitycov = 0.; catalog_sales_quantitycount = List.length (let __res6 = ref [] in
  List.iter (fun _ ->
      __res6 := _ :: !__res6;
  ) g.items;
List.rev !__res6)
; catalog_sales_quantityave = (float_of_int (List.fold_left (+) 0 (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.csq :: !__res7;
  ) g.items;
List.rev !__res7)
) /. float_of_int (List.length (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.csq :: !__res7;
  ) g.items;
List.rev !__res7)
)); catalog_sales_quantitystdev = 0.; catalog_sales_quantitycov = 0. } :: !__res1
  ) !__groups1;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ i_item_id = "I1"; i_item_desc = "Item 1"; s_state = "CA"; store_sales_quantitycount = 1; store_sales_quantityave = 10.; store_sales_quantitystdev = 0.; store_sales_quantitycov = 0.; store_returns_quantitycount = 1; store_returns_quantityave = 2.; store_returns_quantitystdev = 0.; store_returns_quantitycov = 0.; catalog_sales_quantitycount = 1; catalog_sales_quantityave = 5.; catalog_sales_quantitystdev = 0.; catalog_sales_quantitycov = 0. }]))
