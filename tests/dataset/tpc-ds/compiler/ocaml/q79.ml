(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable d_date_sk : int; mutable d_dow : int; mutable d_year : int }
type record2 = { mutable s_store_sk : int; mutable s_city : string; mutable s_number_employees : int }
type record3 = { mutable hd_demo_sk : int; mutable hd_dep_count : int; mutable hd_vehicle_count : int }
type record4 = { mutable ss_sold_date_sk : int; mutable ss_store_sk : int; mutable ss_ticket_number : int; mutable ss_customer_sk : int; mutable ss_hdemo_sk : int; mutable ss_coupon_amt : float; mutable ss_net_profit : float }
type record5 = { mutable c_customer_sk : int; mutable c_last_name : string; mutable c_first_name : string }
type record6 = { mutable ticket : int; mutable customer_sk : int; mutable city : string }
type record7 = { mutable key : Obj.t; mutable amt : float; mutable profit : float }
type record8 = { mutable key : record6; mutable amt : float; mutable profit : float }
type record9 = { mutable c_last_name : string; mutable c_first_name : string; mutable s_city : string; mutable ss_ticket_number : int; mutable amt : float; mutable profit : float }

let date_dim : record1 list = [{ d_date_sk = 1; d_dow = 1; d_year = 1999 }]
let store : record2 list = [{ s_store_sk = 1; s_city = "CityA"; s_number_employees = 250 }]
let household_demographics : record3 list = [{ hd_demo_sk = 1; hd_dep_count = 2; hd_vehicle_count = 1 }]
let store_sales : record4 list = [{ ss_sold_date_sk = 1; ss_store_sk = 1; ss_ticket_number = 1; ss_customer_sk = 1; ss_hdemo_sk = 1; ss_coupon_amt = 5.; ss_net_profit = 10. }]
let customer : record5 list = [{ c_customer_sk = 1; c_last_name = "Smith"; c_first_name = "Alice" }]
let agg : record8 list = (let (__groups0 : (record6 * record4 list) list ref) = ref [] in
  List.iter (fun (ss : record4) ->
      List.iter (fun (d : record1) ->
            List.iter (fun (s : record2) ->
                    List.iter (fun (hd : record3) ->
                                    if (d.d_date_sk = ss.ss_sold_date_sk) && (s.s_store_sk = ss.ss_store_sk) && (hd.hd_demo_sk = ss.ss_hdemo_sk) && (((((((hd.hd_dep_count = 2) || (hd.hd_vehicle_count > 1))) && (d.d_dow = 1)) && ((((d.d_year = 1998) || (d.d_year = 1999)) || (d.d_year = 2000)))) && (s.s_number_employees >= 200)) && (s.s_number_employees <= 295)) then (
            let (key : record6) = { ticket = ss.ss_ticket_number; customer_sk = ss.ss_customer_sk; city = s.s_city } in
            let cur = try List.assoc key !__groups0 with Not_found -> [] in
            __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
                    ) household_demographics;
            ) store;
      ) date_dim;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { key = g.key; amt = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss.ss_coupon_amt :: !__res1;
  ) g.items;
List.rev !__res1)
); profit = (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.ss.ss_net_profit :: !__res2;
  ) g.items;
List.rev !__res2)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let result : record9 list = (let __res3 = ref [] in
  List.iter (fun a ->
    List.iter (fun c ->
      if (c.c_customer_sk = a.key.customer_sk) then (
        __res3 := { c_last_name = c.c_last_name; c_first_name = c.c_first_name; s_city = a.key.city; ss_ticket_number = a.key.ticket; amt = a.amt; profit = a.profit } :: !__res3;
      )
    ) customer;
  ) agg;
  List.rev !__res3)


let () =
  json result;
  assert ((result = [{ c_last_name = "Smith"; c_first_name = "Alice"; s_city = "CityA"; ss_ticket_number = 1; amt = 5.; profit = 10. }]))
