(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_item_sk : int; mutable ss_list_price : float; mutable ss_quantity : int; mutable ss_sold_date_sk : int }
type record2 = { mutable cs_item_sk : int; mutable cs_list_price : float; mutable cs_quantity : int; mutable cs_sold_date_sk : int }
type record3 = { mutable ws_item_sk : int; mutable ws_list_price : float; mutable ws_quantity : int; mutable ws_sold_date_sk : int }
type record4 = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_class_id : int; mutable i_category_id : int }
type record5 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record6 = { mutable ss_item_sk : int }
type record7 = { mutable brand_id : int; mutable class_id : int; mutable category_id : int }
type record8 = { mutable channel : string; mutable sales : float; mutable number_sales : int }
type record9 = { mutable channel : string; mutable i_brand_id : int; mutable i_class_id : int; mutable i_category_id : int; mutable sales : float; mutable number_sales : int }

type storesale = { mutable ss_item_sk : int; mutable ss_list_price : float; mutable ss_quantity : int; mutable ss_sold_date_sk : int }
type catalogsale = { mutable cs_item_sk : int; mutable cs_list_price : float; mutable cs_quantity : int; mutable cs_sold_date_sk : int }
type websale = { mutable ws_item_sk : int; mutable ws_list_price : float; mutable ws_quantity : int; mutable ws_sold_date_sk : int }
type item = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_class_id : int; mutable i_category_id : int }
type datedim = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
let store_sales : record1 list = [{ ss_item_sk = 1; ss_list_price = 10.; ss_quantity = 2; ss_sold_date_sk = 1 };{ ss_item_sk = 1; ss_list_price = 20.; ss_quantity = 3; ss_sold_date_sk = 2 }]
let catalog_sales : record2 list = [{ cs_item_sk = 1; cs_list_price = 10.; cs_quantity = 2; cs_sold_date_sk = 1 }]
let web_sales : record3 list = [{ ws_item_sk = 1; ws_list_price = 30.; ws_quantity = 1; ws_sold_date_sk = 1 }]
let item : record4 list = [{ i_item_sk = 1; i_brand_id = 1; i_class_id = 1; i_category_id = 1 }]
let date_dim : record5 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 12 };{ d_date_sk = 2; d_year = 2002; d_moy = 11 }]
let cross_items : record6 list = [[("ss_item_sk",Obj.repr (1))]]
let avg_sales : float = (List.fold_left (+.) 0.0 [20.;20.;30.] /. float_of_int (List.length [20.;20.;30.]))
let store_filtered : record8 list = (let (__groups1 : (record7 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (d : record5) ->
              if (((ss.ss_sold_date_sk = d.d_date_sk) && (d.d_year = 2002)) && (d.d_moy = 11)) && (List.mem ss.ss_item_sk ((let __res0 = ref [] in
  List.iter (fun ci ->
      __res0 := Obj.obj (List.assoc "ss_item_sk" ci) :: !__res0;
  ) cross_items;
List.rev !__res0)
)) then (
        let (key : record7) = { brand_id = 1; class_id = 1; category_id = 1 } in
        let cur = try List.assoc key !__groups1 with Not_found -> [] in
        __groups1 := (key, ss :: cur) :: List.remove_assoc key !__groups1);
      ) date_dim;
  ) store_sales;
  let __res1 = ref [] in
  List.iter (fun ((gKey : record7), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { channel = "store"; sales = (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := (x.ss_quantity *. x.ss_list_price) :: !__res2;
  ) g.items;
List.rev !__res2)
); number_sales = List.length (let __res3 = ref [] in
  List.iter (fun _ ->
      __res3 := _ :: !__res3;
  ) g.items;
List.rev !__res3)
 } :: !__res1
  ) !__groups1;
  List.rev !__res1)

let result : record9 list = (let __res4 = ref [] in
  List.iter (fun (r : record8) ->
      if (r.sales > avg_sales) then
    __res4 := { channel = r.channel; i_brand_id = 1; i_class_id = 1; i_category_id = 1; sales = r.sales; number_sales = r.number_sales } :: !__res4;
  ) store_filtered;
List.rev !__res4)


let () =
  json result;
  assert ((result = [{ channel = "store"; i_brand_id = 1; i_class_id = 1; i_category_id = 1; sales = 60.; number_sales = 1 }]))
