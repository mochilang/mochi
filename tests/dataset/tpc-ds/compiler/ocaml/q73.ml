(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_ticket_number : int; mutable ss_customer_sk : int; mutable ss_sold_date_sk : int; mutable ss_store_sk : int; mutable ss_hdemo_sk : int }
type record2 = { mutable d_date_sk : int; mutable d_dom : int; mutable d_year : int }
type record3 = { mutable s_store_sk : int; mutable s_county : string }
type record4 = { mutable hd_demo_sk : int; mutable hd_buy_potential : string; mutable hd_vehicle_count : int; mutable hd_dep_count : int }
type record5 = { mutable c_customer_sk : int; mutable c_last_name : string; mutable c_first_name : string; mutable c_salutation : string; mutable c_preferred_cust_flag : string }
type record6 = { mutable ticket : int; mutable cust : int }
type record7 = { mutable key : Obj.t; mutable cnt : int }
type record8 = { mutable key : record6; mutable cnt : int }
type record9 = { mutable c_last_name : string; mutable c_first_name : string; mutable c_salutation : string; mutable c_preferred_cust_flag : string; mutable ss_ticket_number : int; mutable cnt : int }

let store_sales : record1 list = [{ ss_ticket_number = 1; ss_customer_sk = 1; ss_sold_date_sk = 1; ss_store_sk = 1; ss_hdemo_sk = 1 }]
let date_dim : record2 list = [{ d_date_sk = 1; d_dom = 1; d_year = 1998 }]
let store : record3 list = [{ s_store_sk = 1; s_county = "A" }]
let household_demographics : record4 list = [{ hd_demo_sk = 1; hd_buy_potential = "1001-5000"; hd_vehicle_count = 2; hd_dep_count = 3 }]
let customer : record5 list = [{ c_customer_sk = 1; c_last_name = "Smith"; c_first_name = "Alice"; c_salutation = "Ms."; c_preferred_cust_flag = "Y" }]
let groups : record8 list = (let (__groups0 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (d : record2) ->
            List.iter (fun (s : record3) ->
                    List.iter (fun (hd : record4) ->
                                    if (d.d_date_sk = ss.ss_sold_date_sk) && (s.s_store_sk = ss.ss_store_sk) && (hd.hd_demo_sk = ss.ss_hdemo_sk) && (((((((((d.d_dom >= 1) && (d.d_dom <= 2)) && (((hd.hd_buy_potential = "1001-5000") || (hd.hd_buy_potential = "0-500")))) && (hd.hd_vehicle_count > 0)) && hd.hd_dep_count) / hd.hd_vehicle_count) > 1) && ((((d.d_year = 1998) || (d.d_year = 1999)) || (d.d_year = 2000)))) && (s.s_county = "A")) then (
            let (key : record6) = { ticket = ss.ss_ticket_number; cust = ss.ss_customer_sk } in
            let cur = try List.assoc key !__groups0 with Not_found -> [] in
            __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
                    ) household_demographics;
            ) store;
      ) date_dim;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { key = g.key; cnt = List.length g.items } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let result : record9 list = (let __res1 = ref [] in
  List.iter (fun g ->
    List.iter (fun c ->
      if (c.c_customer_sk = g.key.cust) then (
        if ((g.cnt >= 1) && (g.cnt <= 5)) then __res1 := { c_last_name = c.c_last_name; c_first_name = c.c_first_name; c_salutation = c.c_salutation; c_preferred_cust_flag = c.c_preferred_cust_flag; ss_ticket_number = g.key.ticket; cnt = g.cnt } :: !__res1;
      )
    ) customer;
  ) groups;
  List.rev !__res1)


let () =
  json result;
  assert ((result = [{ c_last_name = "Smith"; c_first_name = "Alice"; c_salutation = "Ms."; c_preferred_cust_flag = "Y"; ss_ticket_number = 1; cnt = 1 }]))
