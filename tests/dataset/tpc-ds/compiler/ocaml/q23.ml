(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_item_sk : int; mutable ss_sold_date_sk : int; mutable ss_customer_sk : int; mutable ss_quantity : int; mutable ss_sales_price : float }
type record2 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record3 = { mutable i_item_sk : int }
type record4 = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int; mutable cs_list_price : float }
type record5 = { mutable ws_sold_date_sk : int; mutable ws_item_sk : int; mutable ws_bill_customer_sk : int; mutable ws_quantity : int; mutable ws_list_price : float }
type record6 = { mutable item_sk : int; mutable date_sk : int }
type record7 = { mutable cust : Obj.t; mutable sales : float }
type record8 = { mutable cust : int; mutable sales : float }

type storesale = { mutable ss_item_sk : int; mutable ss_sold_date_sk : int; mutable ss_customer_sk : int; mutable ss_quantity : int; mutable ss_sales_price : float }
type datedim = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type item = { mutable i_item_sk : int }
type catalogsale = { mutable cs_sold_date_sk : int; mutable cs_item_sk : int; mutable cs_bill_customer_sk : int; mutable cs_quantity : int; mutable cs_list_price : float }
type websale = { mutable ws_sold_date_sk : int; mutable ws_item_sk : int; mutable ws_bill_customer_sk : int; mutable ws_quantity : int; mutable ws_list_price : float }
let store_sales : record1 list = [{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10. };{ ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10. }]
let date_dim : record2 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 1 }]
let item : record3 list = [[("i_item_sk",Obj.repr (1))];[("i_item_sk",Obj.repr (2))]]
let catalog_sales : record4 list = [{ cs_sold_date_sk = 1; cs_item_sk = 1; cs_bill_customer_sk = 1; cs_quantity = 2; cs_list_price = 10. };{ cs_sold_date_sk = 1; cs_item_sk = 2; cs_bill_customer_sk = 2; cs_quantity = 2; cs_list_price = 10. }]
let web_sales : record5 list = [{ ws_sold_date_sk = 1; ws_item_sk = 1; ws_bill_customer_sk = 1; ws_quantity = 3; ws_list_price = 10. };{ ws_sold_date_sk = 1; ws_item_sk = 2; ws_bill_customer_sk = 2; ws_quantity = 1; ws_list_price = 10. }]
let frequent_ss_items : int list = (let (__groups0 : (record6 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (d : record2) ->
            List.iter (fun i ->
                        if (ss.ss_sold_date_sk = d.d_date_sk) && (ss.ss_item_sk = Obj.obj (List.assoc "i_item_sk" i)) && (d.d_year = 2000) then (
          let (key : record6) = { item_sk = Obj.obj (List.assoc "i_item_sk" i); date_sk = d.d_date_sk } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
            ) item;
      ) date_dim;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := g.key.item_sk :: !__res0
  ) !__groups0;
  List.rev !__res0)

let customer_totals : record8 list = (let (__groups1 : (int * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      let (key : int) = ss.ss_customer_sk in
      let cur = try List.assoc key !__groups1 with Not_found -> [] in
      __groups1 := (key, ss :: cur) :: List.remove_assoc key !__groups1;
  ) store_sales;
  let __res1 = ref [] in
  List.iter (fun ((gKey : int), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res1 := { cust = g.key; sales = (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := (x.ss_quantity *. x.ss_sales_price) :: !__res2;
  ) g.items;
List.rev !__res2)
) } :: !__res1
  ) !__groups1;
  List.rev !__res1)

let max_sales = max (let __res3 = ref [] in
  List.iter (fun (c : record8) ->
      __res3 := c.sales :: !__res3;
  ) customer_totals;
List.rev !__res3)

let best_ss_customer : Obj.t list = (let __res4 = ref [] in
  List.iter (fun (c : record8) ->
      if ((c.sales > 0.95) *. max_sales) then
    __res4 := c.cust :: !__res4;
  ) customer_totals;
List.rev !__res4)

let catalog : Obj.t list = (let __res5 = ref [] in
  List.iter (fun cs ->
    List.iter (fun d ->
      if (cs.cs_sold_date_sk = d.d_date_sk) then (
        if (List.mem ((List.mem (((d.d_year = 2000) && (d.d_moy = 1)) && cs.cs_bill_customer_sk) best_ss_customer) && cs.cs_item_sk) frequent_ss_items) then __res5 := (cs.cs_quantity *. cs.cs_list_price) :: !__res5;
      )
    ) date_dim;
  ) catalog_sales;
  List.rev !__res5)

let web : Obj.t list = (let __res6 = ref [] in
  List.iter (fun ws ->
    List.iter (fun d ->
      if (ws.ws_sold_date_sk = d.d_date_sk) then (
        if (List.mem ((List.mem (((d.d_year = 2000) && (d.d_moy = 1)) && ws.ws_bill_customer_sk) best_ss_customer) && ws.ws_item_sk) frequent_ss_items) then __res6 := (ws.ws_quantity *. ws.ws_list_price) :: !__res6;
      )
    ) date_dim;
  ) web_sales;
  List.rev !__res6)

let result : float = ((sum_float catalog) +. (sum_float web))

let () =
  json result;
  assert ((result = 50.))
