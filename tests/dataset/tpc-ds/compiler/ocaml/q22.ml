(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable inv_item_sk : int; mutable inv_date_sk : int; mutable inv_quantity_on_hand : int }
type record2 = { mutable d_date_sk : int; mutable d_month_seq : int }
type record3 = { mutable i_item_sk : int; mutable i_product_name : string; mutable i_brand : string; mutable i_class : string; mutable i_category : string }
type record4 = { mutable product_name : string; mutable brand : string; mutable class : string; mutable category : string }
type record5 = { mutable i_product_name : Obj.t; mutable i_brand : Obj.t; mutable i_class : Obj.t; mutable i_category : Obj.t; mutable qoh : float }
type record6 = { mutable i_product_name : string; mutable i_brand : string; mutable i_class : string; mutable i_category : string; mutable qoh : float }

type inventory = { mutable inv_item_sk : int; mutable inv_date_sk : int; mutable inv_quantity_on_hand : int }
type datedim = { mutable d_date_sk : int; mutable d_month_seq : int }
type item = { mutable i_item_sk : int; mutable i_product_name : string; mutable i_brand : string; mutable i_class : string; mutable i_category : string }
let inventory : record1 list = [{ inv_item_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 10 };{ inv_item_sk = 1; inv_date_sk = 2; inv_quantity_on_hand = 20 };{ inv_item_sk = 1; inv_date_sk = 3; inv_quantity_on_hand = 10 };{ inv_item_sk = 1; inv_date_sk = 4; inv_quantity_on_hand = 20 };{ inv_item_sk = 2; inv_date_sk = 1; inv_quantity_on_hand = 50 }]
let date_dim : record2 list = [{ d_date_sk = 1; d_month_seq = 0 };{ d_date_sk = 2; d_month_seq = 1 };{ d_date_sk = 3; d_month_seq = 2 };{ d_date_sk = 4; d_month_seq = 3 }]
let item : record3 list = [{ i_item_sk = 1; i_product_name = "Prod1"; i_brand = "Brand1"; i_class = "Class1"; i_category = "Cat1" };{ i_item_sk = 2; i_product_name = "Prod2"; i_brand = "Brand2"; i_class = "Class2"; i_category = "Cat2" }]
let qoh : record6 list = (let (__groups0 : (record4 * record1 list) list ref) = ref [] in
  List.iter (fun (inv : record1) ->
      List.iter (fun (d : record2) ->
            List.iter (fun (i : record3) ->
                        if (inv.inv_date_sk = d.d_date_sk) && (inv.inv_item_sk = i.i_item_sk) && ((d.d_month_seq >= 0) && (d.d_month_seq <= 11)) then (
          let (key : record4) = { product_name = i.i_product_name; brand = i.i_brand; class = i.i_class; category = i.i_category } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, inv :: cur) :: List.remove_assoc key !__groups0);
            ) item;
      ) date_dim;
  ) inventory;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { i_product_name = g.key.product_name; i_brand = g.key.brand; i_class = g.key.class; i_category = g.key.category; qoh = (float_of_int (List.fold_left (+) 0 (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.inv_quantity_on_hand :: !__res1;
  ) g.items;
List.rev !__res1)
) /. float_of_int (List.length (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.inv_quantity_on_hand :: !__res1;
  ) g.items;
List.rev !__res1)
)) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json qoh;
  assert ((qoh = [{ i_product_name = "Prod1"; i_brand = "Brand1"; i_class = "Class1"; i_category = "Cat1"; qoh = 15. };{ i_product_name = "Prod2"; i_brand = "Brand2"; i_class = "Class2"; i_category = "Cat2"; qoh = 50. }]))
