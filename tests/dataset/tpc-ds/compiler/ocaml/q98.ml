(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_item_sk : int; mutable ss_sold_date_sk : int; mutable ss_ext_sales_price : float }
type record2 = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string; mutable i_category : string; mutable i_class : string; mutable i_current_price : float }
type record3 = { mutable d_date_sk : int; mutable d_date : string }
type record4 = { mutable item_id : string; mutable item_desc : string; mutable category : string; mutable class : string; mutable price : float }
type record5 = { mutable i_item_id : Obj.t; mutable i_item_desc : Obj.t; mutable i_category : Obj.t; mutable i_class : Obj.t; mutable i_current_price : Obj.t; mutable itemrevenue : float }
type record6 = { mutable i_item_id : string; mutable i_item_desc : string; mutable i_category : string; mutable i_class : string; mutable i_current_price : float; mutable itemrevenue : float }
type record7 = { mutable class : Obj.t; mutable total : float }
type record8 = { mutable class : string; mutable total : float }
type record9 = { mutable i_item_id : string; mutable i_item_desc : string; mutable i_category : string; mutable i_class : string; mutable i_current_price : float; mutable itemrevenue : float; mutable revenueratio : float }

type storesale = { mutable ss_item_sk : int; mutable ss_sold_date_sk : int; mutable ss_ext_sales_price : float }
type item = { mutable i_item_sk : int; mutable i_item_id : string; mutable i_item_desc : string; mutable i_category : string; mutable i_class : string; mutable i_current_price : float }
type datedim = { mutable d_date_sk : int; mutable d_date : string }
let store_sales : record1 list = [{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_ext_sales_price = 50. };{ ss_item_sk = 2; ss_sold_date_sk = 1; ss_ext_sales_price = 100. }]
let item : record2 list = [{ i_item_sk = 1; i_item_id = "I1"; i_item_desc = "desc1"; i_category = "CatA"; i_class = "Class1"; i_current_price = 100. };{ i_item_sk = 2; i_item_id = "I2"; i_item_desc = "desc2"; i_category = "CatB"; i_class = "Class1"; i_current_price = 200. }]
let date_dim : record3 list = [{ d_date_sk = 1; d_date = "2000-02-01" }]
let grouped : record6 list = (let (__groups0 : (record4 * record1 list) list ref) = ref [] in
  List.iter (fun (ss : record1) ->
      List.iter (fun (i : record2) ->
            List.iter (fun (d : record3) ->
                        if (ss.ss_item_sk = i.i_item_sk) && (ss.ss_sold_date_sk = d.d_date_sk) then (
          let (key : record4) = { item_id = i.i_item_id; item_desc = i.i_item_desc; category = i.i_category; class = i.i_class; price = i.i_current_price } in
          let cur = try List.assoc key !__groups0 with Not_found -> [] in
          __groups0 := (key, ss :: cur) :: List.remove_assoc key !__groups0);
            ) date_dim;
      ) item;
  ) store_sales;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { i_item_id = g.key.item_id; i_item_desc = g.key.item_desc; i_category = g.key.category; i_class = g.key.class; i_current_price = g.key.price; itemrevenue = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss_ext_sales_price :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let totals : record8 list = (let (__groups2 : (string * record6 list) list ref) = ref [] in
  List.iter (fun (g : record6) ->
      let (key : string) = g.i_class in
      let cur = try List.assoc key !__groups2 with Not_found -> [] in
      __groups2 := (key, g :: cur) :: List.remove_assoc key !__groups2;
  ) grouped;
  let __res2 = ref [] in
  List.iter (fun ((cgKey : string), cgItems) ->
    let cg = { key = cgKey; items = List.rev cgItems } in
    __res2 := { class = cg.key; total = (sum_float (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := x.itemrevenue :: !__res3;
  ) cg.items;
List.rev !__res3)
) } :: !__res2
  ) !__groups2;
  List.rev !__res2)

let result : record9 list = (let __res4 = ref [] in
  List.iter (fun g ->
    List.iter (fun t ->
      if (g.i_class = t.class) then (
        __res4 := { i_item_id = g.i_item_id; i_item_desc = g.i_item_desc; i_category = g.i_category; i_class = g.i_class; i_current_price = g.i_current_price; itemrevenue = g.itemrevenue; revenueratio = ((g.itemrevenue *. 100) /. t.total) } :: !__res4;
      )
    ) totals;
  ) grouped;
  List.rev !__res4)


let () =
  json result;
  assert ((result = [{ i_item_id = "I1"; i_item_desc = "desc1"; i_category = "CatA"; i_class = "Class1"; i_current_price = 100.; itemrevenue = 50.; revenueratio = 33.333333333333336 };{ i_item_id = "I2"; i_item_desc = "desc2"; i_category = "CatB"; i_class = "Class1"; i_current_price = 200.; itemrevenue = 100.; revenueratio = 66.66666666666667 }]))
