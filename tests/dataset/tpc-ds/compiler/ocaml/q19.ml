(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:16Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_store_sk : int; mutable ss_ext_sales_price : float }
type record2 = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type record3 = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_brand : string; mutable i_manufact_id : int; mutable i_manufact : string; mutable i_manager_id : int }
type record4 = { mutable c_customer_sk : int; mutable c_current_addr_sk : int }
type record5 = { mutable ca_address_sk : int; mutable ca_zip : string }
type record6 = { mutable s_store_sk : int; mutable s_zip : string }
type record7 = { mutable brand : string; mutable brand_id : int; mutable man_id : int; mutable man : string }
type record8 = { mutable i_brand : Obj.t; mutable i_brand_id : Obj.t; mutable i_manufact_id : Obj.t; mutable i_manufact : Obj.t; mutable ext_price : float }
type record9 = { mutable i_brand : string; mutable i_brand_id : int; mutable i_manufact_id : int; mutable i_manufact : string; mutable ext_price : float }

type storesale = { mutable ss_sold_date_sk : int; mutable ss_item_sk : int; mutable ss_customer_sk : int; mutable ss_store_sk : int; mutable ss_ext_sales_price : float }
type datedim = { mutable d_date_sk : int; mutable d_year : int; mutable d_moy : int }
type item = { mutable i_item_sk : int; mutable i_brand_id : int; mutable i_brand : string; mutable i_manufact_id : int; mutable i_manufact : string; mutable i_manager_id : int }
type customer = { mutable c_customer_sk : int; mutable c_current_addr_sk : int }
type customeraddress = { mutable ca_address_sk : int; mutable ca_zip : string }
type store = { mutable s_store_sk : int; mutable s_zip : string }
let store_sales : record1 list = [{ ss_sold_date_sk = 1; ss_item_sk = 1; ss_customer_sk = 1; ss_store_sk = 1; ss_ext_sales_price = 100. }]
let date_dim : record2 list = [{ d_date_sk = 1; d_year = 1999; d_moy = 11 }]
let item : record3 list = [{ i_item_sk = 1; i_brand_id = 1; i_brand = "B1"; i_manufact_id = 1; i_manufact = "M1"; i_manager_id = 10 }]
let customer : record4 list = [{ c_customer_sk = 1; c_current_addr_sk = 1 }]
let customer_address : record5 list = [{ ca_address_sk = 1; ca_zip = "11111" }]
let store : record6 list = [{ s_store_sk = 1; s_zip = "99999" }]
let result : record9 list = (let (__groups0 : (record7 * record2 list) list ref) = ref [] in
  List.iter (fun (d : record2) ->
      List.iter (fun (ss : record1) ->
            List.iter (fun (i : record3) ->
                    List.iter (fun (c : record4) ->
                              List.iter (fun (ca : record5) ->
                                          List.iter (fun (s : record6) ->
                                                                  if (ss.ss_sold_date_sk = d.d_date_sk) && ((ss.ss_item_sk = i.i_item_sk) && (i.i_manager_id = 10)) && (ss.ss_customer_sk = c.c_customer_sk) && (c.c_current_addr_sk = ca.ca_address_sk) && ((ss.ss_store_sk = s.s_store_sk) && (substr ca.ca_zip 0 5 <> substr s.s_zip 0 5)) && ((d.d_moy = 11) && (d.d_year = 1999)) then (
                let (key : record7) = { brand = i.i_brand; brand_id = i.i_brand_id; man_id = i.i_manufact_id; man = i.i_manufact } in
                let cur = try List.assoc key !__groups0 with Not_found -> [] in
                __groups0 := (key, d :: cur) :: List.remove_assoc key !__groups0);
                                          ) store;
                              ) customer_address;
                    ) customer;
            ) item;
      ) store_sales;
  ) date_dim;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record7), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { i_brand = g.key.brand; i_brand_id = g.key.brand_id; i_manufact_id = g.key.man_id; i_manufact = g.key.man; ext_price = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.ss_ext_sales_price :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ i_brand = "B1"; i_brand_id = 1; i_manufact_id = 1; i_manufact = "M1"; ext_price = 100. }]))
