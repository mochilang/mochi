(* Generated by Mochi compiler v0.10.25 on 2025-07-15T04:50:17Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable id : int; mutable current_addr : int; mutable cdemo : int; mutable hdemo : int }
type record2 = { mutable ca_address_sk : int; mutable ca_city : string }
type record3 = { mutable cd_demo_sk : int }
type record4 = { mutable hd_demo_sk : int; mutable income_band_sk : int }
type record5 = { mutable ib_income_band_sk : int; mutable ib_lower_bound : int; mutable ib_upper_bound : int }
type record6 = { mutable sr_cdemo_sk : int; mutable amt : float }

let customer : record1 list = [{ id = 1; current_addr = 1; cdemo = 1; hdemo = 1 };{ id = 2; current_addr = 1; cdemo = 2; hdemo = 2 };{ id = 3; current_addr = 1; cdemo = 3; hdemo = 1 };{ id = 4; current_addr = 1; cdemo = 4; hdemo = 2 }]
let customer_address : record2 list = [{ ca_address_sk = 1; ca_city = "Springfield" }]
let customer_demographics : record3 list = [[("cd_demo_sk",Obj.repr (1))];[("cd_demo_sk",Obj.repr (2))];[("cd_demo_sk",Obj.repr (3))];[("cd_demo_sk",Obj.repr (4))]]
let household_demographics : record4 list = [{ hd_demo_sk = 1; income_band_sk = 1 };{ hd_demo_sk = 2; income_band_sk = 1 }]
let income_band : record5 list = [{ ib_income_band_sk = 1; ib_lower_bound = 0; ib_upper_bound = 50000 }]
let store_returns : record6 list = [{ sr_cdemo_sk = 1; amt = 10. };{ sr_cdemo_sk = 2; amt = 20. };{ sr_cdemo_sk = 3; amt = 30. };{ sr_cdemo_sk = 4; amt = 24. }]
let result : float = (sum_float (let __res0 = ref [] in
  List.iter (fun (c : record1) ->
      List.iter (fun (ca : record2) ->
            List.iter (fun cd ->
                    List.iter (fun (sr : record6) ->
                              List.iter (fun (hd : record4) ->
                                          List.iter (fun (ib : record5) ->
                                                                  if ((c.current_addr = ca.ca_address_sk) && (ca.ca_city = "Springfield")) && (c.cdemo = Obj.obj (List.assoc "cd_demo_sk" cd)) && (Obj.obj (List.assoc "cd_demo_sk" cd) = sr.sr_cdemo_sk) && (c.hdemo = hd.hd_demo_sk) && (hd.income_band_sk = ib.ib_income_band_sk) then
              __res0 := sr.amt :: !__res0;
                                          ) income_band;
                              ) household_demographics;
                    ) store_returns;
            ) customer_demographics;
      ) customer_address;
  ) customer;
List.rev !__res0)
)

let () =
  json result;
  assert ((result = 84.))
