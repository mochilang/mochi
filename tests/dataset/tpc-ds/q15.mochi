// Catalog sales totals by ZIP code

type CatalogSale { cs_bill_customer_sk: int, cs_sales_price: float, cs_sold_date_sk: int }
type Customer { c_customer_sk: int, c_current_addr_sk: int }
type CustomerAddress { ca_address_sk: int, ca_zip: string, ca_state: string }
type DateDim { d_date_sk: int, d_qoy: int, d_year: int }

let catalog_sales = [ { cs_bill_customer_sk: 1, cs_sales_price: 600.0, cs_sold_date_sk: 1 } ]
let customer = [ { c_customer_sk: 1, c_current_addr_sk: 1 } ]
let customer_address = [ { ca_address_sk: 1, ca_zip: "85669", ca_state: "CA" } ]
let date_dim = [ { d_date_sk: 1, d_qoy: 1, d_year: 2000 } ]

let filtered =
  from cs in catalog_sales
  join c in customer on cs.cs_bill_customer_sk == c.c_customer_sk
  join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  where (substr(ca.ca_zip,0,5) in ["85669","86197","88274","83405","86475","85392","85460","80348","81792"] ||
         ca.ca_state in ["CA","WA","GA"] ||
         cs.cs_sales_price > 500) &&
        d.d_qoy == 1 && d.d_year == 2000
  group by { zip: ca.ca_zip } into g
  sort by g.key.zip
  select { ca_zip: g.key.zip, sum_sales: sum(from x in g select x.cs_sales_price) }

json(filtered)

test "TPCDS Q15 zip" {
  expect filtered == [ { ca_zip: "85669", sum_sales: 600.0 } ]
}
