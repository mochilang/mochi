// Compare store and catalog customers
type StoreSale { ss_customer_sk: int, ss_item_sk: int }
type CatalogSale { cs_bill_customer_sk: int, cs_item_sk: int }

let store_sales = [
  {ss_customer_sk: 1, ss_item_sk: 1},
  {ss_customer_sk: 2, ss_item_sk: 1}
]

let catalog_sales = [
  {cs_bill_customer_sk: 1, cs_item_sk: 1},
  {cs_bill_customer_sk: 3, cs_item_sk: 2}
]

let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}

let joined =
  from s in ssci full join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  select {
    store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
    catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
    both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  }

let result = {
  store_only: sum(from x in joined select x.store_only),
  catalog_only: sum(from x in joined select x.catalog_only),
  store_and_catalog: sum(from x in joined select x.both)
}

json(result)

test "TPCDS Q97 overlap" {
  expect result == {store_only: 1, catalog_only: 1, store_and_catalog: 1}
}
