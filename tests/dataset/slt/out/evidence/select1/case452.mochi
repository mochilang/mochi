/*
# line: 5589
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), a+b*2, CASE a+1 WHEN b THEN 111 WHEN c THEN 222 WHEN d THEN 333  WHEN e THEN 444 ELSE 555 END, (SELECT count(*) FROM t1 AS x WHERE x.b<t1.b), b-c, a, abs(a) FROM t1 WHERE (a>b-2 AND a<b+2) OR (c<=d-2 OR c>=d+2) OR d>e ORDER BY 3,5,6,2,1,7,4 */
let result = from row in t1
  where ((((row.a > row.b - 2 && row.a < row.b + 2)) || ((row.c <= row.d - 2 || row.c >= row.d + 2))) || row.d > row.e)
  order by [(if row.a + 1 == row.b { 111 } else { (if row.a + 1 == row.c { 222 } else { (if row.a + 1 == row.d { 333 } else { (if row.a + 1 == row.e { 444 } else { 555 }) }) }) }), row.b - row.c, row.a, row.a + row.b * 2, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), (if row.a < 0 { -(row.a) } else { row.a }), count(from x in t1
  where x.b < row.b
  select x)]
  select [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.a + row.b * 2, (if row.a + 1 == row.b { 111 } else { (if row.a + 1 == row.c { 222 } else { (if row.a + 1 == row.d { 333 } else { (if row.a + 1 == row.e { 444 } else { 555 }) }) }) }), count(from x in t1
  where x.b < row.b
  select x), row.b - row.c, row.a, (if row.a < 0 { -(row.a) } else { row.a })]
test "case452" {
  var flatResult = []
  for row in result {
    for x in row {
      flatResult = append(flatResult, x)
    }
  }
  for x in flatResult {
    print(x)
  }
  expect flatResult == [0, 617, 111, 21, -2, 205, 205, 0, 335, 111, 2, -1, 111, 111, 0, 416, 111, 7, 2, 138, 138, 0, 428, 111, 8, 2, 142, 142, 0, 723, 222, 28, -4, 243, 243, 0, 635, 222, 22, -3, 213, 213, 0, 601, 222, 20, -2, 201, 201, 0, 544, 333, 16, -3, 182, 182, 0, 317, 333, 1, -1, 107, 107, 0, 351, 333, 3, -1, 115, 115, 0, 483, 333, 12, -1, 163, 163, 0, 369, 333, 4, 1, 121, 121, 0, 455, 333, 10, 1, 153, 153, 0, 502, 333, 13, 1, 168, 168, 0, 652, 333, 23, 3, 216, 216, 0, 385, 333, 5, 4, 127, 127, 0, 391, 444, 6, -4, 131, 131, 0, 560, 444, 17, -1, 188, 188, 0, 666, 444, 24, -1, 220, 220, 0, 579, 444, 18, 1, 191, 191, 0, 743, 444, 29, 2, 245, 245, 0, 439, 555, 9, -2, 149, 149, 0, 529, 555, 15, -1, 179, 179, 0, 698, 555, 26, 1, 234, 234, 0, 711, 555, 27, 1, 239, 239, 0, 475, 555, 11, 3, 159, 159, 0, 595, 555, 19, 3, 199, 199, 0, 685, 555, 25, 3, 229, 229]
}
