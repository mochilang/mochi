/*
# line: 3386
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, e, abs(a), c-d, a, b-c FROM t1 WHERE (a>b-2 AND a<b+2) OR (c<=d-2 OR c>=d+2) OR d NOT BETWEEN 110 AND 150 ORDER BY 7,1,5,3,4,6,2 */
let result = from row in t1
  where ((((row.a > row.b - 2 && row.a < row.b + 2)) || ((row.c <= row.d - 2 || row.c >= row.d + 2))) || (row.d < 110 || row.d > 150))
  order by [row.b - row.c, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.c - row.d, row.e, (if row.a < 0 { -(row.a) } else { row.a }), row.a, (if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 })]
  select [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), (if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 }), row.e, (if row.a < 0 { -(row.a) } else { row.a }), row.c - row.d, row.a, row.b - row.c]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case266" {
  expect flatResult == [0, 1300, 132, 131, 1, 131, -4, 0, 486, 242, 243, 3, 243, -4, 0, 364, 180, 182, 1, 182, -3, 0, 426, 210, 213, 2, 213, -3, 0, 402, 204, 201, -1, 201, -2, 0, 1000, 103, 104, 1, 104, -2, 0, 1700, 173, 174, 1, 174, -2, 0, 410, 209, 205, 1, 205, -2, 0, 1600, 162, 163, -3, 163, -1, 0, 1050, 109, 107, -2, 107, -1, 0, 358, 177, 179, -2, 179, -1, 0, 1120, 110, 111, -1, 111, -1, 0, 376, 189, 188, 2, 188, -1, 0, 440, 221, 220, 2, 220, -1, 0, 1180, 117, 115, 3, 115, -1, 0, 1510, 152, 153, -4, 153, 1, 0, 1670, 165, 168, -3, 168, 1, 0, 478, 237, 239, -3, 239, 1, 0, 468, 230, 234, -2, 234, 1, 0, 382, 192, 191, 3, 191, 1, 0, 490, 246, 245, -1, 245, 2, 0, 1390, 135, 138, 1, 138, 2, 0, 1430, 144, 142, 1, 142, 2, 0, 432, 219, 216, -2, 216, 3, 0, 1580, 157, 159, -1, 159, 3, 0, 398, 197, 199, -1, 199, 3, 0, 458, 227, 229, -1, 229, 3, 0, 1290, 126, 127, -3, 127, 4]
}

