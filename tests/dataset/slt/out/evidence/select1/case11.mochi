/*
# line: 216
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, CASE WHEN a<b-3 THEN 111 WHEN a<=b THEN 222 WHEN a<b+3 THEN 333 ELSE 444 END, a+b*2+c*3, (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), c, b-c FROM t1 WHERE EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) OR a>b OR d NOT BETWEEN 110 AND 150 ORDER BY 5,3,6,1,2,4 */
let result = from row in t1
  where ((count(from x in t1
  where x.b < row.b
  select x) > 0 || row.a > row.b) || (row.d < 110 || row.d > 150))
  order by [row.c, row.a + row.b * 2 + row.c * 3, row.b - row.c, (if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 }), (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x)]
  select [(if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 }), (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), row.a + row.b * 2 + row.c * 3, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.c, row.b - row.c]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case11" {
  expect flatResult == [1000, 444, 610, 0, 102, -2, 1050, 333, 635, 0, 106, -1, 1120, 222, 674, 0, 113, -1, 1180, 222, 708, 0, 119, -1, 1240, 222, 738, 0, 123, 1, 1290, 222, 760, 0, 125, 4, 1300, 333, 793, 0, 134, -4, 1390, 222, 827, 0, 137, 2, 1430, 222, 851, 0, 141, 2, 1450, 444, 880, 0, 147, -2, 1510, 333, 905, 0, 150, 1, 1580, 333, 940, 0, 155, 3, 1600, 444, 966, 0, 161, -1, 1670, 333, 1000, 0, 166, 1, 1700, 444, 1030, 0, 172, -2, 358, 444, 1057, 0, 176, -1, 364, 333, 1096, 0, 184, -3, 376, 333, 1121, 0, 187, -1, 382, 222, 1158, 0, 193, 1, 398, 333, 1180, 0, 195, 3, 402, 333, 1207, 0, 202, -2, 410, 222, 1241, 0, 208, -2, 426, 333, 1277, 0, 214, -3, 432, 222, 1297, 0, 215, 3, 440, 222, 1338, 0, 224, -1, 458, 333, 1360, 0, 225, 3, 468, 333, 1391, 0, 231, 1, 478, 444, 1416, 0, 235, 1, 486, 444, 1455, 0, 244, -4, 490, 111, 1484, 0, 247, 2]
}

