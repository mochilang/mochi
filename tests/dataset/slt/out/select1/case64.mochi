/*
# line: 893
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), d, b-c, (a+b+c+d+e)/5, CASE WHEN a<b-3 THEN 111 WHEN a<=b THEN 222 WHEN a<b+3 THEN 333 ELSE 444 END, CASE a+1 WHEN b THEN 111 WHEN c THEN 222 WHEN d THEN 333  WHEN e THEN 444 ELSE 555 END, a-b FROM t1 WHERE c BETWEEN b-2 AND d+2 OR (e>c OR e<d) OR EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) ORDER BY 7,2,4,1,5,6,3 */
let result = from row in t1
  where (((row.c >= row.b - 2 && row.c <= row.d + 2) || ((row.e > row.c || row.e < row.d))) || count(from x in t1
  where x.b < row.b
  select x) > 0)
  order by [row.a - row.b, row.d, (row.a + row.b + row.c + row.d + row.e) / 5, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), (if row.a + 1 == row.b { 111 } else { (if row.a + 1 == row.c { 222 } else { (if row.a + 1 == row.d { 333 } else { (if row.a + 1 == row.e { 444 } else { 555 }) }) }) }), row.b - row.c]
  select [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.d, row.b - row.c, (row.a + row.b + row.c + row.d + row.e) / 5, (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), (if row.a + 1 == row.b { 111 } else { (if row.a + 1 == row.c { 222 } else { (if row.a + 1 == row.d { 333 } else { (if row.a + 1 == row.e { 444 } else { 555 }) }) }) }), row.a - row.b]
test "case64" {
  var flatResult = []
  for row in result {
    for x in row {
      flatResult = append(flatResult, x)
    }
  }
  for x in flatResult {
    print(x)
  }
  expect flatResult == [0, 248, 2, 247, 111, 444, -4, 0, 116, -1, 117, 222, 333, -3, 0, 122, 1, 122, 222, 333, -3, 0, 190, 1, 192, 222, 444, -3, 0, 222, -1, 222, 222, 444, -3, 0, 128, 4, 127, 222, 333, -2, 0, 217, 3, 217, 222, 333, -2, 0, 114, -1, 112, 222, 111, -1, 0, 136, 2, 137, 222, 111, -1, 0, 140, 2, 142, 222, 111, -1, 0, 207, -2, 207, 222, 111, -1, 0, 133, -4, 132, 333, 444, 1, 0, 156, 3, 157, 333, 555, 1, 0, 169, 1, 167, 333, 333, 1, 0, 183, -3, 182, 333, 333, 1, 0, 196, 3, 197, 333, 555, 1, 0, 203, -2, 202, 333, 222, 1, 0, 226, 3, 227, 333, 555, 1, 0, 108, -1, 107, 333, 333, 2, 0, 154, 1, 152, 333, 333, 2, 0, 185, -1, 187, 333, 444, 2, 0, 212, -3, 212, 333, 222, 2, 0, 233, 1, 232, 333, 555, 2, 0, 164, -1, 162, 444, 333, 3, 0, 238, 1, 237, 444, 555, 3, 0, 241, -4, 242, 444, 222, 3, 0, 101, -2, 102, 444, 555, 4, 0, 148, -2, 147, 444, 555, 4, 0, 171, -2, 172, 444, 555, 4, 0, 178, -1, 177, 444, 555, 4]
}
