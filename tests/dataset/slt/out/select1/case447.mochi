/*
# line: 5527
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT a+b*2+c*3+d*4, c-d, CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, a+b*2, b, b-c, (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d) FROM t1 ORDER BY 5,2,4,1,6,3,7 */
let sub0 = avg(from x in t1
  select x.c)

var result = from row in t1
  order by [row.b, row.c - row.d, row.a + row.b * 2, row.a + row.b * 2 + row.c * 3 + row.d * 4, row.b - row.c, if row.c > sub0 then row.a * 2 else row.b * 10, count(from x in t1
  where x.c > row.c && x.d < row.d
  select x)]
  select [row.a + row.b * 2 + row.c * 3 + row.d * 4, row.c - row.d, if row.c > sub0 then row.a * 2 else row.b * 10, row.a + row.b * 2, row.b, row.b - row.c, count(from x in t1
  where x.c > row.c && x.d < row.d
  select x)]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case447" {
  expect flatResult == [1014, 1, 1000, 304, 100, -2, 0, 1067, -2, 1050, 317, 105, -1, 0, 1130, -1, 1120, 335, 112, -1, 0, 1172, 3, 1180, 351, 118, -1, 0, 1226, 1, 1240, 369, 124, 1, 0, 1272, -3, 1290, 385, 129, 4, 0, 1325, 1, 1300, 391, 130, -4, 0, 1371, 1, 1390, 416, 139, 2, 0, 1411, 1, 1430, 428, 143, 2, 0, 1472, -1, 1450, 439, 145, -2, 0, 1521, -4, 1510, 455, 151, 1, 0, 1564, -1, 1580, 475, 158, 3, 0, 1622, -3, 1600, 483, 160, -1, 0, 1676, -3, 1670, 502, 167, 1, 0, 1714, 1, 1700, 514, 170, -2, 0, 1769, -2, 358, 529, 175, -1, 0, 1828, 1, 364, 544, 181, -3, 0, 1861, 2, 376, 560, 186, -1, 0, 1918, 3, 382, 579, 194, 1, 0, 1964, -1, 398, 595, 198, 3, 0, 2019, -1, 402, 601, 200, -2, 0, 2069, 1, 410, 617, 206, -2, 0, 2125, 2, 426, 635, 211, -3, 0, 2165, -2, 432, 652, 218, 3, 0, 2226, 2, 440, 666, 223, -1, 0, 2264, -1, 458, 685, 228, 3, 0, 2323, -2, 468, 698, 232, 1, 0, 2368, -3, 478, 711, 236, 1, 0, 2419, 3, 486, 723, 240, -4, 0, 2476, -1, 490, 743, 249, 2, 0]
}

