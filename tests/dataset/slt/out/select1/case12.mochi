/*
# line: 232
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 103,
    b: 102,
    c: 100,
    d: 101,
    e: 104,
  },
  t1Row {
    a: 107,
    b: 106,
    c: 108,
    d: 109,
    e: 105,
  },
  t1Row {
    a: 110,
    b: 114,
    c: 112,
    d: 111,
    e: 113,
  },
  t1Row {
    a: 116,
    b: 119,
    c: 117,
    d: 115,
    e: 118,
  },
  t1Row {
    a: 123,
    b: 122,
    c: 124,
    d: 120,
    e: 121,
  },
  t1Row {
    a: 127,
    b: 128,
    c: 129,
    d: 126,
    e: 125,
  },
  t1Row {
    a: 132,
    b: 134,
    c: 131,
    d: 133,
    e: 130,
  },
  t1Row {
    a: 138,
    b: 136,
    c: 139,
    d: 135,
    e: 137,
  },
  t1Row {
    a: 144,
    b: 141,
    c: 140,
    d: 142,
    e: 143,
  },
  t1Row {
    a: 145,
    b: 149,
    c: 146,
    d: 148,
    e: 147,
  },
  t1Row {
    a: 151,
    b: 150,
    c: 153,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 155,
    b: 157,
    c: 159,
    d: 156,
    e: 158,
  },
  t1Row {
    a: 161,
    b: 160,
    c: 163,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 167,
    b: 169,
    c: 168,
    d: 165,
    e: 166,
  },
  t1Row {
    a: 171,
    b: 170,
    c: 172,
    d: 173,
    e: 174,
  },
  t1Row {
    a: 177,
    b: 176,
    c: 179,
    d: 178,
    e: 175,
  },
  t1Row {
    a: 181,
    b: 180,
    c: 182,
    d: 183,
    e: 184,
  },
  t1Row {
    a: 187,
    b: 188,
    c: 186,
    d: 189,
    e: 185,
  },
  t1Row {
    a: 190,
    b: 194,
    c: 193,
    d: 192,
    e: 191,
  },
  t1Row {
    a: 199,
    b: 197,
    c: 198,
    d: 196,
    e: 195,
  },
  t1Row {
    a: 200,
    b: 202,
    c: 203,
    d: 201,
    e: 204,
  },
  t1Row {
    a: 208,
    b: 209,
    c: 205,
    d: 206,
    e: 207,
  },
  t1Row {
    a: 214,
    b: 210,
    c: 213,
    d: 212,
    e: 211,
  },
  t1Row {
    a: 218,
    b: 215,
    c: 216,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 223,
    b: 221,
    c: 222,
    d: 220,
    e: 224,
  },
  t1Row {
    a: 226,
    b: 227,
    c: 228,
    d: 229,
    e: 225,
  },
  t1Row {
    a: 234,
    b: 231,
    c: 232,
    d: 230,
    e: 233,
  },
  t1Row {
    a: 237,
    b: 236,
    c: 239,
    d: 235,
    e: 238,
  },
  t1Row {
    a: 242,
    b: 244,
    c: 240,
    d: 243,
    e: 241,
  },
  t1Row {
    a: 246,
    b: 248,
    c: 247,
    d: 249,
    e: 245,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), d, a+b*2+c*3+d*4, a-b, (SELECT count(*) FROM t1 AS x WHERE x.b<t1.b) FROM t1 WHERE c BETWEEN b-2 AND d+2 OR c>d ORDER BY 3,5,4,1,2 */
let result = from row in t1
  where ((row.c >= row.b - 2 && row.c <= row.d + 2) || row.c > row.d)
  order by [row.a + row.b * 2 + row.c * 3 + row.d * 4, count(from x in t1
  where x.b < row.b
  select x), row.a - row.b, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.d]
  select [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.d, row.a + row.b * 2 + row.c * 3 + row.d * 4, row.a - row.b, count(from x in t1
  where x.b < row.b
  select x)]
test "case12" {
  var flatResult = []
  for row in result {
    for x in row {
      flatResult = append(flatResult, x)
    }
  }
  for x in flatResult {
    print(x)
  }
  expect flatResult == [0, 101, 1011, 1, 0, 0, 109, 1079, 1, 1, 0, 111, 1118, -4, 2, 0, 115, 1165, -3, 3, 0, 120, 1219, 1, 4, 0, 126, 1274, -1, 5, 0, 135, 1367, 2, 7, 0, 142, 1414, 3, 8, 0, 154, 1526, 1, 10, 0, 156, 1570, -2, 11, 0, 164, 1626, 1, 12, 0, 165, 1669, -2, 13, 0, 173, 1719, 1, 14, 0, 178, 1778, 1, 15, 0, 183, 1819, 1, 16, 0, 189, 1877, -1, 17, 0, 192, 1925, -4, 18, 0, 196, 1971, 2, 19, 0, 201, 2017, -2, 20, 0, 212, 2121, 4, 22, 0, 217, 2164, 3, 23, 0, 220, 2211, 2, 24, 0, 229, 2280, -1, 25, 0, 230, 2312, 3, 26, 0, 235, 2366, 1, 27, 0, 249, 2479, -2, 29]
}
