/*
# line: 216
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 103,
    b: 102,
    c: 100,
    d: 101,
    e: 104,
  },
  t1Row {
    a: 107,
    b: 106,
    c: 108,
    d: 109,
    e: 105,
  },
  t1Row {
    a: 110,
    b: 114,
    c: 112,
    d: 111,
    e: 113,
  },
  t1Row {
    a: 116,
    b: 119,
    c: 117,
    d: 115,
    e: 118,
  },
  t1Row {
    a: 123,
    b: 122,
    c: 124,
    d: 120,
    e: 121,
  },
  t1Row {
    a: 127,
    b: 128,
    c: 129,
    d: 126,
    e: 125,
  },
  t1Row {
    a: 132,
    b: 134,
    c: 131,
    d: 133,
    e: 130,
  },
  t1Row {
    a: 138,
    b: 136,
    c: 139,
    d: 135,
    e: 137,
  },
  t1Row {
    a: 144,
    b: 141,
    c: 140,
    d: 142,
    e: 143,
  },
  t1Row {
    a: 145,
    b: 149,
    c: 146,
    d: 148,
    e: 147,
  },
  t1Row {
    a: 151,
    b: 150,
    c: 153,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 155,
    b: 157,
    c: 159,
    d: 156,
    e: 158,
  },
  t1Row {
    a: 161,
    b: 160,
    c: 163,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 167,
    b: 169,
    c: 168,
    d: 165,
    e: 166,
  },
  t1Row {
    a: 171,
    b: 170,
    c: 172,
    d: 173,
    e: 174,
  },
  t1Row {
    a: 177,
    b: 176,
    c: 179,
    d: 178,
    e: 175,
  },
  t1Row {
    a: 181,
    b: 180,
    c: 182,
    d: 183,
    e: 184,
  },
  t1Row {
    a: 187,
    b: 188,
    c: 186,
    d: 189,
    e: 185,
  },
  t1Row {
    a: 190,
    b: 194,
    c: 193,
    d: 192,
    e: 191,
  },
  t1Row {
    a: 199,
    b: 197,
    c: 198,
    d: 196,
    e: 195,
  },
  t1Row {
    a: 200,
    b: 202,
    c: 203,
    d: 201,
    e: 204,
  },
  t1Row {
    a: 208,
    b: 209,
    c: 205,
    d: 206,
    e: 207,
  },
  t1Row {
    a: 214,
    b: 210,
    c: 213,
    d: 212,
    e: 211,
  },
  t1Row {
    a: 218,
    b: 215,
    c: 216,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 223,
    b: 221,
    c: 222,
    d: 220,
    e: 224,
  },
  t1Row {
    a: 226,
    b: 227,
    c: 228,
    d: 229,
    e: 225,
  },
  t1Row {
    a: 234,
    b: 231,
    c: 232,
    d: 230,
    e: 233,
  },
  t1Row {
    a: 237,
    b: 236,
    c: 239,
    d: 235,
    e: 238,
  },
  t1Row {
    a: 242,
    b: 244,
    c: 240,
    d: 243,
    e: 241,
  },
  t1Row {
    a: 246,
    b: 248,
    c: 247,
    d: 249,
    e: 245,
  },
]

/* SELECT CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, CASE WHEN a<b-3 THEN 111 WHEN a<=b THEN 222 WHEN a<b+3 THEN 333 ELSE 444 END, a+b*2+c*3, (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), c, b-c FROM t1 WHERE EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) OR a>b OR d NOT BETWEEN 110 AND 150 ORDER BY 5,3,6,1,2,4 */
let result = from row in t1
  where ((count(from x in t1
  where x.b < row.b
  select x) > 0 || row.a > row.b) || (row.d < 110 || row.d > 150))
  order by [row.c, row.a + row.b * 2 + row.c * 3, row.b - row.c, (if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 }), (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x)]
  select [(if row.c > avg(from x in t1
  select x.c) { row.a * 2 } else { row.b * 10 }), (if row.a < row.b - 3 { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < row.b + 3 { 333 } else { 444 }) }) }), row.a + row.b * 2 + row.c * 3, count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.c, row.b - row.c]
test "case11" {
  var flatResult = []
  for row in result {
    for x in row {
      flatResult = append(flatResult, x)
    }
  }
  for x in flatResult {
    print(x)
  }
  expect flatResult == [1020, 333, 607, 0, 100, 2, 1060, 333, 643, 0, 108, -2, 1140, 111, 674, 0, 112, 2, 1190, 222, 705, 0, 117, 2, 1220, 333, 739, 0, 124, -2, 1280, 222, 770, 0, 129, -1, 1340, 222, 793, 0, 131, 3, 1360, 333, 827, 0, 139, -3, 1410, 444, 846, 0, 140, 1, 1490, 111, 881, 0, 146, 3, 1500, 333, 910, 0, 153, -3, 1570, 222, 946, 0, 159, -2, 1600, 333, 970, 0, 163, -3, 1690, 222, 1009, 0, 168, 1, 1700, 333, 1027, 0, 172, -2, 354, 333, 1066, 0, 179, -3, 362, 333, 1087, 0, 182, -2, 374, 222, 1121, 0, 186, 2, 380, 111, 1157, 0, 193, 1, 398, 333, 1187, 0, 198, -1, 400, 222, 1213, 0, 203, -1, 416, 222, 1241, 0, 205, 4, 428, 444, 1273, 0, 213, -3, 436, 444, 1296, 0, 216, -1, 446, 333, 1331, 0, 222, -1, 452, 222, 1364, 0, 228, -1, 468, 444, 1392, 0, 232, -1, 474, 333, 1426, 0, 239, -3, 484, 222, 1450, 0, 240, 4, 492, 222, 1483, 0, 247, 1]
}
