/*
# line: 8558
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.b<t1.b), d-e, CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, b-c, c, a+b*2+c*3+d*4+e*5 FROM t1 WHERE EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) ORDER BY 2,5,6,3,1,4 */
let sub0 = avg(from x in t1
  select x.c)

let result = from row in t1
  where count(from x in t1
  where x.b < row.b
  select x) > 0
  order by [(row.d - row.e), row.c, ((((row.a + (row.b * 2)) + (row.c * 3)) + (row.d * 4)) + (row.e * 5)), (if row.c > sub0 { (row.a * 2) } else { (row.b * 10) }), count(from x in t1
  where x.b < row.b
  select x), (row.b - row.c)]
  select [count(from x in t1
  where x.b < row.b
  select x), (row.d - row.e), (if row.c > sub0 { (row.a * 2) } else { (row.b * 10) }), (row.b - row.c), row.c, ((((row.a + (row.b * 2)) + (row.c * 3)) + (row.d * 4)) + (row.e * 5))]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case701" {
  expect flatResult == [8, -4, 1430, 2, 141, 2131, 17, -4, 376, -1, 187, 2806, 14, -2, 1700, -2, 172, 2579, 18, -2, 382, 1, 193, 2878, 21, -2, 410, -2, 208, 3114, 23, -2, 432, 3, 215, 3260, 1, -1, 1050, -1, 106, 1612, 3, -1, 1180, -1, 119, 1757, 11, -1, 1580, 3, 155, 2349, 19, -1, 398, 3, 195, 2949, 20, -1, 402, -2, 202, 3039, 25, -1, 458, 3, 225, 3399, 28, -1, 486, -4, 244, 3629, 6, 1, 1300, -4, 134, 1985, 7, 1, 1390, 2, 137, 2046, 15, 1, 358, -1, 176, 2654, 24, 1, 440, -1, 224, 3331, 27, 1, 478, 1, 235, 3553, 4, 2, 1240, 1, 123, 1826, 5, 2, 1290, 4, 125, 1902, 9, 2, 1450, -2, 147, 2202, 10, 2, 1510, 1, 150, 2281, 12, 2, 1600, -1, 161, 2432, 22, 2, 426, -3, 214, 3175, 29, 2, 490, 2, 247, 3706, 16, 3, 364, -3, 184, 2728, 26, 3, 468, 1, 231, 3473, 2, 4, 1120, -1, 113, 1680, 13, 4, 1670, 1, 166, 2501]
}

