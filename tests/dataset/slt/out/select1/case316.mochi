/*
# line: 3989
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT e, (SELECT count(*) FROM t1 AS x WHERE x.b<t1.b), CASE WHEN a<b-3 THEN 111 WHEN a<=b THEN 222 WHEN a<b+3 THEN 333 ELSE 444 END, a-b, b-c, (a+b+c+d+e)/5, a+b*2 FROM t1 WHERE (e>c OR e<d) OR EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) OR b>c ORDER BY 4,6,3,1,5,7,2 */
let result = from row in t1
  where ((((row.e > row.c || row.e < row.d)) || count(from x in t1
  where x.b < row.b
  select x) > 0) || row.b > row.c)
  order by [(row.a - row.b), ((((((row.a + row.b) + row.c) + row.d) + row.e)) / 5), (if row.a < (row.b - 3) { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < (row.b + 3) { 333 } else { 444 }) }) }), row.e, (row.b - row.c), (row.a + (row.b + row.b)), count(from x in t1
  where x.b < row.b
  select x)]
  select [row.e, count(from x in t1
  where x.b < row.b
  select x), (if row.a < (row.b - 3) { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < (row.b + 3) { 333 } else { 444 }) }) }), (row.a - row.b), (row.b - row.c), ((((((row.a + row.b) + row.c) + row.d) + row.e)) / 5), (row.a + (row.b + row.b))]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case316" {
  expect flatResult == [246, 29, 111, -4, 2, 247, 743, 117, 3, 222, -3, -1, 117, 351, 120, 4, 222, -3, 1, 122, 369, 192, 18, 222, -3, 1, 192, 579, 221, 24, 222, -3, -1, 222, 666, 126, 5, 222, -2, 4, 127, 385, 219, 23, 222, -2, 3, 217, 652, 110, 2, 222, -1, -1, 112, 335, 135, 7, 222, -1, 2, 137, 416, 144, 8, 222, -1, 2, 142, 428, 209, 21, 222, -1, -2, 207, 617, 132, 6, 333, 1, -4, 132, 391, 157, 11, 333, 1, 3, 157, 475, 165, 13, 333, 1, 1, 167, 502, 180, 16, 333, 1, -3, 182, 544, 197, 19, 333, 1, 3, 197, 595, 204, 20, 333, 1, -2, 202, 601, 227, 25, 333, 1, 3, 227, 685, 109, 1, 333, 2, -1, 107, 317, 152, 10, 333, 2, 1, 152, 455, 189, 17, 333, 2, -1, 187, 560, 210, 22, 333, 2, -3, 212, 635, 230, 26, 333, 2, 1, 232, 698, 162, 12, 444, 3, -1, 162, 483, 237, 27, 444, 3, 1, 237, 711, 242, 28, 444, 3, -4, 242, 723, 103, 0, 444, 4, -2, 102, 304, 146, 9, 444, 4, -2, 147, 439, 173, 14, 444, 4, -2, 172, 514, 177, 15, 444, 4, -1, 177, 529]
}

