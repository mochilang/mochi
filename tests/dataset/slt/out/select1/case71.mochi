/*
# line: 981
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 103,
    b: 102,
    c: 100,
    d: 101,
    e: 104,
  },
  t1Row {
    a: 107,
    b: 106,
    c: 108,
    d: 109,
    e: 105,
  },
  t1Row {
    a: 110,
    b: 114,
    c: 112,
    d: 111,
    e: 113,
  },
  t1Row {
    a: 116,
    b: 119,
    c: 117,
    d: 115,
    e: 118,
  },
  t1Row {
    a: 123,
    b: 122,
    c: 124,
    d: 120,
    e: 121,
  },
  t1Row {
    a: 127,
    b: 128,
    c: 129,
    d: 126,
    e: 125,
  },
  t1Row {
    a: 132,
    b: 134,
    c: 131,
    d: 133,
    e: 130,
  },
  t1Row {
    a: 138,
    b: 136,
    c: 139,
    d: 135,
    e: 137,
  },
  t1Row {
    a: 144,
    b: 141,
    c: 140,
    d: 142,
    e: 143,
  },
  t1Row {
    a: 145,
    b: 149,
    c: 146,
    d: 148,
    e: 147,
  },
  t1Row {
    a: 151,
    b: 150,
    c: 153,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 155,
    b: 157,
    c: 159,
    d: 156,
    e: 158,
  },
  t1Row {
    a: 161,
    b: 160,
    c: 163,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 167,
    b: 169,
    c: 168,
    d: 165,
    e: 166,
  },
  t1Row {
    a: 171,
    b: 170,
    c: 172,
    d: 173,
    e: 174,
  },
  t1Row {
    a: 177,
    b: 176,
    c: 179,
    d: 178,
    e: 175,
  },
  t1Row {
    a: 181,
    b: 180,
    c: 182,
    d: 183,
    e: 184,
  },
  t1Row {
    a: 187,
    b: 188,
    c: 186,
    d: 189,
    e: 185,
  },
  t1Row {
    a: 190,
    b: 194,
    c: 193,
    d: 192,
    e: 191,
  },
  t1Row {
    a: 199,
    b: 197,
    c: 198,
    d: 196,
    e: 195,
  },
  t1Row {
    a: 200,
    b: 202,
    c: 203,
    d: 201,
    e: 204,
  },
  t1Row {
    a: 208,
    b: 209,
    c: 205,
    d: 206,
    e: 207,
  },
  t1Row {
    a: 214,
    b: 210,
    c: 213,
    d: 212,
    e: 211,
  },
  t1Row {
    a: 218,
    b: 215,
    c: 216,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 223,
    b: 221,
    c: 222,
    d: 220,
    e: 224,
  },
  t1Row {
    a: 226,
    b: 227,
    c: 228,
    d: 229,
    e: 225,
  },
  t1Row {
    a: 234,
    b: 231,
    c: 232,
    d: 230,
    e: 233,
  },
  t1Row {
    a: 237,
    b: 236,
    c: 239,
    d: 235,
    e: 238,
  },
  t1Row {
    a: 242,
    b: 244,
    c: 240,
    d: 243,
    e: 241,
  },
  t1Row {
    a: 246,
    b: 248,
    c: 247,
    d: 249,
    e: 245,
  },
]

/* SELECT (SELECT count(*) FROM t1 AS x WHERE x.c>t1.c AND x.d<t1.d), abs(b-c), a+b*2+c*3+d*4, (a+b+c+d+e)/5, d-e, a+b*2+c*3+d*4+e*5 FROM t1 WHERE EXISTS(SELECT 1 FROM t1 AS x WHERE x.b<t1.b) ORDER BY 1,6,2,4,5,3 */
let result = from row in t1
  where count(from x in t1
  where x.b < row.b
  select x) > 0
  order by [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), row.a + row.b * 2 + row.c * 3 + row.d * 4 + row.e * 5, (if row.b - row.c < 0 { -(row.b - row.c) } else { row.b - row.c }), (row.a + row.b + row.c + row.d + row.e) / 5, row.d - row.e, row.a + row.b * 2 + row.c * 3 + row.d * 4]
  select [count(from x in t1
  where (x.c > row.c && x.d < row.d)
  select x), (if row.b - row.c < 0 { -(row.b - row.c) } else { row.b - row.c }), row.a + row.b * 2 + row.c * 3 + row.d * 4, (row.a + row.b + row.c + row.d + row.e) / 5, row.d - row.e, row.a + row.b * 2 + row.c * 3 + row.d * 4 + row.e * 5]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}

test "case71" {
  expect flatResult == [0, 2, 1079, 107, 4, 1604, 0, 2, 1118, 112, -2, 1683, 0, 2, 1165, 117, -3, 1755, 0, 2, 1219, 122, -1, 1824, 0, 1, 1274, 127, 1, 1899, 0, 3, 1325, 132, 3, 1975, 0, 3, 1367, 137, -2, 2052, 0, 1, 1414, 142, -1, 2129, 0, 3, 1473, 147, 1, 2208, 0, 3, 1526, 152, 2, 2286, 0, 2, 1570, 157, -2, 2360, 0, 3, 1626, 162, 2, 2436, 0, 1, 1669, 167, -1, 2499, 0, 2, 1719, 172, -1, 2589, 0, 3, 1778, 177, 3, 2653, 0, 2, 1819, 182, -1, 2739, 0, 2, 1877, 187, 4, 2802, 0, 1, 1925, 192, 1, 2880, 0, 1, 1971, 197, 1, 2946, 0, 1, 2017, 202, -3, 3037, 0, 4, 2065, 207, -1, 3100, 0, 3, 2121, 212, 1, 3176, 0, 1, 2164, 217, -2, 3259, 0, 1, 2211, 222, -4, 3331, 0, 1, 2280, 227, 4, 3405, 0, 1, 2312, 232, -3, 3477, 0, 3, 2366, 237, -3, 3556, 0, 4, 2422, 242, 2, 3627, 0, 1, 2479, 247, 4, 3704]
}
