/*
# line: 4086
*/

type t1Row {
  a: int
  b: int
  c: int
  d: int
  e: int
}

let t1 = [
  t1Row {
    a: 104,
    b: 100,
    c: 102,
    d: 101,
    e: 103,
  },
  t1Row {
    a: 107,
    b: 105,
    c: 106,
    d: 108,
    e: 109,
  },
  t1Row {
    a: 111,
    b: 112,
    c: 113,
    d: 114,
    e: 110,
  },
  t1Row {
    a: 115,
    b: 118,
    c: 119,
    d: 116,
    e: 117,
  },
  t1Row {
    a: 121,
    b: 124,
    c: 123,
    d: 122,
    e: 120,
  },
  t1Row {
    a: 127,
    b: 129,
    c: 125,
    d: 128,
    e: 126,
  },
  t1Row {
    a: 131,
    b: 130,
    c: 134,
    d: 133,
    e: 132,
  },
  t1Row {
    a: 138,
    b: 139,
    c: 137,
    d: 136,
    e: 135,
  },
  t1Row {
    a: 142,
    b: 143,
    c: 141,
    d: 140,
    e: 144,
  },
  t1Row {
    a: 149,
    b: 145,
    c: 147,
    d: 148,
    e: 146,
  },
  t1Row {
    a: 153,
    b: 151,
    c: 150,
    d: 154,
    e: 152,
  },
  t1Row {
    a: 159,
    b: 158,
    c: 155,
    d: 156,
    e: 157,
  },
  t1Row {
    a: 163,
    b: 160,
    c: 161,
    d: 164,
    e: 162,
  },
  t1Row {
    a: 168,
    b: 167,
    c: 166,
    d: 169,
    e: 165,
  },
  t1Row {
    a: 174,
    b: 170,
    c: 172,
    d: 171,
    e: 173,
  },
  t1Row {
    a: 179,
    b: 175,
    c: 176,
    d: 178,
    e: 177,
  },
  t1Row {
    a: 182,
    b: 181,
    c: 184,
    d: 183,
    e: 180,
  },
  t1Row {
    a: 188,
    b: 186,
    c: 187,
    d: 185,
    e: 189,
  },
  t1Row {
    a: 191,
    b: 194,
    c: 193,
    d: 190,
    e: 192,
  },
  t1Row {
    a: 199,
    b: 198,
    c: 195,
    d: 196,
    e: 197,
  },
  t1Row {
    a: 201,
    b: 200,
    c: 202,
    d: 203,
    e: 204,
  },
  t1Row {
    a: 205,
    b: 206,
    c: 208,
    d: 207,
    e: 209,
  },
  t1Row {
    a: 213,
    b: 211,
    c: 214,
    d: 212,
    e: 210,
  },
  t1Row {
    a: 216,
    b: 218,
    c: 215,
    d: 217,
    e: 219,
  },
  t1Row {
    a: 220,
    b: 223,
    c: 224,
    d: 222,
    e: 221,
  },
  t1Row {
    a: 229,
    b: 228,
    c: 225,
    d: 226,
    e: 227,
  },
  t1Row {
    a: 234,
    b: 232,
    c: 231,
    d: 233,
    e: 230,
  },
  t1Row {
    a: 239,
    b: 236,
    c: 235,
    d: 238,
    e: 237,
  },
  t1Row {
    a: 243,
    b: 240,
    c: 244,
    d: 241,
    e: 242,
  },
  t1Row {
    a: 245,
    b: 249,
    c: 247,
    d: 248,
    e: 246,
  },
]

/* SELECT d, d-e, CASE WHEN c>(SELECT avg(c) FROM t1) THEN a*2 ELSE b*10 END, a+b*2, a+b*2+c*3+d*4+e*5, CASE WHEN a<b-3 THEN 111 WHEN a<=b THEN 222 WHEN a<b+3 THEN 333 ELSE 444 END, a+b*2+c*3 FROM t1 ORDER BY 3,2,4,5,7,1,6 */
let sub0 = avg(from x in t1
  select x.c)

let result = from row in t1
  order by [(if row.c > sub0 { (row.a + row.a) } else { (row.b * 10) }), (row.d - row.e), (row.a + (row.b + row.b)), ((((row.a + (row.b + row.b)) + (row.c * 3)) + (row.d * 4)) + (row.e * 5)), ((row.a + (row.b + row.b)) + (row.c * 3)), row.d, (if row.a < (row.b - 3) { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < (row.b + 3) { 333 } else { 444 }) }) })]
  select [row.d, (row.d - row.e), (if row.c > sub0 { (row.a + row.a) } else { (row.b * 10) }), (row.a + (row.b + row.b)), ((((row.a + (row.b + row.b)) + (row.c * 3)) + (row.d * 4)) + (row.e * 5)), (if row.a < (row.b - 3) { 111 } else { (if row.a <= row.b { 222 } else { (if row.a < (row.b + 3) { 333 } else { 444 }) }) }), ((row.a + (row.b + row.b)) + (row.c * 3))]
var flatResult = []
for row in result {
  for x in row {
    flatResult = append(flatResult, x)
  }
}
for x in flatResult {
  print(x)
}
test "case324" {
  expect flatResult == [178, 1, 358, 529, 2654, 444, 1057, 183, 3, 364, 544, 2728, 333, 1096, 185, -4, 376, 560, 2806, 333, 1121, 190, -2, 382, 579, 2878, 222, 1158, 196, -1, 398, 595, 2949, 333, 1180, 203, -1, 402, 601, 3039, 333, 1207, 207, -2, 410, 617, 3114, 222, 1241, 212, 2, 426, 635, 3175, 333, 1277, 217, -2, 432, 652, 3260, 222, 1297, 222, 1, 440, 666, 3331, 222, 1338, 226, -1, 458, 685, 3399, 333, 1360, 233, 3, 468, 698, 3473, 333, 1391, 238, 1, 478, 711, 3553, 444, 1416, 241, -1, 486, 723, 3629, 444, 1455, 248, 2, 490, 743, 3706, 111, 1484, 101, -2, 1000, 304, 1529, 444, 610, 108, -1, 1050, 317, 1612, 333, 635, 114, 4, 1120, 335, 1680, 222, 674, 116, -1, 1180, 351, 1757, 222, 708, 122, 2, 1240, 369, 1826, 222, 738, 128, 2, 1290, 385, 1902, 222, 760, 133, 1, 1300, 391, 1985, 333, 793, 136, 1, 1390, 416, 2046, 222, 827, 140, -4, 1430, 428, 2131, 222, 851, 148, 2, 1450, 439, 2202, 444, 880, 154, 2, 1510, 455, 2281, 333, 905, 156, -1, 1580, 475, 2349, 333, 940, 164, 2, 1600, 483, 2432, 444, 966, 169, 4, 1670, 502, 2501, 333, 1000, 171, -2, 1700, 514, 2579, 444, 1030]
}

