# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


@dataclasses.dataclass
class t1Row:
    a: int
    b: int
    c: int
    d: int
    e: int


t1 = [
    t1Row(a=104, b=100, c=102, d=101, e=103),
    t1Row(a=107, b=105, c=106, d=108, e=109),
    t1Row(a=111, b=112, c=113, d=114, e=110),
    t1Row(a=115, b=118, c=119, d=116, e=117),
    t1Row(a=121, b=124, c=123, d=122, e=120),
    t1Row(a=127, b=129, c=125, d=128, e=126),
    t1Row(a=131, b=130, c=134, d=133, e=132),
    t1Row(a=138, b=139, c=137, d=136, e=135),
    t1Row(a=142, b=143, c=141, d=140, e=144),
    t1Row(a=149, b=145, c=147, d=148, e=146),
    t1Row(a=153, b=151, c=150, d=154, e=152),
    t1Row(a=159, b=158, c=155, d=156, e=157),
    t1Row(a=163, b=160, c=161, d=164, e=162),
    t1Row(a=168, b=167, c=166, d=169, e=165),
    t1Row(a=174, b=170, c=172, d=171, e=173),
    t1Row(a=179, b=175, c=176, d=178, e=177),
    t1Row(a=182, b=181, c=184, d=183, e=180),
    t1Row(a=188, b=186, c=187, d=185, e=189),
    t1Row(a=191, b=194, c=193, d=190, e=192),
    t1Row(a=199, b=198, c=195, d=196, e=197),
    t1Row(a=201, b=200, c=202, d=203, e=204),
    t1Row(a=205, b=206, c=208, d=207, e=209),
    t1Row(a=213, b=211, c=214, d=212, e=210),
    t1Row(a=216, b=218, c=215, d=217, e=219),
    t1Row(a=220, b=223, c=224, d=222, e=221),
    t1Row(a=229, b=228, c=225, d=226, e=227),
    t1Row(a=234, b=232, c=231, d=233, e=230),
    t1Row(a=239, b=236, c=235, d=238, e=237),
    t1Row(a=243, b=240, c=244, d=241, e=242),
    t1Row(a=245, b=249, c=247, d=248, e=246),
]
result = None
flatResult = []


def test_case3():
    assert flatResult == [
        1680,
        222,
        1,
        112,
        674,
        1826,
        222,
        1,
        122,
        738,
        1902,
        222,
        4,
        127,
        760,
        1985,
        333,
        4,
        132,
        793,
        2046,
        222,
        2,
        137,
        827,
        2202,
        444,
        2,
        147,
        880,
        2281,
        333,
        1,
        152,
        905,
        2432,
        444,
        1,
        162,
        966,
        2501,
        333,
        1,
        167,
        1000,
        2654,
        444,
        1,
        177,
        1057,
        2728,
        333,
        3,
        182,
        1096,
        3175,
        333,
        3,
        212,
        1277,
        3331,
        222,
        1,
        222,
        1338,
        3473,
        333,
        1,
        232,
        1391,
        3553,
        444,
        1,
        237,
        1416,
        3706,
        111,
        2,
        247,
        1484,
    ]


def main():
    global t1
    t1 = [
        t1Row(a=104, b=100, c=102, d=101, e=103),
        t1Row(a=107, b=105, c=106, d=108, e=109),
        t1Row(a=111, b=112, c=113, d=114, e=110),
        t1Row(a=115, b=118, c=119, d=116, e=117),
        t1Row(a=121, b=124, c=123, d=122, e=120),
        t1Row(a=127, b=129, c=125, d=128, e=126),
        t1Row(a=131, b=130, c=134, d=133, e=132),
        t1Row(a=138, b=139, c=137, d=136, e=135),
        t1Row(a=142, b=143, c=141, d=140, e=144),
        t1Row(a=149, b=145, c=147, d=148, e=146),
        t1Row(a=153, b=151, c=150, d=154, e=152),
        t1Row(a=159, b=158, c=155, d=156, e=157),
        t1Row(a=163, b=160, c=161, d=164, e=162),
        t1Row(a=168, b=167, c=166, d=169, e=165),
        t1Row(a=174, b=170, c=172, d=171, e=173),
        t1Row(a=179, b=175, c=176, d=178, e=177),
        t1Row(a=182, b=181, c=184, d=183, e=180),
        t1Row(a=188, b=186, c=187, d=185, e=189),
        t1Row(a=191, b=194, c=193, d=190, e=192),
        t1Row(a=199, b=198, c=195, d=196, e=197),
        t1Row(a=201, b=200, c=202, d=203, e=204),
        t1Row(a=205, b=206, c=208, d=207, e=209),
        t1Row(a=213, b=211, c=214, d=212, e=210),
        t1Row(a=216, b=218, c=215, d=217, e=219),
        t1Row(a=220, b=223, c=224, d=222, e=221),
        t1Row(a=229, b=228, c=225, d=226, e=227),
        t1Row(a=234, b=232, c=231, d=233, e=230),
        t1Row(a=239, b=236, c=235, d=238, e=237),
        t1Row(a=243, b=240, c=244, d=241, e=242),
        t1Row(a=245, b=249, c=247, d=248, e=246),
    ]
    global result
    result = [
        [
            (
                (
                    (
                        (
                            (
                                (
                                    ((_get(row, "a") + ((_get(row, "b") * 2))))
                                    + ((_get(row, "c") * 3))
                                )
                            )
                            + ((_get(row, "d") * 4))
                        )
                    )
                    + ((_get(row, "e") * 5))
                )
            ),
            (
                (
                    111
                    if (_get(row, "a") < ((_get(row, "b") - 3)))
                    else (
                        (
                            222
                            if (_get(row, "a") <= _get(row, "b"))
                            else (
                                (
                                    333
                                    if (_get(row, "a") < ((_get(row, "b") + 3)))
                                    else 444
                                )
                            )
                        )
                    )
                )
            ),
            (
                (
                    (-(((_get(row, "b") - _get(row, "c")))))
                    if (((_get(row, "b") - _get(row, "c"))) < 0)
                    else ((_get(row, "b") - _get(row, "c")))
                )
            ),
            (
                int(
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                ((_get(row, "a") + _get(row, "b")))
                                                + _get(row, "c")
                                            )
                                        )
                                        + _get(row, "d")
                                    )
                                )
                                + _get(row, "e")
                            )
                        )
                    )
                    / 5
                )
            ),
            ((((_get(row, "a") + ((_get(row, "b") * 2)))) + ((_get(row, "c") * 3)))),
        ]
        for row in sorted(
            [
                row
                for row in t1
                if (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (_get(row, "e") > _get(row, "c"))
                                            or (_get(row, "e") < _get(row, "d"))
                                        )
                                    )
                                )
                                and (_get(row, "d") > _get(row, "e"))
                            )
                        )
                        and (
                            _count([x for x in t1 if (_get(x, "b") < _get(row, "b"))])
                            > 0
                        )
                    )
                )
            ],
            key=lambda row: _sort_key(
                [
                    (
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                _get(row, "a")
                                                                + _get(row, "b")
                                                            )
                                                        )
                                                        + _get(row, "c")
                                                    )
                                                )
                                                + _get(row, "d")
                                            )
                                        )
                                        + _get(row, "e")
                                    )
                                )
                            )
                            / 5
                        )
                    ),
                    (
                        (
                            111
                            if (_get(row, "a") < ((_get(row, "b") - 3)))
                            else (
                                (
                                    222
                                    if (_get(row, "a") <= _get(row, "b"))
                                    else (
                                        (
                                            333
                                            if (_get(row, "a") < ((_get(row, "b") + 3)))
                                            else 444
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            ((_get(row, "a") + ((_get(row, "b") * 2))))
                                            + ((_get(row, "c") * 3))
                                        )
                                    )
                                    + ((_get(row, "d") * 4))
                                )
                            )
                            + ((_get(row, "e") * 5))
                        )
                    ),
                    (
                        (
                            (-(((_get(row, "b") - _get(row, "c")))))
                            if (((_get(row, "b") - _get(row, "c"))) < 0)
                            else ((_get(row, "b") - _get(row, "c")))
                        )
                    ),
                    (
                        (
                            ((_get(row, "a") + ((_get(row, "b") * 2))))
                            + ((_get(row, "c") * 3))
                        )
                    ),
                ]
            ),
        )
    ]
    global flatResult
    flatResult = []
    for row in result:
        for x in row:
            flatResult = _append(flatResult, x)
    for x in flatResult:
        print(x)
    test_case3()


if __name__ == "__main__":
    main()
