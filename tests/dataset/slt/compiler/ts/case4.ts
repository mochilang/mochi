// Generated by Mochi TypeScript compiler

type t1Row = {
  a: number;
  b: number;
  c: number;
  d: number;
  e: number;
};

var flatResult: any[];
var result: number[][];
let t1: t1Row[];

function test_case4(): void {
  if (
    !(_equal(flatResult, [
      102,
      -2,
      555,
      1014,
      103,
      106,
      -1,
      333,
      1067,
      109,
      113,
      4,
      111,
      1130,
      110,
      123,
      2,
      333,
      1226,
      120,
      125,
      2,
      333,
      1272,
      126,
      134,
      1,
      444,
      1325,
      132,
      137,
      1,
      111,
      1371,
      135,
      141,
      -4,
      111,
      1411,
      144,
      147,
      2,
      555,
      1472,
      146,
      150,
      2,
      333,
      1521,
      152,
      155,
      -1,
      555,
      1564,
      157,
      161,
      2,
      333,
      1622,
      162,
      166,
      4,
      333,
      1676,
      165,
      172,
      -2,
      555,
      1714,
      173,
      176,
      1,
      555,
      1769,
      177,
      184,
      3,
      333,
      1828,
      180,
      187,
      -4,
      444,
      1861,
      189,
      193,
      -2,
      444,
      1918,
      192,
      195,
      -1,
      555,
      1964,
      197,
      202,
      -1,
      222,
      2019,
      204,
      208,
      -2,
      111,
      2069,
      209,
      214,
      2,
      222,
      2125,
      210,
      215,
      -2,
      333,
      2165,
      219,
      224,
      1,
      444,
      2226,
      221,
      225,
      -1,
      555,
      2264,
      227,
      231,
      3,
      555,
      2323,
      230,
      235,
      1,
      555,
      2368,
      237,
      244,
      -1,
      222,
      2419,
      242,
      247,
      2,
      444,
      2476,
      246,
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  t1 = [
    {
      a: 104,
      b: 100,
      c: 102,
      d: 101,
      e: 103,
    },
    {
      a: 107,
      b: 105,
      c: 106,
      d: 108,
      e: 109,
    },
    {
      a: 111,
      b: 112,
      c: 113,
      d: 114,
      e: 110,
    },
    {
      a: 115,
      b: 118,
      c: 119,
      d: 116,
      e: 117,
    },
    {
      a: 121,
      b: 124,
      c: 123,
      d: 122,
      e: 120,
    },
    {
      a: 127,
      b: 129,
      c: 125,
      d: 128,
      e: 126,
    },
    {
      a: 131,
      b: 130,
      c: 134,
      d: 133,
      e: 132,
    },
    {
      a: 138,
      b: 139,
      c: 137,
      d: 136,
      e: 135,
    },
    {
      a: 142,
      b: 143,
      c: 141,
      d: 140,
      e: 144,
    },
    {
      a: 149,
      b: 145,
      c: 147,
      d: 148,
      e: 146,
    },
    {
      a: 153,
      b: 151,
      c: 150,
      d: 154,
      e: 152,
    },
    {
      a: 159,
      b: 158,
      c: 155,
      d: 156,
      e: 157,
    },
    {
      a: 163,
      b: 160,
      c: 161,
      d: 164,
      e: 162,
    },
    {
      a: 168,
      b: 167,
      c: 166,
      d: 169,
      e: 165,
    },
    {
      a: 174,
      b: 170,
      c: 172,
      d: 171,
      e: 173,
    },
    {
      a: 179,
      b: 175,
      c: 176,
      d: 178,
      e: 177,
    },
    {
      a: 182,
      b: 181,
      c: 184,
      d: 183,
      e: 180,
    },
    {
      a: 188,
      b: 186,
      c: 187,
      d: 185,
      e: 189,
    },
    {
      a: 191,
      b: 194,
      c: 193,
      d: 190,
      e: 192,
    },
    {
      a: 199,
      b: 198,
      c: 195,
      d: 196,
      e: 197,
    },
    {
      a: 201,
      b: 200,
      c: 202,
      d: 203,
      e: 204,
    },
    {
      a: 205,
      b: 206,
      c: 208,
      d: 207,
      e: 209,
    },
    {
      a: 213,
      b: 211,
      c: 214,
      d: 212,
      e: 210,
    },
    {
      a: 216,
      b: 218,
      c: 215,
      d: 217,
      e: 219,
    },
    {
      a: 220,
      b: 223,
      c: 224,
      d: 222,
      e: 221,
    },
    {
      a: 229,
      b: 228,
      c: 225,
      d: 226,
      e: 227,
    },
    {
      a: 234,
      b: 232,
      c: 231,
      d: 233,
      e: 230,
    },
    {
      a: 239,
      b: 236,
      c: 235,
      d: 238,
      e: 237,
    },
    {
      a: 243,
      b: 240,
      c: 244,
      d: 241,
      e: 242,
    },
    {
      a: 245,
      b: 249,
      c: 247,
      d: 248,
      e: 246,
    },
  ];
  result = (() => {
    const _src = t1;
    var _items = [];
    for (const row of _src) {
      if (
        !((((row.d < 110) || (row.d > 150)) ||
          ((row.c >= (row.b - 2)) && (row.c <= (row.d + 2)))) ||
          ((row.e > row.c) || (row.e < row.d)))
      ) continue;
      _items.push(row);
    }
    let _pairs = _items.map((it) => {
      const row = it;
      return {
        item: it,
        key: [
          row.c,
          row.e,
          ((!_equal(row.a + 1, null) && !_equal(row.b, null)) &&
              ((row.a + 1) == row.b))
            ? 111
            : (((!_equal(row.a + 1, null) && !_equal(row.c, null)) &&
                ((row.a + 1) == row.c))
              ? 222
              : (((!_equal(row.a + 1, null) && !_equal(row.d, null)) &&
                  ((row.a + 1) == row.d))
                ? 333
                : (((!_equal(row.a + 1, null) && !_equal(row.e, null)) &&
                    ((row.a + 1) == row.e))
                  ? 444
                  : 555))),
          row.d - row.e,
          ((row.a + (row.b * 2)) + (row.c * 3)) + (row.d * 4),
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const row of _items) {
      _res.push([
        row.c,
        row.d - row.e,
        ((!_equal(row.a + 1, null) && !_equal(row.b, null)) &&
            ((row.a + 1) == row.b))
          ? 111
          : (((!_equal(row.a + 1, null) && !_equal(row.c, null)) &&
              ((row.a + 1) == row.c))
            ? 222
            : (((!_equal(row.a + 1, null) && !_equal(row.d, null)) &&
                ((row.a + 1) == row.d))
              ? 333
              : (((!_equal(row.a + 1, null) && !_equal(row.e, null)) &&
                  ((row.a + 1) == row.e))
                ? 444
                : 555))),
        ((row.a + (row.b * 2)) + (row.c * 3)) + (row.d * 4),
        row.e,
      ]);
    }
    return _res;
  })();
  flatResult = [];
  for (const row of result) {
    for (const x of row) {
      flatResult = _append(flatResult, x);
    }
  }
  for (const x of flatResult) {
    console.log(x);
  }
  test_case4();
}
function _append<T>(lst: T[] | null, v: T): T[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
