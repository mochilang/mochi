func main (regs=101)
  // let customer = [
  Const        r0, [{"c_custkey": 1}, {"c_custkey": 2}, {"c_custkey": 3}]
  // let orders = [
  Const        r1, [{"o_comment": "fast delivery", "o_custkey": 1, "o_orderkey": 100}, {"o_comment": "no comment", "o_custkey": 1, "o_orderkey": 101}, {"o_comment": "special requests only", "o_custkey": 2, "o_orderkey": 102}]
  // from c in customer
  Const        r2, []
  // c_count: count(
  Const        r3, "c_count"
  // o.o_custkey == c.c_custkey &&
  Const        r4, "o_custkey"
  Const        r5, "c_custkey"
  // (!("special" in o.o_comment)) &&
  Const        r6, "o_comment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L5:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // c_count: count(
  Const        r14, "c_count"
  // from o in orders
  Const        r15, []
  IterPrep     r16, r1
  Len          r17, r16
  Move         r18, r10
L4:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L1
  Index        r21, r16, r18
  // o.o_custkey == c.c_custkey &&
  Index        r22, r21, r4
  Index        r23, r13, r5
  Equal        r25, r22, r23
  JumpIfFalse  r25, L2
  // (!("special" in o.o_comment)) &&
  Const        r26, "special"
  Index        r27, r21, r6
  In           r28, r26, r27
  Not          r25, r28
  JumpIfFalse  r25, L2
  // (!("requests" in o.o_comment))
  Const        r30, "requests"
  Index        r31, r21, r6
  In           r32, r30, r31
  Not          r25, r32
L2:
  // where (
  JumpIfFalse  r25, L3
  // from o in orders
  Append       r15, r15, r21
L3:
  Const        r35, 1
  AddInt       r18, r18, r35
  Jump         L4
L1:
  // c_count: count(
  Count        r36, r15
  Move         r37, r14
  Move         r38, r36
  // select {
  MakeMap      r39, 1, r37
  // from c in customer
  Append       r2, r2, r39
  AddInt       r9, r9, r35
  Jump         L5
L0:
  // from x in per_customer
  Const        r41, []
  // select { c_count: g.key, custdist: count(g) }
  Const        r42, "key"
  Const        r43, "custdist"
  // from x in per_customer
  IterPrep     r44, r2
  Len          r45, r44
  Const        r46, 0
  MakeMap      r47, 0, r0
  Const        r48, []
L8:
  LessInt      r50, r46, r45
  JumpIfFalse  r50, L6
  Index        r51, r44, r46
  // group by x.c_count into g
  Index        r53, r51, r3
  Str          r54, r53
  In           r55, r54, r47
  JumpIfTrue   r55, L7
  // from x in per_customer
  Const        r56, []
  Const        r57, "__group__"
  Const        r58, true
  // group by x.c_count into g
  Move         r59, r53
  // from x in per_customer
  Const        r60, "items"
  Move         r61, r56
  Const        r62, "count"
  Move         r63, r57
  Move         r64, r58
  Move         r65, r42
  Move         r66, r59
  Move         r67, r60
  Move         r68, r61
  Move         r69, r62
  Move         r70, r10
  MakeMap      r71, 4, r63
  SetIndex     r47, r54, r71
  Append       r48, r48, r71
L7:
  Index        r73, r47, r54
  Index        r74, r73, r60
  Append       r75, r74, r51
  SetIndex     r73, r60, r75
  Index        r76, r73, r62
  AddInt       r77, r76, r35
  SetIndex     r73, r62, r77
  AddInt       r46, r46, r35
  Jump         L8
L6:
  Move         r78, r10
  Len          r79, r48
L10:
  LessInt      r80, r78, r79
  JumpIfFalse  r80, L9
  Index        r82, r48, r78
  // select { c_count: g.key, custdist: count(g) }
  Const        r83, "c_count"
  Index        r84, r82, r42
  Const        r85, "custdist"
  Index        r86, r82, r62
  Move         r87, r83
  Move         r88, r84
  Move         r89, r85
  Move         r90, r86
  MakeMap      r91, 2, r87
  // sort by -g.key
  Index        r92, r82, r42
  Neg          r94, r92
  // from x in per_customer
  Move         r95, r91
  MakeList     r96, 2, r94
  Append       r41, r41, r96
  AddInt       r78, r78, r35
  Jump         L10
L9:
  // sort by -g.key
  Sort         r41, r41
  // json(grouped)
  JSON         r41
  // expect grouped == [
  Const        r99, [{"c_count": 2, "custdist": 1}, {"c_count": 0, "custdist": 2}]
  Equal        r100, r41, r99
  Expect       r100
  Return       r0
