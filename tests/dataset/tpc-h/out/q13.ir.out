func main (regs=99)
  // let customer = [
  Const        r0, [{"c_custkey": 1}, {"c_custkey": 2}, {"c_custkey": 3}]
  // let orders = [
  Const        r1, [{"o_comment": "fast delivery", "o_custkey": 1, "o_orderkey": 100}, {"o_comment": "no comment", "o_custkey": 1, "o_orderkey": 101}, {"o_comment": "special requests only", "o_custkey": 2, "o_orderkey": 102}]
  // from c in customer
  Const        r2, []
  // c_count: count(
  Const        r3, "c_count"
  // o.o_custkey == c.c_custkey &&
  Const        r4, "o_custkey"
  Const        r5, "c_custkey"
  // (!("special" in o.o_comment)) &&
  Const        r6, "o_comment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L5:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // c_count: count(
  Const        r14, "c_count"
  // from o in orders
  Const        r15, []
  IterPrep     r16, r1
  Len          r17, r16
  Move         r18, r10
L4:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L1
  Index        r21, r16, r18
  // o.o_custkey == c.c_custkey &&
  Index        r22, r21, r4
  Index        r23, r13, r5
  Equal        r24, r22, r23
  JumpIfFalse  r24, L2
  // (!("special" in o.o_comment)) &&
  Const        r25, "special"
  Index        r26, r21, r6
  In           r27, r25, r26
  Not          r24, r27
  JumpIfFalse  r24, L2
  // (!("requests" in o.o_comment))
  Const        r29, "requests"
  Index        r30, r21, r6
  In           r31, r29, r30
  Not          r24, r31
L2:
  // where (
  JumpIfFalse  r24, L3
  // from o in orders
  Append       r15, r15, r21
L3:
  Const        r34, 1
  AddInt       r18, r18, r34
  Jump         L4
L1:
  // c_count: count(
  Count        r35, r15
  Move         r36, r14
  Move         r37, r35
  // select {
  MakeMap      r38, 1, r36
  // from c in customer
  Append       r2, r2, r38
  AddInt       r9, r9, r34
  Jump         L5
L0:
  // from x in per_customer
  Const        r40, []
  // select { c_count: g.key, custdist: count(g) }
  Const        r41, "key"
  Const        r42, "custdist"
  // from x in per_customer
  IterPrep     r43, r2
  Len          r44, r43
  Const        r45, 0
  MakeMap      r46, 0, r0
  Const        r48, []
  Move         r47, r48
L8:
  LessInt      r49, r45, r44
  JumpIfFalse  r49, L6
  Index        r50, r43, r45
  // group by x.c_count into g
  Index        r52, r50, r3
  Str          r53, r52
  In           r54, r53, r46
  JumpIfTrue   r54, L7
  // from x in per_customer
  Const        r55, "__group__"
  Const        r56, true
  // group by x.c_count into g
  Move         r57, r52
  // from x in per_customer
  Const        r58, "items"
  Move         r59, r48
  Const        r60, "count"
  Move         r61, r55
  Move         r62, r56
  Move         r63, r41
  Move         r64, r57
  Move         r65, r58
  Move         r66, r59
  Move         r67, r60
  Move         r68, r10
  MakeMap      r69, 4, r61
  SetIndex     r46, r53, r69
  Append       r47, r47, r69
L7:
  Index        r71, r46, r53
  Index        r72, r71, r58
  Append       r73, r72, r50
  SetIndex     r71, r58, r73
  Index        r74, r71, r60
  AddInt       r75, r74, r34
  SetIndex     r71, r60, r75
  AddInt       r45, r45, r34
  Jump         L8
L6:
  Move         r76, r10
  Len          r77, r47
L10:
  LessInt      r78, r76, r77
  JumpIfFalse  r78, L9
  Index        r80, r47, r76
  // select { c_count: g.key, custdist: count(g) }
  Const        r81, "c_count"
  Index        r82, r80, r41
  Const        r83, "custdist"
  Index        r84, r80, r60
  Move         r85, r81
  Move         r86, r82
  Move         r87, r83
  Move         r88, r84
  MakeMap      r89, 2, r85
  // sort by -g.key
  Index        r90, r80, r41
  Neg          r92, r90
  // from x in per_customer
  Move         r93, r89
  MakeList     r94, 2, r92
  Append       r40, r40, r94
  AddInt       r76, r76, r34
  Jump         L10
L9:
  // sort by -g.key
  Sort         r40, r40
  // json(grouped)
  JSON         r40
  // expect grouped == [
  Const        r97, [{"c_count": 2, "custdist": 1}, {"c_count": 0, "custdist": 2}]
  Equal        r98, r40, r97
  Expect       r98
  Return       r0
