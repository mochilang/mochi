func main (regs=128)
  // let customer = [
  Const        r0, [{"c_custkey": 1}, {"c_custkey": 2}, {"c_custkey": 3}]
  // let orders = [
  Const        r1, [{"o_comment": "fast delivery", "o_custkey": 1, "o_orderkey": 100}, {"o_comment": "no comment", "o_custkey": 1, "o_orderkey": 101}, {"o_comment": "special requests only", "o_custkey": 2, "o_orderkey": 102}]
  // from c in customer
  Const        r2, []
  // c_count: count(
  Const        r3, "c_count"
  // o.o_custkey == c.c_custkey &&
  Const        r4, "o_custkey"
  Const        r5, "c_custkey"
  // (!("special" in o.o_comment)) &&
  Const        r6, "o_comment"
  // (!("requests" in o.o_comment))
  Const        r7, "o_comment"
  // from c in customer
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
L6:
  LessInt      r12, r10, r9
  JumpIfFalse  r12, L0
  Index        r14, r8, r10
  // c_count: count(
  Const        r15, "c_count"
  // from o in orders
  Const        r16, []
  // o.o_custkey == c.c_custkey &&
  Const        r17, "o_custkey"
  Const        r18, "c_custkey"
  // (!("special" in o.o_comment)) &&
  Const        r19, "o_comment"
  // (!("requests" in o.o_comment))
  Const        r20, "o_comment"
  // from o in orders
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L5:
  LessInt      r25, r23, r22
  JumpIfFalse  r25, L1
  Index        r27, r21, r23
  // o.o_custkey == c.c_custkey &&
  Const        r28, "o_custkey"
  Index        r29, r27, r28
  Const        r30, "c_custkey"
  Index        r31, r14, r30
  Equal        r33, r29, r31
  JumpIfFalse  r33, L2
  // (!("special" in o.o_comment)) &&
  Const        r34, "special"
  Const        r35, "o_comment"
  Index        r36, r27, r35
  In           r37, r34, r36
  Not          r39, r37
L2:
  JumpIfFalse  r39, L3
  // (!("requests" in o.o_comment))
  Const        r40, "requests"
  Const        r41, "o_comment"
  Index        r42, r27, r41
  In           r43, r40, r42
  Not          r39, r43
L3:
  // where (
  JumpIfFalse  r39, L4
  // from o in orders
  Append       r16, r16, r27
L4:
  Const        r46, 1
  AddInt       r23, r23, r46
  Jump         L5
L1:
  // c_count: count(
  Count        r47, r16
  Move         r48, r15
  Move         r49, r47
  // select {
  MakeMap      r50, 1, r48
  // from c in customer
  Append       r2, r2, r50
  Const        r52, 1
  AddInt       r10, r10, r52
  Jump         L6
L0:
  // from x in per_customer
  Const        r53, []
  // group by x.c_count into g
  Const        r54, "c_count"
  // select { c_count: g.key, custdist: count(g) }
  Const        r55, "c_count"
  Const        r56, "key"
  Const        r57, "custdist"
  // sort by -g.key
  Const        r58, "key"
  // from x in per_customer
  IterPrep     r59, r2
  Len          r60, r59
  Const        r61, 0
  MakeMap      r62, 0, r0
  Const        r63, []
L9:
  LessInt      r65, r61, r60
  JumpIfFalse  r65, L7
  Index        r66, r59, r61
  Move         r67, r66
  // group by x.c_count into g
  Const        r68, "c_count"
  Index        r69, r67, r68
  Str          r70, r69
  In           r71, r70, r62
  JumpIfTrue   r71, L8
  // from x in per_customer
  Const        r72, []
  Const        r73, "__group__"
  Const        r74, true
  Const        r75, "key"
  // group by x.c_count into g
  Move         r76, r69
  // from x in per_customer
  Const        r77, "items"
  Move         r78, r72
  Const        r79, "count"
  Const        r80, 0
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  MakeMap      r89, 4, r81
  SetIndex     r62, r70, r89
  Append       r63, r63, r89
L8:
  Const        r91, "items"
  Index        r92, r62, r70
  Index        r93, r92, r91
  Append       r94, r93, r66
  SetIndex     r92, r91, r94
  Const        r95, "count"
  Index        r96, r92, r95
  Const        r97, 1
  AddInt       r98, r96, r97
  SetIndex     r92, r95, r98
  Const        r99, 1
  AddInt       r61, r61, r99
  Jump         L9
L7:
  Const        r100, 0
  Len          r102, r63
L11:
  LessInt      r103, r100, r102
  JumpIfFalse  r103, L10
  Index        r105, r63, r100
  // select { c_count: g.key, custdist: count(g) }
  Const        r106, "c_count"
  Const        r107, "key"
  Index        r108, r105, r107
  Const        r109, "custdist"
  Const        r110, "count"
  Index        r111, r105, r110
  Move         r112, r106
  Move         r113, r108
  Move         r114, r109
  Move         r115, r111
  MakeMap      r116, 2, r112
  // sort by -g.key
  Const        r117, "key"
  Index        r118, r105, r117
  Neg          r120, r118
  // from x in per_customer
  Move         r121, r116
  MakeList     r122, 2, r120
  Append       r53, r53, r122
  Const        r124, 1
  AddInt       r100, r100, r124
  Jump         L11
L10:
  // sort by -g.key
  Sort         r53, r53
  // json(grouped)
  JSON         r53
  // expect grouped == [
  Const        r126, [{"c_count": 2, "custdist": 1}, {"c_count": 0, "custdist": 2}]
  Equal        r127, r53, r126
  Expect       r127
  Return       r0
