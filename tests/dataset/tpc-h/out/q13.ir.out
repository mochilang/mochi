func main (regs=105)
  // let customer = [
  Const        r0, [{"c_custkey": 1}, {"c_custkey": 2}, {"c_custkey": 3}]
  // let orders = [
  Const        r1, [{"o_comment": "fast delivery", "o_custkey": 1, "o_orderkey": 100}, {"o_comment": "no comment", "o_custkey": 1, "o_orderkey": 101}, {"o_comment": "special requests only", "o_custkey": 2, "o_orderkey": 102}]
  // from c in customer
  Const        r2, []
  // c_count: count(
  Const        r3, "c_count"
  // o.o_custkey == c.c_custkey &&
  Const        r4, "o_custkey"
  Const        r5, "c_custkey"
  // (!("special" in o.o_comment)) &&
  Const        r6, "o_comment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L5:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // c_count: count(
  Const        r14, "c_count"
  // from o in orders
  Const        r15, []
  IterPrep     r16, r1
  Len          r17, r16
  Move         r18, r10
L4:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L1
  Index        r21, r16, r18
  // o.o_custkey == c.c_custkey &&
  Index        r22, r21, r4
  Index        r23, r13, r5
  Equal        r25, r22, r23
  JumpIfFalse  r25, L2
  // (!("special" in o.o_comment)) &&
  Const        r26, "special"
  Index        r27, r21, r6
  In           r28, r26, r27
  Not          r25, r28
  JumpIfFalse  r25, L2
  // (!("requests" in o.o_comment))
  Const        r30, "requests"
  Index        r31, r21, r6
  In           r32, r30, r31
  Not          r25, r32
L2:
  // where (
  JumpIfFalse  r25, L3
  // from o in orders
  Append       r15, r15, r21
L3:
  Const        r35, 1
  AddInt       r18, r18, r35
  Jump         L4
L1:
  // c_count: count(
  Count        r36, r15
  Move         r37, r14
  Move         r38, r36
  // select {
  MakeMap      r39, 1, r37
  // from c in customer
  Append       r2, r2, r39
  AddInt       r9, r9, r35
  Jump         L5
L0:
  // from x in per_customer
  Const        r41, []
  // select { c_count: g.key, custdist: count(g) }
  Const        r42, "key"
  Const        r43, "custdist"
  // from x in per_customer
  IterPrep     r44, r2
  Len          r45, r44
  Const        r46, 0
  MakeMap      r47, 0, r0
  Const        r48, []
L8:
  LessInt      r50, r46, r45
  JumpIfFalse  r50, L6
  Index        r51, r44, r46
  // group by x.c_count into g
  Index        r53, r51, r3
  Str          r54, r53
  In           r55, r54, r47
  JumpIfTrue   r55, L7
  // from x in per_customer
  Const        r56, []
  Const        r57, "__group__"
  Const        r58, true
  Const        r59, "key"
  // group by x.c_count into g
  Move         r60, r53
  // from x in per_customer
  Const        r61, "items"
  Move         r62, r56
  Const        r63, "count"
  Const        r64, 0
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  Move         r71, r63
  Move         r72, r64
  MakeMap      r73, 4, r65
  SetIndex     r47, r54, r73
  Append       r48, r48, r73
L7:
  Const        r75, "items"
  Index        r76, r47, r54
  Index        r77, r76, r75
  Append       r78, r77, r51
  SetIndex     r76, r75, r78
  Const        r79, "count"
  Index        r80, r76, r79
  AddInt       r81, r80, r35
  SetIndex     r76, r79, r81
  AddInt       r46, r46, r35
  Jump         L8
L6:
  Move         r82, r10
  Len          r83, r48
L10:
  LessInt      r84, r82, r83
  JumpIfFalse  r84, L9
  Index        r86, r48, r82
  // select { c_count: g.key, custdist: count(g) }
  Const        r87, "c_count"
  Index        r88, r86, r42
  Const        r89, "custdist"
  Index        r90, r86, r79
  Move         r91, r87
  Move         r92, r88
  Move         r93, r89
  Move         r94, r90
  MakeMap      r95, 2, r91
  // sort by -g.key
  Index        r96, r86, r42
  Neg          r98, r96
  // from x in per_customer
  Move         r99, r95
  MakeList     r100, 2, r98
  Append       r41, r41, r100
  AddInt       r82, r82, r35
  Jump         L10
L9:
  // sort by -g.key
  Sort         r41, r41
  // json(grouped)
  JSON         r41
  // expect grouped == [
  Const        r103, [{"c_count": 2, "custdist": 1}, {"c_count": 0, "custdist": 2}]
  Equal        r104, r41, r103
  Expect       r104
  Return       r0
