func main (regs=220)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}, {"c_acctbal": 200, "c_address": "456 Side St", "c_comment": "Frequent returns", "c_custkey": 2, "c_name": "Bob", "c_nationkey": 1, "c_phone": "987-654"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderkey": 100}, {"o_custkey": 1, "o_orderkey": 200}, {"o_custkey": 2, "o_orderkey": 300}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_quantity": 150}, {"l_discount": 0, "l_extendedprice": 800, "l_orderkey": 200, "l_quantity": 100}, {"l_discount": 0.05, "l_extendedprice": 300, "l_orderkey": 300, "l_quantity": 30}]
  // let threshold = 200
  Const        r4, 200
  // from c in customer
  Const        r5, []
  // c_name: c.c_name,
  Const        r6, "c_name"
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_acctbal: c.c_acctbal,
  Const        r8, "c_acctbal"
  // c_address: c.c_address,
  Const        r9, "c_address"
  // c_phone: c.c_phone,
  Const        r10, "c_phone"
  // c_comment: c.c_comment,
  Const        r11, "c_comment"
  // n_name: n.n_name
  Const        r12, "n_name"
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r13, "l"
  Const        r14, "l_quantity"
  // c_name: g.key.c_name,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r16, "revenue"
  Const        r17, "l_extendedprice"
  Const        r18, "l_discount"
  // from c in customer
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r22, r1
  Len          r23, r22
  Const        r24, 0
L9:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L0
  Index        r27, r22, r24
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r28, r2
  Len          r29, r28
  Const        r30, 0
L8:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L1
  Index        r33, r28, r30
  Const        r34, "o_custkey"
  Index        r35, r33, r34
  Index        r36, r27, r7
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r38, r3
  Len          r39, r38
  Const        r40, 0
L7:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  Const        r44, "l_orderkey"
  Index        r45, r43, r44
  Const        r46, "o_orderkey"
  Index        r47, r33, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r49, r0
  Len          r50, r49
  Const        r51, 0
L6:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r54, r49, r51
  Const        r55, "n_nationkey"
  Index        r56, r54, r55
  Const        r57, "c_nationkey"
  Index        r58, r27, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // from c in customer
  Const        r60, "c"
  Move         r61, r27
  Const        r62, "o"
  Move         r63, r33
  Const        r64, "l"
  Move         r65, r43
  Const        r66, "n"
  Move         r67, r54
  MakeMap      r68, 4, r60
  // c_name: c.c_name,
  Const        r69, "c_name"
  Index        r70, r27, r6
  // c_custkey: c.c_custkey,
  Const        r71, "c_custkey"
  Index        r72, r27, r7
  // c_acctbal: c.c_acctbal,
  Const        r73, "c_acctbal"
  Index        r74, r27, r8
  // c_address: c.c_address,
  Const        r75, "c_address"
  Index        r76, r27, r9
  // c_phone: c.c_phone,
  Const        r77, "c_phone"
  Index        r78, r27, r10
  // c_comment: c.c_comment,
  Const        r79, "c_comment"
  Index        r80, r27, r11
  // n_name: n.n_name
  Const        r81, "n_name"
  Index        r82, r54, r12
  // c_name: c.c_name,
  Move         r83, r69
  Move         r84, r70
  // c_custkey: c.c_custkey,
  Move         r85, r71
  Move         r86, r72
  // c_acctbal: c.c_acctbal,
  Move         r87, r73
  Move         r88, r74
  // c_address: c.c_address,
  Move         r89, r75
  Move         r90, r76
  // c_phone: c.c_phone,
  Move         r91, r77
  Move         r92, r78
  // c_comment: c.c_comment,
  Move         r93, r79
  Move         r94, r80
  // n_name: n.n_name
  Move         r95, r81
  Move         r96, r82
  // group by {
  MakeMap      r97, 7, r83
  Str          r98, r97
  In           r99, r98, r19
  JumpIfTrue   r99, L5
  // from c in customer
  Const        r100, []
  Const        r101, "__group__"
  Const        r102, true
  Const        r103, "key"
  // group by {
  Move         r104, r97
  // from c in customer
  Const        r105, "items"
  Move         r106, r100
  Const        r107, "count"
  Const        r108, 0
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  Move         r116, r108
  MakeMap      r117, 4, r109
  SetIndex     r19, r98, r117
  Append       r20, r20, r117
L5:
  Const        r119, "items"
  Index        r120, r19, r98
  Index        r121, r120, r119
  Append       r122, r121, r68
  SetIndex     r120, r119, r122
  Const        r123, "count"
  Index        r124, r120, r123
  Const        r125, 1
  AddInt       r126, r124, r125
  SetIndex     r120, r123, r126
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r51, r51, r125
  Jump         L6
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r40, r40, r125
  Jump         L7
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r30, r30, r125
  Jump         L8
L1:
  // from c in customer
  AddInt       r24, r24, r125
  Jump         L9
L0:
  Const        r128, 0
  Move         r127, r128
  Len          r129, r20
L17:
  LessInt      r130, r127, r129
  JumpIfFalse  r130, L10
  Index        r132, r20, r127
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r133, []
  IterPrep     r134, r132
  Len          r135, r134
  Move         r136, r128
L12:
  LessInt      r137, r136, r135
  JumpIfFalse  r137, L11
  Index        r139, r134, r136
  Index        r140, r139, r13
  Index        r141, r140, r14
  Append       r133, r133, r141
  AddInt       r136, r136, r125
  Jump         L12
L11:
  Sum          r143, r133
  Less         r144, r4, r143
  JumpIfFalse  r144, L10
  // c_name: g.key.c_name,
  Const        r145, "c_name"
  Index        r146, r132, r15
  Index        r147, r146, r6
  // c_custkey: g.key.c_custkey,
  Const        r148, "c_custkey"
  Index        r149, r132, r15
  Index        r150, r149, r7
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r151, "revenue"
  Const        r152, []
  IterPrep     r153, r132
  Len          r154, r153
  Move         r155, r128
L14:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L13
  Index        r139, r153, r155
  Index        r158, r139, r13
  Index        r159, r158, r17
  Index        r160, r139, r13
  Index        r161, r160, r18
  Sub          r162, r125, r161
  Mul          r163, r159, r162
  Append       r152, r152, r163
  AddInt       r155, r155, r125
  Jump         L14
L13:
  Sum          r165, r152
  // c_acctbal: g.key.c_acctbal,
  Const        r166, "c_acctbal"
  Index        r167, r132, r15
  Index        r168, r167, r8
  // n_name: g.key.n_name,
  Const        r169, "n_name"
  Index        r170, r132, r15
  Index        r171, r170, r12
  // c_address: g.key.c_address,
  Const        r172, "c_address"
  Index        r173, r132, r15
  Index        r174, r173, r9
  // c_phone: g.key.c_phone,
  Const        r175, "c_phone"
  Index        r176, r132, r15
  Index        r177, r176, r10
  // c_comment: g.key.c_comment
  Const        r178, "c_comment"
  Index        r179, r132, r15
  Index        r180, r179, r11
  // c_name: g.key.c_name,
  Move         r181, r145
  Move         r182, r147
  // c_custkey: g.key.c_custkey,
  Move         r183, r148
  Move         r184, r150
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r185, r151
  Move         r186, r165
  // c_acctbal: g.key.c_acctbal,
  Move         r187, r166
  Move         r188, r168
  // n_name: g.key.n_name,
  Move         r189, r169
  Move         r190, r171
  // c_address: g.key.c_address,
  Move         r191, r172
  Move         r192, r174
  // c_phone: g.key.c_phone,
  Move         r193, r175
  Move         r194, r177
  // c_comment: g.key.c_comment
  Move         r195, r178
  Move         r196, r180
  // select {
  MakeMap      r197, 8, r181
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r198, []
  IterPrep     r199, r132
  Len          r200, r199
  Move         r201, r128
L16:
  LessInt      r202, r201, r200
  JumpIfFalse  r202, L15
  Index        r139, r199, r201
  Index        r204, r139, r13
  Index        r205, r204, r17
  Index        r206, r139, r13
  Index        r207, r206, r18
  Sub          r208, r125, r207
  Mul          r209, r205, r208
  Append       r198, r198, r209
  AddInt       r201, r201, r125
  Jump         L16
L15:
  Sum          r211, r198
  Neg          r213, r211
  // from c in customer
  Move         r214, r197
  MakeList     r215, 2, r213
  Append       r5, r5, r215
  AddInt       r127, r127, r125
  Jump         L17
L10:
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r5, r5
  // json(result)
  JSON         r5
  // expect result == [
  Const        r218, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_phone": "123-456", "n_name": "GERMANY", "revenue": 1700}]
  Equal        r219, r5, r218
  Expect       r219
  Return       r0
