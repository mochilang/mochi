func main (regs=214)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}, {"c_acctbal": 200, "c_address": "456 Side St", "c_comment": "Frequent returns", "c_custkey": 2, "c_name": "Bob", "c_nationkey": 1, "c_phone": "987-654"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderkey": 100}, {"o_custkey": 1, "o_orderkey": 200}, {"o_custkey": 2, "o_orderkey": 300}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_quantity": 150}, {"l_discount": 0, "l_extendedprice": 800, "l_orderkey": 200, "l_quantity": 100}, {"l_discount": 0.05, "l_extendedprice": 300, "l_orderkey": 300, "l_quantity": 30}]
  // let threshold = 200
  Const        r4, 200
  // from c in customer
  Const        r5, []
  // c_name: c.c_name,
  Const        r6, "c_name"
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_acctbal: c.c_acctbal,
  Const        r8, "c_acctbal"
  // c_address: c.c_address,
  Const        r9, "c_address"
  // c_phone: c.c_phone,
  Const        r10, "c_phone"
  // c_comment: c.c_comment,
  Const        r11, "c_comment"
  // n_name: n.n_name
  Const        r12, "n_name"
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r13, "l"
  Const        r14, "l_quantity"
  // c_name: g.key.c_name,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r16, "revenue"
  Const        r17, "l_extendedprice"
  Const        r18, "l_discount"
  // from c in customer
  MakeMap      r19, 0, r0
  Const        r21, []
  Move         r20, r21
  IterPrep     r22, r1
  Len          r23, r22
  Const        r24, 0
L9:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L0
  Index        r27, r22, r24
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r28, r2
  Len          r29, r28
  Const        r30, 0
L8:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L1
  Index        r33, r28, r30
  Const        r34, "o_custkey"
  Index        r35, r33, r34
  Index        r36, r27, r7
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r38, r3
  Len          r39, r38
  Const        r40, 0
L7:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  Const        r44, "l_orderkey"
  Index        r45, r43, r44
  Const        r46, "o_orderkey"
  Index        r47, r33, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r49, r0
  Len          r50, r49
  Const        r51, 0
L6:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r54, r49, r51
  Const        r55, "n_nationkey"
  Index        r56, r54, r55
  Const        r57, "c_nationkey"
  Index        r58, r27, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // from c in customer
  Const        r60, "c"
  Move         r61, r27
  Const        r62, "o"
  Move         r63, r33
  Move         r64, r43
  Const        r65, "n"
  Move         r66, r54
  MakeMap      r67, 4, r60
  // c_name: c.c_name,
  Const        r68, "c_name"
  Index        r69, r27, r6
  // c_custkey: c.c_custkey,
  Const        r70, "c_custkey"
  Index        r71, r27, r7
  // c_acctbal: c.c_acctbal,
  Const        r72, "c_acctbal"
  Index        r73, r27, r8
  // c_address: c.c_address,
  Const        r74, "c_address"
  Index        r75, r27, r9
  // c_phone: c.c_phone,
  Const        r76, "c_phone"
  Index        r77, r27, r10
  // c_comment: c.c_comment,
  Const        r78, "c_comment"
  Index        r79, r27, r11
  // n_name: n.n_name
  Const        r80, "n_name"
  Index        r81, r54, r12
  // c_name: c.c_name,
  Move         r82, r68
  Move         r83, r69
  // c_custkey: c.c_custkey,
  Move         r84, r70
  Move         r85, r71
  // c_acctbal: c.c_acctbal,
  Move         r86, r72
  Move         r87, r73
  // c_address: c.c_address,
  Move         r88, r74
  Move         r89, r75
  // c_phone: c.c_phone,
  Move         r90, r76
  Move         r91, r77
  // c_comment: c.c_comment,
  Move         r92, r78
  Move         r93, r79
  // n_name: n.n_name
  Move         r94, r80
  Move         r95, r81
  // group by {
  MakeMap      r96, 7, r82
  Str          r97, r96
  In           r98, r97, r19
  JumpIfTrue   r98, L5
  // from c in customer
  Const        r99, "__group__"
  Const        r100, true
  // group by {
  Move         r101, r96
  // from c in customer
  Const        r102, "items"
  Move         r103, r21
  Const        r104, "count"
  Const        r105, 0
  Move         r106, r99
  Move         r107, r100
  Move         r108, r15
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  MakeMap      r114, 4, r106
  SetIndex     r19, r97, r114
  Append       r20, r20, r114
L5:
  Index        r116, r19, r97
  Index        r117, r116, r102
  Append       r118, r117, r67
  SetIndex     r116, r102, r118
  Index        r119, r116, r104
  Const        r120, 1
  AddInt       r121, r119, r120
  SetIndex     r116, r104, r121
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r51, r51, r120
  Jump         L6
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r40, r40, r120
  Jump         L7
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r30, r30, r120
  Jump         L8
L1:
  // from c in customer
  AddInt       r24, r24, r120
  Jump         L9
L0:
  Move         r122, r105
  Len          r123, r20
L17:
  LessInt      r124, r122, r123
  JumpIfFalse  r124, L10
  Index        r126, r20, r122
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r127, []
  IterPrep     r128, r126
  Len          r129, r128
  Move         r130, r105
L12:
  LessInt      r131, r130, r129
  JumpIfFalse  r131, L11
  Index        r133, r128, r130
  Index        r134, r133, r13
  Index        r135, r134, r14
  Append       r127, r127, r135
  AddInt       r130, r130, r120
  Jump         L12
L11:
  Sum          r137, r127
  Less         r138, r4, r137
  JumpIfFalse  r138, L10
  // c_name: g.key.c_name,
  Const        r139, "c_name"
  Index        r140, r126, r15
  Index        r141, r140, r6
  // c_custkey: g.key.c_custkey,
  Const        r142, "c_custkey"
  Index        r143, r126, r15
  Index        r144, r143, r7
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r145, "revenue"
  Const        r146, []
  IterPrep     r147, r126
  Len          r148, r147
  Move         r149, r105
L14:
  LessInt      r150, r149, r148
  JumpIfFalse  r150, L13
  Index        r133, r147, r149
  Index        r152, r133, r13
  Index        r153, r152, r17
  Index        r154, r133, r13
  Index        r155, r154, r18
  Sub          r156, r120, r155
  Mul          r157, r153, r156
  Append       r146, r146, r157
  AddInt       r149, r149, r120
  Jump         L14
L13:
  Sum          r159, r146
  // c_acctbal: g.key.c_acctbal,
  Const        r160, "c_acctbal"
  Index        r161, r126, r15
  Index        r162, r161, r8
  // n_name: g.key.n_name,
  Const        r163, "n_name"
  Index        r164, r126, r15
  Index        r165, r164, r12
  // c_address: g.key.c_address,
  Const        r166, "c_address"
  Index        r167, r126, r15
  Index        r168, r167, r9
  // c_phone: g.key.c_phone,
  Const        r169, "c_phone"
  Index        r170, r126, r15
  Index        r171, r170, r10
  // c_comment: g.key.c_comment
  Const        r172, "c_comment"
  Index        r173, r126, r15
  Index        r174, r173, r11
  // c_name: g.key.c_name,
  Move         r175, r139
  Move         r176, r141
  // c_custkey: g.key.c_custkey,
  Move         r177, r142
  Move         r178, r144
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r179, r145
  Move         r180, r159
  // c_acctbal: g.key.c_acctbal,
  Move         r181, r160
  Move         r182, r162
  // n_name: g.key.n_name,
  Move         r183, r163
  Move         r184, r165
  // c_address: g.key.c_address,
  Move         r185, r166
  Move         r186, r168
  // c_phone: g.key.c_phone,
  Move         r187, r169
  Move         r188, r171
  // c_comment: g.key.c_comment
  Move         r189, r172
  Move         r190, r174
  // select {
  MakeMap      r191, 8, r175
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r192, []
  IterPrep     r193, r126
  Len          r194, r193
  Move         r195, r105
L16:
  LessInt      r196, r195, r194
  JumpIfFalse  r196, L15
  Index        r133, r193, r195
  Index        r198, r133, r13
  Index        r199, r198, r17
  Index        r200, r133, r13
  Index        r201, r200, r18
  Sub          r202, r120, r201
  Mul          r203, r199, r202
  Append       r192, r192, r203
  AddInt       r195, r195, r120
  Jump         L16
L15:
  Sum          r205, r192
  Neg          r207, r205
  // from c in customer
  Move         r208, r191
  MakeList     r209, 2, r207
  Append       r5, r5, r209
  AddInt       r122, r122, r120
  Jump         L17
L10:
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r5, r5
  // json(result)
  JSON         r5
  // expect result == [
  Const        r212, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_phone": "123-456", "n_name": "GERMANY", "revenue": 1700}]
  Equal        r213, r5, r212
  Expect       r213
  Return       r0
