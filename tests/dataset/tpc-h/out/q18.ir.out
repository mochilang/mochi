func main (regs=188)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}, {"c_acctbal": 200, "c_address": "456 Side St", "c_comment": "Frequent returns", "c_custkey": 2, "c_name": "Bob", "c_nationkey": 1, "c_phone": "987-654"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderkey": 100}, {"o_custkey": 1, "o_orderkey": 200}, {"o_custkey": 2, "o_orderkey": 300}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_quantity": 150}, {"l_discount": 0, "l_extendedprice": 800, "l_orderkey": 200, "l_quantity": 100}, {"l_discount": 0.05, "l_extendedprice": 300, "l_orderkey": 300, "l_quantity": 30}]
  // let threshold = 200
  Const        r4, 200
  // from c in customer
  Const        r5, []
  // c_name: c.c_name,
  Const        r6, "c_name"
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_acctbal: c.c_acctbal,
  Const        r8, "c_acctbal"
  // c_address: c.c_address,
  Const        r9, "c_address"
  // c_phone: c.c_phone,
  Const        r10, "c_phone"
  // c_comment: c.c_comment,
  Const        r11, "c_comment"
  // n_name: n.n_name
  Const        r12, "n_name"
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r13, "l"
  Const        r14, "l_quantity"
  // c_name: g.key.c_name,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r17, "l_extendedprice"
  Const        r18, "l_discount"
  // from c in customer
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L9:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r26, r21, r23
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r27, r2
  Len          r28, r27
  Const        r29, 0
L8:
  Less         r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r32, r27, r29
  Const        r33, "o_custkey"
  Index        r34, r32, r33
  Index        r35, r26, r7
  Equal        r36, r34, r35
  JumpIfFalse  r36, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r37, r3
  Len          r38, r37
  Const        r39, 0
L7:
  Less         r40, r39, r38
  JumpIfFalse  r40, L2
  Index        r42, r37, r39
  Const        r43, "l_orderkey"
  Index        r44, r42, r43
  Const        r45, "o_orderkey"
  Index        r46, r32, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r48, r0
  Len          r49, r48
  Const        r50, 0
L6:
  Less         r51, r50, r49
  JumpIfFalse  r51, L3
  Index        r53, r48, r50
  Const        r54, "n_nationkey"
  Index        r55, r53, r54
  Const        r56, "c_nationkey"
  Index        r57, r26, r56
  Equal        r58, r55, r57
  JumpIfFalse  r58, L4
  // from c in customer
  Const        r59, "c"
  Move         r60, r26
  Const        r61, "o"
  Move         r62, r32
  Move         r63, r42
  Const        r64, "n"
  Move         r65, r53
  MakeMap      r66, 4, r59
  // c_name: c.c_name,
  Const        r67, "c_name"
  Index        r68, r26, r6
  // c_custkey: c.c_custkey,
  Const        r69, "c_custkey"
  Index        r70, r26, r7
  // c_acctbal: c.c_acctbal,
  Const        r71, "c_acctbal"
  Index        r72, r26, r8
  // c_address: c.c_address,
  Const        r73, "c_address"
  Index        r74, r26, r9
  // c_phone: c.c_phone,
  Const        r75, "c_phone"
  Index        r76, r26, r10
  // c_comment: c.c_comment,
  Const        r77, "c_comment"
  Index        r78, r26, r11
  // n_name: n.n_name
  Const        r79, "n_name"
  Index        r80, r53, r12
  // group by {
  MakeMap      r88, 7, r67
  Str          r89, r88
  In           r90, r89, r19
  JumpIfTrue   r90, L5
  // from c in customer
  Const        r91, []
  Const        r92, "__group__"
  Const        r93, true
  // group by {
  Move         r94, r88
  // from c in customer
  Const        r95, "items"
  Move         r96, r91
  MakeMap      r97, 3, r92
  SetIndex     r19, r89, r97
  Append       r20, r20, r97
L5:
  Index        r99, r19, r89
  Index        r100, r99, r95
  Append       r101, r100, r66
  SetIndex     r99, r95, r101
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  Const        r102, 1
  AddInt       r50, r50, r102
  Jump         L6
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r39, r39, r102
  Jump         L7
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  Jump         L8
L1:
  // from c in customer
  Jump         L9
L0:
  Const        r104, 0
  Move         r103, r104
  Len          r105, r20
L17:
  LessInt      r106, r103, r105
  JumpIfFalse  r106, L10
  Index        r108, r20, r103
  // having sum(from x in g select x.l.l_quantity) > threshold
  Const        r109, []
  IterPrep     r110, r108
  Len          r111, r110
  Move         r112, r104
L12:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L11
  Index        r115, r110, r112
  Index        r116, r115, r13
  Index        r117, r116, r14
  Append       r109, r109, r117
  AddInt       r112, r112, r102
  Jump         L12
L11:
  Sum          r119, r109
  Less         r120, r4, r119
  JumpIfFalse  r120, L10
  // c_name: g.key.c_name,
  Const        r121, "c_name"
  Index        r122, r108, r15
  Index        r123, r122, r6
  // c_custkey: g.key.c_custkey,
  Const        r124, "c_custkey"
  Index        r125, r108, r15
  Index        r126, r125, r7
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r127, "revenue"
  Const        r128, []
  IterPrep     r129, r108
  Len          r130, r129
  Move         r131, r104
L14:
  LessInt      r132, r131, r130
  JumpIfFalse  r132, L13
  Index        r133, r129, r131
  Move         r115, r133
  Index        r134, r115, r13
  Index        r135, r134, r17
  Index        r136, r115, r13
  Index        r137, r136, r18
  Sub          r138, r102, r137
  Mul          r139, r135, r138
  Append       r128, r128, r139
  AddInt       r131, r131, r102
  Jump         L14
L13:
  // select {
  MakeMap      r165, 8, r121
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r166, []
  IterPrep     r167, r108
  Len          r168, r167
  Move         r169, r104
L16:
  LessInt      r170, r169, r168
  JumpIfFalse  r170, L15
  Index        r115, r167, r169
  Index        r172, r115, r13
  Index        r173, r172, r17
  Index        r174, r115, r13
  Index        r175, r174, r18
  Sub          r176, r102, r175
  Mul          r177, r173, r176
  Append       r166, r166, r177
  AddInt       r169, r169, r102
  Jump         L16
L15:
  Sum          r179, r166
  Neg          r181, r179
  // from c in customer
  Move         r182, r165
  MakeList     r183, 2, r181
  Append       r5, r5, r183
  AddInt       r103, r103, r102
  Jump         L17
L10:
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r5, r5
  // json(result)
  JSON         r5
  // expect result == [
  Const        r186, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_phone": "123-456", "n_name": "GERMANY", "revenue": 1700}]
  Equal        r187, r5, r186
  Expect       r187
  Return       r0
