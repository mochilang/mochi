func main (regs=247)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}]
  Move         r1, r0
  // let customer = [
  Const        r2, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}, {"c_acctbal": 200, "c_address": "456 Side St", "c_comment": "Frequent returns", "c_custkey": 2, "c_name": "Bob", "c_nationkey": 1, "c_phone": "987-654"}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderkey": 100}, {"o_custkey": 1, "o_orderkey": 200}, {"o_custkey": 2, "o_orderkey": 300}]
  // let lineitem = [
  Const        r6, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_quantity": 150}, {"l_discount": 0, "l_extendedprice": 800, "l_orderkey": 200, "l_quantity": 100}, {"l_discount": 0.05, "l_extendedprice": 300, "l_orderkey": 300, "l_quantity": 30}]
  // from c in customer
  MakeMap      r11, 0, r0
  Const        r12, []
  IterPrep     r13, r2
  Len          r14, r13
  Const        r15, 0
  Less         r16, r15, r14
  JumpIfFalse  r16, L0
  Index        r17, r13, r15
L9:
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r19, r4
  Len          r20, r19
  Const        r21, 0
  Less         r22, r21, r20
  JumpIfFalse  r22, L1
  Index        r23, r19, r21
  Const        r25, "o_custkey"
L8:
  Index        r26, r23, r25
  Const        r27, "c_custkey"
  Index        r28, r17, r27
  Equal        r29, r26, r28
  JumpIfFalse  r29, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r30, r6
  Len          r31, r30
  Const        r32, 0
  Less         r33, r32, r31
  JumpIfFalse  r33, L2
  Index        r34, r30, r32
  Const        r36, "l_orderkey"
  Index        r37, r34, r36
L7:
  Const        r38, "o_orderkey"
  Index        r39, r23, r38
  Equal        r40, r37, r39
  JumpIfFalse  r40, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r41, r1
  Len          r42, r41
  Const        r43, 0
  Less         r44, r43, r42
  JumpIfFalse  r44, L3
  Index        r45, r41, r43
  Const        r47, "n_nationkey"
  Index        r48, r45, r47
  Const        r49, "c_nationkey"
L6:
  Index        r50, r17, r49
  Equal        r51, r48, r50
  JumpIfFalse  r51, L4
  // from c in customer
  Const        r52, "c"
  Move         r53, r17
  Const        r54, "o"
  Move         r55, r23
  Const        r56, "l"
  Move         r57, r34
  Const        r58, "n"
  Move         r59, r45
  MakeMap      r60, 4, r52
  // c_name: c.c_name,
  Const        r61, "c_name"
  Const        r62, "c_name"
  Index        r63, r17, r62
  // c_custkey: c.c_custkey,
  Const        r64, "c_custkey"
  Const        r65, "c_custkey"
  Index        r66, r17, r65
  // c_acctbal: c.c_acctbal,
  Const        r67, "c_acctbal"
  Const        r68, "c_acctbal"
  Index        r69, r17, r68
  // c_address: c.c_address,
  Const        r70, "c_address"
  Const        r71, "c_address"
  Index        r72, r17, r71
  // c_phone: c.c_phone,
  Const        r73, "c_phone"
  Const        r74, "c_phone"
  Index        r75, r17, r74
  // c_comment: c.c_comment,
  Const        r76, "c_comment"
  Const        r77, "c_comment"
  Index        r78, r17, r77
  // c_name: c.c_name,
  Move         r82, r61
  Move         r83, r63
  // c_custkey: c.c_custkey,
  Move         r84, r64
  Move         r85, r66
  // c_acctbal: c.c_acctbal,
  Move         r86, r67
  Move         r87, r69
  // c_address: c.c_address,
  Move         r88, r70
  Move         r89, r72
  // c_phone: c.c_phone,
  Move         r90, r73
  Move         r91, r75
  // c_comment: c.c_comment,
  Move         r92, r76
  Move         r93, r78
  // group by {
  MakeMap      r96, 6, r82
  Str          r97, r96
  In           r98, r97, r11
  JumpIfTrue   r98, L5
  // from c in customer
  Const        r100, "__group__"
  Const        r101, true
  Const        r102, "key"
  // group by {
  Move         r103, r96
  // from c in customer
  MakeMap      r106, 2, r100
  SetIndex     r11, r97, r106
  Append       r107, r12, r106
  Const        r108, "items"
  Index        r109, r11, r97
  Index        r110, r109, r108
  Append       r111, r110, r60
  SetIndex     r109, r108, r111
  // join n in nation on n.n_nationkey == c.c_nationkey
  Jump         L6
L5:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Jump         L7
  // join o in orders on o.o_custkey == c.c_custkey
  Jump         L8
  // from c in customer
  Jump         L9
  Const        r120, 0
  Len          r121, r107
L4:
  Less         r122, r120, r121
L3:
  JumpIfFalse  r122, L10
L2:
  Index        r123, r107, r120
L1:
  // having sum(from x in g select x.l.l_quantity) > threshold
  IterPrep     r126, r123
  Len          r127, r126
  Const        r128, 0
L0:
  Less         r129, r128, r127
  JumpIfFalse  r129, L11
L12:
  Jump         L12
  Const        r139, 0
  Less         r140, r9, r139
  JumpIfFalse  r140, L10
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  IterPrep     r153, r123
  Len          r154, r153
L11:
  Const        r155, 0
  Less         r156, r155, r154
  JumpIfFalse  r156, L13
L14:
  Jump         L14
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  IterPrep     r216, r123
  Len          r217, r216
  Const        r218, 0
  Less         r219, r218, r217
L13:
  JumpIfFalse  r219, L15
L16:
  Jump         L16
  // from c in customer
  Jump         L12
  // order by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r243, r10
  // json(result)
  JSON         r243
  // expect result == [
  Const        r245, [{"c_acctbal": 1000, "c_address": "123 Market St", "c_comment": "Premium client", "c_custkey": 1, "c_name": "Alice", "c_phone": "123-456", "n_name": "GERMANY", "revenue": 1700}]
  Equal        r246, r243, r245
  Expect       r246
  Return       r0
