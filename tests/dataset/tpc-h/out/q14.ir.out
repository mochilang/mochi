func main (regs=146)
L10:
  // let part = [
  Const        r0, [{"p_partkey": 1, "p_type": "PROMO LUXURY"}, {"p_partkey": 2, "p_type": "STANDARD BRASS"}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_partkey": 1, "l_shipdate": "1995-09-05"}, {"l_discount": 0, "l_extendedprice": 800, "l_partkey": 2, "l_shipdate": "1995-09-20"}, {"l_discount": 0.2, "l_extendedprice": 500, "l_partkey": 1, "l_shipdate": "1995-10-02"}]
  // let start_date = "1995-09-01"
  Const        r2, "1995-09-01"
  // let end_date = "1995-10-01"
  Const        r3, "1995-10-01"
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r7, r0
  Len          r8, r7
  // from l in lineitem
  Const        r9, 0
  EqualInt     r10, r6, r9
  JumpIfTrue   r10, L0
  EqualInt     r11, r8, r9
  JumpIfTrue   r11, L0
  LessEq       r12, r8, r6
  JumpIfFalse  r12, L1
  // join p in part on p.p_partkey == l.l_partkey
  MakeMap      r13, 0, r0
  Const        r14, 0
L4:
  Less         r15, r14, r8
  JumpIfFalse  r15, L2
  Index        r16, r7, r14
  Move         r17, r16
  Const        r18, "p_partkey"
  Index        r19, r17, r18
  Index        r20, r13, r19
  Const        r21, nil
  NotEqual     r22, r20, r21
  JumpIfTrue   r22, L3
  MakeList     r23, 0, r0
  SetIndex     r13, r19, r23
L3:
  Index        r20, r13, r19
  Append       r24, r20, r16
  SetIndex     r13, r19, r24
  Const        r25, 1
  Add          r14, r14, r25
  Jump         L4
L2:
  // from l in lineitem
  Const        r27, 0
L9:
  Less         r28, r27, r6
  JumpIfFalse  r28, L0
  Index        r30, r5, r27
  // join p in part on p.p_partkey == l.l_partkey
  Const        r31, "l_partkey"
  Index        r32, r30, r31
  // from l in lineitem
  Index        r33, r13, r32
  Const        r34, nil
  NotEqual     r35, r33, r34
  JumpIfFalse  r35, L5
  Len          r36, r33
  Const        r37, 0
L8:
  Less         r38, r37, r36
  JumpIfFalse  r38, L5
  Index        r17, r33, r37
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r40, "l_shipdate"
  Index        r41, r30, r40
  LessEq       r42, r2, r41
  Index        r43, r30, r40
  Less         r44, r43, r3
  Move         r45, r42
  JumpIfFalse  r45, L6
  Move         r45, r44
L6:
  JumpIfFalse  r45, L7
  // is_promo: "PROMO" in p.p_type,
  Const        r46, "is_promo"
  Const        r47, "PROMO"
  Const        r48, "p_type"
  Index        r49, r17, r48
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r54, 1
  // select {
  MakeMap      r61, 2, r46
  // from l in lineitem
  Append       r4, r4, r61
L7:
  Const        r63, 1
  Add          r37, r37, r63
  Jump         L8
L5:
  Const        r65, 1
  Add          r27, r27, r65
  Jump         L9
L0:
  Jump         L10
L1:
  MakeMap      r67, 0, r0
  Const        r68, 0
L13:
  Less         r69, r68, r6
  JumpIfFalse  r69, L11
  Index        r70, r5, r68
  // join p in part on p.p_partkey == l.l_partkey
  Index        r71, r70, r31
  // from l in lineitem
  Index        r72, r67, r71
  Const        r73, nil
  NotEqual     r74, r72, r73
  JumpIfTrue   r74, L12
  MakeList     r75, 0, r0
  SetIndex     r67, r71, r75
L12:
  Index        r72, r67, r71
  Append       r76, r72, r70
  SetIndex     r67, r71, r76
  Const        r77, 1
  Add          r68, r68, r77
  Jump         L13
L11:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r79, 0
L19:
  Less         r80, r79, r8
  JumpIfFalse  r80, L14
  Index        r17, r7, r79
  Index        r82, r17, r18
  Index        r83, r67, r82
  Const        r84, nil
  NotEqual     r85, r83, r84
  JumpIfFalse  r85, L15
  Len          r86, r83
  Const        r87, 0
L18:
  Less         r88, r87, r86
  JumpIfFalse  r88, L15
  Index        r30, r83, r87
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r90, r30, r40
  LessEq       r91, r2, r90
  Index        r92, r30, r40
  Less         r93, r92, r3
  Move         r94, r91
  JumpIfFalse  r94, L16
  Move         r94, r93
L16:
  JumpIfFalse  r94, L17
  // is_promo: "PROMO" in p.p_type,
  Const        r95, "is_promo"
  Index        r96, r17, r48
  In           r97, r47, r96
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r98, "revenue"
  // select {
  MakeMap      r105, 2, r95
  // from l in lineitem
  Append       r4, r4, r105
L17:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r107, 1
  Add          r87, r87, r107
  Jump         L18
L15:
  Const        r109, 1
  Add          r79, r79, r109
  Jump         L19
L14:
  // let promo_sum = sum(from x in filtered where x.is_promo select x.revenue)
  Const        r111, []
  Const        r112, "is_promo"
  Const        r113, "revenue"
  IterPrep     r114, r4
  Len          r115, r114
  Const        r117, 0
  Move         r116, r117
L22:
  LessInt      r118, r116, r115
  JumpIfFalse  r118, L20
  Index        r120, r114, r116
  Index        r121, r120, r112
  JumpIfFalse  r121, L21
  Index        r122, r120, r113
  Append       r111, r111, r122
L21:
  AddInt       r116, r116, r54
  Jump         L22
L20:
  Sum          r124, r111
  // let total_sum = sum(from x in filtered select x.revenue)
  Const        r125, []
  IterPrep     r126, r4
  Len          r127, r126
  Move         r128, r117
L24:
  LessInt      r129, r128, r127
  JumpIfFalse  r129, L23
  Index        r120, r126, r128
  Index        r131, r120, r113
  Append       r125, r125, r131
  AddInt       r128, r128, r54
  Jump         L24
L23:
  Sum          r133, r125
  // let result = 100.0 * promo_sum / total_sum
  Const        r134, 100
  MulFloat     r135, r134, r124
  DivFloat     r136, r135, r133
  // json(result)
  JSON         r136
  // let expected = 100.0 * promo / total  // â‰ˆ 52.94
  Const        r144, 52.94117647058823
  // expect result == expected
  EqualFloat   r145, r136, r144
  Expect       r145
  Return       r0
