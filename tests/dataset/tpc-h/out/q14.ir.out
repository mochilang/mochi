func main (regs=85)
  // let part = [
  Const        r0, [{"p_partkey": 1, "p_type": "PROMO LUXURY"}, {"p_partkey": 2, "p_type": "STANDARD BRASS"}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_partkey": 1, "l_shipdate": "1995-09-05"}, {"l_discount": 0, "l_extendedprice": 800, "l_partkey": 2, "l_shipdate": "1995-09-20"}, {"l_discount": 0.2, "l_extendedprice": 500, "l_partkey": 1, "l_shipdate": "1995-10-02"}]
  // let start_date = "1995-09-01"
  Const        r2, "1995-09-01"
  // let end_date = "1995-10-01"
  Const        r3, "1995-10-01"
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, "p_partkey"
  Const        r10, "l_partkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r11, "l_shipdate"
  // is_promo: "PROMO" in p.p_type,
  Const        r12, "is_promo"
  Const        r13, "p_type"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r14, "revenue"
  Const        r15, "l_extendedprice"
  Const        r16, "l_discount"
  // from l in lineitem
  Const        r17, 0
L5:
  LessInt      r18, r17, r6
  JumpIfFalse  r18, L0
  Index        r19, r5, r17
  Move         r20, r19
  // join p in part on p.p_partkey == l.l_partkey
  Const        r21, 0
L4:
  LessInt      r22, r21, r8
  JumpIfFalse  r22, L1
  Index        r23, r7, r21
  Move         r24, r23
  Index        r25, r24, r9
  Index        r26, r20, r10
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r28, r20, r11
  LessEq       r29, r2, r28
  Index        r30, r20, r11
  Less         r31, r30, r3
  Move         r32, r29
  JumpIfFalse  r32, L3
  Move         r32, r31
L3:
  JumpIfFalse  r32, L2
  // is_promo: "PROMO" in p.p_type,
  Const        r33, "is_promo"
  Const        r34, "PROMO"
  Index        r35, r24, r13
  In           r36, r34, r35
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r37, "revenue"
  Index        r38, r20, r15
  Const        r39, 1
  Index        r40, r20, r16
  Sub          r41, r39, r40
  Mul          r42, r38, r41
  // is_promo: "PROMO" in p.p_type,
  Move         r43, r33
  Move         r44, r36
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r45, r37
  Move         r46, r42
  // select {
  MakeMap      r47, 2, r43
  // from l in lineitem
  Append       r48, r4, r47
  Move         r4, r48
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r21, r21, r39
  Jump         L4
L1:
  // from l in lineitem
  AddInt       r17, r17, r39
  Jump         L5
L0:
  // let promo_sum = sum(from x in filtered where x.is_promo select x.revenue)
  Const        r49, []
  IterPrep     r50, r4
  Len          r51, r50
  Const        r53, 0
  Move         r52, r53
L8:
  LessInt      r54, r52, r51
  JumpIfFalse  r54, L6
  Index        r55, r50, r52
  Move         r56, r55
  Index        r57, r56, r12
  JumpIfFalse  r57, L7
  Index        r58, r56, r14
  Append       r59, r49, r58
  Move         r49, r59
L7:
  AddInt       r52, r52, r39
  Jump         L8
L6:
  Sum          r60, r49
  // let total_sum = sum(from x in filtered select x.revenue)
  Const        r61, []
  IterPrep     r62, r4
  Len          r63, r62
  Move         r64, r53
L10:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L9
  Index        r66, r62, r64
  Move         r56, r66
  Index        r67, r56, r14
  Append       r68, r61, r67
  Move         r61, r68
  AddInt       r64, r64, r39
  Jump         L10
L9:
  Sum          r69, r61
  // let result = 100.0 * promo_sum / total_sum
  Const        r70, 100
  MulFloat     r71, r70, r60
  DivFloat     r72, r71, r69
  // json(result)
  JSON         r72
  // let promo = 1000.0 * 0.9       // = 900
  Const        r73, 1000
  Const        r74, 0.9
  Const        r75, 900
  // let total = 900 + 800.0        // = 1700
  Const        r76, 900
  Const        r77, 800
  Const        r78, 1700
  // let expected = 100.0 * promo / total  // â‰ˆ 52.94
  Const        r79, 900
  Const        r80, 90000
  Const        r81, 1700
  Const        r82, 52.94117647058823
  // expect result == expected
  Const        r83, 52.94117647058823
  EqualFloat   r84, r72, r83
  Expect       r84
  Return       r0
