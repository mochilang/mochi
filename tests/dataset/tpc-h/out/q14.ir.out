func main (regs=103)
  // let part = [
  Const        r0, [{"p_partkey": 1, "p_type": "PROMO LUXURY"}, {"p_partkey": 2, "p_type": "STANDARD BRASS"}]
  Move         r1, r0
  // let lineitem = [
  Const        r2, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_partkey": 1, "l_shipdate": "1995-09-05"}, {"l_discount": 0, "l_extendedprice": 800, "l_partkey": 2, "l_shipdate": "1995-09-20"}, {"l_discount": 0.2, "l_extendedprice": 500, "l_partkey": 1, "l_shipdate": "1995-10-02"}]
  Move         r3, r2
  // let start_date = "1995-09-01"
  Const        r4, "1995-09-01"
  Move         r5, r4
  // let end_date = "1995-10-01"
  Const        r6, "1995-10-01"
  Move         r7, r6
  // from l in lineitem
  Const        r8, []
  IterPrep     r9, r3
  Len          r10, r9
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r11, r1
  Len          r12, r11
  // from l in lineitem
  Const        r13, 0
L5:
  Less         r14, r13, r10
  JumpIfFalse  r14, L0
  Index        r15, r9, r13
  Move         r16, r15
  // join p in part on p.p_partkey == l.l_partkey
  Const        r17, 0
L4:
  Less         r18, r17, r12
  JumpIfFalse  r18, L1
  Index        r19, r11, r17
  Move         r20, r19
  Const        r21, "p_partkey"
  Index        r22, r20, r21
  Const        r23, "l_partkey"
  Index        r24, r16, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r26, "l_shipdate"
  Index        r27, r16, r26
  LessEq       r28, r5, r27
  Move         r29, r28
  JumpIfFalse  r29, L3
  Const        r30, "l_shipdate"
  Index        r31, r16, r30
  Move         r29, r31
L3:
  Less         r32, r29, r7
  JumpIfFalse  r32, L2
  // is_promo: "PROMO" in p.p_type,
  Const        r33, "is_promo"
  Const        r34, "PROMO"
  Const        r35, "p_type"
  Index        r36, r20, r35
  In           r37, r34, r36
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r38, "revenue"
  Const        r39, "l_extendedprice"
  Index        r40, r16, r39
  Const        r41, 1
  Const        r42, "l_discount"
  Index        r43, r16, r42
  Sub          r44, r41, r43
  Mul          r45, r40, r44
  // is_promo: "PROMO" in p.p_type,
  Move         r46, r33
  Move         r47, r37
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r48, r38
  Move         r49, r45
  // select {
  MakeMap      r50, 2, r46
  // from l in lineitem
  Append       r51, r8, r50
  Move         r8, r51
L2:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r52, 1
  Add          r53, r17, r52
  Move         r17, r53
  Jump         L4
L1:
  // from l in lineitem
  Const        r54, 1
  Add          r55, r13, r54
  Move         r13, r55
  Jump         L5
L0:
  // let filtered =
  Move         r56, r8
  // let promo_sum = sum(from x in filtered where x.is_promo select x.revenue)
  Const        r57, []
  IterPrep     r58, r56
  Len          r59, r58
  Const        r60, 0
L8:
  Less         r61, r60, r59
  JumpIfFalse  r61, L6
  Index        r62, r58, r60
  Move         r63, r62
  Const        r64, "is_promo"
  Index        r65, r63, r64
  JumpIfFalse  r65, L7
  Const        r66, "revenue"
  Index        r67, r63, r66
  Append       r68, r57, r67
  Move         r57, r68
L7:
  Const        r69, 1
  Add          r70, r60, r69
  Move         r60, r70
  Jump         L8
L6:
  Sum          r71, r57
  Move         r72, r71
  // let total_sum = sum(from x in filtered select x.revenue)
  Const        r73, []
  IterPrep     r74, r56
  Len          r75, r74
  Const        r76, 0
L10:
  Less         r77, r76, r75
  JumpIfFalse  r77, L9
  Index        r78, r74, r76
  Move         r63, r78
  Const        r79, "revenue"
  Index        r80, r63, r79
  Append       r81, r73, r80
  Move         r73, r81
  Const        r82, 1
  Add          r83, r76, r82
  Move         r76, r83
  Jump         L10
L9:
  Sum          r84, r73
  Move         r85, r84
  // let result = 100.0 * promo_sum / total_sum
  Const        r86, 100
  MulFloat     r87, r86, r72
  DivFloat     r88, r87, r85
  Move         r89, r88
  // json(result)
  JSON         r89
  // let promo = 1000.0 * 0.9       // = 900
  Const        r90, 1000
  Const        r91, 0.9
  MulFloat     r92, r90, r91
  Move         r93, r92
  // let total = 900 + 800.0        // = 1700
  Const        r94, 900
  Const        r95, 800
  AddFloat     r96, r94, r95
  Move         r97, r96
  // let expected = 100.0 * promo / total  // â‰ˆ 52.94
  Const        r98, 100
  MulFloat     r99, r98, r93
  DivFloat     r100, r99, r97
  Move         r101, r100
  // expect result == expected
  EqualFloat   r102, r89, r101
  Expect       r102
  Return       r0
