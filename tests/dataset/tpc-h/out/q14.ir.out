func main (regs=84)
  // let part = [
  Const        r0, [{"p_partkey": 1, "p_type": "PROMO LUXURY"}, {"p_partkey": 2, "p_type": "STANDARD BRASS"}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_partkey": 1, "l_shipdate": "1995-09-05"}, {"l_discount": 0, "l_extendedprice": 800, "l_partkey": 2, "l_shipdate": "1995-09-20"}, {"l_discount": 0.2, "l_extendedprice": 500, "l_partkey": 1, "l_shipdate": "1995-10-02"}]
  // let start_date = "1995-09-01"
  Const        r2, "1995-09-01"
  // let end_date = "1995-10-01"
  Const        r3, "1995-10-01"
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, "p_partkey"
  Const        r10, "l_partkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r11, "l_shipdate"
  // is_promo: "PROMO" in p.p_type,
  Const        r12, "is_promo"
  Const        r13, "p_type"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r14, "revenue"
  Const        r15, "l_extendedprice"
  Const        r16, "l_discount"
  // from l in lineitem
  Const        r17, 0
L5:
  LessInt      r18, r17, r6
  JumpIfFalse  r18, L0
  Index        r20, r5, r17
  // join p in part on p.p_partkey == l.l_partkey
  Const        r21, 0
L4:
  LessInt      r22, r21, r8
  JumpIfFalse  r22, L1
  Index        r24, r7, r21
  Index        r25, r24, r9
  Index        r26, r20, r10
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r28, r20, r11
  LessEq       r29, r2, r28
  Index        r30, r20, r11
  Less         r31, r30, r3
  JumpIfFalse  r29, L3
  Move         r29, r31
L3:
  JumpIfFalse  r29, L2
  // is_promo: "PROMO" in p.p_type,
  Const        r32, "is_promo"
  Const        r33, "PROMO"
  Index        r34, r24, r13
  In           r35, r33, r34
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r36, "revenue"
  Index        r37, r20, r15
  Const        r38, 1
  Index        r39, r20, r16
  Sub          r40, r38, r39
  Mul          r41, r37, r40
  // is_promo: "PROMO" in p.p_type,
  Move         r42, r32
  Move         r43, r35
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r44, r36
  Move         r45, r41
  // select {
  MakeMap      r46, 2, r42
  // from l in lineitem
  Append       r4, r4, r46
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r21, r21, r38
  Jump         L4
L1:
  // from l in lineitem
  AddInt       r17, r17, r38
  Jump         L5
L0:
  // let promo_sum = sum(from x in filtered where x.is_promo select x.revenue)
  Const        r48, []
  IterPrep     r49, r4
  Len          r50, r49
  Const        r52, 0
  Move         r51, r52
L8:
  LessInt      r53, r51, r50
  JumpIfFalse  r53, L6
  Index        r55, r49, r51
  Index        r56, r55, r12
  JumpIfFalse  r56, L7
  Index        r57, r55, r14
  Append       r48, r48, r57
L7:
  AddInt       r51, r51, r38
  Jump         L8
L6:
  Sum          r59, r48
  // let total_sum = sum(from x in filtered select x.revenue)
  Const        r60, []
  IterPrep     r61, r4
  Len          r62, r61
  Move         r63, r52
L10:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L9
  Index        r55, r61, r63
  Index        r66, r55, r14
  Append       r60, r60, r66
  AddInt       r63, r63, r38
  Jump         L10
L9:
  Sum          r68, r60
  // let result = 100.0 * promo_sum / total_sum
  Const        r69, 100
  MulFloat     r70, r69, r59
  DivFloat     r71, r70, r68
  // json(result)
  JSON         r71
  // let promo = 1000.0 * 0.9       // = 900
  Const        r72, 1000
  Const        r73, 0.9
  Const        r74, 900
  // let total = 900 + 800.0        // = 1700
  Const        r75, 900
  Const        r76, 800
  Const        r77, 1700
  // let expected = 100.0 * promo / total  // â‰ˆ 52.94
  Const        r78, 900
  Const        r79, 90000
  Const        r80, 1700
  Const        r81, 52.94117647058823
  // expect result == expected
  Const        r82, 52.94117647058823
  EqualFloat   r83, r71, r82
  Expect       r83
  Return       r0
