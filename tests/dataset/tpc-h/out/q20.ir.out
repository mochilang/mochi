func main (regs=186)
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
  // let partsupp = [
  Const        r3, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // let prefix = "forest"
  Const        r5, "forest"
  // from l in lineitem
  Const        r6, []
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r7, "partkey"
  Const        r8, "l_partkey"
  Const        r9, "suppkey"
  Const        r10, "l_suppkey"
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r11, "l_shipdate"
  // partkey: g.key.partkey,
  Const        r12, "key"
  // qty: sum(from x in g select x.l_quantity)
  Const        r13, "qty"
  Const        r14, "l_quantity"
  // from l in lineitem
  IterPrep     r15, r4
  Len          r16, r15
  Const        r17, 0
  MakeMap      r18, 0, r0
  Const        r20, []
  Move         r19, r20
L4:
  LessInt      r21, r17, r16
  JumpIfFalse  r21, L0
  Index        r22, r15, r17
  Move         r23, r22
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Index        r24, r23, r11
  Const        r25, "1994-01-01"
  LessEq       r26, r25, r24
  Index        r27, r23, r11
  Const        r28, "1995-01-01"
  Less         r29, r27, r28
  Move         r30, r26
  JumpIfFalse  r30, L1
  Move         r30, r29
L1:
  JumpIfFalse  r30, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r31, "partkey"
  Index        r32, r23, r8
  Const        r33, "suppkey"
  Index        r34, r23, r10
  Move         r35, r31
  Move         r36, r32
  Move         r37, r33
  Move         r38, r34
  MakeMap      r39, 2, r35
  Str          r40, r39
  In           r41, r40, r18
  JumpIfTrue   r41, L3
  // from l in lineitem
  Const        r42, []
  Const        r43, "__group__"
  Const        r44, true
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r45, r39
  // from l in lineitem
  Const        r46, "items"
  Move         r47, r42
  Const        r48, "count"
  Const        r49, 0
  Move         r50, r43
  Move         r51, r44
  Move         r52, r12
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  Move         r57, r49
  MakeMap      r58, 4, r50
  SetIndex     r18, r40, r58
  Append       r59, r19, r58
  Move         r19, r59
L3:
  Index        r60, r18, r40
  Index        r61, r60, r46
  Append       r62, r61, r22
  SetIndex     r60, r46, r62
  Index        r63, r60, r48
  Const        r64, 1
  AddInt       r65, r63, r64
  SetIndex     r60, r48, r65
L2:
  AddInt       r17, r17, r64
  Jump         L4
L0:
  Move         r66, r49
  Len          r67, r19
L8:
  LessInt      r68, r66, r67
  JumpIfFalse  r68, L5
  Index        r69, r19, r66
  Move         r70, r69
  // partkey: g.key.partkey,
  Const        r71, "partkey"
  Index        r72, r70, r12
  Index        r73, r72, r7
  // suppkey: g.key.suppkey,
  Const        r74, "suppkey"
  Index        r75, r70, r12
  Index        r76, r75, r9
  // qty: sum(from x in g select x.l_quantity)
  Const        r77, "qty"
  Const        r78, []
  IterPrep     r79, r70
  Len          r80, r79
  Move         r81, r49
L7:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r83, r79, r81
  Move         r84, r83
  Index        r85, r84, r14
  Append       r86, r78, r85
  Move         r78, r86
  AddInt       r81, r81, r64
  Jump         L7
L6:
  Sum          r87, r78
  // partkey: g.key.partkey,
  Move         r88, r71
  Move         r89, r73
  // suppkey: g.key.suppkey,
  Move         r90, r74
  Move         r91, r76
  // qty: sum(from x in g select x.l_quantity)
  Move         r92, r77
  Move         r93, r87
  // select {
  MakeMap      r94, 3, r88
  // from l in lineitem
  Append       r95, r6, r94
  Move         r6, r95
  AddInt       r66, r66, r64
  Jump         L8
L5:
  // from ps in partsupp
  Const        r96, []
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r97, "p_name"
  Const        r98, "ps_availqty"
  // select ps.ps_suppkey
  Const        r99, "ps_suppkey"
  // from ps in partsupp
  IterPrep     r100, r3
  Len          r101, r100
  Move         r102, r49
L17:
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L9
  Index        r104, r100, r102
  Move         r105, r104
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r106, r2
  Len          r107, r106
  Const        r108, "ps_partkey"
  Const        r109, "p_partkey"
  Move         r110, r49
L16:
  LessInt      r111, r110, r107
  JumpIfFalse  r111, L10
  Index        r112, r106, r110
  Move         r113, r112
  Index        r114, r105, r108
  Index        r115, r113, r109
  Equal        r116, r114, r115
  JumpIfFalse  r116, L11
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r117, r6
  Len          r118, r117
  Move         r119, r49
L15:
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L11
  Index        r121, r117, r119
  Move         r122, r121
  Index        r123, r105, r108
  Index        r124, r122, r7
  Equal        r125, r123, r124
  Index        r126, r105, r99
  Index        r127, r122, r9
  Equal        r128, r126, r127
  Move         r129, r125
  JumpIfFalse  r129, L12
  Move         r129, r128
L12:
  JumpIfFalse  r129, L13
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Index        r130, r113, r97
  Const        r131, 6
  Slice        r132, r130, r49, r131
  Index        r133, r105, r98
  Const        r134, 0.5
  Index        r135, r122, r13
  MulFloat     r136, r134, r135
  LessFloat    r137, r136, r133
  Equal        r138, r132, r5
  Move         r139, r138
  JumpIfFalse  r139, L14
  Move         r139, r137
L14:
  JumpIfFalse  r139, L13
  // select ps.ps_suppkey
  Index        r140, r105, r99
  // from ps in partsupp
  Append       r141, r96, r140
  Move         r96, r141
L13:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Add          r119, r119, r64
  Jump         L15
L11:
  // join p in part on ps.ps_partkey == p.p_partkey
  Add          r110, r110, r64
  Jump         L16
L10:
  // from ps in partsupp
  AddInt       r102, r102, r64
  Jump         L17
L9:
  // from s in supplier
  Const        r142, []
  IterPrep     r143, r1
  Len          r144, r143
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r145, r0
  Len          r146, r145
  Const        r147, "n_nationkey"
  Const        r148, "s_nationkey"
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r149, "s_suppkey"
  Const        r150, "n_name"
  // s_name: s.s_name,
  Const        r151, "s_name"
  // s_address: s.s_address
  Const        r152, "s_address"
  // from s in supplier
  Const        r153, 0
L23:
  LessInt      r154, r153, r144
  JumpIfFalse  r154, L18
  Index        r155, r143, r153
  Move         r122, r155
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r156, 0
L22:
  LessInt      r157, r156, r146
  JumpIfFalse  r157, L19
  Index        r158, r145, r156
  Move         r159, r158
  Index        r160, r159, r147
  Index        r161, r122, r148
  Equal        r162, r160, r161
  JumpIfFalse  r162, L20
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Index        r163, r122, r149
  In           r164, r163, r96
  Index        r165, r159, r150
  Const        r166, "CANADA"
  Equal        r167, r165, r166
  Move         r168, r164
  JumpIfFalse  r168, L21
  Move         r168, r167
L21:
  JumpIfFalse  r168, L20
  // s_name: s.s_name,
  Const        r169, "s_name"
  Index        r170, r122, r151
  // s_address: s.s_address
  Const        r171, "s_address"
  Index        r172, r122, r152
  // s_name: s.s_name,
  Move         r173, r169
  Move         r174, r170
  // s_address: s.s_address
  Move         r175, r171
  Move         r176, r172
  // select {
  MakeMap      r177, 2, r173
  // order by s.s_name
  Index        r178, r122, r151
  Move         r179, r178
  // from s in supplier
  Move         r180, r177
  MakeList     r181, 2, r179
  Append       r182, r142, r181
  Move         r142, r182
L20:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r156, r156, r64
  Jump         L22
L19:
  // from s in supplier
  AddInt       r153, r153, r64
  Jump         L23
L18:
  // order by s.s_name
  Sort         r183, r142
  // from s in supplier
  Move         r142, r183
  // json(result)
  JSON         r142
  // expect result == [
  Const        r184, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r185, r142, r184
  Expect       r185
  Return       r0
