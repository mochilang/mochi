func main (regs=311)
L18:
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
  // let partsupp = [
  Const        r3, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // let prefix = "forest"
  Const        r5, "forest"
  // from l in lineitem
  Const        r6, []
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r7, "partkey"
  Const        r8, "l_partkey"
  Const        r9, "suppkey"
  Const        r10, "l_suppkey"
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r11, "l_shipdate"
  Const        r12, "l_shipdate"
  // partkey: g.key.partkey,
  Const        r13, "partkey"
  Const        r14, "key"
  Const        r15, "partkey"
  // suppkey: g.key.suppkey,
  Const        r16, "suppkey"
  Const        r17, "key"
  Const        r18, "suppkey"
  // qty: sum(from x in g select x.l_quantity)
  Const        r19, "qty"
  Const        r20, "l_quantity"
  // from l in lineitem
  IterPrep     r21, r4
  Len          r22, r21
  Const        r23, 0
  MakeMap      r24, 0, r0
  Const        r25, []
L4:
  LessInt      r27, r23, r22
  JumpIfFalse  r27, L0
  Index        r28, r21, r23
  Move         r29, r28
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r30, "l_shipdate"
  Index        r31, r29, r30
  Const        r32, "1994-01-01"
  LessEq       r33, r32, r31
  Const        r34, "l_shipdate"
  Index        r35, r29, r34
  Const        r36, "1995-01-01"
  Less         r37, r35, r36
  Move         r38, r33
  JumpIfFalse  r38, L1
  Move         r38, r37
L1:
  JumpIfFalse  r38, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r39, "partkey"
  Const        r40, "l_partkey"
  Index        r41, r29, r40
  Const        r42, "suppkey"
  Const        r43, "l_suppkey"
  Index        r44, r29, r43
  Move         r45, r39
  Move         r46, r41
  Move         r47, r42
  Move         r48, r44
  MakeMap      r49, 2, r45
  Str          r50, r49
  In           r51, r50, r24
  JumpIfTrue   r51, L3
  // from l in lineitem
  Const        r52, []
  Const        r53, "__group__"
  Const        r54, true
  Const        r55, "key"
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r56, r49
  // from l in lineitem
  Const        r57, "items"
  Move         r58, r52
  Const        r59, "count"
  Const        r60, 0
  Move         r61, r53
  Move         r62, r54
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  MakeMap      r69, 4, r61
  SetIndex     r24, r50, r69
  Append       r25, r25, r69
L3:
  Const        r71, "items"
  Index        r72, r24, r50
  Index        r73, r72, r71
  Append       r74, r73, r28
  SetIndex     r72, r71, r74
  Const        r75, "count"
  Index        r76, r72, r75
  Const        r77, 1
  AddInt       r78, r76, r77
  SetIndex     r72, r75, r78
L2:
  Const        r79, 1
  AddInt       r23, r23, r79
  Jump         L4
L0:
  Const        r80, 0
  Len          r82, r25
L8:
  LessInt      r83, r80, r82
  JumpIfFalse  r83, L5
  Index        r85, r25, r80
  // partkey: g.key.partkey,
  Const        r86, "partkey"
  Const        r87, "key"
  Index        r88, r85, r87
  Const        r89, "partkey"
  Index        r90, r88, r89
  // suppkey: g.key.suppkey,
  Const        r91, "suppkey"
  Const        r92, "key"
  Index        r93, r85, r92
  Const        r94, "suppkey"
  Index        r95, r93, r94
  // qty: sum(from x in g select x.l_quantity)
  Const        r96, "qty"
  Const        r97, []
  Const        r98, "l_quantity"
  IterPrep     r99, r85
  Len          r100, r99
  Const        r101, 0
L7:
  LessInt      r103, r101, r100
  JumpIfFalse  r103, L6
  Index        r105, r99, r101
  Const        r106, "l_quantity"
  Index        r107, r105, r106
  Append       r97, r97, r107
  Const        r109, 1
  AddInt       r101, r101, r109
  Jump         L7
L6:
  Sum          r110, r97
  // partkey: g.key.partkey,
  Move         r111, r86
  Move         r112, r90
  // suppkey: g.key.suppkey,
  Move         r113, r91
  Move         r114, r95
  // qty: sum(from x in g select x.l_quantity)
  Move         r115, r96
  Move         r116, r110
  // select {
  MakeMap      r117, 3, r111
  // from l in lineitem
  Append       r6, r6, r117
  Const        r119, 1
  AddInt       r80, r80, r119
  Jump         L8
L5:
  // from ps in partsupp
  Const        r120, []
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r121, "p_name"
  Const        r122, "ps_availqty"
  Const        r123, "qty"
  // select ps.ps_suppkey
  Const        r124, "ps_suppkey"
  // from ps in partsupp
  IterPrep     r125, r3
  Len          r126, r125
  Const        r127, 0
L17:
  LessInt      r129, r127, r126
  JumpIfFalse  r129, L9
  Index        r131, r125, r127
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r132, r2
  Len          r133, r132
  Const        r134, "ps_partkey"
  Const        r135, "p_partkey"
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r136, "p_name"
  Const        r137, "ps_availqty"
  Const        r138, "qty"
  // select ps.ps_suppkey
  Const        r139, "ps_suppkey"
  // join p in part on ps.ps_partkey == p.p_partkey
  Const        r140, 0
L16:
  LessInt      r142, r140, r133
  JumpIfFalse  r142, L10
  Index        r144, r132, r140
  Const        r145, "ps_partkey"
  Index        r146, r131, r145
  Const        r147, "p_partkey"
  Index        r148, r144, r147
  Equal        r149, r146, r148
  JumpIfFalse  r149, L11
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r150, r6
  Len          r151, r150
  Const        r152, "ps_partkey"
  Const        r153, "partkey"
  Const        r154, "ps_suppkey"
  Const        r155, "suppkey"
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r156, "p_name"
  Const        r157, "ps_availqty"
  Const        r158, "qty"
  // select ps.ps_suppkey
  Const        r159, "ps_suppkey"
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Const        r160, 0
L15:
  LessInt      r162, r160, r151
  JumpIfFalse  r162, L11
  Index        r164, r150, r160
  Const        r165, "ps_partkey"
  Index        r166, r131, r165
  Const        r167, "partkey"
  Index        r168, r164, r167
  Equal        r169, r166, r168
  Const        r170, "ps_suppkey"
  Index        r171, r131, r170
  Const        r172, "suppkey"
  Index        r173, r164, r172
  Equal        r174, r171, r173
  Move         r175, r169
  JumpIfFalse  r175, L12
  Move         r175, r174
L12:
  JumpIfFalse  r175, L13
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r176, "p_name"
  Index        r177, r144, r176
  Const        r178, 0
  Const        r179, 6
  Slice        r180, r177, r178, r179
  Const        r181, "ps_availqty"
  Index        r182, r131, r181
  Const        r183, 0.5
  Const        r184, "qty"
  Index        r185, r164, r184
  MulFloat     r186, r183, r185
  LessFloat    r187, r186, r182
  Equal        r189, r180, r5
  JumpIfFalse  r189, L14
  Move         r189, r187
L14:
  JumpIfFalse  r189, L13
  // select ps.ps_suppkey
  Const        r190, "ps_suppkey"
  Index        r191, r131, r190
  // from ps in partsupp
  Append       r120, r120, r191
L13:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Const        r193, 1
  Add          r160, r160, r193
  Jump         L15
L11:
  // join p in part on ps.ps_partkey == p.p_partkey
  Const        r194, 1
  Add          r140, r140, r194
  Jump         L16
L10:
  // from ps in partsupp
  Const        r195, 1
  AddInt       r127, r127, r195
  Jump         L17
L9:
  // from s in supplier
  Const        r196, []
  IterPrep     r197, r1
  Len          r198, r197
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r199, r0
  Len          r200, r199
  // from s in supplier
  Const        r201, 0
  EqualInt     r202, r198, r201
  JumpIfTrue   r202, L18
  EqualInt     r203, r200, r201
  JumpIfTrue   r203, L18
  LessEq       r204, r200, r198
  JumpIfFalse  r204, L19
  // join n in nation on n.n_nationkey == s.s_nationkey
  MakeMap      r205, 0, r0
  Const        r206, 0
L22:
  LessInt      r207, r206, r200
  JumpIfFalse  r207, L20
  Index        r208, r199, r206
  Move         r209, r208
  Const        r210, "n_nationkey"
  Index        r211, r209, r210
  Index        r212, r205, r211
  Const        r213, nil
  NotEqual     r214, r212, r213
  JumpIfTrue   r214, L21
  MakeList     r215, 0, r0
  SetIndex     r205, r211, r215
L21:
  Index        r212, r205, r211
  Append       r216, r212, r208
  SetIndex     r205, r211, r216
  Const        r217, 1
  AddInt       r206, r206, r217
  Jump         L22
L20:
  // from s in supplier
  Const        r218, 0
L27:
  LessInt      r219, r218, r198
  JumpIfFalse  r219, L18
  Index        r164, r197, r218
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r221, "s_nationkey"
  Index        r222, r164, r221
  // from s in supplier
  Index        r223, r205, r222
  Const        r224, nil
  NotEqual     r225, r223, r224
  JumpIfFalse  r225, L23
  Len          r226, r223
  Const        r227, 0
L26:
  LessInt      r228, r227, r226
  JumpIfFalse  r228, L23
  Index        r209, r223, r227
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r230, "s_suppkey"
  Index        r231, r164, r230
  In           r232, r231, r120
  Const        r233, "n_name"
  Index        r234, r209, r233
  Const        r235, "CANADA"
  Equal        r236, r234, r235
  Move         r237, r232
  JumpIfFalse  r237, L24
  Move         r237, r236
L24:
  JumpIfFalse  r237, L25
  // s_name: s.s_name,
  Const        r238, "s_name"
  Const        r239, "s_name"
  Index        r240, r164, r239
  // s_address: s.s_address
  Const        r241, "s_address"
  Const        r242, "s_address"
  Index        r243, r164, r242
  // s_name: s.s_name,
  Move         r244, r238
  Move         r245, r240
  // s_address: s.s_address
  Move         r246, r241
  Move         r247, r243
  // select {
  MakeMap      r248, 2, r244
  // order by s.s_name
  Const        r249, "s_name"
  Index        r251, r164, r249
  // from s in supplier
  Move         r252, r248
  MakeList     r253, 2, r251
  Append       r196, r196, r253
L25:
  Const        r255, 1
  AddInt       r227, r227, r255
  Jump         L26
L23:
  Const        r256, 1
  AddInt       r218, r218, r256
  Jump         L27
L19:
  MakeMap      r257, 0, r0
  Const        r258, 0
L30:
  LessInt      r259, r258, r198
  JumpIfFalse  r259, L28
  Index        r260, r197, r258
  Move         r164, r260
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r261, "s_nationkey"
  Index        r262, r164, r261
  // from s in supplier
  Index        r263, r257, r262
  Const        r264, nil
  NotEqual     r265, r263, r264
  JumpIfTrue   r265, L29
  MakeList     r266, 0, r0
  SetIndex     r257, r262, r266
L29:
  Index        r263, r257, r262
  Append       r267, r263, r260
  SetIndex     r257, r262, r267
  Const        r268, 1
  AddInt       r258, r258, r268
  Jump         L30
L28:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r269, 0
L36:
  LessInt      r270, r269, r200
  JumpIfFalse  r270, L31
  Index        r209, r199, r269
  Const        r272, "n_nationkey"
  Index        r273, r209, r272
  Index        r274, r257, r273
  Const        r275, nil
  NotEqual     r276, r274, r275
  JumpIfFalse  r276, L32
  Len          r277, r274
  Const        r278, 0
L35:
  LessInt      r279, r278, r277
  JumpIfFalse  r279, L32
  Index        r164, r274, r278
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r281, "s_suppkey"
  Index        r282, r164, r281
  In           r283, r282, r120
  Const        r284, "n_name"
  Index        r285, r209, r284
  Const        r286, "CANADA"
  Equal        r287, r285, r286
  Move         r288, r283
  JumpIfFalse  r288, L33
  Move         r288, r287
L33:
  JumpIfFalse  r288, L34
  // s_name: s.s_name,
  Const        r289, "s_name"
  Const        r290, "s_name"
  Index        r291, r164, r290
  // s_address: s.s_address
  Const        r292, "s_address"
  Const        r293, "s_address"
  Index        r294, r164, r293
  // s_name: s.s_name,
  Move         r295, r289
  Move         r296, r291
  // s_address: s.s_address
  Move         r297, r292
  Move         r298, r294
  // select {
  MakeMap      r299, 2, r295
  // order by s.s_name
  Const        r300, "s_name"
  Index        r302, r164, r300
  // from s in supplier
  Move         r303, r299
  MakeList     r304, 2, r302
  Append       r196, r196, r304
L34:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r306, 1
  AddInt       r278, r278, r306
  Jump         L35
L32:
  Const        r307, 1
  AddInt       r269, r269, r307
  Jump         L36
L31:
  // order by s.s_name
  Sort         r196, r196
  // json(result)
  JSON         r196
  // expect result == [
  Const        r309, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r310, r196, r309
  Expect       r310
  Return       r0
