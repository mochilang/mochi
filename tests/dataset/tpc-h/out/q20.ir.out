func main (regs=28)
L13:
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
L16:
  // let partsupp = [
  Const        r3, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
L6:
  // let lineitem = [
  Const        r4, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // let prefix = "forest"
  Const        r5, "forest"
L11:
  // from l in lineitem
  Const        r6, []
L12:
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r7, "partkey"
L2:
  Const        r8, "l_partkey"
  Const        r9, "suppkey"
  Const        r10, "l_suppkey"
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r11, "l_shipdate"
L10:
  // partkey: g.key.partkey,
  Const        r12, "key"
  // qty: sum(from x in g select x.l_quantity)
  Const        r13, "qty"
  Const        r14, "l_quantity"
L18:
  // from l in lineitem
  IterPrep     r15, r4
L9:
  Len          r4, r15
  Const        r16, 0
L3:
  MakeMap      r17, 0, r0
L4:
  LessInt      r18, r16, r4
  JumpIfFalse  r18, L0
L1:
  Index        r4, r15, r16
L5:
  Move         r15, r4
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Index        r19, r15, r11
  Const        r20, "1994-01-01"
  LessEq       r21, r20, r19
L0:
  Index        r20, r15, r11
  Const        r11, "1995-01-01"
  Less         r19, r20, r11
  Move         r11, r21
  JumpIfFalse  r11, L1
  Move         r11, r19
  JumpIfFalse  r11, L0
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r11, r7
  Index        r19, r15, r8
  Move         r8, r9
  Index        r21, r15, r10
  Move         r15, r11
  Move         r11, r19
  Move         r19, r8
  Move         r8, r21
  MakeMap      r21, 2, r15
  Str          r8, r21
  In           r19, r8, r17
  JumpIfTrue   r19, L2
  // from l in lineitem
  Move         r19, r6
  Const        r11, "__group__"
  Const        r15, true
  Move         r10, r12
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r20, r21
  // from l in lineitem
  Const        r21, "items"
  Move         r22, r19
  Const        r19, "count"
  Move         r23, r16
  Move         r24, r11
  Move         r11, r15
  Move         r15, r10
  Move         r10, r20
  Move         r20, r21
  Move         r25, r22
  Move         r22, r19
  Move         r26, r23
  MakeMap      r23, 4, r24
  SetIndex     r17, r8, r23
  Move         r23, r21
  Index        r21, r17, r8
  Index        r8, r21, r23
  Append       r26, r8, r4
  SetIndex     r21, r23, r26
  Move         r26, r19
  Index        r19, r21, r26
  Const        r8, 1
  AddInt       r23, r19, r8
  SetIndex     r21, r26, r23
  AddInt       r16, r16, r8
  Jump         L3
  Values       23,17,0,0
  Const        r17, 0
  Move         r19, r17
  Len          r26, r23
  LessInt      r21, r19, r26
  JumpIfFalse  r21, L4
  Index        r21, r23, r19
  // partkey: g.key.partkey,
  Move         r23, r7
  Index        r26, r21, r12
  Index        r18, r26, r7
  // suppkey: g.key.suppkey,
  Move         r26, r9
  Index        r16, r21, r12
  Index        r12, r16, r9
  // qty: sum(from x in g select x.l_quantity)
  Move         r16, r13
  Move         r4, r6
  IterPrep     r22, r21
  Len          r21, r22
  Move         r25, r17
  LessInt      r20, r25, r21
  JumpIfFalse  r20, L3
  Index        r20, r22, r25
  Index        r22, r20, r14
  Append       r4, r4, r22
  AddInt       r25, r25, r8
  Jump         L5
  Sum          r20, r4
  // partkey: g.key.partkey,
  Move         r25, r23
  Move         r23, r18
  // suppkey: g.key.suppkey,
  Move         r18, r26
  Move         r26, r12
  // qty: sum(from x in g select x.l_quantity)
  Move         r22, r16
  Move         r16, r20
  // select {
  MakeMap      r20, 3, r25
  // from l in lineitem
  Append       r6, r6, r20
  AddInt       r19, r19, r8
  Jump         L6
  // from ps in partsupp
  Const        r20, []
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r16, "p_name"
  Const        r26, "ps_availqty"
  // select ps.ps_suppkey
  Const        r18, "ps_suppkey"
  // from ps in partsupp
  IterPrep     r23, r3
  Len          r3, r23
  Move         r25, r17
  LessInt      r22, r25, r3
  JumpIfFalse  r22, L7
  Index        r22, r23, r25
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r23, r2
  Len          r2, r23
  Const        r3, "ps_partkey"
  Const        r4, "p_partkey"
  Move         r19, r17
  LessInt      r12, r19, r2
  JumpIfFalse  r12, L5
  Index        r12, r23, r19
  Index        r23, r22, r3
  Index        r2, r12, r4
  Equal        r4, r23, r2
  JumpIfFalse  r4, L8
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r4, r6
  Len          r6, r4
  Move         r2, r17
  LessInt      r23, r2, r6
  JumpIfFalse  r23, L8
  Index        r23, r4, r2
  Index        r6, r22, r3
  Index        r3, r23, r7
  Equal        r7, r6, r3
  Index        r3, r22, r18
  Index        r6, r23, r9
  Equal        r9, r3, r6
  Move         r6, r7
  JumpIfFalse  r6, L6
  Move         r6, r9
  JumpIfFalse  r6, L9
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Index        r6, r12, r16
  Const        r12, 6
  Slice        r16, r6, r17, r12
  Index        r12, r22, r26
  Const        r26, 0.5
  Index        r6, r23, r13
  MulFloat     r13, r26, r6
  LessFloat    r26, r13, r12
  Equal        r13, r16, r5
  JumpIfFalse  r13, L10
  Move         r13, r26
  JumpIfFalse  r13, L9
  // select ps.ps_suppkey
  Index        r13, r22, r18
  // from ps in partsupp
  Append       r20, r20, r13
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Add          r2, r2, r8
  Jump         L11
L8:
  // join p in part on ps.ps_partkey == p.p_partkey
  Add          r19, r19, r8
  Jump         L12
  // from ps in partsupp
  AddInt       r25, r25, r8
  Jump         L6
L7:
  // from s in supplier
  Const        r13, []
  IterPrep     r6, r1
  Len          r1, r6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r7, r0
  Len          r2, r7
  // from s in supplier
  EqualInt     r4, r1, r17
  JumpIfTrue   r4, L13
  EqualInt     r4, r2, r17
  JumpIfTrue   r4, L13
  LessEq       r4, r2, r1
  JumpIfFalse  r4, L14
  // join n in nation on n.n_nationkey == s.s_nationkey
  MakeMap      r4, 0, r0
  Move         r19, r17
  LessInt      r22, r19, r2
  JumpIfFalse  r22, L4
  Index        r22, r7, r19
  Move         r25, r22
  Const        r18, "n_nationkey"
  Index        r26, r25, r18
  Index        r16, r4, r26
  Const        r5, nil
  NotEqual     r12, r16, r5
  JumpIfTrue   r12, L15
  MakeList     r12, 0, r0
  SetIndex     r4, r26, r12
L15:
  Index        r16, r4, r26
  Append       r12, r16, r22
  SetIndex     r4, r26, r12
  AddInt       r19, r19, r8
  Jump         L10
  // from s in supplier
  Move         r16, r17
  LessInt      r26, r16, r1
  JumpIfFalse  r26, L13
  Index        r23, r6, r16
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r26, "s_nationkey"
  Index        r22, r23, r26
  // from s in supplier
  Index        r19, r4, r22
  NotEqual     r22, r19, r5
  JumpIfFalse  r22, L16
  Len          r22, r19
  Move         r4, r16
  LessInt      r9, r4, r22
  JumpIfFalse  r9, L16
  Index        r25, r19, r4
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r9, "s_suppkey"
  Index        r22, r23, r9
  In           r19, r22, r20
  Const        r22, "n_name"
  Index        r3, r25, r22
  Const        r14, "CANADA"
  Equal        r21, r3, r14
  Move         r12, r19
  JumpIfFalse  r12, L5
  Move         r12, r21
  JumpIfFalse  r12, L17
  // s_name: s.s_name,
  Const        r21, "s_name"
  Move         r3, r21
  Index        r19, r23, r3
  // s_address: s.s_address
  Const        r12, "s_address"
  Move         r10, r12
  Index        r15, r23, r10
  // s_name: s.s_name,
  Move         r11, r21
  Move         r24, r19
  // s_address: s.s_address
  Move         r19, r12
  Move         r27, r15
  // select {
  MakeMap      r15, 2, r11
  // order by s.s_name
  Index        r27, r23, r3
  // from s in supplier
  Move         r19, r15
  MakeList     r15, 2, r27
  Append       r13, r13, r15
L17:
  AddInt       r4, r4, r8
  Jump         L18
  AddInt       r16, r16, r8
  Jump         L9
L14:
  MakeMap      r19, 0, r0
  Move         r16, r17
L21:
  LessInt      r27, r16, r1
  JumpIfFalse  r27, L19
  Index        r27, r6, r16
  // join n in nation on n.n_nationkey == s.s_nationkey
  Index        r6, r27, r26
  // from s in supplier
  Index        r26, r19, r6
  Move         r1, r5
  NotEqual     r5, r26, r1
  JumpIfTrue   r5, L20
  MakeList     r5, 0, r0
  SetIndex     r19, r6, r5
L20:
  Index        r26, r19, r6
  Append       r5, r26, r27
  SetIndex     r19, r6, r5
  AddInt       r16, r16, r8
  Jump         L21
L19:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Move         r5, r17
L27:
  LessInt      r15, r5, r2
  JumpIfFalse  r15, L22
  Index        r25, r7, r5
  Index        r15, r25, r18
  Index        r18, r19, r15
  NotEqual     r15, r18, r1
  JumpIfFalse  r15, L23
  Len          r15, r18
  Move         r1, r5
L26:
  LessInt      r19, r1, r15
  JumpIfFalse  r19, L23
  Index        r23, r18, r1
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Index        r19, r23, r9
  In           r9, r19, r20
  Index        r19, r25, r22
  Equal        r22, r19, r14
  Move         r19, r9
  JumpIfFalse  r19, L24
  Move         r19, r22
L24:
  JumpIfFalse  r19, L25
  // s_name: s.s_name,
  Move         r19, r21
  Index        r21, r23, r3
  // s_address: s.s_address
  Move         r22, r12
  Index        r12, r23, r10
  // s_name: s.s_name,
  Move         r10, r19
  Move         r19, r21
  // s_address: s.s_address
  Move         r21, r22
  Move         r22, r12
  // select {
  MakeMap      r12, 2, r10
  // order by s.s_name
  Index        r22, r23, r3
  // from s in supplier
  Move         r3, r12
  MakeList     r12, 2, r22
  Append       r13, r13, r12
L25:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r1, r1, r8
  Jump         L26
L23:
  AddInt       r5, r5, r8
  Jump         L27
L22:
  // order by s.s_name
  Sort         r13, r13
  // json(result)
  JSON         r13
  // expect result == [
  Const        r12, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r3, r13, r12
  Expect       r3
  Return       r0
