func main (regs=232)
L18:
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
  // let partsupp = [
  Const        r3, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // let prefix = "forest"
  Const        r5, "forest"
  // from l in lineitem
  Const        r6, []
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r7, "partkey"
  Const        r8, "l_partkey"
  Const        r9, "suppkey"
  Const        r10, "l_suppkey"
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r11, "l_shipdate"
  // partkey: g.key.partkey,
  Const        r12, "key"
  // qty: sum(from x in g select x.l_quantity)
  Const        r13, "qty"
  Const        r14, "l_quantity"
  // from l in lineitem
  IterPrep     r15, r4
  Len          r16, r15
  Const        r17, 0
  MakeMap      r18, 0, r0
  Const        r20, []
  Move         r19, r20
L4:
  LessInt      r21, r17, r16
  JumpIfFalse  r21, L0
  Index        r22, r15, r17
  Move         r23, r22
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Index        r24, r23, r11
  Const        r25, "1994-01-01"
  LessEq       r26, r25, r24
  Index        r27, r23, r11
  Const        r28, "1995-01-01"
  Less         r29, r27, r28
  JumpIfFalse  r26, L1
  Move         r26, r29
L1:
  JumpIfFalse  r26, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r30, "partkey"
  Index        r31, r23, r8
  Const        r32, "suppkey"
  Index        r33, r23, r10
  Move         r34, r30
  Move         r35, r31
  Move         r36, r32
  Move         r37, r33
  MakeMap      r38, 2, r34
  Str          r39, r38
  In           r40, r39, r18
  JumpIfTrue   r40, L3
  // from l in lineitem
  Const        r41, "__group__"
  Const        r42, true
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r43, r38
  // from l in lineitem
  Const        r44, "items"
  Move         r45, r20
  Const        r46, "count"
  Const        r47, 0
  Move         r48, r41
  Move         r49, r42
  Move         r50, r12
  Move         r51, r43
  Move         r52, r44
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  MakeMap      r56, 4, r48
  SetIndex     r18, r39, r56
  Append       r19, r19, r56
L3:
  Index        r58, r18, r39
  Index        r59, r58, r44
  Append       r60, r59, r22
  SetIndex     r58, r44, r60
  Index        r61, r58, r46
  Const        r62, 1
  AddInt       r63, r61, r62
  SetIndex     r58, r46, r63
L2:
  AddInt       r17, r17, r62
  Jump         L4
L0:
  Move         r64, r47
  Len          r65, r19
L8:
  LessInt      r66, r64, r65
  JumpIfFalse  r66, L5
  Index        r68, r19, r64
  // partkey: g.key.partkey,
  Const        r69, "partkey"
  Index        r70, r68, r12
  Index        r71, r70, r7
  // suppkey: g.key.suppkey,
  Const        r72, "suppkey"
  Index        r73, r68, r12
  Index        r74, r73, r9
  // qty: sum(from x in g select x.l_quantity)
  Const        r75, "qty"
  Const        r76, []
  IterPrep     r77, r68
  Len          r78, r77
  Move         r79, r47
L7:
  LessInt      r80, r79, r78
  JumpIfFalse  r80, L6
  Index        r82, r77, r79
  Index        r83, r82, r14
  Append       r76, r76, r83
  AddInt       r79, r79, r62
  Jump         L7
L6:
  Sum          r85, r76
  // partkey: g.key.partkey,
  Move         r86, r69
  Move         r87, r71
  // suppkey: g.key.suppkey,
  Move         r88, r72
  Move         r89, r74
  // qty: sum(from x in g select x.l_quantity)
  Move         r90, r75
  Move         r91, r85
  // select {
  MakeMap      r92, 3, r86
  // from l in lineitem
  Append       r6, r6, r92
  AddInt       r64, r64, r62
  Jump         L8
L5:
  // from ps in partsupp
  Const        r94, []
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r95, "p_name"
  Const        r96, "ps_availqty"
  // select ps.ps_suppkey
  Const        r97, "ps_suppkey"
  // from ps in partsupp
  IterPrep     r98, r3
  Len          r99, r98
  Move         r100, r47
L17:
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L9
  Index        r103, r98, r100
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r104, r2
  Len          r105, r104
  Const        r106, "ps_partkey"
  Const        r107, "p_partkey"
  Move         r108, r47
L16:
  LessInt      r109, r108, r105
  JumpIfFalse  r109, L10
  Index        r111, r104, r108
  Index        r112, r103, r106
  Index        r113, r111, r107
  Equal        r114, r112, r113
  JumpIfFalse  r114, L11
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r115, r6
  Len          r116, r115
  Move         r117, r47
L15:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L11
  Index        r120, r115, r117
  Index        r121, r103, r106
  Index        r122, r120, r7
  Equal        r123, r121, r122
  Index        r124, r103, r97
  Index        r125, r120, r9
  Equal        r126, r124, r125
  JumpIfFalse  r123, L12
  Move         r123, r126
L12:
  JumpIfFalse  r123, L13
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Index        r127, r111, r95
  Const        r128, 6
  Slice        r129, r127, r47, r128
  Index        r130, r103, r96
  Const        r131, 0.5
  Index        r132, r120, r13
  MulFloat     r133, r131, r132
  LessFloat    r134, r133, r130
  Equal        r135, r129, r5
  JumpIfFalse  r135, L14
  Move         r135, r134
L14:
  JumpIfFalse  r135, L13
  // select ps.ps_suppkey
  Index        r136, r103, r97
  // from ps in partsupp
  Append       r94, r94, r136
L13:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Add          r117, r117, r62
  Jump         L15
L11:
  // join p in part on ps.ps_partkey == p.p_partkey
  Add          r108, r108, r62
  Jump         L16
L10:
  // from ps in partsupp
  AddInt       r100, r100, r62
  Jump         L17
L9:
  // from s in supplier
  Const        r138, []
  IterPrep     r139, r1
  Len          r140, r139
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r141, r0
  Len          r142, r141
  // from s in supplier
  EqualInt     r143, r140, r47
  JumpIfTrue   r143, L18
  EqualInt     r144, r142, r47
  JumpIfTrue   r144, L18
  LessEq       r145, r142, r140
  JumpIfFalse  r145, L19
  // join n in nation on n.n_nationkey == s.s_nationkey
  MakeMap      r146, 0, r0
  Const        r147, 0
L22:
  LessInt      r148, r147, r142
  JumpIfFalse  r148, L20
  Index        r149, r141, r147
  Move         r150, r149
  Const        r151, "n_nationkey"
  Index        r152, r150, r151
  Index        r153, r146, r152
  Const        r154, nil
  NotEqual     r155, r153, r154
  JumpIfTrue   r155, L21
  MakeList     r156, 0, r0
  SetIndex     r146, r152, r156
L21:
  Index        r153, r146, r152
  Append       r157, r153, r149
  SetIndex     r146, r152, r157
  AddInt       r147, r147, r62
  Jump         L22
L20:
  // from s in supplier
  Const        r158, 0
L27:
  LessInt      r159, r158, r140
  JumpIfFalse  r159, L18
  Index        r120, r139, r158
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r161, "s_nationkey"
  Index        r162, r120, r161
  // from s in supplier
  Index        r163, r146, r162
  NotEqual     r164, r163, r154
  JumpIfFalse  r164, L23
  Len          r165, r163
  Const        r166, 0
L26:
  LessInt      r167, r166, r165
  JumpIfFalse  r167, L23
  Index        r150, r163, r166
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r169, "s_suppkey"
  Index        r170, r120, r169
  In           r171, r170, r94
  Const        r172, "n_name"
  Index        r173, r150, r172
  Const        r174, "CANADA"
  Equal        r175, r173, r174
  JumpIfFalse  r171, L24
  Move         r171, r175
L24:
  JumpIfFalse  r171, L25
  // s_name: s.s_name,
  Const        r176, "s_name"
  Const        r177, "s_name"
  Index        r178, r120, r177
  // s_address: s.s_address
  Const        r179, "s_address"
  Const        r180, "s_address"
  Index        r181, r120, r180
  // s_name: s.s_name,
  Move         r182, r176
  Move         r183, r178
  // s_address: s.s_address
  Move         r184, r179
  Move         r185, r181
  // select {
  MakeMap      r186, 2, r182
  // order by s.s_name
  Index        r188, r120, r177
  // from s in supplier
  Move         r189, r186
  MakeList     r190, 2, r188
  Append       r138, r138, r190
L25:
  AddInt       r166, r166, r62
  Jump         L26
L23:
  AddInt       r158, r158, r62
  Jump         L27
L19:
  MakeMap      r192, 0, r0
  Const        r193, 0
L30:
  LessInt      r194, r193, r140
  JumpIfFalse  r194, L28
  Index        r195, r139, r193
  // join n in nation on n.n_nationkey == s.s_nationkey
  Index        r196, r195, r161
  // from s in supplier
  Index        r197, r192, r196
  NotEqual     r198, r197, r154
  JumpIfTrue   r198, L29
  MakeList     r199, 0, r0
  SetIndex     r192, r196, r199
L29:
  Index        r197, r192, r196
  Append       r200, r197, r195
  SetIndex     r192, r196, r200
  AddInt       r193, r193, r62
  Jump         L30
L28:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r201, 0
L36:
  LessInt      r202, r201, r142
  JumpIfFalse  r202, L31
  Index        r150, r141, r201
  Index        r204, r150, r151
  Index        r205, r192, r204
  NotEqual     r206, r205, r154
  JumpIfFalse  r206, L32
  Len          r207, r205
  Const        r208, 0
L35:
  LessInt      r209, r208, r207
  JumpIfFalse  r209, L32
  Index        r120, r205, r208
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Index        r211, r120, r169
  In           r212, r211, r94
  Index        r213, r150, r172
  Equal        r214, r213, r174
  JumpIfFalse  r212, L33
  Move         r212, r214
L33:
  JumpIfFalse  r212, L34
  // s_name: s.s_name,
  Const        r215, "s_name"
  Index        r216, r120, r177
  // s_address: s.s_address
  Const        r217, "s_address"
  Index        r218, r120, r180
  // s_name: s.s_name,
  Move         r219, r215
  Move         r220, r216
  // s_address: s.s_address
  Move         r221, r217
  Move         r222, r218
  // select {
  MakeMap      r223, 2, r219
  // order by s.s_name
  Index        r225, r120, r177
  // from s in supplier
  Move         r226, r223
  MakeList     r227, 2, r225
  Append       r138, r138, r227
L34:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r208, r208, r62
  Jump         L35
L32:
  AddInt       r201, r201, r62
  Jump         L36
L31:
  // order by s.s_name
  Sort         r138, r138
  // json(result)
  JSON         r138
  // expect result == [
  Const        r230, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r231, r138, r230
  Expect       r231
  Return       r0
