func main (regs=207)
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let lineitem = [
  Const        r8, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // from l in lineitem
  IterPrep     r13, r8
  Len          r14, r13
  Const        r15, 0
  MakeMap      r16, 0, r0
  Const        r17, []
  Less         r18, r15, r14
  JumpIfFalse  r18, L0
  Index        r19, r13, r15
  Move         r20, r19
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r21, "l_shipdate"
L4:
  Index        r22, r20, r21
  Const        r23, "1994-01-01"
  LessEq       r24, r23, r22
  Const        r25, "l_shipdate"
  Index        r26, r20, r25
  Const        r27, "1995-01-01"
  Less         r28, r26, r27
  JumpIfFalse  r24, L1
  JumpIfFalse  r28, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r30, "partkey"
  Const        r31, "l_partkey"
  Index        r32, r20, r31
  Const        r33, "suppkey"
  Const        r34, "l_suppkey"
  Index        r35, r20, r34
L1:
  Move         r36, r30
  Move         r37, r32
  Move         r38, r33
  Move         r39, r35
  MakeMap      r40, 2, r36
  Str          r41, r40
  In           r42, r41, r16
  JumpIfTrue   r42, L3
  // from l in lineitem
  Const        r44, "__group__"
  Const        r45, true
  Const        r46, "key"
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r47, r40
  // from l in lineitem
  MakeMap      r50, 2, r44
  SetIndex     r16, r41, r50
  Append       r51, r17, r50
  Const        r52, "items"
  Index        r53, r16, r41
  Index        r54, r53, r52
  Append       r55, r54, r19
  SetIndex     r53, r52, r55
L3:
  Jump         L4
  Const        r58, 0
  Len          r59, r51
  Less         r60, r58, r59
  JumpIfFalse  r60, L5
L2:
  Index        r61, r51, r58
  // qty: sum(from x in g select x.l_quantity)
  IterPrep     r75, r61
L0:
  Len          r76, r75
L7:
  Const        r77, 0
  Less         r78, r77, r76
  JumpIfFalse  r78, L6
  // from l in lineitem
  Jump         L7
  // from ps in partsupp
  Const        r98, []
  IterPrep     r99, r6
  Len          r100, r99
  Const        r101, 0
L6:
  Less         r102, r101, r100
  JumpIfFalse  r102, L8
  Index        r103, r99, r101
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r105, r4
  Len          r106, r105
  Const        r107, 0
  Less         r108, r107, r106
  JumpIfFalse  r108, L9
  Index        r109, r105, r107
  Const        r111, "ps_partkey"
L5:
  Index        r112, r103, r111
  Const        r113, "p_partkey"
  Index        r114, r109, r113
  Equal        r115, r112, r114
  JumpIfFalse  r115, L10
L16:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r116, r12
  Len          r117, r116
  Const        r118, 0
  Less         r119, r118, r117
  JumpIfFalse  r119, L10
  Index        r120, r116, r118
  Const        r122, "ps_partkey"
L15:
  Index        r123, r103, r122
  Const        r124, "partkey"
  Index        r125, r120, r124
  Equal        r126, r123, r125
  Const        r127, "ps_suppkey"
  Index        r128, r103, r127
  Const        r129, "suppkey"
  Index        r130, r120, r129
  Equal        r131, r128, r130
  JumpIfFalse  r126, L11
  JumpIfFalse  r131, L12
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r133, "p_name"
  Index        r134, r109, r133
L14:
  Const        r135, 0
  Const        r136, 6
  Slice        r137, r134, r135, r136
  Const        r138, "ps_availqty"
  Index        r139, r103, r138
  Const        r140, 0.5
  Const        r141, "qty"
  Index        r142, r120, r141
  MulFloat     r143, r140, r142
  LessFloat    r144, r143, r139
  Equal        r145, r137, r10
  JumpIfFalse  r145, L13
  JumpIfFalse  r144, L12
L11:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Jump         L14
  // join p in part on ps.ps_partkey == p.p_partkey
  Jump         L15
  // from ps in partsupp
  Jump         L16
  // from s in supplier
  IterPrep     r158, r2
  Len          r159, r158
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r160, r1
  Len          r161, r160
  // from s in supplier
  Const        r162, 0
  Less         r163, r162, r159
  JumpIfFalse  r163, L17
  Index        r164, r158, r162
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r165, 0
  Less         r166, r165, r161
L13:
  JumpIfFalse  r166, L18
  Index        r167, r160, r165
  Const        r169, "n_nationkey"
  Index        r170, r167, r169
  Const        r171, "s_nationkey"
L12:
  Index        r172, r164, r171
L10:
  Equal        r173, r170, r172
L9:
  JumpIfFalse  r173, L19
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r174, "s_suppkey"
  Index        r175, r164, r174
  In           r176, r175, r98
L8:
  Const        r177, "n_name"
  Index        r178, r167, r177
  Const        r179, "CANADA"
  Equal        r180, r178, r179
  JumpIfFalse  r176, L20
  JumpIfFalse  r180, L19
L21:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Jump         L21
  // from s in supplier
  Jump         L21
  // order by s.s_name
  Sort         r203, r198
  // json(result)
  JSON         r203
  // expect result == [
  Const        r205, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r206, r203, r205
  Expect       r206
  Return       r0
