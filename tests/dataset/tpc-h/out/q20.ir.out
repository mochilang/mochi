func main (regs=185)
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
  // let partsupp = [
  Const        r3, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  // let prefix = "forest"
  Const        r5, "forest"
  // from l in lineitem
  Const        r6, []
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r7, "partkey"
  Const        r8, "l_partkey"
  Const        r9, "suppkey"
  Const        r10, "l_suppkey"
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r11, "l_shipdate"
  // partkey: g.key.partkey,
  Const        r12, "key"
  // qty: sum(from x in g select x.l_quantity)
  Const        r13, "qty"
  Const        r14, "l_quantity"
  // from l in lineitem
  IterPrep     r15, r4
  Len          r16, r15
  Const        r17, 0
  MakeMap      r18, 0, r0
  Const        r20, []
  Move         r19, r20
L4:
  LessInt      r21, r17, r16
  JumpIfFalse  r21, L0
  Index        r22, r15, r17
  Move         r23, r22
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Index        r24, r23, r11
  Const        r25, "1994-01-01"
  LessEq       r26, r25, r24
  Index        r27, r23, r11
  Const        r28, "1995-01-01"
  Less         r29, r27, r28
  Move         r30, r26
  JumpIfFalse  r30, L1
  Move         r30, r29
L1:
  JumpIfFalse  r30, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r31, "partkey"
  Index        r32, r23, r8
  Const        r33, "suppkey"
  Index        r34, r23, r10
  Move         r35, r31
  Move         r36, r32
  Move         r37, r33
  Move         r38, r34
  MakeMap      r39, 2, r35
  Str          r40, r39
  In           r41, r40, r18
  JumpIfTrue   r41, L3
  // from l in lineitem
  Const        r42, "__group__"
  Const        r43, true
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r44, r39
  // from l in lineitem
  Const        r45, "items"
  Move         r46, r20
  Const        r47, "count"
  Const        r48, 0
  Move         r49, r42
  Move         r50, r43
  Move         r51, r12
  Move         r52, r44
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  MakeMap      r57, 4, r49
  SetIndex     r18, r40, r57
  Append       r58, r19, r57
  Move         r19, r58
L3:
  Index        r59, r18, r40
  Index        r60, r59, r45
  Append       r61, r60, r22
  SetIndex     r59, r45, r61
  Index        r62, r59, r47
  Const        r63, 1
  AddInt       r64, r62, r63
  SetIndex     r59, r47, r64
L2:
  AddInt       r17, r17, r63
  Jump         L4
L0:
  Move         r65, r48
  Len          r66, r19
L8:
  LessInt      r67, r65, r66
  JumpIfFalse  r67, L5
  Index        r68, r19, r65
  Move         r69, r68
  // partkey: g.key.partkey,
  Const        r70, "partkey"
  Index        r71, r69, r12
  Index        r72, r71, r7
  // suppkey: g.key.suppkey,
  Const        r73, "suppkey"
  Index        r74, r69, r12
  Index        r75, r74, r9
  // qty: sum(from x in g select x.l_quantity)
  Const        r76, "qty"
  Const        r77, []
  IterPrep     r78, r69
  Len          r79, r78
  Move         r80, r48
L7:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L6
  Index        r82, r78, r80
  Move         r83, r82
  Index        r84, r83, r14
  Append       r85, r77, r84
  Move         r77, r85
  AddInt       r80, r80, r63
  Jump         L7
L6:
  Sum          r86, r77
  // partkey: g.key.partkey,
  Move         r87, r70
  Move         r88, r72
  // suppkey: g.key.suppkey,
  Move         r89, r73
  Move         r90, r75
  // qty: sum(from x in g select x.l_quantity)
  Move         r91, r76
  Move         r92, r86
  // select {
  MakeMap      r93, 3, r87
  // from l in lineitem
  Append       r94, r6, r93
  Move         r6, r94
  AddInt       r65, r65, r63
  Jump         L8
L5:
  // from ps in partsupp
  Const        r95, []
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r96, "p_name"
  Const        r97, "ps_availqty"
  // select ps.ps_suppkey
  Const        r98, "ps_suppkey"
  // from ps in partsupp
  IterPrep     r99, r3
  Len          r100, r99
  Move         r101, r48
L17:
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L9
  Index        r103, r99, r101
  Move         r104, r103
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r105, r2
  Len          r106, r105
  Const        r107, "ps_partkey"
  Const        r108, "p_partkey"
  Move         r109, r48
L16:
  LessInt      r110, r109, r106
  JumpIfFalse  r110, L10
  Index        r111, r105, r109
  Move         r112, r111
  Index        r113, r104, r107
  Index        r114, r112, r108
  Equal        r115, r113, r114
  JumpIfFalse  r115, L11
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r116, r6
  Len          r117, r116
  Move         r118, r48
L15:
  LessInt      r119, r118, r117
  JumpIfFalse  r119, L11
  Index        r120, r116, r118
  Move         r121, r120
  Index        r122, r104, r107
  Index        r123, r121, r7
  Equal        r124, r122, r123
  Index        r125, r104, r98
  Index        r126, r121, r9
  Equal        r127, r125, r126
  Move         r128, r124
  JumpIfFalse  r128, L12
  Move         r128, r127
L12:
  JumpIfFalse  r128, L13
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Index        r129, r112, r96
  Const        r130, 6
  Slice        r131, r129, r48, r130
  Index        r132, r104, r97
  Const        r133, 0.5
  Index        r134, r121, r13
  MulFloat     r135, r133, r134
  LessFloat    r136, r135, r132
  Equal        r137, r131, r5
  Move         r138, r137
  JumpIfFalse  r138, L14
  Move         r138, r136
L14:
  JumpIfFalse  r138, L13
  // select ps.ps_suppkey
  Index        r139, r104, r98
  // from ps in partsupp
  Append       r140, r95, r139
  Move         r95, r140
L13:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Add          r118, r118, r63
  Jump         L15
L11:
  // join p in part on ps.ps_partkey == p.p_partkey
  Add          r109, r109, r63
  Jump         L16
L10:
  // from ps in partsupp
  AddInt       r101, r101, r63
  Jump         L17
L9:
  // from s in supplier
  Const        r141, []
  IterPrep     r142, r1
  Len          r143, r142
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r144, r0
  Len          r145, r144
  Const        r146, "n_nationkey"
  Const        r147, "s_nationkey"
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r148, "s_suppkey"
  Const        r149, "n_name"
  // s_name: s.s_name,
  Const        r150, "s_name"
  // s_address: s.s_address
  Const        r151, "s_address"
  // from s in supplier
  Const        r152, 0
L23:
  LessInt      r153, r152, r143
  JumpIfFalse  r153, L18
  Index        r154, r142, r152
  Move         r121, r154
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r155, 0
L22:
  LessInt      r156, r155, r145
  JumpIfFalse  r156, L19
  Index        r157, r144, r155
  Move         r158, r157
  Index        r159, r158, r146
  Index        r160, r121, r147
  Equal        r161, r159, r160
  JumpIfFalse  r161, L20
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Index        r162, r121, r148
  In           r163, r162, r95
  Index        r164, r158, r149
  Const        r165, "CANADA"
  Equal        r166, r164, r165
  Move         r167, r163
  JumpIfFalse  r167, L21
  Move         r167, r166
L21:
  JumpIfFalse  r167, L20
  // s_name: s.s_name,
  Const        r168, "s_name"
  Index        r169, r121, r150
  // s_address: s.s_address
  Const        r170, "s_address"
  Index        r171, r121, r151
  // s_name: s.s_name,
  Move         r172, r168
  Move         r173, r169
  // s_address: s.s_address
  Move         r174, r170
  Move         r175, r171
  // select {
  MakeMap      r176, 2, r172
  // order by s.s_name
  Index        r177, r121, r150
  Move         r178, r177
  // from s in supplier
  Move         r179, r176
  MakeList     r180, 2, r178
  Append       r181, r141, r180
  Move         r141, r181
L20:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r155, r155, r63
  Jump         L22
L19:
  // from s in supplier
  AddInt       r152, r152, r63
  Jump         L23
L18:
  // order by s.s_name
  Sort         r182, r141
  // from s in supplier
  Move         r141, r182
  // json(result)
  JSON         r141
  // expect result == [
  Const        r183, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r184, r141, r183
  Expect       r184
  Return       r0
