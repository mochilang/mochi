func main (regs=207)
  // let nation = [
  Const        r0, [{"n_name": "CANADA", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply", "s_nationkey": 1, "s_suppkey": 100}, {"s_address": "456 Iron Str", "s_name": "Berlin Metals", "s_nationkey": 2, "s_suppkey": 200}]
  Move         r3, r2
  // let part = [
  Const        r4, [{"p_name": "forest glade bricks", "p_partkey": 10}, {"p_name": "desert sand paper", "p_partkey": 20}]
  Move         r5, r4
  // let partsupp = [
  Const        r6, [{"ps_availqty": 100, "ps_partkey": 10, "ps_suppkey": 100}, {"ps_availqty": 30, "ps_partkey": 20, "ps_suppkey": 200}]
  Move         r7, r6
  // let lineitem = [
  Const        r8, [{"l_partkey": 10, "l_quantity": 100, "l_shipdate": "1994-05-15", "l_suppkey": 100}, {"l_partkey": 10, "l_quantity": 50, "l_shipdate": "1995-01-01", "l_suppkey": 100}]
  Move         r9, r8
  // let prefix = "forest"
  Const        r10, "forest"
  Move         r11, r10
  // from l in lineitem
  Const        r12, []
  IterPrep     r13, r9
  Len          r14, r13
  Const        r15, 0
  MakeMap      r16, 0, r0
  Const        r17, []
L4:
  Less         r18, r15, r14
  JumpIfFalse  r18, L0
  Index        r19, r13, r15
  Move         r20, r19
  // where l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01"
  Const        r21, "l_shipdate"
  Index        r22, r20, r21
  Const        r23, "1994-01-01"
  LessEq       r24, r23, r22
  Const        r25, "l_shipdate"
  Index        r26, r20, r25
  Const        r27, "1995-01-01"
  Less         r28, r26, r27
  Move         r29, r24
  JumpIfFalse  r29, L1
  Move         r29, r28
L1:
  JumpIfFalse  r29, L2
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Const        r30, "partkey"
  Const        r31, "l_partkey"
  Index        r32, r20, r31
  Const        r33, "suppkey"
  Const        r34, "l_suppkey"
  Index        r35, r20, r34
  Move         r36, r30
  Move         r37, r32
  Move         r38, r33
  Move         r39, r35
  MakeMap      r40, 2, r36
  Str          r41, r40
  In           r42, r41, r16
  JumpIfTrue   r42, L3
  // from l in lineitem
  Const        r43, []
  Const        r44, "__group__"
  Const        r45, true
  Const        r46, "key"
  // group by { partkey: l.l_partkey, suppkey: l.l_suppkey } into g
  Move         r47, r40
  // from l in lineitem
  Const        r48, "items"
  Move         r49, r43
  MakeMap      r50, 3, r44
  SetIndex     r16, r41, r50
  Append       r51, r17, r50
  Move         r17, r51
L3:
  Const        r52, "items"
  Index        r53, r16, r41
  Index        r54, r53, r52
  Append       r55, r54, r19
  SetIndex     r53, r52, r55
L2:
  Const        r56, 1
  Add          r57, r15, r56
  Move         r15, r57
  Jump         L4
L0:
  Const        r58, 0
  Len          r59, r17
L8:
  Less         r60, r58, r59
  JumpIfFalse  r60, L5
  Index        r61, r17, r58
  Move         r62, r61
  // partkey: g.key.partkey,
  Const        r63, "partkey"
  Const        r64, "key"
  Index        r65, r62, r64
  Const        r66, "partkey"
  Index        r67, r65, r66
  // suppkey: g.key.suppkey,
  Const        r68, "suppkey"
  Const        r69, "key"
  Index        r70, r62, r69
  Const        r71, "suppkey"
  Index        r72, r70, r71
  // qty: sum(from x in g select x.l_quantity)
  Const        r73, "qty"
  Const        r74, []
  IterPrep     r75, r62
  Len          r76, r75
  Const        r77, 0
L7:
  Less         r78, r77, r76
  JumpIfFalse  r78, L6
  Index        r79, r75, r77
  Move         r80, r79
  Const        r81, "l_quantity"
  Index        r82, r80, r81
  Append       r83, r74, r82
  Move         r74, r83
  Const        r84, 1
  Add          r85, r77, r84
  Move         r77, r85
  Jump         L7
L6:
  Sum          r86, r74
  // partkey: g.key.partkey,
  Move         r87, r63
  Move         r88, r67
  // suppkey: g.key.suppkey,
  Move         r89, r68
  Move         r90, r72
  // qty: sum(from x in g select x.l_quantity)
  Move         r91, r73
  Move         r92, r86
  // select {
  MakeMap      r93, 3, r87
  // from l in lineitem
  Append       r94, r12, r93
  Move         r12, r94
  Const        r95, 1
  Add          r96, r58, r95
  Move         r58, r96
  Jump         L8
L5:
  // let shipped_94 =
  Move         r97, r12
  // from ps in partsupp
  Const        r98, []
  IterPrep     r99, r7
  Len          r100, r99
  Const        r101, 0
L17:
  Less         r102, r101, r100
  JumpIfFalse  r102, L9
  Index        r103, r99, r101
  Move         r104, r103
  // join p in part on ps.ps_partkey == p.p_partkey
  IterPrep     r105, r5
  Len          r106, r105
  Const        r107, 0
L16:
  Less         r108, r107, r106
  JumpIfFalse  r108, L10
  Index        r109, r105, r107
  Move         r110, r109
  Const        r111, "ps_partkey"
  Index        r112, r104, r111
  Const        r113, "p_partkey"
  Index        r114, r110, r113
  Equal        r115, r112, r114
  JumpIfFalse  r115, L11
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  IterPrep     r116, r97
  Len          r117, r116
  Const        r118, 0
L15:
  Less         r119, r118, r117
  JumpIfFalse  r119, L11
  Index        r120, r116, r118
  Move         r121, r120
  Const        r122, "ps_partkey"
  Index        r123, r104, r122
  Const        r124, "partkey"
  Index        r125, r121, r124
  Equal        r126, r123, r125
  Const        r127, "ps_suppkey"
  Index        r128, r104, r127
  Const        r129, "suppkey"
  Index        r130, r121, r129
  Equal        r131, r128, r130
  Move         r132, r126
  JumpIfFalse  r132, L12
  Move         r132, r131
L12:
  JumpIfFalse  r132, L13
  // where substring(p.p_name, 0, len(prefix)) == prefix && ps.ps_availqty > (0.5 * s.qty)
  Const        r133, "p_name"
  Index        r134, r110, r133
  Const        r135, 0
  Const        r136, 6
  Slice        r137, r134, r135, r136
  Const        r138, "ps_availqty"
  Index        r139, r104, r138
  Const        r140, 0.5
  Const        r141, "qty"
  Index        r142, r121, r141
  MulFloat     r143, r140, r142
  LessFloat    r144, r143, r139
  Equal        r145, r137, r11
  Move         r146, r145
  JumpIfFalse  r146, L14
  Move         r146, r144
L14:
  JumpIfFalse  r146, L13
  // select ps.ps_suppkey
  Const        r147, "ps_suppkey"
  Index        r148, r104, r147
  // from ps in partsupp
  Append       r149, r98, r148
  Move         r98, r149
L13:
  // join s in shipped_94 on ps.ps_partkey == s.partkey && ps.ps_suppkey == s.suppkey
  Const        r150, 1
  Add          r151, r118, r150
  Move         r118, r151
  Jump         L15
L11:
  // join p in part on ps.ps_partkey == p.p_partkey
  Const        r152, 1
  Add          r153, r107, r152
  Move         r107, r153
  Jump         L16
L10:
  // from ps in partsupp
  Const        r154, 1
  Add          r155, r101, r154
  Move         r101, r155
  Jump         L17
L9:
  // let target_partkeys =
  Move         r156, r98
  // from s in supplier
  Const        r157, []
  IterPrep     r158, r3
  Len          r159, r158
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r160, r1
  Len          r161, r160
  // from s in supplier
  Const        r162, 0
L23:
  Less         r163, r162, r159
  JumpIfFalse  r163, L18
  Index        r164, r158, r162
  Move         r121, r164
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r165, 0
L22:
  Less         r166, r165, r161
  JumpIfFalse  r166, L19
  Index        r167, r160, r165
  Move         r168, r167
  Const        r169, "n_nationkey"
  Index        r170, r168, r169
  Const        r171, "s_nationkey"
  Index        r172, r121, r171
  Equal        r173, r170, r172
  JumpIfFalse  r173, L20
  // where s.s_suppkey in target_partkeys && n.n_name == "CANADA"
  Const        r174, "s_suppkey"
  Index        r175, r121, r174
  In           r176, r175, r156
  Const        r177, "n_name"
  Index        r178, r168, r177
  Const        r179, "CANADA"
  Equal        r180, r178, r179
  Move         r181, r176
  JumpIfFalse  r181, L21
  Move         r181, r180
L21:
  JumpIfFalse  r181, L20
  // s_name: s.s_name,
  Const        r182, "s_name"
  Const        r183, "s_name"
  Index        r184, r121, r183
  // s_address: s.s_address
  Const        r185, "s_address"
  Const        r186, "s_address"
  Index        r187, r121, r186
  // s_name: s.s_name,
  Move         r188, r182
  Move         r189, r184
  // s_address: s.s_address
  Move         r190, r185
  Move         r191, r187
  // select {
  MakeMap      r192, 2, r188
  // order by s.s_name
  Const        r193, "s_name"
  Index        r194, r121, r193
  Move         r195, r194
  // from s in supplier
  Move         r196, r192
  MakeList     r197, 2, r195
  Append       r198, r157, r197
  Move         r157, r198
L20:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r199, 1
  Add          r200, r165, r199
  Move         r165, r200
  Jump         L22
L19:
  // from s in supplier
  Const        r201, 1
  Add          r202, r162, r201
  Move         r162, r202
  Jump         L23
L18:
  // order by s.s_name
  Sort         r203, r157
  // from s in supplier
  Move         r157, r203
  // let result =
  Move         r204, r157
  // json(result)
  JSON         r204
  // expect result == [
  Const        r205, [{"s_address": "123 Forest Lane", "s_name": "Maple Supply"}]
  Equal        r206, r204, r205
  Expect       r206
  Return       r0
