func main (regs=185)
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000.0, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800.0, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900.0, "l_orderkey": 3000, "l_suppkey": 200}]
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
  Len          r8, r7
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r10, r9
  Const        r11, "n_regionkey"
  Const        r12, "r_regionkey"
  // where r.r_name == "ASIA"
  Const        r13, "r_name"
  // from r in region
  Const        r14, 0
L4:
  LessInt      r15, r14, r8
  JumpIfFalse  r15, L0
  Index        r16, r7, r14
  Move         r17, r16
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r18, 0
L3:
  LessInt      r19, r18, r10
  JumpIfFalse  r19, L1
  Index        r20, r9, r18
  Move         r21, r20
  Index        r22, r21, r11
  Index        r23, r17, r12
  Equal        r24, r22, r23
  JumpIfFalse  r24, L2
  // where r.r_name == "ASIA"
  Index        r25, r17, r13
  Const        r26, "ASIA"
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // from r in region
  Append       r28, r6, r21
  Move         r6, r28
L2:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r29, 1
  AddInt       r18, r18, r29
  Jump         L3
L1:
  // from r in region
  AddInt       r14, r14, r29
  Jump         L4
L0:
  // from c in customer
  Const        r30, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r31, "o_orderdate"
  Const        r32, "s_nationkey"
  Const        r33, "c_nationkey"
  // nation: n.n_name,
  Const        r34, "nation"
  Const        r35, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r36, "revenue"
  Const        r37, "l_extendedprice"
  Const        r38, "l_discount"
  // from c in customer
  IterPrep     r39, r2
  Len          r40, r39
  Const        r42, 0
  Move         r41, r42
L16:
  LessInt      r43, r41, r40
  JumpIfFalse  r43, L5
  Index        r44, r39, r41
  Move         r45, r44
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r46, r6
  Len          r47, r46
  Const        r48, "n_nationkey"
  Move         r49, r42
L15:
  LessInt      r50, r49, r47
  JumpIfFalse  r50, L6
  Index        r51, r46, r49
  Move         r21, r51
  Index        r52, r45, r33
  Index        r53, r21, r48
  Equal        r54, r52, r53
  JumpIfFalse  r54, L7
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r55, r4
  Len          r56, r55
  Const        r57, "o_custkey"
  Const        r58, "c_custkey"
  Move         r59, r42
L14:
  LessInt      r60, r59, r56
  JumpIfFalse  r60, L7
  Index        r61, r55, r59
  Move         r62, r61
  Index        r63, r62, r57
  Index        r64, r45, r58
  Equal        r65, r63, r64
  JumpIfFalse  r65, L8
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r66, r5
  Len          r67, r66
  Const        r68, "l_orderkey"
  Const        r69, "o_orderkey"
  Move         r70, r42
L13:
  LessInt      r71, r70, r67
  JumpIfFalse  r71, L8
  Index        r72, r66, r70
  Move         r73, r72
  Index        r74, r73, r68
  Index        r75, r62, r69
  Equal        r76, r74, r75
  JumpIfFalse  r76, L9
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r77, r3
  Len          r78, r77
  Const        r79, "s_suppkey"
  Const        r80, "l_suppkey"
  Move         r81, r42
L12:
  LessInt      r82, r81, r78
  JumpIfFalse  r82, L9
  Index        r83, r77, r81
  Move         r84, r83
  Index        r85, r84, r79
  Index        r86, r73, r80
  Equal        r87, r85, r86
  JumpIfFalse  r87, L10
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Index        r88, r62, r31
  Const        r89, "1994-01-01"
  LessEq       r90, r89, r88
  Index        r91, r62, r31
  Const        r92, "1995-01-01"
  Less         r93, r91, r92
  Index        r94, r84, r32
  Index        r95, r45, r33
  Equal        r96, r94, r95
  Move         r97, r90
  JumpIfFalse  r97, L11
  Move         r97, r93
  JumpIfFalse  r97, L11
  Move         r97, r96
L11:
  JumpIfFalse  r97, L10
  // nation: n.n_name,
  Const        r98, "nation"
  Index        r99, r21, r35
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r100, "revenue"
  Index        r101, r73, r37
  Index        r102, r73, r38
  Sub          r103, r29, r102
  Mul          r104, r101, r103
  // nation: n.n_name,
  Move         r105, r98
  Move         r106, r99
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r107, r100
  Move         r108, r104
  // select {
  MakeMap      r109, 2, r105
  // from c in customer
  Append       r110, r30, r109
  Move         r30, r110
L10:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Add          r81, r81, r29
  Jump         L12
L9:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Add          r70, r70, r29
  Jump         L13
L8:
  // join o in orders on o.o_custkey == c.c_custkey
  Add          r59, r59, r29
  Jump         L14
L7:
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Add          r49, r49, r29
  Jump         L15
L6:
  // from c in customer
  AddInt       r41, r41, r29
  Jump         L16
L5:
  // from r in local_customer_supplier_orders
  Const        r111, []
  // n_name: g.key,
  Const        r112, "key"
  // from r in local_customer_supplier_orders
  IterPrep     r113, r30
  Len          r114, r113
  Const        r115, 0
  MakeMap      r116, 0, r0
  Const        r118, []
  Move         r117, r118
L19:
  LessInt      r119, r115, r114
  JumpIfFalse  r119, L17
  Index        r120, r113, r115
  Move         r17, r120
  // group by r.nation into g
  Index        r121, r17, r34
  Str          r122, r121
  In           r123, r122, r116
  JumpIfTrue   r123, L18
  // from r in local_customer_supplier_orders
  Const        r124, "__group__"
  Const        r125, true
  // group by r.nation into g
  Move         r126, r121
  // from r in local_customer_supplier_orders
  Const        r127, "items"
  Move         r128, r118
  Const        r129, "count"
  Move         r130, r124
  Move         r131, r125
  Move         r132, r112
  Move         r133, r126
  Move         r134, r127
  Move         r135, r128
  Move         r136, r129
  Move         r137, r42
  MakeMap      r138, 4, r130
  SetIndex     r116, r122, r138
  Append       r139, r117, r138
  Move         r117, r139
L18:
  Index        r140, r116, r122
  Index        r141, r140, r127
  Append       r142, r141, r120
  SetIndex     r140, r127, r142
  Index        r143, r140, r129
  AddInt       r144, r143, r29
  SetIndex     r140, r129, r144
  AddInt       r115, r115, r29
  Jump         L19
L17:
  Move         r145, r42
  Len          r146, r117
L25:
  LessInt      r147, r145, r146
  JumpIfFalse  r147, L20
  Index        r148, r117, r145
  Move         r149, r148
  // n_name: g.key,
  Const        r150, "n_name"
  Index        r151, r149, r112
  // revenue: sum(from x in g select x.revenue)
  Const        r152, "revenue"
  Const        r153, []
  IterPrep     r154, r149
  Len          r155, r154
  Move         r156, r42
L22:
  LessInt      r157, r156, r155
  JumpIfFalse  r157, L21
  Index        r158, r154, r156
  Move         r159, r158
  Index        r160, r159, r36
  Append       r161, r153, r160
  Move         r153, r161
  AddInt       r156, r156, r29
  Jump         L22
L21:
  Sum          r162, r153
  // n_name: g.key,
  Move         r163, r150
  Move         r164, r151
  // revenue: sum(from x in g select x.revenue)
  Move         r165, r152
  Move         r166, r162
  // select {
  MakeMap      r167, 2, r163
  // sort by -sum(from x in g select x.revenue)
  Const        r168, []
  IterPrep     r169, r149
  Len          r170, r169
  Move         r171, r42
L24:
  LessInt      r172, r171, r170
  JumpIfFalse  r172, L23
  Index        r173, r169, r171
  Move         r159, r173
  Index        r174, r159, r36
  Append       r175, r168, r174
  Move         r168, r175
  AddInt       r171, r171, r29
  Jump         L24
L23:
  Sum          r176, r168
  Neg          r177, r176
  Move         r178, r177
  // from r in local_customer_supplier_orders
  Move         r179, r167
  MakeList     r180, 2, r178
  Append       r181, r111, r180
  Move         r111, r181
  AddInt       r145, r145, r29
  Jump         L25
L20:
  // sort by -sum(from x in g select x.revenue)
  Sort         r182, r111
  // from r in local_customer_supplier_orders
  Move         r111, r182
  // json(result)
  JSON         r111
  // expect result == [
  Const        r183, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r184, r111, r183
  Expect       r184
  Return       r0
