func main (regs=225)
L9:
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900, "l_orderkey": 3000, "l_suppkey": 200}]
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
  Len          r8, r7
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r10, r9
  // from r in region
  Const        r11, 0
  EqualInt     r12, r8, r11
  JumpIfTrue   r12, L0
  EqualInt     r13, r10, r11
  JumpIfTrue   r13, L0
  LessEq       r14, r10, r8
  JumpIfFalse  r14, L1
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r15, 0, r0
  Const        r16, 0
L4:
  Less         r17, r16, r10
  JumpIfFalse  r17, L2
  Index        r18, r9, r16
  Move         r19, r18
  Const        r20, "n_regionkey"
  Index        r21, r19, r20
  Index        r22, r15, r21
  Const        r23, nil
  NotEqual     r24, r22, r23
  JumpIfTrue   r24, L3
  MakeList     r25, 0, r0
  SetIndex     r15, r21, r25
L3:
  Index        r22, r15, r21
  Append       r26, r22, r18
  SetIndex     r15, r21, r26
  Const        r27, 1
  Add          r16, r16, r27
  Jump         L4
L2:
  // from r in region
  Const        r29, 0
L8:
  Less         r30, r29, r8
  JumpIfFalse  r30, L0
  Index        r32, r7, r29
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r33, "r_regionkey"
  Index        r34, r32, r33
  // from r in region
  Index        r35, r15, r34
  Const        r36, nil
  NotEqual     r37, r35, r36
  JumpIfFalse  r37, L5
  Len          r38, r35
  Const        r39, 0
L7:
  Less         r40, r39, r38
  JumpIfFalse  r40, L5
  Index        r19, r35, r39
  // where r.r_name == "ASIA"
  Const        r42, "r_name"
  Index        r43, r32, r42
  Const        r44, "ASIA"
  Equal        r45, r43, r44
  JumpIfFalse  r45, L6
  // from r in region
  Append       r6, r6, r19
L6:
  Const        r47, 1
  Add          r39, r39, r47
  Jump         L7
L5:
  Const        r49, 1
  Add          r29, r29, r49
  Jump         L8
L0:
  Jump         L9
L1:
  MakeMap      r51, 0, r0
  Const        r52, 0
L13:
  Less         r53, r52, r8
  JumpIfFalse  r53, L10
  Index        r54, r7, r52
  Move         r32, r54
  // where r.r_name == "ASIA"
  Index        r55, r32, r42
  Equal        r56, r55, r44
  JumpIfFalse  r56, L11
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r57, r32, r33
  // from r in region
  Index        r58, r51, r57
  Const        r59, nil
  NotEqual     r60, r58, r59
  JumpIfTrue   r60, L12
  MakeList     r61, 0, r0
  SetIndex     r51, r57, r61
L12:
  Index        r58, r51, r57
  Append       r62, r58, r54
  SetIndex     r51, r57, r62
L11:
  Const        r63, 1
  Add          r52, r52, r63
  Jump         L13
L10:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r65, 0
L18:
  Less         r66, r65, r10
  JumpIfFalse  r66, L14
  Index        r19, r9, r65
  Index        r68, r19, r20
  Index        r69, r51, r68
  Const        r70, nil
  NotEqual     r71, r69, r70
  JumpIfFalse  r71, L15
  Len          r72, r69
  Const        r73, 0
L17:
  Less         r74, r73, r72
  JumpIfFalse  r74, L15
  Index        r32, r69, r73
  // where r.r_name == "ASIA"
  Index        r76, r32, r42
  Equal        r77, r76, r44
  JumpIfFalse  r77, L16
  // from r in region
  Append       r6, r6, r19
L16:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r79, 1
  Add          r73, r73, r79
  Jump         L17
L15:
  Const        r81, 1
  Add          r65, r65, r81
  Jump         L18
L14:
  // from c in customer
  Const        r83, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r84, "o_orderdate"
  Const        r85, "s_nationkey"
  Const        r86, "c_nationkey"
  // nation: n.n_name,
  Const        r87, "nation"
  Const        r88, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r89, "revenue"
  Const        r90, "l_extendedprice"
  // from c in customer
  IterPrep     r92, r2
  Len          r93, r92
  Const        r95, 0
  Move         r94, r95
L31:
  LessInt      r96, r94, r93
  JumpIfFalse  r96, L19
  Index        r98, r92, r94
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r99, r6
  Len          r100, r99
  Const        r101, "n_nationkey"
  Move         r102, r95
L30:
  LessInt      r103, r102, r100
  JumpIfFalse  r103, L20
  Index        r19, r99, r102
  Index        r105, r98, r86
  Index        r106, r19, r101
  Equal        r107, r105, r106
  JumpIfFalse  r107, L21
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r108, r4
  Len          r109, r108
  Const        r110, "o_custkey"
  Const        r111, "c_custkey"
  Move         r112, r95
L29:
  LessInt      r113, r112, r109
  JumpIfFalse  r113, L21
  Index        r115, r108, r112
  Index        r116, r115, r110
  Index        r117, r98, r111
  Equal        r118, r116, r117
  JumpIfFalse  r118, L22
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r119, r5
  Len          r120, r119
  Const        r121, "l_orderkey"
  Const        r122, "o_orderkey"
  Move         r123, r95
L28:
  LessInt      r124, r123, r120
  JumpIfFalse  r124, L22
  Index        r126, r119, r123
  Index        r127, r126, r121
  Index        r128, r115, r122
  Equal        r129, r127, r128
  JumpIfFalse  r129, L23
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r130, r3
  Len          r131, r130
  Const        r132, "s_suppkey"
  Const        r133, "l_suppkey"
  Move         r134, r95
L27:
  LessInt      r135, r134, r131
  JumpIfFalse  r135, L23
  Index        r137, r130, r134
  Index        r138, r137, r132
  Index        r139, r126, r133
  Equal        r140, r138, r139
  JumpIfFalse  r140, L24
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Index        r141, r115, r84
  Const        r142, "1994-01-01"
  LessEq       r143, r142, r141
  Index        r144, r115, r84
  Const        r145, "1995-01-01"
  Less         r146, r144, r145
  Index        r147, r137, r85
  Index        r148, r98, r86
  Equal        r149, r147, r148
  Move         r150, r143
  JumpIfFalse  r150, L25
L25:
  Move         r151, r146
  JumpIfFalse  r151, L26
  Move         r151, r149
L26:
  JumpIfFalse  r151, L24
  // nation: n.n_name,
  Const        r152, "nation"
  Index        r153, r19, r88
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r154, "revenue"
  Index        r155, r126, r90
  Const        r156, 1
  // select {
  MakeMap      r162, 2, r152
  // from c in customer
  Append       r83, r83, r162
L24:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Add          r134, r134, r156
  Jump         L27
L23:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Add          r123, r123, r156
  Jump         L28
L22:
  // join o in orders on o.o_custkey == c.c_custkey
  Add          r112, r112, r156
  Jump         L29
L21:
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Add          r102, r102, r156
  Jump         L30
L20:
  // from c in customer
  AddInt       r94, r94, r156
  Jump         L31
L19:
  // from r in local_customer_supplier_orders
  Const        r164, []
  // n_name: g.key,
  Const        r165, "key"
  // from r in local_customer_supplier_orders
  IterPrep     r166, r83
  Len          r167, r166
  Const        r168, 0
  MakeMap      r169, 0, r0
  Const        r170, []
L34:
  LessInt      r171, r168, r167
  JumpIfFalse  r171, L32
  Index        r172, r166, r168
  // group by r.nation into g
  Index        r173, r172, r87
  Str          r174, r173
  In           r175, r174, r169
  JumpIfTrue   r175, L33
  // from r in local_customer_supplier_orders
  Const        r176, []
  Const        r177, "__group__"
  Const        r178, true
  // group by r.nation into g
  Move         r179, r173
  // from r in local_customer_supplier_orders
  Const        r180, "items"
  Move         r181, r176
  MakeMap      r182, 3, r177
  SetIndex     r169, r174, r182
  Append       r170, r170, r182
L33:
  Index        r184, r169, r174
  Index        r185, r184, r180
  Append       r186, r185, r172
  SetIndex     r184, r180, r186
  AddInt       r168, r168, r156
  Jump         L34
L32:
  Move         r187, r95
  Len          r188, r170
L40:
  LessInt      r189, r187, r188
  JumpIfFalse  r189, L35
  Index        r191, r170, r187
  // n_name: g.key,
  Const        r192, "n_name"
  Index        r193, r191, r165
  // revenue: sum(from x in g select x.revenue)
  Const        r194, "revenue"
  Const        r195, []
  IterPrep     r196, r191
  Len          r197, r196
  Move         r198, r95
L37:
  LessInt      r199, r198, r197
  JumpIfFalse  r199, L36
  Index        r201, r196, r198
  Index        r202, r201, r89
  Append       r195, r195, r202
  AddInt       r198, r198, r156
  Jump         L37
L36:
  // select {
  MakeMap      r207, 2, r192
  // sort by -sum(from x in g select x.revenue)
  Const        r208, []
  IterPrep     r209, r191
  Len          r210, r209
  Move         r211, r95
L39:
  LessInt      r212, r211, r210
  JumpIfFalse  r212, L38
  Index        r201, r209, r211
  Index        r214, r201, r89
  Append       r208, r208, r214
  AddInt       r211, r211, r156
  Jump         L39
L38:
  Sum          r216, r208
  Neg          r218, r216
  // from r in local_customer_supplier_orders
  Move         r219, r207
  MakeList     r220, 2, r218
  Append       r164, r164, r220
  AddInt       r187, r187, r156
  Jump         L40
L35:
  // sort by -sum(from x in g select x.revenue)
  Sort         r164, r164
  // json(result)
  JSON         r164
  // expect result == [
  Const        r223, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r224, r164, r223
  Expect       r224
  Return       r0
