func main (regs=189)
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900, "l_orderkey": 3000, "l_suppkey": 200}]
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
  Len          r8, r7
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r10, r9
  Const        r11, "n_regionkey"
  Const        r12, "r_regionkey"
  // where r.r_name == "ASIA"
  Const        r13, "r_name"
  // from r in region
  Const        r14, 0
L4:
  LessInt      r15, r14, r8
  JumpIfFalse  r15, L0
  Index        r17, r7, r14
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r18, 0
L3:
  LessInt      r19, r18, r10
  JumpIfFalse  r19, L1
  Index        r21, r9, r18
  Index        r22, r21, r11
  Index        r23, r17, r12
  Equal        r24, r22, r23
  JumpIfFalse  r24, L2
  // where r.r_name == "ASIA"
  Index        r25, r17, r13
  Const        r26, "ASIA"
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // from r in region
  Append       r6, r6, r21
L2:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r29, 1
  AddInt       r18, r18, r29
  Jump         L3
L1:
  // from r in region
  AddInt       r14, r14, r29
  Jump         L4
L0:
  // from c in customer
  Const        r30, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r31, "o_orderdate"
  Const        r32, "s_nationkey"
  Const        r33, "c_nationkey"
  // nation: n.n_name,
  Const        r34, "nation"
  Const        r35, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r36, "revenue"
  Const        r37, "l_extendedprice"
  Const        r38, "l_discount"
  // from c in customer
  IterPrep     r39, r2
  Len          r40, r39
  Const        r42, 0
  Move         r41, r42
L16:
  LessInt      r43, r41, r40
  JumpIfFalse  r43, L5
  Index        r45, r39, r41
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r46, r6
  Len          r47, r46
  Const        r48, "n_nationkey"
  Move         r49, r42
L15:
  LessInt      r50, r49, r47
  JumpIfFalse  r50, L6
  Index        r21, r46, r49
  Index        r52, r45, r33
  Index        r53, r21, r48
  Equal        r54, r52, r53
  JumpIfFalse  r54, L7
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r55, r4
  Len          r56, r55
  Const        r57, "o_custkey"
  Const        r58, "c_custkey"
  Move         r59, r42
L14:
  LessInt      r60, r59, r56
  JumpIfFalse  r60, L7
  Index        r62, r55, r59
  Index        r63, r62, r57
  Index        r64, r45, r58
  Equal        r65, r63, r64
  JumpIfFalse  r65, L8
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r66, r5
  Len          r67, r66
  Const        r68, "l_orderkey"
  Const        r69, "o_orderkey"
  Move         r70, r42
L13:
  LessInt      r71, r70, r67
  JumpIfFalse  r71, L8
  Index        r73, r66, r70
  Index        r74, r73, r68
  Index        r75, r62, r69
  Equal        r76, r74, r75
  JumpIfFalse  r76, L9
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r77, r3
  Len          r78, r77
  Const        r79, "s_suppkey"
  Const        r80, "l_suppkey"
  Move         r81, r42
L12:
  LessInt      r82, r81, r78
  JumpIfFalse  r82, L9
  Index        r84, r77, r81
  Index        r85, r84, r79
  Index        r86, r73, r80
  Equal        r87, r85, r86
  JumpIfFalse  r87, L10
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Index        r88, r62, r31
  Const        r89, "1994-01-01"
  LessEq       r90, r89, r88
  Index        r91, r62, r31
  Const        r92, "1995-01-01"
  Less         r93, r91, r92
  Index        r94, r84, r32
  Index        r95, r45, r33
  Equal        r96, r94, r95
  JumpIfFalse  r90, L11
  Move         r90, r93
  JumpIfFalse  r90, L11
  Move         r90, r96
L11:
  JumpIfFalse  r90, L10
  // nation: n.n_name,
  Const        r97, "nation"
  Index        r98, r21, r35
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r99, "revenue"
  Index        r100, r73, r37
  Index        r101, r73, r38
  Sub          r102, r29, r101
  Mul          r103, r100, r102
  // nation: n.n_name,
  Move         r104, r97
  Move         r105, r98
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r106, r99
  Move         r107, r103
  // select {
  MakeMap      r108, 2, r104
  // from c in customer
  Append       r30, r30, r108
L10:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Add          r81, r81, r29
  Jump         L12
L9:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Add          r70, r70, r29
  Jump         L13
L8:
  // join o in orders on o.o_custkey == c.c_custkey
  Add          r59, r59, r29
  Jump         L14
L7:
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Add          r49, r49, r29
  Jump         L15
L6:
  // from c in customer
  AddInt       r41, r41, r29
  Jump         L16
L5:
  // from r in local_customer_supplier_orders
  Const        r110, []
  // n_name: g.key,
  Const        r111, "key"
  // from r in local_customer_supplier_orders
  IterPrep     r112, r30
  Len          r113, r112
  Const        r114, 0
  MakeMap      r115, 0, r0
  Const        r116, []
L19:
  LessInt      r118, r114, r113
  JumpIfFalse  r118, L17
  Index        r119, r112, r114
  // group by r.nation into g
  Index        r120, r119, r34
  Str          r121, r120
  In           r122, r121, r115
  JumpIfTrue   r122, L18
  // from r in local_customer_supplier_orders
  Const        r123, []
  Const        r124, "__group__"
  Const        r125, true
  Const        r126, "key"
  // group by r.nation into g
  Move         r127, r120
  // from r in local_customer_supplier_orders
  Const        r128, "items"
  Move         r129, r123
  Const        r130, "count"
  Const        r131, 0
  Move         r132, r124
  Move         r133, r125
  Move         r134, r126
  Move         r135, r127
  Move         r136, r128
  Move         r137, r129
  Move         r138, r130
  Move         r139, r131
  MakeMap      r140, 4, r132
  SetIndex     r115, r121, r140
  Append       r116, r116, r140
L18:
  Const        r142, "items"
  Index        r143, r115, r121
  Index        r144, r143, r142
  Append       r145, r144, r119
  SetIndex     r143, r142, r145
  Const        r146, "count"
  Index        r147, r143, r146
  AddInt       r148, r147, r29
  SetIndex     r143, r146, r148
  AddInt       r114, r114, r29
  Jump         L19
L17:
  Move         r149, r42
  Len          r150, r116
L25:
  LessInt      r151, r149, r150
  JumpIfFalse  r151, L20
  Index        r153, r116, r149
  // n_name: g.key,
  Const        r154, "n_name"
  Index        r155, r153, r111
  // revenue: sum(from x in g select x.revenue)
  Const        r156, "revenue"
  Const        r157, []
  IterPrep     r158, r153
  Len          r159, r158
  Move         r160, r42
L22:
  LessInt      r161, r160, r159
  JumpIfFalse  r161, L21
  Index        r163, r158, r160
  Index        r164, r163, r36
  Append       r157, r157, r164
  AddInt       r160, r160, r29
  Jump         L22
L21:
  Sum          r166, r157
  // n_name: g.key,
  Move         r167, r154
  Move         r168, r155
  // revenue: sum(from x in g select x.revenue)
  Move         r169, r156
  Move         r170, r166
  // select {
  MakeMap      r171, 2, r167
  // sort by -sum(from x in g select x.revenue)
  Const        r172, []
  IterPrep     r173, r153
  Len          r174, r173
  Move         r175, r42
L24:
  LessInt      r176, r175, r174
  JumpIfFalse  r176, L23
  Index        r163, r173, r175
  Index        r178, r163, r36
  Append       r172, r172, r178
  AddInt       r175, r175, r29
  Jump         L24
L23:
  Sum          r180, r172
  Neg          r182, r180
  // from r in local_customer_supplier_orders
  Move         r183, r171
  MakeList     r184, 2, r182
  Append       r110, r110, r184
  AddInt       r149, r149, r29
  Jump         L25
L20:
  // sort by -sum(from x in g select x.revenue)
  Sort         r110, r110
  // json(result)
  JSON         r110
  // expect result == [
  Const        r187, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r188, r110, r187
  Expect       r188
  Return       r0
