func main (regs=326)
L0:
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900, "l_orderkey": 3000, "l_suppkey": 200}]
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
  Len          r8, r7
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r10, r9
  // from r in region
  Const        r11, 0
  EqualInt     r12, r8, r11
  JumpIfTrue   r12, L0
  EqualInt     r13, r10, r11
  JumpIfTrue   r13, L0
  LessEq       r14, r10, r8
  JumpIfFalse  r14, L1
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r15, 0, r0
  Const        r16, 0
L4:
  LessInt      r17, r16, r10
  JumpIfFalse  r17, L2
  Index        r18, r9, r16
  Move         r19, r18
  Const        r20, "n_regionkey"
  Index        r21, r19, r20
  Index        r22, r15, r21
  Const        r23, nil
  NotEqual     r24, r22, r23
  JumpIfTrue   r24, L3
  MakeList     r25, 0, r0
  SetIndex     r15, r21, r25
L3:
  Index        r22, r15, r21
  Append       r26, r22, r18
  SetIndex     r15, r21, r26
  Const        r27, 1
  AddInt       r16, r16, r27
  Jump         L4
L2:
  // from r in region
  Const        r28, 0
L8:
  LessInt      r29, r28, r8
  JumpIfFalse  r29, L0
  Index        r31, r7, r28
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r32, "r_regionkey"
  Index        r33, r31, r32
  // from r in region
  Index        r34, r15, r33
  Const        r35, nil
  NotEqual     r36, r34, r35
  JumpIfFalse  r36, L5
  Len          r37, r34
  Const        r38, 0
L7:
  LessInt      r39, r38, r37
  JumpIfFalse  r39, L5
  Index        r19, r34, r38
  // where r.r_name == "ASIA"
  Const        r41, "r_name"
  Index        r42, r31, r41
  Const        r43, "ASIA"
  Equal        r44, r42, r43
  JumpIfFalse  r44, L6
  // from r in region
  Append       r6, r6, r19
L6:
  Const        r46, 1
  AddInt       r38, r38, r46
  Jump         L7
L5:
  Const        r47, 1
  AddInt       r28, r28, r47
  Jump         L8
L1:
  MakeMap      r48, 0, r0
  Const        r49, 0
L12:
  LessInt      r50, r49, r8
  JumpIfFalse  r50, L9
  Index        r51, r7, r49
  Move         r31, r51
  // where r.r_name == "ASIA"
  Const        r52, "r_name"
  Index        r53, r31, r52
  Const        r54, "ASIA"
  Equal        r55, r53, r54
  JumpIfFalse  r55, L10
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r56, "r_regionkey"
  Index        r57, r31, r56
  // from r in region
  Index        r58, r48, r57
  Const        r59, nil
  NotEqual     r60, r58, r59
  JumpIfTrue   r60, L11
  MakeList     r61, 0, r0
  SetIndex     r48, r57, r61
L11:
  Index        r58, r48, r57
  Append       r62, r58, r51
  SetIndex     r48, r57, r62
L10:
  Const        r63, 1
  AddInt       r49, r49, r63
  Jump         L12
L9:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r64, 0
L17:
  LessInt      r65, r64, r10
  JumpIfFalse  r65, L13
  Index        r19, r9, r64
  Const        r67, "n_regionkey"
  Index        r68, r19, r67
  Index        r69, r48, r68
  Const        r70, nil
  NotEqual     r71, r69, r70
  JumpIfFalse  r71, L14
  Len          r72, r69
  Const        r73, 0
L16:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L14
  Index        r31, r69, r73
  // where r.r_name == "ASIA"
  Const        r76, "r_name"
  Index        r77, r31, r76
  Const        r78, "ASIA"
  Equal        r79, r77, r78
  JumpIfFalse  r79, L15
  // from r in region
  Append       r6, r6, r19
L15:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r81, 1
  AddInt       r73, r73, r81
  Jump         L16
L14:
  Const        r82, 1
  AddInt       r64, r64, r82
  Jump         L17
L13:
  // from c in customer
  Const        r83, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r84, "o_orderdate"
  Const        r85, "o_orderdate"
  Const        r86, "s_nationkey"
  Const        r87, "c_nationkey"
  // nation: n.n_name,
  Const        r88, "nation"
  Const        r89, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r90, "revenue"
  Const        r91, "l_extendedprice"
  Const        r92, "l_discount"
  // from c in customer
  IterPrep     r93, r2
  Len          r94, r93
  Const        r95, 0
L30:
  LessInt      r97, r95, r94
  JumpIfFalse  r97, L18
  Index        r99, r93, r95
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r100, r6
  Len          r101, r100
  Const        r102, "c_nationkey"
  Const        r103, "n_nationkey"
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r104, "o_orderdate"
  Const        r105, "o_orderdate"
  Const        r106, "s_nationkey"
  Const        r107, "c_nationkey"
  // nation: n.n_name,
  Const        r108, "nation"
  Const        r109, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r110, "revenue"
  Const        r111, "l_extendedprice"
  Const        r112, "l_discount"
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Const        r113, 0
L29:
  LessInt      r115, r113, r101
  JumpIfFalse  r115, L19
  Index        r19, r100, r113
  Const        r117, "c_nationkey"
  Index        r118, r99, r117
  Const        r119, "n_nationkey"
  Index        r120, r19, r119
  Equal        r121, r118, r120
  JumpIfFalse  r121, L20
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r122, r4
  Len          r123, r122
  Const        r124, "o_custkey"
  Const        r125, "c_custkey"
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r126, "o_orderdate"
  Const        r127, "o_orderdate"
  Const        r128, "s_nationkey"
  Const        r129, "c_nationkey"
  // nation: n.n_name,
  Const        r130, "nation"
  Const        r131, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r132, "revenue"
  Const        r133, "l_extendedprice"
  Const        r134, "l_discount"
  // join o in orders on o.o_custkey == c.c_custkey
  Const        r135, 0
L28:
  LessInt      r137, r135, r123
  JumpIfFalse  r137, L20
  Index        r139, r122, r135
  Const        r140, "o_custkey"
  Index        r141, r139, r140
  Const        r142, "c_custkey"
  Index        r143, r99, r142
  Equal        r144, r141, r143
  JumpIfFalse  r144, L21
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r145, r5
  Len          r146, r145
  Const        r147, "l_orderkey"
  Const        r148, "o_orderkey"
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r149, "o_orderdate"
  Const        r150, "o_orderdate"
  Const        r151, "s_nationkey"
  Const        r152, "c_nationkey"
  // nation: n.n_name,
  Const        r153, "nation"
  Const        r154, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r155, "revenue"
  Const        r156, "l_extendedprice"
  Const        r157, "l_discount"
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Const        r158, 0
L27:
  LessInt      r160, r158, r146
  JumpIfFalse  r160, L21
  Index        r162, r145, r158
  Const        r163, "l_orderkey"
  Index        r164, r162, r163
  Const        r165, "o_orderkey"
  Index        r166, r139, r165
  Equal        r167, r164, r166
  JumpIfFalse  r167, L22
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r168, r3
  Len          r169, r168
  Const        r170, "s_suppkey"
  Const        r171, "l_suppkey"
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r172, "o_orderdate"
  Const        r173, "o_orderdate"
  Const        r174, "s_nationkey"
  Const        r175, "c_nationkey"
  // nation: n.n_name,
  Const        r176, "nation"
  Const        r177, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r178, "revenue"
  Const        r179, "l_extendedprice"
  Const        r180, "l_discount"
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Const        r181, 0
L26:
  LessInt      r183, r181, r169
  JumpIfFalse  r183, L22
  Index        r185, r168, r181
  Const        r186, "s_suppkey"
  Index        r187, r185, r186
  Const        r188, "l_suppkey"
  Index        r189, r162, r188
  Equal        r190, r187, r189
  JumpIfFalse  r190, L23
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r191, "o_orderdate"
  Index        r192, r139, r191
  Const        r193, "1994-01-01"
  LessEq       r194, r193, r192
  Const        r195, "o_orderdate"
  Index        r196, r139, r195
  Const        r197, "1995-01-01"
  Less         r198, r196, r197
  Const        r199, "s_nationkey"
  Index        r200, r185, r199
  Const        r201, "c_nationkey"
  Index        r202, r99, r201
  Equal        r203, r200, r202
  Move         r204, r194
  JumpIfFalse  r204, L24
L24:
  Move         r205, r198
  JumpIfFalse  r205, L25
  Move         r205, r203
L25:
  JumpIfFalse  r205, L23
  // nation: n.n_name,
  Const        r206, "nation"
  Const        r207, "n_name"
  Index        r208, r19, r207
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r209, "revenue"
  Const        r210, "l_extendedprice"
  Index        r211, r162, r210
  Const        r212, 1
  Const        r213, "l_discount"
  Index        r214, r162, r213
  Sub          r215, r212, r214
  Mul          r216, r211, r215
  // nation: n.n_name,
  Move         r217, r206
  Move         r218, r208
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r219, r209
  Move         r220, r216
  // select {
  MakeMap      r221, 2, r217
  // from c in customer
  Append       r83, r83, r221
L23:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Const        r223, 1
  Add          r181, r181, r223
  Jump         L26
L22:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Const        r224, 1
  Add          r158, r158, r224
  Jump         L27
L21:
  // join o in orders on o.o_custkey == c.c_custkey
  Const        r225, 1
  Add          r135, r135, r225
  Jump         L28
L20:
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Const        r226, 1
  Add          r113, r113, r226
  Jump         L29
L19:
  // from c in customer
  Const        r227, 1
  AddInt       r95, r95, r227
  Jump         L30
L18:
  // from r in local_customer_supplier_orders
  Const        r228, []
  // group by r.nation into g
  Const        r229, "nation"
  // n_name: g.key,
  Const        r230, "n_name"
  Const        r231, "key"
  // revenue: sum(from x in g select x.revenue)
  Const        r232, "revenue"
  Const        r233, "revenue"
  // sort by -sum(from x in g select x.revenue)
  Const        r234, "revenue"
  // from r in local_customer_supplier_orders
  IterPrep     r235, r83
  Len          r236, r235
  Const        r237, 0
  MakeMap      r238, 0, r0
  Const        r239, []
L33:
  LessInt      r241, r237, r236
  JumpIfFalse  r241, L31
  Index        r242, r235, r237
  Move         r31, r242
  // group by r.nation into g
  Const        r243, "nation"
  Index        r244, r31, r243
  Str          r245, r244
  In           r246, r245, r238
  JumpIfTrue   r246, L32
  // from r in local_customer_supplier_orders
  Const        r247, []
  Const        r248, "__group__"
  Const        r249, true
  Const        r250, "key"
  // group by r.nation into g
  Move         r251, r244
  // from r in local_customer_supplier_orders
  Const        r252, "items"
  Move         r253, r247
  Const        r254, "count"
  Const        r255, 0
  Move         r256, r248
  Move         r257, r249
  Move         r258, r250
  Move         r259, r251
  Move         r260, r252
  Move         r261, r253
  Move         r262, r254
  Move         r263, r255
  MakeMap      r264, 4, r256
  SetIndex     r238, r245, r264
  Append       r239, r239, r264
L32:
  Const        r266, "items"
  Index        r267, r238, r245
  Index        r268, r267, r266
  Append       r269, r268, r242
  SetIndex     r267, r266, r269
  Const        r270, "count"
  Index        r271, r267, r270
  Const        r272, 1
  AddInt       r273, r271, r272
  SetIndex     r267, r270, r273
  Const        r274, 1
  AddInt       r237, r237, r274
  Jump         L33
L31:
  Const        r275, 0
  Len          r277, r239
L39:
  LessInt      r278, r275, r277
  JumpIfFalse  r278, L34
  Index        r280, r239, r275
  // n_name: g.key,
  Const        r281, "n_name"
  Const        r282, "key"
  Index        r283, r280, r282
  // revenue: sum(from x in g select x.revenue)
  Const        r284, "revenue"
  Const        r285, []
  Const        r286, "revenue"
  IterPrep     r287, r280
  Len          r288, r287
  Const        r289, 0
L36:
  LessInt      r291, r289, r288
  JumpIfFalse  r291, L35
  Index        r293, r287, r289
  Const        r294, "revenue"
  Index        r295, r293, r294
  Append       r285, r285, r295
  Const        r297, 1
  AddInt       r289, r289, r297
  Jump         L36
L35:
  Sum          r298, r285
  // n_name: g.key,
  Move         r299, r281
  Move         r300, r283
  // revenue: sum(from x in g select x.revenue)
  Move         r301, r284
  Move         r302, r298
  // select {
  MakeMap      r303, 2, r299
  // sort by -sum(from x in g select x.revenue)
  Const        r304, []
  Const        r305, "revenue"
  IterPrep     r306, r280
  Len          r307, r306
  Const        r308, 0
L38:
  LessInt      r310, r308, r307
  JumpIfFalse  r310, L37
  Index        r293, r306, r308
  Const        r312, "revenue"
  Index        r313, r293, r312
  Append       r304, r304, r313
  Const        r315, 1
  AddInt       r308, r308, r315
  Jump         L38
L37:
  Sum          r316, r304
  Neg          r318, r316
  // from r in local_customer_supplier_orders
  Move         r319, r303
  MakeList     r320, 2, r318
  Append       r228, r228, r320
  Const        r322, 1
  AddInt       r275, r275, r322
  Jump         L39
L34:
  // sort by -sum(from x in g select x.revenue)
  Sort         r228, r228
  // json(result)
  JSON         r228
  // expect result == [
  Const        r324, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r325, r228, r324
  Expect       r325
  Return       r0
