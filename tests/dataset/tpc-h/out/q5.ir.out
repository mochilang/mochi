func main (regs=228)
L0:
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900, "l_orderkey": 3000, "l_suppkey": 200}]
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
  Len          r8, r7
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r10, r9
  // from r in region
  Const        r11, 0
  EqualInt     r12, r8, r11
  JumpIfTrue   r12, L0
  EqualInt     r13, r10, r11
  JumpIfTrue   r13, L0
  LessEq       r14, r10, r8
  JumpIfFalse  r14, L1
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r15, 0, r0
  Const        r16, 0
L4:
  LessInt      r17, r16, r10
  JumpIfFalse  r17, L2
  Index        r18, r9, r16
  Move         r19, r18
  Const        r20, "n_regionkey"
  Index        r21, r19, r20
  Index        r22, r15, r21
  Const        r23, nil
  NotEqual     r24, r22, r23
  JumpIfTrue   r24, L3
  MakeList     r25, 0, r0
  SetIndex     r15, r21, r25
L3:
  Index        r22, r15, r21
  Append       r26, r22, r18
  SetIndex     r15, r21, r26
  Const        r27, 1
  AddInt       r16, r16, r27
  Jump         L4
L2:
  // from r in region
  Const        r28, 0
L8:
  LessInt      r29, r28, r8
  JumpIfFalse  r29, L0
  Index        r31, r7, r28
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r32, "r_regionkey"
  Index        r33, r31, r32
  // from r in region
  Index        r34, r15, r33
  NotEqual     r35, r34, r23
  JumpIfFalse  r35, L5
  Len          r36, r34
  Const        r37, 0
L7:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L5
  Index        r19, r34, r37
  // where r.r_name == "ASIA"
  Const        r40, "r_name"
  Index        r41, r31, r40
  Const        r42, "ASIA"
  Equal        r43, r41, r42
  JumpIfFalse  r43, L6
  // from r in region
  Append       r6, r6, r19
L6:
  AddInt       r37, r37, r27
  Jump         L7
L5:
  AddInt       r28, r28, r27
  Jump         L8
L1:
  MakeMap      r45, 0, r0
  Const        r46, 0
L12:
  LessInt      r47, r46, r8
  JumpIfFalse  r47, L9
  Index        r48, r7, r46
  Move         r31, r48
  // where r.r_name == "ASIA"
  Index        r49, r31, r40
  Equal        r50, r49, r42
  JumpIfFalse  r50, L10
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r51, r31, r32
  // from r in region
  Index        r52, r45, r51
  NotEqual     r53, r52, r23
  JumpIfTrue   r53, L11
  MakeList     r54, 0, r0
  SetIndex     r45, r51, r54
L11:
  Index        r52, r45, r51
  Append       r55, r52, r48
  SetIndex     r45, r51, r55
L10:
  AddInt       r46, r46, r27
  Jump         L12
L9:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r56, 0
L17:
  LessInt      r57, r56, r10
  JumpIfFalse  r57, L13
  Index        r19, r9, r56
  Index        r59, r19, r20
  Index        r60, r45, r59
  NotEqual     r61, r60, r23
  JumpIfFalse  r61, L14
  Len          r62, r60
  Const        r63, 0
L16:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L14
  Index        r31, r60, r63
  // where r.r_name == "ASIA"
  Index        r66, r31, r40
  Equal        r67, r66, r42
  JumpIfFalse  r67, L15
  // from r in region
  Append       r6, r6, r19
L15:
  // join n in nation on n.n_regionkey == r.r_regionkey
  AddInt       r63, r63, r27
  Jump         L16
L14:
  AddInt       r56, r56, r27
  Jump         L17
L13:
  // from c in customer
  Const        r69, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r70, "o_orderdate"
  Const        r71, "s_nationkey"
  Const        r72, "c_nationkey"
  // nation: n.n_name,
  Const        r73, "nation"
  Const        r74, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r75, "revenue"
  Const        r76, "l_extendedprice"
  Const        r77, "l_discount"
  // from c in customer
  IterPrep     r78, r2
  Len          r79, r78
  Move         r80, r11
L29:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L18
  Index        r83, r78, r80
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r84, r6
  Len          r85, r84
  Const        r86, "n_nationkey"
  Move         r87, r11
L28:
  LessInt      r88, r87, r85
  JumpIfFalse  r88, L19
  Index        r19, r84, r87
  Index        r90, r83, r72
  Index        r91, r19, r86
  Equal        r92, r90, r91
  JumpIfFalse  r92, L20
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r93, r4
  Len          r94, r93
  Const        r95, "o_custkey"
  Const        r96, "c_custkey"
  Move         r97, r11
L27:
  LessInt      r98, r97, r94
  JumpIfFalse  r98, L20
  Index        r100, r93, r97
  Index        r101, r100, r95
  Index        r102, r83, r96
  Equal        r103, r101, r102
  JumpIfFalse  r103, L21
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r104, r5
  Len          r105, r104
  Const        r106, "l_orderkey"
  Const        r107, "o_orderkey"
  Move         r108, r11
L26:
  LessInt      r109, r108, r105
  JumpIfFalse  r109, L21
  Index        r111, r104, r108
  Index        r112, r111, r106
  Index        r113, r100, r107
  Equal        r114, r112, r113
  JumpIfFalse  r114, L22
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r115, r3
  Len          r116, r115
  Const        r117, "s_suppkey"
  Const        r118, "l_suppkey"
  Move         r119, r11
L25:
  LessInt      r120, r119, r116
  JumpIfFalse  r120, L22
  Index        r122, r115, r119
  Index        r123, r122, r117
  Index        r124, r111, r118
  Equal        r125, r123, r124
  JumpIfFalse  r125, L23
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Index        r126, r100, r70
  Const        r127, "1994-01-01"
  LessEq       r128, r127, r126
  Index        r129, r100, r70
  Const        r130, "1995-01-01"
  Less         r131, r129, r130
  Index        r132, r122, r71
  Index        r133, r83, r72
  Equal        r134, r132, r133
  Move         r135, r128
  JumpIfFalse  r135, L24
  Move         r135, r131
  JumpIfFalse  r135, L24
  Move         r135, r134
L24:
  JumpIfFalse  r135, L23
  // nation: n.n_name,
  Const        r136, "nation"
  Index        r137, r19, r74
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r138, "revenue"
  Index        r139, r111, r76
  Index        r140, r111, r77
  Sub          r141, r27, r140
  Mul          r142, r139, r141
  // nation: n.n_name,
  Move         r143, r136
  Move         r144, r137
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r145, r138
  Move         r146, r142
  // select {
  MakeMap      r147, 2, r143
  // from c in customer
  Append       r69, r69, r147
L23:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Add          r119, r119, r27
  Jump         L25
L22:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Add          r108, r108, r27
  Jump         L26
L21:
  // join o in orders on o.o_custkey == c.c_custkey
  Add          r97, r97, r27
  Jump         L27
L20:
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Add          r87, r87, r27
  Jump         L28
L19:
  // from c in customer
  AddInt       r80, r80, r27
  Jump         L29
L18:
  // from r in local_customer_supplier_orders
  Const        r149, []
  // n_name: g.key,
  Const        r150, "key"
  // from r in local_customer_supplier_orders
  IterPrep     r151, r69
  Len          r152, r151
  Const        r153, 0
  MakeMap      r154, 0, r0
  Const        r155, []
L32:
  LessInt      r157, r153, r152
  JumpIfFalse  r157, L30
  Index        r158, r151, r153
  // group by r.nation into g
  Index        r159, r158, r73
  Str          r160, r159
  In           r161, r160, r154
  JumpIfTrue   r161, L31
  // from r in local_customer_supplier_orders
  Const        r162, []
  Const        r163, "__group__"
  Const        r164, true
  Const        r165, "key"
  // group by r.nation into g
  Move         r166, r159
  // from r in local_customer_supplier_orders
  Const        r167, "items"
  Move         r168, r162
  Const        r169, "count"
  Const        r170, 0
  Move         r171, r163
  Move         r172, r164
  Move         r173, r165
  Move         r174, r166
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  MakeMap      r179, 4, r171
  SetIndex     r154, r160, r179
  Append       r155, r155, r179
L31:
  Const        r181, "items"
  Index        r182, r154, r160
  Index        r183, r182, r181
  Append       r184, r183, r158
  SetIndex     r182, r181, r184
  Const        r185, "count"
  Index        r186, r182, r185
  AddInt       r187, r186, r27
  SetIndex     r182, r185, r187
  AddInt       r153, r153, r27
  Jump         L32
L30:
  Move         r188, r11
  Len          r189, r155
L38:
  LessInt      r190, r188, r189
  JumpIfFalse  r190, L33
  Index        r192, r155, r188
  // n_name: g.key,
  Const        r193, "n_name"
  Index        r194, r192, r150
  // revenue: sum(from x in g select x.revenue)
  Const        r195, "revenue"
  Const        r196, []
  IterPrep     r197, r192
  Len          r198, r197
  Move         r199, r11
L35:
  LessInt      r200, r199, r198
  JumpIfFalse  r200, L34
  Index        r202, r197, r199
  Index        r203, r202, r75
  Append       r196, r196, r203
  AddInt       r199, r199, r27
  Jump         L35
L34:
  Sum          r205, r196
  // n_name: g.key,
  Move         r206, r193
  Move         r207, r194
  // revenue: sum(from x in g select x.revenue)
  Move         r208, r195
  Move         r209, r205
  // select {
  MakeMap      r210, 2, r206
  // sort by -sum(from x in g select x.revenue)
  Const        r211, []
  IterPrep     r212, r192
  Len          r213, r212
  Move         r214, r11
L37:
  LessInt      r215, r214, r213
  JumpIfFalse  r215, L36
  Index        r202, r212, r214
  Index        r217, r202, r75
  Append       r211, r211, r217
  AddInt       r214, r214, r27
  Jump         L37
L36:
  Sum          r219, r211
  Neg          r221, r219
  // from r in local_customer_supplier_orders
  Move         r222, r210
  MakeList     r223, 2, r221
  Append       r149, r149, r223
  AddInt       r188, r188, r27
  Jump         L38
L33:
  // sort by -sum(from x in g select x.revenue)
  Sort         r149, r149
  // json(result)
  JSON         r149
  // expect result == [
  Const        r226, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r227, r149, r226
  Expect       r227
  Return       r0
