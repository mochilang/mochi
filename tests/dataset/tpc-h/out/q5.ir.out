func main (regs=27)
L0:
  // let region = [
  Const        r0, [{"r_name": "ASIA", "r_regionkey": 0}, {"r_name": "EUROPE", "r_regionkey": 1}]
L17:
  // let nation = [
  Const        r1, [{"n_name": "JAPAN", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "INDIA", "n_nationkey": 20, "n_regionkey": 0}, {"n_name": "FRANCE", "n_nationkey": 30, "n_regionkey": 1}]
L12:
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
L13:
  // let supplier = [
  Const        r3, [{"s_nationkey": 10, "s_suppkey": 100}, {"s_nationkey": 20, "s_suppkey": 200}]
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1994-03-15", "o_orderkey": 1000}, {"o_custkey": 2, "o_orderdate": "1994-06-10", "o_orderkey": 2000}, {"o_custkey": 2, "o_orderdate": "1995-01-01", "o_orderkey": 3000}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 1000, "l_suppkey": 100}, {"l_discount": 0.1, "l_extendedprice": 800, "l_orderkey": 2000, "l_suppkey": 200}, {"l_discount": 0.05, "l_extendedprice": 900, "l_orderkey": 3000, "l_suppkey": 200}]
L10:
  // from r in region
  Const        r6, []
  IterPrep     r7, r0
L21:
  Len          r8, r7
L14:
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r9, r1
  Len          r1, r9
L2:
  // from r in region
  Const        r10, 0
L7:
  EqualInt     r11, r8, r10
L11:
  JumpIfTrue   r11, L0
L16:
  EqualInt     r11, r1, r10
L1:
  JumpIfTrue   r11, L0
L3:
  LessEq       r11, r1, r8
  JumpIfFalse  r11, L1
L8:
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r11, 0, r0
  Move         r12, r10
  LessInt      r13, r12, r1
L6:
  JumpIfFalse  r13, L2
  Index        r13, r9, r12
L5:
  Move         r14, r13
L18:
  Const        r15, "n_regionkey"
  Index        r16, r14, r15
L15:
  Index        r17, r11, r16
  Const        r18, nil
  NotEqual     r19, r17, r18
  JumpIfTrue   r19, L3
  MakeList     r19, 0, r0
  SetIndex     r11, r16, r19
  Index        r17, r11, r16
  Append       r19, r17, r13
  SetIndex     r11, r16, r19
  Const        r19, 1
  AddInt       r12, r12, r19
  Jump         L1
  // from r in region
  Move         r12, r10
  LessInt      r17, r12, r8
  JumpIfFalse  r17, L0
  Index        r17, r7, r12
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r16, "r_regionkey"
  Index        r13, r17, r16
  // from r in region
  Index        r20, r11, r13
  NotEqual     r13, r20, r18
  JumpIfFalse  r13, L4
  Len          r13, r20
  Move         r11, r12
  LessInt      r21, r11, r13
  JumpIfFalse  r21, L4
  Index        r14, r20, r11
  // where r.r_name == "ASIA"
  Const        r13, "r_name"
  Index        r20, r17, r13
  Const        r22, "ASIA"
  Equal        r23, r20, r22
  JumpIfFalse  r23, L3
  // from r in region
  Append       r6, r6, r14
  AddInt       r11, r11, r19
  Jump         L5
L4:
  AddInt       r12, r12, r19
  Jump         L6
  MakeMap      r21, 0, r0
  Move         r12, r10
  LessInt      r20, r12, r8
  JumpIfFalse  r20, L5
  Index        r23, r7, r12
  Move         r17, r23
  // where r.r_name == "ASIA"
  Index        r20, r17, r13
  Equal        r8, r20, r22
  JumpIfFalse  r8, L7
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r8, r17, r16
  // from r in region
  Index        r16, r21, r8
  Move         r20, r18
  NotEqual     r18, r16, r20
  JumpIfTrue   r18, L6
  MakeList     r18, 0, r0
  SetIndex     r21, r8, r18
  Index        r16, r21, r8
  Append       r18, r16, r23
  SetIndex     r21, r8, r18
  AddInt       r12, r12, r19
  Jump         L8
  // join n in nation on n.n_regionkey == r.r_regionkey
  Move         r16, r10
  LessInt      r8, r16, r1
  JumpIfFalse  r8, L3
  Index        r14, r9, r16
  Index        r8, r14, r15
  Index        r15, r21, r8
  NotEqual     r18, r15, r20
  JumpIfFalse  r18, L9
  Len          r8, r15
  Move         r18, r16
  LessInt      r20, r18, r8
  JumpIfFalse  r20, L9
  Index        r17, r15, r18
  // where r.r_name == "ASIA"
  Index        r20, r17, r13
  Equal        r13, r20, r22
  JumpIfFalse  r13, L10
  // from r in region
  Append       r6, r6, r14
  // join n in nation on n.n_regionkey == r.r_regionkey
  AddInt       r18, r18, r19
  Jump         L11
L9:
  AddInt       r16, r16, r19
  Jump         L3
  // from c in customer
  Const        r20, []
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Const        r18, "o_orderdate"
  Const        r22, "s_nationkey"
  Const        r17, "c_nationkey"
  // nation: n.n_name,
  Const        r8, "nation"
  Const        r15, "n_name"
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r21, "revenue"
  Const        r1, "l_extendedprice"
  Const        r9, "l_discount"
  // from c in customer
  IterPrep     r12, r2
  Len          r2, r12
  Move         r23, r10
  LessInt      r16, r23, r2
  JumpIfFalse  r16, L12
  Index        r2, r12, r23
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  IterPrep     r12, r6
  Len          r6, r12
  Const        r16, "n_nationkey"
  Move         r7, r10
  LessInt      r11, r7, r6
  JumpIfFalse  r11, L12
  Index        r14, r12, r7
  Index        r13, r2, r17
  Index        r11, r14, r16
  Equal        r16, r13, r11
  JumpIfFalse  r16, L13
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r16, r4
  Len          r4, r16
  Const        r11, "o_custkey"
  Const        r13, "c_custkey"
  Move         r6, r10
  LessInt      r12, r6, r4
  JumpIfFalse  r12, L13
  Index        r12, r16, r6
  Index        r16, r12, r11
  Index        r11, r2, r13
  Equal        r13, r16, r11
  JumpIfFalse  r13, L14
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r13, r5
  Len          r5, r13
  Const        r11, "l_orderkey"
  Const        r16, "o_orderkey"
  Move         r4, r10
  LessInt      r24, r4, r5
  JumpIfFalse  r24, L14
  Index        r24, r13, r4
  Index        r13, r24, r11
  Index        r11, r12, r16
  Equal        r16, r13, r11
  JumpIfFalse  r16, L1
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r16, r3
  Len          r3, r16
  Const        r13, "s_suppkey"
  Const        r5, "l_suppkey"
  Move         r25, r10
  LessInt      r26, r25, r3
  JumpIfFalse  r26, L1
  Index        r3, r16, r25
  Index        r16, r3, r13
  Index        r13, r24, r5
  Equal        r5, r16, r13
  JumpIfFalse  r5, L15
  // where o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey
  Index        r5, r12, r18
  Const        r13, "1994-01-01"
  LessEq       r16, r13, r5
  Index        r13, r12, r18
  Const        r12, "1995-01-01"
  Less         r18, r13, r12
  Index        r12, r3, r22
  Index        r3, r2, r17
  Equal        r2, r12, r3
  Move         r3, r16
  JumpIfFalse  r3, L16
  Move         r3, r18
  JumpIfFalse  r3, L14
  Move         r3, r2
  JumpIfFalse  r3, L15
  // nation: n.n_name,
  Move         r3, r8
  Index        r2, r14, r15
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r14, r21
  Index        r18, r24, r1
  Index        r1, r24, r9
  Sub          r24, r19, r1
  Mul          r1, r18, r24
  // nation: n.n_name,
  Move         r24, r3
  Move         r3, r2
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r2, r14
  Move         r14, r1
  // select {
  MakeMap      r1, 2, r24
  // from c in customer
  Append       r20, r20, r1
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Add          r25, r25, r19
  Jump         L17
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Add          r4, r4, r19
  Jump         L18
  // join o in orders on o.o_custkey == c.c_custkey
  Add          r6, r6, r19
  Jump         L7
  // join n in asia_nations on c.c_nationkey == n.n_nationkey
  Add          r7, r7, r19
  Jump         L15
  // from c in customer
  AddInt       r23, r23, r19
  Jump         L2
  // from r in local_customer_supplier_orders
  Const        r24, []
  // n_name: g.key,
  Const        r12, "key"
  // from r in local_customer_supplier_orders
  IterPrep     r26, r20
  Len          r20, r26
  Move         r11, r10
  MakeMap      r4, 0, r0
  LessInt      r1, r11, r20
  JumpIfFalse  r1, L19
  Index        r20, r26, r11
  // group by r.nation into g
  Index        r26, r20, r8
  Str          r8, r26
  In           r1, r8, r4
  JumpIfTrue   r1, L20
  // from r in local_customer_supplier_orders
  Move         r1, r24
  Const        r6, "__group__"
  Const        r7, true
  Move         r23, r12
  // group by r.nation into g
  Move         r14, r26
  // from r in local_customer_supplier_orders
  Const        r26, "items"
  Move         r2, r1
  Const        r1, "count"
  Move         r3, r11
  Move         r25, r6
  Move         r6, r7
  Move         r7, r23
  Move         r23, r14
  Move         r14, r26
  Move         r18, r2
  Move         r2, r1
  Move         r9, r3
  MakeMap      r3, 4, r25
  SetIndex     r4, r8, r3
L20:
  Move         r3, r26
  Index        r26, r4, r8
  Index        r8, r26, r3
  Append       r9, r8, r20
  SetIndex     r26, r3, r9
  Move         r9, r1
  Index        r1, r26, r9
  AddInt       r8, r1, r19
  SetIndex     r26, r9, r8
  AddInt       r11, r11, r19
  Jump         L21
L19:
  Values       1,4,0,0
  Move         r4, r10
  Len          r9, r1
L27:
  LessInt      r26, r4, r9
  JumpIfFalse  r26, L22
  Index        r26, r1, r4
  // n_name: g.key,
  Move         r1, r15
  Index        r15, r26, r12
  // revenue: sum(from x in g select x.revenue)
  Move         r12, r21
  Move         r9, r24
  IterPrep     r11, r26
  Len          r3, r11
  Move         r20, r10
L24:
  LessInt      r2, r20, r3
  JumpIfFalse  r2, L23
  Index        r2, r11, r20
  Index        r11, r2, r21
  Append       r9, r9, r11
  AddInt       r20, r20, r19
  Jump         L24
L23:
  Sum          r11, r9
  // n_name: g.key,
  Move         r9, r1
  Move         r1, r15
  // revenue: sum(from x in g select x.revenue)
  Move         r8, r12
  Move         r12, r11
  // select {
  MakeMap      r11, 2, r9
  // sort by -sum(from x in g select x.revenue)
  Move         r12, r24
  IterPrep     r1, r26
  Len          r26, r1
  Move         r9, r10
L26:
  LessInt      r10, r9, r26
  JumpIfFalse  r10, L25
  Index        r2, r1, r9
  Index        r10, r2, r21
  Append       r12, r12, r10
  AddInt       r9, r9, r19
  Jump         L26
L25:
  Sum          r10, r12
  Neg          r12, r10
  // from r in local_customer_supplier_orders
  Move         r10, r11
  MakeList     r11, 2, r12
  Append       r24, r24, r11
  AddInt       r4, r4, r19
  Jump         L27
L22:
  // sort by -sum(from x in g select x.revenue)
  Sort         r24, r24
  // json(result)
  JSON         r24
  // expect result == [
  Const        r11, [{"n_name": "JAPAN", "revenue": 950}, {"n_name": "INDIA", "revenue": 720}]
  Equal        r10, r24, r11
  Expect       r10
  Return       r0
