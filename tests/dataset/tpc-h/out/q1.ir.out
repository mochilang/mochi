func main (regs=201)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r8, "sum_qty"
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r10, "sum_base_price"
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r12, "sum_disc_price"
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r14, "sum_charge"
  Const        r15, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r16, "avg_qty"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r17, "avg_price"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r18, "avg_disc"
  // count_order: count(g)
  Const        r19, "count_order"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
  Const        r24, []
L3:
  LessInt      r25, r22, r21
  JumpIfFalse  r25, L0
  Index        r26, r20, r22
  Move         r27, r26
  // where row.l_shipdate <= "1998-09-02"
  Index        r28, r27, r6
  Const        r29, "1998-09-02"
  LessEq       r30, r28, r29
  JumpIfFalse  r30, L1
  // returnflag: row.l_returnflag,
  Const        r31, "returnflag"
  Index        r32, r27, r3
  // linestatus: row.l_linestatus
  Const        r33, "linestatus"
  Index        r34, r27, r5
  // returnflag: row.l_returnflag,
  Move         r35, r32
  // linestatus: row.l_linestatus
  Move         r36, r34
  // group by {
  MakeMap      r37, 2, r31
  Str          r38, r37
  In           r39, r38, r23
  JumpIfTrue   r39, L2
  // from row in lineitem
  Const        r40, []
  Const        r41, "__group__"
  Const        r42, true
  // group by {
  Move         r43, r37
  // from row in lineitem
  Const        r44, "items"
  Move         r45, r40
  Const        r46, "count"
  Const        r47, 0
  MakeMap      r48, 4, r41
  SetIndex     r23, r38, r48
  Append       r49, r24, r48
  Move         r24, r49
L2:
  Index        r50, r23, r38
  Index        r51, r50, r44
  Append       r52, r51, r26
  SetIndex     r50, r44, r52
  Index        r53, r50, r46
  Const        r54, 1
  AddInt       r55, r53, r54
  SetIndex     r50, r46, r55
L1:
  AddInt       r22, r22, r54
  Jump         L3
L0:
  Move         r56, r47
  Len          r57, r24
L19:
  LessInt      r58, r56, r57
  JumpIfFalse  r58, L4
  Index        r59, r24, r56
  Move         r60, r59
  // returnflag: g.key.returnflag,
  Const        r61, "returnflag"
  Index        r62, r60, r7
  Index        r63, r62, r2
  // linestatus: g.key.linestatus,
  Const        r64, "linestatus"
  Index        r65, r60, r7
  Index        r66, r65, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r67, "sum_qty"
  Const        r68, []
  IterPrep     r69, r60
  Len          r70, r69
  Move         r71, r47
L6:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L5
  Index        r73, r69, r71
  Move         r74, r73
  Index        r75, r74, r9
  Append       r76, r68, r75
  Move         r68, r76
  AddInt       r71, r71, r54
  Jump         L6
L5:
  Sum          r77, r68
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r78, "sum_base_price"
  Const        r79, []
  IterPrep     r80, r60
  Len          r81, r80
  Move         r82, r47
L8:
  LessInt      r83, r82, r81
  JumpIfFalse  r83, L7
  Index        r84, r80, r82
  Move         r74, r84
  Index        r85, r74, r11
  Append       r86, r79, r85
  Move         r79, r86
  AddInt       r82, r82, r54
  Jump         L8
L7:
  Sum          r87, r79
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r88, "sum_disc_price"
  Const        r89, []
  IterPrep     r90, r60
  Len          r91, r90
  Move         r92, r47
L10:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L9
  Index        r94, r90, r92
  Move         r74, r94
  Index        r95, r74, r11
  Index        r96, r74, r13
  Sub          r97, r54, r96
  Mul          r98, r95, r97
  Append       r99, r89, r98
  Move         r89, r99
  AddInt       r92, r92, r54
  Jump         L10
L9:
  Sum          r100, r89
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r101, "sum_charge"
  Const        r102, []
  IterPrep     r103, r60
  Len          r104, r103
  Move         r105, r47
L12:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L11
  Index        r107, r103, r105
  Move         r74, r107
  Index        r108, r74, r11
  Index        r109, r74, r13
  Sub          r110, r54, r109
  Mul          r111, r108, r110
  Index        r112, r74, r15
  Add          r113, r54, r112
  Mul          r114, r111, r113
  Append       r115, r102, r114
  Move         r102, r115
  AddInt       r105, r105, r54
  Jump         L12
L11:
  Sum          r116, r102
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r117, "avg_qty"
  Const        r118, []
  IterPrep     r119, r60
  Len          r120, r119
  Move         r121, r47
L14:
  LessInt      r122, r121, r120
  JumpIfFalse  r122, L13
  Index        r123, r119, r121
  Move         r74, r123
  Index        r124, r74, r9
  Append       r125, r118, r124
  Move         r118, r125
  AddInt       r121, r121, r54
  Jump         L14
L13:
  Avg          r126, r118
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r127, "avg_price"
  Const        r128, []
  IterPrep     r129, r60
  Len          r130, r129
  Move         r131, r47
L16:
  LessInt      r132, r131, r130
  JumpIfFalse  r132, L15
  Index        r133, r129, r131
  Move         r74, r133
  Index        r134, r74, r11
  Append       r135, r128, r134
  Move         r128, r135
  AddInt       r131, r131, r54
  Jump         L16
L15:
  Avg          r136, r128
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r137, "avg_disc"
  Const        r138, []
  IterPrep     r139, r60
  Len          r140, r139
  Move         r141, r47
L18:
  LessInt      r142, r141, r140
  JumpIfFalse  r142, L17
  Index        r143, r139, r141
  Move         r74, r143
  Index        r144, r74, r13
  Append       r145, r138, r144
  Move         r138, r145
  AddInt       r141, r141, r54
  Jump         L18
L17:
  Avg          r146, r138
  // count_order: count(g)
  Const        r147, "count_order"
  Index        r148, r60, r46
  // returnflag: g.key.returnflag,
  Move         r149, r63
  // linestatus: g.key.linestatus,
  Move         r150, r66
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r151, r77
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r152, r87
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r153, r100
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r154, r116
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r155, r126
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r156, r136
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r157, r146
  // count_order: count(g)
  Move         r158, r148
  // select {
  MakeMap      r159, 10, r61
  // from row in lineitem
  Append       r160, r1, r159
  Move         r1, r160
  AddInt       r56, r56, r54
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r161, "returnflag"
  Const        r162, "N"
  // linestatus: "O",
  Const        r163, "linestatus"
  Const        r164, "O"
  // sum_qty: 53,
  Const        r165, "sum_qty"
  Const        r166, 53
  // sum_base_price: 3000,
  Const        r167, "sum_base_price"
  Const        r168, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r169, "sum_disc_price"
  Const        r170, 950
  Const        r171, 1800
  AddFloat     r172, r170, r171
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r173, "sum_charge"
  Const        r174, 1.07
  MulFloat     r175, r170, r174
  Const        r176, 1.05
  MulFloat     r177, r171, r176
  AddFloat     r178, r175, r177
  // avg_qty: 26.5,
  Const        r179, "avg_qty"
  Const        r180, 26.5
  // avg_price: 1500,
  Const        r181, "avg_price"
  Const        r182, 1500
  // avg_disc: 0.07500000000000001,
  Const        r183, "avg_disc"
  Const        r184, 0.07500000000000001
  // count_order: 2
  Const        r185, "count_order"
  Const        r186, 2
  // returnflag: "N",
  Move         r187, r162
  // linestatus: "O",
  Move         r188, r164
  // sum_qty: 53,
  Move         r189, r166
  // sum_base_price: 3000,
  Move         r190, r168
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r191, r172
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r192, r178
  // avg_qty: 26.5,
  Move         r193, r180
  // avg_price: 1500,
  Move         r194, r182
  // avg_disc: 0.07500000000000001,
  Move         r195, r184
  // count_order: 2
  Move         r196, r186
  // {
  MakeMap      r197, 10, r161
  Move         r198, r197
  // expect result == [
  MakeList     r199, 1, r198
  Equal        r200, r1, r199
  Expect       r200
  Return       r0
