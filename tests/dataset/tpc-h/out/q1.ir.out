func main (regs=296)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "returnflag"
  Const        r8, "key"
  Const        r9, "returnflag"
  // linestatus: g.key.linestatus,
  Const        r10, "linestatus"
  Const        r11, "key"
  Const        r12, "linestatus"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r13, "sum_qty"
  Const        r14, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r15, "sum_base_price"
  Const        r16, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r17, "sum_disc_price"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r20, "sum_charge"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  Const        r23, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r24, "avg_qty"
  Const        r25, "l_quantity"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r26, "avg_price"
  Const        r27, "l_extendedprice"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r28, "avg_disc"
  Const        r29, "l_discount"
  // count_order: count(g)
  Const        r30, "count_order"
  // from row in lineitem
  IterPrep     r31, r0
  Len          r32, r31
  Const        r33, 0
  MakeMap      r34, 0, r0
  Const        r35, []
L3:
  LessInt      r37, r33, r32
  JumpIfFalse  r37, L0
  Index        r38, r31, r33
  Move         r39, r38
  // where row.l_shipdate <= "1998-09-02"
  Const        r40, "l_shipdate"
  Index        r41, r39, r40
  Const        r42, "1998-09-02"
  LessEq       r43, r41, r42
  JumpIfFalse  r43, L1
  // returnflag: row.l_returnflag,
  Const        r44, "returnflag"
  Const        r45, "l_returnflag"
  Index        r46, r39, r45
  // linestatus: row.l_linestatus
  Const        r47, "linestatus"
  Const        r48, "l_linestatus"
  Index        r49, r39, r48
  // returnflag: row.l_returnflag,
  Move         r50, r44
  Move         r51, r46
  // linestatus: row.l_linestatus
  Move         r52, r47
  Move         r53, r49
  // group by {
  MakeMap      r54, 2, r50
  Str          r55, r54
  In           r56, r55, r34
  JumpIfTrue   r56, L2
  // from row in lineitem
  Const        r57, []
  Const        r58, "__group__"
  Const        r59, true
  Const        r60, "key"
  // group by {
  Move         r61, r54
  // from row in lineitem
  Const        r62, "items"
  Move         r63, r57
  Const        r64, "count"
  Const        r65, 0
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  Move         r71, r63
  Move         r72, r64
  Move         r73, r65
  MakeMap      r74, 4, r66
  SetIndex     r34, r55, r74
  Append       r35, r35, r74
L2:
  Const        r76, "items"
  Index        r77, r34, r55
  Index        r78, r77, r76
  Append       r79, r78, r38
  SetIndex     r77, r76, r79
  Const        r80, "count"
  Index        r81, r77, r80
  Const        r82, 1
  AddInt       r83, r81, r82
  SetIndex     r77, r80, r83
L1:
  Const        r84, 1
  AddInt       r33, r33, r84
  Jump         L3
L0:
  Const        r85, 0
  Len          r87, r35
L19:
  LessInt      r88, r85, r87
  JumpIfFalse  r88, L4
  Index        r90, r35, r85
  // returnflag: g.key.returnflag,
  Const        r91, "returnflag"
  Const        r92, "key"
  Index        r93, r90, r92
  Const        r94, "returnflag"
  Index        r95, r93, r94
  // linestatus: g.key.linestatus,
  Const        r96, "linestatus"
  Const        r97, "key"
  Index        r98, r90, r97
  Const        r99, "linestatus"
  Index        r100, r98, r99
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r101, "sum_qty"
  Const        r102, []
  Const        r103, "l_quantity"
  IterPrep     r104, r90
  Len          r105, r104
  Const        r106, 0
L6:
  LessInt      r108, r106, r105
  JumpIfFalse  r108, L5
  Index        r110, r104, r106
  Const        r111, "l_quantity"
  Index        r112, r110, r111
  Append       r102, r102, r112
  Const        r114, 1
  AddInt       r106, r106, r114
  Jump         L6
L5:
  Sum          r115, r102
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r116, "sum_base_price"
  Const        r117, []
  Const        r118, "l_extendedprice"
  IterPrep     r119, r90
  Len          r120, r119
  Const        r121, 0
L8:
  LessInt      r123, r121, r120
  JumpIfFalse  r123, L7
  Index        r110, r119, r121
  Const        r125, "l_extendedprice"
  Index        r126, r110, r125
  Append       r117, r117, r126
  Const        r128, 1
  AddInt       r121, r121, r128
  Jump         L8
L7:
  Sum          r129, r117
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r130, "sum_disc_price"
  Const        r131, []
  Const        r132, "l_extendedprice"
  Const        r133, "l_discount"
  IterPrep     r134, r90
  Len          r135, r134
  Const        r136, 0
L10:
  LessInt      r138, r136, r135
  JumpIfFalse  r138, L9
  Index        r110, r134, r136
  Const        r140, "l_extendedprice"
  Index        r141, r110, r140
  Const        r142, 1
  Const        r143, "l_discount"
  Index        r144, r110, r143
  Sub          r145, r142, r144
  Mul          r146, r141, r145
  Append       r131, r131, r146
  Const        r148, 1
  AddInt       r136, r136, r148
  Jump         L10
L9:
  Sum          r149, r131
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r150, "sum_charge"
  Const        r151, []
  Const        r152, "l_extendedprice"
  Const        r153, "l_discount"
  Const        r154, "l_tax"
  IterPrep     r155, r90
  Len          r156, r155
  Const        r157, 0
L12:
  LessInt      r159, r157, r156
  JumpIfFalse  r159, L11
  Index        r110, r155, r157
  Const        r161, "l_extendedprice"
  Index        r162, r110, r161
  Const        r163, 1
  Const        r164, "l_discount"
  Index        r165, r110, r164
  Sub          r166, r163, r165
  Mul          r167, r162, r166
  Const        r168, 1
  Const        r169, "l_tax"
  Index        r170, r110, r169
  Add          r171, r168, r170
  Mul          r172, r167, r171
  Append       r151, r151, r172
  Const        r174, 1
  AddInt       r157, r157, r174
  Jump         L12
L11:
  Sum          r175, r151
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r176, "avg_qty"
  Const        r177, []
  Const        r178, "l_quantity"
  IterPrep     r179, r90
  Len          r180, r179
  Const        r181, 0
L14:
  LessInt      r183, r181, r180
  JumpIfFalse  r183, L13
  Index        r110, r179, r181
  Const        r185, "l_quantity"
  Index        r186, r110, r185
  Append       r177, r177, r186
  Const        r188, 1
  AddInt       r181, r181, r188
  Jump         L14
L13:
  Avg          r189, r177
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r190, "avg_price"
  Const        r191, []
  Const        r192, "l_extendedprice"
  IterPrep     r193, r90
  Len          r194, r193
  Const        r195, 0
L16:
  LessInt      r197, r195, r194
  JumpIfFalse  r197, L15
  Index        r110, r193, r195
  Const        r199, "l_extendedprice"
  Index        r200, r110, r199
  Append       r191, r191, r200
  Const        r202, 1
  AddInt       r195, r195, r202
  Jump         L16
L15:
  Avg          r203, r191
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r204, "avg_disc"
  Const        r205, []
  Const        r206, "l_discount"
  IterPrep     r207, r90
  Len          r208, r207
  Const        r209, 0
L18:
  LessInt      r211, r209, r208
  JumpIfFalse  r211, L17
  Index        r110, r207, r209
  Const        r213, "l_discount"
  Index        r214, r110, r213
  Append       r205, r205, r214
  Const        r216, 1
  AddInt       r209, r209, r216
  Jump         L18
L17:
  Avg          r217, r205
  // count_order: count(g)
  Const        r218, "count_order"
  Const        r219, "count"
  Index        r220, r90, r219
  // returnflag: g.key.returnflag,
  Move         r221, r91
  Move         r222, r95
  // linestatus: g.key.linestatus,
  Move         r223, r96
  Move         r224, r100
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r225, r101
  Move         r226, r115
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r227, r116
  Move         r228, r129
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r229, r130
  Move         r230, r149
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r231, r150
  Move         r232, r175
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r233, r176
  Move         r234, r189
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r235, r190
  Move         r236, r203
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r237, r204
  Move         r238, r217
  // count_order: count(g)
  Move         r239, r218
  Move         r240, r220
  // select {
  MakeMap      r241, 10, r221
  // from row in lineitem
  Append       r1, r1, r241
  Const        r243, 1
  AddInt       r85, r85, r243
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r244, "returnflag"
  Const        r245, "N"
  // linestatus: "O",
  Const        r246, "linestatus"
  Const        r247, "O"
  // sum_qty: 53,
  Const        r248, "sum_qty"
  Const        r249, 53
  // sum_base_price: 3000,
  Const        r250, "sum_base_price"
  Const        r251, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r252, "sum_disc_price"
  Const        r253, 950
  Const        r254, 1800
  Const        r255, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r256, "sum_charge"
  Const        r257, 950
  Const        r258, 1.07
  Const        r259, 1016.5000000000001
  Const        r260, 1800
  Const        r261, 1.05
  Const        r262, 1890
  Const        r263, 2906.5
  // avg_qty: 26.5,
  Const        r264, "avg_qty"
  Const        r265, 26.5
  // avg_price: 1500,
  Const        r266, "avg_price"
  Const        r267, 1500
  // avg_disc: 0.07500000000000001,
  Const        r268, "avg_disc"
  Const        r269, 0.07500000000000001
  // count_order: 2
  Const        r270, "count_order"
  Const        r271, 2
  // returnflag: "N",
  Move         r272, r244
  Move         r273, r245
  // linestatus: "O",
  Move         r274, r246
  Move         r275, r247
  // sum_qty: 53,
  Move         r276, r248
  Move         r277, r249
  // sum_base_price: 3000,
  Move         r278, r250
  Move         r279, r251
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r280, r252
  Move         r281, r255
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r282, r256
  Move         r283, r263
  // avg_qty: 26.5,
  Move         r284, r264
  Move         r285, r265
  // avg_price: 1500,
  Move         r286, r266
  Move         r287, r267
  // avg_disc: 0.07500000000000001,
  Move         r288, r268
  Move         r289, r269
  // count_order: 2
  Move         r290, r270
  Move         r291, r271
  // {
  MakeMap      r293, 10, r272
  // expect result == [
  MakeList     r294, 1, r293
  Equal        r295, r1, r294
  Expect       r295
  Return       r0
