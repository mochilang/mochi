func main (regs=39)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
L12:
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r8, "sum_qty"
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r10, "sum_base_price"
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r12, "sum_disc_price"
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r14, "sum_charge"
L6:
  Const        r15, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r16, "avg_qty"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r17, "avg_price"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r18, "avg_disc"
  // count_order: count(g)
  Const        r19, "count_order"
L3:
  // from row in lineitem
  IterPrep     r20, r0
L4:
  Len          r21, r20
  Const        r22, 0
L11:
  MakeMap      r23, 0, r0
L1:
  LessInt      r24, r22, r21
L0:
  JumpIfFalse  r24, L0
L5:
  Index        r21, r20, r22
L8:
  Move         r20, r21
  // where row.l_shipdate <= "1998-09-02"
  Index        r25, r20, r6
  Const        r6, "1998-09-02"
  LessEq       r26, r25, r6
  JumpIfFalse  r26, L1
L2:
  // returnflag: row.l_returnflag,
  Move         r26, r2
  Index        r6, r20, r3
L9:
  // linestatus: row.l_linestatus
  Move         r3, r4
  Index        r25, r20, r5
  // returnflag: row.l_returnflag,
  Move         r20, r26
  Move         r26, r6
L10:
  // linestatus: row.l_linestatus
  Move         r6, r3
  Move         r3, r25
  // group by {
  MakeMap      r25, 2, r20
  Str          r3, r25
  In           r6, r3, r23
  JumpIfTrue   r6, L2
  // from row in lineitem
  Move         r6, r1
  Const        r26, "__group__"
  Const        r20, true
  Move         r5, r7
  // group by {
  Move         r27, r25
  // from row in lineitem
  Const        r25, "items"
  Move         r28, r6
  Const        r6, "count"
  Move         r29, r22
  Move         r30, r26
  Move         r26, r20
  Move         r20, r5
  Move         r5, r27
  Move         r27, r25
  Move         r31, r28
  Move         r28, r6
  Move         r32, r29
  MakeMap      r29, 4, r30
  SetIndex     r23, r3, r29
  Move         r29, r25
  Index        r25, r23, r3
  Index        r3, r25, r29
  Append       r32, r3, r21
  SetIndex     r25, r29, r32
  Move         r32, r6
  Index        r6, r25, r32
  Const        r3, 1
  AddInt       r29, r6, r3
  SetIndex     r25, r32, r29
  AddInt       r22, r22, r3
  Jump         L1
  Values       29,23,0,0
  Const        r23, 0
  Move         r6, r23
  Len          r25, r29
  LessInt      r24, r6, r25
  JumpIfFalse  r24, L0
  Index        r24, r29, r6
  // returnflag: g.key.returnflag,
  Move         r29, r2
  Index        r25, r24, r7
  Index        r22, r25, r2
  // linestatus: g.key.linestatus,
  Move         r25, r4
  Index        r2, r24, r7
  Index        r7, r2, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r2, r8
  Move         r4, r1
  IterPrep     r21, r24
  Len          r28, r21
  Move         r31, r23
  LessInt      r27, r31, r28
  JumpIfFalse  r27, L3
  Index        r27, r21, r31
  Index        r21, r27, r9
  Append       r4, r4, r21
  AddInt       r31, r31, r3
  Jump         L4
  Sum          r31, r4
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r4, r10
  Move         r28, r1
  IterPrep     r21, r24
  Len          r5, r21
  Move         r20, r23
  LessInt      r26, r20, r5
  JumpIfFalse  r26, L5
  Index        r27, r21, r20
  Index        r26, r27, r11
  Append       r28, r28, r26
  AddInt       r20, r20, r3
  Jump         L5
  Sum          r20, r28
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r28, r12
  Move         r5, r1
  IterPrep     r21, r24
  Len          r30, r21
  Move         r33, r23
  LessInt      r26, r33, r30
  JumpIfFalse  r26, L6
  Index        r27, r21, r33
  Index        r30, r27, r11
  Index        r21, r27, r13
  Sub          r26, r3, r21
  Mul          r21, r30, r26
  Append       r5, r5, r21
  AddInt       r33, r33, r3
  Jump         L4
  Sum          r26, r5
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r5, r14
  Move         r30, r1
  IterPrep     r33, r24
  Len          r34, r33
  Move         r35, r23
  LessInt      r21, r35, r34
  JumpIfFalse  r21, L7
  Index        r27, r33, r35
  Index        r34, r27, r11
  Index        r33, r27, r13
  Sub          r21, r3, r33
  Mul          r33, r34, r21
  Index        r21, r27, r15
  Add          r15, r3, r21
  Mul          r21, r33, r15
  Append       r30, r30, r21
  AddInt       r35, r35, r3
  Jump         L4
L7:
  Sum          r15, r30
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r30, r16
  Move         r33, r1
  IterPrep     r35, r24
  Len          r34, r35
  Move         r36, r23
  LessInt      r21, r36, r34
  JumpIfFalse  r21, L8
  Index        r27, r35, r36
  Index        r34, r27, r9
  Append       r33, r33, r34
  AddInt       r36, r36, r3
  Jump         L9
  Avg          r36, r33
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r33, r17
  Move         r9, r1
  IterPrep     r35, r24
  Len          r21, r35
  Move         r37, r23
  LessInt      r38, r37, r21
  JumpIfFalse  r38, L6
  Index        r27, r35, r37
  Index        r38, r27, r11
  Append       r9, r9, r38
  AddInt       r37, r37, r3
  Jump         L10
  Avg          r37, r9
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r9, r18
  Move         r11, r1
  IterPrep     r21, r24
  Len          r35, r21
  Move         r34, r23
  LessInt      r23, r34, r35
  JumpIfFalse  r23, L0
  Index        r27, r21, r34
  Index        r23, r27, r13
  Append       r11, r11, r23
  AddInt       r34, r34, r3
  Jump         L11
  Avg          r34, r11
  // count_order: count(g)
  Move         r11, r19
  Index        r27, r24, r32
  // returnflag: g.key.returnflag,
  Move         r24, r29
  Move         r32, r22
  // linestatus: g.key.linestatus,
  Move         r22, r25
  Move         r13, r7
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r35, r2
  Move         r38, r31
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r31, r4
  Move         r4, r20
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r20, r28
  Move         r28, r26
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r26, r5
  Move         r5, r15
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r15, r30
  Move         r30, r36
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r36, r33
  Move         r33, r37
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r37, r9
  Move         r9, r34
  // count_order: count(g)
  Move         r23, r11
  Move         r11, r27
  // select {
  MakeMap      r27, 10, r24
  // from row in lineitem
  Append       r1, r1, r27
  AddInt       r6, r6, r3
  Jump         L12
  // json(result)
  JSON         r1
  // returnflag: "N",
  Move         r27, r29
  Const        r29, "N"
  // linestatus: "O",
  Move         r11, r25
  Const        r25, "O"
  // sum_qty: 53,
  Move         r9, r8
  Const        r8, 53
  // sum_base_price: 3000,
  Move         r37, r10
  Const        r10, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r33, r12
  Const        r12, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r36, r14
  Const        r14, 2906.5
  // avg_qty: 26.5,
  Move         r30, r16
  Const        r16, 26.5
  // avg_price: 1500,
  Move         r15, r17
  Const        r17, 1500
  // avg_disc: 0.07500000000000001,
  Move         r5, r18
  Const        r18, 0.07500000000000001
  // count_order: 2
  Move         r26, r19
  Const        r19, 2
  // returnflag: "N",
  Move         r28, r27
  Move         r27, r29
  // linestatus: "O",
  Move         r29, r11
  Move         r11, r25
  // sum_qty: 53,
  Move         r25, r9
  Move         r9, r8
  // sum_base_price: 3000,
  Move         r8, r37
  Move         r37, r10
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r10, r33
  Move         r33, r12
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r12, r36
  Move         r36, r14
  // avg_qty: 26.5,
  Move         r14, r30
  Move         r30, r16
  // avg_price: 1500,
  Move         r16, r15
  Move         r15, r17
  // avg_disc: 0.07500000000000001,
  Move         r17, r5
  Move         r5, r18
  // count_order: 2
  Move         r18, r26
  Move         r26, r19
  // {
  MakeMap      r19, 10, r28
  // expect result == [
  MakeList     r26, 1, r19
  Equal        r19, r1, r26
  Expect       r19
  Return       r0
