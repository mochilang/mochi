func main (regs=198)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r15, "l_tax"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
  Const        r24, []
L3:
  LessInt      r25, r22, r21
  JumpIfFalse  r25, L0
  Index        r26, r20, r22
  Move         r27, r26
  // where row.l_shipdate <= "1998-09-02"
  Index        r28, r27, r6
  Const        r29, "1998-09-02"
  LessEq       r30, r28, r29
  JumpIfFalse  r30, L1
  // returnflag: row.l_returnflag,
  Const        r31, "returnflag"
  Index        r32, r27, r3
  // linestatus: row.l_linestatus
  Const        r33, "linestatus"
  Index        r34, r27, r5
  // group by {
  MakeMap      r37, 2, r31
  Str          r38, r37
  In           r39, r38, r23
  JumpIfTrue   r39, L2
  // from row in lineitem
  Const        r40, []
  Const        r41, "__group__"
  Const        r42, true
  // group by {
  Move         r43, r37
  // from row in lineitem
  Const        r44, "items"
  Move         r45, r40
  MakeMap      r46, 3, r41
  SetIndex     r23, r38, r46
  Append       r24, r24, r46
L2:
  Index        r48, r23, r38
  Index        r49, r48, r44
  Append       r50, r49, r26
  SetIndex     r48, r44, r50
L1:
  Const        r51, 1
  AddInt       r22, r22, r51
  Jump         L3
L0:
  Const        r53, 0
  Move         r52, r53
  Len          r54, r24
L19:
  LessInt      r55, r52, r54
  JumpIfFalse  r55, L4
  Index        r57, r24, r52
  // returnflag: g.key.returnflag,
  Const        r58, "returnflag"
  Index        r59, r57, r7
  Index        r60, r59, r2
  // linestatus: g.key.linestatus,
  Const        r61, "linestatus"
  Index        r62, r57, r7
  Index        r63, r62, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r64, "sum_qty"
  Const        r65, []
  IterPrep     r66, r57
  Len          r67, r66
  Move         r68, r53
L6:
  LessInt      r69, r68, r67
  JumpIfFalse  r69, L5
  Index        r70, r66, r68
  Move         r71, r70
  Index        r72, r71, r9
  Append       r73, r65, r72
  Move         r65, r73
  AddInt       r68, r68, r51
  Jump         L6
L5:
  Sum          r74, r65
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r75, "sum_base_price"
  Const        r76, []
  IterPrep     r77, r57
  Len          r78, r77
  Move         r79, r53
L8:
  LessInt      r80, r79, r78
  JumpIfFalse  r80, L7
  Index        r71, r77, r79
  Index        r82, r71, r11
  Append       r76, r76, r82
  AddInt       r79, r79, r51
  Jump         L8
L7:
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r86, []
  IterPrep     r87, r57
  Len          r88, r87
  Move         r89, r53
L10:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L9
  Index        r71, r87, r89
  Index        r92, r71, r11
  Index        r93, r71, r13
  Sub          r94, r51, r93
  Mul          r95, r92, r94
  Append       r86, r86, r95
  AddInt       r89, r89, r51
  Jump         L10
L9:
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r99, []
  IterPrep     r100, r57
  Len          r101, r100
  Move         r102, r53
L12:
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L11
  Index        r71, r100, r102
  Index        r105, r71, r11
  Index        r106, r71, r13
  Sub          r107, r51, r106
  Mul          r108, r105, r107
  Index        r109, r71, r15
  Add          r110, r51, r109
  Mul          r111, r108, r110
  Append       r99, r99, r111
  AddInt       r102, r102, r51
  Jump         L12
L11:
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r115, []
  IterPrep     r116, r57
  Len          r117, r116
  Move         r118, r53
L14:
  LessInt      r119, r118, r117
  JumpIfFalse  r119, L13
  Index        r71, r116, r118
  Index        r121, r71, r9
  Append       r115, r115, r121
  AddInt       r118, r118, r51
  Jump         L14
L13:
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r125, []
  IterPrep     r126, r57
  Len          r127, r126
  Move         r128, r53
L16:
  LessInt      r129, r128, r127
  JumpIfFalse  r129, L15
  Index        r71, r126, r128
  Index        r131, r71, r11
  Append       r125, r125, r131
  AddInt       r128, r128, r51
  Jump         L16
L15:
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r135, []
  IterPrep     r136, r57
  Len          r137, r136
  Move         r138, r53
L18:
  LessInt      r139, r138, r137
  JumpIfFalse  r139, L17
  Index        r71, r136, r138
  Index        r141, r71, r13
  Append       r135, r135, r141
  AddInt       r138, r138, r51
  Jump         L18
L17:
  // select {
  MakeMap      r156, 10, r58
  // from row in lineitem
  Append       r1, r1, r156
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r158, "returnflag"
  Const        r159, "N"
  // linestatus: "O",
  Const        r160, "linestatus"
  Const        r161, "O"
  // sum_qty: 53,
  Const        r162, "sum_qty"
  Const        r163, 53
  // sum_base_price: 3000,
  Const        r164, "sum_base_price"
  Const        r165, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r166, "sum_disc_price"
  Const        r167, 950
  Const        r168, 1800
  Const        r169, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r170, "sum_charge"
  Const        r171, 1.07
  Const        r172, 1016.5000000000001
  Const        r173, 1.05
  Const        r174, 1890
  Const        r175, 2906.5
  // avg_qty: 26.5,
  Const        r176, "avg_qty"
  Const        r177, 26.5
  // {
  MakeMap      r195, 10, r158
  // expect result == [
  MakeList     r196, 1, r195
  Equal        r197, r1, r196
  Expect       r197
  Return       r0
