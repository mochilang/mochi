func main (regs=229)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r8, "sum_qty"
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r10, "sum_base_price"
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r12, "sum_disc_price"
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r14, "sum_charge"
  Const        r15, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r16, "avg_qty"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r17, "avg_price"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r18, "avg_disc"
  // count_order: count(g)
  Const        r19, "count_order"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
L3:
  LessInt      r26, r22, r21
  JumpIfFalse  r26, L0
  Index        r27, r20, r22
  Move         r28, r27
  // where row.l_shipdate <= "1998-09-02"
  Index        r29, r28, r6
  Const        r30, "1998-09-02"
  LessEq       r31, r29, r30
  JumpIfFalse  r31, L1
  // returnflag: row.l_returnflag,
  Const        r32, "returnflag"
  Index        r33, r28, r3
  // linestatus: row.l_linestatus
  Const        r34, "linestatus"
  Index        r35, r28, r5
  // returnflag: row.l_returnflag,
  Move         r36, r32
  Move         r37, r33
  // linestatus: row.l_linestatus
  Move         r38, r34
  Move         r39, r35
  // group by {
  MakeMap      r40, 2, r36
  Str          r41, r40
  In           r42, r41, r23
  JumpIfTrue   r42, L2
  // from row in lineitem
  Const        r43, "__group__"
  Const        r44, true
  // group by {
  Move         r45, r40
  // from row in lineitem
  Const        r46, "items"
  Move         r47, r25
  Const        r48, "count"
  Const        r49, 0
  Move         r50, r43
  Move         r51, r44
  Move         r52, r7
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  Move         r57, r49
  MakeMap      r58, 4, r50
  SetIndex     r23, r41, r58
  Append       r24, r24, r58
L2:
  Index        r60, r23, r41
  Index        r61, r60, r46
  Append       r62, r61, r27
  SetIndex     r60, r46, r62
  Index        r63, r60, r48
  Const        r64, 1
  AddInt       r65, r63, r64
  SetIndex     r60, r48, r65
L1:
  AddInt       r22, r22, r64
  Jump         L3
L0:
  Move         r66, r49
  Len          r67, r24
L19:
  LessInt      r68, r66, r67
  JumpIfFalse  r68, L4
  Index        r70, r24, r66
  // returnflag: g.key.returnflag,
  Const        r71, "returnflag"
  Index        r72, r70, r7
  Index        r73, r72, r2
  // linestatus: g.key.linestatus,
  Const        r74, "linestatus"
  Index        r75, r70, r7
  Index        r76, r75, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r77, "sum_qty"
  Const        r78, []
  IterPrep     r79, r70
  Len          r80, r79
  Move         r81, r49
L6:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L5
  Index        r84, r79, r81
  Index        r85, r84, r9
  Append       r78, r78, r85
  AddInt       r81, r81, r64
  Jump         L6
L5:
  Sum          r87, r78
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r88, "sum_base_price"
  Const        r89, []
  IterPrep     r90, r70
  Len          r91, r90
  Move         r92, r49
L8:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L7
  Index        r84, r90, r92
  Index        r95, r84, r11
  Append       r89, r89, r95
  AddInt       r92, r92, r64
  Jump         L8
L7:
  Sum          r97, r89
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r98, "sum_disc_price"
  Const        r99, []
  IterPrep     r100, r70
  Len          r101, r100
  Move         r102, r49
L10:
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L9
  Index        r84, r100, r102
  Index        r105, r84, r11
  Index        r106, r84, r13
  Sub          r107, r64, r106
  Mul          r108, r105, r107
  Append       r99, r99, r108
  AddInt       r102, r102, r64
  Jump         L10
L9:
  Sum          r110, r99
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r111, "sum_charge"
  Const        r112, []
  IterPrep     r113, r70
  Len          r114, r113
  Move         r115, r49
L12:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L11
  Index        r84, r113, r115
  Index        r118, r84, r11
  Index        r119, r84, r13
  Sub          r120, r64, r119
  Mul          r121, r118, r120
  Index        r122, r84, r15
  Add          r123, r64, r122
  Mul          r124, r121, r123
  Append       r112, r112, r124
  AddInt       r115, r115, r64
  Jump         L12
L11:
  Sum          r126, r112
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r127, "avg_qty"
  Const        r128, []
  IterPrep     r129, r70
  Len          r130, r129
  Move         r131, r49
L14:
  LessInt      r132, r131, r130
  JumpIfFalse  r132, L13
  Index        r84, r129, r131
  Index        r134, r84, r9
  Append       r128, r128, r134
  AddInt       r131, r131, r64
  Jump         L14
L13:
  Avg          r136, r128
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r137, "avg_price"
  Const        r138, []
  IterPrep     r139, r70
  Len          r140, r139
  Move         r141, r49
L16:
  LessInt      r142, r141, r140
  JumpIfFalse  r142, L15
  Index        r84, r139, r141
  Index        r144, r84, r11
  Append       r138, r138, r144
  AddInt       r141, r141, r64
  Jump         L16
L15:
  Avg          r146, r138
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r147, "avg_disc"
  Const        r148, []
  IterPrep     r149, r70
  Len          r150, r149
  Move         r151, r49
L18:
  LessInt      r152, r151, r150
  JumpIfFalse  r152, L17
  Index        r84, r149, r151
  Index        r154, r84, r13
  Append       r148, r148, r154
  AddInt       r151, r151, r64
  Jump         L18
L17:
  Avg          r156, r148
  // count_order: count(g)
  Const        r157, "count_order"
  Index        r158, r70, r48
  // returnflag: g.key.returnflag,
  Move         r159, r71
  Move         r160, r73
  // linestatus: g.key.linestatus,
  Move         r161, r74
  Move         r162, r76
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r163, r77
  Move         r164, r87
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r165, r88
  Move         r166, r97
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r167, r98
  Move         r168, r110
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r169, r111
  Move         r170, r126
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r171, r127
  Move         r172, r136
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r173, r137
  Move         r174, r146
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r175, r147
  Move         r176, r156
  // count_order: count(g)
  Move         r177, r157
  Move         r178, r158
  // select {
  MakeMap      r179, 10, r159
  // from row in lineitem
  Append       r1, r1, r179
  AddInt       r66, r66, r64
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r181, "returnflag"
  Const        r182, "N"
  // linestatus: "O",
  Const        r183, "linestatus"
  Const        r184, "O"
  // sum_qty: 53,
  Const        r185, "sum_qty"
  Const        r186, 53
  // sum_base_price: 3000,
  Const        r187, "sum_base_price"
  Const        r188, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r189, "sum_disc_price"
  Const        r190, 950
  Const        r191, 1800
  Const        r192, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r193, "sum_charge"
  Const        r194, 1016.5000000000001
  Const        r195, 1890
  Const        r196, 2906.5
  // avg_qty: 26.5,
  Const        r197, "avg_qty"
  Const        r198, 26.5
  // avg_price: 1500,
  Const        r199, "avg_price"
  Const        r200, 1500
  // avg_disc: 0.07500000000000001,
  Const        r201, "avg_disc"
  Const        r202, 0.07500000000000001
  // count_order: 2
  Const        r203, "count_order"
  Const        r204, 2
  // returnflag: "N",
  Move         r205, r181
  Move         r206, r182
  // linestatus: "O",
  Move         r207, r183
  Move         r208, r184
  // sum_qty: 53,
  Move         r209, r185
  Move         r210, r186
  // sum_base_price: 3000,
  Move         r211, r187
  Move         r212, r188
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r213, r189
  Move         r214, r192
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r215, r193
  Move         r216, r196
  // avg_qty: 26.5,
  Move         r217, r197
  Move         r218, r198
  // avg_price: 1500,
  Move         r219, r199
  Move         r220, r200
  // avg_disc: 0.07500000000000001,
  Move         r221, r201
  Move         r222, r202
  // count_order: 2
  Move         r223, r203
  Move         r224, r204
  // {
  MakeMap      r226, 10, r205
  // expect result == [
  MakeList     r227, 1, r226
  Equal        r228, r1, r227
  Expect       r228
  Return       r0
