func main (regs=235)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r15, "l_tax"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
  Const        r24, []
L3:
  LessInt      r25, r22, r21
  JumpIfFalse  r25, L0
  Index        r26, r20, r22
  Move         r27, r26
  // where row.l_shipdate <= "1998-09-02"
  Index        r28, r27, r6
  Const        r29, "1998-09-02"
  LessEq       r30, r28, r29
  JumpIfFalse  r30, L1
  // returnflag: row.l_returnflag,
  Const        r31, "returnflag"
  Index        r32, r27, r3
  // linestatus: row.l_linestatus
  Const        r33, "linestatus"
  Index        r34, r27, r5
  // returnflag: row.l_returnflag,
  Move         r35, r31
  Move         r36, r32
  // linestatus: row.l_linestatus
  Move         r37, r33
  Move         r38, r34
  // group by {
  MakeMap      r39, 2, r35
  Str          r40, r39
  In           r41, r40, r23
  JumpIfTrue   r41, L2
  // from row in lineitem
  Const        r42, []
  Const        r43, "__group__"
  Const        r44, true
  Const        r45, "key"
  // group by {
  Move         r46, r39
  // from row in lineitem
  Const        r47, "items"
  Move         r48, r42
  Const        r49, "count"
  Const        r50, 0
  Move         r51, r43
  Move         r52, r44
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  Move         r57, r49
  Move         r58, r50
  MakeMap      r59, 4, r51
  SetIndex     r23, r40, r59
  Append       r24, r24, r59
L2:
  Const        r61, "items"
  Index        r62, r23, r40
  Index        r63, r62, r61
  Append       r64, r63, r26
  SetIndex     r62, r61, r64
  Const        r65, "count"
  Index        r66, r62, r65
  Const        r67, 1
  AddInt       r68, r66, r67
  SetIndex     r62, r65, r68
L1:
  AddInt       r22, r22, r67
  Jump         L3
L0:
  Const        r70, 0
  Move         r69, r70
  Len          r71, r24
L19:
  LessInt      r72, r69, r71
  JumpIfFalse  r72, L4
  Index        r74, r24, r69
  // returnflag: g.key.returnflag,
  Const        r75, "returnflag"
  Index        r76, r74, r7
  Index        r77, r76, r2
  // linestatus: g.key.linestatus,
  Const        r78, "linestatus"
  Index        r79, r74, r7
  Index        r80, r79, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r81, "sum_qty"
  Const        r82, []
  IterPrep     r83, r74
  Len          r84, r83
  Move         r85, r70
L6:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L5
  Index        r88, r83, r85
  Index        r89, r88, r9
  Append       r82, r82, r89
  AddInt       r85, r85, r67
  Jump         L6
L5:
  Sum          r91, r82
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r92, "sum_base_price"
  Const        r93, []
  IterPrep     r94, r74
  Len          r95, r94
  Move         r96, r70
L8:
  LessInt      r97, r96, r95
  JumpIfFalse  r97, L7
  Index        r88, r94, r96
  Index        r99, r88, r11
  Append       r93, r93, r99
  AddInt       r96, r96, r67
  Jump         L8
L7:
  Sum          r101, r93
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r102, "sum_disc_price"
  Const        r103, []
  IterPrep     r104, r74
  Len          r105, r104
  Move         r106, r70
L10:
  LessInt      r107, r106, r105
  JumpIfFalse  r107, L9
  Index        r88, r104, r106
  Index        r109, r88, r11
  Index        r110, r88, r13
  Sub          r111, r67, r110
  Mul          r112, r109, r111
  Append       r103, r103, r112
  AddInt       r106, r106, r67
  Jump         L10
L9:
  Sum          r114, r103
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r115, "sum_charge"
  Const        r116, []
  IterPrep     r117, r74
  Len          r118, r117
  Move         r119, r70
L12:
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L11
  Index        r88, r117, r119
  Index        r122, r88, r11
  Index        r123, r88, r13
  Sub          r124, r67, r123
  Mul          r125, r122, r124
  Index        r126, r88, r15
  Add          r127, r67, r126
  Mul          r128, r125, r127
  Append       r116, r116, r128
  AddInt       r119, r119, r67
  Jump         L12
L11:
  Sum          r130, r116
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r131, "avg_qty"
  Const        r132, []
  IterPrep     r133, r74
  Len          r134, r133
  Move         r135, r70
L14:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L13
  Index        r88, r133, r135
  Index        r138, r88, r9
  Append       r132, r132, r138
  AddInt       r135, r135, r67
  Jump         L14
L13:
  Avg          r140, r132
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r141, "avg_price"
  Const        r142, []
  IterPrep     r143, r74
  Len          r144, r143
  Move         r145, r70
L16:
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L15
  Index        r88, r143, r145
  Index        r148, r88, r11
  Append       r142, r142, r148
  AddInt       r145, r145, r67
  Jump         L16
L15:
  Avg          r150, r142
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r151, "avg_disc"
  Const        r152, []
  IterPrep     r153, r74
  Len          r154, r153
  Move         r155, r70
L18:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L17
  Index        r88, r153, r155
  Index        r158, r88, r13
  Append       r152, r152, r158
  AddInt       r155, r155, r67
  Jump         L18
L17:
  Avg          r160, r152
  // count_order: count(g)
  Const        r161, "count_order"
  Index        r162, r74, r65
  // returnflag: g.key.returnflag,
  Move         r163, r75
  Move         r164, r77
  // linestatus: g.key.linestatus,
  Move         r165, r78
  Move         r166, r80
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r167, r81
  Move         r168, r91
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r169, r92
  Move         r170, r101
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r171, r102
  Move         r172, r114
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r173, r115
  Move         r174, r130
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r175, r131
  Move         r176, r140
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r177, r141
  Move         r178, r150
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r179, r151
  Move         r180, r160
  // count_order: count(g)
  Move         r181, r161
  Move         r182, r162
  // select {
  MakeMap      r183, 10, r163
  // from row in lineitem
  Append       r1, r1, r183
  AddInt       r69, r69, r67
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r185, "returnflag"
  Const        r186, "N"
  // linestatus: "O",
  Const        r187, "linestatus"
  Const        r188, "O"
  // sum_qty: 53,
  Const        r189, "sum_qty"
  Const        r190, 53
  // sum_base_price: 3000,
  Const        r191, "sum_base_price"
  Const        r192, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r193, "sum_disc_price"
  Const        r196, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r197, "sum_charge"
  Const        r202, 2906.5
  // avg_qty: 26.5,
  Const        r203, "avg_qty"
  Const        r204, 26.5
  // avg_price: 1500,
  Const        r205, "avg_price"
  Const        r206, 1500
  // avg_disc: 0.07500000000000001,
  Const        r207, "avg_disc"
  Const        r208, 0.07500000000000001
  // count_order: 2
  Const        r209, "count_order"
  Const        r210, 2
  // returnflag: "N",
  Move         r211, r185
  Move         r212, r186
  // linestatus: "O",
  Move         r213, r187
  Move         r214, r188
  // sum_qty: 53,
  Move         r215, r189
  Move         r216, r190
  // sum_base_price: 3000,
  Move         r217, r191
  Move         r218, r192
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r219, r193
  Move         r220, r196
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r221, r197
  Move         r222, r202
  // avg_qty: 26.5,
  Move         r223, r203
  Move         r224, r204
  // avg_price: 1500,
  Move         r225, r205
  Move         r226, r206
  // avg_disc: 0.07500000000000001,
  Move         r227, r207
  Move         r228, r208
  // count_order: 2
  Move         r229, r209
  Move         r230, r210
  // {
  MakeMap      r232, 10, r211
  // expect result == [
  MakeList     r233, 1, r232
  Equal        r234, r1, r233
  Expect       r234
  Return       r0
