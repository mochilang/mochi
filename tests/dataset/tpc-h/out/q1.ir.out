func main (regs=234)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r8, "sum_qty"
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r10, "sum_base_price"
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r12, "sum_disc_price"
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r14, "sum_charge"
  Const        r15, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r16, "avg_qty"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r17, "avg_price"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r18, "avg_disc"
  // count_order: count(g)
  Const        r19, "count_order"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
L3:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r25, r20, r22
  Move         r26, r25
  // where row.l_shipdate <= "1998-09-02"
  Index        r27, r26, r6
  Const        r28, "1998-09-02"
  LessEq       r29, r27, r28
  JumpIfFalse  r29, L1
  // returnflag: row.l_returnflag,
  Move         r30, r2
  Index        r31, r26, r3
  // linestatus: row.l_linestatus
  Move         r32, r4
  Index        r33, r26, r5
  // returnflag: row.l_returnflag,
  Move         r34, r30
  Move         r35, r31
  // linestatus: row.l_linestatus
  Move         r36, r32
  Move         r37, r33
  // group by {
  MakeMap      r38, 2, r34
  Str          r39, r38
  In           r40, r39, r23
  JumpIfTrue   r40, L2
  // from row in lineitem
  Move         r41, r1
  Const        r42, "__group__"
  Const        r43, true
  Move         r44, r7
  // group by {
  Move         r45, r38
  // from row in lineitem
  Const        r46, "items"
  Move         r47, r41
  Const        r48, "count"
  Move         r49, r22
  Move         r50, r42
  Move         r51, r43
  Move         r52, r44
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  Move         r57, r49
  MakeMap      r58, 4, r50
  SetIndex     r23, r39, r58
L2:
  Move         r59, r46
  Index        r60, r23, r39
  Index        r61, r60, r59
  Append       r62, r61, r25
  SetIndex     r60, r59, r62
  Move         r63, r48
  Index        r64, r60, r63
  Const        r65, 1
  AddInt       r66, r64, r65
  SetIndex     r60, r63, r66
L1:
  AddInt       r22, r22, r65
  Jump         L3
L0:
  Values       67,23,0,0
  Const        r69, 0
  Move         r68, r69
  Len          r70, r67
L19:
  LessInt      r71, r68, r70
  JumpIfFalse  r71, L4
  Index        r73, r67, r68
  // returnflag: g.key.returnflag,
  Move         r74, r2
  Index        r75, r73, r7
  Index        r76, r75, r2
  // linestatus: g.key.linestatus,
  Move         r77, r4
  Index        r78, r73, r7
  Index        r79, r78, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r80, r8
  Move         r81, r1
  IterPrep     r82, r73
  Len          r83, r82
  Move         r84, r69
L6:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L5
  Index        r87, r82, r84
  Index        r88, r87, r9
  Append       r81, r81, r88
  AddInt       r84, r84, r65
  Jump         L6
L5:
  Sum          r90, r81
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r91, r10
  Move         r92, r1
  IterPrep     r93, r73
  Len          r94, r93
  Move         r95, r69
L8:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L7
  Index        r87, r93, r95
  Index        r98, r87, r11
  Append       r92, r92, r98
  AddInt       r95, r95, r65
  Jump         L8
L7:
  Sum          r100, r92
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r101, r12
  Move         r102, r1
  IterPrep     r103, r73
  Len          r104, r103
  Move         r105, r69
L10:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L9
  Index        r87, r103, r105
  Index        r108, r87, r11
  Index        r109, r87, r13
  Sub          r110, r65, r109
  Mul          r111, r108, r110
  Append       r102, r102, r111
  AddInt       r105, r105, r65
  Jump         L10
L9:
  Sum          r113, r102
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r114, r14
  Move         r115, r1
  IterPrep     r116, r73
  Len          r117, r116
  Move         r118, r69
L12:
  LessInt      r119, r118, r117
  JumpIfFalse  r119, L11
  Index        r87, r116, r118
  Index        r121, r87, r11
  Index        r122, r87, r13
  Sub          r123, r65, r122
  Mul          r124, r121, r123
  Index        r125, r87, r15
  Add          r126, r65, r125
  Mul          r127, r124, r126
  Append       r115, r115, r127
  AddInt       r118, r118, r65
  Jump         L12
L11:
  Sum          r129, r115
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r130, r16
  Move         r131, r1
  IterPrep     r132, r73
  Len          r133, r132
  Move         r134, r69
L14:
  LessInt      r135, r134, r133
  JumpIfFalse  r135, L13
  Index        r87, r132, r134
  Index        r137, r87, r9
  Append       r131, r131, r137
  AddInt       r134, r134, r65
  Jump         L14
L13:
  Avg          r139, r131
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r140, r17
  Move         r141, r1
  IterPrep     r142, r73
  Len          r143, r142
  Move         r144, r69
L16:
  LessInt      r145, r144, r143
  JumpIfFalse  r145, L15
  Index        r87, r142, r144
  Index        r147, r87, r11
  Append       r141, r141, r147
  AddInt       r144, r144, r65
  Jump         L16
L15:
  Avg          r149, r141
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r150, r18
  Move         r151, r1
  IterPrep     r152, r73
  Len          r153, r152
  Move         r154, r69
L18:
  LessInt      r155, r154, r153
  JumpIfFalse  r155, L17
  Index        r87, r152, r154
  Index        r157, r87, r13
  Append       r151, r151, r157
  AddInt       r154, r154, r65
  Jump         L18
L17:
  Avg          r159, r151
  // count_order: count(g)
  Move         r160, r19
  Index        r161, r73, r63
  // returnflag: g.key.returnflag,
  Move         r162, r74
  Move         r163, r76
  // linestatus: g.key.linestatus,
  Move         r164, r77
  Move         r165, r79
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r166, r80
  Move         r167, r90
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r168, r91
  Move         r169, r100
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r170, r101
  Move         r171, r113
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r172, r114
  Move         r173, r129
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r174, r130
  Move         r175, r139
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r176, r140
  Move         r177, r149
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r178, r150
  Move         r179, r159
  // count_order: count(g)
  Move         r180, r160
  Move         r181, r161
  // select {
  MakeMap      r182, 10, r162
  // from row in lineitem
  Append       r1, r1, r182
  AddInt       r68, r68, r65
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Move         r184, r74
  Const        r185, "N"
  // linestatus: "O",
  Move         r186, r77
  Const        r187, "O"
  // sum_qty: 53,
  Move         r188, r8
  Const        r189, 53
  // sum_base_price: 3000,
  Move         r190, r10
  Const        r191, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r192, r12
  Const        r195, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r196, r14
  Const        r201, 2906.5
  // avg_qty: 26.5,
  Move         r202, r16
  Const        r203, 26.5
  // avg_price: 1500,
  Move         r204, r17
  Const        r205, 1500
  // avg_disc: 0.07500000000000001,
  Move         r206, r18
  Const        r207, 0.07500000000000001
  // count_order: 2
  Move         r208, r19
  Const        r209, 2
  // returnflag: "N",
  Move         r210, r184
  Move         r211, r185
  // linestatus: "O",
  Move         r212, r186
  Move         r213, r187
  // sum_qty: 53,
  Move         r214, r188
  Move         r215, r189
  // sum_base_price: 3000,
  Move         r216, r190
  Move         r217, r191
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r218, r192
  Move         r219, r195
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r220, r196
  Move         r221, r201
  // avg_qty: 26.5,
  Move         r222, r202
  Move         r223, r203
  // avg_price: 1500,
  Move         r224, r204
  Move         r225, r205
  // avg_disc: 0.07500000000000001,
  Move         r226, r206
  Move         r227, r207
  // count_order: 2
  Move         r228, r208
  Move         r229, r209
  // {
  MakeMap      r231, 10, r210
  // expect result == [
  MakeList     r232, 1, r231
  Equal        r233, r1, r232
  Expect       r233
  Return       r0
