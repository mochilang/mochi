func main (regs=236)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_linestatus": "O", "l_quantity": 17, "l_returnflag": "N", "l_shipdate": "1998-08-01", "l_tax": 0.07}, {"l_discount": 0.1, "l_extendedprice": 2000, "l_linestatus": "O", "l_quantity": 36, "l_returnflag": "N", "l_shipdate": "1998-09-01", "l_tax": 0.05}, {"l_discount": 0, "l_extendedprice": 1500, "l_linestatus": "F", "l_quantity": 25, "l_returnflag": "R", "l_shipdate": "1998-09-03", "l_tax": 0.08}]
  // from row in lineitem
  Const        r1, []
  // returnflag: row.l_returnflag,
  Const        r2, "returnflag"
  Const        r3, "l_returnflag"
  // linestatus: row.l_linestatus
  Const        r4, "linestatus"
  Const        r5, "l_linestatus"
  // where row.l_shipdate <= "1998-09-02"
  Const        r6, "l_shipdate"
  // returnflag: g.key.returnflag,
  Const        r7, "key"
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r8, "sum_qty"
  Const        r9, "l_quantity"
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r10, "sum_base_price"
  Const        r11, "l_extendedprice"
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r12, "sum_disc_price"
  Const        r13, "l_discount"
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r14, "sum_charge"
  Const        r15, "l_tax"
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r16, "avg_qty"
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r17, "avg_price"
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r18, "avg_disc"
  // count_order: count(g)
  Const        r19, "count_order"
  // from row in lineitem
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
  MakeMap      r23, 0, r0
  Const        r24, []
L3:
  LessInt      r26, r22, r21
  JumpIfFalse  r26, L0
  Index        r27, r20, r22
  Move         r28, r27
  // where row.l_shipdate <= "1998-09-02"
  Index        r29, r28, r6
  Const        r30, "1998-09-02"
  LessEq       r31, r29, r30
  JumpIfFalse  r31, L1
  // returnflag: row.l_returnflag,
  Const        r32, "returnflag"
  Index        r33, r28, r3
  // linestatus: row.l_linestatus
  Const        r34, "linestatus"
  Index        r35, r28, r5
  // returnflag: row.l_returnflag,
  Move         r36, r32
  Move         r37, r33
  // linestatus: row.l_linestatus
  Move         r38, r34
  Move         r39, r35
  // group by {
  MakeMap      r40, 2, r36
  Str          r41, r40
  In           r42, r41, r23
  JumpIfTrue   r42, L2
  // from row in lineitem
  Const        r43, []
  Const        r44, "__group__"
  Const        r45, true
  Const        r46, "key"
  // group by {
  Move         r47, r40
  // from row in lineitem
  Const        r48, "items"
  Move         r49, r43
  Const        r50, "count"
  Const        r51, 0
  Move         r52, r44
  Move         r53, r45
  Move         r54, r46
  Move         r55, r47
  Move         r56, r48
  Move         r57, r49
  Move         r58, r50
  Move         r59, r51
  MakeMap      r60, 4, r52
  SetIndex     r23, r41, r60
  Append       r24, r24, r60
L2:
  Const        r62, "items"
  Index        r63, r23, r41
  Index        r64, r63, r62
  Append       r65, r64, r27
  SetIndex     r63, r62, r65
  Const        r66, "count"
  Index        r67, r63, r66
  Const        r68, 1
  AddInt       r69, r67, r68
  SetIndex     r63, r66, r69
L1:
  AddInt       r22, r22, r68
  Jump         L3
L0:
  Const        r71, 0
  Move         r70, r71
  Len          r72, r24
L19:
  LessInt      r73, r70, r72
  JumpIfFalse  r73, L4
  Index        r75, r24, r70
  // returnflag: g.key.returnflag,
  Const        r76, "returnflag"
  Index        r77, r75, r7
  Index        r78, r77, r2
  // linestatus: g.key.linestatus,
  Const        r79, "linestatus"
  Index        r80, r75, r7
  Index        r81, r80, r4
  // sum_qty: sum(from x in g select x.l_quantity),
  Const        r82, "sum_qty"
  Const        r83, []
  IterPrep     r84, r75
  Len          r85, r84
  Move         r86, r71
L6:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L5
  Index        r89, r84, r86
  Index        r90, r89, r9
  Append       r83, r83, r90
  AddInt       r86, r86, r68
  Jump         L6
L5:
  Sum          r92, r83
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Const        r93, "sum_base_price"
  Const        r94, []
  IterPrep     r95, r75
  Len          r96, r95
  Move         r97, r71
L8:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L7
  Index        r89, r95, r97
  Index        r100, r89, r11
  Append       r94, r94, r100
  AddInt       r97, r97, r68
  Jump         L8
L7:
  Sum          r102, r94
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Const        r103, "sum_disc_price"
  Const        r104, []
  IterPrep     r105, r75
  Len          r106, r105
  Move         r107, r71
L10:
  LessInt      r108, r107, r106
  JumpIfFalse  r108, L9
  Index        r89, r105, r107
  Index        r110, r89, r11
  Index        r111, r89, r13
  Sub          r112, r68, r111
  Mul          r113, r110, r112
  Append       r104, r104, r113
  AddInt       r107, r107, r68
  Jump         L10
L9:
  Sum          r115, r104
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Const        r116, "sum_charge"
  Const        r117, []
  IterPrep     r118, r75
  Len          r119, r118
  Move         r120, r71
L12:
  LessInt      r121, r120, r119
  JumpIfFalse  r121, L11
  Index        r89, r118, r120
  Index        r123, r89, r11
  Index        r124, r89, r13
  Sub          r125, r68, r124
  Mul          r126, r123, r125
  Index        r127, r89, r15
  Add          r128, r68, r127
  Mul          r129, r126, r128
  Append       r117, r117, r129
  AddInt       r120, r120, r68
  Jump         L12
L11:
  Sum          r131, r117
  // avg_qty: avg(from x in g select x.l_quantity),
  Const        r132, "avg_qty"
  Const        r133, []
  IterPrep     r134, r75
  Len          r135, r134
  Move         r136, r71
L14:
  LessInt      r137, r136, r135
  JumpIfFalse  r137, L13
  Index        r89, r134, r136
  Index        r139, r89, r9
  Append       r133, r133, r139
  AddInt       r136, r136, r68
  Jump         L14
L13:
  Avg          r141, r133
  // avg_price: avg(from x in g select x.l_extendedprice),
  Const        r142, "avg_price"
  Const        r143, []
  IterPrep     r144, r75
  Len          r145, r144
  Move         r146, r71
L16:
  LessInt      r147, r146, r145
  JumpIfFalse  r147, L15
  Index        r89, r144, r146
  Index        r149, r89, r11
  Append       r143, r143, r149
  AddInt       r146, r146, r68
  Jump         L16
L15:
  Avg          r151, r143
  // avg_disc: avg(from x in g select x.l_discount),
  Const        r152, "avg_disc"
  Const        r153, []
  IterPrep     r154, r75
  Len          r155, r154
  Move         r156, r71
L18:
  LessInt      r157, r156, r155
  JumpIfFalse  r157, L17
  Index        r89, r154, r156
  Index        r159, r89, r13
  Append       r153, r153, r159
  AddInt       r156, r156, r68
  Jump         L18
L17:
  Avg          r161, r153
  // count_order: count(g)
  Const        r162, "count_order"
  Index        r163, r75, r66
  // returnflag: g.key.returnflag,
  Move         r164, r76
  Move         r165, r78
  // linestatus: g.key.linestatus,
  Move         r166, r79
  Move         r167, r81
  // sum_qty: sum(from x in g select x.l_quantity),
  Move         r168, r82
  Move         r169, r92
  // sum_base_price: sum(from x in g select x.l_extendedprice),
  Move         r170, r93
  Move         r171, r102
  // sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
  Move         r172, r103
  Move         r173, r115
  // sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
  Move         r174, r116
  Move         r175, r131
  // avg_qty: avg(from x in g select x.l_quantity),
  Move         r176, r132
  Move         r177, r141
  // avg_price: avg(from x in g select x.l_extendedprice),
  Move         r178, r142
  Move         r179, r151
  // avg_disc: avg(from x in g select x.l_discount),
  Move         r180, r152
  Move         r181, r161
  // count_order: count(g)
  Move         r182, r162
  Move         r183, r163
  // select {
  MakeMap      r184, 10, r164
  // from row in lineitem
  Append       r1, r1, r184
  AddInt       r70, r70, r68
  Jump         L19
L4:
  // json(result)
  JSON         r1
  // returnflag: "N",
  Const        r186, "returnflag"
  Const        r187, "N"
  // linestatus: "O",
  Const        r188, "linestatus"
  Const        r189, "O"
  // sum_qty: 53,
  Const        r190, "sum_qty"
  Const        r191, 53
  // sum_base_price: 3000,
  Const        r192, "sum_base_price"
  Const        r193, 3000
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Const        r194, "sum_disc_price"
  Const        r195, 950
  Const        r196, 1800
  Const        r197, 2750
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Const        r198, "sum_charge"
  Const        r199, 1.07
  Const        r200, 1016.5000000000001
  Const        r201, 1.05
  Const        r202, 1890
  Const        r203, 2906.5
  // avg_qty: 26.5,
  Const        r204, "avg_qty"
  Const        r205, 26.5
  // avg_price: 1500,
  Const        r206, "avg_price"
  Const        r207, 1500
  // avg_disc: 0.07500000000000001,
  Const        r208, "avg_disc"
  Const        r209, 0.07500000000000001
  // count_order: 2
  Const        r210, "count_order"
  Const        r211, 2
  // returnflag: "N",
  Move         r212, r186
  Move         r213, r187
  // linestatus: "O",
  Move         r214, r188
  Move         r215, r189
  // sum_qty: 53,
  Move         r216, r190
  Move         r217, r191
  // sum_base_price: 3000,
  Move         r218, r192
  Move         r219, r193
  // sum_disc_price: 950.0 + 1800.0,               // 2750.0
  Move         r220, r194
  Move         r221, r197
  // sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
  Move         r222, r198
  Move         r223, r203
  // avg_qty: 26.5,
  Move         r224, r204
  Move         r225, r205
  // avg_price: 1500,
  Move         r226, r206
  Move         r227, r207
  // avg_disc: 0.07500000000000001,
  Move         r228, r208
  Move         r229, r209
  // count_order: 2
  Move         r230, r210
  Move         r231, r211
  // {
  MakeMap      r233, 10, r212
  // expect result == [
  MakeList     r234, 1, r233
  Equal        r235, r1, r234
  Expect       r235
  Return       r0
