func main (regs=136)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  Const        r2, []
  // group by l.l_shipmode into g
  Const        r3, "l_shipmode"
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r4, "l_commitdate"
  Const        r5, "l_receiptdate"
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r6, "l_shipdate"
  // l_shipmode: g.key,
  Const        r7, "key"
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r8, "high_line_count"
  Const        r9, "o"
  Const        r10, "o_orderpriority"
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r11, "low_line_count"
  // from l in lineitem
  MakeMap      r12, 0, r0
  Const        r13, []
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L6:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r20, r15, r17
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L5:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r26, r21, r23
  Const        r27, "o_orderkey"
  Index        r28, r26, r27
  Const        r29, "l_orderkey"
  Index        r30, r20, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Index        r32, r20, r3
  Const        r33, ["MAIL", "SHIP"]
  In           r35, r32, r33
  JumpIfFalse  r35, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Index        r36, r20, r4
  Index        r37, r20, r5
  Less         r35, r36, r37
  JumpIfFalse  r35, L3
  // (l.l_shipdate < l.l_commitdate) &&
  Index        r39, r20, r6
  Index        r40, r20, r4
  Less         r35, r39, r40
  JumpIfFalse  r35, L3
  // (l.l_receiptdate >= "1994-01-01") &&
  Index        r42, r20, r5
  Const        r43, "1994-01-01"
  LessEq       r35, r43, r42
  JumpIfFalse  r35, L3
  // (l.l_receiptdate < "1995-01-01")
  Index        r45, r20, r5
  Const        r46, "1995-01-01"
  Less         r35, r45, r46
L3:
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r35, L2
  // from l in lineitem
  Const        r48, "l"
  Move         r49, r20
  Const        r50, "o"
  Move         r51, r26
  MakeMap      r52, 2, r48
  // group by l.l_shipmode into g
  Index        r53, r20, r3
  Str          r54, r53
  In           r55, r54, r12
  JumpIfTrue   r55, L4
  // from l in lineitem
  Const        r56, []
  Const        r57, "__group__"
  Const        r58, true
  Const        r59, "key"
  // group by l.l_shipmode into g
  Move         r60, r53
  // from l in lineitem
  Const        r61, "items"
  Move         r62, r56
  Const        r63, "count"
  Const        r64, 0
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  Move         r71, r63
  Move         r72, r64
  MakeMap      r73, 4, r65
  SetIndex     r12, r54, r73
  Append       r13, r13, r73
L4:
  Const        r75, "items"
  Index        r76, r12, r54
  Index        r77, r76, r75
  Append       r78, r77, r52
  SetIndex     r76, r75, r78
  Const        r79, "count"
  Index        r80, r76, r79
  Const        r81, 1
  AddInt       r82, r80, r81
  SetIndex     r76, r79, r82
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r23, r23, r81
  Jump         L5
L1:
  // from l in lineitem
  AddInt       r17, r17, r81
  Jump         L6
L0:
  Const        r84, 0
  Move         r83, r84
  Len          r85, r13
L14:
  LessInt      r86, r83, r85
  JumpIfFalse  r86, L7
  Index        r88, r13, r83
  // l_shipmode: g.key,
  Const        r89, "l_shipmode"
  Index        r90, r88, r7
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r91, "high_line_count"
  Const        r92, []
  IterPrep     r93, r88
  Len          r94, r93
  Move         r95, r84
L10:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L8
  Index        r98, r93, r95
  Index        r99, r98, r9
  Index        r100, r99, r10
  Const        r101, ["1-URGENT", "2-HIGH"]
  In           r102, r100, r101
  JumpIfFalse  r102, L9
  Move         r103, r81
L9:
  Append       r92, r92, r84
  AddInt       r95, r95, r81
  Jump         L10
L8:
  Sum          r105, r92
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r106, "low_line_count"
  Const        r107, []
  IterPrep     r108, r88
  Len          r109, r108
  Move         r110, r84
L13:
  LessInt      r111, r110, r109
  JumpIfFalse  r111, L11
  Index        r98, r108, r110
  Index        r113, r98, r9
  Index        r114, r113, r10
  Const        r115, ["1-URGENT", "2-HIGH"]
  In           r116, r114, r115
  Not          r117, r116
  JumpIfFalse  r117, L12
  Move         r118, r81
L12:
  Append       r107, r107, r84
  AddInt       r110, r110, r81
  Jump         L13
L11:
  Sum          r120, r107
  // l_shipmode: g.key,
  Move         r121, r89
  Move         r122, r90
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Move         r123, r91
  Move         r124, r105
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Move         r125, r106
  Move         r126, r120
  // select {
  MakeMap      r127, 3, r121
  // sort by g.key
  Index        r129, r88, r7
  // from l in lineitem
  Move         r130, r127
  MakeList     r131, 2, r129
  Append       r2, r2, r131
  AddInt       r83, r83, r81
  Jump         L14
L7:
  // sort by g.key
  Sort         r2, r2
  // json(result)
  JSON         r2
  // expect result == [
  Const        r134, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r135, r2, r134
  Expect       r135
  Return       r0
