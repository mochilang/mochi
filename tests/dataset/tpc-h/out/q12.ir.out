func main (regs=145)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  Move         r1, r0
  // let lineitem = [
  Const        r2, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r2
  Len          r8, r7
  Const        r9, 0
  Less         r10, r9, r8
L9:
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
L8:
  Index        r17, r13, r15
  Const        r19, "o_orderkey"
  Index        r20, r17, r19
  Const        r21, "l_orderkey"
  Index        r22, r11, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Const        r24, "l_shipmode"
  Index        r25, r11, r24
  Const        r26, ["MAIL", "SHIP"]
  In           r27, r25, r26
  JumpIfFalse  r27, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r29, "l_commitdate"
  Index        r30, r11, r29
  Const        r31, "l_receiptdate"
  Index        r32, r11, r31
  Less         r33, r30, r32
  JumpIfFalse  r33, L4
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r35, "l_shipdate"
  Index        r36, r11, r35
  Const        r37, "l_commitdate"
  Index        r38, r11, r37
L3:
  Less         r39, r36, r38
  JumpIfFalse  r39, L5
  // (l.l_receiptdate >= "1994-01-01") &&
  Const        r41, "l_receiptdate"
  Index        r42, r11, r41
  Const        r43, "1994-01-01"
  LessEq       r44, r43, r42
  JumpIfFalse  r44, L6
  // (l.l_receiptdate < "1995-01-01")
  Const        r46, "l_receiptdate"
L4:
  Index        r47, r11, r46
  Const        r48, "1995-01-01"
  Less         r49, r47, r48
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r49, L2
  // from l in lineitem
  Const        r50, "l"
  Move         r51, r11
  Const        r52, "o"
L5:
  Move         r53, r17
  MakeMap      r54, 2, r50
  // group by l.l_shipmode into g
  Const        r55, "l_shipmode"
  Index        r56, r11, r55
  Str          r57, r56
  In           r58, r57, r5
  JumpIfTrue   r58, L7
L6:
  // from l in lineitem
  Const        r60, "__group__"
  Const        r61, true
  Const        r62, "key"
  // group by l.l_shipmode into g
  Move         r63, r56
  // from l in lineitem
  MakeMap      r66, 2, r60
  SetIndex     r5, r57, r66
  Append       r67, r6, r66
  Const        r68, "items"
  Index        r69, r5, r57
  Index        r70, r69, r68
  Append       r71, r70, r54
  SetIndex     r69, r68, r71
  // join o in orders on o.o_orderkey == l.l_orderkey
  Jump         L8
  // from l in lineitem
  Jump         L9
  Const        r76, 0
  Len          r77, r67
L7:
  Less         r78, r76, r77
  JumpIfFalse  r78, L10
  Index        r79, r67, r76
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  IterPrep     r86, r79
L2:
  Len          r87, r86
  Const        r88, 0
L1:
  Less         r89, r88, r87
  JumpIfFalse  r89, L11
  Index        r90, r86, r88
  Const        r92, "o"
L0:
  Index        r93, r90, r92
  Const        r94, "o_orderpriority"
L16:
  Index        r95, r93, r94
  Const        r96, ["1-URGENT", "2-HIGH"]
  In           r97, r95, r96
  JumpIfFalse  r97, L12
  Jump         L13
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  IterPrep     r107, r79
  Len          r108, r107
  Const        r109, 0
  Less         r110, r109, r108
  JumpIfFalse  r110, L14
  Index        r111, r107, r109
  Const        r112, "o"
  Index        r113, r111, r112
  Const        r114, "o_orderpriority"
L12:
  Index        r115, r113, r114
L13:
  Const        r116, ["1-URGENT", "2-HIGH"]
  In           r117, r115, r116
  Not          r118, r117
  JumpIfFalse  r118, L15
L11:
  Jump         L15
  // from l in lineitem
  Jump         L16
  // sort by g.key
  Sort         r141, r138
  // json(result)
  JSON         r141
  // expect result == [
  Const        r143, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r144, r141, r143
L15:
  Expect       r144
  Return       r0
