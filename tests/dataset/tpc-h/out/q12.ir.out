func main (regs=122)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  Const        r2, []
  // group by l.l_shipmode into g
  Const        r3, "l_shipmode"
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r4, "l_commitdate"
  Const        r5, "l_receiptdate"
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r6, "l_shipdate"
  // l_shipmode: g.key,
  Const        r7, "key"
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r8, "high_line_count"
  Const        r9, "o"
  Const        r10, "o_orderpriority"
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r11, "low_line_count"
  // from l in lineitem
  MakeMap      r12, 0, r0
  Const        r13, []
  IterPrep     r14, r1
  Len          r15, r14
  Const        r16, 0
L9:
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L0
  Index        r18, r14, r16
  Move         r19, r18
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
L8:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L1
  Index        r24, r20, r22
  Move         r25, r24
  Const        r26, "o_orderkey"
  Index        r27, r25, r26
  Const        r28, "l_orderkey"
  Index        r29, r19, r28
  Equal        r30, r27, r29
  JumpIfFalse  r30, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Index        r31, r19, r3
  Const        r32, ["MAIL", "SHIP"]
  In           r33, r31, r32
  Move         r34, r33
  JumpIfFalse  r34, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Index        r35, r19, r4
  Index        r36, r19, r5
  Less         r37, r35, r36
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Move         r34, r37
L3:
  // (l.l_commitdate < l.l_receiptdate) &&
  Move         r38, r34
  JumpIfFalse  r38, L4
  // (l.l_shipdate < l.l_commitdate) &&
  Index        r39, r19, r6
  Index        r40, r19, r4
  Less         r41, r39, r40
  // (l.l_commitdate < l.l_receiptdate) &&
  Move         r38, r41
L4:
  // (l.l_shipdate < l.l_commitdate) &&
  Move         r42, r38
  JumpIfFalse  r42, L5
  // (l.l_receiptdate >= "1994-01-01") &&
  Index        r43, r19, r5
  Const        r44, "1994-01-01"
  LessEq       r45, r44, r43
  // (l.l_shipdate < l.l_commitdate) &&
  Move         r42, r45
L5:
  // (l.l_receiptdate >= "1994-01-01") &&
  Move         r46, r42
  JumpIfFalse  r46, L6
  // (l.l_receiptdate < "1995-01-01")
  Index        r47, r19, r5
  Const        r48, "1995-01-01"
  Less         r49, r47, r48
  // (l.l_receiptdate >= "1994-01-01") &&
  Move         r46, r49
L6:
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r46, L2
  // from l in lineitem
  Const        r50, "l"
  Move         r51, r19
  Move         r52, r25
  MakeMap      r53, 2, r50
  // group by l.l_shipmode into g
  Index        r54, r19, r3
  Str          r55, r54
  In           r56, r55, r12
  JumpIfTrue   r56, L7
  // from l in lineitem
  Const        r57, []
  Const        r58, "__group__"
  Const        r59, true
  // group by l.l_shipmode into g
  Move         r60, r54
  // from l in lineitem
  Const        r61, "items"
  Move         r62, r57
  Const        r63, "count"
  Const        r64, 0
  MakeMap      r65, 4, r58
  SetIndex     r12, r55, r65
  Append       r66, r13, r65
  Move         r13, r66
L7:
  Index        r67, r12, r55
  Index        r68, r67, r61
  Append       r69, r68, r53
  SetIndex     r67, r61, r69
  Index        r70, r67, r63
  Const        r71, 1
  AddInt       r72, r70, r71
  SetIndex     r67, r63, r72
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r22, r22, r71
  Jump         L8
L1:
  // from l in lineitem
  AddInt       r16, r16, r71
  Jump         L9
L0:
  Move         r73, r64
  Len          r74, r13
L19:
  LessInt      r75, r73, r74
  JumpIfFalse  r75, L10
  Index        r76, r13, r73
  Move         r77, r76
  // l_shipmode: g.key,
  Const        r78, "l_shipmode"
  Index        r79, r77, r7
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r80, "high_line_count"
  Const        r81, []
  IterPrep     r82, r77
  Len          r83, r82
  Move         r84, r64
L14:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L11
  Index        r86, r82, r84
  Move         r87, r86
  Index        r88, r87, r9
  Index        r89, r88, r10
  Const        r90, ["1-URGENT", "2-HIGH"]
  In           r91, r89, r90
  JumpIfFalse  r91, L12
  Move         r92, r71
  Jump         L13
L12:
  Move         r92, r64
L13:
  Append       r93, r81, r92
  Move         r81, r93
  AddInt       r84, r84, r71
  Jump         L14
L11:
  Sum          r94, r81
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r95, "low_line_count"
  Const        r96, []
  IterPrep     r97, r77
  Len          r98, r97
  Move         r99, r64
L18:
  LessInt      r100, r99, r98
  JumpIfFalse  r100, L15
  Index        r101, r97, r99
  Move         r87, r101
  Index        r102, r87, r9
  Index        r103, r102, r10
  Const        r104, ["1-URGENT", "2-HIGH"]
  In           r105, r103, r104
  Not          r106, r105
  JumpIfFalse  r106, L16
  Move         r107, r71
  Jump         L17
L16:
  Move         r107, r64
L17:
  Append       r108, r96, r107
  Move         r96, r108
  AddInt       r99, r99, r71
  Jump         L18
L15:
  Sum          r109, r96
  // l_shipmode: g.key,
  Move         r110, r79
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Move         r111, r94
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Move         r112, r109
  // select {
  MakeMap      r113, 3, r78
  // sort by g.key
  Index        r114, r77, r7
  Move         r115, r114
  // from l in lineitem
  Move         r116, r113
  MakeList     r117, 2, r115
  Append       r118, r2, r117
  Move         r2, r118
  AddInt       r73, r73, r71
  Jump         L19
L10:
  // sort by g.key
  Sort         r119, r2
  // from l in lineitem
  Move         r2, r119
  // json(result)
  JSON         r2
  // expect result == [
  Const        r120, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r121, r2, r120
  Expect       r121
  Return       r0
