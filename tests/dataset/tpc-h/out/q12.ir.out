func main (regs=134)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  Const        r2, []
  // group by l.l_shipmode into g
  Const        r3, "l_shipmode"
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r4, "l_commitdate"
  Const        r5, "l_receiptdate"
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r6, "l_shipdate"
  // l_shipmode: g.key,
  Const        r7, "key"
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r8, "high_line_count"
  Const        r9, "o"
  Const        r10, "o_orderpriority"
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r11, "low_line_count"
  // from l in lineitem
  MakeMap      r12, 0, r0
  Const        r13, []
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L6:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r20, r15, r17
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L5:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r26, r21, r23
  Const        r27, "o_orderkey"
  Index        r28, r26, r27
  Const        r29, "l_orderkey"
  Index        r30, r20, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Index        r32, r20, r3
  Const        r33, ["MAIL", "SHIP"]
  In           r34, r32, r33
  JumpIfFalse  r34, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Index        r35, r20, r4
  Index        r36, r20, r5
  Less         r34, r35, r36
  JumpIfFalse  r34, L3
  // (l.l_shipdate < l.l_commitdate) &&
  Index        r38, r20, r6
  Index        r39, r20, r4
  Less         r34, r38, r39
  JumpIfFalse  r34, L3
  // (l.l_receiptdate >= "1994-01-01") &&
  Index        r41, r20, r5
  Const        r42, "1994-01-01"
  LessEq       r34, r42, r41
  JumpIfFalse  r34, L3
  // (l.l_receiptdate < "1995-01-01")
  Index        r44, r20, r5
  Const        r45, "1995-01-01"
  Less         r34, r44, r45
L3:
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r34, L2
  // from l in lineitem
  Const        r47, "l"
  Move         r48, r20
  Move         r49, r26
  MakeMap      r50, 2, r47
  // group by l.l_shipmode into g
  Index        r51, r20, r3
  Str          r52, r51
  In           r53, r52, r12
  JumpIfTrue   r53, L4
  // from l in lineitem
  Const        r54, []
  Const        r55, "__group__"
  Const        r56, true
  Const        r57, "key"
  // group by l.l_shipmode into g
  Move         r58, r51
  // from l in lineitem
  Const        r59, "items"
  Move         r60, r54
  Const        r61, "count"
  Const        r62, 0
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  MakeMap      r71, 4, r63
  SetIndex     r12, r52, r71
  Append       r13, r13, r71
L4:
  Const        r73, "items"
  Index        r74, r12, r52
  Index        r75, r74, r73
  Append       r76, r75, r50
  SetIndex     r74, r73, r76
  Const        r77, "count"
  Index        r78, r74, r77
  Const        r79, 1
  AddInt       r80, r78, r79
  SetIndex     r74, r77, r80
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r23, r23, r79
  Jump         L5
L1:
  // from l in lineitem
  AddInt       r17, r17, r79
  Jump         L6
L0:
  Const        r82, 0
  Move         r81, r82
  Len          r83, r13
L12:
  LessInt      r84, r81, r83
  JumpIfFalse  r84, L7
  Index        r86, r13, r81
  // l_shipmode: g.key,
  Const        r87, "l_shipmode"
  Index        r88, r86, r7
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r89, "high_line_count"
  Const        r90, []
  IterPrep     r91, r86
  Len          r92, r91
  Move         r93, r82
L9:
  LessInt      r94, r93, r92
  JumpIfFalse  r94, L8
  Index        r96, r91, r93
  Index        r97, r96, r9
  Index        r98, r97, r10
  Const        r99, ["1-URGENT", "2-HIGH"]
  In           r100, r98, r99
  Select       101,100,79,82
  Append       r90, r90, r101
  AddInt       r93, r93, r79
  Jump         L9
L8:
  Sum          r103, r90
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r104, "low_line_count"
  Const        r105, []
  IterPrep     r106, r86
  Len          r107, r106
  Move         r108, r82
L11:
  LessInt      r109, r108, r107
  JumpIfFalse  r109, L10
  Index        r96, r106, r108
  Index        r111, r96, r9
  Index        r112, r111, r10
  Const        r113, ["1-URGENT", "2-HIGH"]
  In           r114, r112, r113
  Not          r115, r114
  Select       116,115,79,82
  Append       r105, r105, r116
  AddInt       r108, r108, r79
  Jump         L11
L10:
  Sum          r118, r105
  // l_shipmode: g.key,
  Move         r119, r87
  Move         r120, r88
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Move         r121, r89
  Move         r122, r103
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Move         r123, r104
  Move         r124, r118
  // select {
  MakeMap      r125, 3, r119
  // sort by g.key
  Index        r127, r86, r7
  // from l in lineitem
  Move         r128, r125
  MakeList     r129, 2, r127
  Append       r2, r2, r129
  AddInt       r81, r81, r79
  Jump         L12
L7:
  // sort by g.key
  Sort         r2, r2
  // json(result)
  JSON         r2
  // expect result == [
  Const        r132, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r133, r2, r132
  Expect       r133
  Return       r0
