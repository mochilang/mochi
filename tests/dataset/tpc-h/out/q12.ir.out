func main (regs=173)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  Const        r2, []
  // group by l.l_shipmode into g
  Const        r3, "l_shipmode"
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Const        r4, "l_shipmode"
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r5, "l_commitdate"
  Const        r6, "l_receiptdate"
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r7, "l_shipdate"
  Const        r8, "l_commitdate"
  // (l.l_receiptdate >= "1994-01-01") &&
  Const        r9, "l_receiptdate"
  // (l.l_receiptdate < "1995-01-01")
  Const        r10, "l_receiptdate"
  // l_shipmode: g.key,
  Const        r11, "l_shipmode"
  Const        r12, "key"
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r13, "high_line_count"
  Const        r14, "o"
  Const        r15, "o_orderpriority"
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r16, "low_line_count"
  Const        r17, "o"
  Const        r18, "o_orderpriority"
  // sort by g.key
  Const        r19, "key"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L6:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r29, r0
  Len          r30, r29
  Const        r31, 0
L5:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_orderkey"
  Index        r36, r34, r35
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Const        r40, "l_shipmode"
  Index        r41, r28, r40
  Const        r42, ["MAIL", "SHIP"]
  In           r44, r41, r42
  JumpIfFalse  r44, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r45, "l_commitdate"
  Index        r46, r28, r45
  Const        r47, "l_receiptdate"
  Index        r48, r28, r47
  Less         r44, r46, r48
  JumpIfFalse  r44, L3
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r50, "l_shipdate"
  Index        r51, r28, r50
  Const        r52, "l_commitdate"
  Index        r53, r28, r52
  Less         r44, r51, r53
  JumpIfFalse  r44, L3
  // (l.l_receiptdate >= "1994-01-01") &&
  Const        r55, "l_receiptdate"
  Index        r56, r28, r55
  Const        r57, "1994-01-01"
  LessEq       r44, r57, r56
  JumpIfFalse  r44, L3
  // (l.l_receiptdate < "1995-01-01")
  Const        r59, "l_receiptdate"
  Index        r60, r28, r59
  Const        r61, "1995-01-01"
  Less         r44, r60, r61
L3:
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r44, L2
  // from l in lineitem
  Const        r63, "l"
  Move         r64, r28
  Const        r65, "o"
  Move         r66, r34
  MakeMap      r67, 2, r63
  // group by l.l_shipmode into g
  Const        r68, "l_shipmode"
  Index        r69, r28, r68
  Str          r70, r69
  In           r71, r70, r20
  JumpIfTrue   r71, L4
  // from l in lineitem
  Const        r72, []
  Const        r73, "__group__"
  Const        r74, true
  Const        r75, "key"
  // group by l.l_shipmode into g
  Move         r76, r69
  // from l in lineitem
  Const        r77, "items"
  Move         r78, r72
  Const        r79, "count"
  Const        r80, 0
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  MakeMap      r89, 4, r81
  SetIndex     r20, r70, r89
  Append       r21, r21, r89
L4:
  Const        r91, "items"
  Index        r92, r20, r70
  Index        r93, r92, r91
  Append       r94, r93, r67
  SetIndex     r92, r91, r94
  Const        r95, "count"
  Index        r96, r92, r95
  Const        r97, 1
  AddInt       r98, r96, r97
  SetIndex     r92, r95, r98
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  Const        r99, 1
  AddInt       r31, r31, r99
  Jump         L5
L1:
  // from l in lineitem
  Const        r100, 1
  AddInt       r25, r25, r100
  Jump         L6
L0:
  Const        r101, 0
  Len          r103, r21
L16:
  LessInt      r104, r101, r103
  JumpIfFalse  r104, L7
  Index        r106, r21, r101
  // l_shipmode: g.key,
  Const        r107, "l_shipmode"
  Const        r108, "key"
  Index        r109, r106, r108
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r110, "high_line_count"
  Const        r111, []
  Const        r112, "o"
  Const        r113, "o_orderpriority"
  IterPrep     r114, r106
  Len          r115, r114
  Const        r116, 0
L11:
  LessInt      r118, r116, r115
  JumpIfFalse  r118, L8
  Index        r120, r114, r116
  Const        r121, "o"
  Index        r122, r120, r121
  Const        r123, "o_orderpriority"
  Index        r124, r122, r123
  Const        r125, ["1-URGENT", "2-HIGH"]
  In           r126, r124, r125
  JumpIfFalse  r126, L9
  Const        r128, 1
  Jump         L10
L9:
  Const        r128, 0
L10:
  Append       r111, r111, r128
  Const        r131, 1
  AddInt       r116, r116, r131
  Jump         L11
L8:
  Sum          r132, r111
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r133, "low_line_count"
  Const        r134, []
  Const        r135, "o"
  Const        r136, "o_orderpriority"
  IterPrep     r137, r106
  Len          r138, r137
  Const        r139, 0
L15:
  LessInt      r141, r139, r138
  JumpIfFalse  r141, L12
  Index        r120, r137, r139
  Const        r143, "o"
  Index        r144, r120, r143
  Const        r145, "o_orderpriority"
  Index        r146, r144, r145
  Const        r147, ["1-URGENT", "2-HIGH"]
  In           r148, r146, r147
  Not          r149, r148
  JumpIfFalse  r149, L13
  Const        r151, 1
  Jump         L14
L13:
  Const        r151, 0
L14:
  Append       r134, r134, r151
  Const        r154, 1
  AddInt       r139, r139, r154
  Jump         L15
L12:
  Sum          r155, r134
  // l_shipmode: g.key,
  Move         r156, r107
  Move         r157, r109
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Move         r158, r110
  Move         r159, r132
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Move         r160, r133
  Move         r161, r155
  // select {
  MakeMap      r162, 3, r156
  // sort by g.key
  Const        r163, "key"
  Index        r165, r106, r163
  // from l in lineitem
  Move         r166, r162
  MakeList     r167, 2, r165
  Append       r2, r2, r167
  Const        r169, 1
  AddInt       r101, r101, r169
  Jump         L16
L7:
  // sort by g.key
  Sort         r2, r2
  // json(result)
  JSON         r2
  // expect result == [
  Const        r171, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r172, r2, r171
  Expect       r172
  Return       r0
