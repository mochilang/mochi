func main (regs=176)
  // let orders = [
  Const        r0, [{"o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderkey": 2, "o_orderpriority": "3-MEDIUM"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1994-02-10", "l_orderkey": 1, "l_receiptdate": "1994-02-15", "l_shipdate": "1994-02-05", "l_shipmode": "MAIL"}, {"l_commitdate": "1994-03-01", "l_orderkey": 2, "l_receiptdate": "1994-02-28", "l_shipdate": "1994-02-27", "l_shipmode": "SHIP"}]
  // from l in lineitem
  Const        r2, []
  // group by l.l_shipmode into g
  Const        r3, "l_shipmode"
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Const        r4, "l_shipmode"
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r5, "l_commitdate"
  Const        r6, "l_receiptdate"
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r7, "l_shipdate"
  Const        r8, "l_commitdate"
  // (l.l_receiptdate >= "1994-01-01") &&
  Const        r9, "l_receiptdate"
  // (l.l_receiptdate < "1995-01-01")
  Const        r10, "l_receiptdate"
  // l_shipmode: g.key,
  Const        r11, "l_shipmode"
  Const        r12, "key"
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r13, "high_line_count"
  Const        r14, "o"
  Const        r15, "o_orderpriority"
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r16, "low_line_count"
  Const        r17, "o"
  Const        r18, "o_orderpriority"
  // sort by g.key
  Const        r19, "key"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L9:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r29, r0
  Len          r30, r29
  Const        r31, 0
L8:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_orderkey"
  Index        r36, r34, r35
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  Const        r40, "l_shipmode"
  Index        r41, r28, r40
  Const        r42, ["MAIL", "SHIP"]
  In           r44, r41, r42
  JumpIfFalse  r44, L3
  // (l.l_commitdate < l.l_receiptdate) &&
  Const        r45, "l_commitdate"
  Index        r46, r28, r45
  Const        r47, "l_receiptdate"
  Index        r48, r28, r47
  Less         r50, r46, r48
L3:
  JumpIfFalse  r50, L4
  // (l.l_shipdate < l.l_commitdate) &&
  Const        r51, "l_shipdate"
  Index        r52, r28, r51
  Const        r53, "l_commitdate"
  Index        r54, r28, r53
  Less         r56, r52, r54
L4:
  JumpIfFalse  r56, L5
  // (l.l_receiptdate >= "1994-01-01") &&
  Const        r57, "l_receiptdate"
  Index        r58, r28, r57
  Const        r59, "1994-01-01"
  LessEq       r61, r59, r58
L5:
  JumpIfFalse  r61, L6
  // (l.l_receiptdate < "1995-01-01")
  Const        r62, "l_receiptdate"
  Index        r63, r28, r62
  Const        r64, "1995-01-01"
  Less         r61, r63, r64
L6:
  // (l.l_shipmode in ["MAIL", "SHIP"]) &&
  JumpIfFalse  r61, L2
  // from l in lineitem
  Const        r66, "l"
  Move         r67, r28
  Const        r68, "o"
  Move         r69, r34
  MakeMap      r70, 2, r66
  // group by l.l_shipmode into g
  Const        r71, "l_shipmode"
  Index        r72, r28, r71
  Str          r73, r72
  In           r74, r73, r20
  JumpIfTrue   r74, L7
  // from l in lineitem
  Const        r75, []
  Const        r76, "__group__"
  Const        r77, true
  Const        r78, "key"
  // group by l.l_shipmode into g
  Move         r79, r72
  // from l in lineitem
  Const        r80, "items"
  Move         r81, r75
  Const        r82, "count"
  Const        r83, 0
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  MakeMap      r92, 4, r84
  SetIndex     r20, r73, r92
  Append       r21, r21, r92
L7:
  Const        r94, "items"
  Index        r95, r20, r73
  Index        r96, r95, r94
  Append       r97, r96, r70
  SetIndex     r95, r94, r97
  Const        r98, "count"
  Index        r99, r95, r98
  Const        r100, 1
  AddInt       r101, r99, r100
  SetIndex     r95, r98, r101
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  Const        r102, 1
  AddInt       r31, r31, r102
  Jump         L8
L1:
  // from l in lineitem
  Const        r103, 1
  AddInt       r25, r25, r103
  Jump         L9
L0:
  Const        r104, 0
  Len          r106, r21
L19:
  LessInt      r107, r104, r106
  JumpIfFalse  r107, L10
  Index        r109, r21, r104
  // l_shipmode: g.key,
  Const        r110, "l_shipmode"
  Const        r111, "key"
  Index        r112, r109, r111
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Const        r113, "high_line_count"
  Const        r114, []
  Const        r115, "o"
  Const        r116, "o_orderpriority"
  IterPrep     r117, r109
  Len          r118, r117
  Const        r119, 0
L14:
  LessInt      r121, r119, r118
  JumpIfFalse  r121, L11
  Index        r123, r117, r119
  Const        r124, "o"
  Index        r125, r123, r124
  Const        r126, "o_orderpriority"
  Index        r127, r125, r126
  Const        r128, ["1-URGENT", "2-HIGH"]
  In           r129, r127, r128
  JumpIfFalse  r129, L12
  Const        r131, 1
  Jump         L13
L12:
  Const        r131, 0
L13:
  Append       r114, r114, r131
  Const        r134, 1
  AddInt       r119, r119, r134
  Jump         L14
L11:
  Sum          r135, r114
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Const        r136, "low_line_count"
  Const        r137, []
  Const        r138, "o"
  Const        r139, "o_orderpriority"
  IterPrep     r140, r109
  Len          r141, r140
  Const        r142, 0
L18:
  LessInt      r144, r142, r141
  JumpIfFalse  r144, L15
  Index        r123, r140, r142
  Const        r146, "o"
  Index        r147, r123, r146
  Const        r148, "o_orderpriority"
  Index        r149, r147, r148
  Const        r150, ["1-URGENT", "2-HIGH"]
  In           r151, r149, r150
  Not          r152, r151
  JumpIfFalse  r152, L16
  Const        r154, 1
  Jump         L17
L16:
  Const        r154, 0
L17:
  Append       r137, r137, r154
  Const        r157, 1
  AddInt       r142, r142, r157
  Jump         L18
L15:
  Sum          r158, r137
  // l_shipmode: g.key,
  Move         r159, r110
  Move         r160, r112
  // high_line_count: sum(from x in g select if x.o.o_orderpriority in ["1-URGENT", "2-HIGH"] { 1 } else { 0 }),
  Move         r161, r113
  Move         r162, r135
  // low_line_count: sum(from x in g select if !(x.o.o_orderpriority in ["1-URGENT", "2-HIGH"]) { 1 } else { 0 })
  Move         r163, r136
  Move         r164, r158
  // select {
  MakeMap      r165, 3, r159
  // sort by g.key
  Const        r166, "key"
  Index        r168, r109, r166
  // from l in lineitem
  Move         r169, r165
  MakeList     r170, 2, r168
  Append       r2, r2, r170
  Const        r172, 1
  AddInt       r104, r104, r172
  Jump         L19
L10:
  // sort by g.key
  Sort         r2, r2
  // json(result)
  JSON         r2
  // expect result == [
  Const        r174, [{"high_line_count": 1, "l_shipmode": "MAIL", "low_line_count": 0}]
  Equal        r175, r2, r174
  Expect       r175
  Return       r0
