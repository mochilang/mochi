func main (regs=29)
L0:
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
L16:
  // let nation = [
  Const        r1, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // let supplier = [
  Const        r2, [{"s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_nationkey": 10, "s_phone": "123", "s_suppkey": 100}, {"s_acctbal": 500, "s_address": "456 Way", "s_comment": "Slow", "s_name": "AltSupplier", "s_nationkey": 20, "s_phone": "456", "s_suppkey": 200}]
L13:
  // let part = [
  Const        r3, [{"p_mfgr": "M1", "p_partkey": 1000, "p_size": 15, "p_type": "LARGE BRASS"}, {"p_mfgr": "M2", "p_partkey": 2000, "p_size": 15, "p_type": "SMALL COPPER"}]
L26:
  // let partsupp = [
  Const        r4, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
  // from r in region
  Const        r5, []
L10:
  IterPrep     r6, r0
L7:
  Len          r7, r6
L20:
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r8, r1
  Len          r1, r8
L2:
  // from r in region
  Const        r9, 0
L11:
  EqualInt     r10, r7, r9
L12:
  JumpIfTrue   r10, L0
L18:
  EqualInt     r10, r1, r9
L1:
  JumpIfTrue   r10, L0
L3:
  LessEq       r10, r1, r7
L8:
  JumpIfFalse  r10, L1
L14:
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r10, 0, r0
  Move         r11, r9
L17:
  LessInt      r12, r11, r1
L6:
  JumpIfFalse  r12, L2
L9:
  Index        r12, r8, r11
L5:
  Move         r13, r12
L21:
  Const        r14, "n_regionkey"
L15:
  Index        r15, r13, r14
L19:
  Index        r16, r10, r15
  Const        r17, nil
  NotEqual     r18, r16, r17
  JumpIfTrue   r18, L3
  MakeList     r18, 0, r0
  SetIndex     r10, r15, r18
  Index        r16, r10, r15
  Append       r18, r16, r12
  SetIndex     r10, r15, r18
  Const        r18, 1
  AddInt       r11, r11, r18
  Jump         L1
  // from r in region
  Move         r11, r9
  LessInt      r16, r11, r7
  JumpIfFalse  r16, L0
  Index        r16, r6, r11
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r15, "r_regionkey"
  Index        r12, r16, r15
  // from r in region
  Index        r19, r10, r12
  NotEqual     r12, r19, r17
  JumpIfFalse  r12, L4
  Len          r12, r19
  Move         r10, r11
  LessInt      r20, r10, r12
  JumpIfFalse  r20, L4
  Index        r13, r19, r10
  // where r.r_name == "EUROPE"
  Const        r12, "r_name"
  Index        r19, r16, r12
  Const        r21, "EUROPE"
  Equal        r22, r19, r21
  JumpIfFalse  r22, L3
  // from r in region
  Append       r5, r5, r13
  AddInt       r10, r10, r18
  Jump         L5
L4:
  AddInt       r11, r11, r18
  Jump         L6
  MakeMap      r20, 0, r0
  Move         r11, r9
  LessInt      r19, r11, r7
  JumpIfFalse  r19, L7
  Index        r22, r6, r11
  Move         r16, r22
  // where r.r_name == "EUROPE"
  Index        r19, r16, r12
  Equal        r7, r19, r21
  JumpIfFalse  r7, L8
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r7, r16, r15
  // from r in region
  Index        r15, r20, r7
  Move         r19, r17
  NotEqual     r6, r15, r19
  JumpIfTrue   r6, L9
  MakeList     r6, 0, r0
  SetIndex     r20, r7, r6
  Index        r15, r20, r7
  Append       r6, r15, r22
  SetIndex     r20, r7, r6
  AddInt       r11, r11, r18
  Jump         L10
  // join n in nation on n.n_regionkey == r.r_regionkey
  Move         r15, r9
  LessInt      r7, r15, r1
  JumpIfFalse  r7, L11
  Index        r13, r8, r15
  Index        r7, r13, r14
  Index        r14, r20, r7
  NotEqual     r6, r14, r19
  JumpIfFalse  r6, L11
  Len          r7, r14
  Move         r6, r15
  LessInt      r19, r6, r7
  JumpIfFalse  r19, L11
  Index        r16, r14, r6
  // where r.r_name == "EUROPE"
  Index        r19, r16, r12
  Equal        r12, r19, r21
  JumpIfFalse  r12, L8
  // from r in region
  Append       r5, r5, r13
  // join n in nation on n.n_regionkey == r.r_regionkey
  AddInt       r6, r6, r18
  Jump         L12
  AddInt       r15, r15, r18
  Jump         L12
  // from s in supplier
  Const        r15, []
  IterPrep     r19, r2
  Len          r2, r19
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r6, r5
  Len          r5, r6
  // from s in supplier
  EqualInt     r21, r2, r9
  JumpIfTrue   r21, L0
  EqualInt     r21, r5, r9
  JumpIfTrue   r21, L0
  LessEq       r21, r5, r2
  JumpIfFalse  r21, L13
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  MakeMap      r21, 0, r0
  Move         r16, r9
  LessInt      r7, r16, r5
  JumpIfFalse  r7, L5
  Index        r7, r6, r16
  Move         r13, r7
  Const        r12, "n_nationkey"
  Index        r14, r13, r12
  Index        r20, r21, r14
  Move         r1, r17
  NotEqual     r17, r20, r1
  JumpIfTrue   r17, L5
  MakeList     r17, 0, r0
  SetIndex     r21, r14, r17
  Index        r20, r21, r14
  Append       r17, r20, r7
  SetIndex     r21, r14, r17
  AddInt       r16, r16, r18
  Jump         L14
  // from s in supplier
  Move         r20, r9
  LessInt      r14, r20, r2
  JumpIfFalse  r14, L0
  Index        r14, r19, r20
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r7, "s_nationkey"
  Index        r16, r14, r7
  // from s in supplier
  Index        r8, r21, r16
  NotEqual     r16, r8, r1
  JumpIfFalse  r16, L7
  Len          r16, r8
  Move         r21, r20
  LessInt      r11, r21, r16
  JumpIfFalse  r11, L7
  Index        r13, r8, r21
  // select { s: s, n: n }
  Const        r11, "s"
  Const        r16, "n"
  Move         r8, r11
  Move         r22, r14
  Move         r10, r16
  Move         r23, r13
  MakeMap      r24, 2, r8
  // from s in supplier
  Append       r15, r15, r24
  AddInt       r21, r21, r18
  Jump         L15
  AddInt       r20, r20, r18
  Jump         L6
  MakeMap      r23, 0, r0
  Move         r10, r9
  LessInt      r22, r10, r2
  JumpIfFalse  r22, L5
  Index        r22, r19, r10
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Index        r19, r22, r7
  // from s in supplier
  Index        r17, r23, r19
  Move         r7, r1
  NotEqual     r1, r17, r7
  JumpIfTrue   r1, L9
  MakeList     r1, 0, r0
  SetIndex     r23, r19, r1
  Index        r17, r23, r19
  Append       r1, r17, r22
  SetIndex     r23, r19, r1
  AddInt       r10, r10, r18
  Jump         L16
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Move         r19, r9
  LessInt      r22, r19, r5
  JumpIfFalse  r22, L17
  Index        r13, r6, r19
  Index        r22, r13, r12
  Index        r12, r23, r22
  NotEqual     r22, r12, r7
  JumpIfFalse  r22, L17
  Len          r22, r12
  Move         r7, r19
  LessInt      r23, r7, r22
  JumpIfFalse  r23, L17
  Index        r14, r12, r7
  // select { s: s, n: n }
  Move         r23, r11
  Move         r22, r16
  Move         r20, r23
  Move         r23, r14
  Move         r12, r22
  Move         r22, r13
  MakeMap      r13, 2, r20
  // from s in supplier
  Append       r15, r15, r13
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  AddInt       r7, r7, r18
  Jump         L18
  AddInt       r19, r19, r18
  Jump         L17
  // from p in part
  Const        r22, []
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r12, "p_size"
  Const        r23, "p_type"
  // from p in part
  IterPrep     r7, r3
  Len          r24, r7
  Move         r3, r9
  LessInt      r20, r3, r24
  JumpIfFalse  r20, L5
  Index        r20, r7, r3
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Index        r7, r20, r12
  Const        r12, 15
  Equal        r24, r7, r12
  Index        r12, r20, r23
  Const        r23, "LARGE BRASS"
  Equal        r7, r12, r23
  Move         r23, r24
  JumpIfFalse  r23, L19
  Move         r23, r7
  JumpIfFalse  r23, L20
  // from p in part
  Append       r22, r22, r20
  AddInt       r3, r3, r18
  Jump         L21
  // from ps in partsupp
  Const        r7, []
  // s_acctbal: s.s.s_acctbal,
  Const        r24, "s_acctbal"
  Move         r3, r11
  // s_name: s.s.s_name,
  Const        r11, "s_name"
  // n_name: s.n.n_name,
  Const        r1, "n_name"
  Move         r12, r16
  // p_partkey: p.p_partkey,
  Const        r16, "p_partkey"
  // p_mfgr: p.p_mfgr,
  Const        r5, "p_mfgr"
  // s_address: s.s.s_address,
  Const        r6, "s_address"
  // s_phone: s.s.s_phone,
  Const        r10, "s_phone"
  // s_comment: s.s.s_comment,
  Const        r17, "s_comment"
  // ps_supplycost: ps.ps_supplycost
  Const        r2, "ps_supplycost"
  // from ps in partsupp
  IterPrep     r8, r4
  Len          r4, r8
  Move         r21, r9
  LessInt      r25, r21, r4
  JumpIfFalse  r25, L22
  Index        r25, r8, r21
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r8, r22
  Len          r22, r8
  Const        r19, "ps_partkey"
  Move         r4, r9
  LessInt      r26, r4, r22
  JumpIfFalse  r26, L23
  Index        r20, r8, r4
  Index        r26, r25, r19
  Index        r19, r20, r16
  Equal        r22, r26, r19
  JumpIfFalse  r22, L24
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r22, r15
  Len          r15, r22
  Const        r13, "ps_suppkey"
  Const        r19, "s_suppkey"
  Move         r26, r9
  LessInt      r8, r26, r15
  JumpIfFalse  r8, L24
  Index        r14, r22, r26
  Index        r8, r25, r13
  Index        r13, r14, r3
  Index        r15, r13, r19
  Equal        r13, r8, r15
  JumpIfFalse  r13, L25
  // s_acctbal: s.s.s_acctbal,
  Move         r13, r24
  Index        r15, r14, r3
  Index        r8, r15, r24
  // s_name: s.s.s_name,
  Move         r15, r11
  Index        r19, r14, r3
  Index        r22, r19, r11
  // n_name: s.n.n_name,
  Move         r19, r1
  Index        r11, r14, r12
  Index        r12, r11, r1
  // p_partkey: p.p_partkey,
  Move         r11, r16
  Index        r1, r20, r16
  // p_mfgr: p.p_mfgr,
  Move         r16, r5
  Index        r23, r20, r5
  // s_address: s.s.s_address,
  Move         r5, r6
  Index        r20, r14, r3
  Index        r27, r20, r6
  // s_phone: s.s.s_phone,
  Move         r20, r10
  Index        r6, r14, r3
  Index        r28, r6, r10
  // s_comment: s.s.s_comment,
  Move         r6, r17
  Index        r10, r14, r3
  Index        r3, r10, r17
  // ps_supplycost: ps.ps_supplycost
  Move         r10, r2
  Index        r17, r25, r2
  // s_acctbal: s.s.s_acctbal,
  Move         r25, r13
  Move         r13, r8
  // s_name: s.s.s_name,
  Move         r8, r15
  Move         r15, r22
  // n_name: s.n.n_name,
  Move         r22, r19
  Move         r19, r12
  // p_partkey: p.p_partkey,
  Move         r12, r11
  Move         r11, r1
  // p_mfgr: p.p_mfgr,
  Move         r1, r16
  Move         r16, r23
  // s_address: s.s.s_address,
  Move         r23, r5
  Move         r5, r27
  // s_phone: s.s.s_phone,
  Move         r27, r20
  Move         r20, r28
  // s_comment: s.s.s_comment,
  Move         r28, r6
  Move         r6, r3
  // ps_supplycost: ps.ps_supplycost
  Move         r3, r10
  Move         r10, r17
  // select {
  MakeMap      r17, 1, r25
  // from ps in partsupp
  Append       r7, r7, r17
L25:
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  Add          r26, r26, r18
  Jump         L14
L24:
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Add          r4, r4, r18
  Jump         L26
L23:
  // from ps in partsupp
  AddInt       r21, r21, r18
  Jump         L9
L22:
  // let costs = from x in target_partsupp select x.ps_supplycost
  Const        r21, []
  IterPrep     r10, r7
  Len          r3, r10
  Move         r6, r9
L28:
  LessInt      r28, r6, r3
  JumpIfFalse  r28, L27
  Index        r4, r10, r6
  Index        r28, r4, r2
  Append       r21, r21, r28
  AddInt       r6, r6, r18
  Jump         L28
L27:
  // let min_cost = min(costs)
  Min          r28, r21
  // from x in target_partsupp
  Const        r21, []
  IterPrep     r6, r7
  Len          r7, r6
  Move         r3, r9
L31:
  LessInt      r9, r3, r7
  JumpIfFalse  r9, L29
  Index        r4, r6, r3
  // where x.ps_supplycost == min_cost
  Index        r9, r4, r2
  Equal        r2, r9, r28
  JumpIfFalse  r2, L30
  // sort by -x.s_acctbal
  Index        r17, r4, r24
  Neg          r2, r17
  // from x in target_partsupp
  Move         r17, r4
  MakeList     r4, 2, r2
  Append       r21, r21, r4
L30:
  AddInt       r3, r3, r18
  Jump         L31
L29:
  // sort by -x.s_acctbal
  Sort         r21, r21
  // json(result)
  JSON         r21
  // expect result == [
  Const        r4, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r17, r21, r4
  Expect       r17
  Return       r0
