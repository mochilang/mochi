func main (regs=180)
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
  // let nation = [
  Const        r1, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // let supplier = [
  Const        r2, [{"s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_nationkey": 10, "s_phone": "123", "s_suppkey": 100}, {"s_acctbal": 500, "s_address": "456 Way", "s_comment": "Slow", "s_name": "AltSupplier", "s_nationkey": 20, "s_phone": "456", "s_suppkey": 200}]
  // let part = [
  Const        r3, [{"p_mfgr": "M1", "p_partkey": 1000, "p_size": 15, "p_type": "LARGE BRASS"}, {"p_mfgr": "M2", "p_partkey": 2000, "p_size": 15, "p_type": "SMALL COPPER"}]
  // let partsupp = [
  Const        r4, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
  // from r in region
  Const        r5, []
  IterPrep     r6, r0
  Len          r7, r6
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, "n_regionkey"
  Const        r11, "r_regionkey"
  // where r.r_name == "EUROPE"
  Const        r12, "r_name"
  // from r in region
  Const        r13, 0
L4:
  LessInt      r14, r13, r7
  JumpIfFalse  r14, L0
  Index        r16, r6, r13
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r17, 0
L3:
  LessInt      r18, r17, r9
  JumpIfFalse  r18, L1
  Index        r20, r8, r17
  Index        r21, r20, r10
  Index        r22, r16, r11
  Equal        r23, r21, r22
  JumpIfFalse  r23, L2
  // where r.r_name == "EUROPE"
  Index        r24, r16, r12
  Const        r25, "EUROPE"
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // from r in region
  Append       r5, r5, r20
L2:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r28, 1
  AddInt       r17, r17, r28
  Jump         L3
L1:
  // from r in region
  AddInt       r13, r13, r28
  Jump         L4
L0:
  // from s in supplier
  Const        r29, []
  IterPrep     r30, r2
  Len          r31, r30
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r32, r5
  Len          r33, r32
  Const        r34, "s_nationkey"
  Const        r35, "n_nationkey"
  // select { s: s, n: n }
  Const        r36, "s"
  Const        r37, "n"
  // from s in supplier
  Const        r38, 0
L9:
  LessInt      r39, r38, r31
  JumpIfFalse  r39, L5
  Index        r41, r30, r38
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r42, 0
L8:
  LessInt      r43, r42, r33
  JumpIfFalse  r43, L6
  Index        r20, r32, r42
  Index        r45, r41, r34
  Index        r46, r20, r35
  Equal        r47, r45, r46
  JumpIfFalse  r47, L7
  // select { s: s, n: n }
  Const        r48, "s"
  Const        r49, "n"
  Move         r50, r48
  Move         r51, r41
  Move         r52, r49
  Move         r53, r20
  MakeMap      r54, 2, r50
  // from s in supplier
  Append       r29, r29, r54
L7:
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  AddInt       r42, r42, r28
  Jump         L8
L6:
  // from s in supplier
  AddInt       r38, r38, r28
  Jump         L9
L5:
  // from p in part
  Const        r56, []
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r57, "p_size"
  Const        r58, "p_type"
  // from p in part
  IterPrep     r59, r3
  Len          r60, r59
  Const        r62, 0
  Move         r61, r62
L13:
  LessInt      r63, r61, r60
  JumpIfFalse  r63, L10
  Index        r65, r59, r61
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Index        r66, r65, r57
  Const        r67, 15
  Equal        r68, r66, r67
  Index        r69, r65, r58
  Const        r70, "LARGE BRASS"
  Equal        r71, r69, r70
  JumpIfFalse  r68, L11
  Move         r68, r71
L11:
  JumpIfFalse  r68, L12
  // from p in part
  Append       r56, r56, r65
L12:
  AddInt       r61, r61, r28
  Jump         L13
L10:
  // from ps in partsupp
  Const        r73, []
  // s_acctbal: s.s.s_acctbal,
  Const        r74, "s_acctbal"
  // s_name: s.s.s_name,
  Const        r75, "s_name"
  // n_name: s.n.n_name,
  Const        r76, "n_name"
  // p_partkey: p.p_partkey,
  Const        r77, "p_partkey"
  // p_mfgr: p.p_mfgr,
  Const        r78, "p_mfgr"
  // s_address: s.s.s_address,
  Const        r79, "s_address"
  // s_phone: s.s.s_phone,
  Const        r80, "s_phone"
  // s_comment: s.s.s_comment,
  Const        r81, "s_comment"
  // ps_supplycost: ps.ps_supplycost
  Const        r82, "ps_supplycost"
  // from ps in partsupp
  IterPrep     r83, r4
  Len          r84, r83
  Move         r85, r62
L20:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L14
  Index        r88, r83, r85
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r89, r56
  Len          r90, r89
  Const        r91, "ps_partkey"
  Move         r92, r62
L19:
  LessInt      r93, r92, r90
  JumpIfFalse  r93, L15
  Index        r65, r89, r92
  Index        r95, r88, r91
  Index        r96, r65, r77
  Equal        r97, r95, r96
  JumpIfFalse  r97, L16
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r98, r29
  Len          r99, r98
  Const        r100, "ps_suppkey"
  Const        r101, "s_suppkey"
  Move         r102, r62
L18:
  LessInt      r103, r102, r99
  JumpIfFalse  r103, L16
  Index        r41, r98, r102
  Index        r105, r88, r100
  Index        r106, r41, r36
  Index        r107, r106, r101
  Equal        r108, r105, r107
  JumpIfFalse  r108, L17
  // s_acctbal: s.s.s_acctbal,
  Const        r109, "s_acctbal"
  Index        r110, r41, r36
  Index        r111, r110, r74
  // s_name: s.s.s_name,
  Const        r112, "s_name"
  Index        r113, r41, r36
  Index        r114, r113, r75
  // n_name: s.n.n_name,
  Const        r115, "n_name"
  Index        r116, r41, r37
  Index        r117, r116, r76
  // p_partkey: p.p_partkey,
  Const        r118, "p_partkey"
  Index        r119, r65, r77
  // p_mfgr: p.p_mfgr,
  Const        r120, "p_mfgr"
  Index        r121, r65, r78
  // s_address: s.s.s_address,
  Const        r122, "s_address"
  Index        r123, r41, r36
  Index        r124, r123, r79
  // s_phone: s.s.s_phone,
  Const        r125, "s_phone"
  Index        r126, r41, r36
  Index        r127, r126, r80
  // s_comment: s.s.s_comment,
  Const        r128, "s_comment"
  Index        r129, r41, r36
  Index        r130, r129, r81
  // ps_supplycost: ps.ps_supplycost
  Const        r131, "ps_supplycost"
  Index        r132, r88, r82
  // s_acctbal: s.s.s_acctbal,
  Move         r133, r109
  Move         r134, r111
  // s_name: s.s.s_name,
  Move         r135, r112
  Move         r136, r114
  // n_name: s.n.n_name,
  Move         r137, r115
  Move         r138, r117
  // p_partkey: p.p_partkey,
  Move         r139, r118
  Move         r140, r119
  // p_mfgr: p.p_mfgr,
  Move         r141, r120
  Move         r142, r121
  // s_address: s.s.s_address,
  Move         r143, r122
  Move         r144, r124
  // s_phone: s.s.s_phone,
  Move         r145, r125
  Move         r146, r127
  // s_comment: s.s.s_comment,
  Move         r147, r128
  Move         r148, r130
  // ps_supplycost: ps.ps_supplycost
  Move         r149, r131
  Move         r150, r132
  // select {
  MakeMap      r151, 9, r133
  // from ps in partsupp
  Append       r73, r73, r151
L17:
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  Add          r102, r102, r28
  Jump         L18
L16:
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Add          r92, r92, r28
  Jump         L19
L15:
  // from ps in partsupp
  AddInt       r85, r85, r28
  Jump         L20
L14:
  // let costs = from x in target_partsupp select x.ps_supplycost
  Const        r153, []
  IterPrep     r154, r73
  Len          r155, r154
  Move         r156, r62
L22:
  LessInt      r157, r156, r155
  JumpIfFalse  r157, L21
  Index        r159, r154, r156
  Index        r160, r159, r82
  Append       r153, r153, r160
  AddInt       r156, r156, r28
  Jump         L22
L21:
  // let min_cost = min(costs)
  Min          r162, r153
  // from x in target_partsupp
  Const        r163, []
  IterPrep     r164, r73
  Len          r165, r164
  Move         r166, r62
L25:
  LessInt      r167, r166, r165
  JumpIfFalse  r167, L23
  Index        r159, r164, r166
  // where x.ps_supplycost == min_cost
  Index        r169, r159, r82
  Equal        r170, r169, r162
  JumpIfFalse  r170, L24
  // sort by -x.s_acctbal
  Index        r171, r159, r74
  Neg          r173, r171
  // from x in target_partsupp
  Move         r174, r159
  MakeList     r175, 2, r173
  Append       r163, r163, r175
L24:
  AddInt       r166, r166, r28
  Jump         L25
L23:
  // sort by -x.s_acctbal
  Sort         r163, r163
  // json(result)
  JSON         r163
  // expect result == [
  Const        r178, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r179, r163, r178
  Expect       r179
  Return       r0
