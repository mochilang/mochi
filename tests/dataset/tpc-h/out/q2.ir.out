func main (regs=266)
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
  Move         r1, r0
  // let nation = [
  Const        r2, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // let supplier = [
  Const        r4, [{"s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_nationkey": 10, "s_phone": "123", "s_suppkey": 100}, {"s_acctbal": 500, "s_address": "456 Way", "s_comment": "Slow", "s_name": "AltSupplier", "s_nationkey": 20, "s_phone": "456", "s_suppkey": 200}]
  // let part = [
  Const        r6, [{"p_mfgr": "M1", "p_partkey": 1000, "p_size": 15, "p_type": "LARGE BRASS"}, {"p_mfgr": "M2", "p_partkey": 2000, "p_size": 15, "p_type": "SMALL COPPER"}]
  // let partsupp = [
  Const        r8, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
  // from r in region
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r13, r2
  Len          r14, r13
  // from r in region
  Const        r15, 0
  Less         r16, r15, r12
  JumpIfFalse  r16, L0
  Index        r17, r11, r15
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r19, 0
L4:
  Less         r20, r19, r14
  JumpIfFalse  r20, L1
  Index        r21, r13, r19
  Const        r23, "n_regionkey"
  Index        r24, r21, r23
L3:
  Const        r25, "r_regionkey"
  Index        r26, r17, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // where r.r_name == "EUROPE"
  Const        r28, "r_name"
  Index        r29, r17, r28
  Const        r30, "EUROPE"
  Equal        r31, r29, r30
  JumpIfFalse  r31, L2
  // from r in region
  Append       r32, r10, r21
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r33, 1
  Add          r34, r19, r33
  Jump         L3
  // from r in region
  Const        r35, 1
  Add          r36, r15, r35
  Jump         L4
  // from s in supplier
  Const        r38, []
L2:
  IterPrep     r39, r4
  Len          r40, r39
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r41, r32
  Len          r42, r41
L1:
  // from s in supplier
  Const        r43, 0
  Less         r44, r43, r40
  JumpIfFalse  r44, L5
  Index        r45, r39, r43
L0:
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r47, 0
  Less         r48, r47, r42
  JumpIfFalse  r48, L6
  Index        r49, r41, r47
  Const        r50, "s_nationkey"
  Index        r51, r45, r50
  Const        r52, "n_nationkey"
L9:
  Index        r53, r49, r52
  Equal        r54, r51, r53
  JumpIfFalse  r54, L7
  // select { s: s, n: n }
  Const        r55, "s"
  Const        r56, "n"
L8:
  Move         r57, r55
  Move         r58, r45
  Move         r59, r56
  Move         r60, r49
  MakeMap      r61, 2, r57
  // from s in supplier
  Append       r62, r38, r61
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r63, 1
  Add          r64, r47, r63
  Jump         L8
  // from s in supplier
  Const        r65, 1
  Add          r66, r43, r65
  Jump         L9
  // from p in part
  Const        r68, []
  IterPrep     r69, r6
  Len          r70, r69
  Const        r71, 0
  Less         r72, r71, r70
  JumpIfFalse  r72, L10
  Index        r73, r69, r71
L7:
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r75, "p_size"
  Index        r76, r73, r75
  Const        r77, 15
  Equal        r78, r76, r77
L6:
  Const        r79, "p_type"
  Index        r80, r73, r79
  Const        r81, "LARGE BRASS"
  Equal        r82, r80, r81
L5:
  JumpIfFalse  r78, L11
  JumpIfFalse  r82, L12
  // from p in part
  Append       r84, r68, r73
  Const        r85, 1
  Add          r86, r71, r85
L13:
  Move         r71, r86
  Jump         L13
  // from ps in partsupp
  Const        r88, []
  IterPrep     r89, r8
  Len          r90, r89
  Const        r91, 0
  Less         r92, r91, r90
  JumpIfFalse  r92, L14
  Index        r93, r89, r91
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r95, r84
  Len          r96, r95
  Const        r97, 0
  Less         r98, r97, r96
  JumpIfFalse  r98, L15
  Index        r99, r95, r97
L11:
  Const        r100, "ps_partkey"
  Index        r101, r93, r100
  Const        r102, "p_partkey"
L12:
  Index        r103, r99, r102
  Equal        r104, r101, r103
  JumpIfFalse  r104, L16
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r105, r62
L10:
  Len          r106, r105
  Const        r107, 0
  Less         r108, r107, r106
  JumpIfFalse  r108, L16
  Index        r109, r105, r107
L20:
  Const        r110, "ps_suppkey"
  Index        r111, r93, r110
  Const        r112, "s"
  Index        r113, r109, r112
  Const        r114, "s_suppkey"
  Index        r115, r113, r114
  Equal        r116, r111, r115
L19:
  JumpIfFalse  r116, L17
  // s_acctbal: s.s.s_acctbal,
  Const        r117, "s_acctbal"
  Const        r118, "s"
  Index        r119, r109, r118
  Const        r120, "s_acctbal"
  Index        r121, r119, r120
  // s_name: s.s.s_name,
  Const        r122, "s_name"
  Const        r123, "s"
  Index        r124, r109, r123
  Const        r125, "s_name"
  Index        r126, r124, r125
  // n_name: s.n.n_name,
  Const        r127, "n_name"
  Const        r128, "n"
L18:
  Index        r129, r109, r128
  Const        r130, "n_name"
  Index        r131, r129, r130
  // p_partkey: p.p_partkey,
  Const        r132, "p_partkey"
  Const        r133, "p_partkey"
  Index        r134, r99, r133
  // p_mfgr: p.p_mfgr,
  Const        r135, "p_mfgr"
  Const        r136, "p_mfgr"
  Index        r137, r99, r136
  // s_address: s.s.s_address,
  Const        r138, "s_address"
  Const        r139, "s"
  Index        r140, r109, r139
  Const        r141, "s_address"
  Index        r142, r140, r141
  // s_phone: s.s.s_phone,
  Const        r143, "s_phone"
  Const        r144, "s"
  Index        r145, r109, r144
  Const        r146, "s_phone"
  Index        r147, r145, r146
  // s_comment: s.s.s_comment,
  Const        r148, "s_comment"
  Const        r149, "s"
  Index        r150, r109, r149
  Const        r151, "s_comment"
  Index        r152, r150, r151
  // ps_supplycost: ps.ps_supplycost
  Const        r153, "ps_supplycost"
  Const        r154, "ps_supplycost"
  Index        r155, r93, r154
  // s_acctbal: s.s.s_acctbal,
  Move         r156, r117
  Move         r157, r121
  // s_name: s.s.s_name,
  Move         r158, r122
  Move         r159, r126
  // n_name: s.n.n_name,
  Move         r160, r127
  Move         r161, r131
  // p_partkey: p.p_partkey,
  Move         r162, r132
  Move         r163, r134
  // p_mfgr: p.p_mfgr,
  Move         r164, r135
  Move         r165, r137
  // s_address: s.s.s_address,
  Move         r166, r138
  Move         r167, r142
  // s_phone: s.s.s_phone,
  Move         r168, r143
  Move         r169, r147
  // s_comment: s.s.s_comment,
  Move         r170, r148
  Move         r171, r152
  // ps_supplycost: ps.ps_supplycost
  Move         r172, r153
  Move         r173, r155
  // select {
  MakeMap      r174, 9, r156
  // from ps in partsupp
  Append       r175, r88, r174
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  Const        r176, 1
  Add          r177, r107, r176
  Jump         L18
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Const        r178, 1
  Add          r179, r97, r178
  Jump         L19
  // from ps in partsupp
  Const        r180, 1
  Add          r181, r91, r180
  Jump         L20
  // let costs = from x in target_partsupp select x.ps_supplycost
  Const        r183, []
  IterPrep     r184, r175
  Len          r185, r184
  Const        r186, 0
  Less         r187, r186, r185
  JumpIfFalse  r187, L21
  Index        r188, r184, r186
  Const        r190, "ps_supplycost"
  Index        r191, r188, r190
  Append       r192, r183, r191
  Const        r193, 1
  Add          r194, r186, r193
  Jump         L22
  // let min_cost = min(costs)
  Min          r196, r192
  // from x in target_partsupp
  Const        r198, []
  IterPrep     r199, r175
L17:
  Len          r200, r199
  Const        r201, 0
  Less         r202, r201, r200
  JumpIfFalse  r202, L23
L16:
  Index        r203, r199, r201
  // where x.ps_supplycost == min_cost
  Const        r204, "ps_supplycost"
  Index        r205, r203, r204
  Equal        r206, r205, r196
L15:
  JumpIfFalse  r206, L24
  // sort by -x.s_acctbal
  Const        r207, "s_acctbal"
  Index        r208, r203, r207
  Neg          r209, r208
L14:
  Move         r210, r209
  // from x in target_partsupp
  Move         r211, r203
  MakeList     r212, 2, r210
  Append       r213, r198, r212
  Const        r214, 1
L22:
  Add          r215, r201, r214
  Jump         L25
  // sort by -x.s_acctbal
  Sort         r216, r213
  // json(result)
  JSON         r217
  // expect result == [
  Const        r218, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r219, r216, r218
  Expect       r219
  Return       r0
