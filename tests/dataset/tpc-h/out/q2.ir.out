func main (regs=220)
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
  Move         r1, r0
  // let nation = [
  Const        r2, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // from r in region
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r13, r2
  Len          r14, r13
  // from r in region
  Const        r15, 0
  Less         r16, r15, r12
  JumpIfFalse  r16, L0
  Index        r17, r11, r15
L4:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r19, 0
  Less         r20, r19, r14
  JumpIfFalse  r20, L1
  Index        r21, r13, r19
  Const        r23, "n_regionkey"
L3:
  Index        r24, r21, r23
  Const        r25, "r_regionkey"
  Index        r26, r17, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // where r.r_name == "EUROPE"
  Const        r28, "r_name"
  Index        r29, r17, r28
  Const        r30, "EUROPE"
  Equal        r31, r29, r30
  JumpIfFalse  r31, L2
  // from r in region
  Append       r32, r10, r21
  // join n in nation on n.n_regionkey == r.r_regionkey
  Jump         L3
  // from r in region
  Jump         L4
  // from s in supplier
  IterPrep     r39, r4
L2:
  Len          r40, r39
L1:
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r41, r32
  Len          r42, r41
  // from s in supplier
  Const        r43, 0
  Less         r44, r43, r40
L0:
  JumpIfFalse  r44, L5
  Index        r45, r39, r43
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r47, 0
  Less         r48, r47, r42
  JumpIfFalse  r48, L6
  Index        r49, r41, r47
  Const        r50, "s_nationkey"
L9:
  Index        r51, r45, r50
  Const        r52, "n_nationkey"
  Index        r53, r49, r52
  Equal        r54, r51, r53
  JumpIfFalse  r54, L7
L8:
  Jump         L8
  // from s in supplier
  Jump         L9
  // from p in part
  Const        r68, []
  IterPrep     r69, r6
  Len          r70, r69
  Const        r71, 0
  Less         r72, r71, r70
  JumpIfFalse  r72, L10
L7:
  Index        r73, r69, r71
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r75, "p_size"
  Index        r76, r73, r75
L6:
  Const        r77, 15
  Equal        r78, r76, r77
  Const        r79, "p_type"
  Index        r80, r73, r79
L5:
  Const        r81, "LARGE BRASS"
  Equal        r82, r80, r81
  JumpIfFalse  r78, L11
  JumpIfFalse  r82, L12
L13:
  // from p in part
  Jump         L13
  // from ps in partsupp
  IterPrep     r89, r9
  Len          r90, r89
  Const        r91, 0
  Less         r92, r91, r90
  JumpIfFalse  r92, L14
L11:
  Index        r93, r89, r91
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r95, r68
  Len          r96, r95
  Const        r97, 0
  Less         r98, r97, r96
  JumpIfFalse  r98, L15
  Index        r99, r95, r97
  Const        r100, "ps_partkey"
L12:
  Index        r101, r93, r100
  Const        r102, "p_partkey"
  Index        r103, r99, r102
  Equal        r104, r101, r103
L10:
  JumpIfFalse  r104, L16
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r105, r62
  Len          r106, r105
  Const        r107, 0
  Less         r108, r107, r106
L20:
  JumpIfFalse  r108, L16
  Index        r109, r105, r107
  Const        r110, "ps_suppkey"
  Index        r111, r93, r110
  Const        r112, "s"
  Index        r113, r109, r112
  Const        r114, "s_suppkey"
L19:
  Index        r115, r113, r114
  Equal        r116, r111, r115
  JumpIfFalse  r116, L17
L18:
  Jump         L18
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Jump         L19
  // from ps in partsupp
  Jump         L20
  // let costs = from x in target_partsupp select x.ps_supplycost
  IterPrep     r184, r175
  Len          r185, r184
  Const        r186, 0
  Less         r187, r186, r185
  JumpIfFalse  r187, L21
  Jump         L22
  // let min_cost = min(costs)
  Min          r196, r192
  // from x in target_partsupp
  Const        r198, []
  IterPrep     r199, r175
  Len          r200, r199
  Const        r201, 0
  Less         r202, r201, r200
  JumpIfFalse  r202, L23
  Index        r203, r199, r201
L17:
  // where x.ps_supplycost == min_cost
  Const        r204, "ps_supplycost"
  Index        r205, r203, r204
L16:
  Equal        r206, r205, r196
L15:
  JumpIfFalse  r206, L24
L14:
  // sort by -x.s_acctbal
  Sort         r216, r198
  // json(result)
  JSON         r216
  // expect result == [
  Const        r218, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r219, r216, r218
  Expect       r219
L22:
  Return       r0
