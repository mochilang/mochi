func main (regs=279)
L9:
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
  // let nation = [
  Const        r1, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // let supplier = [
  Const        r2, [{"s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_nationkey": 10, "s_phone": "123", "s_suppkey": 100}, {"s_acctbal": 500, "s_address": "456 Way", "s_comment": "Slow", "s_name": "AltSupplier", "s_nationkey": 20, "s_phone": "456", "s_suppkey": 200}]
  // let part = [
  Const        r3, [{"p_mfgr": "M1", "p_partkey": 1000, "p_size": 15, "p_type": "LARGE BRASS"}, {"p_mfgr": "M2", "p_partkey": 2000, "p_size": 15, "p_type": "SMALL COPPER"}]
  // let partsupp = [
  Const        r4, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
  // from r in region
  Const        r5, []
  IterPrep     r6, r0
  Len          r7, r6
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r8, r1
  Len          r9, r8
  // from r in region
  Const        r10, 0
  EqualInt     r11, r7, r10
  JumpIfTrue   r11, L0
  EqualInt     r12, r9, r10
  JumpIfTrue   r12, L0
  LessEq       r13, r9, r7
  JumpIfFalse  r13, L1
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r14, 0, r0
  Const        r15, 0
L4:
  Less         r16, r15, r9
  JumpIfFalse  r16, L2
  Index        r17, r8, r15
  Move         r18, r17
  Const        r19, "n_regionkey"
  Index        r20, r18, r19
  Index        r21, r14, r20
  Const        r22, nil
  NotEqual     r23, r21, r22
  JumpIfTrue   r23, L3
  MakeList     r24, 0, r0
  SetIndex     r14, r20, r24
L3:
  Index        r21, r14, r20
  Append       r25, r21, r17
  SetIndex     r14, r20, r25
  Const        r26, 1
  Add          r15, r15, r26
  Jump         L4
L2:
  // from r in region
  Const        r28, 0
L8:
  Less         r29, r28, r7
  JumpIfFalse  r29, L0
  Index        r31, r6, r28
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r32, "r_regionkey"
  Index        r33, r31, r32
  // from r in region
  Index        r34, r14, r33
  Const        r35, nil
  NotEqual     r36, r34, r35
  JumpIfFalse  r36, L5
  Len          r37, r34
  Const        r38, 0
L7:
  Less         r39, r38, r37
  JumpIfFalse  r39, L5
  Index        r18, r34, r38
  // where r.r_name == "EUROPE"
  Const        r41, "r_name"
  Index        r42, r31, r41
  Const        r43, "EUROPE"
  Equal        r44, r42, r43
  JumpIfFalse  r44, L6
  // from r in region
  Append       r5, r5, r18
L6:
  Const        r46, 1
  Add          r38, r38, r46
  Jump         L7
L5:
  Const        r48, 1
  Add          r28, r28, r48
  Jump         L8
L0:
  Jump         L9
L1:
  MakeMap      r50, 0, r0
  Const        r51, 0
L13:
  Less         r52, r51, r7
  JumpIfFalse  r52, L10
  Index        r53, r6, r51
  Move         r31, r53
  // where r.r_name == "EUROPE"
  Index        r54, r31, r41
  Equal        r55, r54, r43
  JumpIfFalse  r55, L11
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r56, r31, r32
  // from r in region
  Index        r57, r50, r56
  Const        r58, nil
  NotEqual     r59, r57, r58
  JumpIfTrue   r59, L12
  MakeList     r60, 0, r0
  SetIndex     r50, r56, r60
L12:
  Index        r57, r50, r56
  Append       r61, r57, r53
  SetIndex     r50, r56, r61
L11:
  Const        r62, 1
  Add          r51, r51, r62
  Jump         L13
L10:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r64, 0
L18:
  Less         r65, r64, r9
  JumpIfFalse  r65, L14
  Index        r18, r8, r64
  Index        r67, r18, r19
  Index        r68, r50, r67
  Const        r69, nil
  NotEqual     r70, r68, r69
  JumpIfFalse  r70, L15
  Len          r71, r68
  Const        r72, 0
L17:
  Less         r73, r72, r71
  JumpIfFalse  r73, L15
  Index        r31, r68, r72
  // where r.r_name == "EUROPE"
  Index        r75, r31, r41
  Equal        r76, r75, r43
  JumpIfFalse  r76, L16
  // from r in region
  Append       r5, r5, r18
L16:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r78, 1
  Add          r72, r72, r78
  Jump         L17
L15:
  Const        r80, 1
  Add          r64, r64, r80
  Jump         L18
L14:
  // from s in supplier
  Const        r82, []
  IterPrep     r83, r2
  Len          r84, r83
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r85, r5
  Len          r86, r85
  // from s in supplier
  Const        r87, 0
  EqualInt     r88, r84, r87
  JumpIfTrue   r88, L19
  EqualInt     r89, r86, r87
  JumpIfTrue   r89, L19
  LessEq       r90, r86, r84
  JumpIfFalse  r90, L20
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  MakeMap      r91, 0, r0
  Const        r92, 0
L23:
  Less         r93, r92, r86
  JumpIfFalse  r93, L21
  Index        r94, r85, r92
  Move         r18, r94
  Const        r95, "n_nationkey"
  Index        r96, r18, r95
  Index        r97, r91, r96
  Const        r98, nil
  NotEqual     r99, r97, r98
  JumpIfTrue   r99, L22
  MakeList     r100, 0, r0
  SetIndex     r91, r96, r100
L22:
  Index        r97, r91, r96
  Append       r101, r97, r94
  SetIndex     r91, r96, r101
  Const        r102, 1
  Add          r92, r92, r102
  Jump         L23
L21:
  // from s in supplier
  Const        r104, 0
L26:
  Less         r105, r104, r84
  JumpIfFalse  r105, L19
  Index        r107, r83, r104
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r108, "s_nationkey"
  Index        r109, r107, r108
  // from s in supplier
  Index        r110, r91, r109
  Const        r111, nil
  NotEqual     r112, r110, r111
  JumpIfFalse  r112, L24
  Len          r113, r110
  Const        r114, 0
L25:
  Less         r115, r114, r113
  JumpIfFalse  r115, L24
  Index        r18, r110, r114
  // select { s: s, n: n }
  Const        r117, "s"
  Const        r118, "n"
  Move         r119, r107
  Move         r120, r18
  MakeMap      r121, 2, r117
  // from s in supplier
  Append       r82, r82, r121
  Const        r123, 1
  Add          r114, r114, r123
  Jump         L25
L24:
  Const        r125, 1
  Add          r104, r104, r125
  Jump         L26
L19:
  Jump         L9
L20:
  MakeMap      r127, 0, r0
  Const        r128, 0
L29:
  Less         r129, r128, r84
  JumpIfFalse  r129, L27
  Index        r130, r83, r128
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Index        r131, r130, r108
  // from s in supplier
  Index        r132, r127, r131
  Const        r133, nil
  NotEqual     r134, r132, r133
  JumpIfTrue   r134, L28
  MakeList     r135, 0, r0
  SetIndex     r127, r131, r135
L28:
  Index        r132, r127, r131
  Append       r136, r132, r130
  SetIndex     r127, r131, r136
  Const        r137, 1
  Add          r128, r128, r137
  Jump         L29
L27:
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r139, 0
L33:
  Less         r140, r139, r86
  JumpIfFalse  r140, L30
  Index        r18, r85, r139
  Index        r142, r18, r95
  Index        r143, r127, r142
  Const        r144, nil
  NotEqual     r145, r143, r144
  JumpIfFalse  r145, L31
  Len          r146, r143
  Const        r147, 0
L32:
  Less         r148, r147, r146
  JumpIfFalse  r148, L31
  Index        r107, r143, r147
  // select { s: s, n: n }
  Const        r150, "s"
  Const        r151, "n"
  Move         r152, r107
  Move         r153, r18
  MakeMap      r154, 2, r150
  // from s in supplier
  Append       r82, r82, r154
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r156, 1
  Add          r147, r147, r156
  Jump         L32
L31:
  Const        r158, 1
  Add          r139, r139, r158
  Jump         L33
L30:
  // from p in part
  Const        r160, []
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r161, "p_size"
  Const        r162, "p_type"
  // from p in part
  IterPrep     r163, r3
  Len          r164, r163
  Const        r166, 0
  Move         r165, r166
L37:
  LessInt      r167, r165, r164
  JumpIfFalse  r167, L34
  Index        r169, r163, r165
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Index        r170, r169, r161
  Const        r171, 15
  Equal        r172, r170, r171
  Index        r173, r169, r162
  Const        r174, "LARGE BRASS"
  Equal        r175, r173, r174
  Move         r176, r172
  JumpIfFalse  r176, L35
  Move         r176, r175
L35:
  JumpIfFalse  r176, L36
  // from p in part
  Append       r160, r160, r169
L36:
  Const        r178, 1
  AddInt       r165, r165, r178
  Jump         L37
L34:
  // from ps in partsupp
  Const        r179, []
  // s_acctbal: s.s.s_acctbal,
  Const        r180, "s_acctbal"
  Const        r181, "s"
  // s_name: s.s.s_name,
  Const        r182, "s_name"
  // n_name: s.n.n_name,
  Const        r183, "n_name"
  Const        r184, "n"
  // p_partkey: p.p_partkey,
  Const        r185, "p_partkey"
  // p_mfgr: p.p_mfgr,
  Const        r186, "p_mfgr"
  // s_address: s.s.s_address,
  Const        r187, "s_address"
  // ps_supplycost: ps.ps_supplycost
  Const        r190, "ps_supplycost"
  // from ps in partsupp
  IterPrep     r191, r4
  Len          r192, r191
  Move         r193, r166
L44:
  LessInt      r194, r193, r192
  JumpIfFalse  r194, L38
  Index        r196, r191, r193
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r197, r160
  Len          r198, r197
  Const        r199, "ps_partkey"
  Move         r200, r166
L43:
  LessInt      r201, r200, r198
  JumpIfFalse  r201, L39
  Index        r169, r197, r200
  Index        r203, r196, r199
  Index        r204, r169, r185
  Equal        r205, r203, r204
  JumpIfFalse  r205, L40
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r206, r82
  Len          r207, r206
  Const        r208, "ps_suppkey"
  Const        r209, "s_suppkey"
  Move         r210, r166
L42:
  LessInt      r211, r210, r207
  JumpIfFalse  r211, L40
  Index        r107, r206, r210
  Index        r213, r196, r208
  Index        r214, r107, r181
  Index        r215, r214, r209
  Equal        r216, r213, r215
  JumpIfFalse  r216, L41
  // s_acctbal: s.s.s_acctbal,
  Const        r217, "s_acctbal"
  Index        r218, r107, r181
  Index        r219, r218, r180
  // s_name: s.s.s_name,
  Const        r220, "s_name"
  Index        r221, r107, r181
  Index        r222, r221, r182
  // n_name: s.n.n_name,
  Const        r223, "n_name"
  Index        r224, r107, r184
  Index        r225, r224, r183
  // p_partkey: p.p_partkey,
  Const        r226, "p_partkey"
  Index        r227, r169, r185
  // p_mfgr: p.p_mfgr,
  Const        r228, "p_mfgr"
  Index        r229, r169, r186
  // s_address: s.s.s_address,
  Const        r230, "s_address"
  Index        r231, r107, r181
  Index        r232, r231, r187
  // s_phone: s.s.s_phone,
  Const        r233, "s_phone"
  Index        r234, r107, r181
  // select {
  MakeMap      r250, 9, r217
  // from ps in partsupp
  Append       r179, r179, r250
L41:
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  Add          r210, r210, r178
  Jump         L42
L40:
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Add          r200, r200, r178
  Jump         L43
L39:
  // from ps in partsupp
  AddInt       r193, r193, r178
  Jump         L44
L38:
  // let costs = from x in target_partsupp select x.ps_supplycost
  Const        r252, []
  IterPrep     r253, r179
  Len          r254, r253
  Move         r255, r166
L46:
  LessInt      r256, r255, r254
  JumpIfFalse  r256, L45
  Index        r258, r253, r255
  Index        r259, r258, r190
  Append       r252, r252, r259
  AddInt       r255, r255, r178
  Jump         L46
L45:
  // let min_cost = min(costs)
  Min          r261, r252
  // from x in target_partsupp
  Const        r262, []
  IterPrep     r263, r179
  Len          r264, r263
  Move         r265, r166
L49:
  LessInt      r266, r265, r264
  JumpIfFalse  r266, L47
  Index        r258, r263, r265
  // where x.ps_supplycost == min_cost
  Index        r268, r258, r190
  Equal        r269, r268, r261
  JumpIfFalse  r269, L48
  // sort by -x.s_acctbal
  Index        r270, r258, r180
  Neg          r272, r270
  // from x in target_partsupp
  Move         r273, r258
  MakeList     r274, 2, r272
  Append       r262, r262, r274
L48:
  AddInt       r265, r265, r178
  Jump         L49
L47:
  // sort by -x.s_acctbal
  Sort         r262, r262
  // json(result)
  JSON         r262
  // expect result == [
  Const        r277, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r278, r262, r277
  Expect       r278
  Return       r0
