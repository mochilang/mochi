func main (regs=259)
L0:
  // let region = [
  Const        r0, [{"r_name": "EUROPE", "r_regionkey": 1}, {"r_name": "ASIA", "r_regionkey": 2}]
  // let nation = [
  Const        r1, [{"n_name": "FRANCE", "n_nationkey": 10, "n_regionkey": 1}, {"n_name": "CHINA", "n_nationkey": 20, "n_regionkey": 2}]
  // let supplier = [
  Const        r2, [{"s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_nationkey": 10, "s_phone": "123", "s_suppkey": 100}, {"s_acctbal": 500, "s_address": "456 Way", "s_comment": "Slow", "s_name": "AltSupplier", "s_nationkey": 20, "s_phone": "456", "s_suppkey": 200}]
  // let part = [
  Const        r3, [{"p_mfgr": "M1", "p_partkey": 1000, "p_size": 15, "p_type": "LARGE BRASS"}, {"p_mfgr": "M2", "p_partkey": 2000, "p_size": 15, "p_type": "SMALL COPPER"}]
  // let partsupp = [
  Const        r4, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
  // from r in region
  Const        r5, []
  IterPrep     r6, r0
  Len          r7, r6
  // join n in nation on n.n_regionkey == r.r_regionkey
  IterPrep     r8, r1
  Len          r9, r8
  // from r in region
  Const        r10, 0
  EqualInt     r11, r7, r10
  JumpIfTrue   r11, L0
  EqualInt     r12, r9, r10
  JumpIfTrue   r12, L0
  LessEq       r13, r9, r7
  JumpIfFalse  r13, L1
  // join n in nation on n.n_regionkey == r.r_regionkey
  MakeMap      r14, 0, r0
  Const        r15, 0
L4:
  LessInt      r16, r15, r9
  JumpIfFalse  r16, L2
  Index        r17, r8, r15
  Move         r18, r17
  Const        r19, "n_regionkey"
  Index        r20, r18, r19
  Index        r21, r14, r20
  Const        r22, nil
  NotEqual     r23, r21, r22
  JumpIfTrue   r23, L3
  MakeList     r24, 0, r0
  SetIndex     r14, r20, r24
L3:
  Index        r21, r14, r20
  Append       r25, r21, r17
  SetIndex     r14, r20, r25
  Const        r26, 1
  AddInt       r15, r15, r26
  Jump         L4
L2:
  // from r in region
  Const        r27, 0
L8:
  LessInt      r28, r27, r7
  JumpIfFalse  r28, L0
  Index        r30, r6, r27
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r31, "r_regionkey"
  Index        r32, r30, r31
  // from r in region
  Index        r33, r14, r32
  NotEqual     r34, r33, r22
  JumpIfFalse  r34, L5
  Len          r35, r33
  Const        r36, 0
L7:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L5
  Index        r18, r33, r36
  // where r.r_name == "EUROPE"
  Const        r39, "r_name"
  Index        r40, r30, r39
  Const        r41, "EUROPE"
  Equal        r42, r40, r41
  JumpIfFalse  r42, L6
  // from r in region
  Append       r5, r5, r18
L6:
  AddInt       r36, r36, r26
  Jump         L7
L5:
  AddInt       r27, r27, r26
  Jump         L8
L1:
  MakeMap      r44, 0, r0
  Const        r45, 0
L12:
  LessInt      r46, r45, r7
  JumpIfFalse  r46, L9
  Index        r47, r6, r45
  Move         r30, r47
  // where r.r_name == "EUROPE"
  Index        r48, r30, r39
  Equal        r49, r48, r41
  JumpIfFalse  r49, L10
  // join n in nation on n.n_regionkey == r.r_regionkey
  Index        r50, r30, r31
  // from r in region
  Index        r51, r44, r50
  NotEqual     r52, r51, r22
  JumpIfTrue   r52, L11
  MakeList     r53, 0, r0
  SetIndex     r44, r50, r53
L11:
  Index        r51, r44, r50
  Append       r54, r51, r47
  SetIndex     r44, r50, r54
L10:
  AddInt       r45, r45, r26
  Jump         L12
L9:
  // join n in nation on n.n_regionkey == r.r_regionkey
  Const        r55, 0
L17:
  LessInt      r56, r55, r9
  JumpIfFalse  r56, L13
  Index        r18, r8, r55
  Index        r58, r18, r19
  Index        r59, r44, r58
  NotEqual     r60, r59, r22
  JumpIfFalse  r60, L14
  Len          r61, r59
  Const        r62, 0
L16:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L14
  Index        r30, r59, r62
  // where r.r_name == "EUROPE"
  Index        r65, r30, r39
  Equal        r66, r65, r41
  JumpIfFalse  r66, L15
  // from r in region
  Append       r5, r5, r18
L15:
  // join n in nation on n.n_regionkey == r.r_regionkey
  AddInt       r62, r62, r26
  Jump         L16
L14:
  AddInt       r55, r55, r26
  Jump         L17
L13:
  // from s in supplier
  Const        r68, []
  IterPrep     r69, r2
  Len          r70, r69
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  IterPrep     r71, r5
  Len          r72, r71
  // from s in supplier
  EqualInt     r73, r70, r10
  JumpIfTrue   r73, L0
  EqualInt     r74, r72, r10
  JumpIfTrue   r74, L0
  LessEq       r75, r72, r70
  JumpIfFalse  r75, L18
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  MakeMap      r76, 0, r0
  Const        r77, 0
L21:
  LessInt      r78, r77, r72
  JumpIfFalse  r78, L19
  Index        r79, r71, r77
  Move         r18, r79
  Const        r80, "n_nationkey"
  Index        r81, r18, r80
  Index        r82, r76, r81
  NotEqual     r83, r82, r22
  JumpIfTrue   r83, L20
  MakeList     r84, 0, r0
  SetIndex     r76, r81, r84
L20:
  Index        r82, r76, r81
  Append       r85, r82, r79
  SetIndex     r76, r81, r85
  AddInt       r77, r77, r26
  Jump         L21
L19:
  // from s in supplier
  Const        r86, 0
L24:
  LessInt      r87, r86, r70
  JumpIfFalse  r87, L0
  Index        r89, r69, r86
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r90, "s_nationkey"
  Index        r91, r89, r90
  // from s in supplier
  Index        r92, r76, r91
  NotEqual     r93, r92, r22
  JumpIfFalse  r93, L22
  Len          r94, r92
  Const        r95, 0
L23:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L22
  Index        r18, r92, r95
  // select { s: s, n: n }
  Const        r98, "s"
  Const        r99, "n"
  Move         r100, r98
  Move         r101, r89
  Move         r102, r99
  Move         r103, r18
  MakeMap      r104, 2, r100
  // from s in supplier
  Append       r68, r68, r104
  AddInt       r95, r95, r26
  Jump         L23
L22:
  AddInt       r86, r86, r26
  Jump         L24
L18:
  MakeMap      r106, 0, r0
  Const        r107, 0
L27:
  LessInt      r108, r107, r70
  JumpIfFalse  r108, L25
  Index        r109, r69, r107
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Index        r110, r109, r90
  // from s in supplier
  Index        r111, r106, r110
  NotEqual     r112, r111, r22
  JumpIfTrue   r112, L26
  MakeList     r113, 0, r0
  SetIndex     r106, r110, r113
L26:
  Index        r111, r106, r110
  Append       r114, r111, r109
  SetIndex     r106, r110, r114
  AddInt       r107, r107, r26
  Jump         L27
L25:
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  Const        r115, 0
L31:
  LessInt      r116, r115, r72
  JumpIfFalse  r116, L28
  Index        r18, r71, r115
  Index        r118, r18, r80
  Index        r119, r106, r118
  NotEqual     r120, r119, r22
  JumpIfFalse  r120, L29
  Len          r121, r119
  Const        r122, 0
L30:
  LessInt      r123, r122, r121
  JumpIfFalse  r123, L29
  Index        r89, r119, r122
  // select { s: s, n: n }
  Const        r125, "s"
  Const        r126, "n"
  Move         r127, r125
  Move         r128, r89
  Move         r129, r126
  Move         r130, r18
  MakeMap      r131, 2, r127
  // from s in supplier
  Append       r68, r68, r131
  // join n in europe_nations on s.s_nationkey == n.n_nationkey
  AddInt       r122, r122, r26
  Jump         L30
L29:
  AddInt       r115, r115, r26
  Jump         L31
L28:
  // from p in part
  Const        r133, []
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Const        r134, "p_size"
  Const        r135, "p_type"
  // from p in part
  IterPrep     r136, r3
  Len          r137, r136
  Move         r138, r10
L35:
  LessInt      r139, r138, r137
  JumpIfFalse  r139, L32
  Index        r141, r136, r138
  // where p.p_size == 15 && p.p_type == "LARGE BRASS"
  Index        r142, r141, r134
  Const        r143, 15
  Equal        r144, r142, r143
  Index        r145, r141, r135
  Const        r146, "LARGE BRASS"
  Equal        r147, r145, r146
  Move         r148, r144
  JumpIfFalse  r148, L33
  Move         r148, r147
L33:
  JumpIfFalse  r148, L34
  // from p in part
  Append       r133, r133, r141
L34:
  AddInt       r138, r138, r26
  Jump         L35
L32:
  // from ps in partsupp
  Const        r150, []
  // s_acctbal: s.s.s_acctbal,
  Const        r151, "s_acctbal"
  Const        r152, "s"
  // s_name: s.s.s_name,
  Const        r153, "s_name"
  // n_name: s.n.n_name,
  Const        r154, "n_name"
  Const        r155, "n"
  // p_partkey: p.p_partkey,
  Const        r156, "p_partkey"
  // p_mfgr: p.p_mfgr,
  Const        r157, "p_mfgr"
  // s_address: s.s.s_address,
  Const        r158, "s_address"
  // s_phone: s.s.s_phone,
  Const        r159, "s_phone"
  // s_comment: s.s.s_comment,
  Const        r160, "s_comment"
  // ps_supplycost: ps.ps_supplycost
  Const        r161, "ps_supplycost"
  // from ps in partsupp
  IterPrep     r162, r4
  Len          r163, r162
  Move         r164, r10
L42:
  LessInt      r165, r164, r163
  JumpIfFalse  r165, L36
  Index        r167, r162, r164
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  IterPrep     r168, r133
  Len          r169, r168
  Const        r170, "ps_partkey"
  Move         r171, r10
L41:
  LessInt      r172, r171, r169
  JumpIfFalse  r172, L37
  Index        r141, r168, r171
  Index        r174, r167, r170
  Index        r175, r141, r156
  Equal        r176, r174, r175
  JumpIfFalse  r176, L38
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  IterPrep     r177, r68
  Len          r178, r177
  Const        r179, "ps_suppkey"
  Const        r180, "s_suppkey"
  Move         r181, r10
L40:
  LessInt      r182, r181, r178
  JumpIfFalse  r182, L38
  Index        r89, r177, r181
  Index        r184, r167, r179
  Index        r185, r89, r152
  Index        r186, r185, r180
  Equal        r187, r184, r186
  JumpIfFalse  r187, L39
  // s_acctbal: s.s.s_acctbal,
  Const        r188, "s_acctbal"
  Index        r189, r89, r152
  Index        r190, r189, r151
  // s_name: s.s.s_name,
  Const        r191, "s_name"
  Index        r192, r89, r152
  Index        r193, r192, r153
  // n_name: s.n.n_name,
  Const        r194, "n_name"
  Index        r195, r89, r155
  Index        r196, r195, r154
  // p_partkey: p.p_partkey,
  Const        r197, "p_partkey"
  Index        r198, r141, r156
  // p_mfgr: p.p_mfgr,
  Const        r199, "p_mfgr"
  Index        r200, r141, r157
  // s_address: s.s.s_address,
  Const        r201, "s_address"
  Index        r202, r89, r152
  Index        r203, r202, r158
  // s_phone: s.s.s_phone,
  Const        r204, "s_phone"
  Index        r205, r89, r152
  Index        r206, r205, r159
  // s_comment: s.s.s_comment,
  Const        r207, "s_comment"
  Index        r208, r89, r152
  Index        r209, r208, r160
  // ps_supplycost: ps.ps_supplycost
  Const        r210, "ps_supplycost"
  Index        r211, r167, r161
  // s_acctbal: s.s.s_acctbal,
  Move         r212, r188
  Move         r213, r190
  // s_name: s.s.s_name,
  Move         r214, r191
  Move         r215, r193
  // n_name: s.n.n_name,
  Move         r216, r194
  Move         r217, r196
  // p_partkey: p.p_partkey,
  Move         r218, r197
  Move         r219, r198
  // p_mfgr: p.p_mfgr,
  Move         r220, r199
  Move         r221, r200
  // s_address: s.s.s_address,
  Move         r222, r201
  Move         r223, r203
  // s_phone: s.s.s_phone,
  Move         r224, r204
  Move         r225, r206
  // s_comment: s.s.s_comment,
  Move         r226, r207
  Move         r227, r209
  // ps_supplycost: ps.ps_supplycost
  Move         r228, r210
  Move         r229, r211
  // select {
  MakeMap      r230, 9, r212
  // from ps in partsupp
  Append       r150, r150, r230
L39:
  // join s in europe_suppliers on ps.ps_suppkey == s.s.s_suppkey
  Add          r181, r181, r26
  Jump         L40
L38:
  // join p in target_parts on ps.ps_partkey == p.p_partkey
  Add          r171, r171, r26
  Jump         L41
L37:
  // from ps in partsupp
  AddInt       r164, r164, r26
  Jump         L42
L36:
  // let costs = from x in target_partsupp select x.ps_supplycost
  Const        r232, []
  IterPrep     r233, r150
  Len          r234, r233
  Move         r235, r10
L44:
  LessInt      r236, r235, r234
  JumpIfFalse  r236, L43
  Index        r238, r233, r235
  Index        r239, r238, r161
  Append       r232, r232, r239
  AddInt       r235, r235, r26
  Jump         L44
L43:
  // let min_cost = min(costs)
  Min          r241, r232
  // from x in target_partsupp
  Const        r242, []
  IterPrep     r243, r150
  Len          r244, r243
  Move         r245, r10
L47:
  LessInt      r246, r245, r244
  JumpIfFalse  r246, L45
  Index        r238, r243, r245
  // where x.ps_supplycost == min_cost
  Index        r248, r238, r161
  Equal        r249, r248, r241
  JumpIfFalse  r249, L46
  // sort by -x.s_acctbal
  Index        r250, r238, r151
  Neg          r252, r250
  // from x in target_partsupp
  Move         r253, r238
  MakeList     r254, 2, r252
  Append       r242, r242, r254
L46:
  AddInt       r245, r245, r26
  Jump         L47
L45:
  // sort by -x.s_acctbal
  Sort         r242, r242
  // json(result)
  JSON         r242
  // expect result == [
  Const        r257, [{"n_name": "FRANCE", "p_mfgr": "M1", "p_partkey": 1000, "ps_supplycost": 10, "s_acctbal": 1000, "s_address": "123 Rue", "s_comment": "Fast and reliable", "s_name": "BestSupplier", "s_phone": "123"}]
  Equal        r258, r242, r257
  Expect       r258
  Return       r0
