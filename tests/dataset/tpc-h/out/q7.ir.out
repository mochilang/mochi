func main (regs=38)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r2, [{"c_custkey": 200, "c_nationkey": 2}]
L8:
  // let orders = [
  Const        r3, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r5, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r6, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r7, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r8, "GERMANY"
  // from l in lineitem
  Const        r9, []
L3:
  // supp_nation: n1.n_name,
  Const        r10, "supp_nation"
  Const        r11, "n_name"
  // cust_nation: n2.n_name,
  Const        r12, "cust_nation"
L18:
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r13, "l_year"
  Const        r14, "l_shipdate"
L2:
  // supp_nation: g.key.supp_nation,
  Const        r15, "key"
L1:
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r16, "revenue"
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // from l in lineitem
  MakeMap      r20, 0, r0
L5:
  IterPrep     r21, r4
L0:
  Len          r4, r21
L14:
  Const        r22, 0
L4:
  LessInt      r23, r22, r4
L17:
  JumpIfFalse  r23, L0
  Index        r24, r21, r22
  Move         r25, r24
L9:
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r26, r3
L12:
  Len          r3, r26
L13:
  Move         r27, r22
  LessInt      r28, r27, r3
  JumpIfFalse  r28, L1
L11:
  Index        r28, r26, r27
  Const        r29, "o_orderkey"
L6:
  Index        r30, r28, r29
L10:
  Const        r29, "l_orderkey"
  Index        r31, r25, r29
  Equal        r29, r30, r31
  JumpIfFalse  r29, L2
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r29, r2
  Len          r2, r29
  Move         r31, r22
  LessInt      r30, r31, r2
  JumpIfFalse  r30, L2
  Index        r30, r29, r31
  Const        r29, "c_custkey"
  Index        r2, r30, r29
  Const        r29, "o_custkey"
  Index        r32, r28, r29
  Equal        r29, r2, r32
  JumpIfFalse  r29, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r29, r1
  Len          r1, r29
  Move         r32, r31
  LessInt      r2, r32, r1
  JumpIfFalse  r2, L3
  Index        r2, r29, r32
  Const        r29, "s_suppkey"
  Index        r1, r2, r29
  Const        r28, "l_suppkey"
  Index        r33, r25, r28
  Equal        r28, r1, r33
  JumpIfFalse  r28, L3
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r28, r0
  Len          r33, r28
  Move         r1, r22
  LessInt      r34, r1, r33
  JumpIfFalse  r34, L3
  Index        r34, r28, r1
  Const        r28, "n_nationkey"
  Index        r33, r34, r28
  Const        r35, "s_nationkey"
  Index        r36, r2, r35
  Equal        r35, r33, r36
  JumpIfFalse  r35, L4
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r35, r0
  Len          r36, r35
  Move         r2, r1
  LessInt      r37, r2, r36
  JumpIfFalse  r37, L4
  Index        r37, r35, r2
  Index        r35, r37, r28
  Const        r28, "c_nationkey"
  Index        r36, r30, r28
  Equal        r28, r35, r36
  JumpIfFalse  r28, L5
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Index        r28, r25, r14
  LessEq       r35, r5, r28
  Index        r28, r25, r14
  LessEq       r5, r28, r6
  Move         r28, r35
  JumpIfFalse  r28, L6
  Move         r28, r5
  JumpIfFalse  r28, L7
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Index        r28, r34, r11
  Equal        r5, r28, r7
  Index        r28, r37, r11
  Equal        r35, r28, r8
  Move         r28, r5
  JumpIfFalse  r28, L7
L7:
  Move         r28, r35
  JumpIfTrue   r28, L8
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Index        r35, r34, r11
  Equal        r5, r35, r8
  Index        r35, r37, r11
  Equal        r8, r35, r7
  Move         r35, r5
  JumpIfFalse  r35, L6
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r28, r8
  // where (
  JumpIfFalse  r28, L5
  // from l in lineitem
  MakeMap      r35, 6, r17
  // supp_nation: n1.n_name,
  Move         r3, r10
  Index        r26, r34, r11
  // cust_nation: n2.n_name,
  Move         r34, r12
  Index        r24, r37, r11
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r37, r13
  Index        r11, r25, r14
  Move         r25, r1
  Const        r14, 4
  Slice        r4, r11, r25, r14
  // supp_nation: n1.n_name,
  Move         r14, r3
  Move         r3, r26
  // cust_nation: n2.n_name,
  Move         r26, r34
  Move         r34, r24
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r24, r37
  Move         r37, r4
  // group by {
  MakeMap      r4, 3, r14
  Str          r37, r4
  In           r24, r37, r20
  JumpIfTrue   r24, L9
  // from l in lineitem
  Move         r24, r9
  Const        r34, "__group__"
  Const        r26, true
  Move         r3, r15
  // group by {
  Move         r14, r4
  // from l in lineitem
  Const        r4, "items"
  Move         r11, r24
  Const        r24, "count"
  Move         r21, r25
  Move         r8, r34
  Move         r34, r26
  Move         r26, r3
  Move         r3, r14
  Move         r14, r4
  Move         r5, r11
  Move         r11, r24
  Move         r28, r21
  MakeMap      r21, 4, r8
  SetIndex     r20, r37, r21
  Move         r21, r4
  Index        r4, r20, r37
  Index        r37, r4, r21
  Append       r28, r37, r35
  SetIndex     r4, r21, r28
  Move         r28, r24
  Index        r24, r4, r28
  Const        r37, 1
  AddInt       r21, r24, r37
  SetIndex     r4, r28, r21
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  AddInt       r2, r2, r37
  Jump         L10
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  AddInt       r1, r1, r37
  Jump         L11
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r32, r32, r37
  Jump         L12
  // join c in customer on c.c_custkey == o.o_custkey
  AddInt       r31, r31, r37
  Jump         L13
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r27, r27, r37
  Jump         L5
  // from l in lineitem
  AddInt       r22, r22, r37
  Jump         L14
  Values       21,20,0,0
  Move         r20, r25
  Len          r23, r21
  LessInt      r22, r20, r23
  JumpIfFalse  r22, L15
  Index        r22, r21, r20
  // supp_nation: g.key.supp_nation,
  Move         r21, r10
  Index        r23, r22, r15
  Index        r24, r23, r10
  // cust_nation: g.key.cust_nation,
  Move         r23, r12
  Index        r10, r22, r15
  Index        r28, r10, r12
  // l_year: g.key.l_year,
  Move         r10, r13
  Index        r12, r22, r15
  Index        r15, r12, r13
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r12, r16
  Move         r16, r9
  IterPrep     r13, r22
  Len          r22, r13
  Move         r4, r25
  LessInt      r25, r4, r22
  JumpIfFalse  r25, L16
  Index        r25, r13, r4
  Index        r13, r25, r17
  Index        r22, r13, r18
  Index        r13, r25, r17
  Index        r25, r13, r19
  Sub          r13, r37, r25
  Mul          r25, r22, r13
  Append       r16, r16, r25
  AddInt       r4, r4, r37
  Jump         L17
L16:
  Sum          r13, r16
  // supp_nation: g.key.supp_nation,
  Move         r16, r21
  Move         r21, r24
  // cust_nation: g.key.cust_nation,
  Move         r24, r23
  Move         r23, r28
  // l_year: g.key.l_year,
  Move         r28, r10
  Move         r10, r15
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r15, r12
  Move         r25, r13
  // select {
  MakeMap      r13, 4, r16
  // sort by [supp_nation, cust_nation, l_year]
  Move         r10, r15
  Move         r28, r15
  MakeList     r23, 3, r10
  // from l in lineitem
  Move         r28, r13
  MakeList     r13, 2, r23
  Append       r9, r9, r13
  AddInt       r20, r20, r37
  Jump         L18
L15:
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r9, r9
  // json(result)
  JSON         r9
  // expect result == [
  Const        r13, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r28, r9, r13
  Expect       r28
  Return       r0
