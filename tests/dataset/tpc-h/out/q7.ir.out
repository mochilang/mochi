func main (regs=243)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}]
  Move         r3, r2
  // let customer = [
  Const        r4, [{"c_custkey": 200, "c_nationkey": 2}]
  Move         r5, r4
  // let orders = [
  Const        r6, [{"o_custkey": 200, "o_orderkey": 1000}]
  Move         r7, r6
  // let lineitem = [
  Const        r8, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  Move         r9, r8
  // let start_date = "1995-01-01"
  Const        r10, "1995-01-01"
  Move         r11, r10
  // let end_date = "1996-12-31"
  Const        r12, "1996-12-31"
  Move         r13, r12
  // let nation1 = "FRANCE"
  Const        r14, "FRANCE"
  Move         r15, r14
  // let nation2 = "GERMANY"
  Const        r16, "GERMANY"
  Move         r17, r16
  // from l in lineitem
  Const        r18, []
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r21, r9
  Len          r22, r21
  Const        r23, 0
L18:
  Less         r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r27, r7
  Len          r28, r27
  Const        r29, 0
L17:
  Less         r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r31, r27, r29
  Move         r32, r31
  Const        r33, "o_orderkey"
  Index        r34, r32, r33
  Const        r35, "l_orderkey"
  Index        r36, r26, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r38, r5
  Len          r39, r38
  Const        r40, 0
L16:
  Less         r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Move         r43, r42
  Const        r44, "c_custkey"
  Index        r45, r43, r44
  Const        r46, "o_custkey"
  Index        r47, r32, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r49, r3
  Len          r50, r49
  Const        r51, 0
L15:
  Less         r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r53, r49, r51
  Move         r54, r53
  Const        r55, "s_suppkey"
  Index        r56, r54, r55
  Const        r57, "l_suppkey"
  Index        r58, r26, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // join from n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r60, r1
  Len          r61, r60
  Const        r62, 0
L14:
  Less         r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r64, r60, r62
  Move         r65, r64
  Const        r66, "n_nationkey"
  Index        r67, r65, r66
  Const        r68, "s_nationkey"
  Index        r69, r54, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L5
  // join from n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
L13:
  Less         r74, r73, r72
  JumpIfFalse  r74, L5
  Index        r75, r71, r73
  Move         r76, r75
  Const        r77, "n_nationkey"
  Index        r78, r76, r77
  Const        r79, "c_nationkey"
  Index        r80, r43, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L6
  // where l.l_shipdate >= start_date && l.l_shipdate <= end_date && ((
  Const        r82, "l_shipdate"
  Index        r83, r26, r82
  LessEq       r84, r11, r83
  Move         r85, r84
  JumpIfFalse  r85, L7
  Const        r86, "l_shipdate"
  Index        r87, r26, r86
  Move         r85, r87
L7:
  LessEq       r88, r85, r13
  Move         r89, r88
  JumpIfFalse  r89, L8
  // n1.n_name == nation1 && n2.n_name == nation2
  Const        r90, "n_name"
  Index        r91, r65, r90
  Equal        r92, r91, r15
  Move         r93, r92
  JumpIfFalse  r93, L9
  Const        r94, "n_name"
  Index        r95, r76, r94
  Move         r93, r95
L9:
  Equal        r96, r93, r17
  // ) || (
  Move         r97, r96
  JumpIfTrue   r97, L10
  // n1.n_name == nation2 && n2.n_name == nation1
  Const        r98, "n_name"
  Index        r99, r65, r98
  Equal        r100, r99, r17
  Move         r101, r100
  JumpIfFalse  r101, L11
  Const        r102, "n_name"
  Index        r103, r76, r102
  Move         r101, r103
L11:
  Equal        r104, r101, r15
  // ) || (
  Move         r97, r104
L10:
  // where l.l_shipdate >= start_date && l.l_shipdate <= end_date && ((
  Move         r89, r97
L8:
  JumpIfFalse  r89, L6
  // from l in lineitem
  Const        r105, "l"
  Move         r106, r26
  Const        r107, "o"
  Move         r108, r32
  Const        r109, "c"
  Move         r110, r43
  Const        r111, "s"
  Move         r112, r54
  Const        r113, "n1"
  Move         r114, r65
  Const        r115, "n2"
  Move         r116, r76
  MakeMap      r117, 6, r105
  // supp_nation: n1.n_name,
  Const        r118, "supp_nation"
  Const        r119, "n_name"
  Index        r120, r65, r119
  // cust_nation: n2.n_name,
  Const        r121, "cust_nation"
  Const        r122, "n_name"
  Index        r123, r76, r122
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r124, "l_year"
  Const        r125, "l_shipdate"
  Index        r126, r26, r125
  Const        r127, 0
  Const        r128, 4
  AddInt       r129, r127, r128
  Slice        r130, r126, r127, r129
  // supp_nation: n1.n_name,
  Move         r131, r118
  Move         r132, r120
  // cust_nation: n2.n_name,
  Move         r133, r121
  Move         r134, r123
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r135, r124
  Move         r136, r130
  // group by {
  MakeMap      r137, 3, r131
  Str          r138, r137
  In           r139, r138, r19
  JumpIfTrue   r139, L12
  // from l in lineitem
  Const        r140, []
  Const        r141, "__group__"
  Const        r142, true
  Const        r143, "key"
  // group by {
  Move         r144, r137
  // from l in lineitem
  Const        r145, "items"
  Move         r146, r140
  MakeMap      r147, 3, r141
  SetIndex     r19, r138, r147
  Append       r148, r20, r147
  Move         r20, r148
L12:
  Const        r149, "items"
  Index        r150, r19, r138
  Index        r151, r150, r149
  Append       r152, r151, r117
  SetIndex     r150, r149, r152
L6:
  // join from n2 in nation on n2.n_nationkey == c.c_nationkey
  Const        r153, 1
  Add          r154, r73, r153
  Move         r73, r154
  Jump         L13
L5:
  // join from n1 in nation on n1.n_nationkey == s.s_nationkey
  Const        r155, 1
  Add          r156, r62, r155
  Move         r62, r156
  Jump         L14
L4:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  Const        r157, 1
  Add          r158, r51, r157
  Move         r51, r158
  Jump         L15
L3:
  // join from c in customer on c.c_custkey == o.o_custkey
  Const        r159, 1
  Add          r160, r40, r159
  Move         r40, r160
  Jump         L16
L2:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  Const        r161, 1
  Add          r162, r29, r161
  Move         r29, r162
  Jump         L17
L1:
  // from l in lineitem
  Const        r163, 1
  Add          r164, r23, r163
  Move         r23, r164
  Jump         L18
L0:
  Const        r165, 0
  Len          r166, r20
L22:
  Less         r167, r165, r166
  JumpIfFalse  r167, L19
  Index        r168, r20, r165
  Move         r169, r168
  // supp_nation: g.key.supp_nation,
  Const        r170, "supp_nation"
  Const        r171, "key"
  Index        r172, r169, r171
  Const        r173, "supp_nation"
  Index        r174, r172, r173
  // cust_nation: g.key.cust_nation,
  Const        r175, "cust_nation"
  Const        r176, "key"
  Index        r177, r169, r176
  Const        r178, "cust_nation"
  Index        r179, r177, r178
  // l_year: g.key.l_year,
  Const        r180, "l_year"
  Const        r181, "key"
  Index        r182, r169, r181
  Const        r183, "l_year"
  Index        r184, r182, r183
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r185, "revenue"
  Const        r186, []
  IterPrep     r187, r169
  Len          r188, r187
  Const        r189, 0
L21:
  Less         r190, r189, r188
  JumpIfFalse  r190, L20
  Index        r191, r187, r189
  Move         r192, r191
  Const        r193, "l"
  Index        r194, r192, r193
  Const        r195, "l_extendedprice"
  Index        r196, r194, r195
  Const        r197, 1
  Const        r198, "l"
  Index        r199, r192, r198
  Const        r200, "l_discount"
  Index        r201, r199, r200
  Sub          r202, r197, r201
  Mul          r203, r196, r202
  Append       r204, r186, r203
  Move         r186, r204
  Const        r205, 1
  Add          r206, r189, r205
  Move         r189, r206
  Jump         L21
L20:
  Sum          207,186,0,0
  // supp_nation: g.key.supp_nation,
  Move         r208, r170
  Move         r209, r174
  // cust_nation: g.key.cust_nation,
  Move         r210, r175
  Move         r211, r179
  // l_year: g.key.l_year,
  Move         r212, r180
  Move         r213, r184
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r214, r185
  Move         r215, r207
  // select {
  MakeMap      r216, 4, r208
  // order by [ g.key.supp_nation, g.key.cust_nation, g.key.l_year ]
  Const        r217, "key"
  Index        r218, r169, r217
  Const        r219, "supp_nation"
  Index        r220, r218, r219
  Move         r221, r220
  Const        r222, "key"
  Index        r223, r169, r222
  Const        r224, "cust_nation"
  Index        r225, r223, r224
  Move         r226, r225
  Const        r227, "key"
  Index        r228, r169, r227
  Const        r229, "l_year"
  Index        r230, r228, r229
  Move         r231, r230
  MakeList     r232, 3, r221
  Move         r233, r232
  // from l in lineitem
  Move         r234, r216
  MakeList     r235, 2, r233
  Append       r236, r18, r235
  Move         r18, r236
  Const        r237, 1
  Add          r238, r165, r237
  Move         r165, r238
  Jump         L22
L19:
  // order by [ g.key.supp_nation, g.key.cust_nation, g.key.l_year ]
  Sort         239,18,0,0
  // from l in lineitem
  Move         r18, r239
  // let result =
  Move         r240, r18
  // json(result)
  JSON         r240
  // expect result == [
  Const        r241, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r242, r240, r241
  Expect       r242
  Return       r0

