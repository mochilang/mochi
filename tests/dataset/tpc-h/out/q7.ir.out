func main (regs=216)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r2, [{"c_custkey": 200, "c_nationkey": 2}]
  // let orders = [
  Const        r3, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000.0, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800.0, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r5, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r6, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r7, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r8, "GERMANY"
  // from l in lineitem
  Const        r9, []
  // supp_nation: n1.n_name,
  Const        r10, "supp_nation"
  Const        r11, "n_name"
  // cust_nation: n2.n_name,
  Const        r12, "cust_nation"
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r13, "l_year"
  Const        r14, "l_shipdate"
  // supp_nation: g.key.supp_nation,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r16, "revenue"
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r22, []
  Move         r21, r22
  IterPrep     r23, r4
  Len          r24, r23
  Const        r25, 0
L17:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r27, r23, r25
  Move         r28, r27
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r29, r3
  Len          r30, r29
  Const        r31, 0
L16:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r33, r29, r31
  Move         r34, r33
  Const        r35, "o_orderkey"
  Index        r36, r34, r35
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r40, r2
  Len          r41, r40
  Const        r42, 0
L15:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r44, r40, r42
  Move         r45, r44
  Const        r46, "c_custkey"
  Index        r47, r45, r46
  Const        r48, "o_custkey"
  Index        r49, r34, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r51, r1
  Len          r52, r51
  Const        r53, 0
L14:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r55, r51, r53
  Move         r56, r55
  Const        r57, "s_suppkey"
  Index        r58, r56, r57
  Const        r59, "l_suppkey"
  Index        r60, r28, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r62, r0
  Len          r63, r62
  Const        r64, 0
L13:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L4
  Index        r66, r62, r64
  Move         r67, r66
  Const        r68, "n_nationkey"
  Index        r69, r67, r68
  Const        r70, "s_nationkey"
  Index        r71, r56, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L5
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r73, r0
  Len          r74, r73
  Const        r75, 0
L12:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L5
  Index        r77, r73, r75
  Move         r78, r77
  Index        r79, r78, r68
  Const        r80, "c_nationkey"
  Index        r81, r45, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L6
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Index        r83, r28, r14
  LessEq       r84, r5, r83
  Index        r85, r28, r14
  LessEq       r86, r85, r6
  Move         r87, r84
  JumpIfFalse  r87, L7
  Move         r87, r86
  JumpIfFalse  r87, L7
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Index        r88, r67, r11
  Equal        r89, r88, r7
  Index        r90, r78, r11
  Equal        r91, r90, r8
  Move         r92, r89
  JumpIfFalse  r92, L8
  Move         r92, r91
L8:
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Move         r87, r92
L7:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r93, r87
  JumpIfTrue   r93, L9
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Index        r94, r67, r11
  Equal        r95, r94, r8
  Index        r96, r78, r11
  Equal        r97, r96, r7
  Move         r98, r95
  JumpIfFalse  r98, L10
  Move         r98, r97
L10:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r93, r98
L9:
  // where (
  JumpIfFalse  r93, L6
  // from l in lineitem
  Move         r99, r28
  Const        r100, "o"
  Move         r101, r34
  Const        r102, "c"
  Move         r103, r45
  Const        r104, "s"
  Move         r105, r56
  Const        r106, "n1"
  Move         r107, r67
  Const        r108, "n2"
  Move         r109, r78
  Move         r110, r17
  Move         r111, r99
  Move         r112, r100
  Move         r113, r101
  Move         r114, r102
  Move         r115, r103
  Move         r116, r104
  Move         r117, r105
  Move         r118, r106
  Move         r119, r107
  Move         r120, r108
  Move         r121, r109
  MakeMap      r122, 6, r110
  // supp_nation: n1.n_name,
  Const        r123, "supp_nation"
  Index        r124, r67, r11
  // cust_nation: n2.n_name,
  Const        r125, "cust_nation"
  Index        r126, r78, r11
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r127, "l_year"
  Index        r128, r28, r14
  Const        r129, 0
  Const        r130, 4
  Slice        r131, r128, r129, r130
  // supp_nation: n1.n_name,
  Move         r132, r123
  Move         r133, r124
  // cust_nation: n2.n_name,
  Move         r134, r125
  Move         r135, r126
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r136, r127
  Move         r137, r131
  // group by {
  MakeMap      r138, 3, r132
  Str          r139, r138
  In           r140, r139, r20
  JumpIfTrue   r140, L11
  // from l in lineitem
  Const        r141, "__group__"
  Const        r142, true
  // group by {
  Move         r143, r138
  // from l in lineitem
  Const        r144, "items"
  Move         r145, r22
  Const        r146, "count"
  Move         r147, r141
  Move         r148, r142
  Move         r149, r15
  Move         r150, r143
  Move         r151, r144
  Move         r152, r145
  Move         r153, r146
  Move         r154, r129
  MakeMap      r155, 4, r147
  SetIndex     r20, r139, r155
  Append       r156, r21, r155
  Move         r21, r156
L11:
  Index        r157, r20, r139
  Index        r158, r157, r144
  Append       r159, r158, r122
  SetIndex     r157, r144, r159
  Index        r160, r157, r146
  Const        r161, 1
  AddInt       r162, r160, r161
  SetIndex     r157, r146, r162
L6:
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  AddInt       r75, r75, r161
  Jump         L12
L5:
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  AddInt       r64, r64, r161
  Jump         L13
L4:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r53, r53, r161
  Jump         L14
L3:
  // join c in customer on c.c_custkey == o.o_custkey
  AddInt       r42, r42, r161
  Jump         L15
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r31, r31, r161
  Jump         L16
L1:
  // from l in lineitem
  AddInt       r25, r25, r161
  Jump         L17
L0:
  Move         r163, r129
  Len          r164, r21
L21:
  LessInt      r165, r163, r164
  JumpIfFalse  r165, L18
  Index        r166, r21, r163
  Move         r167, r166
  // supp_nation: g.key.supp_nation,
  Const        r168, "supp_nation"
  Index        r169, r167, r15
  Index        r170, r169, r10
  // cust_nation: g.key.cust_nation,
  Const        r171, "cust_nation"
  Index        r172, r167, r15
  Index        r173, r172, r12
  // l_year: g.key.l_year,
  Const        r174, "l_year"
  Index        r175, r167, r15
  Index        r176, r175, r13
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r177, "revenue"
  Const        r178, []
  IterPrep     r179, r167
  Len          r180, r179
  Move         r181, r129
L20:
  LessInt      r182, r181, r180
  JumpIfFalse  r182, L19
  Index        r183, r179, r181
  Move         r184, r183
  Index        r185, r184, r17
  Index        r186, r185, r18
  Index        r187, r184, r17
  Index        r188, r187, r19
  Sub          r189, r161, r188
  Mul          r190, r186, r189
  Append       r191, r178, r190
  Move         r178, r191
  AddInt       r181, r181, r161
  Jump         L20
L19:
  Sum          r192, r178
  // supp_nation: g.key.supp_nation,
  Move         r193, r168
  Move         r194, r170
  // cust_nation: g.key.cust_nation,
  Move         r195, r171
  Move         r196, r173
  // l_year: g.key.l_year,
  Move         r197, r174
  Move         r198, r176
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r199, r177
  Move         r200, r192
  // select {
  MakeMap      r201, 4, r193
  // sort by [supp_nation, cust_nation, l_year]
  Move         r203, r202
  Move         r205, r204
  Move         r207, r206
  MakeList     r208, 3, r203
  Move         r209, r208
  // from l in lineitem
  Move         r210, r201
  MakeList     r211, 2, r209
  Append       r212, r9, r211
  Move         r9, r212
  AddInt       r163, r163, r161
  Jump         L21
L18:
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r213, r9
  // from l in lineitem
  Move         r9, r213
  // json(result)
  JSON         r9
  // expect result == [
  Const        r214, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900.0, "supp_nation": "FRANCE"}]
  Equal        r215, r9, r214
  Expect       r215
  Return       r0
