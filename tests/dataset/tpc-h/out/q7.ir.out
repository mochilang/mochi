func main (regs=272)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r4, [{"c_custkey": 200, "c_nationkey": 2}]
  // let orders = [
  Const        r6, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r8, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r10, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r12, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r14, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r16, "GERMANY"
  // from l in lineitem
  Const        r18, []
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r21, r8
  Len          r22, r21
  Const        r23, 0
  Less         r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r27, r6
  Len          r28, r27
  Const        r29, 0
  Less         r30, r29, r28
  JumpIfFalse  r30, L1
L18:
  Index        r31, r27, r29
  Const        r33, "o_orderkey"
  Index        r34, r31, r33
  Const        r35, "l_orderkey"
  Index        r36, r25, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
L17:
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r38, r4
  Len          r39, r38
  Const        r40, 0
  Less         r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Const        r44, "c_custkey"
  Index        r45, r42, r44
  Const        r46, "o_custkey"
  Index        r47, r31, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r49, r2
L16:
  Len          r50, r49
  Const        r51, 0
  Less         r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r53, r49, r51
  Const        r55, "s_suppkey"
  Index        r56, r53, r55
  Const        r57, "l_suppkey"
  Index        r58, r25, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r60, r1
  Len          r61, r60
L15:
  Const        r62, 0
  Less         r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r64, r60, r62
  Const        r66, "n_nationkey"
  Index        r67, r64, r66
  Const        r68, "s_nationkey"
  Index        r69, r53, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L5
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
L14:
  Less         r74, r73, r72
  JumpIfFalse  r74, L5
  Index        r75, r71, r73
  Const        r77, "n_nationkey"
  Index        r78, r75, r77
  Const        r79, "c_nationkey"
  Index        r80, r42, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L6
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Const        r82, "l_shipdate"
  Index        r83, r25, r82
  LessEq       r84, r10, r83
  Const        r85, "l_shipdate"
L13:
  Index        r86, r25, r85
  LessEq       r87, r86, r12
  Move         r88, r84
  JumpIfFalse  r88, L7
  JumpIfFalse  r87, L8
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Const        r90, "n_name"
  Index        r91, r64, r90
  Equal        r92, r91, r14
  Const        r93, "n_name"
  Index        r94, r75, r93
  Equal        r95, r94, r16
  JumpIfFalse  r92, L9
  JumpIfTrue   r95, L10
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Const        r98, "n_name"
  Index        r99, r64, r98
  Equal        r100, r99, r16
  Const        r101, "n_name"
  Index        r102, r75, r101
  Equal        r103, r102, r14
L7:
  Move         r104, r100
  JumpIfFalse  r104, L11
  Move         r104, r103
  // where (
  JumpIfFalse  r104, L6
  // from l in lineitem
  Const        r105, "l"
  Move         r106, r25
  Const        r107, "o"
  Move         r108, r31
  Const        r109, "c"
  Move         r110, r42
  Const        r111, "s"
L9:
  Move         r112, r53
L8:
  Const        r113, "n1"
  Move         r114, r64
  Const        r115, "n2"
  Move         r116, r75
  MakeMap      r117, 6, r105
  // supp_nation: n1.n_name,
  Const        r118, "supp_nation"
  Const        r119, "n_name"
  Index        r120, r64, r119
  // cust_nation: n2.n_name,
  Const        r121, "cust_nation"
  Const        r122, "n_name"
  Index        r123, r75, r122
L11:
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r124, "l_year"
L10:
  Const        r125, "l_shipdate"
  Index        r126, r25, r125
  Const        r127, 0
  Const        r128, 4
  Slice        r129, r126, r127, r128
  // supp_nation: n1.n_name,
  Move         r130, r118
  Move         r131, r120
  // cust_nation: n2.n_name,
  Move         r132, r121
  Move         r133, r123
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r134, r124
  Move         r135, r129
  // group by {
  MakeMap      r136, 3, r130
  Str          r137, r136
  In           r138, r137, r19
  JumpIfTrue   r138, L12
  // from l in lineitem
  Const        r139, []
  Const        r140, "__group__"
  Const        r141, true
  Const        r142, "key"
  // group by {
  Move         r143, r136
  // from l in lineitem
  Const        r144, "items"
  Move         r145, r139
  MakeMap      r146, 3, r140
  SetIndex     r19, r137, r146
  Append       r147, r20, r146
  Const        r148, "items"
  Index        r149, r19, r137
  Index        r150, r149, r148
  Append       r151, r150, r117
  SetIndex     r149, r148, r151
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  Const        r152, 1
  Add          r153, r73, r152
  Jump         L13
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  Const        r154, 1
  Add          r155, r62, r154
  Jump         L14
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Const        r156, 1
  Add          r157, r51, r156
  Jump         L15
  // join c in customer on c.c_custkey == o.o_custkey
  Const        r158, 1
  Add          r159, r40, r158
  Jump         L16
  // join o in orders on o.o_orderkey == l.l_orderkey
  Const        r160, 1
  Add          r161, r29, r160
  Jump         L17
  // from l in lineitem
  Const        r162, 1
  Add          r163, r23, r162
L12:
  Move         r23, r163
  Jump         L18
  Const        r164, 0
  Len          r165, r147
  Less         r166, r164, r165
L6:
  JumpIfFalse  r166, L19
  Index        r167, r147, r164
  // supp_nation: g.key.supp_nation,
  Const        r169, "supp_nation"
  Const        r170, "key"
L5:
  Index        r171, r167, r170
  Const        r172, "supp_nation"
  Index        r173, r171, r172
  // cust_nation: g.key.cust_nation,
  Const        r174, "cust_nation"
L4:
  Const        r175, "key"
  Index        r176, r167, r175
  Const        r177, "cust_nation"
  Index        r178, r176, r177
L3:
  // l_year: g.key.l_year,
  Const        r179, "l_year"
  Const        r180, "key"
  Index        r181, r167, r180
  Const        r182, "l_year"
L2:
  Index        r183, r181, r182
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r184, "revenue"
  Const        r185, []
  IterPrep     r186, r167
L1:
  Len          r187, r186
  Const        r188, 0
  Less         r189, r188, r187
  JumpIfFalse  r189, L20
L0:
  Index        r190, r186, r188
  Const        r192, "l"
L22:
  Index        r193, r190, r192
  Const        r194, "l_extendedprice"
  Index        r195, r193, r194
  Const        r196, 1
  Const        r197, "l"
  Index        r198, r190, r197
  Const        r199, "l_discount"
  Index        r200, r198, r199
  Sub          r201, r196, r200
  Mul          r202, r195, r201
  Append       r203, r185, r202
  Const        r204, 1
  Add          r205, r188, r204
  Jump         L21
  Sum          r206, r203
  // supp_nation: g.key.supp_nation,
  Move         r207, r169
  Move         r208, r173
  // cust_nation: g.key.cust_nation,
  Move         r209, r174
  Move         r210, r178
  // l_year: g.key.l_year,
  Move         r211, r179
  Move         r212, r183
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r213, r184
  Move         r214, r206
  // select {
  MakeMap      r215, 4, r207
L21:
  // sort by [supp_nation, cust_nation, l_year]
  Move         r217, r216
  Move         r219, r218
  MakeList     r222, 3, r217
  Move         r223, r222
  // from l in lineitem
  Move         r224, r215
  MakeList     r225, 2, r223
  Append       r226, r18, r225
  Const        r227, 1
  Add          r228, r164, r227
  Jump         L22
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r229, r226
  // json(result)
  JSON         r230
  // expect result == [
  Const        r231, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r232, r229, r231
  Expect       r232
  Return       r0
