func main (regs=210)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r2, [{"c_custkey": 200, "c_nationkey": 2}]
  // let orders = [
  Const        r3, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r5, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r6, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r7, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r8, "GERMANY"
  // from l in lineitem
  Const        r9, []
  // supp_nation: n1.n_name,
  Const        r10, "supp_nation"
  Const        r11, "n_name"
  // cust_nation: n2.n_name,
  Const        r12, "cust_nation"
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r13, "l_year"
  Const        r14, "l_shipdate"
  // supp_nation: g.key.supp_nation,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r16, "revenue"
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r23, r4
  Len          r24, r23
  Const        r25, 0
L16:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r29, r3
  Len          r30, r29
  Const        r31, 0
L15:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_orderkey"
  Index        r36, r34, r35
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r40, r2
  Len          r41, r40
  Const        r42, 0
L14:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Const        r46, "c_custkey"
  Index        r47, r45, r46
  Const        r48, "o_custkey"
  Index        r49, r34, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r51, r1
  Len          r52, r51
  Const        r53, 0
L13:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r56, r51, r53
  Const        r57, "s_suppkey"
  Index        r58, r56, r57
  Const        r59, "l_suppkey"
  Index        r60, r28, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r62, r0
  Len          r63, r62
  Const        r64, 0
L12:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L4
  Index        r67, r62, r64
  Const        r68, "n_nationkey"
  Index        r69, r67, r68
  Const        r70, "s_nationkey"
  Index        r71, r56, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L5
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r73, r0
  Len          r74, r73
  Const        r75, 0
L11:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L5
  Index        r78, r73, r75
  Index        r79, r78, r68
  Const        r80, "c_nationkey"
  Index        r81, r45, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L6
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Index        r83, r28, r14
  LessEq       r84, r5, r83
  Index        r85, r28, r14
  LessEq       r86, r85, r6
  Move         r87, r84
  JumpIfFalse  r87, L7
  Move         r87, r86
  JumpIfFalse  r87, L7
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Index        r88, r67, r11
  Equal        r89, r88, r7
  Index        r90, r78, r11
  Equal        r91, r90, r8
  Move         r92, r89
  JumpIfFalse  r92, L7
L7:
  Move         r93, r91
  JumpIfTrue   r93, L8
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Index        r94, r67, r11
  Equal        r95, r94, r8
  Index        r96, r78, r11
  Equal        r97, r96, r7
  Move         r98, r95
  JumpIfFalse  r98, L9
L9:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r93, r97
L8:
  // where (
  JumpIfFalse  r93, L6
  // from l in lineitem
  Const        r99, "l"
  Move         r100, r28
  Const        r101, "o"
  Move         r102, r34
  Const        r103, "c"
  Move         r104, r45
  Const        r105, "s"
  Move         r106, r56
  Const        r107, "n1"
  Move         r108, r67
  Const        r109, "n2"
  Move         r110, r78
  MakeMap      r111, 6, r99
  // supp_nation: n1.n_name,
  Const        r112, "supp_nation"
  Index        r113, r67, r11
  // cust_nation: n2.n_name,
  Const        r114, "cust_nation"
  Index        r115, r78, r11
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r116, "l_year"
  Index        r117, r28, r14
  Const        r118, 0
  Const        r119, 4
  Slice        r120, r117, r118, r119
  // supp_nation: n1.n_name,
  Move         r121, r112
  Move         r122, r113
  // cust_nation: n2.n_name,
  Move         r123, r114
  Move         r124, r115
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r125, r116
  Move         r126, r120
  // group by {
  MakeMap      r127, 3, r121
  Str          r128, r127
  In           r129, r128, r20
  JumpIfTrue   r129, L10
  // from l in lineitem
  Const        r130, []
  Const        r131, "__group__"
  Const        r132, true
  Const        r133, "key"
  // group by {
  Move         r134, r127
  // from l in lineitem
  Const        r135, "items"
  Move         r136, r130
  Const        r137, "count"
  Const        r138, 0
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  Move         r142, r134
  Move         r143, r135
  Move         r144, r136
  Move         r145, r137
  Move         r146, r138
  MakeMap      r147, 4, r139
  SetIndex     r20, r128, r147
  Append       r21, r21, r147
L10:
  Const        r149, "items"
  Index        r150, r20, r128
  Index        r151, r150, r149
  Append       r152, r151, r111
  SetIndex     r150, r149, r152
  Const        r153, "count"
  Index        r154, r150, r153
  Const        r155, 1
  AddInt       r156, r154, r155
  SetIndex     r150, r153, r156
L6:
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  AddInt       r75, r75, r155
  Jump         L11
L5:
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  AddInt       r64, r64, r155
  Jump         L12
L4:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r53, r53, r155
  Jump         L13
L3:
  // join c in customer on c.c_custkey == o.o_custkey
  AddInt       r42, r42, r155
  Jump         L14
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r31, r31, r155
  Jump         L15
L1:
  // from l in lineitem
  AddInt       r25, r25, r155
  Jump         L16
L0:
  Move         r157, r118
  Len          r158, r21
L20:
  LessInt      r159, r157, r158
  JumpIfFalse  r159, L17
  Index        r161, r21, r157
  // supp_nation: g.key.supp_nation,
  Const        r162, "supp_nation"
  Index        r163, r161, r15
  Index        r164, r163, r10
  // cust_nation: g.key.cust_nation,
  Const        r165, "cust_nation"
  Index        r166, r161, r15
  Index        r167, r166, r12
  // l_year: g.key.l_year,
  Const        r168, "l_year"
  Index        r169, r161, r15
  Index        r170, r169, r13
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r171, "revenue"
  Const        r172, []
  IterPrep     r173, r161
  Len          r174, r173
  Move         r175, r118
L19:
  LessInt      r176, r175, r174
  JumpIfFalse  r176, L18
  Index        r178, r173, r175
  Index        r179, r178, r17
  Index        r180, r179, r18
  Index        r181, r178, r17
  Index        r182, r181, r19
  Sub          r183, r155, r182
  Mul          r184, r180, r183
  Append       r172, r172, r184
  AddInt       r175, r175, r155
  Jump         L19
L18:
  Sum          r186, r172
  // supp_nation: g.key.supp_nation,
  Move         r187, r162
  Move         r188, r164
  // cust_nation: g.key.cust_nation,
  Move         r189, r165
  Move         r190, r167
  // l_year: g.key.l_year,
  Move         r191, r168
  Move         r192, r170
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r193, r171
  Move         r194, r186
  // select {
  MakeMap      r195, 4, r187
  // sort by [supp_nation, cust_nation, l_year]
  Move         r197, r196
  Move         r199, r198
  Move         r201, r200
  MakeList     r203, 3, r197
  // from l in lineitem
  Move         r204, r195
  MakeList     r205, 2, r203
  Append       r9, r9, r205
  AddInt       r157, r157, r155
  Jump         L20
L17:
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r9, r9
  // json(result)
  JSON         r9
  // expect result == [
  Const        r208, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r209, r9, r208
  Expect       r209
  Return       r0
