func main (regs=187)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r2, [{"c_custkey": 200, "c_nationkey": 2}]
  // let orders = [
  Const        r3, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r5, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r6, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r7, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r8, "GERMANY"
  // from l in lineitem
  Const        r9, []
  // supp_nation: n1.n_name,
  Const        r10, "supp_nation"
  Const        r11, "n_name"
  // cust_nation: n2.n_name,
  Const        r12, "cust_nation"
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r14, "l_shipdate"
  // supp_nation: g.key.supp_nation,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r22, r4
  Len          r23, r22
  Const        r24, 0
L17:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L0
  Index        r26, r22, r24
  Move         r27, r26
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r28, r3
  Len          r29, r28
  Const        r30, 0
L16:
  Less         r31, r30, r29
  JumpIfFalse  r31, L1
  Index        r33, r28, r30
  Const        r34, "o_orderkey"
  Index        r35, r33, r34
  Const        r36, "l_orderkey"
  Index        r37, r27, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L2
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r39, r2
  Len          r40, r39
  Const        r41, 0
L15:
  Less         r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "c_custkey"
  Index        r46, r44, r45
  Const        r47, "o_custkey"
  Index        r48, r33, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r50, r1
  Len          r51, r50
  Const        r52, 0
L14:
  Less         r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Const        r56, "s_suppkey"
  Index        r57, r55, r56
  Const        r58, "l_suppkey"
  Index        r59, r27, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r61, r0
  Len          r62, r61
  Const        r63, 0
L13:
  Less         r64, r63, r62
  JumpIfFalse  r64, L4
  Index        r66, r61, r63
  Const        r67, "n_nationkey"
  Index        r68, r66, r67
  Const        r69, "s_nationkey"
  Index        r70, r55, r69
  Equal        r71, r68, r70
  JumpIfFalse  r71, L5
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r72, r0
  Len          r73, r72
  Const        r74, 0
L12:
  Less         r75, r74, r73
  JumpIfFalse  r75, L5
  Index        r77, r72, r74
  Index        r78, r77, r67
  Const        r79, "c_nationkey"
  Index        r80, r44, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L6
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Index        r82, r27, r14
  LessEq       r83, r5, r82
  Index        r84, r27, r14
  LessEq       r85, r84, r6
  Move         r86, r83
  JumpIfFalse  r86, L7
L7:
  Move         r87, r85
  JumpIfFalse  r87, L8
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Index        r88, r66, r11
  Equal        r89, r88, r7
  Index        r90, r77, r11
  Equal        r91, r90, r8
  Move         r92, r89
  JumpIfFalse  r92, L8
L8:
  Move         r93, r91
  JumpIfTrue   r93, L9
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Index        r94, r66, r11
  Equal        r95, r94, r8
  Index        r96, r77, r11
  Equal        r97, r96, r7
  Move         r98, r95
  JumpIfFalse  r98, L10
L10:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r93, r97
L9:
  // where (
  JumpIfFalse  r93, L6
  // from l in lineitem
  MakeMap      r110, 6, r17
  // supp_nation: n1.n_name,
  Const        r111, "supp_nation"
  Index        r112, r66, r11
  // cust_nation: n2.n_name,
  Const        r113, "cust_nation"
  Index        r114, r77, r11
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r115, "l_year"
  Index        r116, r27, r14
  Const        r117, 0
  // group by {
  MakeMap      r123, 3, r111
  Str          r124, r123
  In           r125, r124, r20
  JumpIfTrue   r125, L11
  // from l in lineitem
  Const        r126, []
  Const        r127, "__group__"
  Const        r128, true
  // group by {
  Move         r129, r123
  // from l in lineitem
  Const        r130, "items"
  Move         r131, r126
  MakeMap      r132, 3, r127
  SetIndex     r20, r124, r132
  Append       r21, r21, r132
L11:
  Index        r134, r20, r124
  Index        r135, r134, r130
  Append       r136, r135, r110
  SetIndex     r134, r130, r136
L6:
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  Const        r137, 1
  AddInt       r74, r74, r137
  Jump         L12
L5:
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  AddInt       r63, r63, r137
  Jump         L13
L4:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r52, r52, r137
  Jump         L14
L3:
  // join c in customer on c.c_custkey == o.o_custkey
  AddInt       r41, r41, r137
  Jump         L15
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  Jump         L16
L1:
  // from l in lineitem
  Jump         L17
L0:
  Move         r138, r117
  Len          r139, r21
L21:
  LessInt      r140, r138, r139
  JumpIfFalse  r140, L18
  Index        r142, r21, r138
  // supp_nation: g.key.supp_nation,
  Const        r143, "supp_nation"
  Index        r144, r142, r15
  Index        r145, r144, r10
  // cust_nation: g.key.cust_nation,
  Const        r146, "cust_nation"
  Index        r147, r142, r15
  Index        r148, r147, r12
  // l_year: g.key.l_year,
  Const        r149, "l_year"
  Index        r150, r142, r15
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r153, []
  IterPrep     r154, r142
  Len          r155, r154
  Move         r156, r117
L20:
  LessInt      r157, r156, r155
  JumpIfFalse  r157, L19
  Index        r159, r154, r156
  Index        r160, r159, r17
  Index        r161, r160, r18
  Index        r162, r159, r17
  Index        r163, r162, r19
  Sub          r164, r137, r163
  Mul          r165, r161, r164
  Append       r153, r153, r165
  AddInt       r156, r156, r137
  Jump         L20
L19:
  // select {
  MakeMap      r172, 4, r143
  // sort by [supp_nation, cust_nation, l_year]
  Move         r174, r173
  Move         r176, r175
  MakeList     r180, 3, r174
  // from l in lineitem
  Move         r181, r172
  MakeList     r182, 2, r180
  Append       r9, r9, r182
  AddInt       r138, r138, r137
  Jump         L21
L18:
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r9, r9
  // json(result)
  JSON         r9
  // expect result == [
  Const        r185, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r186, r9, r185
  Expect       r186
  Return       r0
