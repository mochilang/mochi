func main (regs=200)
  // let nation = [
  Const        r0, [{"n_name": "FRANCE", "n_nationkey": 1}, {"n_name": "GERMANY", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}]
  // let customer = [
  Const        r2, [{"c_custkey": 200, "c_nationkey": 2}]
  // let orders = [
  Const        r3, [{"o_custkey": 200, "o_orderkey": 1000}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_shipdate": "1995-06-15", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 1000, "l_shipdate": "1997-01-01", "l_suppkey": 100}]
  // let start_date = "1995-01-01"
  Const        r5, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r6, "1996-12-31"
  // let nation1 = "FRANCE"
  Const        r7, "FRANCE"
  // let nation2 = "GERMANY"
  Const        r8, "GERMANY"
  // from l in lineitem
  Const        r9, []
  // supp_nation: n1.n_name,
  Const        r10, "supp_nation"
  Const        r11, "n_name"
  // cust_nation: n2.n_name,
  Const        r12, "cust_nation"
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r13, "l_year"
  Const        r14, "l_shipdate"
  // supp_nation: g.key.supp_nation,
  Const        r15, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r16, "revenue"
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // from l in lineitem
  MakeMap      r20, 0, r0
  Const        r22, []
  Move         r21, r22
  IterPrep     r23, r4
  Len          r24, r23
  Const        r25, 0
L17:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r27, r23, r25
  Move         r28, r27
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r29, r3
  Len          r30, r29
  Const        r31, 0
L16:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_orderkey"
  Index        r36, r34, r35
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join c in customer on c.c_custkey == o.o_custkey
  IterPrep     r40, r2
  Len          r41, r40
  Const        r42, 0
L15:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Const        r46, "c_custkey"
  Index        r47, r45, r46
  Const        r48, "o_custkey"
  Index        r49, r34, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r51, r1
  Len          r52, r51
  Const        r53, 0
L14:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r56, r51, r53
  Const        r57, "s_suppkey"
  Index        r58, r56, r57
  Const        r59, "l_suppkey"
  Index        r60, r28, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  IterPrep     r62, r0
  Len          r63, r62
  Const        r64, 0
L13:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L4
  Index        r67, r62, r64
  Const        r68, "n_nationkey"
  Index        r69, r67, r68
  Const        r70, "s_nationkey"
  Index        r71, r56, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L5
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  IterPrep     r73, r0
  Len          r74, r73
  Const        r75, 0
L12:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L5
  Index        r78, r73, r75
  Index        r79, r78, r68
  Const        r80, "c_nationkey"
  Index        r81, r45, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L6
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Index        r83, r28, r14
  LessEq       r84, r5, r83
  Index        r85, r28, r14
  LessEq       r86, r85, r6
  JumpIfFalse  r84, L7
  Move         r84, r86
  JumpIfFalse  r84, L7
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Index        r87, r67, r11
  Equal        r88, r87, r7
  Index        r89, r78, r11
  Equal        r90, r89, r8
  JumpIfFalse  r88, L8
L8:
  // l.l_shipdate >= start_date && l.l_shipdate <= end_date &&
  Move         r84, r90
L7:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  JumpIfTrue   r84, L9
  // (n1.n_name == nation2 && n2.n_name == nation1)
  Index        r91, r67, r11
  Equal        r92, r91, r8
  Index        r93, r78, r11
  Equal        r94, r93, r7
  JumpIfFalse  r92, L10
L10:
  // (n1.n_name == nation1 && n2.n_name == nation2) ||
  Move         r84, r94
L9:
  // where (
  JumpIfFalse  r84, L6
  // from l in lineitem
  Move         r95, r28
  Const        r96, "o"
  Move         r97, r34
  Const        r98, "c"
  Move         r99, r45
  Const        r100, "s"
  Move         r101, r56
  Const        r102, "n1"
  Move         r103, r67
  Const        r104, "n2"
  Move         r105, r78
  MakeMap      r106, 6, r17
  // supp_nation: n1.n_name,
  Const        r107, "supp_nation"
  Index        r108, r67, r11
  // cust_nation: n2.n_name,
  Const        r109, "cust_nation"
  Index        r110, r78, r11
  // l_year: substring(l.l_shipdate, 0, 4)
  Const        r111, "l_year"
  Index        r112, r28, r14
  Const        r113, 0
  Const        r114, 4
  Slice        r115, r112, r113, r114
  // supp_nation: n1.n_name,
  Move         r116, r107
  Move         r117, r108
  // cust_nation: n2.n_name,
  Move         r118, r109
  Move         r119, r110
  // l_year: substring(l.l_shipdate, 0, 4)
  Move         r120, r111
  Move         r121, r115
  // group by {
  MakeMap      r122, 3, r116
  Str          r123, r122
  In           r124, r123, r20
  JumpIfTrue   r124, L11
  // from l in lineitem
  Const        r125, "__group__"
  Const        r126, true
  // group by {
  Move         r127, r122
  // from l in lineitem
  Const        r128, "items"
  Move         r129, r22
  Const        r130, "count"
  Move         r131, r125
  Move         r132, r126
  Move         r133, r15
  Move         r134, r127
  Move         r135, r128
  Move         r136, r129
  Move         r137, r130
  Move         r138, r113
  MakeMap      r139, 4, r131
  SetIndex     r20, r123, r139
  Append       r21, r21, r139
L11:
  Index        r141, r20, r123
  Index        r142, r141, r128
  Append       r143, r142, r106
  SetIndex     r141, r128, r143
  Index        r144, r141, r130
  Const        r145, 1
  AddInt       r146, r144, r145
  SetIndex     r141, r130, r146
L6:
  // join n2 in nation on n2.n_nationkey == c.c_nationkey
  AddInt       r75, r75, r145
  Jump         L12
L5:
  // join n1 in nation on n1.n_nationkey == s.s_nationkey
  AddInt       r64, r64, r145
  Jump         L13
L4:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r53, r53, r145
  Jump         L14
L3:
  // join c in customer on c.c_custkey == o.o_custkey
  AddInt       r42, r42, r145
  Jump         L15
L2:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r31, r31, r145
  Jump         L16
L1:
  // from l in lineitem
  AddInt       r25, r25, r145
  Jump         L17
L0:
  Move         r147, r113
  Len          r148, r21
L21:
  LessInt      r149, r147, r148
  JumpIfFalse  r149, L18
  Index        r151, r21, r147
  // supp_nation: g.key.supp_nation,
  Const        r152, "supp_nation"
  Index        r153, r151, r15
  Index        r154, r153, r10
  // cust_nation: g.key.cust_nation,
  Const        r155, "cust_nation"
  Index        r156, r151, r15
  Index        r157, r156, r12
  // l_year: g.key.l_year,
  Const        r158, "l_year"
  Index        r159, r151, r15
  Index        r160, r159, r13
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r161, "revenue"
  Const        r162, []
  IterPrep     r163, r151
  Len          r164, r163
  Move         r165, r113
L20:
  LessInt      r166, r165, r164
  JumpIfFalse  r166, L19
  Index        r168, r163, r165
  Index        r169, r168, r17
  Index        r170, r169, r18
  Index        r171, r168, r17
  Index        r172, r171, r19
  Sub          r173, r145, r172
  Mul          r174, r170, r173
  Append       r162, r162, r174
  AddInt       r165, r165, r145
  Jump         L20
L19:
  Sum          r176, r162
  // supp_nation: g.key.supp_nation,
  Move         r177, r152
  Move         r178, r154
  // cust_nation: g.key.cust_nation,
  Move         r179, r155
  Move         r180, r157
  // l_year: g.key.l_year,
  Move         r181, r158
  Move         r182, r160
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r183, r161
  Move         r184, r176
  // select {
  MakeMap      r185, 4, r177
  // sort by [supp_nation, cust_nation, l_year]
  Move         r187, r186
  Move         r189, r188
  Move         r191, r190
  MakeList     r193, 3, r187
  // from l in lineitem
  Move         r194, r185
  MakeList     r195, 2, r193
  Append       r9, r9, r195
  AddInt       r147, r147, r145
  Jump         L21
L18:
  // sort by [supp_nation, cust_nation, l_year]
  Sort         r9, r9
  // json(result)
  JSON         r9
  // expect result == [
  Const        r198, [{"cust_nation": "GERMANY", "l_year": "1995", "revenue": 900, "supp_nation": "FRANCE"}]
  Equal        r199, r9, r198
  Expect       r199
  Return       r0
