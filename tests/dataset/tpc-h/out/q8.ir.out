func main (regs=261)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  Move         r1, r0
  // let nation = [
  Const        r2, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r4, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r6, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r8, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r10, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r12, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r14, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r16, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r18, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r20, "BRAZIL"
  // from l in lineitem
  MakeMap      r23, 0, r0
  IterPrep     r25, r8
  Len          r26, r25
  Const        r27, 0
  Less         r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r31, r12
  Len          r32, r31
  Const        r33, 0
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r35, r31, r33
  Const        r37, "p_partkey"
L18:
  Index        r38, r35, r37
  Const        r39, "l_partkey"
  Index        r40, r29, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r42, r10
  Len          r43, r42
L17:
  Const        r44, 0
  Less         r45, r44, r43
  JumpIfFalse  r45, L2
  Index        r46, r42, r44
  Const        r48, "s_suppkey"
  Index        r49, r46, r48
  Const        r50, "l_suppkey"
  Index        r51, r29, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r53, r6
  Len          r54, r53
L16:
  Const        r55, 0
  Less         r56, r55, r54
  JumpIfFalse  r56, L3
  Index        r57, r53, r55
  Const        r59, "o_orderkey"
  Index        r60, r57, r59
  Const        r61, "l_orderkey"
  Index        r62, r29, r61
  Equal        r63, r60, r62
  JumpIfFalse  r63, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r64, r4
  Len          r65, r64
  Const        r66, 0
  Less         r67, r66, r65
L15:
  JumpIfFalse  r67, L4
  Index        r68, r64, r66
  Const        r70, "c_custkey"
  Index        r71, r68, r70
  Const        r72, "o_custkey"
  Index        r73, r57, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r75, r2
  Len          r76, r75
  Const        r77, 0
  Less         r78, r77, r76
  JumpIfFalse  r78, L5
L14:
  Index        r79, r75, r77
  Const        r81, "n_nationkey"
  Index        r82, r79, r81
  Const        r83, "c_nationkey"
  Index        r84, r68, r83
  Equal        r85, r82, r84
  JumpIfFalse  r85, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r86, r1
  Len          r87, r86
  Const        r88, 0
  Less         r89, r88, r87
  JumpIfFalse  r89, L6
  Index        r90, r86, r88
L13:
  Const        r92, "r_regionkey"
  Index        r93, r90, r92
  Const        r94, "n_regionkey"
  Index        r95, r79, r94
  Equal        r96, r93, r95
  JumpIfFalse  r96, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r97, "p_type"
  Index        r98, r35, r97
  Const        r99, "o_orderdate"
  Index        r100, r57, r99
  LessEq       r101, r14, r100
  Const        r102, "o_orderdate"
  Index        r103, r57, r102
L12:
  LessEq       r104, r103, r16
  Equal        r105, r98, r18
  Const        r106, "r_name"
  Index        r107, r90, r106
  Const        r108, "AMERICA"
  Equal        r109, r107, r108
  JumpIfFalse  r105, L8
  Move         r105, r101
  JumpIfFalse  r105, L9
  JumpIfFalse  r104, L10
  JumpIfFalse  r109, L7
  // from l in lineitem
  Const        r113, "l"
  Move         r114, r29
  Const        r115, "p"
  Move         r116, r35
  Const        r117, "s"
  Move         r118, r46
  Const        r119, "o"
  Move         r120, r57
  Const        r121, "c"
  Move         r122, r68
  Const        r123, "n"
  Move         r124, r79
  MakeMap      r127, 6, r113
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r128, "o_orderdate"
  Index        r129, r57, r128
L8:
  Const        r130, 0
  Const        r131, 4
  Slice        r132, r129, r130, r131
L9:
  Str          r133, r132
  In           r134, r133, r23
  JumpIfTrue   r134, L11
L10:
  // from l in lineitem
  Const        r136, "__group__"
  Const        r137, true
  Const        r138, "key"
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r139, r132
  // from l in lineitem
  MakeMap      r142, 2, r136
  SetIndex     r23, r133, r142
  Const        r144, "items"
  Index        r145, r23, r133
  Index        r146, r145, r144
  Append       r147, r146, r127
  SetIndex     r145, r144, r147
  // join from r in region on r.r_regionkey == n.n_regionkey
  Jump         L12
  // join from n in nation on n.n_nationkey == c.c_nationkey
  Jump         L13
  // join from c in customer on c.c_custkey == o.o_custkey
  Jump         L14
  // join from o in orders on o.o_orderkey == l.l_orderkey
  Jump         L15
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  Jump         L16
  // join from p in part on p.p_partkey == l.l_partkey
  Jump         L17
  // from l in lineitem
  Jump         L18
  Const        r162, 0
  Len          r163, r143
  Less         r164, r162, r163
  JumpIfFalse  r164, L19
  Index        r165, r143, r162
  // sum(from x in year select match x.n.n_name == target_nation {
  IterPrep     r172, r165
  Len          r173, r172
  Const        r174, 0
  Less         r175, r174, r173
L11:
  JumpIfFalse  r175, L20
  Index        r176, r172, r174
  Const        r178, "n"
  Index        r179, r176, r178
  Const        r180, "n_name"
L7:
  Index        r181, r179, r180
L6:
  Equal        r182, r181, r20
L5:
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r185, true
L4:
  Equal        r184, r182, r185
L3:
  JumpIfFalse  r184, L21
L2:
  Jump         L21
L1:
  // _ => 0
  Jump         L21
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  IterPrep     r203, r165
  Len          r204, r203
  Const        r205, 0
L0:
  Less         r206, r205, r204
  JumpIfFalse  r206, L22
  // from l in lineitem
  Jump         L22
  // sort by year.key
  Sort         r237, r22
  // print(result)
  Print        r237
L21:
  // let share = numerator / denominator         // â‰ˆ 0.6545
  Const        r248, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Const        r250, "o_year"
L20:
  Const        r251, "1995"
  Const        r252, "mkt_share"
  Move         r253, r250
  Move         r254, r251
  Move         r255, r252
  Move         r256, r248
  MakeMap      r257, 2, r253
  Move         r258, r257
  // expect result == [
  MakeList     r259, 1, r258
L22:
  Equal        r260, r237, r259
  Expect       r260
  Return       r0
