func main (regs=44)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
L2:
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
L12:
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
L16:
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
L0:
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
L9:
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
L4:
  Const        r14, "r_name"
  // o_year: year.key,
  Const        r15, "o_year"
  Const        r16, "key"
  // mkt_share:
  Const        r17, "mkt_share"
L18:
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r18, "n"
  Const        r19, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r20, "l"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  // from l in lineitem
  MakeMap      r23, 0, r0
  IterPrep     r24, r4
  Len          r4, r24
L15:
  Const        r25, 0
  LessInt      r26, r25, r4
  JumpIfFalse  r26, L0
  Index        r27, r24, r25
  Move         r28, r27
L3:
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r29, r6
  Len          r6, r29
L13:
  Move         r30, r25
L14:
  LessInt      r31, r30, r6
  JumpIfFalse  r31, L0
  Index        r32, r29, r30
L11:
  Const        r33, "p_partkey"
  Index        r34, r32, r33
  Const        r33, "l_partkey"
  Index        r35, r28, r33
  Equal        r33, r34, r35
  JumpIfFalse  r33, L1
L10:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r33, r5
  Len          r5, r33
  Move         r35, r25
  LessInt      r34, r35, r5
  JumpIfFalse  r34, L1
  Index        r34, r33, r35
  Const        r33, "s_suppkey"
  Index        r5, r34, r33
  Const        r33, "l_suppkey"
  Index        r36, r28, r33
  Equal        r33, r5, r36
  JumpIfFalse  r33, L2
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r33, r3
  Len          r3, r33
  Move         r36, r35
  LessInt      r5, r36, r3
  JumpIfFalse  r5, L2
  Index        r5, r33, r36
  Const        r33, "o_orderkey"
  Index        r3, r5, r33
  Const        r37, "l_orderkey"
  Index        r38, r28, r37
  Equal        r37, r3, r38
  JumpIfFalse  r37, L0
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r37, r2
  Len          r2, r37
  Move         r38, r25
  LessInt      r3, r38, r2
  JumpIfFalse  r3, L0
  Index        r3, r37, r38
  Const        r37, "c_custkey"
  Index        r2, r3, r37
  Const        r37, "o_custkey"
  Index        r39, r5, r37
  Equal        r37, r2, r39
  JumpIfFalse  r37, L3
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r37, r1
  Len          r1, r37
  Move         r39, r38
  LessInt      r40, r39, r1
  JumpIfFalse  r40, L3
  Index        r40, r37, r39
  Const        r37, "n_nationkey"
  Index        r1, r40, r37
  Const        r37, "c_nationkey"
  Index        r41, r3, r37
  Equal        r3, r1, r41
  JumpIfFalse  r3, L4
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r3, r0
  Len          r41, r3
  Move         r1, r38
  LessInt      r42, r1, r41
  JumpIfFalse  r42, L4
  Index        r42, r3, r1
  Const        r3, "r_regionkey"
  Index        r41, r42, r3
  Const        r3, "n_regionkey"
  Index        r43, r40, r3
  Equal        r3, r41, r43
  JumpIfFalse  r3, L5
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Index        r3, r32, r13
  Index        r32, r5, r12
  LessEq       r13, r7, r32
  Index        r32, r5, r12
  LessEq       r7, r32, r8
  Equal        r32, r3, r9
  Index        r3, r42, r14
  Const        r42, "AMERICA"
  Equal        r14, r3, r42
  Move         r42, r32
  JumpIfFalse  r42, L6
L6:
  Move         r42, r13
  JumpIfFalse  r42, L7
L7:
  Move         r42, r7
  JumpIfFalse  r42, L8
  Move         r42, r14
L8:
  JumpIfFalse  r42, L5
  // from l in lineitem
  MakeMap      r42, 7, r20
  // group by substring(o.o_orderdate, 0, 4) into year
  Index        r31, r5, r12
  Move         r5, r1
  Const        r12, 4
  Slice        r6, r31, r5, r12
  Str          r12, r6
  In           r31, r12, r23
  JumpIfTrue   r31, L9
  // from l in lineitem
  Move         r31, r11
  Const        r29, "__group__"
  Const        r28, true
  Move         r27, r16
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r4, r6
  // from l in lineitem
  Const        r6, "items"
  Move         r24, r31
  Const        r31, "count"
  Move         r14, r25
  Move         r7, r29
  Move         r29, r28
  Move         r13, r27
  Move         r27, r4
  Move         r4, r6
  Move         r32, r24
  Move         r24, r31
  Move         r3, r14
  MakeMap      r14, 4, r7
  SetIndex     r23, r12, r14
  Move         r14, r6
  Index        r6, r23, r12
  Index        r12, r6, r14
  Append       r3, r12, r42
  SetIndex     r6, r14, r3
  Move         r3, r31
  Index        r31, r6, r3
  Const        r12, 1
  AddInt       r14, r31, r12
  SetIndex     r6, r3, r14
L5:
  // join from r in region on r.r_regionkey == n.n_regionkey
  AddInt       r1, r1, r12
  Jump         L10
  // join from n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r39, r39, r12
  Jump         L11
  // join from c in customer on c.c_custkey == o.o_custkey
  AddInt       r38, r38, r12
  Jump         L12
  // join from o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r36, r36, r12
  Jump         L13
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r35, r35, r12
  Jump         L14
L1:
  // join from p in part on p.p_partkey == l.l_partkey
  AddInt       r30, r30, r12
  Jump         L4
  // from l in lineitem
  AddInt       r25, r25, r12
  Jump         L15
  Values       14,23,0,0
  Move         r23, r5
  Len          r26, r14
  LessInt      r25, r23, r26
  JumpIfFalse  r25, L16
  Index        r25, r14, r23
  // o_year: year.key,
  Move         r14, r15
  Index        r26, r25, r16
  // mkt_share:
  Move         r31, r17
  // sum(from x in year select match x.n.n_name == target_nation {
  Move         r3, r11
  IterPrep     r6, r25
  Len          r43, r6
  Move         r1, r5
  LessInt      r37, r1, r43
  JumpIfFalse  r37, L17
  Index        r37, r6, r1
  Index        r6, r37, r18
  Index        r18, r6, r19
  Equal        r6, r18, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Equal        r18, r6, r28
  JumpIfFalse  r18, L11
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r3, r3, r5
  AddInt       r1, r1, r12
  Jump         L18
L17:
  Sum          r6, r3
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r3, r11
  IterPrep     r18, r25
  Len          r1, r18
  Move         r28, r5
  LessInt      r5, r28, r1
  JumpIfFalse  r5, L19
  Index        r37, r18, r28
  Index        r5, r37, r20
  Index        r1, r5, r21
  Index        r5, r37, r20
  Index        r37, r5, r22
  Sub          r5, r12, r37
  Mul          r37, r1, r5
  Append       r3, r3, r37
  AddInt       r28, r28, r12
  Jump         L11
L19:
  Sum          r5, r3
  // }) /
  Div          r3, r6, r5
  // o_year: year.key,
  Move         r5, r14
  Move         r14, r26
  // mkt_share:
  Move         r37, r31
  Move         r31, r3
  // select {
  MakeMap      r3, 2, r5
  // sort by year.key
  Index        r31, r25, r16
  // from l in lineitem
  Move         r25, r3
  MakeList     r3, 2, r31
  Append       r11, r11, r3
  AddInt       r23, r23, r12
  Jump         L16
  // sort by year.key
  Sort         r11, r11
  // print(result)
  Print        r11
  // let share = numerator / denominator         // â‰ˆ 0.6545
  Const        r3, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Move         r25, r15
  Const        r15, "1995"
  Move         r31, r17
  Move         r17, r25
  Move         r25, r15
  Move         r15, r31
  Move         r31, r3
  MakeMap      r3, 2, r17
  // expect result == [
  MakeList     r31, 1, r3
  Equal        r3, r11, r31
  Expect       r3
  Return       r0
