func main (regs=283)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
  Const        r14, "o_orderdate"
  Const        r15, "o_orderdate"
  Const        r16, "r_name"
  // o_year: year.key,
  Const        r17, "o_year"
  Const        r18, "key"
  // mkt_share:
  Const        r19, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r20, "n"
  Const        r21, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r22, "l"
  Const        r23, "l_extendedprice"
  Const        r24, "l"
  Const        r25, "l_discount"
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r26, "l"
  Const        r27, "l_extendedprice"
  Const        r28, "l"
  Const        r29, "l_discount"
  // sort by year.key
  Const        r30, "key"
  // from l in lineitem
  MakeMap      r31, 0, r0
  Const        r32, []
  IterPrep     r34, r4
  Len          r35, r34
  Const        r36, 0
L18:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L0
  Index        r39, r34, r36
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r40, r6
  Len          r41, r40
  Const        r42, 0
L17:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L1
  Index        r45, r40, r42
  Const        r46, "p_partkey"
  Index        r47, r45, r46
  Const        r48, "l_partkey"
  Index        r49, r39, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r51, r5
  Len          r52, r51
  Const        r53, 0
L16:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L2
  Index        r56, r51, r53
  Const        r57, "s_suppkey"
  Index        r58, r56, r57
  Const        r59, "l_suppkey"
  Index        r60, r39, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, 0
L15:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L3
  Index        r67, r62, r64
  Const        r68, "o_orderkey"
  Index        r69, r67, r68
  Const        r70, "l_orderkey"
  Index        r71, r39, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r73, r2
  Len          r74, r73
  Const        r75, 0
L14:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L4
  Index        r78, r73, r75
  Const        r79, "c_custkey"
  Index        r80, r78, r79
  Const        r81, "o_custkey"
  Index        r82, r67, r81
  Equal        r83, r80, r82
  JumpIfFalse  r83, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r84, r1
  Len          r85, r84
  Const        r86, 0
L13:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L5
  Index        r89, r84, r86
  Const        r90, "n_nationkey"
  Index        r91, r89, r90
  Const        r92, "c_nationkey"
  Index        r93, r78, r92
  Equal        r94, r91, r93
  JumpIfFalse  r94, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r95, r0
  Len          r96, r95
  Const        r97, 0
L12:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L6
  Index        r100, r95, r97
  Const        r101, "r_regionkey"
  Index        r102, r100, r101
  Const        r103, "n_regionkey"
  Index        r104, r89, r103
  Equal        r105, r102, r104
  JumpIfFalse  r105, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r106, "p_type"
  Index        r107, r45, r106
  Const        r108, "o_orderdate"
  Index        r109, r67, r108
  LessEq       r110, r7, r109
  Const        r111, "o_orderdate"
  Index        r112, r67, r111
  LessEq       r113, r112, r8
  Equal        r114, r107, r9
  Const        r115, "r_name"
  Index        r116, r100, r115
  Const        r117, "AMERICA"
  Equal        r118, r116, r117
  Move         r119, r114
  JumpIfFalse  r119, L8
L8:
  Move         r120, r110
  JumpIfFalse  r120, L9
L9:
  Move         r121, r113
  JumpIfFalse  r121, L10
  Move         r121, r118
L10:
  JumpIfFalse  r121, L7
  // from l in lineitem
  Const        r122, "l"
  Move         r123, r39
  Const        r124, "p"
  Move         r125, r45
  Const        r126, "s"
  Move         r127, r56
  Const        r128, "o"
  Move         r129, r67
  Const        r130, "c"
  Move         r131, r78
  Const        r132, "n"
  Move         r133, r89
  Const        r134, "r"
  Move         r135, r100
  MakeMap      r136, 7, r122
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r137, "o_orderdate"
  Index        r138, r67, r137
  Const        r139, 0
  Const        r140, 4
  Slice        r141, r138, r139, r140
  Str          r142, r141
  In           r143, r142, r31
  JumpIfTrue   r143, L11
  // from l in lineitem
  Const        r144, []
  Const        r145, "__group__"
  Const        r146, true
  Const        r147, "key"
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r148, r141
  // from l in lineitem
  Const        r149, "items"
  Move         r150, r144
  Const        r151, "count"
  Const        r152, 0
  Move         r153, r145
  Move         r154, r146
  Move         r155, r147
  Move         r156, r148
  Move         r157, r149
  Move         r158, r150
  Move         r159, r151
  Move         r160, r152
  MakeMap      r161, 4, r153
  SetIndex     r31, r142, r161
  Append       r32, r32, r161
L11:
  Const        r163, "items"
  Index        r164, r31, r142
  Index        r165, r164, r163
  Append       r166, r165, r136
  SetIndex     r164, r163, r166
  Const        r167, "count"
  Index        r168, r164, r167
  Const        r169, 1
  AddInt       r170, r168, r169
  SetIndex     r164, r167, r170
L7:
  // join from r in region on r.r_regionkey == n.n_regionkey
  Const        r171, 1
  AddInt       r97, r97, r171
  Jump         L12
L6:
  // join from n in nation on n.n_nationkey == c.c_nationkey
  Const        r172, 1
  AddInt       r86, r86, r172
  Jump         L13
L5:
  // join from c in customer on c.c_custkey == o.o_custkey
  Const        r173, 1
  AddInt       r75, r75, r173
  Jump         L14
L4:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  Const        r174, 1
  AddInt       r64, r64, r174
  Jump         L15
L3:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  Const        r175, 1
  AddInt       r53, r53, r175
  Jump         L16
L2:
  // join from p in part on p.p_partkey == l.l_partkey
  Const        r176, 1
  AddInt       r42, r42, r176
  Jump         L17
L1:
  // from l in lineitem
  Const        r177, 1
  AddInt       r36, r36, r177
  Jump         L18
L0:
  Const        r178, 0
  Len          r180, r32
L26:
  LessInt      r181, r178, r180
  JumpIfFalse  r181, L19
  Index        r183, r32, r178
  // o_year: year.key,
  Const        r184, "o_year"
  Const        r185, "key"
  Index        r186, r183, r185
  // mkt_share:
  Const        r187, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r188, []
  Const        r189, "n"
  Const        r190, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r191, "l"
  Const        r192, "l_extendedprice"
  Const        r193, "l"
  Const        r194, "l_discount"
  // sum(from x in year select match x.n.n_name == target_nation {
  IterPrep     r195, r183
  Len          r196, r195
  Const        r197, 0
L23:
  LessInt      r199, r197, r196
  JumpIfFalse  r199, L20
  Index        r201, r195, r197
  Const        r202, "n"
  Index        r203, r201, r202
  Const        r204, "n_name"
  Index        r205, r203, r204
  Equal        r206, r205, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r209, true
  Equal        r208, r206, r209
  JumpIfFalse  r208, L21
  Const        r210, "l"
  Index        r211, r201, r210
  Const        r212, "l_extendedprice"
  Index        r213, r211, r212
  Const        r214, 1
  Const        r215, "l"
  Index        r216, r201, r215
  Const        r217, "l_discount"
  Index        r218, r216, r217
  Sub          r219, r214, r218
  Mul          r207, r213, r219
  Jump         L22
L21:
  // _ => 0
  Const        r207, 0
L22:
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r188, r188, r207
  Const        r223, 1
  AddInt       r197, r197, r223
  Jump         L23
L20:
  Sum          r224, r188
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r225, []
  Const        r226, "l"
  Const        r227, "l_extendedprice"
  Const        r228, "l"
  Const        r229, "l_discount"
  IterPrep     r230, r183
  Len          r231, r230
  Const        r232, 0
L25:
  LessInt      r234, r232, r231
  JumpIfFalse  r234, L24
  Index        r201, r230, r232
  Const        r236, "l"
  Index        r237, r201, r236
  Const        r238, "l_extendedprice"
  Index        r239, r237, r238
  Const        r240, 1
  Const        r241, "l"
  Index        r242, r201, r241
  Const        r243, "l_discount"
  Index        r244, r242, r243
  Sub          r245, r240, r244
  Mul          r246, r239, r245
  Append       r225, r225, r246
  Const        r248, 1
  AddInt       r232, r232, r248
  Jump         L25
L24:
  Sum          r249, r225
  // }) /
  Div          r250, r224, r249
  // o_year: year.key,
  Move         r251, r184
  Move         r252, r186
  // mkt_share:
  Move         r253, r187
  Move         r254, r250
  // select {
  MakeMap      r255, 2, r251
  // sort by year.key
  Const        r256, "key"
  Index        r258, r183, r256
  // from l in lineitem
  Move         r259, r255
  MakeList     r260, 2, r258
  Append       r11, r11, r260
  Const        r262, 1
  AddInt       r178, r178, r262
  Jump         L26
L19:
  // sort by year.key
  Sort         r11, r11
  // print(result)
  Print        r11
  // let numerator = 1000.0 * 0.9      // 900
  Const        r264, 1000
  Const        r265, 0.9
  Const        r266, 900
  // let denominator = numerator + (500.0 * 0.95) // 900 + 475 = 1375
  Const        r267, 500
  Const        r268, 0.95
  Const        r269, 475
  Const        r270, 1375
  // let share = numerator / denominator         // ≈ 0.6545
  Const        r271, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Const        r272, "o_year"
  Const        r273, "1995"
  Const        r274, "mkt_share"
  Move         r275, r272
  Move         r276, r273
  Move         r277, r274
  Move         r278, r271
  MakeMap      r280, 2, r275
  // expect result == [
  MakeList     r281, 1, r280
  Equal        r282, r11, r281
  Expect       r282
  Return       r0
