func main (regs=240)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
  Const        r14, "r_name"
  // o_year: year.key,
  Const        r15, "o_year"
  Const        r16, "key"
  // mkt_share:
  Const        r17, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r18, "n"
  Const        r19, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r20, "l"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r4
  Len          r27, r26
  Const        r28, 0
L18:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r30, r26, r28
  Move         r31, r30
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r6
  Len          r33, r32
  Const        r34, 0
L17:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r5
  Len          r44, r43
  Const        r45, 0
L16:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L15:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "o_orderkey"
  Index        r61, r59, r60
  Const        r62, "l_orderkey"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r65, r2
  Len          r66, r65
  Const        r67, 0
L14:
  LessInt      r68, r67, r66
  JumpIfFalse  r68, L4
  Index        r69, r65, r67
  Move         r70, r69
  Const        r71, "c_custkey"
  Index        r72, r70, r71
  Const        r73, "o_custkey"
  Index        r74, r59, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r76, r1
  Len          r77, r76
  Const        r78, 0
L13:
  LessInt      r79, r78, r77
  JumpIfFalse  r79, L5
  Index        r80, r76, r78
  Move         r81, r80
  Const        r82, "n_nationkey"
  Index        r83, r81, r82
  Const        r84, "c_nationkey"
  Index        r85, r70, r84
  Equal        r86, r83, r85
  JumpIfFalse  r86, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r87, r0
  Len          r88, r87
  Const        r89, 0
L12:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L6
  Index        r91, r87, r89
  Move         r92, r91
  Const        r93, "r_regionkey"
  Index        r94, r92, r93
  Const        r95, "n_regionkey"
  Index        r96, r81, r95
  Equal        r97, r94, r96
  JumpIfFalse  r97, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Index        r98, r37, r13
  Index        r99, r59, r12
  LessEq       r100, r7, r99
  Index        r101, r59, r12
  LessEq       r102, r101, r8
  Equal        r103, r98, r9
  Index        r104, r92, r14
  Const        r105, "AMERICA"
  Equal        r106, r104, r105
  Move         r107, r103
  JumpIfFalse  r107, L8
  Move         r107, r100
L8:
  Move         r108, r107
  JumpIfFalse  r108, L9
  Move         r108, r102
L9:
  Move         r109, r108
  JumpIfFalse  r109, L10
  Move         r109, r106
L10:
  JumpIfFalse  r109, L7
  // from l in lineitem
  Move         r110, r31
  Const        r111, "p"
  Move         r112, r37
  Const        r113, "s"
  Move         r114, r48
  Const        r115, "o"
  Move         r116, r59
  Const        r117, "c"
  Move         r118, r70
  Move         r119, r81
  Const        r120, "r"
  Move         r121, r92
  Move         r122, r20
  Move         r123, r110
  Move         r124, r111
  Move         r125, r112
  Move         r126, r113
  Move         r127, r114
  Move         r128, r115
  Move         r129, r116
  Move         r130, r117
  Move         r131, r118
  Move         r132, r18
  Move         r133, r119
  Move         r134, r120
  Move         r135, r121
  MakeMap      r136, 7, r122
  // group by substring(o.o_orderdate, 0, 4) into year
  Index        r137, r59, r12
  Const        r138, 0
  Const        r139, 4
  Slice        r140, r137, r138, r139
  Str          r141, r140
  In           r142, r141, r23
  JumpIfTrue   r142, L11
  // from l in lineitem
  Const        r143, []
  Const        r144, "__group__"
  Const        r145, true
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r146, r140
  // from l in lineitem
  Const        r147, "items"
  Move         r148, r143
  Const        r149, "count"
  Move         r150, r144
  Move         r151, r145
  Move         r152, r16
  Move         r153, r146
  Move         r154, r147
  Move         r155, r148
  Move         r156, r149
  Move         r157, r138
  MakeMap      r158, 4, r150
  SetIndex     r23, r141, r158
  Append       r159, r24, r158
  Move         r24, r159
L11:
  Index        r160, r23, r141
  Index        r161, r160, r147
  Append       r162, r161, r136
  SetIndex     r160, r147, r162
  Index        r163, r160, r149
  Const        r164, 1
  AddInt       r165, r163, r164
  SetIndex     r160, r149, r165
L7:
  // join from r in region on r.r_regionkey == n.n_regionkey
  AddInt       r89, r89, r164
  Jump         L12
L6:
  // join from n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r78, r78, r164
  Jump         L13
L5:
  // join from c in customer on c.c_custkey == o.o_custkey
  AddInt       r67, r67, r164
  Jump         L14
L4:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r56, r56, r164
  Jump         L15
L3:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r164
  Jump         L16
L2:
  // join from p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r164
  Jump         L17
L1:
  // from l in lineitem
  AddInt       r28, r28, r164
  Jump         L18
L0:
  Move         r166, r138
  Len          r167, r24
L26:
  LessInt      r168, r166, r167
  JumpIfFalse  r168, L19
  Index        r169, r24, r166
  Move         r170, r169
  // o_year: year.key,
  Const        r171, "o_year"
  Index        r172, r170, r16
  // mkt_share:
  Const        r173, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r174, []
  IterPrep     r175, r170
  Len          r176, r175
  Move         r177, r138
L23:
  LessInt      r178, r177, r176
  JumpIfFalse  r178, L20
  Index        r179, r175, r177
  Move         r180, r179
  Index        r181, r180, r18
  Index        r182, r181, r19
  Equal        r183, r182, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Equal        r185, r183, r145
  JumpIfFalse  r185, L21
  Index        r186, r180, r20
  Index        r187, r186, r21
  Index        r188, r180, r20
  Index        r189, r188, r22
  Sub          r190, r164, r189
  Mul          r191, r187, r190
  Move         r184, r191
  Jump         L22
L21:
  // _ => 0
  Move         r184, r138
L22:
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r192, r174, r184
  Move         r174, r192
  AddInt       r177, r177, r164
  Jump         L23
L20:
  Sum          r193, r174
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r194, []
  IterPrep     r195, r170
  Len          r196, r195
  Move         r197, r138
L25:
  LessInt      r198, r197, r196
  JumpIfFalse  r198, L24
  Index        r199, r195, r197
  Move         r180, r199
  Index        r200, r180, r20
  Index        r201, r200, r21
  Index        r202, r180, r20
  Index        r203, r202, r22
  Sub          r204, r164, r203
  Mul          r205, r201, r204
  Append       r206, r194, r205
  Move         r194, r206
  AddInt       r197, r197, r164
  Jump         L25
L24:
  Sum          r207, r194
  // }) /
  Div          r208, r193, r207
  // o_year: year.key,
  Move         r209, r171
  Move         r210, r172
  // mkt_share:
  Move         r211, r173
  Move         r212, r208
  // select {
  MakeMap      r213, 2, r209
  // sort by year.key
  Index        r214, r170, r16
  Move         r215, r214
  // from l in lineitem
  Move         r216, r213
  MakeList     r217, 2, r215
  Append       r218, r11, r217
  Move         r11, r218
  AddInt       r166, r166, r164
  Jump         L26
L19:
  // sort by year.key
  Sort         r219, r11
  // from l in lineitem
  Move         r11, r219
  // print(result)
  Print        r11
  // let numerator = 1000.0 * 0.9      // 900
  Const        r220, 1000
  Const        r221, 0.9
  Const        r222, 900
  // let denominator = numerator + (500.0 * 0.95) // 900 + 475 = 1375
  Const        r223, 900
  Const        r224, 475
  Const        r225, 1375
  // let share = numerator / denominator         // ≈ 0.6545
  Const        r226, 1375
  Const        r227, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Const        r228, "o_year"
  Const        r229, "1995"
  Const        r230, "mkt_share"
  Const        r231, 0.6545454545454545
  Move         r232, r228
  Move         r233, r229
  Move         r234, r230
  Move         r235, r231
  MakeMap      r236, 2, r232
  Move         r237, r236
  // expect result == [
  MakeList     r238, 1, r237
  Equal        r239, r11, r238
  Expect       r239
  Return       r0
