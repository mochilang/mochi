func main (regs=228)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
  Const        r14, "r_name"
  // o_year: year.key,
  Const        r15, "o_year"
  Const        r16, "key"
  // mkt_share:
  Const        r17, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r18, "n"
  Const        r19, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r20, "l"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r4
  Len          r27, r26
  Const        r28, 0
L16:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r30, r26, r28
  Move         r31, r30
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r6
  Len          r33, r32
  Const        r34, 0
L15:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r5
  Len          r44, r43
  Const        r45, 0
L14:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r48, r43, r45
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L13:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Const        r60, "o_orderkey"
  Index        r61, r59, r60
  Const        r62, "l_orderkey"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r65, r2
  Len          r66, r65
  Const        r67, 0
L12:
  LessInt      r68, r67, r66
  JumpIfFalse  r68, L4
  Index        r70, r65, r67
  Const        r71, "c_custkey"
  Index        r72, r70, r71
  Const        r73, "o_custkey"
  Index        r74, r59, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r76, r1
  Len          r77, r76
  Const        r78, 0
L11:
  LessInt      r79, r78, r77
  JumpIfFalse  r79, L5
  Index        r81, r76, r78
  Const        r82, "n_nationkey"
  Index        r83, r81, r82
  Const        r84, "c_nationkey"
  Index        r85, r70, r84
  Equal        r86, r83, r85
  JumpIfFalse  r86, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r87, r0
  Len          r88, r87
  Const        r89, 0
L10:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L6
  Index        r92, r87, r89
  Const        r93, "r_regionkey"
  Index        r94, r92, r93
  Const        r95, "n_regionkey"
  Index        r96, r81, r95
  Equal        r97, r94, r96
  JumpIfFalse  r97, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Index        r98, r37, r13
  Index        r99, r59, r12
  LessEq       r100, r7, r99
  Index        r101, r59, r12
  LessEq       r102, r101, r8
  Equal        r103, r98, r9
  Index        r104, r92, r14
  Const        r105, "AMERICA"
  Equal        r106, r104, r105
  JumpIfFalse  r103, L8
  Move         r103, r100
  JumpIfFalse  r103, L8
  Move         r103, r102
  JumpIfFalse  r103, L8
  Move         r103, r106
L8:
  JumpIfFalse  r103, L7
  // from l in lineitem
  Move         r107, r31
  Const        r108, "p"
  Move         r109, r37
  Const        r110, "s"
  Move         r111, r48
  Const        r112, "o"
  Move         r113, r59
  Const        r114, "c"
  Move         r115, r70
  Move         r116, r81
  Const        r117, "r"
  Move         r118, r92
  MakeMap      r119, 7, r20
  // group by substring(o.o_orderdate, 0, 4) into year
  Index        r120, r59, r12
  Const        r121, 0
  Const        r122, 4
  Slice        r123, r120, r121, r122
  Str          r124, r123
  In           r125, r124, r23
  JumpIfTrue   r125, L9
  // from l in lineitem
  Const        r126, []
  Const        r127, "__group__"
  Const        r128, true
  Const        r129, "key"
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r130, r123
  // from l in lineitem
  Const        r131, "items"
  Move         r132, r126
  Const        r133, "count"
  Const        r134, 0
  Move         r135, r127
  Move         r136, r128
  Move         r137, r129
  Move         r138, r130
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  Move         r142, r134
  MakeMap      r143, 4, r135
  SetIndex     r23, r124, r143
  Append       r24, r24, r143
L9:
  Const        r145, "items"
  Index        r146, r23, r124
  Index        r147, r146, r145
  Append       r148, r147, r119
  SetIndex     r146, r145, r148
  Const        r149, "count"
  Index        r150, r146, r149
  Const        r151, 1
  AddInt       r152, r150, r151
  SetIndex     r146, r149, r152
L7:
  // join from r in region on r.r_regionkey == n.n_regionkey
  AddInt       r89, r89, r151
  Jump         L10
L6:
  // join from n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r78, r78, r151
  Jump         L11
L5:
  // join from c in customer on c.c_custkey == o.o_custkey
  AddInt       r67, r67, r151
  Jump         L12
L4:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r56, r56, r151
  Jump         L13
L3:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r151
  Jump         L14
L2:
  // join from p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r151
  Jump         L15
L1:
  // from l in lineitem
  AddInt       r28, r28, r151
  Jump         L16
L0:
  Move         r153, r121
  Len          r154, r24
L24:
  LessInt      r155, r153, r154
  JumpIfFalse  r155, L17
  Index        r157, r24, r153
  // o_year: year.key,
  Const        r158, "o_year"
  Index        r159, r157, r16
  // mkt_share:
  Const        r160, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r161, []
  IterPrep     r162, r157
  Len          r163, r162
  Move         r164, r121
L21:
  LessInt      r165, r164, r163
  JumpIfFalse  r165, L18
  Index        r167, r162, r164
  Index        r168, r167, r18
  Index        r169, r168, r19
  Equal        r170, r169, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r173, true
  Equal        r172, r170, r173
  JumpIfFalse  r172, L19
  Index        r174, r167, r20
  Index        r175, r174, r21
  Index        r176, r167, r20
  Index        r177, r176, r22
  Sub          r178, r151, r177
  Mul          r171, r175, r178
  Jump         L20
L19:
  // _ => 0
  Move         r171, r121
L20:
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r161, r161, r171
  AddInt       r164, r164, r151
  Jump         L21
L18:
  Sum          r181, r161
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r182, []
  IterPrep     r183, r157
  Len          r184, r183
  Move         r185, r121
L23:
  LessInt      r186, r185, r184
  JumpIfFalse  r186, L22
  Index        r167, r183, r185
  Index        r188, r167, r20
  Index        r189, r188, r21
  Index        r190, r167, r20
  Index        r191, r190, r22
  Sub          r192, r151, r191
  Mul          r193, r189, r192
  Append       r182, r182, r193
  AddInt       r185, r185, r151
  Jump         L23
L22:
  Sum          r195, r182
  // }) /
  Div          r196, r181, r195
  // o_year: year.key,
  Move         r197, r158
  Move         r198, r159
  // mkt_share:
  Move         r199, r160
  Move         r200, r196
  // select {
  MakeMap      r201, 2, r197
  // sort by year.key
  Index        r203, r157, r16
  // from l in lineitem
  Move         r204, r201
  MakeList     r205, 2, r203
  Append       r11, r11, r205
  AddInt       r153, r153, r151
  Jump         L24
L17:
  // sort by year.key
  Sort         r11, r11
  // print(result)
  Print        r11
  // let numerator = 1000.0 * 0.9      // 900
  Const        r208, 1000
  Const        r209, 0.9
  Const        r210, 900
  // let denominator = numerator + (500.0 * 0.95) // 900 + 475 = 1375
  Const        r211, 900
  Const        r212, 475
  Const        r213, 1375
  // let share = numerator / denominator         // ≈ 0.6545
  Const        r214, 1375
  Const        r215, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Const        r216, "o_year"
  Const        r217, "1995"
  Const        r218, "mkt_share"
  Const        r219, 0.6545454545454545
  Move         r220, r216
  Move         r221, r217
  Move         r222, r218
  Move         r223, r219
  MakeMap      r225, 2, r220
  // expect result == [
  MakeList     r226, 1, r225
  Equal        r227, r11, r226
  Expect       r227
  Return       r0
