func main (regs=230)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
  Const        r14, "r_name"
  // o_year: year.key,
  Const        r15, "o_year"
  Const        r16, "key"
  // mkt_share:
  Const        r17, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r18, "n"
  Const        r19, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r20, "l"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r24, []
  IterPrep     r26, r4
  Len          r27, r26
  Const        r28, 0
L16:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r31, r26, r28
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r6
  Len          r33, r32
  Const        r34, 0
L15:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r5
  Len          r44, r43
  Const        r45, 0
L14:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r48, r43, r45
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L13:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Const        r60, "o_orderkey"
  Index        r61, r59, r60
  Const        r62, "l_orderkey"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r65, r2
  Len          r66, r65
  Const        r67, 0
L12:
  LessInt      r68, r67, r66
  JumpIfFalse  r68, L4
  Index        r70, r65, r67
  Const        r71, "c_custkey"
  Index        r72, r70, r71
  Const        r73, "o_custkey"
  Index        r74, r59, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r76, r1
  Len          r77, r76
  Const        r78, 0
L11:
  LessInt      r79, r78, r77
  JumpIfFalse  r79, L5
  Index        r81, r76, r78
  Const        r82, "n_nationkey"
  Index        r83, r81, r82
  Const        r84, "c_nationkey"
  Index        r85, r70, r84
  Equal        r86, r83, r85
  JumpIfFalse  r86, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r87, r0
  Len          r88, r87
  Const        r89, 0
L10:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L6
  Index        r92, r87, r89
  Const        r93, "r_regionkey"
  Index        r94, r92, r93
  Const        r95, "n_regionkey"
  Index        r96, r81, r95
  Equal        r97, r94, r96
  JumpIfFalse  r97, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Index        r98, r37, r13
  Index        r99, r59, r12
  LessEq       r100, r7, r99
  Index        r101, r59, r12
  LessEq       r102, r101, r8
  Equal        r103, r98, r9
  Index        r104, r92, r14
  Const        r105, "AMERICA"
  Equal        r106, r104, r105
  Move         r107, r103
  JumpIfFalse  r107, L8
  Move         r107, r100
  JumpIfFalse  r107, L8
  Move         r107, r102
  JumpIfFalse  r107, L8
  Move         r107, r106
L8:
  JumpIfFalse  r107, L7
  // from l in lineitem
  Const        r108, "l"
  Move         r109, r31
  Const        r110, "p"
  Move         r111, r37
  Const        r112, "s"
  Move         r113, r48
  Const        r114, "o"
  Move         r115, r59
  Const        r116, "c"
  Move         r117, r70
  Const        r118, "n"
  Move         r119, r81
  Const        r120, "r"
  Move         r121, r92
  MakeMap      r122, 7, r108
  // group by substring(o.o_orderdate, 0, 4) into year
  Index        r123, r59, r12
  Const        r124, 0
  Const        r125, 4
  Slice        r126, r123, r124, r125
  Str          r127, r126
  In           r128, r127, r23
  JumpIfTrue   r128, L9
  // from l in lineitem
  Const        r129, []
  Const        r130, "__group__"
  Const        r131, true
  Const        r132, "key"
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r133, r126
  // from l in lineitem
  Const        r134, "items"
  Move         r135, r129
  Const        r136, "count"
  Const        r137, 0
  Move         r138, r130
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  Move         r142, r134
  Move         r143, r135
  Move         r144, r136
  Move         r145, r137
  MakeMap      r146, 4, r138
  SetIndex     r23, r127, r146
  Append       r24, r24, r146
L9:
  Const        r148, "items"
  Index        r149, r23, r127
  Index        r150, r149, r148
  Append       r151, r150, r122
  SetIndex     r149, r148, r151
  Const        r152, "count"
  Index        r153, r149, r152
  Const        r154, 1
  AddInt       r155, r153, r154
  SetIndex     r149, r152, r155
L7:
  // join from r in region on r.r_regionkey == n.n_regionkey
  AddInt       r89, r89, r154
  Jump         L10
L6:
  // join from n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r78, r78, r154
  Jump         L11
L5:
  // join from c in customer on c.c_custkey == o.o_custkey
  AddInt       r67, r67, r154
  Jump         L12
L4:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r56, r56, r154
  Jump         L13
L3:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r154
  Jump         L14
L2:
  // join from p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r154
  Jump         L15
L1:
  // from l in lineitem
  AddInt       r28, r28, r154
  Jump         L16
L0:
  Move         r156, r124
  Len          r157, r24
L24:
  LessInt      r158, r156, r157
  JumpIfFalse  r158, L17
  Index        r160, r24, r156
  // o_year: year.key,
  Const        r161, "o_year"
  Index        r162, r160, r16
  // mkt_share:
  Const        r163, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r164, []
  IterPrep     r165, r160
  Len          r166, r165
  Move         r167, r124
L21:
  LessInt      r168, r167, r166
  JumpIfFalse  r168, L18
  Index        r170, r165, r167
  Index        r171, r170, r18
  Index        r172, r171, r19
  Equal        r173, r172, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r176, true
  Equal        r175, r173, r176
  JumpIfFalse  r175, L19
  Index        r177, r170, r20
  Index        r178, r177, r21
  Index        r179, r170, r20
  Index        r180, r179, r22
  Sub          r181, r154, r180
  Mul          r174, r178, r181
  Jump         L20
L19:
  // _ => 0
  Move         r174, r124
L20:
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r164, r164, r174
  AddInt       r167, r167, r154
  Jump         L21
L18:
  Sum          r184, r164
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r185, []
  IterPrep     r186, r160
  Len          r187, r186
  Move         r188, r124
L23:
  LessInt      r189, r188, r187
  JumpIfFalse  r189, L22
  Index        r170, r186, r188
  Index        r191, r170, r20
  Index        r192, r191, r21
  Index        r193, r170, r20
  Index        r194, r193, r22
  Sub          r195, r154, r194
  Mul          r196, r192, r195
  Append       r185, r185, r196
  AddInt       r188, r188, r154
  Jump         L23
L22:
  Sum          r198, r185
  // }) /
  Div          r199, r184, r198
  // o_year: year.key,
  Move         r200, r161
  Move         r201, r162
  // mkt_share:
  Move         r202, r163
  Move         r203, r199
  // select {
  MakeMap      r204, 2, r200
  // sort by year.key
  Index        r206, r160, r16
  // from l in lineitem
  Move         r207, r204
  MakeList     r208, 2, r206
  Append       r11, r11, r208
  AddInt       r156, r156, r154
  Jump         L24
L17:
  // sort by year.key
  Sort         r11, r11
  // print(result)
  Print        r11
  // let numerator = 1000.0 * 0.9      // 900
  Const        r211, 1000
  Const        r212, 0.9
  Const        r213, 900
  // let denominator = numerator + (500.0 * 0.95) // 900 + 475 = 1375
  Const        r214, 500
  Const        r215, 0.95
  Const        r216, 475
  Const        r217, 1375
  // let share = numerator / denominator         // ≈ 0.6545
  Const        r218, 0.6545454545454545
  // { o_year: "1995", mkt_share: share }
  Const        r219, "o_year"
  Const        r220, "1995"
  Const        r221, "mkt_share"
  Move         r222, r219
  Move         r223, r220
  Move         r224, r221
  Move         r225, r218
  MakeMap      r227, 2, r222
  // expect result == [
  MakeList     r228, 1, r227
  Equal        r229, r11, r228
  Expect       r229
  Return       r0
