func main (regs=209)
  // let region = [
  Const        r0, [{"r_name": "AMERICA", "r_regionkey": 0}]
  // let nation = [
  Const        r1, [{"n_name": "BRAZIL", "n_nationkey": 10, "n_regionkey": 0}, {"n_name": "CANADA", "n_nationkey": 20, "n_regionkey": 0}]
  // let customer = [
  Const        r2, [{"c_custkey": 1, "c_nationkey": 10}, {"c_custkey": 2, "c_nationkey": 20}]
  // let orders = [
  Const        r3, [{"o_custkey": 1, "o_orderdate": "1995-04-10", "o_orderkey": 100}, {"o_custkey": 2, "o_orderdate": "1995-07-15", "o_orderkey": 200}]
  // let lineitem = [
  Const        r4, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 100, "l_partkey": 5000, "l_suppkey": 1000}, {"l_discount": 0.05, "l_extendedprice": 500, "l_orderkey": 200, "l_partkey": 5000, "l_suppkey": 2000}]
  // let supplier = [
  Const        r5, [{"s_suppkey": 1000}, {"s_suppkey": 2000}]
  // let part = [
  Const        r6, [{"p_partkey": 5000, "p_type": "ECONOMY ANODIZED STEEL"}, {"p_partkey": 6000, "p_type": "SMALL BRASS"}]
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // let target_type = "ECONOMY ANODIZED STEEL"
  Const        r9, "ECONOMY ANODIZED STEEL"
  // let target_nation = "BRAZIL"
  Const        r10, "BRAZIL"
  // from l in lineitem
  Const        r11, []
  // group by substring(o.o_orderdate, 0, 4) into year
  Const        r12, "o_orderdate"
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Const        r13, "p_type"
  Const        r14, "r_name"
  // o_year: year.key,
  Const        r16, "key"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r18, "n"
  Const        r19, "n_name"
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Const        r20, "l"
  Const        r21, "l_extendedprice"
  Const        r22, "l_discount"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r24, []
  IterPrep     r25, r4
  Len          r26, r25
  Const        r27, 0
L18:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // join from p in part on p.p_partkey == l.l_partkey
  IterPrep     r31, r6
  Len          r32, r31
  Const        r33, 0
L17:
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r36, r31, r33
  Const        r37, "p_partkey"
  Index        r38, r36, r37
  Const        r39, "l_partkey"
  Index        r40, r30, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L2
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r42, r5
  Len          r43, r42
  Const        r44, 0
L16:
  Less         r45, r44, r43
  JumpIfFalse  r45, L2
  Index        r47, r42, r44
  Const        r48, "s_suppkey"
  Index        r49, r47, r48
  Const        r50, "l_suppkey"
  Index        r51, r30, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join from o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r53, r3
  Len          r54, r53
  Const        r55, 0
L15:
  Less         r56, r55, r54
  JumpIfFalse  r56, L3
  Index        r58, r53, r55
  Const        r59, "o_orderkey"
  Index        r60, r58, r59
  Const        r61, "l_orderkey"
  Index        r62, r30, r61
  Equal        r63, r60, r62
  JumpIfFalse  r63, L4
  // join from c in customer on c.c_custkey == o.o_custkey
  IterPrep     r64, r2
  Len          r65, r64
  Const        r66, 0
L14:
  Less         r67, r66, r65
  JumpIfFalse  r67, L4
  Index        r69, r64, r66
  Const        r70, "c_custkey"
  Index        r71, r69, r70
  Const        r72, "o_custkey"
  Index        r73, r58, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L5
  // join from n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r75, r1
  Len          r76, r75
  Const        r77, 0
L13:
  Less         r78, r77, r76
  JumpIfFalse  r78, L5
  Index        r80, r75, r77
  Const        r81, "n_nationkey"
  Index        r82, r80, r81
  Const        r83, "c_nationkey"
  Index        r84, r69, r83
  Equal        r85, r82, r84
  JumpIfFalse  r85, L6
  // join from r in region on r.r_regionkey == n.n_regionkey
  IterPrep     r86, r0
  Len          r87, r86
  Const        r88, 0
L12:
  Less         r89, r88, r87
  JumpIfFalse  r89, L6
  Index        r91, r86, r88
  Const        r92, "r_regionkey"
  Index        r93, r91, r92
  Const        r94, "n_regionkey"
  Index        r95, r80, r94
  Equal        r96, r93, r95
  JumpIfFalse  r96, L7
  // where (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")
  Index        r97, r36, r13
  Index        r98, r58, r12
  LessEq       r99, r7, r98
  Index        r100, r58, r12
  LessEq       r101, r100, r8
  Equal        r102, r97, r9
  Index        r103, r91, r14
  Const        r104, "AMERICA"
  Equal        r105, r103, r104
  Move         r106, r102
  JumpIfFalse  r106, L8
L8:
  Move         r107, r99
  JumpIfFalse  r107, L9
L9:
  Move         r108, r101
  JumpIfFalse  r108, L10
  Move         r108, r105
L10:
  JumpIfFalse  r108, L7
  // from l in lineitem
  MakeMap      r121, 7, r20
  // group by substring(o.o_orderdate, 0, 4) into year
  Index        r122, r58, r12
  Const        r123, 0
  Const        r124, 4
  Slice        r125, r122, r123, r124
  Str          r126, r125
  In           r127, r126, r23
  JumpIfTrue   r127, L11
  // from l in lineitem
  Const        r128, []
  Const        r129, "__group__"
  Const        r130, true
  // group by substring(o.o_orderdate, 0, 4) into year
  Move         r131, r125
  // from l in lineitem
  Const        r132, "items"
  Move         r133, r128
  MakeMap      r134, 3, r129
  SetIndex     r23, r126, r134
  Append       r24, r24, r134
L11:
  Index        r136, r23, r126
  Index        r137, r136, r132
  Append       r138, r137, r121
  SetIndex     r136, r132, r138
L7:
  // join from r in region on r.r_regionkey == n.n_regionkey
  Const        r139, 1
  AddInt       r88, r88, r139
  Jump         L12
L6:
  // join from n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r77, r77, r139
  Jump         L13
L5:
  // join from c in customer on c.c_custkey == o.o_custkey
  AddInt       r66, r66, r139
  Jump         L14
L4:
  // join from o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r55, r55, r139
  Jump         L15
L3:
  // join from s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r44, r44, r139
  Jump         L16
L2:
  // join from p in part on p.p_partkey == l.l_partkey
  Jump         L17
L1:
  // from l in lineitem
  AddInt       r27, r27, r139
  Jump         L18
L0:
  Move         r140, r123
  Len          r141, r24
L26:
  LessInt      r142, r140, r141
  JumpIfFalse  r142, L19
  Index        r144, r24, r140
  // o_year: year.key,
  Const        r145, "o_year"
  Index        r146, r144, r16
  // mkt_share:
  Const        r147, "mkt_share"
  // sum(from x in year select match x.n.n_name == target_nation {
  Const        r148, []
  IterPrep     r149, r144
  Len          r150, r149
  Move         r151, r123
L23:
  LessInt      r152, r151, r150
  JumpIfFalse  r152, L20
  Index        r154, r149, r151
  Index        r155, r154, r18
  Index        r156, r155, r19
  Equal        r157, r156, r10
  // true => x.l.l_extendedprice * (1 - x.l.l_discount)
  Equal        r159, r157, r130
  JumpIfFalse  r159, L21
  Index        r160, r154, r20
  Index        r161, r160, r21
  Index        r162, r154, r20
  Index        r163, r162, r22
  Sub          r164, r139, r163
  Mul          r158, r161, r164
  Jump         L22
L21:
  // _ => 0
  Move         r158, r123
  Jump         L22
  Const        r158, nil
L22:
  // sum(from x in year select match x.n.n_name == target_nation {
  Append       r148, r148, r158
  AddInt       r151, r151, r139
  Jump         L23
L20:
  // sum(from x in year select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r168, []
  IterPrep     r169, r144
  Len          r170, r169
  Move         r171, r123
L25:
  LessInt      r172, r171, r170
  JumpIfFalse  r172, L24
  Index        r154, r169, r171
  Index        r174, r154, r20
  Index        r175, r174, r21
  Index        r176, r154, r20
  Index        r177, r176, r22
  Sub          r178, r139, r177
  Mul          r179, r175, r178
  Append       r168, r168, r179
  AddInt       r171, r171, r139
  Jump         L25
L24:
  // select {
  MakeMap      r185, 2, r145
  // sort by year.key
  Index        r187, r144, r16
  // from l in lineitem
  Move         r188, r185
  MakeList     r189, 2, r187
  Append       r11, r11, r189
  AddInt       r140, r140, r139
  Jump         L26
L19:
  // sort by year.key
  Sort         r11, r11
  // print(result)
  Print        r11
  // { o_year: "1995", mkt_share: share }
  Const        r200, "o_year"
  Const        r201, "1995"
  Const        r202, "mkt_share"
  Move         r203, r201
  MakeMap      r206, 2, r200
  // expect result == [
  MakeList     r207, 1, r206
  Equal        r208, r11, r207
  Expect       r208
  Return       r0
