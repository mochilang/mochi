func main (regs=38)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
L9:
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
L0:
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
L7:
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
L6:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // nation: g.key.nation,
  Const        r15, "key"
  // profit:
  Const        r16, "profit"
L12:
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r20, "ps"
  Const        r21, "ps_supplycost"
  Const        r22, "l_quantity"
  // from l in lineitem
  MakeMap      r23, 0, r0
  IterPrep     r24, r5
L4:
  Len          r5, r24
L3:
  Const        r25, 0
  LessInt      r26, r25, r5
  JumpIfFalse  r26, L0
L2:
  Index        r27, r24, r25
  Move         r28, r27
L13:
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r29, r2
  Len          r2, r29
  Move         r30, r25
  LessInt      r31, r30, r2
L8:
  JumpIfFalse  r31, L1
L1:
  Index        r31, r29, r30
L10:
  Const        r29, "p_partkey"
  Index        r2, r31, r29
  Const        r29, "l_partkey"
  Index        r32, r28, r29
  Equal        r33, r2, r32
  JumpIfFalse  r33, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r33, r1
  Len          r1, r33
  Move         r32, r25
  LessInt      r2, r32, r1
  JumpIfFalse  r2, L2
  Index        r2, r33, r32
  Const        r33, "s_suppkey"
  Index        r1, r2, r33
  Const        r33, "l_suppkey"
  Index        r34, r28, r33
  Equal        r35, r1, r34
  JumpIfFalse  r35, L2
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r35, r3
  Len          r3, r35
  Move         r34, r32
  LessInt      r1, r34, r3
  JumpIfFalse  r1, L2
  Index        r1, r35, r34
  Const        r35, "ps_partkey"
  Index        r3, r1, r35
  Index        r36, r28, r29
  Equal        r29, r3, r36
  Const        r36, "ps_suppkey"
  Index        r3, r1, r36
  Index        r36, r28, r33
  Equal        r33, r3, r36
  Move         r36, r29
  JumpIfFalse  r36, L2
  Move         r36, r33
  JumpIfFalse  r36, L3
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r36, r4
  Len          r4, r36
  Move         r33, r25
  LessInt      r29, r33, r4
  JumpIfFalse  r29, L3
  Index        r29, r36, r33
  Const        r36, "o_orderkey"
  Index        r4, r29, r36
  Const        r36, "l_orderkey"
  Index        r3, r28, r36
  Equal        r36, r4, r3
  JumpIfFalse  r36, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r36, r0
  Len          r4, r36
  Move         r28, r33
  LessInt      r1, r28, r4
  JumpIfFalse  r1, L3
  Index        r1, r36, r28
  Const        r36, "n_nationkey"
  Index        r4, r1, r36
  Const        r36, "s_nationkey"
  Index        r37, r2, r36
  Equal        r36, r4, r37
  JumpIfFalse  r36, L4
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Index        r37, r31, r14
  Move         r31, r33
  Const        r14, 5
  Slice        r4, r37, r31, r14
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Index        r14, r29, r13
  LessEq       r37, r7, r14
  Index        r14, r29, r13
  LessEq       r7, r14, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r14, r4, r6
  JumpIfFalse  r14, L5
L5:
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Move         r14, r37
  JumpIfFalse  r14, L6
  Move         r14, r7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r14, L4
  // from l in lineitem
  MakeMap      r14, 6, r17
  // nation: n.n_name,
  Move         r27, r10
  Index        r5, r1, r11
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r1, r12
  Index        r11, r29, r13
  Const        r29, 4
  Slice        r13, r11, r31, r29
  Cast         r29, r13, int
  // nation: n.n_name,
  Move         r13, r27
  Move         r27, r5
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r5, r1
  Move         r1, r29
  // group by {
  MakeMap      r29, 2, r13
  Str          r1, r29
  In           r5, r1, r23
  JumpIfTrue   r5, L7
  // from l in lineitem
  Move         r5, r9
  Const        r27, "__group__"
  Const        r13, true
  Move         r11, r15
  // group by {
  Move         r24, r29
  // from l in lineitem
  Const        r29, "items"
  Move         r7, r5
  Const        r5, "count"
  Move         r37, r31
  Move         r4, r27
  Move         r27, r13
  Move         r13, r11
  Move         r11, r24
  Move         r24, r29
  Move         r6, r7
  Move         r7, r5
  Move         r8, r37
  MakeMap      r37, 4, r4
  SetIndex     r23, r1, r37
  Move         r37, r29
  Index        r29, r23, r1
  Index        r1, r29, r37
  Append       r8, r1, r14
  SetIndex     r29, r37, r8
  Move         r8, r5
  Index        r5, r29, r8
  Const        r1, 1
  AddInt       r37, r5, r1
  SetIndex     r29, r8, r37
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r28, r28, r1
  Jump         L1
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r33, r33, r1
  Jump         L0
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  AddInt       r34, r34, r1
  Jump         L8
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r32, r32, r1
  Jump         L9
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r30, r30, r1
  Jump         L10
  // from l in lineitem
  AddInt       r25, r25, r1
  Jump         L3
  Values       37,23,0,0
  Move         r23, r31
  Len          r26, r37
  LessInt      r25, r23, r26
  JumpIfFalse  r25, L10
  Index        r25, r37, r23
  // nation: g.key.nation,
  Move         r37, r10
  Index        r26, r25, r15
  Index        r5, r26, r10
  // o_year: str(g.key.o_year),
  Move         r26, r12
  Index        r8, r25, r15
  Index        r29, r8, r12
  Str          r8, r29
  // profit:
  Move         r29, r16
  // from x in g
  Move         r12, r9
  IterPrep     r36, r25
  Len          r28, r36
  Move         r3, r31
  LessInt      r31, r3, r28
  JumpIfFalse  r31, L11
  Index        r31, r36, r3
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Index        r36, r31, r17
  Index        r28, r36, r18
  Index        r36, r31, r17
  Index        r18, r36, r19
  Sub          r36, r1, r18
  Mul          r18, r28, r36
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Index        r36, r31, r20
  Index        r20, r36, r21
  Index        r36, r31, r17
  Index        r17, r36, r22
  Mul          r36, r20, r17
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r17, r18, r36
  // from x in g
  Append       r12, r12, r17
  AddInt       r3, r3, r1
  Jump         L12
L11:
  // sum(
  Sum          r36, r12
  // nation: g.key.nation,
  Move         r17, r37
  Move         r12, r5
  // o_year: str(g.key.o_year),
  Move         r5, r26
  Move         r18, r8
  // profit:
  Move         r8, r29
  Move         r29, r36
  // select {
  MakeMap      r36, 3, r17
  // sort by [ g.key.nation, -g.key.o_year ]
  Index        r29, r25, r15
  Index        r8, r29, r10
  Index        r29, r25, r15
  MakeList     r25, 2, r8
  // from l in lineitem
  Move         r29, r36
  MakeList     r36, 2, r25
  Append       r9, r9, r36
  AddInt       r23, r23, r1
  Jump         L13
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r9, r9
  // print json(result)
  JSON         r9
  // nation: "BRAZIL",
  Move         r36, r37
  Const        r37, "BRAZIL"
  // o_year: "1995",
  Move         r29, r26
  Const        r26, "1995"
  // profit: revenue - cost   // 850
  Move         r25, r16
  Const        r16, 850
  // nation: "BRAZIL",
  Move         r31, r36
  Move         r36, r37
  // o_year: "1995",
  Move         r37, r29
  Move         r29, r26
  // profit: revenue - cost   // 850
  Move         r26, r25
  Move         r25, r16
  // {
  MakeMap      r16, 3, r31
  // expect result == [
  MakeList     r25, 1, r16
  Equal        r16, r9, r25
  Expect       r16
  Return       r0
