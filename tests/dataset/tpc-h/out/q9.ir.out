func main (regs=289)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Const        r15, "o_orderdate"
  Const        r16, "o_orderdate"
  // nation: g.key.nation,
  Const        r17, "nation"
  Const        r18, "key"
  Const        r19, "nation"
  // o_year: str(g.key.o_year),
  Const        r20, "o_year"
  Const        r21, "key"
  Const        r22, "o_year"
  // profit:
  Const        r23, "profit"
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r24, "l"
  Const        r25, "l_extendedprice"
  Const        r26, "l"
  Const        r27, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r28, "ps"
  Const        r29, "ps_supplycost"
  Const        r30, "l"
  Const        r31, "l_quantity"
  // sort by [ g.key.nation, -g.key.o_year ]
  Const        r32, "key"
  Const        r33, "nation"
  Const        r34, "key"
  Const        r35, "o_year"
  // from l in lineitem
  MakeMap      r36, 0, r0
  Const        r37, []
  IterPrep     r39, r5
  Len          r40, r39
  Const        r41, 0
L16:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L0
  Index        r44, r39, r41
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r45, r2
  Len          r46, r45
  Const        r47, 0
L15:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L1
  Index        r50, r45, r47
  Const        r51, "p_partkey"
  Index        r52, r50, r51
  Const        r53, "l_partkey"
  Index        r54, r44, r53
  Equal        r55, r52, r54
  JumpIfFalse  r55, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r56, r1
  Len          r57, r56
  Const        r58, 0
L14:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L2
  Index        r61, r56, r58
  Const        r62, "s_suppkey"
  Index        r63, r61, r62
  Const        r64, "l_suppkey"
  Index        r65, r44, r64
  Equal        r66, r63, r65
  JumpIfFalse  r66, L3
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r67, r3
  Len          r68, r67
  Const        r69, 0
L13:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L3
  Index        r72, r67, r69
  Const        r73, "ps_partkey"
  Index        r74, r72, r73
  Const        r75, "l_partkey"
  Index        r76, r44, r75
  Equal        r77, r74, r76
  Const        r78, "ps_suppkey"
  Index        r79, r72, r78
  Const        r80, "l_suppkey"
  Index        r81, r44, r80
  Equal        r82, r79, r81
  Move         r83, r77
  JumpIfFalse  r83, L4
  Move         r83, r82
L4:
  JumpIfFalse  r83, L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r84, r4
  Len          r85, r84
  Const        r86, 0
L12:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L5
  Index        r89, r84, r86
  Const        r90, "o_orderkey"
  Index        r91, r89, r90
  Const        r92, "l_orderkey"
  Index        r93, r44, r92
  Equal        r94, r91, r93
  JumpIfFalse  r94, L6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r95, r0
  Len          r96, r95
  Const        r97, 0
L11:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L6
  Index        r100, r95, r97
  Const        r101, "n_nationkey"
  Index        r102, r100, r101
  Const        r103, "s_nationkey"
  Index        r104, r61, r103
  Equal        r105, r102, r104
  JumpIfFalse  r105, L7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r106, "p_name"
  Index        r107, r50, r106
  Const        r108, 0
  Const        r109, 5
  Slice        r110, r107, r108, r109
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Const        r111, "o_orderdate"
  Index        r112, r89, r111
  LessEq       r113, r7, r112
  Const        r114, "o_orderdate"
  Index        r115, r89, r114
  LessEq       r116, r115, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r118, r110, r6
  JumpIfFalse  r118, L8
L8:
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Move         r119, r113
  JumpIfFalse  r119, L9
  Move         r119, r116
L9:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r119, L7
  // from l in lineitem
  Const        r120, "l"
  Move         r121, r44
  Const        r122, "p"
  Move         r123, r50
  Const        r124, "s"
  Move         r125, r61
  Const        r126, "ps"
  Move         r127, r72
  Const        r128, "o"
  Move         r129, r89
  Const        r130, "n"
  Move         r131, r100
  MakeMap      r132, 6, r120
  // nation: n.n_name,
  Const        r133, "nation"
  Const        r134, "n_name"
  Index        r135, r100, r134
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r136, "o_year"
  Const        r137, "o_orderdate"
  Index        r138, r89, r137
  Const        r139, 0
  Const        r140, 4
  Slice        r141, r138, r139, r140
  Cast         r142, r141, int
  // nation: n.n_name,
  Move         r143, r133
  Move         r144, r135
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r145, r136
  Move         r146, r142
  // group by {
  MakeMap      r147, 2, r143
  Str          r148, r147
  In           r149, r148, r36
  JumpIfTrue   r149, L10
  // from l in lineitem
  Const        r150, []
  Const        r151, "__group__"
  Const        r152, true
  Const        r153, "key"
  // group by {
  Move         r154, r147
  // from l in lineitem
  Const        r155, "items"
  Move         r156, r150
  Const        r157, "count"
  Const        r158, 0
  Move         r159, r151
  Move         r160, r152
  Move         r161, r153
  Move         r162, r154
  Move         r163, r155
  Move         r164, r156
  Move         r165, r157
  Move         r166, r158
  MakeMap      r167, 4, r159
  SetIndex     r36, r148, r167
  Append       r37, r37, r167
L10:
  Const        r169, "items"
  Index        r170, r36, r148
  Index        r171, r170, r169
  Append       r172, r171, r132
  SetIndex     r170, r169, r172
  Const        r173, "count"
  Index        r174, r170, r173
  Const        r175, 1
  AddInt       r176, r174, r175
  SetIndex     r170, r173, r176
L7:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r177, 1
  AddInt       r97, r97, r177
  Jump         L11
L6:
  // join o in orders on o.o_orderkey == l.l_orderkey
  Const        r178, 1
  AddInt       r86, r86, r178
  Jump         L12
L5:
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  Const        r179, 1
  AddInt       r69, r69, r179
  Jump         L13
L3:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Const        r180, 1
  AddInt       r58, r58, r180
  Jump         L14
L2:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r181, 1
  AddInt       r47, r47, r181
  Jump         L15
L1:
  // from l in lineitem
  Const        r182, 1
  AddInt       r41, r41, r182
  Jump         L16
L0:
  Const        r183, 0
  Len          r185, r37
L20:
  LessInt      r186, r183, r185
  JumpIfFalse  r186, L17
  Index        r188, r37, r183
  // nation: g.key.nation,
  Const        r189, "nation"
  Const        r190, "key"
  Index        r191, r188, r190
  Const        r192, "nation"
  Index        r193, r191, r192
  // o_year: str(g.key.o_year),
  Const        r194, "o_year"
  Const        r195, "key"
  Index        r196, r188, r195
  Const        r197, "o_year"
  Index        r198, r196, r197
  Str          r199, r198
  // profit:
  Const        r200, "profit"
  // from x in g
  Const        r201, []
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r202, "l"
  Const        r203, "l_extendedprice"
  Const        r204, "l"
  Const        r205, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r206, "ps"
  Const        r207, "ps_supplycost"
  Const        r208, "l"
  Const        r209, "l_quantity"
  // from x in g
  IterPrep     r210, r188
  Len          r211, r210
  Const        r212, 0
L19:
  LessInt      r214, r212, r211
  JumpIfFalse  r214, L18
  Index        r216, r210, r212
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r217, "l"
  Index        r218, r216, r217
  Const        r219, "l_extendedprice"
  Index        r220, r218, r219
  Const        r221, 1
  Const        r222, "l"
  Index        r223, r216, r222
  Const        r224, "l_discount"
  Index        r225, r223, r224
  Sub          r226, r221, r225
  Mul          r227, r220, r226
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r228, "ps"
  Index        r229, r216, r228
  Const        r230, "ps_supplycost"
  Index        r231, r229, r230
  Const        r232, "l"
  Index        r233, r216, r232
  Const        r234, "l_quantity"
  Index        r235, r233, r234
  Mul          r236, r231, r235
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r237, r227, r236
  // from x in g
  Append       r201, r201, r237
  Const        r239, 1
  AddInt       r212, r212, r239
  Jump         L19
L18:
  // sum(
  Sum          r240, r201
  // nation: g.key.nation,
  Move         r241, r189
  Move         r242, r193
  // o_year: str(g.key.o_year),
  Move         r243, r194
  Move         r244, r199
  // profit:
  Move         r245, r200
  Move         r246, r240
  // select {
  MakeMap      r247, 3, r241
  // sort by [ g.key.nation, -g.key.o_year ]
  Const        r248, "key"
  Index        r249, r188, r248
  Const        r250, "nation"
  Index        r252, r249, r250
  Const        r253, "key"
  Index        r254, r188, r253
  Const        r255, "o_year"
  Index        r256, r254, r255
  Neg          r258, r256
  MakeList     r260, 2, r252
  // from l in lineitem
  Move         r261, r247
  MakeList     r262, 2, r260
  Append       r9, r9, r262
  Const        r264, 1
  AddInt       r183, r183, r264
  Jump         L20
L17:
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r9, r9
  // print json(result)
  JSON         r9
  // let revenue = 1000.0 * 0.9   // 900
  Const        r267, 1000
  Const        r268, 0.9
  Const        r269, 900
  // let cost = 5 * 10.0          // 50
  Const        r270, 5
  Const        r271, 10
  Const        r272, 50
  // nation: "BRAZIL",
  Const        r273, "nation"
  Const        r274, "BRAZIL"
  // o_year: "1995",
  Const        r275, "o_year"
  Const        r276, "1995"
  // profit: revenue - cost   // 850
  Const        r277, "profit"
  Const        r278, 850
  // nation: "BRAZIL",
  Move         r279, r273
  Move         r280, r274
  // o_year: "1995",
  Move         r281, r275
  Move         r282, r276
  // profit: revenue - cost   // 850
  Move         r283, r277
  Move         r284, r278
  // {
  MakeMap      r286, 3, r279
  // expect result == [
  MakeList     r287, 1, r286
  Equal        r288, r9, r287
  Expect       r288
  Return       r0
