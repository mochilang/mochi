func main (regs=258)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r4, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r6, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r8, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r10, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r12, "green"
  // let start_date = "1995-01-01"
  Const        r14, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r16, "1996-12-31"
  // from l in lineitem
  MakeMap      r19, 0, r0
  IterPrep     r21, r10
  Len          r22, r21
  Const        r23, 0
  Less         r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r27, r4
  Len          r28, r27
  Const        r29, 0
  Less         r30, r29, r28
  JumpIfFalse  r30, L0
L10:
  Index        r31, r27, r29
  Const        r33, "p_partkey"
  Index        r34, r31, r33
  Const        r35, "l_partkey"
  Index        r36, r25, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L0
L9:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
  Less         r41, r40, r39
  JumpIfFalse  r41, L0
  Index        r42, r38, r40
  Const        r44, "s_suppkey"
  Index        r45, r42, r44
  Const        r46, "l_suppkey"
  Index        r47, r25, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L0
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r49, r6
L8:
  Len          r50, r49
  Const        r51, 0
  Less         r52, r51, r50
  JumpIfFalse  r52, L0
  Index        r53, r49, r51
  Const        r55, "ps_partkey"
  Index        r56, r53, r55
  Const        r57, "l_partkey"
  Index        r58, r25, r57
  Equal        r59, r56, r58
  Const        r60, "ps_suppkey"
  Index        r61, r53, r60
  Const        r62, "l_suppkey"
L7:
  Index        r63, r25, r62
  Equal        r64, r61, r63
  JumpIfFalse  r59, L1
  JumpIfFalse  r64, L0
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r66, r8
  Len          r67, r66
  Const        r68, 0
  Less         r69, r68, r67
  JumpIfFalse  r69, L0
  Index        r70, r66, r68
  Const        r72, "o_orderkey"
  Index        r73, r70, r72
  Const        r74, "l_orderkey"
  Index        r75, r25, r74
  Equal        r76, r73, r75
  JumpIfFalse  r76, L0
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r77, r1
L1:
  Len          r78, r77
  Const        r79, 0
  Less         r80, r79, r78
  JumpIfFalse  r80, L0
L6:
  Index        r81, r77, r79
  Const        r83, "n_nationkey"
  Index        r84, r81, r83
  Const        r85, "s_nationkey"
  Index        r86, r42, r85
  Equal        r87, r84, r86
  JumpIfFalse  r87, L0
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r88, "p_name"
  Index        r89, r31, r88
  Const        r90, 0
  Const        r91, 5
  Slice        r92, r89, r90, r91
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Const        r93, "o_orderdate"
L5:
  Index        r94, r70, r93
  LessEq       r95, r14, r94
  Const        r96, "o_orderdate"
  Index        r97, r70, r96
  LessEq       r98, r97, r16
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r99, r92, r12
  JumpIfFalse  r99, L2
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  JumpIfFalse  r95, L3
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r98, L0
  // from l in lineitem
  Const        r102, "l"
  Move         r103, r25
  Const        r104, "p"
  Move         r105, r31
  Const        r106, "s"
  Move         r107, r42
  Const        r108, "ps"
  Move         r109, r53
  Const        r110, "o"
  Move         r111, r70
  Const        r112, "n"
  Move         r113, r81
  MakeMap      r114, 6, r102
  // nation: n.n_name,
  Const        r115, "nation"
  Const        r116, "n_name"
  Index        r117, r81, r116
L2:
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r118, "o_year"
  Const        r119, "o_orderdate"
  Index        r120, r70, r119
L3:
  Const        r121, 0
  Const        r122, 4
  Slice        r123, r120, r121, r122
  Cast         r124, r123, int
  // nation: n.n_name,
  Move         r125, r115
  Move         r126, r117
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r127, r118
  Move         r128, r124
  // group by {
  MakeMap      r129, 2, r125
  Str          r130, r129
  In           r131, r130, r19
  JumpIfTrue   r131, L4
  // from l in lineitem
  Const        r133, "__group__"
  Const        r134, true
  Const        r135, "key"
  // group by {
  Move         r136, r129
  // from l in lineitem
  MakeMap      r139, 2, r133
  SetIndex     r19, r130, r139
  Const        r141, "items"
  Index        r142, r19, r130
  Index        r143, r142, r141
  Append       r144, r143, r114
  SetIndex     r142, r141, r144
  // join n in nation on n.n_nationkey == s.s_nationkey
  Jump         L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  Jump         L6
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  Jump         L7
  // join s in supplier on s.s_suppkey == l.l_suppkey
  Jump         L8
  // join p in part on p.p_partkey == l.l_partkey
  Jump         L9
  // from l in lineitem
  Jump         L10
  Const        r157, 0
  Len          r158, r140
  Less         r159, r157, r158
  JumpIfFalse  r159, L11
  Index        r160, r140, r157
  // from x in g
  IterPrep     r175, r160
  Len          r176, r175
L4:
  Const        r177, 0
  Less         r178, r177, r176
  JumpIfFalse  r178, L12
L0:
  Jump         L0
  // from l in lineitem
  Jump         L0
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r231, r18
  // print json(result)
  JSON         r231
  // nation: "BRAZIL",
  Const        r242, "nation"
  Const        r243, "BRAZIL"
  // o_year: "1995",
  Const        r244, "o_year"
  Const        r245, "1995"
  // nation: "BRAZIL",
  Move         r248, r242
  Move         r249, r243
  // o_year: "1995",
  Move         r250, r244
  Move         r251, r245
  // {
  MakeMap      r254, 2, r248
  Move         r255, r254
  // expect result == [
  MakeList     r256, 1, r255
  Equal        r257, r231, r256
  Expect       r257
L12:
  Return       r0
