func main (regs=207)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // nation: g.key.nation,
  Const        r15, "key"
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r20, "ps"
  Const        r21, "ps_supplycost"
  Const        r22, "l_quantity"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r24, []
  IterPrep     r25, r5
  Len          r26, r25
  Const        r27, 0
L16:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r30, r25, r27
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, 0
L15:
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r36, r31, r33
  Const        r37, "p_partkey"
  Index        r38, r36, r37
  Const        r39, "l_partkey"
  Index        r40, r30, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r42, r1
  Len          r43, r42
  Const        r44, 0
L14:
  Less         r45, r44, r43
  JumpIfFalse  r45, L2
  Index        r47, r42, r44
  Const        r48, "s_suppkey"
  Index        r49, r47, r48
  Const        r50, "l_suppkey"
  Index        r51, r30, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r53, r3
  Len          r54, r53
  Const        r55, 0
L13:
  Less         r56, r55, r54
  JumpIfFalse  r56, L3
  Index        r58, r53, r55
  Const        r59, "ps_partkey"
  Index        r60, r58, r59
  Index        r61, r30, r39
  Equal        r62, r60, r61
  Const        r63, "ps_suppkey"
  Index        r64, r58, r63
  Index        r65, r30, r50
  Equal        r66, r64, r65
  Move         r67, r62
  JumpIfFalse  r67, L4
  Move         r67, r66
L4:
  JumpIfFalse  r67, L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r68, r4
  Len          r69, r68
  Const        r70, 0
L12:
  Less         r71, r70, r69
  JumpIfFalse  r71, L5
  Index        r73, r68, r70
  Const        r74, "o_orderkey"
  Index        r75, r73, r74
  Const        r76, "l_orderkey"
  Index        r77, r30, r76
  Equal        r78, r75, r77
  JumpIfFalse  r78, L6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r79, r0
  Len          r80, r79
  Const        r81, 0
L11:
  Less         r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r84, r79, r81
  Const        r85, "n_nationkey"
  Index        r86, r84, r85
  Const        r87, "s_nationkey"
  Index        r88, r47, r87
  Equal        r89, r86, r88
  JumpIfFalse  r89, L7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Index        r90, r36, r14
  Const        r91, 0
  Const        r92, 5
  Slice        r93, r90, r91, r92
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Index        r94, r73, r13
  LessEq       r95, r7, r94
  Index        r96, r73, r13
  LessEq       r97, r96, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r99, r93, r6
  JumpIfFalse  r99, L8
L8:
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Move         r100, r95
  JumpIfFalse  r100, L9
  Move         r100, r97
L9:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r100, L7
  // from l in lineitem
  MakeMap      r111, 6, r17
  // nation: n.n_name,
  Const        r112, "nation"
  Index        r113, r84, r11
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r114, "o_year"
  Index        r115, r73, r13
  // group by {
  MakeMap      r121, 2, r112
  Str          r122, r121
  In           r123, r122, r23
  JumpIfTrue   r123, L10
  // from l in lineitem
  Const        r124, []
  Const        r125, "__group__"
  Const        r126, true
  // group by {
  Move         r127, r121
  // from l in lineitem
  Const        r128, "items"
  Move         r129, r124
  MakeMap      r130, 3, r125
  SetIndex     r23, r122, r130
  Append       r24, r24, r130
L10:
  Index        r132, r23, r122
  Index        r133, r132, r128
  Append       r134, r133, r111
  SetIndex     r132, r128, r134
L7:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r135, 1
  AddInt       r81, r81, r135
  Jump         L11
L6:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r70, r70, r135
  Jump         L12
L5:
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  AddInt       r55, r55, r135
  Jump         L13
L3:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r44, r44, r135
  Jump         L14
L2:
  // join p in part on p.p_partkey == l.l_partkey
  Jump         L15
L1:
  // from l in lineitem
  Jump         L16
L0:
  Move         r136, r91
  Len          r137, r24
L20:
  LessInt      r138, r136, r137
  JumpIfFalse  r138, L17
  Index        r140, r24, r136
  // nation: g.key.nation,
  Const        r141, "nation"
  Index        r142, r140, r15
  Index        r143, r142, r10
  // o_year: str(g.key.o_year),
  Const        r144, "o_year"
  Index        r145, r140, r15
  Index        r146, r145, r12
  // from x in g
  Const        r149, []
  IterPrep     r150, r140
  Len          r151, r150
  Move         r152, r91
L19:
  LessInt      r153, r152, r151
  JumpIfFalse  r153, L18
  Index        r155, r150, r152
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Index        r156, r155, r17
  Index        r157, r156, r18
  Index        r158, r155, r17
  Index        r159, r158, r19
  Sub          r160, r135, r159
  Mul          r161, r157, r160
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Index        r162, r155, r20
  Index        r163, r162, r21
  Index        r164, r155, r17
  Index        r165, r164, r22
  Mul          r166, r163, r165
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r167, r161, r166
  // from x in g
  Append       r149, r149, r167
  AddInt       r152, r152, r135
  Jump         L19
L18:
  // select {
  MakeMap      r173, 3, r141
  // sort by [ g.key.nation, -g.key.o_year ]
  Index        r174, r140, r15
  Index        r176, r174, r10
  Index        r177, r140, r15
  MakeList     r182, 2, r176
  // from l in lineitem
  Move         r183, r173
  MakeList     r184, 2, r182
  Append       r9, r9, r184
  AddInt       r136, r136, r135
  Jump         L20
L17:
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r9, r9
  // print json(result)
  JSON         r9
  // nation: "BRAZIL",
  Const        r194, "nation"
  Const        r195, "BRAZIL"
  // o_year: "1995",
  Const        r196, "o_year"
  Const        r197, "1995"
  // profit: revenue - cost   // 850
  Const        r198, "profit"
  Const        r199, 850
  // {
  MakeMap      r204, 3, r194
  // expect result == [
  MakeList     r205, 1, r204
  Equal        r206, r9, r205
  Expect       r206
  Return       r0
