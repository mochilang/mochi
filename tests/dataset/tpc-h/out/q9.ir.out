func main (regs=232)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // nation: g.key.nation,
  Const        r15, "key"
  // profit:
  Const        r16, "profit"
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r20, "ps"
  Const        r21, "ps_supplycost"
  Const        r22, "l_quantity"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r24, []
  IterPrep     r26, r5
  Len          r27, r26
  Const        r28, 0
L15:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r31, r26, r28
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r2
  Len          r33, r32
  Const        r34, 0
L14:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L13:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r48, r43, r45
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L12:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Const        r60, "ps_partkey"
  Index        r61, r59, r60
  Index        r62, r31, r40
  Equal        r63, r61, r62
  Const        r64, "ps_suppkey"
  Index        r65, r59, r64
  Index        r66, r31, r51
  Equal        r67, r65, r66
  Move         r68, r63
  JumpIfFalse  r68, L4
  Move         r68, r67
L4:
  JumpIfFalse  r68, L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r69, r4
  Len          r70, r69
  Const        r71, 0
L11:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L5
  Index        r74, r69, r71
  Const        r75, "o_orderkey"
  Index        r76, r74, r75
  Const        r77, "l_orderkey"
  Index        r78, r31, r77
  Equal        r79, r76, r78
  JumpIfFalse  r79, L6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r80, r0
  Len          r81, r80
  Const        r82, 0
L10:
  LessInt      r83, r82, r81
  JumpIfFalse  r83, L6
  Index        r85, r80, r82
  Const        r86, "n_nationkey"
  Index        r87, r85, r86
  Const        r88, "s_nationkey"
  Index        r89, r48, r88
  Equal        r90, r87, r89
  JumpIfFalse  r90, L7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Index        r91, r37, r14
  Const        r92, 0
  Const        r93, 5
  Slice        r94, r91, r92, r93
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Index        r95, r74, r13
  LessEq       r96, r7, r95
  Index        r97, r74, r13
  LessEq       r98, r97, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r100, r94, r6
  JumpIfFalse  r100, L8
  Move         r100, r96
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  JumpIfFalse  r100, L8
  Move         r100, r98
L8:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r100, L7
  // from l in lineitem
  Const        r101, "l"
  Move         r102, r31
  Const        r103, "p"
  Move         r104, r37
  Const        r105, "s"
  Move         r106, r48
  Const        r107, "ps"
  Move         r108, r59
  Const        r109, "o"
  Move         r110, r74
  Const        r111, "n"
  Move         r112, r85
  MakeMap      r113, 6, r101
  // nation: n.n_name,
  Const        r114, "nation"
  Index        r115, r85, r11
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r116, "o_year"
  Index        r117, r74, r13
  Const        r118, 4
  Slice        r119, r117, r92, r118
  Cast         r120, r119, int
  // nation: n.n_name,
  Move         r121, r114
  Move         r122, r115
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r123, r116
  Move         r124, r120
  // group by {
  MakeMap      r125, 2, r121
  Str          r126, r125
  In           r127, r126, r23
  JumpIfTrue   r127, L9
  // from l in lineitem
  Const        r128, []
  Const        r129, "__group__"
  Const        r130, true
  Const        r131, "key"
  // group by {
  Move         r132, r125
  // from l in lineitem
  Const        r133, "items"
  Move         r134, r128
  Const        r135, "count"
  Const        r136, 0
  Move         r137, r129
  Move         r138, r130
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  Move         r142, r134
  Move         r143, r135
  Move         r144, r136
  MakeMap      r145, 4, r137
  SetIndex     r23, r126, r145
  Append       r24, r24, r145
L9:
  Const        r147, "items"
  Index        r148, r23, r126
  Index        r149, r148, r147
  Append       r150, r149, r113
  SetIndex     r148, r147, r150
  Const        r151, "count"
  Index        r152, r148, r151
  Const        r153, 1
  AddInt       r154, r152, r153
  SetIndex     r148, r151, r154
L7:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r82, r82, r153
  Jump         L10
L6:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r71, r71, r153
  Jump         L11
L5:
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  AddInt       r56, r56, r153
  Jump         L12
L3:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r153
  Jump         L13
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r153
  Jump         L14
L1:
  // from l in lineitem
  AddInt       r28, r28, r153
  Jump         L15
L0:
  Move         r155, r92
  Len          r156, r24
L19:
  LessInt      r157, r155, r156
  JumpIfFalse  r157, L16
  Index        r159, r24, r155
  // nation: g.key.nation,
  Const        r160, "nation"
  Index        r161, r159, r15
  Index        r162, r161, r10
  // o_year: str(g.key.o_year),
  Const        r163, "o_year"
  Index        r164, r159, r15
  Index        r165, r164, r12
  Str          r166, r165
  // profit:
  Const        r167, "profit"
  // from x in g
  Const        r168, []
  IterPrep     r169, r159
  Len          r170, r169
  Move         r171, r92
L18:
  LessInt      r172, r171, r170
  JumpIfFalse  r172, L17
  Index        r174, r169, r171
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Index        r175, r174, r17
  Index        r176, r175, r18
  Index        r177, r174, r17
  Index        r178, r177, r19
  Sub          r179, r153, r178
  Mul          r180, r176, r179
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Index        r181, r174, r20
  Index        r182, r181, r21
  Index        r183, r174, r17
  Index        r184, r183, r22
  Mul          r185, r182, r184
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r186, r180, r185
  // from x in g
  Append       r168, r168, r186
  AddInt       r171, r171, r153
  Jump         L18
L17:
  // sum(
  Sum          r188, r168
  // nation: g.key.nation,
  Move         r189, r160
  Move         r190, r162
  // o_year: str(g.key.o_year),
  Move         r191, r163
  Move         r192, r166
  // profit:
  Move         r193, r167
  Move         r194, r188
  // select {
  MakeMap      r195, 3, r189
  // sort by [ g.key.nation, -g.key.o_year ]
  Index        r196, r159, r15
  Index        r198, r196, r10
  Index        r199, r159, r15
  Index        r200, r199, r12
  Neg          r202, r200
  MakeList     r204, 2, r198
  // from l in lineitem
  Move         r205, r195
  MakeList     r206, 2, r204
  Append       r9, r9, r206
  AddInt       r155, r155, r153
  Jump         L19
L16:
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r9, r9
  // print json(result)
  JSON         r9
  // let revenue = 1000.0 * 0.9   // 900
  Const        r210, 1000
  Const        r211, 0.9
  Const        r212, 900
  // let cost = 5 * 10.0          // 50
  Const        r213, 5
  Const        r214, 10
  Const        r215, 50
  // nation: "BRAZIL",
  Const        r216, "nation"
  Const        r217, "BRAZIL"
  // o_year: "1995",
  Const        r218, "o_year"
  Const        r219, "1995"
  // profit: revenue - cost   // 850
  Const        r220, "profit"
  Const        r221, 850
  // nation: "BRAZIL",
  Move         r222, r216
  Move         r223, r217
  // o_year: "1995",
  Move         r224, r218
  Move         r225, r219
  // profit: revenue - cost   // 850
  Move         r226, r220
  Move         r227, r221
  // {
  MakeMap      r229, 3, r222
  // expect result == [
  MakeList     r230, 1, r229
  Equal        r231, r9, r230
  Expect       r231
  Return       r0
