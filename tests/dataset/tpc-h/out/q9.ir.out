func main (regs=240)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // nation: g.key.nation,
  Const        r15, "key"
  // profit:
  Const        r16, "profit"
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r20, "ps"
  Const        r21, "ps_supplycost"
  Const        r22, "l_quantity"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r5
  Len          r27, r26
  Const        r28, 0
L16:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r30, r26, r28
  Move         r31, r30
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r2
  Len          r33, r32
  Const        r34, 0
L15:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L14:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L13:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "ps_partkey"
  Index        r61, r59, r60
  Index        r62, r31, r40
  Equal        r63, r61, r62
  Const        r64, "ps_suppkey"
  Index        r65, r59, r64
  Index        r66, r31, r51
  Equal        r67, r65, r66
  Move         r68, r63
  JumpIfFalse  r68, L4
  Move         r68, r67
L4:
  JumpIfFalse  r68, L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r69, r4
  Len          r70, r69
  Const        r71, 0
L12:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L5
  Index        r73, r69, r71
  Move         r74, r73
  Const        r75, "o_orderkey"
  Index        r76, r74, r75
  Const        r77, "l_orderkey"
  Index        r78, r31, r77
  Equal        r79, r76, r78
  JumpIfFalse  r79, L6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r80, r0
  Len          r81, r80
  Const        r82, 0
L11:
  LessInt      r83, r82, r81
  JumpIfFalse  r83, L6
  Index        r84, r80, r82
  Move         r85, r84
  Const        r86, "n_nationkey"
  Index        r87, r85, r86
  Const        r88, "s_nationkey"
  Index        r89, r48, r88
  Equal        r90, r87, r89
  JumpIfFalse  r90, L7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Index        r91, r37, r14
  Const        r92, 0
  Const        r93, 5
  Slice        r94, r91, r92, r93
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Index        r95, r74, r13
  LessEq       r96, r7, r95
  Index        r97, r74, r13
  LessEq       r98, r97, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r99, r94, r6
  Move         r100, r99
  JumpIfFalse  r100, L8
  Move         r100, r96
L8:
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Move         r101, r100
  JumpIfFalse  r101, L9
  Move         r101, r98
L9:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r101, L7
  // from l in lineitem
  Move         r102, r31
  Const        r103, "p"
  Move         r104, r37
  Const        r105, "s"
  Move         r106, r48
  Move         r107, r59
  Const        r108, "o"
  Move         r109, r74
  Const        r110, "n"
  Move         r111, r85
  Move         r112, r17
  Move         r113, r102
  Move         r114, r103
  Move         r115, r104
  Move         r116, r105
  Move         r117, r106
  Move         r118, r20
  Move         r119, r107
  Move         r120, r108
  Move         r121, r109
  Move         r122, r110
  Move         r123, r111
  MakeMap      r124, 6, r112
  // nation: n.n_name,
  Const        r125, "nation"
  Index        r126, r85, r11
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r127, "o_year"
  Index        r128, r74, r13
  Const        r129, 4
  Slice        r130, r128, r92, r129
  Cast         r131, r130, int
  // nation: n.n_name,
  Move         r132, r125
  Move         r133, r126
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r134, r127
  Move         r135, r131
  // group by {
  MakeMap      r136, 2, r132
  Str          r137, r136
  In           r138, r137, r23
  JumpIfTrue   r138, L10
  // from l in lineitem
  Const        r139, []
  Const        r140, "__group__"
  Const        r141, true
  // group by {
  Move         r142, r136
  // from l in lineitem
  Const        r143, "items"
  Move         r144, r139
  Const        r145, "count"
  Move         r146, r140
  Move         r147, r141
  Move         r148, r15
  Move         r149, r142
  Move         r150, r143
  Move         r151, r144
  Move         r152, r145
  Move         r153, r92
  MakeMap      r154, 4, r146
  SetIndex     r23, r137, r154
  Append       r155, r24, r154
  Move         r24, r155
L10:
  Index        r156, r23, r137
  Index        r157, r156, r143
  Append       r158, r157, r124
  SetIndex     r156, r143, r158
  Index        r159, r156, r145
  Const        r160, 1
  AddInt       r161, r159, r160
  SetIndex     r156, r145, r161
L7:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r82, r82, r160
  Jump         L11
L6:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r71, r71, r160
  Jump         L12
L5:
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  AddInt       r56, r56, r160
  Jump         L13
L3:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r160
  Jump         L14
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r160
  Jump         L15
L1:
  // from l in lineitem
  AddInt       r28, r28, r160
  Jump         L16
L0:
  Move         r162, r92
  Len          r163, r24
L20:
  LessInt      r164, r162, r163
  JumpIfFalse  r164, L17
  Index        r165, r24, r162
  Move         r166, r165
  // nation: g.key.nation,
  Const        r167, "nation"
  Index        r168, r166, r15
  Index        r169, r168, r10
  // o_year: str(g.key.o_year),
  Const        r170, "o_year"
  Index        r171, r166, r15
  Index        r172, r171, r12
  Str          r173, r172
  // profit:
  Const        r174, "profit"
  // from x in g
  Const        r175, []
  IterPrep     r176, r166
  Len          r177, r176
  Move         r178, r92
L19:
  LessInt      r179, r178, r177
  JumpIfFalse  r179, L18
  Index        r180, r176, r178
  Move         r181, r180
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Index        r182, r181, r17
  Index        r183, r182, r18
  Index        r184, r181, r17
  Index        r185, r184, r19
  Sub          r186, r160, r185
  Mul          r187, r183, r186
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Index        r188, r181, r20
  Index        r189, r188, r21
  Index        r190, r181, r17
  Index        r191, r190, r22
  Mul          r192, r189, r191
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r193, r187, r192
  // from x in g
  Append       r194, r175, r193
  Move         r175, r194
  AddInt       r178, r178, r160
  Jump         L19
L18:
  // sum(
  Sum          r195, r175
  // nation: g.key.nation,
  Move         r196, r167
  Move         r197, r169
  // o_year: str(g.key.o_year),
  Move         r198, r170
  Move         r199, r173
  // profit:
  Move         r200, r174
  Move         r201, r195
  // select {
  MakeMap      r202, 3, r196
  // sort by [ g.key.nation, -g.key.o_year ]
  Index        r203, r166, r15
  Index        r204, r203, r10
  Move         r205, r204
  Index        r206, r166, r15
  Index        r207, r206, r12
  Neg          r208, r207
  Move         r209, r208
  MakeList     r210, 2, r205
  Move         r211, r210
  // from l in lineitem
  Move         r212, r202
  MakeList     r213, 2, r211
  Append       r214, r9, r213
  Move         r9, r214
  AddInt       r162, r162, r160
  Jump         L20
L17:
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r215, r9
  // from l in lineitem
  Move         r9, r215
  // print json(result)
  JSON         r9
  // let revenue = 1000.0 * 0.9   // 900
  Const        r217, 1000
  Const        r218, 0.9
  Const        r219, 900
  // let cost = 5 * 10.0          // 50
  Const        r220, 10
  Const        r221, 50
  // nation: "BRAZIL",
  Const        r222, "nation"
  Const        r223, "BRAZIL"
  // o_year: "1995",
  Const        r224, "o_year"
  Const        r225, "1995"
  // profit: revenue - cost   // 850
  Const        r226, "profit"
  Const        r227, 900
  Const        r228, 50
  Const        r229, 850
  // nation: "BRAZIL",
  Move         r230, r222
  Move         r231, r223
  // o_year: "1995",
  Move         r232, r224
  Move         r233, r225
  // profit: revenue - cost   // 850
  Move         r234, r226
  Move         r235, r229
  // {
  MakeMap      r236, 3, r230
  Move         r237, r236
  // expect result == [
  MakeList     r238, 1, r237
  Equal        r239, r9, r238
  Expect       r239
  Return       r0
