func main (regs=224)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}, {"n_name": "CANADA", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 2, "s_suppkey": 200}]
  // let part = [
  Const        r2, [{"p_name": "green metal box", "p_partkey": 1000}, {"p_name": "red plastic crate", "p_partkey": 2000}]
  // let partsupp = [
  Const        r3, [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 8}]
  // let orders = [
  Const        r4, [{"o_orderdate": "1995-02-10", "o_orderkey": 1}, {"o_orderdate": "1997-01-01", "o_orderkey": 2}]
  // let lineitem = [
  Const        r5, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1, "l_partkey": 1000, "l_quantity": 5, "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_orderkey": 2, "l_partkey": 1000, "l_quantity": 10, "l_suppkey": 200}]
  // let prefix = "green"
  Const        r6, "green"
  // let start_date = "1995-01-01"
  Const        r7, "1995-01-01"
  // let end_date = "1996-12-31"
  Const        r8, "1996-12-31"
  // from l in lineitem
  Const        r9, []
  // nation: n.n_name,
  Const        r10, "nation"
  Const        r11, "n_name"
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r12, "o_year"
  Const        r13, "o_orderdate"
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Const        r14, "p_name"
  // nation: g.key.nation,
  Const        r15, "key"
  // profit:
  Const        r16, "profit"
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Const        r17, "l"
  Const        r18, "l_extendedprice"
  Const        r19, "l_discount"
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Const        r20, "ps"
  Const        r21, "ps_supplycost"
  Const        r22, "l_quantity"
  // from l in lineitem
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r5
  Len          r27, r26
  Const        r28, 0
L15:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r31, r26, r28
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r32, r2
  Len          r33, r32
  Const        r34, 0
L14:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  Const        r38, "p_partkey"
  Index        r39, r37, r38
  Const        r40, "l_partkey"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in supplier on s.s_suppkey == l.l_suppkey
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L13:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r48, r43, r45
  Const        r49, "s_suppkey"
  Index        r50, r48, r49
  Const        r51, "l_suppkey"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
L12:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Const        r60, "ps_partkey"
  Index        r61, r59, r60
  Index        r62, r31, r40
  Equal        r63, r61, r62
  Const        r64, "ps_suppkey"
  Index        r65, r59, r64
  Index        r66, r31, r51
  Equal        r67, r65, r66
  JumpIfFalse  r63, L4
  Move         r63, r67
L4:
  JumpIfFalse  r63, L5
  // join o in orders on o.o_orderkey == l.l_orderkey
  IterPrep     r68, r4
  Len          r69, r68
  Const        r70, 0
L11:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L5
  Index        r73, r68, r70
  Const        r74, "o_orderkey"
  Index        r75, r73, r74
  Const        r76, "l_orderkey"
  Index        r77, r31, r76
  Equal        r78, r75, r77
  JumpIfFalse  r78, L6
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r79, r0
  Len          r80, r79
  Const        r81, 0
L10:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r84, r79, r81
  Const        r85, "n_nationkey"
  Index        r86, r84, r85
  Const        r87, "s_nationkey"
  Index        r88, r48, r87
  Equal        r89, r86, r88
  JumpIfFalse  r89, L7
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Index        r90, r37, r14
  Const        r91, 0
  Const        r92, 5
  Slice        r93, r90, r91, r92
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  Index        r94, r73, r13
  LessEq       r95, r7, r94
  Index        r96, r73, r13
  LessEq       r97, r96, r8
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  Equal        r98, r93, r6
  JumpIfFalse  r98, L8
  Move         r98, r95
  // o.o_orderdate >= start_date && o.o_orderdate <= end_date
  JumpIfFalse  r98, L8
  Move         r98, r97
L8:
  // where substring(p.p_name, 0, len(prefix)) == prefix &&
  JumpIfFalse  r98, L7
  // from l in lineitem
  Move         r99, r31
  Const        r100, "p"
  Move         r101, r37
  Const        r102, "s"
  Move         r103, r48
  Move         r104, r59
  Const        r105, "o"
  Move         r106, r73
  Const        r107, "n"
  Move         r108, r84
  MakeMap      r109, 6, r17
  // nation: n.n_name,
  Const        r110, "nation"
  Index        r111, r84, r11
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Const        r112, "o_year"
  Index        r113, r73, r13
  Const        r114, 4
  Slice        r115, r113, r91, r114
  Cast         r116, r115, int
  // nation: n.n_name,
  Move         r117, r110
  Move         r118, r111
  // o_year: substring(o.o_orderdate, 0, 4) as int
  Move         r119, r112
  Move         r120, r116
  // group by {
  MakeMap      r121, 2, r117
  Str          r122, r121
  In           r123, r122, r23
  JumpIfTrue   r123, L9
  // from l in lineitem
  Const        r124, "__group__"
  Const        r125, true
  // group by {
  Move         r126, r121
  // from l in lineitem
  Const        r127, "items"
  Move         r128, r25
  Const        r129, "count"
  Move         r130, r124
  Move         r131, r125
  Move         r132, r15
  Move         r133, r126
  Move         r134, r127
  Move         r135, r128
  Move         r136, r129
  Move         r137, r91
  MakeMap      r138, 4, r130
  SetIndex     r23, r122, r138
  Append       r24, r24, r138
L9:
  Index        r140, r23, r122
  Index        r141, r140, r127
  Append       r142, r141, r109
  SetIndex     r140, r127, r142
  Index        r143, r140, r129
  Const        r144, 1
  AddInt       r145, r143, r144
  SetIndex     r140, r129, r145
L7:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r81, r81, r144
  Jump         L10
L6:
  // join o in orders on o.o_orderkey == l.l_orderkey
  AddInt       r70, r70, r144
  Jump         L11
L5:
  // join ps in partsupp on ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
  AddInt       r56, r56, r144
  Jump         L12
L3:
  // join s in supplier on s.s_suppkey == l.l_suppkey
  AddInt       r45, r45, r144
  Jump         L13
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r34, r34, r144
  Jump         L14
L1:
  // from l in lineitem
  AddInt       r28, r28, r144
  Jump         L15
L0:
  Move         r146, r91
  Len          r147, r24
L19:
  LessInt      r148, r146, r147
  JumpIfFalse  r148, L16
  Index        r150, r24, r146
  // nation: g.key.nation,
  Const        r151, "nation"
  Index        r152, r150, r15
  Index        r153, r152, r10
  // o_year: str(g.key.o_year),
  Const        r154, "o_year"
  Index        r155, r150, r15
  Index        r156, r155, r12
  Str          r157, r156
  // profit:
  Const        r158, "profit"
  // from x in g
  Const        r159, []
  IterPrep     r160, r150
  Len          r161, r160
  Move         r162, r91
L18:
  LessInt      r163, r162, r161
  JumpIfFalse  r163, L17
  Index        r165, r160, r162
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Index        r166, r165, r17
  Index        r167, r166, r18
  Index        r168, r165, r17
  Index        r169, r168, r19
  Sub          r170, r144, r169
  Mul          r171, r167, r170
  // (x.ps.ps_supplycost * x.l.l_quantity)
  Index        r172, r165, r20
  Index        r173, r172, r21
  Index        r174, r165, r17
  Index        r175, r174, r22
  Mul          r176, r173, r175
  // select (x.l.l_extendedprice * (1 - x.l.l_discount)) -
  Sub          r177, r171, r176
  // from x in g
  Append       r159, r159, r177
  AddInt       r162, r162, r144
  Jump         L18
L17:
  // sum(
  Sum          r179, r159
  // nation: g.key.nation,
  Move         r180, r151
  Move         r181, r153
  // o_year: str(g.key.o_year),
  Move         r182, r154
  Move         r183, r157
  // profit:
  Move         r184, r158
  Move         r185, r179
  // select {
  MakeMap      r186, 3, r180
  // sort by [ g.key.nation, -g.key.o_year ]
  Index        r187, r150, r15
  Index        r189, r187, r10
  Index        r190, r150, r15
  Index        r191, r190, r12
  Neg          r193, r191
  MakeList     r195, 2, r189
  // from l in lineitem
  Move         r196, r186
  MakeList     r197, 2, r195
  Append       r9, r9, r197
  AddInt       r146, r146, r144
  Jump         L19
L16:
  // sort by [ g.key.nation, -g.key.o_year ]
  Sort         r9, r9
  // print json(result)
  JSON         r9
  // let revenue = 1000.0 * 0.9   // 900
  Const        r201, 1000
  Const        r202, 0.9
  Const        r203, 900
  // let cost = 5 * 10.0          // 50
  Const        r204, 10
  Const        r205, 50
  // nation: "BRAZIL",
  Const        r206, "nation"
  Const        r207, "BRAZIL"
  // o_year: "1995",
  Const        r208, "o_year"
  Const        r209, "1995"
  // profit: revenue - cost   // 850
  Const        r210, "profit"
  Const        r211, 900
  Const        r212, 50
  Const        r213, 850
  // nation: "BRAZIL",
  Move         r214, r206
  Move         r215, r207
  // o_year: "1995",
  Move         r216, r208
  Move         r217, r209
  // profit: revenue - cost   // 850
  Move         r218, r210
  Move         r219, r213
  // {
  MakeMap      r221, 3, r214
  // expect result == [
  MakeList     r222, 1, r221
  Equal        r223, r9, r222
  Expect       r223
  Return       r0
