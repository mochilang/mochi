func main (regs=126)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r2, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r3, "GERMANY"
  // from ps in partsupp
  Const        r4, []
  // where n.n_name == target_nation
  Const        r5, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r6, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r7, "value"
  Const        r8, "ps_supplycost"
  // from ps in partsupp
  IterPrep     r10, r2
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L6:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r16, r10, r12
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "s_suppkey"
  Const        r20, "ps_suppkey"
  Move         r21, r13
L5:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r24, r17, r21
  Index        r25, r24, r19
  Index        r26, r16, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, "n_nationkey"
  Const        r31, "s_nationkey"
  Move         r32, r13
L4:
  LessInt      r33, r32, r29
  JumpIfFalse  r33, L2
  Index        r35, r28, r32
  Index        r36, r35, r30
  Index        r37, r24, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // where n.n_name == target_nation
  Index        r39, r35, r5
  Equal        r40, r39, r3
  JumpIfFalse  r40, L3
  // ps_partkey: ps.ps_partkey,
  Const        r41, "ps_partkey"
  Index        r42, r16, r6
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Index        r44, r16, r8
  // select {
  MakeMap      r49, 2, r41
  // from ps in partsupp
  Append       r4, r4, r49
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r51, 1
  Add          r32, r32, r51
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r12, r12, r51
  Jump         L6
L0:
  // from x in filtered
  Const        r52, []
  // ps_partkey: g.key,
  Const        r53, "key"
  // from x in filtered
  IterPrep     r54, r4
  Len          r55, r54
  Const        r56, 0
  MakeMap      r57, 0, r0
  Const        r58, []
L9:
  LessInt      r59, r56, r55
  JumpIfFalse  r59, L7
  Index        r60, r54, r56
  // group by x.ps_partkey into g
  Index        r62, r60, r6
  Str          r63, r62
  In           r64, r63, r57
  JumpIfTrue   r64, L8
  // from x in filtered
  Const        r65, []
  Const        r66, "__group__"
  Const        r67, true
  // group by x.ps_partkey into g
  Move         r68, r62
  // from x in filtered
  Const        r69, "items"
  Move         r70, r65
  MakeMap      r71, 3, r66
  SetIndex     r57, r63, r71
  Append       r58, r58, r71
L8:
  Index        r73, r57, r63
  Index        r74, r73, r69
  Append       r75, r74, r60
  SetIndex     r73, r69, r75
  AddInt       r56, r56, r51
  Jump         L9
L7:
  Move         r76, r13
  Len          r77, r58
L13:
  LessInt      r78, r76, r77
  JumpIfFalse  r78, L10
  Index        r80, r58, r76
  // ps_partkey: g.key,
  Const        r81, "ps_partkey"
  Index        r82, r80, r53
  // value: sum(from r in g select r.value)
  Const        r83, "value"
  Const        r84, []
  IterPrep     r85, r80
  Len          r86, r85
  Move         r87, r13
L12:
  LessInt      r88, r87, r86
  JumpIfFalse  r88, L11
  Index        r90, r85, r87
  Index        r91, r90, r7
  Append       r84, r84, r91
  AddInt       r87, r87, r51
  Jump         L12
L11:
  // select {
  MakeMap      r96, 2, r81
  // from x in filtered
  Append       r52, r52, r96
  AddInt       r76, r76, r51
  Jump         L13
L10:
  // sum(from x in filtered select x.value)
  Const        r98, []
  IterPrep     r99, r4
  Len          r100, r99
  Move         r101, r13
L15:
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L14
  Index        r61, r99, r101
  Index        r104, r61, r7
  Append       r98, r98, r104
  AddInt       r101, r101, r51
  Jump         L15
L14:
  Sum          r106, r98
  // let threshold = total * 0.0001
  Const        r107, 0.0001
  MulFloat     r108, r106, r107
  // from x in grouped
  Const        r109, []
  IterPrep     r110, r52
  Len          r111, r110
  Move         r112, r13
L18:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L16
  Index        r61, r110, r112
  // where x.value > threshold
  Index        r115, r61, r7
  LessFloat    r116, r108, r115
  JumpIfFalse  r116, L17
  // sort by -x.value
  Index        r117, r61, r7
  Neg          r119, r117
  // from x in grouped
  Move         r120, r61
  MakeList     r121, 2, r119
  Append       r109, r109, r121
L17:
  AddInt       r112, r112, r51
  Jump         L18
L16:
  // sort by -x.value
  Sort         r109, r109
  // json(result)
  JSON         r109
  // expect result == [
  Const        r124, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r125, r109, r124
  Expect       r125
  Return       r0
