func main (regs=195)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r4, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r6, "GERMANY"
  // from ps in partsupp
  Const        r8, []
  IterPrep     r9, r4
  Len          r10, r9
  Const        r11, 0
  Less         r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
L6:
  Move         r14, r13
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r15, r2
  Len          r16, r15
  Const        r17, 0
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r19, r15, r17
L5:
  Const        r21, "s_suppkey"
  Index        r22, r19, r21
  Const        r23, "ps_suppkey"
  Index        r24, r14, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
  Less         r29, r28, r27
  JumpIfFalse  r29, L2
  Index        r30, r26, r28
  Const        r32, "n_nationkey"
L4:
  Index        r33, r30, r32
  Const        r34, "s_nationkey"
  Index        r35, r19, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L3
  // where n.n_name == target_nation
  Const        r37, "n_name"
  Index        r38, r30, r37
  Equal        r39, r38, r6
  JumpIfFalse  r39, L3
  // ps_partkey: ps.ps_partkey,
  Const        r40, "ps_partkey"
  Const        r41, "ps_partkey"
  Index        r42, r14, r41
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Const        r44, "ps_supplycost"
  Index        r45, r14, r44
  Const        r46, "ps_availqty"
  Index        r47, r14, r46
  Mul          r48, r45, r47
  // ps_partkey: ps.ps_partkey,
  Move         r49, r40
  Move         r50, r42
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r51, r43
  Move         r52, r48
  // select {
  MakeMap      r53, 2, r49
  // from ps in partsupp
  Append       r54, r8, r53
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r55, 1
  Add          r56, r28, r55
  Jump         L4
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Const        r57, 1
  Add          r58, r17, r57
  Jump         L5
L3:
  // from ps in partsupp
  Const        r59, 1
  Add          r60, r11, r59
  Jump         L6
  // from x in filtered
  Const        r62, []
L2:
  IterPrep     r63, r54
  Len          r64, r63
  Const        r65, 0
  MakeMap      r66, 0, r0
L1:
  Const        r67, []
  Less         r68, r65, r64
  JumpIfFalse  r68, L7
  Index        r69, r63, r65
L0:
  Move         r70, r69
  // group by x.ps_partkey into g
  Const        r71, "ps_partkey"
  Index        r72, r70, r71
  Str          r73, r72
  In           r74, r73, r66
  JumpIfTrue   r74, L8
  // from x in filtered
  Const        r75, []
L9:
  Const        r76, "__group__"
  Const        r77, true
  Const        r78, "key"
  // group by x.ps_partkey into g
  Move         r79, r72
  // from x in filtered
  Const        r80, "items"
  Move         r81, r75
  MakeMap      r82, 3, r76
  SetIndex     r66, r73, r82
  Append       r83, r67, r82
  Const        r84, "items"
  Index        r85, r66, r73
  Index        r86, r85, r84
  Append       r87, r86, r69
  SetIndex     r85, r84, r87
  Const        r88, 1
  Add          r89, r65, r88
  Jump         L9
  Const        r90, 0
  Len          r91, r83
  Less         r92, r90, r91
L8:
  JumpIfFalse  r92, L10
  Index        r93, r83, r90
  // ps_partkey: g.key,
  Const        r95, "ps_partkey"
  Const        r96, "key"
  Index        r97, r93, r96
  // value: sum(from r in g select r.value)
  Const        r98, "value"
  Const        r99, []
  IterPrep     r100, r93
  Len          r101, r100
L7:
  Const        r102, 0
  Less         r103, r102, r101
L13:
  JumpIfFalse  r103, L11
  Index        r104, r100, r102
  Const        r106, "value"
  Index        r107, r104, r106
  Append       r108, r99, r107
  Const        r109, 1
  Add          r110, r102, r109
  Jump         L12
  Sum          r111, r108
  // ps_partkey: g.key,
  Move         r112, r95
  Move         r113, r97
  // value: sum(from r in g select r.value)
  Move         r114, r98
L12:
  Move         r115, r111
  // select {
  MakeMap      r116, 2, r112
  // from x in filtered
  Append       r117, r62, r116
  Const        r118, 1
  Add          r119, r90, r118
  Jump         L13
  // sum(from x in filtered select x.value)
  Const        r121, []
  IterPrep     r122, r54
  Len          r123, r122
  Const        r124, 0
  Less         r125, r124, r123
  JumpIfFalse  r125, L14
L11:
  Index        r126, r122, r124
  Const        r127, "value"
  Index        r128, r126, r127
  Append       r129, r121, r128
  Const        r130, 1
  Add          r131, r124, r130
  Jump         L15
  Sum          r132, r129
  // let threshold = total * 0.0001
  Const        r134, 0.0001
  MulFloat     r135, r132, r134
  // from x in grouped
  Const        r137, []
  IterPrep     r138, r117
L10:
  Len          r139, r138
  Const        r140, 0
  Less         r141, r140, r139
  JumpIfFalse  r141, L16
  Index        r142, r138, r140
L15:
  // where x.value > threshold
  Const        r143, "value"
  Index        r144, r142, r143
  LessFloat    r145, r135, r144
  JumpIfFalse  r145, L17
  // sort by -x.value
  Const        r146, "value"
  Index        r147, r142, r146
  Neg          r148, r147
  Move         r149, r148
  // from x in grouped
  Move         r150, r142
  MakeList     r151, 2, r149
  Append       r152, r137, r151
  Const        r153, 1
L14:
  Add          r154, r140, r153
  Jump         L18
  // sort by -x.value
  Sort         r155, r152
  // json(result)
  JSON         r156
  // expect result == [
  Const        r157, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r158, r155, r157
  Expect       r158
  Return       r0
