func main (regs=159)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r4, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r6, "GERMANY"
  // from ps in partsupp
  IterPrep     r9, r4
  Len          r10, r9
  Const        r11, 0
  Less         r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
L5:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r15, r2
  Len          r16, r15
  Const        r17, 0
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r19, r15, r17
  Const        r21, "s_suppkey"
L4:
  Index        r22, r19, r21
  Const        r23, "ps_suppkey"
  Index        r24, r13, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
  Less         r29, r28, r27
  JumpIfFalse  r29, L2
  Index        r30, r26, r28
  Const        r32, "n_nationkey"
  Index        r33, r30, r32
L3:
  Const        r34, "s_nationkey"
  Index        r35, r19, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L2
  // where n.n_name == target_nation
  Const        r37, "n_name"
  Index        r38, r30, r37
  Equal        r39, r38, r6
  JumpIfFalse  r39, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  Jump         L3
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Jump         L4
  // from ps in partsupp
  Jump         L5
  // from x in filtered
  IterPrep     r63, r54
  Len          r64, r63
  Const        r65, 0
L2:
  MakeMap      r66, 0, r0
L1:
  Less         r68, r65, r64
  JumpIfFalse  r68, L6
  Index        r69, r63, r65
L0:
  // group by x.ps_partkey into g
  Const        r71, "ps_partkey"
  Index        r72, r69, r71
  Str          r73, r72
  In           r74, r73, r66
  JumpIfTrue   r74, L7
  // from x in filtered
  Const        r76, "__group__"
L8:
  Const        r77, true
  Const        r78, "key"
  // group by x.ps_partkey into g
  Move         r79, r72
  // from x in filtered
  MakeMap      r82, 2, r76
  SetIndex     r66, r73, r82
  Const        r84, "items"
  Index        r85, r66, r73
  Index        r86, r85, r84
  Append       r87, r86, r69
  SetIndex     r85, r84, r87
  Jump         L8
  Const        r90, 0
  Len          r91, r83
  Less         r92, r90, r91
  JumpIfFalse  r92, L9
L7:
  Index        r93, r83, r90
  // value: sum(from r in g select r.value)
  IterPrep     r100, r93
  Len          r101, r100
  Const        r102, 0
  Less         r103, r102, r101
  JumpIfFalse  r103, L10
  // from x in filtered
  Jump         L6
  // sum(from x in filtered select x.value)
  IterPrep     r122, r54
  Len          r123, r122
  Const        r124, 0
L10:
  Less         r125, r124, r123
  JumpIfFalse  r125, L11
  Jump         L12
  // let threshold = total * 0.0001
  Const        r135, 0
L9:
  // from x in grouped
  IterPrep     r138, r120
  Len          r139, r138
L12:
  Const        r140, 0
  Less         r141, r140, r139
  JumpIfFalse  r141, L13
  Index        r142, r138, r140
  // where x.value > threshold
  Const        r143, "value"
  Index        r144, r142, r143
  LessFloat    r145, r135, r144
  JumpIfFalse  r145, L14
L11:
  // sort by -x.value
  Sort         r155, r137
  // json(result)
  JSON         r155
  // expect result == [
  Const        r157, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r158, r155, r157
  Expect       r158
  Return       r0
