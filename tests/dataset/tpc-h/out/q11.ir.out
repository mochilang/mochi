func main (regs=195)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r2, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r3, "GERMANY"
  // from ps in partsupp
  Const        r4, []
  // where n.n_name == target_nation
  Const        r5, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r6, "ps_partkey"
  Const        r7, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r8, "value"
  Const        r9, "ps_supplycost"
  Const        r10, "ps_availqty"
  // from ps in partsupp
  IterPrep     r11, r2
  Len          r12, r11
  Const        r13, 0
L6:
  LessInt      r15, r13, r12
  JumpIfFalse  r15, L0
  Index        r17, r11, r13
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r18, r1
  Len          r19, r18
  Const        r20, "s_suppkey"
  Const        r21, "ps_suppkey"
  // where n.n_name == target_nation
  Const        r22, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r23, "ps_partkey"
  Const        r24, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r25, "value"
  Const        r26, "ps_supplycost"
  Const        r27, "ps_availqty"
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Const        r28, 0
L5:
  LessInt      r30, r28, r19
  JumpIfFalse  r30, L1
  Index        r32, r18, r28
  Const        r33, "s_suppkey"
  Index        r34, r32, r33
  Const        r35, "ps_suppkey"
  Index        r36, r17, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r38, r0
  Len          r39, r38
  Const        r40, "n_nationkey"
  Const        r41, "s_nationkey"
  // where n.n_name == target_nation
  Const        r42, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r43, "ps_partkey"
  Const        r44, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r45, "value"
  Const        r46, "ps_supplycost"
  Const        r47, "ps_availqty"
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r48, 0
L4:
  LessInt      r50, r48, r39
  JumpIfFalse  r50, L2
  Index        r52, r38, r48
  Const        r53, "n_nationkey"
  Index        r54, r52, r53
  Const        r55, "s_nationkey"
  Index        r56, r32, r55
  Equal        r57, r54, r56
  JumpIfFalse  r57, L3
  // where n.n_name == target_nation
  Const        r58, "n_name"
  Index        r59, r52, r58
  Equal        r60, r59, r3
  JumpIfFalse  r60, L3
  // ps_partkey: ps.ps_partkey,
  Const        r61, "ps_partkey"
  Const        r62, "ps_partkey"
  Index        r63, r17, r62
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r64, "value"
  Const        r65, "ps_supplycost"
  Index        r66, r17, r65
  Const        r67, "ps_availqty"
  Index        r68, r17, r67
  Mul          r69, r66, r68
  // ps_partkey: ps.ps_partkey,
  Move         r70, r61
  Move         r71, r63
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r72, r64
  Move         r73, r69
  // select {
  MakeMap      r74, 2, r70
  // from ps in partsupp
  Append       r4, r4, r74
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r76, 1
  Add          r48, r48, r76
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Const        r77, 1
  Add          r28, r28, r77
  Jump         L5
L1:
  // from ps in partsupp
  Const        r78, 1
  AddInt       r13, r13, r78
  Jump         L6
L0:
  // from x in filtered
  Const        r79, []
  // group by x.ps_partkey into g
  Const        r80, "ps_partkey"
  // ps_partkey: g.key,
  Const        r81, "ps_partkey"
  Const        r82, "key"
  // value: sum(from r in g select r.value)
  Const        r83, "value"
  Const        r84, "value"
  // from x in filtered
  IterPrep     r85, r4
  Len          r86, r85
  Const        r87, 0
  MakeMap      r88, 0, r0
  Const        r89, []
L9:
  LessInt      r91, r87, r86
  JumpIfFalse  r91, L7
  Index        r92, r85, r87
  Move         r93, r92
  // group by x.ps_partkey into g
  Const        r94, "ps_partkey"
  Index        r95, r93, r94
  Str          r96, r95
  In           r97, r96, r88
  JumpIfTrue   r97, L8
  // from x in filtered
  Const        r98, []
  Const        r99, "__group__"
  Const        r100, true
  Const        r101, "key"
  // group by x.ps_partkey into g
  Move         r102, r95
  // from x in filtered
  Const        r103, "items"
  Move         r104, r98
  Const        r105, "count"
  Const        r106, 0
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  MakeMap      r115, 4, r107
  SetIndex     r88, r96, r115
  Append       r89, r89, r115
L8:
  Const        r117, "items"
  Index        r118, r88, r96
  Index        r119, r118, r117
  Append       r120, r119, r92
  SetIndex     r118, r117, r120
  Const        r121, "count"
  Index        r122, r118, r121
  Const        r123, 1
  AddInt       r124, r122, r123
  SetIndex     r118, r121, r124
  Const        r125, 1
  AddInt       r87, r87, r125
  Jump         L9
L7:
  Const        r126, 0
  Len          r128, r89
L13:
  LessInt      r129, r126, r128
  JumpIfFalse  r129, L10
  Index        r131, r89, r126
  // ps_partkey: g.key,
  Const        r132, "ps_partkey"
  Const        r133, "key"
  Index        r134, r131, r133
  // value: sum(from r in g select r.value)
  Const        r135, "value"
  Const        r136, []
  Const        r137, "value"
  IterPrep     r138, r131
  Len          r139, r138
  Const        r140, 0
L12:
  LessInt      r142, r140, r139
  JumpIfFalse  r142, L11
  Index        r144, r138, r140
  Const        r145, "value"
  Index        r146, r144, r145
  Append       r136, r136, r146
  Const        r148, 1
  AddInt       r140, r140, r148
  Jump         L12
L11:
  Sum          r149, r136
  // ps_partkey: g.key,
  Move         r150, r132
  Move         r151, r134
  // value: sum(from r in g select r.value)
  Move         r152, r135
  Move         r153, r149
  // select {
  MakeMap      r154, 2, r150
  // from x in filtered
  Append       r79, r79, r154
  Const        r156, 1
  AddInt       r126, r126, r156
  Jump         L13
L10:
  // sum(from x in filtered select x.value)
  Const        r157, []
  Const        r158, "value"
  IterPrep     r159, r4
  Len          r160, r159
  Const        r161, 0
L15:
  LessInt      r163, r161, r160
  JumpIfFalse  r163, L14
  Index        r93, r159, r161
  Const        r165, "value"
  Index        r166, r93, r165
  Append       r157, r157, r166
  Const        r168, 1
  AddInt       r161, r161, r168
  Jump         L15
L14:
  Sum          r169, r157
  // let threshold = total * 0.0001
  Const        r170, 0.0001
  MulFloat     r171, r169, r170
  // from x in grouped
  Const        r172, []
  // where x.value > threshold
  Const        r173, "value"
  // sort by -x.value
  Const        r174, "value"
  // from x in grouped
  IterPrep     r175, r79
  Len          r176, r175
  Const        r177, 0
L18:
  LessInt      r179, r177, r176
  JumpIfFalse  r179, L16
  Index        r93, r175, r177
  // where x.value > threshold
  Const        r181, "value"
  Index        r182, r93, r181
  LessFloat    r183, r171, r182
  JumpIfFalse  r183, L17
  // sort by -x.value
  Const        r184, "value"
  Index        r185, r93, r184
  Neg          r187, r185
  // from x in grouped
  Move         r188, r93
  MakeList     r189, 2, r187
  Append       r172, r172, r189
L17:
  Const        r191, 1
  AddInt       r177, r177, r191
  Jump         L18
L16:
  // sort by -x.value
  Sort         r172, r172
  // json(result)
  JSON         r172
  // expect result == [
  Const        r193, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r194, r172, r193
  Expect       r194
  Return       r0
