func main (regs=142)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r2, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r3, "GERMANY"
  // from ps in partsupp
  Const        r4, []
  // where n.n_name == target_nation
  Const        r5, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r6, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r7, "value"
  Const        r8, "ps_supplycost"
  Const        r9, "ps_availqty"
  // from ps in partsupp
  IterPrep     r10, r2
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L6:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r15, r10, r12
  Move         r16, r15
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "s_suppkey"
  Const        r20, "ps_suppkey"
  Move         r21, r13
L5:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r23, r17, r21
  Move         r24, r23
  Index        r25, r24, r19
  Index        r26, r16, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, "n_nationkey"
  Const        r31, "s_nationkey"
  Move         r32, r13
L4:
  LessInt      r33, r32, r29
  JumpIfFalse  r33, L2
  Index        r34, r28, r32
  Move         r35, r34
  Index        r36, r35, r30
  Index        r37, r24, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // where n.n_name == target_nation
  Index        r39, r35, r5
  Equal        r40, r39, r3
  JumpIfFalse  r40, L3
  // ps_partkey: ps.ps_partkey,
  Const        r41, "ps_partkey"
  Index        r42, r16, r6
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Index        r44, r16, r8
  Index        r45, r16, r9
  Mul          r46, r44, r45
  // ps_partkey: ps.ps_partkey,
  Move         r47, r41
  Move         r48, r42
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r49, r43
  Move         r50, r46
  // select {
  MakeMap      r51, 2, r47
  // from ps in partsupp
  Append       r52, r4, r51
  Move         r4, r52
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r53, 1
  Add          r32, r32, r53
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Add          r21, r21, r53
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r12, r12, r53
  Jump         L6
L0:
  // from x in filtered
  Const        r54, []
  // ps_partkey: g.key,
  Const        r55, "key"
  // from x in filtered
  IterPrep     r56, r4
  Len          r57, r56
  Const        r58, 0
  MakeMap      r59, 0, r0
  Const        r61, []
  Move         r60, r61
L9:
  LessInt      r62, r58, r57
  JumpIfFalse  r62, L7
  Index        r63, r56, r58
  Move         r64, r63
  // group by x.ps_partkey into g
  Index        r65, r64, r6
  Str          r66, r65
  In           r67, r66, r59
  JumpIfTrue   r67, L8
  // from x in filtered
  Const        r68, []
  Const        r69, "__group__"
  Const        r70, true
  // group by x.ps_partkey into g
  Move         r71, r65
  // from x in filtered
  Const        r72, "items"
  Move         r73, r68
  Const        r74, "count"
  Move         r75, r69
  Move         r76, r70
  Move         r77, r55
  Move         r78, r71
  Move         r79, r72
  Move         r80, r73
  Move         r81, r74
  Move         r82, r13
  MakeMap      r83, 4, r75
  SetIndex     r59, r66, r83
  Append       r84, r60, r83
  Move         r60, r84
L8:
  Index        r85, r59, r66
  Index        r86, r85, r72
  Append       r87, r86, r63
  SetIndex     r85, r72, r87
  Index        r88, r85, r74
  AddInt       r89, r88, r53
  SetIndex     r85, r74, r89
  AddInt       r58, r58, r53
  Jump         L9
L7:
  Move         r90, r13
  Len          r91, r60
L13:
  LessInt      r92, r90, r91
  JumpIfFalse  r92, L10
  Index        r93, r60, r90
  Move         r94, r93
  // ps_partkey: g.key,
  Const        r95, "ps_partkey"
  Index        r96, r94, r55
  // value: sum(from r in g select r.value)
  Const        r97, "value"
  Const        r98, []
  IterPrep     r99, r94
  Len          r100, r99
  Move         r101, r13
L12:
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L11
  Index        r103, r99, r101
  Move         r104, r103
  Index        r105, r104, r7
  Append       r106, r98, r105
  Move         r98, r106
  AddInt       r101, r101, r53
  Jump         L12
L11:
  Sum          r107, r98
  // ps_partkey: g.key,
  Move         r108, r95
  Move         r109, r96
  // value: sum(from r in g select r.value)
  Move         r110, r97
  Move         r111, r107
  // select {
  MakeMap      r112, 2, r108
  // from x in filtered
  Append       r113, r54, r112
  Move         r54, r113
  AddInt       r90, r90, r53
  Jump         L13
L10:
  // sum(from x in filtered select x.value)
  Const        r114, []
  IterPrep     r115, r4
  Len          r116, r115
  Move         r117, r13
L15:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L14
  Index        r119, r115, r117
  Move         r64, r119
  Index        r120, r64, r7
  Append       r121, r114, r120
  Move         r114, r121
  AddInt       r117, r117, r53
  Jump         L15
L14:
  Sum          r122, r114
  // let threshold = total * 0.0001
  Const        r123, 0.0001
  MulFloat     r124, r122, r123
  // from x in grouped
  Const        r125, []
  IterPrep     r126, r54
  Len          r127, r126
  Move         r128, r13
L18:
  LessInt      r129, r128, r127
  JumpIfFalse  r129, L16
  Index        r130, r126, r128
  Move         r64, r130
  // where x.value > threshold
  Index        r131, r64, r7
  LessFloat    r132, r124, r131
  JumpIfFalse  r132, L17
  // sort by -x.value
  Index        r133, r64, r7
  Neg          r134, r133
  Move         r135, r134
  // from x in grouped
  Move         r136, r64
  MakeList     r137, 2, r135
  Append       r138, r125, r137
  Move         r125, r138
L17:
  AddInt       r128, r128, r53
  Jump         L18
L16:
  // sort by -x.value
  Sort         r139, r125
  // from x in grouped
  Move         r125, r139
  // json(result)
  JSON         r125
  // expect result == [
  Const        r140, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r141, r125, r140
  Expect       r141
  Return       r0
