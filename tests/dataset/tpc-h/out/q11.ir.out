func main (regs=160)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  Move         r3, r2
  // let partsupp = [
  Const        r4, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  Move         r5, r4
  // let target_nation = "GERMANY"
  Const        r6, "GERMANY"
  Move         r7, r6
  // from ps in partsupp
  Const        r8, []
  IterPrep     r9, r5
  Len          r10, r9
  Const        r11, 0
L6:
  Less         r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
  Move         r14, r13
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r15, r3
  Len          r16, r15
  Const        r17, 0
L5:
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r19, r15, r17
  Move         r20, r19
  Const        r21, "s_suppkey"
  Index        r22, r20, r21
  Const        r23, "ps_suppkey"
  Index        r24, r14, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
L4:
  Less         r29, r28, r27
  JumpIfFalse  r29, L2
  Index        r30, r26, r28
  Move         r31, r30
  Const        r32, "n_nationkey"
  Index        r33, r31, r32
  Const        r34, "s_nationkey"
  Index        r35, r20, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L3
  // where n.n_name == target_nation
  Const        r37, "n_name"
  Index        r38, r31, r37
  Equal        r39, r38, r7
  JumpIfFalse  r39, L3
  // let value = ps.ps_supplycost * ps.ps_availqty
  Const        r40, "ps_supplycost"
  Index        r41, r14, r40
  Const        r42, "ps_availqty"
  Index        r43, r14, r42
  Mul          r44, r41, r43
  Move         r45, r44
  // ps_partkey: ps.ps_partkey,
  Const        r46, "ps_partkey"
  Const        r47, "ps_partkey"
  Index        r48, r14, r47
  // value: value
  Const        r49, "value"
  // ps_partkey: ps.ps_partkey,
  Move         r50, r46
  Move         r51, r48
  // value: value
  Move         r52, r49
  Move         r53, r45
  // select {
  MakeMap      r54, 2, r50
  // from ps in partsupp
  Append       r55, r8, r54
  Move         r8, r55
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r56, 1
  Add          r57, r28, r56
  Move         r28, r57
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Const        r58, 1
  Add          r59, r17, r58
  Move         r17, r59
  Jump         L5
L1:
  // from ps in partsupp
  Const        r60, 1
  Add          r61, r11, r60
  Move         r11, r61
  Jump         L6
L0:
  // let filtered =
  Move         r62, r8
  // from x in filtered
  Const        r63, []
  IterPrep     r64, r62
  Len          r65, r64
  Const        r66, 0
  MakeMap      r67, 0, r0
  Const        r68, []
L9:
  Less         r69, r66, r65
  JumpIfFalse  r69, L7
  Index        r70, r64, r66
  Move         r71, r70
  // group by x.ps_partkey into g
  Const        r72, "ps_partkey"
  Index        r73, r71, r72
  Str          r74, r73
  In           r75, r74, r67
  JumpIfTrue   r75, L8
  // from x in filtered
  Const        r76, []
  Const        r77, "__group__"
  Const        r78, true
  Const        r79, "key"
  // group by x.ps_partkey into g
  Move         r80, r73
  // from x in filtered
  Const        r81, "items"
  Move         r82, r76
  MakeMap      r83, 3, r77
  SetIndex     r67, r74, r83
  Append       r84, r68, r83
  Move         r68, r84
L8:
  Const        r85, "items"
  Index        r86, r67, r74
  Index        r87, r86, r85
  Append       r88, r87, r70
  SetIndex     r86, r85, r88
  Const        r89, 1
  Add          r90, r66, r89
  Move         r66, r90
  Jump         L9
L7:
  Const        r91, 0
  Len          r92, r68
L13:
  Less         r93, r91, r92
  JumpIfFalse  r93, L10
  Index        r94, r68, r91
  Move         r95, r94
  // ps_partkey: g.key,
  Const        r96, "ps_partkey"
  Const        r97, "key"
  Index        r98, r95, r97
  // value: sum(from r in g select r.value)
  Const        r99, "value"
  Const        r100, []
  IterPrep     r101, r95
  Len          r102, r101
  Const        r103, 0
L12:
  Less         r104, r103, r102
  JumpIfFalse  r104, L11
  Index        r105, r101, r103
  Move         r106, r105
  Const        r107, "value"
  Index        r108, r106, r107
  Append       r109, r100, r108
  Move         r100, r109
  Const        r110, 1
  Add          r111, r103, r110
  Move         r103, r111
  Jump         L12
L11:
  Sum          r112, r100
  // ps_partkey: g.key,
  Move         r113, r96
  Move         r114, r98
  // value: sum(from r in g select r.value)
  Move         r115, r99
  Move         r116, r112
  // select {
  MakeMap      r117, 2, r113
  // from x in filtered
  Append       r118, r63, r117
  Move         r63, r118
  Const        r119, 1
  Add          r120, r91, r119
  Move         r91, r120
  Jump         L13
L10:
  // let grouped =
  Move         r121, r63
  // sum(from x in filtered select x.value)
  Const        r122, []
  IterPrep     r123, r62
  Len          r124, r123
  Const        r125, 0
L15:
  Less         r126, r125, r124
  JumpIfFalse  r126, L14
  Index        r127, r123, r125
  Move         r71, r127
  Const        r128, "value"
  Index        r129, r71, r128
  Append       r130, r122, r129
  Move         r122, r130
  Const        r131, 1
  Add          r132, r125, r131
  Move         r125, r132
  Jump         L15
L14:
  Sum          r133, r122
  // let total =
  Move         r134, r133
  // let threshold = total * 0.0001
  Const        r135, 0.0001
  MulFloat     r136, r134, r135
  Move         r137, r136
  // from x in grouped
  Const        r138, []
  IterPrep     r139, r121
  Len          r140, r139
  Const        r141, 0
L18:
  Less         r142, r141, r140
  JumpIfFalse  r142, L16
  Index        r143, r139, r141
  Move         r71, r143
  // where x.value > threshold
  Const        r144, "value"
  Index        r145, r71, r144
  LessFloat    r146, r137, r145
  JumpIfFalse  r146, L17
  // sort by -x.value
  Const        r147, "value"
  Index        r148, r71, r147
  Neg          r149, r148
  Move         r150, r149
  // from x in grouped
  Move         r151, r71
  MakeList     r152, 2, r150
  Append       r153, r138, r152
  Move         r138, r153
L17:
  Const        r154, 1
  Add          r155, r141, r154
  Move         r141, r155
  Jump         L18
L16:
  // sort by -x.value
  Sort         156,138,0,0
  // from x in grouped
  Move         r138, r156
  // let result =
  Move         r157, r138
  // json(result)
  JSON         r157
  // expect result == [
  Const        r158, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r159, r157, r158
  Expect       r159
  Return       r0

