func main (regs=146)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r2, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r3, "GERMANY"
  // from ps in partsupp
  Const        r4, []
  // where n.n_name == target_nation
  Const        r5, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r6, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r7, "value"
  Const        r8, "ps_supplycost"
  Const        r9, "ps_availqty"
  // from ps in partsupp
  IterPrep     r10, r2
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L6:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r16, r10, r12
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "s_suppkey"
  Const        r20, "ps_suppkey"
  Move         r21, r13
L5:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r24, r17, r21
  Index        r25, r24, r19
  Index        r26, r16, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, "n_nationkey"
  Const        r31, "s_nationkey"
  Move         r32, r13
L4:
  LessInt      r33, r32, r29
  JumpIfFalse  r33, L2
  Index        r35, r28, r32
  Index        r36, r35, r30
  Index        r37, r24, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // where n.n_name == target_nation
  Index        r39, r35, r5
  Equal        r40, r39, r3
  JumpIfFalse  r40, L3
  // ps_partkey: ps.ps_partkey,
  Const        r41, "ps_partkey"
  Index        r42, r16, r6
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Index        r44, r16, r8
  Index        r45, r16, r9
  Mul          r46, r44, r45
  // ps_partkey: ps.ps_partkey,
  Move         r47, r41
  Move         r48, r42
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r49, r43
  Move         r50, r46
  // select {
  MakeMap      r51, 2, r47
  // from ps in partsupp
  Append       r4, r4, r51
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r53, 1
  Add          r32, r32, r53
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Add          r21, r21, r53
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r12, r12, r53
  Jump         L6
L0:
  // from x in filtered
  Const        r54, []
  // ps_partkey: g.key,
  Const        r55, "key"
  // from x in filtered
  IterPrep     r56, r4
  Len          r57, r56
  Const        r58, 0
  MakeMap      r59, 0, r0
  Const        r60, []
L9:
  LessInt      r62, r58, r57
  JumpIfFalse  r62, L7
  Index        r63, r56, r58
  // group by x.ps_partkey into g
  Index        r65, r63, r6
  Str          r66, r65
  In           r67, r66, r59
  JumpIfTrue   r67, L8
  // from x in filtered
  Const        r68, []
  Const        r69, "__group__"
  Const        r70, true
  Const        r71, "key"
  // group by x.ps_partkey into g
  Move         r72, r65
  // from x in filtered
  Const        r73, "items"
  Move         r74, r68
  Const        r75, "count"
  Const        r76, 0
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  MakeMap      r85, 4, r77
  SetIndex     r59, r66, r85
  Append       r60, r60, r85
L8:
  Const        r87, "items"
  Index        r88, r59, r66
  Index        r89, r88, r87
  Append       r90, r89, r63
  SetIndex     r88, r87, r90
  Const        r91, "count"
  Index        r92, r88, r91
  AddInt       r93, r92, r53
  SetIndex     r88, r91, r93
  AddInt       r58, r58, r53
  Jump         L9
L7:
  Move         r94, r13
  Len          r95, r60
L13:
  LessInt      r96, r94, r95
  JumpIfFalse  r96, L10
  Index        r98, r60, r94
  // ps_partkey: g.key,
  Const        r99, "ps_partkey"
  Index        r100, r98, r55
  // value: sum(from r in g select r.value)
  Const        r101, "value"
  Const        r102, []
  IterPrep     r103, r98
  Len          r104, r103
  Move         r105, r13
L12:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L11
  Index        r108, r103, r105
  Index        r109, r108, r7
  Append       r102, r102, r109
  AddInt       r105, r105, r53
  Jump         L12
L11:
  Sum          r111, r102
  // ps_partkey: g.key,
  Move         r112, r99
  Move         r113, r100
  // value: sum(from r in g select r.value)
  Move         r114, r101
  Move         r115, r111
  // select {
  MakeMap      r116, 2, r112
  // from x in filtered
  Append       r54, r54, r116
  AddInt       r94, r94, r53
  Jump         L13
L10:
  // sum(from x in filtered select x.value)
  Const        r118, []
  IterPrep     r119, r4
  Len          r120, r119
  Move         r121, r13
L15:
  LessInt      r122, r121, r120
  JumpIfFalse  r122, L14
  Index        r64, r119, r121
  Index        r124, r64, r7
  Append       r118, r118, r124
  AddInt       r121, r121, r53
  Jump         L15
L14:
  Sum          r126, r118
  // let threshold = total * 0.0001
  Const        r127, 0.0001
  MulFloat     r128, r126, r127
  // from x in grouped
  Const        r129, []
  IterPrep     r130, r54
  Len          r131, r130
  Move         r132, r13
L18:
  LessInt      r133, r132, r131
  JumpIfFalse  r133, L16
  Index        r64, r130, r132
  // where x.value > threshold
  Index        r135, r64, r7
  LessFloat    r136, r128, r135
  JumpIfFalse  r136, L17
  // sort by -x.value
  Index        r137, r64, r7
  Neg          r139, r137
  // from x in grouped
  Move         r140, r64
  MakeList     r141, 2, r139
  Append       r129, r129, r141
L17:
  AddInt       r132, r132, r53
  Jump         L18
L16:
  // sort by -x.value
  Sort         r129, r129
  // json(result)
  JSON         r129
  // expect result == [
  Const        r144, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r145, r129, r144
  Expect       r145
  Return       r0
