func main (regs=165)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  Move         r1, r0
  // let supplier = [
  Const        r2, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  Move         r3, r2
  // let partsupp = [
  Const        r4, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  Move         r5, r4
  // let target_nation = "GERMANY"
  Const        r6, "GERMANY"
  Move         r7, r6
  // from ps in partsupp
  Const        r8, []
  IterPrep     r9, r5
  Len          r10, r9
  Const        r11, 0
L6:
  Less         r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r13, r9, r11
  Move         r14, r13
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r15, r3
  Len          r16, r15
  Const        r17, 0
L5:
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r19, r15, r17
  Move         r20, r19
  Const        r21, "s_suppkey"
  Index        r22, r20, r21
  Const        r23, "ps_suppkey"
  Index        r24, r14, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
L4:
  Less         r29, r28, r27
  JumpIfFalse  r29, L2
  Index        r30, r26, r28
  Move         r31, r30
  Const        r32, "n_nationkey"
  Index        r33, r31, r32
  Const        r34, "s_nationkey"
  Index        r35, r20, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L3
  // where n.n_name == target_nation
  Const        r37, "n_name"
  Index        r38, r31, r37
  Equal        r39, r38, r7
  JumpIfFalse  r39, L3
  // ps_partkey: ps.ps_partkey,
  Const        r40, "ps_partkey"
  Const        r41, "ps_partkey"
  Index        r42, r14, r41
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Const        r44, "ps_supplycost"
  Index        r45, r14, r44
  Const        r46, "ps_availqty"
  Index        r47, r14, r46
  Mul          r48, r45, r47
  // ps_partkey: ps.ps_partkey,
  Move         r49, r40
  Move         r50, r42
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r51, r43
  Move         r52, r48
  // select {
  MakeMap      r53, 2, r49
  // from ps in partsupp
  Append       r54, r8, r53
  Move         r8, r54
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r55, 1
  Add          r56, r28, r55
  Move         r28, r56
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Const        r57, 1
  Add          r58, r17, r57
  Move         r17, r58
  Jump         L5
L1:
  // from ps in partsupp
  Const        r59, 1
  Add          r60, r11, r59
  Move         r11, r60
  Jump         L6
L0:
  // let filtered =
  Move         r61, r8
  // from x in filtered
  Const        r62, []
  IterPrep     r63, r61
  Len          r64, r63
  Const        r65, 0
  MakeMap      r66, 0, r0
  Const        r67, []
L9:
  Less         r68, r65, r64
  JumpIfFalse  r68, L7
  Index        r69, r63, r65
  Move         r70, r69
  // group by x.ps_partkey into g
  Const        r71, "ps_partkey"
  Index        r72, r70, r71
  Str          r73, r72
  In           r74, r73, r66
  JumpIfTrue   r74, L8
  // from x in filtered
  Const        r75, []
  Const        r76, "__group__"
  Const        r77, true
  Const        r78, "key"
  // group by x.ps_partkey into g
  Move         r79, r72
  // from x in filtered
  Const        r80, "items"
  Move         r81, r75
  // group by x.ps_partkey into g
  Const        r82, "ps_partkey"
  Move         r83, r72
  // from x in filtered
  MakeMap      r84, 4, r76
  SetIndex     r66, r73, r84
  Append       r85, r67, r84
  Move         r67, r85
L8:
  Const        r86, "items"
  Index        r87, r66, r73
  Index        r88, r87, r86
  Append       r89, r88, r69
  SetIndex     r87, r86, r89
  Const        r90, 1
  Add          r91, r65, r90
  Move         r65, r91
  Jump         L9
L7:
  Const        r92, 0
  Len          r93, r67
L13:
  Less         r94, r92, r93
  JumpIfFalse  r94, L10
  Index        r95, r67, r92
  Move         r96, r95
  Const        r97, "ps_partkey"
  Index        r98, r95, r97
  Const        r99, "ps_partkey"
  Index        r100, r95, r99
  // ps_partkey: g.key,
  Const        r101, "ps_partkey"
  Const        r102, "key"
  Index        r103, r96, r102
  // value: sum(from r in g select r.value)
  Const        r104, "value"
  Const        r105, []
  IterPrep     r106, r96
  Len          r107, r106
  Const        r108, 0
L12:
  Less         r109, r108, r107
  JumpIfFalse  r109, L11
  Index        r110, r106, r108
  Move         r111, r110
  Const        r112, "value"
  Index        r113, r111, r112
  Append       r114, r105, r113
  Move         r105, r114
  Const        r115, 1
  Add          r116, r108, r115
  Move         r108, r116
  Jump         L12
L11:
  Sum          117,105,0,0
  // ps_partkey: g.key,
  Move         r118, r101
  Move         r119, r103
  // value: sum(from r in g select r.value)
  Move         r120, r104
  Move         r121, r117
  // select {
  MakeMap      r122, 2, r118
  // from x in filtered
  Append       r123, r62, r122
  Move         r62, r123
  Const        r124, 1
  Add          r125, r92, r124
  Move         r92, r125
  Jump         L13
L10:
  // let grouped =
  Move         r126, r62
  // sum(from x in filtered select x.value)
  Const        r127, []
  IterPrep     r128, r61
  Len          r129, r128
  Const        r130, 0
L15:
  Less         r131, r130, r129
  JumpIfFalse  r131, L14
  Index        r132, r128, r130
  Move         r70, r132
  Const        r133, "value"
  Index        r134, r70, r133
  Append       r135, r127, r134
  Move         r127, r135
  Const        r136, 1
  Add          r137, r130, r136
  Move         r130, r137
  Jump         L15
L14:
  Sum          138,127,0,0
  // let total =
  Move         r139, r138
  // let threshold = total * 0.0001
  Const        r140, 0.0001
  MulFloat     r141, r139, r140
  Move         r142, r141
  // from x in grouped
  Const        r143, []
  IterPrep     r144, r126
  Len          r145, r144
  Const        r146, 0
L18:
  Less         r147, r146, r145
  JumpIfFalse  r147, L16
  Index        r148, r144, r146
  Move         r70, r148
  // where x.value > threshold
  Const        r149, "value"
  Index        r150, r70, r149
  LessFloat    r151, r142, r150
  JumpIfFalse  r151, L17
  // sort by -x.value
  Const        r152, "value"
  Index        r153, r70, r152
  Neg          r154, r153
  Move         r155, r154
  // from x in grouped
  Move         r156, r70
  MakeList     r157, 2, r155
  Append       r158, r143, r157
  Move         r143, r158
L17:
  Const        r159, 1
  Add          r160, r146, r159
  Move         r146, r160
  Jump         L18
L16:
  // sort by -x.value
  Sort         161,143,0,0
  // from x in grouped
  Move         r143, r161
  // let result =
  Move         r162, r143
  // print(result)
  Print        r162
  // expect result == [
  Const        r163, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r164, r162, r163
  Expect       r164
  Return       r0

