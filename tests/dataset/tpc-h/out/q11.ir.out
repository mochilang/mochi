func main (regs=129)
  // let nation = [
  Const        r0, [{"n_name": "GERMANY", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_nationkey": 1, "s_suppkey": 100}, {"s_nationkey": 1, "s_suppkey": 200}, {"s_nationkey": 2, "s_suppkey": 300}]
  // let partsupp = [
  Const        r2, [{"ps_availqty": 100, "ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_availqty": 50, "ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 20}, {"ps_availqty": 10, "ps_partkey": 2000, "ps_suppkey": 100, "ps_supplycost": 5}, {"ps_availqty": 500, "ps_partkey": 3000, "ps_suppkey": 300, "ps_supplycost": 8}]
  // let target_nation = "GERMANY"
  Const        r3, "GERMANY"
  // from ps in partsupp
  Const        r4, []
  // where n.n_name == target_nation
  Const        r5, "n_name"
  // ps_partkey: ps.ps_partkey,
  Const        r6, "ps_partkey"
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r7, "value"
  Const        r8, "ps_supplycost"
  Const        r9, "ps_availqty"
  // from ps in partsupp
  IterPrep     r10, r2
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L6:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r15, r10, r12
  Move         r16, r15
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "s_suppkey"
  Const        r20, "ps_suppkey"
  Move         r21, r13
L5:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r23, r17, r21
  Move         r24, r23
  Index        r25, r24, r19
  Index        r26, r16, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, "n_nationkey"
  Const        r31, "s_nationkey"
  Move         r32, r13
L4:
  LessInt      r33, r32, r29
  JumpIfFalse  r33, L2
  Index        r34, r28, r32
  Move         r35, r34
  Index        r36, r35, r30
  Index        r37, r24, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // where n.n_name == target_nation
  Index        r39, r35, r5
  Equal        r40, r39, r3
  JumpIfFalse  r40, L3
  // ps_partkey: ps.ps_partkey,
  Const        r41, "ps_partkey"
  Index        r42, r16, r6
  // value: ps.ps_supplycost * ps.ps_availqty
  Const        r43, "value"
  Index        r44, r16, r8
  Index        r45, r16, r9
  Mul          r46, r44, r45
  // ps_partkey: ps.ps_partkey,
  Move         r47, r42
  // value: ps.ps_supplycost * ps.ps_availqty
  Move         r48, r46
  // select {
  MakeMap      r49, 2, r41
  // from ps in partsupp
  Append       r50, r4, r49
  Move         r4, r50
L3:
  // join n in nation on n.n_nationkey == s.s_nationkey
  Const        r51, 1
  Add          r32, r32, r51
  Jump         L4
L2:
  // join s in supplier on s.s_suppkey == ps.ps_suppkey
  Add          r21, r21, r51
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r12, r12, r51
  Jump         L6
L0:
  // from x in filtered
  Const        r52, []
  // ps_partkey: g.key,
  Const        r53, "key"
  // from x in filtered
  IterPrep     r54, r4
  Len          r55, r54
  Const        r56, 0
  MakeMap      r57, 0, r0
  Const        r58, []
L9:
  LessInt      r59, r56, r55
  JumpIfFalse  r59, L7
  Index        r60, r54, r56
  Move         r61, r60
  // group by x.ps_partkey into g
  Index        r62, r61, r6
  Str          r63, r62
  In           r64, r63, r57
  JumpIfTrue   r64, L8
  // from x in filtered
  Const        r65, []
  Const        r66, "__group__"
  Const        r67, true
  // group by x.ps_partkey into g
  Move         r68, r62
  // from x in filtered
  Const        r69, "items"
  Move         r70, r65
  Const        r71, "count"
  MakeMap      r72, 4, r66
  SetIndex     r57, r63, r72
  Append       r73, r58, r72
  Move         r58, r73
L8:
  Index        r74, r57, r63
  Index        r75, r74, r69
  Append       r76, r75, r60
  SetIndex     r74, r69, r76
  Index        r77, r74, r71
  AddInt       r78, r77, r51
  SetIndex     r74, r71, r78
  AddInt       r56, r56, r51
  Jump         L9
L7:
  Move         r79, r13
  Len          r80, r58
L13:
  LessInt      r81, r79, r80
  JumpIfFalse  r81, L10
  Index        r82, r58, r79
  Move         r83, r82
  // ps_partkey: g.key,
  Const        r84, "ps_partkey"
  Index        r85, r83, r53
  // value: sum(from r in g select r.value)
  Const        r86, "value"
  Const        r87, []
  IterPrep     r88, r83
  Len          r89, r88
  Move         r90, r13
L12:
  LessInt      r91, r90, r89
  JumpIfFalse  r91, L11
  Index        r92, r88, r90
  Move         r93, r92
  Index        r94, r93, r7
  Append       r95, r87, r94
  Move         r87, r95
  AddInt       r90, r90, r51
  Jump         L12
L11:
  Sum          r96, r87
  // ps_partkey: g.key,
  Move         r97, r85
  // value: sum(from r in g select r.value)
  Move         r98, r96
  // select {
  MakeMap      r99, 2, r84
  // from x in filtered
  Append       r100, r52, r99
  Move         r52, r100
  AddInt       r79, r79, r51
  Jump         L13
L10:
  // sum(from x in filtered select x.value)
  Const        r101, []
  IterPrep     r102, r4
  Len          r103, r102
  Move         r104, r13
L15:
  LessInt      r105, r104, r103
  JumpIfFalse  r105, L14
  Index        r106, r102, r104
  Move         r61, r106
  Index        r107, r61, r7
  Append       r108, r101, r107
  Move         r101, r108
  AddInt       r104, r104, r51
  Jump         L15
L14:
  Sum          r109, r101
  // let threshold = total * 0.0001
  Const        r110, 0.0001
  MulFloat     r111, r109, r110
  // from x in grouped
  Const        r112, []
  IterPrep     r113, r52
  Len          r114, r113
  Move         r115, r13
L18:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L16
  Index        r117, r113, r115
  Move         r61, r117
  // where x.value > threshold
  Index        r118, r61, r7
  LessFloat    r119, r111, r118
  JumpIfFalse  r119, L17
  // sort by -x.value
  Index        r120, r61, r7
  Neg          r121, r120
  Move         r122, r121
  // from x in grouped
  Move         r123, r61
  MakeList     r124, 2, r122
  Append       r125, r112, r124
  Move         r112, r125
L17:
  AddInt       r115, r115, r51
  Jump         L18
L16:
  // sort by -x.value
  Sort         r126, r112
  // from x in grouped
  Move         r112, r126
  // json(result)
  JSON         r112
  // expect result == [
  Const        r127, [{"ps_partkey": 1000, "value": 2000}, {"ps_partkey": 2000, "value": 50}]
  Equal        r128, r112, r127
  Expect       r128
  Return       r0
