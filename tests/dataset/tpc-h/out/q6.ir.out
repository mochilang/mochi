func main (regs=36)
  // let lineitem = [
  Const        r0, [{"l_discount": 0.06, "l_extendedprice": 1000, "l_quantity": 10, "l_shipdate": "1994-02-15"}, {"l_discount": 0.07, "l_extendedprice": 500, "l_quantity": 23, "l_shipdate": "1994-03-10"}, {"l_discount": 0.04, "l_extendedprice": 400, "l_quantity": 15, "l_shipdate": "1994-04-10"}, {"l_discount": 0.06, "l_extendedprice": 200, "l_quantity": 5, "l_shipdate": "1995-01-01"}]
  // let result = from l in lineitem
  Const        r1, []
  // (l.l_shipdate >= "1994-01-01") &&
  Const        r2, "l_shipdate"
  // (l.l_discount >= 0.05) &&
  Const        r3, "l_discount"
  // (l.l_quantity < 24)
  Const        r4, "l_quantity"
  // select sum(l.l_extendedprice * l.l_discount)
  Const        r5, "l_extendedprice"
  // let result = from l in lineitem
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // (l.l_shipdate >= "1994-01-01") &&
  Index        r13, r12, r2
  Const        r14, "1994-01-01"
  LessEq       r15, r14, r13
  JumpIfFalse  r15, L1
  // (l.l_shipdate < "1995-01-01") &&
  Index        r16, r12, r2
  Const        r17, "1995-01-01"
  Less         r15, r16, r17
  JumpIfFalse  r15, L1
  // (l.l_discount >= 0.05) &&
  Index        r19, r12, r3
  Const        r20, 0.05
  LessEqFloat  r15, r20, r19
  JumpIfFalse  r15, L1
  // (l.l_discount <= 0.07) &&
  Index        r22, r12, r3
  Const        r23, 0.07
  LessEqFloat  r15, r22, r23
  JumpIfFalse  r15, L1
  // (l.l_quantity < 24)
  Index        r25, r12, r4
  Const        r26, 24
  Less         r15, r25, r26
L1:
  // (l.l_shipdate >= "1994-01-01") &&
  JumpIfFalse  r15, L2
  // select sum(l.l_extendedprice * l.l_discount)
  Index        r28, r12, r5
  Index        r29, r12, r3
  Mul          r30, r28, r29
  // let result = from l in lineitem
  Append       r1, r1, r30
L2:
  Const        r32, 1
  AddInt       r8, r8, r32
  Jump         L3
L0:
  // select sum(l.l_extendedprice * l.l_discount)
  Sum          r33, r1
  // json(result)
  JSON         r33
  // expect result == ((1000.0 * 0.06) + (500.0 * 0.07)) // 60 + 35 = 95
  Const        r34, 95
  EqualFloat   r35, r33, r34
  Expect       r35
  Return       r0
