func main (regs=113)
L0:
  // let part = [
  Const        r0, [{"p_brand": "Brand#23", "p_container": "MED BOX", "p_partkey": 1}, {"p_brand": "Brand#77", "p_container": "LG JAR", "p_partkey": 2}]
  // let lineitem = [
  Const        r1, [{"l_extendedprice": 100, "l_partkey": 1, "l_quantity": 1}, {"l_extendedprice": 1000, "l_partkey": 1, "l_quantity": 10}, {"l_extendedprice": 2000, "l_partkey": 1, "l_quantity": 20}, {"l_extendedprice": 500, "l_partkey": 2, "l_quantity": 5}]
  // let brand = "Brand#23"
  Const        r2, "Brand#23"
  // let container = "MED BOX"
  Const        r3, "MED BOX"
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r7, r0
  Len          r8, r7
  // from l in lineitem
  Const        r9, 0
  EqualInt     r10, r6, r9
  JumpIfTrue   r10, L0
  EqualInt     r11, r8, r9
  JumpIfTrue   r11, L0
  LessEq       r12, r8, r6
  JumpIfFalse  r12, L1
  // join p in part on p.p_partkey == l.l_partkey
  MakeMap      r13, 0, r0
  Const        r14, 0
L4:
  LessInt      r15, r14, r8
  JumpIfFalse  r15, L2
  Index        r16, r7, r14
  Move         r17, r16
  Const        r18, "p_partkey"
  Index        r19, r17, r18
  Index        r20, r13, r19
  Const        r21, nil
  NotEqual     r22, r20, r21
  JumpIfTrue   r22, L3
  MakeList     r23, 0, r0
  SetIndex     r13, r19, r23
L3:
  Index        r20, r13, r19
  Append       r24, r20, r16
  SetIndex     r13, r19, r24
  Const        r25, 1
  AddInt       r14, r14, r25
  Jump         L4
L2:
  // from l in lineitem
  Const        r26, 0
L12:
  LessInt      r27, r26, r6
  JumpIfFalse  r27, L0
  Index        r29, r5, r26
  // join p in part on p.p_partkey == l.l_partkey
  Const        r30, "l_partkey"
  Index        r31, r29, r30
  // from l in lineitem
  Index        r32, r13, r31
  NotEqual     r33, r32, r21
  JumpIfFalse  r33, L5
  Len          r34, r32
  Const        r35, 0
L11:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L5
  Index        r17, r32, r35
  // (p.p_brand == brand) &&
  Const        r38, "p_brand"
  Index        r39, r17, r38
  Equal        r41, r39, r2
  JumpIfFalse  r41, L6
  // (p.p_container == container) &&
  Const        r42, "p_container"
  Index        r43, r17, r42
  Equal        r41, r43, r3
  JumpIfFalse  r41, L6
  // (l.l_quantity < (
  Const        r45, "l_quantity"
  Index        r46, r29, r45
  // 0.2 * avg(
  Const        r47, 0.2
  // from x in lineitem
  Const        r48, []
  IterPrep     r49, r1
  Len          r50, r49
  Move         r51, r9
L9:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L7
  Index        r54, r49, r51
  // where x.l_partkey == p.p_partkey
  Index        r55, r54, r30
  Index        r56, r17, r18
  Equal        r57, r55, r56
  JumpIfFalse  r57, L8
  // select x.l_quantity
  Index        r58, r54, r45
  // from x in lineitem
  Append       r48, r48, r58
L8:
  AddInt       r51, r51, r25
  Jump         L9
L7:
  // 0.2 * avg(
  Avg          r60, r48
  MulFloat     r61, r47, r60
  // (l.l_quantity < (
  LessFloat    r41, r46, r61
L6:
  // where (
  JumpIfFalse  r41, L10
  // select l.l_extendedprice
  Const        r63, "l_extendedprice"
  Index        r64, r29, r63
  // from l in lineitem
  Append       r4, r4, r64
L10:
  AddInt       r35, r35, r25
  Jump         L11
L5:
  AddInt       r26, r26, r25
  Jump         L12
L1:
  MakeMap      r66, 0, r0
  Const        r67, 0
L15:
  LessInt      r68, r67, r6
  JumpIfFalse  r68, L13
  Index        r69, r5, r67
  // join p in part on p.p_partkey == l.l_partkey
  Index        r70, r69, r30
  // from l in lineitem
  Index        r71, r66, r70
  NotEqual     r72, r71, r21
  JumpIfTrue   r72, L14
  MakeList     r73, 0, r0
  SetIndex     r66, r70, r73
L14:
  Index        r71, r66, r70
  Append       r74, r71, r69
  SetIndex     r66, r70, r74
  AddInt       r67, r67, r25
  Jump         L15
L13:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r75, 0
L24:
  LessInt      r76, r75, r8
  JumpIfFalse  r76, L16
  Index        r17, r7, r75
  Index        r78, r17, r18
  Index        r79, r66, r78
  NotEqual     r80, r79, r21
  JumpIfFalse  r80, L17
  Len          r81, r79
  Const        r82, 0
L23:
  LessInt      r83, r82, r81
  JumpIfFalse  r83, L17
  Index        r29, r79, r82
  // (p.p_brand == brand) &&
  Index        r85, r17, r38
  Equal        r87, r85, r2
  JumpIfFalse  r87, L18
  // (p.p_container == container) &&
  Index        r88, r17, r42
  Equal        r87, r88, r3
  JumpIfFalse  r87, L18
  // (l.l_quantity < (
  Index        r90, r29, r45
  // from x in lineitem
  Const        r91, []
  IterPrep     r92, r1
  Len          r93, r92
  Move         r94, r9
L21:
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L19
  Index        r54, r92, r94
  // where x.l_partkey == p.p_partkey
  Index        r97, r54, r30
  Index        r98, r17, r18
  Equal        r99, r97, r98
  JumpIfFalse  r99, L20
  // select x.l_quantity
  Index        r100, r54, r45
  // from x in lineitem
  Append       r91, r91, r100
L20:
  AddInt       r94, r94, r25
  Jump         L21
L19:
  // 0.2 * avg(
  Avg          r102, r91
  MulFloat     r103, r47, r102
  // (l.l_quantity < (
  LessFloat    r87, r90, r103
L18:
  // where (
  JumpIfFalse  r87, L22
  // select l.l_extendedprice
  Index        r105, r29, r63
  // from l in lineitem
  Append       r4, r4, r105
L22:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r82, r82, r25
  Jump         L23
L17:
  AddInt       r75, r75, r25
  Jump         L24
L16:
  // let result = sum(filtered) / 7.0
  Sum          r107, r4
  Const        r108, 7
  DivFloat     r109, r107, r108
  // print(result)
  Print        r109
  // let expected = 100.0 / 7.0
  Const        r110, 100
  Const        r111, 14.285714285714286
  // expect result == expected
  EqualFloat   r112, r109, r111
  Expect       r112
  Return       r0
