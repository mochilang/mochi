func main (regs=60)
  // let part = [
  Const        r0, [{"p_brand": "Brand#23", "p_container": "MED BOX", "p_partkey": 1}, {"p_brand": "Brand#77", "p_container": "LG JAR", "p_partkey": 2}]
  // let lineitem = [
  Const        r1, [{"l_extendedprice": 100, "l_partkey": 1, "l_quantity": 1}, {"l_extendedprice": 1000, "l_partkey": 1, "l_quantity": 10}, {"l_extendedprice": 2000, "l_partkey": 1, "l_quantity": 20}, {"l_extendedprice": 500, "l_partkey": 2, "l_quantity": 5}]
  // let brand = "Brand#23"
  Const        r2, "Brand#23"
  // let container = "MED BOX"
  Const        r3, "MED BOX"
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, "p_partkey"
  Const        r10, "l_partkey"
  // (p.p_brand == brand) &&
  Const        r11, "p_brand"
  // (p.p_container == container) &&
  Const        r12, "p_container"
  // (l.l_quantity < (
  Const        r13, "l_quantity"
  // select l.l_extendedprice
  Const        r14, "l_extendedprice"
  // from l in lineitem
  Const        r15, 0
L9:
  LessInt      r16, r15, r6
  JumpIfFalse  r16, L0
  Index        r17, r5, r15
  Move         r18, r17
  // join p in part on p.p_partkey == l.l_partkey
  Const        r19, 0
L8:
  LessInt      r20, r19, r8
  JumpIfFalse  r20, L1
  Index        r21, r7, r19
  Move         r22, r21
  Index        r23, r22, r9
  Index        r24, r18, r10
  Equal        r25, r23, r24
  JumpIfFalse  r25, L2
  // (p.p_brand == brand) &&
  Index        r26, r22, r11
  Equal        r27, r26, r2
  // (p.p_container == container) &&
  Index        r28, r22, r12
  Equal        r29, r28, r3
  // (p.p_brand == brand) &&
  Move         r30, r27
  JumpIfFalse  r30, L3
  Move         r30, r29
L3:
  // (l.l_quantity < (
  Index        r31, r18, r13
  // 0.2 * avg(
  Const        r32, 0.2
  // from x in lineitem
  Const        r33, []
  IterPrep     r34, r1
  Len          r35, r34
  Const        r37, 0
  Move         r36, r37
L6:
  LessInt      r38, r36, r35
  JumpIfFalse  r38, L4
  Index        r39, r34, r36
  Move         r40, r39
  // where x.l_partkey == p.p_partkey
  Index        r41, r40, r10
  Index        r42, r22, r9
  Equal        r43, r41, r42
  JumpIfFalse  r43, L5
  // select x.l_quantity
  Index        r44, r40, r13
  // from x in lineitem
  Append       r45, r33, r44
  Move         r33, r45
L5:
  Const        r46, 1
  AddInt       r36, r36, r46
  Jump         L6
L4:
  // 0.2 * avg(
  Avg          r47, r33
  MulFloat     r48, r32, r47
  // (l.l_quantity < (
  LessFloat    r49, r31, r48
  // (p.p_container == container) &&
  Move         r50, r30
  JumpIfFalse  r50, L7
  Move         r50, r49
L7:
  // where (
  JumpIfFalse  r50, L2
  // select l.l_extendedprice
  Index        r51, r18, r14
  // from l in lineitem
  Append       r52, r4, r51
  Move         r4, r52
L2:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r19, r19, r46
  Jump         L8
L1:
  // from l in lineitem
  AddInt       r15, r15, r46
  Jump         L9
L0:
  // let result = sum(filtered) / 7.0
  Sum          r53, r4
  Const        r54, 7
  DivFloat     r55, r53, r54
  // print(result)
  Print        r55
  // let expected = 100.0 / 7.0
  Const        r56, 100
  Const        r57, 14.285714285714286
  // expect result == expected
  Const        r58, 14.285714285714286
  EqualFloat   r59, r55, r58
  Expect       r59
  Return       r0
