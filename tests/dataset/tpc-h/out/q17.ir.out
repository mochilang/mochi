func main (regs=74)
  // let part = [
  Const        r0, [{"p_brand": "Brand#23", "p_container": "MED BOX", "p_partkey": 1}, {"p_brand": "Brand#77", "p_container": "LG JAR", "p_partkey": 2}]
  Move         r1, r0
  // let lineitem = [
  Const        r2, [{"l_extendedprice": 100, "l_partkey": 1, "l_quantity": 1}, {"l_extendedprice": 1000, "l_partkey": 1, "l_quantity": 10}, {"l_extendedprice": 2000, "l_partkey": 1, "l_quantity": 20}, {"l_extendedprice": 500, "l_partkey": 2, "l_quantity": 5}]
  // let brand = "Brand#23"
  Const        r4, "Brand#23"
  // let container = "MED BOX"
  Const        r6, "MED BOX"
  // from l in lineitem
  IterPrep     r9, r2
  Len          r10, r9
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r11, r1
  Len          r12, r11
  // from l in lineitem
  Const        r13, 0
  Less         r14, r13, r10
  JumpIfFalse  r14, L0
  Index        r15, r9, r13
L9:
  // join p in part on p.p_partkey == l.l_partkey
  Const        r17, 0
  Less         r18, r17, r12
  JumpIfFalse  r18, L1
  Index        r19, r11, r17
  Const        r21, "p_partkey"
L8:
  Index        r22, r19, r21
  Const        r23, "l_partkey"
  Index        r24, r15, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // (p.p_brand == brand) &&
  Const        r26, "p_brand"
  Index        r27, r19, r26
  Equal        r28, r27, r4
  JumpIfFalse  r28, L3
  // (p.p_container == container) &&
  Const        r30, "p_container"
  Index        r31, r19, r30
  Equal        r32, r31, r6
  JumpIfFalse  r32, L4
  // from x in lineitem
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
  Less         r41, r40, r39
L3:
  JumpIfFalse  r41, L5
  Index        r42, r38, r40
  // where x.l_partkey == p.p_partkey
  Const        r44, "l_partkey"
  Index        r45, r42, r44
  Const        r46, "p_partkey"
  Index        r47, r19, r46
  Equal        r48, r45, r47
L7:
  JumpIfFalse  r48, L6
  // from x in lineitem
  Jump         L7
  // 0.2 * avg(
  Avg          r54, r51
  MulFloat     r55, r36, r54
  // (l.l_quantity < (
  LessFloat    r56, r35, r55
  // where (
  JumpIfFalse  r56, L2
L6:
  // join p in part on p.p_partkey == l.l_partkey
  Jump         L8
L5:
  // from l in lineitem
  Jump         L9
  // let result = sum(filtered) / 7.0
  Sum          r65, r8
  Const        r66, 7
  DivFloat     r67, r65, r66
L4:
  // print(result)
  Print        r67
  // let expected = 100.0 / 7.0
  Const        r71, 14.285714285714286
  // expect result == expected
  EqualFloat   r73, r67, r71
  Expect       r73
  Return       r0
