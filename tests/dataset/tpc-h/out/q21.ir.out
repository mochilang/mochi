func main (regs=154)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
  Const        r8, "l_commitdate"
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
  // numwait: count(g)
  Const        r13, "numwait"
  // from s in supplier
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L14:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r23, r3
  Len          r24, r23
  Const        r25, 0
L13:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "s_suppkey"
  Index        r30, r22, r29
  Index        r31, r28, r11
  Equal        r32, r30, r31
  JumpIfFalse  r32, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r33, r2
  Len          r34, r33
  Const        r35, 0
L12:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r37, r33, r35
  Move         r38, r37
  Const        r39, "o_orderkey"
  Index        r40, r38, r39
  Index        r41, r28, r10
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r43, r0
  Len          r44, r43
  Const        r45, 0
L11:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "n_nationkey"
  Index        r50, r48, r49
  Const        r51, "s_nationkey"
  Index        r52, r22, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // o.o_orderstatus == "F" &&
  Index        r54, r38, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r55, r28, r7
  Index        r56, r28, r8
  Less         r57, r56, r55
  // o.o_orderstatus == "F" &&
  Const        r58, "F"
  Equal        r59, r54, r58
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r60, r48, r9
  Const        r61, "SAUDI ARABIA"
  Equal        r62, r60, r61
  // o.o_orderstatus == "F" &&
  Move         r63, r59
  JumpIfFalse  r63, L5
  Move         r63, r57
  // l1.l_receiptdate > l1.l_commitdate &&
  JumpIfFalse  r63, L5
  Move         r63, r62
  // n.n_name == "SAUDI ARABIA" && (!exists(
  JumpIfFalse  r63, L5
  // from x in lineitem
  Const        r64, []
  IterPrep     r65, r3
  Len          r66, r65
  Const        r68, 0
  Move         r67, r68
L9:
  LessInt      r69, r67, r66
  JumpIfFalse  r69, L6
  Index        r70, r65, r67
  Move         r71, r70
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r72, r71, r10
  Index        r73, r71, r7
  Index        r74, r71, r8
  Less         r75, r74, r73
  Index        r76, r28, r10
  Equal        r77, r72, r76
  Index        r78, r71, r11
  Index        r79, r28, r11
  NotEqual     r80, r78, r79
  Move         r81, r77
  JumpIfFalse  r81, L7
  Move         r81, r80
  JumpIfFalse  r81, L7
  Move         r81, r75
L7:
  JumpIfFalse  r81, L8
  // from x in lineitem
  Append       r82, r64, r71
  Move         r64, r82
L8:
  Const        r83, 1
  AddInt       r67, r67, r83
  Jump         L9
L6:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r84, r64
  Not          r85, r84
  Move         r63, r85
L5:
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r63, L4
  // from s in supplier
  Const        r86, "s"
  Move         r87, r22
  Const        r88, "l1"
  Move         r89, r28
  Const        r90, "o"
  Move         r91, r38
  Const        r92, "n"
  Move         r93, r48
  Move         r94, r86
  Move         r95, r87
  Move         r96, r88
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  MakeMap      r102, 4, r94
  // group by s.s_name into g
  Index        r103, r22, r5
  Str          r104, r103
  In           r105, r104, r14
  JumpIfTrue   r105, L10
  // from s in supplier
  Const        r106, "__group__"
  Const        r107, true
  // group by s.s_name into g
  Move         r108, r103
  // from s in supplier
  Const        r109, "items"
  Move         r110, r16
  Const        r111, "count"
  Move         r112, r106
  Move         r113, r107
  Move         r114, r12
  Move         r115, r108
  Move         r116, r109
  Move         r117, r110
  Move         r118, r111
  Move         r119, r68
  MakeMap      r120, 4, r112
  SetIndex     r14, r104, r120
  Append       r121, r15, r120
  Move         r15, r121
L10:
  Index        r122, r14, r104
  Index        r123, r122, r109
  Append       r124, r123, r102
  SetIndex     r122, r109, r124
  Index        r125, r122, r111
  AddInt       r126, r125, r83
  SetIndex     r122, r111, r126
L4:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r45, r45, r83
  Jump         L11
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r35, r35, r83
  Jump         L12
L2:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  AddInt       r25, r25, r83
  Jump         L13
L1:
  // from s in supplier
  AddInt       r19, r19, r83
  Jump         L14
L0:
  Move         r127, r68
  Len          r128, r15
L16:
  LessInt      r129, r127, r128
  JumpIfFalse  r129, L15
  Index        r130, r15, r127
  Move         r131, r130
  // s_name: g.key,
  Const        r132, "s_name"
  Index        r133, r131, r12
  // numwait: count(g)
  Const        r134, "numwait"
  Index        r135, r131, r111
  // s_name: g.key,
  Move         r136, r132
  Move         r137, r133
  // numwait: count(g)
  Move         r138, r134
  Move         r139, r135
  // select {
  MakeMap      r140, 2, r136
  // sort by [ -count(g), g.key ]
  Index        r141, r131, r111
  Neg          r142, r141
  Move         r143, r142
  Index        r144, r131, r12
  Move         r145, r144
  MakeList     r146, 2, r143
  Move         r147, r146
  // from s in supplier
  Move         r148, r140
  MakeList     r149, 2, r147
  Append       r150, r4, r149
  Move         r4, r150
  AddInt       r127, r127, r83
  Jump         L16
L15:
  // sort by [ -count(g), g.key ]
  Sort         r151, r4
  // from s in supplier
  Move         r4, r151
  // json(result)
  JSON         r4
  // expect result == [
  Const        r152, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r153, r4, r152
  Expect       r153
  Return       r0
