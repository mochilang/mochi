func main (regs=28)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
L8:
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
L5:
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
L6:
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
L12:
  Const        r8, "l_commitdate"
L9:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
L10:
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
L1:
  // numwait: count(g)
  Const        r13, "numwait"
  // from s in supplier
  MakeMap      r14, 0, r0
  IterPrep     r15, r1
  Len          r1, r15
L14:
  Const        r16, 0
  LessInt      r17, r16, r1
  JumpIfFalse  r17, L0
L2:
  Index        r1, r15, r16
L7:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r15, r3
  Len          r18, r15
  Move         r19, r16
L13:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L1
L11:
  Index        r18, r15, r19
L4:
  Const        r15, "s_suppkey"
  Index        r21, r1, r15
  Index        r15, r18, r11
  Equal        r22, r21, r15
  JumpIfFalse  r22, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r22, r2
  Len          r2, r22
  Move         r15, r16
  LessInt      r21, r15, r2
  JumpIfFalse  r21, L2
  Index        r21, r22, r15
  Const        r22, "o_orderkey"
  Index        r2, r21, r22
  Index        r22, r18, r10
  Equal        r23, r2, r22
  JumpIfFalse  r23, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r23, r0
  Len          r22, r23
  Move         r2, r15
  LessInt      r24, r2, r22
  JumpIfFalse  r24, L3
  Index        r24, r23, r2
  Const        r23, "n_nationkey"
  Index        r22, r24, r23
  Const        r23, "s_nationkey"
  Index        r25, r1, r23
  Equal        r23, r22, r25
  JumpIfFalse  r23, L4
  // o.o_orderstatus == "F" &&
  Index        r23, r21, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r6, r18, r7
  Index        r25, r18, r8
  Less         r22, r25, r6
  // o.o_orderstatus == "F" &&
  Const        r25, "F"
  Equal        r6, r23, r25
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r25, r24, r9
  Const        r9, "SAUDI ARABIA"
  Equal        r23, r25, r9
  // o.o_orderstatus == "F" &&
  Move         r9, r6
  JumpIfFalse  r9, L5
  // l1.l_receiptdate > l1.l_commitdate &&
  Move         r9, r22
  JumpIfFalse  r9, L6
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Move         r9, r23
  JumpIfFalse  r9, L7
  // from x in lineitem
  Move         r23, r4
  IterPrep     r22, r3
  Len          r3, r22
  Move         r6, r16
  Move         r25, r6
  LessInt      r26, r25, r3
  JumpIfFalse  r26, L8
  Index        r26, r22, r25
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r22, r26, r10
  Index        r3, r26, r7
  Index        r7, r26, r8
  Less         r8, r7, r3
  Index        r7, r18, r10
  Equal        r10, r22, r7
  Index        r7, r26, r11
  Index        r22, r18, r11
  NotEqual     r11, r7, r22
  Move         r22, r10
  JumpIfFalse  r22, L9
  Move         r22, r11
  JumpIfFalse  r22, L10
  Move         r22, r8
  JumpIfFalse  r22, L11
  // from x in lineitem
  Append       r23, r23, r26
  Const        r22, 1
  AddInt       r25, r25, r22
  Jump         L12
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r8, r23
  Not          r9, r8
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r9, L4
  // from s in supplier
  Const        r8, "s"
  Move         r23, r1
  Const        r9, "l1"
  Move         r25, r18
  Const        r18, "o"
  Move         r11, r21
  Const        r21, "n"
  Move         r26, r24
  MakeMap      r10, 4, r8
  // group by s.s_name into g
  Index        r26, r1, r5
  Str          r1, r26
  In           r21, r1, r14
  JumpIfTrue   r21, L6
  // from s in supplier
  Move         r21, r4
  Const        r11, "__group__"
  Const        r18, true
  Move         r25, r12
  // group by s.s_name into g
  Move         r9, r26
  // from s in supplier
  Const        r26, "items"
  Move         r23, r21
  Const        r21, "count"
  Move         r8, r6
  Move         r7, r11
  Move         r11, r18
  Move         r18, r25
  Move         r25, r9
  Move         r9, r26
  Move         r3, r23
  Move         r23, r21
  Move         r27, r8
  MakeMap      r8, 4, r7
  SetIndex     r14, r1, r8
  Move         r8, r26
  Index        r26, r14, r1
  Index        r1, r26, r8
  Append       r27, r1, r10
  SetIndex     r26, r8, r27
  Move         r27, r21
  Index        r21, r26, r27
  AddInt       r1, r21, r22
  SetIndex     r26, r27, r1
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r2, r2, r22
  Jump         L13
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r15, r15, r22
  Jump         L8
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  AddInt       r19, r19, r22
  Jump         L2
  // from s in supplier
  AddInt       r16, r16, r22
  Jump         L14
L0:
  Values       1,14,0,0
  Move         r14, r6
  Len          r6, r1
L16:
  LessInt      r20, r14, r6
  JumpIfFalse  r20, L15
  Index        r20, r1, r14
  // s_name: g.key,
  Move         r1, r5
  Index        r5, r20, r12
  // numwait: count(g)
  Move         r6, r13
  Index        r13, r20, r27
  // s_name: g.key,
  Move         r19, r1
  Move         r1, r5
  // numwait: count(g)
  Move         r5, r6
  Move         r6, r13
  // select {
  MakeMap      r13, 2, r19
  // sort by [ -count(g), g.key ]
  Index        r6, r20, r27
  Neg          r27, r6
  Index        r6, r20, r12
  MakeList     r20, 2, r27
  // from s in supplier
  Move         r6, r13
  MakeList     r13, 2, r20
  Append       r4, r4, r13
  AddInt       r14, r14, r22
  Jump         L16
L15:
  // sort by [ -count(g), g.key ]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r13, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r6, r4, r13
  Expect       r6
  Return       r0
