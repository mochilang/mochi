func main (regs=158)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
  Const        r8, "l_commitdate"
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
  // numwait: count(g)
  Const        r13, "numwait"
  // from s in supplier
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L17:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r23, r3
  Len          r24, r23
  Const        r25, 0
L16:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "s_suppkey"
  Index        r30, r22, r29
  Index        r31, r28, r11
  Equal        r32, r30, r31
  JumpIfFalse  r32, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r33, r2
  Len          r34, r33
  Const        r35, 0
L15:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r37, r33, r35
  Move         r38, r37
  Const        r39, "o_orderkey"
  Index        r40, r38, r39
  Index        r41, r28, r10
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r43, r0
  Len          r44, r43
  Const        r45, 0
L14:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "n_nationkey"
  Index        r50, r48, r49
  Const        r51, "s_nationkey"
  Index        r52, r22, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // o.o_orderstatus == "F" &&
  Index        r54, r38, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r55, r28, r7
  Index        r56, r28, r8
  Less         r57, r56, r55
  // o.o_orderstatus == "F" &&
  Const        r58, "F"
  Equal        r59, r54, r58
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r60, r48, r9
  Const        r61, "SAUDI ARABIA"
  Equal        r62, r60, r61
  // o.o_orderstatus == "F" &&
  Move         r63, r59
  JumpIfFalse  r63, L5
  Move         r63, r57
L5:
  // l1.l_receiptdate > l1.l_commitdate &&
  Move         r64, r63
  JumpIfFalse  r64, L6
  Move         r64, r62
L6:
  // from x in lineitem
  Const        r65, []
  IterPrep     r66, r3
  Len          r67, r66
  Const        r69, 0
  Move         r68, r69
L11:
  LessInt      r70, r68, r67
  JumpIfFalse  r70, L7
  Index        r71, r66, r68
  Move         r72, r71
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r73, r72, r10
  Index        r74, r72, r7
  Index        r75, r72, r8
  Less         r76, r75, r74
  Index        r77, r28, r10
  Equal        r78, r73, r77
  Index        r79, r72, r11
  Index        r80, r28, r11
  NotEqual     r81, r79, r80
  Move         r82, r78
  JumpIfFalse  r82, L8
  Move         r82, r81
L8:
  Move         r83, r82
  JumpIfFalse  r83, L9
  Move         r83, r76
L9:
  JumpIfFalse  r83, L10
  // from x in lineitem
  Append       r84, r65, r72
  Move         r65, r84
L10:
  Const        r85, 1
  AddInt       r68, r68, r85
  Jump         L11
L7:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r86, r65
  Not          r87, r86
  Move         r88, r64
  JumpIfFalse  r88, L12
  Move         r88, r87
L12:
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r88, L4
  // from s in supplier
  Const        r89, "s"
  Move         r90, r22
  Const        r91, "l1"
  Move         r92, r28
  Const        r93, "o"
  Move         r94, r38
  Const        r95, "n"
  Move         r96, r48
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  MakeMap      r105, 4, r97
  // group by s.s_name into g
  Index        r106, r22, r5
  Str          r107, r106
  In           r108, r107, r14
  JumpIfTrue   r108, L13
  // from s in supplier
  Const        r109, []
  Const        r110, "__group__"
  Const        r111, true
  // group by s.s_name into g
  Move         r112, r106
  // from s in supplier
  Const        r113, "items"
  Move         r114, r109
  Const        r115, "count"
  Move         r116, r110
  Move         r117, r111
  Move         r118, r12
  Move         r119, r112
  Move         r120, r113
  Move         r121, r114
  Move         r122, r115
  Move         r123, r69
  MakeMap      r124, 4, r116
  SetIndex     r14, r107, r124
  Append       r125, r15, r124
  Move         r15, r125
L13:
  Index        r126, r14, r107
  Index        r127, r126, r113
  Append       r128, r127, r105
  SetIndex     r126, r113, r128
  Index        r129, r126, r115
  AddInt       r130, r129, r85
  SetIndex     r126, r115, r130
L4:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r45, r45, r85
  Jump         L14
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r35, r35, r85
  Jump         L15
L2:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  AddInt       r25, r25, r85
  Jump         L16
L1:
  // from s in supplier
  AddInt       r19, r19, r85
  Jump         L17
L0:
  Move         r131, r69
  Len          r132, r15
L19:
  LessInt      r133, r131, r132
  JumpIfFalse  r133, L18
  Index        r134, r15, r131
  Move         r135, r134
  // s_name: g.key,
  Const        r136, "s_name"
  Index        r137, r135, r12
  // numwait: count(g)
  Const        r138, "numwait"
  Index        r139, r135, r115
  // s_name: g.key,
  Move         r140, r136
  Move         r141, r137
  // numwait: count(g)
  Move         r142, r138
  Move         r143, r139
  // select {
  MakeMap      r144, 2, r140
  // sort by [ -count(g), g.key ]
  Index        r145, r135, r115
  Neg          r146, r145
  Move         r147, r146
  Index        r148, r135, r12
  Move         r149, r148
  MakeList     r150, 2, r147
  Move         r151, r150
  // from s in supplier
  Move         r152, r144
  MakeList     r153, 2, r151
  Append       r154, r4, r153
  Move         r4, r154
  AddInt       r131, r131, r85
  Jump         L19
L18:
  // sort by [ -count(g), g.key ]
  Sort         r155, r4
  // from s in supplier
  Move         r4, r155
  // json(result)
  JSON         r4
  // expect result == [
  Const        r156, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r157, r4, r156
  Expect       r157
  Return       r0
