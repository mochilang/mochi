func main (regs=136)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
  Const        r8, "l_commitdate"
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
  // from s in supplier
  MakeMap      r14, 0, r0
  Const        r15, []
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, 0
L17:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L0
  Index        r21, r16, r18
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r22, r3
  Len          r23, r22
  Const        r24, 0
L16:
  Less         r25, r24, r23
  JumpIfFalse  r25, L1
  Index        r27, r22, r24
  Const        r28, "s_suppkey"
  Index        r29, r21, r28
  Index        r30, r27, r11
  Equal        r31, r29, r30
  JumpIfFalse  r31, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r32, r2
  Len          r33, r32
  Const        r34, 0
L15:
  Less         r35, r34, r33
  JumpIfFalse  r35, L2
  Index        r37, r32, r34
  Const        r38, "o_orderkey"
  Index        r39, r37, r38
  Index        r40, r27, r10
  Equal        r41, r39, r40
  JumpIfFalse  r41, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r42, r0
  Len          r43, r42
  Const        r44, 0
L14:
  Less         r45, r44, r43
  JumpIfFalse  r45, L3
  Index        r47, r42, r44
  Const        r48, "n_nationkey"
  Index        r49, r47, r48
  Const        r50, "s_nationkey"
  Index        r51, r21, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L4
  // o.o_orderstatus == "F" &&
  Index        r53, r37, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r54, r27, r7
  Index        r55, r27, r8
  Less         r56, r55, r54
  // o.o_orderstatus == "F" &&
  Const        r57, "F"
  Equal        r58, r53, r57
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r59, r47, r9
  Const        r60, "SAUDI ARABIA"
  Equal        r61, r59, r60
  // o.o_orderstatus == "F" &&
  Move         r62, r58
  JumpIfFalse  r62, L5
L5:
  // l1.l_receiptdate > l1.l_commitdate &&
  Move         r63, r56
  JumpIfFalse  r63, L6
L6:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Move         r64, r61
  JumpIfFalse  r64, L7
  // from x in lineitem
  Const        r65, []
  IterPrep     r66, r3
  Len          r67, r66
  Const        r69, 0
  Move         r68, r69
L12:
  LessInt      r70, r68, r67
  JumpIfFalse  r70, L8
  Index        r72, r66, r68
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r73, r72, r10
  Index        r74, r72, r7
  Index        r75, r72, r8
  Less         r76, r75, r74
  Index        r77, r27, r10
  Equal        r78, r73, r77
  Index        r79, r72, r11
  Index        r80, r27, r11
  NotEqual     r81, r79, r80
  Move         r82, r78
  JumpIfFalse  r82, L9
L9:
  Move         r83, r81
  JumpIfFalse  r83, L10
  Move         r83, r76
L10:
  JumpIfFalse  r83, L11
  // from x in lineitem
  Append       r65, r65, r72
L11:
  Const        r85, 1
  AddInt       r68, r68, r85
  Jump         L12
L8:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r86, r65
  Not          r64, r86
L7:
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r64, L4
  // from s in supplier
  Const        r88, "s"
  Move         r89, r21
  Const        r90, "l1"
  Move         r91, r27
  Const        r92, "o"
  Move         r93, r37
  Const        r94, "n"
  Move         r95, r47
  MakeMap      r96, 4, r88
  // group by s.s_name into g
  Index        r97, r21, r5
  Str          r98, r97
  In           r99, r98, r14
  JumpIfTrue   r99, L13
  // from s in supplier
  Const        r100, []
  Const        r101, "__group__"
  Const        r102, true
  // group by s.s_name into g
  Move         r103, r97
  // from s in supplier
  Const        r104, "items"
  Move         r105, r100
  MakeMap      r106, 3, r101
  SetIndex     r14, r98, r106
  Append       r15, r15, r106
L13:
  Index        r108, r14, r98
  Index        r109, r108, r104
  Append       r110, r109, r96
  SetIndex     r108, r104, r110
L4:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r44, r44, r85
  Jump         L14
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r34, r34, r85
  Jump         L15
L2:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  Jump         L16
L1:
  // from s in supplier
  Jump         L17
L0:
  Move         r111, r69
  Len          r112, r15
L19:
  LessInt      r113, r111, r112
  JumpIfFalse  r113, L18
  Index        r115, r15, r111
  // s_name: g.key,
  Const        r116, "s_name"
  Index        r117, r115, r12
  // numwait: count(g)
  Const        r118, "numwait"
  Count        r119, r115
  // select {
  MakeMap      r122, 2, r116
  // sort by [ -count(g), g.key ]
  Count        r123, r115
  NegInt       r125, r123
  Index        r126, r115, r12
  MakeList     r129, 2, r125
  // from s in supplier
  Move         r130, r122
  MakeList     r131, 2, r129
  Append       r4, r4, r131
  AddInt       r111, r111, r85
  Jump         L19
L18:
  // sort by [ -count(g), g.key ]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r134, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r135, r4, r134
  Expect       r135
  Return       r0
