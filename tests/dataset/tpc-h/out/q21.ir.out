func main (regs=151)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
  Const        r8, "l_commitdate"
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
  // numwait: count(g)
  Const        r13, "numwait"
  // from s in supplier
  MakeMap      r14, 0, r0
  Const        r15, []
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L14:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r22, r17, r19
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r23, r3
  Len          r24, r23
  Const        r25, 0
L13:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r28, r23, r25
  Const        r29, "s_suppkey"
  Index        r30, r22, r29
  Index        r31, r28, r11
  Equal        r32, r30, r31
  JumpIfFalse  r32, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r33, r2
  Len          r34, r33
  Const        r35, 0
L12:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r38, r33, r35
  Const        r39, "o_orderkey"
  Index        r40, r38, r39
  Index        r41, r28, r10
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r43, r0
  Len          r44, r43
  Const        r45, 0
L11:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r48, r43, r45
  Const        r49, "n_nationkey"
  Index        r50, r48, r49
  Const        r51, "s_nationkey"
  Index        r52, r22, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // o.o_orderstatus == "F" &&
  Index        r54, r38, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r55, r28, r7
  Index        r56, r28, r8
  Less         r57, r56, r55
  // o.o_orderstatus == "F" &&
  Const        r58, "F"
  Equal        r59, r54, r58
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r60, r48, r9
  Const        r61, "SAUDI ARABIA"
  Equal        r62, r60, r61
  // o.o_orderstatus == "F" &&
  Move         r63, r59
  JumpIfFalse  r63, L5
  Move         r63, r57
  // l1.l_receiptdate > l1.l_commitdate &&
  JumpIfFalse  r63, L5
  Move         r63, r62
  // n.n_name == "SAUDI ARABIA" && (!exists(
  JumpIfFalse  r63, L5
  // from x in lineitem
  Const        r64, []
  IterPrep     r65, r3
  Len          r66, r65
  Const        r68, 0
  Move         r67, r68
L9:
  LessInt      r69, r67, r66
  JumpIfFalse  r69, L6
  Index        r71, r65, r67
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r72, r71, r10
  Index        r73, r71, r7
  Index        r74, r71, r8
  Less         r75, r74, r73
  Index        r76, r28, r10
  Equal        r77, r72, r76
  Index        r78, r71, r11
  Index        r79, r28, r11
  NotEqual     r80, r78, r79
  Move         r81, r77
  JumpIfFalse  r81, L7
  Move         r81, r80
  JumpIfFalse  r81, L7
  Move         r81, r75
L7:
  JumpIfFalse  r81, L8
  // from x in lineitem
  Append       r64, r64, r71
L8:
  Const        r83, 1
  AddInt       r67, r67, r83
  Jump         L9
L6:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r84, r64
  Not          r63, r84
L5:
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r63, L4
  // from s in supplier
  Const        r86, "s"
  Move         r87, r22
  Const        r88, "l1"
  Move         r89, r28
  Const        r90, "o"
  Move         r91, r38
  Const        r92, "n"
  Move         r93, r48
  MakeMap      r94, 4, r86
  // group by s.s_name into g
  Index        r95, r22, r5
  Str          r96, r95
  In           r97, r96, r14
  JumpIfTrue   r97, L10
  // from s in supplier
  Const        r98, []
  Const        r99, "__group__"
  Const        r100, true
  Const        r101, "key"
  // group by s.s_name into g
  Move         r102, r95
  // from s in supplier
  Const        r103, "items"
  Move         r104, r98
  Const        r105, "count"
  Const        r106, 0
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  MakeMap      r115, 4, r107
  SetIndex     r14, r96, r115
  Append       r15, r15, r115
L10:
  Const        r117, "items"
  Index        r118, r14, r96
  Index        r119, r118, r117
  Append       r120, r119, r94
  SetIndex     r118, r117, r120
  Const        r121, "count"
  Index        r122, r118, r121
  AddInt       r123, r122, r83
  SetIndex     r118, r121, r123
L4:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r45, r45, r83
  Jump         L11
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r35, r35, r83
  Jump         L12
L2:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  AddInt       r25, r25, r83
  Jump         L13
L1:
  // from s in supplier
  AddInt       r19, r19, r83
  Jump         L14
L0:
  Move         r124, r68
  Len          r125, r15
L16:
  LessInt      r126, r124, r125
  JumpIfFalse  r126, L15
  Index        r128, r15, r124
  // s_name: g.key,
  Const        r129, "s_name"
  Index        r130, r128, r12
  // numwait: count(g)
  Const        r131, "numwait"
  Index        r132, r128, r121
  // s_name: g.key,
  Move         r133, r129
  Move         r134, r130
  // numwait: count(g)
  Move         r135, r131
  Move         r136, r132
  // select {
  MakeMap      r137, 2, r133
  // sort by [ -count(g), g.key ]
  Index        r138, r128, r121
  Neg          r140, r138
  Index        r141, r128, r12
  Move         r142, r141
  MakeList     r144, 2, r140
  // from s in supplier
  Move         r145, r137
  MakeList     r146, 2, r144
  Append       r4, r4, r146
  AddInt       r124, r124, r83
  Jump         L16
L15:
  // sort by [ -count(g), g.key ]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r149, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r150, r4, r149
  Expect       r150
  Return       r0
