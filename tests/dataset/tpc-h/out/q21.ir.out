func main (regs=144)
  // let nation = [
  Const        r0, [{"n_name": "SAUDI ARABIA", "n_nationkey": 1}, {"n_name": "FRANCE", "n_nationkey": 2}]
  // let supplier = [
  Const        r1, [{"s_name": "Desert Trade", "s_nationkey": 1, "s_suppkey": 100}, {"s_name": "Euro Goods", "s_nationkey": 2, "s_suppkey": 200}]
  // let orders = [
  Const        r2, [{"o_orderkey": 500, "o_orderstatus": "F"}, {"o_orderkey": 600, "o_orderstatus": "O"}]
  // let lineitem = [
  Const        r3, [{"l_commitdate": "1995-04-10", "l_orderkey": 500, "l_receiptdate": "1995-04-15", "l_suppkey": 100}, {"l_commitdate": "1995-04-12", "l_orderkey": 500, "l_receiptdate": "1995-04-12", "l_suppkey": 200}, {"l_commitdate": "1995-04-25", "l_orderkey": 600, "l_receiptdate": "1995-05-01", "l_suppkey": 100}]
  // from s in supplier
  Const        r4, []
  // group by s.s_name into g
  Const        r5, "s_name"
  // o.o_orderstatus == "F" &&
  Const        r6, "o_orderstatus"
  // l1.l_receiptdate > l1.l_commitdate &&
  Const        r7, "l_receiptdate"
  Const        r8, "l_commitdate"
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Const        r9, "n_name"
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Const        r10, "l_orderkey"
  Const        r11, "l_suppkey"
  // s_name: g.key,
  Const        r12, "key"
  // numwait: count(g)
  Const        r13, "numwait"
  // from s in supplier
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L14:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r22, r17, r19
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  IterPrep     r23, r3
  Len          r24, r23
  Const        r25, 0
L13:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r28, r23, r25
  Const        r29, "s_suppkey"
  Index        r30, r22, r29
  Index        r31, r28, r11
  Equal        r32, r30, r31
  JumpIfFalse  r32, L2
  // join o in orders on o.o_orderkey == l1.l_orderkey
  IterPrep     r33, r2
  Len          r34, r33
  Const        r35, 0
L12:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r38, r33, r35
  Const        r39, "o_orderkey"
  Index        r40, r38, r39
  Index        r41, r28, r10
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join n in nation on n.n_nationkey == s.s_nationkey
  IterPrep     r43, r0
  Len          r44, r43
  Const        r45, 0
L11:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r48, r43, r45
  Const        r49, "n_nationkey"
  Index        r50, r48, r49
  Const        r51, "s_nationkey"
  Index        r52, r22, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // o.o_orderstatus == "F" &&
  Index        r54, r38, r6
  // l1.l_receiptdate > l1.l_commitdate &&
  Index        r55, r28, r7
  Index        r56, r28, r8
  Less         r57, r56, r55
  // o.o_orderstatus == "F" &&
  Const        r58, "F"
  Equal        r59, r54, r58
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Index        r60, r48, r9
  Const        r61, "SAUDI ARABIA"
  Equal        r62, r60, r61
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r59, L5
  Move         r59, r57
  // l1.l_receiptdate > l1.l_commitdate &&
  JumpIfFalse  r59, L5
  Move         r59, r62
  // n.n_name == "SAUDI ARABIA" && (!exists(
  JumpIfFalse  r59, L5
  // from x in lineitem
  Const        r63, []
  IterPrep     r64, r3
  Len          r65, r64
  Const        r67, 0
  Move         r66, r67
L9:
  LessInt      r68, r66, r65
  JumpIfFalse  r68, L6
  Index        r70, r64, r66
  // where x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate
  Index        r71, r70, r10
  Index        r72, r70, r7
  Index        r73, r70, r8
  Less         r74, r73, r72
  Index        r75, r28, r10
  Equal        r76, r71, r75
  Index        r77, r70, r11
  Index        r78, r28, r11
  NotEqual     r79, r77, r78
  JumpIfFalse  r76, L7
  Move         r76, r79
  JumpIfFalse  r76, L7
  Move         r76, r74
L7:
  JumpIfFalse  r76, L8
  // from x in lineitem
  Append       r63, r63, r70
L8:
  Const        r81, 1
  AddInt       r66, r66, r81
  Jump         L9
L6:
  // n.n_name == "SAUDI ARABIA" && (!exists(
  Exists       r82, r63
  Not          r59, r82
L5:
  // o.o_orderstatus == "F" &&
  JumpIfFalse  r59, L4
  // from s in supplier
  Const        r84, "s"
  Move         r85, r22
  Const        r86, "l1"
  Move         r87, r28
  Const        r88, "o"
  Move         r89, r38
  Const        r90, "n"
  Move         r91, r48
  MakeMap      r92, 4, r84
  // group by s.s_name into g
  Index        r93, r22, r5
  Str          r94, r93
  In           r95, r94, r14
  JumpIfTrue   r95, L10
  // from s in supplier
  Const        r96, "__group__"
  Const        r97, true
  // group by s.s_name into g
  Move         r98, r93
  // from s in supplier
  Const        r99, "items"
  Move         r100, r16
  Const        r101, "count"
  Move         r102, r96
  Move         r103, r97
  Move         r104, r12
  Move         r105, r98
  Move         r106, r99
  Move         r107, r100
  Move         r108, r101
  Move         r109, r67
  MakeMap      r110, 4, r102
  SetIndex     r14, r94, r110
  Append       r15, r15, r110
L10:
  Index        r112, r14, r94
  Index        r113, r112, r99
  Append       r114, r113, r92
  SetIndex     r112, r99, r114
  Index        r115, r112, r101
  AddInt       r116, r115, r81
  SetIndex     r112, r101, r116
L4:
  // join n in nation on n.n_nationkey == s.s_nationkey
  AddInt       r45, r45, r81
  Jump         L11
L3:
  // join o in orders on o.o_orderkey == l1.l_orderkey
  AddInt       r35, r35, r81
  Jump         L12
L2:
  // join l1 in lineitem on s.s_suppkey == l1.l_suppkey
  AddInt       r25, r25, r81
  Jump         L13
L1:
  // from s in supplier
  AddInt       r19, r19, r81
  Jump         L14
L0:
  Move         r117, r67
  Len          r118, r15
L16:
  LessInt      r119, r117, r118
  JumpIfFalse  r119, L15
  Index        r121, r15, r117
  // s_name: g.key,
  Const        r122, "s_name"
  Index        r123, r121, r12
  // numwait: count(g)
  Const        r124, "numwait"
  Index        r125, r121, r101
  // s_name: g.key,
  Move         r126, r122
  Move         r127, r123
  // numwait: count(g)
  Move         r128, r124
  Move         r129, r125
  // select {
  MakeMap      r130, 2, r126
  // sort by [ -count(g), g.key ]
  Index        r131, r121, r101
  Neg          r133, r131
  Index        r134, r121, r12
  Move         r135, r134
  MakeList     r137, 2, r133
  // from s in supplier
  Move         r138, r130
  MakeList     r139, 2, r137
  Append       r4, r4, r139
  AddInt       r117, r117, r81
  Jump         L16
L15:
  // sort by [ -count(g), g.key ]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r142, [{"numwait": 1, "s_name": "Desert Trade"}]
  Equal        r143, r4, r142
  Expect       r143
  Return       r0
