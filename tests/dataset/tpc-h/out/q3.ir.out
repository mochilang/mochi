func main (regs=232)
L12:
  // let customer = [
  Const        r0, [{"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}]
  // let orders = [
  Const        r1, [{"o_custkey": 1, "o_orderdate": "1995-03-14", "o_orderkey": 100, "o_shippriority": 1}, {"o_custkey": 2, "o_orderdate": "1995-03-10", "o_orderkey": 200, "o_shippriority": 2}]
  // let lineitem = [
  Const        r2, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 100, "l_shipdate": "1995-03-16"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 100, "l_shipdate": "1995-03-20"}, {"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 200, "l_shipdate": "1995-03-14"}]
  // let cutoff = "1995-03-15"
  Const        r3, "1995-03-15"
  // let segment = "BUILDING"
  Const        r4, "BUILDING"
  // from c in customer
  Const        r5, []
  // where c.c_mktsegment == segment
  Const        r6, "c_mktsegment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L2:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // where c.c_mktsegment == segment
  Index        r14, r13, r6
  Equal        r15, r14, r4
  JumpIfFalse  r15, L1
  // from c in customer
  Append       r5, r5, r13
L1:
  Const        r17, 1
  AddInt       r9, r9, r17
  Jump         L2
L0:
  // from o in orders
  Const        r18, []
  IterPrep     r19, r1
  Len          r20, r19
  // join c in building_customers on o.o_custkey == c.c_custkey
  IterPrep     r21, r5
  Len          r22, r21
  // from o in orders
  Const        r23, 0
  EqualInt     r24, r20, r23
  JumpIfTrue   r24, L3
  EqualInt     r25, r22, r23
  JumpIfTrue   r25, L3
  LessEq       r26, r22, r20
  JumpIfFalse  r26, L4
  // join c in building_customers on o.o_custkey == c.c_custkey
  MakeMap      r27, 0, r0
  Const        r28, 0
L7:
  Less         r29, r28, r22
  JumpIfFalse  r29, L5
  Index        r30, r21, r28
  Move         r13, r30
  Const        r31, "c_custkey"
  Index        r32, r13, r31
  Index        r33, r27, r32
  Const        r34, nil
  NotEqual     r35, r33, r34
  JumpIfTrue   r35, L6
  MakeList     r36, 0, r0
  SetIndex     r27, r32, r36
L6:
  Index        r33, r27, r32
  Append       r37, r33, r30
  SetIndex     r27, r32, r37
  Const        r38, 1
  Add          r28, r28, r38
  Jump         L7
L5:
  // from o in orders
  Const        r40, 0
L11:
  Less         r41, r40, r20
  JumpIfFalse  r41, L3
  Index        r43, r19, r40
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r44, "o_custkey"
  Index        r45, r43, r44
  // from o in orders
  Index        r46, r27, r45
  Const        r47, nil
  NotEqual     r48, r46, r47
  JumpIfFalse  r48, L8
  Len          r49, r46
  Const        r50, 0
L10:
  Less         r51, r50, r49
  JumpIfFalse  r51, L8
  // where o.o_orderdate < cutoff
  Const        r53, "o_orderdate"
  Index        r54, r43, r53
  Less         r55, r54, r3
  JumpIfFalse  r55, L9
  // from o in orders
  Append       r18, r18, r43
L9:
  Const        r57, 1
  Add          r50, r50, r57
  Jump         L10
L8:
  Const        r59, 1
  Add          r40, r40, r59
  Jump         L11
L3:
  Jump         L12
L4:
  MakeMap      r61, 0, r0
  Const        r62, 0
L15:
  Less         r63, r62, r20
  JumpIfFalse  r63, L13
  Index        r64, r19, r62
  // join c in building_customers on o.o_custkey == c.c_custkey
  Index        r65, r64, r44
  // from o in orders
  Index        r66, r61, r65
  Const        r67, nil
  NotEqual     r68, r66, r67
  JumpIfTrue   r68, L14
  MakeList     r69, 0, r0
  SetIndex     r61, r65, r69
L14:
  Index        r66, r61, r65
  Append       r70, r66, r64
  SetIndex     r61, r65, r70
  Const        r71, 1
  Add          r62, r62, r71
  Jump         L15
L13:
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r73, 0
L20:
  Less         r74, r73, r22
  JumpIfFalse  r74, L16
  Index        r13, r21, r73
  Index        r76, r13, r31
  Index        r77, r61, r76
  Const        r78, nil
  NotEqual     r79, r77, r78
  JumpIfFalse  r79, L17
  Len          r80, r77
  Const        r81, 0
L19:
  Less         r82, r81, r80
  JumpIfFalse  r82, L17
  Index        r43, r77, r81
  // where o.o_orderdate < cutoff
  Index        r84, r43, r53
  Less         r85, r84, r3
  JumpIfFalse  r85, L18
  // from o in orders
  Append       r18, r18, r43
L18:
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r87, 1
  Add          r81, r81, r87
  Jump         L19
L17:
  Const        r89, 1
  Add          r73, r73, r89
  Jump         L20
L16:
  // from l in lineitem
  Const        r91, []
  // where l.l_shipdate > cutoff
  Const        r92, "l_shipdate"
  // from l in lineitem
  IterPrep     r93, r2
  Len          r94, r93
  Move         r95, r10
L23:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L21
  Index        r98, r93, r95
  // where l.l_shipdate > cutoff
  Index        r99, r98, r92
  Less         r100, r3, r99
  JumpIfFalse  r100, L22
  // from l in lineitem
  Append       r91, r91, r98
L22:
  AddInt       r95, r95, r17
  Jump         L23
L21:
  // from o in valid_orders
  Const        r102, []
  // o_orderkey: o.o_orderkey,
  Const        r103, "o_orderkey"
  // o_shippriority: o.o_shippriority
  Const        r104, "o_shippriority"
  // l_orderkey: g.key.o_orderkey,
  Const        r105, "l_orderkey"
  Const        r106, "key"
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r108, "l"
  Const        r109, "l_extendedprice"
  Const        r110, "l_discount"
  // from o in valid_orders
  MakeMap      r111, 0, r0
  Const        r112, []
  IterPrep     r113, r18
  Len          r114, r113
  Const        r115, 0
L29:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L24
  Index        r43, r113, r115
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  IterPrep     r118, r91
  Len          r119, r118
  Const        r120, 0
L28:
  Less         r121, r120, r119
  JumpIfFalse  r121, L25
  Index        r98, r118, r120
  Index        r123, r98, r105
  Index        r124, r43, r103
  Equal        r125, r123, r124
  JumpIfFalse  r125, L26
  // from o in valid_orders
  Const        r126, "o"
  Move         r127, r43
  Move         r128, r98
  MakeMap      r129, 2, r126
  // o_orderkey: o.o_orderkey,
  Const        r130, "o_orderkey"
  Index        r131, r43, r103
  // o_orderdate: o.o_orderdate,
  Const        r132, "o_orderdate"
  Index        r133, r43, r53
  // o_shippriority: o.o_shippriority
  Const        r134, "o_shippriority"
  Index        r135, r43, r104
  // group by {
  MakeMap      r139, 3, r130
  Str          r140, r139
  In           r141, r140, r111
  JumpIfTrue   r141, L27
  // from o in valid_orders
  Const        r142, []
  Const        r143, "__group__"
  Const        r144, true
  // group by {
  Move         r145, r139
  // from o in valid_orders
  Const        r146, "items"
  Move         r147, r142
  MakeMap      r148, 3, r143
  SetIndex     r111, r140, r148
  Append       r112, r112, r148
L27:
  Index        r150, r111, r140
  Index        r151, r150, r146
  Append       r152, r151, r129
  SetIndex     r150, r146, r152
L26:
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  AddInt       r120, r120, r17
  Jump         L28
L25:
  // from o in valid_orders
  AddInt       r115, r115, r17
  Jump         L29
L24:
  Move         r153, r10
  Len          r154, r112
L35:
  LessInt      r155, r153, r154
  JumpIfFalse  r155, L30
  Index        r157, r112, r153
  // l_orderkey: g.key.o_orderkey,
  Const        r158, "l_orderkey"
  Index        r159, r157, r106
  Index        r160, r159, r103
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r161, "revenue"
  Const        r162, []
  IterPrep     r163, r157
  Len          r164, r163
  Move         r165, r10
L32:
  LessInt      r166, r165, r164
  JumpIfFalse  r166, L31
  Index        r168, r163, r165
  Index        r169, r168, r108
  Index        r170, r169, r109
  Index        r171, r168, r108
  Index        r172, r171, r110
  Sub          r173, r17, r172
  Mul          r174, r170, r173
  Append       r162, r162, r174
  AddInt       r165, r165, r17
  Jump         L32
L31:
  // select {
  MakeMap      r187, 4, r158
  // -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r188, []
  IterPrep     r189, r157
  Len          r190, r189
  Move         r191, r10
L34:
  LessInt      r192, r191, r190
  JumpIfFalse  r192, L33
  Index        r168, r189, r191
  Index        r194, r168, r108
  Index        r195, r194, r109
  Index        r196, r168, r108
  Index        r197, r196, r110
  Sub          r198, r17, r197
  Mul          r199, r195, r198
  Append       r188, r188, r199
  AddInt       r191, r191, r17
  Jump         L34
L33:
  Sum          r201, r188
  Neg          r203, r201
  // g.key.o_orderdate
  Index        r204, r157, r106
  // sort by [
  MakeList     r208, 2, r203
  // from o in valid_orders
  Move         r209, r187
  MakeList     r210, 2, r208
  Append       r102, r102, r210
  AddInt       r153, r153, r17
  Jump         L35
L30:
  // sort by [
  Sort         r102, r102
  // json(order_line_join)
  JSON         r102
  // l_orderkey: 100,
  Const        r213, "l_orderkey"
  Const        r214, 100
  // revenue: 1000.0 * 0.95 + 500.0,
  Const        r215, "revenue"
  Const        r216, 1000
  Const        r217, 0.95
  Const        r218, 950
  Const        r219, 500
  Const        r220, 1450
  // {
  MakeMap      r229, 4, r213
  // expect order_line_join == [
  MakeList     r230, 1, r229
  Equal        r231, r102, r230
  Expect       r231
  Return       r0
