func main (regs=29)
L2:
  // let customer = [
  Const        r0, [{"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}]
L13:
  // let orders = [
  Const        r1, [{"o_custkey": 1, "o_orderdate": "1995-03-14", "o_orderkey": 100, "o_shippriority": 1}, {"o_custkey": 2, "o_orderdate": "1995-03-10", "o_orderkey": 200, "o_shippriority": 2}]
  // let lineitem = [
  Const        r2, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 100, "l_shipdate": "1995-03-16"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 100, "l_shipdate": "1995-03-20"}, {"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 200, "l_shipdate": "1995-03-14"}]
  // let cutoff = "1995-03-15"
  Const        r3, "1995-03-15"
  // let segment = "BUILDING"
  Const        r4, "BUILDING"
  // from c in customer
  Const        r5, []
  // where c.c_mktsegment == segment
  Const        r6, "c_mktsegment"
L0:
  // from c in customer
  IterPrep     r7, r0
L9:
  Len          r8, r7
L17:
  Const        r9, 0
L6:
  Move         r10, r9
L1:
  LessInt      r11, r10, r8
L3:
  JumpIfFalse  r11, L0
  Index        r8, r7, r10
L8:
  // where c.c_mktsegment == segment
  Index        r7, r8, r6
L4:
  Equal        r6, r7, r4
L12:
  JumpIfFalse  r6, L1
L10:
  // from c in customer
  Append       r5, r5, r8
L5:
  Const        r6, 1
  AddInt       r10, r10, r6
  Jump         L1
L11:
  // from o in orders
  Const        r11, []
L15:
  IterPrep     r10, r1
  Len          r1, r10
  // join c in building_customers on o.o_custkey == c.c_custkey
  IterPrep     r7, r5
  Len          r5, r7
  // from o in orders
  EqualInt     r4, r1, r9
  JumpIfTrue   r4, L2
  EqualInt     r4, r5, r9
  JumpIfTrue   r4, L2
  LessEq       r4, r5, r1
  JumpIfFalse  r4, L3
  // join c in building_customers on o.o_custkey == c.c_custkey
  MakeMap      r4, 0, r0
  Move         r12, r9
  LessInt      r13, r12, r5
  JumpIfFalse  r13, L4
  Index        r13, r7, r12
  Move         r8, r13
  Const        r14, "c_custkey"
  Index        r15, r8, r14
  Index        r16, r4, r15
  Const        r17, nil
  NotEqual     r18, r16, r17
  JumpIfTrue   r18, L4
  MakeList     r19, 0, r0
  SetIndex     r4, r15, r19
  Index        r16, r4, r15
  Append       r19, r16, r13
  SetIndex     r4, r15, r19
  AddInt       r12, r12, r6
  Jump         L5
  // from o in orders
  Move         r19, r9
  LessInt      r18, r19, r1
  JumpIfFalse  r18, L2
  Index        r18, r10, r19
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r16, "o_custkey"
  Index        r15, r18, r16
  // from o in orders
  Index        r13, r4, r15
  NotEqual     r15, r13, r17
  JumpIfFalse  r15, L6
  Len          r15, r13
  Move         r13, r19
  LessInt      r4, r13, r15
  JumpIfFalse  r4, L6
  // where o.o_orderdate < cutoff
  Const        r4, "o_orderdate"
  Index        r15, r18, r4
  Less         r12, r15, r3
  JumpIfFalse  r12, L7
  // from o in orders
  Append       r11, r11, r18
L7:
  AddInt       r13, r13, r6
  Jump         L4
  AddInt       r19, r19, r6
  Jump         L3
  MakeMap      r12, 0, r0
  Move         r19, r9
  LessInt      r13, r19, r1
  JumpIfFalse  r13, L8
  Index        r13, r10, r19
  // join c in building_customers on o.o_custkey == c.c_custkey
  Index        r10, r13, r16
  // from o in orders
  Index        r16, r12, r10
  Move         r1, r17
  NotEqual     r17, r16, r1
  JumpIfTrue   r17, L9
  MakeList     r15, 0, r0
  SetIndex     r12, r10, r15
  Index        r16, r12, r10
  Append       r17, r16, r13
  SetIndex     r12, r10, r17
  AddInt       r19, r19, r6
  Jump         L10
  // join c in building_customers on o.o_custkey == c.c_custkey
  Move         r16, r9
  LessInt      r10, r16, r5
  JumpIfFalse  r10, L11
  Index        r8, r7, r16
  Index        r10, r8, r14
  Index        r14, r12, r10
  NotEqual     r10, r14, r1
  JumpIfFalse  r10, L3
  Len          r10, r14
  Move         r1, r16
  LessInt      r12, r1, r10
  JumpIfFalse  r12, L3
  Index        r18, r14, r1
  // where o.o_orderdate < cutoff
  Index        r17, r18, r4
  Less         r12, r17, r3
  JumpIfFalse  r12, L3
  // from o in orders
  Append       r11, r11, r18
  // join c in building_customers on o.o_custkey == c.c_custkey
  AddInt       r1, r1, r6
  Jump         L3
  AddInt       r16, r16, r6
  Jump         L12
  // from l in lineitem
  Const        r1, []
  // where l.l_shipdate > cutoff
  Const        r17, "l_shipdate"
  // from l in lineitem
  IterPrep     r10, r2
  Len          r2, r10
  Move         r14, r9
  LessInt      r8, r14, r2
  JumpIfFalse  r8, L13
  Index        r8, r10, r14
  // where l.l_shipdate > cutoff
  Index        r10, r8, r17
  Less         r17, r3, r10
  JumpIfFalse  r17, L10
  // from l in lineitem
  Append       r1, r1, r8
  AddInt       r14, r14, r6
  Jump         L10
  // from o in valid_orders
  Const        r10, []
  // o_orderkey: o.o_orderkey,
  Const        r14, "o_orderkey"
  // o_shippriority: o.o_shippriority
  Const        r16, "o_shippriority"
  // l_orderkey: g.key.o_orderkey,
  Const        r3, "l_orderkey"
  Const        r2, "key"
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r5, "revenue"
  Const        r7, "l"
  Const        r13, "l_extendedprice"
  Const        r19, "l_discount"
  // from o in valid_orders
  MakeMap      r15, 0, r0
  IterPrep     r20, r11
  Len          r12, r20
  Move         r11, r9
  LessInt      r21, r11, r12
  JumpIfFalse  r21, L12
  Index        r18, r20, r11
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  IterPrep     r21, r1
  Len          r1, r21
  Move         r20, r11
  LessInt      r12, r20, r1
  JumpIfFalse  r12, L14
  Index        r8, r21, r20
  Index        r12, r8, r3
  Index        r1, r18, r14
  Equal        r21, r12, r1
  JumpIfFalse  r21, L5
  // from o in valid_orders
  Const        r21, "o"
  Move         r1, r18
  Move         r12, r8
  MakeMap      r8, 2, r21
  // o_orderkey: o.o_orderkey,
  Move         r17, r14
  Index        r12, r18, r14
  // o_orderdate: o.o_orderdate,
  Move         r1, r4
  Index        r21, r18, r4
  // o_shippriority: o.o_shippriority
  Move         r22, r16
  Index        r23, r18, r16
  // o_orderkey: o.o_orderkey,
  Move         r18, r17
  Move         r17, r12
  // o_orderdate: o.o_orderdate,
  Move         r12, r1
  Move         r1, r21
  // o_shippriority: o.o_shippriority
  Move         r21, r22
  Move         r22, r23
  // group by {
  MakeMap      r23, 3, r18
  Str          r22, r23
  In           r21, r22, r15
  JumpIfTrue   r21, L15
  // from o in valid_orders
  Move         r21, r10
  Const        r1, "__group__"
  Const        r12, true
  Move         r17, r2
  // group by {
  Move         r18, r23
  // from o in valid_orders
  Const        r23, "items"
  Move         r24, r21
  Const        r21, "count"
  Move         r25, r11
  Move         r26, r1
  Move         r1, r12
  Move         r12, r17
  Move         r17, r18
  Move         r18, r23
  Move         r27, r24
  Move         r24, r21
  Move         r28, r25
  MakeMap      r25, 4, r26
  SetIndex     r15, r22, r25
  Move         r25, r23
  Index        r23, r15, r22
  Index        r22, r23, r25
  Append       r28, r22, r8
  SetIndex     r23, r25, r28
  Move         r28, r21
  Index        r22, r23, r28
  AddInt       r25, r22, r6
  SetIndex     r23, r28, r25
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  AddInt       r20, r20, r6
  Jump         L5
L14:
  // from o in valid_orders
  AddInt       r11, r11, r6
  Jump         L11
  Values       25,15,0,0
  Move         r15, r9
  Len          r22, r25
  LessInt      r28, r15, r22
  JumpIfFalse  r28, L16
  Index        r28, r25, r15
  // l_orderkey: g.key.o_orderkey,
  Move         r25, r3
  Index        r22, r28, r2
  Index        r23, r22, r14
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Move         r22, r5
  Move         r14, r10
  IterPrep     r18, r28
  Len          r21, r18
  Move         r20, r9
  LessInt      r11, r20, r21
  JumpIfFalse  r11, L17
  Index        r11, r18, r20
  Index        r18, r11, r7
  Index        r21, r18, r13
  Index        r18, r11, r7
  Index        r8, r18, r19
  Sub          r18, r6, r8
  Mul          r8, r21, r18
  Append       r14, r14, r8
  AddInt       r20, r20, r6
  Jump         L9
  Sum          r18, r14
  // o_orderdate: g.key.o_orderdate,
  Move         r14, r4
  Index        r21, r28, r2
  Index        r20, r21, r4
  // o_shippriority: g.key.o_shippriority
  Move         r21, r16
  Index        r4, r28, r2
  Index        r24, r4, r16
  // l_orderkey: g.key.o_orderkey,
  Move         r4, r25
  Move         r25, r23
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Move         r23, r22
  Move         r22, r18
  // o_orderdate: g.key.o_orderdate,
  Move         r18, r14
  Move         r16, r20
  // o_shippriority: g.key.o_shippriority
  Move         r20, r21
  Move         r27, r24
  // select {
  MakeMap      r24, 4, r4
  // -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Move         r27, r10
  IterPrep     r20, r28
  Len          r16, r20
  Move         r18, r9
L19:
  LessInt      r9, r18, r16
  JumpIfFalse  r9, L18
  Index        r11, r20, r18
  Index        r9, r11, r7
  Index        r16, r9, r13
  Index        r9, r11, r7
  Index        r11, r9, r19
  Sub          r9, r6, r11
  Mul          r11, r16, r9
  Append       r27, r27, r11
  AddInt       r18, r18, r6
  Jump         L19
L18:
  Sum          r11, r27
  Neg          r27, r11
  // g.key.o_orderdate
  Index        r11, r28, r2
  // sort by [
  MakeList     r28, 2, r27
  // from o in valid_orders
  Move         r8, r24
  MakeList     r11, 2, r28
  Append       r10, r10, r11
  AddInt       r15, r15, r6
  Jump         L17
L16:
  // sort by [
  Sort         r10, r10
  // json(order_line_join)
  JSON         r10
  // l_orderkey: 100,
  Move         r11, r3
  Const        r3, 100
  // revenue: 1000.0 * 0.95 + 500.0,
  Move         r28, r5
  Const        r5, 1450
  // o_orderdate: "1995-03-14",
  Move         r9, r14
  Const        r14, "1995-03-14"
  // o_shippriority: 1
  Move         r8, r21
  // l_orderkey: 100,
  Move         r21, r11
  Move         r11, r3
  // revenue: 1000.0 * 0.95 + 500.0,
  Move         r3, r28
  Move         r28, r5
  // o_orderdate: "1995-03-14",
  Move         r5, r9
  Move         r9, r14
  // o_shippriority: 1
  Move         r14, r8
  Move         r8, r6
  // {
  MakeMap      r6, 4, r21
  // expect order_line_join == [
  MakeList     r8, 1, r6
  Equal        r6, r10, r8
  Expect       r6
  Return       r0
