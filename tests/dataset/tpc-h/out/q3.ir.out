func main (regs=207)
  // let customer = [
  Const        r0, [{"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}]
  // let orders = [
  Const        r1, [{"o_custkey": 1, "o_orderdate": "1995-03-14", "o_orderkey": 100, "o_shippriority": 1}, {"o_custkey": 2, "o_orderdate": "1995-03-10", "o_orderkey": 200, "o_shippriority": 2}]
  // let lineitem = [
  Const        r2, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 100, "l_shipdate": "1995-03-16"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 100, "l_shipdate": "1995-03-20"}, {"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 200, "l_shipdate": "1995-03-14"}]
  // let cutoff = "1995-03-15"
  Const        r3, "1995-03-15"
  // let segment = "BUILDING"
  Const        r4, "BUILDING"
  // from c in customer
  Const        r5, []
  // where c.c_mktsegment == segment
  Const        r6, "c_mktsegment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L2:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  Move         r13, r12
  // where c.c_mktsegment == segment
  Index        r14, r13, r6
  Equal        r15, r14, r4
  JumpIfFalse  r15, L1
  // from c in customer
  Append       r16, r5, r13
  Move         r5, r16
L1:
  Const        r17, 1
  AddInt       r9, r9, r17
  Jump         L2
L0:
  // from o in orders
  Const        r18, []
  IterPrep     r19, r1
  Len          r20, r19
  // join c in building_customers on o.o_custkey == c.c_custkey
  IterPrep     r21, r5
  Len          r22, r21
  Const        r23, "o_custkey"
  Const        r24, "c_custkey"
  // where o.o_orderdate < cutoff
  Const        r25, "o_orderdate"
  // from o in orders
  Const        r26, 0
L7:
  LessInt      r27, r26, r20
  JumpIfFalse  r27, L3
  Index        r28, r19, r26
  Move         r29, r28
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r30, 0
L6:
  LessInt      r31, r30, r22
  JumpIfFalse  r31, L4
  Index        r32, r21, r30
  Move         r13, r32
  Index        r33, r29, r23
  Index        r34, r13, r24
  Equal        r35, r33, r34
  JumpIfFalse  r35, L5
  // where o.o_orderdate < cutoff
  Index        r36, r29, r25
  Less         r37, r36, r3
  JumpIfFalse  r37, L5
  // from o in orders
  Append       r38, r18, r29
  Move         r18, r38
L5:
  // join c in building_customers on o.o_custkey == c.c_custkey
  AddInt       r30, r30, r17
  Jump         L6
L4:
  // from o in orders
  AddInt       r26, r26, r17
  Jump         L7
L3:
  // from l in lineitem
  Const        r39, []
  // where l.l_shipdate > cutoff
  Const        r40, "l_shipdate"
  // from l in lineitem
  IterPrep     r41, r2
  Len          r42, r41
  Move         r43, r10
L10:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L8
  Index        r45, r41, r43
  Move         r46, r45
  // where l.l_shipdate > cutoff
  Index        r47, r46, r40
  Less         r48, r3, r47
  JumpIfFalse  r48, L9
  // from l in lineitem
  Append       r49, r39, r46
  Move         r39, r49
L9:
  AddInt       r43, r43, r17
  Jump         L10
L8:
  // from o in valid_orders
  Const        r50, []
  // o_orderkey: o.o_orderkey,
  Const        r51, "o_orderkey"
  // o_shippriority: o.o_shippriority
  Const        r52, "o_shippriority"
  // l_orderkey: g.key.o_orderkey,
  Const        r53, "l_orderkey"
  Const        r54, "key"
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r55, "revenue"
  Const        r56, "l"
  Const        r57, "l_extendedprice"
  Const        r58, "l_discount"
  // from o in valid_orders
  MakeMap      r59, 0, r0
  Const        r61, []
  Move         r60, r61
  IterPrep     r62, r18
  Len          r63, r62
  Const        r64, 0
L16:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L11
  Index        r66, r62, r64
  Move         r29, r66
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  IterPrep     r67, r39
  Len          r68, r67
  Const        r69, 0
L15:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L12
  Index        r71, r67, r69
  Move         r46, r71
  Index        r72, r46, r53
  Index        r73, r29, r51
  Equal        r74, r72, r73
  JumpIfFalse  r74, L13
  // from o in valid_orders
  Const        r75, "o"
  Move         r76, r29
  Move         r77, r46
  Move         r78, r75
  Move         r79, r76
  Move         r80, r56
  Move         r81, r77
  MakeMap      r82, 2, r78
  // o_orderkey: o.o_orderkey,
  Const        r83, "o_orderkey"
  Index        r84, r29, r51
  // o_orderdate: o.o_orderdate,
  Const        r85, "o_orderdate"
  Index        r86, r29, r25
  // o_shippriority: o.o_shippriority
  Const        r87, "o_shippriority"
  Index        r88, r29, r52
  // o_orderkey: o.o_orderkey,
  Move         r89, r83
  Move         r90, r84
  // o_orderdate: o.o_orderdate,
  Move         r91, r85
  Move         r92, r86
  // o_shippriority: o.o_shippriority
  Move         r93, r87
  Move         r94, r88
  // group by {
  MakeMap      r95, 3, r89
  Str          r96, r95
  In           r97, r96, r59
  JumpIfTrue   r97, L14
  // from o in valid_orders
  Const        r98, []
  Const        r99, "__group__"
  Const        r100, true
  // group by {
  Move         r101, r95
  // from o in valid_orders
  Const        r102, "items"
  Move         r103, r98
  Const        r104, "count"
  Move         r105, r99
  Move         r106, r100
  Move         r107, r54
  Move         r108, r101
  Move         r109, r102
  Move         r110, r103
  Move         r111, r104
  Move         r112, r10
  MakeMap      r113, 4, r105
  SetIndex     r59, r96, r113
  Append       r114, r60, r113
  Move         r60, r114
L14:
  Index        r115, r59, r96
  Index        r116, r115, r102
  Append       r117, r116, r82
  SetIndex     r115, r102, r117
  Index        r118, r115, r104
  AddInt       r119, r118, r17
  SetIndex     r115, r104, r119
L13:
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  AddInt       r69, r69, r17
  Jump         L15
L12:
  // from o in valid_orders
  AddInt       r64, r64, r17
  Jump         L16
L11:
  Move         r120, r10
  Len          r121, r60
L22:
  LessInt      r122, r120, r121
  JumpIfFalse  r122, L17
  Index        r123, r60, r120
  Move         r124, r123
  // l_orderkey: g.key.o_orderkey,
  Const        r125, "l_orderkey"
  Index        r126, r124, r54
  Index        r127, r126, r51
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r128, "revenue"
  Const        r129, []
  IterPrep     r130, r124
  Len          r131, r130
  Move         r132, r10
L19:
  LessInt      r133, r132, r131
  JumpIfFalse  r133, L18
  Index        r134, r130, r132
  Move         r135, r134
  Index        r136, r135, r56
  Index        r137, r136, r57
  Index        r138, r135, r56
  Index        r139, r138, r58
  Sub          r140, r17, r139
  Mul          r141, r137, r140
  Append       r142, r129, r141
  Move         r129, r142
  AddInt       r132, r132, r17
  Jump         L19
L18:
  Sum          r143, r129
  // o_orderdate: g.key.o_orderdate,
  Const        r144, "o_orderdate"
  Index        r145, r124, r54
  Index        r146, r145, r25
  // o_shippriority: g.key.o_shippriority
  Const        r147, "o_shippriority"
  Index        r148, r124, r54
  Index        r149, r148, r52
  // l_orderkey: g.key.o_orderkey,
  Move         r150, r125
  Move         r151, r127
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Move         r152, r128
  Move         r153, r143
  // o_orderdate: g.key.o_orderdate,
  Move         r154, r144
  Move         r155, r146
  // o_shippriority: g.key.o_shippriority
  Move         r156, r147
  Move         r157, r149
  // select {
  MakeMap      r158, 4, r150
  // -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r159, []
  IterPrep     r160, r124
  Len          r161, r160
  Move         r162, r10
L21:
  LessInt      r163, r162, r161
  JumpIfFalse  r163, L20
  Index        r164, r160, r162
  Move         r135, r164
  Index        r165, r135, r56
  Index        r166, r165, r57
  Index        r167, r135, r56
  Index        r168, r167, r58
  Sub          r169, r17, r168
  Mul          r170, r166, r169
  Append       r171, r159, r170
  Move         r159, r171
  AddInt       r162, r162, r17
  Jump         L21
L20:
  Sum          r172, r159
  Neg          r173, r172
  Move         r174, r173
  // g.key.o_orderdate
  Index        r175, r124, r54
  Index        r176, r175, r25
  Move         r177, r176
  // sort by [
  MakeList     r178, 2, r174
  Move         r179, r178
  // from o in valid_orders
  Move         r180, r158
  MakeList     r181, 2, r179
  Append       r182, r50, r181
  Move         r50, r182
  AddInt       r120, r120, r17
  Jump         L22
L17:
  // sort by [
  Sort         r183, r50
  // from o in valid_orders
  Move         r50, r183
  // json(order_line_join)
  JSON         r50
  // l_orderkey: 100,
  Const        r184, "l_orderkey"
  Const        r185, 100
  // revenue: 1000.0 * 0.95 + 500.0,
  Const        r186, "revenue"
  Const        r187, 1000
  Const        r188, 0.95
  Const        r189, 950
  Const        r190, 500
  Const        r191, 1450
  // o_orderdate: "1995-03-14",
  Const        r192, "o_orderdate"
  Const        r193, "1995-03-14"
  // o_shippriority: 1
  Const        r194, "o_shippriority"
  // l_orderkey: 100,
  Move         r195, r184
  Move         r196, r185
  // revenue: 1000.0 * 0.95 + 500.0,
  Move         r197, r186
  Move         r198, r191
  // o_orderdate: "1995-03-14",
  Move         r199, r192
  Move         r200, r193
  // o_shippriority: 1
  Move         r201, r194
  Move         r202, r17
  // {
  MakeMap      r203, 4, r195
  Move         r204, r203
  // expect order_line_join == [
  MakeList     r205, 1, r204
  Equal        r206, r50, r205
  Expect       r206
  Return       r0
