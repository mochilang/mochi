func main (regs=320)
L3:
  // let customer = [
  Const        r0, [{"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}]
  // let orders = [
  Const        r1, [{"o_custkey": 1, "o_orderdate": "1995-03-14", "o_orderkey": 100, "o_shippriority": 1}, {"o_custkey": 2, "o_orderdate": "1995-03-10", "o_orderkey": 200, "o_shippriority": 2}]
  // let lineitem = [
  Const        r2, [{"l_discount": 0.05, "l_extendedprice": 1000, "l_orderkey": 100, "l_shipdate": "1995-03-16"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 100, "l_shipdate": "1995-03-20"}, {"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 200, "l_shipdate": "1995-03-14"}]
  // let cutoff = "1995-03-15"
  Const        r3, "1995-03-15"
  // let segment = "BUILDING"
  Const        r4, "BUILDING"
  // from c in customer
  Const        r5, []
  // where c.c_mktsegment == segment
  Const        r6, "c_mktsegment"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
L2:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // where c.c_mktsegment == segment
  Const        r14, "c_mktsegment"
  Index        r15, r13, r14
  Equal        r16, r15, r4
  JumpIfFalse  r16, L1
  // from c in customer
  Append       r5, r5, r13
L1:
  Const        r18, 1
  AddInt       r9, r9, r18
  Jump         L2
L0:
  // from o in orders
  Const        r19, []
  IterPrep     r20, r1
  Len          r21, r20
  // join c in building_customers on o.o_custkey == c.c_custkey
  IterPrep     r22, r5
  Len          r23, r22
  // from o in orders
  Const        r24, 0
  EqualInt     r25, r21, r24
  JumpIfTrue   r25, L3
  EqualInt     r26, r23, r24
  JumpIfTrue   r26, L3
  LessEq       r27, r23, r21
  JumpIfFalse  r27, L4
  // join c in building_customers on o.o_custkey == c.c_custkey
  MakeMap      r28, 0, r0
  Const        r29, 0
L7:
  LessInt      r30, r29, r23
  JumpIfFalse  r30, L5
  Index        r31, r22, r29
  Move         r13, r31
  Const        r32, "c_custkey"
  Index        r33, r13, r32
  Index        r34, r28, r33
  Const        r35, nil
  NotEqual     r36, r34, r35
  JumpIfTrue   r36, L6
  MakeList     r37, 0, r0
  SetIndex     r28, r33, r37
L6:
  Index        r34, r28, r33
  Append       r38, r34, r31
  SetIndex     r28, r33, r38
  Const        r39, 1
  AddInt       r29, r29, r39
  Jump         L7
L5:
  // from o in orders
  Const        r40, 0
L11:
  LessInt      r41, r40, r21
  JumpIfFalse  r41, L3
  Index        r43, r20, r40
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r44, "o_custkey"
  Index        r45, r43, r44
  // from o in orders
  Index        r46, r28, r45
  Const        r47, nil
  NotEqual     r48, r46, r47
  JumpIfFalse  r48, L8
  Len          r49, r46
  Const        r50, 0
L10:
  LessInt      r51, r50, r49
  JumpIfFalse  r51, L8
  Index        r13, r46, r50
  // where o.o_orderdate < cutoff
  Const        r53, "o_orderdate"
  Index        r54, r43, r53
  Less         r55, r54, r3
  JumpIfFalse  r55, L9
  // from o in orders
  Append       r19, r19, r43
L9:
  Const        r57, 1
  AddInt       r50, r50, r57
  Jump         L10
L8:
  Const        r58, 1
  AddInt       r40, r40, r58
  Jump         L11
L4:
  MakeMap      r59, 0, r0
  Const        r60, 0
L14:
  LessInt      r61, r60, r21
  JumpIfFalse  r61, L12
  Index        r62, r20, r60
  Move         r43, r62
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r63, "o_custkey"
  Index        r64, r43, r63
  // from o in orders
  Index        r65, r59, r64
  Const        r66, nil
  NotEqual     r67, r65, r66
  JumpIfTrue   r67, L13
  MakeList     r68, 0, r0
  SetIndex     r59, r64, r68
L13:
  Index        r65, r59, r64
  Append       r69, r65, r62
  SetIndex     r59, r64, r69
  Const        r70, 1
  AddInt       r60, r60, r70
  Jump         L14
L12:
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r71, 0
L19:
  LessInt      r72, r71, r23
  JumpIfFalse  r72, L15
  Index        r13, r22, r71
  Const        r74, "c_custkey"
  Index        r75, r13, r74
  Index        r76, r59, r75
  Const        r77, nil
  NotEqual     r78, r76, r77
  JumpIfFalse  r78, L16
  Len          r79, r76
  Const        r80, 0
L18:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L16
  Index        r43, r76, r80
  // where o.o_orderdate < cutoff
  Const        r83, "o_orderdate"
  Index        r84, r43, r83
  Less         r85, r84, r3
  JumpIfFalse  r85, L17
  // from o in orders
  Append       r19, r19, r43
L17:
  // join c in building_customers on o.o_custkey == c.c_custkey
  Const        r87, 1
  AddInt       r80, r80, r87
  Jump         L18
L16:
  Const        r88, 1
  AddInt       r71, r71, r88
  Jump         L19
L15:
  // from l in lineitem
  Const        r89, []
  // where l.l_shipdate > cutoff
  Const        r90, "l_shipdate"
  // from l in lineitem
  IterPrep     r91, r2
  Len          r92, r91
  Const        r93, 0
L22:
  LessInt      r95, r93, r92
  JumpIfFalse  r95, L20
  Index        r97, r91, r93
  // where l.l_shipdate > cutoff
  Const        r98, "l_shipdate"
  Index        r99, r97, r98
  Less         r100, r3, r99
  JumpIfFalse  r100, L21
  // from l in lineitem
  Append       r89, r89, r97
L21:
  Const        r102, 1
  AddInt       r93, r93, r102
  Jump         L22
L20:
  // from o in valid_orders
  Const        r103, []
  // o_orderkey: o.o_orderkey,
  Const        r104, "o_orderkey"
  Const        r105, "o_orderkey"
  // o_orderdate: o.o_orderdate,
  Const        r106, "o_orderdate"
  Const        r107, "o_orderdate"
  // o_shippriority: o.o_shippriority
  Const        r108, "o_shippriority"
  Const        r109, "o_shippriority"
  // l_orderkey: g.key.o_orderkey,
  Const        r110, "l_orderkey"
  Const        r111, "key"
  Const        r112, "o_orderkey"
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r113, "revenue"
  Const        r114, "l"
  Const        r115, "l_extendedprice"
  Const        r116, "l"
  Const        r117, "l_discount"
  // o_orderdate: g.key.o_orderdate,
  Const        r118, "o_orderdate"
  Const        r119, "key"
  Const        r120, "o_orderdate"
  // o_shippriority: g.key.o_shippriority
  Const        r121, "o_shippriority"
  Const        r122, "key"
  Const        r123, "o_shippriority"
  // -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r124, "l"
  Const        r125, "l_extendedprice"
  Const        r126, "l"
  Const        r127, "l_discount"
  // g.key.o_orderdate
  Const        r128, "key"
  Const        r129, "o_orderdate"
  // from o in valid_orders
  MakeMap      r130, 0, r0
  Const        r131, []
  IterPrep     r133, r19
  Len          r134, r133
  Const        r135, 0
L28:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L23
  Index        r43, r133, r135
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  IterPrep     r138, r89
  Len          r139, r138
  Const        r140, 0
L27:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L24
  Index        r97, r138, r140
  Const        r143, "l_orderkey"
  Index        r144, r97, r143
  Const        r145, "o_orderkey"
  Index        r146, r43, r145
  Equal        r147, r144, r146
  JumpIfFalse  r147, L25
  // from o in valid_orders
  Const        r148, "o"
  Move         r149, r43
  Const        r150, "l"
  Move         r151, r97
  MakeMap      r152, 2, r148
  // o_orderkey: o.o_orderkey,
  Const        r153, "o_orderkey"
  Const        r154, "o_orderkey"
  Index        r155, r43, r154
  // o_orderdate: o.o_orderdate,
  Const        r156, "o_orderdate"
  Const        r157, "o_orderdate"
  Index        r158, r43, r157
  // o_shippriority: o.o_shippriority
  Const        r159, "o_shippriority"
  Const        r160, "o_shippriority"
  Index        r161, r43, r160
  // o_orderkey: o.o_orderkey,
  Move         r162, r153
  Move         r163, r155
  // o_orderdate: o.o_orderdate,
  Move         r164, r156
  Move         r165, r158
  // o_shippriority: o.o_shippriority
  Move         r166, r159
  Move         r167, r161
  // group by {
  MakeMap      r168, 3, r162
  Str          r169, r168
  In           r170, r169, r130
  JumpIfTrue   r170, L26
  // from o in valid_orders
  Const        r171, []
  Const        r172, "__group__"
  Const        r173, true
  Const        r174, "key"
  // group by {
  Move         r175, r168
  // from o in valid_orders
  Const        r176, "items"
  Move         r177, r171
  Const        r178, "count"
  Const        r179, 0
  Move         r180, r172
  Move         r181, r173
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  Move         r185, r177
  Move         r186, r178
  Move         r187, r179
  MakeMap      r188, 4, r180
  SetIndex     r130, r169, r188
  Append       r131, r131, r188
L26:
  Const        r190, "items"
  Index        r191, r130, r169
  Index        r192, r191, r190
  Append       r193, r192, r152
  SetIndex     r191, r190, r193
  Const        r194, "count"
  Index        r195, r191, r194
  Const        r196, 1
  AddInt       r197, r195, r196
  SetIndex     r191, r194, r197
L25:
  // join l in valid_lineitems on l.l_orderkey == o.o_orderkey
  Const        r198, 1
  AddInt       r140, r140, r198
  Jump         L27
L24:
  // from o in valid_orders
  Const        r199, 1
  AddInt       r135, r135, r199
  Jump         L28
L23:
  Const        r200, 0
  Len          r202, r131
L34:
  LessInt      r203, r200, r202
  JumpIfFalse  r203, L29
  Index        r205, r131, r200
  // l_orderkey: g.key.o_orderkey,
  Const        r206, "l_orderkey"
  Const        r207, "key"
  Index        r208, r205, r207
  Const        r209, "o_orderkey"
  Index        r210, r208, r209
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r211, "revenue"
  Const        r212, []
  Const        r213, "l"
  Const        r214, "l_extendedprice"
  Const        r215, "l"
  Const        r216, "l_discount"
  IterPrep     r217, r205
  Len          r218, r217
  Const        r219, 0
L31:
  LessInt      r221, r219, r218
  JumpIfFalse  r221, L30
  Index        r223, r217, r219
  Const        r224, "l"
  Index        r225, r223, r224
  Const        r226, "l_extendedprice"
  Index        r227, r225, r226
  Const        r228, 1
  Const        r229, "l"
  Index        r230, r223, r229
  Const        r231, "l_discount"
  Index        r232, r230, r231
  Sub          r233, r228, r232
  Mul          r234, r227, r233
  Append       r212, r212, r234
  Const        r236, 1
  AddInt       r219, r219, r236
  Jump         L31
L30:
  Sum          r237, r212
  // o_orderdate: g.key.o_orderdate,
  Const        r238, "o_orderdate"
  Const        r239, "key"
  Index        r240, r205, r239
  Const        r241, "o_orderdate"
  Index        r242, r240, r241
  // o_shippriority: g.key.o_shippriority
  Const        r243, "o_shippriority"
  Const        r244, "key"
  Index        r245, r205, r244
  Const        r246, "o_shippriority"
  Index        r247, r245, r246
  // l_orderkey: g.key.o_orderkey,
  Move         r248, r206
  Move         r249, r210
  // revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Move         r250, r211
  Move         r251, r237
  // o_orderdate: g.key.o_orderdate,
  Move         r252, r238
  Move         r253, r242
  // o_shippriority: g.key.o_shippriority
  Move         r254, r243
  Move         r255, r247
  // select {
  MakeMap      r256, 4, r248
  // -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
  Const        r257, []
  Const        r258, "l"
  Const        r259, "l_extendedprice"
  Const        r260, "l"
  Const        r261, "l_discount"
  IterPrep     r262, r205
  Len          r263, r262
  Const        r264, 0
L33:
  LessInt      r266, r264, r263
  JumpIfFalse  r266, L32
  Index        r223, r262, r264
  Const        r268, "l"
  Index        r269, r223, r268
  Const        r270, "l_extendedprice"
  Index        r271, r269, r270
  Const        r272, 1
  Const        r273, "l"
  Index        r274, r223, r273
  Const        r275, "l_discount"
  Index        r276, r274, r275
  Sub          r277, r272, r276
  Mul          r278, r271, r277
  Append       r257, r257, r278
  Const        r280, 1
  AddInt       r264, r264, r280
  Jump         L33
L32:
  Sum          r281, r257
  Neg          r283, r281
  // g.key.o_orderdate
  Const        r284, "key"
  Index        r285, r205, r284
  Const        r286, "o_orderdate"
  Index        r288, r285, r286
  // sort by [
  MakeList     r290, 2, r283
  // from o in valid_orders
  Move         r291, r256
  MakeList     r292, 2, r290
  Append       r103, r103, r292
  Const        r294, 1
  AddInt       r200, r200, r294
  Jump         L34
L29:
  // sort by [
  Sort         r103, r103
  // json(order_line_join)
  JSON         r103
  // l_orderkey: 100,
  Const        r296, "l_orderkey"
  Const        r297, 100
  // revenue: 1000.0 * 0.95 + 500.0,
  Const        r298, "revenue"
  Const        r299, 1000
  Const        r300, 0.95
  Const        r301, 950
  Const        r302, 500
  Const        r303, 1450
  // o_orderdate: "1995-03-14",
  Const        r304, "o_orderdate"
  Const        r305, "1995-03-14"
  // o_shippriority: 1
  Const        r306, "o_shippriority"
  Const        r307, 1
  // l_orderkey: 100,
  Move         r308, r296
  Move         r309, r297
  // revenue: 1000.0 * 0.95 + 500.0,
  Move         r310, r298
  Move         r311, r303
  // o_orderdate: "1995-03-14",
  Move         r312, r304
  Move         r313, r305
  // o_shippriority: 1
  Move         r314, r306
  Move         r315, r307
  // {
  MakeMap      r317, 4, r308
  // expect order_line_join == [
  MakeList     r318, 1, r317
  Equal        r319, r103, r318
  Expect       r319
  Return       r0
