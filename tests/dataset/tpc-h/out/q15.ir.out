func main (regs=226)
L11:
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  // let start_date = "1996-01-01"
  Const        r2, "1996-01-01"
  // let end_date = "1996-04-01"
  Const        r3, "1996-04-01"
  // from l in lineitem
  Const        r4, []
  // group by l.l_suppkey into g
  Const        r5, "l_suppkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r6, "l_shipdate"
  // supplier_no: g.key,
  Const        r7, "supplier_no"
  Const        r8, "key"
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r9, "total_revenue"
  Const        r10, "l_extendedprice"
  Const        r11, "l_discount"
  // from l in lineitem
  IterPrep     r12, r1
  Len          r13, r12
  Const        r14, 0
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
L4:
  LessInt      r18, r14, r13
  JumpIfFalse  r18, L0
  Index        r19, r12, r14
  Move         r20, r19
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r21, r20, r6
  LessEq       r22, r2, r21
  Index        r23, r20, r6
  Less         r24, r23, r3
  JumpIfFalse  r22, L1
  Move         r22, r24
L1:
  JumpIfFalse  r22, L2
  // group by l.l_suppkey into g
  Index        r25, r20, r5
  Str          r26, r25
  In           r27, r26, r15
  JumpIfTrue   r27, L3
  // from l in lineitem
  Const        r28, "__group__"
  Const        r29, true
  // group by l.l_suppkey into g
  Move         r30, r25
  // from l in lineitem
  Const        r31, "items"
  Move         r32, r17
  Const        r33, "count"
  Const        r34, 0
  Move         r35, r28
  Move         r36, r29
  Move         r37, r8
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  MakeMap      r43, 4, r35
  SetIndex     r15, r26, r43
  Append       r16, r16, r43
L3:
  Index        r45, r15, r26
  Index        r46, r45, r31
  Append       r47, r46, r19
  SetIndex     r45, r31, r47
  Index        r48, r45, r33
  Const        r49, 1
  AddInt       r50, r48, r49
  SetIndex     r45, r33, r50
L2:
  AddInt       r14, r14, r49
  Jump         L4
L0:
  Move         r51, r34
  Len          r52, r16
L8:
  LessInt      r53, r51, r52
  JumpIfFalse  r53, L5
  Index        r55, r16, r51
  // supplier_no: g.key,
  Const        r56, "supplier_no"
  Index        r57, r55, r8
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r58, "total_revenue"
  Const        r59, []
  IterPrep     r60, r55
  Len          r61, r60
  Move         r62, r34
L7:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L6
  Index        r65, r60, r62
  Index        r66, r65, r10
  Index        r67, r65, r11
  Sub          r68, r49, r67
  Mul          r69, r66, r68
  Append       r59, r59, r69
  AddInt       r62, r62, r49
  Jump         L7
L6:
  Sum          r71, r59
  // supplier_no: g.key,
  Move         r72, r56
  Move         r73, r57
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Move         r74, r58
  Move         r75, r71
  // select {
  MakeMap      r76, 2, r72
  // from l in lineitem
  Append       r4, r4, r76
  AddInt       r51, r51, r49
  Jump         L8
L5:
  // let revenues = from x in revenue0 select x.total_revenue
  Const        r78, []
  IterPrep     r79, r4
  Len          r80, r79
  Move         r81, r34
L10:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L9
  Index        r65, r79, r81
  Index        r84, r65, r9
  Append       r78, r78, r84
  AddInt       r81, r81, r49
  Jump         L10
L9:
  // let max_revenue = max(revenues)
  Max          r86, r78
  // let result = from s in supplier
  Const        r87, []
  IterPrep     r88, r0
  Len          r89, r88
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r90, r4
  Len          r91, r90
  // let result = from s in supplier
  EqualInt     r92, r89, r34
  JumpIfTrue   r92, L11
  EqualInt     r93, r91, r34
  JumpIfTrue   r93, L11
  LessEq       r94, r91, r89
  JumpIfFalse  r94, L12
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  MakeMap      r95, 0, r0
  Const        r96, 0
L15:
  LessInt      r97, r96, r91
  JumpIfFalse  r97, L13
  Index        r98, r90, r96
  Index        r100, r98, r7
  Index        r101, r95, r100
  Const        r102, nil
  NotEqual     r103, r101, r102
  JumpIfTrue   r103, L14
  MakeList     r104, 0, r0
  SetIndex     r95, r100, r104
L14:
  Index        r101, r95, r100
  Append       r105, r101, r98
  SetIndex     r95, r100, r105
  AddInt       r96, r96, r49
  Jump         L15
L13:
  // let result = from s in supplier
  Const        r106, 0
L19:
  LessInt      r107, r106, r89
  JumpIfFalse  r107, L11
  Index        r109, r88, r106
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r110, "s_suppkey"
  Index        r111, r109, r110
  // let result = from s in supplier
  Index        r112, r95, r111
  NotEqual     r113, r112, r102
  JumpIfFalse  r113, L16
  Len          r114, r112
  Const        r115, 0
L18:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L16
  Index        r99, r112, r115
  // where r.total_revenue == max_revenue
  Index        r118, r99, r9
  Equal        r119, r118, r86
  JumpIfFalse  r119, L17
  // s_suppkey: s.s_suppkey,
  Const        r120, "s_suppkey"
  Index        r121, r109, r110
  // s_name: s.s_name,
  Const        r122, "s_name"
  Const        r123, "s_name"
  Index        r124, r109, r123
  // s_address: s.s_address,
  Const        r125, "s_address"
  Const        r126, "s_address"
  Index        r127, r109, r126
  // s_phone: s.s_phone,
  Const        r128, "s_phone"
  Const        r129, "s_phone"
  Index        r130, r109, r129
  // total_revenue: r.total_revenue
  Const        r131, "total_revenue"
  Index        r132, r99, r9
  // s_suppkey: s.s_suppkey,
  Move         r133, r120
  Move         r134, r121
  // s_name: s.s_name,
  Move         r135, r122
  Move         r136, r124
  // s_address: s.s_address,
  Move         r137, r125
  Move         r138, r127
  // s_phone: s.s_phone,
  Move         r139, r128
  Move         r140, r130
  // total_revenue: r.total_revenue
  Move         r141, r131
  Move         r142, r132
  // select {
  MakeMap      r143, 5, r133
  // sort by s.s_suppkey
  Index        r145, r109, r110
  // let result = from s in supplier
  Move         r146, r143
  MakeList     r147, 2, r145
  Append       r87, r87, r147
L17:
  AddInt       r115, r115, r49
  Jump         L18
L16:
  AddInt       r106, r106, r49
  Jump         L19
L12:
  MakeMap      r149, 0, r0
  Const        r150, 0
L22:
  LessInt      r151, r150, r89
  JumpIfFalse  r151, L20
  Index        r152, r88, r150
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Index        r153, r152, r110
  // let result = from s in supplier
  Index        r154, r149, r153
  NotEqual     r155, r154, r102
  JumpIfTrue   r155, L21
  MakeList     r156, 0, r0
  SetIndex     r149, r153, r156
L21:
  Index        r154, r149, r153
  Append       r157, r154, r152
  SetIndex     r149, r153, r157
  AddInt       r150, r150, r49
  Jump         L22
L20:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r158, 0
L27:
  LessInt      r159, r158, r91
  JumpIfFalse  r159, L23
  Index        r99, r90, r158
  Index        r161, r99, r7
  Index        r162, r149, r161
  NotEqual     r163, r162, r102
  JumpIfFalse  r163, L24
  Len          r164, r162
  Const        r165, 0
L26:
  LessInt      r166, r165, r164
  JumpIfFalse  r166, L24
  Index        r109, r162, r165
  // where r.total_revenue == max_revenue
  Index        r168, r99, r9
  Equal        r169, r168, r86
  JumpIfFalse  r169, L25
  // s_suppkey: s.s_suppkey,
  Const        r170, "s_suppkey"
  Index        r171, r109, r110
  // s_name: s.s_name,
  Const        r172, "s_name"
  Index        r173, r109, r123
  // s_address: s.s_address,
  Const        r174, "s_address"
  Index        r175, r109, r126
  // s_phone: s.s_phone,
  Const        r176, "s_phone"
  Index        r177, r109, r129
  // total_revenue: r.total_revenue
  Const        r178, "total_revenue"
  Index        r179, r99, r9
  // s_suppkey: s.s_suppkey,
  Move         r180, r170
  Move         r181, r171
  // s_name: s.s_name,
  Move         r182, r172
  Move         r183, r173
  // s_address: s.s_address,
  Move         r184, r174
  Move         r185, r175
  // s_phone: s.s_phone,
  Move         r186, r176
  Move         r187, r177
  // total_revenue: r.total_revenue
  Move         r188, r178
  Move         r189, r179
  // select {
  MakeMap      r190, 5, r180
  // sort by s.s_suppkey
  Index        r192, r109, r110
  // let result = from s in supplier
  Move         r193, r190
  MakeList     r194, 2, r192
  Append       r87, r87, r194
L25:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  AddInt       r165, r165, r49
  Jump         L26
L24:
  AddInt       r158, r158, r49
  Jump         L27
L23:
  // sort by s.s_suppkey
  Sort         r87, r87
  // json(result)
  JSON         r87
  // let rev = 1000.0 * 0.9 + 500.0
  Const        r197, 1000
  Const        r198, 0.9
  Const        r199, 900
  Const        r200, 500
  Const        r201, 1400
  // s_suppkey: 100,
  Const        r202, "s_suppkey"
  Const        r203, 100
  // s_name: "Best Supplier",
  Const        r204, "s_name"
  Const        r205, "Best Supplier"
  // s_address: "123 Market St",
  Const        r206, "s_address"
  Const        r207, "123 Market St"
  // s_phone: "123-456",
  Const        r208, "s_phone"
  Const        r209, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r210, "total_revenue"
  Const        r211, 1400
  // s_suppkey: 100,
  Move         r212, r202
  Move         r213, r203
  // s_name: "Best Supplier",
  Move         r214, r204
  Move         r215, r205
  // s_address: "123 Market St",
  Move         r216, r206
  Move         r217, r207
  // s_phone: "123-456",
  Move         r218, r208
  Move         r219, r209
  // total_revenue: rev // 900 + 500 = 1400
  Move         r220, r210
  Move         r221, r211
  // {
  MakeMap      r223, 5, r212
  // expect result == [
  MakeList     r224, 1, r223
  Equal        r225, r87, r224
  Expect       r225
  Return       r0

