func main (regs=167)
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  // let start_date = "1996-01-01"
  Const        r2, "1996-01-01"
  // let end_date = "1996-04-01"
  Const        r3, "1996-04-01"
  // from l in lineitem
  Const        r4, []
  // group by l.l_suppkey into g
  Const        r5, "l_suppkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r6, "l_shipdate"
  // supplier_no: g.key,
  Const        r7, "supplier_no"
  Const        r8, "key"
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r9, "total_revenue"
  Const        r10, "l_extendedprice"
  Const        r11, "l_discount"
  // from l in lineitem
  IterPrep     r12, r1
  Len          r13, r12
  Const        r14, 0
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
L4:
  LessInt      r18, r14, r13
  JumpIfFalse  r18, L0
  Index        r19, r12, r14
  Move         r20, r19
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r21, r20, r6
  LessEq       r22, r2, r21
  Index        r23, r20, r6
  Less         r24, r23, r3
  Move         r25, r22
  JumpIfFalse  r25, L1
  Move         r25, r24
L1:
  JumpIfFalse  r25, L2
  // group by l.l_suppkey into g
  Index        r26, r20, r5
  Str          r27, r26
  In           r28, r27, r15
  JumpIfTrue   r28, L3
  // from l in lineitem
  Const        r29, []
  Const        r30, "__group__"
  Const        r31, true
  // group by l.l_suppkey into g
  Move         r32, r26
  // from l in lineitem
  Const        r33, "items"
  Move         r34, r29
  Const        r35, "count"
  Const        r36, 0
  Move         r37, r30
  Move         r38, r31
  Move         r39, r8
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  Move         r44, r36
  MakeMap      r45, 4, r37
  SetIndex     r15, r27, r45
  Append       r46, r16, r45
  Move         r16, r46
L3:
  Index        r47, r15, r27
  Index        r48, r47, r33
  Append       r49, r48, r19
  SetIndex     r47, r33, r49
  Index        r50, r47, r35
  Const        r51, 1
  AddInt       r52, r50, r51
  SetIndex     r47, r35, r52
L2:
  AddInt       r14, r14, r51
  Jump         L4
L0:
  Move         r53, r36
  Len          r54, r16
L8:
  LessInt      r55, r53, r54
  JumpIfFalse  r55, L5
  Index        r56, r16, r53
  Move         r57, r56
  // supplier_no: g.key,
  Const        r58, "supplier_no"
  Index        r59, r57, r8
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r60, "total_revenue"
  Const        r61, []
  IterPrep     r62, r57
  Len          r63, r62
  Move         r64, r36
L7:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L6
  Index        r66, r62, r64
  Move         r67, r66
  Index        r68, r67, r10
  Index        r69, r67, r11
  Sub          r70, r51, r69
  Mul          r71, r68, r70
  Append       r72, r61, r71
  Move         r61, r72
  AddInt       r64, r64, r51
  Jump         L7
L6:
  Sum          r73, r61
  // supplier_no: g.key,
  Move         r74, r58
  Move         r75, r59
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Move         r76, r60
  Move         r77, r73
  // select {
  MakeMap      r78, 2, r74
  // from l in lineitem
  Append       r79, r4, r78
  Move         r4, r79
  AddInt       r53, r53, r51
  Jump         L8
L5:
  // let revenues = from x in revenue0 select x.total_revenue
  Const        r80, []
  IterPrep     r81, r4
  Len          r82, r81
  Move         r83, r36
L10:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L9
  Index        r85, r81, r83
  Move         r67, r85
  Index        r86, r67, r9
  Append       r87, r80, r86
  Move         r80, r87
  AddInt       r83, r83, r51
  Jump         L10
L9:
  // let max_revenue = max(revenues)
  Max          r88, r80
  // let result = from s in supplier
  Const        r89, []
  IterPrep     r90, r0
  Len          r91, r90
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r92, r4
  Len          r93, r92
  Const        r94, "s_suppkey"
  // s_name: s.s_name,
  Const        r95, "s_name"
  // s_address: s.s_address,
  Const        r96, "s_address"
  // s_phone: s.s_phone,
  Const        r97, "s_phone"
  // let result = from s in supplier
  Const        r98, 0
L15:
  LessInt      r99, r98, r91
  JumpIfFalse  r99, L11
  Index        r100, r90, r98
  Move         r101, r100
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r102, 0
L14:
  LessInt      r103, r102, r93
  JumpIfFalse  r103, L12
  Index        r104, r92, r102
  Move         r105, r104
  Index        r106, r101, r94
  Index        r107, r105, r7
  Equal        r108, r106, r107
  JumpIfFalse  r108, L13
  // where r.total_revenue == max_revenue
  Index        r109, r105, r9
  Equal        r110, r109, r88
  JumpIfFalse  r110, L13
  // s_suppkey: s.s_suppkey,
  Const        r111, "s_suppkey"
  Index        r112, r101, r94
  // s_name: s.s_name,
  Const        r113, "s_name"
  Index        r114, r101, r95
  // s_address: s.s_address,
  Const        r115, "s_address"
  Index        r116, r101, r96
  // s_phone: s.s_phone,
  Const        r117, "s_phone"
  Index        r118, r101, r97
  // total_revenue: r.total_revenue
  Const        r119, "total_revenue"
  Index        r120, r105, r9
  // s_suppkey: s.s_suppkey,
  Move         r121, r111
  Move         r122, r112
  // s_name: s.s_name,
  Move         r123, r113
  Move         r124, r114
  // s_address: s.s_address,
  Move         r125, r115
  Move         r126, r116
  // s_phone: s.s_phone,
  Move         r127, r117
  Move         r128, r118
  // total_revenue: r.total_revenue
  Move         r129, r119
  Move         r130, r120
  // select {
  MakeMap      r131, 5, r121
  // sort by s.s_suppkey
  Index        r132, r101, r94
  Move         r133, r132
  // let result = from s in supplier
  Move         r134, r131
  MakeList     r135, 2, r133
  Append       r136, r89, r135
  Move         r89, r136
L13:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  AddInt       r102, r102, r51
  Jump         L14
L12:
  // let result = from s in supplier
  AddInt       r98, r98, r51
  Jump         L15
L11:
  // sort by s.s_suppkey
  Sort         r137, r89
  // let result = from s in supplier
  Move         r89, r137
  // json(result)
  JSON         r89
  // let rev = 1000.0 * 0.9 + 500.0
  Const        r138, 1000
  Const        r139, 0.9
  Const        r140, 900
  Const        r141, 500
  Const        r142, 1400
  // s_suppkey: 100,
  Const        r143, "s_suppkey"
  Const        r144, 100
  // s_name: "Best Supplier",
  Const        r145, "s_name"
  Const        r146, "Best Supplier"
  // s_address: "123 Market St",
  Const        r147, "s_address"
  Const        r148, "123 Market St"
  // s_phone: "123-456",
  Const        r149, "s_phone"
  Const        r150, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r151, "total_revenue"
  Const        r152, 1400
  // s_suppkey: 100,
  Move         r153, r143
  Move         r154, r144
  // s_name: "Best Supplier",
  Move         r155, r145
  Move         r156, r146
  // s_address: "123 Market St",
  Move         r157, r147
  Move         r158, r148
  // s_phone: "123-456",
  Move         r159, r149
  Move         r160, r150
  // total_revenue: rev // 900 + 500 = 1400
  Move         r161, r151
  Move         r162, r152
  // {
  MakeMap      r163, 5, r153
  Move         r164, r163
  // expect result == [
  MakeList     r165, 1, r164
  Equal        r166, r89, r165
  Expect       r166
  Return       r0
