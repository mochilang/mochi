func main (regs=214)
L20:
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  // let start_date = "1996-01-01"
  Const        r2, "1996-01-01"
  // let end_date = "1996-04-01"
  Const        r3, "1996-04-01"
  // from l in lineitem
  Const        r4, []
  // group by l.l_suppkey into g
  Const        r5, "l_suppkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r6, "l_shipdate"
  // supplier_no: g.key,
  Const        r7, "supplier_no"
  Const        r8, "key"
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r9, "total_revenue"
  Const        r10, "l_extendedprice"
  Const        r11, "l_discount"
  // from l in lineitem
  IterPrep     r12, r1
  Len          r13, r12
  Const        r14, 0
  MakeMap      r15, 0, r0
  Const        r16, []
L4:
  LessInt      r17, r14, r13
  JumpIfFalse  r17, L0
  Index        r18, r12, r14
  Move         r19, r18
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r20, r19, r6
  LessEq       r21, r2, r20
  Index        r22, r19, r6
  Less         r23, r22, r3
  Move         r24, r21
  JumpIfFalse  r24, L1
  Move         r24, r23
L1:
  JumpIfFalse  r24, L2
  // group by l.l_suppkey into g
  Index        r25, r19, r5
  Str          r26, r25
  In           r27, r26, r15
  JumpIfTrue   r27, L3
  // from l in lineitem
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  // group by l.l_suppkey into g
  Move         r31, r25
  // from l in lineitem
  Const        r32, "items"
  Move         r33, r28
  MakeMap      r34, 3, r29
  SetIndex     r15, r26, r34
  Append       r16, r16, r34
L3:
  Index        r36, r15, r26
  Index        r37, r36, r32
  Append       r38, r37, r18
  SetIndex     r36, r32, r38
L2:
  Const        r39, 1
  AddInt       r14, r14, r39
  Jump         L4
L0:
  Const        r41, 0
  Move         r40, r41
  Len          r42, r16
L8:
  LessInt      r43, r40, r42
  JumpIfFalse  r43, L5
  Index        r45, r16, r40
  // supplier_no: g.key,
  Const        r46, "supplier_no"
  Index        r47, r45, r8
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r48, "total_revenue"
  Const        r49, []
  IterPrep     r50, r45
  Len          r51, r50
  Move         r52, r41
L7:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L6
  Index        r55, r50, r52
  Index        r56, r55, r10
  Index        r57, r55, r11
  Sub          r58, r39, r57
  Mul          r59, r56, r58
  Append       r49, r49, r59
  AddInt       r52, r52, r39
  Jump         L7
L6:
  // select {
  MakeMap      r64, 2, r46
  // from l in lineitem
  Append       r4, r4, r64
  AddInt       r40, r40, r39
  Jump         L8
L5:
  // let revenues = from x in revenue0 select x.total_revenue
  Const        r66, []
  IterPrep     r67, r4
  Len          r68, r67
  Move         r69, r41
L10:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L9
  Index        r55, r67, r69
  Index        r72, r55, r9
  Append       r66, r66, r72
  AddInt       r69, r69, r39
  Jump         L10
L9:
  // let max_revenue = max(revenues)
  Max          r74, r66
  // let result = from s in supplier
  Const        r75, []
  IterPrep     r76, r0
  Len          r77, r76
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r78, r4
  Len          r79, r78
  // let result = from s in supplier
  Const        r80, 0
  EqualInt     r81, r77, r80
  JumpIfTrue   r81, L11
  EqualInt     r82, r79, r80
  JumpIfTrue   r82, L11
  LessEq       r83, r79, r77
  JumpIfFalse  r83, L12
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  MakeMap      r84, 0, r0
  Const        r85, 0
L15:
  Less         r86, r85, r79
  JumpIfFalse  r86, L13
  Index        r87, r78, r85
  Index        r89, r87, r7
  Index        r90, r84, r89
  Const        r91, nil
  NotEqual     r92, r90, r91
  JumpIfTrue   r92, L14
  MakeList     r93, 0, r0
  SetIndex     r84, r89, r93
L14:
  Index        r90, r84, r89
  Append       r94, r90, r87
  SetIndex     r84, r89, r94
  Const        r95, 1
  Add          r85, r85, r95
  Jump         L15
L13:
  // let result = from s in supplier
  Const        r97, 0
L19:
  Less         r98, r97, r77
  JumpIfFalse  r98, L11
  Index        r100, r76, r97
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r101, "s_suppkey"
  Index        r102, r100, r101
  // let result = from s in supplier
  Index        r103, r84, r102
  Const        r104, nil
  NotEqual     r105, r103, r104
  JumpIfFalse  r105, L16
  Len          r106, r103
  Const        r107, 0
L18:
  Less         r108, r107, r106
  JumpIfFalse  r108, L16
  Index        r88, r103, r107
  // where r.total_revenue == max_revenue
  Index        r110, r88, r9
  Equal        r111, r110, r74
  JumpIfFalse  r111, L17
  // s_suppkey: s.s_suppkey,
  Const        r112, "s_suppkey"
  Index        r113, r100, r101
  // s_name: s.s_name,
  Const        r114, "s_name"
  Const        r115, "s_name"
  Index        r116, r100, r115
  // s_address: s.s_address,
  Const        r117, "s_address"
  Const        r118, "s_address"
  Index        r119, r100, r118
  // s_phone: s.s_phone,
  Const        r120, "s_phone"
  Const        r121, "s_phone"
  // select {
  MakeMap      r130, 5, r112
  // sort by s.s_suppkey
  Index        r132, r100, r101
  // let result = from s in supplier
  Move         r133, r130
  MakeList     r134, 2, r132
  Append       r75, r75, r134
L17:
  Const        r136, 1
  Add          r107, r107, r136
  Jump         L18
L16:
  Const        r138, 1
  Add          r97, r97, r138
  Jump         L19
L11:
  Jump         L20
L12:
  MakeMap      r140, 0, r0
  Const        r141, 0
L23:
  Less         r142, r141, r77
  JumpIfFalse  r142, L21
  Index        r143, r76, r141
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Index        r144, r143, r101
  // let result = from s in supplier
  Index        r145, r140, r144
  Const        r146, nil
  NotEqual     r147, r145, r146
  JumpIfTrue   r147, L22
  MakeList     r148, 0, r0
  SetIndex     r140, r144, r148
L22:
  Index        r145, r140, r144
  Append       r149, r145, r143
  SetIndex     r140, r144, r149
  Const        r150, 1
  Add          r141, r141, r150
  Jump         L23
L21:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r152, 0
L28:
  Less         r153, r152, r79
  JumpIfFalse  r153, L24
  Index        r88, r78, r152
  Index        r155, r88, r7
  Index        r156, r140, r155
  Const        r157, nil
  NotEqual     r158, r156, r157
  JumpIfFalse  r158, L25
  Len          r159, r156
  Const        r160, 0
L27:
  Less         r161, r160, r159
  JumpIfFalse  r161, L25
  Index        r100, r156, r160
  // where r.total_revenue == max_revenue
  Index        r163, r88, r9
  Equal        r164, r163, r74
  JumpIfFalse  r164, L26
  // s_suppkey: s.s_suppkey,
  Const        r165, "s_suppkey"
  Index        r166, r100, r101
  // s_name: s.s_name,
  Const        r167, "s_name"
  Index        r168, r100, r115
  // s_address: s.s_address,
  Const        r169, "s_address"
  Index        r170, r100, r118
  // s_phone: s.s_phone,
  Const        r171, "s_phone"
  Index        r172, r100, r121
  // total_revenue: r.total_revenue
  Const        r173, "total_revenue"
  Index        r174, r88, r9
  // select {
  MakeMap      r180, 5, r165
  // sort by s.s_suppkey
  Index        r182, r100, r101
  // let result = from s in supplier
  Move         r183, r180
  MakeList     r184, 2, r182
  Append       r75, r75, r184
L26:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r186, 1
  Add          r160, r160, r186
  Jump         L27
L25:
  Const        r188, 1
  Add          r152, r152, r188
  Jump         L28
L24:
  // sort by s.s_suppkey
  Sort         r75, r75
  // json(result)
  JSON         r75
  // s_suppkey: 100,
  Const        r196, "s_suppkey"
  Const        r197, 100
  // s_name: "Best Supplier",
  Const        r198, "s_name"
  Const        r199, "Best Supplier"
  // s_address: "123 Market St",
  Const        r200, "s_address"
  Const        r201, "123 Market St"
  // s_phone: "123-456",
  Const        r202, "s_phone"
  Const        r203, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r204, "total_revenue"
  // s_suppkey: 100,
  Move         r205, r197
  // {
  MakeMap      r211, 5, r196
  // expect result == [
  MakeList     r212, 1, r211
  Equal        r213, r75, r212
  Expect       r213
  Return       r0
