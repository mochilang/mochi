func main (regs=231)
L11:
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  // let start_date = "1996-01-01"
  Const        r2, "1996-01-01"
  // let end_date = "1996-04-01"
  Const        r3, "1996-04-01"
  // from l in lineitem
  Const        r4, []
  // group by l.l_suppkey into g
  Const        r5, "l_suppkey"
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r6, "l_shipdate"
  // supplier_no: g.key,
  Const        r7, "supplier_no"
  Const        r8, "key"
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r9, "total_revenue"
  Const        r10, "l_extendedprice"
  Const        r11, "l_discount"
  // from l in lineitem
  IterPrep     r12, r1
  Len          r13, r12
  Const        r14, 0
  MakeMap      r15, 0, r0
  Const        r16, []
L4:
  LessInt      r18, r14, r13
  JumpIfFalse  r18, L0
  Index        r19, r12, r14
  Move         r20, r19
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r21, r20, r6
  LessEq       r22, r2, r21
  Index        r23, r20, r6
  Less         r24, r23, r3
  Move         r25, r22
  JumpIfFalse  r25, L1
  Move         r25, r24
L1:
  JumpIfFalse  r25, L2
  // group by l.l_suppkey into g
  Index        r26, r20, r5
  Str          r27, r26
  In           r28, r27, r15
  JumpIfTrue   r28, L3
  // from l in lineitem
  Const        r29, []
  Const        r30, "__group__"
  Const        r31, true
  Const        r32, "key"
  // group by l.l_suppkey into g
  Move         r33, r26
  // from l in lineitem
  Const        r34, "items"
  Move         r35, r29
  Const        r36, "count"
  Const        r37, 0
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  Move         r44, r36
  Move         r45, r37
  MakeMap      r46, 4, r38
  SetIndex     r15, r27, r46
  Append       r16, r16, r46
L3:
  Const        r48, "items"
  Index        r49, r15, r27
  Index        r50, r49, r48
  Append       r51, r50, r19
  SetIndex     r49, r48, r51
  Const        r52, "count"
  Index        r53, r49, r52
  Const        r54, 1
  AddInt       r55, r53, r54
  SetIndex     r49, r52, r55
L2:
  AddInt       r14, r14, r54
  Jump         L4
L0:
  Const        r57, 0
  Move         r56, r57
  Len          r58, r16
L8:
  LessInt      r59, r56, r58
  JumpIfFalse  r59, L5
  Index        r61, r16, r56
  // supplier_no: g.key,
  Const        r62, "supplier_no"
  Index        r63, r61, r8
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r64, "total_revenue"
  Const        r65, []
  IterPrep     r66, r61
  Len          r67, r66
  Move         r68, r57
L7:
  LessInt      r69, r68, r67
  JumpIfFalse  r69, L6
  Index        r71, r66, r68
  Index        r72, r71, r10
  Index        r73, r71, r11
  Sub          r74, r54, r73
  Mul          r75, r72, r74
  Append       r65, r65, r75
  AddInt       r68, r68, r54
  Jump         L7
L6:
  Sum          r77, r65
  // supplier_no: g.key,
  Move         r78, r62
  Move         r79, r63
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Move         r80, r64
  Move         r81, r77
  // select {
  MakeMap      r82, 2, r78
  // from l in lineitem
  Append       r4, r4, r82
  AddInt       r56, r56, r54
  Jump         L8
L5:
  // let revenues = from x in revenue0 select x.total_revenue
  Const        r84, []
  IterPrep     r85, r4
  Len          r86, r85
  Move         r87, r57
L10:
  LessInt      r88, r87, r86
  JumpIfFalse  r88, L9
  Index        r71, r85, r87
  Index        r90, r71, r9
  Append       r84, r84, r90
  AddInt       r87, r87, r54
  Jump         L10
L9:
  // let max_revenue = max(revenues)
  Max          r92, r84
  // let result = from s in supplier
  Const        r93, []
  IterPrep     r94, r0
  Len          r95, r94
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r96, r4
  Len          r97, r96
  // let result = from s in supplier
  EqualInt     r98, r95, r57
  JumpIfTrue   r98, L11
  EqualInt     r99, r97, r57
  JumpIfTrue   r99, L11
  LessEq       r100, r97, r95
  JumpIfFalse  r100, L12
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  MakeMap      r101, 0, r0
  Const        r102, 0
L15:
  LessInt      r103, r102, r97
  JumpIfFalse  r103, L13
  Index        r104, r96, r102
  Index        r106, r104, r7
  Index        r107, r101, r106
  Const        r108, nil
  NotEqual     r109, r107, r108
  JumpIfTrue   r109, L14
  MakeList     r110, 0, r0
  SetIndex     r101, r106, r110
L14:
  Index        r107, r101, r106
  Append       r111, r107, r104
  SetIndex     r101, r106, r111
  AddInt       r102, r102, r54
  Jump         L15
L13:
  // let result = from s in supplier
  Const        r112, 0
L19:
  LessInt      r113, r112, r95
  JumpIfFalse  r113, L11
  Index        r115, r94, r112
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r116, "s_suppkey"
  Index        r117, r115, r116
  // let result = from s in supplier
  Index        r118, r101, r117
  NotEqual     r119, r118, r108
  JumpIfFalse  r119, L16
  Len          r120, r118
  Const        r121, 0
L18:
  LessInt      r122, r121, r120
  JumpIfFalse  r122, L16
  Index        r105, r118, r121
  // where r.total_revenue == max_revenue
  Index        r124, r105, r9
  Equal        r125, r124, r92
  JumpIfFalse  r125, L17
  // s_suppkey: s.s_suppkey,
  Const        r126, "s_suppkey"
  Index        r127, r115, r116
  // s_name: s.s_name,
  Const        r128, "s_name"
  Const        r129, "s_name"
  Index        r130, r115, r129
  // s_address: s.s_address,
  Const        r131, "s_address"
  Const        r132, "s_address"
  Index        r133, r115, r132
  // s_phone: s.s_phone,
  Const        r134, "s_phone"
  Const        r135, "s_phone"
  Index        r136, r115, r135
  // total_revenue: r.total_revenue
  Const        r137, "total_revenue"
  Index        r138, r105, r9
  // s_suppkey: s.s_suppkey,
  Move         r139, r126
  Move         r140, r127
  // s_name: s.s_name,
  Move         r141, r128
  Move         r142, r130
  // s_address: s.s_address,
  Move         r143, r131
  Move         r144, r133
  // s_phone: s.s_phone,
  Move         r145, r134
  Move         r146, r136
  // total_revenue: r.total_revenue
  Move         r147, r137
  Move         r148, r138
  // select {
  MakeMap      r149, 5, r139
  // sort by s.s_suppkey
  Index        r151, r115, r116
  // let result = from s in supplier
  Move         r152, r149
  MakeList     r153, 2, r151
  Append       r93, r93, r153
L17:
  AddInt       r121, r121, r54
  Jump         L18
L16:
  AddInt       r112, r112, r54
  Jump         L19
L12:
  MakeMap      r155, 0, r0
  Const        r156, 0
L22:
  LessInt      r157, r156, r95
  JumpIfFalse  r157, L20
  Index        r158, r94, r156
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Index        r159, r158, r116
  // let result = from s in supplier
  Index        r160, r155, r159
  NotEqual     r161, r160, r108
  JumpIfTrue   r161, L21
  MakeList     r162, 0, r0
  SetIndex     r155, r159, r162
L21:
  Index        r160, r155, r159
  Append       r163, r160, r158
  SetIndex     r155, r159, r163
  AddInt       r156, r156, r54
  Jump         L22
L20:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r164, 0
L27:
  LessInt      r165, r164, r97
  JumpIfFalse  r165, L23
  Index        r105, r96, r164
  Index        r167, r105, r7
  Index        r168, r155, r167
  NotEqual     r169, r168, r108
  JumpIfFalse  r169, L24
  Len          r170, r168
  Const        r171, 0
L26:
  LessInt      r172, r171, r170
  JumpIfFalse  r172, L24
  Index        r115, r168, r171
  // where r.total_revenue == max_revenue
  Index        r174, r105, r9
  Equal        r175, r174, r92
  JumpIfFalse  r175, L25
  // s_suppkey: s.s_suppkey,
  Const        r176, "s_suppkey"
  Index        r177, r115, r116
  // s_name: s.s_name,
  Const        r178, "s_name"
  Index        r179, r115, r129
  // s_address: s.s_address,
  Const        r180, "s_address"
  Index        r181, r115, r132
  // s_phone: s.s_phone,
  Const        r182, "s_phone"
  Index        r183, r115, r135
  // total_revenue: r.total_revenue
  Const        r184, "total_revenue"
  Index        r185, r105, r9
  // s_suppkey: s.s_suppkey,
  Move         r186, r176
  Move         r187, r177
  // s_name: s.s_name,
  Move         r188, r178
  Move         r189, r179
  // s_address: s.s_address,
  Move         r190, r180
  Move         r191, r181
  // s_phone: s.s_phone,
  Move         r192, r182
  Move         r193, r183
  // total_revenue: r.total_revenue
  Move         r194, r184
  Move         r195, r185
  // select {
  MakeMap      r196, 5, r186
  // sort by s.s_suppkey
  Index        r198, r115, r116
  // let result = from s in supplier
  Move         r199, r196
  MakeList     r200, 2, r198
  Append       r93, r93, r200
L25:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  AddInt       r171, r171, r54
  Jump         L26
L24:
  AddInt       r164, r164, r54
  Jump         L27
L23:
  // sort by s.s_suppkey
  Sort         r93, r93
  // json(result)
  JSON         r93
  // let rev = 1000.0 * 0.9 + 500.0
  Const        r203, 1000
  Const        r204, 0.9
  Const        r205, 900
  Const        r206, 500
  Const        r207, 1400
  // s_suppkey: 100,
  Const        r208, "s_suppkey"
  Const        r209, 100
  // s_name: "Best Supplier",
  Const        r210, "s_name"
  Const        r211, "Best Supplier"
  // s_address: "123 Market St",
  Const        r212, "s_address"
  Const        r213, "123 Market St"
  // s_phone: "123-456",
  Const        r214, "s_phone"
  Const        r215, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r216, "total_revenue"
  // s_suppkey: 100,
  Move         r217, r208
  Move         r218, r209
  // s_name: "Best Supplier",
  Move         r219, r210
  Move         r220, r211
  // s_address: "123 Market St",
  Move         r221, r212
  Move         r222, r213
  // s_phone: "123-456",
  Move         r223, r214
  Move         r224, r215
  // total_revenue: rev // 900 + 500 = 1400
  Move         r225, r216
  Move         r226, r207
  // {
  MakeMap      r228, 5, r217
  // expect result == [
  MakeList     r229, 1, r228
  Equal        r230, r93, r229
  Expect       r230
  Return       r0
