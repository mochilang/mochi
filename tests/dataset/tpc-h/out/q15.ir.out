func main (regs=181)
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  Move         r1, r0
  // let lineitem = [
  Const        r2, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  Move         r3, r2
  // let start_date = "1996-01-01"
  Const        r4, "1996-01-01"
  Move         r5, r4
  // let end_date = "1996-04-01"
  Const        r6, "1996-04-01"
  Move         r7, r6
  // from l in lineitem
  Const        r8, []
  IterPrep     r9, r3
  Len          r10, r9
  Const        r11, 0
  MakeMap      r12, 0, r0
  Const        r13, []
L4:
  Less         r14, r11, r10
  JumpIfFalse  r14, L0
  Index        r15, r9, r11
  Move         r16, r15
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r17, "l_shipdate"
  Index        r18, r16, r17
  LessEq       r19, r5, r18
  Const        r20, "l_shipdate"
  Index        r21, r16, r20
  Less         r22, r21, r7
  Move         r23, r19
  JumpIfFalse  r23, L1
  Move         r23, r22
L1:
  JumpIfFalse  r23, L2
  // group by l.l_suppkey into g
  Const        r24, "l_suppkey"
  Index        r25, r16, r24
  Str          r26, r25
  In           r27, r26, r12
  JumpIfTrue   r27, L3
  // from l in lineitem
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  Const        r31, "key"
  // group by l.l_suppkey into g
  Move         r32, r25
  // from l in lineitem
  Const        r33, "items"
  Move         r34, r28
  MakeMap      r35, 3, r29
  SetIndex     r12, r26, r35
  Append       r36, r13, r35
  Move         r13, r36
L3:
  Const        r37, "items"
  Index        r38, r12, r26
  Index        r39, r38, r37
  Append       r40, r39, r15
  SetIndex     r38, r37, r40
L2:
  Const        r41, 1
  Add          r42, r11, r41
  Move         r11, r42
  Jump         L4
L0:
  Const        r43, 0
  Len          r44, r13
L8:
  Less         r45, r43, r44
  JumpIfFalse  r45, L5
  Index        r46, r13, r43
  Move         r47, r46
  // supplier_no: g.key,
  Const        r48, "supplier_no"
  Const        r49, "key"
  Index        r50, r47, r49
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r51, "total_revenue"
  Const        r52, []
  IterPrep     r53, r47
  Len          r54, r53
  Const        r55, 0
L7:
  Less         r56, r55, r54
  JumpIfFalse  r56, L6
  Index        r57, r53, r55
  Move         r58, r57
  Const        r59, "l_extendedprice"
  Index        r60, r58, r59
  Const        r61, 1
  Const        r62, "l_discount"
  Index        r63, r58, r62
  Sub          r64, r61, r63
  Mul          r65, r60, r64
  Append       r66, r52, r65
  Move         r52, r66
  Const        r67, 1
  Add          r68, r55, r67
  Move         r55, r68
  Jump         L7
L6:
  Sum          r69, r52
  // supplier_no: g.key,
  Move         r70, r48
  Move         r71, r50
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Move         r72, r51
  Move         r73, r69
  // select {
  MakeMap      r74, 2, r70
  // from l in lineitem
  Append       r75, r8, r74
  Move         r8, r75
  Const        r76, 1
  Add          r77, r43, r76
  Move         r43, r77
  Jump         L8
L5:
  // let revenue0 =
  Move         r78, r8
  // let revenues = from x in revenue0 select x.total_revenue
  Const        r79, []
  IterPrep     r80, r78
  Len          r81, r80
  Const        r82, 0
L10:
  Less         r83, r82, r81
  JumpIfFalse  r83, L9
  Index        r84, r80, r82
  Move         r58, r84
  Const        r85, "total_revenue"
  Index        r86, r58, r85
  Append       r87, r79, r86
  Move         r79, r87
  Const        r88, 1
  Add          r89, r82, r88
  Move         r82, r89
  Jump         L10
L9:
  Move         r90, r79
  // let max_revenue = max(revenues)
  Max          r91, r90
  Move         r92, r91
  // let result = from s in supplier
  Const        r93, []
  IterPrep     r94, r1
  Len          r95, r94
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r96, r78
  Len          r97, r96
  // let result = from s in supplier
  Const        r98, 0
L15:
  Less         r99, r98, r95
  JumpIfFalse  r99, L11
  Index        r100, r94, r98
  Move         r101, r100
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r102, 0
L14:
  Less         r103, r102, r97
  JumpIfFalse  r103, L12
  Index        r104, r96, r102
  Move         r105, r104
  Const        r106, "s_suppkey"
  Index        r107, r101, r106
  Const        r108, "supplier_no"
  Index        r109, r105, r108
  Equal        r110, r107, r109
  JumpIfFalse  r110, L13
  // where r.total_revenue == max_revenue
  Const        r111, "total_revenue"
  Index        r112, r105, r111
  Equal        r113, r112, r92
  JumpIfFalse  r113, L13
  // s_suppkey: s.s_suppkey,
  Const        r114, "s_suppkey"
  Const        r115, "s_suppkey"
  Index        r116, r101, r115
  // s_name: s.s_name,
  Const        r117, "s_name"
  Const        r118, "s_name"
  Index        r119, r101, r118
  // s_address: s.s_address,
  Const        r120, "s_address"
  Const        r121, "s_address"
  Index        r122, r101, r121
  // s_phone: s.s_phone,
  Const        r123, "s_phone"
  Const        r124, "s_phone"
  Index        r125, r101, r124
  // total_revenue: r.total_revenue
  Const        r126, "total_revenue"
  Const        r127, "total_revenue"
  Index        r128, r105, r127
  // s_suppkey: s.s_suppkey,
  Move         r129, r114
  Move         r130, r116
  // s_name: s.s_name,
  Move         r131, r117
  Move         r132, r119
  // s_address: s.s_address,
  Move         r133, r120
  Move         r134, r122
  // s_phone: s.s_phone,
  Move         r135, r123
  Move         r136, r125
  // total_revenue: r.total_revenue
  Move         r137, r126
  Move         r138, r128
  // select {
  MakeMap      r139, 5, r129
  // sort by s.s_suppkey
  Const        r140, "s_suppkey"
  Index        r141, r101, r140
  Move         r142, r141
  // let result = from s in supplier
  Move         r143, r139
  MakeList     r144, 2, r142
  Append       r145, r93, r144
  Move         r93, r145
L13:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r146, 1
  Add          r147, r102, r146
  Move         r102, r147
  Jump         L14
L12:
  // let result = from s in supplier
  Const        r148, 1
  Add          r149, r98, r148
  Move         r98, r149
  Jump         L15
L11:
  // sort by s.s_suppkey
  Sort         r150, r93
  // let result = from s in supplier
  Move         r93, r150
  Move         r151, r93
  // json(result)
  JSON         r151
  // let rev = 1000.0 * 0.9 + 500.0
  Const        r156, 1400
  Move         r157, r156
  // s_suppkey: 100,
  Const        r158, "s_suppkey"
  Const        r159, 100
  // s_name: "Best Supplier",
  Const        r160, "s_name"
  Const        r161, "Best Supplier"
  // s_address: "123 Market St",
  Const        r162, "s_address"
  Const        r163, "123 Market St"
  // s_phone: "123-456",
  Const        r164, "s_phone"
  Const        r165, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r166, "total_revenue"
  // s_suppkey: 100,
  Move         r167, r158
  Move         r168, r159
  // s_name: "Best Supplier",
  Move         r169, r160
  Move         r170, r161
  // s_address: "123 Market St",
  Move         r171, r162
  Move         r172, r163
  // s_phone: "123-456",
  Move         r173, r164
  Move         r174, r165
  // total_revenue: rev // 900 + 500 = 1400
  Move         r175, r166
  Move         r176, r157
  // {
  MakeMap      r177, 5, r167
  Move         r178, r177
  // expect result == [
  MakeList     r179, 1, r178
  Equal        r180, r151, r179
  Expect       r180
  Return       r0
