func main (regs=186)
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  Move         r1, r0
  // let lineitem = [
  Const        r2, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  Move         r3, r2
  // let start_date = "1996-01-01"
  Const        r4, "1996-01-01"
  Move         r5, r4
  // let end_date = "1996-04-01"
  Const        r6, "1996-04-01"
  Move         r7, r6
  // from l in lineitem
  Const        r8, []
  IterPrep     r9, r3
  Len          r10, r9
  Const        r11, 0
  MakeMap      r12, 0, r0
  Const        r13, []
L4:
  Less         r14, r11, r10
  JumpIfFalse  r14, L0
  Index        r15, r9, r11
  Move         r16, r15
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r17, "l_shipdate"
  Index        r18, r16, r17
  LessEq       r19, r5, r18
  Move         r20, r19
  JumpIfFalse  r20, L1
  Const        r21, "l_shipdate"
  Index        r22, r16, r21
  Move         r20, r22
L1:
  Less         r23, r20, r7
  JumpIfFalse  r23, L2
  // group by l.l_suppkey into g
  Const        r24, "l_suppkey"
  Index        r25, r16, r24
  Str          r26, r25
  In           r27, r26, r12
  JumpIfTrue   r27, L3
  // from l in lineitem
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  Const        r31, "key"
  // group by l.l_suppkey into g
  Move         r32, r25
  // from l in lineitem
  Const        r33, "items"
  Move         r34, r28
  // group by l.l_suppkey into g
  Const        r35, "l_suppkey"
  Move         r36, r25
  // from l in lineitem
  MakeMap      r37, 4, r29
  SetIndex     r12, r26, r37
  Append       r38, r13, r37
  Move         r13, r38
L3:
  Const        r39, "items"
  Index        r40, r12, r26
  Index        r41, r40, r39
  Append       r42, r41, r15
  SetIndex     r40, r39, r42
L2:
  Const        r43, 1
  Add          r44, r11, r43
  Move         r11, r44
  Jump         L4
L0:
  Const        r45, 0
  Len          r46, r13
L8:
  Less         r47, r45, r46
  JumpIfFalse  r47, L5
  Index        r48, r13, r45
  Move         r49, r48
  Const        r50, "l_suppkey"
  Index        r51, r48, r50
  Const        r52, "l_suppkey"
  Index        r53, r48, r52
  // supplier_no: g.key,
  Const        r54, "supplier_no"
  Const        r55, "key"
  Index        r56, r49, r55
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Const        r57, "total_revenue"
  Const        r58, []
  IterPrep     r59, r49
  Len          r60, r59
  Const        r61, 0
L7:
  Less         r62, r61, r60
  JumpIfFalse  r62, L6
  Index        r63, r59, r61
  Move         r64, r63
  Const        r65, "l_extendedprice"
  Index        r66, r64, r65
  Const        r67, 1
  Const        r68, "l_discount"
  Index        r69, r64, r68
  Sub          r70, r67, r69
  Mul          r71, r66, r70
  Append       r72, r58, r71
  Move         r58, r72
  Const        r73, 1
  Add          r74, r61, r73
  Move         r61, r74
  Jump         L7
L6:
  Sum          75,58,0,0
  // supplier_no: g.key,
  Move         r76, r54
  Move         r77, r56
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  Move         r78, r57
  Move         r79, r75
  // select {
  MakeMap      r80, 2, r76
  // from l in lineitem
  Append       r81, r8, r80
  Move         r8, r81
  Const        r82, 1
  Add          r83, r45, r82
  Move         r45, r83
  Jump         L8
L5:
  // let revenue0 =
  Move         r84, r8
  // let max_revenue = max(from x in revenue0 select x.total_revenue)
  Const        r85, []
  IterPrep     r86, r84
  Len          r87, r86
  Const        r88, 0
L10:
  Less         r89, r88, r87
  JumpIfFalse  r89, L9
  Index        r90, r86, r88
  Move         r64, r90
  Const        r91, "total_revenue"
  Index        r92, r64, r91
  Append       r93, r85, r92
  Move         r85, r93
  Const        r94, 1
  Add          r95, r88, r94
  Move         r88, r95
  Jump         L10
L9:
  Max          96,85,0,0
  Move         r97, r96
  // let result = from s in supplier
  Const        r98, []
  IterPrep     r99, r1
  Len          r100, r99
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r101, r84
  Len          r102, r101
  // let result = from s in supplier
  Const        r103, 0
L15:
  Less         r104, r103, r100
  JumpIfFalse  r104, L11
  Index        r105, r99, r103
  Move         r106, r105
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r107, 0
L14:
  Less         r108, r107, r102
  JumpIfFalse  r108, L12
  Index        r109, r101, r107
  Move         r110, r109
  Const        r111, "s_suppkey"
  Index        r112, r106, r111
  Const        r113, "supplier_no"
  Index        r114, r110, r113
  Equal        r115, r112, r114
  JumpIfFalse  r115, L13
  // where r.total_revenue == max_revenue
  Const        r116, "total_revenue"
  Index        r117, r110, r116
  Equal        r118, r117, r97
  JumpIfFalse  r118, L13
  // s_suppkey: s.s_suppkey,
  Const        r119, "s_suppkey"
  Const        r120, "s_suppkey"
  Index        r121, r106, r120
  // s_name: s.s_name,
  Const        r122, "s_name"
  Const        r123, "s_name"
  Index        r124, r106, r123
  // s_address: s.s_address,
  Const        r125, "s_address"
  Const        r126, "s_address"
  Index        r127, r106, r126
  // s_phone: s.s_phone,
  Const        r128, "s_phone"
  Const        r129, "s_phone"
  Index        r130, r106, r129
  // total_revenue: r.total_revenue
  Const        r131, "total_revenue"
  Const        r132, "total_revenue"
  Index        r133, r110, r132
  // s_suppkey: s.s_suppkey,
  Move         r134, r119
  Move         r135, r121
  // s_name: s.s_name,
  Move         r136, r122
  Move         r137, r124
  // s_address: s.s_address,
  Move         r138, r125
  Move         r139, r127
  // s_phone: s.s_phone,
  Move         r140, r128
  Move         r141, r130
  // total_revenue: r.total_revenue
  Move         r142, r131
  Move         r143, r133
  // select {
  MakeMap      r144, 5, r134
  // sort by s.s_suppkey
  Const        r145, "s_suppkey"
  Index        r146, r106, r145
  Move         r147, r146
  // let result = from s in supplier
  Move         r148, r144
  MakeList     r149, 2, r147
  Append       r150, r98, r149
  Move         r98, r150
L13:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r151, 1
  Add          r152, r107, r151
  Move         r107, r152
  Jump         L14
L12:
  // let result = from s in supplier
  Const        r153, 1
  Add          r154, r103, r153
  Move         r103, r154
  Jump         L15
L11:
  // sort by s.s_suppkey
  Sort         155,98,0,0
  // let result = from s in supplier
  Move         r98, r155
  Move         r156, r98
  // json(result)
  JSON         r156
  // let rev = 1000.0 * 0.9 + 500.0
  Const        r157, 1000
  Const        r158, 0.9
  MulFloat     r159, r157, r158
  Const        r160, 500
  AddFloat     r161, r159, r160
  Move         r162, r161
  // s_suppkey: 100,
  Const        r163, "s_suppkey"
  Const        r164, 100
  // s_name: "Best Supplier",
  Const        r165, "s_name"
  Const        r166, "Best Supplier"
  // s_address: "123 Market St",
  Const        r167, "s_address"
  Const        r168, "123 Market St"
  // s_phone: "123-456",
  Const        r169, "s_phone"
  Const        r170, "123-456"
  // total_revenue: rev // 900 + 500 = 1400
  Const        r171, "total_revenue"
  // s_suppkey: 100,
  Move         r172, r163
  Move         r173, r164
  // s_name: "Best Supplier",
  Move         r174, r165
  Move         r175, r166
  // s_address: "123 Market St",
  Move         r176, r167
  Move         r177, r168
  // s_phone: "123-456",
  Move         r178, r169
  Move         r179, r170
  // total_revenue: rev // 900 + 500 = 1400
  Move         r180, r171
  Move         r181, r162
  // {
  MakeMap      r182, 5, r172
  Move         r183, r182
  // expect result == [
  MakeList     r184, 1, r183
  Equal        r185, r156, r184
  Expect       r185
  Return       r0

