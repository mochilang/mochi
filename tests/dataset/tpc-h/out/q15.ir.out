func main (regs=181)
  // let supplier = [
  Const        r0, [{"s_address": "123 Market St", "s_name": "Best Supplier", "s_phone": "123-456", "s_suppkey": 100}, {"s_address": "456 Elm St", "s_name": "Second Supplier", "s_phone": "987-654", "s_suppkey": 200}]
  // let lineitem = [
  Const        r2, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_shipdate": "1996-01-15", "l_suppkey": 100}, {"l_discount": 0, "l_extendedprice": 500, "l_shipdate": "1996-03-20", "l_suppkey": 100}, {"l_discount": 0.05, "l_extendedprice": 800, "l_shipdate": "1995-12-30", "l_suppkey": 200}]
  // let start_date = "1996-01-01"
  Const        r4, "1996-01-01"
  // let end_date = "1996-04-01"
  Const        r6, "1996-04-01"
  // from l in lineitem
  IterPrep     r9, r2
  Len          r10, r9
  Const        r11, 0
  MakeMap      r12, 0, r0
  Less         r14, r11, r10
  JumpIfFalse  r14, L0
  Index        r15, r9, r11
  Move         r16, r15
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r17, "l_shipdate"
  Index        r18, r16, r17
  LessEq       r19, r4, r18
  Const        r20, "l_shipdate"
  Index        r21, r16, r20
  Less         r22, r21, r6
  JumpIfFalse  r19, L1
  JumpIfFalse  r22, L2
  // group by l.l_suppkey into g
  Const        r24, "l_suppkey"
  Index        r25, r16, r24
  Str          r26, r25
  In           r27, r26, r12
L1:
  JumpIfTrue   r27, L3
  // from l in lineitem
  Const        r29, "__group__"
  Const        r30, true
  Const        r31, "key"
  // group by l.l_suppkey into g
  Move         r32, r25
  // from l in lineitem
  MakeMap      r35, 2, r29
  SetIndex     r12, r26, r35
  Const        r37, "items"
  Index        r38, r12, r26
L4:
  Index        r39, r38, r37
  Append       r40, r39, r15
  SetIndex     r38, r37, r40
L3:
  Jump         L4
  Const        r43, 0
  Len          r44, r36
  Less         r45, r43, r44
L2:
  JumpIfFalse  r45, L5
  Index        r46, r36, r43
  // total_revenue: sum(from x in g select x.l_extendedprice * (1 - x.l_discount))
  IterPrep     r53, r46
L0:
  Len          r54, r53
L8:
  Const        r55, 0
  Less         r56, r55, r54
  JumpIfFalse  r56, L6
L7:
  Jump         L7
  // from l in lineitem
  Jump         L8
L6:
  // let revenues = from x in revenue0 select x.total_revenue
  IterPrep     r80, r8
  Len          r81, r80
  Const        r82, 0
  Less         r83, r82, r81
  JumpIfFalse  r83, L9
  // let max_revenue = max(revenues)
  Const        r91, 0
  // let result = from s in supplier
  IterPrep     r94, r1
  Len          r95, r94
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  IterPrep     r96, r8
  Len          r97, r96
  // let result = from s in supplier
  Const        r98, 0
  Less         r99, r98, r95
  JumpIfFalse  r99, L10
  Index        r100, r94, r98
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Const        r102, 0
  Less         r103, r102, r97
L9:
  JumpIfFalse  r103, L11
  Index        r104, r96, r102
  Const        r106, "s_suppkey"
  Index        r107, r100, r106
  Const        r108, "supplier_no"
  Index        r109, r104, r108
  Equal        r110, r107, r109
  JumpIfFalse  r110, L12
  // where r.total_revenue == max_revenue
  Const        r111, "total_revenue"
L14:
  Index        r112, r104, r111
  Equal        r113, r112, r91
  JumpIfFalse  r113, L12
L13:
  // join r in revenue0 on s.s_suppkey == r.supplier_no
  Jump         L13
  // let result = from s in supplier
  Jump         L14
  // sort by s.s_suppkey
  Sort         r150, r145
  // json(result)
  JSON         r150
  // s_suppkey: 100,
  Const        r158, "s_suppkey"
  Const        r159, 100
  // s_name: "Best Supplier",
  Const        r160, "s_name"
  Const        r161, "Best Supplier"
  // s_address: "123 Market St",
  Const        r162, "s_address"
  Const        r163, "123 Market St"
  // s_phone: "123-456",
  Const        r164, "s_phone"
  Const        r165, "123-456"
  // s_suppkey: 100,
  Move         r167, r158
  Move         r168, r159
  // s_name: "Best Supplier",
  Move         r169, r160
  Move         r170, r161
  // s_address: "123 Market St",
  Move         r171, r162
L12:
  Move         r172, r163
L11:
  // s_phone: "123-456",
  Move         r173, r164
  Move         r174, r165
  // {
  MakeMap      r177, 4, r167
  Move         r178, r177
L10:
  // expect result == [
  MakeList     r179, 1, r178
  Equal        r180, r150, r179
  Expect       r180
  Return       r0
