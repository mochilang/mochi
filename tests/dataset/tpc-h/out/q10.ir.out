func main (regs=38)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
L12:
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
L6:
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
L3:
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_name: c.c_name,
  Const        r8, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r9, "c_acctbal"
L13:
  // c_address: c.c_address,
  Const        r10, "c_address"
  // c_phone: c.c_phone,
  Const        r11, "c_phone"
  // c_comment: c.c_comment,
  Const        r12, "c_comment"
  // n_name: n.n_name
  Const        r13, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r14, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r15, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r16, "key"
L11:
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r17, "revenue"
  Const        r18, "l"
  Const        r19, "l_extendedprice"
  Const        r20, "l_discount"
  // from c in customer
  MakeMap      r21, 0, r0
  IterPrep     r22, r1
  Len          r1, r22
L10:
  Const        r23, 0
  LessInt      r24, r23, r1
L9:
  JumpIfFalse  r24, L0
L8:
  Index        r1, r22, r23
L5:
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r22, r2
  Len          r2, r22
L7:
  Move         r25, r23
L4:
  LessInt      r26, r25, r2
  JumpIfFalse  r26, L1
  Index        r2, r22, r25
  Const        r22, "o_custkey"
L2:
  Index        r27, r2, r22
L1:
  Index        r22, r1, r7
  Equal        r28, r27, r22
  JumpIfFalse  r28, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r28, r3
  Len          r3, r28
  Move         r22, r23
  LessInt      r27, r22, r3
  JumpIfFalse  r27, L2
  Index        r27, r28, r22
  Const        r28, "l_orderkey"
  Index        r3, r27, r28
  Const        r28, "o_orderkey"
  Index        r29, r2, r28
  Equal        r28, r3, r29
  JumpIfFalse  r28, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r28, r0
  Len          r29, r28
  Move         r3, r22
  LessInt      r30, r3, r29
  JumpIfFalse  r30, L3
  Index        r30, r28, r3
  Const        r28, "n_nationkey"
  Index        r29, r30, r28
  Const        r28, "c_nationkey"
  Index        r31, r1, r28
  Equal        r28, r29, r31
  JumpIfFalse  r28, L3
  // where o.o_orderdate >= start_date &&
  Index        r28, r2, r14
  LessEq       r31, r4, r28
  // o.o_orderdate < end_date &&
  Index        r28, r2, r14
  Less         r14, r28, r5
  // l.l_returnflag == "R"
  Index        r28, r27, r15
  Const        r15, "R"
  Equal        r5, r28, r15
  // where o.o_orderdate >= start_date &&
  Move         r15, r31
  JumpIfFalse  r15, L4
  // o.o_orderdate < end_date &&
  Move         r15, r14
  JumpIfFalse  r15, L5
  Move         r15, r5
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r15, L3
  // from c in customer
  Const        r15, "c"
  Move         r5, r1
  Const        r14, "o"
  Move         r31, r2
  Move         r2, r27
  Const        r27, "n"
  Move         r28, r30
  MakeMap      r4, 4, r15
  // c_custkey: c.c_custkey,
  Move         r28, r7
  Index        r27, r1, r7
  // c_name: c.c_name,
  Move         r2, r8
  Index        r31, r1, r8
  // c_acctbal: c.c_acctbal,
  Move         r14, r9
  Index        r5, r1, r9
  // c_address: c.c_address,
  Move         r15, r10
  Index        r29, r1, r10
  // c_phone: c.c_phone,
  Move         r32, r11
  Index        r33, r1, r11
  // c_comment: c.c_comment,
  Move         r34, r12
  Index        r35, r1, r12
  // n_name: n.n_name
  Move         r1, r13
  Index        r36, r30, r13
  // c_custkey: c.c_custkey,
  Move         r37, r28
  Move         r28, r27
  // c_name: c.c_name,
  Move         r27, r2
  Move         r2, r31
  // c_acctbal: c.c_acctbal,
  Move         r31, r14
  Move         r14, r5
  // c_address: c.c_address,
  Move         r5, r15
  Move         r15, r29
  // c_phone: c.c_phone,
  Move         r29, r32
  Move         r32, r33
  // c_comment: c.c_comment,
  Move         r33, r34
  Move         r34, r35
  // n_name: n.n_name
  Move         r35, r1
  Move         r1, r36
  // group by {
  MakeMap      r36, 7, r37
  Str          r1, r36
  In           r35, r1, r21
  JumpIfTrue   r35, L6
  // from c in customer
  Move         r35, r6
  Const        r34, "__group__"
  Const        r33, true
  Move         r32, r16
  // group by {
  Move         r29, r36
  // from c in customer
  Const        r36, "items"
  Move         r15, r35
  Const        r35, "count"
  Move         r5, r23
  Move         r14, r34
  Move         r34, r33
  Move         r33, r32
  Move         r32, r29
  Move         r29, r36
  Move         r31, r15
  Move         r15, r35
  Move         r2, r5
  MakeMap      r27, 4, r14
  SetIndex     r21, r1, r27
  Move         r27, r36
  Index        r36, r21, r1
  Index        r1, r36, r27
  Append       r2, r1, r4
  SetIndex     r36, r27, r2
  Move         r2, r35
  Index        r35, r36, r2
  Const        r1, 1
  AddInt       r27, r35, r1
  SetIndex     r36, r2, r27
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r3, r3, r1
  Jump         L7
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r22, r22, r1
  Jump         L8
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r25, r25, r1
  Jump         L9
  // from c in customer
  AddInt       r23, r23, r1
  Jump         L10
L0:
  Values       27,21,0,0
  Move         r21, r5
  Move         r5, r21
  Len          r26, r27
  LessInt      r25, r5, r26
  JumpIfFalse  r25, L11
  Index        r25, r27, r5
  // c_custkey: g.key.c_custkey,
  Move         r27, r7
  Index        r26, r25, r16
  Index        r24, r26, r7
  // c_name: g.key.c_name,
  Move         r26, r8
  Index        r7, r25, r16
  Index        r23, r7, r8
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r7, r17
  Move         r8, r6
  IterPrep     r35, r25
  Len          r2, r35
  Move         r36, r21
  LessInt      r30, r36, r2
  JumpIfFalse  r30, L3
  Index        r30, r35, r36
  Index        r35, r30, r18
  Index        r2, r35, r19
  Index        r35, r30, r18
  Index        r3, r35, r20
  Sub          r22, r1, r3
  Mul          r3, r2, r22
  Append       r8, r8, r3
  AddInt       r36, r36, r1
  Jump         L12
  Sum          r22, r8
  // c_acctbal: g.key.c_acctbal,
  Move         r8, r9
  Index        r2, r25, r16
  Index        r36, r2, r9
  // n_name: g.key.n_name,
  Move         r2, r13
  Index        r9, r25, r16
  Index        r4, r9, r13
  // c_address: g.key.c_address,
  Move         r9, r10
  Index        r13, r25, r16
  Index        r3, r13, r10
  // c_phone: g.key.c_phone,
  Move         r13, r11
  Index        r10, r25, r16
  Index        r15, r10, r11
  // c_comment: g.key.c_comment
  Move         r10, r12
  Index        r11, r25, r16
  Index        r16, r11, r12
  // c_custkey: g.key.c_custkey,
  Move         r11, r27
  Move         r12, r24
  // c_name: g.key.c_name,
  Move         r24, r26
  Move         r31, r23
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r23, r7
  Move         r7, r22
  // c_acctbal: g.key.c_acctbal,
  Move         r22, r8
  Move         r29, r36
  // n_name: g.key.n_name,
  Move         r36, r2
  Move         r32, r4
  // c_address: g.key.c_address,
  Move         r4, r9
  Move         r33, r3
  // c_phone: g.key.c_phone,
  Move         r3, r13
  Move         r34, r15
  // c_comment: g.key.c_comment
  Move         r15, r10
  Move         r14, r16
  // select {
  MakeMap      r16, 8, r11
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Move         r14, r6
  IterPrep     r15, r25
  Len          r25, r15
  Move         r34, r21
  LessInt      r21, r34, r25
  JumpIfFalse  r21, L13
  Index        r30, r15, r34
  Index        r21, r30, r18
  Index        r25, r21, r19
  Index        r21, r30, r18
  Index        r30, r21, r20
  Sub          r21, r1, r30
  Mul          r30, r25, r21
  Append       r14, r14, r30
  AddInt       r34, r34, r1
  Jump         L7
  Sum          r30, r14
  Neg          r14, r30
  // from c in customer
  Move         r30, r16
  MakeList     r16, 2, r14
  Append       r6, r6, r16
  AddInt       r5, r5, r1
  Jump         L2
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // c_custkey: 1,
  Move         r16, r27
  // c_name: "Alice",
  Move         r27, r26
  Const        r26, "Alice"
  // revenue: 1000.0 * 0.9, // 900.0
  Move         r30, r17
  Const        r17, 900
  // c_acctbal: 100.0,
  Move         r14, r8
  Const        r8, 100
  // n_name: "BRAZIL",
  Move         r35, r2
  Const        r2, "BRAZIL"
  // c_address: "123 St",
  Move         r5, r9
  Const        r9, "123 St"
  // c_phone: "123-456",
  Move         r21, r13
  Const        r13, "123-456"
  // c_comment: "Loyal"
  Move         r25, r10
  Const        r10, "Loyal"
  // c_custkey: 1,
  Move         r34, r16
  Move         r16, r1
  // c_name: "Alice",
  Move         r1, r27
  Move         r27, r26
  // revenue: 1000.0 * 0.9, // 900.0
  Move         r26, r30
  Move         r30, r17
  // c_acctbal: 100.0,
  Move         r17, r14
  Move         r14, r8
  // n_name: "BRAZIL",
  Move         r8, r35
  Move         r35, r2
  // c_address: "123 St",
  Move         r2, r5
  Move         r5, r9
  // c_phone: "123-456",
  Move         r9, r21
  Move         r21, r13
  // c_comment: "Loyal"
  Move         r13, r25
  Move         r25, r10
  // {
  MakeMap      r10, 8, r34
  // expect result == [
  MakeList     r25, 1, r10
  Equal        r10, r6, r25
  Expect       r10
  Return       r0
