func main (regs=258)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_name: c.c_name,
  Const        r8, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r9, "c_acctbal"
  // c_address: c.c_address,
  Const        r10, "c_address"
  // c_phone: c.c_phone,
  Const        r11, "c_phone"
  // c_comment: c.c_comment,
  Const        r12, "c_comment"
  // n_name: n.n_name
  Const        r13, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r14, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r15, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r16, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r17, "revenue"
  Const        r18, "l"
  Const        r19, "l_extendedprice"
  Const        r20, "l_discount"
  // from c in customer
  MakeMap      r21, 0, r0
  Const        r23, []
  Move         r22, r23
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
L11:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L0
  Index        r28, r24, r26
  Move         r29, r28
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r30, r2
  Len          r31, r30
  Const        r32, 0
L10:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L1
  Index        r34, r30, r32
  Move         r35, r34
  Const        r36, "o_custkey"
  Index        r37, r35, r36
  Index        r38, r29, r7
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r40, r3
  Len          r41, r40
  Const        r42, 0
L9:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r44, r40, r42
  Move         r45, r44
  Const        r46, "l_orderkey"
  Index        r47, r45, r46
  Const        r48, "o_orderkey"
  Index        r49, r35, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r51, r0
  Len          r52, r51
  Const        r53, 0
L8:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r55, r51, r53
  Move         r56, r55
  Const        r57, "n_nationkey"
  Index        r58, r56, r57
  Const        r59, "c_nationkey"
  Index        r60, r29, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // where o.o_orderdate >= start_date &&
  Index        r62, r35, r14
  LessEq       r63, r4, r62
  // o.o_orderdate < end_date &&
  Index        r64, r35, r14
  Less         r65, r64, r5
  // l.l_returnflag == "R"
  Index        r66, r45, r15
  Const        r67, "R"
  Equal        r68, r66, r67
  // where o.o_orderdate >= start_date &&
  Move         r69, r63
  JumpIfFalse  r69, L5
  Move         r69, r65
L5:
  // o.o_orderdate < end_date &&
  Move         r70, r69
  JumpIfFalse  r70, L6
  Move         r70, r68
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r70, L4
  // from c in customer
  Const        r71, "c"
  Move         r72, r29
  Const        r73, "o"
  Move         r74, r35
  Move         r75, r45
  Const        r76, "n"
  Move         r77, r56
  Move         r78, r71
  Move         r79, r72
  Move         r80, r73
  Move         r81, r74
  Move         r82, r18
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  MakeMap      r86, 4, r78
  // c_custkey: c.c_custkey,
  Const        r87, "c_custkey"
  Index        r88, r29, r7
  // c_name: c.c_name,
  Const        r89, "c_name"
  Index        r90, r29, r8
  // c_acctbal: c.c_acctbal,
  Const        r91, "c_acctbal"
  Index        r92, r29, r9
  // c_address: c.c_address,
  Const        r93, "c_address"
  Index        r94, r29, r10
  // c_phone: c.c_phone,
  Const        r95, "c_phone"
  Index        r96, r29, r11
  // c_comment: c.c_comment,
  Const        r97, "c_comment"
  Index        r98, r29, r12
  // n_name: n.n_name
  Const        r99, "n_name"
  Index        r100, r56, r13
  // c_custkey: c.c_custkey,
  Move         r101, r87
  Move         r102, r88
  // c_name: c.c_name,
  Move         r103, r89
  Move         r104, r90
  // c_acctbal: c.c_acctbal,
  Move         r105, r91
  Move         r106, r92
  // c_address: c.c_address,
  Move         r107, r93
  Move         r108, r94
  // c_phone: c.c_phone,
  Move         r109, r95
  Move         r110, r96
  // c_comment: c.c_comment,
  Move         r111, r97
  Move         r112, r98
  // n_name: n.n_name
  Move         r113, r99
  Move         r114, r100
  // group by {
  MakeMap      r115, 7, r101
  Str          r116, r115
  In           r117, r116, r21
  JumpIfTrue   r117, L7
  // from c in customer
  Const        r118, []
  Const        r119, "__group__"
  Const        r120, true
  // group by {
  Move         r121, r115
  // from c in customer
  Const        r122, "items"
  Move         r123, r118
  Const        r124, "count"
  Const        r125, 0
  Move         r126, r119
  Move         r127, r120
  Move         r128, r16
  Move         r129, r121
  Move         r130, r122
  Move         r131, r123
  Move         r132, r124
  Move         r133, r125
  MakeMap      r134, 4, r126
  SetIndex     r21, r116, r134
  Append       r135, r22, r134
  Move         r22, r135
L7:
  Index        r136, r21, r116
  Index        r137, r136, r122
  Append       r138, r137, r86
  SetIndex     r136, r122, r138
  Index        r139, r136, r124
  Const        r140, 1
  AddInt       r141, r139, r140
  SetIndex     r136, r124, r141
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r53, r53, r140
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r42, r42, r140
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r32, r32, r140
  Jump         L10
L1:
  // from c in customer
  AddInt       r26, r26, r140
  Jump         L11
L0:
  Move         r142, r125
  Len          r143, r22
L17:
  LessInt      r144, r142, r143
  JumpIfFalse  r144, L12
  Index        r145, r22, r142
  Move         r146, r145
  // c_custkey: g.key.c_custkey,
  Const        r147, "c_custkey"
  Index        r148, r146, r16
  Index        r149, r148, r7
  // c_name: g.key.c_name,
  Const        r150, "c_name"
  Index        r151, r146, r16
  Index        r152, r151, r8
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r153, "revenue"
  Const        r154, []
  IterPrep     r155, r146
  Len          r156, r155
  Move         r157, r125
L14:
  LessInt      r158, r157, r156
  JumpIfFalse  r158, L13
  Index        r159, r155, r157
  Move         r160, r159
  Index        r161, r160, r18
  Index        r162, r161, r19
  Index        r163, r160, r18
  Index        r164, r163, r20
  Sub          r165, r140, r164
  Mul          r166, r162, r165
  Append       r167, r154, r166
  Move         r154, r167
  AddInt       r157, r157, r140
  Jump         L14
L13:
  Sum          r168, r154
  // c_acctbal: g.key.c_acctbal,
  Const        r169, "c_acctbal"
  Index        r170, r146, r16
  Index        r171, r170, r9
  // n_name: g.key.n_name,
  Const        r172, "n_name"
  Index        r173, r146, r16
  Index        r174, r173, r13
  // c_address: g.key.c_address,
  Const        r175, "c_address"
  Index        r176, r146, r16
  Index        r177, r176, r10
  // c_phone: g.key.c_phone,
  Const        r178, "c_phone"
  Index        r179, r146, r16
  Index        r180, r179, r11
  // c_comment: g.key.c_comment
  Const        r181, "c_comment"
  Index        r182, r146, r16
  Index        r183, r182, r12
  // c_custkey: g.key.c_custkey,
  Move         r184, r147
  Move         r185, r149
  // c_name: g.key.c_name,
  Move         r186, r150
  Move         r187, r152
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r188, r153
  Move         r189, r168
  // c_acctbal: g.key.c_acctbal,
  Move         r190, r169
  Move         r191, r171
  // n_name: g.key.n_name,
  Move         r192, r172
  Move         r193, r174
  // c_address: g.key.c_address,
  Move         r194, r175
  Move         r195, r177
  // c_phone: g.key.c_phone,
  Move         r196, r178
  Move         r197, r180
  // c_comment: g.key.c_comment
  Move         r198, r181
  Move         r199, r183
  // select {
  MakeMap      r200, 8, r184
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r201, []
  IterPrep     r202, r146
  Len          r203, r202
  Move         r204, r125
L16:
  LessInt      r205, r204, r203
  JumpIfFalse  r205, L15
  Index        r206, r202, r204
  Move         r160, r206
  Index        r207, r160, r18
  Index        r208, r207, r19
  Index        r209, r160, r18
  Index        r210, r209, r20
  Sub          r211, r140, r210
  Mul          r212, r208, r211
  Append       r213, r201, r212
  Move         r201, r213
  AddInt       r204, r204, r140
  Jump         L16
L15:
  Sum          r214, r201
  Neg          r215, r214
  Move         r216, r215
  // from c in customer
  Move         r217, r200
  MakeList     r218, 2, r216
  Append       r219, r6, r218
  Move         r6, r219
  AddInt       r142, r142, r140
  Jump         L17
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r220, r6
  // from c in customer
  Move         r6, r220
  // print(result)
  Print        r6
  // c_custkey: 1,
  Const        r221, "c_custkey"
  // c_name: "Alice",
  Const        r222, "c_name"
  Const        r223, "Alice"
  // revenue: 1000.0 * 0.9, // 900.0
  Const        r224, "revenue"
  Const        r225, 1000
  Const        r226, 0.9
  Const        r227, 900
  // c_acctbal: 100.0,
  Const        r228, "c_acctbal"
  Const        r229, 100
  // n_name: "BRAZIL",
  Const        r230, "n_name"
  Const        r231, "BRAZIL"
  // c_address: "123 St",
  Const        r232, "c_address"
  Const        r233, "123 St"
  // c_phone: "123-456",
  Const        r234, "c_phone"
  Const        r235, "123-456"
  // c_comment: "Loyal"
  Const        r236, "c_comment"
  Const        r237, "Loyal"
  // c_custkey: 1,
  Move         r238, r221
  Move         r239, r140
  // c_name: "Alice",
  Move         r240, r222
  Move         r241, r223
  // revenue: 1000.0 * 0.9, // 900.0
  Move         r242, r224
  Move         r243, r227
  // c_acctbal: 100.0,
  Move         r244, r228
  Move         r245, r229
  // n_name: "BRAZIL",
  Move         r246, r230
  Move         r247, r231
  // c_address: "123 St",
  Move         r248, r232
  Move         r249, r233
  // c_phone: "123-456",
  Move         r250, r234
  Move         r251, r235
  // c_comment: "Loyal"
  Move         r252, r236
  Move         r253, r237
  // {
  MakeMap      r254, 8, r238
  Move         r255, r254
  // expect result == [
  MakeList     r256, 1, r255
  Equal        r257, r6, r256
  Expect       r257
  Return       r0
