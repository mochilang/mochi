func main (regs=247)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_name: c.c_name,
  Const        r8, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r9, "c_acctbal"
  // c_address: c.c_address,
  Const        r10, "c_address"
  // c_phone: c.c_phone,
  Const        r11, "c_phone"
  // c_comment: c.c_comment,
  Const        r12, "c_comment"
  // n_name: n.n_name
  Const        r13, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r14, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r15, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r16, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r17, "revenue"
  Const        r18, "l"
  Const        r19, "l_extendedprice"
  Const        r20, "l_discount"
  // from c in customer
  MakeMap      r21, 0, r0
  Const        r23, []
  Move         r22, r23
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
L10:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L0
  Index        r29, r24, r26
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r30, r2
  Len          r31, r30
  Const        r32, 0
L9:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L1
  Index        r35, r30, r32
  Const        r36, "o_custkey"
  Index        r37, r35, r36
  Index        r38, r29, r7
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r40, r3
  Len          r41, r40
  Const        r42, 0
L8:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Const        r46, "l_orderkey"
  Index        r47, r45, r46
  Const        r48, "o_orderkey"
  Index        r49, r35, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r51, r0
  Len          r52, r51
  Const        r53, 0
L7:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r56, r51, r53
  Const        r57, "n_nationkey"
  Index        r58, r56, r57
  Const        r59, "c_nationkey"
  Index        r60, r29, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // where o.o_orderdate >= start_date &&
  Index        r62, r35, r14
  LessEq       r63, r4, r62
  // o.o_orderdate < end_date &&
  Index        r64, r35, r14
  Less         r65, r64, r5
  // l.l_returnflag == "R"
  Index        r66, r45, r15
  Const        r67, "R"
  Equal        r68, r66, r67
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r63, L5
  Move         r63, r65
  // o.o_orderdate < end_date &&
  JumpIfFalse  r63, L5
  Move         r63, r68
L5:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r63, L4
  // from c in customer
  Const        r69, "c"
  Move         r70, r29
  Const        r71, "o"
  Move         r72, r35
  Move         r73, r45
  Const        r74, "n"
  Move         r75, r56
  MakeMap      r76, 4, r69
  // c_custkey: c.c_custkey,
  Const        r77, "c_custkey"
  Index        r78, r29, r7
  // c_name: c.c_name,
  Const        r79, "c_name"
  Index        r80, r29, r8
  // c_acctbal: c.c_acctbal,
  Const        r81, "c_acctbal"
  Index        r82, r29, r9
  // c_address: c.c_address,
  Const        r83, "c_address"
  Index        r84, r29, r10
  // c_phone: c.c_phone,
  Const        r85, "c_phone"
  Index        r86, r29, r11
  // c_comment: c.c_comment,
  Const        r87, "c_comment"
  Index        r88, r29, r12
  // n_name: n.n_name
  Const        r89, "n_name"
  Index        r90, r56, r13
  // c_custkey: c.c_custkey,
  Move         r91, r77
  Move         r92, r78
  // c_name: c.c_name,
  Move         r93, r79
  Move         r94, r80
  // c_acctbal: c.c_acctbal,
  Move         r95, r81
  Move         r96, r82
  // c_address: c.c_address,
  Move         r97, r83
  Move         r98, r84
  // c_phone: c.c_phone,
  Move         r99, r85
  Move         r100, r86
  // c_comment: c.c_comment,
  Move         r101, r87
  Move         r102, r88
  // n_name: n.n_name
  Move         r103, r89
  Move         r104, r90
  // group by {
  MakeMap      r105, 7, r91
  Str          r106, r105
  In           r107, r106, r21
  JumpIfTrue   r107, L6
  // from c in customer
  Const        r108, "__group__"
  Const        r109, true
  // group by {
  Move         r110, r105
  // from c in customer
  Const        r111, "items"
  Move         r112, r23
  Const        r113, "count"
  Const        r114, 0
  Move         r115, r108
  Move         r116, r109
  Move         r117, r16
  Move         r118, r110
  Move         r119, r111
  Move         r120, r112
  Move         r121, r113
  Move         r122, r114
  MakeMap      r123, 4, r115
  SetIndex     r21, r106, r123
  Append       r22, r22, r123
L6:
  Index        r125, r21, r106
  Index        r126, r125, r111
  Append       r127, r126, r76
  SetIndex     r125, r111, r127
  Index        r128, r125, r113
  Const        r129, 1
  AddInt       r130, r128, r129
  SetIndex     r125, r113, r130
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r53, r53, r129
  Jump         L7
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r42, r42, r129
  Jump         L8
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r32, r32, r129
  Jump         L9
L1:
  // from c in customer
  AddInt       r26, r26, r129
  Jump         L10
L0:
  Move         r131, r114
  Len          r132, r22
L16:
  LessInt      r133, r131, r132
  JumpIfFalse  r133, L11
  Index        r135, r22, r131
  // c_custkey: g.key.c_custkey,
  Const        r136, "c_custkey"
  Index        r137, r135, r16
  Index        r138, r137, r7
  // c_name: g.key.c_name,
  Const        r139, "c_name"
  Index        r140, r135, r16
  Index        r141, r140, r8
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r142, "revenue"
  Const        r143, []
  IterPrep     r144, r135
  Len          r145, r144
  Move         r146, r114
L13:
  LessInt      r147, r146, r145
  JumpIfFalse  r147, L12
  Index        r149, r144, r146
  Index        r150, r149, r18
  Index        r151, r150, r19
  Index        r152, r149, r18
  Index        r153, r152, r20
  Sub          r154, r129, r153
  Mul          r155, r151, r154
  Append       r143, r143, r155
  AddInt       r146, r146, r129
  Jump         L13
L12:
  Sum          r157, r143
  // c_acctbal: g.key.c_acctbal,
  Const        r158, "c_acctbal"
  Index        r159, r135, r16
  Index        r160, r159, r9
  // n_name: g.key.n_name,
  Const        r161, "n_name"
  Index        r162, r135, r16
  Index        r163, r162, r13
  // c_address: g.key.c_address,
  Const        r164, "c_address"
  Index        r165, r135, r16
  Index        r166, r165, r10
  // c_phone: g.key.c_phone,
  Const        r167, "c_phone"
  Index        r168, r135, r16
  Index        r169, r168, r11
  // c_comment: g.key.c_comment
  Const        r170, "c_comment"
  Index        r171, r135, r16
  Index        r172, r171, r12
  // c_custkey: g.key.c_custkey,
  Move         r173, r136
  Move         r174, r138
  // c_name: g.key.c_name,
  Move         r175, r139
  Move         r176, r141
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Move         r177, r142
  Move         r178, r157
  // c_acctbal: g.key.c_acctbal,
  Move         r179, r158
  Move         r180, r160
  // n_name: g.key.n_name,
  Move         r181, r161
  Move         r182, r163
  // c_address: g.key.c_address,
  Move         r183, r164
  Move         r184, r166
  // c_phone: g.key.c_phone,
  Move         r185, r167
  Move         r186, r169
  // c_comment: g.key.c_comment
  Move         r187, r170
  Move         r188, r172
  // select {
  MakeMap      r189, 8, r173
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r190, []
  IterPrep     r191, r135
  Len          r192, r191
  Move         r193, r114
L15:
  LessInt      r194, r193, r192
  JumpIfFalse  r194, L14
  Index        r149, r191, r193
  Index        r196, r149, r18
  Index        r197, r196, r19
  Index        r198, r149, r18
  Index        r199, r198, r20
  Sub          r200, r129, r199
  Mul          r201, r197, r200
  Append       r190, r190, r201
  AddInt       r193, r193, r129
  Jump         L15
L14:
  Sum          r203, r190
  Neg          r205, r203
  // from c in customer
  Move         r206, r189
  MakeList     r207, 2, r205
  Append       r6, r6, r207
  AddInt       r131, r131, r129
  Jump         L16
L11:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // print(result)
  Print        r6
  // c_custkey: 1,
  Const        r210, "c_custkey"
  // c_name: "Alice",
  Const        r211, "c_name"
  Const        r212, "Alice"
  // revenue: 1000.0 * 0.9, // 900.0
  Const        r213, "revenue"
  Const        r214, 1000
  Const        r215, 0.9
  Const        r216, 900
  // c_acctbal: 100.0,
  Const        r217, "c_acctbal"
  Const        r218, 100
  // n_name: "BRAZIL",
  Const        r219, "n_name"
  Const        r220, "BRAZIL"
  // c_address: "123 St",
  Const        r221, "c_address"
  Const        r222, "123 St"
  // c_phone: "123-456",
  Const        r223, "c_phone"
  Const        r224, "123-456"
  // c_comment: "Loyal"
  Const        r225, "c_comment"
  Const        r226, "Loyal"
  // c_custkey: 1,
  Move         r227, r210
  Move         r228, r129
  // c_name: "Alice",
  Move         r229, r211
  Move         r230, r212
  // revenue: 1000.0 * 0.9, // 900.0
  Move         r231, r213
  Move         r232, r216
  // c_acctbal: 100.0,
  Move         r233, r217
  Move         r234, r218
  // n_name: "BRAZIL",
  Move         r235, r219
  Move         r236, r220
  // c_address: "123 St",
  Move         r237, r221
  Move         r238, r222
  // c_phone: "123-456",
  Move         r239, r223
  Move         r240, r224
  // c_comment: "Loyal"
  Move         r241, r225
  Move         r242, r226
  // {
  MakeMap      r244, 8, r227
  // expect result == [
  MakeList     r245, 1, r244
  Equal        r246, r6, r245
  Expect       r246
  Return       r0
