func main (regs=198)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  // let orders = [
  Const        r1, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r2, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r3, []
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r4, "c_acctbal"
  Const        r5, "c_phone"
  // select c.c_acctbal
  Const        r6, "c_acctbal"
  // from c in customer
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
L3:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r13, r7, r9
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r14, "c_acctbal"
  Index        r15, r13, r14
  Const        r16, 0
  LessFloat    r17, r16, r15
  Const        r18, "c_phone"
  Index        r19, r13, r18
  Const        r20, 0
  Const        r21, 2
  Slice        r22, r19, r20, r21
  In           r23, r22, r2
  Move         r24, r17
  JumpIfFalse  r24, L1
  Move         r24, r23
L1:
  JumpIfFalse  r24, L2
  // select c.c_acctbal
  Const        r25, "c_acctbal"
  Index        r26, r13, r25
  // from c in customer
  Append       r3, r3, r26
L2:
  Const        r28, 1
  AddInt       r9, r9, r28
  Jump         L3
L0:
  // avg(
  Avg          r29, r3
  // from c in customer
  Const        r30, []
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r31, "c_phone"
  // c.c_acctbal > avg_balance && (!exists(
  Const        r32, "c_acctbal"
  // where o.o_custkey == c.c_custkey
  Const        r33, "o_custkey"
  Const        r34, "c_custkey"
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r35, "cntrycode"
  Const        r36, "c_phone"
  // c_acctbal: c.c_acctbal
  Const        r37, "c_acctbal"
  Const        r38, "c_acctbal"
  // from c in customer
  IterPrep     r39, r0
  Len          r40, r39
  Const        r41, 0
L11:
  LessInt      r43, r41, r40
  JumpIfFalse  r43, L4
  Index        r13, r39, r41
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r45, "c_phone"
  Index        r46, r13, r45
  Const        r47, 0
  Const        r48, 2
  Slice        r49, r46, r47, r48
  // c.c_acctbal > avg_balance && (!exists(
  Const        r50, "c_acctbal"
  Index        r51, r13, r50
  LessFloat    r52, r29, r51
  // substring(c.c_phone, 0, 2) in valid_codes &&
  In           r54, r49, r2
  JumpIfFalse  r54, L5
L5:
  // c.c_acctbal > avg_balance && (!exists(
  Move         r55, r52
  JumpIfFalse  r55, L6
  // from o in orders
  Const        r56, []
  // where o.o_custkey == c.c_custkey
  Const        r57, "o_custkey"
  Const        r58, "c_custkey"
  // from o in orders
  IterPrep     r59, r1
  Len          r60, r59
  Const        r61, 0
L9:
  LessInt      r63, r61, r60
  JumpIfFalse  r63, L7
  Index        r65, r59, r61
  // where o.o_custkey == c.c_custkey
  Const        r66, "o_custkey"
  Index        r67, r65, r66
  Const        r68, "c_custkey"
  Index        r69, r13, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L8
  // from o in orders
  Append       r56, r56, r65
L8:
  Const        r72, 1
  AddInt       r61, r61, r72
  Jump         L9
L7:
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r73, r56
  Not          r55, r73
L6:
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r55, L10
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r75, "cntrycode"
  Const        r76, "c_phone"
  Index        r77, r13, r76
  Const        r78, 0
  Const        r79, 2
  Slice        r80, r77, r78, r79
  // c_acctbal: c.c_acctbal
  Const        r81, "c_acctbal"
  Const        r82, "c_acctbal"
  Index        r83, r13, r82
  // cntrycode: substring(c.c_phone, 0, 2),
  Move         r84, r75
  Move         r85, r80
  // c_acctbal: c.c_acctbal
  Move         r86, r81
  Move         r87, r83
  // select {
  MakeMap      r88, 2, r84
  // from c in customer
  Append       r30, r30, r88
L10:
  Const        r90, 1
  AddInt       r41, r41, r90
  Jump         L11
L4:
  // from c in eligible_customers
  Const        r91, []
  // group by c.cntrycode into g
  Const        r92, "cntrycode"
  // from c in eligible_customers
  IterPrep     r93, r30
  Len          r94, r93
  Const        r95, 0
  MakeMap      r96, 0, r0
  Const        r97, []
L14:
  LessInt      r99, r95, r94
  JumpIfFalse  r99, L12
  Index        r100, r93, r95
  Move         r13, r100
  // group by c.cntrycode into g
  Const        r101, "cntrycode"
  Index        r102, r13, r101
  Str          r103, r102
  In           r104, r103, r96
  JumpIfTrue   r104, L13
  // from c in eligible_customers
  Const        r105, []
  Const        r106, "__group__"
  Const        r107, true
  Const        r108, "key"
  // group by c.cntrycode into g
  Move         r109, r102
  // from c in eligible_customers
  Const        r110, "items"
  Move         r111, r105
  Const        r112, "count"
  Const        r113, 0
  Move         r114, r106
  Move         r115, r107
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  Move         r120, r112
  Move         r121, r113
  MakeMap      r122, 4, r114
  SetIndex     r96, r103, r122
  Append       r97, r97, r122
L13:
  Const        r124, "items"
  Index        r125, r96, r103
  Index        r126, r125, r124
  Append       r127, r126, r100
  SetIndex     r125, r124, r127
  Const        r128, "count"
  Index        r129, r125, r128
  Const        r130, 1
  AddInt       r131, r129, r130
  SetIndex     r125, r128, r131
  Const        r132, 1
  AddInt       r95, r95, r132
  Jump         L14
L12:
  Const        r133, 0
  Len          r135, r97
L16:
  LessInt      r136, r133, r135
  JumpIfFalse  r136, L15
  Index        r138, r97, r133
  Append       r91, r91, r138
  Const        r140, 1
  AddInt       r133, r133, r140
  Jump         L16
L15:
  // var tmp = []
  Const        r142, []
  // for g in groups {
  IterPrep     r143, r91
  Len          r144, r143
  Const        r145, 0
L20:
  Less         r146, r145, r144
  JumpIfFalse  r146, L17
  Index        r138, r143, r145
  // var total = 0.0
  Const        r149, 0
  // for x in g.items {
  Const        r150, "items"
  Index        r151, r138, r150
  IterPrep     r152, r151
  Len          r153, r152
  Const        r154, 0
L19:
  Less         r155, r154, r153
  JumpIfFalse  r155, L18
  Index        r157, r152, r154
  // total = total + x.c_acctbal
  Const        r158, "c_acctbal"
  Index        r159, r157, r158
  AddFloat     r149, r149, r159
  // for x in g.items {
  Const        r161, 1
  Add          r154, r154, r161
  Jump         L19
L18:
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r163, "cntrycode"
  Const        r164, "key"
  Index        r165, r138, r164
  Const        r166, "numcust"
  Count        r167, r138
  Const        r168, "totacctbal"
  Move         r169, r163
  Move         r170, r165
  Move         r171, r166
  Move         r172, r167
  Move         r173, r168
  Move         r174, r149
  MakeMap      r175, 3, r169
  // tmp = append(tmp, row)
  Append       r142, r142, r175
  // for g in groups {
  Const        r177, 1
  Add          r145, r145, r177
  Jump         L20
L17:
  // from r in tmp
  Const        r179, []
  // sort by r.cntrycode
  Const        r180, "cntrycode"
  // from r in tmp
  IterPrep     r181, r142
  Len          r182, r181
  Const        r183, 0
L22:
  LessInt      r185, r183, r182
  JumpIfFalse  r185, L21
  Index        r187, r181, r183
  // sort by r.cntrycode
  Const        r188, "cntrycode"
  Index        r190, r187, r188
  // from r in tmp
  Move         r191, r187
  MakeList     r192, 2, r190
  Append       r179, r179, r192
  Const        r194, 1
  AddInt       r183, r183, r194
  Jump         L22
L21:
  // sort by r.cntrycode
  Sort         r179, r179
  // print(result)
  Print        r179
  // expect result == [
  Const        r196, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r197, r179, r196
  Expect       r197
  Return       r0
