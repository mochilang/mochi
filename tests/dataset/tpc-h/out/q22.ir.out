func main (regs=138)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  // let orders = [
  Const        r1, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r2, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r3, []
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r4, "c_acctbal"
  Const        r5, "c_phone"
  // from c in customer
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Index        r13, r12, r4
  Const        r14, 0
  LessFloat    r15, r14, r13
  Index        r16, r12, r5
  Const        r17, 2
  Slice        r18, r16, r9, r17
  In           r19, r18, r2
  Move         r20, r15
  JumpIfFalse  r20, L1
  Move         r20, r19
L1:
  JumpIfFalse  r20, L2
  // select c.c_acctbal
  Index        r21, r12, r4
  // from c in customer
  Append       r3, r3, r21
L2:
  Const        r23, 1
  AddInt       r8, r8, r23
  Jump         L3
L0:
  // avg(
  Avg          r24, r3
  // from c in customer
  Const        r25, []
  // where o.o_custkey == c.c_custkey
  Const        r26, "o_custkey"
  Const        r27, "c_custkey"
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r28, "cntrycode"
  // from c in customer
  IterPrep     r29, r0
  Len          r30, r29
  Move         r31, r9
L11:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L4
  Index        r12, r29, r31
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Index        r34, r12, r5
  Slice        r35, r34, r9, r17
  // c.c_acctbal > avg_balance && (!exists(
  Index        r36, r12, r4
  LessFloat    r37, r24, r36
  // substring(c.c_phone, 0, 2) in valid_codes &&
  In           r39, r35, r2
  JumpIfFalse  r39, L5
L5:
  // c.c_acctbal > avg_balance && (!exists(
  Move         r40, r37
  JumpIfFalse  r40, L6
  // from o in orders
  Const        r41, []
  IterPrep     r42, r1
  Len          r43, r42
  Move         r44, r9
L9:
  LessInt      r45, r44, r43
  JumpIfFalse  r45, L7
  Index        r47, r42, r44
  // where o.o_custkey == c.c_custkey
  Index        r48, r47, r26
  Index        r49, r12, r27
  Equal        r50, r48, r49
  JumpIfFalse  r50, L8
  // from o in orders
  Append       r41, r41, r47
L8:
  AddInt       r44, r44, r23
  Jump         L9
L7:
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r52, r41
  Not          r40, r52
L6:
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r40, L10
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r54, "cntrycode"
  Index        r55, r12, r5
  Slice        r56, r55, r9, r17
  // c_acctbal: c.c_acctbal
  Const        r57, "c_acctbal"
  // select {
  MakeMap      r61, 2, r54
  // from c in customer
  Append       r25, r25, r61
L10:
  AddInt       r31, r31, r23
  Jump         L11
L4:
  // from c in eligible_customers
  Const        r63, []
  IterPrep     r64, r25
  Len          r65, r64
  Const        r66, 0
  MakeMap      r67, 0, r0
  Const        r68, []
L14:
  LessInt      r69, r66, r65
  JumpIfFalse  r69, L12
  Index        r70, r64, r66
  // group by c.cntrycode into g
  Index        r71, r70, r28
  Str          r72, r71
  In           r73, r72, r67
  JumpIfTrue   r73, L13
  // from c in eligible_customers
  Const        r74, []
  Const        r75, "__group__"
  Const        r76, true
  Const        r77, "key"
  // group by c.cntrycode into g
  Move         r78, r71
  // from c in eligible_customers
  Const        r79, "items"
  Move         r80, r74
  MakeMap      r81, 3, r75
  SetIndex     r67, r72, r81
  Append       r68, r68, r81
L13:
  Index        r83, r67, r72
  Index        r84, r83, r79
  Append       r85, r84, r70
  SetIndex     r83, r79, r85
  AddInt       r66, r66, r23
  Jump         L14
L12:
  Move         r86, r9
  Len          r87, r68
L16:
  LessInt      r88, r86, r87
  JumpIfFalse  r88, L15
  Index        r90, r68, r86
  Append       r63, r63, r90
  AddInt       r86, r86, r23
  Jump         L16
L15:
  // var tmp = []
  Const        r93, []
  // for g in groups {
  IterPrep     r94, r63
  Len          r95, r94
  Const        r96, 0
L20:
  Less         r97, r96, r95
  JumpIfFalse  r97, L17
  Index        r90, r94, r96
  // var total = 0.0
  Move         r99, r14
  // for x in g.items {
  Index        r100, r90, r79
  IterPrep     r101, r100
  Len          r102, r101
  Const        r103, 0
L19:
  Less         r104, r103, r102
  JumpIfFalse  r104, L18
  Index        r106, r101, r103
  // total = total + x.c_acctbal
  Index        r107, r106, r4
  AddFloat     r99, r99, r107
  // for x in g.items {
  Const        r109, 1
  Add          r103, r103, r109
  Jump         L19
L18:
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r111, "cntrycode"
  Index        r112, r90, r77
  Const        r113, "numcust"
  Count        r114, r90
  Const        r115, "totacctbal"
  Move         r116, r112
  MakeMap      r119, 3, r111
  // tmp = append(tmp, row)
  Append       r93, r93, r119
  // for g in groups {
  Const        r121, 1
  Add          r96, r96, r121
  Jump         L20
L17:
  // from r in tmp
  Const        r123, []
  IterPrep     r124, r93
  Len          r125, r124
  Move         r126, r9
L22:
  LessInt      r127, r126, r125
  JumpIfFalse  r127, L21
  Index        r129, r124, r126
  // sort by r.cntrycode
  Index        r131, r129, r28
  // from r in tmp
  Move         r132, r129
  MakeList     r133, 2, r131
  Append       r123, r123, r133
  AddInt       r126, r126, r23
  Jump         L22
L21:
  // sort by r.cntrycode
  Sort         r123, r123
  // print(result)
  Print        r123
  // expect result == [
  Const        r136, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r137, r123, r136
  Expect       r137
  Return       r0
