func main (regs=156)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  // let orders = [
  Const        r1, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r2, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r3, []
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r4, "c_acctbal"
  Const        r5, "c_phone"
  // from c in customer
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r11, r6, r8
  Move         r12, r11
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Index        r13, r12, r4
  Const        r14, 0
  LessFloat    r15, r14, r13
  Index        r16, r12, r5
  Const        r17, 2
  Slice        r18, r16, r9, r17
  Const        r19, ["13", "31", "23", "29", "30", "18", "17"]
  In           r20, r18, r19
  Move         r21, r15
  JumpIfFalse  r21, L1
  Move         r21, r20
L1:
  JumpIfFalse  r21, L2
  // select c.c_acctbal
  Index        r22, r12, r4
  // from c in customer
  Append       r23, r3, r22
  Move         r3, r23
L2:
  Const        r24, 1
  AddInt       r8, r8, r24
  Jump         L3
L0:
  // avg(
  Avg          r25, r3
  // from c in customer
  Const        r26, []
  // where o.o_custkey == c.c_custkey
  Const        r27, "o_custkey"
  Const        r28, "c_custkey"
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r29, "cntrycode"
  // from c in customer
  IterPrep     r30, r0
  Len          r31, r30
  Move         r32, r9
L11:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L4
  Index        r34, r30, r32
  Move         r12, r34
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Index        r35, r12, r5
  Slice        r36, r35, r9, r17
  // c.c_acctbal > avg_balance && (!exists(
  Index        r37, r12, r4
  LessFloat    r38, r25, r37
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r39, ["13", "31", "23", "29", "30", "18", "17"]
  In           r40, r36, r39
  Move         r41, r40
  JumpIfFalse  r41, L5
  Move         r41, r38
L5:
  // from o in orders
  Const        r42, []
  IterPrep     r43, r1
  Len          r44, r43
  Move         r45, r9
L8:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L6
  Index        r47, r43, r45
  Move         r48, r47
  // where o.o_custkey == c.c_custkey
  Index        r49, r48, r27
  Index        r50, r12, r28
  Equal        r51, r49, r50
  JumpIfFalse  r51, L7
  // from o in orders
  Append       r52, r42, r48
  Move         r42, r52
L7:
  AddInt       r45, r45, r24
  Jump         L8
L6:
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r53, r42
  Not          r54, r53
  Move         r55, r41
  JumpIfFalse  r55, L9
  Move         r55, r54
L9:
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r55, L10
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r56, "cntrycode"
  Index        r57, r12, r5
  Slice        r58, r57, r9, r17
  // c_acctbal: c.c_acctbal
  Const        r59, "c_acctbal"
  Index        r60, r12, r4
  // cntrycode: substring(c.c_phone, 0, 2),
  Move         r61, r56
  Move         r62, r58
  // c_acctbal: c.c_acctbal
  Move         r63, r59
  Move         r64, r60
  // select {
  MakeMap      r65, 2, r61
  // from c in customer
  Append       r66, r26, r65
  Move         r26, r66
L10:
  AddInt       r32, r32, r24
  Jump         L11
L4:
  // from c in eligible_customers
  Const        r67, []
  IterPrep     r68, r26
  Len          r69, r68
  Const        r70, 0
  MakeMap      r71, 0, r0
  Const        r73, []
  Move         r72, r73
L14:
  LessInt      r74, r70, r69
  JumpIfFalse  r74, L12
  Index        r75, r68, r70
  Move         r12, r75
  // group by c.cntrycode into g
  Index        r76, r12, r29
  Str          r77, r76
  In           r78, r77, r71
  JumpIfTrue   r78, L13
  // from c in eligible_customers
  Const        r79, []
  Const        r80, "__group__"
  Const        r81, true
  Const        r82, "key"
  // group by c.cntrycode into g
  Move         r83, r76
  // from c in eligible_customers
  Const        r84, "items"
  Move         r85, r79
  Const        r86, "count"
  Move         r87, r80
  Move         r88, r81
  Move         r89, r82
  Move         r90, r83
  Move         r91, r84
  Move         r92, r85
  Move         r93, r86
  Move         r94, r9
  MakeMap      r95, 4, r87
  SetIndex     r71, r77, r95
  Append       r96, r72, r95
  Move         r72, r96
L13:
  Index        r97, r71, r77
  Index        r98, r97, r84
  Append       r99, r98, r75
  SetIndex     r97, r84, r99
  Index        r100, r97, r86
  AddInt       r101, r100, r24
  SetIndex     r97, r86, r101
  AddInt       r70, r70, r24
  Jump         L14
L12:
  Move         r102, r9
  Len          r103, r72
L16:
  LessInt      r104, r102, r103
  JumpIfFalse  r104, L15
  Index        r105, r72, r102
  Move         r106, r105
  Append       r107, r67, r106
  Move         r67, r107
  AddInt       r102, r102, r24
  Jump         L16
L15:
  // var tmp = []
  Move         r108, r79
  // for g in groups {
  IterPrep     r109, r67
  Len          r110, r109
  Const        r111, 0
L20:
  Less         r112, r111, r110
  JumpIfFalse  r112, L17
  Index        r113, r109, r111
  Move         r106, r113
  // var total = 0.0
  Move         r114, r14
  // for x in g.items {
  Index        r115, r106, r84
  IterPrep     r116, r115
  Len          r117, r116
  Const        r118, 0
L19:
  Less         r119, r118, r117
  JumpIfFalse  r119, L18
  Index        r120, r116, r118
  Move         r121, r120
  // total = total + x.c_acctbal
  Index        r122, r121, r4
  AddFloat     r123, r114, r122
  Move         r114, r123
  // for x in g.items {
  Const        r124, 1
  Add          r125, r118, r124
  Move         r118, r125
  Jump         L19
L18:
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r126, "cntrycode"
  Index        r127, r106, r82
  Const        r128, "numcust"
  Count        r129, r106
  Const        r130, "totacctbal"
  Move         r131, r126
  Move         r132, r127
  Move         r133, r128
  Move         r134, r129
  Move         r135, r130
  Move         r136, r114
  MakeMap      r137, 3, r131
  // tmp = append(tmp, row)
  Append       r138, r108, r137
  Move         r108, r138
  // for g in groups {
  Const        r139, 1
  Add          r140, r111, r139
  Move         r111, r140
  Jump         L20
L17:
  // from r in tmp
  Const        r141, []
  IterPrep     r142, r108
  Len          r143, r142
  Move         r144, r9
L22:
  LessInt      r145, r144, r143
  JumpIfFalse  r145, L21
  Index        r146, r142, r144
  Move         r147, r146
  // sort by r.cntrycode
  Index        r148, r147, r29
  Move         r149, r148
  // from r in tmp
  Move         r150, r147
  MakeList     r151, 2, r149
  Append       r152, r141, r151
  Move         r141, r152
  AddInt       r144, r144, r24
  Jump         L22
L21:
  // sort by r.cntrycode
  Sort         r153, r141
  // from r in tmp
  Move         r141, r153
  // print(result)
  Print        r141
  // expect result == [
  Const        r154, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r155, r141, r154
  Expect       r155
  Return       r0

