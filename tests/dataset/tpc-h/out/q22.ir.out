func main (regs=152)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  // let orders = [
  Const        r1, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r2, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r3, []
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r4, "c_acctbal"
  Const        r5, "c_phone"
  // from c in customer
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Index        r13, r12, r4
  Const        r14, 0
  LessFloat    r15, r14, r13
  Index        r16, r12, r5
  Const        r17, 2
  Slice        r18, r16, r9, r17
  Const        r19, ["13", "31", "23", "29", "30", "18", "17"]
  In           r20, r18, r19
  JumpIfFalse  r15, L1
  Move         r15, r20
L1:
  JumpIfFalse  r15, L2
  // select c.c_acctbal
  Index        r21, r12, r4
  // from c in customer
  Append       r3, r3, r21
L2:
  Const        r23, 1
  AddInt       r8, r8, r23
  Jump         L3
L0:
  // avg(
  Avg          r24, r3
  // from c in customer
  Const        r25, []
  // where o.o_custkey == c.c_custkey
  Const        r26, "o_custkey"
  Const        r27, "c_custkey"
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r28, "cntrycode"
  // from c in customer
  IterPrep     r29, r0
  Len          r30, r29
  Move         r31, r9
L10:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L4
  Index        r12, r29, r31
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Index        r34, r12, r5
  Slice        r35, r34, r9, r17
  // c.c_acctbal > avg_balance && (!exists(
  Index        r36, r12, r4
  LessFloat    r37, r24, r36
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r38, ["13", "31", "23", "29", "30", "18", "17"]
  In           r39, r35, r38
  JumpIfFalse  r39, L5
  Move         r39, r37
  // c.c_acctbal > avg_balance && (!exists(
  JumpIfFalse  r39, L5
  // from o in orders
  Const        r40, []
  IterPrep     r41, r1
  Len          r42, r41
  Move         r43, r9
L8:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L6
  Index        r46, r41, r43
  // where o.o_custkey == c.c_custkey
  Index        r47, r46, r26
  Index        r48, r12, r27
  Equal        r49, r47, r48
  JumpIfFalse  r49, L7
  // from o in orders
  Append       r40, r40, r46
L7:
  AddInt       r43, r43, r23
  Jump         L8
L6:
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r51, r40
  Not          r39, r51
L5:
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r39, L9
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r53, "cntrycode"
  Index        r54, r12, r5
  Slice        r55, r54, r9, r17
  // c_acctbal: c.c_acctbal
  Const        r56, "c_acctbal"
  Index        r57, r12, r4
  // cntrycode: substring(c.c_phone, 0, 2),
  Move         r58, r53
  Move         r59, r55
  // c_acctbal: c.c_acctbal
  Move         r60, r56
  Move         r61, r57
  // select {
  MakeMap      r62, 2, r58
  // from c in customer
  Append       r25, r25, r62
L9:
  AddInt       r31, r31, r23
  Jump         L10
L4:
  // from c in eligible_customers
  Const        r64, []
  IterPrep     r65, r25
  Len          r66, r65
  Const        r67, 0
  MakeMap      r68, 0, r0
  Const        r70, []
  Move         r69, r70
L13:
  LessInt      r71, r67, r66
  JumpIfFalse  r71, L11
  Index        r72, r65, r67
  // group by c.cntrycode into g
  Index        r73, r72, r28
  Str          r74, r73
  In           r75, r74, r68
  JumpIfTrue   r75, L12
  // from c in eligible_customers
  Const        r76, "__group__"
  Const        r77, true
  Const        r78, "key"
  // group by c.cntrycode into g
  Move         r79, r73
  // from c in eligible_customers
  Const        r80, "items"
  Move         r81, r70
  Const        r82, "count"
  Move         r83, r76
  Move         r84, r77
  Move         r85, r78
  Move         r86, r79
  Move         r87, r80
  Move         r88, r81
  Move         r89, r82
  Move         r90, r9
  MakeMap      r91, 4, r83
  SetIndex     r68, r74, r91
  Append       r69, r69, r91
L12:
  Index        r93, r68, r74
  Index        r94, r93, r80
  Append       r95, r94, r72
  SetIndex     r93, r80, r95
  Index        r96, r93, r82
  AddInt       r97, r96, r23
  SetIndex     r93, r82, r97
  AddInt       r67, r67, r23
  Jump         L13
L11:
  Move         r98, r9
  Len          r99, r69
L15:
  LessInt      r100, r98, r99
  JumpIfFalse  r100, L14
  Index        r102, r69, r98
  Append       r64, r64, r102
  AddInt       r98, r98, r23
  Jump         L15
L14:
  // var tmp = []
  Move         r104, r70
  // for g in groups {
  IterPrep     r105, r64
  Len          r106, r105
  Const        r107, 0
L19:
  Less         r108, r107, r106
  JumpIfFalse  r108, L16
  Index        r102, r105, r107
  // var total = 0.0
  Move         r110, r14
  // for x in g.items {
  Index        r111, r102, r80
  IterPrep     r112, r111
  Len          r113, r112
  Const        r114, 0
L18:
  Less         r115, r114, r113
  JumpIfFalse  r115, L17
  Index        r117, r112, r114
  // total = total + x.c_acctbal
  Index        r118, r117, r4
  AddFloat     r110, r110, r118
  // for x in g.items {
  Const        r120, 1
  Add          r114, r114, r120
  Jump         L18
L17:
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r122, "cntrycode"
  Index        r123, r102, r78
  Const        r124, "numcust"
  Count        r125, r102
  Const        r126, "totacctbal"
  Move         r127, r122
  Move         r128, r123
  Move         r129, r124
  Move         r130, r125
  Move         r131, r126
  Move         r132, r110
  MakeMap      r133, 3, r127
  // tmp = append(tmp, row)
  Append       r104, r104, r133
  // for g in groups {
  Const        r135, 1
  Add          r107, r107, r135
  Jump         L19
L16:
  // from r in tmp
  Const        r137, []
  IterPrep     r138, r104
  Len          r139, r138
  Move         r140, r9
L21:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L20
  Index        r143, r138, r140
  // sort by r.cntrycode
  Index        r145, r143, r28
  // from r in tmp
  Move         r146, r143
  MakeList     r147, 2, r145
  Append       r137, r137, r147
  AddInt       r140, r140, r23
  Jump         L21
L20:
  // sort by r.cntrycode
  Sort         r137, r137
  // print(result)
  Print        r137
  // expect result == [
  Const        r150, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r151, r137, r150
  Expect       r151
  Return       r0
