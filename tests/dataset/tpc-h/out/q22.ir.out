func main (regs=177)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r4, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
L3:
  Index        r11, r7, r9
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r13, "c_acctbal"
  Index        r14, r11, r13
  Const        r15, 0
  LessFloat    r16, r15, r14
  Const        r17, "c_phone"
  Index        r18, r11, r17
  Const        r19, 0
  Const        r20, 2
  Slice        r21, r18, r19, r20
  In           r22, r21, r4
  JumpIfFalse  r16, L1
  JumpIfFalse  r22, L2
L1:
  // from c in customer
  Jump         L3
  // avg(
  Avg          r29, r26
  // from c in customer
  IterPrep     r32, r1
L2:
  Len          r33, r32
  Const        r34, 0
  Less         r35, r34, r33
  JumpIfFalse  r35, L4
L0:
  Index        r36, r32, r34
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r37, "c_phone"
  Index        r38, r36, r37
  Const        r39, 0
  Const        r40, 2
  Slice        r41, r38, r39, r40
L8:
  // c.c_acctbal > avg_balance && (!exists(
  Const        r42, "c_acctbal"
  Index        r43, r36, r42
  LessFloat    r44, r29, r43
  // substring(c.c_phone, 0, 2) in valid_codes &&
  In           r45, r41, r4
  JumpIfFalse  r45, L5
  // c.c_acctbal > avg_balance && (!exists(
  JumpIfFalse  r44, L6
  // from o in orders
  IterPrep     r49, r2
  Len          r50, r49
  Const        r51, 0
  Less         r52, r51, r50
  JumpIfFalse  r52, L6
  Index        r53, r49, r51
  // where o.o_custkey == c.c_custkey
  Const        r55, "o_custkey"
  Index        r56, r53, r55
  Const        r57, "c_custkey"
L5:
  Index        r58, r36, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L6
L7:
  // from o in orders
  Jump         L7
L6:
  // from c in customer
  Jump         L8
  // from c in eligible_customers
  IterPrep     r84, r79
  Len          r85, r84
  Const        r86, 0
  MakeMap      r87, 0, r0
  Less         r89, r86, r85
  JumpIfFalse  r89, L9
  Index        r90, r84, r86
  // group by c.cntrycode into g
  Const        r91, "cntrycode"
  Index        r92, r90, r91
  Str          r93, r92
  In           r94, r93, r87
  JumpIfTrue   r94, L10
  // from c in eligible_customers
  Const        r96, "__group__"
  Const        r97, true
L4:
  Const        r98, "key"
  // group by c.cntrycode into g
  Move         r99, r92
  // from c in eligible_customers
  MakeMap      r102, 2, r96
  SetIndex     r87, r93, r102
  Const        r104, "items"
L11:
  Index        r105, r87, r93
  Index        r106, r105, r104
  Append       r107, r106, r90
  SetIndex     r105, r104, r107
  Jump         L11
  Jump         L12
  // for g in groups {
  IterPrep     r121, r83
  Len          r122, r121
  Const        r123, 0
  Less         r124, r123, r122
  JumpIfFalse  r124, L9
  Index        r125, r121, r123
L10:
  // for x in g.items {
  Const        r128, "items"
  Index        r129, r125, r128
  IterPrep     r130, r129
  Len          r131, r130
  Const        r132, 0
  Less         r133, r132, r131
  JumpIfFalse  r133, L13
  // from r in tmp
  Const        r158, []
  IterPrep     r159, r155
  Len          r160, r159
  Const        r161, 0
L12:
  Less         r162, r161, r160
  JumpIfFalse  r162, L14
  // sort by r.cntrycode
  Sort         r173, r158
  // print(result)
  Print        r173
  // expect result == [
  Const        r175, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
L13:
  Equal        r176, r173, r175
  Expect       r176
  Return       r0
