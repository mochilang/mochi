func main (regs=158)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  // let orders = [
  Const        r1, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r2, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r3, []
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r4, "c_acctbal"
  Const        r5, "c_phone"
  // from c in customer
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Index        r13, r12, r4
  Const        r14, 0
  LessFloat    r15, r14, r13
  Index        r16, r12, r5
  Const        r17, 2
  Slice        r18, r16, r9, r17
  In           r19, r18, r2
  Move         r20, r15
  JumpIfFalse  r20, L1
  Move         r20, r19
L1:
  JumpIfFalse  r20, L2
  // select c.c_acctbal
  Index        r21, r12, r4
  // from c in customer
  Append       r3, r3, r21
L2:
  Const        r23, 1
  AddInt       r8, r8, r23
  Jump         L3
L0:
  // avg(
  Avg          r24, r3
  // from c in customer
  Const        r25, []
  // where o.o_custkey == c.c_custkey
  Const        r26, "o_custkey"
  Const        r27, "c_custkey"
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r28, "cntrycode"
  // from c in customer
  IterPrep     r29, r0
  Len          r30, r29
  Move         r31, r9
L10:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L4
  Index        r12, r29, r31
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Index        r34, r12, r5
  Slice        r35, r34, r9, r17
  // c.c_acctbal > avg_balance && (!exists(
  Index        r36, r12, r4
  LessFloat    r37, r24, r36
  // substring(c.c_phone, 0, 2) in valid_codes &&
  In           r39, r35, r2
  JumpIfFalse  r39, L5
  Move         r39, r37
  // c.c_acctbal > avg_balance && (!exists(
  JumpIfFalse  r39, L5
  // from o in orders
  Const        r40, []
  IterPrep     r41, r1
  Len          r42, r41
  Move         r43, r9
L8:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L6
  Index        r46, r41, r43
  // where o.o_custkey == c.c_custkey
  Index        r47, r46, r26
  Index        r48, r12, r27
  Equal        r49, r47, r48
  JumpIfFalse  r49, L7
  // from o in orders
  Append       r40, r40, r46
L7:
  AddInt       r43, r43, r23
  Jump         L8
L6:
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r51, r40
  Not          r39, r51
L5:
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r39, L9
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r53, "cntrycode"
  Index        r54, r12, r5
  Slice        r55, r54, r9, r17
  // c_acctbal: c.c_acctbal
  Const        r56, "c_acctbal"
  Index        r57, r12, r4
  // cntrycode: substring(c.c_phone, 0, 2),
  Move         r58, r53
  Move         r59, r55
  // c_acctbal: c.c_acctbal
  Move         r60, r56
  Move         r61, r57
  // select {
  MakeMap      r62, 2, r58
  // from c in customer
  Append       r25, r25, r62
L9:
  AddInt       r31, r31, r23
  Jump         L10
L4:
  // from c in eligible_customers
  Const        r64, []
  IterPrep     r65, r25
  Len          r66, r65
  Const        r67, 0
  MakeMap      r68, 0, r0
  Const        r69, []
L13:
  LessInt      r71, r67, r66
  JumpIfFalse  r71, L11
  Index        r72, r65, r67
  // group by c.cntrycode into g
  Index        r73, r72, r28
  Str          r74, r73
  In           r75, r74, r68
  JumpIfTrue   r75, L12
  // from c in eligible_customers
  Const        r76, []
  Const        r77, "__group__"
  Const        r78, true
  Const        r79, "key"
  // group by c.cntrycode into g
  Move         r80, r73
  // from c in eligible_customers
  Const        r81, "items"
  Move         r82, r76
  Const        r83, "count"
  Const        r84, 0
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  MakeMap      r93, 4, r85
  SetIndex     r68, r74, r93
  Append       r69, r69, r93
L12:
  Const        r95, "items"
  Index        r96, r68, r74
  Index        r97, r96, r95
  Append       r98, r97, r72
  SetIndex     r96, r95, r98
  Const        r99, "count"
  Index        r100, r96, r99
  AddInt       r101, r100, r23
  SetIndex     r96, r99, r101
  AddInt       r67, r67, r23
  Jump         L13
L11:
  Move         r102, r9
  Len          r103, r69
L15:
  LessInt      r104, r102, r103
  JumpIfFalse  r104, L14
  Index        r106, r69, r102
  Append       r64, r64, r106
  AddInt       r102, r102, r23
  Jump         L15
L14:
  // var tmp = []
  Const        r109, []
  // for g in groups {
  IterPrep     r110, r64
  Len          r111, r110
  Const        r112, 0
L19:
  Less         r113, r112, r111
  JumpIfFalse  r113, L16
  Index        r106, r110, r112
  // var total = 0.0
  Move         r115, r14
  // for x in g.items {
  Index        r116, r106, r95
  IterPrep     r117, r116
  Len          r118, r117
  Const        r119, 0
L18:
  Less         r120, r119, r118
  JumpIfFalse  r120, L17
  Index        r122, r117, r119
  // total = total + x.c_acctbal
  Index        r123, r122, r4
  AddFloat     r115, r115, r123
  // for x in g.items {
  Const        r125, 1
  Add          r119, r119, r125
  Jump         L18
L17:
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r127, "cntrycode"
  Const        r128, "key"
  Index        r129, r106, r128
  Const        r130, "numcust"
  Count        r131, r106
  Const        r132, "totacctbal"
  Move         r133, r127
  Move         r134, r129
  Move         r135, r130
  Move         r136, r131
  Move         r137, r132
  Move         r138, r115
  MakeMap      r139, 3, r133
  // tmp = append(tmp, row)
  Append       r109, r109, r139
  // for g in groups {
  Const        r141, 1
  Add          r112, r112, r141
  Jump         L19
L16:
  // from r in tmp
  Const        r143, []
  IterPrep     r144, r109
  Len          r145, r144
  Move         r146, r9
L21:
  LessInt      r147, r146, r145
  JumpIfFalse  r147, L20
  Index        r149, r144, r146
  // sort by r.cntrycode
  Index        r151, r149, r28
  // from r in tmp
  Move         r152, r149
  MakeList     r153, 2, r151
  Append       r143, r143, r153
  AddInt       r146, r146, r23
  Jump         L21
L20:
  // sort by r.cntrycode
  Sort         r143, r143
  // print(result)
  Print        r143
  // expect result == [
  Const        r156, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r157, r143, r156
  Expect       r157
  Return       r0
