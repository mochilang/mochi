func main (regs=221)
  // let customer = [
  Const        r0, [{"c_acctbal": 600, "c_custkey": 1, "c_phone": "13-123-4567"}, {"c_acctbal": 100, "c_custkey": 2, "c_phone": "31-456-7890"}, {"c_acctbal": 700, "c_custkey": 3, "c_phone": "30-000-0000"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"o_custkey": 2, "o_orderkey": 10}]
  // let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
  Const        r4, ["13", "31", "23", "29", "30", "18", "17"]
  // from c in customer
  Const        r6, []
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
L3:
  Index        r11, r7, r9
  // where c.c_acctbal > 0.0 && substring(c.c_phone, 0, 2) in valid_codes
  Const        r13, "c_acctbal"
  Index        r14, r11, r13
  Const        r15, 0
  LessFloat    r16, r15, r14
  Const        r17, "c_phone"
  Index        r18, r11, r17
  Const        r19, 0
  Const        r20, 2
  Slice        r21, r18, r19, r20
  In           r22, r21, r4
  JumpIfFalse  r16, L1
  JumpIfFalse  r22, L2
  // select c.c_acctbal
  Const        r24, "c_acctbal"
  Index        r25, r11, r24
  // from c in customer
  Append       r26, r6, r25
  Const        r27, 1
L1:
  Add          r28, r9, r27
  Jump         L3
  // avg(
  Avg          r29, r26
  // from c in customer
  Const        r31, []
  IterPrep     r32, r1
L2:
  Len          r33, r32
  Const        r34, 0
  Less         r35, r34, r33
  JumpIfFalse  r35, L4
L0:
  Index        r36, r32, r34
  // substring(c.c_phone, 0, 2) in valid_codes &&
  Const        r37, "c_phone"
  Index        r38, r36, r37
  Const        r39, 0
  Const        r40, 2
  Slice        r41, r38, r39, r40
L11:
  // c.c_acctbal > avg_balance && (!exists(
  Const        r42, "c_acctbal"
  Index        r43, r36, r42
  LessFloat    r44, r29, r43
  // substring(c.c_phone, 0, 2) in valid_codes &&
  In           r45, r41, r4
  JumpIfFalse  r45, L5
  // c.c_acctbal > avg_balance && (!exists(
  JumpIfFalse  r44, L6
  // from o in orders
  Const        r48, []
  IterPrep     r49, r2
  Len          r50, r49
  Const        r51, 0
  Less         r52, r51, r50
  JumpIfFalse  r52, L7
  Index        r53, r49, r51
  // where o.o_custkey == c.c_custkey
  Const        r55, "o_custkey"
  Index        r56, r53, r55
  Const        r57, "c_custkey"
L5:
  Index        r58, r36, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L8
  // from o in orders
  Append       r60, r48, r53
  Const        r61, 1
  Add          r62, r51, r61
L9:
  Move         r51, r62
  Jump         L9
  // c.c_acctbal > avg_balance && (!exists(
  Exists       r63, r60
  Not          r64, r63
  // substring(c.c_phone, 0, 2) in valid_codes &&
  JumpIfFalse  r64, L10
  // cntrycode: substring(c.c_phone, 0, 2),
  Const        r65, "cntrycode"
  Const        r66, "c_phone"
  Index        r67, r36, r66
  Const        r68, 0
  Const        r69, 2
  Slice        r70, r67, r68, r69
  // c_acctbal: c.c_acctbal
  Const        r71, "c_acctbal"
L8:
  Const        r72, "c_acctbal"
  Index        r73, r36, r72
  // cntrycode: substring(c.c_phone, 0, 2),
  Move         r74, r65
  Move         r75, r70
L7:
  // c_acctbal: c.c_acctbal
  Move         r76, r71
  Move         r77, r73
  // select {
  MakeMap      r78, 2, r74
L6:
  // from c in customer
  Append       r79, r31, r78
  Const        r80, 1
  Add          r81, r34, r80
  Jump         L11
  // from c in eligible_customers
  Const        r83, []
  IterPrep     r84, r79
  Len          r85, r84
  Const        r86, 0
  MakeMap      r87, 0, r0
  Const        r88, []
  Less         r89, r86, r85
  JumpIfFalse  r89, L12
  Index        r90, r84, r86
  Move         r12, r90
  // group by c.cntrycode into g
  Const        r91, "cntrycode"
  Index        r92, r12, r91
  Str          r93, r92
L10:
  In           r94, r93, r87
  JumpIfTrue   r94, L13
  // from c in eligible_customers
  Const        r95, []
  Const        r96, "__group__"
L4:
  Const        r97, true
  Const        r98, "key"
  // group by c.cntrycode into g
  Move         r99, r92
  // from c in eligible_customers
  Const        r100, "items"
  Move         r101, r95
  MakeMap      r102, 3, r96
  SetIndex     r87, r93, r102
L14:
  Append       r103, r88, r102
  Const        r104, "items"
  Index        r105, r87, r93
  Index        r106, r105, r104
  Append       r107, r106, r90
  SetIndex     r105, r104, r107
  Const        r108, 1
  Add          r109, r86, r108
  Jump         L14
  Const        r110, 0
  Len          r111, r103
  Less         r112, r110, r111
  JumpIfFalse  r112, L15
  Index        r113, r103, r110
  Append       r115, r83, r113
  Const        r116, 1
  Add          r117, r110, r116
  Jump         L16
  // var tmp = []
  Const        r119, []
  // for g in groups {
  IterPrep     r121, r115
L13:
  Len          r122, r121
  Const        r123, 0
  Less         r124, r123, r122
  JumpIfFalse  r124, L17
  Index        r125, r121, r123
  // var total = 0.0
  Const        r126, 0
  // for x in g.items {
  Const        r128, "items"
  Index        r129, r125, r128
  IterPrep     r130, r129
L12:
  Len          r131, r130
  Const        r132, 0
L16:
  Less         r133, r132, r131
  JumpIfFalse  r133, L18
  Index        r134, r130, r132
  // total = total + x.c_acctbal
  Const        r136, "c_acctbal"
  Index        r137, r134, r136
  AddFloat     r138, r126, r137
  // for x in g.items {
  Const        r139, 1
  Add          r140, r132, r139
  Jump         L19
  // let row = { cntrycode: g.key, numcust: count(g), totacctbal: total }
  Const        r141, "cntrycode"
L15:
  Const        r142, "key"
  Index        r143, r125, r142
  Const        r144, "numcust"
  Count        r145, r125
  Const        r146, "totacctbal"
  Move         r147, r141
L20:
  Move         r148, r143
  Move         r149, r144
  Move         r150, r145
  Move         r151, r146
  Move         r152, r138
  MakeMap      r153, 3, r147
  // tmp = append(tmp, row)
  Append       r155, r119, r153
  // for g in groups {
  Const        r156, 1
  Add          r157, r123, r156
  Jump         L20
  // from r in tmp
  Const        r158, []
L19:
  IterPrep     r159, r155
  Len          r160, r159
  Const        r161, 0
  Less         r162, r161, r160
  JumpIfFalse  r162, L21
  Index        r163, r159, r161
  // sort by r.cntrycode
  Const        r165, "cntrycode"
  Index        r166, r163, r165
  Move         r167, r166
  // from r in tmp
  Move         r168, r163
  MakeList     r169, 2, r167
  Append       r170, r158, r169
L18:
  Const        r171, 1
  Add          r172, r161, r171
  Jump         L22
  // sort by r.cntrycode
  Sort         r173, r170
  // print(result)
  Print        r173
  // expect result == [
  Const        r175, [{"cntrycode": "13", "numcust": 1, "totacctbal": 600}, {"cntrycode": "30", "numcust": 1, "totacctbal": 700}]
  Equal        r176, r173, r175
  Expect       r176
  Return       r0
