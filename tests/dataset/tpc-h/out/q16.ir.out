func main (regs=80)
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, "p_partkey"
  Const        r9, "ps_partkey"
  // p.p_brand == "Brand#12" &&
  Const        r10, "p_brand"
  // p.p_type.contains("SMALL") &&
  Const        r11, "p_type"
  Const        r12, "contains"
  // p.p_size == 5
  Const        r13, "p_size"
  // select ps.ps_suppkey
  Const        r14, "ps_suppkey"
  // from ps in partsupp
  Const        r15, 0
L5:
  LessInt      r16, r15, r5
  JumpIfFalse  r16, L0
  Index        r17, r4, r15
  Move         r18, r17
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r19, 0
L4:
  LessInt      r20, r19, r7
  JumpIfFalse  r20, L1
  Index        r21, r6, r19
  Move         r22, r21
  Const        r8, "p_partkey"
  Index        r23, r22, r8
  Const        r9, "ps_partkey"
  Index        r24, r18, r9
  Equal        r25, r23, r24
  JumpIfFalse  r25, L2
  // p.p_brand == "Brand#12" &&
  Const        r10, "p_brand"
  Index        r26, r22, r10
  Const        r27, "Brand#12"
  Equal        r28, r26, r27
  // p.p_size == 5
  Const        r13, "p_size"
  Index        r29, r22, r13
  Const        r30, 5
  Equal        r31, r29, r30
  // p.p_brand == "Brand#12" &&
  Move         r32, r28
  JumpIfFalse  r32, L3
  Const        r11, "p_type"
  Index        r33, r22, r11
  // p.p_type.contains("SMALL") &&
  Const        r34, "SMALL"
  In           r35, r34, r33
  // p.p_brand == "Brand#12" &&
  Move         r32, r35
  // p.p_type.contains("SMALL") &&
  JumpIfFalse  r32, L3
  Move         r32, r31
L3:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r32, L2
  // select ps.ps_suppkey
  Const        r14, "ps_suppkey"
  Index        r36, r18, r14
  // from ps in partsupp
  Append       r37, r3, r36
  Move         r3, r37
L2:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r38, 1
  AddInt       r19, r19, r38
  Jump         L4
L1:
  // from ps in partsupp
  Const        r38, 1
  AddInt       r15, r15, r38
  Jump         L5
L0:
  // from s in supplier
  Const        r39, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r40, "s_suppkey"
  Const        r41, "s_comment"
  Const        r12, "contains"
  Const        r41, "s_comment"
  Const        r12, "contains"
  // s_name: s.s_name,
  Const        r42, "s_name"
  Const        r42, "s_name"
  // s_address: s.s_address
  Const        r43, "s_address"
  Const        r43, "s_address"
  // order by s.s_name
  Const        r42, "s_name"
  // from s in supplier
  IterPrep     r44, r0
  Len          r45, r44
  Const        r47, 0
  Move         r46, r47
L9:
  LessInt      r48, r46, r45
  JumpIfFalse  r48, L6
  Index        r49, r44, r46
  Move         r50, r49
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r40, "s_suppkey"
  Index        r51, r50, r40
  In           r52, r51, r3
  Not          r53, r52
  Move         r54, r53
  JumpIfFalse  r54, L7
  Const        r41, "s_comment"
  Index        r55, r50, r41
  Const        r56, "Customer"
  In           r57, r56, r55
  Not          r58, r57
  Move         r54, r58
  JumpIfFalse  r54, L7
  Const        r41, "s_comment"
  Index        r59, r50, r41
  Const        r60, "Complaints"
  In           r61, r60, r59
  Not          r62, r61
  Move         r54, r62
L7:
  JumpIfFalse  r54, L8
  // s_name: s.s_name,
  Const        r63, "s_name"
  Const        r42, "s_name"
  Index        r64, r50, r42
  // s_address: s.s_address
  Const        r65, "s_address"
  Const        r43, "s_address"
  Index        r66, r50, r43
  // s_name: s.s_name,
  Move         r67, r63
  Move         r68, r64
  // s_address: s.s_address
  Move         r69, r65
  Move         r70, r66
  // select {
  MakeMap      r71, 2, r67
  // order by s.s_name
  Const        r42, "s_name"
  Index        r74, r50, r42
  Move         r72, r74
  // from s in supplier
  Move         r73, r71
  MakeList     r75, 2, r72
  Append       r76, r39, r75
  Move         r39, r76
L8:
  Const        r38, 1
  AddInt       r46, r46, r38
  Jump         L9
L6:
  // order by s.s_name
  Sort         r77, r39
  // from s in supplier
  Move         r39, r77
  // json(result)
  JSON         r39
  // expect result == []
  Const        r78, []
  Equal        r79, r39, r78
  Expect       r79
  Return       r0
