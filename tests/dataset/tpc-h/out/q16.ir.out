func main (regs=169)
L0:
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  // from ps in partsupp
  Const        r8, 0
  EqualInt     r9, r5, r8
  JumpIfTrue   r9, L0
  EqualInt     r10, r7, r8
  JumpIfTrue   r10, L0
  LessEq       r11, r7, r5
  JumpIfFalse  r11, L1
  // join p in part on p.p_partkey == ps.ps_partkey
  MakeMap      r12, 0, r0
  Const        r13, 0
L7:
  LessInt      r14, r13, r7
  JumpIfFalse  r14, L2
  Index        r15, r6, r13
  Move         r16, r15
  // p.p_brand == "Brand#12" &&
  Const        r17, "p_brand"
  Index        r18, r16, r17
  Const        r19, "Brand#12"
  Equal        r20, r18, r19
  // p.p_size == 5
  Const        r21, "p_size"
  Index        r22, r16, r21
  Const        r23, 5
  Equal        r24, r22, r23
  // p.p_brand == "Brand#12" &&
  Move         r25, r20
  JumpIfFalse  r25, L3
  Const        r26, "p_type"
  Index        r27, r16, r26
  // p.p_type.contains("SMALL") &&
  Const        r28, "SMALL"
  In           r30, r28, r27
L3:
  JumpIfFalse  r30, L4
  Move         r30, r24
L4:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r30, L5
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r31, "p_partkey"
  Index        r32, r16, r31
  Index        r33, r12, r32
  Const        r34, nil
  NotEqual     r35, r33, r34
  JumpIfTrue   r35, L6
  MakeList     r36, 0, r0
  SetIndex     r12, r32, r36
L6:
  Index        r33, r12, r32
  Append       r37, r33, r15
  SetIndex     r12, r32, r37
L5:
  Const        r38, 1
  AddInt       r13, r13, r38
  Jump         L7
L2:
  // from ps in partsupp
  Const        r39, 0
L13:
  LessInt      r40, r39, r5
  JumpIfFalse  r40, L0
  Index        r42, r4, r39
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r43, "ps_partkey"
  Index        r44, r42, r43
  // from ps in partsupp
  Index        r45, r12, r44
  Const        r46, nil
  NotEqual     r47, r45, r46
  JumpIfFalse  r47, L8
  Len          r48, r45
  Const        r49, 0
L12:
  LessInt      r50, r49, r48
  JumpIfFalse  r50, L8
  Index        r16, r45, r49
  // p.p_brand == "Brand#12" &&
  Const        r52, "p_brand"
  Index        r53, r16, r52
  Const        r54, "Brand#12"
  Equal        r55, r53, r54
  // p.p_size == 5
  Const        r56, "p_size"
  Index        r57, r16, r56
  Const        r58, 5
  Equal        r59, r57, r58
  // p.p_brand == "Brand#12" &&
  Move         r60, r55
  JumpIfFalse  r60, L9
  Const        r61, "p_type"
  Index        r62, r16, r61
  // p.p_type.contains("SMALL") &&
  Const        r63, "SMALL"
  In           r65, r63, r62
L9:
  JumpIfFalse  r65, L10
  Move         r65, r59
L10:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r65, L11
  // select ps.ps_suppkey
  Const        r66, "ps_suppkey"
  Index        r67, r42, r66
  // from ps in partsupp
  Append       r3, r3, r67
L11:
  Const        r69, 1
  AddInt       r49, r49, r69
  Jump         L12
L8:
  Const        r70, 1
  AddInt       r39, r39, r70
  Jump         L13
L1:
  MakeMap      r71, 0, r0
  Const        r72, 0
L16:
  LessInt      r73, r72, r5
  JumpIfFalse  r73, L14
  Index        r74, r4, r72
  Move         r42, r74
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r75, "ps_partkey"
  Index        r76, r42, r75
  // from ps in partsupp
  Index        r77, r71, r76
  Const        r78, nil
  NotEqual     r79, r77, r78
  JumpIfTrue   r79, L15
  MakeList     r80, 0, r0
  SetIndex     r71, r76, r80
L15:
  Index        r77, r71, r76
  Append       r81, r77, r74
  SetIndex     r71, r76, r81
  Const        r82, 1
  AddInt       r72, r72, r82
  Jump         L16
L14:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r83, 0
L23:
  LessInt      r84, r83, r7
  JumpIfFalse  r84, L17
  Index        r16, r6, r83
  Const        r86, "p_partkey"
  Index        r87, r16, r86
  Index        r88, r71, r87
  Const        r89, nil
  NotEqual     r90, r88, r89
  JumpIfFalse  r90, L18
  Len          r91, r88
  Const        r92, 0
L22:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L18
  Index        r42, r88, r92
  // p.p_brand == "Brand#12" &&
  Const        r95, "p_brand"
  Index        r96, r16, r95
  Const        r97, "Brand#12"
  Equal        r98, r96, r97
  // p.p_size == 5
  Const        r99, "p_size"
  Index        r100, r16, r99
  Const        r101, 5
  Equal        r102, r100, r101
  // p.p_brand == "Brand#12" &&
  Move         r103, r98
  JumpIfFalse  r103, L19
  Const        r104, "p_type"
  Index        r105, r16, r104
  // p.p_type.contains("SMALL") &&
  Const        r106, "SMALL"
  In           r108, r106, r105
L19:
  JumpIfFalse  r108, L20
  Move         r108, r102
L20:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r108, L21
  // select ps.ps_suppkey
  Const        r109, "ps_suppkey"
  Index        r110, r42, r109
  // from ps in partsupp
  Append       r3, r3, r110
L21:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r112, 1
  AddInt       r92, r92, r112
  Jump         L22
L18:
  Const        r113, 1
  AddInt       r83, r83, r113
  Jump         L23
L17:
  // from s in supplier
  Const        r114, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r115, "s_suppkey"
  Const        r116, "s_comment"
  Const        r117, "contains"
  Const        r118, "s_comment"
  Const        r119, "contains"
  // s_name: s.s_name,
  Const        r120, "s_name"
  Const        r121, "s_name"
  // s_address: s.s_address
  Const        r122, "s_address"
  Const        r123, "s_address"
  // order by s.s_name
  Const        r124, "s_name"
  // from s in supplier
  IterPrep     r125, r0
  Len          r126, r125
  Const        r127, 0
L28:
  LessInt      r129, r127, r126
  JumpIfFalse  r129, L24
  Index        r131, r125, r127
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r132, "s_suppkey"
  Index        r133, r131, r132
  In           r134, r133, r3
  Not          r136, r134
  JumpIfFalse  r136, L25
  Const        r137, "s_comment"
  Index        r138, r131, r137
  Const        r139, "Customer"
  In           r140, r139, r138
  Not          r142, r140
L25:
  JumpIfFalse  r142, L26
  Const        r143, "s_comment"
  Index        r144, r131, r143
  Const        r145, "Complaints"
  In           r146, r145, r144
  Not          r142, r146
L26:
  JumpIfFalse  r142, L27
  // s_name: s.s_name,
  Const        r148, "s_name"
  Const        r149, "s_name"
  Index        r150, r131, r149
  // s_address: s.s_address
  Const        r151, "s_address"
  Const        r152, "s_address"
  Index        r153, r131, r152
  // s_name: s.s_name,
  Move         r154, r148
  Move         r155, r150
  // s_address: s.s_address
  Move         r156, r151
  Move         r157, r153
  // select {
  MakeMap      r158, 2, r154
  // order by s.s_name
  Const        r159, "s_name"
  Index        r161, r131, r159
  // from s in supplier
  Move         r162, r158
  MakeList     r163, 2, r161
  Append       r114, r114, r163
L27:
  Const        r165, 1
  AddInt       r127, r127, r165
  Jump         L28
L24:
  // order by s.s_name
  Sort         r114, r114
  // print(result)
  Print        r114
  // expect result == []
  Const        r167, []
  Equal        r168, r114, r167
  Expect       r168
  Return       r0
