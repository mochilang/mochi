func main (regs=82)
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, "p_partkey"
  Const        r9, "ps_partkey"
  // p.p_brand == "Brand#12" &&
  Const        r10, "p_brand"
  // p.p_type.contains("SMALL") &&
  Const        r11, "p_type"
  Const        r12, "contains"
  // p.p_size == 5
  Const        r13, "p_size"
  // select ps.ps_suppkey
  Const        r14, "ps_suppkey"
  // from ps in partsupp
  Const        r15, 0
L6:
  LessInt      r16, r15, r5
  JumpIfFalse  r16, L0
  Index        r17, r4, r15
  Move         r18, r17
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r19, 0
L5:
  LessInt      r20, r19, r7
  JumpIfFalse  r20, L1
  Index        r21, r6, r19
  Move         r22, r21
  Index        r23, r22, r8
  Index        r24, r18, r9
  Equal        r25, r23, r24
  JumpIfFalse  r25, L2
  // p.p_brand == "Brand#12" &&
  Index        r26, r22, r10
  Const        r27, "Brand#12"
  Equal        r28, r26, r27
  // p.p_size == 5
  Index        r29, r22, r13
  Const        r30, 5
  Equal        r31, r29, r30
  Index        r32, r22, r11
  // p.p_type.contains("SMALL") &&
  Const        r33, "SMALL"
  In           r34, r33, r32
  // p.p_brand == "Brand#12" &&
  Move         r35, r28
  JumpIfFalse  r35, L3
  Move         r35, r34
L3:
  // p.p_type.contains("SMALL") &&
  Move         r36, r35
  JumpIfFalse  r36, L4
  Move         r36, r31
L4:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r36, L2
  // select ps.ps_suppkey
  Index        r37, r18, r14
  // from ps in partsupp
  Append       r38, r3, r37
  Move         r3, r38
L2:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r39, 1
  AddInt       r19, r19, r39
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r15, r15, r39
  Jump         L6
L0:
  // from s in supplier
  Const        r40, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r41, "s_suppkey"
  Const        r42, "s_comment"
  // s_name: s.s_name,
  Const        r43, "s_name"
  // s_address: s.s_address
  Const        r44, "s_address"
  // from s in supplier
  IterPrep     r45, r0
  Len          r46, r45
  Const        r48, 0
  Move         r47, r48
L11:
  LessInt      r49, r47, r46
  JumpIfFalse  r49, L7
  Index        r50, r45, r47
  Move         r51, r50
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Index        r52, r51, r41
  In           r53, r52, r3
  Not          r54, r53
  Index        r55, r51, r42
  Const        r56, "Customer"
  In           r57, r56, r55
  Not          r58, r57
  Move         r59, r54
  JumpIfFalse  r59, L8
  Move         r59, r58
L8:
  Index        r60, r51, r42
  Const        r61, "Complaints"
  In           r62, r61, r60
  Not          r63, r62
  Move         r64, r59
  JumpIfFalse  r64, L9
  Move         r64, r63
L9:
  JumpIfFalse  r64, L10
  // s_name: s.s_name,
  Const        r65, "s_name"
  Index        r66, r51, r43
  // s_address: s.s_address
  Const        r67, "s_address"
  Index        r68, r51, r44
  // s_name: s.s_name,
  Move         r69, r65
  Move         r70, r66
  // s_address: s.s_address
  Move         r71, r67
  Move         r72, r68
  // select {
  MakeMap      r73, 2, r69
  // order by s.s_name
  Index        r74, r51, r43
  Move         r75, r74
  // from s in supplier
  Move         r76, r73
  MakeList     r77, 2, r75
  Append       r78, r40, r77
  Move         r40, r78
L10:
  AddInt       r47, r47, r39
  Jump         L11
L7:
  // order by s.s_name
  Sort         r79, r40
  // from s in supplier
  Move         r40, r79
  // print(result)
  Print        r40
  // expect result == []
  Const        r80, []
  Equal        r81, r40, r80
  Expect       r81
  Return       r0
