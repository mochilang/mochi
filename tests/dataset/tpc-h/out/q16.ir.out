func main (regs=147)
L14:
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  // from ps in partsupp
  Const        r8, 0
  EqualInt     r9, r5, r8
  JumpIfTrue   r9, L0
  EqualInt     r10, r7, r8
  JumpIfTrue   r10, L0
  LessEq       r11, r7, r5
  JumpIfFalse  r11, L1
  // join p in part on p.p_partkey == ps.ps_partkey
  MakeMap      r12, 0, r0
  Const        r13, 0
L7:
  Less         r14, r13, r7
  JumpIfFalse  r14, L2
  Index        r15, r6, r13
  Move         r16, r15
  // p.p_brand == "Brand#12" &&
  Const        r17, "p_brand"
  Index        r18, r16, r17
  Const        r19, "Brand#12"
  Equal        r20, r18, r19
  // p.p_size == 5
  Const        r21, "p_size"
  Index        r22, r16, r21
  Const        r23, 5
  Equal        r24, r22, r23
  // p.p_brand == "Brand#12" &&
  Move         r25, r20
  JumpIfFalse  r25, L3
  Const        r26, "p_type"
  Index        r27, r16, r26
  // p.p_type.contains("SMALL") &&
  Const        r28, "SMALL"
  In           r30, r28, r27
L3:
  JumpIfFalse  r30, L4
  Move         r30, r24
L4:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r30, L5
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r31, "p_partkey"
  Index        r32, r16, r31
  Index        r33, r12, r32
  Const        r34, nil
  NotEqual     r35, r33, r34
  JumpIfTrue   r35, L6
  MakeList     r36, 0, r0
  SetIndex     r12, r32, r36
L6:
  Index        r33, r12, r32
  Append       r37, r33, r15
  SetIndex     r12, r32, r37
L5:
  Const        r38, 1
  Add          r13, r13, r38
  Jump         L7
L2:
  // from ps in partsupp
  Const        r40, 0
L13:
  Less         r41, r40, r5
  JumpIfFalse  r41, L0
  Index        r43, r4, r40
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r44, "ps_partkey"
  Index        r45, r43, r44
  // from ps in partsupp
  Index        r46, r12, r45
  Const        r47, nil
  NotEqual     r48, r46, r47
  JumpIfFalse  r48, L8
  Len          r49, r46
  Const        r50, 0
L12:
  Less         r51, r50, r49
  JumpIfFalse  r51, L8
  Index        r16, r46, r50
  // p.p_brand == "Brand#12" &&
  Index        r53, r16, r17
  Equal        r54, r53, r19
  // p.p_size == 5
  Index        r55, r16, r21
  Equal        r56, r55, r23
  // p.p_brand == "Brand#12" &&
  Move         r57, r54
  JumpIfFalse  r57, L9
  Index        r58, r16, r26
  // p.p_type.contains("SMALL") &&
  In           r60, r28, r58
L9:
  JumpIfFalse  r60, L10
  Move         r60, r56
L10:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r60, L11
  // select ps.ps_suppkey
  Const        r61, "ps_suppkey"
  Index        r62, r43, r61
  // from ps in partsupp
  Append       r3, r3, r62
L11:
  Const        r64, 1
  Add          r50, r50, r64
  Jump         L12
L8:
  Const        r66, 1
  Add          r40, r40, r66
  Jump         L13
L0:
  Jump         L14
L1:
  MakeMap      r68, 0, r0
  Const        r69, 0
L17:
  Less         r70, r69, r5
  JumpIfFalse  r70, L15
  Index        r71, r4, r69
  // join p in part on p.p_partkey == ps.ps_partkey
  Index        r72, r71, r44
  // from ps in partsupp
  Index        r73, r68, r72
  Const        r74, nil
  NotEqual     r75, r73, r74
  JumpIfTrue   r75, L16
  MakeList     r76, 0, r0
  SetIndex     r68, r72, r76
L16:
  Index        r73, r68, r72
  Append       r77, r73, r71
  SetIndex     r68, r72, r77
  Const        r78, 1
  Add          r69, r69, r78
  Jump         L17
L15:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r80, 0
L24:
  Less         r81, r80, r7
  JumpIfFalse  r81, L18
  Index        r16, r6, r80
  Index        r83, r16, r31
  Index        r84, r68, r83
  Const        r85, nil
  NotEqual     r86, r84, r85
  JumpIfFalse  r86, L19
  Len          r87, r84
  Const        r88, 0
L23:
  Less         r89, r88, r87
  JumpIfFalse  r89, L19
  Index        r43, r84, r88
  // p.p_brand == "Brand#12" &&
  Index        r91, r16, r17
  Equal        r92, r91, r19
  // p.p_size == 5
  Index        r93, r16, r21
  Equal        r94, r93, r23
  // p.p_brand == "Brand#12" &&
  Move         r95, r92
  JumpIfFalse  r95, L20
  Index        r96, r16, r26
  // p.p_type.contains("SMALL") &&
  In           r98, r28, r96
L20:
  JumpIfFalse  r98, L21
  Move         r98, r94
L21:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r98, L22
  // select ps.ps_suppkey
  Index        r99, r43, r61
  // from ps in partsupp
  Append       r3, r3, r99
L22:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r101, 1
  Add          r88, r88, r101
  Jump         L23
L19:
  Const        r103, 1
  Add          r80, r80, r103
  Jump         L24
L18:
  // from s in supplier
  Const        r105, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r106, "s_suppkey"
  Const        r107, "s_comment"
  // s_name: s.s_name,
  Const        r109, "s_name"
  // s_address: s.s_address
  Const        r110, "s_address"
  // from s in supplier
  IterPrep     r111, r0
  Len          r112, r111
  Const        r113, 0
L29:
  LessInt      r115, r113, r112
  JumpIfFalse  r115, L25
  Index        r117, r111, r113
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Index        r118, r117, r106
  In           r119, r118, r3
  Not          r121, r119
  JumpIfFalse  r121, L26
  Index        r122, r117, r107
  Const        r123, "Customer"
  In           r124, r123, r122
  Not          r126, r124
L26:
  JumpIfFalse  r126, L27
  Index        r127, r117, r107
  Const        r128, "Complaints"
  In           r129, r128, r127
  Not          r126, r129
L27:
  JumpIfFalse  r126, L28
  // s_name: s.s_name,
  Const        r131, "s_name"
  Index        r132, r117, r109
  // s_address: s.s_address
  Const        r133, "s_address"
  Index        r134, r117, r110
  // select {
  MakeMap      r137, 2, r131
  // order by s.s_name
  Index        r139, r117, r109
  // from s in supplier
  Move         r140, r137
  MakeList     r141, 2, r139
  Append       r105, r105, r141
L28:
  Const        r143, 1
  AddInt       r113, r113, r143
  Jump         L29
L25:
  // order by s.s_name
  Sort         r105, r105
  // print(result)
  Print        r105
  // expect result == []
  Const        r145, []
  Equal        r146, r105, r145
  Expect       r146
  Return       r0
