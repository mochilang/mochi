func main (regs=125)
L0:
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  // from ps in partsupp
  Const        r8, 0
  EqualInt     r9, r5, r8
  JumpIfTrue   r9, L0
  EqualInt     r10, r7, r8
  JumpIfTrue   r10, L0
  LessEq       r11, r7, r5
  JumpIfFalse  r11, L1
  // join p in part on p.p_partkey == ps.ps_partkey
  MakeMap      r12, 0, r0
  Const        r13, 0
L6:
  LessInt      r14, r13, r7
  JumpIfFalse  r14, L2
  Index        r15, r6, r13
  Move         r16, r15
  // p.p_brand == "Brand#12" &&
  Const        r17, "p_brand"
  Index        r18, r16, r17
  Const        r19, "Brand#12"
  Equal        r20, r18, r19
  // p.p_size == 5
  Const        r21, "p_size"
  Index        r22, r16, r21
  Const        r23, 5
  Equal        r24, r22, r23
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r20, L3
  Const        r25, "p_type"
  Index        r26, r16, r25
  // p.p_type.contains("SMALL") &&
  Const        r27, "SMALL"
  In           r20, r27, r26
  JumpIfFalse  r20, L3
  Move         r20, r24
L3:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r20, L4
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r29, "p_partkey"
  Index        r30, r16, r29
  Index        r31, r12, r30
  Const        r32, nil
  NotEqual     r33, r31, r32
  JumpIfTrue   r33, L5
  MakeList     r34, 0, r0
  SetIndex     r12, r30, r34
L5:
  Index        r31, r12, r30
  Append       r35, r31, r15
  SetIndex     r12, r30, r35
L4:
  Const        r36, 1
  AddInt       r13, r13, r36
  Jump         L6
L2:
  // from ps in partsupp
  Const        r37, 0
L11:
  LessInt      r38, r37, r5
  JumpIfFalse  r38, L0
  Index        r40, r4, r37
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r41, "ps_partkey"
  Index        r42, r40, r41
  // from ps in partsupp
  Index        r43, r12, r42
  NotEqual     r44, r43, r32
  JumpIfFalse  r44, L7
  Len          r45, r43
  Const        r46, 0
L10:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L7
  Index        r16, r43, r46
  // p.p_brand == "Brand#12" &&
  Index        r49, r16, r17
  Equal        r50, r49, r19
  // p.p_size == 5
  Index        r51, r16, r21
  Equal        r52, r51, r23
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r50, L8
  Index        r53, r16, r25
  // p.p_type.contains("SMALL") &&
  In           r50, r27, r53
  JumpIfFalse  r50, L8
  Move         r50, r52
L8:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r50, L9
  // select ps.ps_suppkey
  Const        r55, "ps_suppkey"
  Index        r56, r40, r55
  // from ps in partsupp
  Append       r3, r3, r56
L9:
  AddInt       r46, r46, r36
  Jump         L10
L7:
  AddInt       r37, r37, r36
  Jump         L11
L1:
  MakeMap      r58, 0, r0
  Const        r59, 0
L14:
  LessInt      r60, r59, r5
  JumpIfFalse  r60, L12
  Index        r61, r4, r59
  // join p in part on p.p_partkey == ps.ps_partkey
  Index        r62, r61, r41
  // from ps in partsupp
  Index        r63, r58, r62
  NotEqual     r64, r63, r32
  JumpIfTrue   r64, L13
  MakeList     r65, 0, r0
  SetIndex     r58, r62, r65
L13:
  Index        r63, r58, r62
  Append       r66, r63, r61
  SetIndex     r58, r62, r66
  AddInt       r59, r59, r36
  Jump         L14
L12:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r67, 0
L20:
  LessInt      r68, r67, r7
  JumpIfFalse  r68, L15
  Index        r16, r6, r67
  Index        r70, r16, r29
  Index        r71, r58, r70
  NotEqual     r72, r71, r32
  JumpIfFalse  r72, L16
  Len          r73, r71
  Const        r74, 0
L19:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L16
  Index        r40, r71, r74
  // p.p_brand == "Brand#12" &&
  Index        r77, r16, r17
  Equal        r78, r77, r19
  // p.p_size == 5
  Index        r79, r16, r21
  Equal        r80, r79, r23
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r78, L17
  Index        r81, r16, r25
  // p.p_type.contains("SMALL") &&
  In           r78, r27, r81
  JumpIfFalse  r78, L17
  Move         r78, r80
L17:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r78, L18
  // select ps.ps_suppkey
  Index        r83, r40, r55
  // from ps in partsupp
  Append       r3, r3, r83
L18:
  // join p in part on p.p_partkey == ps.ps_partkey
  AddInt       r74, r74, r36
  Jump         L19
L16:
  AddInt       r67, r67, r36
  Jump         L20
L15:
  // from s in supplier
  Const        r85, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r86, "s_suppkey"
  Const        r87, "s_comment"
  Const        r88, "contains"
  // s_name: s.s_name,
  Const        r89, "s_name"
  // s_address: s.s_address
  Const        r90, "s_address"
  // from s in supplier
  IterPrep     r91, r0
  Len          r92, r91
  Move         r93, r8
L24:
  LessInt      r94, r93, r92
  JumpIfFalse  r94, L21
  Index        r96, r91, r93
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Index        r97, r96, r86
  In           r98, r97, r3
  Not          r99, r98
  JumpIfFalse  r99, L22
  Index        r100, r96, r87
  Const        r101, "Customer"
  In           r102, r101, r100
  Not          r99, r102
  JumpIfFalse  r99, L22
  Index        r104, r96, r87
  Const        r105, "Complaints"
  In           r106, r105, r104
  Not          r99, r106
L22:
  JumpIfFalse  r99, L23
  // s_name: s.s_name,
  Const        r108, "s_name"
  Index        r109, r96, r89
  // s_address: s.s_address
  Const        r110, "s_address"
  Index        r111, r96, r90
  // s_name: s.s_name,
  Move         r112, r108
  Move         r113, r109
  // s_address: s.s_address
  Move         r114, r110
  Move         r115, r111
  // select {
  MakeMap      r116, 2, r112
  // order by s.s_name
  Index        r118, r96, r89
  // from s in supplier
  Move         r119, r116
  MakeList     r120, 2, r118
  Append       r85, r85, r120
L23:
  AddInt       r93, r93, r36
  Jump         L24
L21:
  // order by s.s_name
  Sort         r85, r85
  // print(result)
  Print        r85
  // expect result == []
  Const        r123, []
  Equal        r124, r85, r123
  Expect       r124
  Return       r0
