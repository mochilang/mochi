func main (regs=129)
L0:
  // let supplier = [
  Const        r0, [{"s_address": "123 Hilltop", "s_comment": "Reliable and efficient", "s_name": "AlphaSupply", "s_suppkey": 100}, {"s_address": "456 Riverside", "s_comment": "Known for Customer Complaints", "s_name": "BetaSupply", "s_suppkey": 200}]
  // let part = [
  Const        r1, [{"p_brand": "Brand#12", "p_partkey": 1, "p_size": 5, "p_type": "SMALL ANODIZED"}, {"p_brand": "Brand#23", "p_partkey": 2, "p_size": 10, "p_type": "MEDIUM POLISHED"}]
  // let partsupp = [
  Const        r2, [{"ps_partkey": 1, "ps_suppkey": 100}, {"ps_partkey": 2, "ps_suppkey": 200}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  // join p in part on p.p_partkey == ps.ps_partkey
  IterPrep     r6, r1
  Len          r7, r6
  // from ps in partsupp
  Const        r8, 0
  EqualInt     r9, r5, r8
  JumpIfTrue   r9, L0
  EqualInt     r10, r7, r8
  JumpIfTrue   r10, L0
  LessEq       r11, r7, r5
  JumpIfFalse  r11, L1
  // join p in part on p.p_partkey == ps.ps_partkey
  MakeMap      r12, 0, r0
  Const        r13, 0
L6:
  LessInt      r14, r13, r7
  JumpIfFalse  r14, L2
  Index        r15, r6, r13
  Move         r16, r15
  // p.p_brand == "Brand#12" &&
  Const        r17, "p_brand"
  Index        r18, r16, r17
  Const        r19, "Brand#12"
  Equal        r20, r18, r19
  // p.p_size == 5
  Const        r21, "p_size"
  Index        r22, r16, r21
  Const        r23, 5
  Equal        r24, r22, r23
  // p.p_brand == "Brand#12" &&
  Move         r25, r20
  JumpIfFalse  r25, L3
  Const        r26, "p_type"
  Index        r27, r16, r26
  // p.p_type.contains("SMALL") &&
  Const        r28, "SMALL"
  In           r25, r28, r27
  JumpIfFalse  r25, L3
  Move         r25, r24
L3:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r25, L4
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r30, "p_partkey"
  Index        r31, r16, r30
  Index        r32, r12, r31
  Const        r33, nil
  NotEqual     r34, r32, r33
  JumpIfTrue   r34, L5
  MakeList     r35, 0, r0
  SetIndex     r12, r31, r35
L5:
  Index        r32, r12, r31
  Append       r36, r32, r15
  SetIndex     r12, r31, r36
L4:
  Const        r37, 1
  AddInt       r13, r13, r37
  Jump         L6
L2:
  // from ps in partsupp
  Const        r38, 0
L11:
  LessInt      r39, r38, r5
  JumpIfFalse  r39, L0
  Index        r41, r4, r38
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r42, "ps_partkey"
  Index        r43, r41, r42
  // from ps in partsupp
  Index        r44, r12, r43
  NotEqual     r45, r44, r33
  JumpIfFalse  r45, L7
  Len          r46, r44
  Const        r47, 0
L10:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L7
  Index        r16, r44, r47
  // p.p_brand == "Brand#12" &&
  Index        r50, r16, r17
  Equal        r51, r50, r19
  // p.p_size == 5
  Index        r52, r16, r21
  Equal        r53, r52, r23
  // p.p_brand == "Brand#12" &&
  Move         r54, r51
  JumpIfFalse  r54, L8
  Index        r55, r16, r26
  // p.p_type.contains("SMALL") &&
  In           r54, r28, r55
  JumpIfFalse  r54, L8
  Move         r54, r53
L8:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r54, L9
  // select ps.ps_suppkey
  Const        r57, "ps_suppkey"
  Index        r58, r41, r57
  // from ps in partsupp
  Append       r3, r3, r58
L9:
  AddInt       r47, r47, r37
  Jump         L10
L7:
  AddInt       r38, r38, r37
  Jump         L11
L1:
  MakeMap      r60, 0, r0
  Const        r61, 0
L14:
  LessInt      r62, r61, r5
  JumpIfFalse  r62, L12
  Index        r63, r4, r61
  // join p in part on p.p_partkey == ps.ps_partkey
  Index        r64, r63, r42
  // from ps in partsupp
  Index        r65, r60, r64
  NotEqual     r66, r65, r33
  JumpIfTrue   r66, L13
  MakeList     r67, 0, r0
  SetIndex     r60, r64, r67
L13:
  Index        r65, r60, r64
  Append       r68, r65, r63
  SetIndex     r60, r64, r68
  AddInt       r61, r61, r37
  Jump         L14
L12:
  // join p in part on p.p_partkey == ps.ps_partkey
  Const        r69, 0
L20:
  LessInt      r70, r69, r7
  JumpIfFalse  r70, L15
  Index        r16, r6, r69
  Index        r72, r16, r30
  Index        r73, r60, r72
  NotEqual     r74, r73, r33
  JumpIfFalse  r74, L16
  Len          r75, r73
  Const        r76, 0
L19:
  LessInt      r77, r76, r75
  JumpIfFalse  r77, L16
  Index        r41, r73, r76
  // p.p_brand == "Brand#12" &&
  Index        r79, r16, r17
  Equal        r80, r79, r19
  // p.p_size == 5
  Index        r81, r16, r21
  Equal        r82, r81, r23
  // p.p_brand == "Brand#12" &&
  Move         r83, r80
  JumpIfFalse  r83, L17
  Index        r84, r16, r26
  // p.p_type.contains("SMALL") &&
  In           r83, r28, r84
  JumpIfFalse  r83, L17
  Move         r83, r82
L17:
  // p.p_brand == "Brand#12" &&
  JumpIfFalse  r83, L18
  // select ps.ps_suppkey
  Index        r86, r41, r57
  // from ps in partsupp
  Append       r3, r3, r86
L18:
  // join p in part on p.p_partkey == ps.ps_partkey
  AddInt       r76, r76, r37
  Jump         L19
L16:
  AddInt       r69, r69, r37
  Jump         L20
L15:
  // from s in supplier
  Const        r88, []
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Const        r89, "s_suppkey"
  Const        r90, "s_comment"
  Const        r91, "contains"
  // s_name: s.s_name,
  Const        r92, "s_name"
  // s_address: s.s_address
  Const        r93, "s_address"
  // from s in supplier
  IterPrep     r94, r0
  Len          r95, r94
  Move         r96, r8
L24:
  LessInt      r97, r96, r95
  JumpIfFalse  r97, L21
  Index        r99, r94, r96
  // where !(s.s_suppkey in excluded_suppliers) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))
  Index        r100, r99, r89
  In           r101, r100, r3
  Not          r103, r101
  JumpIfFalse  r103, L22
  Index        r104, r99, r90
  Const        r105, "Customer"
  In           r106, r105, r104
  Not          r103, r106
  JumpIfFalse  r103, L22
  Index        r108, r99, r90
  Const        r109, "Complaints"
  In           r110, r109, r108
  Not          r103, r110
L22:
  JumpIfFalse  r103, L23
  // s_name: s.s_name,
  Const        r112, "s_name"
  Index        r113, r99, r92
  // s_address: s.s_address
  Const        r114, "s_address"
  Index        r115, r99, r93
  // s_name: s.s_name,
  Move         r116, r112
  Move         r117, r113
  // s_address: s.s_address
  Move         r118, r114
  Move         r119, r115
  // select {
  MakeMap      r120, 2, r116
  // order by s.s_name
  Index        r122, r99, r92
  // from s in supplier
  Move         r123, r120
  MakeList     r124, 2, r122
  Append       r88, r88, r124
L23:
  AddInt       r96, r96, r37
  Jump         L24
L21:
  // order by s.s_name
  Sort         r88, r88
  // print(result)
  Print        r88
  // expect result == []
  Const        r127, []
  Equal        r128, r88, r127
  Expect       r128
  Return       r0
