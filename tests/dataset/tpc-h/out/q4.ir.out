func main (regs=23)
  // let orders = [
  Const        r0, [{"o_orderdate": "1993-07-01", "o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderdate": "1993-07-15", "o_orderkey": 2, "o_orderpriority": "2-HIGH"}, {"o_orderdate": "1993-08-01", "o_orderkey": 3, "o_orderpriority": "3-NORMAL"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1993-07-10", "l_orderkey": 1, "l_receiptdate": "1993-07-12"}, {"l_commitdate": "1993-07-12", "l_orderkey": 1, "l_receiptdate": "1993-07-10"}, {"l_commitdate": "1993-07-20", "l_orderkey": 2, "l_receiptdate": "1993-07-25"}, {"l_commitdate": "1993-08-02", "l_orderkey": 3, "l_receiptdate": "1993-08-01"}, {"l_commitdate": "1993-08-05", "l_orderkey": 3, "l_receiptdate": "1993-08-10"}]
L0:
  // let start_date = "1993-07-01"
  Const        r2, "1993-07-01"
L7:
  // let end_date = "1993-08-01"
  Const        r3, "1993-08-01"
L4:
  // from o in orders
  Const        r4, []
L2:
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Const        r5, "o_orderdate"
  // from o in orders
  IterPrep     r6, r0
L5:
  Len          r7, r6
  Const        r8, 0
  Move         r9, r8
L1:
  LessInt      r10, r9, r7
L6:
  JumpIfFalse  r10, L0
L9:
  Index        r7, r6, r9
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Index        r6, r7, r5
L3:
  LessEq       r11, r2, r6
  Index        r6, r7, r5
  Less         r5, r6, r3
  Move         r6, r11
L10:
  JumpIfFalse  r6, L1
  Move         r6, r5
  JumpIfFalse  r6, L2
  // from o in orders
  Append       r4, r4, r7
  Const        r6, 1
  AddInt       r9, r9, r6
  Jump         L1
  // from o in date_filtered_orders
  Const        r10, []
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Const        r9, "l_orderkey"
  Const        r5, "o_orderkey"
  Const        r11, "l_commitdate"
  Const        r3, "l_receiptdate"
  // from o in date_filtered_orders
  IterPrep     r2, r4
  Len          r4, r2
  Move         r12, r8
  LessInt      r13, r12, r4
  JumpIfFalse  r13, L3
  Index        r7, r2, r12
  // from l in lineitem
  Move         r13, r10
  IterPrep     r4, r1
  Len          r1, r4
  Move         r2, r8
  LessInt      r14, r2, r1
  JumpIfFalse  r14, L4
  Index        r14, r4, r2
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Index        r4, r14, r9
  Index        r9, r14, r11
  Index        r11, r14, r3
  Less         r3, r9, r11
  Index        r11, r7, r5
  Equal        r5, r4, r11
  JumpIfFalse  r5, L5
  Move         r5, r3
  JumpIfFalse  r5, L6
  // from l in lineitem
  Append       r13, r13, r14
  AddInt       r2, r2, r6
  Jump         L7
  // where exists(
  Exists       r5, r13
  JumpIfFalse  r5, L1
  // from o in date_filtered_orders
  Append       r10, r10, r7
  AddInt       r12, r12, r6
  Jump         L0
  // from o in late_orders
  Const        r5, []
  // group by o.o_orderpriority into g
  Const        r2, "o_orderpriority"
  // o_orderpriority: g.key,
  Const        r13, "key"
  // order_count: count(g)
  Const        r12, "order_count"
  // from o in late_orders
  IterPrep     r7, r10
  Len          r10, r7
  Move         r11, r8
  MakeMap      r3, 0, r0
  LessInt      r4, r11, r10
  JumpIfFalse  r4, L8
  Index        r4, r7, r11
  // group by o.o_orderpriority into g
  Index        r7, r4, r2
  Str          r10, r7
  In           r14, r10, r3
  JumpIfTrue   r14, L9
  // from o in late_orders
  Move         r14, r5
  Const        r9, "__group__"
  Const        r1, true
  Move         r15, r13
  // group by o.o_orderpriority into g
  Move         r16, r7
  // from o in late_orders
  Const        r7, "items"
  Move         r17, r14
  Const        r14, "count"
  Move         r18, r8
  Move         r19, r9
  Move         r9, r1
  Move         r1, r15
  Move         r15, r16
  Move         r16, r7
  Move         r20, r17
  Move         r17, r14
  Move         r21, r18
  MakeMap      r22, 4, r19
  SetIndex     r3, r10, r22
  Move         r22, r7
  Index        r7, r3, r10
  Index        r10, r7, r22
  Append       r21, r10, r4
  SetIndex     r7, r22, r21
  Move         r21, r14
  Index        r14, r7, r21
  AddInt       r10, r14, r6
  SetIndex     r7, r21, r10
  AddInt       r11, r11, r6
  Jump         L10
L8:
  Values       10,3,0,0
  Move         r3, r8
  Len          r8, r10
L12:
  LessInt      r14, r3, r8
  JumpIfFalse  r14, L11
  Index        r14, r10, r3
  // o_orderpriority: g.key,
  Move         r10, r2
  Index        r2, r14, r13
  // order_count: count(g)
  Move         r8, r12
  Index        r12, r14, r21
  // o_orderpriority: g.key,
  Move         r21, r10
  Move         r10, r2
  // order_count: count(g)
  Move         r2, r8
  Move         r8, r12
  // select {
  MakeMap      r12, 2, r21
  // order by g.key
  Index        r8, r14, r13
  // from o in late_orders
  Move         r14, r12
  MakeList     r12, 2, r8
  Append       r5, r5, r12
  AddInt       r3, r3, r6
  Jump         L12
L11:
  // order by g.key
  Sort         r5, r5
  // json(result)
  JSON         r5
  // expect result == [
  Const        r12, [{"o_orderpriority": "1-URGENT", "order_count": 1}, {"o_orderpriority": "2-HIGH", "order_count": 1}]
  Equal        r14, r5, r12
  Expect       r14
  Return       r0
