func main (regs=110)
  // let orders = [
  Const        r0, [{"o_orderdate": "1993-07-01", "o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderdate": "1993-07-15", "o_orderkey": 2, "o_orderpriority": "2-HIGH"}, {"o_orderdate": "1993-08-01", "o_orderkey": 3, "o_orderpriority": "3-NORMAL"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1993-07-10", "l_orderkey": 1, "l_receiptdate": "1993-07-12"}, {"l_commitdate": "1993-07-12", "l_orderkey": 1, "l_receiptdate": "1993-07-10"}, {"l_commitdate": "1993-07-20", "l_orderkey": 2, "l_receiptdate": "1993-07-25"}, {"l_commitdate": "1993-08-02", "l_orderkey": 3, "l_receiptdate": "1993-08-01"}, {"l_commitdate": "1993-08-05", "l_orderkey": 3, "l_receiptdate": "1993-08-10"}]
  // let start_date = "1993-07-01"
  Const        r2, "1993-07-01"
  // let end_date = "1993-08-01"
  Const        r3, "1993-08-01"
  // from o in orders
  Const        r4, []
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Const        r5, "o_orderdate"
  // from o in orders
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Index        r13, r12, r5
  LessEq       r14, r2, r13
  Index        r15, r12, r5
  Less         r16, r15, r3
  Move         r17, r14
  JumpIfFalse  r17, L1
  Move         r17, r16
L1:
  JumpIfFalse  r17, L2
  // from o in orders
  Append       r4, r4, r12
L2:
  Const        r19, 1
  AddInt       r8, r8, r19
  Jump         L3
L0:
  // from o in date_filtered_orders
  Const        r20, []
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Const        r21, "l_orderkey"
  Const        r22, "o_orderkey"
  Const        r23, "l_commitdate"
  Const        r24, "l_receiptdate"
  // from o in date_filtered_orders
  IterPrep     r25, r4
  Len          r26, r25
  Move         r27, r9
L10:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L4
  Index        r12, r25, r27
  // from l in lineitem
  Const        r30, []
  IterPrep     r31, r1
  Len          r32, r31
  Move         r33, r9
L8:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L5
  Index        r36, r31, r33
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Index        r37, r36, r21
  Index        r38, r36, r23
  Index        r39, r36, r24
  Less         r40, r38, r39
  Index        r41, r12, r22
  Equal        r43, r37, r41
  JumpIfFalse  r43, L6
  Move         r43, r40
L6:
  JumpIfFalse  r43, L7
  // from l in lineitem
  Append       r30, r30, r36
L7:
  AddInt       r33, r33, r19
  Jump         L8
L5:
  // where exists(
  Exists       r45, r30
  JumpIfFalse  r45, L9
  // from o in date_filtered_orders
  Append       r20, r20, r12
L9:
  AddInt       r27, r27, r19
  Jump         L10
L4:
  // from o in late_orders
  Const        r47, []
  // group by o.o_orderpriority into g
  Const        r48, "o_orderpriority"
  // o_orderpriority: g.key,
  Const        r49, "key"
  // order_count: count(g)
  Const        r50, "order_count"
  // from o in late_orders
  IterPrep     r51, r20
  Len          r52, r51
  Const        r53, 0
  MakeMap      r54, 0, r0
  Const        r55, []
L13:
  LessInt      r57, r53, r52
  JumpIfFalse  r57, L11
  Index        r58, r51, r53
  // group by o.o_orderpriority into g
  Index        r59, r58, r48
  Str          r60, r59
  In           r61, r60, r54
  JumpIfTrue   r61, L12
  // from o in late_orders
  Const        r62, []
  Const        r63, "__group__"
  Const        r64, true
  Const        r65, "key"
  // group by o.o_orderpriority into g
  Move         r66, r59
  // from o in late_orders
  Const        r67, "items"
  Move         r68, r62
  Const        r69, "count"
  Const        r70, 0
  Move         r71, r63
  Move         r72, r64
  Move         r73, r65
  Move         r74, r66
  Move         r75, r67
  Move         r76, r68
  Move         r77, r69
  Move         r78, r70
  MakeMap      r79, 4, r71
  SetIndex     r54, r60, r79
  Append       r55, r55, r79
L12:
  Const        r81, "items"
  Index        r82, r54, r60
  Index        r83, r82, r81
  Append       r84, r83, r58
  SetIndex     r82, r81, r84
  Const        r85, "count"
  Index        r86, r82, r85
  AddInt       r87, r86, r19
  SetIndex     r82, r85, r87
  AddInt       r53, r53, r19
  Jump         L13
L11:
  Move         r88, r9
  Len          r89, r55
L15:
  LessInt      r90, r88, r89
  JumpIfFalse  r90, L14
  Index        r92, r55, r88
  // o_orderpriority: g.key,
  Const        r93, "o_orderpriority"
  Index        r94, r92, r49
  // order_count: count(g)
  Const        r95, "order_count"
  Index        r96, r92, r85
  // o_orderpriority: g.key,
  Move         r97, r93
  Move         r98, r94
  // order_count: count(g)
  Move         r99, r95
  Move         r100, r96
  // select {
  MakeMap      r101, 2, r97
  // order by g.key
  Index        r103, r92, r49
  // from o in late_orders
  Move         r104, r101
  MakeList     r105, 2, r103
  Append       r47, r47, r105
  AddInt       r88, r88, r19
  Jump         L15
L14:
  // order by g.key
  Sort         r47, r47
  // json(result)
  JSON         r47
  // expect result == [
  Const        r108, [{"o_orderpriority": "1-URGENT", "order_count": 1}, {"o_orderpriority": "2-HIGH", "order_count": 1}]
  Equal        r109, r47, r108
  Expect       r109
  Return       r0
