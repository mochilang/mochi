func main (regs=103)
  // let orders = [
  Const        r0, [{"o_orderdate": "1993-07-01", "o_orderkey": 1, "o_orderpriority": "1-URGENT"}, {"o_orderdate": "1993-07-15", "o_orderkey": 2, "o_orderpriority": "2-HIGH"}, {"o_orderdate": "1993-08-01", "o_orderkey": 3, "o_orderpriority": "3-NORMAL"}]
  // let lineitem = [
  Const        r1, [{"l_commitdate": "1993-07-10", "l_orderkey": 1, "l_receiptdate": "1993-07-12"}, {"l_commitdate": "1993-07-12", "l_orderkey": 1, "l_receiptdate": "1993-07-10"}, {"l_commitdate": "1993-07-20", "l_orderkey": 2, "l_receiptdate": "1993-07-25"}, {"l_commitdate": "1993-08-02", "l_orderkey": 3, "l_receiptdate": "1993-08-01"}, {"l_commitdate": "1993-08-05", "l_orderkey": 3, "l_receiptdate": "1993-08-10"}]
  // let start_date = "1993-07-01"
  Const        r2, "1993-07-01"
  // let end_date = "1993-08-01"
  Const        r3, "1993-08-01"
  // from o in orders
  Const        r4, []
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Const        r5, "o_orderdate"
  // from o in orders
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L3:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where o.o_orderdate >= start_date && o.o_orderdate < end_date
  Index        r13, r12, r5
  LessEq       r14, r2, r13
  Index        r15, r12, r5
  Less         r16, r15, r3
  JumpIfFalse  r14, L1
  Move         r14, r16
L1:
  JumpIfFalse  r14, L2
  // from o in orders
  Append       r4, r4, r12
L2:
  Const        r18, 1
  AddInt       r8, r8, r18
  Jump         L3
L0:
  // from o in date_filtered_orders
  Const        r19, []
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Const        r20, "l_orderkey"
  Const        r21, "o_orderkey"
  Const        r22, "l_commitdate"
  Const        r23, "l_receiptdate"
  // from o in date_filtered_orders
  IterPrep     r24, r4
  Len          r25, r24
  Move         r26, r9
L10:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L4
  Index        r12, r24, r26
  // from l in lineitem
  Const        r29, []
  IterPrep     r30, r1
  Len          r31, r30
  Move         r32, r9
L8:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L5
  Index        r35, r30, r32
  // where l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate
  Index        r36, r35, r20
  Index        r37, r35, r22
  Index        r38, r35, r23
  Less         r39, r37, r38
  Index        r40, r12, r21
  Equal        r41, r36, r40
  JumpIfFalse  r41, L6
  Move         r41, r39
L6:
  JumpIfFalse  r41, L7
  // from l in lineitem
  Append       r29, r29, r35
L7:
  AddInt       r32, r32, r18
  Jump         L8
L5:
  // where exists(
  Exists       r43, r29
  JumpIfFalse  r43, L9
  // from o in date_filtered_orders
  Append       r19, r19, r12
L9:
  AddInt       r26, r26, r18
  Jump         L10
L4:
  // from o in late_orders
  Const        r45, []
  // group by o.o_orderpriority into g
  Const        r46, "o_orderpriority"
  // o_orderpriority: g.key,
  Const        r47, "key"
  // order_count: count(g)
  Const        r48, "order_count"
  // from o in late_orders
  IterPrep     r49, r19
  Len          r50, r49
  Const        r51, 0
  MakeMap      r52, 0, r0
  Const        r54, []
  Move         r53, r54
L13:
  LessInt      r55, r51, r50
  JumpIfFalse  r55, L11
  Index        r56, r49, r51
  // group by o.o_orderpriority into g
  Index        r57, r56, r46
  Str          r58, r57
  In           r59, r58, r52
  JumpIfTrue   r59, L12
  // from o in late_orders
  Const        r60, "__group__"
  Const        r61, true
  // group by o.o_orderpriority into g
  Move         r62, r57
  // from o in late_orders
  Const        r63, "items"
  Move         r64, r54
  Const        r65, "count"
  Move         r66, r60
  Move         r67, r61
  Move         r68, r47
  Move         r69, r62
  Move         r70, r63
  Move         r71, r64
  Move         r72, r65
  Move         r73, r9
  MakeMap      r74, 4, r66
  SetIndex     r52, r58, r74
  Append       r53, r53, r74
L12:
  Index        r76, r52, r58
  Index        r77, r76, r63
  Append       r78, r77, r56
  SetIndex     r76, r63, r78
  Index        r79, r76, r65
  AddInt       r80, r79, r18
  SetIndex     r76, r65, r80
  AddInt       r51, r51, r18
  Jump         L13
L11:
  Move         r81, r9
  Len          r82, r53
L15:
  LessInt      r83, r81, r82
  JumpIfFalse  r83, L14
  Index        r85, r53, r81
  // o_orderpriority: g.key,
  Const        r86, "o_orderpriority"
  Index        r87, r85, r47
  // order_count: count(g)
  Const        r88, "order_count"
  Index        r89, r85, r65
  // o_orderpriority: g.key,
  Move         r90, r86
  Move         r91, r87
  // order_count: count(g)
  Move         r92, r88
  Move         r93, r89
  // select {
  MakeMap      r94, 2, r90
  // order by g.key
  Index        r96, r85, r47
  // from o in late_orders
  Move         r97, r94
  MakeList     r98, 2, r96
  Append       r45, r45, r98
  AddInt       r81, r81, r18
  Jump         L15
L14:
  // order by g.key
  Sort         r45, r45
  // json(result)
  JSON         r45
  // expect result == [
  Const        r101, [{"o_orderpriority": "1-URGENT", "order_count": 1}, {"o_orderpriority": "2-HIGH", "order_count": 1}]
  Equal        r102, r45, r101
  Expect       r102
  Return       r0
