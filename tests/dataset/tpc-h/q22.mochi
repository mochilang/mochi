let customer = [
  { c_custkey: 1, c_phone: "13-123-4567", c_acctbal: 600.0 },
  { c_custkey: 2, c_phone: "31-456-7890", c_acctbal: 100.0 },
  { c_custkey: 3, c_phone: "30-000-0000", c_acctbal: 700.0 }
]

let orders = [
  { o_orderkey: 10, o_custkey: 2 }
]

let valid_codes = ["13", "31", "23", "29", "30", "18", "17"]

let avg_balance =
  avg(
    from c in customer
    where c.c_acctbal > 0.0 and substring(c.c_phone, 0, 2) in valid_codes
    select c.c_acctbal
  )

let eligible_customers =
  from c in customer
  let cc = substring(c.c_phone, 0, 2)
  where
    cc in valid_codes and
    c.c_acctbal > avg_balance and
    not exists o in orders where o.o_custkey == c.c_custkey
  select { cntrycode: cc, c_acctbal: c.c_acctbal }

let result =
  from c in eligible_customers
  group by c.cntrycode
  select {
    cntrycode: c.cntrycode,
    numcust: count(),
    totacctbal: sum(c.c_acctbal)
  }
  order by c.cntrycode

print result

test "Q22 returns wealthy inactive customers by phone prefix" {
  // avg_balance = (600 + 100 + 700) / 3 = 466.66
  // customer 1 (13, 600) → ✅ (no orders)
  // customer 2 (31, 100) → ❌ (has order)
  // customer 3 (30, 700) → ✅ (no orders)
  expect result == [
    { cntrycode: "13", numcust: 1, totacctbal: 600.0 },
    { cntrycode: "30", numcust: 1, totacctbal: 700.0 }
  ]
}
