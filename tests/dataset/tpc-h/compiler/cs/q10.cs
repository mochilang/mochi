// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:19:38Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q10_returns_customer_revenue_from_returned_items(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 }, { "c_name", "Alice" }, { "revenue", (1000.000000 * 0.900000) }, { "c_acctbal", 100.000000 }, { "n_name", "BRAZIL" }, { "c_address", "123 St" }, { "c_phone", "123-456" }, { "c_comment", "Loyal" } } }));
    }

    static void Main()
    {
        var nation = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_nationkey", 1 }, { "n_name", "BRAZIL" } } };
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 }, { "c_name", "Alice" }, { "c_acctbal", 100.000000 }, { "c_nationkey", 1 }, { "c_address", "123 St" }, { "c_phone", "123-456" }, { "c_comment", "Loyal" } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 1000 }, { "o_custkey", 1 }, { "o_orderdate", "1993-10-15" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 2000 }, { "o_custkey", 1 }, { "o_orderdate", "1994-01-02" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_orderkey", 1000 }, { "l_returnflag", "R" }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 2000 }, { "l_returnflag", "N" }, { "l_extendedprice", 500.000000 }, { "l_discount", 0.000000 } } };
        var start_date = "1993-10-01";
        var end_date = "1994-01-01";
        var result = new Func<List<dynamic>>(() =>
        {
            var groups = new Dictionary<string, _Group<dynamic, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var c in customer)
            {
                foreach (var o in orders)
                {
                    if (!((o["o_custkey"] == c["c_custkey"]))) continue;
                    foreach (var l in lineitem)
                    {
                        if (!((l["l_orderkey"] == o["o_orderkey"]))) continue;
                        if (!((l["l_returnflag"] == "R"))) continue;
                        foreach (var n in nation)
                        {
                            if (!((n["n_nationkey"] == c["c_nationkey"]))) continue;
                            if (string.Compare(Convert.ToString(o["o_orderdate"]), Convert.ToString(start_date)) >= 0 && string.Compare(Convert.ToString(o["o_orderdate"]), Convert.ToString(end_date)) < 0)
                            {
                                var key = new Dictionary<dynamic, dynamic> { { "c_custkey", c["c_custkey"] }, { "c_name", c["c_name"] }, { "c_acctbal", c["c_acctbal"] }, { "c_address", c["c_address"] }, { "c_phone", c["c_phone"] }, { "c_comment", c["c_comment"] }, { "n_name", n["n_name"] } };
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g))
                                {
                                    g = new _Group<dynamic, Dictionary<string, dynamic>>(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(c);
                            }
                        }
                    }
                }
            }
            var items = new List<_Group<dynamic, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => (-_sum(g.Select(x => (x["l"]["l_extendedprice"] * ((1 - x["l"]["l_discount"])))).ToList()))).ToList();
            var _res = new List<dynamic>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<dynamic, dynamic> { { "c_custkey", g["key"].c_custkey }, { "c_name", g["key"].c_name }, { "revenue", _sum(g.Select(x => (x["l"]["l_extendedprice"] * ((1 - x["l"]["l_discount"])))).ToList()) }, { "c_acctbal", g["key"].c_acctbal }, { "n_name", g["key"].n_name }, { "c_address", g["key"].c_address }, { "c_phone", g["key"].c_phone }, { "c_comment", g["key"].c_comment } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q10_returns_customer_revenue_from_returned_items(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

}
