// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:21:14Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_name", "Desert Trade" }, { "numwait", 1 } } }));
    }

    static void Main()
    {
        var nation = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_nationkey", 1 }, { "n_name", "SAUDI ARABIA" } }, new Dictionary<dynamic, dynamic> { { "n_nationkey", 2 }, { "n_name", "FRANCE" } } };
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_name", "Desert Trade" }, { "s_nationkey", 1 } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 200 }, { "s_name", "Euro Goods" }, { "s_nationkey", 2 } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 500 }, { "o_orderstatus", "F" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 600 }, { "o_orderstatus", "O" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_orderkey", 500 }, { "l_suppkey", 100 }, { "l_receiptdate", "1995-04-15" }, { "l_commitdate", "1995-04-10" } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 500 }, { "l_suppkey", 200 }, { "l_receiptdate", "1995-04-12" }, { "l_commitdate", "1995-04-12" } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 600 }, { "l_suppkey", 100 }, { "l_receiptdate", "1995-05-01" }, { "l_commitdate", "1995-04-25" } } };
        var result = new Func<List<dynamic>>(() =>
        {
            var groups = new Dictionary<string, _Group<dynamic, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var s in supplier)
            {
                foreach (var l1 in lineitem)
                {
                    if (!((s["s_suppkey"] == l1["l_suppkey"]))) continue;
                    if (!((l1["l_receiptdate"] > l1["l_commitdate"]))) continue;
                    foreach (var o in orders)
                    {
                        if (!((o["o_orderkey"] == l1["l_orderkey"]))) continue;
                        if (!((o["o_orderstatus"] == "F"))) continue;
                        foreach (var n in nation)
                        {
                            if (!((n["n_nationkey"] == s["s_nationkey"]))) continue;
                            if (!((n["n_name"] == "SAUDI ARABIA"))) continue;
                            if (((!Enumerable.Any(lineitem.Where(x => (x["l_orderkey"] == l1["l_orderkey"]) && (x["l_suppkey"] != l1["l_suppkey"])).Select(x => x).ToList()))))
                            {
                                var key = s["s_name"];
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g))
                                {
                                    g = new _Group<dynamic, Dictionary<string, dynamic>>(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(s);
                            }
                        }
                    }
                }
            }
            var items = new List<_Group<dynamic, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => new List<dynamic> { (-g.Count()), g["key"] }).ToList();
            var _res = new List<dynamic>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<dynamic, dynamic> { { "s_name", g["key"] }, { "numwait", g.Count() } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

}
