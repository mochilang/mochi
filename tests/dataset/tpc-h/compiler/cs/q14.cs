// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:20:15Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q14_calculates_promo_revenue_percent_in_1995_09(dynamic result, dynamic expected)
    {
        var promo = (1000.000000 * 0.900000);
        var total = (900 + 800.000000);
        var expected = ((100.000000 * promo) / total);
        expect(_equal(result, expected));
    }

    static void Main()
    {
        var part = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "p_partkey", 1 }, { "p_type", "PROMO LUXURY" } }, new Dictionary<dynamic, dynamic> { { "p_partkey", 2 }, { "p_type", "STANDARD BRASS" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_partkey", 1 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 }, { "l_shipdate", "1995-09-05" } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 2 }, { "l_extendedprice", 800.000000 }, { "l_discount", 0.000000 }, { "l_shipdate", "1995-09-20" } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 1 }, { "l_extendedprice", 500.000000 }, { "l_discount", 0.200000 }, { "l_shipdate", "1995-10-02" } } };
        var start_date = "1995-09-01";
        var end_date = "1995-10-01";
        var filtered = lineitem.Join(part, l => p["p_partkey"], p => l["l_partkey"], (l, p) => new Dictionary<dynamic, dynamic> { { "is_promo", _in("PROMO", p["p_type"]) }, { "revenue", (l["l_extendedprice"] * ((1 - l["l_discount"]))) } }).Where(l => string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString(start_date)) >= 0 && string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString(end_date)) < 0).ToList();
        var promo_sum = _sum(filtered.Where(x => x["is_promo"]).Select(x => x["revenue"]).ToList());
        var total_sum = _sum(filtered.Select(x => x["revenue"]).ToList());
        var result = ((100.000000 * promo_sum) / total_sum);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q14_calculates_promo_revenue_percent_in_1995_09(result, expected);
    }
    public class Filtered
    {
        public dynamic is_promo;
        public dynamic revenue;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
