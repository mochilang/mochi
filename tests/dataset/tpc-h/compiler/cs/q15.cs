// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:20:23Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q15_returns_top_revenue_supplier_s__for_Q1_1996(dynamic result)
    {
        var rev = ((1000.000000 * 0.900000) + 500.000000);
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_name", "Best Supplier" }, { "s_address", "123 Market St" }, { "s_phone", "123-456" }, { "total_revenue", rev } } }));
    }

    static void Main()
    {
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_name", "Best Supplier" }, { "s_address", "123 Market St" }, { "s_phone", "123-456" } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 200 }, { "s_name", "Second Supplier" }, { "s_address", "456 Elm St" }, { "s_phone", "987-654" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_suppkey", 100 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 }, { "l_shipdate", "1996-01-15" } }, new Dictionary<dynamic, dynamic> { { "l_suppkey", 100 }, { "l_extendedprice", 500.000000 }, { "l_discount", 0.000000 }, { "l_shipdate", "1996-03-20" } }, new Dictionary<dynamic, dynamic> { { "l_suppkey", 200 }, { "l_extendedprice", 800.000000 }, { "l_discount", 0.050000 }, { "l_shipdate", "1995-12-30" } } };
        var start_date = "1996-01-01";
        var end_date = "1996-04-01";
        var revenue0 = _group_by<dynamic, dynamic>(lineitem.Where(l => string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString(start_date)) >= 0 && string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString(end_date)) < 0), l => l["l_suppkey"]).Select(g => new Dictionary<dynamic, dynamic> { { "supplier_no", g.key }, { "total_revenue", _sum(g.Items.Select(x => (x["l_extendedprice"] * ((1 - x["l_discount"])))).ToList()) } }).ToList();
        var revenues = revenue0.Select(x => x["total_revenue"]).ToList();
        var max_revenue = Enumerable.Max(revenues);
        var result = supplier.Join(revenue0, s => s["s_suppkey"], r => r["supplier_no"], (s, r) => new Dictionary<dynamic, dynamic> { { "s_suppkey", s["s_suppkey"] }, { "s_name", s["s_name"] }, { "s_address", s["s_address"] }, { "s_phone", s["s_phone"] }, { "total_revenue", r["total_revenue"] } }).Where(s => (r["total_revenue"] == max_revenue)).OrderBy(s => s["s_suppkey"]).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q15_returns_top_revenue_supplier_s__for_Q1_1996(result);
    }
    public class Result
    {
        public dynamic s_suppkey;
        public dynamic s_name;
        public dynamic s_address;
        public dynamic s_phone;
        public dynamic total_revenue;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
