// Generated by Mochi compiler v0.10.27 on 2025-07-17T18:22:10Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q12_counts_lineitems_by_ship_mode_and_priority(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<string, dynamic> { { "l_shipmode", "MAIL" }, { "high_line_count", 1 }, { "low_line_count", 0 } } }));
    }

    static void Main()
    {
        var orders = new List<dynamic> { new Dictionary<string, dynamic> { { "o_orderkey", 1 }, { "o_orderpriority", "1-URGENT" } }, new Dictionary<string, dynamic> { { "o_orderkey", 2 }, { "o_orderpriority", "3-MEDIUM" } } };
        var lineitem = new List<dynamic> { new Dictionary<string, dynamic> { { "l_orderkey", 1 }, { "l_shipmode", "MAIL" }, { "l_commitdate", "1994-02-10" }, { "l_receiptdate", "1994-02-15" }, { "l_shipdate", "1994-02-05" } }, new Dictionary<string, dynamic> { { "l_orderkey", 2 }, { "l_shipmode", "SHIP" }, { "l_commitdate", "1994-03-01" }, { "l_receiptdate", "1994-02-28" }, { "l_shipdate", "1994-02-27" } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group<dynamic, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var l in lineitem)
            {
                if (!((new List<string> { "MAIL", "SHIP" }.Contains(l["l_shipmode"])))) continue;
                if (!(((l["l_commitdate"] < l["l_receiptdate"])))) continue;
                if (!(((l["l_shipdate"] < l["l_commitdate"])))) continue;
                if (!((string.Compare(Convert.ToString(l["l_receiptdate"]), Convert.ToString("1994-01-01")) >= 0))) continue;
                if (!((string.Compare(Convert.ToString(l["l_receiptdate"]), Convert.ToString("1995-01-01")) < 0))) continue;
                foreach (var o in orders)
                {
                    if (!((o["o_orderkey"] == l["l_orderkey"]))) continue;
                    if ((new List<string> { "MAIL", "SHIP" }.Contains(l["l_shipmode"])) && ((l["l_commitdate"] < l["l_receiptdate"])) && ((l["l_shipdate"] < l["l_commitdate"])) && (string.Compare(Convert.ToString(l["l_receiptdate"]), Convert.ToString("1994-01-01")) >= 0) && (string.Compare(Convert.ToString(l["l_receiptdate"]), Convert.ToString("1995-01-01")) < 0))
                    {
                        var key = l["l_shipmode"];
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g))
                        {
                            g = new _Group<dynamic, Dictionary<string, dynamic>>(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(l);
                    }
                }
            }
            var items = new List<_Group<dynamic, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => g["key"]).ToList();
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "l_shipmode", g["key"] }, { "high_line_count", Enumerable.Sum(g.Select(x => (new List<string> { "1-URGENT", "2-HIGH" }.Contains(x["o"]["o_orderpriority"]) ? 1 : 0)).ToList()) }, { "low_line_count", Enumerable.Sum(g.Select(x => ((!(new List<string> { "1-URGENT", "2-HIGH" }.Contains(x["o"]["o_orderpriority"]))) ? 1 : 0)).ToList()) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q12_counts_lineitems_by_ship_mode_and_priority(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

}
