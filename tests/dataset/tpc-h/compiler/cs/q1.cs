// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:49:54Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "returnflag", "N" }, { "linestatus", "O" }, { "sum_qty", 53 }, { "sum_base_price", 3000 }, { "sum_disc_price", (950.000000 + 1800.000000) }, { "sum_charge", (((950.000000 * 1.070000)) + ((1800.000000 * 1.050000))) }, { "avg_qty", 26.500000 }, { "avg_price", 1500 }, { "avg_disc", 0.075000 }, { "count_order", 2 } } }));
    }

    static void Main()
    {
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_quantity", 17 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.050000 }, { "l_tax", 0.070000 }, { "l_returnflag", "N" }, { "l_linestatus", "O" }, { "l_shipdate", "1998-08-01" } }, new Dictionary<dynamic, dynamic> { { "l_quantity", 36 }, { "l_extendedprice", 2000.000000 }, { "l_discount", 0.100000 }, { "l_tax", 0.050000 }, { "l_returnflag", "N" }, { "l_linestatus", "O" }, { "l_shipdate", "1998-09-01" } }, new Dictionary<dynamic, dynamic> { { "l_quantity", 25 }, { "l_extendedprice", 1500.000000 }, { "l_discount", 0.000000 }, { "l_tax", 0.080000 }, { "l_returnflag", "R" }, { "l_linestatus", "F" }, { "l_shipdate", "1998-09-03" } } };
        var result = _group_by<Dictionary<string, dynamic>, dynamic>(lineitem.Where(row => (row["l_shipdate"] <= "1998-09-02")), row => new Dictionary<dynamic, dynamic> { { "returnflag", row["l_returnflag"] }, { "linestatus", row["l_linestatus"] } }).Select(g => new Dictionary<dynamic, dynamic> { { "returnflag", g.key.returnflag }, { "linestatus", g.key.linestatus }, { "sum_qty", _sum(g.Items.Select(x => x["l_quantity"]).ToList()) }, { "sum_base_price", _sum(g.Items.Select(x => x["l_extendedprice"]).ToList()) }, { "sum_disc_price", _sum(g.Items.Select(x => (x["l_extendedprice"] * ((1 - x["l_discount"])))).ToList()) }, { "sum_charge", _sum(g.Items.Select(x => ((x["l_extendedprice"] * ((1 - x["l_discount"]))) * ((1 + x["l_tax"])))).ToList()) }, { "avg_qty", _avg(g.Items.Select(x => x["l_quantity"]).ToList()) }, { "avg_price", _avg(g.Items.Select(x => x["l_extendedprice"]).ToList()) }, { "avg_disc", _avg(g.Items.Select(x => x["l_discount"]).ToList()) }, { "count_order", Enumerable.Count(g) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
