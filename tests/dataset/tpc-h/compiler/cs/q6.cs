// Generated by Mochi compiler v0.10.27 on 2025-07-17T18:31:05Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q6_calculates_revenue_from_qualified_lineitems(dynamic result)
    {
        expect(_equal(result, ((((1000.000000 * 0.060000)) + ((500.000000 * 0.070000))))));
    }

    static void Main()
    {
        var lineitem = new List<dynamic> { new Dictionary<string, dynamic> { { "l_extendedprice", 1000.000000 }, { "l_discount", 0.060000 }, { "l_shipdate", "1994-02-15" }, { "l_quantity", 10 } }, new Dictionary<string, dynamic> { { "l_extendedprice", 500.000000 }, { "l_discount", 0.070000 }, { "l_shipdate", "1994-03-10" }, { "l_quantity", 23 } }, new Dictionary<string, dynamic> { { "l_extendedprice", 400.000000 }, { "l_discount", 0.040000 }, { "l_shipdate", "1994-04-10" }, { "l_quantity", 15 } }, new Dictionary<string, dynamic> { { "l_extendedprice", 200.000000 }, { "l_discount", 0.060000 }, { "l_shipdate", "1995-01-01" }, { "l_quantity", 5 } } };
        var result = lineitem.Where(l => (string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString("1994-01-01")) >= 0) && (string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString("1995-01-01")) < 0) && ((l["l_discount"] >= 0.050000)) && ((l["l_discount"] <= 0.070000)) && ((l["l_quantity"] < 24))).Sum(l => (l["l_extendedprice"] * l["l_discount"]));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q6_calculates_revenue_from_qualified_lineitems(result);
    }
    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
