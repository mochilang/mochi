// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:18:53Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_name", "JAPAN" }, { "revenue", 950 } }, new Dictionary<dynamic, dynamic> { { "n_name", "INDIA" }, { "revenue", 720 } } }));
    }

    static void Main()
    {
        var region = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "r_regionkey", 0 }, { "r_name", "ASIA" } }, new Dictionary<dynamic, dynamic> { { "r_regionkey", 1 }, { "r_name", "EUROPE" } } };
        var nation = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_nationkey", 10 }, { "n_regionkey", 0 }, { "n_name", "JAPAN" } }, new Dictionary<dynamic, dynamic> { { "n_nationkey", 20 }, { "n_regionkey", 0 }, { "n_name", "INDIA" } }, new Dictionary<dynamic, dynamic> { { "n_nationkey", 30 }, { "n_regionkey", 1 }, { "n_name", "FRANCE" } } };
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 }, { "c_nationkey", 10 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 2 }, { "c_nationkey", 20 } } };
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_nationkey", 10 } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 200 }, { "s_nationkey", 20 } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 1000 }, { "o_custkey", 1 }, { "o_orderdate", "1994-03-15" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 2000 }, { "o_custkey", 2 }, { "o_orderdate", "1994-06-10" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 3000 }, { "o_custkey", 2 }, { "o_orderdate", "1995-01-01" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_orderkey", 1000 }, { "l_suppkey", 100 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.050000 } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 2000 }, { "l_suppkey", 200 }, { "l_extendedprice", 800.000000 }, { "l_discount", 0.100000 } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 3000 }, { "l_suppkey", 200 }, { "l_extendedprice", 900.000000 }, { "l_discount", 0.050000 } } };
        var asia_nations = region.Join(nation, r => n["n_regionkey"], n => r["r_regionkey"], (r, n) => n).Where(r => (r["r_name"] == "ASIA")).ToList();
        var local_customer_supplier_orders = (
    from c in customer
    join n in asia_nations on c["c_nationkey"] equals n["n_nationkey"]
    join o in orders on o["o_custkey"] equals c["c_custkey"]
    join l in lineitem on l["l_orderkey"] equals o["o_orderkey"]
    join s in supplier on s["s_suppkey"] equals l["l_suppkey"]
    where (s["s_nationkey"] == c["c_nationkey"])
    select new Dictionary<dynamic, dynamic> { { "nation", n["n_name"] }, { "revenue", (l["l_extendedprice"] * ((1 - l["l_discount"]))) } }
).ToList();
        var result = _group_by<dynamic, dynamic>(local_customer_supplier_orders, r => r["nation"]).OrderBy(g => (-_sum(g.Items.Select(x => x["revenue"]).ToList()))).Select(g => new Dictionary<dynamic, dynamic> { { "n_name", g.key }, { "revenue", _sum(g.Items.Select(x => x["revenue"]).ToList()) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers(result);
    }
    public class LocalCustomerSupplierOrder
    {
        public dynamic nation;
        public dynamic revenue;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
