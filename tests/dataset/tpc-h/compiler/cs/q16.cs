// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:20:31Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints(dynamic result)
    {
        expect(_equal(result, new List<dynamic>()));
    }

    static void Main()
    {
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_name", "AlphaSupply" }, { "s_address", "123 Hilltop" }, { "s_comment", "Reliable and efficient" } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 200 }, { "s_name", "BetaSupply" }, { "s_address", "456 Riverside" }, { "s_comment", "Known for Customer Complaints" } } };
        var part = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "p_partkey", 1 }, { "p_brand", "Brand#12" }, { "p_type", "SMALL ANODIZED" }, { "p_size", 5 } }, new Dictionary<dynamic, dynamic> { { "p_partkey", 2 }, { "p_brand", "Brand#23" }, { "p_type", "MEDIUM POLISHED" }, { "p_size", 10 } } };
        var partsupp = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "ps_partkey", 1 }, { "ps_suppkey", 100 } }, new Dictionary<dynamic, dynamic> { { "ps_partkey", 2 }, { "ps_suppkey", 200 } } };
        var excluded_suppliers = partsupp.Join(part, ps => p["p_partkey"], p => ps["ps_partkey"], (ps, p) => ps["ps_suppkey"]).ToList();
        var result = supplier.Where(s => (!(excluded_suppliers.Contains(s["s_suppkey"])))).OrderBy(s => s["s_name"]).Select(s => new Dictionary<dynamic, dynamic> { { "s_name", s["s_name"] }, { "s_address", s["s_address"] } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints(result);
    }
    public class Result
    {
        public dynamic s_name;
        public dynamic s_address;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
