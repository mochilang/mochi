// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:20:39Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q17_returns_average_yearly_revenue_for_small_quantity_orders(dynamic result, dynamic expected)
    {
        var expected = (100.000000 / 7.000000);
        expect(_equal(result, expected));
    }

    static void Main()
    {
        var part = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "p_partkey", 1 }, { "p_brand", "Brand#23" }, { "p_container", "MED BOX" } }, new Dictionary<dynamic, dynamic> { { "p_partkey", 2 }, { "p_brand", "Brand#77" }, { "p_container", "LG JAR" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_partkey", 1 }, { "l_quantity", 1 }, { "l_extendedprice", 100.000000 } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 1 }, { "l_quantity", 10 }, { "l_extendedprice", 1000.000000 } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 1 }, { "l_quantity", 20 }, { "l_extendedprice", 2000.000000 } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 2 }, { "l_quantity", 5 }, { "l_extendedprice", 500.000000 } } };
        var brand = "Brand#23";
        var container = "MED BOX";
        var filtered = lineitem.Join(part, l => p["p_partkey"], p => l["l_partkey"], (l, p) => l["l_extendedprice"]).Where(l => (((((p["p_brand"] == brand)) && ((p["p_container"] == container))) && ((l["l_quantity"] < ((0.200000 * _avg(lineitem.Where(x => (x["l_partkey"] == p["p_partkey"])).Select(x => x["l_quantity"]).ToList())))))))).ToList();
        var result = (_sum(filtered) / 7.000000);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q17_returns_average_yearly_revenue_for_small_quantity_orders(result, expected);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
