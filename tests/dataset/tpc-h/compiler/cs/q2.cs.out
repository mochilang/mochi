// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_acctbal", 1000.000000 }, { "s_name", "BestSupplier" }, { "n_name", "FRANCE" }, { "p_partkey", 1000L }, { "p_mfgr", "M1" }, { "s_address", "123 Rue" }, { "s_phone", "123" }, { "s_comment", "Fast and reliable" }, { "ps_supplycost", 10.000000 } } }));
    }
    
    public static void Main() {
        var region = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "r_regionkey", 1L }, { "r_name", "EUROPE" } }, new Dictionary<string, dynamic> { { "r_regionkey", 2L }, { "r_name", "ASIA" } } };
        var nation = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "n_nationkey", 10L }, { "n_regionkey", 1L }, { "n_name", "FRANCE" } }, new Dictionary<string, dynamic> { { "n_nationkey", 20L }, { "n_regionkey", 2L }, { "n_name", "CHINA" } } };
        var supplier = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_suppkey", 100L }, { "s_name", "BestSupplier" }, { "s_address", "123 Rue" }, { "s_nationkey", 10L }, { "s_phone", "123" }, { "s_acctbal", 1000.000000 }, { "s_comment", "Fast and reliable" } }, new Dictionary<string, dynamic> { { "s_suppkey", 200L }, { "s_name", "AltSupplier" }, { "s_address", "456 Way" }, { "s_nationkey", 20L }, { "s_phone", "456" }, { "s_acctbal", 500.000000 }, { "s_comment", "Slow" } } };
        var part = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "p_partkey", 1000L }, { "p_type", "LARGE BRASS" }, { "p_size", 15L }, { "p_mfgr", "M1" } }, new Dictionary<string, dynamic> { { "p_partkey", 2000L }, { "p_type", "SMALL COPPER" }, { "p_size", 15L }, { "p_mfgr", "M2" } } };
        var partsupp = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ps_partkey", 1000L }, { "ps_suppkey", 100L }, { "ps_supplycost", 10.000000 } }, new Dictionary<string, dynamic> { { "ps_partkey", 1000L }, { "ps_suppkey", 200L }, { "ps_supplycost", 15.000000 } } };
        var europe_nations = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var r in region) {
        if (!((r.r_name == "EUROPE"))) continue;
        foreach (var n in nation) {
            if (!((n.n_regionkey == r.r_regionkey))) continue;
            _res.Add(n);
        }
    }
    return _res;
})();
        var europe_suppliers = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var s in supplier) {
        foreach (var n in europe_nations) {
            if (!((s.s_nationkey == n.n_nationkey))) continue;
            _res.Add(new Dictionary<string, dynamic> { { "s", s }, { "n", n } });
        }
    }
    return _res;
})();
        var target_parts = new List<dynamic>(part.Select(p => p));
        var target_partsupp = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ps in partsupp) {
        foreach (var p in target_parts) {
            if (!((ps.ps_partkey == p.p_partkey))) continue;
            foreach (var s in europe_suppliers) {
                if (!((ps.ps_suppkey == s.s.s_suppkey))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "s_acctbal", s.s.s_acctbal }, { "s_name", s.s.s_name }, { "n_name", s.n.n_name }, { "p_partkey", p.p_partkey }, { "p_mfgr", p.p_mfgr }, { "s_address", s.s.s_address }, { "s_phone", s.s.s_phone }, { "s_comment", s.s.s_comment }, { "ps_supplycost", ps.ps_supplycost } });
            }
        }
    }
    return _res;
})();
        var costs = new List<dynamic>(target_partsupp.Select(x => x.ps_supplycost));
        var min_cost = _min(costs);
        var result = new List<dynamic>(target_partsupp.Where(x => (x.ps_supplycost == min_cost)).OrderBy(x => (-x.s_acctbal)).Select(x => x));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static dynamic _min(dynamic v) {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext()) {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }
    
}
