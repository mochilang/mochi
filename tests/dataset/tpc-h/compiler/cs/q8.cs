// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:19:20Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q8_returns_correct_market_share_for_BRAZIL_in_1995(dynamic result)
    {
        var numerator = (1000.000000 * 0.900000);
        var denominator = (numerator + ((500.000000 * 0.950000)));
        var share = (numerator / denominator);
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_year", "1995" }, { "mkt_share", share } } }));
    }

    static void Main()
    {
        var region = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "r_regionkey", 0 }, { "r_name", "AMERICA" } } };
        var nation = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_nationkey", 10 }, { "n_regionkey", 0 }, { "n_name", "BRAZIL" } }, new Dictionary<dynamic, dynamic> { { "n_nationkey", 20 }, { "n_regionkey", 0 }, { "n_name", "CANADA" } } };
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 }, { "c_nationkey", 10 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 2 }, { "c_nationkey", 20 } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 100 }, { "o_custkey", 1 }, { "o_orderdate", "1995-04-10" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 200 }, { "o_custkey", 2 }, { "o_orderdate", "1995-07-15" } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_orderkey", 100 }, { "l_suppkey", 1000 }, { "l_partkey", 5000 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 } }, new Dictionary<dynamic, dynamic> { { "l_orderkey", 200 }, { "l_suppkey", 2000 }, { "l_partkey", 5000 }, { "l_extendedprice", 500.000000 }, { "l_discount", 0.050000 } } };
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 1000 } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 2000 } } };
        var part = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "p_partkey", 5000 }, { "p_type", "ECONOMY ANODIZED STEEL" } }, new Dictionary<dynamic, dynamic> { { "p_partkey", 6000 }, { "p_type", "SMALL BRASS" } } };
        var start_date = "1995-01-01";
        var end_date = "1996-12-31";
        var target_type = "ECONOMY ANODIZED STEEL";
        var target_nation = "BRAZIL";
        var result = new Func<List<dynamic>>(() =>
        {
            var groups = new Dictionary<string, _Group<string, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var l in lineitem)
            {
                foreach (var p in part)
                {
                    if (!((p["p_partkey"] == l["l_partkey"]))) continue;
                    foreach (var s in supplier)
                    {
                        if (!((s["s_suppkey"] == l["l_suppkey"]))) continue;
                        foreach (var o in orders)
                        {
                            if (!((o["o_orderkey"] == l["l_orderkey"]))) continue;
                            foreach (var c in customer)
                            {
                                if (!((c["c_custkey"] == o["o_custkey"]))) continue;
                                foreach (var n in nation)
                                {
                                    if (!((n["n_nationkey"] == c["c_nationkey"]))) continue;
                                    foreach (var r in region)
                                    {
                                        if (!((r["r_regionkey"] == n["n_regionkey"]))) continue;
                                        if ((((((p["p_type"] == target_type) && string.Compare(Convert.ToString(o["o_orderdate"]), Convert.ToString(start_date)) >= 0) && string.Compare(Convert.ToString(o["o_orderdate"]), Convert.ToString(end_date)) <= 0) && (r["r_name"] == "AMERICA"))))
                                        {
                                            var key = _sliceString(o["o_orderdate"], 0, 4);
                                            var ks = Convert.ToString(key);
                                            if (!groups.TryGetValue(ks, out var g))
                                            {
                                                g = new _Group<string, Dictionary<string, dynamic>>(key);
                                                groups[ks] = g;
                                                order.Add(ks);
                                            }
                                            g.Items.Add(l);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var items = new List<_Group<string, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(year => year["key"]).ToList();
            var _res = new List<dynamic>();
            foreach (var year in items)
            {
                _res.Add(new Dictionary<dynamic, dynamic> { { "o_year", year["key"] }, { "mkt_share", (_sum(year.Select(x => new Func<dynamic>(() => {
        var _t = (x["n"]["n_name"] == target_nation);
        if (_equal(_t, true)) return (x["l"]["l_extendedprice"] * ((1 - x["l"]["l_discount"])));
        return 0.000000;
    })()).ToList()) / _sum(year.Select(x => (x["l"]["l_extendedprice"] * ((1 - x["l"]["l_discount"])))).ToList())) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q8_returns_correct_market_share_for_BRAZIL_in_1995(result);
    }
    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
