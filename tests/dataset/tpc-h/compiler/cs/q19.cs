// Generated by Mochi compiler v0.10.27 on 2025-07-17T18:23:39Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q19_returns_total_revenue_from_qualifying_branded_parts(dynamic result)
    {
        expect(_equal(result, 2800.000000));
    }

    static void Main()
    {
        var part = new List<dynamic> { new Dictionary<string, dynamic> { { "p_partkey", 1 }, { "p_brand", "Brand#12" }, { "p_container", "SM BOX" }, { "p_size", 3 } }, new Dictionary<string, dynamic> { { "p_partkey", 2 }, { "p_brand", "Brand#23" }, { "p_container", "MED BOX" }, { "p_size", 5 } }, new Dictionary<string, dynamic> { { "p_partkey", 3 }, { "p_brand", "Brand#34" }, { "p_container", "LG BOX" }, { "p_size", 15 } } };
        var lineitem = new List<dynamic> { new Dictionary<string, dynamic> { { "l_partkey", 1 }, { "l_quantity", 5 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 }, { "l_shipmode", "AIR" }, { "l_shipinstruct", "DELIVER IN PERSON" } }, new Dictionary<string, dynamic> { { "l_partkey", 2 }, { "l_quantity", 15 }, { "l_extendedprice", 2000.000000 }, { "l_discount", 0.050000 }, { "l_shipmode", "AIR REG" }, { "l_shipinstruct", "DELIVER IN PERSON" } }, new Dictionary<string, dynamic> { { "l_partkey", 3 }, { "l_quantity", 35 }, { "l_extendedprice", 1500.000000 }, { "l_discount", 0.000000 }, { "l_shipmode", "AIR" }, { "l_shipinstruct", "DELIVER IN PERSON" } } };
        var revenues = lineitem.Join(part, l => p["p_partkey"], p => l["l_partkey"], (l, p) => (l["l_extendedprice"] * ((1 - l["l_discount"])))).Where(l => (((((((((p["p_brand"] == "Brand#12")) && (new List<string> { "SM CASE", "SM BOX", "SM PACK", "SM PKG" }.Contains(p["p_container"]))) && (((l["l_quantity"] >= 1) && (l["l_quantity"] <= 11)))) && (((p["p_size"] >= 1) && (p["p_size"] <= 5))))) || ((((((p["p_brand"] == "Brand#23")) && (new List<string> { "MED BAG", "MED BOX", "MED PKG", "MED PACK" }.Contains(p["p_container"]))) && (((l["l_quantity"] >= 10) && (l["l_quantity"] <= 20)))) && (((p["p_size"] >= 1) && (p["p_size"] <= 10)))))) || ((((((p["p_brand"] == "Brand#34")) && (new List<string> { "LG CASE", "LG BOX", "LG PACK", "LG PKG" }.Contains(p["p_container"]))) && (((l["l_quantity"] >= 20) && (l["l_quantity"] <= 30)))) && (((p["p_size"] >= 1) && (p["p_size"] <= 15)))))))).ToList();
        var result = _sum(revenues);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q19_returns_total_revenue_from_qualifying_branded_parts(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
