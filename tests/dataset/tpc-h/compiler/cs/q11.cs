// Generated by Mochi compiler v0.10.27 on 2025-07-17T18:21:58Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q11_returns_high_value_partkeys_from_GERMANY(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<string, dynamic> { { "ps_partkey", 1000 }, { "value", 2000.000000 } }, new Dictionary<string, dynamic> { { "ps_partkey", 2000 }, { "value", 50.000000 } } }));
    }

    static void Main()
    {
        var nation = new List<dynamic> { new Dictionary<string, dynamic> { { "n_nationkey", 1 }, { "n_name", "GERMANY" } }, new Dictionary<string, dynamic> { { "n_nationkey", 2 }, { "n_name", "FRANCE" } } };
        var supplier = new List<dynamic> { new Dictionary<string, int> { { "s_suppkey", 100 }, { "s_nationkey", 1 } }, new Dictionary<string, int> { { "s_suppkey", 200 }, { "s_nationkey", 1 } }, new Dictionary<string, int> { { "s_suppkey", 300 }, { "s_nationkey", 2 } } };
        var partsupp = new List<dynamic> { new Dictionary<string, dynamic> { { "ps_partkey", 1000 }, { "ps_suppkey", 100 }, { "ps_supplycost", 10.000000 }, { "ps_availqty", 100 } }, new Dictionary<string, dynamic> { { "ps_partkey", 1000 }, { "ps_suppkey", 200 }, { "ps_supplycost", 20.000000 }, { "ps_availqty", 50 } }, new Dictionary<string, dynamic> { { "ps_partkey", 2000 }, { "ps_suppkey", 100 }, { "ps_supplycost", 5.000000 }, { "ps_availqty", 10 } }, new Dictionary<string, dynamic> { { "ps_partkey", 3000 }, { "ps_suppkey", 300 }, { "ps_supplycost", 8.000000 }, { "ps_availqty", 500 } } };
        var target_nation = "GERMANY";
        var filtered = (
    from ps in partsupp
    join s in supplier on s["s_suppkey"] equals ps["ps_suppkey"]
    join n in nation on n["n_nationkey"] equals s["s_nationkey"]
    where (n["n_name"] == target_nation)
    select new Dictionary<string, dynamic> { { "ps_partkey", ps["ps_partkey"] }, { "value", (ps["ps_supplycost"] * ps["ps_availqty"]) } }
).ToList();
        var grouped = _group_by<dynamic, dynamic>(filtered, x => x["ps_partkey"]).Select(g => new Dictionary<string, dynamic> { { "ps_partkey", g.key }, { "value", _sum(g.Items.Select(r => r["value"]).ToList()) } }).ToList();
        var total = _sum(filtered.Select(x => x["value"]).ToList());
        var threshold = (total * 0.000100);
        var result = grouped.Where(x => (x["value"] > threshold)).OrderBy(x => (-x["value"])).Select(x => x).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q11_returns_high_value_partkeys_from_GERMANY(result);
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
