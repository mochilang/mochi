// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:21:22Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q22_returns_wealthy_inactive_customers_by_phone_prefix(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "cntrycode", "13" }, { "numcust", 1 }, { "totacctbal", 600.000000 } }, new Dictionary<dynamic, dynamic> { { "cntrycode", "30" }, { "numcust", 1 }, { "totacctbal", 700.000000 } } }));
    }

    static void Main()
    {
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 }, { "c_phone", "13-123-4567" }, { "c_acctbal", 600.000000 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 2 }, { "c_phone", "31-456-7890" }, { "c_acctbal", 100.000000 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 3 }, { "c_phone", "30-000-0000" }, { "c_acctbal", 700.000000 } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 10 }, { "o_custkey", 2 } } };
        var valid_codes = new List<string> { "13", "31", "23", "29", "30", "18", "17" };
        var avg_balance = _avg(customer.Where(c => (c["c_acctbal"] > 0.000000)).Select(c => c["c_acctbal"]).ToList());
        var eligible_customers = customer.Where(c => (c["c_acctbal"] > avg_balance) && ((!Enumerable.Any(orders.Where(o => (o["o_custkey"] == c["c_custkey"])).Select(o => o).ToList())))).Select(c => new Dictionary<dynamic, dynamic> { { "cntrycode", _sliceString(c["c_phone"], 0, 2) }, { "c_acctbal", c["c_acctbal"] } }).ToList();
        var groups = _group_by<dynamic, string>(eligible_customers, c => c["cntrycode"]).Select(g => g).ToList();
        var tmp = new List<dynamic>();
        foreach (var g in groups)
        {
            var total = _sum(g.Items.Select(x => x["c_acctbal"]).ToList());
            var row = new Dictionary<dynamic, dynamic> { { "cntrycode", g.key }, { "numcust", Enumerable.Count(g) }, { "totacctbal", total } };
            tmp = new List<dynamic>(tmp) { row };
        }
        var result = tmp.OrderBy(r => r["cntrycode"]).Select(r => r).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q22_returns_wealthy_inactive_customers_by_phone_prefix(result);
    }
    public class EligibleCustomer
    {
        public string cntrycode;
        public dynamic c_acctbal;
    }


    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
