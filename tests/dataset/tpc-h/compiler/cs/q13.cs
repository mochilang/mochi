// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:20:05Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q13_groups_customers_by_non_special_order_count(dynamic grouped)
    {
        expect(_equal(grouped, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_count", 2 }, { "custdist", 1 } }, new Dictionary<dynamic, dynamic> { { "c_count", 0 }, { "custdist", 2 } } }));
    }

    static void Main()
    {
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_custkey", 1 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 2 } }, new Dictionary<dynamic, dynamic> { { "c_custkey", 3 } } };
        var orders = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "o_orderkey", 100 }, { "o_custkey", 1 }, { "o_comment", "fast delivery" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 101 }, { "o_custkey", 1 }, { "o_comment", "no comment" } }, new Dictionary<dynamic, dynamic> { { "o_orderkey", 102 }, { "o_custkey", 2 }, { "o_comment", "special requests only" } } };
        var per_customer = customer.Select(c => new Dictionary<dynamic, dynamic> { { "c_count", orders.Where(o => ((((o["o_custkey"] == c["c_custkey"]) && ((!(_in("special", o["o_comment"]))))) && ((!(_in("requests", o["o_comment"]))))))).Select(o => o).ToList().Count() } }).ToList();
        var grouped = _group_by<dynamic, int>(per_customer, x => x["c_count"]).OrderBy(g => (-g.key)).Select(g => new Dictionary<dynamic, dynamic> { { "c_count", g.key }, { "custdist", Enumerable.Count(g) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(grouped));
        test_Q13_groups_customers_by_non_special_order_count(grouped);
    }
    public class PerCustomer
    {
        public int c_count;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
