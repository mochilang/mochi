// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:21:04Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_name", "Maple Supply" }, { "s_address", "123 Forest Lane" } } }));
    }

    static void Main()
    {
        var nation = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "n_nationkey", 1 }, { "n_name", "CANADA" } }, new Dictionary<dynamic, dynamic> { { "n_nationkey", 2 }, { "n_name", "GERMANY" } } };
        var supplier = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_suppkey", 100 }, { "s_name", "Maple Supply" }, { "s_address", "123 Forest Lane" }, { "s_nationkey", 1 } }, new Dictionary<dynamic, dynamic> { { "s_suppkey", 200 }, { "s_name", "Berlin Metals" }, { "s_address", "456 Iron Str" }, { "s_nationkey", 2 } } };
        var part = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "p_partkey", 10 }, { "p_name", "forest glade bricks" } }, new Dictionary<dynamic, dynamic> { { "p_partkey", 20 }, { "p_name", "desert sand paper" } } };
        var partsupp = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "ps_partkey", 10 }, { "ps_suppkey", 100 }, { "ps_availqty", 100 } }, new Dictionary<dynamic, dynamic> { { "ps_partkey", 20 }, { "ps_suppkey", 200 }, { "ps_availqty", 30 } } };
        var lineitem = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "l_partkey", 10 }, { "l_suppkey", 100 }, { "l_quantity", 100 }, { "l_shipdate", "1994-05-15" } }, new Dictionary<dynamic, dynamic> { { "l_partkey", 10 }, { "l_suppkey", 100 }, { "l_quantity", 50 }, { "l_shipdate", "1995-01-01" } } };
        var prefix = "forest";
        var shipped_94 = _group_by<dynamic, dynamic>(lineitem.Where(l => string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString("1994-01-01")) >= 0 && string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString("1995-01-01")) < 0), l => new Dictionary<dynamic, dynamic> { { "partkey", l["l_partkey"] }, { "suppkey", l["l_suppkey"] } }).Select(g => new Dictionary<dynamic, dynamic> { { "partkey", g.key.partkey }, { "suppkey", g.key.suppkey }, { "qty", _sum(g.Items.Select(x => x["l_quantity"]).ToList()) } }).ToList();
        var target_partkeys = new Func<List<dynamic>>(() =>
        {
            var _res = new List<dynamic>();
            foreach (var ps in partsupp)
            {
                foreach (var p in part)
                {
                    if (!((ps["ps_partkey"] == p["p_partkey"]))) continue;
                    foreach (var s in shipped_94)
                    {
                        if (!(((ps["ps_partkey"] == s["partkey"]) && (ps["ps_suppkey"] == s["suppkey"])))) continue;
                        if ((ps["ps_availqty"] > ((0.500000 * s["qty"]))))
                        {
                            _res.Add(ps["ps_suppkey"]);
                        }
                    }
                }
            }
            return _res;
        })();
        var result = supplier.Join(nation, s => n["n_nationkey"], n => s["s_nationkey"], (s, n) => new Dictionary<dynamic, dynamic> { { "s_name", s["s_name"] }, { "s_address", s["s_address"] } }).Where(s => target_partkeys.Contains(s["s_suppkey"])).OrderBy(s => s["s_name"]).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments(result);
    }
    public class Result
    {
        public dynamic s_name;
        public dynamic s_address;
    }


    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    static string _sliceString(string s, long i, long j)
    {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
