// Generated by Mochi compiler v0.10.27 on 2025-07-17T18:30:27Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q3_returns_revenue_per_order_with_correct_priority(dynamic order_line_join)
    {
        expect(_equal(order_line_join, new List<dynamic> { new Dictionary<string, dynamic> { { "l_orderkey", 100 }, { "revenue", ((1000.000000 * 0.950000) + 500.000000) }, { "o_orderdate", "1995-03-14" }, { "o_shippriority", 1 } } }));
    }

    static void Main()
    {
        var customer = new List<dynamic> { new Dictionary<string, dynamic> { { "c_custkey", 1 }, { "c_mktsegment", "BUILDING" } }, new Dictionary<string, dynamic> { { "c_custkey", 2 }, { "c_mktsegment", "AUTOMOBILE" } } };
        var orders = new List<dynamic> { new Dictionary<string, dynamic> { { "o_orderkey", 100 }, { "o_custkey", 1 }, { "o_orderdate", "1995-03-14" }, { "o_shippriority", 1 } }, new Dictionary<string, dynamic> { { "o_orderkey", 200 }, { "o_custkey", 2 }, { "o_orderdate", "1995-03-10" }, { "o_shippriority", 2 } } };
        var lineitem = new List<dynamic> { new Dictionary<string, dynamic> { { "l_orderkey", 100 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.050000 }, { "l_shipdate", "1995-03-16" } }, new Dictionary<string, dynamic> { { "l_orderkey", 100 }, { "l_extendedprice", 500.000000 }, { "l_discount", 0.000000 }, { "l_shipdate", "1995-03-20" } }, new Dictionary<string, dynamic> { { "l_orderkey", 200 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.100000 }, { "l_shipdate", "1995-03-14" } } };
        var cutoff = "1995-03-15";
        var segment = "BUILDING";
        var building_customers = customer.Where(c => (c["c_mktsegment"] == segment)).Select(c => c).ToList();
        var valid_orders = orders.Join(building_customers, o => o["o_custkey"], c => c["c_custkey"], (o, c) => o).Where(o => string.Compare(Convert.ToString(o["o_orderdate"]), Convert.ToString(cutoff)) < 0).ToList();
        var valid_lineitems = lineitem.Where(l => string.Compare(Convert.ToString(l["l_shipdate"]), Convert.ToString(cutoff)) > 0).Select(l => l).ToList();
        var order_line_join = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group<Dictionary<string, dynamic>, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var o in valid_orders)
            {
                foreach (var l in valid_lineitems)
                {
                    if (!((l["l_orderkey"] == o["o_orderkey"]))) continue;
                    var key = new Dictionary<string, dynamic> { { "o_orderkey", o["o_orderkey"] }, { "o_orderdate", o["o_orderdate"] }, { "o_shippriority", o["o_shippriority"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group<Dictionary<string, dynamic>, Dictionary<string, dynamic>>(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(o);
                }
            }
            var items = new List<_Group<Dictionary<string, dynamic>, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => new List<dynamic> { (-_sum(g.Select(r => (r["l"]["l_extendedprice"] * ((1 - r["l"]["l_discount"])))).ToList())), g["key"].o_orderdate }).ToList();
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "l_orderkey", g["key"].o_orderkey }, { "revenue", _sum(g.Select(r => (r["l"]["l_extendedprice"] * ((1 - r["l"]["l_discount"])))).ToList()) }, { "o_orderdate", g["key"].o_orderdate }, { "o_shippriority", g["key"].o_shippriority } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(order_line_join));
        test_Q3_returns_revenue_per_order_with_correct_priority(order_line_join);
    }
    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
