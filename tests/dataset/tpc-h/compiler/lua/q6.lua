-- Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:30Z
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local ok, json = pcall(require, 'json')
    if not ok then ok, json = pcall(require, 'cjson') end
    if ok then
        print(json.encode(sort(v)))
        return
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function test_Q6_calculates_revenue_from_qualified_lineitems()
    if not ((result == ((((1000.0 * 0.06)) + ((500.0 * 0.07)))))) then error('expect failed') end
end

lineitem = {{["l_extendedprice"]=1000.0, ["l_discount"]=0.06, ["l_shipdate"]="1994-02-15", ["l_quantity"]=10}, {["l_extendedprice"]=500.0, ["l_discount"]=0.07, ["l_shipdate"]="1994-03-10", ["l_quantity"]=23}, {["l_extendedprice"]=400.0, ["l_discount"]=0.04, ["l_shipdate"]="1994-04-10", ["l_quantity"]=15}, {["l_extendedprice"]=200.0, ["l_discount"]=0.06, ["l_shipdate"]="1995-01-01", ["l_quantity"]=5}}
result = (function()
    local _sum = 0
    for _, l in ipairs(lineitem) do
        if ((((((l.l_shipdate >= "1994-01-01")) and ((l.l_shipdate < "1995-01-01"))) and ((l.l_discount >= 0.05))) and ((l.l_discount <= 0.07))) and ((l.l_quantity < 24))) then _sum = _sum + (l.l_extendedprice * l.l_discount) end
    end
    return _sum
end)()
__json(result)
local __tests = {
    {name="Q6 calculates revenue from qualified lineitems", fn=test_Q6_calculates_revenue_from_qualified_lineitems},
}
