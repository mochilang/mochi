-- Generated by Mochi compiler v0.10.28 on 2025-07-18T03:25:08Z
_Group = {}
function _Group.new(k)
    return {key = k, items = {}}
end
function __group_by(src, keyfn)
    local groups = {}
    local order = {}
    for _, it in ipairs(src) do
        local key = keyfn(it)
        local ks
        if type(key) == 'table' then
            local fields = {}
            for k,_ in pairs(key) do fields[#fields+1] = k end
            table.sort(fields)
            local parts = {}
            for _,k in ipairs(fields) do parts[#parts+1] = tostring(k)..'='..tostring(key[k]) end
            ks = table.concat(parts, ',')
        else
            ks = tostring(key)
        end
        local g = groups[ks]
        if not g then
            g = _Group.new(key)
            groups[ks] = g
            order[#order+1] = ks
        end
        table.insert(g.items, it)
    end
    local res = {}
    for _, ks in ipairs(order) do
        res[#res+1] = groups[ks]
    end
    return res
end
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __avg(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('avg() expects list or group')
    end
    if #items == 0 then return 0 end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    local res = sum / #items
    if res == math.floor(res) then return math.floor(res) end
    return res
end
function __contains(container, item)
    if type(container) == 'table' then
        if container[1] ~= nil or #container > 0 then
            for _, v in ipairs(container) do
                if v == item then return true end
            end
            return false
        else
            return container[item] ~= nil
        end
    elseif type(container) == 'string' then
        local i = string.find(container, item, 1, true)
        if i then return i else return 0 end
    else
        return false
    end
end
function __count(v)
    if type(v) == 'table' then
        if v.items ~= nil then return #v.items end
        if v[1] ~= nil or #v > 0 then return #v end
        local n = 0
        for _ in pairs(v) do n = n + 1 end
        return n
    elseif type(v) == 'string' then
        return #v
    else
        error('count() expects list or group')
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function __sum(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('sum() expects list or group')
    end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    return sum
end
function test_Q22_returns_wealthy_inactive_customers_by_phone_prefix()
    if not (__eq(result, {{["cntrycode"]="13", ["numcust"]=1, ["totacctbal"]=600.0}, {["cntrycode"]="30", ["numcust"]=1, ["totacctbal"]=700.0}})) then error('expect failed') end
end

customer = {{["c_custkey"]=1, ["c_phone"]="13-123-4567", ["c_acctbal"]=600.0}, {["c_custkey"]=2, ["c_phone"]="31-456-7890", ["c_acctbal"]=100.0}, {["c_custkey"]=3, ["c_phone"]="30-000-0000", ["c_acctbal"]=700.0}}
orders = {{["o_orderkey"]=10, ["o_custkey"]=2}}
valid_codes = {"13", "31", "23", "29", "30", "18", "17"}
avg_balance = __avg((function()
    local _res = {}
    for _, c in ipairs(customer) do
        if ((c.c_acctbal > 0.0) and __contains(valid_codes, __slice(c.c_phone, 0, 2))) then
            _res[#_res+1] = c.c_acctbal
        end
    end
    return _res
end)())
eligible_customers = (function()
    local _res = {}
    for _, c in ipairs(customer) do
        if (((function(_l,_v) for _,x in ipairs(_l) do if x == _v then return true end end return false end)(valid_codes,__slice(c.c_phone, 0, 2)) and (c.c_acctbal > avg_balance)) and (not #(function()
    local _res = {}
    for _, o in ipairs(orders) do
        if __eq(o.o_custkey, c.c_custkey) then
            _res[#_res+1] = o
        end
    end
    return _res
end)() > 0)) then
            _res[#_res+1] = {["cntrycode"]=__slice(c.c_phone, 0, 2), ["c_acctbal"]=c.c_acctbal}
        end
    end
    return _res
end)()
groups = (function()
    local _groups = __group_by(eligible_customers, function(c) return c.cntrycode end)
    local _res = {}
    for _, g in ipairs(_groups) do
        _res[#_res+1] = g
    end
    return _res
end)()
tmp = {}
for _, g in ipairs(groups) do
    local total = __sum((function()
    local _res = {}
    for _, x in ipairs(g.items) do
        _res[#_res+1] = x.c_acctbal
    end
    return _res
end)())
    local row = {["cntrycode"]=g.key, ["numcust"]=__count(g), ["totacctbal"]=total}
    tmp = __append(tmp, row)
end
result = (function()
    local _res = {}
    for _, r in ipairs(tmp) do
        _res[#_res+1] = {__key = r.cntrycode, __val = r}
    end
    local items = _res
    table.sort(items, function(a,b)
        local ak, bk = a.__key, b.__key
        if type(ak)=='number' and type(bk)=='number' then return ak < bk end
        if type(ak)=='string' and type(bk)=='string' then return ak < bk end
        return tostring(ak) < tostring(bk)
    end)
    local tmp = {}
    for _, it in ipairs(items) do tmp[#tmp+1] = it.__val end
    items = tmp
    _res = items
    return _res
end)()
__json(result)
local __tests = {
    {name="Q22 returns wealthy inactive customers by phone prefix", fn=test_Q22_returns_wealthy_inactive_customers_by_phone_prefix},
}
