// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:07Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var supplier = [{'s_suppkey': 100, 's_name': 'AlphaSupply', 's_address': '123 Hilltop', 's_comment': 'Reliable and efficient'}, {'s_suppkey': 200, 's_name': 'BetaSupply', 's_address': '456 Riverside', 's_comment': 'Known for Customer Complaints'}];

var part = [{'p_partkey': 1, 'p_brand': 'Brand#12', 'p_type': 'SMALL ANODIZED', 'p_size': 5}, {'p_partkey': 2, 'p_brand': 'Brand#23', 'p_type': 'MEDIUM POLISHED', 'p_size': 10}];

var partsupp = [{'ps_partkey': 1, 'ps_suppkey': 100}, {'ps_partkey': 2, 'ps_suppkey': 200}];

var excluded_suppliers = (() {
  var _q0 = <dynamic>[];
  for (var ps in partsupp) {
    for (var p in part) {
      if (!(p['p_partkey'] == ps['ps_partkey'])) continue;
      if (!((p['p_brand'] == 'Brand#12' && (p['p_type'] as dynamic).contains('SMALL') && p['p_size'] == 5) ?? false)) continue;
      _q0.add(ps['ps_suppkey']);
    }
  }
  return _q0;
})();

var result = (() {
  var _q1 = <dynamic>[];
  for (var s in supplier) {
    if (!((!(_in(s['s_suppkey'], excluded_suppliers)) && (!(s['s_comment'] as dynamic).contains('Customer')) && (!(s['s_comment'] as dynamic).contains('Complaints'))) ?? false)) continue;
    _q1.add([s['s_name'], {'s_name': s['s_name'], 's_address': s['s_address']}]);
  }
  _q1.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q1 = [for (var x in _q1) x[1]];
  return _q1;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
