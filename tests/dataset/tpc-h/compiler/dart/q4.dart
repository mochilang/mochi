// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:04Z
import 'dart:io';
import 'dart:convert';

var orders = [{'o_orderkey': 1, 'o_orderdate': '1993-07-01', 'o_orderpriority': '1-URGENT'}, {'o_orderkey': 2, 'o_orderdate': '1993-07-15', 'o_orderpriority': '2-HIGH'}, {'o_orderkey': 3, 'o_orderdate': '1993-08-01', 'o_orderpriority': '3-NORMAL'}];

var lineitem = [{'l_orderkey': 1, 'l_commitdate': '1993-07-10', 'l_receiptdate': '1993-07-12'}, {'l_orderkey': 1, 'l_commitdate': '1993-07-12', 'l_receiptdate': '1993-07-10'}, {'l_orderkey': 2, 'l_commitdate': '1993-07-20', 'l_receiptdate': '1993-07-25'}, {'l_orderkey': 3, 'l_commitdate': '1993-08-02', 'l_receiptdate': '1993-08-01'}, {'l_orderkey': 3, 'l_commitdate': '1993-08-05', 'l_receiptdate': '1993-08-10'}];

var start_date = '1993-07-01';

var end_date = '1993-08-01';

var date_filtered_orders = (() {
  var _q0 = <dynamic>[];
  for (var o in orders) {
    if (!(o['o_orderdate'].toString().compareTo(start_date) >= 0 && o['o_orderdate'].toString().compareTo(end_date) < 0)) continue;
    _q0.add(o);
  }
  return _q0;
})();

var late_orders = (() {
  var _q1 = <dynamic>[];
  for (var o in date_filtered_orders) {
    if (!((() {
  var _q2 = <dynamic>[];
  for (var l in lineitem) {
    if (!(l['l_orderkey'] == o['o_orderkey'] && l['l_commitdate'].toString().compareTo(l['l_receiptdate'].toString()) < 0)) continue;
    _q2.add(l);
  }
  return _q2;
})().isNotEmpty)) continue;
    _q1.add(o);
  }
  return _q1;
})();

var result = (() {
  var _q3 = <dynamic>[];
  var _g4 = <String, List<dynamic>>{};
  for (var o in late_orders) {
    var _k5 = o['o_orderpriority'];
    var _k5_s = jsonEncode(_k5);
    _g4.putIfAbsent(_k5_s, () => <dynamic>[]).add(o);
  }
  for (var entry in _g4.entries) {
    var g = entry.value;
    var _k5 = jsonDecode(entry.key);
    _q3.add([_k5, {'o_orderpriority': _k5, 'order_count': g.length}]);
  }
  _q3.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
