// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:05Z
import 'dart:io';
import 'dart:convert';

var region = [{'r_regionkey': 0, 'r_name': 'AMERICA'}];

var nation = [{'n_nationkey': 10, 'n_regionkey': 0, 'n_name': 'BRAZIL'}, {'n_nationkey': 20, 'n_regionkey': 0, 'n_name': 'CANADA'}];

var customer = [{'c_custkey': 1, 'c_nationkey': 10}, {'c_custkey': 2, 'c_nationkey': 20}];

var orders = [{'o_orderkey': 100, 'o_custkey': 1, 'o_orderdate': '1995-04-10'}, {'o_orderkey': 200, 'o_custkey': 2, 'o_orderdate': '1995-07-15'}];

var lineitem = [{'l_orderkey': 100, 'l_suppkey': 1000, 'l_partkey': 5000, 'l_extendedprice': 1000, 'l_discount': 0.1}, {'l_orderkey': 200, 'l_suppkey': 2000, 'l_partkey': 5000, 'l_extendedprice': 500, 'l_discount': 0.05}];

var supplier = [{'s_suppkey': 1000}, {'s_suppkey': 2000}];

var part = [{'p_partkey': 5000, 'p_type': 'ECONOMY ANODIZED STEEL'}, {'p_partkey': 6000, 'p_type': 'SMALL BRASS'}];

var start_date = '1995-01-01';

var end_date = '1996-12-31';

var target_type = 'ECONOMY ANODIZED STEEL';

var target_nation = 'BRAZIL';

var result = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var l in lineitem) {
    for (var p in part) {
      if (!(p['p_partkey'] == l['l_partkey'])) continue;
      for (var s in supplier) {
        if (!(s['s_suppkey'] == l['l_suppkey'])) continue;
        for (var o in orders) {
          if (!(o['o_orderkey'] == l['l_orderkey'])) continue;
          for (var c in customer) {
            if (!(c['c_custkey'] == o['o_custkey'])) continue;
            for (var n in nation) {
              if (!(n['n_nationkey'] == c['c_nationkey'])) continue;
              for (var r in region) {
                if (!(r['r_regionkey'] == n['n_regionkey'])) continue;
                if (!((p['p_type'] == target_type && o['o_orderdate'].toString().compareTo(start_date) >= 0 && o['o_orderdate'].toString().compareTo(end_date) <= 0 && r['r_name'] == 'AMERICA'))) continue;
                var _k4 = o['o_orderdate'].toString().substring(0, 4);
                var _k4_s = jsonEncode(_k4);
                _g1.putIfAbsent(_k4_s, () => <dynamic>[]).add({'l': l, 'p': p, 's': s, 'o': o, 'c': c, 'n': n, 'r': r});
              }
            }
          }
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var year = entry.value;
    var _k4 = jsonDecode(entry.key);
    _q0.add([_k4, {'o_year': _k4, 'mkt_share': _sum(year.map((x) => (() {
  var _t = x['n']['n_name'] == target_nation;
  if (_t == true) {
    return (x['l']['l_extendedprice'] as num) * ((1 - (x['l']['l_discount'] as num)) as num);
  }  else {
    return 0;
  }
  return null;
})())) / _sum(year.map((x) => (x['l']['l_extendedprice'] as num) * ((1 - (x['l']['l_discount'] as num)) as num)))}]);
  }
  _q0.sort((a,b) => (a[0] as Comparable).compareTo(b[0]));
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
