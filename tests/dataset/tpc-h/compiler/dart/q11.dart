// Generated by Mochi compiler v0.10.25 on 2025-07-13T07:12:02Z
import 'dart:convert';

var nation = [
  {'n_nationkey': 1, 'n_name': 'GERMANY'},
  {'n_nationkey': 2, 'n_name': 'FRANCE'},
];

var supplier = [
  {'s_suppkey': 100, 's_nationkey': 1},
  {'s_suppkey': 200, 's_nationkey': 1},
  {'s_suppkey': 300, 's_nationkey': 2},
];

var partsupp = [
  {
    'ps_partkey': 1000,
    'ps_suppkey': 100,
    'ps_supplycost': 10,
    'ps_availqty': 100,
  },
  {
    'ps_partkey': 1000,
    'ps_suppkey': 200,
    'ps_supplycost': 20,
    'ps_availqty': 50,
  },
  {
    'ps_partkey': 2000,
    'ps_suppkey': 100,
    'ps_supplycost': 5,
    'ps_availqty': 10,
  },
  {
    'ps_partkey': 3000,
    'ps_suppkey': 300,
    'ps_supplycost': 8,
    'ps_availqty': 500,
  },
];

var target_nation = 'GERMANY';

var filtered = (() {
  var _q0 = <dynamic>[];
  for (var ps in partsupp) {
    for (var s in supplier) {
      if (!(s['s_suppkey'] == ps['ps_suppkey'])) continue;
      for (var n in nation) {
        if (!(n['n_nationkey'] == s['s_nationkey'])) continue;
        if (!(n['n_name'] == target_nation)) continue;
        _q0.add({
          'ps_partkey': ps['ps_partkey'],
          'value': (ps['ps_supplycost'] as num) * (ps['ps_availqty'] as num),
        });
      }
    }
  }
  return _q0;
})();

var grouped = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var x in filtered) {
    var _k5 = x['ps_partkey'];
    var _k5_s = jsonEncode(_k5);
    _g2.putIfAbsent(_k5_s, () => <dynamic>[]).add(x);
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k5 = jsonDecode(entry.key);
    _q1.add({
      'ps_partkey': _k5,
      'value': (() {
        var _t7 = (() {
          var _q6 = <dynamic>[];
          for (var r in g) {
            _q6.add(r['value']);
          }
          return _q6;
        })();
        return _t7.reduce((a, b) => a + b);
      })(),
    });
  }
  return _q1;
})();

var total = (() {
  var _t9 = (() {
    var _q8 = <dynamic>[];
    for (var x in filtered) {
      _q8.add(x['value']);
    }
    return _q8;
  })();
  return _t9.reduce((a, b) => a + b);
})();

var threshold = total * 0.0001;

var result = (() {
  var _q10 = <dynamic>[];
  for (var x in grouped) {
    if (!(x['value'].toString().compareTo(threshold.toString()) > 0)) continue;
    _q10.add([-(x['value'] as num), x]);
  }
  _q10.sort(
    (a, b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])),
  );
  _q10 = [for (var x in _q10) x[1]];
  return _q10;
})();

void main() {
  print(jsonEncode(result));
}
