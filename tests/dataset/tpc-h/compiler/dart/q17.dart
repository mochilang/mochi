// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:32:20Z
import 'dart:io';
import 'dart:convert';

var _part = [
  {
  'p_partkey': 1,
  'p_brand': 'Brand#23',
  'p_container': 'MED BOX',
},
  {
  'p_partkey': 2,
  'p_brand': 'Brand#77',
  'p_container': 'LG JAR',
},
];

var lineitem = [
  {
  'l_partkey': 1,
  'l_quantity': 1,
  'l_extendedprice': 100,
},
  {
  'l_partkey': 1,
  'l_quantity': 10,
  'l_extendedprice': 1000,
},
  {
  'l_partkey': 1,
  'l_quantity': 20,
  'l_extendedprice': 2000,
},
  {
  'l_partkey': 2,
  'l_quantity': 5,
  'l_extendedprice': 500,
},
];

var brand = 'Brand#23';

var container = 'MED BOX';

var filtered = (() {
  var _q0 = <dynamic>[];
  for (var l in lineitem) {
    for (var p in _part) {
      if (!(p['p_partkey'] == l['l_partkey'])) continue;
      if (!(((p['p_brand'] == brand) && (p['p_container'] == container) && ((l['l_quantity'] as num) < (0.2 * (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var x in lineitem) {
    if (!(x['l_partkey'] == p['p_partkey'])) continue;
    _q1.add(x['l_quantity']);
  }
  return _q1;
})(); return (_t2.isEmpty ? 0 : _t2.reduce((a, b) => a + b) / _t2.length); })()))))) continue;
      _q0.add(l['l_extendedprice']);
    }
  }
  return _q0;
})();

var result = _sum(filtered) / 7;

void main() {
  print(jsonEncode(result));
}

dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}
