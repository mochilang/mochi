// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:08Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var nation = [{'n_nationkey': 1, 'n_name': 'CANADA'}, {'n_nationkey': 2, 'n_name': 'GERMANY'}];

var supplier = [{'s_suppkey': 100, 's_name': 'Maple Supply', 's_address': '123 Forest Lane', 's_nationkey': 1}, {'s_suppkey': 200, 's_name': 'Berlin Metals', 's_address': '456 Iron Str', 's_nationkey': 2}];

var part = [{'p_partkey': 10, 'p_name': 'forest glade bricks'}, {'p_partkey': 20, 'p_name': 'desert sand paper'}];

var partsupp = [{'ps_partkey': 10, 'ps_suppkey': 100, 'ps_availqty': 100}, {'ps_partkey': 20, 'ps_suppkey': 200, 'ps_availqty': 30}];

var lineitem = [{'l_partkey': 10, 'l_suppkey': 100, 'l_quantity': 100, 'l_shipdate': '1994-05-15'}, {'l_partkey': 10, 'l_suppkey': 100, 'l_quantity': 50, 'l_shipdate': '1995-01-01'}];

var prefix = 'forest';

var shipped_94 = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var l in lineitem) {
    if (!(l['l_shipdate'].toString().compareTo('1994-01-01') >= 0 && l['l_shipdate'].toString().compareTo('1995-01-01') < 0)) continue;
    var _k3 = {'partkey': l['l_partkey'], 'suppkey': l['l_suppkey']};
    var _k3_s = jsonEncode(_k3);
    _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add(l);
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'partkey': _k3['partkey'], 'suppkey': _k3['suppkey'], 'qty': _sum(g.map((x) => x['l_quantity']))});
  }
  return _q0;
})();

var target_partkeys = (() {
  var _q5 = <dynamic>[];
  for (var ps in partsupp) {
    for (var p in part) {
      if (!(ps['ps_partkey'] == p['p_partkey'])) continue;
      for (var s in shipped_94) {
        if (!(ps['ps_partkey'] == s['partkey'] && ps['ps_suppkey'] == s['suppkey'])) continue;
        if (!(p['p_name'].toString().substring(0, prefix.length) == prefix && ps['ps_availqty'].toString().compareTo((0.5 * (s['qty'] as num)).toString()) > 0)) continue;
        _q5.add(ps['ps_suppkey']);
      }
    }
  }
  return _q5;
})();

var result = (() {
  var _q6 = <dynamic>[];
  for (var s in supplier) {
    for (var n in nation) {
      if (!(n['n_nationkey'] == s['s_nationkey'])) continue;
      if (!(_in(s['s_suppkey'], target_partkeys) && n['n_name'] == 'CANADA')) continue;
      _q6.add([s['s_name'], {'s_name': s['s_name'], 's_address': s['s_address']}]);
    }
  }
  _q6.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q6 = [for (var x in _q6) x[1]];
  return _q6;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
