// Generated by Mochi compiler v0.10.25 on 2025-07-13T07:34:51Z
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var nation = [{'n_nationkey': 1, 'n_name': 'CANADA'}, {'n_nationkey': 2, 'n_name': 'GERMANY'}];

var supplier = [{'s_suppkey': 100, 's_name': 'Maple Supply', 's_address': '123 Forest Lane', 's_nationkey': 1}, {'s_suppkey': 200, 's_name': 'Berlin Metals', 's_address': '456 Iron Str', 's_nationkey': 2}];

var part = [{'p_partkey': 10, 'p_name': 'forest glade bricks'}, {'p_partkey': 20, 'p_name': 'desert sand paper'}];

var partsupp = [{'ps_partkey': 10, 'ps_suppkey': 100, 'ps_availqty': 100}, {'ps_partkey': 20, 'ps_suppkey': 200, 'ps_availqty': 30}];

var lineitem = [{'l_partkey': 10, 'l_suppkey': 100, 'l_quantity': 100, 'l_shipdate': '1994-05-15'}, {'l_partkey': 10, 'l_suppkey': 100, 'l_quantity': 50, 'l_shipdate': '1995-01-01'}];

var prefix = 'forest';

var shipped_94 = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var l in lineitem) {
    if (!(l['l_shipdate'].toString().compareTo('1994-01-01') >= 0 && l['l_shipdate'].toString().compareTo('1995-01-01') < 0)) continue;
    var _k4 = {'partkey': l['l_partkey'], 'suppkey': l['l_suppkey']};
    var _k4_s = jsonEncode(_k4);
    _g1.putIfAbsent(_k4_s, () => <dynamic>[]).add(l);
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k4 = jsonDecode(entry.key);
    _q0.add({'partkey': _k4['partkey'], 'suppkey': _k4['suppkey'], 'qty': (() { var _t6 = (() {
  var _q5 = <dynamic>[];
  for (var x in g) {
    _q5.add(x['l_quantity']);
  }
  return _q5;
})(); return _t6.reduce((a, b) => a + b); })()});
  }
  return _q0;
})();

var target_partkeys = (() {
  var _q7 = <dynamic>[];
  for (var ps in partsupp) {
    for (var p in part) {
      if (!(ps['ps_partkey'] == p['p_partkey'])) continue;
      for (var s in shipped_94) {
        if (!(ps['ps_partkey'] == s['partkey'] && ps['ps_suppkey'] == s['suppkey'])) continue;
        if (!(p['p_name'].toString().substring(0, prefix.length) == prefix && ps['ps_availqty'].toString().compareTo((0.5 * (s['qty'] as num)).toString()) > 0)) continue;
        _q7.add(ps['ps_suppkey']);
      }
    }
  }
  return _q7;
})();

var result = (() {
  var _q8 = <dynamic>[];
  for (var s in supplier) {
    for (var n in nation) {
      if (!(n['n_nationkey'] == s['s_nationkey'])) continue;
      if (!(_in(s['s_suppkey'], target_partkeys) && n['n_name'] == 'CANADA')) continue;
      _q8.add([s['s_name'], {'s_name': s['s_name'], 's_address': s['s_address']}]);
    }
  }
  _q8.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q8 = [for (var x in _q8) x[1]];
  return _q8;
})();

void main() {
  print(jsonEncode(result));
}
