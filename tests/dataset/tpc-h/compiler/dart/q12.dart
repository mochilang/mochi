// Generated by Mochi compiler v0.10.25 on 2025-07-13T07:12:04Z
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var orders = [
  {'o_orderkey': 1, 'o_orderpriority': '1-URGENT'},
  {'o_orderkey': 2, 'o_orderpriority': '3-MEDIUM'},
];

var lineitem = [
  {
    'l_orderkey': 1,
    'l_shipmode': 'MAIL',
    'l_commitdate': '1994-02-10',
    'l_receiptdate': '1994-02-15',
    'l_shipdate': '1994-02-05',
  },
  {
    'l_orderkey': 2,
    'l_shipmode': 'SHIP',
    'l_commitdate': '1994-03-01',
    'l_receiptdate': '1994-02-28',
    'l_shipdate': '1994-02-27',
  },
];

var result = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var l in lineitem) {
    for (var o in orders) {
      if (!(o['o_orderkey'] == l['l_orderkey'])) continue;
      if (!((_in(l['l_shipmode'], ['MAIL', 'SHIP'])) &&
          (l['l_commitdate'].toString().compareTo(
                l['l_receiptdate'].toString(),
              ) <
              0) &&
          (l['l_shipdate'].toString().compareTo(l['l_commitdate'].toString()) <
              0) &&
          (l['l_receiptdate'].toString().compareTo('1994-01-01') >= 0) &&
          (l['l_receiptdate'].toString().compareTo('1995-01-01') < 0)))
        continue;
      var _k6 = l['l_shipmode'];
      var _k6_s = jsonEncode(_k6);
      _g1.putIfAbsent(_k6_s, () => <dynamic>[]).add({'l': l, 'o': o});
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q0.add([
      _k6,
      {
        'l_shipmode': _k6,
        'high_line_count': (() {
          var _t8 = (() {
            var _q7 = <dynamic>[];
            for (var x in g) {
              _q7.add(
                (_in(x['o']['o_orderpriority'], ['1-URGENT', '2-HIGH'])
                    ? 1
                    : 0),
              );
            }
            return _q7;
          })();
          return _t8.reduce((a, b) => a + b);
        })(),
        'low_line_count': (() {
          var _t10 = (() {
            var _q9 = <dynamic>[];
            for (var x in g) {
              _q9.add(
                (!(_in(x['o']['o_orderpriority'], ['1-URGENT', '2-HIGH']))
                    ? 1
                    : 0),
              );
            }
            return _q9;
          })();
          return _t10.reduce((a, b) => a + b);
        })(),
      },
    ]);
  }
  _q0.sort(
    (a, b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])),
  );
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(jsonEncode(result));
}
