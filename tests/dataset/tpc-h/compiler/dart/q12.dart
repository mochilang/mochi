// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var orders = [{'o_orderkey': 1, 'o_orderpriority': '1-URGENT'}, {'o_orderkey': 2, 'o_orderpriority': '3-MEDIUM'}];

var lineitem = [{'l_orderkey': 1, 'l_shipmode': 'MAIL', 'l_commitdate': '1994-02-10', 'l_receiptdate': '1994-02-15', 'l_shipdate': '1994-02-05'}, {'l_orderkey': 2, 'l_shipmode': 'SHIP', 'l_commitdate': '1994-03-01', 'l_receiptdate': '1994-02-28', 'l_shipdate': '1994-02-27'}];

var result = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var l in lineitem) {
    for (var o in orders) {
      if (!(o['o_orderkey'] == l['l_orderkey'])) continue;
      if (!((_in(l['l_shipmode'], ['MAIL', 'SHIP'])) && (l['l_commitdate'].toString().compareTo(l['l_receiptdate'].toString()) < 0) && (l['l_shipdate'].toString().compareTo(l['l_commitdate'].toString()) < 0) && (l['l_receiptdate'].toString().compareTo('1994-01-01') >= 0) && (l['l_receiptdate'].toString().compareTo('1995-01-01') < 0))) continue;
      var _k4 = l['l_shipmode'];
      var _k4_s = jsonEncode(_k4);
      _g1.putIfAbsent(_k4_s, () => <dynamic>[]).add({'l': l, 'o': o});
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k4 = jsonDecode(entry.key);
    _q0.add([_k4, {'l_shipmode': _k4, 'high_line_count': _sum(g.map((x) => (_in(x['o']['o_orderpriority'], ['1-URGENT', '2-HIGH']) ? 1 : 0))), 'low_line_count': _sum(g.map((x) => (!(_in(x['o']['o_orderpriority'], ['1-URGENT', '2-HIGH'])) ? 1 : 0)))}]);
  }
  _q0.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
