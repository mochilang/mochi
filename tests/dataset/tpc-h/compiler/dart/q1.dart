// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:21:50Z
import 'dart:io';
import 'dart:convert';

var lineitem = [{'l_quantity': 17, 'l_extendedprice': 1000, 'l_discount': 0.05, 'l_tax': 0.07, 'l_returnflag': 'N', 'l_linestatus': 'O', 'l_shipdate': '1998-08-01'}, {'l_quantity': 36, 'l_extendedprice': 2000, 'l_discount': 0.1, 'l_tax': 0.05, 'l_returnflag': 'N', 'l_linestatus': 'O', 'l_shipdate': '1998-09-01'}, {'l_quantity': 25, 'l_extendedprice': 1500, 'l_discount': 0, 'l_tax': 0.08, 'l_returnflag': 'R', 'l_linestatus': 'F', 'l_shipdate': '1998-09-03'}];

var result = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var row in lineitem) {
    if (!(row['l_shipdate'].toString().compareTo('1998-09-02') <= 0)) continue;
    var _k12 = {'returnflag': row['l_returnflag'], 'linestatus': row['l_linestatus']};
    var _k12_s = jsonEncode(_k12);
    _g1.putIfAbsent(_k12_s, () => <dynamic>[]).add(row);
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k12 = jsonDecode(entry.key);
    _q0.add({'returnflag': _k12['returnflag'], 'linestatus': _k12['linestatus'], 'sum_qty': g.map((x) => x['l_quantity']).reduce((a, b) => a + b), 'sum_base_price': g.map((x) => x['l_extendedprice']).reduce((a, b) => a + b), 'sum_disc_price': g.map((x) => (x['l_extendedprice'] as num) * ((1 - (x['l_discount'] as num)) as num)).reduce((a, b) => a + b), 'sum_charge': g.map((x) => ((x['l_extendedprice'] as num) * ((1 - (x['l_discount'] as num)) as num) as num) * ((1 + (x['l_tax'] as num)) as num)).reduce((a, b) => a + b), 'avg_qty': (() { var _t18 = (() {
  var _q17 = <dynamic>[];
  for (var x in g) {
    _q17.add(x['l_quantity']);
  }
  return _q17;
})(); return (_t18.isEmpty ? 0 : _t18.reduce((a, b) => a + b) / _t18.length); })(), 'avg_price': (() { var _t20 = (() {
  var _q19 = <dynamic>[];
  for (var x in g) {
    _q19.add(x['l_extendedprice']);
  }
  return _q19;
})(); return (_t20.isEmpty ? 0 : _t20.reduce((a, b) => a + b) / _t20.length); })(), 'avg_disc': (() { var _t22 = (() {
  var _q21 = <dynamic>[];
  for (var x in g) {
    _q21.add(x['l_discount']);
  }
  return _q21;
})(); return (_t22.isEmpty ? 0 : _t22.reduce((a, b) => a + b) / _t22.length); })(), 'count_order': g.length});
  }
  return _q0;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
