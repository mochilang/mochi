// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var part = [{'p_partkey': 1, 'p_type': 'PROMO LUXURY'}, {'p_partkey': 2, 'p_type': 'STANDARD BRASS'}];

var lineitem = [{'l_partkey': 1, 'l_extendedprice': 1000, 'l_discount': 0.1, 'l_shipdate': '1995-09-05'}, {'l_partkey': 2, 'l_extendedprice': 800, 'l_discount': 0, 'l_shipdate': '1995-09-20'}, {'l_partkey': 1, 'l_extendedprice': 500, 'l_discount': 0.2, 'l_shipdate': '1995-10-02'}];

var start_date = '1995-09-01';

var end_date = '1995-10-01';

var filtered = (() {
  var _q0 = <dynamic>[];
  for (var l in lineitem) {
    for (var p in part) {
      if (!(p['p_partkey'] == l['l_partkey'])) continue;
      if (!(l['l_shipdate'].toString().compareTo(start_date) >= 0 && l['l_shipdate'].toString().compareTo(end_date) < 0)) continue;
      _q0.add({'is_promo': _in('PROMO', p['p_type']), 'revenue': (l['l_extendedprice'] as num) * ((1 - (l['l_discount'] as num)) as num)});
    }
  }
  return _q0;
})();

var promo_sum = (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var x in filtered) {
    if (!((x['is_promo']) ?? false)) continue;
    _q1.add(x['revenue']);
  }
  return _q1;
})(); return _sum(_t2); })();

var total_sum = _sum(filtered.map((x) => x['revenue']));

var result = 100 * promo_sum / total_sum;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
