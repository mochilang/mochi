// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:56:07Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var part = [{'p_partkey': 1, 'p_brand': 'Brand#12', 'p_container': 'SM BOX', 'p_size': 3}, {'p_partkey': 2, 'p_brand': 'Brand#23', 'p_container': 'MED BOX', 'p_size': 5}, {'p_partkey': 3, 'p_brand': 'Brand#34', 'p_container': 'LG BOX', 'p_size': 15}];

var lineitem = [{'l_partkey': 1, 'l_quantity': 5, 'l_extendedprice': 1000, 'l_discount': 0.1, 'l_shipmode': 'AIR', 'l_shipinstruct': 'DELIVER IN PERSON'}, {'l_partkey': 2, 'l_quantity': 15, 'l_extendedprice': 2000, 'l_discount': 0.05, 'l_shipmode': 'AIR REG', 'l_shipinstruct': 'DELIVER IN PERSON'}, {'l_partkey': 3, 'l_quantity': 35, 'l_extendedprice': 1500, 'l_discount': 0, 'l_shipmode': 'AIR', 'l_shipinstruct': 'DELIVER IN PERSON'}];

var revenues = (() {
  var _q0 = <dynamic>[];
  for (var l in lineitem) {
    for (var p in part) {
      if (!(p['p_partkey'] == l['l_partkey'])) continue;
      if (!((((p['p_brand'] == 'Brand#12') && (_in(p['p_container'], ['SM CASE', 'SM BOX', 'SM PACK', 'SM PKG'])) && (l['l_quantity'].toString().compareTo(1.toString()) >= 0 && l['l_quantity'].toString().compareTo(11.toString()) <= 0) && (p['p_size'].toString().compareTo(1.toString()) >= 0 && p['p_size'].toString().compareTo(5.toString()) <= 0)) || ((p['p_brand'] == 'Brand#23') && (_in(p['p_container'], ['MED BAG', 'MED BOX', 'MED PKG', 'MED PACK'])) && (l['l_quantity'].toString().compareTo(10.toString()) >= 0 && l['l_quantity'].toString().compareTo(20.toString()) <= 0) && (p['p_size'].toString().compareTo(1.toString()) >= 0 && p['p_size'].toString().compareTo(10.toString()) <= 0)) || ((p['p_brand'] == 'Brand#34') && (_in(p['p_container'], ['LG CASE', 'LG BOX', 'LG PACK', 'LG PKG'])) && (l['l_quantity'].toString().compareTo(20.toString()) >= 0 && l['l_quantity'].toString().compareTo(30.toString()) <= 0) && (p['p_size'].toString().compareTo(1.toString()) >= 0 && p['p_size'].toString().compareTo(15.toString()) <= 0))) && _in(l['l_shipmode'], ['AIR', 'AIR REG']) && l['l_shipinstruct'] == 'DELIVER IN PERSON')) continue;
      _q0.add((l['l_extendedprice'] as num) * ((1 - (l['l_discount'] as num)) as num));
    }
  }
  return _q0;
})();

var result = _sum(revenues);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
