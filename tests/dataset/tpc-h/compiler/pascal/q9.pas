// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:11:43Z
program Q9;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TFPGMap<string, Variant>;
  end_date: string;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  n: specialize TFPGMap<string, Variant>;
  nation: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  p: specialize TFPGMap<string, Variant>;
  part: specialize TArray<specialize TFPGMap<string, Variant>>;
  partsupp: specialize TArray<specialize TFPGMap<string, Variant>>;
  prefix: string;
  ps: specialize TFPGMap<string, Variant>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, integer>;
  start_date: string;
  supplier: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

procedure test_Q9_computes_profit_for_green_parts_by_nation_and_year;
var
  _tmp16: specialize TFPGMap<string, Variant>;
  cost: integer;
  revenue: double;
begin
  revenue := 1000 * 0.9;
  cost := 5 * 10;
  _tmp16 := specialize TFPGMap<string, Variant>.Create;
  _tmp16.AddOrSetData('nation', 'BRAZIL');
  _tmp16.AddOrSetData('o_year', '1995');
  _tmp16.AddOrSetData('profit', revenue - cost);
  if not ((_result = specialize TArray<_>([_tmp16]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('n_nationkey', 1);
  _tmp0.AddOrSetData('n_name', 'BRAZIL');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('n_nationkey', 2);
  _tmp1.AddOrSetData('n_name', 'CANADA');
  nation := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('s_suppkey', 100);
  _tmp2.AddOrSetData('s_nationkey', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('s_suppkey', 200);
  _tmp3.AddOrSetData('s_nationkey', 2);
  supplier := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('p_partkey', 1000);
  _tmp4.AddOrSetData('p_name', 'green metal box');
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('p_partkey', 2000);
  _tmp5.AddOrSetData('p_name', 'red plastic crate');
  part := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('ps_partkey', 1000);
  _tmp6.AddOrSetData('ps_suppkey', 100);
  _tmp6.AddOrSetData('ps_supplycost', 10);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('ps_partkey', 1000);
  _tmp7.AddOrSetData('ps_suppkey', 200);
  _tmp7.AddOrSetData('ps_supplycost', 8);
  partsupp := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('o_orderkey', 1);
  _tmp8.AddOrSetData('o_orderdate', '1995-02-10');
  _tmp9 := specialize TFPGMap<string, Variant>.Create;
  _tmp9.AddOrSetData('o_orderkey', 2);
  _tmp9.AddOrSetData('o_orderdate', '1997-01-01');
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp8, _tmp9]);
  _tmp10 := specialize TFPGMap<string, Variant>.Create;
  _tmp10.AddOrSetData('l_orderkey', 1);
  _tmp10.AddOrSetData('l_partkey', 1000);
  _tmp10.AddOrSetData('l_suppkey', 100);
  _tmp10.AddOrSetData('l_quantity', 5);
  _tmp10.AddOrSetData('l_extendedprice', 1000);
  _tmp10.AddOrSetData('l_discount', 0.1);
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('l_orderkey', 2);
  _tmp11.AddOrSetData('l_partkey', 1000);
  _tmp11.AddOrSetData('l_suppkey', 200);
  _tmp11.AddOrSetData('l_quantity', 10);
  _tmp11.AddOrSetData('l_extendedprice', 800);
  _tmp11.AddOrSetData('l_discount', 0.05);
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp10, _tmp11]);
  prefix := 'green';
  start_date := '1995-01-01';
  end_date := '1996-12-31';
  SetLength(_tmp12, 0);
  SetLength(_tmp13, 0);
  for l in lineitem do
  begin
    for p in part do
    begin
      if not ((p.KeyData['p_partkey'] = l.KeyData['l_partkey'])) then continue;
      for s in supplier do
      begin
        if not ((s.KeyData['s_suppkey'] = l.KeyData['l_suppkey'])) then continue;
        for ps in partsupp do
        begin
          if not (((ps.KeyData['ps_partkey'] = l.KeyData['l_partkey']) and (ps.KeyData['ps_suppkey'] = l.KeyData['l_suppkey']))) then continue;
          for o in orders do
          begin
            if not ((o.KeyData['o_orderkey'] = l.KeyData['l_orderkey'])) then continue;
            for n in nation do
            begin
              if not ((n.KeyData['n_nationkey'] = s.KeyData['s_nationkey'])) then continue;
              if not ((((_sliceString(p.KeyData['p_name'], 0, 0 + Length(prefix)) = prefix) and (o.KeyData['o_orderdate'] >= start_date)) and (o.KeyData['o_orderdate'] <= end_date))) then continue;
              _tmp14 := specialize TFPGMap<string, Variant>.Create;
              _tmp14.AddOrSetData('nation', g.key.nation);
              _tmp14.AddOrSetData('o_year', IntToStr(g.key.o_year));
              SetLength(_tmp15, 0);
              for x in g do
              begin
                _tmp15 := Concat(_tmp15, [x.l.l_extendedprice * 1 - x.l.l_discount - x.ps.ps_supplycost * x.l.l_quantity]);
              end;
              _tmp14.AddOrSetData('profit', specialize _sumList<Variant>(_tmp15));
              _tmp12 := Concat(_tmp12, [_tmp14]);
              _tmp13 := Concat(_tmp13, [specialize TArray<specialize TFPGMap<string, Variant>>([g.key.nation, -g.key.o_year])]);
            end;
          end;
        end;
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp12, _tmp13);
  _result := _tmp12;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q9_computes_profit_for_green_parts_by_nation_and_year;
end.
