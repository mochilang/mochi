// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:05:56Z
program Q4;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_filtered_orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  end_date: string;
  l: specialize TFPGMap<string, Variant>;
  late_orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  start_date: string;

procedure test_Q4_returns_count_of_orders_with_late_lineitems_in_range;
var
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
begin
  _tmp14 := specialize TFPGMap<string, Variant>.Create;
  _tmp14.AddOrSetData('o_orderpriority', '1-URGENT');
  _tmp14.AddOrSetData('order_count', 1);
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('o_orderpriority', '2-HIGH');
  _tmp15.AddOrSetData('order_count', 1);
  if not ((_result = specialize TArray<_>([_tmp14, _tmp15]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('o_orderkey', 1);
  _tmp0.AddOrSetData('o_orderdate', '1993-07-01');
  _tmp0.AddOrSetData('o_orderpriority', '1-URGENT');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('o_orderkey', 2);
  _tmp1.AddOrSetData('o_orderdate', '1993-07-15');
  _tmp1.AddOrSetData('o_orderpriority', '2-HIGH');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('o_orderkey', 3);
  _tmp2.AddOrSetData('o_orderdate', '1993-08-01');
  _tmp2.AddOrSetData('o_orderpriority', '3-NORMAL');
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('l_orderkey', 1);
  _tmp3.AddOrSetData('l_commitdate', '1993-07-10');
  _tmp3.AddOrSetData('l_receiptdate', '1993-07-12');
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('l_orderkey', 1);
  _tmp4.AddOrSetData('l_commitdate', '1993-07-12');
  _tmp4.AddOrSetData('l_receiptdate', '1993-07-10');
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('l_orderkey', 2);
  _tmp5.AddOrSetData('l_commitdate', '1993-07-20');
  _tmp5.AddOrSetData('l_receiptdate', '1993-07-25');
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('l_orderkey', 3);
  _tmp6.AddOrSetData('l_commitdate', '1993-08-02');
  _tmp6.AddOrSetData('l_receiptdate', '1993-08-01');
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('l_orderkey', 3);
  _tmp7.AddOrSetData('l_commitdate', '1993-08-05');
  _tmp7.AddOrSetData('l_receiptdate', '1993-08-10');
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4, _tmp5, _tmp6, _tmp7]);
  start_date := '1993-07-01';
  end_date := '1993-08-01';
  SetLength(_tmp8, 0);
  for o in orders do
  begin
    if not (((o.KeyData['o_orderdate'] >= start_date) and (o.KeyData['o_orderdate'] < end_date))) then continue;
    _tmp8 := Concat(_tmp8, [o]);
  end;
  date_filtered_orders := _tmp8;
  SetLength(_tmp9, 0);
  for l in lineitem do
  begin
    if not (((l.KeyData['l_orderkey'] = o.KeyData['o_orderkey']) and (l.KeyData['l_commitdate'] < l.KeyData['l_receiptdate']))) then continue;
    _tmp9 := Concat(_tmp9, [l]);
  end;
  SetLength(_tmp10, 0);
  for o in date_filtered_orders do
  begin
    if not ((Length(_tmp9) > 0)) then continue;
    _tmp10 := Concat(_tmp10, [o]);
  end;
  late_orders := _tmp10;
  SetLength(_tmp11, 0);
  SetLength(_tmp12, 0);
  for o in late_orders do
  begin
    _tmp13 := specialize TFPGMap<string, Variant>.Create;
    _tmp13.AddOrSetData('o_orderpriority', g.key);
    _tmp13.AddOrSetData('order_count', Length(g));
    _tmp11 := Concat(_tmp11, [_tmp13]);
    _tmp12 := Concat(_tmp12, [g.key]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp11, _tmp12);
  _result := _tmp11;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q4_returns_count_of_orders_with_late_lineitems_in_range;
end.
