// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:11:43Z
program Q8;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, integer>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: boolean;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TFPGMap<string, integer>;
  c: specialize TFPGMap<string, integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  end_date: string;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  n: specialize TFPGMap<string, Variant>;
  nation: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  p: specialize TFPGMap<string, Variant>;
  part: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: specialize TFPGMap<string, Variant>;
  region: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, integer>;
  start_date: string;
  supplier: specialize TArray<specialize TFPGMap<string, integer>>;
  target_nation: string;
  target_type: string;
  x: integer;

procedure test_Q8_returns_correct_market_share_for_BRAZIL_in_1995;
var
  _tmp20: specialize TFPGMap<string, Variant>;
  denominator: double;
  numerator: double;
  share: double;
begin
  numerator := 1000 * 0.9;
  denominator := numerator + 500 * 0.95;
  share := numerator div denominator;
  _tmp20 := specialize TFPGMap<string, Variant>.Create;
  _tmp20.AddOrSetData('o_year', '1995');
  _tmp20.AddOrSetData('mkt_share', share);
  if not ((_result = specialize TArray<_>([_tmp20]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('r_regionkey', 0);
  _tmp0.AddOrSetData('r_name', 'AMERICA');
  region := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('n_nationkey', 10);
  _tmp1.AddOrSetData('n_regionkey', 0);
  _tmp1.AddOrSetData('n_name', 'BRAZIL');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('n_nationkey', 20);
  _tmp2.AddOrSetData('n_regionkey', 0);
  _tmp2.AddOrSetData('n_name', 'CANADA');
  nation := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('c_custkey', 1);
  _tmp3.AddOrSetData('c_nationkey', 10);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('c_custkey', 2);
  _tmp4.AddOrSetData('c_nationkey', 20);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('o_orderkey', 100);
  _tmp5.AddOrSetData('o_custkey', 1);
  _tmp5.AddOrSetData('o_orderdate', '1995-04-10');
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('o_orderkey', 200);
  _tmp6.AddOrSetData('o_custkey', 2);
  _tmp6.AddOrSetData('o_orderdate', '1995-07-15');
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6]);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('l_orderkey', 100);
  _tmp7.AddOrSetData('l_suppkey', 1000);
  _tmp7.AddOrSetData('l_partkey', 5000);
  _tmp7.AddOrSetData('l_extendedprice', 1000);
  _tmp7.AddOrSetData('l_discount', 0.1);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('l_orderkey', 200);
  _tmp8.AddOrSetData('l_suppkey', 2000);
  _tmp8.AddOrSetData('l_partkey', 5000);
  _tmp8.AddOrSetData('l_extendedprice', 500);
  _tmp8.AddOrSetData('l_discount', 0.05);
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7, _tmp8]);
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('s_suppkey', 1000);
  _tmp10 := specialize TFPGMap<string, integer>.Create;
  _tmp10.AddOrSetData('s_suppkey', 2000);
  supplier := specialize TArray<specialize TFPGMap<string, integer>>([_tmp9, _tmp10]);
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('p_partkey', 5000);
  _tmp11.AddOrSetData('p_type', 'ECONOMY ANODIZED STEEL');
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('p_partkey', 6000);
  _tmp12.AddOrSetData('p_type', 'SMALL BRASS');
  part := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp11, _tmp12]);
  start_date := '1995-01-01';
  end_date := '1996-12-31';
  target_type := 'ECONOMY ANODIZED STEEL';
  target_nation := 'BRAZIL';
  SetLength(_tmp13, 0);
  SetLength(_tmp14, 0);
  for l in lineitem do
  begin
    for p in part do
    begin
      if not ((p.KeyData['p_partkey'] = l.KeyData['l_partkey'])) then continue;
      for s in supplier do
      begin
        if not ((s.KeyData['s_suppkey'] = l.KeyData['l_suppkey'])) then continue;
        for o in orders do
        begin
          if not ((o.KeyData['o_orderkey'] = l.KeyData['l_orderkey'])) then continue;
          for c in customer do
          begin
            if not ((c.KeyData['c_custkey'] = o.KeyData['o_custkey'])) then continue;
            for n in nation do
            begin
              if not ((n.KeyData['n_nationkey'] = c.KeyData['c_nationkey'])) then continue;
              for r in region do
              begin
                if not ((r.KeyData['r_regionkey'] = n.KeyData['n_regionkey'])) then continue;
                if not (((((p.KeyData['p_type'] = target_type) and (o.KeyData['o_orderdate'] >= start_date)) and (o.KeyData['o_orderdate'] <= end_date)) and (r.KeyData['r_name'] = 'AMERICA'))) then continue;
                _tmp15 := specialize TFPGMap<string, Variant>.Create;
                _tmp15.AddOrSetData('o_year', year.key);
                SetLength(_tmp16, 0);
                for x in year do
                begin
                  _tmp18 := (x.n.n_name = target_nation);
                  if _tmp18 = True then
                  begin
                    _tmp17 := x.l.l_extendedprice * 1 - x.l.l_discount;
                  else
                  begin
                    _tmp17 := 0;
                  end;
                  _tmp16 := Concat(_tmp16, [_tmp17]);
                end;
                SetLength(_tmp19, 0);
                for x in year do
                begin
                  _tmp19 := Concat(_tmp19, [x.l.l_extendedprice * 1 - x.l.l_discount]);
                end;
                _tmp15.AddOrSetData('mkt_share', specialize _sumList<Variant>(_tmp16) div specialize _sumList<Variant>(_tmp19));
                _tmp13 := Concat(_tmp13, [_tmp15]);
                _tmp14 := Concat(_tmp14, [year.key]);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp13, _tmp14);
  _result := _tmp13;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q8_returns_correct_market_share_for_BRAZIL_in_1995;
end.
