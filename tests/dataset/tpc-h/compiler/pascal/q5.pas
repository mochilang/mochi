// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:11:42Z
program Q5;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TFPGMap<string, Variant>;
  _tmp21: specialize TArray<Variant>;
  _tmp22: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, Variant>;
  asia_nations: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  local_customer_supplier_orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  n: specialize TFPGMap<string, Variant>;
  nation: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: specialize TFPGMap<string, Variant>;
  region: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, integer>;
  supplier: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

procedure test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers;
var
  _tmp23: specialize TFPGMap<string, Variant>;
  _tmp24: specialize TFPGMap<string, Variant>;
begin
  _tmp23 := specialize TFPGMap<string, Variant>.Create;
  _tmp23.AddOrSetData('n_name', 'JAPAN');
  _tmp23.AddOrSetData('revenue', 950);
  _tmp24 := specialize TFPGMap<string, Variant>.Create;
  _tmp24.AddOrSetData('n_name', 'INDIA');
  _tmp24.AddOrSetData('revenue', 720);
  if not ((_result = specialize TArray<_>([_tmp23, _tmp24]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('r_regionkey', 0);
  _tmp0.AddOrSetData('r_name', 'ASIA');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('r_regionkey', 1);
  _tmp1.AddOrSetData('r_name', 'EUROPE');
  region := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('n_nationkey', 10);
  _tmp2.AddOrSetData('n_regionkey', 0);
  _tmp2.AddOrSetData('n_name', 'JAPAN');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('n_nationkey', 20);
  _tmp3.AddOrSetData('n_regionkey', 0);
  _tmp3.AddOrSetData('n_name', 'INDIA');
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('n_nationkey', 30);
  _tmp4.AddOrSetData('n_regionkey', 1);
  _tmp4.AddOrSetData('n_name', 'FRANCE');
  nation := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('c_custkey', 1);
  _tmp5.AddOrSetData('c_nationkey', 10);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('c_custkey', 2);
  _tmp6.AddOrSetData('c_nationkey', 20);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6]);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('s_suppkey', 100);
  _tmp7.AddOrSetData('s_nationkey', 10);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('s_suppkey', 200);
  _tmp8.AddOrSetData('s_nationkey', 20);
  supplier := specialize TArray<specialize TFPGMap<string, integer>>([_tmp7, _tmp8]);
  _tmp9 := specialize TFPGMap<string, Variant>.Create;
  _tmp9.AddOrSetData('o_orderkey', 1000);
  _tmp9.AddOrSetData('o_custkey', 1);
  _tmp9.AddOrSetData('o_orderdate', '1994-03-15');
  _tmp10 := specialize TFPGMap<string, Variant>.Create;
  _tmp10.AddOrSetData('o_orderkey', 2000);
  _tmp10.AddOrSetData('o_custkey', 2);
  _tmp10.AddOrSetData('o_orderdate', '1994-06-10');
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('o_orderkey', 3000);
  _tmp11.AddOrSetData('o_custkey', 2);
  _tmp11.AddOrSetData('o_orderdate', '1995-01-01');
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp9, _tmp10, _tmp11]);
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('l_orderkey', 1000);
  _tmp12.AddOrSetData('l_suppkey', 100);
  _tmp12.AddOrSetData('l_extendedprice', 1000);
  _tmp12.AddOrSetData('l_discount', 0.05);
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('l_orderkey', 2000);
  _tmp13.AddOrSetData('l_suppkey', 200);
  _tmp13.AddOrSetData('l_extendedprice', 800);
  _tmp13.AddOrSetData('l_discount', 0.1);
  _tmp14 := specialize TFPGMap<string, Variant>.Create;
  _tmp14.AddOrSetData('l_orderkey', 3000);
  _tmp14.AddOrSetData('l_suppkey', 200);
  _tmp14.AddOrSetData('l_extendedprice', 900);
  _tmp14.AddOrSetData('l_discount', 0.05);
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp12, _tmp13, _tmp14]);
  SetLength(_tmp15, 0);
  for r in region do
  begin
    for n in nation do
    begin
      if not ((n.KeyData['n_regionkey'] = r.KeyData['r_regionkey'])) then continue;
      if not ((r.KeyData['r_name'] = 'ASIA')) then continue;
      _tmp15 := Concat(_tmp15, [n]);
    end;
  end;
  asia_nations := _tmp15;
  SetLength(_tmp16, 0);
  for c in customer do
  begin
    for n in asia_nations do
    begin
      if not ((c.KeyData['c_nationkey'] = n.KeyData['n_nationkey'])) then continue;
      for o in orders do
      begin
        if not ((o.KeyData['o_custkey'] = c.KeyData['c_custkey'])) then continue;
        for l in lineitem do
        begin
          if not ((l.KeyData['l_orderkey'] = o.KeyData['o_orderkey'])) then continue;
          for s in supplier do
          begin
            if not ((s.KeyData['s_suppkey'] = l.KeyData['l_suppkey'])) then continue;
            if not ((((o.KeyData['o_orderdate'] >= '1994-01-01') and (o.KeyData['o_orderdate'] < '1995-01-01')) and (s.KeyData['s_nationkey'] = c.KeyData['c_nationkey']))) then continue;
            _tmp17 := specialize TFPGMap<string, Variant>.Create;
            _tmp17.AddOrSetData('nation', n.KeyData['n_name']);
            _tmp17.AddOrSetData('revenue', l.KeyData['l_extendedprice'] * 1 - l.KeyData['l_discount']);
            _tmp16 := Concat(_tmp16, [_tmp17]);
          end;
        end;
      end;
    end;
  end;
  local_customer_supplier_orders := _tmp16;
  SetLength(_tmp18, 0);
  SetLength(_tmp19, 0);
  for r in local_customer_supplier_orders do
  begin
    _tmp20 := specialize TFPGMap<string, Variant>.Create;
    _tmp20.AddOrSetData('n_name', g.key);
    SetLength(_tmp21, 0);
    for x in g do
    begin
      _tmp21 := Concat(_tmp21, [x.revenue]);
    end;
    _tmp20.AddOrSetData('revenue', specialize _sumList<Variant>(_tmp21));
    _tmp18 := Concat(_tmp18, [_tmp20]);
    SetLength(_tmp22, 0);
    for x in g do
    begin
      _tmp22 := Concat(_tmp22, [x.revenue]);
    end;
    _tmp19 := Concat(_tmp19, [-specialize _sumList<Variant>(_tmp22)]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp18, _tmp19);
  _result := _tmp18;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers;
end.
