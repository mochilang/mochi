// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:05:56Z
program Q3;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  building_customers: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  cutoff: string;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  order_line_join: specialize TArray<specialize TFPGMap<string, Variant>>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: integer;
  segment: string;
  valid_lineitems: specialize TArray<specialize TFPGMap<string, Variant>>;
  valid_orders: specialize TArray<specialize TFPGMap<string, Variant>>;

procedure test_Q3_returns_revenue_per_order_with_correct_priority;
var
  _tmp15: specialize TFPGMap<string, Variant>;
begin
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('l_orderkey', 100);
  _tmp15.AddOrSetData('revenue', 1000 * 0.95 + 500);
  _tmp15.AddOrSetData('o_orderdate', '1995-03-14');
  _tmp15.AddOrSetData('o_shippriority', 1);
  if not ((order_line_join = specialize TArray<_>([_tmp15]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('c_custkey', 1);
  _tmp0.AddOrSetData('c_mktsegment', 'BUILDING');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('c_custkey', 2);
  _tmp1.AddOrSetData('c_mktsegment', 'AUTOMOBILE');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('o_orderkey', 100);
  _tmp2.AddOrSetData('o_custkey', 1);
  _tmp2.AddOrSetData('o_orderdate', '1995-03-14');
  _tmp2.AddOrSetData('o_shippriority', 1);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('o_orderkey', 200);
  _tmp3.AddOrSetData('o_custkey', 2);
  _tmp3.AddOrSetData('o_orderdate', '1995-03-10');
  _tmp3.AddOrSetData('o_shippriority', 2);
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('l_orderkey', 100);
  _tmp4.AddOrSetData('l_extendedprice', 1000);
  _tmp4.AddOrSetData('l_discount', 0.05);
  _tmp4.AddOrSetData('l_shipdate', '1995-03-16');
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('l_orderkey', 100);
  _tmp5.AddOrSetData('l_extendedprice', 500);
  _tmp5.AddOrSetData('l_discount', 0);
  _tmp5.AddOrSetData('l_shipdate', '1995-03-20');
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('l_orderkey', 200);
  _tmp6.AddOrSetData('l_extendedprice', 1000);
  _tmp6.AddOrSetData('l_discount', 0.1);
  _tmp6.AddOrSetData('l_shipdate', '1995-03-14');
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5, _tmp6]);
  cutoff := '1995-03-15';
  segment := 'BUILDING';
  SetLength(_tmp7, 0);
  for c in customer do
  begin
    if not ((c.KeyData['c_mktsegment'] = segment)) then continue;
    _tmp7 := Concat(_tmp7, [c]);
  end;
  building_customers := _tmp7;
  SetLength(_tmp8, 0);
  for o in orders do
  begin
    for c in building_customers do
    begin
      if not ((o.KeyData['o_custkey'] = c.KeyData['c_custkey'])) then continue;
      if not ((o.KeyData['o_orderdate'] < cutoff)) then continue;
      _tmp8 := Concat(_tmp8, [o]);
    end;
  end;
  valid_orders := _tmp8;
  SetLength(_tmp9, 0);
  for l in lineitem do
  begin
    if not ((l.KeyData['l_shipdate'] > cutoff)) then continue;
    _tmp9 := Concat(_tmp9, [l]);
  end;
  valid_lineitems := _tmp9;
  SetLength(_tmp10, 0);
  SetLength(_tmp11, 0);
  for o in valid_orders do
  begin
    for l in valid_lineitems do
    begin
      if not ((l.KeyData['l_orderkey'] = o.KeyData['o_orderkey'])) then continue;
      _tmp12 := specialize TFPGMap<string, Variant>.Create;
      _tmp12.AddOrSetData('l_orderkey', g.key.o_orderkey);
      SetLength(_tmp13, 0);
      for r in g do
      begin
        _tmp13 := Concat(_tmp13, [r.l.l_extendedprice * 1 - r.l.l_discount]);
      end;
      _tmp12.AddOrSetData('revenue', specialize _sumList<Variant>(_tmp13));
      _tmp12.AddOrSetData('o_orderdate', g.key.o_orderdate);
      _tmp12.AddOrSetData('o_shippriority', g.key.o_shippriority);
      _tmp10 := Concat(_tmp10, [_tmp12]);
      SetLength(_tmp14, 0);
      for r in g do
      begin
        _tmp14 := Concat(_tmp14, [r.l.l_extendedprice * 1 - r.l.l_discount]);
      end;
      _tmp11 := Concat(_tmp11, [specialize TArray<specialize TFPGMap<string, Variant>>([-specialize _sumList<Variant>(_tmp14), g.key.o_orderdate])]);
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp10, _tmp11);
  order_line_join := _tmp10;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(order_line_join);
  test_Q3_returns_revenue_per_order_with_correct_priority;
end.
