// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:05:56Z
program Q1;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize _Group<_, specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TArray<Variant>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp5: specialize TArray<specialize _Group<_, specialize TFPGMap<string, Variant>>>;
  _tmp6: _;
  _tmp7: string;
  _tmp8: integer;
  _tmp9: integer;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  row: specialize TFPGMap<string, Variant>;
  x: integer;

procedure test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus;
var
  _tmp20: specialize TFPGMap<string, Variant>;
begin
  _tmp20 := specialize TFPGMap<string, Variant>.Create;
  _tmp20.AddOrSetData('returnflag', 'N');
  _tmp20.AddOrSetData('linestatus', 'O');
  _tmp20.AddOrSetData('sum_qty', 53);
  _tmp20.AddOrSetData('sum_base_price', 3000);
  _tmp20.AddOrSetData('sum_disc_price', 950 + 1800);
  _tmp20.AddOrSetData('sum_charge', 950 * 1.07 + 1800 * 1.05);
  _tmp20.AddOrSetData('avg_qty', 26.5);
  _tmp20.AddOrSetData('avg_price', 1500);
  _tmp20.AddOrSetData('avg_disc', 0.07500000000000001);
  _tmp20.AddOrSetData('count_order', 2);
  if not ((_result = specialize TArray<_>([_tmp20]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('l_quantity', 17);
  _tmp0.AddOrSetData('l_extendedprice', 1000);
  _tmp0.AddOrSetData('l_discount', 0.05);
  _tmp0.AddOrSetData('l_tax', 0.07);
  _tmp0.AddOrSetData('l_returnflag', 'N');
  _tmp0.AddOrSetData('l_linestatus', 'O');
  _tmp0.AddOrSetData('l_shipdate', '1998-08-01');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('l_quantity', 36);
  _tmp1.AddOrSetData('l_extendedprice', 2000);
  _tmp1.AddOrSetData('l_discount', 0.1);
  _tmp1.AddOrSetData('l_tax', 0.05);
  _tmp1.AddOrSetData('l_returnflag', 'N');
  _tmp1.AddOrSetData('l_linestatus', 'O');
  _tmp1.AddOrSetData('l_shipdate', '1998-09-01');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('l_quantity', 25);
  _tmp2.AddOrSetData('l_extendedprice', 1500);
  _tmp2.AddOrSetData('l_discount', 0);
  _tmp2.AddOrSetData('l_tax', 0.08);
  _tmp2.AddOrSetData('l_returnflag', 'R');
  _tmp2.AddOrSetData('l_linestatus', 'F');
  _tmp2.AddOrSetData('l_shipdate', '1998-09-03');
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('returnflag', row.KeyData['l_returnflag']);
  _tmp3.AddOrSetData('linestatus', row.KeyData['l_linestatus']);
  SetLength(_tmp4, 0);
  for row in lineitem do
  begin
    if not ((row.KeyData['l_shipdate'] <= '1998-09-02')) then continue;
    _tmp4 := Concat(_tmp4, [row]);
  end;
  SetLength(_tmp5, 0);
  for row in _tmp4 do
  begin
    _tmp6 := _tmp3;
    _tmp7 := VarToStr(_tmp6);
    _tmp8 := -1;
    for _tmp9 := 0 to High(_tmp5) do
      if VarToStr(_tmp5[_tmp9].Key) = _tmp7 then begin _tmp8 := _tmp9; Break; end;
    if _tmp8 = -1 then
    begin
      _tmp8 := Length(_tmp5);
      SetLength(_tmp5, _tmp8 + 1);
      _tmp5[_tmp8].Key := _tmp6;
      SetLength(_tmp5[_tmp8].Items, 0);
    end;
    SetLength(_tmp5[_tmp8].Items, Length(_tmp5[_tmp8].Items)+1);
    _tmp5[_tmp8].Items[High(_tmp5[_tmp8].Items)] := row;
  end;
  SetLength(_tmp11, 0);
  for _tmp10 in _tmp5 do
  begin
    _tmp12 := specialize TFPGMap<string, Variant>.Create;
    _tmp12.AddOrSetData('returnflag', g.key.returnflag);
    _tmp12.AddOrSetData('linestatus', g.key.linestatus);
    SetLength(_tmp13, 0);
    for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.l_quantity]);
    end;
    _tmp12.AddOrSetData('sum_qty', specialize _sumList<Variant>(_tmp13));
    SetLength(_tmp14, 0);
    for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.l_extendedprice]);
    end;
    _tmp12.AddOrSetData('sum_base_price', specialize _sumList<Variant>(_tmp14));
    SetLength(_tmp15, 0);
    for x in g do
    begin
      _tmp15 := Concat(_tmp15, [x.l_extendedprice * 1 - x.l_discount]);
    end;
    _tmp12.AddOrSetData('sum_disc_price', specialize _sumList<Variant>(_tmp15));
    SetLength(_tmp16, 0);
    for x in g do
    begin
      _tmp16 := Concat(_tmp16, [x.l_extendedprice * 1 - x.l_discount * 1 + x.l_tax]);
    end;
    _tmp12.AddOrSetData('sum_charge', specialize _sumList<Variant>(_tmp16));
    SetLength(_tmp17, 0);
    for x in g do
    begin
      _tmp17 := Concat(_tmp17, [x.l_quantity]);
    end;
    _tmp12.AddOrSetData('avg_qty', specialize _avgList<Variant>(_tmp17));
    SetLength(_tmp18, 0);
    for x in g do
    begin
      _tmp18 := Concat(_tmp18, [x.l_extendedprice]);
    end;
    _tmp12.AddOrSetData('avg_price', specialize _avgList<Variant>(_tmp18));
    SetLength(_tmp19, 0);
    for x in g do
    begin
      _tmp19 := Concat(_tmp19, [x.l_discount]);
    end;
    _tmp12.AddOrSetData('avg_disc', specialize _avgList<Variant>(_tmp19));
    _tmp12.AddOrSetData('count_order', Length(g));
    _tmp11 := Concat(_tmp11, [_tmp12]);
  end;
  _result := _tmp11;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus;
end.
