// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:05:56Z
program Q2;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TFPGMap<string, Variant>;
  costs: specialize TArray<specialize TFPGMap<string, Variant>>;
  europe_nations: specialize TArray<specialize TFPGMap<string, Variant>>;
  europe_suppliers: specialize TArray<specialize TFPGMap<string, Variant>>;
  min_cost: Variant;
  n: specialize TFPGMap<string, Variant>;
  nation: specialize TArray<specialize TFPGMap<string, Variant>>;
  p: specialize TFPGMap<string, Variant>;
  part: specialize TArray<specialize TFPGMap<string, Variant>>;
  partsupp: specialize TArray<specialize TFPGMap<string, Variant>>;
  ps: specialize TFPGMap<string, Variant>;
  r: specialize TFPGMap<string, Variant>;
  region: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  supplier: specialize TArray<specialize TFPGMap<string, Variant>>;
  target_parts: specialize TArray<specialize TFPGMap<string, Variant>>;
  target_partsupp: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: specialize TFPGMap<string, Variant>;

procedure test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part;
var
  _tmp19: specialize TFPGMap<string, Variant>;
begin
  _tmp19 := specialize TFPGMap<string, Variant>.Create;
  _tmp19.AddOrSetData('s_acctbal', 1000);
  _tmp19.AddOrSetData('s_name', 'BestSupplier');
  _tmp19.AddOrSetData('n_name', 'FRANCE');
  _tmp19.AddOrSetData('p_partkey', 1000);
  _tmp19.AddOrSetData('p_mfgr', 'M1');
  _tmp19.AddOrSetData('s_address', '123 Rue');
  _tmp19.AddOrSetData('s_phone', '123');
  _tmp19.AddOrSetData('s_comment', 'Fast and reliable');
  _tmp19.AddOrSetData('ps_supplycost', 10);
  if not ((_result = specialize TArray<_>([_tmp19]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('r_regionkey', 1);
  _tmp0.AddOrSetData('r_name', 'EUROPE');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('r_regionkey', 2);
  _tmp1.AddOrSetData('r_name', 'ASIA');
  region := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('n_nationkey', 10);
  _tmp2.AddOrSetData('n_regionkey', 1);
  _tmp2.AddOrSetData('n_name', 'FRANCE');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('n_nationkey', 20);
  _tmp3.AddOrSetData('n_regionkey', 2);
  _tmp3.AddOrSetData('n_name', 'CHINA');
  nation := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('s_suppkey', 100);
  _tmp4.AddOrSetData('s_name', 'BestSupplier');
  _tmp4.AddOrSetData('s_address', '123 Rue');
  _tmp4.AddOrSetData('s_nationkey', 10);
  _tmp4.AddOrSetData('s_phone', '123');
  _tmp4.AddOrSetData('s_acctbal', 1000);
  _tmp4.AddOrSetData('s_comment', 'Fast and reliable');
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('s_suppkey', 200);
  _tmp5.AddOrSetData('s_name', 'AltSupplier');
  _tmp5.AddOrSetData('s_address', '456 Way');
  _tmp5.AddOrSetData('s_nationkey', 20);
  _tmp5.AddOrSetData('s_phone', '456');
  _tmp5.AddOrSetData('s_acctbal', 500);
  _tmp5.AddOrSetData('s_comment', 'Slow');
  supplier := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('p_partkey', 1000);
  _tmp6.AddOrSetData('p_type', 'LARGE BRASS');
  _tmp6.AddOrSetData('p_size', 15);
  _tmp6.AddOrSetData('p_mfgr', 'M1');
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('p_partkey', 2000);
  _tmp7.AddOrSetData('p_type', 'SMALL COPPER');
  _tmp7.AddOrSetData('p_size', 15);
  _tmp7.AddOrSetData('p_mfgr', 'M2');
  part := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('ps_partkey', 1000);
  _tmp8.AddOrSetData('ps_suppkey', 100);
  _tmp8.AddOrSetData('ps_supplycost', 10);
  _tmp9 := specialize TFPGMap<string, Variant>.Create;
  _tmp9.AddOrSetData('ps_partkey', 1000);
  _tmp9.AddOrSetData('ps_suppkey', 200);
  _tmp9.AddOrSetData('ps_supplycost', 15);
  partsupp := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp8, _tmp9]);
  SetLength(_tmp10, 0);
  for r in region do
  begin
    for n in nation do
    begin
      if not ((n.KeyData['n_regionkey'] = r.KeyData['r_regionkey'])) then continue;
      if not ((r.KeyData['r_name'] = 'EUROPE')) then continue;
      _tmp10 := Concat(_tmp10, [n]);
    end;
  end;
  europe_nations := _tmp10;
  SetLength(_tmp11, 0);
  for s in supplier do
  begin
    for n in europe_nations do
    begin
      if not ((s.KeyData['s_nationkey'] = n.KeyData['n_nationkey'])) then continue;
      _tmp12 := specialize TFPGMap<string, specialize TFPGMap<string, Variant>>.Create;
      _tmp12.AddOrSetData('s', s);
      _tmp12.AddOrSetData('n', n);
      _tmp11 := Concat(_tmp11, [_tmp12]);
    end;
  end;
  europe_suppliers := _tmp11;
  SetLength(_tmp13, 0);
  for p in part do
  begin
    if not (((p.KeyData['p_size'] = 15) and (p.KeyData['p_type'] = 'LARGE BRASS'))) then continue;
    _tmp13 := Concat(_tmp13, [p]);
  end;
  target_parts := _tmp13;
  SetLength(_tmp14, 0);
  for ps in partsupp do
  begin
    for p in target_parts do
    begin
      if not ((ps.KeyData['ps_partkey'] = p.KeyData['p_partkey'])) then continue;
      for s in europe_suppliers do
      begin
        if not ((ps.KeyData['ps_suppkey'] = s.KeyData['s'].s_suppkey)) then continue;
        _tmp15 := specialize TFPGMap<string, Variant>.Create;
        _tmp15.AddOrSetData('s_acctbal', s.KeyData['s'].s_acctbal);
        _tmp15.AddOrSetData('s_name', s.KeyData['s'].s_name);
        _tmp15.AddOrSetData('n_name', s.KeyData['n'].n_name);
        _tmp15.AddOrSetData('p_partkey', p.KeyData['p_partkey']);
        _tmp15.AddOrSetData('p_mfgr', p.KeyData['p_mfgr']);
        _tmp15.AddOrSetData('s_address', s.KeyData['s'].s_address);
        _tmp15.AddOrSetData('s_phone', s.KeyData['s'].s_phone);
        _tmp15.AddOrSetData('s_comment', s.KeyData['s'].s_comment);
        _tmp15.AddOrSetData('ps_supplycost', ps.KeyData['ps_supplycost']);
        _tmp14 := Concat(_tmp14, [_tmp15]);
      end;
    end;
  end;
  target_partsupp := _tmp14;
  SetLength(_tmp16, 0);
  for x in target_partsupp do
  begin
    _tmp16 := Concat(_tmp16, [x.KeyData['ps_supplycost']]);
  end;
  costs := _tmp16;
  min_cost := min(costs);
  SetLength(_tmp17, 0);
  SetLength(_tmp18, 0);
  for x in target_partsupp do
  begin
    if not ((x.KeyData['ps_supplycost'] = min_cost)) then continue;
    _tmp17 := Concat(_tmp17, [x]);
    _tmp18 := Concat(_tmp18, [-x.KeyData['s_acctbal']]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp17, _tmp18);
  _result := _tmp17;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part;
end.
