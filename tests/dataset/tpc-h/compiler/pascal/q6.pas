// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:23:41Z
program Q6;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<double>;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<Variant>;

procedure test_Q6_calculates_revenue_from_qualified_lineitems;
begin
  if not ((_result = 1000 * 0.06 + 500 * 0.07)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('l_extendedprice', 1000);
  _tmp0.AddOrSetData('l_discount', 0.06);
  _tmp0.AddOrSetData('l_shipdate', '1994-02-15');
  _tmp0.AddOrSetData('l_quantity', 10);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('l_extendedprice', 500);
  _tmp1.AddOrSetData('l_discount', 0.07);
  _tmp1.AddOrSetData('l_shipdate', '1994-03-10');
  _tmp1.AddOrSetData('l_quantity', 23);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('l_extendedprice', 400);
  _tmp2.AddOrSetData('l_discount', 0.04);
  _tmp2.AddOrSetData('l_shipdate', '1994-04-10');
  _tmp2.AddOrSetData('l_quantity', 15);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('l_extendedprice', 200);
  _tmp3.AddOrSetData('l_discount', 0.06);
  _tmp3.AddOrSetData('l_shipdate', '1995-01-01');
  _tmp3.AddOrSetData('l_quantity', 5);
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2, _tmp3]);
  SetLength(_tmp4, 0);
  for l in lineitem do
  begin
    if not ((((((l.KeyData['l_shipdate'] >= '1994-01-01') and (l.KeyData['l_shipdate'] < '1995-01-01')) and (l.KeyData['l_discount'] >= 0.05)) and (l.KeyData['l_discount'] <= 0.07)) and (l.KeyData['l_quantity'] < 24))) then continue;
    _tmp4 := Concat(_tmp4, [0]);
  end;
  _result := _tmp4;
  specialize _json<specialize TArray<Variant>>(_result);
  test_Q6_calculates_revenue_from_qualified_lineitems;
end.
