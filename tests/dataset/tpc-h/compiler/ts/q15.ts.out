// Generated by Mochi TypeScript compiler

let end_date: string;
let lineitem: Record<string, any>[];
let max_revenue: any;
let result: Record<string, any>[];
let revenue0: Record<string, any>[];
let revenues: any[];
let start_date: string;
let supplier: Record<string, any>[];

function test_Q15_returns_top_revenue_supplier_s__for_Q1_1996(): void {
  let rev = (1000 * 0.9) + 500;
  if (
    !(_equal(result, [
      {
        "s_suppkey": 100,
        "s_name": "Best Supplier",
        "s_address": "123 Market St",
        "s_phone": "123-456",
        "total_revenue": rev,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "Best Supplier",
      "s_address": "123 Market St",
      "s_phone": "123-456",
    },
    {
      "s_suppkey": 200,
      "s_name": "Second Supplier",
      "s_address": "456 Elm St",
      "s_phone": "987-654",
    },
  ];
  lineitem = [
    {
      "l_suppkey": 100,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipdate": "1996-01-15",
    },
    {
      "l_suppkey": 100,
      "l_extendedprice": 500,
      "l_discount": 0,
      "l_shipdate": "1996-03-20",
    },
    {
      "l_suppkey": 200,
      "l_extendedprice": 800,
      "l_discount": 0.05,
      "l_shipdate": "1995-12-30",
    },
  ];
  start_date = "1996-01-01";
  end_date = "1996-04-01";
  revenue0 = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const l of _src) {
      if (!((l.l_shipdate >= start_date) && (l.l_shipdate < end_date))) {
        continue;
      }
      const _key = l.l_suppkey;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...l, l: l });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "supplier_no": g.key,
        "total_revenue": _sum(
          g.items.map((x) => (x.l_extendedprice * (1 - x.l_discount))),
        ),
      });
    }
    return _res;
  })();
  revenues = revenue0.map((x) => x.total_revenue);
  max_revenue = _max(revenues);
  result = (() => {
    const _src = supplier;
    var _items = [];
    for (const s of _src) {
      for (const r of revenue0) {
        if (!(_equal(s.s_suppkey, r.supplier_no))) continue;
        if (!(_equal(r.total_revenue, max_revenue))) continue;
        _items.push({ s: s, r: r });
      }
    }
    let _pairs = _items.map((it) => {
      const s = it;
      return { item: it, key: s.s_suppkey };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const s = _it.s;
      const r = _it.r;
      _res.push({
        "s_suppkey": s.s_suppkey,
        "s_name": s.s_name,
        "s_address": s.s_address,
        "s_phone": s.s_phone,
        "total_revenue": r.total_revenue,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q15_returns_top_revenue_supplier_s__for_Q1_1996();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();

