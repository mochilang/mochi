// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:34:16Z
// Source: tests/dataset/tpc-h/q9.mochi

let end_date: string;
let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let part: Record<string, any>[];
let partsupp: Record<string, any>[];
let prefix: string;
let result: Record<string, any>[];
let start_date: string;
let supplier: { [key: string]: number }[];

function test_Q9_computes_profit_for_green_parts_by_nation_and_year(): void {
  let revenue = 1000 * 0.9;
  let cost = 5 * 10;
  if (
    !(_equal(result, [
      {
        "nation": "BRAZIL",
        "o_year": "1995",
        "profit": (revenue - cost),
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "BRAZIL",
    },
    {
      "n_nationkey": 2,
      "n_name": "CANADA",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 200,
      "s_nationkey": 2,
    },
  ];
  part = [
    {
      "p_partkey": 1000,
      "p_name": "green metal box",
    },
    {
      "p_partkey": 2000,
      "p_name": "red plastic crate",
    },
  ];
  partsupp = [
    {
      "ps_partkey": 1000,
      "ps_suppkey": 100,
      "ps_supplycost": 10,
    },
    {
      "ps_partkey": 1000,
      "ps_suppkey": 200,
      "ps_supplycost": 8,
    },
  ];
  orders = [
    {
      "o_orderkey": 1,
      "o_orderdate": "1995-02-10",
    },
    {
      "o_orderkey": 2,
      "o_orderdate": "1997-01-01",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1,
      "l_partkey": 1000,
      "l_suppkey": 100,
      "l_quantity": 5,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
    },
    {
      "l_orderkey": 2,
      "l_partkey": 1000,
      "l_suppkey": 200,
      "l_quantity": 10,
      "l_extendedprice": 800,
      "l_discount": 0.05,
    },
  ];
  prefix = "green";
  start_date = "1995-01-01";
  end_date = "1996-12-31";
  result = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(_equal(p.p_partkey, l.l_partkey))) continue;
        for (const s of supplier) {
          if (!(_equal(s.s_suppkey, l.l_suppkey))) continue;
          for (const ps of partsupp) {
            if (
              !(_equal(ps.ps_partkey, l.l_partkey) &&
                _equal(ps.ps_suppkey, l.l_suppkey))
            ) continue;
            for (const o of orders) {
              if (!(_equal(o.o_orderkey, l.l_orderkey))) continue;
              for (const n of nation) {
                if (!(_equal(n.n_nationkey, s.s_nationkey))) continue;
                if (
                  !(((p.p_name.substring(0, (0) + (prefix.length)) == prefix) &&
                    (o.o_orderdate >= start_date)) &&
                    (o.o_orderdate <= end_date))
                ) continue;
                const _key = {
                  "nation": n.n_name,
                  "o_year": o.o_orderdate.substring(0, (0) + (4)),
                };
                const _ks = JSON.stringify(_key);
                let _g = _map.get(_ks);
                if (!_g) {
                  _g = { key: _key, items: [] };
                  _map.set(_ks, _g);
                  _order.push(_ks);
                }
                _g.items.push({
                  ...l,
                  ...p,
                  ...s,
                  ...ps,
                  ...o,
                  ...n,
                  l: l,
                  p: p,
                  s: s,
                  ps: ps,
                  o: o,
                  n: n,
                });
              }
            }
          }
        }
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          g.key.nation,
          -g.key.o_year,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "nation": g.key.nation,
        "o_year": String(g.key.o_year),
        "profit": _sum(
          g.items.map(
            (x) => ((x.l.l_extendedprice * (1 - x.l.l_discount)) -
              (x.ps.ps_supplycost * x.l.l_quantity))
          ),
        ),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q9_computes_profit_for_green_parts_by_nation_and_year();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
