// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q5.mochi

let asia_nations: Record<string, any>[];
let customer: { [key: string]: number }[];
let lineitem: Record<string, any>[];
let local_customer_supplier_orders: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let region: Record<string, any>[];
let result: Record<string, any>[];
let supplier: { [key: string]: number }[];

function test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers(): void {
  if (
    !(_equal(result, [
      {
        "n_name": "JAPAN",
        "revenue": 950,
      },
      {
        "n_name": "INDIA",
        "revenue": 720,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  region = [
    {
      "r_regionkey": 0,
      "r_name": "ASIA",
    },
    {
      "r_regionkey": 1,
      "r_name": "EUROPE",
    },
  ];
  nation = [
    {
      "n_nationkey": 10,
      "n_regionkey": 0,
      "n_name": "JAPAN",
    },
    {
      "n_nationkey": 20,
      "n_regionkey": 0,
      "n_name": "INDIA",
    },
    {
      "n_nationkey": 30,
      "n_regionkey": 1,
      "n_name": "FRANCE",
    },
  ];
  customer = [
    {
      "c_custkey": 1,
      "c_nationkey": 10,
    },
    {
      "c_custkey": 2,
      "c_nationkey": 20,
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_nationkey": 10,
    },
    {
      "s_suppkey": 200,
      "s_nationkey": 20,
    },
  ];
  orders = [
    {
      "o_orderkey": 1000,
      "o_custkey": 1,
      "o_orderdate": "1994-03-15",
    },
    {
      "o_orderkey": 2000,
      "o_custkey": 2,
      "o_orderdate": "1994-06-10",
    },
    {
      "o_orderkey": 3000,
      "o_custkey": 2,
      "o_orderdate": "1995-01-01",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1000,
      "l_suppkey": 100,
      "l_extendedprice": 1000,
      "l_discount": 0.05,
    },
    {
      "l_orderkey": 2000,
      "l_suppkey": 200,
      "l_extendedprice": 800,
      "l_discount": 0.1,
    },
    {
      "l_orderkey": 3000,
      "l_suppkey": 200,
      "l_extendedprice": 900,
      "l_discount": 0.05,
    },
  ];
  asia_nations = (() => {
    const _src = region;
    const _res = [];
    for (const r of _src) {
      for (const n of nation) {
        if (!(n.n_regionkey == r.r_regionkey)) continue;
        if (!(r.r_name == "ASIA")) continue;
        _res.push(n);
      }
    }
    return _res;
  })();
  local_customer_supplier_orders = (() => {
    const _src = customer;
    const _res = [];
    for (const c of _src) {
      for (const n of asia_nations) {
        if (!(c.c_nationkey == n.n_nationkey)) continue;
        for (const o of orders) {
          if (!(o.o_custkey == c.c_custkey)) continue;
          for (const l of lineitem) {
            if (!(l.l_orderkey == o.o_orderkey)) continue;
            for (const s of supplier) {
              if (!(s.s_suppkey == l.l_suppkey)) continue;
              if (
                !(((o.o_orderdate >= "1994-01-01") &&
                  (o.o_orderdate < "1995-01-01")) &&
                  (s.s_nationkey == c.c_nationkey))
              ) continue;
              _res.push({
                "nation": n.n_name,
                "revenue": (l.l_extendedprice * (1 - l.l_discount)),
              });
            }
          }
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = local_customer_supplier_orders;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = r.nation;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: (-g.items.map((x) =>
          x.revenue
        ).reduce((a, b) => a + Number(b), 0)),
      };
    });
    _pairs.sort((a, b) => a.key - b.key);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "n_name": g.key,
        "revenue": g.items.map((x) => x.revenue).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
