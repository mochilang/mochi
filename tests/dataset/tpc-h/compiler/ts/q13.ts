// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:15:25Z
// Source: tests/dataset/tpc-h/q13.mochi

let customer: { [key: string]: number }[];
let grouped: { [key: string]: number }[];
let orders: Record<string, any>[];
let per_customer: { [key: string]: number }[];

function test_Q13_groups_customers_by_non_special_order_count(): void {
  if (
    !(_equal(grouped, [
      {
        "c_count": 2,
        "custdist": 1,
      },
      {
        "c_count": 0,
        "custdist": 2,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    { "c_custkey": 1 },
    { "c_custkey": 2 },
    { "c_custkey": 3 },
  ];
  orders = [
    {
      "o_orderkey": 100,
      "o_custkey": 1,
      "o_comment": "fast delivery",
    },
    {
      "o_orderkey": 101,
      "o_custkey": 1,
      "o_comment": "no comment",
    },
    {
      "o_orderkey": 102,
      "o_custkey": 2,
      "o_comment": "special requests only",
    },
  ];
  per_customer = customer.map((c) => ({
    "c_count": _count(
      orders.filter(
        (o) => (((o.o_custkey == c.c_custkey) &&
          (!(_contains(o.o_comment, "special")))) &&
          (!(_contains(o.o_comment, "requests"))))
      ).map((o) => o),
    ),
  }));
  grouped = (() => {
    const _src = per_customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const x of _src) {
      const _key = x.c_count;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...x, x: x });
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: (-g.key) };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "c_count": g.key,
        "custdist": _count(g),
      });
    }
    return _res;
  })();
  console.log(_json(grouped));
  test_Q13_groups_customers_by_non_special_order_count();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
