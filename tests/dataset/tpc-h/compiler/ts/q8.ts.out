// Generated by Mochi TypeScript compiler

let customer: Record<string, number>[];
let end_date: string;
let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let part: Record<string, any>[];
let region: Record<string, any>[];
let result: Record<string, any>[];
let start_date: string;
let supplier: Record<string, number>[];
let target_nation: string;
let target_type: string;

function test_Q8_returns_correct_market_share_for_BRAZIL_in_1995(): void {
  let numerator = 1000 * 0.9;
  let denominator = numerator + (500 * 0.95);
  let share = numerator / denominator;
  if (
    !(_equal(result, [
      {
        "o_year": "1995",
        "mkt_share": share,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  region = [
    {
      "r_regionkey": 0,
      "r_name": "AMERICA",
    },
  ];
  nation = [
    {
      "n_nationkey": 10,
      "n_regionkey": 0,
      "n_name": "BRAZIL",
    },
    {
      "n_nationkey": 20,
      "n_regionkey": 0,
      "n_name": "CANADA",
    },
  ];
  customer = [
    {
      "c_custkey": 1,
      "c_nationkey": 10,
    },
    {
      "c_custkey": 2,
      "c_nationkey": 20,
    },
  ];
  orders = [
    {
      "o_orderkey": 100,
      "o_custkey": 1,
      "o_orderdate": "1995-04-10",
    },
    {
      "o_orderkey": 200,
      "o_custkey": 2,
      "o_orderdate": "1995-07-15",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 100,
      "l_suppkey": 1000,
      "l_partkey": 5000,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
    },
    {
      "l_orderkey": 200,
      "l_suppkey": 2000,
      "l_partkey": 5000,
      "l_extendedprice": 500,
      "l_discount": 0.05,
    },
  ];
  supplier = [
    { "s_suppkey": 1000 },
    { "s_suppkey": 2000 },
  ];
  part = [
    {
      "p_partkey": 5000,
      "p_type": "ECONOMY ANODIZED STEEL",
    },
    {
      "p_partkey": 6000,
      "p_type": "SMALL BRASS",
    },
  ];
  start_date = "1995-01-01";
  end_date = "1996-12-31";
  target_type = "ECONOMY ANODIZED STEEL";
  target_nation = "BRAZIL";
  result = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(_equal(p.p_partkey, l.l_partkey))) continue;
        for (const s of supplier) {
          if (!(_equal(s.s_suppkey, l.l_suppkey))) continue;
          for (const o of orders) {
            if (!(_equal(o.o_orderkey, l.l_orderkey))) continue;
            for (const c of customer) {
              if (!(_equal(c.c_custkey, o.o_custkey))) continue;
              for (const n of nation) {
                if (!(_equal(n.n_nationkey, c.c_nationkey))) continue;
                for (const r of region) {
                  if (!(_equal(r.r_regionkey, n.n_regionkey))) continue;
                  if (
                    !(((_equal(p.p_type, target_type) &&
                      (o.o_orderdate >= start_date)) &&
                      (o.o_orderdate <= end_date)) &&
                      _equal(r.r_name, "AMERICA"))
                  ) continue;
                  const _key = o.o_orderdate.substring(0, (0) + (4));
                  const _ks = JSON.stringify(_key);
                  let _g = _map.get(_ks);
                  if (!_g) {
                    _g = { key: _key, items: [] };
                    _map.set(_ks, _g);
                    _order.push(_ks);
                  }
                  _g.items.push({
                    ...l,
                    ...p,
                    ...s,
                    ...o,
                    ...c,
                    ...n,
                    ...r,
                    l: l,
                    p: p,
                    s: s,
                    o: o,
                    c: c,
                    n: n,
                    r: r,
                  });
                }
              }
            }
          }
        }
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const year = it;
      return { item: it, key: year.key };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const year of _items) {
      _res.push({
        "o_year": year.key,
        "mkt_share": (_sum(year.items.map((x) => ((() => {
          const _t = _equal(x.n.n_name, target_nation);
          if (_equal(_t, true)) {
            return (x.l.l_extendedprice * (1 - x.l.l_discount));
          }
          return 0;
        })()))) /
          _sum(
            year.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
          )),
      });
    }
    return _res;
  })();
  console.log(_fmt(result));
  test_Q8_returns_correct_market_share_for_BRAZIL_in_1995();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _fmt(v: any): string {
  if (Array.isArray(v)) return "[" + v.map(_fmt).join(" ") + "]";
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();

