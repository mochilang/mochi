// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:56:56Z
// Source: tests/dataset/tpc-h/q14.mochi

let end_date: string;
let filtered: Record<string, any>[];
let lineitem: Record<string, any>[];
let part: Record<string, any>[];
let promo_sum: number;
let result: number;
let start_date: string;
let total_sum: number;

function test_Q14_calculates_promo_revenue_percent_in_1995_09(): void {
  let promo = 1000 * 0.9;
  let total = 900 + 800;
  let expected = (100 * promo) / total;
  if (!(result == expected)) throw new Error("expect failed");
}

function main(): void {
  part = [
    {
      "p_partkey": 1,
      "p_type": "PROMO LUXURY",
    },
    {
      "p_partkey": 2,
      "p_type": "STANDARD BRASS",
    },
  ];
  lineitem = [
    {
      "l_partkey": 1,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipdate": "1995-09-05",
    },
    {
      "l_partkey": 2,
      "l_extendedprice": 800,
      "l_discount": 0,
      "l_shipdate": "1995-09-20",
    },
    {
      "l_partkey": 1,
      "l_extendedprice": 500,
      "l_discount": 0.2,
      "l_shipdate": "1995-10-02",
    },
  ];
  start_date = "1995-09-01";
  end_date = "1995-10-01";
  filtered = (() => {
    const _src = lineitem;
    const _res = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(_equal(p.p_partkey, l.l_partkey))) continue;
        if (!((l.l_shipdate >= start_date) && (l.l_shipdate < end_date))) {
          continue;
        }
        _res.push({
          "is_promo": _contains(p.p_type, "PROMO"),
          "revenue": (l.l_extendedprice * (1 - l.l_discount)),
        });
      }
    }
    return _res;
  })();
  promo_sum = _sum(filtered.filter((x) => (x.is_promo)).map((x) => x.revenue));
  total_sum = _sum(filtered.map((x) => x.revenue));
  result = (100 * promo_sum) / total_sum;
  console.log(_json(result));
  test_Q14_calculates_promo_revenue_percent_in_1995_09();
}
function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
