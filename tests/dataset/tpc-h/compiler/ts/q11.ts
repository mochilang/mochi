// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:34:16Z
// Source: tests/dataset/tpc-h/q11.mochi

let filtered: Record<string, any>[];
let grouped: Record<string, any>[];
let nation: Record<string, any>[];
let partsupp: Record<string, any>[];
let result: Record<string, any>[];
let supplier: { [key: string]: number }[];
let target_nation: string;
let threshold: number;
let total: number;

function test_Q11_returns_high_value_partkeys_from_GERMANY(): void {
  if (
    !(_equal(result, [
      {
        "ps_partkey": 1000,
        "value": 2000,
      },
      {
        "ps_partkey": 2000,
        "value": 50,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "GERMANY",
    },
    {
      "n_nationkey": 2,
      "n_name": "FRANCE",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 200,
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 300,
      "s_nationkey": 2,
    },
  ];
  partsupp = [
    {
      "ps_partkey": 1000,
      "ps_suppkey": 100,
      "ps_supplycost": 10,
      "ps_availqty": 100,
    },
    {
      "ps_partkey": 1000,
      "ps_suppkey": 200,
      "ps_supplycost": 20,
      "ps_availqty": 50,
    },
    {
      "ps_partkey": 2000,
      "ps_suppkey": 100,
      "ps_supplycost": 5,
      "ps_availqty": 10,
    },
    {
      "ps_partkey": 3000,
      "ps_suppkey": 300,
      "ps_supplycost": 8,
      "ps_availqty": 500,
    },
  ];
  target_nation = "GERMANY";
  filtered = (() => {
    const _src = partsupp;
    const _res = [];
    for (const ps of _src) {
      for (const s of supplier) {
        if (!(_equal(s.s_suppkey, ps.ps_suppkey))) continue;
        for (const n of nation) {
          if (!(_equal(n.n_nationkey, s.s_nationkey))) continue;
          if (!(_equal(n.n_name, target_nation))) continue;
          _res.push({
            "ps_partkey": ps.ps_partkey,
            "value": (ps.ps_supplycost * ps.ps_availqty),
          });
        }
      }
    }
    return _res;
  })();
  grouped = (() => {
    const _src = filtered;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const x of _src) {
      const _key = x.ps_partkey;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...x, x: x });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ps_partkey": g.key,
        "value": _sum(g.items.map((r) => r.value)),
      });
    }
    return _res;
  })();
  total = _sum(filtered.map((x) => x.value));
  threshold = total * 0.0001;
  result = (() => {
    const _src = grouped;
    var _items = [];
    for (const x of _src) {
      if (!(x.value > threshold)) continue;
      _items.push({ x: x });
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: (-x.value) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const x = _it.x;
      _res.push(x);
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q11_returns_high_value_partkeys_from_GERMANY();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
