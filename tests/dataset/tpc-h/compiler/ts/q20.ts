// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:56:56Z
// Source: tests/dataset/tpc-h/q20.mochi

let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let part: Record<string, any>[];
let partsupp: { [key: string]: number }[];
let prefix: string;
let result: Record<string, any>[];
let shipped_94: Record<string, any>[];
let supplier: Record<string, any>[];
let target_partkeys: number[];

function test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments(): void {
  if (
    !(_equal(result, [
      {
        "s_name": "Maple Supply",
        "s_address": "123 Forest Lane",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "CANADA",
    },
    {
      "n_nationkey": 2,
      "n_name": "GERMANY",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "Maple Supply",
      "s_address": "123 Forest Lane",
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 200,
      "s_name": "Berlin Metals",
      "s_address": "456 Iron Str",
      "s_nationkey": 2,
    },
  ];
  part = [
    {
      "p_partkey": 10,
      "p_name": "forest glade bricks",
    },
    {
      "p_partkey": 20,
      "p_name": "desert sand paper",
    },
  ];
  partsupp = [
    {
      "ps_partkey": 10,
      "ps_suppkey": 100,
      "ps_availqty": 100,
    },
    {
      "ps_partkey": 20,
      "ps_suppkey": 200,
      "ps_availqty": 30,
    },
  ];
  lineitem = [
    {
      "l_partkey": 10,
      "l_suppkey": 100,
      "l_quantity": 100,
      "l_shipdate": "1994-05-15",
    },
    {
      "l_partkey": 10,
      "l_suppkey": 100,
      "l_quantity": 50,
      "l_shipdate": "1995-01-01",
    },
  ];
  prefix = "forest";
  shipped_94 = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const l of _src) {
      if (!((l.l_shipdate >= "1994-01-01") && (l.l_shipdate < "1995-01-01"))) {
        continue;
      }
      const _key = {
        "partkey": l.l_partkey,
        "suppkey": l.l_suppkey,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...l, l: l });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "partkey": g.key.partkey,
        "suppkey": g.key.suppkey,
        "qty": _sum(g.items.map((x) => x.l_quantity)),
      });
    }
    return _res;
  })();
  target_partkeys = (() => {
    const _src = partsupp;
    const _res = [];
    for (const ps of _src) {
      for (const p of part) {
        if (!(_equal(ps.ps_partkey, p.p_partkey))) continue;
        for (const s of shipped_94) {
          if (
            !(_equal(ps.ps_partkey, s.partkey) &&
              _equal(ps.ps_suppkey, s.suppkey))
          ) continue;
          if (
            !((p.p_name.substring(0, (0) + (prefix.length)) == prefix) &&
              (ps.ps_availqty > (0.5 * s.qty)))
          ) continue;
          _res.push(ps.ps_suppkey);
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = supplier;
    var _items = [];
    for (const s of _src) {
      for (const n of nation) {
        if (!(_equal(n.n_nationkey, s.s_nationkey))) continue;
        if (
          !(target_partkeys.includes(s.s_suppkey) && _equal(n.n_name, "CANADA"))
        ) continue;
        _items.push({ s: s, n: n });
      }
    }
    let _pairs = _items.map((it) => {
      const s = it;
      return { item: it, key: s.s_name };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const s = _it.s;
      const n = _it.n;
      _res.push({
        "s_name": s.s_name,
        "s_address": s.s_address,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
