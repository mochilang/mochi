// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:56:56Z
// Source: tests/dataset/tpc-h/q18.mochi

let customer: Record<string, any>[];
let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: { [key: string]: number }[];
let result: Record<string, any>[];
let threshold: number;

function test_Q18_returns_large_volume_customers_with_total_quantity___200(): void {
  if (
    !(_equal(result, [
      {
        "c_name": "Alice",
        "c_custkey": 1,
        "revenue": 1700,
        "c_acctbal": 1000,
        "n_name": "GERMANY",
        "c_address": "123 Market St",
        "c_phone": "123-456",
        "c_comment": "Premium client",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "GERMANY",
    },
  ];
  customer = [
    {
      "c_custkey": 1,
      "c_name": "Alice",
      "c_acctbal": 1000,
      "c_nationkey": 1,
      "c_address": "123 Market St",
      "c_phone": "123-456",
      "c_comment": "Premium client",
    },
    {
      "c_custkey": 2,
      "c_name": "Bob",
      "c_acctbal": 200,
      "c_nationkey": 1,
      "c_address": "456 Side St",
      "c_phone": "987-654",
      "c_comment": "Frequent returns",
    },
  ];
  orders = [
    {
      "o_orderkey": 100,
      "o_custkey": 1,
    },
    {
      "o_orderkey": 200,
      "o_custkey": 1,
    },
    {
      "o_orderkey": 300,
      "o_custkey": 2,
    },
  ];
  lineitem = [
    {
      "l_orderkey": 100,
      "l_quantity": 150,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
    },
    {
      "l_orderkey": 200,
      "l_quantity": 100,
      "l_extendedprice": 800,
      "l_discount": 0,
    },
    {
      "l_orderkey": 300,
      "l_quantity": 30,
      "l_extendedprice": 300,
      "l_discount": 0.05,
    },
  ];
  threshold = 200;
  result = (() => {
    const _src = customer;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const c of _src) {
      for (const o of orders) {
        if (!(_equal(o.o_custkey, c.c_custkey))) continue;
        for (const l of lineitem) {
          if (!(_equal(l.l_orderkey, o.o_orderkey))) continue;
          for (const n of nation) {
            if (!(_equal(n.n_nationkey, c.c_nationkey))) continue;
            const _key = {
              "c_name": c.c_name,
              "c_custkey": c.c_custkey,
              "c_acctbal": c.c_acctbal,
              "c_address": c.c_address,
              "c_phone": c.c_phone,
              "c_comment": c.c_comment,
              "n_name": n.n_name,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
              _order.push(_ks);
            }
            _g.items.push({ ...c, ...o, ...l, ...n, c: c, o: o, l: l, n: n });
          }
        }
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    _groups = _groups.filter(
      (g) => (_sum(g.items.map((x) => x.l.l_quantity)) > threshold)
    );
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key:
          (-_sum(
            g.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
          )),
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "c_name": g.key.c_name,
        "c_custkey": g.key.c_custkey,
        "revenue": _sum(
          g.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
        ),
        "c_acctbal": g.key.c_acctbal,
        "n_name": g.key.n_name,
        "c_address": g.key.c_address,
        "c_phone": g.key.c_phone,
        "c_comment": g.key.c_comment,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q18_returns_large_volume_customers_with_total_quantity___200();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
