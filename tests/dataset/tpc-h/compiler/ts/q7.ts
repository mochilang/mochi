// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:15:24Z
// Source: tests/dataset/tpc-h/q7.mochi

let customer: { [key: string]: number }[];
let end_date: string;
let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let nation1: string;
let nation2: string;
let orders: { [key: string]: number }[];
let result: Record<string, any>[];
let start_date: string;
let supplier: { [key: string]: number }[];

function test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year(): void {
  if (
    !(_equal(result, [
      {
        "supp_nation": "FRANCE",
        "cust_nation": "GERMANY",
        "l_year": "1995",
        "revenue": 900,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "FRANCE",
    },
    {
      "n_nationkey": 2,
      "n_name": "GERMANY",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_nationkey": 1,
    },
  ];
  customer = [
    {
      "c_custkey": 200,
      "c_nationkey": 2,
    },
  ];
  orders = [
    {
      "o_orderkey": 1000,
      "o_custkey": 200,
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1000,
      "l_suppkey": 100,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipdate": "1995-06-15",
    },
    {
      "l_orderkey": 1000,
      "l_suppkey": 100,
      "l_extendedprice": 800,
      "l_discount": 0.05,
      "l_shipdate": "1997-01-01",
    },
  ];
  start_date = "1995-01-01";
  end_date = "1996-12-31";
  nation1 = "FRANCE";
  nation2 = "GERMANY";
  result = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    var _items = [];
    for (const l of _src) {
      for (const o of orders) {
        if (!(o.o_orderkey == l.l_orderkey)) continue;
        for (const c of customer) {
          if (!(c.c_custkey == o.o_custkey)) continue;
          for (const s of supplier) {
            if (!(s.s_suppkey == l.l_suppkey)) continue;
            for (const n1 of nation) {
              if (!(n1.n_nationkey == s.s_nationkey)) continue;
              for (const n2 of nation) {
                if (!(n2.n_nationkey == c.c_nationkey)) continue;
                if (
                  !((((l.l_shipdate >= start_date) &&
                    (l.l_shipdate <= end_date)) &&
                    ((n1.n_name == nation1) && (n2.n_name == nation2))) ||
                    ((n1.n_name == nation2) && (n2.n_name == nation1)))
                ) continue;
                const _key = {
                  "supp_nation": n1.n_name,
                  "cust_nation": n2.n_name,
                  "l_year": l.l_shipdate.substring(0, (0) + (4)),
                };
                const _ks = JSON.stringify(_key);
                let _g = _map.get(_ks);
                if (!_g) {
                  _g = { key: _key, items: [] };
                  _map.set(_ks, _g);
                }
                _g.items.push({
                  ...l,
                  ...o,
                  ...c,
                  ...s,
                  ...n1,
                  ...n2,
                  l: l,
                  o: o,
                  c: c,
                  s: s,
                  n1: n1,
                  n2: n2,
                });
              }
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          g.key.supp_nation,
          g.key.cust_nation,
          g.key.l_year,
        ],
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "supp_nation": g.key.supp_nation,
        "cust_nation": g.key.cust_nation,
        "l_year": g.key.l_year,
        "revenue": _sum(
          g.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
        ),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
