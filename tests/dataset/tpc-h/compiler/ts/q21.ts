// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:34:19Z
// Source: tests/dataset/tpc-h/q21.mochi

let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let result: Record<string, any>[];
let supplier: Record<string, any>[];

function test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays(): void {
  if (
    !(_equal(result, [
      {
        "s_name": "Desert Trade",
        "numwait": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "SAUDI ARABIA",
    },
    {
      "n_nationkey": 2,
      "n_name": "FRANCE",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "Desert Trade",
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 200,
      "s_name": "Euro Goods",
      "s_nationkey": 2,
    },
  ];
  orders = [
    {
      "o_orderkey": 500,
      "o_orderstatus": "F",
    },
    {
      "o_orderkey": 600,
      "o_orderstatus": "O",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 500,
      "l_suppkey": 100,
      "l_receiptdate": "1995-04-15",
      "l_commitdate": "1995-04-10",
    },
    {
      "l_orderkey": 500,
      "l_suppkey": 200,
      "l_receiptdate": "1995-04-12",
      "l_commitdate": "1995-04-12",
    },
    {
      "l_orderkey": 600,
      "l_suppkey": 100,
      "l_receiptdate": "1995-05-01",
      "l_commitdate": "1995-04-25",
    },
  ];
  result = (() => {
    const _src = supplier;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const s of _src) {
      for (const l1 of lineitem) {
        if (!(_equal(s.s_suppkey, l1.l_suppkey))) continue;
        for (const o of orders) {
          if (!(_equal(o.o_orderkey, l1.l_orderkey))) continue;
          for (const n of nation) {
            if (!(_equal(n.n_nationkey, s.s_nationkey))) continue;
            if (
              !(((_equal(o.o_orderstatus, "F") &&
                (l1.l_receiptdate > l1.l_commitdate)) &&
                _equal(n.n_name, "SAUDI ARABIA")) &&
                (!_exists(
                  lineitem.filter(
                    (x) => ((_equal(x.l_orderkey, l1.l_orderkey) &&
                      !_equal(x.l_suppkey, l1.l_suppkey)) &&
                      (x.l_receiptdate > x.l_commitdate))
                  ).map((x) => x),
                )))
            ) continue;
            const _key = s.s_name;
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
              _order.push(_ks);
            }
            _g.items.push({
              ...s,
              ...l1,
              ...o,
              ...n,
              s: s,
              l1: l1,
              o: o,
              n: n,
            });
          }
        }
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          -_count(g),
          g.key,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "s_name": g.key,
        "numwait": _count(g),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
