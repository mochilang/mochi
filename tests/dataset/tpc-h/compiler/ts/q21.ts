// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q21.mochi

let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let result: Record<string, any>[];
let supplier: Record<string, any>[];

function test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays(): void {
  if (
    !(_equal(result, [
      {
        "s_name": "Desert Trade",
        "numwait": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "SAUDI ARABIA",
    },
    {
      "n_nationkey": 2,
      "n_name": "FRANCE",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "Desert Trade",
      "s_nationkey": 1,
    },
    {
      "s_suppkey": 200,
      "s_name": "Euro Goods",
      "s_nationkey": 2,
    },
  ];
  orders = [
    {
      "o_orderkey": 500,
      "o_orderstatus": "F",
    },
    {
      "o_orderkey": 600,
      "o_orderstatus": "O",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 500,
      "l_suppkey": 100,
      "l_receiptdate": "1995-04-15",
      "l_commitdate": "1995-04-10",
    },
    {
      "l_orderkey": 500,
      "l_suppkey": 200,
      "l_receiptdate": "1995-04-12",
      "l_commitdate": "1995-04-12",
    },
    {
      "l_orderkey": 600,
      "l_suppkey": 100,
      "l_receiptdate": "1995-05-01",
      "l_commitdate": "1995-04-25",
    },
  ];
  result = (() => {
    const _src = supplier;
    const _map = new Map<string, any>();
    var _items = [];
    for (const s of _src) {
      for (const l1 of lineitem) {
        if (!(s.s_suppkey == l1.l_suppkey)) continue;
        for (const o of orders) {
          if (!(o.o_orderkey == l1.l_orderkey)) continue;
          for (const n of nation) {
            if (!(n.n_nationkey == s.s_nationkey)) continue;
            if (
              !((((o.o_orderstatus == "F") &&
                (l1.l_receiptdate > l1.l_commitdate)) &&
                (n.n_name == "SAUDI ARABIA")) &&
                (!(lineitem.filter(
                  (x) => (((x.l_orderkey == l1.l_orderkey) &&
                    (x.l_suppkey != l1.l_suppkey)) &&
                    (x.l_receiptdate > x.l_commitdate))
                ).map((x) => x).length > 0)))
            ) continue;
            const _key = s.s_name;
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...s,
              ...l1,
              ...o,
              ...n,
              s: s,
              l1: l1,
              o: o,
              n: n,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          -g.items.length,
          g.key,
        ],
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "s_name": g.key,
        "numwait": g.items.length,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
