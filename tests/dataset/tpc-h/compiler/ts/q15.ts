// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q15.mochi

let end_date: string;
let lineitem: Record<string, any>[];
let max_revenue: any;
let result: Record<string, any>[];
let revenue0: Record<string, any>[];
let revenues: any[];
let start_date: string;
let supplier: Record<string, any>[];

function test_Q15_returns_top_revenue_supplier_s__for_Q1_1996(): void {
  let rev = (1000 * 0.9) + 500;
  if (
    !(_equal(result, [
      {
        "s_suppkey": 100,
        "s_name": "Best Supplier",
        "s_address": "123 Market St",
        "s_phone": "123-456",
        "total_revenue": rev,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "Best Supplier",
      "s_address": "123 Market St",
      "s_phone": "123-456",
    },
    {
      "s_suppkey": 200,
      "s_name": "Second Supplier",
      "s_address": "456 Elm St",
      "s_phone": "987-654",
    },
  ];
  lineitem = [
    {
      "l_suppkey": 100,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipdate": "1996-01-15",
    },
    {
      "l_suppkey": 100,
      "l_extendedprice": 500,
      "l_discount": 0,
      "l_shipdate": "1996-03-20",
    },
    {
      "l_suppkey": 200,
      "l_extendedprice": 800,
      "l_discount": 0.05,
      "l_shipdate": "1995-12-30",
    },
  ];
  start_date = "1996-01-01";
  end_date = "1996-04-01";
  revenue0 = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    var _items = [];
    for (const l of _src) {
      if (!((l.l_shipdate >= start_date) && (l.l_shipdate < end_date))) {
        continue;
      }
      const _key = l.l_suppkey;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...l, l: l });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "supplier_no": g.key,
        "total_revenue": g.items.map(
          (x) => (x.l_extendedprice * (1 - x.l_discount))
        ).reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  revenues = revenue0.map((x) => x.total_revenue);
  max_revenue = Math.max(...revenues);
  result = (() => {
    const _src = supplier;
    var _items = [];
    for (const s of _src) {
      for (const r of revenue0) {
        if (!(s.s_suppkey == r.supplier_no)) continue;
        if (!(r.total_revenue == max_revenue)) continue;
        _items.push({ s: s, r: r });
      }
    }
    let _pairs = _items.map((it) => {
      const { s, r } = it;
      return { item: it, key: s.s_suppkey };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const s = _it.s;
      const r = _it.r;
      _res.push({
        "s_suppkey": s.s_suppkey,
        "s_name": s.s_name,
        "s_address": s.s_address,
        "s_phone": s.s_phone,
        "total_revenue": r.total_revenue,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q15_returns_top_revenue_supplier_s__for_Q1_1996();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
