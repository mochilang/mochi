// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q12.mochi

let lineitem: Record<string, any>[];
let orders: Record<string, any>[];
let result: Record<string, any>[];

function test_Q12_counts_lineitems_by_ship_mode_and_priority(): void {
  if (
    !(_equal(result, [
      {
        "l_shipmode": "MAIL",
        "high_line_count": 1,
        "low_line_count": 0,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  orders = [
    {
      "o_orderkey": 1,
      "o_orderpriority": "1-URGENT",
    },
    {
      "o_orderkey": 2,
      "o_orderpriority": "3-MEDIUM",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1,
      "l_shipmode": "MAIL",
      "l_commitdate": "1994-02-10",
      "l_receiptdate": "1994-02-15",
      "l_shipdate": "1994-02-05",
    },
    {
      "l_orderkey": 2,
      "l_shipmode": "SHIP",
      "l_commitdate": "1994-03-01",
      "l_receiptdate": "1994-02-28",
      "l_shipdate": "1994-02-27",
    },
  ];
  result = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    var _items = [];
    for (const l of _src) {
      for (const o of orders) {
        if (!(o.o_orderkey == l.l_orderkey)) continue;
        if (
          !(((((["MAIL", "SHIP"].includes(l.l_shipmode) ? 1 : 0) &&
            (l.l_commitdate < l.l_receiptdate)) &&
            (l.l_shipdate < l.l_commitdate)) &&
            (l.l_receiptdate >= "1994-01-01")) &&
            (l.l_receiptdate < "1995-01-01"))
        ) continue;
        const _key = l.l_shipmode;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...l, ...o, l: l, o: o });
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "l_shipmode": g.key,
        "high_line_count": g.items.map(
          (x) => ((["1-URGENT", "2-HIGH"].includes(x.o.o_orderpriority) ? 1 : 0)
            ? 1
            : 0)
        ).reduce((a, b) => a + b, 0),
        "low_line_count": g.items.map(
          (x) => ((!(["1-URGENT", "2-HIGH"].includes(x.o.o_orderpriority)
              ? 1
              : 0))
            ? 1
            : 0)
        ).reduce((a, b) => a + b, 0),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q12_counts_lineitems_by_ship_mode_and_priority();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
