// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:15:26Z
// Source: tests/dataset/tpc-h/q16.mochi

let excluded_suppliers: number[];
let part: Record<string, any>[];
let partsupp: { [key: string]: number }[];
let result: Record<string, any>[];
let supplier: Record<string, any>[];

function test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints(): void {
  if (!(_equal(result, []))) throw new Error("expect failed");
}

function main(): void {
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "AlphaSupply",
      "s_address": "123 Hilltop",
      "s_comment": "Reliable and efficient",
    },
    {
      "s_suppkey": 200,
      "s_name": "BetaSupply",
      "s_address": "456 Riverside",
      "s_comment": "Known for Customer Complaints",
    },
  ];
  part = [
    {
      "p_partkey": 1,
      "p_brand": "Brand#12",
      "p_type": "SMALL ANODIZED",
      "p_size": 5,
    },
    {
      "p_partkey": 2,
      "p_brand": "Brand#23",
      "p_type": "MEDIUM POLISHED",
      "p_size": 10,
    },
  ];
  partsupp = [
    {
      "ps_partkey": 1,
      "ps_suppkey": 100,
    },
    {
      "ps_partkey": 2,
      "ps_suppkey": 200,
    },
  ];
  excluded_suppliers = (() => {
    const _src = partsupp;
    const _res = [];
    for (const ps of _src) {
      for (const p of part) {
        if (!(p.p_partkey == ps.ps_partkey)) continue;
        if (
          !(((p.p_brand == "Brand#12") && p.p_type.includes("SMALL")) &&
            (p.p_size == 5))
        ) continue;
        _res.push(ps.ps_suppkey);
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = supplier;
    var _items = [];
    for (const s of _src) {
      if (
        !(((!(excluded_suppliers.includes(s.s_suppkey))) &&
          (!s.s_comment.includes("Customer"))) &&
          (!s.s_comment.includes("Complaints")))
      ) continue;
      _items.push({ s: s });
    }
    let _pairs = _items.map((it) => {
      const { s } = it;
      return { item: it, key: s.s_name };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const s = _it.s;
      _res.push({
        "s_name": s.s_name,
        "s_address": s.s_address,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
