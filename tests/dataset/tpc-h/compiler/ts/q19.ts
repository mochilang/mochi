// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:15:26Z
// Source: tests/dataset/tpc-h/q19.mochi

let lineitem: Record<string, any>[];
let part: Record<string, any>[];
let result: number;
let revenues: any[];

function test_Q19_returns_total_revenue_from_qualifying_branded_parts(): void {
  if (!(result == 2800)) throw new Error("expect failed");
}

function main(): void {
  part = [
    {
      "p_partkey": 1,
      "p_brand": "Brand#12",
      "p_container": "SM BOX",
      "p_size": 3,
    },
    {
      "p_partkey": 2,
      "p_brand": "Brand#23",
      "p_container": "MED BOX",
      "p_size": 5,
    },
    {
      "p_partkey": 3,
      "p_brand": "Brand#34",
      "p_container": "LG BOX",
      "p_size": 15,
    },
  ];
  lineitem = [
    {
      "l_partkey": 1,
      "l_quantity": 5,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipmode": "AIR",
      "l_shipinstruct": "DELIVER IN PERSON",
    },
    {
      "l_partkey": 2,
      "l_quantity": 15,
      "l_extendedprice": 2000,
      "l_discount": 0.05,
      "l_shipmode": "AIR REG",
      "l_shipinstruct": "DELIVER IN PERSON",
    },
    {
      "l_partkey": 3,
      "l_quantity": 35,
      "l_extendedprice": 1500,
      "l_discount": 0,
      "l_shipmode": "AIR",
      "l_shipinstruct": "DELIVER IN PERSON",
    },
  ];
  revenues = (() => {
    const _src = lineitem;
    const _res = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(p.p_partkey == l.l_partkey)) continue;
        if (
          !((((((((p.p_brand == "Brand#12") && ([
            "SM CASE",
            "SM BOX",
            "SM PACK",
            "SM PKG",
          ].includes(p.p_container))) &&
            ((l.l_quantity >= 1) && (l.l_quantity <= 11))) &&
            ((p.p_size >= 1) && (p.p_size <= 5))) ||
            ((((p.p_brand == "Brand#23") && ([
              "MED BAG",
              "MED BOX",
              "MED PKG",
              "MED PACK",
            ].includes(p.p_container))) &&
              ((l.l_quantity >= 10) && (l.l_quantity <= 20))) &&
              ((p.p_size >= 1) && (p.p_size <= 10)))) ||
            ((((p.p_brand == "Brand#34") && ([
              "LG CASE",
              "LG BOX",
              "LG PACK",
              "LG PKG",
            ].includes(p.p_container))) &&
              ((l.l_quantity >= 20) && (l.l_quantity <= 30))) &&
              ((p.p_size >= 1) && (p.p_size <= 15)))) && [
            "AIR",
            "AIR REG",
          ].includes(l.l_shipmode)) &&
            (l.l_shipinstruct == "DELIVER IN PERSON"))
        ) continue;
        _res.push(l.l_extendedprice * (1 - l.l_discount));
      }
    }
    return _res;
  })();
  result = _sum(revenues);
  console.log(_json(result));
  test_Q19_returns_total_revenue_from_qualifying_branded_parts();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
