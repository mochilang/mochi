// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:15:24Z
// Source: tests/dataset/tpc-h/q2.mochi

let costs: any[];
let europe_nations: Record<string, any>[];
let europe_suppliers: { [key: string]: Record<string, any> }[];
let min_cost: any;
let nation: Record<string, any>[];
let part: Record<string, any>[];
let partsupp: Record<string, any>[];
let region: Record<string, any>[];
let result: Record<string, any>[];
let supplier: Record<string, any>[];
let target_parts: Record<string, any>[];
let target_partsupp: Record<string, any>[];

function test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part(): void {
  if (
    !(_equal(result, [
      {
        "s_acctbal": 1000,
        "s_name": "BestSupplier",
        "n_name": "FRANCE",
        "p_partkey": 1000,
        "p_mfgr": "M1",
        "s_address": "123 Rue",
        "s_phone": "123",
        "s_comment": "Fast and reliable",
        "ps_supplycost": 10,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  region = [
    {
      "r_regionkey": 1,
      "r_name": "EUROPE",
    },
    {
      "r_regionkey": 2,
      "r_name": "ASIA",
    },
  ];
  nation = [
    {
      "n_nationkey": 10,
      "n_regionkey": 1,
      "n_name": "FRANCE",
    },
    {
      "n_nationkey": 20,
      "n_regionkey": 2,
      "n_name": "CHINA",
    },
  ];
  supplier = [
    {
      "s_suppkey": 100,
      "s_name": "BestSupplier",
      "s_address": "123 Rue",
      "s_nationkey": 10,
      "s_phone": "123",
      "s_acctbal": 1000,
      "s_comment": "Fast and reliable",
    },
    {
      "s_suppkey": 200,
      "s_name": "AltSupplier",
      "s_address": "456 Way",
      "s_nationkey": 20,
      "s_phone": "456",
      "s_acctbal": 500,
      "s_comment": "Slow",
    },
  ];
  part = [
    {
      "p_partkey": 1000,
      "p_type": "LARGE BRASS",
      "p_size": 15,
      "p_mfgr": "M1",
    },
    {
      "p_partkey": 2000,
      "p_type": "SMALL COPPER",
      "p_size": 15,
      "p_mfgr": "M2",
    },
  ];
  partsupp = [
    {
      "ps_partkey": 1000,
      "ps_suppkey": 100,
      "ps_supplycost": 10,
    },
    {
      "ps_partkey": 1000,
      "ps_suppkey": 200,
      "ps_supplycost": 15,
    },
  ];
  europe_nations = (() => {
    const _src = region;
    const _res = [];
    for (const r of _src) {
      for (const n of nation) {
        if (!(n.n_regionkey == r.r_regionkey)) continue;
        if (!(r.r_name == "EUROPE")) continue;
        _res.push(n);
      }
    }
    return _res;
  })();
  europe_suppliers = (() => {
    const _src = supplier;
    const _join = europe_nations;
    const _pairs = _hashJoin(
      _src,
      _join,
      (s) => s.s_nationkey,
      (n) => n.n_nationkey,
    );
    const _res = [];
    for (const _p of _pairs) {
      const s = _p[0];
      const n = _p[1];
      _res.push({
        "s": s,
        "n": n,
      });
    }
    return _res;
  })();
  target_parts = part.filter(
    (p) => ((p.p_size == 15) && (p.p_type == "LARGE BRASS"))
  ).map((p) => p);
  target_partsupp = (() => {
    const _src = partsupp;
    const _res = [];
    for (const ps of _src) {
      for (const p of target_parts) {
        if (!(ps.ps_partkey == p.p_partkey)) continue;
        for (const s of europe_suppliers) {
          if (!(ps.ps_suppkey == s.s.s_suppkey)) continue;
          _res.push({
            "s_acctbal": s.s.s_acctbal,
            "s_name": s.s.s_name,
            "n_name": s.n.n_name,
            "p_partkey": p.p_partkey,
            "p_mfgr": p.p_mfgr,
            "s_address": s.s.s_address,
            "s_phone": s.s.s_phone,
            "s_comment": s.s.s_comment,
            "ps_supplycost": ps.ps_supplycost,
          });
        }
      }
    }
    return _res;
  })();
  costs = target_partsupp.map((x) => x.ps_supplycost);
  min_cost = _min(costs);
  result = (() => {
    const _src = target_partsupp;
    var _items = [];
    for (const x of _src) {
      if (!(x.ps_supplycost == min_cost)) continue;
      _items.push({ x: x });
    }
    let _pairs = _items.map((it) => {
      const { x } = it;
      return { item: it, key: (-x.s_acctbal) };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const x = _it.x;
      _res.push(x);
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _hashJoin(
  left: any[],
  right: any[],
  lk: (v: any) => any,
  rk: (v: any) => any,
): any[] {
  const idx = new Map<any, any[]>();
  for (const r of right) {
    const k = rk(r);
    const arr = idx.get(k);
    if (arr) arr.push(r);
    else idx.set(k, [r]);
  }
  const out: any[] = [];
  for (const l of left) {
    const arr = idx.get(lk(l));
    if (!arr) continue;
    for (const r of arr) out.push([l, r]);
  }
  return out;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
