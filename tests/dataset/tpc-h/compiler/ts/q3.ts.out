// Generated by Mochi compiler v0.10.24 on 2020-01-02T15:04:05Z

let building_customers: Record<string, any>[];
let customer: Record<string, any>[];
let cutoff: string;
let lineitem: Record<string, any>[];
let order_line_join: Record<string, any>[];
let orders: Record<string, any>[];
let segment: string;
let valid_lineitems: Record<string, any>[];
let valid_orders: Record<string, any>[];

function test_Q3_returns_revenue_per_order_with_correct_priority(): void {
  if (
    !(_equal(order_line_join, [
      {
        "l_orderkey": 100,
        "revenue": ((1000 * 0.95) + 500),
        "o_orderdate": "1995-03-14",
        "o_shippriority": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_custkey": 1,
      "c_mktsegment": "BUILDING",
    },
    {
      "c_custkey": 2,
      "c_mktsegment": "AUTOMOBILE",
    },
  ];
  orders = [
    {
      "o_orderkey": 100,
      "o_custkey": 1,
      "o_orderdate": "1995-03-14",
      "o_shippriority": 1,
    },
    {
      "o_orderkey": 200,
      "o_custkey": 2,
      "o_orderdate": "1995-03-10",
      "o_shippriority": 2,
    },
  ];
  lineitem = [
    {
      "l_orderkey": 100,
      "l_extendedprice": 1000,
      "l_discount": 0.05,
      "l_shipdate": "1995-03-16",
    },
    {
      "l_orderkey": 100,
      "l_extendedprice": 500,
      "l_discount": 0,
      "l_shipdate": "1995-03-20",
    },
    {
      "l_orderkey": 200,
      "l_extendedprice": 1000,
      "l_discount": 0.1,
      "l_shipdate": "1995-03-14",
    },
  ];
  cutoff = "1995-03-15";
  segment = "BUILDING";
  building_customers = customer.filter((c) => (_equal(c.c_mktsegment, segment)))
    .map((c) => c);
  valid_orders = (() => {
    const _src = orders;
    const _res = [];
    for (const o of _src) {
      for (const c of building_customers) {
        if (!(_equal(o.o_custkey, c.c_custkey))) continue;
        if (!(o.o_orderdate < cutoff)) continue;
        _res.push(o);
      }
    }
    return _res;
  })();
  valid_lineitems = lineitem.filter((l) => (l.l_shipdate > cutoff)).map((l) =>
    l
  );
  order_line_join = (() => {
    const _src = valid_orders;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const o of _src) {
      for (const l of valid_lineitems) {
        if (!(_equal(l.l_orderkey, o.o_orderkey))) continue;
        const _key = {
          "o_orderkey": o.o_orderkey,
          "o_orderdate": o.o_orderdate,
          "o_shippriority": o.o_shippriority,
        };
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
          _order.push(_ks);
        }
        _g.items.push({ ...o, ...l, o: o, l: l });
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          -_sum(
            g.items.map((r) => (r.l.l_extendedprice * (1 - r.l.l_discount))),
          ),
          g.key.o_orderdate,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "l_orderkey": g.key.o_orderkey,
        "revenue": _sum(
          g.items.map((r) => (r.l.l_extendedprice * (1 - r.l.l_discount))),
        ),
        "o_orderdate": g.key.o_orderdate,
        "o_shippriority": g.key.o_shippriority,
      });
    }
    return _res;
  })();
  console.log(_json(order_line_join));
  test_Q3_returns_revenue_per_order_with_correct_priority();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
