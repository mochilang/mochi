// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:56:56Z
// Source: tests/dataset/tpc-h/q22.mochi

let avg_balance: number;
let customer: Record<string, any>[];
let eligible_customers: { [key: string]: string }[];
let groups: any[];
let orders: { [key: string]: number }[];
let result: any[];
var tmp: any[];
let valid_codes: string[];

function test_Q22_returns_wealthy_inactive_customers_by_phone_prefix(): void {
  if (
    !(_equal(result, [
      {
        "cntrycode": "13",
        "numcust": 1,
        "totacctbal": 600,
      },
      {
        "cntrycode": "30",
        "numcust": 1,
        "totacctbal": 700,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_custkey": 1,
      "c_phone": "13-123-4567",
      "c_acctbal": 600,
    },
    {
      "c_custkey": 2,
      "c_phone": "31-456-7890",
      "c_acctbal": 100,
    },
    {
      "c_custkey": 3,
      "c_phone": "30-000-0000",
      "c_acctbal": 700,
    },
  ];
  orders = [
    {
      "o_orderkey": 10,
      "o_custkey": 2,
    },
  ];
  valid_codes = [
    "13",
    "31",
    "23",
    "29",
    "30",
    "18",
    "17",
  ];
  avg_balance = _avg(
    customer.filter(
      (c) => ((c.c_acctbal > 0) &&
        valid_codes.includes(c.c_phone.substring(0, (0) + (2))))
    ).map((c) => c.c_acctbal),
  );
  eligible_customers = customer.filter(
    (c) => ((valid_codes.includes(c.c_phone.substring(0, (0) + (2))) &&
      (c.c_acctbal > avg_balance)) &&
      (!_exists(
        orders.filter((o) => (_equal(o.o_custkey, c.c_custkey))).map((o) => o),
      )))
  ).map((c) => ({
    "cntrycode": c.c_phone.substring(0, (0) + (2)),
    "c_acctbal": c.c_acctbal,
  }));
  groups = (() => {
    const _src = eligible_customers;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const c of _src) {
      const _key = c.cntrycode;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...c, c: c });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push(g);
    }
    return _res;
  })();
  tmp = [];
  for (const g of groups) {
    let total = _sum(g.items.map((x) => x.c_acctbal));
    let row = {
      "cntrycode": g.key,
      "numcust": _count(g),
      "totacctbal": total,
    };
    tmp = _append(tmp, row);
  }
  result = (() => {
    const _src = tmp;
    var _items = [];
    for (const r of _src) {
      _items.push({ r: r });
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r.cntrycode };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const r = _it.r;
      _res.push(r);
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q22_returns_wealthy_inactive_customers_by_phone_prefix();
}
function _append<T>(lst: T[] | null, v: T): T[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
