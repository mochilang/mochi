// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q22.mochi

let avg_balance: number;
let customer: Record<string, any>[];
let eligible_customers: { [key: string]: string }[];
let groups: any[];
let orders: { [key: string]: number }[];
let result: any[];
var tmp: any[];
let valid_codes: string[];

function test_Q22_returns_wealthy_inactive_customers_by_phone_prefix(): void {
  if (
    !(_equal(result, [
      {
        "cntrycode": "13",
        "numcust": 1,
        "totacctbal": 600,
      },
      {
        "cntrycode": "30",
        "numcust": 1,
        "totacctbal": 700,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_custkey": 1,
      "c_phone": "13-123-4567",
      "c_acctbal": 600,
    },
    {
      "c_custkey": 2,
      "c_phone": "31-456-7890",
      "c_acctbal": 100,
    },
    {
      "c_custkey": 3,
      "c_phone": "30-000-0000",
      "c_acctbal": 700,
    },
  ];
  orders = [
    {
      "o_orderkey": 10,
      "o_custkey": 2,
    },
  ];
  valid_codes = [
    "13",
    "31",
    "23",
    "29",
    "30",
    "18",
    "17",
  ];
  avg_balance =
    customer.filter(
      (c) => ((c.c_acctbal > 0) &&
        (valid_codes.includes(c.c_phone.substring(0, (0) + (2))) ? 1 : 0))
    ).map((c) => c.c_acctbal).reduce((a, b) => a + Number(b), 0) /
    customer.filter(
      (c) => ((c.c_acctbal > 0) &&
        (valid_codes.includes(c.c_phone.substring(0, (0) + (2))) ? 1 : 0))
    ).map((c) => c.c_acctbal).length;
  eligible_customers = customer.filter(
    (c) => (((valid_codes.includes(c.c_phone.substring(0, (0) + (2)))
      ? 1
      : 0) && (c.c_acctbal > avg_balance)) &&
      (!(orders.filter((o) => (o.o_custkey == c.c_custkey)).map((o) => o)
        .length > 0)))
  ).map((c) => ({
    "cntrycode": c.c_phone.substring(0, (0) + (2)),
    "c_acctbal": c.c_acctbal,
  }));
  groups = (() => {
    const _src = eligible_customers;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      const _key = c.cntrycode;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...c, c: c });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push(g);
    }
    return _res;
  })();
  tmp = [];
  for (const g of groups) {
    let total = g.items.map((x) => x.c_acctbal).reduce(
      (a, b) => a + Number(b),
      0,
    );
    let row = {
      "cntrycode": g.key,
      "numcust": g.items.length,
      "totacctbal": total,
    };
    tmp = [...tmp, row];
  }
  result = (() => {
    const _src = tmp;
    var _items = [];
    for (const r of _src) {
      _items.push({ r: r });
    }
    let _pairs = _items.map((it) => {
      const { r } = it;
      return { item: it, key: r.cntrycode };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const r = _it.r;
      _res.push(r);
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q22_returns_wealthy_inactive_customers_by_phone_prefix();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
