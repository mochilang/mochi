// Generated by Mochi compiler v0.10.24 on 2020-01-02T15:04:05Z

let date_filtered_orders: Record<string, any>[];
let end_date: string;
let late_orders: Record<string, any>[];
let lineitem: Record<string, any>[];
let orders: Record<string, any>[];
let result: Record<string, any>[];
let start_date: string;

function test_Q4_returns_count_of_orders_with_late_lineitems_in_range(): void {
  if (
    !(_equal(result, [
      {
        "o_orderpriority": "1-URGENT",
        "order_count": 1,
      },
      {
        "o_orderpriority": "2-HIGH",
        "order_count": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  orders = [
    {
      "o_orderkey": 1,
      "o_orderdate": "1993-07-01",
      "o_orderpriority": "1-URGENT",
    },
    {
      "o_orderkey": 2,
      "o_orderdate": "1993-07-15",
      "o_orderpriority": "2-HIGH",
    },
    {
      "o_orderkey": 3,
      "o_orderdate": "1993-08-01",
      "o_orderpriority": "3-NORMAL",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1,
      "l_commitdate": "1993-07-10",
      "l_receiptdate": "1993-07-12",
    },
    {
      "l_orderkey": 1,
      "l_commitdate": "1993-07-12",
      "l_receiptdate": "1993-07-10",
    },
    {
      "l_orderkey": 2,
      "l_commitdate": "1993-07-20",
      "l_receiptdate": "1993-07-25",
    },
    {
      "l_orderkey": 3,
      "l_commitdate": "1993-08-02",
      "l_receiptdate": "1993-08-01",
    },
    {
      "l_orderkey": 3,
      "l_commitdate": "1993-08-05",
      "l_receiptdate": "1993-08-10",
    },
  ];
  start_date = "1993-07-01";
  end_date = "1993-08-01";
  date_filtered_orders = orders.filter(
    (o) => ((o.o_orderdate >= start_date) && (o.o_orderdate < end_date))
  ).map((o) => o);
  late_orders = date_filtered_orders.filter(
    (o) => (_exists(
      lineitem.filter(
        (l) => (_equal(l.l_orderkey, o.o_orderkey) &&
          (l.l_commitdate < l.l_receiptdate))
      ).map((l) => l),
    ))
  ).map((o) => o);
  result = (() => {
    const _src = late_orders;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const o of _src) {
      const _key = o.o_orderpriority;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...o, o: o });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "o_orderpriority": g.key,
        "order_count": _count(g),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q4_returns_count_of_orders_with_late_lineitems_in_range();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
