// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:36:39Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q1.mochi

let lineitem: Record<string, any>[];
let result: Record<string, any>[];

function test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus(): void {
  if (
    !(_equal(result, [
      {
        "returnflag": "N",
        "linestatus": "O",
        "sum_qty": 53,
        "sum_base_price": 3000,
        "sum_disc_price": (950 + 1800),
        "sum_charge": ((950 * 1.07) + (1800 * 1.05)),
        "avg_qty": 26.5,
        "avg_price": 1500,
        "avg_disc": 0.07500000000000001,
        "count_order": 2,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  lineitem = [
    {
      "l_quantity": 17,
      "l_extendedprice": 1000,
      "l_discount": 0.05,
      "l_tax": 0.07,
      "l_returnflag": "N",
      "l_linestatus": "O",
      "l_shipdate": "1998-08-01",
    },
    {
      "l_quantity": 36,
      "l_extendedprice": 2000,
      "l_discount": 0.1,
      "l_tax": 0.05,
      "l_returnflag": "N",
      "l_linestatus": "O",
      "l_shipdate": "1998-09-01",
    },
    {
      "l_quantity": 25,
      "l_extendedprice": 1500,
      "l_discount": 0,
      "l_tax": 0.08,
      "l_returnflag": "R",
      "l_linestatus": "F",
      "l_shipdate": "1998-09-03",
    },
  ];
  result = (() => {
    const _src = lineitem;
    const _map = new Map<string, any>();
    var _items = [];
    for (const row of _src) {
      if (!(row.l_shipdate <= "1998-09-02")) continue;
      const _key = {
        "returnflag": row.l_returnflag,
        "linestatus": row.l_linestatus,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...row, row: row });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "returnflag": g.key.returnflag,
        "linestatus": g.key.linestatus,
        "sum_qty": g.items.map((x) => x.l_quantity).reduce(
          (a, b) => a + Number(b),
          0,
        ),
        "sum_base_price": g.items.map((x) => x.l_extendedprice).reduce(
          (a, b) => a + Number(b),
          0,
        ),
        "sum_disc_price": g.items.map(
          (x) => (x.l_extendedprice * (1 - x.l_discount))
        ).reduce((a, b) => a + Number(b), 0),
        "sum_charge": g.items.map(
          (x) => ((x.l_extendedprice * (1 - x.l_discount)) * (1 + x.l_tax))
        ).reduce((a, b) => a + Number(b), 0),
        "avg_qty": (g.items.map((x) =>
          x.l_quantity
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.l_quantity
        ).length),
        "avg_price": (g.items.map((x) =>
          x.l_extendedprice
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.l_extendedprice
        ).length),
        "avg_disc": (g.items.map((x) =>
          x.l_discount
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.l_discount
        ).length),
        "count_order": g.items.length,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
