// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:36:40Z
// Source: /workspace/mochi/tests/dataset/tpc-h/q17.mochi

let brand: string;
let container: string;
let filtered: any[];
let lineitem: Record<string, any>[];
let part: Record<string, any>[];
let result: number;

function test_Q17_returns_average_yearly_revenue_for_small_quantity_orders(): void {
  let expected = 100 / 7;
  if (!(result == expected)) throw new Error("expect failed");
}

function main(): void {
  part = [
    {
      "p_partkey": 1,
      "p_brand": "Brand#23",
      "p_container": "MED BOX",
    },
    {
      "p_partkey": 2,
      "p_brand": "Brand#77",
      "p_container": "LG JAR",
    },
  ];
  lineitem = [
    {
      "l_partkey": 1,
      "l_quantity": 1,
      "l_extendedprice": 100,
    },
    {
      "l_partkey": 1,
      "l_quantity": 10,
      "l_extendedprice": 1000,
    },
    {
      "l_partkey": 1,
      "l_quantity": 20,
      "l_extendedprice": 2000,
    },
    {
      "l_partkey": 2,
      "l_quantity": 5,
      "l_extendedprice": 500,
    },
  ];
  brand = "Brand#23";
  container = "MED BOX";
  filtered = (() => {
    const _src = lineitem;
    const _res = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(p.p_partkey == l.l_partkey)) continue;
        if (
          !(((p.p_brand == brand) && (p.p_container == container)) &&
            (l.l_quantity <
              (0.2 *
                (lineitem.filter((x) => (x.l_partkey == p.p_partkey)).map((x) =>
                  x.l_quantity
                ).reduce((a, b) => a + Number(b), 0) /
                  lineitem.filter((x) => (x.l_partkey == p.p_partkey)).map(
                    (x) => x.l_quantity
                  ).length))))
        ) continue;
        _res.push(l.l_extendedprice);
      }
    }
    return _res;
  })();
  result = filtered.reduce((a, b) => a + Number(b), 0) / 7;
  console.log(_json(result));
  test_Q17_returns_average_yearly_revenue_for_small_quantity_orders();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
