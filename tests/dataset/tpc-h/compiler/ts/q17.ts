// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:56:56Z
// Source: tests/dataset/tpc-h/q17.mochi

let brand: string;
let container: string;
let filtered: any[];
let lineitem: Record<string, any>[];
let part: Record<string, any>[];
let result: number;

function test_Q17_returns_average_yearly_revenue_for_small_quantity_orders(): void {
  let expected = 100 / 7;
  if (!(result == expected)) throw new Error("expect failed");
}

function main(): void {
  part = [
    {
      "p_partkey": 1,
      "p_brand": "Brand#23",
      "p_container": "MED BOX",
    },
    {
      "p_partkey": 2,
      "p_brand": "Brand#77",
      "p_container": "LG JAR",
    },
  ];
  lineitem = [
    {
      "l_partkey": 1,
      "l_quantity": 1,
      "l_extendedprice": 100,
    },
    {
      "l_partkey": 1,
      "l_quantity": 10,
      "l_extendedprice": 1000,
    },
    {
      "l_partkey": 1,
      "l_quantity": 20,
      "l_extendedprice": 2000,
    },
    {
      "l_partkey": 2,
      "l_quantity": 5,
      "l_extendedprice": 500,
    },
  ];
  brand = "Brand#23";
  container = "MED BOX";
  filtered = (() => {
    const _src = lineitem;
    const _res = [];
    for (const l of _src) {
      for (const p of part) {
        if (!(_equal(p.p_partkey, l.l_partkey))) continue;
        if (
          !(((_equal(p.p_brand, brand)) &&
            (_equal(p.p_container, container))) &&
            (l.l_quantity <
              (0.2 *
                _avg(
                  lineitem.filter((x) => (_equal(x.l_partkey, p.p_partkey)))
                    .map((x) => x.l_quantity),
                ))))
        ) continue;
        _res.push(l.l_extendedprice);
      }
    }
    return _res;
  })();
  result = _sum(filtered) / 7;
  console.log(_json(result));
  test_Q17_returns_average_yearly_revenue_for_small_quantity_orders();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
