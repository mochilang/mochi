// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:38:41Z
data class Lineitem(var l_partkey: Int, var l_quantity: Int, var l_extendedprice: Double, var l_discount: Double, var l_shipmode: String, var l_shipinstruct: String)

data class Part(var p_partkey: Int, var p_brand: String, var p_container: String, var p_size: Int)

data class Row0(var l: Lineitem, var p: Part)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q19.mochi

val part = mutableListOf(Part(p_partkey = 1, p_brand = "Brand#12", p_container = "SM BOX", p_size = 3), Part(p_partkey = 2, p_brand = "Brand#23", p_container = "MED BOX", p_size = 5), Part(p_partkey = 3, p_brand = "Brand#34", p_container = "LG BOX", p_size = 15))

val lineitem = mutableListOf(Lineitem(l_partkey = 1, l_quantity = 5, l_extendedprice = 1000.0, l_discount = 0.1, l_shipmode = "AIR", l_shipinstruct = "DELIVER IN PERSON"), Lineitem(l_partkey = 2, l_quantity = 15, l_extendedprice = 2000.0, l_discount = 0.05, l_shipmode = "AIR REG", l_shipinstruct = "DELIVER IN PERSON"), Lineitem(l_partkey = 3, l_quantity = 35, l_extendedprice = 1500.0, l_discount = 0.0, l_shipmode = "AIR", l_shipinstruct = "DELIVER IN PERSON"))

val revenues = run {
    val __res = mutableListOf<Double>()
    for (l in lineitem) {
        for (p in part) {
            if (p.p_partkey == l.l_partkey) {
                if ((((p.p_brand == "Brand#12") && (p.p_container in mutableListOf("SM CASE", "SM BOX", "SM PACK", "SM PKG")) && (l.l_quantity >= 1 && l.l_quantity <= 11) && (p.p_size >= 1 && p.p_size <= 5)) || ((p.p_brand == "Brand#23") && (p.p_container in mutableListOf("MED BAG", "MED BOX", "MED PKG", "MED PACK")) && (l.l_quantity >= 10 && l.l_quantity <= 20) && (p.p_size >= 1 && p.p_size <= 10)) || ((p.p_brand == "Brand#34") && (p.p_container in mutableListOf("LG CASE", "LG BOX", "LG PACK", "LG PKG")) && (l.l_quantity >= 20 && l.l_quantity <= 30) && (p.p_size >= 1 && p.p_size <= 15))) && l.l_shipmode in mutableListOf("AIR", "AIR REG") && l.l_shipinstruct == "DELIVER IN PERSON") {
                    __res.add(l.l_extendedprice * ((1).toDouble() - l.l_discount))
                }
            }
        }
    }
    __res
}

val result = sum(revenues)

fun main() {
    json(result)
}
