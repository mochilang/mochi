// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:45Z
data class Lineitem(var l_partkey: Int, var l_quantity: Int, var l_extendedprice: Double)

data class Part(var p_partkey: Int, var p_brand: String, var p_container: String)

data class Row0(var l: Lineitem, var p: Part)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q17.mochi

val part = mutableListOf(Part(p_partkey = 1, p_brand = "Brand#23", p_container = "MED BOX"), Part(p_partkey = 2, p_brand = "Brand#77", p_container = "LG JAR"))

val lineitem = mutableListOf(Lineitem(l_partkey = 1, l_quantity = 1, l_extendedprice = 100.0), Lineitem(l_partkey = 1, l_quantity = 10, l_extendedprice = 1000.0), Lineitem(l_partkey = 1, l_quantity = 20, l_extendedprice = 2000.0), Lineitem(l_partkey = 2, l_quantity = 5, l_extendedprice = 500.0))

val brand = "Brand#23"

val container = "MED BOX"

val filtered = run {
    val __res = mutableListOf<Double>()
    for (l in lineitem) {
        for (p in part) {
            if (p.p_partkey == l.l_partkey) {
                if (((p.p_brand == brand) && (p.p_container == container) && (l.l_quantity < (0.2 * run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in lineitem) {
        if (x.l_partkey == p.p_partkey) {
            __res.add(x.l_quantity)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r })))) {
                    __res.add(l.l_extendedprice)
                }
            }
        }
    }
    __res
}

val result = sum(filtered) / 7.0

fun main() {
    json(result)
}
