// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:00:13Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q1.mochi

data class Lineitem(var l_quantity: Int, var l_extendedprice: Double, var l_discount: Double, var l_tax: Double, var l_returnflag: String, var l_linestatus: String, var l_shipdate: String)

val lineitem = mutableListOf(Lineitem(l_quantity = 17, l_extendedprice = 1000.0, l_discount = 0.05, l_tax = 0.07, l_returnflag = "N", l_linestatus = "O", l_shipdate = "1998-08-01"), Lineitem(l_quantity = 36, l_extendedprice = 2000.0, l_discount = 0.1, l_tax = 0.05, l_returnflag = "N", l_linestatus = "O", l_shipdate = "1998-09-01"), Lineitem(l_quantity = 25, l_extendedprice = 1500.0, l_discount = 0.0, l_tax = 0.08, l_returnflag = "R", l_linestatus = "F", l_shipdate = "1998-09-03"))

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Lineitem>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (row in lineitem) {
        if (row.l_shipdate <= "1998-09-02") {
            val __k = (mutableMapOf("returnflag" to row.l_returnflag, "linestatus" to row.l_linestatus) as MutableMap<String, Any?>)
            var __g = __groups[__k]
            if (__g == null) {
                __g = Group(__k, mutableListOf<Lineitem>())
                __groups[__k] = __g
                __order.add(__k)
            }
            __g.add(row)
        }
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("returnflag" to (g.key as MutableMap<String, Any?>)["returnflag"], "linestatus" to (g.key as MutableMap<String, Any?>)["linestatus"], "sum_qty" to sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.l_quantity)
    }
    __res
}), "sum_base_price" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_extendedprice)
    }
    __res
}), "sum_disc_price" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_extendedprice * (1 - x.l_discount))
    }
    __res
}), "sum_charge" to sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax))
    }
    __res
}), "avg_qty" to run { val r = run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.l_quantity)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "avg_price" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_extendedprice)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "avg_disc" to run { val r = run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_discount)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }, "count_order" to g.size))
    }
    __res
}

fun main() {
    json(result)
}
