// Generated by Mochi compiler v0.10.25 on 2025-07-13T15:41:12Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toInt(v: Any?): Int = when (v) {
    is Int -> v
    is Double -> v.toInt()
    is String -> v.toInt()
    is Boolean -> if (v) 1 else 0
    else -> 0
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from .

data class Nation(var n_nationkey: Int, var n_name: String)

data class Partsupp(var ps_partkey: Int, var ps_suppkey: Int, var ps_supplycost: Double, var ps_availqty: Int)

data class Supplier(var s_suppkey: Int, var s_nationkey: Int)

val nation = mutableListOf(Nation(n_nationkey = 1, n_name = "GERMANY"), Nation(n_nationkey = 2, n_name = "FRANCE"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_nationkey = 1), Supplier(s_suppkey = 200, s_nationkey = 1), Supplier(s_suppkey = 300, s_nationkey = 2))

val partsupp = mutableListOf(Partsupp(ps_partkey = 1000, ps_suppkey = 100, ps_supplycost = 10.0, ps_availqty = 100), Partsupp(ps_partkey = 1000, ps_suppkey = 200, ps_supplycost = 20.0, ps_availqty = 50), Partsupp(ps_partkey = 2000, ps_suppkey = 100, ps_supplycost = 5.0, ps_availqty = 10), Partsupp(ps_partkey = 3000, ps_suppkey = 300, ps_supplycost = 8.0, ps_availqty = 500))

val target_nation = "GERMANY"

val filtered = run {
    val __res = mutableListOf<Any?>()
    for (ps in partsupp) {
        for (s in supplier) {
            if (s.s_suppkey == ps.ps_suppkey) {
                for (n in nation) {
                    if (n.n_nationkey == s.s_nationkey) {
                        if (n.n_name == target_nation) {
                            __res.add(mutableMapOf("ps_partkey" to ps.ps_partkey, "value" to toDouble(ps.ps_supplycost) * ps.ps_availqty))
                        }
                    }
                }
            }
        }
    }
    __res
}

val grouped = run {
    val __groups = mutableMapOf<Any?, Group<Any?, MutableMap<String, Any?>>>()
    val __order = mutableListOf<Any?>()
    for (x in filtered) {
        val __k = (x as MutableMap<String, Any?>)["ps_partkey"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Any?>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("ps_partkey" to g.key, "value" to sum(run {
    val __res = mutableListOf<Any?>()
    for (r in g) {
        __res.add((r as MutableMap<String, Any?>)["value"])
    }
    __res
})))
    }
    __res
}

val total = sum(run {
    val __res = mutableListOf<Any?>()
    for (x in filtered) {
        __res.add((x as MutableMap<String, Any?>)["value"])
    }
    __res
})

val threshold = toDouble(total) * toDouble(0.0001)

val result = run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in grouped) {
        if (toDouble((x as MutableMap<String, Any?>)["value"]) > toDouble(threshold)) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.sortedByDescending { (it as MutableMap<String, Any?>)["value"] as Comparable<Any> }

fun main() {
    json(result)
}
