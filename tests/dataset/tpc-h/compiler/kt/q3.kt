// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:05:56Z
data class Customer(var c_custkey: Int, var c_mktsegment: String)

data class Lineitem(var l_orderkey: Int, var l_extendedprice: Double, var l_discount: Double, var l_shipdate: String)

data class Order(var o_orderkey: Int, var o_custkey: Int, var o_orderdate: String, var o_shippriority: Int)

data class Row0(var o: Order, var c: Customer)

data class Row1(var o: Order, var l: Lineitem)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q3.mochi

val customer = mutableListOf(Customer(c_custkey = 1, c_mktsegment = "BUILDING"), Customer(c_custkey = 2, c_mktsegment = "AUTOMOBILE"))

val orders = mutableListOf(Order(o_orderkey = 100, o_custkey = 1, o_orderdate = "1995-03-14", o_shippriority = 1), Order(o_orderkey = 200, o_custkey = 2, o_orderdate = "1995-03-10", o_shippriority = 2))

val lineitem = mutableListOf(Lineitem(l_orderkey = 100, l_extendedprice = 1000.0, l_discount = 0.05, l_shipdate = "1995-03-16"), Lineitem(l_orderkey = 100, l_extendedprice = 500.0, l_discount = 0.0, l_shipdate = "1995-03-20"), Lineitem(l_orderkey = 200, l_extendedprice = 1000.0, l_discount = 0.1, l_shipdate = "1995-03-14"))

val cutoff = "1995-03-15"

val segment = "BUILDING"

val building_customers = run {
    val __res = mutableListOf<Customer>()
    for (c in customer) {
        if (c.c_mktsegment == segment) {
            __res.add(c)
        }
    }
    __res
}

val valid_orders = run {
    val __res = mutableListOf<Order>()
    for (o in orders) {
        for (c in building_customers) {
            if (o.o_custkey == c.c_custkey) {
                if (o.o_orderdate < cutoff) {
                    __res.add(o)
                }
            }
        }
    }
    __res
}

val valid_lineitems = run {
    val __res = mutableListOf<Lineitem>()
    for (l in lineitem) {
        if (l.l_shipdate > cutoff) {
            __res.add(l)
        }
    }
    __res
}

val order_line_join = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Row1>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (o in valid_orders) {
        for (l in valid_lineitems) {
            if (l.l_orderkey == o.o_orderkey) {
                val __k = (mutableMapOf("o_orderkey" to (o.o_orderkey), "o_orderdate" to (o.o_orderdate), "o_shippriority" to (o.o_shippriority)) as MutableMap<String, Any?>)
                var __g = __groups[__k]
                if (__g == null) {
                    __g = Group(__k, mutableListOf<Row1>())
                    __groups[__k] = __g
                    __order.add(__k)
                }
                __g.add(Row1(o = o, l = l))
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf(-sum(run {
    val __res = mutableListOf<Double>()
    for (r in g) {
        __res.add(r.l.l_extendedprice * ((1).toDouble() - r.l.l_discount))
    }
    __res
}), (g.key as MutableMap<String, Any?>)["o_orderdate"]) as Comparable<Any>
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("l_orderkey" to ((g.key as MutableMap<String, Any?>)["o_orderkey"]), "revenue" to (sum(run {
    val __res = mutableListOf<Double>()
    for (r in g) {
        __res.add(r.l.l_extendedprice * ((1).toDouble() - r.l.l_discount))
    }
    __res
})), "o_orderdate" to ((g.key as MutableMap<String, Any?>)["o_orderdate"]), "o_shippriority" to ((g.key as MutableMap<String, Any?>)["o_shippriority"])) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    json(order_line_join)
}
