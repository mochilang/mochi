// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:36Z
data class Lineitem(var l_partkey: Int, var l_extendedprice: Double, var l_discount: Double, var l_shipdate: String)

data class Part(var p_partkey: Int, var p_type: String)

data class Row0(var is_promo: Boolean, var revenue: Double)

data class Row1(var l: Lineitem, var p: Part)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q14.mochi

val part = mutableListOf(Part(p_partkey = 1, p_type = "PROMO LUXURY"), Part(p_partkey = 2, p_type = "STANDARD BRASS"))

val lineitem = mutableListOf(Lineitem(l_partkey = 1, l_extendedprice = 1000.0, l_discount = 0.1, l_shipdate = "1995-09-05"), Lineitem(l_partkey = 2, l_extendedprice = 800.0, l_discount = 0.0, l_shipdate = "1995-09-20"), Lineitem(l_partkey = 1, l_extendedprice = 500.0, l_discount = 0.2, l_shipdate = "1995-10-02"))

val start_date = "1995-09-01"

val end_date = "1995-10-01"

val filtered = run {
    val __res = mutableListOf<Row0>()
    for (l in lineitem) {
        for (p in part) {
            if (p.p_partkey == l.l_partkey) {
                if (l.l_shipdate >= start_date && l.l_shipdate < end_date) {
                    __res.add(Row0(is_promo = "PROMO" in p.p_type, revenue = l.l_extendedprice * ((1).toDouble() - l.l_discount)))
                }
            }
        }
    }
    __res
}

val promo_sum = sum(run {
    val __res = mutableListOf<Double>()
    for (x in filtered) {
        if (x.is_promo) {
            __res.add(x.revenue)
        }
    }
    __res
})

val total_sum = sum(run {
    val __res = mutableListOf<Double>()
    for (x in filtered) {
        __res.add(x.revenue)
    }
    __res
})

val result = 100.0 * promo_sum / total_sum

fun main() {
    json(result)
}
