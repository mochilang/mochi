// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:13Z
data class Customer(var c_custkey: Int, var c_nationkey: Int)

data class Lineitem(var l_orderkey: Int, var l_suppkey: Int, var l_partkey: Int, var l_extendedprice: Double, var l_discount: Double)

data class Nation(var n_nationkey: Int, var n_regionkey: Int, var n_name: String)

data class Order(var o_orderkey: Int, var o_custkey: Int, var o_orderdate: String)

data class Part(var p_partkey: Int, var p_type: String)

data class Region(var r_regionkey: Int, var r_name: String)

data class Row0(var l: Lineitem, var p: Part, var s: Supplier, var o: Order, var c: Customer, var n: Nation, var r: Region)

data class Supplier(var s_suppkey: Int)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q8.mochi

val region = mutableListOf(Region(r_regionkey = 0, r_name = "AMERICA"))

val nation = mutableListOf(Nation(n_nationkey = 10, n_regionkey = 0, n_name = "BRAZIL"), Nation(n_nationkey = 20, n_regionkey = 0, n_name = "CANADA"))

val customer = mutableListOf(Customer(c_custkey = 1, c_nationkey = 10), Customer(c_custkey = 2, c_nationkey = 20))

val orders = mutableListOf(Order(o_orderkey = 100, o_custkey = 1, o_orderdate = "1995-04-10"), Order(o_orderkey = 200, o_custkey = 2, o_orderdate = "1995-07-15"))

val lineitem = mutableListOf(Lineitem(l_orderkey = 100, l_suppkey = 1000, l_partkey = 5000, l_extendedprice = 1000.0, l_discount = 0.1), Lineitem(l_orderkey = 200, l_suppkey = 2000, l_partkey = 5000, l_extendedprice = 500.0, l_discount = 0.05))

val supplier = mutableListOf(Supplier(s_suppkey = 1000), Supplier(s_suppkey = 2000))

val part = mutableListOf(Part(p_partkey = 5000, p_type = "ECONOMY ANODIZED STEEL"), Part(p_partkey = 6000, p_type = "SMALL BRASS"))

val start_date = "1995-01-01"

val end_date = "1996-12-31"

val target_type = "ECONOMY ANODIZED STEEL"

val target_nation = "BRAZIL"

val result = run {
    val __groups = mutableMapOf<String, Group<String, Row0>>()
    val __order = mutableListOf<String>()
    for (l in lineitem) {
        for (p in part) {
            if (p.p_partkey == l.l_partkey) {
                for (s in supplier) {
                    if (s.s_suppkey == l.l_suppkey) {
                        for (o in orders) {
                            if (o.o_orderkey == l.l_orderkey) {
                                for (c in customer) {
                                    if (c.c_custkey == o.o_custkey) {
                                        for (n in nation) {
                                            if (n.n_nationkey == c.c_nationkey) {
                                                for (r in region) {
                                                    if (r.r_regionkey == n.n_regionkey) {
                                                        if ((p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")) {
                                                            val __k = o.o_orderdate.substring(0, 4)
                                                            var __g = __groups[__k]
                                                            if (__g == null) {
                                                                __g = Group(__k, mutableListOf<Row0>())
                                                                __groups[__k] = __g
                                                                __order.add(__k)
                                                            }
                                                            __g.add(Row0(l = l, p = p, s = s, o = o, c = c, n = n, r = r))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val year = __groups[k]!!
        year.key as String
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        val year = g
        __res.add((mutableMapOf("o_year" to (year.key), "mkt_share" to (sum(run {
    val __res = mutableListOf<Double>()
    for (x in year) {
        __res.add(run {
    val __t = x.n.n_name == target_nation
    when (__t) {
        true -> x.l.l_extendedprice * ((1).toDouble() - x.l.l_discount)
        else -> 0.0
    }
})
    }
    __res
}) / sum(run {
    val __res = mutableListOf<Double>()
    for (x in year) {
        __res.add(x.l.l_extendedprice * ((1).toDouble() - x.l.l_discount))
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    json(result)
}
