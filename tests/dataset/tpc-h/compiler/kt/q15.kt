// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:38:27Z
data class Lineitem(var l_suppkey: Int, var l_extendedprice: Double, var l_discount: Double, var l_shipdate: String)

data class Row0(var s_suppkey: Int, var s_name: String, var s_address: String, var s_phone: String, var total_revenue: Any?)

data class Row1(var s: Supplier, var r: MutableMap<String, Any?>)

data class Supplier(var s_suppkey: Int, var s_name: String, var s_address: String, var s_phone: String)

fun max(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) > (m as Comparable<Any?>)) m = n
    }
    return m
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q15.mochi

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_name = "Best Supplier", s_address = "123 Market St", s_phone = "123-456"), Supplier(s_suppkey = 200, s_name = "Second Supplier", s_address = "456 Elm St", s_phone = "987-654"))

val lineitem = mutableListOf(Lineitem(l_suppkey = 100, l_extendedprice = 1000.0, l_discount = 0.1, l_shipdate = "1996-01-15"), Lineitem(l_suppkey = 100, l_extendedprice = 500.0, l_discount = 0.0, l_shipdate = "1996-03-20"), Lineitem(l_suppkey = 200, l_extendedprice = 800.0, l_discount = 0.05, l_shipdate = "1995-12-30"))

val start_date = "1996-01-01"

val end_date = "1996-04-01"

val revenue0 = run {
    val __groups = mutableMapOf<Int, Group<Int, Lineitem>>()
    val __order = mutableListOf<Int>()
    for (l in lineitem) {
        if (l.l_shipdate >= start_date && l.l_shipdate < end_date) {
            val __k = l.l_suppkey
            var __g = __groups[__k]
            if (__g == null) {
                __g = Group(__k, mutableListOf<Lineitem>())
                __groups[__k] = __g
                __order.add(__k)
            }
            __g.add(l)
        }
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("supplier_no" to (g.key), "total_revenue" to (sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.l_extendedprice * ((1).toDouble() - x.l_discount))
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

val revenues = run {
    val __res = mutableListOf<Any?>()
    for (x in revenue0) {
        __res.add((x as MutableMap<String, Any?>)["total_revenue"])
    }
    __res
}

val max_revenue = max(revenues)

val result = run {
    val __res = mutableListOf<Row0>()
    for (s in supplier) {
        for (r in revenue0) {
            if (s.s_suppkey == toDouble((r as MutableMap<String, Any?>)["supplier_no"])) {
                if (toDouble((r as MutableMap<String, Any?>)["total_revenue"]) == toDouble(max_revenue)) {
                    __res.add(Row0(s_suppkey = s.s_suppkey, s_name = s.s_name, s_address = s.s_address, s_phone = s.s_phone, total_revenue = (r as MutableMap<String, Any?>)["total_revenue"]))
                }
            }
        }
    }
    __res
}.sortedBy { it.s_suppkey as Int }

fun main() {
    json(result)
}
