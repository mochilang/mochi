// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:00:25Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q4.mochi

data class Lineitem(var l_orderkey: Int, var l_commitdate: String, var l_receiptdate: String)

data class Order(var o_orderkey: Int, var o_orderdate: String, var o_orderpriority: String)

val orders = mutableListOf(Order(o_orderkey = 1, o_orderdate = "1993-07-01", o_orderpriority = "1-URGENT"), Order(o_orderkey = 2, o_orderdate = "1993-07-15", o_orderpriority = "2-HIGH"), Order(o_orderkey = 3, o_orderdate = "1993-08-01", o_orderpriority = "3-NORMAL"))

val lineitem = mutableListOf(Lineitem(l_orderkey = 1, l_commitdate = "1993-07-10", l_receiptdate = "1993-07-12"), Lineitem(l_orderkey = 1, l_commitdate = "1993-07-12", l_receiptdate = "1993-07-10"), Lineitem(l_orderkey = 2, l_commitdate = "1993-07-20", l_receiptdate = "1993-07-25"), Lineitem(l_orderkey = 3, l_commitdate = "1993-08-02", l_receiptdate = "1993-08-01"), Lineitem(l_orderkey = 3, l_commitdate = "1993-08-05", l_receiptdate = "1993-08-10"))

val start_date = "1993-07-01"

val end_date = "1993-08-01"

val date_filtered_orders = run {
    val __res = mutableListOf<Order>()
    for (o in orders) {
        if (o.o_orderdate >= start_date && o.o_orderdate < end_date) {
            __res.add(o)
        }
    }
    __res
}

val late_orders = run {
    val __res = mutableListOf<Order>()
    for (o in date_filtered_orders) {
        if (run {
    val __res = mutableListOf<Lineitem>()
    for (l in lineitem) {
        if (l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate) {
            __res.add(l)
        }
    }
    __res
}.isNotEmpty()) {
            __res.add(o)
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<String, Group<String, Order>>()
    val __order = mutableListOf<String>()
    for (o in late_orders) {
        val __k = o.o_orderpriority
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Order>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(o)
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        g.key as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("o_orderpriority" to g.key, "order_count" to g.size))
    }
    __res
}

fun main() {
    json(result)
}
