// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:02Z
data class Customer(var c_custkey: Int, var c_nationkey: Int)

data class Lineitem(var l_orderkey: Int, var l_suppkey: Int, var l_extendedprice: Double, var l_discount: Double)

data class Nation(var n_nationkey: Int, var n_regionkey: Int, var n_name: String)

data class Order(var o_orderkey: Int, var o_custkey: Int, var o_orderdate: String)

data class Region(var r_regionkey: Int, var r_name: String)

data class Row0(var nation: String, var revenue: Double)

data class Row1(var r: Region, var n: Nation)

data class Row2(var c: Customer, var n: Nation, var o: Order, var l: Lineitem, var s: Supplier)

data class Supplier(var s_suppkey: Int, var s_nationkey: Int)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q5.mochi

val region = mutableListOf(Region(r_regionkey = 0, r_name = "ASIA"), Region(r_regionkey = 1, r_name = "EUROPE"))

val nation = mutableListOf(Nation(n_nationkey = 10, n_regionkey = 0, n_name = "JAPAN"), Nation(n_nationkey = 20, n_regionkey = 0, n_name = "INDIA"), Nation(n_nationkey = 30, n_regionkey = 1, n_name = "FRANCE"))

val customer = mutableListOf(Customer(c_custkey = 1, c_nationkey = 10), Customer(c_custkey = 2, c_nationkey = 20))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_nationkey = 10), Supplier(s_suppkey = 200, s_nationkey = 20))

val orders = mutableListOf(Order(o_orderkey = 1000, o_custkey = 1, o_orderdate = "1994-03-15"), Order(o_orderkey = 2000, o_custkey = 2, o_orderdate = "1994-06-10"), Order(o_orderkey = 3000, o_custkey = 2, o_orderdate = "1995-01-01"))

val lineitem = mutableListOf(Lineitem(l_orderkey = 1000, l_suppkey = 100, l_extendedprice = 1000.0, l_discount = 0.05), Lineitem(l_orderkey = 2000, l_suppkey = 200, l_extendedprice = 800.0, l_discount = 0.1), Lineitem(l_orderkey = 3000, l_suppkey = 200, l_extendedprice = 900.0, l_discount = 0.05))

val asia_nations = run {
    val __res = mutableListOf<Nation>()
    for (r in region) {
        for (n in nation) {
            if (n.n_regionkey == r.r_regionkey) {
                if (r.r_name == "ASIA") {
                    __res.add(n)
                }
            }
        }
    }
    __res
}

val local_customer_supplier_orders = run {
    val __res = mutableListOf<Row0>()
    for (c in customer) {
        for (n in asia_nations) {
            if (c.c_nationkey == n.n_nationkey) {
                for (o in orders) {
                    if (o.o_custkey == c.c_custkey) {
                        for (l in lineitem) {
                            if (l.l_orderkey == o.o_orderkey) {
                                for (s in supplier) {
                                    if (s.s_suppkey == l.l_suppkey) {
                                        if (o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey) {
                                            __res.add(Row0(nation = n.n_name, revenue = l.l_extendedprice * ((1).toDouble() - l.l_discount)))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __groups = mutableMapOf<String, Group<String, Row0>>()
    val __order = mutableListOf<String>()
    for (r in local_customer_supplier_orders) {
        val __k = r.nation
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Row0>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(r)
    }
    __order.sortByDescending { k ->
        val g = __groups[k]!!
        sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.revenue)
    }
    __res
}) as Comparable<Any>
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("n_name" to (g.key), "revenue" to (sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add(x.revenue)
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    json(result)
}
