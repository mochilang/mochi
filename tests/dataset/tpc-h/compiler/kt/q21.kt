// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:58Z
data class Lineitem(var l_orderkey: Int, var l_suppkey: Int, var l_receiptdate: String, var l_commitdate: String)

data class Nation(var n_nationkey: Int, var n_name: String)

data class Order(var o_orderkey: Int, var o_orderstatus: String)

data class Row0(var s: Supplier, var l1: Lineitem, var o: Order, var n: Nation)

data class Supplier(var s_suppkey: Int, var s_name: String, var s_nationkey: Int)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q21.mochi

val nation = mutableListOf(Nation(n_nationkey = 1, n_name = "SAUDI ARABIA"), Nation(n_nationkey = 2, n_name = "FRANCE"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_name = "Desert Trade", s_nationkey = 1), Supplier(s_suppkey = 200, s_name = "Euro Goods", s_nationkey = 2))

val orders = mutableListOf(Order(o_orderkey = 500, o_orderstatus = "F"), Order(o_orderkey = 600, o_orderstatus = "O"))

val lineitem = mutableListOf(Lineitem(l_orderkey = 500, l_suppkey = 100, l_receiptdate = "1995-04-15", l_commitdate = "1995-04-10"), Lineitem(l_orderkey = 500, l_suppkey = 200, l_receiptdate = "1995-04-12", l_commitdate = "1995-04-12"), Lineitem(l_orderkey = 600, l_suppkey = 100, l_receiptdate = "1995-05-01", l_commitdate = "1995-04-25"))

val result = run {
    val __groups = mutableMapOf<String, Group<String, Row0>>()
    val __order = mutableListOf<String>()
    for (s in supplier) {
        for (l1 in lineitem) {
            if (s.s_suppkey == l1.l_suppkey) {
                for (o in orders) {
                    if (o.o_orderkey == l1.l_orderkey) {
                        for (n in nation) {
                            if (n.n_nationkey == s.s_nationkey) {
                                if (o.o_orderstatus == "F" && l1.l_receiptdate > l1.l_commitdate && n.n_name == "SAUDI ARABIA" && (!run {
    val __res = mutableListOf<Lineitem>()
    for (x in lineitem) {
        if (x.l_orderkey == l1.l_orderkey && x.l_suppkey != l1.l_suppkey && x.l_receiptdate > x.l_commitdate) {
            __res.add(x)
        }
    }
    __res
}.isNotEmpty())) {
                                    val __k = s.s_name
                                    var __g = __groups[__k]
                                    if (__g == null) {
                                        __g = Group(__k, mutableListOf<Row0>())
                                        __groups[__k] = __g
                                        __order.add(__k)
                                    }
                                    __g.add(Row0(s = s, l1 = l1, o = o, n = n))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf(-g.size, g.key) as Comparable<Any>
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("s_name" to (g.key), "numwait" to (g.size)) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    json(result)
}
