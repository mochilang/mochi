// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:17Z
data class Lineitem(var l_orderkey: Int, var l_partkey: Int, var l_suppkey: Int, var l_quantity: Int, var l_extendedprice: Double, var l_discount: Double)

data class Nation(var n_nationkey: Int, var n_name: String)

data class Order(var o_orderkey: Int, var o_orderdate: String)

data class Part(var p_partkey: Int, var p_name: String)

data class Partsupp(var ps_partkey: Int, var ps_suppkey: Int, var ps_supplycost: Double)

data class Row0(var l: Lineitem, var p: Part, var s: Supplier, var ps: Partsupp, var o: Order, var n: Nation)

data class Supplier(var s_suppkey: Int, var s_nationkey: Int)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q9.mochi

val nation = mutableListOf(Nation(n_nationkey = 1, n_name = "BRAZIL"), Nation(n_nationkey = 2, n_name = "CANADA"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_nationkey = 1), Supplier(s_suppkey = 200, s_nationkey = 2))

val part = mutableListOf(Part(p_partkey = 1000, p_name = "green metal box"), Part(p_partkey = 2000, p_name = "red plastic crate"))

val partsupp = mutableListOf(Partsupp(ps_partkey = 1000, ps_suppkey = 100, ps_supplycost = 10.0), Partsupp(ps_partkey = 1000, ps_suppkey = 200, ps_supplycost = 8.0))

val orders = mutableListOf(Order(o_orderkey = 1, o_orderdate = "1995-02-10"), Order(o_orderkey = 2, o_orderdate = "1997-01-01"))

val lineitem = mutableListOf(Lineitem(l_orderkey = 1, l_partkey = 1000, l_suppkey = 100, l_quantity = 5, l_extendedprice = 1000.0, l_discount = 0.1), Lineitem(l_orderkey = 2, l_partkey = 1000, l_suppkey = 200, l_quantity = 10, l_extendedprice = 800.0, l_discount = 0.05))

val prefix = "green"

val start_date = "1995-01-01"

val end_date = "1996-12-31"

val result = run {
    val __groups = mutableMapOf<MutableMap<String, Any?>, Group<MutableMap<String, Any?>, Row0>>()
    val __order = mutableListOf<MutableMap<String, Any?>>()
    for (l in lineitem) {
        for (p in part) {
            if (p.p_partkey == l.l_partkey) {
                for (s in supplier) {
                    if (s.s_suppkey == l.l_suppkey) {
                        for (ps in partsupp) {
                            if (ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey) {
                                for (o in orders) {
                                    if (o.o_orderkey == l.l_orderkey) {
                                        for (n in nation) {
                                            if (n.n_nationkey == s.s_nationkey) {
                                                if (p.p_name.substring(0, prefix.length) == prefix && o.o_orderdate >= start_date && o.o_orderdate <= end_date) {
                                                    val __k = (mutableMapOf("nation" to (n.n_name), "o_year" to ((o.o_orderdate.substring(0, 4)).toInt())) as MutableMap<String, Any?>)
                                                    var __g = __groups[__k]
                                                    if (__g == null) {
                                                        __g = Group(__k, mutableListOf<Row0>())
                                                        __groups[__k] = __g
                                                        __order.add(__k)
                                                    }
                                                    __g.add(Row0(l = l, p = p, s = s, ps = ps, o = o, n = n))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __order.sortBy { k ->
        val g = __groups[k]!!
        mutableListOf((g.key as MutableMap<String, Any?>)["nation"], -(g.key as MutableMap<String, Any?>)["o_year"]) as Comparable<Any>
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("nation" to ((g.key as MutableMap<String, Any?>)["nation"]), "o_year" to ((g.key as MutableMap<String, Any?>)["o_year"].toString()), "profit" to (sum(run {
    val __res = mutableListOf<Double>()
    for (x in g) {
        __res.add((x.l.l_extendedprice * ((1).toDouble() - x.l.l_discount)) - (x.ps.ps_supplycost * (x.l.l_quantity).toDouble()))
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    json(result)
}
