// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:06:54Z
data class Lineitem(var l_partkey: Int, var l_suppkey: Int, var l_quantity: Int, var l_shipdate: String)

data class Nation(var n_nationkey: Int, var n_name: String)

data class Part(var p_partkey: Int, var p_name: String)

data class Partsupp(var ps_partkey: Int, var ps_suppkey: Int, var ps_availqty: Int)

data class Row0(var s_name: String, var s_address: String)

data class Row1(var ps: Partsupp, var p: Part, var s: MutableMap<String, Any?>)

data class Row2(var s: Supplier, var n: Nation)

data class Supplier(var s_suppkey: Int, var s_name: String, var s_address: String, var s_nationkey: Int)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q20.mochi

val nation = mutableListOf(Nation(n_nationkey = 1, n_name = "CANADA"), Nation(n_nationkey = 2, n_name = "GERMANY"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_name = "Maple Supply", s_address = "123 Forest Lane", s_nationkey = 1), Supplier(s_suppkey = 200, s_name = "Berlin Metals", s_address = "456 Iron Str", s_nationkey = 2))

val part = mutableListOf(Part(p_partkey = 10, p_name = "forest glade bricks"), Part(p_partkey = 20, p_name = "desert sand paper"))

val partsupp = mutableListOf(Partsupp(ps_partkey = 10, ps_suppkey = 100, ps_availqty = 100), Partsupp(ps_partkey = 20, ps_suppkey = 200, ps_availqty = 30))

val lineitem = mutableListOf(Lineitem(l_partkey = 10, l_suppkey = 100, l_quantity = 100, l_shipdate = "1994-05-15"), Lineitem(l_partkey = 10, l_suppkey = 100, l_quantity = 50, l_shipdate = "1995-01-01"))

val prefix = "forest"

val shipped_94 = run {
    val __groups = mutableMapOf<MutableMap<String, Int>, Group<MutableMap<String, Int>, Lineitem>>()
    val __order = mutableListOf<MutableMap<String, Int>>()
    for (l in lineitem) {
        if (l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01") {
            val __k = (mutableMapOf("partkey" to (l.l_partkey), "suppkey" to (l.l_suppkey)) as MutableMap<String, Int>)
            var __g = __groups[__k]
            if (__g == null) {
                __g = Group(__k, mutableListOf<Lineitem>())
                __groups[__k] = __g
                __order.add(__k)
            }
            __g.add(l)
        }
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("partkey" to ((g.key as MutableMap<String, Int>)["partkey"]), "suppkey" to ((g.key as MutableMap<String, Int>)["suppkey"]), "qty" to (sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.l_quantity)
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

val target_partkeys = run {
    val __res = mutableListOf<Int>()
    for (ps in partsupp) {
        for (p in part) {
            if (ps.ps_partkey == p.p_partkey) {
                for (s in shipped_94) {
                    if (ps.ps_partkey == toDouble((s as MutableMap<String, Any?>)["partkey"]) && ps.ps_suppkey == toDouble((s as MutableMap<String, Any?>)["suppkey"])) {
                        if (p.p_name.substring(0, prefix.length) == prefix && ps.ps_availqty > toDouble((0.5 * toDouble((s as MutableMap<String, Any?>)["qty"])))) {
                            __res.add(ps.ps_suppkey)
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = run {
    val __res = mutableListOf<Row0>()
    for (s in supplier) {
        for (n in nation) {
            if (n.n_nationkey == s.s_nationkey) {
                if (s.s_suppkey in target_partkeys && n.n_name == "CANADA") {
                    __res.add(Row0(s_name = s.s_name, s_address = s.s_address))
                }
            }
        }
    }
    __res
}.sortedBy { it.s_name as String }

fun main() {
    json(result)
}
