// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:26:45Z
fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q13.mochi

data class Customer(var c_custkey: Int)

data class Order(var o_orderkey: Int, var o_custkey: Int, var o_comment: String)

val customer = mutableListOf(Customer(c_custkey = 1), Customer(c_custkey = 2), Customer(c_custkey = 3))

val orders = mutableListOf(Order(o_orderkey = 100, o_custkey = 1, o_comment = "fast delivery"), Order(o_orderkey = 101, o_custkey = 1, o_comment = "no comment"), Order(o_orderkey = 102, o_custkey = 2, o_comment = "special requests only"))

val per_customer = run {
    val __res = mutableListOf<Any?>()
    for (c in customer) {
        __res.add(mutableMapOf("c_count" to run {
    val __res = mutableListOf<Order>()
    for (o in orders) {
        if ((o.o_custkey == c.c_custkey && (!("special" in o.o_comment)) && (!("requests" in o.o_comment)))) {
            __res.add(o)
        }
    }
    __res
}.size))
    }
    __res
}

val grouped = run {
    val __groups = mutableMapOf<Int, Group<Int, MutableMap<String, Int>>>()
    val __order = mutableListOf<Int>()
    for (x in per_customer) {
        val __k = (x as MutableMap<String, Int>)["c_count"]
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<MutableMap<String, Int>>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    __order.sortByDescending { k ->
        val g = __groups[k]!!
        g.key as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("c_count" to g.key, "custdist" to g.size))
    }
    __res
}

fun main() {
    json(grouped)
}
