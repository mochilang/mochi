fun test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
    check((result == listOf(mutableMapOf("returnflag" to "N", "linestatus" to "O", "sum_qty" to 53, "sum_base_price" to 3000, "sum_disc_price" to (950 + 1800), "sum_charge" to (((950 * 1.07)) + ((1800 * 1.05))), "avg_qty" to 26.5, "avg_price" to 1500, "avg_disc" to 0.07500000000000001, "count_order" to 2))))
}

fun main() {
    val lineitem = listOf(mutableMapOf("l_quantity" to 17, "l_extendedprice" to 1000, "l_discount" to 0.05, "l_tax" to 0.07, "l_returnflag" to "N", "l_linestatus" to "O", "l_shipdate" to "1998-08-01"), mutableMapOf("l_quantity" to 36, "l_extendedprice" to 2000, "l_discount" to 0.1, "l_tax" to 0.05, "l_returnflag" to "N", "l_linestatus" to "O", "l_shipdate" to "1998-09-01"), mutableMapOf("l_quantity" to 25, "l_extendedprice" to 1500, "l_discount" to 0, "l_tax" to 0.08, "l_returnflag" to "R", "l_linestatus" to "F", "l_shipdate" to "1998-09-03"))
    val result = run {
                val _src = lineitem
                val _rows = _query(_src, listOf(
                ), _QueryOpts(selectFn = { args ->
                        val row = args[0]
mutableMapOf("returnflag" to g.key.returnflag, "linestatus" to g.key.linestatus, "sum_qty" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_quantity }
                res
        }), "sum_base_price" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_extendedprice }
                res
        }), "sum_disc_price" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> (x.l_extendedprice * ((1 - x.l_discount))) }
                res
        }), "sum_charge" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> ((x.l_extendedprice * ((1 - x.l_discount))) * ((1 + x.l_tax))) }
                res
        }), "avg_qty" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_quantity }
                res
        }), "avg_price" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_extendedprice }
                res
        }), "avg_disc" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_discount }
                res
        }), "count_order" to g.size)
                        }, where = { args ->
                        val row = args[0]
(row.l_shipdate <= "1998-09-02")
                        }) )
                val _groups = _group_by(_rows) { args ->
                        val row = args[0]
                        mutableMapOf("returnflag" to row.l_returnflag, "linestatus" to row.l_linestatus)
                }
                val _res = mutableListOf<Any?>()
                for (g in _groups) {
                        _res.add(mutableMapOf("returnflag" to g.key.returnflag, "linestatus" to g.key.linestatus, "sum_qty" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_quantity }
                res
        }), "sum_base_price" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_extendedprice }
                res
        }), "sum_disc_price" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> (x.l_extendedprice * ((1 - x.l_discount))) }
                res
        }), "sum_charge" to _sum(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> ((x.l_extendedprice * ((1 - x.l_discount))) * ((1 + x.l_tax))) }
                res
        }), "avg_qty" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_quantity }
                res
        }), "avg_price" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_extendedprice }
                res
        }), "avg_disc" to _avg(run {
                var res = g.Items as List<Any?>
                res = res.map { x -> x.l_discount }
                res
        }), "count_order" to g.size))
                }
                _res
        }
    _json(result)
    test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
}

class _Group(var key: Any?) {
    val Items = mutableListOf<Any?>()
    val size: Int
        get() = Items.size
}
fun _avg(v: Any?): Double {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0.0
    var sum = 0.0
    for (n in list!!) {
        sum += (n as Number).toDouble()
    }
    return sum / list!!.size
}
fun _group_by(src: List<Any?>, keyfn: (Any?) -> Any?): List<_Group> {
    val groups = mutableMapOf<String, _Group>()
    val order = mutableListOf<String>()
    for (it in src) {
        val key = keyfn(it)
        val ks = key.toString()
        var g = groups[ks]
        if (g == null) {
            g = _Group(key)
            groups[ks] = g
            order.add(ks)
        }
        if (it is Array<*> && it.size == 1) {
            g.Items.add(it[0])
        } else {
            g.Items.add(it)
        }
    }
        return order.map { groups[it]!! }
}
fun _json(v: Any?) {
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e ->
            "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value)
        }
        else -> \"""${x.toString().replace("\"", "\\\"")}\"""
    }
        println(encode(v))
}
data class _JoinSpec(
    val items: List<Any?>,
    val on: ((Array<Any?>) -> Boolean)? = null,
    val left: Boolean = false,
    val right: Boolean = false,
)

data class _QueryOpts(
    val selectFn: (Array<Any?>) -> Any?,
    val where: ((Array<Any?>) -> Boolean)? = null,
    val sortKey: ((Array<Any?>) -> Any?)? = null,
    val skip: Int = -1,
    val take: Int = -1,
)

fun _query(src: List<Any?>, joins: List<_JoinSpec>, opts: _QueryOpts): List<Any?> {
    var items = src.map { arrayOf(it) }.toMutableList()
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    for (j in joins) {
        val joined = mutableListOf<Array<Any?>>()
        if (j.right && j.left) {
            val matched = BooleanArray(j.items.size)
            for (left in items) {
                var m = false
                for ((ri, right) in j.items.withIndex()) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(left + arrayOf(right))
                    }
                    if (!keep) continue
                    m = true
                    matched[ri] = true
                    joined.add(left + arrayOf(right))
                }
                if (!m) joined.add(left + arrayOf<Any?>(null))
            }
            for ((ri, right) in j.items.withIndex()) {
                if (!matched[ri]) {
                    val undef = Array(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(undef + arrayOf(right))
                }
            }
        } else if (j.right) {
            for (right in j.items) {
                var m = false
                for (left in items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(left + arrayOf(right))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(left + arrayOf(right))
                }
                if (!m) {
                    val undef = Array(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(undef + arrayOf(right))
                }
            }
        } else {
            for (left in items) {
                var m = false
                for (right in j.items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(left + arrayOf(right))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(left + arrayOf(right))
                }
                if (j.left && !m) joined.add(left + arrayOf<Any?>(null))
            }
        }
        items = joined
        if (opts.where != null) {
            items = items.filter { opts.where.invoke(it) }.toMutableList()
        }
    }
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    if (opts.sortKey != null) {
        val pairs = items.map { it to opts.sortKey.invoke(it) }.toMutableList()
        pairs.sortWith { a, b ->
            val av = a.second
            val bv = b.second
            when (av) {
                is Int -> when (bv) {
                    is Int -> av.compareTo(bv)
                    is Double -> av.toDouble().compareTo(bv)
                    else -> av.toString().compareTo(bv.toString())
                }
                is Double -> when (bv) {
                    is Int -> av.compareTo(bv.toDouble())
                    is Double -> av.compareTo(bv)
                    else -> av.toString().compareTo(bv.toString())
                }
                is String -> av.compareTo(bv.toString())
                else -> av.toString().compareTo(bv.toString())
            }
        }
        items = pairs.map { it.first }.toMutableList()
    }
    if (opts.skip >= 0) {
        items = if (opts.skip < items.size) items.drop(opts.skip).toMutableList() else mutableListOf()
    }
    if (opts.take >= 0) {
        if (opts.take < items.size) items = items.take(opts.take).toMutableList()
    }
    val res = mutableListOf<Any?>()
    for (r in items) {
        res.add(opts.selectFn.invoke(r))
    }
    return res
}
fun _sum(v: Any?): Double {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0.0
    var sum = 0.0
    for (n in list!!) {
        sum += (n as Number).toDouble()
    }
    return sum
}

