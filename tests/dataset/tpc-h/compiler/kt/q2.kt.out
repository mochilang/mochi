fun test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
    check((result == listOf(mutableMapOf("s_acctbal" to 1000, "s_name" to "BestSupplier", "n_name" to "FRANCE", "p_partkey" to 1000, "p_mfgr" to "M1", "s_address" to "123 Rue", "s_phone" to "123", "s_comment" to "Fast and reliable", "ps_supplycost" to 10))))
}

fun main() {
    val region = listOf(mutableMapOf("r_regionkey" to 1, "r_name" to "EUROPE"), mutableMapOf("r_regionkey" to 2, "r_name" to "ASIA"))
    val nation = listOf(mutableMapOf("n_nationkey" to 10, "n_regionkey" to 1, "n_name" to "FRANCE"), mutableMapOf("n_nationkey" to 20, "n_regionkey" to 2, "n_name" to "CHINA"))
    val supplier = listOf(mutableMapOf("s_suppkey" to 100, "s_name" to "BestSupplier", "s_address" to "123 Rue", "s_nationkey" to 10, "s_phone" to "123", "s_acctbal" to 1000, "s_comment" to "Fast and reliable"), mutableMapOf("s_suppkey" to 200, "s_name" to "AltSupplier", "s_address" to "456 Way", "s_nationkey" to 20, "s_phone" to "456", "s_acctbal" to 500, "s_comment" to "Slow"))
    val part = listOf(mutableMapOf("p_partkey" to 1000, "p_type" to "LARGE BRASS", "p_size" to 15, "p_mfgr" to "M1"), mutableMapOf("p_partkey" to 2000, "p_type" to "SMALL COPPER", "p_size" to 15, "p_mfgr" to "M2"))
    val partsupp = listOf(mutableMapOf("ps_partkey" to 1000, "ps_suppkey" to 100, "ps_supplycost" to 10), mutableMapOf("ps_partkey" to 1000, "ps_suppkey" to 200, "ps_supplycost" to 15))
    val europe_nations = run {
        val _src = region
        val _rows = _query(_src, listOf(
        _JoinSpec(items = nation, on = { args ->
        val r = args[0]
        val n = args[1]
        (n["n_regionkey"] == r["r_regionkey"])
    }))
    ), _QueryOpts(selectFn = { args ->
    val r = args[0]
    val n = args[1]
    n
}, where = { args ->
val r = args[0]
val n = args[1]
(r["r_name"] == "EUROPE")
}) )
_rows
}
val europe_suppliers = run {
    val _src = supplier
    val _rows = _query(_src, listOf(
    _JoinSpec(items = europe_nations, on = { args ->
    val s = args[0]
    val n = args[1]
    (s["s_nationkey"] == n["n_nationkey"])
}))
), _QueryOpts(selectFn = { args ->
val s = args[0]
val n = args[1]
mutableMapOf("s" to s, "n" to n)
}) )
_rows
}
val target_parts = run {
    var res = part
    res = res.filter { p -> ((p["p_size"] == 15) && (p["p_type"] == "LARGE BRASS")) }
    res = res.map { p -> p }
    res
}
val target_partsupp = run {
    val _src = partsupp
    val _rows = _query(_src, listOf(
    _JoinSpec(items = target_parts, on = { args ->
    val ps = args[0]
    val p = args[1]
    (ps["ps_partkey"] == p["p_partkey"])
})),
_JoinSpec(items = europe_suppliers, on = { args ->
val ps = args[0]
val p = args[1]
val s = args[2]
(ps["ps_suppkey"] == s["s"].s_suppkey)
}))
), _QueryOpts(selectFn = { args ->
val ps = args[0]
val p = args[1]
val s = args[2]
mutableMapOf("s_acctbal" to s["s"].s_acctbal, "s_name" to s["s"].s_name, "n_name" to s["n"].n_name, "p_partkey" to p["p_partkey"], "p_mfgr" to p["p_mfgr"], "s_address" to s["s"].s_address, "s_phone" to s["s"].s_phone, "s_comment" to s["s"].s_comment, "ps_supplycost" to ps["ps_supplycost"])
}) )
_rows
}
val costs = run {
    var res = target_partsupp
    res = res.map { x -> x["ps_supplycost"] }
    res
}
val min_cost = _min(costs)
val result = run {
    var res = target_partsupp
    res = res.filter { x -> (x["ps_supplycost"] == min_cost) }
    res = res.sortedBy { x -> -x["s_acctbal"] }
    res = res.map { x -> x }
    res
}
_json(result)
test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}

fun _arrConcat(a: Array<Any?>, b: Array<Any?>): Array<Any?> {
    return a + b
}
fun _json(v: Any?) {
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e ->
        "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value)
    }
    else -> \"""${x.toString().replace("\"", "\\\"")}\"""
}
println(encode(v))
}
fun _min(v: Any?): Any? {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0
    var m = list[0]
    for (n in list!!) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}
data class _JoinSpec(
val items: List<Any?>,
val on: ((Array<Any?>) -> Boolean)? = null,
val left: Boolean = false,
val right: Boolean = false,
)

data class _QueryOpts(
val selectFn: (Array<Any?>) -> Any?,
val where: ((Array<Any?>) -> Boolean)? = null,
val sortKey: ((Array<Any?>) -> Any?)? = null,
val skip: Int = -1,
val take: Int = -1,
)

fun _query(src: List<Any?>, joins: List<_JoinSpec>, opts: _QueryOpts): List<Any?> {
    var items = src.map { arrayOf(it) }.toMutableList()
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    for (j in joins) {
        val joined = mutableListOf<Array<Any?>>()
        if (j.right && j.left) {
            val matched = BooleanArray(j.items.size)
            for (left in items) {
                var m = false
                for ((ri, right) in j.items.withIndex()) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    matched[ri] = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
            for ((ri, right) in j.items.withIndex()) {
                if (!matched[ri]) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else if (j.right) {
            for (right in j.items) {
                var m = false
                for (left in items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else {
            for (left in items) {
                var m = false
                for (right in j.items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (j.left && !m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
        }
        items = joined
        if (opts.where != null) {
            items = items.filter { opts.where.invoke(it) }.toMutableList()
        }
    }
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    if (opts.sortKey != null) {
        val pairs = items.map { it to opts.sortKey.invoke(it) }.toMutableList()
        pairs.sortWith(java.util.Comparator { a, b ->
        val av = a.second
        val bv = b.second
        when (av) {
            is Int -> when (bv) {
                is Int -> av.compareTo(bv)
                is Double -> av.toDouble().compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is Double -> when (bv) {
                is Int -> av.compareTo(bv.toDouble())
                is Double -> av.compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is String -> av.compareTo(bv.toString())
            else -> av.toString().compareTo(bv.toString())
        }
    })
    items = pairs.map { it.first }.toMutableList()
}
if (opts.skip >= 0) {
    items = if (opts.skip < items.size) items.drop(opts.skip).toMutableList() else mutableListOf()
}
if (opts.take >= 0) {
    if (opts.take < items.size) items = items.take(opts.take).toMutableList()
}
val res = mutableListOf<Any?>()
for (r in items) {
    res.add(opts.selectFn.invoke(r))
}
return res
}


