// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:37:36Z
data class Nation(var n_nationkey: Int, var n_regionkey: Int, var n_name: String)

data class Part(var p_partkey: Int, var p_type: String, var p_size: Int, var p_mfgr: String)

data class Partsupp(var ps_partkey: Int, var ps_suppkey: Int, var ps_supplycost: Double)

data class Region(var r_regionkey: Int, var r_name: String)

data class Row0(var s: Supplier, var n: Nation)

data class Row1(var s_acctbal: Double, var s_name: String, var n_name: String, var p_partkey: Int, var p_mfgr: String, var s_address: String, var s_phone: String, var s_comment: String, var ps_supplycost: Double)

data class Row2(var r: Region, var n: Nation)

data class Row3(var s: Supplier, var n: Nation)

data class Row4(var ps: Partsupp, var p: Part, var s: Row0)

data class Supplier(var s_suppkey: Int, var s_name: String, var s_address: String, var s_nationkey: Int, var s_phone: String, var s_acctbal: Double, var s_comment: String)

fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q2.mochi

val region = mutableListOf(Region(r_regionkey = 1, r_name = "EUROPE"), Region(r_regionkey = 2, r_name = "ASIA"))

val nation = mutableListOf(Nation(n_nationkey = 10, n_regionkey = 1, n_name = "FRANCE"), Nation(n_nationkey = 20, n_regionkey = 2, n_name = "CHINA"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_name = "BestSupplier", s_address = "123 Rue", s_nationkey = 10, s_phone = "123", s_acctbal = 1000.0, s_comment = "Fast and reliable"), Supplier(s_suppkey = 200, s_name = "AltSupplier", s_address = "456 Way", s_nationkey = 20, s_phone = "456", s_acctbal = 500.0, s_comment = "Slow"))

val part = mutableListOf(Part(p_partkey = 1000, p_type = "LARGE BRASS", p_size = 15, p_mfgr = "M1"), Part(p_partkey = 2000, p_type = "SMALL COPPER", p_size = 15, p_mfgr = "M2"))

val partsupp = mutableListOf(Partsupp(ps_partkey = 1000, ps_suppkey = 100, ps_supplycost = 10.0), Partsupp(ps_partkey = 1000, ps_suppkey = 200, ps_supplycost = 15.0))

val europe_nations = run {
    val __res = mutableListOf<Nation>()
    for (r in region) {
        for (n in nation) {
            if (n.n_regionkey == r.r_regionkey) {
                if (r.r_name == "EUROPE") {
                    __res.add(n)
                }
            }
        }
    }
    __res
}

val europe_suppliers = run {
    val __res = mutableListOf<Row0>()
    for (s in supplier) {
        for (n in europe_nations) {
            if (s.s_nationkey == n.n_nationkey) {
                __res.add(Row0(s = s, n = n))
            }
        }
    }
    __res
}

val target_parts = run {
    val __res = mutableListOf<Part>()
    for (p in part) {
        if (p.p_size == 15 && p.p_type == "LARGE BRASS") {
            __res.add(p)
        }
    }
    __res
}

val target_partsupp = run {
    val __res = mutableListOf<Row1>()
    for (ps in partsupp) {
        for (p in target_parts) {
            if (ps.ps_partkey == p.p_partkey) {
                for (s in europe_suppliers) {
                    if (ps.ps_suppkey == s.s.s_suppkey) {
                        __res.add(Row1(s_acctbal = s.s.s_acctbal, s_name = s.s.s_name, n_name = s.n.n_name, p_partkey = p.p_partkey, p_mfgr = p.p_mfgr, s_address = s.s.s_address, s_phone = s.s.s_phone, s_comment = s.s.s_comment, ps_supplycost = ps.ps_supplycost))
                    }
                }
            }
        }
    }
    __res
}

val costs = run {
    val __res = mutableListOf<Double>()
    for (x in target_partsupp) {
        __res.add(x.ps_supplycost)
    }
    __res
}

val min_cost = min(costs)

val result =     val __sorted = target_partsupp.sortedByDescending { it.s_acctbal as Double }
run {
    val __res = mutableListOf<Row1>()
    for (x in __sorted) {
        if (x.ps_supplycost == toDouble(min_cost)) {
            __res.add(x)
        }
    }
    __res
}

fun main() {
    json(result)
}
