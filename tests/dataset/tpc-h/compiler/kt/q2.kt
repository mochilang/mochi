// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:13:06Z
fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q2.mochi

data class Part(var p_partkey: Int, var p_type: String, var p_size: Int, var p_mfgr: String)

data class Partsupp(var ps_partkey: Int, var ps_suppkey: Int, var ps_supplycost: Double)

data class Region(var r_regionkey: Int, var r_name: String)

data class Nation(var n_nationkey: Int, var n_regionkey: Int, var n_name: String)

data class Supplier(var s_suppkey: Int, var s_name: String, var s_address: String, var s_nationkey: Int, var s_phone: String, var s_acctbal: Double, var s_comment: String)

val region = mutableListOf(Region(r_regionkey = 1, r_name = "EUROPE"), Region(r_regionkey = 2, r_name = "ASIA"))

val nation = mutableListOf(Nation(n_nationkey = 10, n_regionkey = 1, n_name = "FRANCE"), Nation(n_nationkey = 20, n_regionkey = 2, n_name = "CHINA"))

val supplier = mutableListOf(Supplier(s_suppkey = 100, s_name = "BestSupplier", s_address = "123 Rue", s_nationkey = 10, s_phone = "123", s_acctbal = 1000.0, s_comment = "Fast and reliable"), Supplier(s_suppkey = 200, s_name = "AltSupplier", s_address = "456 Way", s_nationkey = 20, s_phone = "456", s_acctbal = 500.0, s_comment = "Slow"))

val part = mutableListOf(Part(p_partkey = 1000, p_type = "LARGE BRASS", p_size = 15, p_mfgr = "M1"), Part(p_partkey = 2000, p_type = "SMALL COPPER", p_size = 15, p_mfgr = "M2"))

val partsupp = mutableListOf(Partsupp(ps_partkey = 1000, ps_suppkey = 100, ps_supplycost = 10.0), Partsupp(ps_partkey = 1000, ps_suppkey = 200, ps_supplycost = 15.0))

val europe_nations = run {
    val __res = mutableListOf<Nation>()
    for (r in region) {
        for (n in nation) {
            if (n.n_regionkey == r.r_regionkey) {
                if (r.r_name == "EUROPE") {
                    __res.add(n)
                }
            }
        }
    }
    __res
}

val europe_suppliers = run {
    val __res = mutableListOf<Any?>()
    for (s in supplier) {
        for (n in europe_nations) {
            if (s.s_nationkey == (n as MutableMap<String, Any?>)["n_nationkey"]) {
                __res.add(mutableMapOf("s" to s, "n" to n))
            }
        }
    }
    __res
}

val target_parts = run {
    val __res = mutableListOf<Part>()
    for (p in part) {
        if (p.p_size == 15 && p.p_type == "LARGE BRASS") {
            __res.add(p)
        }
    }
    __res
}

val target_partsupp = run {
    val __res = mutableListOf<Any?>()
    for (ps in partsupp) {
        for (p in target_parts) {
            if (ps.ps_partkey == p.p_partkey) {
                for (s in europe_suppliers) {
                    if (ps.ps_suppkey == (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_suppkey"]) {
                        __res.add(mutableMapOf("s_acctbal" to (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_acctbal"], "s_name" to (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_name"], "n_name" to (s as MutableMap<String, MutableMap<String, Any?>>)["n"]["n_name"], "p_partkey" to p.p_partkey, "p_mfgr" to p.p_mfgr, "s_address" to (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_address"], "s_phone" to (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_phone"], "s_comment" to (s as MutableMap<String, MutableMap<String, Any?>>)["s"]["s_comment"], "ps_supplycost" to ps.ps_supplycost))
                    }
                }
            }
        }
    }
    __res
}

val costs = run {
    val __res = mutableListOf<Any?>()
    for (x in target_partsupp) {
        __res.add((x as MutableMap<String, Any?>)["ps_supplycost"])
    }
    __res
}

val min_cost = costs.min() ?: 0

val result = run {
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (x in target_partsupp) {
        if ((x as MutableMap<String, Any?>)["ps_supplycost"] == min_cost) {
            __res.add((x as MutableMap<String, Any?>))
        }
    }
    __res
}.sortedByDescending { (it as MutableMap<String, Any?>)["s_acctbal"] as Comparable<Any> }

fun main() {
    json(result)
    check(result == mutableListOf(mutableMapOf("s_acctbal" to 1000.0, "s_name" to "BestSupplier", "n_name" to "FRANCE", "p_partkey" to 1000, "p_mfgr" to "M1", "s_address" to "123 Rue", "s_phone" to "123", "s_comment" to "Fast and reliable", "ps_supplycost" to 10.0)))
}
