// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:38:52Z
data class Customer(var c_custkey: Int, var c_phone: String, var c_acctbal: Double)

data class Order(var o_orderkey: Int, var o_custkey: Int)

data class Row0(var cntrycode: String, var c_acctbal: Double)

fun <T> append(list: MutableList<T>, item: T): MutableList<T> {
    val res = list.toMutableList()
    res.add(item)
    return res
}

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from q22.mochi

val customer = mutableListOf(Customer(c_custkey = 1, c_phone = "13-123-4567", c_acctbal = 600.0), Customer(c_custkey = 2, c_phone = "31-456-7890", c_acctbal = 100.0), Customer(c_custkey = 3, c_phone = "30-000-0000", c_acctbal = 700.0))

val orders = mutableListOf(Order(o_orderkey = 10, o_custkey = 2))

val valid_codes = mutableListOf("13", "31", "23", "29", "30", "18", "17")

val avg_balance = run { val r = run {
    val __res = mutableListOf<Double>()
    for (c in customer) {
        if (c.c_acctbal > 0.0 && c.c_phone.substring(0, 2) in valid_codes) {
            __res.add(c.c_acctbal)
        }
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r }

val eligible_customers = run {
    val __res = mutableListOf<Row0>()
    for (c in customer) {
        if (c.c_phone.substring(0, 2) in valid_codes && c.c_acctbal > avg_balance && (!run {
    val __res = mutableListOf<Order>()
    for (o in orders) {
        if (o.o_custkey == c.c_custkey) {
            __res.add(o)
        }
    }
    __res
}.isNotEmpty())) {
            __res.add(Row0(cntrycode = c.c_phone.substring(0, 2), c_acctbal = c.c_acctbal))
        }
    }
    __res
}

val groups = run {
    val __groups = mutableMapOf<String, Group<String, Row0>>()
    val __order = mutableListOf<String>()
    for (c in eligible_customers) {
        val __k = c.cntrycode
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Row0>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(c)
    }
    val __res = mutableListOf<Group<String, Row0>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(g)
    }
    __res
}

var tmp = mutableListOf<Any?>()

fun main() {
    for (g in groups) {
        val total = sum(run {
    val __res = mutableListOf<String>()
    for (x in g.items) {
        __res.add((x as MutableMap<String, String>)["c_acctbal"])
    }
    __res
})
        val row = mutableMapOf("cntrycode" to (g.key), "numcust" to (g.size), "totacctbal" to total)
        tmp = append(tmp, row)
    }
    val result =     val __sorted = tmp.sortedBy { (it as MutableMap<*, *>)["cntrycode"] as Comparable<Any> }
run {
    val __res = mutableListOf<Any?>()
    for (r in __sorted) {
        __res.add(r)
    }
    __res
}
    json(result)
}
