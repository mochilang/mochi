//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T02:55:24Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

type Lineitem struct {
	L_orderkey    int    `json:"l_orderkey"`
	L_commitdate  string `json:"l_commitdate"`
	L_receiptdate string `json:"l_receiptdate"`
}

type Order struct {
	O_orderkey      int    `json:"o_orderkey"`
	O_orderdate     string `json:"o_orderdate"`
	O_orderpriority string `json:"o_orderpriority"`
}

type Result struct {
	O_orderpriority any `json:"o_orderpriority"`
	Order_count     int `json:"order_count"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q4_returns_count_of_orders_with_late_lineitems_in_range() {
	expect(_equal(result, []v{v{
		O_orderpriority: "1-URGENT",
		Order_count:     1,
	}, v{
		O_orderpriority: "2-HIGH",
		Order_count:     1,
	}}))
}

var orders []Order
var lineitem []Lineitem
var start_date string
var end_date string
var date_filtered_orders []Order
var late_orders []Order
var result []Result

func main() {
	orders = []Order{Order{
		O_orderkey:      1,
		O_orderdate:     "1993-07-01",
		O_orderpriority: "1-URGENT",
	}, Order{
		O_orderkey:      2,
		O_orderdate:     "1993-07-15",
		O_orderpriority: "2-HIGH",
	}, Order{
		O_orderkey:      3,
		O_orderdate:     "1993-08-01",
		O_orderpriority: "3-NORMAL",
	}}
	lineitem = []Lineitem{
		Lineitem{
			L_orderkey:    1,
			L_commitdate:  "1993-07-10",
			L_receiptdate: "1993-07-12",
		},
		Lineitem{
			L_orderkey:    1,
			L_commitdate:  "1993-07-12",
			L_receiptdate: "1993-07-10",
		},
		Lineitem{
			L_orderkey:    2,
			L_commitdate:  "1993-07-20",
			L_receiptdate: "1993-07-25",
		},
		Lineitem{
			L_orderkey:    3,
			L_commitdate:  "1993-08-02",
			L_receiptdate: "1993-08-01",
		},
		Lineitem{
			L_orderkey:    3,
			L_commitdate:  "1993-08-05",
			L_receiptdate: "1993-08-10",
		},
	}
	start_date = "1993-07-01"
	end_date = "1993-08-01"
	date_filtered_orders = func() []Order {
		results := []Order{}
		for _, oRaw := range orders {
			o := oRaw.(Order)
			if (o.O_orderdate >= start_date) && (o.O_orderdate < end_date) {
				if (o.O_orderdate >= start_date) && (o.O_orderdate < end_date) {
					results = append(results, o)
				}
			}
		}
		return results
	}()
	late_orders = func() []Order {
		results := []Order{}
		for _, oRaw := range date_filtered_orders {
			o := oRaw.(Order)
			if len(func() []Lineitem {
				results := []Lineitem{}
				for _, lRaw := range lineitem {
					l := lRaw.(Lineitem)
					if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
						if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
							results = append(results, l)
						}
					}
				}
				return results
			}()) > 0 {
				if len(func() []Lineitem {
					results := []Lineitem{}
					for _, lRaw := range lineitem {
						l := lRaw.(Lineitem)
						if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
							if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
								results = append(results, l)
							}
						}
					}
					return results
				}()) > 0 {
					results = append(results, o)
				}
			}
		}
		return results
	}()
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, o := range late_orders {
			key := o.O_orderpriority
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, o)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key.(any)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				O_orderpriority: g.Key.(any),
				Order_count:     len(g.Items),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q4_returns_count_of_orders_with_late_lineitems_in_range()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
