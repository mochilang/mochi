//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-13T18:09:23Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q4_returns_count_of_orders_with_late_lineitems_in_range() {
	expect(_equal(result, []v{v{
		O_orderpriority: "1-URGENT",
		Order_count:     1,
	}, v{
		O_orderpriority: "2-HIGH",
		Order_count:     1,
	}}))
}

var orders []OrdersItem
var lineitem []LineitemItem
var start_date string
var end_date string
var date_filtered_orders []OrdersItem
var late_orders []OrdersItem
var result []Result

func main() {
	orders = _convSlice[v, OrdersItem]([]OrdersItem{OrdersItem{
		1,
		"1993-07-01",
		"1-URGENT",
	}, OrdersItem{
		2,
		"1993-07-15",
		"2-HIGH",
	}, OrdersItem{
		3,
		"1993-08-01",
		"3-NORMAL",
	}})
	lineitem = _convSlice[v, LineitemItem]([]LineitemItem{
		LineitemItem{
			1,
			"1993-07-10",
			"1993-07-12",
		},
		LineitemItem{
			1,
			"1993-07-12",
			"1993-07-10",
		},
		LineitemItem{
			2,
			"1993-07-20",
			"1993-07-25",
		},
		LineitemItem{
			3,
			"1993-08-02",
			"1993-08-01",
		},
		LineitemItem{
			3,
			"1993-08-05",
			"1993-08-10",
		},
	})
	start_date = "1993-07-01"
	end_date = "1993-08-01"
	date_filtered_orders = func() []OrdersItem {
		results := []OrdersItem{}
		for _, o := range orders {
			if (o.O_orderdate >= start_date) && (o.O_orderdate < end_date) {
				if (o.O_orderdate >= start_date) && (o.O_orderdate < end_date) {
					results = append(results, o)
				}
			}
		}
		return results
	}()
	late_orders = func() []OrdersItem {
		results := []OrdersItem{}
		for _, o := range date_filtered_orders {
			if len(func() []LineitemItem {
				results := []LineitemItem{}
				for _, l := range lineitem {
					if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
						if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
							results = append(results, l)
						}
					}
				}
				return results
			}()) > 0 {
				if len(func() []LineitemItem {
					results := []LineitemItem{}
					for _, l := range lineitem {
						if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
							if (l.L_orderkey == o.O_orderkey) && (l.L_commitdate < l.L_receiptdate) {
								results = append(results, l)
							}
						}
					}
					return results
				}()) > 0 {
					results = append(results, o)
				}
			}
		}
		return results
	}()
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, o := range late_orders {
			key := o.O_orderpriority
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			_item := map[string]any{}
			_item["o_orderkey"] = o.O_orderkey
			_item["o_orderdate"] = o.O_orderdate
			_item["o_orderpriority"] = o.O_orderpriority
			_item["o"] = o
			g.Items = append(g.Items, _item)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				g.Key,
				len(g.Items),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q4_returns_count_of_orders_with_late_lineitems_in_range()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
