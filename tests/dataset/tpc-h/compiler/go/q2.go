//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:02:38Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type v map[string]any

type Region struct {
	R_regionkey int    `json:"r_regionkey"`
	R_name      string `json:"r_name"`
}

type Nation struct {
	N_nationkey int    `json:"n_nationkey"`
	N_regionkey int    `json:"n_regionkey"`
	N_name      string `json:"n_name"`
}

type Supplier struct {
	S_suppkey   int     `json:"s_suppkey"`
	S_name      string  `json:"s_name"`
	S_address   string  `json:"s_address"`
	S_nationkey int     `json:"s_nationkey"`
	S_phone     string  `json:"s_phone"`
	S_acctbal   float64 `json:"s_acctbal"`
	S_comment   string  `json:"s_comment"`
}

type Part struct {
	P_partkey int    `json:"p_partkey"`
	P_type    string `json:"p_type"`
	P_size    int    `json:"p_size"`
	P_mfgr    string `json:"p_mfgr"`
}

type Partsupp struct {
	Ps_partkey    int     `json:"ps_partkey"`
	Ps_suppkey    int     `json:"ps_suppkey"`
	Ps_supplycost float64 `json:"ps_supplycost"`
}

type Europe_supplier struct {
	S Supplier `json:"s"`
	N Nation   `json:"n"`
}

type Target_partsupp struct {
	S_acctbal     float64 `json:"s_acctbal"`
	S_name        string  `json:"s_name"`
	N_name        string  `json:"n_name"`
	P_partkey     int     `json:"p_partkey"`
	P_mfgr        string  `json:"p_mfgr"`
	S_address     string  `json:"s_address"`
	S_phone       string  `json:"s_phone"`
	S_comment     string  `json:"s_comment"`
	Ps_supplycost float64 `json:"ps_supplycost"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
	expect(_equal(result, []map[string]any{map[string]any{
		"s_acctbal":     any(1000.0),
		"s_name":        any("BestSupplier"),
		"n_name":        any("FRANCE"),
		"p_partkey":     any(1000),
		"p_mfgr":        any("M1"),
		"s_address":     any("123 Rue"),
		"s_phone":       any("123"),
		"s_comment":     any("Fast and reliable"),
		"ps_supplycost": any(10.0),
	}}))
}

var region []Region
var nation []Nation
var supplier []Supplier
var part []Part
var partsupp []Partsupp
var europe_nations []Nation
var europe_suppliers []Europe_supplier
var target_parts []Part
var target_partsupp []Target_partsupp
var costs []float64
var min_cost float64
var result []Target_partsupp

func main() {
	region = []Region{Region{
		R_regionkey: 1,
		R_name:      "EUROPE",
	}, Region{
		R_regionkey: 2,
		R_name:      "ASIA",
	}}
	nation = []Nation{Nation{
		N_nationkey: 10,
		N_regionkey: 1,
		N_name:      "FRANCE",
	}, Nation{
		N_nationkey: 20,
		N_regionkey: 2,
		N_name:      "CHINA",
	}}
	supplier = []Supplier{Supplier{
		S_suppkey:   100,
		S_name:      "BestSupplier",
		S_address:   "123 Rue",
		S_nationkey: 10,
		S_phone:     "123",
		S_acctbal:   1000.0,
		S_comment:   "Fast and reliable",
	}, Supplier{
		S_suppkey:   200,
		S_name:      "AltSupplier",
		S_address:   "456 Way",
		S_nationkey: 20,
		S_phone:     "456",
		S_acctbal:   500.0,
		S_comment:   "Slow",
	}}
	part = []Part{Part{
		P_partkey: 1000,
		P_type:    "LARGE BRASS",
		P_size:    15,
		P_mfgr:    "M1",
	}, Part{
		P_partkey: 2000,
		P_type:    "SMALL COPPER",
		P_size:    15,
		P_mfgr:    "M2",
	}}
	partsupp = []Partsupp{Partsupp{
		Ps_partkey:    1000,
		Ps_suppkey:    100,
		Ps_supplycost: 10.0,
	}, Partsupp{
		Ps_partkey:    1000,
		Ps_suppkey:    200,
		Ps_supplycost: 15.0,
	}}
	europe_nations = func() []Nation {
		results := []Nation{}
		for _, r := range region {
			if r.R_name == "EUROPE" {
				for _, n := range nation {
					if !(n.N_regionkey == r.R_regionkey) {
						continue
					}
					results = append(results, n)
				}
			}
		}
		return results
	}()
	europe_suppliers = func() []Europe_supplier {
		results := []Europe_supplier{}
		for _, s := range supplier {
			for _, n := range europe_nations {
				if !(s.S_nationkey == n.N_nationkey) {
					continue
				}
				results = append(results, Europe_supplier{
					S: s,
					N: n,
				})
			}
		}
		return results
	}()
	target_parts = func() []Part {
		results := []Part{}
		for _, p := range part {
			if (p.P_size == 15) && (p.P_type == "LARGE BRASS") {
				if (p.P_size == 15) && (p.P_type == "LARGE BRASS") {
					results = append(results, p)
				}
			}
		}
		return results
	}()
	target_partsupp = func() []Target_partsupp {
		results := []Target_partsupp{}
		for _, ps := range partsupp {
			for _, p := range target_parts {
				if !(ps.Ps_partkey == p.P_partkey) {
					continue
				}
				for _, s := range europe_suppliers {
					if !(ps.Ps_suppkey == s.S.S_suppkey) {
						continue
					}
					results = append(results, Target_partsupp{
						S_acctbal:     s.S.S_acctbal,
						S_name:        s.S.S_name,
						N_name:        s.N.N_name,
						P_partkey:     p.P_partkey,
						P_mfgr:        p.P_mfgr,
						S_address:     s.S.S_address,
						S_phone:       s.S.S_phone,
						S_comment:     s.S.S_comment,
						Ps_supplycost: ps.Ps_supplycost,
					})
				}
			}
		}
		return results
	}()
	costs = func() []float64 {
		results := []float64{}
		for _, x := range target_partsupp {
			results = append(results, x.Ps_supplycost)
		}
		return results
	}()
	min_cost = _minOrdered[float64](any(costs))
	result = func() []Target_partsupp {
		src := _toAnySlice(target_partsupp)
		resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return x
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return (x.Ps_supplycost == min_cost)
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return -x.S_acctbal
		}, skip: -1, take: -1})
		out := make([]Target_partsupp, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Target_partsupp)
		}
		return out
	}()
	func() { b, _ := json.Marshal(any(result)); fmt.Println(string(b)) }()
	test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
