//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:38:47Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
	expect(_equal(result, []v{v{
		S_acctbal:     1000.0,
		S_name:        "BestSupplier",
		N_name:        "FRANCE",
		P_partkey:     1000,
		P_mfgr:        "M1",
		S_address:     "123 Rue",
		S_phone:       "123",
		S_comment:     "Fast and reliable",
		Ps_supplycost: 10.0,
	}}))
}

var region []RegionItem
var nation []NationItem
var supplier []SupplierItem
var part []PartItem
var partsupp []PartsuppItem
var europe_nations []NationItem
var europe_suppliers []Europe_suppliers
var target_parts []PartItem
var target_partsupp []Target_partsupp
var costs []any
var min_cost any
var result []Target_partsupp

func main() {
	region = _convSlice[v, RegionItem]([]RegionItem{RegionItem{
		1,
		"EUROPE",
	}, RegionItem{
		2,
		"ASIA",
	}})
	nation = _convSlice[v, NationItem]([]NationItem{NationItem{
		10,
		1,
		"FRANCE",
	}, NationItem{
		20,
		2,
		"CHINA",
	}})
	supplier = _convSlice[v, SupplierItem]([]SupplierItem{SupplierItem{
		100,
		"BestSupplier",
		"123 Rue",
		10,
		"123",
		1000.0,
		"Fast and reliable",
	}, SupplierItem{
		200,
		"AltSupplier",
		"456 Way",
		20,
		"456",
		500.0,
		"Slow",
	}})
	part = _convSlice[v, PartItem]([]PartItem{PartItem{
		1000,
		"LARGE BRASS",
		15,
		"M1",
	}, PartItem{
		2000,
		"SMALL COPPER",
		15,
		"M2",
	}})
	partsupp = _convSlice[v, PartsuppItem]([]PartsuppItem{PartsuppItem{
		1000,
		100,
		10.0,
	}, PartsuppItem{
		1000,
		200,
		15.0,
	}})
	europe_nations = func() []NationItem {
		results := []NationItem{}
		for _, r := range region {
			if r.R_name == "EUROPE" {
				for _, n := range nation {
					if !(n.N_regionkey == r.R_regionkey) {
						continue
					}
					results = append(results, n)
				}
			}
		}
		return results
	}()
	europe_suppliers = _convSlice[v, Europe_suppliers](func() []Europe_suppliers {
		results := []Europe_suppliers{}
		for _, s := range supplier {
			for _, n := range europe_nations {
				if !(s.S_nationkey == n.N_nationkey) {
					continue
				}
				results = append(results, Europe_suppliers{
					s,
					n,
				})
			}
		}
		return results
	}())
	target_parts = func() []PartItem {
		results := []PartItem{}
		for _, p := range part {
			if (p.P_size == 15) && (p.P_type == "LARGE BRASS") {
				if (p.P_size == 15) && (p.P_type == "LARGE BRASS") {
					results = append(results, p)
				}
			}
		}
		return results
	}()
	target_partsupp = _convSlice[v, Target_partsupp](func() []Target_partsupp {
		results := []Target_partsupp{}
		for _, ps := range partsupp {
			for _, p := range target_parts {
				if !(ps.Ps_partkey == p.P_partkey) {
					continue
				}
				for _, s := range europe_suppliers {
					if !(_equal(ps.Ps_suppkey, _toAnyMap(s.S)["s_suppkey"])) {
						continue
					}
					results = append(results, Target_partsupp{
						_toAnyMap(s.S)["s_acctbal"],
						_toAnyMap(s.S)["s_name"],
						_toAnyMap(s.N)["n_name"],
						p.P_partkey,
						p.P_mfgr,
						_toAnyMap(s.S)["s_address"],
						_toAnyMap(s.S)["s_phone"],
						_toAnyMap(s.S)["s_comment"],
						ps.Ps_supplycost,
					})
				}
			}
		}
		return results
	}())
	costs = func() []any {
		results := []any{}
		for _, x := range target_partsupp {
			results = append(results, x.Ps_supplycost)
		}
		return results
	}()
	min_cost = _min(costs)
	result = func() []Target_partsupp {
		src := _toAnySlice(target_partsupp)
		resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return x
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return _equal(x.Ps_supplycost, min_cost)
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var x Target_partsupp
			if tmp0 != nil {
				x = tmp0.(Target_partsupp)
			}
			_ = x
			return -(x.S_acctbal).(float64)
		}, skip: -1, take: -1})
		out := make([]Target_partsupp, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Target_partsupp)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _min(v any) any {
	if g, ok := v.(*data.Group); ok {
		v = g.Items
	}
	switch s := v.(type) {
	case []int:
		if len(s) == 0 {
			return 0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []float64:
		if len(s) == 0 {
			return 0.0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []string:
		if len(s) == 0 {
			return ""
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []any:
		if len(s) == 0 {
			return 0
		}
		switch s[0].(type) {
		case string:
			m := s[0].(string)
			for _, it := range s[1:] {
				v := it.(string)
				if v < m {
					m = v
				}
			}
			return m
		case int, int64, float64:
			var m float64
			var isFloat bool
			switch n := s[0].(type) {
			case int:
				m = float64(n)
			case int64:
				m = float64(n)
			case float64:
				m = n
				isFloat = true
			}
			for _, it := range s[1:] {
				switch v := it.(type) {
				case int:
					if float64(v) < m {
						m = float64(v)
					}
				case int64:
					if float64(v) < m {
						m = float64(v)
					}
				case float64:
					if v < m {
						m = v
					}
					isFloat = true
				}
			}
			if isFloat {
				return m
			}
			return int(m)
		default:
			panic("min() expects numbers or strings")
		}
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Slice {
			if rv.Len() == 0 {
				return 0
			}
			m := rv.Index(0).Interface()
			switch m.(type) {
			case int, int64, float64:
				items := make([]any, rv.Len())
				for i := 0; i < rv.Len(); i++ {
					items[i] = rv.Index(i).Interface()
				}
				return _min(items)
			}
		}
		panic("min() expects list or group")
	}
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _toAnyMap(m any) map[string]any {
	switch v := m.(type) {
	case map[string]any:
		return v
	case map[string]string:
		out := make(map[string]any, len(v))
		for k, vv := range v {
			out[k] = vv
		}
		return out
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Struct {
			out := make(map[string]any, rv.NumField())
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					comma := strings.Index(tag, ",")
					if comma >= 0 {
						tag = tag[:comma]
					}
					if tag != "-" {
						name = tag
					}
				}
				out[name] = rv.Field(i).Interface()
			}
			return out
		}
		return nil
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
