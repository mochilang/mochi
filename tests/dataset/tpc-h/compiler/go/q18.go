//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T02:56:55Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q18_returns_large_volume_customers_with_total_quantity___200() {
	expect(_equal(result, []v{v{
		C_name:    "Alice",
		C_custkey: 1,
		Revenue:   1700.0,
		C_acctbal: 1000.0,
		N_name:    "GERMANY",
		C_address: "123 Market St",
		C_phone:   "123-456",
		C_comment: "Premium client",
	}}))
}

var nation []Nation
var customer []Customer
var orders []Order
var lineitem []Lineitem
var threshold int
var result []Result

func main() {
	nation = _convSlice[v, Nation]([]Nation{Nation{
		N_nationkey: 1,
		N_name:      "GERMANY",
	}})
	customer = _convSlice[v, Customer]([]Customer{Customer{
		C_custkey:   1,
		C_name:      "Alice",
		C_acctbal:   1000.0,
		C_nationkey: 1,
		C_address:   "123 Market St",
		C_phone:     "123-456",
		C_comment:   "Premium client",
	}, Customer{
		C_custkey:   2,
		C_name:      "Bob",
		C_acctbal:   200.0,
		C_nationkey: 1,
		C_address:   "456 Side St",
		C_phone:     "987-654",
		C_comment:   "Frequent returns",
	}})
	orders = _convSlice[v, Order]([]Order{Order{
		O_orderkey: 100,
		O_custkey:  1,
	}, Order{
		O_orderkey: 200,
		O_custkey:  1,
	}, Order{
		O_orderkey: 300,
		O_custkey:  2,
	}})
	lineitem = _convSlice[v, Lineitem]([]Lineitem{Lineitem{
		L_orderkey:      100,
		L_quantity:      150,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
	}, Lineitem{
		L_orderkey:      200,
		L_quantity:      100,
		L_extendedprice: 800.0,
		L_discount:      0.0,
	}, Lineitem{
		L_orderkey:      300,
		L_quantity:      30,
		L_extendedprice: 300.0,
		L_discount:      0.05,
	}})
	threshold = 200
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, o := range orders {
				if !(o.O_custkey == c.C_custkey) {
					continue
				}
				for _, l := range lineitem {
					if !(l.L_orderkey == o.O_orderkey) {
						continue
					}
					for _, n := range nation {
						if !(n.N_nationkey == c.C_nationkey) {
							continue
						}
						key := v{
							C_name:    c.C_name,
							C_custkey: c.C_custkey,
							C_acctbal: c.C_acctbal,
							C_address: c.C_address,
							C_phone:   c.C_phone,
							C_comment: c.C_comment,
							N_name:    n.N_name,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["c_custkey"] = c.C_custkey
						_item["c_name"] = c.C_name
						_item["c_acctbal"] = c.C_acctbal
						_item["c_nationkey"] = c.C_nationkey
						_item["c_address"] = c.C_address
						_item["c_phone"] = c.C_phone
						_item["c_comment"] = c.C_comment
						_item["c"] = c
						_item["o_orderkey"] = o.O_orderkey
						_item["o_custkey"] = o.O_custkey
						_item["o"] = o
						_item["l_orderkey"] = l.L_orderkey
						_item["l_quantity"] = l.L_quantity
						_item["l_extendedprice"] = l.L_extendedprice
						_item["l_discount"] = l.L_discount
						_item["l"] = l
						_item["n_nationkey"] = n.N_nationkey
						_item["n_name"] = n.N_name
						_item["n"] = n
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: -_sum(func() []any {
				results := []any{}
				for _, x := range g.Items {
					results = append(results, ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * (float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64)).(float64)))
				}
				return results
			}())}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			if !(_sum(func() []any {
				results := []any{}
				for _, x := range g.Items {
					results = append(results, _getField(_getField(x, "l"), "l_quantity"))
				}
				return results
			}()) > float64(threshold)) {
				continue
			}
			results = append(results, Result{
				C_name:    _getField(g.Key, "c_name"),
				C_custkey: _getField(g.Key, "c_custkey"),
				Revenue: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * (float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64)).(float64)))
					}
					return results
				}()),
				C_acctbal: _getField(g.Key, "c_acctbal"),
				N_name:    _getField(g.Key, "n_name"),
				C_address: _getField(g.Key, "c_address"),
				C_phone:   _getField(g.Key, "c_phone"),
				C_comment: _getField(g.Key, "c_comment"),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q18_returns_large_volume_customers_with_total_quantity___200()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
