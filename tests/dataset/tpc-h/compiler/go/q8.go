//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T12:47:19Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"
)

type Customer struct {
	C_custkey   int `json:"c_custkey"`
	C_nationkey int `json:"c_nationkey"`
}

type Lineitem struct {
	L_orderkey      int     `json:"l_orderkey"`
	L_suppkey       int     `json:"l_suppkey"`
	L_partkey       int     `json:"l_partkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
}

type Nation struct {
	N_nationkey int    `json:"n_nationkey"`
	N_regionkey int    `json:"n_regionkey"`
	N_name      string `json:"n_name"`
}

type Order struct {
	O_orderkey  int    `json:"o_orderkey"`
	O_custkey   int    `json:"o_custkey"`
	O_orderdate string `json:"o_orderdate"`
}

type Part struct {
	P_partkey int    `json:"p_partkey"`
	P_type    string `json:"p_type"`
}

type Region struct {
	R_regionkey int    `json:"r_regionkey"`
	R_name      string `json:"r_name"`
}

type Result struct {
	O_year    any     `json:"o_year"`
	Mkt_share float64 `json:"mkt_share"`
}

type Supplier struct {
	S_suppkey int `json:"s_suppkey"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q8_returns_correct_market_share_for_BRAZIL_in_1995() {
	numerator := (1000.0 * 0.9)
	denominator := (numerator + (500.0 * 0.95))
	share := (numerator / denominator)
	_ = share
	expect(_equal(result, []v{v{
		O_year:    "1995",
		Mkt_share: share,
	}}))
}

var region []Region
var nation []Nation
var customer []Customer
var orders []Order
var lineitem []Lineitem
var supplier []Supplier
var part []Part
var start_date string
var end_date string
var target_type string
var target_nation string
var result []Result

func main() {
	region = []Region{Region{
		R_regionkey: 0,
		R_name:      "AMERICA",
	}}
	nation = []Nation{Nation{
		N_nationkey: 10,
		N_regionkey: 0,
		N_name:      "BRAZIL",
	}, Nation{
		N_nationkey: 20,
		N_regionkey: 0,
		N_name:      "CANADA",
	}}
	customer = []Customer{Customer{
		C_custkey:   1,
		C_nationkey: 10,
	}, Customer{
		C_custkey:   2,
		C_nationkey: 20,
	}}
	orders = []Order{Order{
		O_orderkey:  100,
		O_custkey:   1,
		O_orderdate: "1995-04-10",
	}, Order{
		O_orderkey:  200,
		O_custkey:   2,
		O_orderdate: "1995-07-15",
	}}
	lineitem = []Lineitem{Lineitem{
		L_orderkey:      100,
		L_suppkey:       1000,
		L_partkey:       5000,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
	}, Lineitem{
		L_orderkey:      200,
		L_suppkey:       2000,
		L_partkey:       5000,
		L_extendedprice: 500.0,
		L_discount:      0.05,
	}}
	supplier = []Supplier{Supplier{S_suppkey: 1000}, Supplier{S_suppkey: 2000}}
	part = []Part{Part{
		P_partkey: 5000,
		P_type:    "ECONOMY ANODIZED STEEL",
	}, Part{
		P_partkey: 6000,
		P_type:    "SMALL BRASS",
	}}
	start_date = "1995-01-01"
	end_date = "1996-12-31"
	target_type = "ECONOMY ANODIZED STEEL"
	target_nation = "BRAZIL"
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, l := range lineitem {
			for _, p := range part {
				if !(p.P_partkey == l.L_partkey) {
					continue
				}
				for _, s := range supplier {
					if !(s.S_suppkey == l.L_suppkey) {
						continue
					}
					for _, o := range orders {
						if !(o.O_orderkey == l.L_orderkey) {
							continue
						}
						for _, c := range customer {
							if !(c.C_custkey == o.O_custkey) {
								continue
							}
							for _, n := range nation {
								if !(n.N_nationkey == c.C_nationkey) {
									continue
								}
								for _, r := range region {
									if !(r.R_regionkey == n.N_regionkey) {
										continue
									}
									if (((p.P_type == target_type) && (o.O_orderdate >= start_date)) && (o.O_orderdate <= end_date)) && (r.R_name == "AMERICA") {
										key := string([]rune(o.O_orderdate)[0:4])
										ks := fmt.Sprint(key)
										g, ok := groups[ks]
										if !ok {
											g = &data.Group{Key: key}
											groups[ks] = g
											order = append(order, ks)
										}
										_item := map[string]any{}
										_item["l_orderkey"] = l.L_orderkey
										_item["l_suppkey"] = l.L_suppkey
										_item["l_partkey"] = l.L_partkey
										_item["l_extendedprice"] = l.L_extendedprice
										_item["l_discount"] = l.L_discount
										_item["l"] = l
										_item["p_partkey"] = p.P_partkey
										_item["p_type"] = p.P_type
										_item["p"] = p
										_item["s_suppkey"] = s.S_suppkey
										_item["s"] = s
										_item["o_orderkey"] = o.O_orderkey
										_item["o_custkey"] = o.O_custkey
										_item["o_orderdate"] = o.O_orderdate
										_item["o"] = o
										_item["c_custkey"] = c.C_custkey
										_item["c_nationkey"] = c.C_nationkey
										_item["c"] = c
										_item["n_nationkey"] = n.N_nationkey
										_item["n_regionkey"] = n.N_regionkey
										_item["n_name"] = n.N_name
										_item["n"] = n
										_item["r_regionkey"] = r.R_regionkey
										_item["r_name"] = r.R_name
										_item["r"] = r
										g.Items = append(g.Items, _item)
									}
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			year := it
			pairs[idx] = pair{item: it, key: year.Key}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, year := range items {
			results = append(results, Result{
				O_year: year.Key,
				Mkt_share: (_sum(func() []any {
					results := []any{}
					for _, x := range year.Items {
						results = append(results, func() any {
							_t := _equal(_getField(_getField(x, "n"), "n_name"), target_nation)
							if _equal(_t, true) {
								return ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * float64((float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64))))
							}
							return 0.0
						}())
					}
					return results
				}()) / _sum(func() []any {
					results := []any{}
					for _, x := range year.Items {
						results = append(results, ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * float64((float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64)))))
					}
					return results
				}())),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q8_returns_correct_market_share_for_BRAZIL_in_1995()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
