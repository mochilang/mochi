//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:46Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type v = Result

type Nation struct {
	N_nationkey int    `json:"n_nationkey"`
	N_name      string `json:"n_name"`
}

type Supplier struct {
	S_suppkey   int `json:"s_suppkey"`
	S_nationkey int `json:"s_nationkey"`
}

type Customer struct {
	C_custkey   int `json:"c_custkey"`
	C_nationkey int `json:"c_nationkey"`
}

type Order struct {
	O_orderkey int `json:"o_orderkey"`
	O_custkey  int `json:"o_custkey"`
}

type Lineitem struct {
	L_orderkey      int     `json:"l_orderkey"`
	L_suppkey       int     `json:"l_suppkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipdate      string  `json:"l_shipdate"`
}

type Result struct {
	Supp_nation any     `json:"supp_nation"`
	Cust_nation any     `json:"cust_nation"`
	L_year      any     `json:"l_year"`
	Revenue     float64 `json:"revenue"`
}

type GKey struct {
	Supp_nation string `json:"supp_nation"`
	Cust_nation string `json:"cust_nation"`
	L_year      string `json:"l_year"`
}

type GRow struct {
	L  Lineitem `json:"l"`
	O  Order    `json:"o"`
	C  Customer `json:"c"`
	S  Supplier `json:"s"`
	N1 Nation   `json:"n1"`
	N2 Nation   `json:"n2"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year() {
	expect(_equal(result, []map[string]any{map[string]any{
		"supp_nation": any("FRANCE"),
		"cust_nation": any("GERMANY"),
		"l_year":      any("1995"),
		"revenue":     any(900.0),
	}}))
}

var nation []Nation
var supplier []Supplier
var customer []Customer
var orders []Order
var lineitem []Lineitem
var start_date string
var end_date string
var nation1 string
var nation2 string
var result []Result

func main() {
	nation = []Nation{Nation{
		N_nationkey: 1,
		N_name:      "FRANCE",
	}, Nation{
		N_nationkey: 2,
		N_name:      "GERMANY",
	}}
	supplier = []Supplier{Supplier{
		S_suppkey:   100,
		S_nationkey: 1,
	}}
	customer = []Customer{Customer{
		C_custkey:   200,
		C_nationkey: 2,
	}}
	orders = []Order{Order{
		O_orderkey: 1000,
		O_custkey:  200,
	}}
	lineitem = []Lineitem{Lineitem{
		L_orderkey:      1000,
		L_suppkey:       100,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
		L_shipdate:      "1995-06-15",
	}, Lineitem{
		L_orderkey:      1000,
		L_suppkey:       100,
		L_extendedprice: 800.0,
		L_discount:      0.05,
		L_shipdate:      "1997-01-01",
	}}
	start_date = "1995-01-01"
	end_date = "1996-12-31"
	nation1 = "FRANCE"
	nation2 = "GERMANY"
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, l := range lineitem {
			for _, o := range orders {
				if !(o.O_orderkey == l.L_orderkey) {
					continue
				}
				for _, c := range customer {
					if !(c.C_custkey == o.O_custkey) {
						continue
					}
					for _, s := range supplier {
						if !(s.S_suppkey == l.L_suppkey) {
							continue
						}
						for _, n1 := range nation {
							if !(n1.N_nationkey == s.S_nationkey) {
								continue
							}
							for _, n2 := range nation {
								if !(n2.N_nationkey == c.C_nationkey) {
									continue
								}
								if (((l.L_shipdate >= start_date) && (l.L_shipdate <= end_date)) && ((n1.N_name == nation1) && (n2.N_name == nation2))) || ((n1.N_name == nation2) && (n2.N_name == nation1)) {
									key := GKey{
										Supp_nation: n1.N_name,
										Cust_nation: n2.N_name,
										L_year:      string([]rune(l.L_shipdate)[0:4]),
									}
									ks := fmt.Sprint(key)
									g, ok := groups[ks]
									if !ok {
										g = &data.Group{Key: key}
										groups[ks] = g
										order = append(order, ks)
									}
									g.Items = append(g.Items, GRow{L: l, O: o, C: c, S: s, N1: n1, N2: n2})
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{supp_nation, cust_nation, l_year})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				Supp_nation: any(g.Key.(GKey).Supp_nation),
				Cust_nation: any(g.Key.(GKey).Cust_nation),
				L_year:      any(g.Key.(GKey).L_year),
				Revenue: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(GRow)
						results = append(results, (x.L.L_extendedprice * (float64(1) - x.L.L_discount)))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(any(result)); fmt.Println(string(b)) }()
	test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
