//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T06:41:15Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer struct {
	C_custkey int     `json:"c_custkey"`
	C_phone   string  `json:"c_phone"`
	C_acctbal float64 `json:"c_acctbal"`
}

type Eligible_customer struct {
	Cntrycode string  `json:"cntrycode"`
	C_acctbal float64 `json:"c_acctbal"`
}

type Order struct {
	O_orderkey int `json:"o_orderkey"`
	O_custkey  int `json:"o_custkey"`
}

type Row struct {
	Cntrycode  string  `json:"cntrycode"`
	Numcust    int     `json:"numcust"`
	Totacctbal float64 `json:"totacctbal"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q22_returns_wealthy_inactive_customers_by_phone_prefix() {
	expect(_equal(result, []v{v{
		Cntrycode:  "13",
		Numcust:    1,
		Totacctbal: 600.0,
	}, v{
		Cntrycode:  "30",
		Numcust:    1,
		Totacctbal: 700.0,
	}}))
}

var customer []Customer
var orders []Order
var valid_codes []string
var avg_balance float64
var eligible_customers []Eligible_customer
var groups []*data.Group
var tmp []any
var result []any

func main() {
	customer = _convSlice[v, Customer]([]Customer{Customer{
		C_custkey: 1,
		C_phone:   "13-123-4567",
		C_acctbal: 600.0,
	}, Customer{
		C_custkey: 2,
		C_phone:   "31-456-7890",
		C_acctbal: 100.0,
	}, Customer{
		C_custkey: 3,
		C_phone:   "30-000-0000",
		C_acctbal: 700.0,
	}})
	orders = _convSlice[v, Order]([]Order{Order{
		O_orderkey: 10,
		O_custkey:  2,
	}})
	valid_codes = []string{
		"13",
		"31",
		"23",
		"29",
		"30",
		"18",
		"17",
	}
	avg_balance = _avgOrdered[float64](func() []float64 {
		results := []float64{}
		for _, c := range customer {
			if (c.C_acctbal > 0.0) && slices.Contains(valid_codes, string([]rune(c.C_phone)[0:2])) {
				if (c.C_acctbal > 0.0) && slices.Contains(valid_codes, string([]rune(c.C_phone)[0:2])) {
					results = append(results, c.C_acctbal)
				}
			}
		}
		return results
	}())
	eligible_customers = _convSlice[v, Eligible_customer](func() []Eligible_customer {
		results := []Eligible_customer{}
		for _, c := range customer {
			if (slices.Contains(valid_codes, string([]rune(c.C_phone)[0:2])) && (c.C_acctbal > avg_balance)) && (!len(func() []Order {
				results := []Order{}
				for _, o := range orders {
					if o.O_custkey == c.C_custkey {
						if o.O_custkey == c.C_custkey {
							results = append(results, o)
						}
					}
				}
				return results
			}()) > 0) {
				if (slices.Contains(valid_codes, string([]rune(c.C_phone)[0:2])) && (c.C_acctbal > avg_balance)) && (!len(func() []Order {
					results := []Order{}
					for _, o := range orders {
						if o.O_custkey == c.C_custkey {
							if o.O_custkey == c.C_custkey {
								results = append(results, o)
							}
						}
					}
					return results
				}()) > 0) {
					results = append(results, Eligible_customer{
						Cntrycode: string([]rune(c.C_phone)[0:2]),
						C_acctbal: c.C_acctbal,
					})
				}
			}
		}
		return results
	}())
	groups = func() []*data.Group {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range eligible_customers {
			key := c.Cntrycode
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, c)
		}
		results := []*data.Group{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, g)
		}
		return results
	}()
	tmp = []any{}
	result = func() []any {
		src := tmp
		resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any { r := _a[0]; _ = r; return r }, sortKey: func(_a ...any) any { r := _a[0]; _ = r; return _getField(r, "cntrycode") }, skip: -1, take: -1})
		out := make([]any, len(resAny))
		for i, v := range resAny {
			out[i] = v
		}
		return out
	}()
	for _, g := range groups {
		total := _sumOrdered[float64](func() []float64 {
			results := []float64{}
			for _, x := range g.Items {
				results = append(results, x.C_acctbal)
			}
			return results
		}())
		row := Row{
			Cntrycode:  g.Key,
			Numcust:    len(g.Items),
			Totacctbal: total,
		}
		tmp = append(tmp, row)
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q22_returns_wealthy_inactive_customers_by_phone_prefix()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
