//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T12:47:14Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"
)

type Customer struct {
	C_custkey    int    `json:"c_custkey"`
	C_mktsegment string `json:"c_mktsegment"`
}

type Lineitem struct {
	L_orderkey      int     `json:"l_orderkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipdate      string  `json:"l_shipdate"`
}

type Order struct {
	O_orderkey     int    `json:"o_orderkey"`
	O_custkey      int    `json:"o_custkey"`
	O_orderdate    string `json:"o_orderdate"`
	O_shippriority int    `json:"o_shippriority"`
}

type Order_line_join struct {
	L_orderkey     any     `json:"l_orderkey"`
	Revenue        float64 `json:"revenue"`
	O_orderdate    any     `json:"o_orderdate"`
	O_shippriority any     `json:"o_shippriority"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q3_returns_revenue_per_order_with_correct_priority() {
	expect(_equal(order_line_join, []v{v{
		L_orderkey:     100,
		Revenue:        ((1000.0 * 0.95) + 500.0),
		O_orderdate:    "1995-03-14",
		O_shippriority: 1,
	}}))
}

var customer []Customer
var orders []Order
var lineitem []Lineitem
var cutoff string
var segment string
var building_customers []Customer
var valid_orders []Order
var valid_lineitems []Lineitem
var order_line_join []Order_line_join

func main() {
	customer = []Customer{Customer{
		C_custkey:    1,
		C_mktsegment: "BUILDING",
	}, Customer{
		C_custkey:    2,
		C_mktsegment: "AUTOMOBILE",
	}}
	orders = []Order{Order{
		O_orderkey:     100,
		O_custkey:      1,
		O_orderdate:    "1995-03-14",
		O_shippriority: 1,
	}, Order{
		O_orderkey:     200,
		O_custkey:      2,
		O_orderdate:    "1995-03-10",
		O_shippriority: 2,
	}}
	lineitem = []Lineitem{Lineitem{
		L_orderkey:      100,
		L_extendedprice: 1000.0,
		L_discount:      0.05,
		L_shipdate:      "1995-03-16",
	}, Lineitem{
		L_orderkey:      100,
		L_extendedprice: 500.0,
		L_discount:      0.0,
		L_shipdate:      "1995-03-20",
	}, Lineitem{
		L_orderkey:      200,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
		L_shipdate:      "1995-03-14",
	}}
	cutoff = "1995-03-15"
	segment = "BUILDING"
	building_customers = func() []Customer {
		results := []Customer{}
		for _, c := range customer {
			if c.C_mktsegment == segment {
				if c.C_mktsegment == segment {
					results = append(results, c)
				}
			}
		}
		return results
	}()
	valid_orders = func() []Order {
		results := []Order{}
		for _, o := range orders {
			if o.O_orderdate < cutoff {
				for _, c := range building_customers {
					if !(o.O_custkey == c.C_custkey) {
						continue
					}
					results = append(results, o)
				}
			}
		}
		return results
	}()
	valid_lineitems = func() []Lineitem {
		results := []Lineitem{}
		for _, l := range lineitem {
			if l.L_shipdate > cutoff {
				if l.L_shipdate > cutoff {
					results = append(results, l)
				}
			}
		}
		return results
	}()
	order_line_join = func() []Order_line_join {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, o := range valid_orders {
			for _, l := range valid_lineitems {
				if !(l.L_orderkey == o.O_orderkey) {
					continue
				}
				key := v{
					O_orderkey:     o.O_orderkey,
					O_orderdate:    o.O_orderdate,
					O_shippriority: o.O_shippriority,
				}
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				_item := map[string]any{}
				_item["o_orderkey"] = o.O_orderkey
				_item["o_custkey"] = o.O_custkey
				_item["o_orderdate"] = o.O_orderdate
				_item["o_shippriority"] = o.O_shippriority
				_item["o"] = o
				_item["l_orderkey"] = l.L_orderkey
				_item["l_extendedprice"] = l.L_extendedprice
				_item["l_discount"] = l.L_discount
				_item["l_shipdate"] = l.L_shipdate
				_item["l"] = l
				g.Items = append(g.Items, _item)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{-_sum(func() []any {
				results := []any{}
				for _, r := range g.Items {
					results = append(results, ((_getField(_getField(r, "l"), "l_extendedprice")).(float64) * float64((float64(1) - (_getField(_getField(r, "l"), "l_discount")).(float64)))))
				}
				return results
			}()), _getField(g.Key, "o_orderdate")})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Order_line_join{}
		for _, g := range items {
			results = append(results, Order_line_join{
				L_orderkey: _getField(g.Key, "o_orderkey"),
				Revenue: _sum(func() []any {
					results := []any{}
					for _, r := range g.Items {
						results = append(results, ((_getField(_getField(r, "l"), "l_extendedprice")).(float64) * float64((float64(1) - (_getField(_getField(r, "l"), "l_discount")).(float64)))))
					}
					return results
				}()),
				O_orderdate:    _getField(g.Key, "o_orderdate"),
				O_shippriority: _getField(g.Key, "o_shippriority"),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(order_line_join); fmt.Println(string(b)) }()
	test_Q3_returns_revenue_per_order_with_correct_priority()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
