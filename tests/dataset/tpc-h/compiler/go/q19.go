//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:03:12Z

package main

import (
	"encoding/json"
	"fmt"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type v map[string]any

type Part struct {
	P_partkey   int    `json:"p_partkey"`
	P_brand     string `json:"p_brand"`
	P_container string `json:"p_container"`
	P_size      int    `json:"p_size"`
}

type Lineitem struct {
	L_partkey       int     `json:"l_partkey"`
	L_quantity      int     `json:"l_quantity"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipmode      string  `json:"l_shipmode"`
	L_shipinstruct  string  `json:"l_shipinstruct"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q19_returns_total_revenue_from_qualifying_branded_parts() {
	expect((result == 2800.0))
}

var part []Part
var lineitem []Lineitem
var revenues []float64
var result float64

func main() {
	part = []Part{Part{
		P_partkey:   1,
		P_brand:     "Brand#12",
		P_container: "SM BOX",
		P_size:      3,
	}, Part{
		P_partkey:   2,
		P_brand:     "Brand#23",
		P_container: "MED BOX",
		P_size:      5,
	}, Part{
		P_partkey:   3,
		P_brand:     "Brand#34",
		P_container: "LG BOX",
		P_size:      15,
	}}
	lineitem = []Lineitem{Lineitem{
		L_partkey:       1,
		L_quantity:      5,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
		L_shipmode:      "AIR",
		L_shipinstruct:  "DELIVER IN PERSON",
	}, Lineitem{
		L_partkey:       2,
		L_quantity:      15,
		L_extendedprice: 2000.0,
		L_discount:      0.05,
		L_shipmode:      "AIR REG",
		L_shipinstruct:  "DELIVER IN PERSON",
	}, Lineitem{
		L_partkey:       3,
		L_quantity:      35,
		L_extendedprice: 1500.0,
		L_discount:      0.0,
		L_shipmode:      "AIR",
		L_shipinstruct:  "DELIVER IN PERSON",
	}}
	revenues = func() []float64 {
		results := []float64{}
		for _, l := range lineitem {
			for _, p := range part {
				if !(p.P_partkey == l.L_partkey) {
					continue
				}
				if (((((((p.P_brand == "Brand#12") && (slices.Contains([]string{
					"SM CASE",
					"SM BOX",
					"SM PACK",
					"SM PKG",
				}, p.P_container))) && ((l.L_quantity >= 1) && (l.L_quantity <= 11))) && ((p.P_size >= 1) && (p.P_size <= 5))) || ((((p.P_brand == "Brand#23") && (slices.Contains([]string{
					"MED BAG",
					"MED BOX",
					"MED PKG",
					"MED PACK",
				}, p.P_container))) && ((l.L_quantity >= 10) && (l.L_quantity <= 20))) && ((p.P_size >= 1) && (p.P_size <= 10)))) || ((((p.P_brand == "Brand#34") && (slices.Contains([]string{
					"LG CASE",
					"LG BOX",
					"LG PACK",
					"LG PKG",
				}, p.P_container))) && ((l.L_quantity >= 20) && (l.L_quantity <= 30))) && ((p.P_size >= 1) && (p.P_size <= 15)))) && slices.Contains([]string{"AIR", "AIR REG"}, l.L_shipmode)) && (l.L_shipinstruct == "DELIVER IN PERSON") {
					if (((((((p.P_brand == "Brand#12") && (slices.Contains([]string{
						"SM CASE",
						"SM BOX",
						"SM PACK",
						"SM PKG",
					}, p.P_container))) && ((l.L_quantity >= 1) && (l.L_quantity <= 11))) && ((p.P_size >= 1) && (p.P_size <= 5))) || ((((p.P_brand == "Brand#23") && (slices.Contains([]string{
						"MED BAG",
						"MED BOX",
						"MED PKG",
						"MED PACK",
					}, p.P_container))) && ((l.L_quantity >= 10) && (l.L_quantity <= 20))) && ((p.P_size >= 1) && (p.P_size <= 10)))) || ((((p.P_brand == "Brand#34") && (slices.Contains([]string{
						"LG CASE",
						"LG BOX",
						"LG PACK",
						"LG PKG",
					}, p.P_container))) && ((l.L_quantity >= 20) && (l.L_quantity <= 30))) && ((p.P_size >= 1) && (p.P_size <= 15)))) && slices.Contains([]string{"AIR", "AIR REG"}, l.L_shipmode)) && (l.L_shipinstruct == "DELIVER IN PERSON") {
						results = append(results, (l.L_extendedprice * (float64(1) - l.L_discount)))
					}
				}
			}
		}
		return results
	}()
	result = _sumOrdered[float64](any(revenues))
	func() { b, _ := json.Marshal(any(result)); fmt.Println(string(b)) }()
	test_Q19_returns_total_revenue_from_qualifying_branded_parts()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
