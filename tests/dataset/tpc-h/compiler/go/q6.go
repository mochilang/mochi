//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-13T18:09:23Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q6_calculates_revenue_from_qualified_lineitems() {
	expect((result == ((1000.0 * 0.06) + (500.0 * 0.07))))
}

var lineitem []LineitemItem
var result []float64

func main() {
	lineitem = _convSlice[v, LineitemItem]([]LineitemItem{
		LineitemItem{
			1000.0,
			0.06,
			"1994-02-15",
			10,
		},
		LineitemItem{
			500.0,
			0.07,
			"1994-03-10",
			23,
		},
		LineitemItem{
			400.0,
			0.04,
			"1994-04-10",
			15,
		},
		LineitemItem{
			200.0,
			0.06,
			"1995-01-01",
			5,
		},
	})
	result = func() []float64 {
		results := []float64{}
		for _, l := range lineitem {
			if ((((l.L_shipdate >= "1994-01-01") && (l.L_shipdate < "1995-01-01")) && (l.L_discount >= 0.05)) && (l.L_discount <= 0.07)) && (l.L_quantity < 24) {
				if ((((l.L_shipdate >= "1994-01-01") && (l.L_shipdate < "1995-01-01")) && (l.L_discount >= 0.05)) && (l.L_discount <= 0.07)) && (l.L_quantity < 24) {
					results = append(results, _sum((l.L_extendedprice * l.L_discount)))
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q6_calculates_revenue_from_qualified_lineitems()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
