//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T02:55:24Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Lineitem struct {
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipdate      string  `json:"l_shipdate"`
	L_quantity      int     `json:"l_quantity"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q6_calculates_revenue_from_qualified_lineitems() {
	expect((result == ((1000.0 * 0.06) + (500.0 * 0.07))))
}

var lineitem []Lineitem
var result []float64

func main() {
	lineitem = []Lineitem{
		Lineitem{
			L_extendedprice: 1000.0,
			L_discount:      0.06,
			L_shipdate:      "1994-02-15",
			L_quantity:      10,
		},
		Lineitem{
			L_extendedprice: 500.0,
			L_discount:      0.07,
			L_shipdate:      "1994-03-10",
			L_quantity:      23,
		},
		Lineitem{
			L_extendedprice: 400.0,
			L_discount:      0.04,
			L_shipdate:      "1994-04-10",
			L_quantity:      15,
		},
		Lineitem{
			L_extendedprice: 200.0,
			L_discount:      0.06,
			L_shipdate:      "1995-01-01",
			L_quantity:      5,
		},
	}
	result = func() []float64 {
		results := []float64{}
		for _, lRaw := range lineitem {
			l := lRaw.(Lineitem)
			if ((((l.L_shipdate >= "1994-01-01") && (l.L_shipdate < "1995-01-01")) && (l.L_discount >= 0.05)) && (l.L_discount <= 0.07)) && (l.L_quantity < 24) {
				if ((((l.L_shipdate >= "1994-01-01") && (l.L_shipdate < "1995-01-01")) && (l.L_discount >= 0.05)) && (l.L_discount <= 0.07)) && (l.L_quantity < 24) {
					results = append(results, _sum((l.L_extendedprice * l.L_discount)))
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q6_calculates_revenue_from_qualified_lineitems()
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}
