//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T06:41:14Z

package main

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Filtered struct {
	Is_promo bool    `json:"is_promo"`
	Revenue  float64 `json:"revenue"`
}

type Lineitem struct {
	L_partkey       int     `json:"l_partkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipdate      string  `json:"l_shipdate"`
}

type Part struct {
	P_partkey int    `json:"p_partkey"`
	P_type    string `json:"p_type"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q14_calculates_promo_revenue_percent_in_1995_09() {
	promo := (1000.0 * 0.9)
	total := (float64(900) + 800.0)
	expected := ((100.0 * promo) / total)
	_ = expected
	expect((result == expected))
}

var part []Part
var lineitem []Lineitem
var start_date string
var end_date string
var filtered []Filtered
var promo_sum float64
var total_sum float64
var result float64

func main() {
	part = _convSlice[v, Part]([]Part{Part{
		P_partkey: 1,
		P_type:    "PROMO LUXURY",
	}, Part{
		P_partkey: 2,
		P_type:    "STANDARD BRASS",
	}})
	lineitem = _convSlice[v, Lineitem]([]Lineitem{Lineitem{
		L_partkey:       1,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
		L_shipdate:      "1995-09-05",
	}, Lineitem{
		L_partkey:       2,
		L_extendedprice: 800.0,
		L_discount:      0.0,
		L_shipdate:      "1995-09-20",
	}, Lineitem{
		L_partkey:       1,
		L_extendedprice: 500.0,
		L_discount:      0.2,
		L_shipdate:      "1995-10-02",
	}})
	start_date = "1995-09-01"
	end_date = "1995-10-01"
	filtered = _convSlice[v, Filtered](func() []Filtered {
		results := []Filtered{}
		for _, l := range lineitem {
			if (l.L_shipdate >= start_date) && (l.L_shipdate < end_date) {
				for _, p := range part {
					if !(p.P_partkey == l.L_partkey) {
						continue
					}
					results = append(results, Filtered{
						Is_promo: strings.Contains(p.P_type, "PROMO"),
						Revenue:  (l.L_extendedprice * (float64(1) - l.L_discount)),
					})
				}
			}
		}
		return results
	}())
	promo_sum = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, x := range filtered {
			if x.Is_promo {
				if x.Is_promo {
					results = append(results, x.Revenue)
				}
			}
		}
		return results
	}())
	total_sum = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, x := range filtered {
			results = append(results, x.Revenue)
		}
		return results
	}())
	result = ((100.0 * promo_sum) / total_sum)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q14_calculates_promo_revenue_percent_in_1995_09()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
