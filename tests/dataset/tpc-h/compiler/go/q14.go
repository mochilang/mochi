//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-13T18:09:24Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q14_calculates_promo_revenue_percent_in_1995_09() {
	promo := (1000.0 * 0.9)
	total := (float64(900) + 800.0)
	expected := ((100.0 * promo) / total)
	_ = expected
	expect((result == expected))
}

var part []PartItem
var lineitem []LineitemItem
var start_date string
var end_date string
var filtered []Filtered
var promo_sum float64
var total_sum float64
var result float64

func main() {
	part = _convSlice[v, PartItem]([]PartItem{PartItem{
		1,
		"PROMO LUXURY",
	}, PartItem{
		2,
		"STANDARD BRASS",
	}})
	lineitem = _convSlice[v, LineitemItem]([]LineitemItem{LineitemItem{
		1,
		1000.0,
		0.1,
		"1995-09-05",
	}, LineitemItem{
		2,
		800.0,
		0.0,
		"1995-09-20",
	}, LineitemItem{
		1,
		500.0,
		0.2,
		"1995-10-02",
	}})
	start_date = "1995-09-01"
	end_date = "1995-10-01"
	filtered = _convSlice[v, Filtered](func() []Filtered {
		results := []Filtered{}
		for _, l := range lineitem {
			if (l.L_shipdate >= start_date) && (l.L_shipdate < end_date) {
				for _, p := range part {
					if !(p.P_partkey == l.L_partkey) {
						continue
					}
					results = append(results, Filtered{
						strings.Contains(p.P_type, "PROMO"),
						(l.L_extendedprice * (float64(1) - l.L_discount)),
					})
				}
			}
		}
		return results
	}())
	promo_sum = _sum(func() []any {
		results := []any{}
		for _, x := range filtered {
			if _exists(x.Is_promo) {
				if _exists(x.Is_promo) {
					results = append(results, x.Revenue)
				}
			}
		}
		return results
	}())
	total_sum = _sum(func() []any {
		results := []any{}
		for _, x := range filtered {
			results = append(results, x.Revenue)
		}
		return results
	}())
	result = ((100.0 * promo_sum) / total_sum)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q14_calculates_promo_revenue_percent_in_1995_09()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case map[string]int:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Slice, reflect.Array:
		return rv.Len() > 0
	case reflect.Map:
		return !rv.IsNil() && rv.Len() > 0
	case reflect.Pointer:
		return !rv.IsNil()
	case reflect.Struct:
		return !rv.IsZero()
	}
	return false
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
