//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T06:41:13Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"
)

type Customer struct {
	C_custkey   int `json:"c_custkey"`
	C_nationkey int `json:"c_nationkey"`
}

type Lineitem struct {
	L_orderkey      int     `json:"l_orderkey"`
	L_suppkey       int     `json:"l_suppkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
}

type Local_customer_supplier_order struct {
	Nation  string  `json:"nation"`
	Revenue float64 `json:"revenue"`
}

type Nation struct {
	N_nationkey int    `json:"n_nationkey"`
	N_regionkey int    `json:"n_regionkey"`
	N_name      string `json:"n_name"`
}

type Order struct {
	O_orderkey  int    `json:"o_orderkey"`
	O_custkey   int    `json:"o_custkey"`
	O_orderdate string `json:"o_orderdate"`
}

type Region struct {
	R_regionkey int    `json:"r_regionkey"`
	R_name      string `json:"r_name"`
}

type Result struct {
	N_name  any     `json:"n_name"`
	Revenue float64 `json:"revenue"`
}

type Supplier struct {
	S_suppkey   int `json:"s_suppkey"`
	S_nationkey int `json:"s_nationkey"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers() {
	expect(_equal(result, []v{v{
		N_name:  "JAPAN",
		Revenue: 950,
	}, v{
		N_name:  "INDIA",
		Revenue: 720,
	}}))
}

var region []Region
var nation []Nation
var customer []Customer
var supplier []Supplier
var orders []Order
var lineitem []Lineitem
var asia_nations []Nation
var local_customer_supplier_orders []Local_customer_supplier_order
var result []Result

func main() {
	region = _convSlice[v, Region]([]Region{Region{
		R_regionkey: 0,
		R_name:      "ASIA",
	}, Region{
		R_regionkey: 1,
		R_name:      "EUROPE",
	}})
	nation = _convSlice[v, Nation]([]Nation{Nation{
		N_nationkey: 10,
		N_regionkey: 0,
		N_name:      "JAPAN",
	}, Nation{
		N_nationkey: 20,
		N_regionkey: 0,
		N_name:      "INDIA",
	}, Nation{
		N_nationkey: 30,
		N_regionkey: 1,
		N_name:      "FRANCE",
	}})
	customer = _convSlice[v, Customer]([]Customer{Customer{
		C_custkey:   1,
		C_nationkey: 10,
	}, Customer{
		C_custkey:   2,
		C_nationkey: 20,
	}})
	supplier = _convSlice[v, Supplier]([]Supplier{Supplier{
		S_suppkey:   100,
		S_nationkey: 10,
	}, Supplier{
		S_suppkey:   200,
		S_nationkey: 20,
	}})
	orders = _convSlice[v, Order]([]Order{Order{
		O_orderkey:  1000,
		O_custkey:   1,
		O_orderdate: "1994-03-15",
	}, Order{
		O_orderkey:  2000,
		O_custkey:   2,
		O_orderdate: "1994-06-10",
	}, Order{
		O_orderkey:  3000,
		O_custkey:   2,
		O_orderdate: "1995-01-01",
	}})
	lineitem = _convSlice[v, Lineitem]([]Lineitem{Lineitem{
		L_orderkey:      1000,
		L_suppkey:       100,
		L_extendedprice: 1000.0,
		L_discount:      0.05,
	}, Lineitem{
		L_orderkey:      2000,
		L_suppkey:       200,
		L_extendedprice: 800.0,
		L_discount:      0.1,
	}, Lineitem{
		L_orderkey:      3000,
		L_suppkey:       200,
		L_extendedprice: 900.0,
		L_discount:      0.05,
	}})
	asia_nations = func() []Nation {
		results := []Nation{}
		for _, r := range region {
			if r.R_name == "ASIA" {
				for _, n := range nation {
					if !(n.N_regionkey == r.R_regionkey) {
						continue
					}
					results = append(results, n)
				}
			}
		}
		return results
	}()
	local_customer_supplier_orders = _convSlice[v, Local_customer_supplier_order](func() []Local_customer_supplier_order {
		results := []Local_customer_supplier_order{}
		for _, c := range customer {
			for _, n := range asia_nations {
				if !(c.C_nationkey == n.N_nationkey) {
					continue
				}
				for _, o := range orders {
					if !(o.O_custkey == c.C_custkey) {
						continue
					}
					for _, l := range lineitem {
						if !(l.L_orderkey == o.O_orderkey) {
							continue
						}
						for _, s := range supplier {
							if !(s.S_suppkey == l.L_suppkey) {
								continue
							}
							if ((o.O_orderdate >= "1994-01-01") && (o.O_orderdate < "1995-01-01")) && (s.S_nationkey == c.C_nationkey) {
								if ((o.O_orderdate >= "1994-01-01") && (o.O_orderdate < "1995-01-01")) && (s.S_nationkey == c.C_nationkey) {
									results = append(results, Local_customer_supplier_order{
										Nation:  n.N_name,
										Revenue: (l.L_extendedprice * (float64(1) - l.L_discount)),
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}())
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range local_customer_supplier_orders {
			key := r.Nation
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			_item := map[string]any{}
			_item["nation"] = r.Nation
			_item["revenue"] = r.Revenue
			_item["r"] = r
			g.Items = append(g.Items, _item)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: -_sum(func() []any {
				results := []any{}
				for _, x := range g.Items {
					results = append(results, _getField(x, "revenue"))
				}
				return results
			}())}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				N_name: g.Key,
				Revenue: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x, "revenue"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
