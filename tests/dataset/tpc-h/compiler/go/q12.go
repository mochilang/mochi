//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T02:55:26Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Lineitem struct {
	L_orderkey    int    `json:"l_orderkey"`
	L_shipmode    string `json:"l_shipmode"`
	L_commitdate  string `json:"l_commitdate"`
	L_receiptdate string `json:"l_receiptdate"`
	L_shipdate    string `json:"l_shipdate"`
}

type Order struct {
	O_orderkey      int    `json:"o_orderkey"`
	O_orderpriority string `json:"o_orderpriority"`
}

type Result struct {
	L_shipmode      any     `json:"l_shipmode"`
	High_line_count float64 `json:"high_line_count"`
	Low_line_count  float64 `json:"low_line_count"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q12_counts_lineitems_by_ship_mode_and_priority() {
	expect(_equal(result, []v{v{
		L_shipmode:      "MAIL",
		High_line_count: 1,
		Low_line_count:  0,
	}}))
}

var orders []Order
var lineitem []Lineitem
var result []Result

func main() {
	orders = []Order{Order{
		O_orderkey:      1,
		O_orderpriority: "1-URGENT",
	}, Order{
		O_orderkey:      2,
		O_orderpriority: "3-MEDIUM",
	}}
	lineitem = []Lineitem{Lineitem{
		L_orderkey:    1,
		L_shipmode:    "MAIL",
		L_commitdate:  "1994-02-10",
		L_receiptdate: "1994-02-15",
		L_shipdate:    "1994-02-05",
	}, Lineitem{
		L_orderkey:    2,
		L_shipmode:    "SHIP",
		L_commitdate:  "1994-03-01",
		L_receiptdate: "1994-02-28",
		L_shipdate:    "1994-02-27",
	}}
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, l := range lineitem {
			for _, o := range orders {
				if !(o.O_orderkey == l.L_orderkey) {
					continue
				}
				if ((((slices.Contains([]string{"MAIL", "SHIP"}, l.L_shipmode)) && (l.L_commitdate < l.L_receiptdate)) && (l.L_shipdate < l.L_commitdate)) && (l.L_receiptdate >= "1994-01-01")) && (l.L_receiptdate < "1995-01-01") {
					key := l.L_shipmode
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					_item := map[string]any{}
					_item["l_orderkey"] = l.L_orderkey
					_item["l_shipmode"] = l.L_shipmode
					_item["l_commitdate"] = l.L_commitdate
					_item["l_receiptdate"] = l.L_receiptdate
					_item["l_shipdate"] = l.L_shipdate
					_item["l"] = l
					_item["o_orderkey"] = o.O_orderkey
					_item["o_orderpriority"] = o.O_orderpriority
					_item["o"] = o
					g.Items = append(g.Items, _item)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key.(any)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				L_shipmode: g.Key.(any),
				High_line_count: _sumOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Lineitem)
						results = append(results, func() int {
							if slices.Contains([]string{"1-URGENT", "2-HIGH"}, (_getField(x.O, "o_orderpriority")).(string)) {
								return 1
							} else {
								return 0
							}
						}())
					}
					return results
				}()),
				Low_line_count: _sumOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Lineitem)
						results = append(results, func() int {
							if !(slices.Contains([]string{"1-URGENT", "2-HIGH"}, (_getField(x.O, "o_orderpriority")).(string))) {
								return 1
							} else {
								return 0
							}
						}())
					}
					return results
				}()),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q12_counts_lineitems_by_ship_mode_and_priority()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
