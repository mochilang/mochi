//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T08:32:12Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Lineitem struct {
	L_suppkey       int     `json:"l_suppkey"`
	L_extendedprice float64 `json:"l_extendedprice"`
	L_discount      float64 `json:"l_discount"`
	L_shipdate      string  `json:"l_shipdate"`
}

type Result struct {
	S_suppkey     int     `json:"s_suppkey"`
	S_name        string  `json:"s_name"`
	S_address     string  `json:"s_address"`
	S_phone       string  `json:"s_phone"`
	Total_revenue float64 `json:"total_revenue"`
}

type Revenue0 struct {
	Supplier_no   any     `json:"supplier_no"`
	Total_revenue float64 `json:"total_revenue"`
}

type Supplier struct {
	S_suppkey int    `json:"s_suppkey"`
	S_name    string `json:"s_name"`
	S_address string `json:"s_address"`
	S_phone   string `json:"s_phone"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q15_returns_top_revenue_supplier_s__for_Q1_1996() {
	rev := ((1000.0 * 0.9) + 500.0)
	_ = rev
	expect(_equal(result, []v{v{
		S_suppkey:     100,
		S_name:        "Best Supplier",
		S_address:     "123 Market St",
		S_phone:       "123-456",
		Total_revenue: rev,
	}}))
}

var supplier []Supplier
var lineitem []Lineitem
var start_date string
var end_date string
var revenue0 []Revenue0
var revenues []float64
var max_revenue float64
var result []Result

func main() {
	supplier = []Supplier{Supplier{
		S_suppkey: 100,
		S_name:    "Best Supplier",
		S_address: "123 Market St",
		S_phone:   "123-456",
	}, Supplier{
		S_suppkey: 200,
		S_name:    "Second Supplier",
		S_address: "456 Elm St",
		S_phone:   "987-654",
	}}
	lineitem = []Lineitem{Lineitem{
		L_suppkey:       100,
		L_extendedprice: 1000.0,
		L_discount:      0.1,
		L_shipdate:      "1996-01-15",
	}, Lineitem{
		L_suppkey:       100,
		L_extendedprice: 500.0,
		L_discount:      0.0,
		L_shipdate:      "1996-03-20",
	}, Lineitem{
		L_suppkey:       200,
		L_extendedprice: 800.0,
		L_discount:      0.05,
		L_shipdate:      "1995-12-30",
	}}
	start_date = "1996-01-01"
	end_date = "1996-04-01"
	revenue0 = _convSlice[v, Revenue0](func() []Revenue0 {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, l := range lineitem {
			if (l.L_shipdate >= start_date) && (l.L_shipdate < end_date) {
				key := l.L_suppkey
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, l)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Revenue0{}
		for _, g := range items {
			results = append(results, Revenue0{
				Supplier_no: g.Key.(any),
				Total_revenue: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, (x.L_extendedprice * (float64(1) - x.L_discount)))
					}
					return results
				}()),
			})
		}
		return results
	}())
	revenues = func() []float64 {
		results := []float64{}
		for _, x := range revenue0 {
			results = append(results, x.Total_revenue)
		}
		return results
	}()
	max_revenue = _maxOrdered[float64](revenues)
	result = func() []Result {
		src := _toAnySlice(supplier)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(revenue0), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s Supplier
				if tmp0 != nil {
					s = tmp0.(Supplier)
				}
				_ = s
				tmp1 := _a[1]
				var r Revenue0
				if tmp1 != nil {
					r = tmp1.(Revenue0)
				}
				_ = r
				return (s.S_suppkey == r.Supplier_no)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s Supplier
				if tmp0 != nil {
					s = tmp0.(Supplier)
				}
				_ = s
				return s.S_suppkey
			}, rightKey: func(_v any) any { r := _v.(Revenue0); _ = r; return r.Supplier_no }},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var r Revenue0
			if tmp1 != nil {
				r = tmp1.(Revenue0)
			}
			_ = r
			return Result{
				S_suppkey:     s.S_suppkey,
				S_name:        s.S_name,
				S_address:     s.S_address,
				S_phone:       s.S_phone,
				Total_revenue: r.Total_revenue,
			}
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var r Revenue0
			if tmp1 != nil {
				r = tmp1.(Revenue0)
			}
			_ = r
			return (r.Total_revenue == max_revenue)
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var r Revenue0
			if tmp1 != nil {
				r = tmp1.(Revenue0)
			}
			_ = r
			return s.S_suppkey
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q15_returns_top_revenue_supplier_s__for_Q1_1996()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _maxOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v > m {
			m = v
		}
	}
	return m
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
