//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T06:41:15Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"sort"
	"strings"
	"time"
)

type Lineitem struct {
	L_partkey  int    `json:"l_partkey"`
	L_suppkey  int    `json:"l_suppkey"`
	L_quantity int    `json:"l_quantity"`
	L_shipdate string `json:"l_shipdate"`
}

type Nation struct {
	N_nationkey int    `json:"n_nationkey"`
	N_name      string `json:"n_name"`
}

type Part struct {
	P_partkey int    `json:"p_partkey"`
	P_name    string `json:"p_name"`
}

type Partsupp struct {
	Ps_partkey  int `json:"ps_partkey"`
	Ps_suppkey  int `json:"ps_suppkey"`
	Ps_availqty int `json:"ps_availqty"`
}

type Result struct {
	S_name    string `json:"s_name"`
	S_address string `json:"s_address"`
}

type Shipped_94 struct {
	Partkey any     `json:"partkey"`
	Suppkey any     `json:"suppkey"`
	Qty     float64 `json:"qty"`
}

type Supplier struct {
	S_suppkey   int    `json:"s_suppkey"`
	S_name      string `json:"s_name"`
	S_address   string `json:"s_address"`
	S_nationkey int    `json:"s_nationkey"`
}

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments() {
	expect(_equal(result, []v{v{
		S_name:    "Maple Supply",
		S_address: "123 Forest Lane",
	}}))
}

var nation []Nation
var supplier []Supplier
var part []Part
var partsupp []Partsupp
var lineitem []Lineitem
var prefix string
var shipped_94 []Shipped_94
var target_partkeys []int
var result []Result

func main() {
	nation = _convSlice[v, Nation]([]Nation{Nation{
		N_nationkey: 1,
		N_name:      "CANADA",
	}, Nation{
		N_nationkey: 2,
		N_name:      "GERMANY",
	}})
	supplier = _convSlice[v, Supplier]([]Supplier{Supplier{
		S_suppkey:   100,
		S_name:      "Maple Supply",
		S_address:   "123 Forest Lane",
		S_nationkey: 1,
	}, Supplier{
		S_suppkey:   200,
		S_name:      "Berlin Metals",
		S_address:   "456 Iron Str",
		S_nationkey: 2,
	}})
	part = _convSlice[v, Part]([]Part{Part{
		P_partkey: 10,
		P_name:    "forest glade bricks",
	}, Part{
		P_partkey: 20,
		P_name:    "desert sand paper",
	}})
	partsupp = _convSlice[v, Partsupp]([]Partsupp{Partsupp{
		Ps_partkey:  10,
		Ps_suppkey:  100,
		Ps_availqty: 100,
	}, Partsupp{
		Ps_partkey:  20,
		Ps_suppkey:  200,
		Ps_availqty: 30,
	}})
	lineitem = _convSlice[v, Lineitem]([]Lineitem{Lineitem{
		L_partkey:  10,
		L_suppkey:  100,
		L_quantity: 100,
		L_shipdate: "1994-05-15",
	}, Lineitem{
		L_partkey:  10,
		L_suppkey:  100,
		L_quantity: 50,
		L_shipdate: "1995-01-01",
	}})
	prefix = "forest"
	shipped_94 = _convSlice[v, Shipped_94](func() []Shipped_94 {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, l := range lineitem {
			if (l.L_shipdate >= "1994-01-01") && (l.L_shipdate < "1995-01-01") {
				key := v{
					Partkey: l.L_partkey,
					Suppkey: l.L_suppkey,
				}
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				_item := map[string]any{}
				_item["l_partkey"] = l.L_partkey
				_item["l_suppkey"] = l.L_suppkey
				_item["l_quantity"] = l.L_quantity
				_item["l_shipdate"] = l.L_shipdate
				_item["l"] = l
				g.Items = append(g.Items, _item)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Shipped_94{}
		for _, g := range items {
			results = append(results, Shipped_94{
				Partkey: _getField(g.Key, "partkey"),
				Suppkey: _getField(g.Key, "suppkey"),
				Qty: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x, "l_quantity"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	target_partkeys = func() []int {
		results := []int{}
		for _, ps := range partsupp {
			for _, p := range part {
				if !(ps.Ps_partkey == p.P_partkey) {
					continue
				}
				for _, s := range shipped_94 {
					if !(_equal(ps.Ps_partkey, s.Partkey) && _equal(ps.Ps_suppkey, s.Suppkey)) {
						continue
					}
					if (string([]rune(p.P_name)[0:len(prefix)]) == prefix) && (float64(ps.Ps_availqty) > (0.5 * s.Qty)) {
						if (string([]rune(p.P_name)[0:len(prefix)]) == prefix) && (float64(ps.Ps_availqty) > (0.5 * s.Qty)) {
							results = append(results, ps.Ps_suppkey)
						}
					}
				}
			}
		}
		return results
	}()
	result = _convSlice[v, Result](func() []Result {
		src := _toAnySlice(supplier)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(nation), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s Supplier
				if tmp0 != nil {
					s = tmp0.(Supplier)
				}
				_ = s
				tmp1 := _a[1]
				var n Nation
				if tmp1 != nil {
					n = tmp1.(Nation)
				}
				_ = n
				return (n.N_nationkey == s.S_nationkey)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s Supplier
				if tmp0 != nil {
					s = tmp0.(Supplier)
				}
				_ = s
				return s.S_nationkey
			}, rightKey: func(_v any) any { n := _v.(Nation); _ = n; return n.N_nationkey }},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var n Nation
			if tmp1 != nil {
				n = tmp1.(Nation)
			}
			_ = n
			return Result{
				S_name:    s.S_name,
				S_address: s.S_address,
			}
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var n Nation
			if tmp1 != nil {
				n = tmp1.(Nation)
			}
			_ = n
			return (slices.Contains(target_partkeys, s.S_suppkey) && (n.N_name == "CANADA"))
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var s Supplier
			if tmp0 != nil {
				s = tmp0.(Supplier)
			}
			_ = s
			tmp1 := _a[1]
			var n Nation
			if tmp1 != nil {
				n = tmp1.(Nation)
			}
			_ = n
			return s.S_name
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
