# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:58:56Z
require 'ostruct'

def _avg(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0) / list.length
end
class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$customer = [OpenStruct.new(c_custkey: 1, c_phone: "13-123-4567", c_acctbal: 600.0), OpenStruct.new(c_custkey: 2, c_phone: "31-456-7890", c_acctbal: 100.0), OpenStruct.new(c_custkey: 3, c_phone: "30-000-0000", c_acctbal: 700.0)]
$orders = [OpenStruct.new(o_orderkey: 10, o_custkey: 2)]
$valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
$avg_balance = _avg(((($customer)).select { |c| ((c.c_acctbal > 0.0) && ($valid_codes.include?(_sliceString(c.c_phone, 0, 2)))) }).map { |c| c.c_acctbal })
$eligible_customers = ((($customer)).select { |c| ((($valid_codes.include?(_sliceString(c.c_phone, 0, 2))) && (c.c_acctbal > $avg_balance)) && ((!!(((($orders)).select { |o| (o.o_custkey == c.c_custkey) }).map { |o| o }).empty?))) }).map { |c| OpenStruct.new(cntrycode: _sliceString(c.c_phone, 0, 2), c_acctbal: c.c_acctbal) }
$groups = _group_by($eligible_customers, ->(c){ c.cntrycode }).map { |g| g }
$tmp = []
$groups.each do |g|
	total = _sum(((g.Items)).map { |x| x.c_acctbal })
	row = OpenStruct.new(cntrycode: g.key, numcust: (g).length, totacctbal: total)
	$tmp = ($tmp + [row])
end
$result = ((($tmp)).sort_by { |r| r.cntrycode }).map { |r| r }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(cntrycode: "13", numcust: 1, totacctbal: 600.0), OpenStruct.new(cntrycode: "30", numcust: 1, totacctbal: 700.0)])
