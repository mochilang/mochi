# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:58:55Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$region = [OpenStruct.new(r_regionkey: 0, r_name: "ASIA"), OpenStruct.new(r_regionkey: 1, r_name: "EUROPE")]
$nation = [OpenStruct.new(n_nationkey: 10, n_regionkey: 0, n_name: "JAPAN"), OpenStruct.new(n_nationkey: 20, n_regionkey: 0, n_name: "INDIA"), OpenStruct.new(n_nationkey: 30, n_regionkey: 1, n_name: "FRANCE")]
$customer = [OpenStruct.new(c_custkey: 1, c_nationkey: 10), OpenStruct.new(c_custkey: 2, c_nationkey: 20)]
$supplier = [OpenStruct.new(s_suppkey: 100, s_nationkey: 10), OpenStruct.new(s_suppkey: 200, s_nationkey: 20)]
$orders = [OpenStruct.new(o_orderkey: 1000, o_custkey: 1, o_orderdate: "1994-03-15"), OpenStruct.new(o_orderkey: 2000, o_custkey: 2, o_orderdate: "1994-06-10"), OpenStruct.new(o_orderkey: 3000, o_custkey: 2, o_orderdate: "1995-01-01")]
$lineitem = [OpenStruct.new(l_orderkey: 1000, l_suppkey: 100, l_extendedprice: 1000.0, l_discount: 0.05), OpenStruct.new(l_orderkey: 2000, l_suppkey: 200, l_extendedprice: 800.0, l_discount: 0.1), OpenStruct.new(l_orderkey: 3000, l_suppkey: 200, l_extendedprice: 900.0, l_discount: 0.05)]
$asia_nations = (begin
	_res = []
	for r in $region
		for n in $nation
			if (n.n_regionkey == r.r_regionkey)
				if (r.r_name == "ASIA")
					_res << n
				end
			end
		end
	end
	_res
end)
$local_customer_supplier_orders = (begin
	_res = []
	for c in $customer
		for n in $asia_nations
			if (c.c_nationkey == n.n_nationkey)
				for o in $orders
					if (o.o_custkey == c.c_custkey)
						for l in $lineitem
							if (l.l_orderkey == o.o_orderkey)
								for s in $supplier
									if (s.s_suppkey == l.l_suppkey)
										if (((o.o_orderdate >= "1994-01-01") && (o.o_orderdate < "1995-01-01")) && (s.s_nationkey == c.c_nationkey))
											_res << OpenStruct.new(nation: n.n_name, revenue: (l.l_extendedprice * ((1 - l.l_discount))))
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = (begin
	src = $local_customer_supplier_orders
	_rows = _query(src, [
	], { 'select' => ->(r){ [r] } })
	_groups = _group_by(_rows, ->(r){ r.nation })
	_items0 = _groups
	_items0 = _items0.sort_by { |g| (-_sum(((g)).map { |x| x.revenue })) }
	_res = []
	for g in _items0
		_res << OpenStruct.new(n_name: g.key, revenue: _sum(((g)).map { |x| x.revenue }))
	end
	_res
end)
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(n_name: "JAPAN", revenue: 950), OpenStruct.new(n_name: "INDIA", revenue: 720)])
