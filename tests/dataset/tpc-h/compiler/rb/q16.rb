# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:58:56Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

$supplier = [OpenStruct.new(s_suppkey: 100, s_name: "AlphaSupply", s_address: "123 Hilltop", s_comment: "Reliable and efficient"), OpenStruct.new(s_suppkey: 200, s_name: "BetaSupply", s_address: "456 Riverside", s_comment: "Known for Customer Complaints")]
$part = [OpenStruct.new(p_partkey: 1, p_brand: "Brand#12", p_type: "SMALL ANODIZED", p_size: 5), OpenStruct.new(p_partkey: 2, p_brand: "Brand#23", p_type: "MEDIUM POLISHED", p_size: 10)]
$partsupp = [OpenStruct.new(ps_partkey: 1, ps_suppkey: 100), OpenStruct.new(ps_partkey: 2, ps_suppkey: 200)]
$excluded_suppliers = (begin
	_res = []
	for ps in $partsupp
		for p in $part
			if (p.p_partkey == ps.ps_partkey)
				if (((p.p_brand == "Brand#12") && (p.p_type.include?("SMALL"))) && (p.p_size == 5))
					_res << ps.ps_suppkey
				end
			end
		end
	end
	_res
end)
$result = (((($supplier)).select { |s| (((!(($excluded_suppliers.include?(s.s_suppkey)))) && ((!(s.s_comment.include?("Customer"))))) && ((!(s.s_comment.include?("Complaints"))))) }).sort_by { |s| s.s_name }).map { |s| OpenStruct.new(s_name: s.s_name, s_address: s.s_address) }
_json($result)
raise "expect failed" unless ($result == [])
