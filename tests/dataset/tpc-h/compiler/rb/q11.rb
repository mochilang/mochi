# Generated by Mochi compiler v0.10.25 on 2025-07-13T09:56:37Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$nation = [OpenStruct.new(n_nationkey: 1, n_name: "GERMANY"), OpenStruct.new(n_nationkey: 2, n_name: "FRANCE")]
$supplier = [OpenStruct.new(s_suppkey: 100, s_nationkey: 1), OpenStruct.new(s_suppkey: 200, s_nationkey: 1), OpenStruct.new(s_suppkey: 300, s_nationkey: 2)]
$partsupp = [OpenStruct.new(ps_partkey: 1000, ps_suppkey: 100, ps_supplycost: 10.0, ps_availqty: 100), OpenStruct.new(ps_partkey: 1000, ps_suppkey: 200, ps_supplycost: 20.0, ps_availqty: 50), OpenStruct.new(ps_partkey: 2000, ps_suppkey: 100, ps_supplycost: 5.0, ps_availqty: 10), OpenStruct.new(ps_partkey: 3000, ps_suppkey: 300, ps_supplycost: 8.0, ps_availqty: 500)]
$target_nation = "GERMANY"
$filtered = (begin
	_res = []
	for ps in $partsupp
		for s in $supplier
			if (s.s_suppkey == ps.ps_suppkey)
				for n in $nation
					if (n.n_nationkey == s.s_nationkey)
						if (n.n_name == $target_nation)
							_res << OpenStruct.new(ps_partkey: ps.ps_partkey, value: (ps.ps_supplycost * ps.ps_availqty))
						end
					end
				end
			end
		end
	end
	_res
end)
$grouped = _group_by($filtered, ->(x){ x.ps_partkey }).map { |g| OpenStruct.new(ps_partkey: g.key, value: _sum(((g)).map { |r| r.value })) }
$total = _sum((($filtered)).map { |x| x.value })
$threshold = ($total * 0.0001)
$result = (((($grouped)).select { |x| (x.value > $threshold) }).sort_by { |x| (-x.value) }).map { |x| x }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(ps_partkey: 1000, value: 2000.0), OpenStruct.new(ps_partkey: 2000, value: 50.0)])
