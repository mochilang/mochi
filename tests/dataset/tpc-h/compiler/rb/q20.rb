# Generated by Mochi compiler v0.10.25 on 2025-07-13T10:42:32Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$nation = [OpenStruct.new(n_nationkey: 1, n_name: "CANADA"), OpenStruct.new(n_nationkey: 2, n_name: "GERMANY")]
$supplier = [OpenStruct.new(s_suppkey: 100, s_name: "Maple Supply", s_address: "123 Forest Lane", s_nationkey: 1), OpenStruct.new(s_suppkey: 200, s_name: "Berlin Metals", s_address: "456 Iron Str", s_nationkey: 2)]
$part = [OpenStruct.new(p_partkey: 10, p_name: "forest glade bricks"), OpenStruct.new(p_partkey: 20, p_name: "desert sand paper")]
$partsupp = [OpenStruct.new(ps_partkey: 10, ps_suppkey: 100, ps_availqty: 100), OpenStruct.new(ps_partkey: 20, ps_suppkey: 200, ps_availqty: 30)]
$lineitem = [OpenStruct.new(l_partkey: 10, l_suppkey: 100, l_quantity: 100, l_shipdate: "1994-05-15"), OpenStruct.new(l_partkey: 10, l_suppkey: 100, l_quantity: 50, l_shipdate: "1995-01-01")]
$prefix = "forest"
$shipped_94 = (begin
	src = $lineitem
	_rows = _query(src, [
	], { 'select' => ->(l){ [l] }, 'where' => ->(l){ ((l.l_shipdate >= "1994-01-01") && (l.l_shipdate < "1995-01-01")) } })
	_groups = _group_by(_rows, ->(l){ OpenStruct.new(partkey: l.l_partkey, suppkey: l.l_suppkey) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(partkey: g.key.partkey, suppkey: g.key.suppkey, qty: _sum(((g)).map { |x| x.l_quantity }))
	end
	_res
end)
$target_partkeys = (begin
	_res = []
	for ps in $partsupp
		for p in $part
			if (ps.ps_partkey == p.p_partkey)
				for s in $shipped_94
					if ((ps.ps_partkey == s.partkey) && (ps.ps_suppkey == s.suppkey))
						if ((_sliceString(p.p_name, 0, ($prefix).length) == $prefix) && (ps.ps_availqty > ((0.5 * s.qty))))
							_res << ps.ps_suppkey
						end
					end
				end
			end
		end
	end
	_res
end)
$result = (begin
	_res = []
	for s in $supplier
		for n in $nation
			if (n.n_nationkey == s.s_nationkey)
				if (($target_partkeys.include?(s.s_suppkey)) && (n.n_name == "CANADA"))
					_res << [s.s_name, OpenStruct.new(s_name: s.s_name, s_address: s.s_address)]
				end
			end
		end
	end
	_res = _res.sort_by { |e| e[0] }
	_res = _res.map { |e| e[1] }
	_res
end)
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(s_name: "Maple Supply", s_address: "123 Forest Lane")])
