# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:40:58Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$part = [OpenStruct.new(p_partkey: 1, p_type: "PROMO LUXURY"), OpenStruct.new(p_partkey: 2, p_type: "STANDARD BRASS")]
$lineitem = [OpenStruct.new(l_partkey: 1, l_extendedprice: 1000.0, l_discount: 0.1, l_shipdate: "1995-09-05"), OpenStruct.new(l_partkey: 2, l_extendedprice: 800.0, l_discount: 0.0, l_shipdate: "1995-09-20"), OpenStruct.new(l_partkey: 1, l_extendedprice: 500.0, l_discount: 0.2, l_shipdate: "1995-10-02")]
$start_date = "1995-09-01"
$end_date = "1995-10-01"
$filtered = (begin
	_res = []
	for l in $lineitem
		for p in $part
			if (p.p_partkey == l.l_partkey)
				if ((l.l_shipdate >= $start_date) && (l.l_shipdate < $end_date))
					_res << OpenStruct.new(is_promo: (p.p_type.include?("PROMO")), revenue: (l.l_extendedprice * ((1 - l.l_discount))))
				end
			end
		end
	end
	_res
end)
$promo_sum = _sum(((($filtered)).select { |x| x.is_promo }).map { |x| x.revenue })
$total_sum = _sum((($filtered)).map { |x| x.revenue })
$result = ((100.0 * $promo_sum) / $total_sum)
_json($result)
$promo = (1000.0 * 0.9)
$total = (900 + 800.0)
$expected = ((100.0 * $promo) / $total)
raise "expect failed" unless ($result == $expected)
