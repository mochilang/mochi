// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:00:32Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _min(_ v: Any) -> Any {
    var list: [Any]? = nil
    if let g = v as? _Group { list = g.Items }
    else if let arr = v as? [Any] { list = arr }
    else if let arr = v as? [Int] { return arr.min() ?? 0 }
    else if let arr = v as? [Double] { return arr.min() ?? 0.0 }
    else if let arr = v as? [String] { return arr.min() ?? "" }
    guard let items = list else { fatalError("min() expects list or group") }
    if items.isEmpty { return 0 }
    if let s = items[0] as? String {
        var m = s
        for it in items.dropFirst() {
            if let v = it as? String, v < m { m = v }
        }
        return m
    }
    func toDouble(_ v: Any) -> Double {
        if let i = v as? Int { return Double(i) }
        if let d = v as? Double { return d }
        if let f = v as? Float { return Double(f) }
        if let i = v as? Int64 { return Double(i) }
        return 0
    }
    var m = toDouble(items[0])
    var isFloat = items[0] is Double || items[0] is Float
    for it in items.dropFirst() {
        if it is Double || it is Float { isFloat = true }
        let d = toDouble(it)
        if d < m { m = d }
    }
    return isFloat ? m : Int(m)
}
struct Auto1: Equatable {
    var r_name: String
    var r_regionkey: Int
}

struct Auto2: Equatable {
    var n_name: String
    var n_nationkey: Int
    var n_regionkey: Int
}

struct Auto3: Equatable {
    var s_acctbal: Double
    var s_address: String
    var s_comment: String
    var s_name: String
    var s_nationkey: Int
    var s_phone: String
    var s_suppkey: Int
}

struct Auto4: Equatable {
    var p_mfgr: String
    var p_partkey: Int
    var p_size: Int
    var p_type: String
}

struct Auto5: Equatable {
    var ps_partkey: Int
    var ps_suppkey: Int
    var ps_supplycost: Double
}

struct Auto7: Equatable {
    var n_name: String
    var p_mfgr: String
    var p_partkey: Int
    var ps_supplycost: Double
    var s_acctbal: Double
    var s_address: String
    var s_comment: String
    var s_name: String
    var s_phone: String
}

struct EuropeSupplier {
    var n: [Any]
    var s: Auto3
}

var region = [Auto1(r_name: "EUROPE", r_regionkey: 1), Auto1(r_name: "ASIA", r_regionkey: 2)]
var nation = [Auto2(n_name: "FRANCE", n_nationkey: 10, n_regionkey: 1), Auto2(n_name: "CHINA", n_nationkey: 20, n_regionkey: 2)]
var supplier = [Auto3(s_acctbal: 1000.0, s_address: "123 Rue", s_comment: "Fast and reliable", s_name: "BestSupplier", s_nationkey: 10, s_phone: "123", s_suppkey: 100), Auto3(s_acctbal: 500.0, s_address: "456 Way", s_comment: "Slow", s_name: "AltSupplier", s_nationkey: 20, s_phone: "456", s_suppkey: 200)]
var part = [Auto4(p_mfgr: "M1", p_partkey: 1000, p_size: 15, p_type: "LARGE BRASS"), Auto4(p_mfgr: "M2", p_partkey: 2000, p_size: 15, p_type: "SMALL COPPER")]
var partsupp = [Auto5(ps_partkey: 1000, ps_suppkey: 100, ps_supplycost: 10.0), Auto5(ps_partkey: 1000, ps_suppkey: 200, ps_supplycost: 15.0)]
var europe_nations = ({
	var _res: [Auto2] = []
	for r in region {
		for n in nation {
			if !(n.n_regionkey == r.r_regionkey) { continue }
			if !(r.r_name == "EUROPE") { continue }
			_res.append(n)
		}
	}
	return _res
}())
var europe_suppliers = ({
	var _res: [(n: [Any], s: Auto3)] = []
	for s in supplier {
		for n in europe_nations {
			if !(s.s_nationkey == n.n_nationkey) { continue }
			_res.append(["s": s, "n": n])
		}
	}
	return _res
}())
var target_parts = part.filter { p in p.p_size == 15 && p.p_type == "LARGE BRASS" }
var target_partsupp = ({
	var _res: [(n_name: Any, p_mfgr: String, p_partkey: Int, ps_supplycost: Double, s_acctbal: Any, s_address: Any, s_comment: Any, s_name: Any, s_phone: Any)] = []
	for ps in partsupp {
		for p in target_parts {
			if !(ps.ps_partkey == p.p_partkey) { continue }
			for s in europe_suppliers {
				if !(ps.ps_suppkey == (s.s["s_suppkey"] as! Int)) { continue }
				_res.append(["s_acctbal": (s.s["s_acctbal"] as! Double), "s_name": (s.s["s_name"] as! String), "n_name": s.n.n_name, "p_partkey": p.p_partkey, "p_mfgr": p.p_mfgr, "s_address": (s.s["s_address"] as! String), "s_phone": (s.s["s_phone"] as! String), "s_comment": (s.s["s_comment"] as! String), "ps_supplycost": ps.ps_supplycost])
			}
		}
	}
	return _res
}())
var costs = target_partsupp.map { x in (x["ps_supplycost"] as! Double) }
let min_cost = _min(costs)
var result = target_partsupp.filter { x in (x["ps_supplycost"] as! Double) == min_cost }.sorted { $0.s_acctbal > $1.s_acctbal }
_json(result)
expect(_equal(result, [Auto7(n_name: "FRANCE", p_mfgr: "M1", p_partkey: 1000, ps_supplycost: 10.0, s_acctbal: 1000.0, s_address: "123 Rue", s_comment: "Fast and reliable", s_name: "BestSupplier", s_phone: "123")]))
