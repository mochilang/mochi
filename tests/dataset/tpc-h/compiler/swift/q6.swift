// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:34:16Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Lineitem: Equatable {
    var l_discount: Double
    var l_extendedprice: Double
    var l_quantity: Int
    var l_shipdate: String
}

var lineitem = [Lineitem(l_discount: 0.06, l_extendedprice: 1000.0, l_quantity: 10, l_shipdate: "1994-02-15"), Lineitem(l_discount: 0.07, l_extendedprice: 500.0, l_quantity: 23, l_shipdate: "1994-03-10"), Lineitem(l_discount: 0.04, l_extendedprice: 400.0, l_quantity: 15, l_shipdate: "1994-04-10"), Lineitem(l_discount: 0.06, l_extendedprice: 200.0, l_quantity: 5, l_shipdate: "1995-01-01")]
var result = lineitem.compactMap { l in (l.l_shipdate >= "1994-01-01") && (l.l_shipdate < "1995-01-01") && (l.l_discount >= 0.05) && (l.l_discount <= 0.07) && (l.l_quantity < 24) ? (_sum(l.l_extendedprice * l.l_discount)) : nil }
_json(result)
expect(_equal(result, ((1000.0 * 0.06) + (500.0 * 0.07))))
