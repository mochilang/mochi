import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _min(_ v: Any) -> Any {
  var list: [Any]? = nil
  if let g = v as? _Group {
    list = g.Items
  } else if let arr = v as? [Any] {
    list = arr
  } else if let arr = v as? [Int] {
    return arr.min() ?? 0
  } else if let arr = v as? [Double] {
    return arr.min() ?? 0.0
  } else if let arr = v as? [String] {
    return arr.min() ?? ""
  }
  guard let items = list else { fatalError("min() expects list or group") }
  if items.isEmpty { return 0 }
  if let s = items[0] as? String {
    var m = s
    for it in items.dropFirst() {
      if let v = it as? String, v < m { m = v }
    }
    return m
  }
  func toDouble(_ v: Any) -> Double {
    if let i = v as? Int { return Double(i) }
    if let d = v as? Double { return d }
    if let f = v as? Float { return Double(f) }
    if let i = v as? Int64 { return Double(i) }
    return 0
  }
  var m = toDouble(items[0])
  var isFloat = items[0] is Double || items[0] is Float
  for it in items.dropFirst() {
    if it is Double || it is Float { isFloat = true }
    let d = toDouble(it)
    if d < m { m = d }
  }
  return isFloat ? m : Int(m)
}

func test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
  expect(
    result == [
      [
        "s_acctbal": 1000, "s_name": "BestSupplier", "n_name": "FRANCE", "p_partkey": 1000,
        "p_mfgr": "M1", "s_address": "123 Rue", "s_phone": "123", "s_comment": "Fast and reliable",
        "ps_supplycost": 10,
      ]
    ])
}

let region = [["r_regionkey": 1, "r_name": "EUROPE"], ["r_regionkey": 2, "r_name": "ASIA"]]
let nation = [
  ["n_nationkey": 10, "n_regionkey": 1, "n_name": "FRANCE"],
  ["n_nationkey": 20, "n_regionkey": 2, "n_name": "CHINA"],
]
let supplier = [
  [
    "s_suppkey": 100, "s_name": "BestSupplier", "s_address": "123 Rue", "s_nationkey": 10,
    "s_phone": "123", "s_acctbal": 1000, "s_comment": "Fast and reliable",
  ],
  [
    "s_suppkey": 200, "s_name": "AltSupplier", "s_address": "456 Way", "s_nationkey": 20,
    "s_phone": "456", "s_acctbal": 500, "s_comment": "Slow",
  ],
]
let part = [
  ["p_partkey": 1000, "p_type": "LARGE BRASS", "p_size": 15, "p_mfgr": "M1"],
  ["p_partkey": 2000, "p_type": "SMALL COPPER", "p_size": 15, "p_mfgr": "M2"],
]
let partsupp = [
  ["ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10],
  ["ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15],
]
let europe_nations =
  ({
    var _res: [[String: Any]] = []
    for r in region {
      if !(r["r_name"]! == "EUROPE") { continue }
      for n in nation {
        if !(n["n_regionkey"]! == r["r_regionkey"]!) { continue }
        _res.append(n)
      }
    }
    var _items = _res
    return _items
  }())
let europe_suppliers =
  ({
    var _res: [[String: [String: Any]]] = []
    for s in supplier {
      for n in europe_nations {
        if !(s["s_nationkey"]! == n["n_nationkey"]!) { continue }
        _res.append(["s": s, "n": n])
      }
    }
    var _items = _res
    return _items
  }())
let target_parts =
  ({
    var _res: [[String: Any]] = []
    for p in part {
      if !(p["p_size"]! == 15 && p["p_type"]! == "LARGE BRASS") { continue }
      _res.append(p)
    }
    var _items = _res
    return _items
  }())
let target_partsupp =
  ({
    var _res: [[String: Any]] = []
    for ps in partsupp {
      for p in target_parts {
        if !(ps["ps_partkey"]! == p["p_partkey"]!) { continue }
        for s in europe_suppliers {
          if !(ps["ps_suppkey"]! == s["s"]!["s_suppkey"]!) { continue }
          _res.append([
            "s_acctbal": s["s"]!["s_acctbal"]!, "s_name": s["s"]!["s_name"]!,
            "n_name": s["n"]!["n_name"]!, "p_partkey": p["p_partkey"]!, "p_mfgr": p["p_mfgr"]!,
            "s_address": s["s"]!["s_address"]!, "s_phone": s["s"]!["s_phone"]!,
            "s_comment": s["s"]!["s_comment"]!, "ps_supplycost": ps["ps_supplycost"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let costs =
  ({
    var _res: [Any] = []
    for x in target_partsupp {
      _res.append(x["ps_supplycost"]!)
    }
    var _items = _res
    return _items
  }())
let min_cost = _min(costs)
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for x in target_partsupp {
      if x["ps_supplycost"]! == min_cost {
        _pairs.append((item: x, key: -x["s_acctbal"]!))
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}
main()
