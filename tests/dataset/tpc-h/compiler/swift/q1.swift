// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:59:45Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}

func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var l_discount: Double
    var l_extendedprice: Double
    var l_linestatus: String
    var l_quantity: Int
    var l_returnflag: String
    var l_shipdate: String
    var l_tax: Double
}

var lineitem = [Auto1(l_discount: 0.05, l_extendedprice: 1000.0, l_linestatus: "O", l_quantity: 17, l_returnflag: "N", l_shipdate: "1998-08-01", l_tax: 0.07), Auto1(l_discount: 0.1, l_extendedprice: 2000.0, l_linestatus: "O", l_quantity: 36, l_returnflag: "N", l_shipdate: "1998-09-01", l_tax: 0.05), Auto1(l_discount: 0.0, l_extendedprice: 1500.0, l_linestatus: "F", l_quantity: 25, l_returnflag: "R", l_shipdate: "1998-09-03", l_tax: 0.08)]
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for row in lineitem.filter { row in row.l_shipdate <= "1998-09-02" } {
        let _k = ["returnflag": row.l_returnflag, "linestatus": row.l_linestatus]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(row)
    }
    var _tmp: [(key: [String:Any], items: [Auto1])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Auto1 }))
        }
    }
    return _tmp.map { g in ["returnflag": g.key.returnflag, "linestatus": g.key.linestatus, "sum_qty": _sum(g.items.map { x in x.l_quantity }), "sum_base_price": _sum(g.items.map { x in x.l_extendedprice }), "sum_disc_price": _sum(g.items.map { x in x.l_extendedprice * Double((Double(1) - x.l_discount)) }), "sum_charge": _sum(g.items.map { x in x.l_extendedprice * Double((Double(1) - x.l_discount)) * Double((Double(1) + x.l_tax)) }), "avg_qty": _avg(g.items.map { x in x.l_quantity }), "avg_price": _avg(g.items.map { x in x.l_extendedprice }), "avg_disc": _avg(g.items.map { x in x.l_discount }), "count_order": g.items.count] }
}()
_json(result)
expect(_equal(result, [["returnflag": "N", "linestatus": "O", "sum_qty": 53, "sum_base_price": 3000, "sum_disc_price": 950.0 + 1800.0, "sum_charge": (950.0 * 1.07) + (1800.0 * 1.05), "avg_qty": 26.5, "avg_price": 1500, "avg_disc": 0.07500000000000001, "count_order": 2]]))
