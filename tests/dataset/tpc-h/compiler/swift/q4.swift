// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:22:03Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
struct Auto3: Equatable {
    var o_orderpriority: String
    var order_count: Int
}

struct Lineitem: Equatable {
    var l_commitdate: String
    var l_orderkey: Int
    var l_receiptdate: String
}

struct Order: Equatable {
    var o_orderdate: String
    var o_orderkey: Int
    var o_orderpriority: String
}

var orders = [Order(o_orderdate: "1993-07-01", o_orderkey: 1, o_orderpriority: "1-URGENT"), Order(o_orderdate: "1993-07-15", o_orderkey: 2, o_orderpriority: "2-HIGH"), Order(o_orderdate: "1993-08-01", o_orderkey: 3, o_orderpriority: "3-NORMAL")]
var lineitem = [Lineitem(l_commitdate: "1993-07-10", l_orderkey: 1, l_receiptdate: "1993-07-12"), Lineitem(l_commitdate: "1993-07-12", l_orderkey: 1, l_receiptdate: "1993-07-10"), Lineitem(l_commitdate: "1993-07-20", l_orderkey: 2, l_receiptdate: "1993-07-25"), Lineitem(l_commitdate: "1993-08-02", l_orderkey: 3, l_receiptdate: "1993-08-01"), Lineitem(l_commitdate: "1993-08-05", l_orderkey: 3, l_receiptdate: "1993-08-10")]
let start_date = "1993-07-01"
let end_date = "1993-08-01"
var date_filtered_orders = orders.filter { o in o.o_orderdate >= start_date && o.o_orderdate < end_date }
var late_orders = date_filtered_orders.filter { o in lineitem.contains { l in l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate } != nil }
var result = { () -> [Any] in
    var _groups: [String:[Order]] = [:]
    for o in late_orders {
        let _k = o.o_orderpriority
        _groups[_k, default: []].append(o)
    }
    var _tmp: [(key: String, items: [Order])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    _tmp.sort { String(describing: $0.key) < String(describing: $1.key) }
    return _tmp.map { g in ["o_orderpriority": g.key, "order_count": g.items.count] }
}()
_json(result)
expect(result == [Auto3(o_orderpriority: "1-URGENT", order_count: 1), Auto3(o_orderpriority: "2-HIGH", order_count: 1)])
