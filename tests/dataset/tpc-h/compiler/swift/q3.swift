// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:59:55Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}

func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var c_custkey: Int
    var c_mktsegment: String
}

struct Auto2: Equatable {
    var o_custkey: Int
    var o_orderdate: String
    var o_orderkey: Int
    var o_shippriority: Int
}

struct Auto3: Equatable {
    var l_discount: Double
    var l_extendedprice: Double
    var l_orderkey: Int
    var l_shipdate: String
}

struct Auto4: Equatable {
    var l_orderkey: Int
    var o_orderdate: String
    var o_shippriority: Int
    var revenue: Double
}

var customer = [Auto1(c_custkey: 1, c_mktsegment: "BUILDING"), Auto1(c_custkey: 2, c_mktsegment: "AUTOMOBILE")]
var orders = [Auto2(o_custkey: 1, o_orderdate: "1995-03-14", o_orderkey: 100, o_shippriority: 1), Auto2(o_custkey: 2, o_orderdate: "1995-03-10", o_orderkey: 200, o_shippriority: 2)]
var lineitem = [Auto3(l_discount: 0.05, l_extendedprice: 1000.0, l_orderkey: 100, l_shipdate: "1995-03-16"), Auto3(l_discount: 0.0, l_extendedprice: 500.0, l_orderkey: 100, l_shipdate: "1995-03-20"), Auto3(l_discount: 0.1, l_extendedprice: 1000.0, l_orderkey: 200, l_shipdate: "1995-03-14")]
let cutoff = "1995-03-15"
let segment = "BUILDING"
var building_customers = customer.filter { c in c.c_mktsegment == segment }
var valid_orders = ({
	var _res: [Auto2] = []
	for o in orders {
		for c in building_customers {
			if !(o.o_custkey == c.c_custkey) { continue }
			if !(o.o_orderdate < cutoff) { continue }
			_res.append(o)
		}
	}
	return _res
}())
var valid_lineitems = lineitem.filter { l in l.l_shipdate > cutoff }
var order_line_join = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for o in valid_orders {
		for l in valid_lineitems {
			if !(l.l_orderkey == o.o_orderkey) { continue }
			let _k = ["o_orderkey": o.o_orderkey, "o_orderdate": o.o_orderdate, "o_shippriority": o.o_shippriority]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["o": o, "l": l])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp.sort { [-_sum($0.items.map { r in ((r["l"] as! Auto3)["l_extendedprice"] as! Double) * (1 - ((r["l"] as! Auto3)["l_discount"] as! Double)) }), $0.key.o_orderdate] < [-_sum($1.items.map { r in ((r["l"] as! Auto3)["l_extendedprice"] as! Double) * (1 - ((r["l"] as! Auto3)["l_discount"] as! Double)) }), $1.key.o_orderdate] }
	return _tmp.map { g in ["l_orderkey": g.key.o_orderkey, "revenue": _sum(g.items.map { r in ((r["l"] as! Auto3)["l_extendedprice"] as! Double) * (1 - ((r["l"] as! Auto3)["l_discount"] as! Double)) }), "o_orderdate": g.key.o_orderdate, "o_shippriority": g.key.o_shippriority] }
}())
_json(order_line_join)
expect(_equal(order_line_join, [Auto4(l_orderkey: 100, o_orderdate: "1995-03-14", o_shippriority: 1, revenue: 1000.0 * 0.95 + 500.0)]))
