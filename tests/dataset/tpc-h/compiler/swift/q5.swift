// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:34:16Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto7: Equatable {
    var n_name: String
    var revenue: Int
}

struct Customer: Equatable {
    var c_custkey: Int
    var c_nationkey: Int
}

struct Lineitem: Equatable {
    var l_discount: Double
    var l_extendedprice: Double
    var l_orderkey: Int
    var l_suppkey: Int
}

struct Nation: Equatable {
    var n_name: String
    var n_nationkey: Int
    var n_regionkey: Int
}

struct Order: Equatable {
    var o_custkey: Int
    var o_orderdate: String
    var o_orderkey: Int
}

struct Region: Equatable {
    var r_name: String
    var r_regionkey: Int
}

struct Supplier: Equatable {
    var s_nationkey: Int
    var s_suppkey: Int
}

var region = [Region(r_name: "ASIA", r_regionkey: 0), Region(r_name: "EUROPE", r_regionkey: 1)]
var nation = [Nation(n_name: "JAPAN", n_nationkey: 10, n_regionkey: 0), Nation(n_name: "INDIA", n_nationkey: 20, n_regionkey: 0), Nation(n_name: "FRANCE", n_nationkey: 30, n_regionkey: 1)]
var customer = [Customer(c_custkey: 1, c_nationkey: 10), Customer(c_custkey: 2, c_nationkey: 20)]
var supplier = [Supplier(s_nationkey: 10, s_suppkey: 100), Supplier(s_nationkey: 20, s_suppkey: 200)]
var orders = [Order(o_custkey: 1, o_orderdate: "1994-03-15", o_orderkey: 1000), Order(o_custkey: 2, o_orderdate: "1994-06-10", o_orderkey: 2000), Order(o_custkey: 2, o_orderdate: "1995-01-01", o_orderkey: 3000)]
var lineitem = [Lineitem(l_discount: 0.05, l_extendedprice: 1000.0, l_orderkey: 1000, l_suppkey: 100), Lineitem(l_discount: 0.1, l_extendedprice: 800.0, l_orderkey: 2000, l_suppkey: 200), Lineitem(l_discount: 0.05, l_extendedprice: 900.0, l_orderkey: 3000, l_suppkey: 200)]
var asia_nations = ({
	var _res: [Nation] = []
	for r in region {
		for n in nation {
			if !(n.n_regionkey == r.r_regionkey) { continue }
			if !(r.r_name == "ASIA") { continue }
			_res.append(n)
		}
	}
	return _res
}())
var local_customer_supplier_orders = ({
	var _res: [(nation: Any, revenue: Double)] = []
	for c in customer {
		for n in asia_nations {
			if !(c.c_nationkey == n.n_nationkey) { continue }
			for o in orders {
				if !(o.o_custkey == c.c_custkey) { continue }
				for l in lineitem {
					if !(l.l_orderkey == o.o_orderkey) { continue }
					for s in supplier {
						if !(s.s_suppkey == l.l_suppkey) { continue }
						if !(o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey) { continue }
						_res.append((nation: n.n_name, revenue: l.l_extendedprice * Double((Double(1) - l.l_discount))))
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [AnyHashable:[[String:Any]]] = [:]
    for r in local_customer_supplier_orders {
        let _k = r["nation"]!
        _groups[_k as! AnyHashable, default: []].append(r)
    }
    var _tmp: [(key: AnyHashable, items: [[String:Any]])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    _tmp.sort { _sum($0.items.map { x in (x["revenue"] as! Double) }) > _sum($1.items.map { x in (x["revenue"] as! Double) }) }
    return _tmp.map { g in ["n_name": g.key, "revenue": _sum(g.items.map { x in (x["revenue"] as! Double) })] }
}()
_json(result)
expect(result == [Auto7(n_name: "JAPAN", revenue: 950), Auto7(n_name: "INDIA", revenue: 720)])
