; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:35:01Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare nation supplier part partsupp lineitem prefix shipped_94 target_partkeys result)

(defn test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments []
  (assert (_equal result [{:s_name "Maple Supply" :s_address "123 Forest Lane"}]) "expect failed")
)

(defn -main []
  (def nation [{:n_nationkey 1 :n_name "CANADA"} {:n_nationkey 2 :n_name "GERMANY"}]) ;; list of
  (def supplier [{:s_suppkey 100 :s_name "Maple Supply" :s_address "123 Forest Lane" :s_nationkey 1} {:s_suppkey 200 :s_name "Berlin Metals" :s_address "456 Iron Str" :s_nationkey 2}]) ;; list of
  (def part [{:p_partkey 10 :p_name "forest glade bricks"} {:p_partkey 20 :p_name "desert sand paper"}]) ;; list of
  (def partsupp [{:ps_partkey 10 :ps_suppkey 100 :ps_availqty 100} {:ps_partkey 20 :ps_suppkey 200 :ps_availqty 30}]) ;; list of
  (def lineitem [{:l_partkey 10 :l_suppkey 100 :l_quantity 100 :l_shipdate "1994-05-15"} {:l_partkey 10 :l_suppkey 100 :l_quantity 50 :l_shipdate "1995-01-01"}]) ;; list of
  (def prefix "forest") ;; string
  (def shipped_94 (let [_src lineitem
      _filtered (vec (filter (fn [l] (and (>= (compare (:l_shipdate l) "1994-01-01") 0) (< (compare (:l_shipdate l) "1995-01-01") 0))) _src))
      _groups (_group_by _filtered (fn [l] {:partkey (:l_partkey l) :suppkey (:l_suppkey l)}))
      ]
  (->> _groups (map (fn [g] {:partkey (:partkey (:key g)) :suppkey (:suppkey (:key g)) :qty (_sum (vec (->> (for [x (:Items g)] (:l_quantity x)))))})) vec))) ;; list of
  (def target_partkeys (vec (->> (for [ps partsupp p part :when (_equal (:ps_partkey ps) (:p_partkey p)) s shipped_94 :when (and (_equal (:ps_partkey ps) (:partkey s)) (_equal (:ps_suppkey ps) (:suppkey s))) :when (and (_equal (.substring (:p_name p) 0 (count prefix)) prefix) (> (:ps_availqty ps) (* 0.5 (:qty s))))] (:ps_suppkey ps))))) ;; list of int
  (def result (vec (->> (for [s supplier n nation :when (_equal (:n_nationkey n) (:s_nationkey s)) :when (and (some #(= (:s_suppkey s) %) target_partkeys) (_equal (:n_name n) "CANADA"))] {:s_name (:s_name s) :s_address (:s_address s)}) (sort-by (fn [s] (_sort_key (:s_name s))))))) ;; list of
  (_json result)
  (test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments)
)

(-main)
