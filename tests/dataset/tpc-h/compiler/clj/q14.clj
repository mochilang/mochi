; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:34:59Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare part lineitem start_date end_date filtered promo_sum total_sum result)

(defn test_Q14_calculates_promo_revenue_percent_in_1995_09 []
  (def promo (* 1000.0 0.9)) ;; float
  (def total (+ 900 800.0)) ;; float
  (def expected (/ (* 100.0 promo) total)) ;; float
  (assert (_equal result expected) "expect failed")
)

(defn -main []
  (def part [{:p_partkey 1 :p_type "PROMO LUXURY"} {:p_partkey 2 :p_type "STANDARD BRASS"}]) ;; list of
  (def lineitem [{:l_partkey 1 :l_extendedprice 1000.0 :l_discount 0.1 :l_shipdate "1995-09-05"} {:l_partkey 2 :l_extendedprice 800.0 :l_discount 0.0 :l_shipdate "1995-09-20"} {:l_partkey 1 :l_extendedprice 500.0 :l_discount 0.2 :l_shipdate "1995-10-02"}]) ;; list of
  (def start_date "1995-09-01") ;; string
  (def end_date "1995-10-01") ;; string
  (def filtered (vec (->> (for [l lineitem :when (and (>= (compare (:l_shipdate l) start_date) 0) (< (compare (:l_shipdate l) end_date) 0)) p part :when (_equal (:p_partkey p) (:l_partkey l))] {:is_promo (clojure.string/includes? (:p_type p) "PROMO") :revenue (* (:l_extendedprice l) (- 1 (:l_discount l)))})))) ;; list of
  (def promo_sum (reduce + 0 (vec (->> (for [x filtered :when (:is_promo x)] (:revenue x)))))) ;; float
  (def total_sum (reduce + 0 (vec (->> (for [x filtered] (:revenue x)))))) ;; float
  (def result (/ (* 100.0 promo_sum) total_sum)) ;; float
  (_json result)
  (test_Q14_calculates_promo_revenue_percent_in_1995_09)
)

(-main)
