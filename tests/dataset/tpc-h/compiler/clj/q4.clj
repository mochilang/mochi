; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:00:58Z
(ns main)

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare orders lineitem start_date end_date date_filtered_orders late_orders result)

(defn test_Q4_returns_count_of_orders_with_late_lineitems_in_range []
  (assert (= result [{:o_orderpriority "1-URGENT" :order_count 1} {:o_orderpriority "2-HIGH" :order_count 1}]) "expect failed")
)

(defn -main []
  (def orders [{:o_orderkey 1 :o_orderdate "1993-07-01" :o_orderpriority "1-URGENT"} {:o_orderkey 2 :o_orderdate "1993-07-15" :o_orderpriority "2-HIGH"} {:o_orderkey 3 :o_orderdate "1993-08-01" :o_orderpriority "3-NORMAL"}]) ;; list of
  (def lineitem [{:l_orderkey 1 :l_commitdate "1993-07-10" :l_receiptdate "1993-07-12"} {:l_orderkey 1 :l_commitdate "1993-07-12" :l_receiptdate "1993-07-10"} {:l_orderkey 2 :l_commitdate "1993-07-20" :l_receiptdate "1993-07-25"} {:l_orderkey 3 :l_commitdate "1993-08-02" :l_receiptdate "1993-08-01"} {:l_orderkey 3 :l_commitdate "1993-08-05" :l_receiptdate "1993-08-10"}]) ;; list of
  (def start_date "1993-07-01") ;; string
  (def end_date "1993-08-01") ;; string
  (def date_filtered_orders (vec (->> (for [o orders :when (and (>= (compare (:o_orderdate o) start_date) 0) (< (compare (:o_orderdate o) end_date) 0))] o)))) ;; list of
  (def late_orders (vec (->> (for [o date_filtered_orders :when (boolean (seq (vec (->> (for [l lineitem :when (and (= (:l_orderkey l) (:o_orderkey o)) (< (compare (:l_commitdate l) (:l_receiptdate l)) 0))] l)))))] o)))) ;; list of
  (def result (let [_src late_orders
      _groups (_group_by _src (fn [o] (:o_orderpriority o)))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (:key g)))) (map (fn [g] {:o_orderpriority (:key g) :order_count (count (:Items g))})) vec))) ;; list of map of string to any
  (_json result)
  (test_Q4_returns_count_of_orders_with_late_lineitems_in_range)
)

(-main)
