; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:34:58Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare customer orders per_customer grouped)

(defn test_Q13_groups_customers_by_non_special_order_count []
  (assert (_equal grouped [{:c_count 2 :custdist 1} {:c_count 0 :custdist 2}]) "expect failed")
)

(defn -main []
  (def customer [{:c_custkey 1} {:c_custkey 2} {:c_custkey 3}]) ;; list of
  (def orders [{:o_orderkey 100 :o_custkey 1 :o_comment "fast delivery"} {:o_orderkey 101 :o_custkey 1 :o_comment "no comment"} {:o_orderkey 102 :o_custkey 2 :o_comment "special requests only"}]) ;; list of
  (def per_customer (vec (->> (for [c customer] {:c_count (count (vec (->> (for [o orders :when (and (and (_equal (:o_custkey o) (:c_custkey c)) (not (clojure.string/includes? (:o_comment o) "special"))) (not (clojure.string/includes? (:o_comment o) "requests")))] o))))})))) ;; list of
  (def grouped (let [_src per_customer
      _groups (_group_by _src (fn [x] (:c_count x)))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (- (:key g))))) (map (fn [g] {:c_count (:key g) :custdist (count (:Items g))})) vec))) ;; list of
  (_json grouped)
  (test_Q13_groups_customers_by_non_special_order_count)
)

(-main)
