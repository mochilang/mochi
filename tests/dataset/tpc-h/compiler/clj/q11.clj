; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:34:58Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare nation supplier partsupp target_nation filtered grouped total threshold result)

(defn test_Q11_returns_high_value_partkeys_from_GERMANY []
  (assert (_equal result [{:ps_partkey 1000 :value 2000.0} {:ps_partkey 2000 :value 50.0}]) "expect failed")
)

(defn -main []
  (def nation [{:n_nationkey 1 :n_name "GERMANY"} {:n_nationkey 2 :n_name "FRANCE"}]) ;; list of
  (def supplier [{:s_suppkey 100 :s_nationkey 1} {:s_suppkey 200 :s_nationkey 1} {:s_suppkey 300 :s_nationkey 2}]) ;; list of
  (def partsupp [{:ps_partkey 1000 :ps_suppkey 100 :ps_supplycost 10.0 :ps_availqty 100} {:ps_partkey 1000 :ps_suppkey 200 :ps_supplycost 20.0 :ps_availqty 50} {:ps_partkey 2000 :ps_suppkey 100 :ps_supplycost 5.0 :ps_availqty 10} {:ps_partkey 3000 :ps_suppkey 300 :ps_supplycost 8.0 :ps_availqty 500}]) ;; list of
  (def target_nation "GERMANY") ;; string
  (def filtered (vec (->> (for [ps partsupp s supplier :when (_equal (:s_suppkey s) (:ps_suppkey ps)) n nation :when (_equal (:n_nationkey n) (:s_nationkey s)) :when (_equal (:n_name n) target_nation)] {:ps_partkey (:ps_partkey ps) :value (* (:ps_supplycost ps) (:ps_availqty ps))})))) ;; list of
  (def grouped (map (fn [g] {:ps_partkey (:key g) :value (_sum (vec (->> (for [r (:Items g)] (:value r)))))}) (_group_by filtered (fn [x] (:ps_partkey x))))) ;; list of
  (def total (reduce + 0 (vec (->> (for [x filtered] (:value x)))))) ;; float
  (def threshold (* total 0.0001)) ;; float
  (def result (vec (->> (for [x grouped :when (> (:value x) threshold)] x) (sort-by (fn [x] (_sort_key (- (:value x)))))))) ;; list of
  (_json result)
  (test_Q11_returns_high_value_partkeys_from_GERMANY)
)

(-main)
