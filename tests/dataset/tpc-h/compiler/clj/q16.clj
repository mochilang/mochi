; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:17Z
(ns main)

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare supplier part partsupp excluded_suppliers result)

(defn test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints []
  (assert (= result []) "expect failed")
)

(defn -main []
  (def supplier [{:s_suppkey 100 :s_name "AlphaSupply" :s_address "123 Hilltop" :s_comment "Reliable and efficient"} {:s_suppkey 200 :s_name "BetaSupply" :s_address "456 Riverside" :s_comment "Known for Customer Complaints"}]) ;; list of
  (def part [{:p_partkey 1 :p_brand "Brand#12" :p_type "SMALL ANODIZED" :p_size 5} {:p_partkey 2 :p_brand "Brand#23" :p_type "MEDIUM POLISHED" :p_size 10}]) ;; list of
  (def partsupp [{:ps_partkey 1 :ps_suppkey 100} {:ps_partkey 2 :ps_suppkey 200}]) ;; list of
  (def excluded_suppliers (vec (->> (for [ps partsupp p part :when (= (:p_partkey p) (:ps_partkey ps)) :when (and (and (= (:p_brand p) "Brand#12") (clojure.string/includes? (:p_type p) "SMALL")) (= (:p_size p) 5))] (:ps_suppkey ps))))) ;; list of int
  (def result (vec (->> (for [s supplier :when (and (and (not (some #(= (:s_suppkey s) %) excluded_suppliers)) (not (clojure.string/includes? (:s_comment s) "Customer"))) (not (clojure.string/includes? (:s_comment s) "Complaints")))] {:s_name (:s_name s) :s_address (:s_address s)}) (sort-by (fn [s] (_sort_key (:s_name s))))))) ;; list of map of string to string
  (_json result)
  (test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints)
)

(-main)
