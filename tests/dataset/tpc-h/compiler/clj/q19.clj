; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:22Z
(ns main)

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare part lineitem revenues result)

(defn test_Q19_returns_total_revenue_from_qualifying_branded_parts []
  (assert (= result 2800.0) "expect failed")
)

(defn -main []
  (def part [{:p_partkey 1 :p_brand "Brand#12" :p_container "SM BOX" :p_size 3} {:p_partkey 2 :p_brand "Brand#23" :p_container "MED BOX" :p_size 5} {:p_partkey 3 :p_brand "Brand#34" :p_container "LG BOX" :p_size 15}]) ;; list of
  (def lineitem [{:l_partkey 1 :l_quantity 5 :l_extendedprice 1000.0 :l_discount 0.1 :l_shipmode "AIR" :l_shipinstruct "DELIVER IN PERSON"} {:l_partkey 2 :l_quantity 15 :l_extendedprice 2000.0 :l_discount 0.05 :l_shipmode "AIR REG" :l_shipinstruct "DELIVER IN PERSON"} {:l_partkey 3 :l_quantity 35 :l_extendedprice 1500.0 :l_discount 0.0 :l_shipmode "AIR" :l_shipinstruct "DELIVER IN PERSON"}]) ;; list of
  (def revenues (vec (->> (for [l lineitem p part :when (= (:p_partkey p) (:l_partkey l)) :when (and (and (or (or (and (and (and (= (:p_brand p) "Brand#12") (some #(= (:p_container p) %) ["SM CASE" "SM BOX" "SM PACK" "SM PKG"])) (and (>= (:l_quantity l) 1) (<= (:l_quantity l) 11))) (and (>= (:p_size p) 1) (<= (:p_size p) 5))) (and (and (and (= (:p_brand p) "Brand#23") (some #(= (:p_container p) %) ["MED BAG" "MED BOX" "MED PKG" "MED PACK"])) (and (>= (:l_quantity l) 10) (<= (:l_quantity l) 20))) (and (>= (:p_size p) 1) (<= (:p_size p) 10)))) (and (and (and (= (:p_brand p) "Brand#34") (some #(= (:p_container p) %) ["LG CASE" "LG BOX" "LG PACK" "LG PKG"])) (and (>= (:l_quantity l) 20) (<= (:l_quantity l) 30))) (and (>= (:p_size p) 1) (<= (:p_size p) 15)))) (some #(= (:l_shipmode l) %) ["AIR" "AIR REG"])) (= (:l_shipinstruct l) "DELIVER IN PERSON"))] (* (:l_extendedprice l) (- 1 (:l_discount l))))))) ;; list of float
  (def result (reduce + 0 revenues)) ;; float
  (_json result)
  (test_Q19_returns_total_revenue_from_qualifying_branded_parts)
)

(-main)
