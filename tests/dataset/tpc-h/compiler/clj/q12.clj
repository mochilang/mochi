; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:11Z
(ns main)

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (cond
          (and (:left j) (:right j))
            (let [matched (boolean-array (count (:items j)))]
              (doseq [left @items]
                (let [m (atom false)]
                  (doseq [[ri right] (map-indexed vector (:items j))]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (aset matched ri true)
                        (swap! joined conj (conj left right))))
                  (when-not @m
                    (swap! joined conj (conj left nil))))
              (doseq [[ri right] (map-indexed vector (:items j))]
                (when-not (aget matched ri)
                  (swap! joined conj
                    (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined))
          (:right j)
            (do
              (doseq [right (:items j)]
                (let [m (atom false)]
                  (doseq [left @items]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (swap! joined conj (conj left right))))
                  (when-not @m
                    (swap! joined conj
                      (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined))
          :else
            (do
              (doseq [left @items]
                (let [m (atom false)]
                  (doseq [right (:items j)]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (swap! joined conj (conj left right))))
                  (when (and (:left j) (not @m))
                    (swap! joined conj (conj left nil))))
              (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) (take (inc (count joins)) %)) it))))))))))
(declare orders lineitem result)

(defn test_Q12_counts_lineitems_by_ship_mode_and_priority []
  (assert (= result [{:l_shipmode "MAIL" :high_line_count 1 :low_line_count 0}]) "expect failed")
)

(defn -main []
  (def orders [{:o_orderkey 1 :o_orderpriority "1-URGENT"} {:o_orderkey 2 :o_orderpriority "3-MEDIUM"}]) ;; list of
  (def lineitem [{:l_orderkey 1 :l_shipmode "MAIL" :l_commitdate "1994-02-10" :l_receiptdate "1994-02-15" :l_shipdate "1994-02-05"} {:l_orderkey 2 :l_shipmode "SHIP" :l_commitdate "1994-03-01" :l_receiptdate "1994-02-28" :l_shipdate "1994-02-27"}]) ;; list of
  (def result (let [_src lineitem
      _rows (_query _src [
        {:items orders :leftKey (fn [l] (:l_orderkey l)) :rightKey (fn [o] (:o_orderkey o))}
      ] { :select (fn [l o] [l o]) :where (fn [l o] (and (and (and (and (some #(= (:l_shipmode l) %) ["MAIL" "SHIP"]) (< (compare (:l_commitdate l) (:l_receiptdate l)) 0)) (< (compare (:l_shipdate l) (:l_commitdate l)) 0)) (>= (compare (:l_receiptdate l) "1994-01-01") 0)) (< (compare (:l_receiptdate l) "1995-01-01") 0))) })
      _groups (_group_by _rows (fn [l o] (:l_shipmode l)))
      ]
  (vec (map (fn [g] {:l_shipmode (:key g) :high_line_count (reduce + 0 (vec (->> (for [x (:Items g)] (if (some #(= (:o_orderpriority (:o x)) %) ["1-URGENT" "2-HIGH"]) 1 0))))) :low_line_count (reduce + 0 (vec (->> (for [x (:Items g)] (if (not (some #(= (:o_orderpriority (:o x)) %) ["1-URGENT" "2-HIGH"])) 1 0)))))}) _groups)))) ;; list of map of string to any
  (_json result)
  (test_Q12_counts_lineitems_by_ship_mode_and_priority)
)

(-main)
