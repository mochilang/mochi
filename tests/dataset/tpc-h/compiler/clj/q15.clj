; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:16Z
(ns main)

(defn _max [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "max() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (pos? (compare a b)) a b)) lst)))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare supplier lineitem start_date end_date revenue0 revenues max_revenue result)

(defn test_Q15_returns_top_revenue_supplier_s__for_Q1_1996 []
  (def rev (+ (* 1000.0 0.9) 500.0)) ;; float
  (assert (= result [{:s_suppkey 100 :s_name "Best Supplier" :s_address "123 Market St" :s_phone "123-456" :total_revenue rev}]) "expect failed")
)

(defn -main []
  (def supplier [{:s_suppkey 100 :s_name "Best Supplier" :s_address "123 Market St" :s_phone "123-456"} {:s_suppkey 200 :s_name "Second Supplier" :s_address "456 Elm St" :s_phone "987-654"}]) ;; list of
  (def lineitem [{:l_suppkey 100 :l_extendedprice 1000.0 :l_discount 0.1 :l_shipdate "1996-01-15"} {:l_suppkey 100 :l_extendedprice 500.0 :l_discount 0.0 :l_shipdate "1996-03-20"} {:l_suppkey 200 :l_extendedprice 800.0 :l_discount 0.05 :l_shipdate "1995-12-30"}]) ;; list of
  (def start_date "1996-01-01") ;; string
  (def end_date "1996-04-01") ;; string
  (def revenue0 (let [_src lineitem
      _filtered (vec (filter (fn [l] (and (>= (compare (:l_shipdate l) start_date) 0) (< (compare (:l_shipdate l) end_date) 0))) _src))
      _groups (_group_by _filtered (fn [l] (:l_suppkey l)))
      ]
  (->> _groups (map (fn [g] {:supplier_no (:key g) :total_revenue (reduce + 0 (vec (->> (for [x (:Items g)] (* (:l_extendedprice x) (- 1 (:l_discount x)))))))})) vec))) ;; list of map of string to any
  (def revenues (vec (->> (for [x revenue0] (:total_revenue x))))) ;; list of any
  (def max_revenue (_max revenues)) ;; any
  (def result (vec (->> (for [s supplier r revenue0 :when (_equal (:s_suppkey s) (:supplier_no r)) :when (_equal (:total_revenue r) max_revenue)] {:s_suppkey (:s_suppkey s) :s_name (:s_name s) :s_address (:s_address s) :s_phone (:s_phone s) :total_revenue (:total_revenue r)}) (sort-by (fn [s] (_sort_key (:s_suppkey s))))))) ;; list of map of string to any
  (_json result)
  (test_Q15_returns_top_revenue_supplier_s__for_Q1_1996)
)

(-main)
