; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:19:22Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare region nation customer supplier orders lineitem asia_nations local_customer_supplier_orders result)

(defn test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers []
  (assert (_equal result [{:n_name "JAPAN" :revenue 950} {:n_name "INDIA" :revenue 720}]) "expect failed")
)

(defn -main []
  (def region [{:r_regionkey 0 :r_name "ASIA"} {:r_regionkey 1 :r_name "EUROPE"}]) ;; list of
  (def nation [{:n_nationkey 10 :n_regionkey 0 :n_name "JAPAN"} {:n_nationkey 20 :n_regionkey 0 :n_name "INDIA"} {:n_nationkey 30 :n_regionkey 1 :n_name "FRANCE"}]) ;; list of
  (def customer [{:c_custkey 1 :c_nationkey 10} {:c_custkey 2 :c_nationkey 20}]) ;; list of
  (def supplier [{:s_suppkey 100 :s_nationkey 10} {:s_suppkey 200 :s_nationkey 20}]) ;; list of
  (def orders [{:o_orderkey 1000 :o_custkey 1 :o_orderdate "1994-03-15"} {:o_orderkey 2000 :o_custkey 2 :o_orderdate "1994-06-10"} {:o_orderkey 3000 :o_custkey 2 :o_orderdate "1995-01-01"}]) ;; list of
  (def lineitem [{:l_orderkey 1000 :l_suppkey 100 :l_extendedprice 1000.0 :l_discount 0.05} {:l_orderkey 2000 :l_suppkey 200 :l_extendedprice 800.0 :l_discount 0.1} {:l_orderkey 3000 :l_suppkey 200 :l_extendedprice 900.0 :l_discount 0.05}]) ;; list of
  (def asia_nations (vec (->> (for [r region :when (_equal (:r_name r) "ASIA") n nation :when (_equal (:n_regionkey n) (:r_regionkey r))] n)))) ;; list of
  (def local_customer_supplier_orders (vec (->> (for [c customer n asia_nations :when (_equal (:c_nationkey c) (:n_nationkey n)) o orders :when (_equal (:o_custkey o) (:c_custkey c)) l lineitem :when (_equal (:l_orderkey l) (:o_orderkey o)) s supplier :when (_equal (:s_suppkey s) (:l_suppkey l)) :when (and (and (>= (compare (:o_orderdate o) "1994-01-01") 0) (< (compare (:o_orderdate o) "1995-01-01") 0)) (_equal (:s_nationkey s) (:c_nationkey c)))] {:nation (:n_name n) :revenue (* (:l_extendedprice l) (- 1 (:l_discount l)))})))) ;; list of
  (def result (let [_src local_customer_supplier_orders
      _groups (_group_by _src (fn [r] (:nation r)))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (- (_sum (vec (->> (for [x (:Items g)] (:revenue x))))))))) (map (fn [g] {:n_name (:key g) :revenue (_sum (vec (->> (for [x (:Items g)] (:revenue x)))))})) vec))) ;; list of
  (_json result)
  (test_Q5_returns_revenue_per_nation_in_ASIA_with_local_suppliers)
)

(-main)
