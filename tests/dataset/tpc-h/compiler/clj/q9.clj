; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:06Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (cond
          (and (:left j) (:right j))
            (let [matched (boolean-array (count (:items j)))]
              (doseq [left @items]
                (let [m (atom false)]
                  (doseq [[ri right] (map-indexed vector (:items j))]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (aset matched ri true)
                        (swap! joined conj (conj left right))))
                  (when-not @m
                    (swap! joined conj (conj left nil))))
              (doseq [[ri right] (map-indexed vector (:items j))]
                (when-not (aget matched ri)
                  (swap! joined conj
                    (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined))
          (:right j)
            (do
              (doseq [right (:items j)]
                (let [m (atom false)]
                  (doseq [left @items]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (swap! joined conj (conj left right))))
                  (when-not @m
                    (swap! joined conj
                      (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined))
          :else
            (do
              (doseq [left @items]
                (let [m (atom false)]
                  (doseq [right (:items j)]
                    (let [keep (if-let [f (:on j)]
                                 (apply f (conj left right))
                                 true)]
                      (when keep
                        (reset! m true)
                        (swap! joined conj (conj left right))))
                  (when (and (:left j) (not @m))
                    (swap! joined conj (conj left nil))))
              (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) (take (inc (count joins)) %)) it))))))))))
(declare nation supplier part partsupp orders lineitem prefix start_date end_date result)

(defn test_Q9_computes_profit_for_green_parts_by_nation_and_year []
  (def revenue (* 1000.0 0.9)) ;; float
  (def cost (* 5 10.0)) ;; float
  (assert (= result [{:nation "BRAZIL" :o_year "1995" :profit (- revenue cost)}]) "expect failed")
)

(defn -main []
  (def nation [{:n_nationkey 1 :n_name "BRAZIL"} {:n_nationkey 2 :n_name "CANADA"}]) ;; list of
  (def supplier [{:s_suppkey 100 :s_nationkey 1} {:s_suppkey 200 :s_nationkey 2}]) ;; list of
  (def part [{:p_partkey 1000 :p_name "green metal box"} {:p_partkey 2000 :p_name "red plastic crate"}]) ;; list of
  (def partsupp [{:ps_partkey 1000 :ps_suppkey 100 :ps_supplycost 10.0} {:ps_partkey 1000 :ps_suppkey 200 :ps_supplycost 8.0}]) ;; list of
  (def orders [{:o_orderkey 1 :o_orderdate "1995-02-10"} {:o_orderkey 2 :o_orderdate "1997-01-01"}]) ;; list of
  (def lineitem [{:l_orderkey 1 :l_partkey 1000 :l_suppkey 100 :l_quantity 5 :l_extendedprice 1000.0 :l_discount 0.1} {:l_orderkey 2 :l_partkey 1000 :l_suppkey 200 :l_quantity 10 :l_extendedprice 800.0 :l_discount 0.05}]) ;; list of
  (def prefix "green") ;; string
  (def start_date "1995-01-01") ;; string
  (def end_date "1996-12-31") ;; string
  (def result (let [_src lineitem
      _rows (_query _src [
        {:items part :leftKey (fn [l] (:l_partkey l)) :rightKey (fn [p] (:p_partkey p))}
        {:items supplier :leftKey (fn [l p] (:l_suppkey l)) :rightKey (fn [s] (:s_suppkey s))}
        {:items partsupp :on (fn [l p s ps] (and (= (:ps_partkey ps) (:l_partkey l)) (= (:ps_suppkey ps) (:l_suppkey l))))}
        {:items orders :leftKey (fn [l p s ps] (:l_orderkey l)) :rightKey (fn [o] (:o_orderkey o))}
        {:items nation :leftKey (fn [l p s ps o] (:s_nationkey s)) :rightKey (fn [n] (:n_nationkey n))}
      ] { :select (fn [l p s ps o n] [l p s ps o n]) :where (fn [l p s ps o n] (and (and (= (.substring (:p_name p) 0 (count prefix)) prefix) (>= (compare (:o_orderdate o) start_date) 0)) (<= (compare (:o_orderdate o) end_date) 0))) })
      _groups (_group_by _rows (fn [l p s ps o n] {:nation (:n_name n) :o_year (Integer/parseInt (.substring (:o_orderdate o) 0 4))}))
      ]
  (vec (map (fn [g] {:nation (:nation (:key g)) :o_year (str (:o_year (:key g))) :profit (_sum (vec (->> (for [x (:Items g)] (- (* (:l_extendedprice (:l x)) (- 1 (:l_discount (:l x)))) (* (:ps_supplycost (:ps x)) (:l_quantity (:l x))))))))}) _groups)))) ;; list of map of string to any
  (_json result)
  (test_Q9_computes_profit_for_green_parts_by_nation_and_year)
)

(-main)
