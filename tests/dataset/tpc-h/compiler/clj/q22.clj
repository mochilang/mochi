; Generated by Mochi compiler v0.10.25 on 2025-07-13T18:35:02Z
(ns main)

(defn _count [v]
  (cond
    (sequential? v) (count v)
    (and (map? v) (contains? v :Items)) (count (:Items v))
    :else (throw (ex-info "count() expects list or group" {}))))

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare customer orders valid_codes avg_balance eligible_customers groups tmp result)

(defn test_Q22_returns_wealthy_inactive_customers_by_phone_prefix []
  (assert (_equal result [{:cntrycode "13" :numcust 1 :totacctbal 600.0} {:cntrycode "30" :numcust 1 :totacctbal 700.0}]) "expect failed")
)

(defn -main []
  (def customer [{:c_custkey 1 :c_phone "13-123-4567" :c_acctbal 600.0} {:c_custkey 2 :c_phone "31-456-7890" :c_acctbal 100.0} {:c_custkey 3 :c_phone "30-000-0000" :c_acctbal 700.0}]) ;; list of
  (def orders [{:o_orderkey 10 :o_custkey 2}]) ;; list of
  (def valid_codes ["13" "31" "23" "29" "30" "18" "17"]) ;; list of string
  (def avg_balance (let [xs (vec (->> (for [c customer :when (and (> (:c_acctbal c) 0.0) (some #(= (.substring (:c_phone c) 0 2) %) valid_codes))] (:c_acctbal c))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs)))))) ;; float
  (def eligible_customers (vec (->> (for [c customer :when (and (and (some #(= (.substring (:c_phone c) 0 2) %) valid_codes) (> (:c_acctbal c) avg_balance)) (not (boolean (seq (vec (->> (for [o orders :when (_equal (:o_custkey o) (:c_custkey c))] o)))))))] {:cntrycode (.substring (:c_phone c) 0 2) :c_acctbal (:c_acctbal c)})))) ;; list of
  (def groups (map (fn [g] g) (_group_by eligible_customers (fn [c] (:cntrycode c))))) ;; list of any
  (def tmp []) ;; list of any
  (loop [_tmp0 (seq groups)]
    (when _tmp0
      (let [g (clojure.core/first _tmp0)]
        (let [r (try
          (def total (_sum (vec (->> (for [x (:items g)] (:c_acctbal x)))))) ;; float
          (def row {:cntrycode (:key g) :numcust (_count g) :totacctbal total}) ;;
          (def tmp (conj tmp row)) ;; list of any
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        :else (recur (next _tmp0))
      )
    )
  )
)
)
(def result (vec (->> (for [r tmp] r) (sort-by (fn [r] (_sort_key (:cntrycode r))))))) ;; list of any
(_json result)
(test_Q22_returns_wealthy_inactive_customers_by_phone_prefix)
)

(-main)
