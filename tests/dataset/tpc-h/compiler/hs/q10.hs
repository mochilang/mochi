-- Generated by Mochi compiler v0.10.25 on 2025-07-13T07:10:13Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import qualified Data.Aeson as Aeson
import qualified Data.ByteString.Lazy.Char8 as BSL
import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_json :: (Aeson.ToJSON a) => a -> IO ()
_json v = BSL.putStrLn (Aeson.encode v)

expect :: Bool -> IO ()
expect True = pure ()
expect False = error "expect failed"

nation = [Map.fromList [("n_nationkey", (1 :: Int)), ("n_name", "BRAZIL")]]

customer = [Map.fromList [("c_custkey", (1 :: Int)), ("c_name", "Alice"), ("c_acctbal", (100.0 :: Double)), ("c_nationkey", (1 :: Int)), ("c_address", "123 St"), ("c_phone", "123-456"), ("c_comment", "Loyal")]]

orders = [Map.fromList [("o_orderkey", (1000 :: Int)), ("o_custkey", (1 :: Int)), ("o_orderdate", "1993-10-15")], Map.fromList [("o_orderkey", (2000 :: Int)), ("o_custkey", (1 :: Int)), ("o_orderdate", "1994-01-02")]]

lineitem = [Map.fromList [("l_orderkey", (1000 :: Int)), ("l_returnflag", "R"), ("l_extendedprice", (1000.0 :: Double)), ("l_discount", (0.1 :: Double))], Map.fromList [("l_orderkey", (2000 :: Int)), ("l_returnflag", "N"), ("l_extendedprice", (500.0 :: Double)), ("l_discount", (0.0 :: Double))]]

start_date = "1993-10-01"

end_date = "1994-01-01"

result = map snd (List.sortOn fst [((-sum [(fromMaybe (error "missing") (Map.lookup "l_extendedprice" (fromMaybe (error "missing") (Map.lookup "l" (x)))) * ((1 - _asInt (fromMaybe (error "missing") (Map.lookup "l_discount" (fromMaybe (error "missing") (Map.lookup "l" (x)))))))) | x <- g]), Map.fromList [("c_custkey", fromMaybe (error "missing") (Map.lookup "c_custkey" (key (g)))), ("c_name", fromMaybe (error "missing") (Map.lookup "c_name" (key (g)))), ("revenue", (sum [(fromMaybe (error "missing") (Map.lookup "l_extendedprice" (fromMaybe (error "missing") (Map.lookup "l" (x)))) * ((1 - _asInt (fromMaybe (error "missing") (Map.lookup "l_discount" (fromMaybe (error "missing") (Map.lookup "l" (x)))))))) | x <- g] :: Double)), ("c_acctbal", fromMaybe (error "missing") (Map.lookup "c_acctbal" (key (g)))), ("n_name", fromMaybe (error "missing") (Map.lookup "n_name" (key (g)))), ("c_address", fromMaybe (error "missing") (Map.lookup "c_address" (key (g)))), ("c_phone", fromMaybe (error "missing") (Map.lookup "c_phone" (key (g)))), ("c_comment", fromMaybe (error "missing") (Map.lookup "c_comment" (key (g))))]) | g <- _group_by [(c, o, l, n) | c <- customer, o <- orders, l <- lineitem, n <- nation, (fromMaybe (error "missing") (Map.lookup "o_custkey" (o)) == fromMaybe (error "missing") (Map.lookup "c_custkey" (c))), (fromMaybe (error "missing") (Map.lookup "l_orderkey" (l)) == fromMaybe (error "missing") (Map.lookup "o_orderkey" (o))), (fromMaybe (error "missing") (Map.lookup "n_nationkey" (n)) == fromMaybe (error "missing") (Map.lookup "c_nationkey" (c))), (((((fromMaybe (error "missing") (Map.lookup "o_orderdate" o) >= start_date) && fromMaybe (error "missing") (Map.lookup "o_orderdate" o)) < end_date) && fromMaybe (error "missing") (Map.lookup "l_returnflag" l)) == "R")] (\(c, o, l, n) -> Map.fromList [("c_custkey", fromMaybe (error "missing") (Map.lookup "c_custkey" c)), ("c_name", fromMaybe (error "missing") (Map.lookup "c_name" c)), ("c_acctbal", fromMaybe (error "missing") (Map.lookup "c_acctbal" c)), ("c_address", fromMaybe (error "missing") (Map.lookup "c_address" c)), ("c_phone", fromMaybe (error "missing") (Map.lookup "c_phone" c)), ("c_comment", fromMaybe (error "missing") (Map.lookup "c_comment" c)), ("n_name", fromMaybe (error "missing") (Map.lookup "n_name" n))])])

test_Q10_returns_customer_revenue_from_returned_items :: IO ()
test_Q10_returns_customer_revenue_from_returned_items = do
  expect ((result == [Map.fromList [("c_custkey", (1 :: Int)), ("c_name", "Alice"), ("revenue", ((1000.0 * 0.9) :: Double)), ("c_acctbal", (100.0 :: Double)), ("n_name", "BRAZIL"), ("c_address", "123 St"), ("c_phone", "123-456"), ("c_comment", "Loyal")]]))

main :: IO ()
main = do
  _json result
  test_Q10_returns_customer_revenue_from_returned_items
