#lang racket
(require racket/list)
(require json)
(define region (list (hash 'r_regionkey 0 'r_name "ASIA") (hash 'r_regionkey 1 'r_name "EUROPE")))
(define nation (list (hash 'n_nationkey 10 'n_regionkey 0 'n_name "JAPAN") (hash 'n_nationkey 20 'n_regionkey 0 'n_name "INDIA") (hash 'n_nationkey 30 'n_regionkey 1 'n_name "FRANCE")))
(define customer (list (hash 'c_custkey 1 'c_nationkey 10) (hash 'c_custkey 2 'c_nationkey 20)))
(define supplier (list (hash 's_suppkey 100 's_nationkey 10) (hash 's_suppkey 200 's_nationkey 20)))
(define orders (list (hash 'o_orderkey 1000 'o_custkey 1 'o_orderdate "1994-03-15") (hash 'o_orderkey 2000 'o_custkey 2 'o_orderdate "1994-06-10") (hash 'o_orderkey 3000 'o_custkey 2 'o_orderdate "1995-01-01")))
(define lineitem (list (hash 'l_orderkey 1000 'l_suppkey 100 'l_extendedprice 1000 'l_discount 0.05) (hash 'l_orderkey 2000 'l_suppkey 200 'l_extendedprice 800 'l_discount 0.1) (hash 'l_orderkey 3000 'l_suppkey 200 'l_extendedprice 900 'l_discount 0.05)))
(define asia_nations (for*/list ([r region] [n nation] #:when (and (equal? (hash-ref n 'n_regionkey) (hash-ref r 'r_regionkey)) (string=? (hash-ref r 'r_name) "ASIA"))) n))
(define local_customer_supplier_orders (for*/list ([c customer] [n asia_nations] [o orders] [l lineitem] [s supplier] #:when (and (equal? (hash-ref c 'c_nationkey) (hash-ref n 'n_nationkey)) (equal? (hash-ref o 'o_custkey) (hash-ref c 'c_custkey)) (equal? (hash-ref l 'l_orderkey) (hash-ref o 'o_orderkey)) (equal? (hash-ref s 's_suppkey) (hash-ref l 'l_suppkey)) (and (and (string>=? (hash-ref o 'o_orderdate) "1994-01-01") (string<? (hash-ref o 'o_orderdate) "1995-01-01")) (equal? (hash-ref s 's_nationkey) (hash-ref c 'c_nationkey))))) (hash 'nation (hash-ref n 'n_name) 'revenue (* (hash-ref l 'l_extendedprice) (- 1 (hash-ref l 'l_discount))))))
(define result (let ([groups (make-hash)])
  (for* ([r local_customer_supplier_orders]) (let* ([key (hash-ref r 'nation)] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons r bucket))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (set! _groups (sort _groups (lambda (a b) (cond [(string? (let ([g a]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v))))) (string>? (let ([g a]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))) (let ([g b]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))))] [(string? (let ([g b]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v))))) (string>? (let ([g a]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))) (let ([g b]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))))] [else (> (let ([g a]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))) (let ([g b]) (- (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v)))))]))))
  (for/list ([g _groups]) (hash 'n_name (hash-ref g 'key) 'revenue (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'revenue))]) v))))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'n_name "JAPAN" 'revenue 950) (hash 'n_name "INDIA" 'revenue 720))) (displayln "ok"))
