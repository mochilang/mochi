#lang racket
(require racket/list)
(require json)
(define customer (list (hash 'c_custkey 1 'c_mktsegment "BUILDING") (hash 'c_custkey 2 'c_mktsegment "AUTOMOBILE")))
(define orders (list (hash 'o_orderkey 100 'o_custkey 1 'o_orderdate "1995-03-14" 'o_shippriority 1) (hash 'o_orderkey 200 'o_custkey 2 'o_orderdate "1995-03-10" 'o_shippriority 2)))
(define lineitem (list (hash 'l_orderkey 100 'l_extendedprice 1000 'l_discount 0.05 'l_shipdate "1995-03-16") (hash 'l_orderkey 100 'l_extendedprice 500 'l_discount 0 'l_shipdate "1995-03-20") (hash 'l_orderkey 200 'l_extendedprice 1000 'l_discount 0.1 'l_shipdate "1995-03-14")))
(define cutoff "1995-03-15")
(define segment "BUILDING")
(define building_customers (for*/list ([c customer] #:when (and (string=? (hash-ref c 'c_mktsegment) segment))) c))
(define valid_orders (for*/list ([o orders] [c building_customers] #:when (and (equal? (hash-ref o 'o_custkey) (hash-ref c 'c_custkey)) (string<? (hash-ref o 'o_orderdate) cutoff))) o))
(define valid_lineitems (for*/list ([l lineitem] #:when (and (string>? (hash-ref l 'l_shipdate) cutoff))) l))
(define order_line_join (let ([groups (make-hash)])
  (for* ([o valid_orders] [l valid_lineitems] #:when (and (equal? (hash-ref l 'l_orderkey) (hash-ref o 'o_orderkey)))) (let* ([key (hash 'o_orderkey (hash-ref o 'o_orderkey) 'o_orderdate (hash-ref o 'o_orderdate) 'o_shippriority (hash-ref o 'o_shippriority))] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons (hash 'o o 'l l) bucket))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (set! _groups (sort _groups (lambda (a b) (cond [(string? (let ([g a]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate)))) (string>? (let ([g a]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))) (let ([g b]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))))] [(string? (let ([g b]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate)))) (string>? (let ([g a]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))) (let ([g b]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))))] [else (> (let ([g a]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))) (let ([g b]) (list (- (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v))) (hash-ref (hash-ref g 'key) 'o_orderdate))))]))))
  (for/list ([g _groups]) (hash 'l_orderkey (hash-ref (hash-ref g 'key) 'o_orderkey) 'revenue (apply + (for*/list ([v (for*/list ([r (hash-ref g 'items)]) (* (hash-ref (hash-ref r 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref r 'l) 'l_discount))))]) v)) 'o_orderdate (hash-ref (hash-ref g 'key) 'o_orderdate) 'o_shippriority (hash-ref (hash-ref g 'key) 'o_shippriority)))))
(displayln (jsexpr->string order_line_join))
(when (equal? order_line_join (list (hash 'l_orderkey 100 'revenue (+ (* 1000 0.95) 500) 'o_orderdate "1995-03-14" 'o_shippriority 1))) (displayln "ok"))
