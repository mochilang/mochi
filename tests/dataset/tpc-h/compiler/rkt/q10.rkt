#lang racket
(require json)
(define nation (list (hash 'n_nationkey 1 'n_name "BRAZIL")))
(define customer (list (hash 'c_custkey 1 'c_name "Alice" 'c_acctbal 100 'c_nationkey 1 'c_address "123 St" 'c_phone "123-456" 'c_comment "Loyal")))
(define orders (list (hash 'o_orderkey 1000 'o_custkey 1 'o_orderdate "1993-10-15") (hash 'o_orderkey 2000 'o_custkey 1 'o_orderdate "1994-01-02")))
(define lineitem (list (hash 'l_orderkey 1000 'l_returnflag "R" 'l_extendedprice 1000 'l_discount 0.1) (hash 'l_orderkey 2000 'l_returnflag "N" 'l_extendedprice 500 'l_discount 0)))
(define start_date "1993-10-01")
(define end_date "1994-01-01")
(define result (let ([groups (make-hash)])
  (for* ([c customer] [o orders] [l lineitem] [n nation] #:when (and (equal? (hash-ref o 'o_custkey) (hash-ref c 'c_custkey)) (equal? (hash-ref l 'l_orderkey) (hash-ref o 'o_orderkey)) (equal? (hash-ref n 'n_nationkey) (hash-ref c 'c_nationkey)) (and (and (string>=? (hash-ref o 'o_orderdate) start_date) (string<? (hash-ref o 'o_orderdate) end_date)) (string=? (hash-ref l 'l_returnflag) "R")))) (let* ([key (hash 'c_custkey (hash-ref c 'c_custkey) 'c_name (hash-ref c 'c_name) 'c_acctbal (hash-ref c 'c_acctbal) 'c_address (hash-ref c 'c_address) 'c_phone (hash-ref c 'c_phone) 'c_comment (hash-ref c 'c_comment) 'n_name (hash-ref n 'n_name))] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons (hash 'c c 'o o 'l l 'n n) bucket))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (set! _groups (sort _groups (lambda (a b) (cond [(string? (let ([g a]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v)))))) (string>? (let ([g a]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))) (let ([g b]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))))] [(string? (let ([g b]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v)))))) (string>? (let ([g a]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))) (let ([g b]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))))] [else (> (let ([g a]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))) (let ([g b]) (- (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))))))]))))
  (for/list ([g _groups]) (hash 'c_custkey (hash-ref (hash-ref g 'key) 'c_custkey) 'c_name (hash-ref (hash-ref g 'key) 'c_name) 'revenue (for/fold ([s 0.0]) ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) (+ s (real->double-flonum v))) 'c_acctbal (hash-ref (hash-ref g 'key) 'c_acctbal) 'n_name (hash-ref (hash-ref g 'key) 'n_name) 'c_address (hash-ref (hash-ref g 'key) 'c_address) 'c_phone (hash-ref (hash-ref g 'key) 'c_phone) 'c_comment (hash-ref (hash-ref g 'key) 'c_comment)))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'c_custkey 1 'c_name "Alice" 'revenue (* 1000 0.9) 'c_acctbal 100 'n_name "BRAZIL" 'c_address "123 St" 'c_phone "123-456" 'c_comment "Loyal"))) (displayln "ok"))
