#lang racket
(require json)
(define lineitem (list (hash 'l_quantity 17 'l_extendedprice 1000 'l_discount 0.05 'l_tax 0.07 'l_returnflag "N" 'l_linestatus "O" 'l_shipdate "1998-08-01") (hash 'l_quantity 36 'l_extendedprice 2000 'l_discount 0.1 'l_tax 0.05 'l_returnflag "N" 'l_linestatus "O" 'l_shipdate "1998-09-01") (hash 'l_quantity 25 'l_extendedprice 1500 'l_discount 0 'l_tax 0.08 'l_returnflag "R" 'l_linestatus "F" 'l_shipdate "1998-09-03")))
(define result (let ([groups (make-hash)])
  (for* ([row lineitem] #:when (and (cond [(string? (hash-ref row 'l_shipdate)) (string<=? (hash-ref row 'l_shipdate) "1998-09-02")] [(string? "1998-09-02") (string<=? (hash-ref row 'l_shipdate) "1998-09-02")] [else (<= (hash-ref row 'l_shipdate) "1998-09-02")]))) (let* ([key (hash 'returnflag (hash-ref row 'l_returnflag) 'linestatus (hash-ref row 'l_linestatus))] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons row bucket))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (for/list ([g _groups]) (hash 'returnflag (hash-ref (hash-ref g 'key) 'returnflag) 'linestatus (hash-ref (hash-ref g 'key) 'linestatus) 'sum_qty (apply + (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_quantity))) 'sum_base_price (apply + (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_extendedprice))) 'sum_disc_price (apply + (for*/list ([x (hash-ref g 'items)]) (* (hash-ref x 'l_extendedprice) (- 1 (hash-ref x 'l_discount))))) 'sum_charge (apply + (for*/list ([x (hash-ref g 'items)]) (* (* (hash-ref x 'l_extendedprice) (- 1 (hash-ref x 'l_discount))) (+ 1 (hash-ref x 'l_tax))))) 'avg_qty (let ([xs (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_quantity))] [n (length (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_quantity)))]) (if (= n 0) 0 (/ (for/fold ([s 0.0]) ([v xs]) (+ s (real->double-flonum v))) n))) 'avg_price (let ([xs (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_extendedprice))] [n (length (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_extendedprice)))]) (if (= n 0) 0 (/ (for/fold ([s 0.0]) ([v xs]) (+ s (real->double-flonum v))) n))) 'avg_disc (let ([xs (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_discount))] [n (length (for*/list ([x (hash-ref g 'items)]) (hash-ref x 'l_discount)))]) (if (= n 0) 0 (/ (for/fold ([s 0.0]) ([v xs]) (+ s (real->double-flonum v))) n))) 'count_order (length (hash-ref g 'items))))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'returnflag "N" 'linestatus "O" 'sum_qty 53 'sum_base_price 3000 'sum_disc_price (+ 950 1800) 'sum_charge (+ (* 950 1.07) (* 1800 1.05)) 'avg_qty 26.5 'avg_price 1500 'avg_disc 0.07500000000000001 'count_order 2))) (displayln "ok"))
