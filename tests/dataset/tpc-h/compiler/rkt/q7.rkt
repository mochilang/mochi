#lang racket
(require racket/list)
(require json)
(define nation (list (hash 'n_nationkey 1 'n_name "FRANCE") (hash 'n_nationkey 2 'n_name "GERMANY")))
(define supplier (list (hash 's_suppkey 100 's_nationkey 1)))
(define customer (list (hash 'c_custkey 200 'c_nationkey 2)))
(define orders (list (hash 'o_orderkey 1000 'o_custkey 200)))
(define lineitem (list (hash 'l_orderkey 1000 'l_suppkey 100 'l_extendedprice 1000 'l_discount 0.1 'l_shipdate "1995-06-15") (hash 'l_orderkey 1000 'l_suppkey 100 'l_extendedprice 800 'l_discount 0.05 'l_shipdate "1997-01-01")))
(define start_date "1995-01-01")
(define end_date "1996-12-31")
(define nation1 "FRANCE")
(define nation2 "GERMANY")
(define result (let ([groups (make-hash)])
  (for* ([l lineitem] [o orders] [c customer] [s supplier] [n1 nation] [n2 nation] #:when (and (equal? (hash-ref o 'o_orderkey) (hash-ref l 'l_orderkey)) (equal? (hash-ref c 'c_custkey) (hash-ref o 'o_custkey)) (equal? (hash-ref s 's_suppkey) (hash-ref l 'l_suppkey)) (equal? (hash-ref n1 'n_nationkey) (hash-ref s 's_nationkey)) (equal? (hash-ref n2 'n_nationkey) (hash-ref c 'c_nationkey)) (or (and (and (string>=? (hash-ref l 'l_shipdate) start_date) (string<=? (hash-ref l 'l_shipdate) end_date)) (and (string=? (hash-ref n1 'n_name) nation1) (string=? (hash-ref n2 'n_name) nation2))) (and (string=? (hash-ref n1 'n_name) nation2) (string=? (hash-ref n2 'n_name) nation1))))) (let* ([key (hash 'supp_nation (hash-ref n1 'n_name) 'cust_nation (hash-ref n2 'n_name) 'l_year (substring (hash-ref l 'l_shipdate) 0 4))] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons (hash 'l l 'o o 'c c 's s 'n1 n1 'n2 n2) bucket))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (set! _groups (sort _groups (lambda (a b) (cond [(string? (let ([g a]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year)))) (string>? (let ([g a]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))) (let ([g b]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))))] [(string? (let ([g b]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year)))) (string>? (let ([g a]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))) (let ([g b]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))))] [else (> (let ([g a]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))) (let ([g b]) (list (hash-ref (hash-ref g 'key) 'supp_nation) (hash-ref (hash-ref g 'key) 'cust_nation) (hash-ref (hash-ref g 'key) 'l_year))))]))))
  (for/list ([g _groups]) (hash 'supp_nation (hash-ref (hash-ref g 'key) 'supp_nation) 'cust_nation (hash-ref (hash-ref g 'key) 'cust_nation) 'l_year (hash-ref (hash-ref g 'key) 'l_year) 'revenue (apply + (for*/list ([v (for*/list ([x (hash-ref g 'items)]) (* (hash-ref (hash-ref x 'l) 'l_extendedprice) (- 1 (hash-ref (hash-ref x 'l) 'l_discount))))]) v))))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'supp_nation "FRANCE" 'cust_nation "GERMANY" 'l_year "1995" 'revenue 900))) (displayln "ok"))
