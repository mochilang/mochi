#lang racket
(require racket/list)
(require json)
(define part (list (hash 'p_partkey 1 'p_type "PROMO LUXURY") (hash 'p_partkey 2 'p_type "STANDARD BRASS")))
(define lineitem (list (hash 'l_partkey 1 'l_extendedprice 1000 'l_discount 0.1 'l_shipdate "1995-09-05") (hash 'l_partkey 2 'l_extendedprice 800 'l_discount 0 'l_shipdate "1995-09-20") (hash 'l_partkey 1 'l_extendedprice 500 'l_discount 0.2 'l_shipdate "1995-10-02")))
(define start_date "1995-09-01")
(define end_date "1995-10-01")
(define filtered (for*/list ([l lineitem] [p part] #:when (and (equal? (hash-ref p 'p_partkey) (hash-ref l 'l_partkey)) (and (string>=? (hash-ref l 'l_shipdate) start_date) (string<? (hash-ref l 'l_shipdate) end_date)))) (hash 'is_promo (cond [(string? (hash-ref p 'p_type)) (regexp-match? (regexp "PROMO") (hash-ref p 'p_type))] [(hash? (hash-ref p 'p_type)) (hash-has-key? (hash-ref p 'p_type) "PROMO")] [else (member "PROMO" (hash-ref p 'p_type))]) 'revenue (* (hash-ref l 'l_extendedprice) (- 1 (hash-ref l 'l_discount))))))
(define promo_sum (apply + (for*/list ([v (for*/list ([x filtered] #:when (and (hash-ref x 'is_promo))) (hash-ref x 'revenue))]) v)))
(define total_sum (apply + (for*/list ([v (for*/list ([x filtered]) (hash-ref x 'revenue))]) v)))
(define result (/ (* 100 promo_sum) total_sum))
(displayln (jsexpr->string result))
(define promo (* 1000 0.9))
(define total (+ 900 800))
(define expected (/ (* 100 promo) total))
(when (equal? result expected) (displayln "ok"))
