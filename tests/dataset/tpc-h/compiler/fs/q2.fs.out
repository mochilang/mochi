open System

let r_regionkey = "r_regionkey"
let r_name = "r_name"
let n_nationkey = "n_nationkey"
let n_regionkey = "n_regionkey"
let n_name = "n_name"
let s_suppkey = "s_suppkey"
let s_name = "s_name"
let s_address = "s_address"
let s_nationkey = "s_nationkey"
let s_phone = "s_phone"
let s_acctbal = "s_acctbal"
let s_comment = "s_comment"
let p_partkey = "p_partkey"
let p_type = "p_type"
let p_size = "p_size"
let p_mfgr = "p_mfgr"
let ps_partkey = "ps_partkey"
let ps_suppkey = "ps_suppkey"
let ps_supplycost = "ps_supplycost"
let s = "s"
let n = "n"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let region = [|Map.ofList [(r_regionkey, 1); (r_name, "EUROPE")]; Map.ofList [(r_regionkey, 2); (r_name, "ASIA")]|]
let nation = [|Map.ofList [(n_nationkey, 10); (n_regionkey, 1); (n_name, "FRANCE")]; Map.ofList [(n_nationkey, 20); (n_regionkey, 2); (n_name, "CHINA")]|]
let supplier = [|Map.ofList [(s_suppkey, 100); (s_name, "BestSupplier"); (s_address, "123 Rue"); (s_nationkey, 10); (s_phone, "123"); (s_acctbal, 1000.0); (s_comment, "Fast and reliable")]; Map.ofList [(s_suppkey, 200); (s_name, "AltSupplier"); (s_address, "456 Way"); (s_nationkey, 20); (s_phone, "456"); (s_acctbal, 500.0); (s_comment, "Slow")]|]
let part = [|Map.ofList [(p_partkey, 1000); (p_type, "LARGE BRASS"); (p_size, 15); (p_mfgr, "M1")]; Map.ofList [(p_partkey, 2000); (p_type, "SMALL COPPER"); (p_size, 15); (p_mfgr, "M2")]|]
let partsupp = [|Map.ofList [(ps_partkey, 1000); (ps_suppkey, 100); (ps_supplycost, 10.0)]; Map.ofList [(ps_partkey, 1000); (ps_suppkey, 200); (ps_supplycost, 15.0)]|]
let europe_nations = 
    [|
    for r in region do
        for n in nation do
            if (n.n_regionkey = r.r_regionkey) then
                if (r.r_name = "EUROPE") then
                    yield n
    |]
let europe_suppliers = 
    [|
    for s in supplier do
        for n in europe_nations do
            if (s.s_nationkey = n.n_nationkey) then
                yield Map.ofList [(s, s); (n, n)]
    |]
let target_parts = 
    [|
    for p in part do
        if ((p.p_size = 15) && (p.p_type = "LARGE BRASS")) then
            yield p
    |]
let target_partsupp = 
    [|
    for ps in partsupp do
        for p in target_parts do
            if (ps.ps_partkey = p.p_partkey) then
                for s in europe_suppliers do
                    if (ps.ps_suppkey = s.s.s_suppkey) then
                        yield Map.ofList [(s_acctbal, s.s.s_acctbal); (s_name, s.s.s_name); (n_name, s.n.n_name); (p_partkey, p.p_partkey); (p_mfgr, p.p_mfgr); (s_address, s.s.s_address); (s_phone, s.s.s_phone); (s_comment, s.s.s_comment); (ps_supplycost, ps.ps_supplycost)]
    |]
let costs = 
    [|
    for x in target_partsupp do
        yield x.ps_supplycost
    |]
let min_cost = _min costs
let result = 
    [|
    for x in target_partsupp do
        if (x.ps_supplycost = min_cost) then
            yield ((-x.s_acctbal), x)
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() =
    if not ((result = [|Map.ofList [(s_acctbal, 1000.0); (s_name, "BestSupplier"); (n_name, "FRANCE"); (p_partkey, 1000); (p_mfgr, "M1"); (s_address, "123 Rue"); (s_phone, "123"); (s_comment, "Fast and reliable"); (ps_supplycost, 10.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q2 returns only supplier with min cost in Europe for brass part" test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
