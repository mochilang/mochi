// Generated by Mochi compiler v0.10.25 on 2025-07-13T07:07:41Z
open System
open System.Text.Json

type Anon1 = {
    n_nationkey: int
    n_name: string
}
type Anon2 = {
    s_suppkey: int
    s_nationkey: int
}
type Anon3 = {
    c_custkey: int
    c_nationkey: int
}
type Anon4 = {
    o_orderkey: int
    o_custkey: int
}
type Anon5 = {
    l_orderkey: int
    l_suppkey: int
    l_extendedprice: float
    l_discount: float
    l_shipdate: string
}
type Anon6 = {
    supp_nation: obj
    cust_nation: obj
    l_year: obj
    revenue: obj
}
type Anon7 = {
    supp_nation: obj
    cust_nation: obj
    l_year: obj
}
type Anon8 = {
    supp_nation: string
    cust_nation: string
    l_year: string
    revenue: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let nation: obj list = [{ n_nationkey = 1; n_name = "FRANCE" }; { n_nationkey = 2; n_name = "GERMANY" }]
let supplier: obj list = [{ s_suppkey = 100; s_nationkey = 1 }]
let customer: obj list = [{ c_custkey = 200; c_nationkey = 2 }]
let orders: obj list = [{ o_orderkey = 1000; o_custkey = 200 }]
let lineitem: obj list = [{ l_orderkey = 1000; l_suppkey = 100; l_extendedprice = 1000; l_discount = 0.1; l_shipdate = "1995-06-15" }; { l_orderkey = 1000; l_suppkey = 100; l_extendedprice = 800; l_discount = 0.05; l_shipdate = "1997-01-01" }]
let start_date: string = "1995-01-01"
let end_date: string = "1996-12-31"
let nation1: string = "FRANCE"
let nation2: string = "GERMANY"
let result: obj list = [ for g in _group_by [ for l in lineitem do 
  for o in orders do 
  for c in customer do 
  for s in supplier do 
  for n1 in nation do 
  for n2 in nation do if o.o_orderkey = l.l_orderkey && c.c_custkey = o.o_custkey && s.s_suppkey = l.l_suppkey && n1.n_nationkey = s.s_nationkey && n2.n_nationkey = c.c_nationkey && (l.l_shipdate >= start_date && l.l_shipdate <= end_date && (n1.n_name = nation1 && n2.n_name = nation2) || (n1.n_name = nation2 && n2.n_name = nation1)) then yield (l, o, c, s, n1, n2) ] (fun (l, o, c, s, n1, n2) -> { supp_nation = n1.n_name; cust_nation = n2.n_name; l_year = l.l_shipdate.Substring(0, 4 - 0) }) |> List.sortBy (fun gTmp -> let g = gTmp in [supp_nation; cust_nation; l_year]) do
    yield { supp_nation = g.key.supp_nation; cust_nation = g.key.cust_nation; l_year = g.key.l_year; revenue = List.sum [ for x in g do yield x.l.l_extendedprice * (1 - x.l.l_discount) ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ supp_nation = "FRANCE"; cust_nation = "GERMANY"; l_year = "1995"; revenue = 900 }])
