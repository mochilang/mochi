// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:40Z
open System
open System.Text.Json

type Anon1 = {
    r_regionkey: int
    r_name: string
}
type Anon2 = {
    n_nationkey: int
    n_regionkey: int
    n_name: string
}
type Anon3 = {
    c_custkey: int
    c_nationkey: int
}
type Anon4 = {
    s_suppkey: int
    s_nationkey: int
}
type Anon5 = {
    o_orderkey: int
    o_custkey: int
    o_orderdate: string
}
type Anon6 = {
    l_orderkey: int
    l_suppkey: int
    l_extendedprice: float
    l_discount: float
}
type Anon7 = {
    nation: string
    revenue: float
}
type Anon8 = {
    n_name: obj
    revenue: obj
}
type Anon9 = {
    n_name: string
    revenue: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let region: Anon1 list = [{ r_regionkey = 0; r_name = "ASIA" }; { r_regionkey = 1; r_name = "EUROPE" }]
let nation: Anon2 list = [{ n_nationkey = 10; n_regionkey = 0; n_name = "JAPAN" }; { n_nationkey = 20; n_regionkey = 0; n_name = "INDIA" }; { n_nationkey = 30; n_regionkey = 1; n_name = "FRANCE" }]
let customer: Anon3 list = [{ c_custkey = 1; c_nationkey = 10 }; { c_custkey = 2; c_nationkey = 20 }]
let supplier: Anon4 list = [{ s_suppkey = 100; s_nationkey = 10 }; { s_suppkey = 200; s_nationkey = 20 }]
let orders: Anon5 list = [{ o_orderkey = 1000; o_custkey = 1; o_orderdate = "1994-03-15" }; { o_orderkey = 2000; o_custkey = 2; o_orderdate = "1994-06-10" }; { o_orderkey = 3000; o_custkey = 2; o_orderdate = "1995-01-01" }]
let lineitem: Anon6 list = [{ l_orderkey = 1000; l_suppkey = 100; l_extendedprice = 1000.0; l_discount = 0.05 }; { l_orderkey = 2000; l_suppkey = 200; l_extendedprice = 800.0; l_discount = 0.1 }; { l_orderkey = 3000; l_suppkey = 200; l_extendedprice = 900.0; l_discount = 0.05 }]
let asia_nations: Anon2 list = [ for r in region do 
  for n in nation do if n.n_regionkey = r.r_regionkey && r.r_name = "ASIA" then yield n ]
let local_customer_supplier_orders: Anon7 list = [ for c in customer do 
  for n in asia_nations do 
  for o in orders do 
  for l in lineitem do 
  for s in supplier do if c.c_nationkey = n.n_nationkey && o.o_custkey = c.c_custkey && l.l_orderkey = o.o_orderkey && s.s_suppkey = l.l_suppkey && o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey = c.c_nationkey then yield { nation = n.n_name; revenue = l.l_extendedprice * (1 - l.l_discount) } ]
let result: Anon8 list = [ for g in _group_by [ for r in local_customer_supplier_orders do yield r ] (fun r -> r.nation) |> List.sortByDescending (fun gTmp -> let g = gTmp in List.sum [ for x in g do yield x.revenue ]) do
    yield { n_name = g.key; revenue = List.sum [ for x in g do yield x.revenue ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ n_name = "JAPAN"; revenue = 950 }; { n_name = "INDIA"; revenue = 720 }])
