// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:38:06Z
open System
open System.Text.Json

type Anon1 = {
    c_custkey: int
    c_phone: string
    c_acctbal: float
}
type Anon2 = {
    o_orderkey: int
    o_custkey: int
}
type Anon3 = {
    cntrycode: string
    c_acctbal: obj
}
type Anon4 = {
    cntrycode: obj
    numcust: int
    totacctbal: obj
}
type Anon5 = {
    cntrycode: string
    c_acctbal: float
}
type Anon6 = {
    cntrycode: string
    numcust: int
    totacctbal: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups.[ks] ]

let customer: Anon1 list = [{ c_custkey = 1; c_phone = "13-123-4567"; c_acctbal = 600.0 }; { c_custkey = 2; c_phone = "31-456-7890"; c_acctbal = 100.0 }; { c_custkey = 3; c_phone = "30-000-0000"; c_acctbal = 700.0 }]
let orders: Anon2 list = [{ o_orderkey = 10; o_custkey = 2 }]
let valid_codes: string list = ["13"; "31"; "23"; "29"; "30"; "18"; "17"]
let avg_balance: float = (float (List.sum [ for c in customer do if List.contains c.c_acctbal > 0.0 && c.c_phone.Substring(0, 2 - 0) valid_codes then yield c.c_acctbal ]) / float (List.length [ for c in customer do if List.contains c.c_acctbal > 0.0 && c.c_phone.Substring(0, 2 - 0) valid_codes then yield c.c_acctbal ]))
let eligible_customers: Anon5 list = [ for c in customer do if List.contains c.c_phone.Substring(0, 2 - 0) valid_codes && c.c_acctbal > avg_balance && (not not (List.isEmpty [ for o in orders do if o.o_custkey = c.c_custkey then yield o ])) then yield { cntrycode = c.c_phone.Substring(0, 2 - 0); c_acctbal = c.c_acctbal } ]
let groups: obj list = [ for g in _group_by [ for c in eligible_customers do yield c ] (fun c -> c.cntrycode) do
    yield g ]
let mutable tmp: obj array = [||]
for g in groups do
    let total = List.sum [ for x in g.Items do yield x.c_acctbal ]
    let row: Anon4 = { cntrycode = g.key; numcust = g.size; totacctbal = total }
    tmp <- Array.append tmp [|row|]
let result: obj list = [ for r in tmp do yield (r.cntrycode, r) ] |> List.sortBy fst |> List.map snd
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ cntrycode = "13"; numcust = 1; totacctbal = 600.0 }; { cntrycode = "30"; numcust = 1; totacctbal = 700.0 }])
