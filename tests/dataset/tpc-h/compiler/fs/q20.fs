// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:40Z
open System
open System.Text.Json

type Anon1 = {
    n_nationkey: int
    n_name: string
}
type Anon2 = {
    s_suppkey: int
    s_name: string
    s_address: string
    s_nationkey: int
}
type Anon3 = {
    p_partkey: int
    p_name: string
}
type Anon4 = {
    ps_partkey: int
    ps_suppkey: int
    ps_availqty: int
}
type Anon5 = {
    l_partkey: int
    l_suppkey: int
    l_quantity: int
    l_shipdate: string
}
type Anon6 = {
    partkey: obj
    suppkey: obj
    qty: obj
}
type Anon7 = {
    partkey: int
    suppkey: int
}
type Anon8 = {
    s_name: string
    s_address: string
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let nation: Anon1 list = [{ n_nationkey = 1; n_name = "CANADA" }; { n_nationkey = 2; n_name = "GERMANY" }]
let supplier: Anon2 list = [{ s_suppkey = 100; s_name = "Maple Supply"; s_address = "123 Forest Lane"; s_nationkey = 1 }; { s_suppkey = 200; s_name = "Berlin Metals"; s_address = "456 Iron Str"; s_nationkey = 2 }]
let part: Anon3 list = [{ p_partkey = 10; p_name = "forest glade bricks" }; { p_partkey = 20; p_name = "desert sand paper" }]
let partsupp: Anon4 list = [{ ps_partkey = 10; ps_suppkey = 100; ps_availqty = 100 }; { ps_partkey = 20; ps_suppkey = 200; ps_availqty = 30 }]
let lineitem: Anon5 list = [{ l_partkey = 10; l_suppkey = 100; l_quantity = 100; l_shipdate = "1994-05-15" }; { l_partkey = 10; l_suppkey = 100; l_quantity = 50; l_shipdate = "1995-01-01" }]
let prefix: string = "forest"
let shipped_94: Anon6 list = [ for g in _group_by [ for l in lineitem do if l.l_shipdate >= "1994-01-01" && l.l_shipdate < "1995-01-01" then yield l ] (fun l -> { partkey = l.l_partkey; suppkey = l.l_suppkey }) do
    yield { partkey = g.key.partkey; suppkey = g.key.suppkey; qty = List.sum [ for x in g do yield x.l_quantity ] } ]
let target_partkeys: int list = [ for ps in partsupp do 
  for p in part do 
  for s in shipped_94 do if ps.ps_partkey = p.p_partkey && ps.ps_partkey = s.partkey && ps.ps_suppkey = s.suppkey && p.p_name.Substring(0, List.length prefix - 0) = prefix && ps.ps_availqty > (0.5 * s.qty) then yield ps.ps_suppkey ]
let result: Anon8 list = [ for s in supplier do 
  for n in nation do if n.n_nationkey = s.s_nationkey && List.contains s.s_suppkey target_partkeys && n.n_name = "CANADA" then yield { s_name = s.s_name; s_address = s.s_address } ] |> List.sortBy (fun s -> s.s_name)
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ s_name = "Maple Supply"; s_address = "123 Forest Lane" }])
