// Generated by Mochi compiler v0.10.25 on 2025-07-13T09:14:27Z
open System
open System.Text.Json

type Anon1 = {
    s_suppkey: int
    s_name: string
    s_address: string
    s_phone: string
}
type Anon2 = {
    l_suppkey: int
    l_extendedprice: float
    l_discount: float
    l_shipdate: string
}
type Anon3 = {
    supplier_no: obj
    total_revenue: obj
}
type Anon4 = {
    s_suppkey: obj
    s_name: obj
    s_address: obj
    s_phone: obj
    total_revenue: obj
}
type Anon5 = {
    s_suppkey: int
    s_name: string
    s_address: string
    s_phone: string
    total_revenue: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let supplier: obj list = [{ s_suppkey = 100; s_name = "Best Supplier"; s_address = "123 Market St"; s_phone = "123-456" }; { s_suppkey = 200; s_name = "Second Supplier"; s_address = "456 Elm St"; s_phone = "987-654" }]
let lineitem: obj list = [{ l_suppkey = 100; l_extendedprice = 1000; l_discount = 0.1; l_shipdate = "1996-01-15" }; { l_suppkey = 100; l_extendedprice = 500; l_discount = 0; l_shipdate = "1996-03-20" }; { l_suppkey = 200; l_extendedprice = 800; l_discount = 0.05; l_shipdate = "1995-12-30" }]
let start_date: string = "1996-01-01"
let end_date: string = "1996-04-01"
let revenue0: obj list = [ for g in _group_by [ for l in lineitem do if l.l_shipdate >= start_date && l.l_shipdate < end_date then yield l ] (fun l -> l.l_suppkey) do
    yield { supplier_no = g.key; total_revenue = List.sum [ for x in g do yield x.l_extendedprice * (1 - x.l_discount) ] } ]
let revenues: obj list = [ for x in revenue0 do yield x.total_revenue ]
let max_revenue: obj = List.max revenues
let result: obj list = [ for s in supplier do 
  for r in revenue0 do if s.s_suppkey = r.supplier_no && r.total_revenue = max_revenue then yield { s_suppkey = s.s_suppkey; s_name = s.s_name; s_address = s.s_address; s_phone = s.s_phone; total_revenue = r.total_revenue } ] |> List.sortBy (fun s -> s.s_suppkey)
printfn "%A" (JsonSerializer.Serialize(result))
let rev: float = 1000 * 0.9 + 500
assert (result = [{ s_suppkey = 100; s_name = "Best Supplier"; s_address = "123 Market St"; s_phone = "123-456"; total_revenue = rev }])
