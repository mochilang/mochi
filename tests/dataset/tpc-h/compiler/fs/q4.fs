// Generated by Mochi compiler v0.10.25 on 2025-07-13T05:58:56Z
open System
open System.Text.Json

type Anon1 = {
    o_orderkey: int
    o_orderdate: string
    o_orderpriority: string
}
type Anon2 = {
    l_orderkey: int
    l_commitdate: string
    l_receiptdate: string
}
type Anon3 = {
    o_orderpriority: obj
    order_count: obj
}
type Anon4 = {
    o_orderpriority: string
    order_count: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let orders: obj list = [{ o_orderkey = 1; o_orderdate = "1993-07-01"; o_orderpriority = "1-URGENT" }; { o_orderkey = 2; o_orderdate = "1993-07-15"; o_orderpriority = "2-HIGH" }; { o_orderkey = 3; o_orderdate = "1993-08-01"; o_orderpriority = "3-NORMAL" }]
let lineitem: obj list = [{ l_orderkey = 1; l_commitdate = "1993-07-10"; l_receiptdate = "1993-07-12" }; { l_orderkey = 1; l_commitdate = "1993-07-12"; l_receiptdate = "1993-07-10" }; { l_orderkey = 2; l_commitdate = "1993-07-20"; l_receiptdate = "1993-07-25" }; { l_orderkey = 3; l_commitdate = "1993-08-02"; l_receiptdate = "1993-08-01" }; { l_orderkey = 3; l_commitdate = "1993-08-05"; l_receiptdate = "1993-08-10" }]
let start_date: string = "1993-07-01"
let end_date: string = "1993-08-01"
let date_filtered_orders: obj list = [ for o in orders do if o.o_orderdate >= start_date && o.o_orderdate < end_date then yield o ]
let late_orders: obj list = [ for o in date_filtered_orders do if not (List.isEmpty [ for l in lineitem do if l.l_orderkey = o.o_orderkey && l.l_commitdate < l.l_receiptdate then yield l ]) then yield o ]
let result: obj list = [ for g in _group_by [ for o in late_orders do yield o ] (fun o -> o.o_orderpriority) |> List.sortBy (fun gTmp -> let g = gTmp in g.key) do
    yield { o_orderpriority = g.key; order_count = List.length g.items } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ o_orderpriority = "1-URGENT"; order_count = 1 }; { o_orderpriority = "2-HIGH"; order_count = 1 }])
