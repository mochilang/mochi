// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:37:48Z
open System
open System.Text.Json

type Anon1 = {
    n_nationkey: int
    n_name: string
}
type Anon2 = {
    s_suppkey: int
    s_nationkey: int
}
type Anon3 = {
    p_partkey: int
    p_name: string
}
type Anon4 = {
    ps_partkey: int
    ps_suppkey: int
    ps_supplycost: float
}
type Anon5 = {
    o_orderkey: int
    o_orderdate: string
}
type Anon6 = {
    l_orderkey: int
    l_partkey: int
    l_suppkey: int
    l_quantity: int
    l_extendedprice: float
    l_discount: float
}
type Anon7 = {
    nation: obj
    o_year: string
    profit: obj
}
type Anon8 = {
    nation: obj
    o_year: string
}
type Anon9 = {
    nation: string
    o_year: string
}
type Anon10 = {
    nation: string
    o_year: string
    profit: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups.[ks] ]

let nation: Anon1 list = [{ n_nationkey = 1; n_name = "BRAZIL" }; { n_nationkey = 2; n_name = "CANADA" }]
let supplier: Anon2 list = [{ s_suppkey = 100; s_nationkey = 1 }; { s_suppkey = 200; s_nationkey = 2 }]
let part: Anon3 list = [{ p_partkey = 1000; p_name = "green metal box" }; { p_partkey = 2000; p_name = "red plastic crate" }]
let partsupp: Anon4 list = [{ ps_partkey = 1000; ps_suppkey = 100; ps_supplycost = 10.0 }; { ps_partkey = 1000; ps_suppkey = 200; ps_supplycost = 8.0 }]
let orders: Anon5 list = [{ o_orderkey = 1; o_orderdate = "1995-02-10" }; { o_orderkey = 2; o_orderdate = "1997-01-01" }]
let lineitem: Anon6 list = [{ l_orderkey = 1; l_partkey = 1000; l_suppkey = 100; l_quantity = 5; l_extendedprice = 1000.0; l_discount = 0.1 }; { l_orderkey = 2; l_partkey = 1000; l_suppkey = 200; l_quantity = 10; l_extendedprice = 800.0; l_discount = 0.05 }]
let prefix: string = "green"
let start_date: string = "1995-01-01"
let end_date: string = "1996-12-31"
let result: Anon7 list = [ for g in _group_by [ for l in lineitem do 
  for p in part do 
  for s in supplier do 
  for ps in partsupp do 
  for o in orders do 
  for n in nation do if p.p_partkey = l.l_partkey && s.s_suppkey = l.l_suppkey && ps.ps_partkey = l.l_partkey && ps.ps_suppkey = l.l_suppkey && o.o_orderkey = l.l_orderkey && n.n_nationkey = s.s_nationkey && p.p_name.Substring(0, List.length prefix - 0) = prefix && o.o_orderdate >= start_date && o.o_orderdate <= end_date then yield (l, p, s, ps, o, n) ] (fun (l, p, s, ps, o, n) -> { nation = n.n_name; o_year = o.o_orderdate.Substring(0, 4 - 0) }) |> List.sortBy (fun gTmp -> let g = gTmp in [g.key.nation; -g.key.o_year]) do
    yield { nation = g.key.nation; o_year = string g.key.o_year; profit = List.sum [ for x in g do yield ((x |> fun (l, p, s, ps, o, n) -> l).l_extendedprice * (1 - (x |> fun (l, p, s, ps, o, n) -> l).l_discount)) - ((x |> fun (l, p, s, ps, o, n) -> ps).ps_supplycost * (x |> fun (l, p, s, ps, o, n) -> l).l_quantity) ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
let revenue: float = 1000.0 * 0.9
let cost: int = float 5 * 10.0
assert (result = [{ nation = "BRAZIL"; o_year = "1995"; profit = revenue - float cost }])
