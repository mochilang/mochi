// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:40Z
open System
open System.Text.Json

type Anon1 = {
    n_nationkey: int
    n_name: string
}
type Anon2 = {
    s_suppkey: int
    s_name: string
    s_nationkey: int
}
type Anon3 = {
    o_orderkey: int
    o_orderstatus: string
}
type Anon4 = {
    l_orderkey: int
    l_suppkey: int
    l_receiptdate: string
    l_commitdate: string
}
type Anon5 = {
    s_name: obj
    numwait: obj
}
type Anon6 = {
    s_name: string
    numwait: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let nation: Anon1 list = [{ n_nationkey = 1; n_name = "SAUDI ARABIA" }; { n_nationkey = 2; n_name = "FRANCE" }]
let supplier: Anon2 list = [{ s_suppkey = 100; s_name = "Desert Trade"; s_nationkey = 1 }; { s_suppkey = 200; s_name = "Euro Goods"; s_nationkey = 2 }]
let orders: Anon3 list = [{ o_orderkey = 500; o_orderstatus = "F" }; { o_orderkey = 600; o_orderstatus = "O" }]
let lineitem: Anon4 list = [{ l_orderkey = 500; l_suppkey = 100; l_receiptdate = "1995-04-15"; l_commitdate = "1995-04-10" }; { l_orderkey = 500; l_suppkey = 200; l_receiptdate = "1995-04-12"; l_commitdate = "1995-04-12" }; { l_orderkey = 600; l_suppkey = 100; l_receiptdate = "1995-05-01"; l_commitdate = "1995-04-25" }]
let result: Anon5 list = [ for g in _group_by [ for s in supplier do 
  for l1 in lineitem do 
  for o in orders do 
  for n in nation do if s.s_suppkey = l1.l_suppkey && o.o_orderkey = l1.l_orderkey && n.n_nationkey = s.s_nationkey && o.o_orderstatus = "F" && l1.l_receiptdate > l1.l_commitdate && n.n_name = "SAUDI ARABIA" && (not not (List.isEmpty [ for x in lineitem do if x.l_orderkey = l1.l_orderkey && x.l_suppkey <> l1.l_suppkey && x.l_receiptdate > x.l_commitdate then yield x ])) then yield (s, l1, o, n) ] (fun (s, l1, o, n) -> s.s_name) |> List.sortBy (fun gTmp -> let g = gTmp in [-List.length g.Items; g.key]) do
    yield { s_name = g.key; numwait = List.length g.Items } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ s_name = "Desert Trade"; numwait = 1 }])
