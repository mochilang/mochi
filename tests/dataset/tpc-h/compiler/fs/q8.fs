// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:40Z
open System
open System.Text.Json

type Anon1 = {
    r_regionkey: int
    r_name: string
}
type Anon2 = {
    n_nationkey: int
    n_regionkey: int
    n_name: string
}
type Anon3 = {
    c_custkey: int
    c_nationkey: int
}
type Anon4 = {
    o_orderkey: int
    o_custkey: int
    o_orderdate: string
}
type Anon5 = {
    l_orderkey: int
    l_suppkey: int
    l_partkey: int
    l_extendedprice: float
    l_discount: float
}
type Anon6 = {
    s_suppkey: int
}
type Anon7 = {
    p_partkey: int
    p_type: string
}
type Anon8 = {
    o_year: obj
    mkt_share: obj
}
type Anon9 = {
    o_year: string
    mkt_share: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let region: Anon1 list = [{ r_regionkey = 0; r_name = "AMERICA" }]
let nation: Anon2 list = [{ n_nationkey = 10; n_regionkey = 0; n_name = "BRAZIL" }; { n_nationkey = 20; n_regionkey = 0; n_name = "CANADA" }]
let customer: Anon3 list = [{ c_custkey = 1; c_nationkey = 10 }; { c_custkey = 2; c_nationkey = 20 }]
let orders: Anon4 list = [{ o_orderkey = 100; o_custkey = 1; o_orderdate = "1995-04-10" }; { o_orderkey = 200; o_custkey = 2; o_orderdate = "1995-07-15" }]
let lineitem: Anon5 list = [{ l_orderkey = 100; l_suppkey = 1000; l_partkey = 5000; l_extendedprice = 1000.0; l_discount = 0.1 }; { l_orderkey = 200; l_suppkey = 2000; l_partkey = 5000; l_extendedprice = 500.0; l_discount = 0.05 }]
let supplier: Anon6 list = [{ s_suppkey = 1000 }; { s_suppkey = 2000 }]
let part: Anon7 list = [{ p_partkey = 5000; p_type = "ECONOMY ANODIZED STEEL" }; { p_partkey = 6000; p_type = "SMALL BRASS" }]
let start_date: string = "1995-01-01"
let end_date: string = "1996-12-31"
let target_type: string = "ECONOMY ANODIZED STEEL"
let target_nation: string = "BRAZIL"
let result: Anon8 list = [ for year in _group_by [ for l in lineitem do 
  for p in part do 
  for s in supplier do 
  for o in orders do 
  for c in customer do 
  for n in nation do 
  for r in region do if p.p_partkey = l.l_partkey && s.s_suppkey = l.l_suppkey && o.o_orderkey = l.l_orderkey && c.c_custkey = o.o_custkey && n.n_nationkey = c.c_nationkey && r.r_regionkey = n.n_regionkey && (p.p_type = target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name = "AMERICA") then yield (l, p, s, o, c, n, r) ] (fun (l, p, s, o, c, n, r) -> o.o_orderdate.Substring(0, 4 - 0)) |> List.sortBy (fun yearTmp -> let year = yearTmp in year.key) do
    yield { o_year = year.key; mkt_share = List.sum [ for x in year do yield (match x.n.n_name = target_nation with
    | true -> x.l.l_extendedprice * (1 - x.l.l_discount)
    | _ -> 0) ] / List.sum [ for x in year do yield x.l.l_extendedprice * (1 - x.l.l_discount) ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
let numerator: float = 1000.0 * 0.9
let denominator: float = numerator + (500.0 * 0.95)
let share: float = numerator / denominator
assert (result = [{ o_year = "1995"; mkt_share = share }])
