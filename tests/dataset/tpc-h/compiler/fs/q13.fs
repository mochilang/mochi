// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:37:54Z
open System
open System.Text.Json

type Anon1 = {
    c_custkey: int
}
type Anon2 = {
    o_orderkey: int
    o_custkey: int
    o_comment: string
}
type Anon3 = {
    c_count: int
}
type Anon4 = {
    c_count: obj
    custdist: int
}
type Anon5 = {
    c_count: int
    custdist: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups.[ks] ]

let customer: Anon1 list = [{ c_custkey = 1 }; { c_custkey = 2 }; { c_custkey = 3 }]
let orders: Anon2 list = [{ o_orderkey = 100; o_custkey = 1; o_comment = "fast delivery" }; { o_orderkey = 101; o_custkey = 1; o_comment = "no comment" }; { o_orderkey = 102; o_custkey = 2; o_comment = "special requests only" }]
let per_customer: Anon3 list = [ for c in customer do yield { c_count = List.length [ for o in orders do if (o.o_custkey = c.c_custkey && (not (o.o_comment.Contains("special"))) && (not (o.o_comment.Contains("requests")))) then yield o ] } ]
let grouped: Anon4 list = [ for g in _group_by [ for x in per_customer do yield x ] (fun x -> x.c_count) |> List.sortByDescending (fun gTmp -> let g = gTmp in g.key) do
    yield { c_count = g.key; custdist = g.size } ]
printfn "%A" (JsonSerializer.Serialize(grouped))
assert (grouped = [{ c_count = 2; custdist = 1 }; { c_count = 0; custdist = 2 }])
