// Generated by Mochi compiler v0.10.25 on 2025-07-13T09:26:14Z
open System
open System.Text.Json

type Anon1 = {
    s_suppkey: int
    s_name: string
    s_address: string
    s_comment: string
}
type Anon2 = {
    p_partkey: int
    p_brand: string
    p_type: string
    p_size: int
}
type Anon3 = {
    ps_partkey: int
    ps_suppkey: int
}
type Anon4 = {
    s_name: obj
    s_address: obj
}
let supplier: obj list = [{ s_suppkey = 100; s_name = "AlphaSupply"; s_address = "123 Hilltop"; s_comment = "Reliable and efficient" }; { s_suppkey = 200; s_name = "BetaSupply"; s_address = "456 Riverside"; s_comment = "Known for Customer Complaints" }]
let part: obj list = [{ p_partkey = 1; p_brand = "Brand#12"; p_type = "SMALL ANODIZED"; p_size = 5 }; { p_partkey = 2; p_brand = "Brand#23"; p_type = "MEDIUM POLISHED"; p_size = 10 }]
let partsupp: obj list = [{ ps_partkey = 1; ps_suppkey = 100 }; { ps_partkey = 2; ps_suppkey = 200 }]
let excluded_suppliers: obj list = [ for ps in partsupp do 
  for p in part do if p.p_partkey = ps.ps_partkey && p.p_brand = "Brand#12" && p.p_type.contains("SMALL") && p.p_size = 5 then yield ps.ps_suppkey ]
let result: obj list = [ for s in supplier do if not (List.contains s.s_suppkey excluded_suppliers) && (not s.s_comment.contains("Customer")) && (not s.s_comment.contains("Complaints")) then yield { s_name = s.s_name; s_address = s.s_address } ] |> List.sortBy (fun s -> s.s_name)
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [])
