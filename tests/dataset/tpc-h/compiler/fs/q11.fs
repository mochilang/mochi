// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:37:51Z
open System
open System.Text.Json

type Anon1 = {
    n_nationkey: int
    n_name: string
}
type Anon2 = {
    s_suppkey: int
    s_nationkey: int
}
type Anon3 = {
    ps_partkey: int
    ps_suppkey: int
    ps_supplycost: float
    ps_availqty: int
}
type Anon4 = {
    ps_partkey: obj
    value: obj
}
type Anon5 = {
    ps_partkey: int
    value: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups.[ks] ]

let nation: Anon1 list = [{ n_nationkey = 1; n_name = "GERMANY" }; { n_nationkey = 2; n_name = "FRANCE" }]
let supplier: Anon2 list = [{ s_suppkey = 100; s_nationkey = 1 }; { s_suppkey = 200; s_nationkey = 1 }; { s_suppkey = 300; s_nationkey = 2 }]
let partsupp: Anon3 list = [{ ps_partkey = 1000; ps_suppkey = 100; ps_supplycost = 10.0; ps_availqty = 100 }; { ps_partkey = 1000; ps_suppkey = 200; ps_supplycost = 20.0; ps_availqty = 50 }; { ps_partkey = 2000; ps_suppkey = 100; ps_supplycost = 5.0; ps_availqty = 10 }; { ps_partkey = 3000; ps_suppkey = 300; ps_supplycost = 8.0; ps_availqty = 500 }]
let target_nation: string = "GERMANY"
let filtered: Anon5 list = [ for ps in partsupp do 
  for s in supplier do 
  for n in nation do if s.s_suppkey = ps.ps_suppkey && n.n_nationkey = s.s_nationkey && n.n_name = target_nation then yield { ps_partkey = ps.ps_partkey; value = ps.ps_supplycost * float ps.ps_availqty } ]
let grouped: Anon4 list = [ for g in _group_by [ for x in filtered do yield x ] (fun x -> x.ps_partkey) do
    yield { ps_partkey = g.key; value = List.sum [ for r in g do yield r.value ] } ]
let total = List.sum [ for x in filtered do yield x.value ]
let threshold = total * 0.0001
let result: Anon4 list = [ for x in grouped do if x.value > threshold then yield (-x.value, x) ] |> List.sortByDescending fst |> List.map snd
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ ps_partkey = 1000; value = 2000.0 }; { ps_partkey = 2000; value = 50.0 }])
