#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q17.erl - generated from q17.mochi

main(_) ->
    Part = [#{p_partkey => 1, p_brand => "Brand#23", p_container => "MED BOX"}, #{p_partkey => 2, p_brand => "Brand#77", p_container => "LG JAR"}],
    Lineitem = [#{l_partkey => 1, l_quantity => 1, l_extendedprice => 100}, #{l_partkey => 1, l_quantity => 10, l_extendedprice => 1000}, #{l_partkey => 1, l_quantity => 20, l_extendedprice => 2000}, #{l_partkey => 2, l_quantity => 5, l_extendedprice => 500}],
    Filtered = [maps:get(l_extendedprice, L, undefined) || L <- Lineitem, P <- Part, (maps:get(p_partkey, P, undefined) == maps:get(l_partkey, L, undefined)), (case (((((maps:get(p_brand, P, undefined) == "Brand#23")) andalso ((maps:get(p_container, P, undefined) == "MED BOX"))) andalso ((maps:get(l_quantity, L, undefined) < ((0.2 * (lists:sum([maps:get(l_quantity, X, undefined) || X <- Lineitem, (maps:get(l_partkey, X, undefined) == maps:get(p_partkey, P, undefined))]) / length([maps:get(l_quantity, X, undefined) || X <- Lineitem, (maps:get(l_partkey, X, undefined) == maps:get(p_partkey, P, undefined))])))))))) of undefined -> false; false -> false; _ -> true end)],
    Result = (lists:sum(Filtered) / 7),
    mochi_json(Result),
    Expected = (100 / 7), (case (Result == Expected) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
