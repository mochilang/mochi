#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q16.erl - generated from q16.mochi

main(_) ->
    Supplier = [#{s_suppkey => 100, s_name => "AlphaSupply", s_address => "123 Hilltop", s_comment => "Reliable and efficient"}, #{s_suppkey => 200, s_name => "BetaSupply", s_address => "456 Riverside", s_comment => "Known for Customer Complaints"}],
    Part = [#{p_partkey => 1, p_brand => "Brand#12", p_type => "SMALL ANODIZED", p_size => 5}, #{p_partkey => 2, p_brand => "Brand#23", p_type => "MEDIUM POLISHED", p_size => 10}],
    Partsupp = [#{ps_partkey => 1, ps_suppkey => 100}, #{ps_partkey => 2, ps_suppkey => 200}],
    Excluded_suppliers = [maps:get(ps_suppkey, Ps) || Ps <- Partsupp, P <- Part, (maps:get(p_partkey, P) == maps:get(ps_partkey, Ps)), (((maps:get(p_brand, P) == "Brand#12") andalso (string:str(maps:get(p_type, P), "SMALL") > 0)) andalso (maps:get(p_size, P) == 5))],
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(s_name, S), #{s_name => maps:get(s_name, S), s_address => maps:get(s_address, S)}} || S <- Supplier, ((not (lists:member(maps:get(s_suppkey, S), Excluded_suppliers)) andalso (not (string:str(maps:get(s_comment, S), "Customer") > 0))) andalso (not (string:str(maps:get(s_comment, S), "Complaints") > 0)))])],
    mochi_json(Result),
    (case (Result == []) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
