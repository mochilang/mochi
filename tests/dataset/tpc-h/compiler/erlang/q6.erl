#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q6.erl - generated from q6.mochi

main(_) ->
    Lineitem = [#{l_extendedprice => 1000, l_discount => 0.06, l_shipdate => "1994-02-15", l_quantity => 10}, #{l_extendedprice => 500, l_discount => 0.07, l_shipdate => "1994-03-10", l_quantity => 23}, #{l_extendedprice => 400, l_discount => 0.04, l_shipdate => "1994-04-10", l_quantity => 15}, #{l_extendedprice => 200, l_discount => 0.06, l_shipdate => "1995-01-01", l_quantity => 5}],
    Result = lists:sum([(maps:get(l_extendedprice, L, undefined) * maps:get(l_discount, L, undefined)) || L <- Lineitem, ((((((maps:get(l_shipdate, L, undefined) >= "1994-01-01")) andalso ((maps:get(l_shipdate, L, undefined) < "1995-01-01"))) andalso ((maps:get(l_discount, L, undefined) >= 0.05))) andalso ((maps:get(l_discount, L, undefined) =< 0.07))) andalso ((maps:get(l_quantity, L, undefined) < 24)))]),
    mochi_json(Result),
    (case (Result == ((((1000 * 0.06)) + ((500 * 0.07))))) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
