#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q19.erl - generated from q19.mochi

main(_) ->
    Part = [#{p_partkey => 1, p_brand => "Brand#12", p_container => "SM BOX", p_size => 3}, #{p_partkey => 2, p_brand => "Brand#23", p_container => "MED BOX", p_size => 5}, #{p_partkey => 3, p_brand => "Brand#34", p_container => "LG BOX", p_size => 15}],
    Lineitem = [#{l_partkey => 1, l_quantity => 5, l_extendedprice => 1000, l_discount => 0.1, l_shipmode => "AIR", l_shipinstruct => "DELIVER IN PERSON"}, #{l_partkey => 2, l_quantity => 15, l_extendedprice => 2000, l_discount => 0.05, l_shipmode => "AIR REG", l_shipinstruct => "DELIVER IN PERSON"}, #{l_partkey => 3, l_quantity => 35, l_extendedprice => 1500, l_discount => 0, l_shipmode => "AIR", l_shipinstruct => "DELIVER IN PERSON"}],
    Revenues = [(maps:get(l_extendedprice, L, undefined) * ((1 - maps:get(l_discount, L, undefined)))) || L <- Lineitem, P <- Part, (maps:get(p_partkey, P, undefined) == maps:get(l_partkey, L, undefined)), (((((((((((maps:get(p_brand, P, undefined) == "Brand#12")) andalso (lists:member(maps:get(p_container, P, undefined), ["SM CASE", "SM BOX", "SM PACK", "SM PKG"]))) andalso (((maps:get(l_quantity, L, undefined) >= 1) andalso (maps:get(l_quantity, L, undefined) =< 11)))) andalso (((maps:get(p_size, P, undefined) >= 1) andalso (maps:get(p_size, P, undefined) =< 5))))) orelse ((((((maps:get(p_brand, P, undefined) == "Brand#23")) andalso (lists:member(maps:get(p_container, P, undefined), ["MED BAG", "MED BOX", "MED PKG", "MED PACK"]))) andalso (((maps:get(l_quantity, L, undefined) >= 10) andalso (maps:get(l_quantity, L, undefined) =< 20)))) andalso (((maps:get(p_size, P, undefined) >= 1) andalso (maps:get(p_size, P, undefined) =< 10)))))) orelse ((((((maps:get(p_brand, P, undefined) == "Brand#34")) andalso (lists:member(maps:get(p_container, P, undefined), ["LG CASE", "LG BOX", "LG PACK", "LG PKG"]))) andalso (((maps:get(l_quantity, L, undefined) >= 20) andalso (maps:get(l_quantity, L, undefined) =< 30)))) andalso (((maps:get(p_size, P, undefined) >= 1) andalso (maps:get(p_size, P, undefined) =< 15))))))) andalso lists:member(maps:get(l_shipmode, L, undefined), ["AIR", "AIR REG"])) andalso (maps:get(l_shipinstruct, L, undefined) == "DELIVER IN PERSON"))],
    Result = lists:sum(Revenues),
    mochi_json(Result),
    (case (Result == 2800) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
