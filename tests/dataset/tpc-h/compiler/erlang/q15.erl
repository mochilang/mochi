#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q15.erl - generated from q15.mochi

main(_) ->
    Supplier = [#{s_suppkey => 100, s_name => "Best Supplier", s_address => "123 Market St", s_phone => "123-456"}, #{s_suppkey => 200, s_name => "Second Supplier", s_address => "456 Elm St", s_phone => "987-654"}],
    Lineitem = [#{l_suppkey => 100, l_extendedprice => 1000, l_discount => 0.1, l_shipdate => "1996-01-15"}, #{l_suppkey => 100, l_extendedprice => 500, l_discount => 0, l_shipdate => "1996-03-20"}, #{l_suppkey => 200, l_extendedprice => 800, l_discount => 0.05, l_shipdate => "1995-12-30"}],
    Revenue0 = [#{supplier_no => Key0, total_revenue => lists:sum([(maps:get(l_extendedprice, X) * ((1 - maps:get(l_discount, X)))) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(l_suppkey, L), L} || L <- Lineitem, ((maps:get(l_shipdate, L) >= "1996-01-01") andalso (maps:get(l_shipdate, L) < "1996-04-01"))]))],
    Revenues = [maps:get(total_revenue, X) || X <- Revenue0],
    Max_revenue = lists:max(Revenues),
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(s_suppkey, S), #{s_suppkey => maps:get(s_suppkey, S), s_name => maps:get(s_name, S), s_address => maps:get(s_address, S), s_phone => maps:get(s_phone, S), total_revenue => maps:get(total_revenue, R)}} || S <- Supplier, R <- Revenue0, (maps:get(s_suppkey, S) == maps:get(supplier_no, R)), (maps:get(total_revenue, R) == Max_revenue)])],
    mochi_json(Result),
    Rev = ((1000 * 0.9) + 500), (case (Result == [#{s_suppkey => 100, s_name => "Best Supplier", s_address => "123 Market St", s_phone => "123-456", total_revenue => Rev}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
