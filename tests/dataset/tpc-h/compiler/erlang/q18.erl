#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q18.erl - generated from q18.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "GERMANY"}],
    Customer = [#{c_custkey => 1, c_name => "Alice", c_acctbal => 1000, c_nationkey => 1, c_address => "123 Market St", c_phone => "123-456", c_comment => "Premium client"}, #{c_custkey => 2, c_name => "Bob", c_acctbal => 200, c_nationkey => 1, c_address => "456 Side St", c_phone => "987-654", c_comment => "Frequent returns"}],
    Orders = [#{o_orderkey => 100, o_custkey => 1}, #{o_orderkey => 200, o_custkey => 1}, #{o_orderkey => 300, o_custkey => 2}],
    Lineitem = [#{l_orderkey => 100, l_quantity => 150, l_extendedprice => 1000, l_discount => 0.1}, #{l_orderkey => 200, l_quantity => 100, l_extendedprice => 800, l_discount => 0}, #{l_orderkey => 300, l_quantity => 30, l_extendedprice => 300, l_discount => 0.05}],
    Result = [V || {_, V} <- lists:keysort(1, [{-lists:sum([(maps:get(l_extendedprice, maps:get(l, X)) * ((1 - maps:get(l_discount, maps:get(l, X))))) || X <- Val0]), #{c_name => maps:get(c_name, Key0), c_custkey => maps:get(c_custkey, Key0), revenue => lists:sum([(maps:get(l_extendedprice, maps:get(l, X)) * ((1 - maps:get(l_discount, maps:get(l, X))))) || X <- Val0]), c_acctbal => maps:get(c_acctbal, Key0), n_name => maps:get(n_name, Key0), c_address => maps:get(c_address, Key0), c_phone => maps:get(c_phone, Key0), c_comment => maps:get(c_comment, Key0)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{c_name => maps:get(c_name, C), c_custkey => maps:get(c_custkey, C), c_acctbal => maps:get(c_acctbal, C), c_address => maps:get(c_address, C), c_phone => maps:get(c_phone, C), c_comment => maps:get(c_comment, C), n_name => maps:get(n_name, N)}, #{c => C, o => O, l => L, n => N}} || C <- Customer, O <- Orders, L <- Lineitem, N <- Nation, (maps:get(o_custkey, O) == maps:get(c_custkey, C)), (maps:get(l_orderkey, L) == maps:get(o_orderkey, O)), (maps:get(n_nationkey, N) == maps:get(c_nationkey, C))])), (lists:sum([maps:get(l_quantity, maps:get(l, X)) || X <- Val0]) > 200)])],
    mochi_json(Result),
    (case (Result == [#{c_name => "Alice", c_custkey => 1, revenue => 1700, c_acctbal => 1000, n_name => "GERMANY", c_address => "123 Market St", c_phone => "123-456", c_comment => "Premium client"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
