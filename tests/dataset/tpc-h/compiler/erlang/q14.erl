#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q14.erl - generated from q14.mochi

main(_) ->
    Part = [#{p_partkey => 1, p_type => "PROMO LUXURY"}, #{p_partkey => 2, p_type => "STANDARD BRASS"}],
    Lineitem = [#{l_partkey => 1, l_extendedprice => 1000, l_discount => 0.1, l_shipdate => "1995-09-05"}, #{l_partkey => 2, l_extendedprice => 800, l_discount => 0, l_shipdate => "1995-09-20"}, #{l_partkey => 1, l_extendedprice => 500, l_discount => 0.2, l_shipdate => "1995-10-02"}],
    Filtered = [#{is_promo => string:str(maps:get(p_type, P), "PROMO") > 0, revenue => (maps:get(l_extendedprice, L) * ((1 - maps:get(l_discount, L))))} || L <- Lineitem, P <- Part, (maps:get(p_partkey, P) == maps:get(l_partkey, L)), ((maps:get(l_shipdate, L) >= "1995-09-01") andalso (maps:get(l_shipdate, L) < "1995-10-01"))],
    Promo_sum = lists:sum([maps:get(revenue, X) || X <- Filtered, (case maps:get(is_promo, X) of undefined -> false; false -> false; _ -> true end)]),
    Total_sum = lists:sum([maps:get(revenue, X) || X <- Filtered]),
    Result = ((100 * Promo_sum) / Total_sum),
    mochi_json(Result),
    Promo = (1000 * 0.9), Total = (900 + 800), Expected = ((100 * Promo) / Total), (case (Result == Expected) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
