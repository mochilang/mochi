#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q12.erl - generated from q12.mochi

main(_) ->
    Orders = [#{o_orderkey => 1, o_orderpriority => "1-URGENT"}, #{o_orderkey => 2, o_orderpriority => "3-MEDIUM"}],
    Lineitem = [#{l_orderkey => 1, l_shipmode => "MAIL", l_commitdate => "1994-02-10", l_receiptdate => "1994-02-15", l_shipdate => "1994-02-05"}, #{l_orderkey => 2, l_shipmode => "SHIP", l_commitdate => "1994-03-01", l_receiptdate => "1994-02-28", l_shipdate => "1994-02-27"}],
    Result = [V || {_, V} <- lists:keysort(1, [{Key0, #{l_shipmode => Key0, high_line_count => lists:sum([(case lists:member(maps:get(o_orderpriority, maps:get(o, X)), ["1-URGENT", "2-HIGH"]) of true -> 1; _ -> 0 end) || X <- Val0]), low_line_count => lists:sum([(case not (lists:member(maps:get(o_orderpriority, maps:get(o, X)), ["1-URGENT", "2-HIGH"])) of true -> 1; _ -> 0 end) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(l_shipmode, L), #{l => L, o => O}} || L <- Lineitem, O <- Orders, (maps:get(o_orderkey, O) == maps:get(l_orderkey, L)), (((((lists:member(maps:get(l_shipmode, L), ["MAIL", "SHIP"])) andalso ((maps:get(l_commitdate, L) < maps:get(l_receiptdate, L)))) andalso ((maps:get(l_shipdate, L) < maps:get(l_commitdate, L)))) andalso ((maps:get(l_receiptdate, L) >= "1994-01-01"))) andalso ((maps:get(l_receiptdate, L) < "1995-01-01")))]))])],
    mochi_json(Result),
    (case (Result == [#{l_shipmode => "MAIL", high_line_count => 1, low_line_count => 0}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
