#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q20.erl - generated from q20.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "CANADA"}, #{n_nationkey => 2, n_name => "GERMANY"}],
    Supplier = [#{s_suppkey => 100, s_name => "Maple Supply", s_address => "123 Forest Lane", s_nationkey => 1}, #{s_suppkey => 200, s_name => "Berlin Metals", s_address => "456 Iron Str", s_nationkey => 2}],
    Part = [#{p_partkey => 10, p_name => "forest glade bricks"}, #{p_partkey => 20, p_name => "desert sand paper"}],
    Partsupp = [#{ps_partkey => 10, ps_suppkey => 100, ps_availqty => 100}, #{ps_partkey => 20, ps_suppkey => 200, ps_availqty => 30}],
    Lineitem = [#{l_partkey => 10, l_suppkey => 100, l_quantity => 100, l_shipdate => "1994-05-15"}, #{l_partkey => 10, l_suppkey => 100, l_quantity => 50, l_shipdate => "1995-01-01"}],
    Shipped_94 = [#{partkey => maps:get(partkey, Key0), suppkey => maps:get(suppkey, Key0), qty => lists:sum([maps:get(l_quantity, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{partkey => maps:get(l_partkey, L), suppkey => maps:get(l_suppkey, L)}, L} || L <- Lineitem, ((maps:get(l_shipdate, L) >= "1994-01-01") andalso (maps:get(l_shipdate, L) < "1995-01-01"))]))],
    Target_partkeys = [maps:get(ps_suppkey, Ps) || Ps <- Partsupp, P <- Part, S <- Shipped_94, (maps:get(ps_partkey, Ps) == maps:get(p_partkey, P)), ((maps:get(ps_partkey, Ps) == maps:get(partkey, S)) andalso (maps:get(ps_suppkey, Ps) == maps:get(suppkey, S))), ((string:substr(maps:get(p_name, P), (0)+1, (length("forest"))-(0)) == "forest") andalso (maps:get(ps_availqty, Ps) > ((0.5 * maps:get(qty, S)))))],
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(s_name, S), #{s_name => maps:get(s_name, S), s_address => maps:get(s_address, S)}} || S <- Supplier, N <- Nation, (maps:get(n_nationkey, N) == maps:get(s_nationkey, S)), (lists:member(maps:get(s_suppkey, S), Target_partkeys) andalso (maps:get(n_name, N) == "CANADA"))])],
    mochi_json(Result),
    (case (Result == [#{s_name => "Maple Supply", s_address => "123 Forest Lane"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
