#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q21.erl - generated from q21.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "SAUDI ARABIA"}, #{n_nationkey => 2, n_name => "FRANCE"}],
    Supplier = [#{s_suppkey => 100, s_name => "Desert Trade", s_nationkey => 1}, #{s_suppkey => 200, s_name => "Euro Goods", s_nationkey => 2}],
    Orders = [#{o_orderkey => 500, o_orderstatus => "F"}, #{o_orderkey => 600, o_orderstatus => "O"}],
    Lineitem = [#{l_orderkey => 500, l_suppkey => 100, l_receiptdate => "1995-04-15", l_commitdate => "1995-04-10"}, #{l_orderkey => 500, l_suppkey => 200, l_receiptdate => "1995-04-12", l_commitdate => "1995-04-12"}, #{l_orderkey => 600, l_suppkey => 100, l_receiptdate => "1995-05-01", l_commitdate => "1995-04-25"}],
    Result = [V || {_, V} <- lists:keysort(1, [{[-(case Val0 of #{items := It1} -> length(It1); _ -> length(Val0) end), Key0], #{s_name => Key0, numwait => (case Val0 of #{items := It0} -> length(It0); _ -> length(Val0) end)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(s_name, S, undefined), #{s => S, l1 => L1, o => O, n => N}} || S <- Supplier, L1 <- Lineitem, O <- Orders, N <- Nation, (maps:get(s_suppkey, S, undefined) == maps:get(l_suppkey, L1, undefined)), (maps:get(o_orderkey, O, undefined) == maps:get(l_orderkey, L1, undefined)), (maps:get(n_nationkey, N, undefined) == maps:get(s_nationkey, S, undefined)), ((((maps:get(o_orderstatus, O, undefined) == "F") andalso (maps:get(l_receiptdate, L1, undefined) > maps:get(l_commitdate, L1, undefined))) andalso (maps:get(n_name, N, undefined) == "SAUDI ARABIA")) andalso (not lists:any(fun(X) -> (((mochi_get(l_orderkey, X) == maps:get(l_orderkey, L1, undefined)) andalso (mochi_get(l_suppkey, X) /= maps:get(l_suppkey, L1, undefined))) andalso (mochi_get(l_receiptdate, X) > mochi_get(l_commitdate, X))) end, Lineitem)))]))])],
    mochi_json(Result),
    (case (Result == [#{s_name => "Desert Trade", numwait => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
