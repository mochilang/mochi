#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q2.erl - generated from q2.mochi

main(_) ->
    Region = [#{r_regionkey => 1, r_name => "EUROPE"}, #{r_regionkey => 2, r_name => "ASIA"}],
    Nation = [#{n_nationkey => 10, n_regionkey => 1, n_name => "FRANCE"}, #{n_nationkey => 20, n_regionkey => 2, n_name => "CHINA"}],
    Supplier = [#{s_suppkey => 100, s_name => "BestSupplier", s_address => "123 Rue", s_nationkey => 10, s_phone => "123", s_acctbal => 1000, s_comment => "Fast and reliable"}, #{s_suppkey => 200, s_name => "AltSupplier", s_address => "456 Way", s_nationkey => 20, s_phone => "456", s_acctbal => 500, s_comment => "Slow"}],
    Part = [#{p_partkey => 1000, p_type => "LARGE BRASS", p_size => 15, p_mfgr => "M1"}, #{p_partkey => 2000, p_type => "SMALL COPPER", p_size => 15, p_mfgr => "M2"}],
    Partsupp = [#{ps_partkey => 1000, ps_suppkey => 100, ps_supplycost => 10}, #{ps_partkey => 1000, ps_suppkey => 200, ps_supplycost => 15}],
    Europe_nations = [N || R <- Region, N <- Nation, (maps:get(n_regionkey, N) == maps:get(r_regionkey, R)), (maps:get(r_name, R) == "EUROPE")],
    Europe_suppliers = [#{s => S, n => N} || S <- Supplier, N <- Europe_nations, (maps:get(s_nationkey, S) == maps:get(n_nationkey, N))],
    Target_parts = [P || P <- Part, ((maps:get(p_size, P) == 15) andalso (maps:get(p_type, P) == "LARGE BRASS"))],
    Target_partsupp = [#{s_acctbal => maps:get(s_acctbal, maps:get(s, S)), s_name => maps:get(s_name, maps:get(s, S)), n_name => maps:get(n_name, maps:get(n, S)), p_partkey => maps:get(p_partkey, P), p_mfgr => maps:get(p_mfgr, P), s_address => maps:get(s_address, maps:get(s, S)), s_phone => maps:get(s_phone, maps:get(s, S)), s_comment => maps:get(s_comment, maps:get(s, S)), ps_supplycost => maps:get(ps_supplycost, Ps)} || Ps <- Partsupp, P <- Target_parts, S <- Europe_suppliers, (maps:get(ps_partkey, Ps) == maps:get(p_partkey, P)), (maps:get(ps_suppkey, Ps) == maps:get(s_suppkey, maps:get(s, S)))],
    Costs = [maps:get(ps_supplycost, X) || X <- Target_partsupp],
    Min_cost = lists:min(Costs),
    Result = [V || {_, V} <- lists:keysort(1, [{-maps:get(s_acctbal, X), X} || X <- Target_partsupp, (maps:get(ps_supplycost, X) == Min_cost)])],
    mochi_json(Result),
    (case (Result == [#{s_acctbal => 1000, s_name => "BestSupplier", n_name => "FRANCE", p_partkey => 1000, p_mfgr => "M1", s_address => "123 Rue", s_phone => "123", s_comment => "Fast and reliable", ps_supplycost => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
