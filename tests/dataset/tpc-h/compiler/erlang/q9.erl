#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q9.erl - generated from q9.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "BRAZIL"}, #{n_nationkey => 2, n_name => "CANADA"}],
    Supplier = [#{s_suppkey => 100, s_nationkey => 1}, #{s_suppkey => 200, s_nationkey => 2}],
    Part = [#{p_partkey => 1000, p_name => "green metal box"}, #{p_partkey => 2000, p_name => "red plastic crate"}],
    Partsupp = [#{ps_partkey => 1000, ps_suppkey => 100, ps_supplycost => 10}, #{ps_partkey => 1000, ps_suppkey => 200, ps_supplycost => 8}],
    Orders = [#{o_orderkey => 1, o_orderdate => "1995-02-10"}, #{o_orderkey => 2, o_orderdate => "1997-01-01"}],
    Lineitem = [#{l_orderkey => 1, l_partkey => 1000, l_suppkey => 100, l_quantity => 5, l_extendedprice => 1000, l_discount => 0.1}, #{l_orderkey => 2, l_partkey => 1000, l_suppkey => 200, l_quantity => 10, l_extendedprice => 800, l_discount => 0.05}],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(nation, Key0), -maps:get(o_year, Key0)], #{nation => maps:get(nation, Key0), o_year => lists:flatten(io_lib:format("~p", [maps:get(o_year, Key0)])), profit => lists:sum([(((maps:get(l_extendedprice, maps:get(l, X)) * ((1 - maps:get(l_discount, maps:get(l, X)))))) - ((maps:get(ps_supplycost, maps:get(ps, X)) * maps:get(l_quantity, maps:get(l, X))))) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{nation => maps:get(n_name, N), o_year => list_to_integer(string:substr(maps:get(o_orderdate, O), (0)+1, (4)-(0)))}, #{l => L, p => P, s => S, ps => Ps, o => O, n => N}} || L <- Lineitem, P <- Part, S <- Supplier, Ps <- Partsupp, O <- Orders, N <- Nation, (maps:get(p_partkey, P) == maps:get(l_partkey, L)), (maps:get(s_suppkey, S) == maps:get(l_suppkey, L)), ((maps:get(ps_partkey, Ps) == maps:get(l_partkey, L)) andalso (maps:get(ps_suppkey, Ps) == maps:get(l_suppkey, L))), (maps:get(o_orderkey, O) == maps:get(l_orderkey, L)), (maps:get(n_nationkey, N) == maps:get(s_nationkey, S)), (((string:substr(maps:get(p_name, P), (0)+1, (length("green"))-(0)) == "green") andalso (maps:get(o_orderdate, O) >= "1995-01-01")) andalso (maps:get(o_orderdate, O) =< "1996-12-31"))]))])],
    mochi_json(Result),
    Revenue = (1000 * 0.9), Cost = (5 * 10), (case (Result == [#{nation => "BRAZIL", o_year => "1995", profit => (Revenue - Cost)}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
