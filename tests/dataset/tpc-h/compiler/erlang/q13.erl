#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q13.erl - generated from q13.mochi

main(_) ->
    Customer = [#{c_custkey => 1}, #{c_custkey => 2}, #{c_custkey => 3}],
    Orders = [#{o_orderkey => 100, o_custkey => 1, o_comment => "fast delivery"}, #{o_orderkey => 101, o_custkey => 1, o_comment => "no comment"}, #{o_orderkey => 102, o_custkey => 2, o_comment => "special requests only"}],
    Per_customer = [#{c_count => (case [O || O <- Orders, (case ((((maps:get(o_custkey, O, undefined) == maps:get(c_custkey, C, undefined)) andalso (not (string:str(maps:get(o_comment, O, undefined), "special") > 0))) andalso (not (string:str(maps:get(o_comment, O, undefined), "requests") > 0)))) of undefined -> false; false -> false; _ -> true end)] of #{items := It0} -> length(It0); _ -> length([O || O <- Orders, (case ((((maps:get(o_custkey, O, undefined) == maps:get(c_custkey, C, undefined)) andalso (not (string:str(maps:get(o_comment, O, undefined), "special") > 0))) andalso (not (string:str(maps:get(o_comment, O, undefined), "requests") > 0)))) of undefined -> false; false -> false; _ -> true end)]) end)} || C <- Customer],
    Grouped = [V || {_, V} <- lists:keysort(1, [{-Key0, #{c_count => Key0, custdist => (case Val0 of #{items := It1} -> length(It1); _ -> length(Val0) end)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(c_count, X, undefined), X} || X <- Per_customer]))])],
    mochi_json(Grouped),
    (case (Grouped == [#{c_count => 2, custdist => 1}, #{c_count => 0, custdist => 2}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
