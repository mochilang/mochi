#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T16:25:52Z
% q22.erl - generated from q22.mochi

main(_) ->
    Customer = [#{c_custkey => 1, c_phone => "13-123-4567", c_acctbal => 600}, #{c_custkey => 2, c_phone => "31-456-7890", c_acctbal => 100}, #{c_custkey => 3, c_phone => "30-000-0000", c_acctbal => 700}],
    Orders = [#{o_orderkey => 10, o_custkey => 2}],
    Valid_codes = ["13", "31", "23", "29", "30", "18", "17"],
    Avg_balance = (lists:sum([maps:get(c_acctbal, C) || C <- Customer, ((maps:get(c_acctbal, C) > 0) andalso lists:member(string:substr(maps:get(c_phone, C), (0)+1, (2)-(0)), Valid_codes))]) / length([maps:get(c_acctbal, C) || C <- Customer, ((maps:get(c_acctbal, C) > 0) andalso lists:member(string:substr(maps:get(c_phone, C), (0)+1, (2)-(0)), Valid_codes))])),
    Eligible_customers = [#{cntrycode => string:substr(maps:get(c_phone, C), (0)+1, (2)-(0)), c_acctbal => maps:get(c_acctbal, C)} || C <- Customer, ((lists:member(string:substr(maps:get(c_phone, C), (0)+1, (2)-(0)), Valid_codes) andalso (maps:get(c_acctbal, C) > Avg_balance)) andalso (not lists:any(fun(O) -> (maps:get(o_custkey, O) == maps:get(c_custkey, C)) end, Orders)))],
    Groups = [#{key => Key0, items => Val0} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(cntrycode, C), C} || C <- Eligible_customers]))],
    Tmp0 = [],
    {Tmp1} = lists:foldl(fun(G, {Tmp}) -> Total = lists:sum([maps:get(c_acctbal, X) || X <- maps:get(items, G)]), Row = #{cntrycode => maps:get(key, G), numcust => (case G of #{items := It} -> length(It); _ -> length(G) end), totacctbal => Total}, Tmp1 = Tmp ++ [Row], {Tmp1} end, {Tmp0}, Groups),
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(cntrycode, R), R} || R <- Tmp1])],
    mochi_json(Result),
    (case (Result == [#{cntrycode => "13", numcust => 1, totacctbal => 600}, #{cntrycode => "30", numcust => 1, totacctbal => 700}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
