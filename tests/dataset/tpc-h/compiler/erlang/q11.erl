#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q11.erl - generated from q11.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "GERMANY"}, #{n_nationkey => 2, n_name => "FRANCE"}],
    Supplier = [#{s_suppkey => 100, s_nationkey => 1}, #{s_suppkey => 200, s_nationkey => 1}, #{s_suppkey => 300, s_nationkey => 2}],
    Partsupp = [#{ps_partkey => 1000, ps_suppkey => 100, ps_supplycost => 10, ps_availqty => 100}, #{ps_partkey => 1000, ps_suppkey => 200, ps_supplycost => 20, ps_availqty => 50}, #{ps_partkey => 2000, ps_suppkey => 100, ps_supplycost => 5, ps_availqty => 10}, #{ps_partkey => 3000, ps_suppkey => 300, ps_supplycost => 8, ps_availqty => 500}],
    Filtered = [#{ps_partkey => maps:get(ps_partkey, Ps), value => (maps:get(ps_supplycost, Ps) * maps:get(ps_availqty, Ps))} || Ps <- Partsupp, S <- Supplier, N <- Nation, (maps:get(s_suppkey, S) == maps:get(ps_suppkey, Ps)), (maps:get(n_nationkey, N) == maps:get(s_nationkey, S)), (maps:get(n_name, N) == "GERMANY")],
    Grouped = [#{ps_partkey => Key0, value => lists:sum([maps:get(value, R) || R <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(ps_partkey, X), X} || X <- Filtered]))],
    Total = lists:sum([maps:get(value, X) || X <- Filtered]),
    Threshold = (Total * 0.0001),
    Result = [V || {_, V} <- lists:keysort(1, [{-maps:get(value, X), X} || X <- Grouped, (maps:get(value, X) > Threshold)])],
    mochi_json(Result),
    (case (Result == [#{ps_partkey => 1000, value => 2000}, #{ps_partkey => 2000, value => 50}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
