#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q4.erl - generated from q4.mochi

main(_) ->
    Orders = [#{o_orderkey => 1, o_orderdate => "1993-07-01", o_orderpriority => "1-URGENT"}, #{o_orderkey => 2, o_orderdate => "1993-07-15", o_orderpriority => "2-HIGH"}, #{o_orderkey => 3, o_orderdate => "1993-08-01", o_orderpriority => "3-NORMAL"}],
    Lineitem = [#{l_orderkey => 1, l_commitdate => "1993-07-10", l_receiptdate => "1993-07-12"}, #{l_orderkey => 1, l_commitdate => "1993-07-12", l_receiptdate => "1993-07-10"}, #{l_orderkey => 2, l_commitdate => "1993-07-20", l_receiptdate => "1993-07-25"}, #{l_orderkey => 3, l_commitdate => "1993-08-02", l_receiptdate => "1993-08-01"}, #{l_orderkey => 3, l_commitdate => "1993-08-05", l_receiptdate => "1993-08-10"}],
    Date_filtered_orders = [O || O <- Orders, ((maps:get(o_orderdate, O, undefined) >= "1993-07-01") andalso (maps:get(o_orderdate, O, undefined) < "1993-08-01"))],
    Late_orders = [O || O <- Date_filtered_orders, (case lists:any(fun(L) -> ((mochi_get(l_orderkey, L) == mochi_get(o_orderkey, O)) andalso (mochi_get(l_commitdate, L) < mochi_get(l_receiptdate, L))) end, Lineitem) of undefined -> false; false -> false; _ -> true end)],
    Result = [V || {_, V} <- lists:keysort(1, [{Key0, #{o_orderpriority => Key0, order_count => (case Val0 of #{items := It0} -> length(It0); _ -> length(Val0) end)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(o_orderpriority, O), O} || O <- Late_orders]))])],
    mochi_json(Result),
    (case (Result == [#{o_orderpriority => "1-URGENT", order_count => 1}, #{o_orderpriority => "2-HIGH", order_count => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
