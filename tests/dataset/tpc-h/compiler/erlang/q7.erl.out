#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:14:38Z
% q7.erl - generated from q7.mochi

main(_) ->
    Nation = [#{n_nationkey => 1, n_name => "FRANCE"}, #{n_nationkey => 2, n_name => "GERMANY"}],
    Supplier = [#{s_suppkey => 100, s_nationkey => 1}],
    Customer = [#{c_custkey => 200, c_nationkey => 2}],
    Orders = [#{o_orderkey => 1000, o_custkey => 200}],
    Lineitem = [#{l_orderkey => 1000, l_suppkey => 100, l_extendedprice => 1000, l_discount => 0.1, l_shipdate => "1995-06-15"}, #{l_orderkey => 1000, l_suppkey => 100, l_extendedprice => 800, l_discount => 0.05, l_shipdate => "1997-01-01"}],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(supp_nation, Key0), maps:get(cust_nation, Key0), maps:get(l_year, Key0)], #{supp_nation => maps:get(supp_nation, Key0), cust_nation => maps:get(cust_nation, Key0), l_year => maps:get(l_year, Key0), revenue => lists:sum([(maps:get(l_extendedprice, maps:get(l, X)) * ((1 - maps:get(l_discount, maps:get(l, X))))) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{supp_nation => maps:get(n_name, N1), cust_nation => maps:get(n_name, N2), l_year => string:substr(maps:get(l_shipdate, L), (0)+1, (4)-(0))}, #{l => L, o => O, c => C, s => S, n1 => N1, n2 => N2}} || L <- Lineitem, O <- Orders, C <- Customer, S <- Supplier, N1 <- Nation, N2 <- Nation, (maps:get(o_orderkey, O) == maps:get(l_orderkey, L)), (maps:get(c_custkey, C) == maps:get(o_custkey, O)), (maps:get(s_suppkey, S) == maps:get(l_suppkey, L)), (maps:get(n_nationkey, N1) == maps:get(s_nationkey, S)), (maps:get(n_nationkey, N2) == maps:get(c_nationkey, C)), (case ((((((maps:get(l_shipdate, L) >= "1995-01-01") andalso maps:get(l_shipdate, L)) =< "1996-12-31") andalso ((((maps:get(n_name, N1) == "FRANCE") andalso maps:get(n_name, N2)) == "GERMANY"))) orelse ((((maps:get(n_name, N1) == "GERMANY") andalso maps:get(n_name, N2)) == "FRANCE")))) of undefined -> false; false -> false; _ -> true end)]))])],
    mochi_json(Result),
    (case (Result == [#{supp_nation => "FRANCE", cust_nation => "GERMANY", l_year => "1995", revenue => 900}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
