#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2020-01-02T15:04:05Z
% q1.erl - generated from q1.mochi

main(_) ->
    Lineitem = [#{l_quantity => 17, l_extendedprice => 1000, l_discount => 0.05, l_tax => 0.07, l_returnflag => "N", l_linestatus => "O", l_shipdate => "1998-08-01"}, #{l_quantity => 36, l_extendedprice => 2000, l_discount => 0.1, l_tax => 0.05, l_returnflag => "N", l_linestatus => "O", l_shipdate => "1998-09-01"}, #{l_quantity => 25, l_extendedprice => 1500, l_discount => 0, l_tax => 0.08, l_returnflag => "R", l_linestatus => "F", l_shipdate => "1998-09-03"}],
    Result = [#{returnflag => maps:get(returnflag, Key0), linestatus => maps:get(linestatus, Key0), sum_qty => lists:sum([maps:get(l_quantity, X) || X <- Val0]), sum_base_price => lists:sum([maps:get(l_extendedprice, X) || X <- Val0]), sum_disc_price => lists:sum([(maps:get(l_extendedprice, X) * ((1 - maps:get(l_discount, X)))) || X <- Val0]), sum_charge => lists:sum([((maps:get(l_extendedprice, X) * ((1 - maps:get(l_discount, X)))) * ((1 + maps:get(l_tax, X)))) || X <- Val0]), avg_qty => (lists:sum([maps:get(l_quantity, X) || X <- Val0]) / length([maps:get(l_quantity, X) || X <- Val0])), avg_price => (lists:sum([maps:get(l_extendedprice, X) || X <- Val0]) / length([maps:get(l_extendedprice, X) || X <- Val0])), avg_disc => (lists:sum([maps:get(l_discount, X) || X <- Val0]) / length([maps:get(l_discount, X) || X <- Val0])), count_order => length(Val0)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{returnflag => maps:get(l_returnflag, Row), linestatus => maps:get(l_linestatus, Row)}, Row} || Row <- Lineitem, (maps:get(l_shipdate, Row) =< "1998-09-02")]))],
    mochi_json(Result),
    (case (Result == [#{returnflag => "N", linestatus => "O", sum_qty => 53, sum_base_price => 3000, sum_disc_price => (950 + 1800), sum_charge => (((950 * 1.07)) + ((1800 * 1.05))), avg_qty => 26.5, avg_price => 1500, avg_disc => 0.07500000000000001, count_order => 2}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
