#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2020-01-02T15:04:05Z
% q5.erl - generated from q5.mochi

main(_) ->
    Region = [#{r_regionkey => 0, r_name => "ASIA"}, #{r_regionkey => 1, r_name => "EUROPE"}],
    Nation = [#{n_nationkey => 10, n_regionkey => 0, n_name => "JAPAN"}, #{n_nationkey => 20, n_regionkey => 0, n_name => "INDIA"}, #{n_nationkey => 30, n_regionkey => 1, n_name => "FRANCE"}],
    Customer = [#{c_custkey => 1, c_nationkey => 10}, #{c_custkey => 2, c_nationkey => 20}],
    Supplier = [#{s_suppkey => 100, s_nationkey => 10}, #{s_suppkey => 200, s_nationkey => 20}],
    Orders = [#{o_orderkey => 1000, o_custkey => 1, o_orderdate => "1994-03-15"}, #{o_orderkey => 2000, o_custkey => 2, o_orderdate => "1994-06-10"}, #{o_orderkey => 3000, o_custkey => 2, o_orderdate => "1995-01-01"}],
    Lineitem = [#{l_orderkey => 1000, l_suppkey => 100, l_extendedprice => 1000, l_discount => 0.05}, #{l_orderkey => 2000, l_suppkey => 200, l_extendedprice => 800, l_discount => 0.1}, #{l_orderkey => 3000, l_suppkey => 200, l_extendedprice => 900, l_discount => 0.05}],
    Asia_nations = [N || R <- Region, N <- Nation, (maps:get(n_regionkey, N, undefined) == maps:get(r_regionkey, R, undefined)), (maps:get(r_name, R, undefined) == "ASIA")],
    Local_customer_supplier_orders = [#{nation => mochi_get(n_name, N), revenue => (maps:get(l_extendedprice, L, undefined) * ((1 - maps:get(l_discount, L, undefined))))} || C <- Customer, N <- Asia_nations, O <- Orders, L <- Lineitem, S <- Supplier, (maps:get(c_nationkey, C, undefined) == mochi_get(n_nationkey, N)), (maps:get(o_custkey, O, undefined) == maps:get(c_custkey, C, undefined)), (maps:get(l_orderkey, L, undefined) == maps:get(o_orderkey, O, undefined)), (maps:get(s_suppkey, S, undefined) == maps:get(l_suppkey, L, undefined)), (((maps:get(o_orderdate, O, undefined) >= "1994-01-01") andalso (maps:get(o_orderdate, O, undefined) < "1995-01-01")) andalso (maps:get(s_nationkey, S, undefined) == maps:get(c_nationkey, C, undefined)))],
    Result = [V || {_, V} <- lists:keysort(1, [{-lists:sum([maps:get(revenue, X, undefined) || X <- Val0]), #{n_name => Key0, revenue => lists:sum([maps:get(revenue, X, undefined) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(nation, R, undefined), R} || R <- Local_customer_supplier_orders]))])],
    mochi_json(Result),
    (case (Result == [#{n_name => "JAPAN", revenue => 950}, #{n_name => "INDIA", revenue => 720}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
