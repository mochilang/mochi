// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:35:10Z
object q8 {
  case class Customer(c_custkey: Int, c_nationkey: Int)
  case class Lineitem(l_orderkey: Int, l_suppkey: Int, l_partkey: Int, l_extendedprice: Double, l_discount: Double)
  case class Nation(n_nationkey: Int, n_regionkey: Int, n_name: String)
  case class Order(o_orderkey: Int, o_custkey: Int, o_orderdate: String)
  case class Part(p_partkey: Int, p_type: String)
  case class Region(r_regionkey: Int, r_name: String)
  case class Result(l: Lineitem, p: Part, s: Supplier, o: Order, c: Customer, n: Nation, r: Region)
  case class Result1(o_year: String, mkt_share: Double)
  case class Supplier(s_suppkey: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val region = List(Region(r_regionkey = 0, r_name = "AMERICA"))
    val nation = List(Nation(n_nationkey = 10, n_regionkey = 0, n_name = "BRAZIL"), Nation(n_nationkey = 20, n_regionkey = 0, n_name = "CANADA"))
    val customer = List(Customer(c_custkey = 1, c_nationkey = 10), Customer(c_custkey = 2, c_nationkey = 20))
    val orders = List(Order(o_orderkey = 100, o_custkey = 1, o_orderdate = "1995-04-10"), Order(o_orderkey = 200, o_custkey = 2, o_orderdate = "1995-07-15"))
    val lineitem = List(Lineitem(l_orderkey = 100, l_suppkey = 1000, l_partkey = 5000, l_extendedprice = 1000, l_discount = 0.1), Lineitem(l_orderkey = 200, l_suppkey = 2000, l_partkey = 5000, l_extendedprice = 500, l_discount = 0.05))
    val supplier = List(Supplier(s_suppkey = 1000), Supplier(s_suppkey = 2000))
    val part = List(Part(p_partkey = 5000, p_type = "ECONOMY ANODIZED STEEL"), Part(p_partkey = 6000, p_type = "SMALL BRASS"))
    val start_date = "1995-01-01"
    val end_date = "1996-12-31"
    val target_type = "ECONOMY ANODIZED STEEL"
    val target_nation = "BRAZIL"
    val result = (((for { l: Lineitem <- lineitem; p: Part <- part; if (p.p_partkey).asInstanceOf[Int] == l.l_partkey; s: Supplier <- supplier; if (s.s_suppkey).asInstanceOf[Int] == l.l_suppkey; o: Order <- orders; if (o.o_orderkey).asInstanceOf[Int] == l.l_orderkey; c: Customer <- customer; if (c.c_custkey).asInstanceOf[Int] == o.o_custkey; n: Nation <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; r: Region <- region; if (r.r_regionkey).asInstanceOf[Int] == n.n_regionkey; if (p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA") } yield (o.o_orderdate.substring(0, 4), Result(l = l, p = p, s = s, o = o, c = c, n = n, r = r))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(year => year.key)).map{ g => { val year = g; Map("o_year" -> year.key, "mkt_share" -> (for { x: Result <- year } yield x.n.n_name == target_nation match {
      case true => x.l.l_extendedprice * (1 - x.l.l_discount)
      case _ => 0
    }).sum / (for { x: Result <- year } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum) } }.toList
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    val numerator = 1000 * 0.9
    val denominator = numerator + (500 * 0.95)
    val share = numerator / denominator
    assert(result == List(Result1(o_year = "1995", mkt_share = share)))
  }
}
