// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:30:15Z
object q3 {
  case class Customer(c_custkey: Int, c_mktsegment: String)
  case class G(o_orderkey: Int, o_orderdate: String, o_shippriority: Int)
  case class Lineitem(l_orderkey: Int, l_extendedprice: Double, l_discount: Double, l_shipdate: String)
  case class Order(o_orderkey: Int, o_custkey: Int, o_orderdate: String, o_shippriority: Int)
  case class OrderLineJoin(o: Order, l: Lineitem)
  case class OrderLineJoin1(l_orderkey: Int, revenue: Double, o_orderdate: String, o_shippriority: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val customer = List(Customer(c_custkey = 1, c_mktsegment = "BUILDING"), Customer(c_custkey = 2, c_mktsegment = "AUTOMOBILE"))
    val orders = List(Order(o_orderkey = 100, o_custkey = 1, o_orderdate = "1995-03-14", o_shippriority = 1), Order(o_orderkey = 200, o_custkey = 2, o_orderdate = "1995-03-10", o_shippriority = 2))
    val lineitem = List(Lineitem(l_orderkey = 100, l_extendedprice = 1000, l_discount = 0.05, l_shipdate = "1995-03-16"), Lineitem(l_orderkey = 100, l_extendedprice = 500, l_discount = 0, l_shipdate = "1995-03-20"), Lineitem(l_orderkey = 200, l_extendedprice = 1000, l_discount = 0.1, l_shipdate = "1995-03-14"))
    val cutoff = "1995-03-15"
    val segment = "BUILDING"
    val building_customers = for { c <- customer; if c.c_mktsegment == segment } yield c
    val valid_orders = for { o <- orders; c <- building_customers; if o.o_custkey == (c.c_custkey).asInstanceOf[Int]; if o.o_orderdate < cutoff } yield o
    val valid_lineitems = for { l <- lineitem; if l.l_shipdate > cutoff } yield l
    val order_line_join = (((for { o <- valid_orders; l <- valid_lineitems; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey } yield (G(o_orderkey = o.o_orderkey, o_orderdate = o.o_orderdate, o_shippriority = o.o_shippriority), OrderLineJoin(o = o, l = l))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => List(-(for { r <- g } yield r.l.l_extendedprice * (1 - r.l.l_discount)).sum, g.key.o_orderdate))).map{ g => Map("l_orderkey" -> g.key.o_orderkey, "revenue" -> (for { r <- g } yield r.l.l_extendedprice * (1 - r.l.l_discount)).sum, "o_orderdate" -> g.key.o_orderdate, "o_shippriority" -> g.key.o_shippriority) }.toList
    println(scala.util.parsing.json.JSONArray(order_line_join.asInstanceOf[List[Any]]).toString())
    assert(order_line_join == List(OrderLineJoin1(l_orderkey = 100, revenue = 1000 * 0.95 + 500, o_orderdate = "1995-03-14", o_shippriority = 1)))
  }
}
