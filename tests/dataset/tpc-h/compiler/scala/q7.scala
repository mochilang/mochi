// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:28:27Z
object q7 {
  case class Customer(c_custkey: Int, c_nationkey: Int)
  case class G(supp_nation: String, cust_nation: String, l_year: String)
  case class Lineitem(l_orderkey: Int, l_suppkey: Int, l_extendedprice: Double, l_discount: Double, l_shipdate: String)
  case class Nation(n_nationkey: Int, n_name: String)
  case class Order(o_orderkey: Int, o_custkey: Int)
  case class Result(l: Lineitem, o: Order, c: Customer, s: Supplier, n1: Nation, n2: Nation)
  case class Result1(supp_nation: String, cust_nation: String, l_year: String, revenue: Double)
  case class Supplier(s_suppkey: Int, s_nationkey: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val nation = List(Nation(n_nationkey = 1, n_name = "FRANCE"), Nation(n_nationkey = 2, n_name = "GERMANY"))
    val supplier = List(Supplier(s_suppkey = 100, s_nationkey = 1))
    val customer = List(Customer(c_custkey = 200, c_nationkey = 2))
    val orders = List(Order(o_orderkey = 1000, o_custkey = 200))
    val lineitem = List(Lineitem(l_orderkey = 1000, l_suppkey = 100, l_extendedprice = 1000, l_discount = 0.1, l_shipdate = "1995-06-15"), Lineitem(l_orderkey = 1000, l_suppkey = 100, l_extendedprice = 800, l_discount = 0.05, l_shipdate = "1997-01-01"))
    val start_date = "1995-01-01"
    val end_date = "1996-12-31"
    val nation1 = "FRANCE"
    val nation2 = "GERMANY"
    val result = (((for { l <- lineitem; o <- orders; if (o.o_orderkey).asInstanceOf[Int] == l.l_orderkey; c <- customer; if (c.c_custkey).asInstanceOf[Int] == o.o_custkey; s <- supplier; if (s.s_suppkey).asInstanceOf[Int] == l.l_suppkey; n1 <- nation; if (n1.n_nationkey).asInstanceOf[Int] == s.s_nationkey; n2 <- nation; if (n2.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if (l.l_shipdate >= start_date && l.l_shipdate <= end_date && (n1.n_name == nation1 && n2.n_name == nation2) || (n1.n_name == nation2 && n2.n_name == nation1)) } yield (G(supp_nation = n1.n_name, cust_nation = n2.n_name, l_year = l.l_shipdate.substring(0, 4)), Result(l = l, o = o, c = c, s = s, n1 = n1, n2 = n2))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => List(supp_nation, cust_nation, l_year))).map{ g => Map("supp_nation" -> g.key.supp_nation, "cust_nation" -> g.key.cust_nation, "l_year" -> g.key.l_year, "revenue" -> (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum) }.toList
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result1(supp_nation = "FRANCE", cust_nation = "GERMANY", l_year = "1995", revenue = 900)))
  }
}
