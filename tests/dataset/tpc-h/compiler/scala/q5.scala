// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:34:59Z
object q5 {
  case class Auto1(n_name: String, revenue: Int)
  case class Customer(c_custkey: Int, c_nationkey: Int)
  case class Lineitem(l_orderkey: Int, l_suppkey: Int, l_extendedprice: Double, l_discount: Double)
  case class LocalCustomerSupplierOrder(nation: String, revenue: Double)
  case class Nation(n_nationkey: Int, n_regionkey: Int, n_name: String)
  case class Order(o_orderkey: Int, o_custkey: Int, o_orderdate: String)
  case class Region(r_regionkey: Int, r_name: String)
  case class Result(n_name: String, revenue: Double)
  case class Supplier(s_suppkey: Int, s_nationkey: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val region = List(Region(r_regionkey = 0, r_name = "ASIA"), Region(r_regionkey = 1, r_name = "EUROPE"))
    val nation = List(Nation(n_nationkey = 10, n_regionkey = 0, n_name = "JAPAN"), Nation(n_nationkey = 20, n_regionkey = 0, n_name = "INDIA"), Nation(n_nationkey = 30, n_regionkey = 1, n_name = "FRANCE"))
    val customer = List(Customer(c_custkey = 1, c_nationkey = 10), Customer(c_custkey = 2, c_nationkey = 20))
    val supplier = List(Supplier(s_suppkey = 100, s_nationkey = 10), Supplier(s_suppkey = 200, s_nationkey = 20))
    val orders = List(Order(o_orderkey = 1000, o_custkey = 1, o_orderdate = "1994-03-15"), Order(o_orderkey = 2000, o_custkey = 2, o_orderdate = "1994-06-10"), Order(o_orderkey = 3000, o_custkey = 2, o_orderdate = "1995-01-01"))
    val lineitem = List(Lineitem(l_orderkey = 1000, l_suppkey = 100, l_extendedprice = 1000, l_discount = 0.05), Lineitem(l_orderkey = 2000, l_suppkey = 200, l_extendedprice = 800, l_discount = 0.1), Lineitem(l_orderkey = 3000, l_suppkey = 200, l_extendedprice = 900, l_discount = 0.05))
    val asia_nations = for { r: Region <- region; n: Nation <- nation; if (n.n_regionkey).asInstanceOf[Int] == r.r_regionkey; if r.r_name == "ASIA" } yield n
    val local_customer_supplier_orders = for { c: Customer <- customer; n: Nation <- asia_nations; if c.c_nationkey == (n.n_nationkey).asInstanceOf[Int]; o: Order <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l: Lineitem <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; s: Supplier <- supplier; if (s.s_suppkey).asInstanceOf[Int] == l.l_suppkey; if o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey } yield LocalCustomerSupplierOrder(nation = n.n_name, revenue = l.l_extendedprice * (1 - l.l_discount))
    val result = (((for { r: LocalCustomerSupplierOrder <- local_customer_supplier_orders } yield (r.nation, r)).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x: LocalCustomerSupplierOrder <- g } yield x.revenue).sum)).map{ g => Map("n_name" -> g.key, "revenue" -> (for { x: LocalCustomerSupplierOrder <- g } yield x.revenue).sum) }.toList
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Auto1(n_name = "JAPAN", revenue = 950), Auto1(n_name = "INDIA", revenue = 720)))
  }
}
