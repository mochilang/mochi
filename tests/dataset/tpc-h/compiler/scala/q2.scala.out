object Main {
    def test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part(): Unit = {
        expect((result == scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("s_acctbal" -> 1000, "s_name" -> "BestSupplier", "n_name" -> "FRANCE", "p_partkey" -> 1000, "p_mfgr" -> "M1", "s_address" -> "123 Rue", "s_phone" -> "123", "s_comment" -> "Fast and reliable", "ps_supplycost" -> 10))))
    }
    
    def main(args: Array[String]): Unit = {
        val region: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("r_regionkey" -> 1, "r_name" -> "EUROPE"), scala.collection.mutable.Map("r_regionkey" -> 2, "r_name" -> "ASIA"))
        val nation: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("n_nationkey" -> 10, "n_regionkey" -> 1, "n_name" -> "FRANCE"), scala.collection.mutable.Map("n_nationkey" -> 20, "n_regionkey" -> 2, "n_name" -> "CHINA"))
        val supplier: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("s_suppkey" -> 100, "s_name" -> "BestSupplier", "s_address" -> "123 Rue", "s_nationkey" -> 10, "s_phone" -> "123", "s_acctbal" -> 1000, "s_comment" -> "Fast and reliable"), scala.collection.mutable.Map("s_suppkey" -> 200, "s_name" -> "AltSupplier", "s_address" -> "456 Way", "s_nationkey" -> 20, "s_phone" -> "456", "s_acctbal" -> 500, "s_comment" -> "Slow"))
        val part: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("p_partkey" -> 1000, "p_type" -> "LARGE BRASS", "p_size" -> 15, "p_mfgr" -> "M1"), scala.collection.mutable.Map("p_partkey" -> 2000, "p_type" -> "SMALL COPPER", "p_size" -> 15, "p_mfgr" -> "M2"))
        val partsupp: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("ps_partkey" -> 1000, "ps_suppkey" -> 100, "ps_supplycost" -> 10), scala.collection.mutable.Map("ps_partkey" -> 1000, "ps_suppkey" -> 200, "ps_supplycost" -> 15))
        val europe_nations: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = region
    val res = _query(src, Seq(
        Map("items" -> nation, "on" -> ((args: Seq[Any]) => {
    val r = args(0)
    val n = args(1)
    (n.n_regionkey == r.r_regionkey)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val r = args(0)
    val n = args(1)
    n
}), "where" -> ((args: Seq[Any]) => {
    val r = args(0)
    val n = args(1)
    (r.r_name == "EUROPE")
})))
    res
})()
        val europe_suppliers: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, scala.collection.mutable.Map[String, Any]]] = (() => {
    val src = supplier
    val res = _query(src, Seq(
        Map("items" -> europe_nations, "on" -> ((args: Seq[Any]) => {
    val s = args(0)
    val n = args(1)
    (s.s_nationkey == n.n_nationkey)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val s = args(0)
    val n = args(1)
    scala.collection.mutable.Map("s" -> s, "n" -> n)
})))
    res
})()
        val target_parts: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = part
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val p = args(0)
    p
}), "where" -> ((args: Seq[Any]) => {
    val p = args(0)
    ((p.p_size == 15) && (p.p_type == "LARGE BRASS"))
})))
    res
})()
        val target_partsupp: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = partsupp
    val res = _query(src, Seq(
        Map("items" -> target_parts, "on" -> ((args: Seq[Any]) => {
    val ps = args(0)
    val p = args(1)
    (ps.ps_partkey == p.p_partkey)
})),
        Map("items" -> europe_suppliers, "on" -> ((args: Seq[Any]) => {
    val ps = args(0)
    val p = args(1)
    val s = args(2)
    (ps.ps_suppkey == s.s.s_suppkey)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val ps = args(0)
    val p = args(1)
    val s = args(2)
    scala.collection.mutable.Map("s_acctbal" -> s.s.s_acctbal, "s_name" -> s.s.s_name, "n_name" -> s.n.n_name, "p_partkey" -> p.p_partkey, "p_mfgr" -> p.p_mfgr, "s_address" -> s.s.s_address, "s_phone" -> s.s.s_phone, "s_comment" -> s.s.s_comment, "ps_supplycost" -> ps.ps_supplycost)
})))
    res
})()
        val costs: scala.collection.mutable.ArrayBuffer[Any] = (() => {
    val src = target_partsupp
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val x = args(0)
    x.ps_supplycost
})))
    res
})()
        val min_cost = min(costs)
        val result: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = target_partsupp
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val x = args(0)
    x
}), "where" -> ((args: Seq[Any]) => {
    val x = args(0)
    (x.ps_supplycost == min_cost)
}), "sortKey" -> ((args: Seq[Any]) => {
    val x = args(0)
    (-x.s_acctbal)
})))
    res
})()
        _json(result)
        test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
    }
    def expect(cond: Boolean): Unit = {
            if (!cond) throw new RuntimeException("expect failed")
    }
    
    def _json(v: Any): Unit = println(_to_json(v))
    
    def _query(src: Seq[Any], joins: Seq[Map[String,Any]], opts: Map[String,Any]): Seq[Any] = {
            var items = src.map(v => Seq[Any](v))
            for (j <- joins) {
                    val joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
                    val jitems = j("items").asInstanceOf[Seq[Any]]
                    val on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
                    val left = j.get("left").exists(_.asInstanceOf[Boolean])
                    val right = j.get("right").exists(_.asInstanceOf[Boolean])
                    if (left && right) {
                            val matched = Array.fill(jitems.length)(false)
                            for (leftRow <- items) {
                                    var m = false
                                    for ((rightRow, ri) <- jitems.zipWithIndex) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; matched(ri) = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) joined.append(leftRow :+ null)
                            }
                            for ((rightRow, ri) <- jitems.zipWithIndex) {
                                    if (!matched(ri)) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else if (right) {
                            for (rightRow <- jitems) {
                                    var m = false
                                    for (leftRow <- items) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else {
                            for (leftRow <- items) {
                                    var m = false
                                    for (rightRow <- jitems) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (left && !m) joined.append(leftRow :+ null)
                            }
                    }
                    items = joined.toSeq
            }
            var it = items
            opts.get("where").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Boolean]
                    it = it.filter(r => fn(r))
            }
            opts.get("sortKey").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Any]
                    it = it.sortBy(r => fn(r))(_anyOrdering)
            }
            opts.get("skip").foreach { n => it = it.drop(n.asInstanceOf[Int]) }
            opts.get("take").foreach { n => it = it.take(n.asInstanceOf[Int]) }
            val sel = opts("select").asInstanceOf[Seq[Any] => Any]
            it.map(r => sel(r))
    }
    
    def _to_json(v: Any): String = v match {
            case null => "null"
            case s: String => "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
            case b: Boolean => b.toString
            case i: Int => i.toString
            case l: Long => l.toString
            case d: Double => d.toString
            case m: scala.collection.Map[_, _] =>
                    m.map{ case (k, v2) => "\"" + k.toString.replace("\"", "\\\"") + "\":" + _to_json(v2) }.mkString("{", ",", "}")
            case seq: Iterable[_] => seq.map(_to_json).mkString("[", ",", "]")
            case other => "\"" + other.toString.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
    }
    
}
