// Generated by Mochi compiler v0.10.25 on 2025-07-13T16:30:16Z
object q4 {
  case class Lineitem(l_orderkey: Int, l_commitdate: String, l_receiptdate: String)
  case class Order(o_orderkey: Int, o_orderdate: String, o_orderpriority: String)
  case class Result(o_orderpriority: String, order_count: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val orders = List(Order(o_orderkey = 1, o_orderdate = "1993-07-01", o_orderpriority = "1-URGENT"), Order(o_orderkey = 2, o_orderdate = "1993-07-15", o_orderpriority = "2-HIGH"), Order(o_orderkey = 3, o_orderdate = "1993-08-01", o_orderpriority = "3-NORMAL"))
    val lineitem = List(Lineitem(l_orderkey = 1, l_commitdate = "1993-07-10", l_receiptdate = "1993-07-12"), Lineitem(l_orderkey = 1, l_commitdate = "1993-07-12", l_receiptdate = "1993-07-10"), Lineitem(l_orderkey = 2, l_commitdate = "1993-07-20", l_receiptdate = "1993-07-25"), Lineitem(l_orderkey = 3, l_commitdate = "1993-08-02", l_receiptdate = "1993-08-01"), Lineitem(l_orderkey = 3, l_commitdate = "1993-08-05", l_receiptdate = "1993-08-10"))
    val start_date = "1993-07-01"
    val end_date = "1993-08-01"
    val date_filtered_orders = for { o <- orders; if o.o_orderdate >= start_date && o.o_orderdate < end_date } yield o
    val late_orders = for { o <- date_filtered_orders; if (for { l <- lineitem; if l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate } yield l).nonEmpty } yield o
    val result = (((for { o <- late_orders } yield (o.o_orderpriority, o)).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => g.key)).map{ g => Map("o_orderpriority" -> g.key, "order_count" -> (g).size) }.toList
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(o_orderpriority = "1-URGENT", order_count = 1), Result(o_orderpriority = "2-HIGH", order_count = 1)))
  }
}
