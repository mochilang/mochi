// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Nation {
  int n_nationkey;
  std::string n_name;
};
struct Supplier {
  int s_suppkey;
  std::string s_name;
  std::string s_address;
  int s_nationkey;
};
struct Part {
  int p_partkey;
  std::string p_name;
};
struct Partsupp {
  int ps_partkey;
  int ps_suppkey;
  int ps_availqty;
};
struct Lineitem {
  int l_partkey;
  int l_suppkey;
  int l_quantity;
  std::string l_shipdate;
};
struct Shipped94 {
  std::any partkey;
  std::any suppkey;
};
struct __struct7 {
  Shipped94 key;
  std::vector<Lineitem> items;
};
struct __struct8 {
  std::any partkey;
  std::any suppkey;
  double qty;
};
struct Result {
  std::any s_name;
  std::any s_address;
};
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_partkey\":";
  __json(v.l_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_quantity\":";
  __json(v.l_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_name\":";
  __json(v.p_name);
  std::cout << "}";
}
inline void __json(const Shipped94 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"partkey\":";
  __json(v.partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"suppkey\":";
  __json(v.suppkey);
  std::cout << "}";
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"partkey\":";
  __json(v.partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"suppkey\":";
  __json(v.suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  std::cout << "}";
}
inline void __json(const Partsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_partkey\":";
  __json(v.ps_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_suppkey\":";
  __json(v.ps_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_availqty\":";
  __json(v.ps_availqty);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  std::cout << "}";
}
int main() {
  std::vector<Nation> nation = {Nation{1, std::string("CANADA")},
                                Nation{2, std::string("GERMANY")}};
  std::vector<Supplier> supplier = {Supplier{100, std::string("Maple Supply"),
                                             std::string("123 Forest Lane"), 1},
                                    Supplier{200, std::string("Berlin Metals"),
                                             std::string("456 Iron Str"), 2}};
  std::vector<Part> part = {Part{10, std::string("forest glade bricks")},
                            Part{20, std::string("desert sand paper")}};
  std::vector<Partsupp> partsupp = {Partsupp{10, 100, 100},
                                    Partsupp{20, 200, 30}};
  std::vector<Lineitem> lineitem = {
      Lineitem{10, 100, 100, std::string("1994-05-15")},
      Lineitem{10, 100, 50, std::string("1995-01-01")}};
  auto prefix = std::string("forest");
  std::vector<__struct8> shipped_94 = ([&]() {
    std::vector<__struct7> __groups;
    for (auto l : lineitem) {
      if (!(((l.l_shipdate >= std::string("1994-01-01")) &&
             (l.l_shipdate < std::string("1995-01-01")))))
        continue;
      auto __key = Shipped94{l.l_partkey, l.l_suppkey};
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(l);
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct7{__key, std::vector<Lineitem>{l}});
      }
    }
    std::vector<__struct8> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct8{g.key.partkey, g.key.suppkey, ([&](auto v) {
                                    return std::accumulate(v.begin(), v.end(),
                                                           0.0);
                                  })(([&]() {
                                    std::vector<int> __items;
                                    for (auto x : g.items) {
                                      __items.push_back(x.l_quantity);
                                    }
                                    return __items;
                                  })())});
    }
    return __items;
  })();
  auto target_partkeys = ([&]() {
    std::vector<int> __items;
    for (auto ps : partsupp) {
      for (auto p : part) {
        if (!((ps.ps_partkey == p.p_partkey)))
          continue;
        for (auto s : shipped_94) {
          if (!((__any_eq(std::any{ps.ps_partkey}, s.partkey) &&
                 __any_eq(std::any{ps.ps_suppkey}, s.suppkey))))
            continue;
          if (!(((std::string(p.p_name).substr(0, (prefix.size()) - (0)) ==
                  prefix) &&
                 (ps.ps_availqty > ((0.5 * s.qty))))))
            continue;
          __items.push_back(ps.ps_suppkey);
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Supplier>().s_name), Result>>
        __items;
    for (auto s : supplier) {
      for (auto n : nation) {
        if (!((n.n_nationkey == s.s_nationkey)))
          continue;
        if (!(((std::find(target_partkeys.begin(), target_partkeys.end(),
                          s.s_suppkey) != target_partkeys.end()) &&
               (n.n_name == std::string("CANADA")))))
          continue;
        __items.push_back({s.s_name, Result{s.s_name, s.s_address}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q20 returns suppliers from CANADA with forest part stock > 50% of 1994
  // shipments
  return 0;
}
