// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Customer {
  int c_custkey;
  std::string c_phone;
  int c_acctbal;
};
struct Order {
  int o_orderkey;
  int o_custkey;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct EligibleCustomer {
  std::string cntrycode;
  std::any c_acctbal;
};
struct __struct4 {
  std::string key;
  std::vector<EligibleCustomer> items;
};
struct Row {
  std::any cntrycode;
  int numcust;
  std::any totacctbal;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_phone\":";
  __json(v.c_phone);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_acctbal\":";
  __json(v.c_acctbal);
  std::cout << "}";
}
inline void __json(const EligibleCustomer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cntrycode\":";
  __json(v.cntrycode);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_acctbal\":";
  __json(v.c_acctbal);
  std::cout << "}";
}
inline void __json(const Row &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cntrycode\":";
  __json(v.cntrycode);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"numcust\":";
  __json(v.numcust);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"totacctbal\":";
  __json(v.totacctbal);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {
      Customer{1, std::string("13-123-4567"), 600},
      Customer{2, std::string("31-456-7890"), 100},
      Customer{3, std::string("30-000-0000"), 700}};
  std::vector<Order> orders = {Order{10, 2}};
  std::vector<std::string> valid_codes = {std::string("13"), std::string("31"),
                                          std::string("23"), std::string("29"),
                                          std::string("30"), std::string("18"),
                                          std::string("17")};
  auto avg_balance = __avg(([&]() {
    std::vector<int> __items;
    for (auto c : customer) {
      if (!(((c.c_acctbal > 0) &&
             (std::find(valid_codes.begin(), valid_codes.end(),
                        std::string(c.c_phone).substr(0, (2) - (0))) !=
              valid_codes.end()))))
        continue;
      __items.push_back(c.c_acctbal);
    }
    return __items;
  })());
  std::vector<EligibleCustomer> eligible_customers = ([&]() {
    std::vector<EligibleCustomer> __items;
    for (auto c : customer) {
      if (!((((std::find(valid_codes.begin(), valid_codes.end(),
                         std::string(c.c_phone).substr(0, (2) - (0))) !=
               valid_codes.end()) &&
              (c.c_acctbal > avg_balance)) &&
             ((!std::any_of(orders.begin(), orders.end(), [&](auto o) {
               return (o.o_custkey == c.c_custkey);
             }))))))
        continue;
      __items.push_back(EligibleCustomer{
          std::string(c.c_phone).substr(0, (2) - (0)), c.c_acctbal});
    }
    return __items;
  })();
  std::vector<__struct4> groups = ([&]() {
    std::map<std::string, std::vector<EligibleCustomer>> __groups;
    for (auto c : eligible_customers) {
      __groups[c.cntrycode].push_back(c);
    }
    std::vector<__struct4> __items;
    for (auto &kv : __groups) {
      __items.push_back(__struct4{kv.first, kv.second});
    }
    return __items;
  })();
  std::vector<int> tmp = {};
  for (auto g : groups) {
    auto total = ([&](auto v) {
      return std::accumulate(v.begin(), v.end(), 0.0);
    })(([&]() {
      std::vector<std::any> __items;
      for (auto x : g.items) {
        __items.push_back(x.c_acctbal);
      }
      return __items;
    })());
    auto row = Row{g.key, ((int)g.size()), total};
    tmp.push_back(row);
  }
  auto result = ([&]() {
    std::vector<std::pair<decltype(r.cntrycode), int>> __items;
    for (auto r : tmp) {
      __items.push_back({r.cntrycode, r});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<int> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q22 returns wealthy inactive customers by phone prefix
  return 0;
}
