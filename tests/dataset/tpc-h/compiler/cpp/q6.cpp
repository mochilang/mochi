// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Lineitem {
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipdate;
  int l_quantity;
};
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_quantity\":";
  __json(v.l_quantity);
  std::cout << "}";
}
int main() {
  std::vector<Lineitem> lineitem = {
      Lineitem{1000, 0.06, std::string("1994-02-15"), 10},
      Lineitem{500, 0.07, std::string("1994-03-10"), 23},
      Lineitem{400, 0.04, std::string("1994-04-10"), 15},
      Lineitem{200, 0.06, std::string("1995-01-01"), 5}};
  auto result = ([&]() {
    double __sum = 0;
    for (auto l : lineitem) {
      if (!(((((((l.l_shipdate >= std::string("1994-01-01"))) &&
                ((l.l_shipdate < std::string("1995-01-01")))) &&
               ((l.l_discount >= 0.05))) &&
              ((l.l_discount <= 0.07))) &&
             ((l.l_quantity < 24)))))
        continue;
      __sum += (l.l_extendedprice * l.l_discount);
    }
    return __sum;
  })();
  (__json(result));
  // test Q6 calculates revenue from qualified lineitems
  return 0;
}
