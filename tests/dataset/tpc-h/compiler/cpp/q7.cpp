// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Nation {
  int n_nationkey;
  std::string n_name;
};
struct Supplier {
  int s_suppkey;
  int s_nationkey;
};
struct Customer {
  int c_custkey;
  int c_nationkey;
};
struct Order {
  int o_orderkey;
  int o_custkey;
};
struct Lineitem {
  int l_orderkey;
  int l_suppkey;
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipdate;
};
struct Result {
  std::any supp_nation;
  std::any cust_nation;
  std::string l_year;
};
struct __struct7 {
  Lineitem l;
  Order o;
  Customer c;
  Supplier s;
  Nation n1;
  Nation n2;
};
struct __struct8 {
  Result key;
  std::vector<__struct7> items;
};
struct __struct9 {
  std::any supp_nation;
  std::any cust_nation;
  std::any l_year;
  double revenue;
};
struct __struct10 {
  std::any f0;
  std::any f1;
  std::any f2;
};
inline void __json(const __struct10 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f2\":";
  __json(v.f2);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_nationkey\":";
  __json(v.c_nationkey);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"supp_nation\":";
  __json(v.supp_nation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cust_nation\":";
  __json(v.cust_nation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_year\":";
  __json(v.l_year);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"supp_nation\":";
  __json(v.supp_nation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cust_nation\":";
  __json(v.cust_nation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_year\":";
  __json(v.l_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l\":";
  __json(v.l);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o\":";
  __json(v.o);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n1\":";
  __json(v.n1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n2\":";
  __json(v.n2);
  std::cout << "}";
}
int main() {
  std::vector<Nation> nation = {Nation{1, std::string("FRANCE")},
                                Nation{2, std::string("GERMANY")}};
  std::vector<Supplier> supplier = {Supplier{100, 1}};
  std::vector<Customer> customer = {Customer{200, 2}};
  std::vector<Order> orders = {Order{1000, 200}};
  std::vector<Lineitem> lineitem = {
      Lineitem{1000, 100, 1000, 0.1, std::string("1995-06-15")},
      Lineitem{1000, 100, 800, 0.05, std::string("1997-01-01")}};
  auto start_date = std::string("1995-01-01");
  auto end_date = std::string("1996-12-31");
  auto nation1 = std::string("FRANCE");
  auto nation2 = std::string("GERMANY");
  std::vector<__struct7> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto l : lineitem) {
      for (auto o : orders) {
        if (!((o.o_orderkey == l.l_orderkey)))
          continue;
        for (auto c : customer) {
          if (!((c.c_custkey == o.o_custkey)))
            continue;
          for (auto s : supplier) {
            if (!((s.s_suppkey == l.l_suppkey)))
              continue;
            for (auto n1 : nation) {
              if (!((n1.n_nationkey == s.s_nationkey)))
                continue;
              for (auto n2 : nation) {
                if (!((n2.n_nationkey == c.c_nationkey)))
                  continue;
                if (!((((((l.l_shipdate >= start_date) &&
                          (l.l_shipdate <= end_date)) &&
                         (((n1.n_name == nation1) &&
                           (n2.n_name == nation2)))) ||
                        (((n1.n_name == nation2) && (n2.n_name == nation1)))))))
                  continue;
                auto __key =
                    Result{n1.n_name, n2.n_name,
                           std::string(l.l_shipdate).substr(0, (4) - (0))};
                bool __found = false;
                for (auto &__g : __groups) {
                  if (__g.key == __key) {
                    __g.items.push_back(__struct7{l, o, c, s, n1, n2});
                    __found = true;
                    break;
                  }
                }
                if (!__found) {
                  __groups.push_back(__struct8{
                      __key,
                      std::vector<__struct7>{__struct7{l, o, c, s, n1, n2}}});
                }
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<__struct10, __struct9>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct10{supp_nation, cust_nation, l_year},
           __struct9{g.key.supp_nation, g.key.cust_nation, g.key.l_year,
                     ([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype((
                           std::declval<__struct7>().l.l_extendedprice *
                           ((1 - std::declval<__struct7>().l.l_discount))))>
                           __items;
                       for (auto x : g.items) {
                         __items.push_back(
                             (x.l.l_extendedprice * ((1 - x.l.l_discount))));
                       }
                       return __items;
                     })())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1, a.first.f2) <
             std::tie(b.first.f0, b.first.f1, b.first.f2);
    });
    std::vector<__struct9> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q7 computes revenue between FRANCE and GERMANY by year
  return 0;
}
