// Generated by Mochi compiler v0.10.24 on 2025-07-12T18:55:25Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Customer {
  decltype(1) c_custkey;
  decltype(std::string("BUILDING")) c_mktsegment;
};
inline bool operator==(const Customer &a, const Customer &b) {
  return a.c_custkey == b.c_custkey && a.c_mktsegment == b.c_mktsegment;
}
inline bool operator!=(const Customer &a, const Customer &b) {
  return !(a == b);
}
struct Order {
  decltype(100) o_orderkey;
  decltype(1) o_custkey;
  decltype(std::string("1995-03-14")) o_orderdate;
  decltype(1) o_shippriority;
};
inline bool operator==(const Order &a, const Order &b) {
  return a.o_orderkey == b.o_orderkey && a.o_custkey == b.o_custkey &&
         a.o_orderdate == b.o_orderdate && a.o_shippriority == b.o_shippriority;
}
inline bool operator!=(const Order &a, const Order &b) { return !(a == b); }
struct Lineitem {
  decltype(100) l_orderkey;
  decltype(1000) l_extendedprice;
  decltype(0.05) l_discount;
  decltype(std::string("1995-03-16")) l_shipdate;
};
inline bool operator==(const Lineitem &a, const Lineitem &b) {
  return a.l_orderkey == b.l_orderkey &&
         a.l_extendedprice == b.l_extendedprice &&
         a.l_discount == b.l_discount && a.l_shipdate == b.l_shipdate;
}
inline bool operator!=(const Lineitem &a, const Lineitem &b) {
  return !(a == b);
}
struct OrderLineJoin {
  decltype(std::declval<Order>().o_orderkey) o_orderkey;
  decltype(std::declval<Order>().o_orderdate) o_orderdate;
  decltype(std::declval<Order>().o_shippriority) o_shippriority;
};
inline bool operator==(const OrderLineJoin &a, const OrderLineJoin &b) {
  return a.o_orderkey == b.o_orderkey && a.o_orderdate == b.o_orderdate &&
         a.o_shippriority == b.o_shippriority;
}
inline bool operator!=(const OrderLineJoin &a, const OrderLineJoin &b) {
  return !(a == b);
}
struct __struct5 {
  Order o;
  Lineitem l;
};
inline bool operator==(const __struct5 &a, const __struct5 &b) {
  return a.o == b.o && a.l == b.l;
}
inline bool operator!=(const __struct5 &a, const __struct5 &b) {
  return !(a == b);
}
struct __struct6 {
  OrderLineJoin key;
  std::vector<__struct5> items;
};
inline bool operator==(const __struct6 &a, const __struct6 &b) {
  return a.key == b.key && a.items == b.items;
}
inline bool operator!=(const __struct6 &a, const __struct6 &b) {
  return !(a == b);
}
struct __struct7 {
  decltype(std::declval<__struct6>().key.o_orderkey) l_orderkey;
  double revenue;
  decltype(std::declval<__struct6>().key.o_orderdate) o_orderdate;
  decltype(std::declval<__struct6>().key.o_shippriority) o_shippriority;
};
inline bool operator==(const __struct7 &a, const __struct7 &b) {
  return a.l_orderkey == b.l_orderkey && a.revenue == b.revenue &&
         a.o_orderdate == b.o_orderdate && a.o_shippriority == b.o_shippriority;
}
inline bool operator!=(const __struct7 &a, const __struct7 &b) {
  return !(a == b);
}
struct __struct8 {
  double f0;
  decltype(std::declval<__struct6>().key.o_orderdate) f1;
};
inline bool operator==(const __struct8 &a, const __struct8 &b) {
  return a.f0 == b.f0 && a.f1 == b.f1;
}
inline bool operator!=(const __struct8 &a, const __struct8 &b) {
  return !(a == b);
}
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_mktsegment\":";
  __json(v.c_mktsegment);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const OrderLineJoin &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o\":";
  __json(v.o);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l\":";
  __json(v.l);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer =
      std::vector<Customer>{Customer{1, std::string("BUILDING")},
                            Customer{2, std::string("AUTOMOBILE")}};
  std::vector<Order> orders =
      std::vector<Order>{Order{100, 1, std::string("1995-03-14"), 1},
                         Order{200, 2, std::string("1995-03-10"), 2}};
  std::vector<Lineitem> lineitem = std::vector<Lineitem>{
      Lineitem{100, 1000, 0.05, std::string("1995-03-16")},
      Lineitem{100, 500, 0, std::string("1995-03-20")},
      Lineitem{200, 1000, 0.1, std::string("1995-03-14")}};
  auto cutoff = std::string("1995-03-15");
  auto segment = std::string("BUILDING");
  auto building_customers = ([&]() {
    std::vector<Customer> __items;
    for (auto c : customer) {
      if (!((c.c_mktsegment == segment)))
        continue;
      __items.push_back(c);
    }
    return __items;
  })();
  auto valid_orders = ([&]() {
    std::vector<Order> __items;
    for (auto o : orders) {
      for (auto c : building_customers) {
        if (!((o.o_custkey == c.c_custkey)))
          continue;
        if (!((o.o_orderdate < cutoff)))
          continue;
        __items.push_back(o);
      }
    }
    return __items;
  })();
  auto valid_lineitems = ([&]() {
    std::vector<Lineitem> __items;
    for (auto l : lineitem) {
      if (!((l.l_shipdate > cutoff)))
        continue;
      __items.push_back(l);
    }
    return __items;
  })();
  auto order_line_join = ([&]() {
    std::vector<__struct6> __groups;
    for (auto o : valid_orders) {
      for (auto l : valid_lineitems) {
        if (!((l.l_orderkey == o.o_orderkey)))
          continue;
        auto __key =
            OrderLineJoin{o.o_orderkey, o.o_orderdate, o.o_shippriority};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct5{o, l});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct6{__key, std::vector<__struct5>{__struct5{o, l}}});
        }
      }
    }
    std::vector<std::pair<__struct8, __struct7>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct8{(-([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype((
                           std::declval<__struct5>().l.l_extendedprice *
                           ((1 - std::declval<__struct5>().l.l_discount))))>
                           __items;
                       for (auto r : g.items) {
                         __items.push_back(
                             (r.l.l_extendedprice * ((1 - r.l.l_discount))));
                       }
                       return __items;
                     })())),
                     g.key.o_orderdate},
           __struct7{g.key.o_orderkey, ([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype((
                           std::declval<__struct5>().l.l_extendedprice *
                           ((1 - std::declval<__struct5>().l.l_discount))))>
                           __items;
                       for (auto r : g.items) {
                         __items.push_back(
                             (r.l.l_extendedprice * ((1 - r.l.l_discount))));
                       }
                       return __items;
                     })()),
                     g.key.o_orderdate, g.key.o_shippriority}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(order_line_join));
  // test Q3 returns revenue per order with correct priority
  return 0;
}
