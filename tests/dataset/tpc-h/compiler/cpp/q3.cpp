// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Customer {
  int c_custkey;
  std::string c_mktsegment;
};
struct Order {
  int o_orderkey;
  int o_custkey;
  std::string o_orderdate;
  int o_shippriority;
};
struct Lineitem {
  int l_orderkey;
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipdate;
};
struct OrderLineJoin {
  std::any o_orderkey;
  std::any o_orderdate;
  std::any o_shippriority;
};
struct __struct5 {
  Order o;
  Lineitem l;
};
struct __struct6 {
  OrderLineJoin key;
  std::vector<__struct5> items;
};
struct __struct7 {
  std::any l_orderkey;
  double revenue;
  std::any o_orderdate;
  std::any o_shippriority;
};
struct __struct8 {
  double f0;
  std::any f1;
};
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_mktsegment\":";
  __json(v.c_mktsegment);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const OrderLineJoin &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_shippriority\":";
  __json(v.o_shippriority);
  std::cout << "}";
}
inline void __json(const __struct5 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o\":";
  __json(v.o);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l\":";
  __json(v.l);
  std::cout << "}";
}
int main() {
  std::vector<Customer> customer = {Customer{1, std::string("BUILDING")},
                                    Customer{2, std::string("AUTOMOBILE")}};
  std::vector<Order> orders = {Order{100, 1, std::string("1995-03-14"), 1},
                               Order{200, 2, std::string("1995-03-10"), 2}};
  std::vector<Lineitem> lineitem = {
      Lineitem{100, 1000, 0.05, std::string("1995-03-16")},
      Lineitem{100, 500, 0, std::string("1995-03-20")},
      Lineitem{200, 1000, 0.1, std::string("1995-03-14")}};
  auto cutoff = std::string("1995-03-15");
  auto segment = std::string("BUILDING");
  std::vector<Customer> building_customers = ([&]() {
    std::vector<Customer> __items;
    for (auto c : customer) {
      if (!((c.c_mktsegment == segment)))
        continue;
      __items.push_back(c);
    }
    return __items;
  })();
  std::vector<Order> valid_orders = ([&]() {
    std::vector<Order> __items;
    for (auto o : orders) {
      for (auto c : building_customers) {
        if (!((o.o_custkey == c.c_custkey)))
          continue;
        if (!((o.o_orderdate < cutoff)))
          continue;
        __items.push_back(o);
      }
    }
    return __items;
  })();
  std::vector<Lineitem> valid_lineitems = ([&]() {
    std::vector<Lineitem> __items;
    for (auto l : lineitem) {
      if (!((l.l_shipdate > cutoff)))
        continue;
      __items.push_back(l);
    }
    return __items;
  })();
  std::vector<__struct5> order_line_join = ([&]() {
    std::vector<__struct6> __groups;
    for (auto o : valid_orders) {
      for (auto l : valid_lineitems) {
        if (!((l.l_orderkey == o.o_orderkey)))
          continue;
        auto __key =
            OrderLineJoin{o.o_orderkey, o.o_orderdate, o.o_shippriority};
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(__struct5{o, l});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(
              __struct6{__key, std::vector<__struct5>{__struct5{o, l}}});
        }
      }
    }
    std::vector<std::pair<__struct8, __struct7>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {__struct8{(-([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype((
                           std::declval<__struct5>().l.l_extendedprice *
                           ((1 - std::declval<__struct5>().l.l_discount))))>
                           __items;
                       for (auto r : g.items) {
                         __items.push_back(
                             (r.l.l_extendedprice * ((1 - r.l.l_discount))));
                       }
                       return __items;
                     })())),
                     g.key.o_orderdate},
           __struct7{g.key.o_orderkey, ([&](auto v) {
                       return std::accumulate(v.begin(), v.end(), 0.0);
                     })(([&]() {
                       std::vector<decltype((
                           std::declval<__struct5>().l.l_extendedprice *
                           ((1 - std::declval<__struct5>().l.l_discount))))>
                           __items;
                       for (auto r : g.items) {
                         __items.push_back(
                             (r.l.l_extendedprice * ((1 - r.l.l_discount))));
                       }
                       return __items;
                     })()),
                     g.key.o_orderdate, g.key.o_shippriority}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(order_line_join));
  // test Q3 returns revenue per order with correct priority
  return 0;
}
