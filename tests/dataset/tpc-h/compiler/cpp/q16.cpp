// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Supplier {
  int s_suppkey;
  std::string s_name;
  std::string s_address;
  std::string s_comment;
};
struct Part {
  int p_partkey;
  std::string p_brand;
  std::string p_type;
  int p_size;
};
struct Partsupp {
  int ps_partkey;
  int ps_suppkey;
};
struct Result {
  std::any s_name;
  std::any s_address;
};
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_brand\":";
  __json(v.p_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_type\":";
  __json(v.p_type);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_size\":";
  __json(v.p_size);
  std::cout << "}";
}
inline void __json(const Partsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_partkey\":";
  __json(v.ps_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_suppkey\":";
  __json(v.ps_suppkey);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_comment\":";
  __json(v.s_comment);
  std::cout << "}";
}
int main() {
  std::vector<Supplier> supplier = {
      Supplier{100, std::string("AlphaSupply"), std::string("123 Hilltop"),
               std::string("Reliable and efficient")},
      Supplier{200, std::string("BetaSupply"), std::string("456 Riverside"),
               std::string("Known for Customer Complaints")}};
  std::vector<Part> part = {
      Part{1, std::string("Brand#12"), std::string("SMALL ANODIZED"), 5},
      Part{2, std::string("Brand#23"), std::string("MEDIUM POLISHED"), 10}};
  std::vector<Partsupp> partsupp = {Partsupp{1, 100}, Partsupp{2, 200}};
  auto excluded_suppliers = ([&]() {
    std::vector<int> __items;
    for (auto ps : partsupp) {
      for (auto p : part) {
        if (!((p.p_partkey == ps.ps_partkey)))
          continue;
        if (!((((p.p_brand == std::string("Brand#12")) &&
                (p.p_type.find(std::string("SMALL")) != std::string::npos)) &&
               (p.p_size == 5))))
          continue;
        __items.push_back(ps.ps_suppkey);
      }
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Supplier>().s_name), Result>>
        __items;
    for (auto s : supplier) {
      if (!((((!((std::find(excluded_suppliers.begin(),
                            excluded_suppliers.end(),
                            s.s_suppkey) != excluded_suppliers.end()))) &&
              ((!(s.s_comment.find(std::string("Customer")) !=
                  std::string::npos)))) &&
             ((!(s.s_comment.find(std::string("Complaints")) !=
                 std::string::npos))))))
        continue;
      __items.push_back({s.s_name, Result{s.s_name, s.s_address}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q16 returns suppliers not linked to certain parts or complaints
  return 0;
}
