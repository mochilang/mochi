// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Region {
  decltype(0) r_regionkey;
  decltype(std::string("AMERICA")) r_name;
};
struct Nation {
  decltype(10) n_nationkey;
  decltype(0) n_regionkey;
  decltype(std::string("BRAZIL")) n_name;
};
struct Customer {
  decltype(1) c_custkey;
  decltype(10) c_nationkey;
};
struct Order {
  decltype(100) o_orderkey;
  decltype(1) o_custkey;
  decltype(std::string("1995-04-10")) o_orderdate;
};
struct Lineitem {
  decltype(100) l_orderkey;
  decltype(1000) l_suppkey;
  decltype(5000) l_partkey;
  decltype(1000) l_extendedprice;
  decltype(0.1) l_discount;
};
struct Part {
  decltype(5000) p_partkey;
  decltype(std::string("ECONOMY ANODIZED STEEL")) p_type;
};
struct Result {
  decltype(l) l;
  decltype(p) p;
  std::string s;
  decltype(o) o;
  decltype(c) c;
  decltype(n) n;
  decltype(r) r;
};
struct __struct8 {
  decltype(std::string(o.o_orderdate).substr(0, (4) - (0))) key;
  std::vector<Result> items;
};
struct __struct9 {
  decltype(std::declval<__struct8>().key) o_year;
  bool mkt_share;
};
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_nationkey\":";
  __json(v.c_nationkey);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_partkey\":";
  __json(v.l_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  std::cout << "}";
}
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_regionkey\":";
  __json(v.n_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  std::cout << "}";
}
inline void __json(const __struct9 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_year\":";
  __json(v.o_year);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"mkt_share\":";
  __json(v.mkt_share);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_type\":";
  __json(v.p_type);
  std::cout << "}";
}
inline void __json(const Region &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_regionkey\":";
  __json(v.r_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_name\":";
  __json(v.r_name);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l\":";
  __json(v.l);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p\":";
  __json(v.p);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o\":";
  __json(v.o);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c\":";
  __json(v.c);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n\":";
  __json(v.n);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r\":";
  __json(v.r);
  std::cout << "}";
}
int main() {
  std::vector<Region> region = {Region{0, std::string("AMERICA")}};
  std::vector<Nation> nation = {Nation{10, 0, std::string("BRAZIL")},
                                Nation{20, 0, std::string("CANADA")}};
  std::vector<Customer> customer = {Customer{1, 10}, Customer{2, 20}};
  std::vector<Order> orders = {Order{100, 1, std::string("1995-04-10")},
                               Order{200, 2, std::string("1995-07-15")}};
  std::vector<Lineitem> lineitem = {Lineitem{100, 1000, 5000, 1000, 0.1},
                                    Lineitem{200, 2000, 5000, 500, 0.05}};
  std::vector<std::string> supplier =
      std::vector<decltype(std::unordered_map<std::string, decltype(1000)>{
          {std::string("s_suppkey"), 1000}})>{
          std::unordered_map<std::string, decltype(1000)>{
              {std::string("s_suppkey"), 1000}},
          std::unordered_map<std::string, decltype(2000)>{
              {std::string("s_suppkey"), 2000}}};
  std::vector<Part> part = {Part{5000, std::string("ECONOMY ANODIZED STEEL")},
                            Part{6000, std::string("SMALL BRASS")}};
  auto start_date = std::string("1995-01-01");
  auto end_date = std::string("1996-12-31");
  auto target_type = std::string("ECONOMY ANODIZED STEEL");
  auto target_nation = std::string("BRAZIL");
  std::vector<Result> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto l : lineitem) {
      for (auto p : part) {
        if (!((p.p_partkey == l.l_partkey)))
          continue;
        for (auto s : supplier) {
          if (!((s.s_suppkey == l.l_suppkey)))
            continue;
          for (auto o : orders) {
            if (!((o.o_orderkey == l.l_orderkey)))
              continue;
            for (auto c : customer) {
              if (!((c.c_custkey == o.o_custkey)))
                continue;
              for (auto n : nation) {
                if (!((n.n_nationkey == c.c_nationkey)))
                  continue;
                for (auto r : region) {
                  if (!((r.r_regionkey == n.n_regionkey)))
                    continue;
                  if (!((((((p.p_type == target_type) &&
                            (o.o_orderdate >= start_date)) &&
                           (o.o_orderdate <= end_date)) &&
                          (r.r_name == std::string("AMERICA"))))))
                    continue;
                  auto __key = std::string(o.o_orderdate).substr(0, (4) - (0));
                  bool __found = false;
                  for (auto &__g : __groups) {
                    if (__g.key == __key) {
                      __g.items.push_back(Result{l, p, s, o, c, n, r});
                      __found = true;
                      break;
                    }
                  }
                  if (!__found) {
                    __groups.push_back(__struct8{
                        __key,
                        std::vector<Result>{Result{l, p, s, o, c, n, r}}});
                  }
                }
              }
            }
          }
        }
      }
    }
    std::vector<std::pair<decltype(std::declval<__struct8>().key), __struct9>>
        __items;
    for (auto &year : __groups) {
      __items.push_back(
          {year.key,
           __struct9{
               year.key,
               (([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype(([&]() {
                    auto __v =
                        (std::declval<Result>().n.n_name == target_nation);
                    if (__v == true)
                      return (std::declval<Result>().l.l_extendedprice *
                              ((1 - std::declval<Result>().l.l_discount)));
                    return 0;
                  })())>
                      __items;
                  for (auto x : year.items) {
                    __items.push_back(([&]() {
                      auto __v = (x.n.n_name == target_nation);
                      if (__v == true)
                        return (x.l.l_extendedprice * ((1 - x.l.l_discount)));
                      return 0;
                    })());
                  }
                  return __items;
                })()) /
                ([&](auto v) {
                  return std::accumulate(v.begin(), v.end(), 0.0);
                })(([&]() {
                  std::vector<decltype((
                      std::declval<Result>().l.l_extendedprice *
                      ((1 - std::declval<Result>().l.l_discount))))>
                      __items;
                  for (auto x : year.items) {
                    __items.push_back(
                        (x.l.l_extendedprice * ((1 - x.l.l_discount))));
                  }
                  return __items;
                })()))}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct9> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q8 returns correct market share for BRAZIL in 1995
  auto numerator = 900;
  auto denominator = (numerator + (475));
  auto share = (numerator / denominator);
  return 0;
}
