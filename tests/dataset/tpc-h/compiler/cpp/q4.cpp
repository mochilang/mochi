// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Order {
  int o_orderkey;
  std::string o_orderdate;
  std::string o_orderpriority;
};
struct Lineitem {
  int l_orderkey;
  std::string l_commitdate;
  std::string l_receiptdate;
};
struct __struct3 {
  std::any key;
  std::vector<Order> items;
};
struct Result {
  std::any o_orderpriority;
  int order_count;
};
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_commitdate\":";
  __json(v.l_commitdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_receiptdate\":";
  __json(v.l_receiptdate);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderpriority\":";
  __json(v.o_orderpriority);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderpriority\":";
  __json(v.o_orderpriority);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"order_count\":";
  __json(v.order_count);
  std::cout << "}";
}
int main() {
  std::vector<Order> orders = {
      Order{1, std::string("1993-07-01"), std::string("1-URGENT")},
      Order{2, std::string("1993-07-15"), std::string("2-HIGH")},
      Order{3, std::string("1993-08-01"), std::string("3-NORMAL")}};
  std::vector<Lineitem> lineitem = {
      Lineitem{1, std::string("1993-07-10"), std::string("1993-07-12")},
      Lineitem{1, std::string("1993-07-12"), std::string("1993-07-10")},
      Lineitem{2, std::string("1993-07-20"), std::string("1993-07-25")},
      Lineitem{3, std::string("1993-08-02"), std::string("1993-08-01")},
      Lineitem{3, std::string("1993-08-05"), std::string("1993-08-10")}};
  auto start_date = std::string("1993-07-01");
  auto end_date = std::string("1993-08-01");
  std::vector<Order> date_filtered_orders = ([&]() {
    std::vector<Order> __items;
    for (auto o : orders) {
      if (!(((o.o_orderdate >= start_date) && (o.o_orderdate < end_date))))
        continue;
      __items.push_back(o);
    }
    return __items;
  })();
  std::vector<Order> late_orders = ([&]() {
    std::vector<Order> __items;
    for (auto o : date_filtered_orders) {
      if (!(std::any_of(lineitem.begin(), lineitem.end(), [&](auto l) {
            return ((l.l_orderkey == o.o_orderkey) &&
                    (l.l_commitdate < l.l_receiptdate));
          })))
        continue;
      __items.push_back(o);
    }
    return __items;
  })();
  std::vector<Result> result = ([&]() {
    std::vector<__struct3> __groups;
    for (auto o : late_orders) {
      auto __key = o.o_orderpriority;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__any_eq(__g.key, __key)) {
          __g.items.push_back(o);
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<Order>{o}});
      }
    }
    std::vector<std::pair<decltype(std::declval<__struct3>().key), Result>>
        __items;
    for (auto &g : __groups) {
      __items.push_back({g.key, Result{g.key, ((int)g.items.size())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q4 returns count of orders with late lineitems in range
  return 0;
}
