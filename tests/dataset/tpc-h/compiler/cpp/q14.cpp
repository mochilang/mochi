// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Part {
  int p_partkey;
  std::string p_type;
};
struct Lineitem {
  int l_partkey;
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipdate;
};
struct Filtered {
  bool is_promo;
  std::any revenue;
};
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"is_promo\":";
  __json(v.is_promo);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_partkey\":";
  __json(v.l_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_type\":";
  __json(v.p_type);
  std::cout << "}";
}
int main() {
  std::vector<Part> part = {Part{1, std::string("PROMO LUXURY")},
                            Part{2, std::string("STANDARD BRASS")}};
  std::vector<Lineitem> lineitem = {
      Lineitem{1, 1000, 0.1, std::string("1995-09-05")},
      Lineitem{2, 800, 0, std::string("1995-09-20")},
      Lineitem{1, 500, 0.2, std::string("1995-10-02")}};
  auto start_date = std::string("1995-09-01");
  auto end_date = std::string("1995-10-01");
  std::vector<Filtered> filtered = ([&]() {
    std::vector<Filtered> __items;
    for (auto l : lineitem) {
      for (auto p : part) {
        if (!((p.p_partkey == l.l_partkey)))
          continue;
        if (!(((l.l_shipdate >= start_date) && (l.l_shipdate < end_date))))
          continue;
        __items.push_back(
            Filtered{(std::find(p.p_type.begin(), p.p_type.end(),
                                std::string("PROMO")) != p.p_type.end()),
                     (l.l_extendedprice * ((1 - l.l_discount)))});
      }
    }
    return __items;
  })();
  auto promo_sum = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<std::any> __items;
    for (auto x : filtered) {
      if (!(x.is_promo))
        continue;
      __items.push_back(x.revenue);
    }
    return __items;
  })());
  auto total_sum = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<std::any> __items;
    for (auto x : filtered) {
      __items.push_back(x.revenue);
    }
    return __items;
  })());
  auto result = ((100 * promo_sum) / total_sum);
  (__json(result));
  // test Q14 calculates promo revenue percent in 1995-09
  auto promo = 900;
  auto total = 1700;
  auto expected = ((100 * promo) / total);
  return 0;
}
