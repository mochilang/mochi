// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Region {
  decltype(1) r_regionkey;
  decltype(std::string("EUROPE")) r_name;
};
struct Nation {
  decltype(10) n_nationkey;
  decltype(1) n_regionkey;
  decltype(std::string("FRANCE")) n_name;
};
struct Supplier {
  decltype(100) s_suppkey;
  decltype(std::string("BestSupplier")) s_name;
  decltype(std::string("123 Rue")) s_address;
  decltype(10) s_nationkey;
  decltype(std::string("123")) s_phone;
  decltype(1000) s_acctbal;
  decltype(std::string("Fast and reliable")) s_comment;
};
struct Part {
  decltype(1000) p_partkey;
  decltype(std::string("LARGE BRASS")) p_type;
  decltype(15) p_size;
  decltype(std::string("M1")) p_mfgr;
};
struct Partsupp {
  decltype(1000) ps_partkey;
  decltype(100) ps_suppkey;
  decltype(10) ps_supplycost;
};
struct EuropeSupplier {
  decltype(s) s;
  decltype(n) n;
};
struct TargetPartsupp {
  decltype(std::declval<EuropeSupplier>()
               .std::declval<EuropeSupplier>()
               .s_acctbal) s_acctbal;
  decltype(std::declval<EuropeSupplier>().std::declval<EuropeSupplier>().s_name)
      s_name;
  decltype(std::declval<EuropeSupplier>().n.n_name) n_name;
  decltype(p.p_partkey) p_partkey;
  decltype(p.p_mfgr) p_mfgr;
  decltype(std::declval<EuropeSupplier>()
               .std::declval<EuropeSupplier>()
               .s_address) s_address;
  decltype(std::declval<EuropeSupplier>()
               .std::declval<EuropeSupplier>()
               .s_phone) s_phone;
  decltype(std::declval<EuropeSupplier>()
               .std::declval<EuropeSupplier>()
               .s_comment) s_comment;
  decltype(pstd::declval<EuropeSupplier>().ps_supplycost) ps_supplycost;
};
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_regionkey\":";
  __json(v.n_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_type\":";
  __json(v.p_type);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_size\":";
  __json(v.p_size);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_mfgr\":";
  __json(v.p_mfgr);
  std::cout << "}";
}
inline void __json(const Partsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_partkey\":";
  __json(v.ps_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_suppkey\":";
  __json(v.ps_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_supplycost\":";
  __json(v.ps_supplycost);
  std::cout << "}";
}
inline void __json(const Region &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_regionkey\":";
  __json(v.r_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_name\":";
  __json(v.r_name);
  std::cout << "}";
}
inline void __json(const EuropeSupplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n\":";
  __json(v.n);
  std::cout << "}";
}
inline void __json(const TargetPartsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_acctbal\":";
  __json(v.s_acctbal);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_mfgr\":";
  __json(v.p_mfgr);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_phone\":";
  __json(v.s_phone);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_comment\":";
  __json(v.s_comment);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_supplycost\":";
  __json(v.ps_supplycost);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_phone\":";
  __json(v.s_phone);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_acctbal\":";
  __json(v.s_acctbal);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_comment\":";
  __json(v.s_comment);
  std::cout << "}";
}
int main() {
  std::vector<Region> region = {Region{1, std::string("EUROPE")},
                                Region{2, std::string("ASIA")}};
  std::vector<Nation> nation = {Nation{10, 1, std::string("FRANCE")},
                                Nation{20, 2, std::string("CHINA")}};
  std::vector<Supplier> supplier = {
      Supplier{100, std::string("BestSupplier"), std::string("123 Rue"), 10,
               std::string("123"), 1000, std::string("Fast and reliable")},
      Supplier{200, std::string("AltSupplier"), std::string("456 Way"), 20,
               std::string("456"), 500, std::string("Slow")}};
  std::vector<Part> part = {
      Part{1000, std::string("LARGE BRASS"), 15, std::string("M1")},
      Part{2000, std::string("SMALL COPPER"), 15, std::string("M2")}};
  std::vector<Partsupp> partsupp = {Partsupp{1000, 100, 10},
                                    Partsupp{1000, 200, 15}};
  auto europe_nations = ([&]() {
    std::vector<decltype(n)> __items;
    for (auto r : region) {
      for (auto n : nation) {
        if (!((n.n_regionkey == r.r_regionkey)))
          continue;
        if (!((r.r_name == std::string("EUROPE"))))
          continue;
        __items.push_back(n);
      }
    }
    return __items;
  })();
  std::vector<EuropeSupplier> europe_suppliers = ([&]() {
    std::vector<EuropeSupplier> __items;
    for (auto s : supplier) {
      for (auto n : europe_nations) {
        if (!((s.s_nationkey == n.n_nationkey)))
          continue;
        __items.push_back(EuropeSupplier{s, n});
      }
    }
    return __items;
  })();
  auto target_parts = ([&]() {
    std::vector<decltype(p)> __items;
    for (auto p : part) {
      if (!(((p.p_size == 15) && (p.p_type == std::string("LARGE BRASS")))))
        continue;
      __items.push_back(p);
    }
    return __items;
  })();
  std::vector<TargetPartsupp> target_partsupp = ([&]() {
    std::vector<TargetPartsupp> __items;
    for (auto ps : partsupp) {
      for (auto p : target_parts) {
        if (!((ps.ps_partkey == p.p_partkey)))
          continue;
        for (auto s : europe_suppliers) {
          if (!((ps.ps_suppkey == s.s.s_suppkey)))
            continue;
          __items.push_back(TargetPartsupp{
              s.s.s_acctbal, s.s.s_name, s.n.n_name, p.p_partkey, p.p_mfgr,
              s.s.s_address, s.s.s_phone, s.s.s_comment, ps.ps_supplycost});
        }
      }
    }
    return __items;
  })();
  auto costs = ([&]() {
    std::vector<decltype(std::declval<TargetPartsupp>().ps_supplycost)> __items;
    for (auto x : target_partsupp) {
      __items.push_back(x.ps_supplycost);
    }
    return __items;
  })();
  auto min_cost = (*std::min_element(costs.begin(), costs.end()));
  std::vector<TargetPartsupp> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<TargetPartsupp>().s_acctbal),
                          TargetPartsupp>>
        __items;
    for (auto x : target_partsupp) {
      if (!((x.ps_supplycost == min_cost)))
        continue;
      __items.push_back({(-x.s_acctbal), x});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<TargetPartsupp> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q2 returns only supplier with min cost in Europe for brass part
  return 0;
}
