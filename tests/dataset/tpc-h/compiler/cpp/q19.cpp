// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Part {
  int p_partkey;
  std::string p_brand;
  std::string p_container;
  int p_size;
};
struct Lineitem {
  int l_partkey;
  int l_quantity;
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipmode;
  std::string l_shipinstruct;
};
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_partkey\":";
  __json(v.l_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_quantity\":";
  __json(v.l_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipmode\":";
  __json(v.l_shipmode);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipinstruct\":";
  __json(v.l_shipinstruct);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_brand\":";
  __json(v.p_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_container\":";
  __json(v.p_container);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_size\":";
  __json(v.p_size);
  std::cout << "}";
}
int main() {
  std::vector<Part> part = {
      Part{1, std::string("Brand#12"), std::string("SM BOX"), 3},
      Part{2, std::string("Brand#23"), std::string("MED BOX"), 5},
      Part{3, std::string("Brand#34"), std::string("LG BOX"), 15}};
  std::vector<Lineitem> lineitem = {
      Lineitem{1, 5, 1000, 0.1, std::string("AIR"),
               std::string("DELIVER IN PERSON")},
      Lineitem{2, 15, 2000, 0.05, std::string("AIR REG"),
               std::string("DELIVER IN PERSON")},
      Lineitem{3, 35, 1500, 0, std::string("AIR"),
               std::string("DELIVER IN PERSON")}};
  auto revenues = ([&]() {
    std::vector<decltype((std::declval<Lineitem>().l_extendedprice *
                          ((1 - std::declval<Lineitem>().l_discount))))>
        __items;
    for (auto l : lineitem) {
      for (auto p : part) {
        if (!((p.p_partkey == l.l_partkey)))
          continue;
        if (!((((((((((((p.p_brand == std::string("Brand#12"))) &&
                       ((std::find(
                             std::vector<std::string>{
                                 std::string("SM CASE"), std::string("SM BOX"),
                                 std::string("SM PACK"), std::string("SM PKG")}
                                 .begin(),
                             std::vector<std::string>{
                                 std::string("SM CASE"), std::string("SM BOX"),
                                 std::string("SM PACK"), std::string("SM PKG")}
                                 .end(),
                             p.p_container) !=
                         std::vector<std::string>{
                             std::string("SM CASE"), std::string("SM BOX"),
                             std::string("SM PACK"), std::string("SM PKG")}
                             .end()))) &&
                      (((l.l_quantity >= 1) && (l.l_quantity <= 11)))) &&
                     (((p.p_size >= 1) && (p.p_size <= 5))))) ||
                   ((((((p.p_brand == std::string("Brand#23"))) &&
                       ((std::find(
                             std::vector<std::string>{std::string("MED BAG"),
                                                      std::string("MED BOX"),
                                                      std::string("MED PKG"),
                                                      std::string("MED PACK")}
                                 .begin(),
                             std::vector<std::string>{std::string("MED BAG"),
                                                      std::string("MED BOX"),
                                                      std::string("MED PKG"),
                                                      std::string("MED PACK")}
                                 .end(),
                             p.p_container) !=
                         std::vector<std::string>{
                             std::string("MED BAG"), std::string("MED BOX"),
                             std::string("MED PKG"), std::string("MED PACK")}
                             .end()))) &&
                      (((l.l_quantity >= 10) && (l.l_quantity <= 20)))) &&
                     (((p.p_size >= 1) && (p.p_size <= 10)))))) ||
                  ((((((p.p_brand == std::string("Brand#34"))) &&
                      ((std::find(
                            std::vector<std::string>{
                                std::string("LG CASE"), std::string("LG BOX"),
                                std::string("LG PACK"), std::string("LG PKG")}
                                .begin(),
                            std::vector<std::string>{
                                std::string("LG CASE"), std::string("LG BOX"),
                                std::string("LG PACK"), std::string("LG PKG")}
                                .end(),
                            p.p_container) !=
                        std::vector<std::string>{
                            std::string("LG CASE"), std::string("LG BOX"),
                            std::string("LG PACK"), std::string("LG PKG")}
                            .end()))) &&
                     (((l.l_quantity >= 20) && (l.l_quantity <= 30)))) &&
                    (((p.p_size >= 1) && (p.p_size <= 15))))))) &&
                (std::find(std::vector<std::string>{std::string("AIR"),
                                                    std::string("AIR REG")}
                               .begin(),
                           std::vector<std::string>{std::string("AIR"),
                                                    std::string("AIR REG")}
                               .end(),
                           l.l_shipmode) !=
                 std::vector<std::string>{std::string("AIR"),
                                          std::string("AIR REG")}
                     .end())) &&
               (l.l_shipinstruct == std::string("DELIVER IN PERSON")))))
          continue;
        __items.push_back((l.l_extendedprice * ((1 - l.l_discount))));
      }
    }
    return __items;
  })();
  auto result = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(revenues);
  (__json(result));
  // test Q19 returns total revenue from qualifying branded parts
  return 0;
}
