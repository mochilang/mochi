// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Part {
  int p_partkey;
  std::string p_brand;
  std::string p_container;
};
struct Lineitem {
  int l_partkey;
  int l_quantity;
  int l_extendedprice;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_partkey\":";
  __json(v.l_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_quantity\":";
  __json(v.l_quantity);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  std::cout << "}";
}
inline void __json(const Part &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_partkey\":";
  __json(v.p_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_brand\":";
  __json(v.p_brand);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"p_container\":";
  __json(v.p_container);
  std::cout << "}";
}
int main() {
  std::vector<Part> part = {
      Part{1, std::string("Brand#23"), std::string("MED BOX")},
      Part{2, std::string("Brand#77"), std::string("LG JAR")}};
  std::vector<Lineitem> lineitem = {Lineitem{1, 1, 100}, Lineitem{1, 10, 1000},
                                    Lineitem{1, 20, 2000}, Lineitem{2, 5, 500}};
  auto brand = std::string("Brand#23");
  auto container = std::string("MED BOX");
  auto filtered = ([&]() {
    std::vector<int> __items;
    for (auto l : lineitem) {
      for (auto p : part) {
        if (!((p.p_partkey == l.l_partkey)))
          continue;
        if (!((((((p.p_brand == brand)) && ((p.p_container == container))) &&
                ((l.l_quantity < ((0.2 * __avg(([&]() {
                                     std::vector<int> __items;
                                     for (auto x : lineitem) {
                                       if (!((x.l_partkey == p.p_partkey)))
                                         continue;
                                       __items.push_back(x.l_quantity);
                                     }
                                     return __items;
                                   })())))))))))
          continue;
        __items.push_back(l.l_extendedprice);
      }
    }
    return __items;
  })();
  auto result = (([&](auto v) {
                   return std::accumulate(v.begin(), v.end(), 0.0);
                 })(filtered) /
                 7);
  (__json(result));
  // test Q17 returns average yearly revenue for small-quantity orders
  auto expected = 14.285714285714286;
  return 0;
}
