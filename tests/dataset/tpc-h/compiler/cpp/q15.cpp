// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Supplier {
  int s_suppkey;
  std::string s_name;
  std::string s_address;
  std::string s_phone;
};
struct Lineitem {
  int l_suppkey;
  int l_extendedprice;
  std::any l_discount;
  std::string l_shipdate;
};
struct __struct3 {
  std::any key;
  std::vector<Lineitem> items;
};
struct Revenue0 {
  std::any supplier_no;
  double total_revenue;
};
struct Result {
  std::any s_suppkey;
  std::any s_name;
  std::any s_address;
  std::any s_phone;
  std::any total_revenue;
};
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_shipdate\":";
  __json(v.l_shipdate);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_phone\":";
  __json(v.s_phone);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_address\":";
  __json(v.s_address);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_phone\":";
  __json(v.s_phone);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_revenue\":";
  __json(v.total_revenue);
  std::cout << "}";
}
inline void __json(const Revenue0 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"supplier_no\":";
  __json(v.supplier_no);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total_revenue\":";
  __json(v.total_revenue);
  std::cout << "}";
}
int main() {
  std::vector<Supplier> supplier = {
      Supplier{100, std::string("Best Supplier"), std::string("123 Market St"),
               std::string("123-456")},
      Supplier{200, std::string("Second Supplier"), std::string("456 Elm St"),
               std::string("987-654")}};
  std::vector<Lineitem> lineitem = {
      Lineitem{100, 1000, 0.1, std::string("1996-01-15")},
      Lineitem{100, 500, 0, std::string("1996-03-20")},
      Lineitem{200, 800, 0.05, std::string("1995-12-30")}};
  auto start_date = std::string("1996-01-01");
  auto end_date = std::string("1996-04-01");
  std::vector<Revenue0> revenue0 = ([&]() {
    std::vector<__struct3> __groups;
    for (auto l : lineitem) {
      if (!(((l.l_shipdate >= start_date) && (l.l_shipdate < end_date))))
        continue;
      auto __key = l.l_suppkey;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__any_eq(__g.key, __key)) {
          __g.items.push_back(l);
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<Lineitem>{l}});
      }
    }
    std::vector<Revenue0> __items;
    for (auto &g : __groups) {
      __items.push_back(Revenue0{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype((std::declval<Lineitem>().l_extendedprice *
                                  ((1 - std::declval<Lineitem>().l_discount))))>
                __items;
            for (auto x : g.items) {
              __items.push_back((x.l_extendedprice * ((1 - x.l_discount))));
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto revenues = ([&]() {
    std::vector<double> __items;
    for (auto x : revenue0) {
      __items.push_back(x.total_revenue);
    }
    return __items;
  })();
  auto max_revenue = (*std::max_element(revenues.begin(), revenues.end()));
  std::vector<Result> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Supplier>().s_suppkey), Result>>
        __items;
    for (auto s : supplier) {
      for (auto r : revenue0) {
        if (!(__any_eq(std::any{s.s_suppkey}, r.supplier_no)))
          continue;
        if (!((r.total_revenue == max_revenue)))
          continue;
        __items.push_back(
            {s.s_suppkey, Result{s.s_suppkey, s.s_name, s.s_address, s.s_phone,
                                 r.total_revenue}});
      }
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q15 returns top revenue supplier(s) for Q1 1996
  auto rev = 1400;
  return 0;
}
