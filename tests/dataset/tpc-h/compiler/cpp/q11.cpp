// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Nation {
  decltype(1) n_nationkey;
  decltype(std::string("GERMANY")) n_name;
};
struct Supplier {
  decltype(100) s_suppkey;
  decltype(1) s_nationkey;
};
struct Partsupp {
  decltype(1000) ps_partkey;
  decltype(100) ps_suppkey;
  decltype(10) ps_supplycost;
  decltype(100) ps_availqty;
};
struct Filtered {
  decltype(ps.ps_partkey) ps_partkey;
  decltype((ps.ps_supplycost * ps.ps_availqty)) value;
};
struct __struct5 {
  decltype(std::declval<Filtered>().ps_partkey) key;
  std::vector<Filtered> items;
};
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Partsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_partkey\":";
  __json(v.ps_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_suppkey\":";
  __json(v.ps_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_supplycost\":";
  __json(v.ps_supplycost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_availqty\":";
  __json(v.ps_availqty);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"ps_partkey\":";
  __json(v.ps_partkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"value\":";
  __json(v.value);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  std::cout << "}";
}
int main() {
  std::vector<Nation> nation = {Nation{1, std::string("GERMANY")},
                                Nation{2, std::string("FRANCE")}};
  std::vector<Supplier> supplier = {Supplier{100, 1}, Supplier{200, 1},
                                    Supplier{300, 2}};
  std::vector<Partsupp> partsupp = {
      Partsupp{1000, 100, 10, 100}, Partsupp{1000, 200, 20, 50},
      Partsupp{2000, 100, 5, 10}, Partsupp{3000, 300, 8, 500}};
  auto target_nation = std::string("GERMANY");
  std::vector<Filtered> filtered = ([&]() {
    std::vector<Filtered> __items;
    for (auto ps : partsupp) {
      for (auto s : supplier) {
        if (!((s.s_suppkey == ps.ps_suppkey)))
          continue;
        for (auto n : nation) {
          if (!((n.n_nationkey == s.s_nationkey)))
            continue;
          if (!((n.n_name == target_nation)))
            continue;
          __items.push_back(
              Filtered{ps.ps_partkey, (ps.ps_supplycost * ps.ps_availqty)});
        }
      }
    }
    return __items;
  })();
  std::vector<Filtered> grouped = ([&]() {
    std::vector<__struct5> __groups;
    for (auto x : filtered) {
      auto __key = x.ps_partkey;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Filtered{x});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct5{__key, std::vector<Filtered>{Filtered{x}}});
      }
    }
    std::vector<Filtered> __items;
    for (auto &g : __groups) {
      __items.push_back(Filtered{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Filtered>().value)> __items;
            for (auto r : g.items) {
              __items.push_back(r.value);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  auto total = ([&](auto v) {
    return std::accumulate(v.begin(), v.end(), 0.0);
  })(([&]() {
    std::vector<decltype(std::declval<Filtered>().value)> __items;
    for (auto x : filtered) {
      __items.push_back(x.value);
    }
    return __items;
  })());
  auto threshold = (total * 0.0001);
  std::vector<Filtered> result = ([&]() {
    std::vector<std::pair<decltype(std::declval<Filtered>().value), Filtered>>
        __items;
    for (auto x : grouped) {
      if (!((x.value > threshold)))
        continue;
      __items.push_back({(-x.value), x});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Filtered> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q11 returns high-value partkeys from GERMANY
  return 0;
}
