// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ", ";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Nation {
  int n_nationkey;
  std::string n_name;
};
struct Supplier {
  int s_suppkey;
  std::string s_name;
  int s_nationkey;
};
struct Order {
  int o_orderkey;
  std::string o_orderstatus;
};
struct Lineitem {
  int l_orderkey;
  int l_suppkey;
  std::string l_receiptdate;
  std::string l_commitdate;
};
struct Result {
  Supplier s;
  Lineitem l1;
  Order o;
  Nation n;
};
struct __struct6 {
  std::any key;
  std::vector<Result> items;
};
struct __struct7 {
  std::any s_name;
  int numwait;
};
struct __struct8 {
  std::any f0;
  std::any f1;
};
inline void __json(const __struct8 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f0\":";
  __json(v.f0);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"f1\":";
  __json(v.f1);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_receiptdate\":";
  __json(v.l_receiptdate);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_commitdate\":";
  __json(v.l_commitdate);
  std::cout << "}";
}
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderstatus\":";
  __json(v.o_orderstatus);
  std::cout << "}";
}
inline void __json(const __struct7 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"numwait\":";
  __json(v.numwait);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_name\":";
  __json(v.s_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s\":";
  __json(v.s);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l1\":";
  __json(v.l1);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o\":";
  __json(v.o);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n\":";
  __json(v.n);
  std::cout << "}";
}
int main() {
  std::vector<Nation> nation = {Nation{1, std::string("SAUDI ARABIA")},
                                Nation{2, std::string("FRANCE")}};
  std::vector<Supplier> supplier = {
      Supplier{100, std::string("Desert Trade"), 1},
      Supplier{200, std::string("Euro Goods"), 2}};
  std::vector<Order> orders = {Order{500, std::string("F")},
                               Order{600, std::string("O")}};
  std::vector<Lineitem> lineitem = {
      Lineitem{500, 100, std::string("1995-04-15"), std::string("1995-04-10")},
      Lineitem{500, 200, std::string("1995-04-12"), std::string("1995-04-12")},
      Lineitem{600, 100, std::string("1995-05-01"), std::string("1995-04-25")}};
  std::vector<Result> result = ([&]() {
    std::vector<__struct6> __groups;
    for (auto s : supplier) {
      for (auto l1 : lineitem) {
        if (!((s.s_suppkey == l1.l_suppkey)))
          continue;
        for (auto o : orders) {
          if (!((o.o_orderkey == l1.l_orderkey)))
            continue;
          for (auto n : nation) {
            if (!((n.n_nationkey == s.s_nationkey)))
              continue;
            if (!(((((o.o_orderstatus == std::string("F")) &&
                     (l1.l_receiptdate > l1.l_commitdate)) &&
                    (n.n_name == std::string("SAUDI ARABIA"))) &&
                   ((!std::any_of(lineitem.begin(), lineitem.end(),
                                  [&](auto x) {
                                    return (((x.l_orderkey == l1.l_orderkey) &&
                                             (x.l_suppkey != l1.l_suppkey)) &&
                                            (x.l_receiptdate > x.l_commitdate));
                                  }))))))
              continue;
            auto __key = s.s_name;
            bool __found = false;
            for (auto &__g : __groups) {
              if (__any_eq(__g.key, __key)) {
                __g.items.push_back(Result{s, l1, o, n});
                __found = true;
                break;
              }
            }
            if (!__found) {
              __groups.push_back(
                  __struct6{__key, std::vector<Result>{Result{s, l1, o, n}}});
            }
          }
        }
      }
    }
    std::vector<std::pair<__struct8, __struct7>> __items;
    for (auto &g : __groups) {
      __items.push_back({__struct8{(-((int)g.items.size())), g.key},
                         __struct7{g.key, ((int)g.items.size())}});
    }
    std::sort(__items.begin(), __items.end(), [](auto &a, auto &b) {
      return std::tie(a.first.f0, a.first.f1) <
             std::tie(b.first.f0, b.first.f1);
    });
    std::vector<__struct7> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q21 returns Saudi suppliers who caused unique delivery delays
  return 0;
}
