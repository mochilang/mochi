(* Generated by Mochi compiler v0.10.25 on 2025-07-13T17:51:26Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst

type record1 = { mutable p_partkey : int; mutable p_type : string }
type record2 = { mutable l_partkey : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_shipdate : string }
type record3 = { mutable is_promo : bool; mutable revenue : float }

let part : record1 list = [{ p_partkey = 1; p_type = "PROMO LUXURY" };{ p_partkey = 2; p_type = "STANDARD BRASS" }]
let lineitem : record2 list = [{ l_partkey = 1; l_extendedprice = 1000.; l_discount = 0.1; l_shipdate = "1995-09-05" };{ l_partkey = 2; l_extendedprice = 800.; l_discount = 0.; l_shipdate = "1995-09-20" };{ l_partkey = 1; l_extendedprice = 500.; l_discount = 0.2; l_shipdate = "1995-10-02" }]
let start_date : string = "1995-09-01"
let end_date : string = "1995-10-01"
let filtered : record3 list = (let __res0 = ref [] in
  List.iter (fun l ->
    List.iter (fun p ->
      if (p.p_partkey = l.l_partkey) then (
        if ((l.l_shipdate >= start_date) && (l.l_shipdate < end_date)) then __res0 := { is_promo = (List.mem "PROMO" p.p_type); revenue = (l.l_extendedprice *. ((1 -. l.l_discount))) } :: !__res0;
      )
    ) part;
  ) lineitem;
  List.rev !__res0)

let promo_sum : float = (sum_float (let __res1 = ref [] in
  List.iter (fun (x : record3) ->
      if x.is_promo then
    __res1 := x.revenue :: !__res1;
  ) filtered;
List.rev !__res1)
)
let total_sum : float = (sum_float (let __res2 = ref [] in
  List.iter (fun (x : record3) ->
      __res2 := x.revenue :: !__res2;
  ) filtered;
List.rev !__res2)
)
let result : float = ((100. *. promo_sum) /. total_sum)

let () =
  json result;
  let promo : float = (1000. *. 0.9) in
  let total : float = (900 +. 800.) in
  let expected = ((100. *. promo) /. total) in
  assert ((result = expected))
