(* Generated by Mochi compiler v0.10.28 on 2025-07-18T03:21:55Z *)
let string_contains s sub =
  let len_s = String.length s and len_sub = String.length sub in
  let rec aux i =
    if i + len_sub > len_s then false
    else if String.sub s i len_sub = sub then true
    else aux (i + 1)
  in aux 0

let sum lst = List.fold_left (+) 0 lst
let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let _json v = print_endline (__to_json v)


type record1 = { mutable p_partkey : int; mutable p_type : string }
type record2 = { mutable l_partkey : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_shipdate : string }
type record3 = { mutable is_promo : bool; mutable revenue : float }

let part : record1 list = [{ p_partkey = 1; p_type = "PROMO LUXURY" };{ p_partkey = 2; p_type = "STANDARD BRASS" }]
let lineitem : record2 list = [{ l_partkey = 1; l_extendedprice = 1000.; l_discount = 0.1; l_shipdate = "1995-09-05" };{ l_partkey = 2; l_extendedprice = 800.; l_discount = 0.; l_shipdate = "1995-09-20" };{ l_partkey = 1; l_extendedprice = 500.; l_discount = 0.2; l_shipdate = "1995-10-02" }]
let start_date : string = "1995-09-01"
let end_date : string = "1995-10-01"
let filtered : record3 list = (let __res0 = ref [] in
  List.iter (fun (l : record2) ->
    List.iter (fun (p : record1) ->
      if (p.p_partkey = l.l_partkey) then (
        if ((l.l_shipdate >= start_date) && (l.l_shipdate < end_date)) then __res0 := { is_promo = (string_contains p.p_type "PROMO"); revenue = (l.l_extendedprice *. ((1 -. l.l_discount))) } :: !__res0;
      )
    ) part;
  ) lineitem;
  List.rev !__res0)

let promo_sum : float = (float_of_int (sum (let __res1 = ref [] in
  List.iter (fun (x : record3) ->
      if x.is_promo then
    __res1 := x.revenue :: !__res1;
  ) filtered;
List.rev !__res1)
))
let total_sum : float = (float_of_int (sum (let __res2 = ref [] in
  List.iter (fun (x : record3) ->
      __res2 := x.revenue :: !__res2;
  ) filtered;
List.rev !__res2)
))
let result : float = ((100. *. promo_sum) /. total_sum)

let () =
  _json result;
  let promo : float = (1000. *. 0.9) in
  let total : float = (900 +. 800.) in
  let expected = ((100. *. promo) /. total) in
  assert ((result = expected))
