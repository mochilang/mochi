(* Generated by Mochi compiler v0.10.25 on 2025-07-13T15:40:40Z *)
let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"

let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable n_nationkey : int; mutable n_name : string }
type record2 = { mutable s_suppkey : int; mutable s_nationkey : int }
type record3 = { mutable p_partkey : int; mutable p_name : string }
type record4 = { mutable ps_partkey : int; mutable ps_suppkey : int; mutable ps_supplycost : float }
type record5 = { mutable o_orderkey : int; mutable o_orderdate : string }
type record6 = { mutable l_orderkey : int; mutable l_partkey : int; mutable l_suppkey : int; mutable l_quantity : int; mutable l_extendedprice : float; mutable l_discount : float }
type record7 = { mutable nation : string; mutable o_year : int }
type record8 = { mutable nation : Obj.t; mutable o_year : string; mutable profit : float }
type record9 = { mutable nation : string; mutable o_year : string; mutable profit : float }
type record10 = { mutable nation : string; mutable o_year : string; mutable profit : Obj.t }

let nation : record1 list = [{ n_nationkey = 1; n_name = "BRAZIL" };{ n_nationkey = 2; n_name = "CANADA" }]
let supplier : record2 list = [{ s_suppkey = 100; s_nationkey = 1 };{ s_suppkey = 200; s_nationkey = 2 }]
let part : record3 list = [{ p_partkey = 1000; p_name = "green metal box" };{ p_partkey = 2000; p_name = "red plastic crate" }]
let partsupp : record4 list = [{ ps_partkey = 1000; ps_suppkey = 100; ps_supplycost = 10. };{ ps_partkey = 1000; ps_suppkey = 200; ps_supplycost = 8. }]
let orders : record5 list = [{ o_orderkey = 1; o_orderdate = "1995-02-10" };{ o_orderkey = 2; o_orderdate = "1997-01-01" }]
let lineitem : record6 list = [{ l_orderkey = 1; l_partkey = 1000; l_suppkey = 100; l_quantity = 5; l_extendedprice = 1000.; l_discount = 0.1 };{ l_orderkey = 2; l_partkey = 1000; l_suppkey = 200; l_quantity = 10; l_extendedprice = 800.; l_discount = 0.05 }]
let prefix : string = "green"
let start_date : string = "1995-01-01"
let end_date : string = "1996-12-31"
let result : record9 list = (let (__groups0 : (record7 * record6 list) list ref) = ref [] in
  List.iter (fun (l : record6) ->
      List.iter (fun (p : record3) ->
            List.iter (fun (s : record2) ->
                    List.iter (fun (ps : record4) ->
                              List.iter (fun (o : record5) ->
                                          List.iter (fun (n : record1) ->
                                                                  if (p.p_partkey = l.l_partkey) && (s.s_suppkey = l.l_suppkey) && (((ps.ps_partkey = l.l_partkey) && ps.ps_suppkey) = l.l_suppkey) && (o.o_orderkey = l.l_orderkey) && (n.n_nationkey = s.s_nationkey) && (((((String.sub p.p_name 0 (List.length prefix - 0) = prefix) && o.o_orderdate) >= start_date) && o.o_orderdate) <= end_date) then (
                let (key : record7) = { nation = n.n_name; o_year = int_of_string String.sub o.o_orderdate 0 (4 - 0) } in
                let cur = try List.assoc key !__groups0 with Not_found -> [] in
                __groups0 := (key, l :: cur) :: List.remove_assoc key !__groups0);
                                          ) nation;
                              ) orders;
                    ) partsupp;
            ) supplier;
      ) part;
  ) lineitem;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record7), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { nation = g.key.nation; o_year = __show (g.key.o_year); profit = (sum (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := (((x.l.l_extendedprice * ((1 - x.l.l_discount)))) - ((x.ps.ps_supplycost * x.l.l_quantity))) :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  let revenue : float = (1000. *. 0.9) in
  let cost : float = (5 *. 10.) in
  assert ((result = [{ nation = "BRAZIL"; o_year = "1995"; profit = (revenue - cost) }]))
