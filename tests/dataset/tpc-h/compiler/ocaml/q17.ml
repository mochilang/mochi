(* Generated by Mochi compiler v0.10.28 on 2025-07-18T03:21:55Z *)
let sum lst = List.fold_left (+) 0 lst
let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let _json v = print_endline (__to_json v)


type record1 = { mutable p_partkey : int; mutable p_brand : string; mutable p_container : string }
type record2 = { mutable l_partkey : int; mutable l_quantity : int; mutable l_extendedprice : float }

let part : record1 list = [{ p_partkey = 1; p_brand = "Brand#23"; p_container = "MED BOX" };{ p_partkey = 2; p_brand = "Brand#77"; p_container = "LG JAR" }]
let lineitem : record2 list = [{ l_partkey = 1; l_quantity = 1; l_extendedprice = 100. };{ l_partkey = 1; l_quantity = 10; l_extendedprice = 1000. };{ l_partkey = 1; l_quantity = 20; l_extendedprice = 2000. };{ l_partkey = 2; l_quantity = 5; l_extendedprice = 500. }]
let brand : string = "Brand#23"
let container : string = "MED BOX"
let filtered = (let __res1 = ref [] in
  List.iter (fun (l : record2) ->
    List.iter (fun (p : record1) ->
      if (p.p_partkey = l.l_partkey) then (
        if (((((p.p_brand = brand)) && ((p.p_container = container))) && ((l.l_quantity < ((0.2 *. (float_of_int (List.fold_left (+) 0 (let __res0 = ref [] in
  List.iter (fun (x : record2) ->
      if (x.l_partkey = p.p_partkey) then
    __res0 := x.l_quantity :: !__res0;
  ) lineitem;
List.rev !__res0)
) /. float_of_int (List.length (let __res0 = ref [] in
  List.iter (fun (x : record2) ->
      if (x.l_partkey = p.p_partkey) then
    __res0 := x.l_quantity :: !__res0;
  ) lineitem;
List.rev !__res0)
)))))))) then __res1 := l.l_extendedprice :: !__res1;
      )
    ) part;
  ) lineitem;
  List.rev !__res1)

let result : float = ((float_of_int (sum filtered)) /. 7.)

let () =
  _json result;
  let expected : float = (100. /. 7.) in
  assert ((result = expected))
