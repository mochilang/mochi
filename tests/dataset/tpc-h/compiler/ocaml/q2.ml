(* Generated by Mochi compiler v0.10.25 on 2025-07-13T06:04:36Z *)
type record1 = { mutable r_regionkey : int; mutable r_name : string }
type record2 = { mutable n_nationkey : int; mutable n_regionkey : int; mutable n_name : string }
type record3 = { mutable s_suppkey : int; mutable s_name : string; mutable s_address : string; mutable s_nationkey : int; mutable s_phone : string; mutable s_acctbal : float; mutable s_comment : string }
type record4 = { mutable p_partkey : int; mutable p_type : string; mutable p_size : int; mutable p_mfgr : string }
type record5 = { mutable ps_partkey : int; mutable ps_suppkey : int; mutable ps_supplycost : float }
type record6 = { mutable s : record3; mutable n : record2 }
type record7 = { mutable s_acctbal : float; mutable s_name : string; mutable n_name : string; mutable p_partkey : int; mutable p_mfgr : string; mutable s_address : string; mutable s_phone : string; mutable s_comment : string; mutable ps_supplycost : float }

let region : record1 list = [{ r_regionkey = 1; r_name = "EUROPE" };{ r_regionkey = 2; r_name = "ASIA" }]
let nation : record2 list = [{ n_nationkey = 10; n_regionkey = 1; n_name = "FRANCE" };{ n_nationkey = 20; n_regionkey = 2; n_name = "CHINA" }]
let supplier : record3 list = [{ s_suppkey = 100; s_name = "BestSupplier"; s_address = "123 Rue"; s_nationkey = 10; s_phone = "123"; s_acctbal = 1000.; s_comment = "Fast and reliable" };{ s_suppkey = 200; s_name = "AltSupplier"; s_address = "456 Way"; s_nationkey = 20; s_phone = "456"; s_acctbal = 500.; s_comment = "Slow" }]
let part : record4 list = [{ p_partkey = 1000; p_type = "LARGE BRASS"; p_size = 15; p_mfgr = "M1" };{ p_partkey = 2000; p_type = "SMALL COPPER"; p_size = 15; p_mfgr = "M2" }]
let partsupp : record5 list = [{ ps_partkey = 1000; ps_suppkey = 100; ps_supplycost = 10. };{ ps_partkey = 1000; ps_suppkey = 200; ps_supplycost = 15. }]
let europe_nations : record2 list = (let __res0 = ref [] in
  List.iter (fun r ->
    List.iter (fun n ->
      if (n.n_regionkey = r.r_regionkey) then (
        if (r.r_name = "EUROPE") then __res0 := n :: !__res0;
      )
    ) nation;
  ) region;
  List.rev !__res0)

let europe_suppliers : record6 list = (let __res1 = ref [] in
  List.iter (fun s ->
    List.iter (fun n ->
      if (s.s_nationkey = n.n_nationkey) then (
        __res1 := { s = s; n = n } :: !__res1;
      )
    ) europe_nations;
  ) supplier;
  List.rev !__res1)

let target_parts : record4 list = (let __res2 = ref [] in
  List.iter (fun (p : record4) ->
      if (((p.p_size = 15) && p.p_type) = "LARGE BRASS") then
    __res2 := p :: !__res2;
  ) part;
List.rev !__res2)

let target_partsupp : record7 list = (let __res3 = ref [] in
  List.iter (fun (ps : record5) ->
      List.iter (fun (p : record4) ->
            List.iter (fun (s : record6) ->
                        if (ps.ps_partkey = p.p_partkey) && (ps.ps_suppkey = s.s.s_suppkey) then
        __res3 := { s_acctbal = s.s.s_acctbal; s_name = s.s.s_name; n_name = s.n.n_name; p_partkey = p.p_partkey; p_mfgr = p.p_mfgr; s_address = s.s.s_address; s_phone = s.s.s_phone; s_comment = s.s.s_comment; ps_supplycost = ps.ps_supplycost } :: !__res3;
            ) europe_suppliers;
      ) target_parts;
  ) partsupp;
List.rev !__res3)

let costs : Obj.t list = (let __res4 = ref [] in
  List.iter (fun (x : record7) ->
      __res4 := x.ps_supplycost :: !__res4;
  ) target_partsupp;
List.rev !__res4)

let min_cost = min costs
let result : record7 list = (let __res5 = ref [] in
  List.iter (fun (x : record7) ->
      if (x.ps_supplycost = min_cost) then
    __res5 := x :: !__res5;
  ) target_partsupp;
List.rev !__res5)


let () =
  json result;
  assert ((result = [{ s_acctbal = 1000.; s_name = "BestSupplier"; n_name = "FRANCE"; p_partkey = 1000; p_mfgr = "M1"; s_address = "123 Rue"; s_phone = "123"; s_comment = "Fast and reliable"; ps_supplycost = 10. }]))
