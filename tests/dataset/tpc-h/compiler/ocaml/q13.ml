(* Generated by Mochi compiler v0.10.25 on 2025-07-13T17:51:26Z *)
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable c_custkey : int }
type record2 = { mutable o_orderkey : int; mutable o_custkey : int; mutable o_comment : string }
type record3 = { mutable c_count : int }
type record4 = { mutable c_count : Obj.t; mutable custdist : int }
type record5 = { mutable c_count : int; mutable custdist : int }

let customer : record1 list = [[("c_custkey",Obj.repr (1))];[("c_custkey",Obj.repr (2))];[("c_custkey",Obj.repr (3))]]
let orders : record2 list = [{ o_orderkey = 100; o_custkey = 1; o_comment = "fast delivery" };{ o_orderkey = 101; o_custkey = 1; o_comment = "no comment" };{ o_orderkey = 102; o_custkey = 2; o_comment = "special requests only" }]
let per_customer : record3 list = (let __res0 = ref [] in
  List.iter (fun c ->
      __res0 := [("c_count",Obj.repr (List.length (let __res1 = ref [] in
  List.iter (fun (o : record2) ->
      if ((((o.o_custkey = Obj.obj (List.assoc "c_custkey" c)) && (not (((List.mem "special" o.o_comment))))) && (not (((List.mem "requests" o.o_comment)))))) then
    __res1 := o :: !__res1;
  ) orders;
List.rev !__res1)
))] :: !__res0;
  ) customer;
List.rev !__res0)

let grouped : record5 list = (let (__groups2 : (int * (string * Obj.t) list list) list ref) = ref [] in
  List.iter (fun x ->
      let (key : int) = Obj.obj (List.assoc "c_count" x) in
      let cur = try List.assoc key !__groups2 with Not_found -> [] in
      __groups2 := (key, x :: cur) :: List.remove_assoc key !__groups2;
  ) per_customer;
  let __res2 = ref [] in
  List.iter (fun ((gKey : int), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res2 := { c_count = g.key; custdist = List.length g.items } :: !__res2
  ) !__groups2;
  List.rev !__res2)


let () =
  json grouped;
  assert ((grouped = [{ c_count = 2; custdist = 1 };{ c_count = 0; custdist = 2 }]))
