(* Generated by Mochi compiler v0.10.28 on 2025-07-18T03:21:55Z *)
let sum lst = List.fold_left (+) 0 lst
let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let _json v = print_endline (__to_json v)


type record1 = { mutable p_partkey : int; mutable p_brand : string; mutable p_container : string; mutable p_size : int }
type record2 = { mutable l_partkey : int; mutable l_quantity : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_shipmode : string; mutable l_shipinstruct : string }

let part : record1 list = [{ p_partkey = 1; p_brand = "Brand#12"; p_container = "SM BOX"; p_size = 3 };{ p_partkey = 2; p_brand = "Brand#23"; p_container = "MED BOX"; p_size = 5 };{ p_partkey = 3; p_brand = "Brand#34"; p_container = "LG BOX"; p_size = 15 }]
let lineitem : record2 list = [{ l_partkey = 1; l_quantity = 5; l_extendedprice = 1000.; l_discount = 0.1; l_shipmode = "AIR"; l_shipinstruct = "DELIVER IN PERSON" };{ l_partkey = 2; l_quantity = 15; l_extendedprice = 2000.; l_discount = 0.05; l_shipmode = "AIR REG"; l_shipinstruct = "DELIVER IN PERSON" };{ l_partkey = 3; l_quantity = 35; l_extendedprice = 1500.; l_discount = 0.; l_shipmode = "AIR"; l_shipinstruct = "DELIVER IN PERSON" }]
let revenues = (let __res0 = ref [] in
  List.iter (fun (l : record2) ->
    List.iter (fun (p : record1) ->
      if (p.p_partkey = l.l_partkey) then (
        if ((List.mem ((((((((((p.p_brand = "Brand#12")) && ((List.mem p.p_container ["SM CASE";"SM BOX";"SM PACK";"SM PKG"]))) && (((l.l_quantity >= 1) && (l.l_quantity <= 11)))) && (((p.p_size >= 1) && (p.p_size <= 5))))) || ((((((p.p_brand = "Brand#23")) && ((List.mem p.p_container ["MED BAG";"MED BOX";"MED PKG";"MED PACK"]))) && (((l.l_quantity >= 10) && (l.l_quantity <= 20)))) && (((p.p_size >= 1) && (p.p_size <= 10)))))) || ((((((p.p_brand = "Brand#34")) && ((List.mem p.p_container ["LG CASE";"LG BOX";"LG PACK";"LG PKG"]))) && (((l.l_quantity >= 20) && (l.l_quantity <= 30)))) && (((p.p_size >= 1) && (p.p_size <= 15))))))) && l.l_shipmode) ["AIR";"AIR REG"]) && (l.l_shipinstruct = "DELIVER IN PERSON")) then __res0 := (l.l_extendedprice *. ((1 -. l.l_discount))) :: !__res0;
      )
    ) part;
  ) lineitem;
  List.rev !__res0)

let result : float = (float_of_int (sum revenues))

let () =
  _json result;
  assert ((result = 2800.))
