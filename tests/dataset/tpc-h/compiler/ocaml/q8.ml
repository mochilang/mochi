(* Generated by Mochi compiler v0.10.25 on 2025-07-13T17:51:26Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable r_regionkey : int; mutable r_name : string }
type record2 = { mutable n_nationkey : int; mutable n_regionkey : int; mutable n_name : string }
type record3 = { mutable c_custkey : int; mutable c_nationkey : int }
type record4 = { mutable o_orderkey : int; mutable o_custkey : int; mutable o_orderdate : string }
type record5 = { mutable l_orderkey : int; mutable l_suppkey : int; mutable l_partkey : int; mutable l_extendedprice : float; mutable l_discount : float }
type record6 = { mutable s_suppkey : int }
type record7 = { mutable p_partkey : int; mutable p_type : string }
type record8 = { mutable o_year : Obj.t; mutable mkt_share : float }
type record9 = { mutable o_year : string; mutable mkt_share : float }
type record10 = { mutable o_year : string; mutable mkt_share : Obj.t }

let region : record1 list = [{ r_regionkey = 0; r_name = "AMERICA" }]
let nation : record2 list = [{ n_nationkey = 10; n_regionkey = 0; n_name = "BRAZIL" };{ n_nationkey = 20; n_regionkey = 0; n_name = "CANADA" }]
let customer : record3 list = [{ c_custkey = 1; c_nationkey = 10 };{ c_custkey = 2; c_nationkey = 20 }]
let orders : record4 list = [{ o_orderkey = 100; o_custkey = 1; o_orderdate = "1995-04-10" };{ o_orderkey = 200; o_custkey = 2; o_orderdate = "1995-07-15" }]
let lineitem : record5 list = [{ l_orderkey = 100; l_suppkey = 1000; l_partkey = 5000; l_extendedprice = 1000.; l_discount = 0.1 };{ l_orderkey = 200; l_suppkey = 2000; l_partkey = 5000; l_extendedprice = 500.; l_discount = 0.05 }]
let supplier : record6 list = [[("s_suppkey",Obj.repr (1000))];[("s_suppkey",Obj.repr (2000))]]
let part : record7 list = [{ p_partkey = 5000; p_type = "ECONOMY ANODIZED STEEL" };{ p_partkey = 6000; p_type = "SMALL BRASS" }]
let start_date : string = "1995-01-01"
let end_date : string = "1996-12-31"
let target_type : string = "ECONOMY ANODIZED STEEL"
let target_nation : string = "BRAZIL"
let result : record9 list = (let (__groups0 : (string * record5 list) list ref) = ref [] in
  List.iter (fun (l : record5) ->
      List.iter (fun (p : record7) ->
            List.iter (fun s ->
                    List.iter (fun (o : record4) ->
                              List.iter (fun (c : record3) ->
                                          List.iter (fun (n : record2) ->
                                                        List.iter (fun (r : record1) ->
                                                                                    if (p.p_partkey = l.l_partkey) && (Obj.obj (List.assoc "s_suppkey" s) = l.l_suppkey) && (o.o_orderkey = l.l_orderkey) && (c.c_custkey = o.o_custkey) && (n.n_nationkey = c.c_nationkey) && (r.r_regionkey = n.n_regionkey) && (((((p.p_type = target_type) && (o.o_orderdate >= start_date)) && (o.o_orderdate <= end_date)) && (r.r_name = "AMERICA"))) then (
                  let (key : string) = String.sub o.o_orderdate 0 (4 - 0) in
                  let cur = try List.assoc key !__groups0 with Not_found -> [] in
                  __groups0 := (key, l :: cur) :: List.remove_assoc key !__groups0);
                                                        ) region;
                                          ) nation;
                              ) customer;
                    ) orders;
            ) supplier;
      ) part;
  ) lineitem;
  let __res0 = ref [] in
  List.iter (fun ((yearKey : string), yearItems) ->
    let year = { key = yearKey; items = List.rev yearItems } in
    __res0 := { o_year = year.key; mkt_share = ((sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := (match (x.n.n_name = target_nation) with | true -> (x.l.l_extendedprice * ((1 - x.l.l_discount))) | _ -> 0) :: !__res1;
  ) year.items;
List.rev !__res1)
) /. (sum_float (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := (x.l.l_extendedprice * ((1 - x.l.l_discount))) :: !__res2;
  ) year.items;
List.rev !__res2)
)) } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  let numerator : float = (1000. *. 0.9) in
  let denominator = (numerator +. ((500. *. 0.95))) in
  let share = (numerator / denominator) in
  assert ((result = [{ o_year = "1995"; mkt_share = share }]))
