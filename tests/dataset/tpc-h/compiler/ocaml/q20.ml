(* Generated by Mochi compiler v0.10.28 on 2025-07-18T03:21:55Z *)
let sum lst = List.fold_left (+) 0 lst
type ('k,'v) group = { key : 'k; items : 'v list }
let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let _json v = print_endline (__to_json v)


type record1 = { mutable n_nationkey : int; mutable n_name : string }
type record2 = { mutable s_suppkey : int; mutable s_name : string; mutable s_address : string; mutable s_nationkey : int }
type record3 = { mutable p_partkey : int; mutable p_name : string }
type record4 = { mutable ps_partkey : int; mutable ps_suppkey : int; mutable ps_availqty : int }
type record5 = { mutable l_partkey : int; mutable l_suppkey : int; mutable l_quantity : int; mutable l_shipdate : string }
type record6 = { mutable partkey : int; mutable suppkey : int }
type record7 = { mutable partkey : Obj.t; mutable suppkey : Obj.t; mutable qty : float }
type record8 = { mutable partkey : int; mutable suppkey : int; mutable qty : float }
type record9 = { mutable s_name : string; mutable s_address : string }

let nation : record1 list = [{ n_nationkey = 1; n_name = "CANADA" };{ n_nationkey = 2; n_name = "GERMANY" }]
let supplier : record2 list = [{ s_suppkey = 100; s_name = "Maple Supply"; s_address = "123 Forest Lane"; s_nationkey = 1 };{ s_suppkey = 200; s_name = "Berlin Metals"; s_address = "456 Iron Str"; s_nationkey = 2 }]
let part : record3 list = [{ p_partkey = 10; p_name = "forest glade bricks" };{ p_partkey = 20; p_name = "desert sand paper" }]
let partsupp : record4 list = [{ ps_partkey = 10; ps_suppkey = 100; ps_availqty = 100 };{ ps_partkey = 20; ps_suppkey = 200; ps_availqty = 30 }]
let lineitem : record5 list = [{ l_partkey = 10; l_suppkey = 100; l_quantity = 100; l_shipdate = "1994-05-15" };{ l_partkey = 10; l_suppkey = 100; l_quantity = 50; l_shipdate = "1995-01-01" }]
let prefix : string = "forest"
let shipped_94 : record8 list = (let (__groups0 : (record6 * record5 list) list ref) = ref [] in
  List.iter (fun (l : record5) ->
      if ((l.l_shipdate >= "1994-01-01") && (l.l_shipdate < "1995-01-01")) then (
      let (key : record6) = { partkey = l.l_partkey; suppkey = l.l_suppkey } in
      let cur = try List.assoc key !__groups0 with Not_found -> [] in
      __groups0 := (key, l :: cur) :: List.remove_assoc key !__groups0);
  ) lineitem;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record6), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { partkey = g.key.partkey; suppkey = g.key.suppkey; qty = (float_of_int (sum (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.l_quantity :: !__res1;
  ) g.items;
List.rev !__res1)
)) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let target_partkeys : int list = (let __res2 = ref [] in
  List.iter (fun (ps : record4) ->
      List.iter (fun (p : record3) ->
            List.iter (fun (s : record8) ->
                        if (ps.ps_partkey = p.p_partkey) && ((ps.ps_partkey = s.partkey) && (ps.ps_suppkey = s.suppkey)) && ((String.sub p.p_name 0 (List.length prefix - 0) = prefix) && (ps.ps_availqty > ((0.5 *. s.qty)))) then
        __res2 := ps.ps_suppkey :: !__res2;
            ) shipped_94;
      ) part;
  ) partsupp;
List.rev !__res2)

let result : record9 list = (let __res3 = ref [] in
  List.iter (fun (s : record2) ->
    List.iter (fun (n : record1) ->
      if (n.n_nationkey = s.s_nationkey) then (
        if ((List.mem s.s_suppkey target_partkeys) && (n.n_name = "CANADA")) then __res3 := { s_name = s.s_name; s_address = s.s_address } :: !__res3;
      )
    ) nation;
  ) supplier;
  List.rev !__res3)


let () =
  _json result;
  assert ((result = [{ s_name = "Maple Supply"; s_address = "123 Forest Lane" }]))
