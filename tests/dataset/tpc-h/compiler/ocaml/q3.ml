(* Generated by Mochi compiler v0.10.25 on 2025-07-13T14:10:59Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable c_custkey : int; mutable c_mktsegment : string }
type record2 = { mutable o_orderkey : int; mutable o_custkey : int; mutable o_orderdate : string; mutable o_shippriority : int }
type record3 = { mutable l_orderkey : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_shipdate : string }
type record4 = { mutable o_orderkey : int; mutable o_orderdate : string; mutable o_shippriority : int }
type record5 = { mutable l_orderkey : Obj.t; mutable revenue : float; mutable o_orderdate : Obj.t; mutable o_shippriority : Obj.t }
type record6 = { mutable l_orderkey : int; mutable revenue : float; mutable o_orderdate : string; mutable o_shippriority : int }

let customer : record1 list = [{ c_custkey = 1; c_mktsegment = "BUILDING" };{ c_custkey = 2; c_mktsegment = "AUTOMOBILE" }]
let orders : record2 list = [{ o_orderkey = 100; o_custkey = 1; o_orderdate = "1995-03-14"; o_shippriority = 1 };{ o_orderkey = 200; o_custkey = 2; o_orderdate = "1995-03-10"; o_shippriority = 2 }]
let lineitem : record3 list = [{ l_orderkey = 100; l_extendedprice = 1000.; l_discount = 0.05; l_shipdate = "1995-03-16" };{ l_orderkey = 100; l_extendedprice = 500.; l_discount = 0.; l_shipdate = "1995-03-20" };{ l_orderkey = 200; l_extendedprice = 1000.; l_discount = 0.1; l_shipdate = "1995-03-14" }]
let cutoff : string = "1995-03-15"
let segment : string = "BUILDING"
let building_customers : record1 list = (let __res0 = ref [] in
  List.iter (fun (c : record1) ->
      if (c.c_mktsegment = segment) then
    __res0 := c :: !__res0;
  ) customer;
List.rev !__res0)

let valid_orders : record2 list = (let __res1 = ref [] in
  List.iter (fun o ->
    List.iter (fun c ->
      if (o.o_custkey = c.c_custkey) then (
        if (o.o_orderdate < cutoff) then __res1 := o :: !__res1;
      )
    ) building_customers;
  ) orders;
  List.rev !__res1)

let valid_lineitems : record3 list = (let __res2 = ref [] in
  List.iter (fun (l : record3) ->
      if (l.l_shipdate > cutoff) then
    __res2 := l :: !__res2;
  ) lineitem;
List.rev !__res2)

let order_line_join : record6 list = (let (__groups3 : (record4 * record2 list) list ref) = ref [] in
  List.iter (fun (o : record2) ->
      List.iter (fun (l : record3) ->
              if (l.l_orderkey = o.o_orderkey) then (
        let (key : record4) = { o_orderkey = o.o_orderkey; o_orderdate = o.o_orderdate; o_shippriority = o.o_shippriority } in
        let cur = try List.assoc key !__groups3 with Not_found -> [] in
        __groups3 := (key, o :: cur) :: List.remove_assoc key !__groups3);
      ) valid_lineitems;
  ) valid_orders;
  let __res3 = ref [] in
  List.iter (fun ((gKey : record4), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res3 := { l_orderkey = g.key.o_orderkey; revenue = (sum (let __res4 = ref [] in
  List.iter (fun r ->
      __res4 := (r.l.l_extendedprice * ((1 - r.l.l_discount))) :: !__res4;
  ) g.items;
List.rev !__res4)
); o_orderdate = g.key.o_orderdate; o_shippriority = g.key.o_shippriority } :: !__res3
  ) !__groups3;
  List.rev !__res3)


let () =
  json order_line_join;
  assert ((order_line_join = [{ l_orderkey = 100; revenue = ((1000. *. 0.95) +. 500.); o_orderdate = "1995-03-14"; o_shippriority = 1 }]))
