(* Generated by Mochi compiler v0.10.25 on 2025-07-13T16:59:05Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable n_nationkey : int; mutable n_name : string }
type record2 = { mutable c_custkey : int; mutable c_name : string; mutable c_acctbal : float; mutable c_nationkey : int; mutable c_address : string; mutable c_phone : string; mutable c_comment : string }
type record3 = { mutable o_orderkey : int; mutable o_custkey : int }
type record4 = { mutable l_orderkey : int; mutable l_quantity : int; mutable l_extendedprice : float; mutable l_discount : float }
type record5 = { mutable c_name : string; mutable c_custkey : int; mutable c_acctbal : float; mutable c_address : string; mutable c_phone : string; mutable c_comment : string; mutable n_name : string }
type record6 = { mutable c_name : Obj.t; mutable c_custkey : Obj.t; mutable revenue : float; mutable c_acctbal : Obj.t; mutable n_name : Obj.t; mutable c_address : Obj.t; mutable c_phone : Obj.t; mutable c_comment : Obj.t }
type record7 = { mutable c_name : string; mutable c_custkey : int; mutable revenue : float; mutable c_acctbal : float; mutable n_name : string; mutable c_address : string; mutable c_phone : string; mutable c_comment : string }

let nation : record1 list = [{ n_nationkey = 1; n_name = "GERMANY" }]
let customer : record2 list = [{ c_custkey = 1; c_name = "Alice"; c_acctbal = 1000.; c_nationkey = 1; c_address = "123 Market St"; c_phone = "123-456"; c_comment = "Premium client" };{ c_custkey = 2; c_name = "Bob"; c_acctbal = 200.; c_nationkey = 1; c_address = "456 Side St"; c_phone = "987-654"; c_comment = "Frequent returns" }]
let orders : record3 list = [{ o_orderkey = 100; o_custkey = 1 };{ o_orderkey = 200; o_custkey = 1 };{ o_orderkey = 300; o_custkey = 2 }]
let lineitem : record4 list = [{ l_orderkey = 100; l_quantity = 150; l_extendedprice = 1000.; l_discount = 0.1 };{ l_orderkey = 200; l_quantity = 100; l_extendedprice = 800.; l_discount = 0. };{ l_orderkey = 300; l_quantity = 30; l_extendedprice = 300.; l_discount = 0.05 }]
let threshold : int = 200
let result : record7 list = (let (__groups0 : (record5 * record2 list) list ref) = ref [] in
  List.iter (fun (c : record2) ->
      List.iter (fun (o : record3) ->
            List.iter (fun (l : record4) ->
                    List.iter (fun (n : record1) ->
                                    if (o.o_custkey = c.c_custkey) && (l.l_orderkey = o.o_orderkey) && (n.n_nationkey = c.c_nationkey) then (
            let (key : record5) = { c_name = c.c_name; c_custkey = c.c_custkey; c_acctbal = c.c_acctbal; c_address = c.c_address; c_phone = c.c_phone; c_comment = c.c_comment; n_name = n.n_name } in
            let cur = try List.assoc key !__groups0 with Not_found -> [] in
            __groups0 := (key, c :: cur) :: List.remove_assoc key !__groups0);
                    ) nation;
            ) lineitem;
      ) orders;
  ) customer;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record5), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { c_name = g.key.c_name; c_custkey = g.key.c_custkey; revenue = (sum (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := (x.l.l_extendedprice * ((1 - x.l.l_discount))) :: !__res1;
  ) g.items;
List.rev !__res1)
); c_acctbal = g.key.c_acctbal; n_name = g.key.n_name; c_address = g.key.c_address; c_phone = g.key.c_phone; c_comment = g.key.c_comment } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ c_name = "Alice"; c_custkey = 1; revenue = 1700.; c_acctbal = 1000.; n_name = "GERMANY"; c_address = "123 Market St"; c_phone = "123-456"; c_comment = "Premium client" }]))

