(* Generated by Mochi compiler v0.10.25 on 2025-07-13T17:51:26Z *)
let sum lst = List.fold_left (+) 0 lst
let sum_float lst = List.fold_left (+.) 0.0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable s_suppkey : int; mutable s_name : string; mutable s_address : string; mutable s_phone : string }
type record2 = { mutable l_suppkey : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_shipdate : string }
type record3 = { mutable supplier_no : Obj.t; mutable total_revenue : float }
type record4 = { mutable supplier_no : int; mutable total_revenue : float }
type record5 = { mutable s_suppkey : int; mutable s_name : string; mutable s_address : string; mutable s_phone : string; mutable total_revenue : float }
type record6 = { mutable s_suppkey : int; mutable s_name : string; mutable s_address : string; mutable s_phone : string; mutable total_revenue : Obj.t }

let supplier : record1 list = [{ s_suppkey = 100; s_name = "Best Supplier"; s_address = "123 Market St"; s_phone = "123-456" };{ s_suppkey = 200; s_name = "Second Supplier"; s_address = "456 Elm St"; s_phone = "987-654" }]
let lineitem : record2 list = [{ l_suppkey = 100; l_extendedprice = 1000.; l_discount = 0.1; l_shipdate = "1996-01-15" };{ l_suppkey = 100; l_extendedprice = 500.; l_discount = 0.; l_shipdate = "1996-03-20" };{ l_suppkey = 200; l_extendedprice = 800.; l_discount = 0.05; l_shipdate = "1995-12-30" }]
let start_date : string = "1996-01-01"
let end_date : string = "1996-04-01"
let revenue0 : record4 list = (let (__groups0 : (int * record2 list) list ref) = ref [] in
  List.iter (fun (l : record2) ->
      if ((l.l_shipdate >= start_date) && (l.l_shipdate < end_date)) then (
      let (key : int) = l.l_suppkey in
      let cur = try List.assoc key !__groups0 with Not_found -> [] in
      __groups0 := (key, l :: cur) :: List.remove_assoc key !__groups0);
  ) lineitem;
  let __res0 = ref [] in
  List.iter (fun ((gKey : int), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { supplier_no = g.key; total_revenue = (sum_float (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := (x.l_extendedprice *. ((1 -. x.l_discount))) :: !__res1;
  ) g.items;
List.rev !__res1)
) } :: !__res0
  ) !__groups0;
  List.rev !__res0)

let revenues : Obj.t list = (let __res2 = ref [] in
  List.iter (fun (x : record4) ->
      __res2 := x.total_revenue :: !__res2;
  ) revenue0;
List.rev !__res2)

let max_revenue = max revenues
let result : record5 list = (let __res3 = ref [] in
  List.iter (fun s ->
    List.iter (fun r ->
      if (s.s_suppkey = r.supplier_no) then (
        if (r.total_revenue = max_revenue) then __res3 := { s_suppkey = s.s_suppkey; s_name = s.s_name; s_address = s.s_address; s_phone = s.s_phone; total_revenue = r.total_revenue } :: !__res3;
      )
    ) revenue0;
  ) supplier;
  List.rev !__res3)


let () =
  json result;
  let rev : float = ((1000. *. 0.9) +. 500.) in
  assert ((result = [{ s_suppkey = 100; s_name = "Best Supplier"; s_address = "123 Market St"; s_phone = "123-456"; total_revenue = rev }]))
