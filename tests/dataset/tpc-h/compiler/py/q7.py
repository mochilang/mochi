# Generated by Mochi compiler v0.10.26 on 2025-07-15T08:18:42Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    supp_nation: str
    cust_nation: str
    l_year: str
    revenue: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    supp_nation: str
    cust_nation: str
    l_year: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Customer:
    c_custkey: int
    c_nationkey: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Lineitem:
    l_orderkey: int
    l_suppkey: int
    l_extendedprice: float
    l_discount: float
    l_shipdate: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: int
    n_name: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: int
    o_custkey: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: int
    s_nationkey: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year():
    assert result == [
        Auto1(supp_nation="FRANCE", cust_nation="GERMANY", l_year="1995", revenue=900.0)
    ]


nation = [
    Nation(n_nationkey=1, n_name="FRANCE"),
    Nation(n_nationkey=2, n_name="GERMANY"),
]
supplier = [Supplier(s_suppkey=100, s_nationkey=1)]
customer = [Customer(c_custkey=200, c_nationkey=2)]
orders = [Order(o_orderkey=1000, o_custkey=200)]
lineitem = [
    Lineitem(
        l_orderkey=1000,
        l_suppkey=100,
        l_extendedprice=1000.0,
        l_discount=0.1,
        l_shipdate="1995-06-15",
    ),
    Lineitem(
        l_orderkey=1000,
        l_suppkey=100,
        l_extendedprice=800.0,
        l_discount=0.05,
        l_shipdate="1997-01-01",
    ),
]
start_date = "1995-01-01"
end_date = "1996-12-31"
nation1 = "FRANCE"
nation2 = "GERMANY"


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [
            {"items": orders, "on": lambda l, o: o.o_orderkey == l.l_orderkey},
            {"items": customer, "on": lambda l, o, c: c.c_custkey == o.o_custkey},
            {"items": supplier, "on": lambda l, o, c, s: s.s_suppkey == l.l_suppkey},
            {
                "items": nation,
                "on": lambda l, o, c, s, n1: n1.n_nationkey == s.s_nationkey,
            },
            {
                "items": nation,
                "on": lambda l, o, c, s, n1, n2: n2.n_nationkey == c.c_nationkey,
            },
        ],
        {
            "select": lambda l, o, c, s, n1, n2: (l, o, c, s, n1, n2),
            "where": lambda l, o, c, s, n1, n2: (
                l.l_shipdate >= start_date and l.l_shipdate <= end_date
            )
            and (n1.n_name == nation1 and n2.n_name == nation2)
            or (n1.n_name == nation2 and n2.n_name == nation1),
        },
    )
    _groups = _group_by(
        _rows,
        lambda l, o, c, s, n1, n2: Auto2(
            supp_nation=n1.n_name, cust_nation=n2.n_name, l_year=l.l_shipdate[0:4]
        ),
    )
    _items1 = _groups
    _items1 = sorted(
        _items1,
        key=lambda g: _sort_key([g.key.supp_nation, g.key.cust_nation, g.key.l_year]),
    )
    return [
        Auto1(
            supp_nation=g.key.supp_nation,
            cust_nation=g.key.cust_nation,
            l_year=g.key.l_year,
            revenue=_sum([x[0].l_extendedprice * (1 - x[0].l_discount) for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q7_computes_revenue_between_FRANCE_and_GERMANY_by_year()
