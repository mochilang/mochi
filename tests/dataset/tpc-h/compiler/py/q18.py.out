# Generated by Mochi Python compiler
from __future__ import annotations
import json
import typing
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q18_returns_large_volume_customers_with_total_quantity___200():
    assert result == [
        {
            "c_name": "Alice",
            "c_custkey": 1,
            "revenue": 1700,
            "c_acctbal": 1000,
            "n_name": "GERMANY",
            "c_address": "123 Market St",
            "c_phone": "123-456",
            "c_comment": "Premium client",
        }
    ]


nation: list[dict[str, typing.Any]] = [{"n_nationkey": 1, "n_name": "GERMANY"}]
customer: list[dict[str, typing.Any]] = [
    {
        "c_custkey": 1,
        "c_name": "Alice",
        "c_acctbal": 1000,
        "c_nationkey": 1,
        "c_address": "123 Market St",
        "c_phone": "123-456",
        "c_comment": "Premium client",
    },
    {
        "c_custkey": 2,
        "c_name": "Bob",
        "c_acctbal": 200,
        "c_nationkey": 1,
        "c_address": "456 Side St",
        "c_phone": "987-654",
        "c_comment": "Frequent returns",
    },
]
orders: list[dict[str, int]] = [
    {"o_orderkey": 100, "o_custkey": 1},
    {"o_orderkey": 200, "o_custkey": 1},
    {"o_orderkey": 300, "o_custkey": 2},
]
lineitem: list[dict[str, typing.Any]] = [
    {"l_orderkey": 100, "l_quantity": 150, "l_extendedprice": 1000, "l_discount": 0.1},
    {"l_orderkey": 200, "l_quantity": 100, "l_extendedprice": 800, "l_discount": 0},
    {"l_orderkey": 300, "l_quantity": 30, "l_extendedprice": 300, "l_discount": 0.05},
]
threshold: int = 200


def _q0():
    _src = customer
    _rows = _query(
        _src,
        [
            {"items": orders, "on": lambda c, o: o["o_custkey"] == c["c_custkey"]},
            {
                "items": lineitem,
                "on": lambda c, o, l: l["l_orderkey"] == o["o_orderkey"],
            },
            {
                "items": nation,
                "on": lambda c, o, l, n: n["n_nationkey"] == c["c_nationkey"],
            },
        ],
        {"select": lambda c, o, l, n: (c, o, l, n)},
    )
    _groups = _group_by(
        _rows,
        lambda c, o, l, n: {
            "c_name": c["c_name"],
            "c_custkey": c["c_custkey"],
            "c_acctbal": c["c_acctbal"],
            "c_address": c["c_address"],
            "c_phone": c["c_phone"],
            "c_comment": c["c_comment"],
            "n_name": n["n_name"],
        },
    )
    _items1 = _groups
    _items1 = [g for g in _items1 if _sum([x[2]["l_quantity"] for x in g]) > threshold]
    _items1 = sorted(
        _items1,
        key=lambda g: _sort_key(
            -_sum([x[2]["l_extendedprice"] * (1 - x[2]["l_discount"]) for x in g])
        ),
    )
    return [
        {
            "c_name": _get(_get(g, "key"), "c_name"),
            "c_custkey": _get(_get(g, "key"), "c_custkey"),
            "revenue": _sum(
                [x[2]["l_extendedprice"] * (1 - x[2]["l_discount"]) for x in g]
            ),
            "c_acctbal": _get(_get(g, "key"), "c_acctbal"),
            "n_name": _get(_get(g, "key"), "n_name"),
            "c_address": _get(_get(g, "key"), "c_address"),
            "c_phone": _get(_get(g, "key"), "c_phone"),
            "c_comment": _get(_get(g, "key"), "c_comment"),
        }
        for g in _items1
    ]


result: list[dict[str, typing.Any]] = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q18_returns_large_volume_customers_with_total_quantity___200()
