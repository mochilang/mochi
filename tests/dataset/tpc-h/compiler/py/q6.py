# Generated by Mochi compiler v0.10.25 on 2025-07-13T06:12:03Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_extendedprice: object
    l_discount: object
    l_shipdate: object
    l_quantity: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q6_calculates_revenue_from_qualified_lineitems():
    assert result == 1000.0 * 0.06 + 500.0 * 0.07


lineitem = [
    Lineitem(
        l_extendedprice=1000.0, l_discount=0.06, l_shipdate="1994-02-15", l_quantity=10
    ),
    Lineitem(
        l_extendedprice=500.0, l_discount=0.07, l_shipdate="1994-03-10", l_quantity=23
    ),
    Lineitem(
        l_extendedprice=400.0, l_discount=0.04, l_shipdate="1994-04-10", l_quantity=15
    ),
    Lineitem(
        l_extendedprice=200.0, l_discount=0.06, l_shipdate="1995-01-01", l_quantity=5
    ),
]
result = sum(
    [
        _get(l, "l_extendedprice") * _get(l, "l_discount")
        for l in lineitem
        if (
            (
                (l["l_shipdate"] >= "1994-01-01" and l["l_shipdate"] < "1995-01-01")
                and l["l_discount"] >= 0.05
            )
            and l["l_discount"] <= 0.07
        )
        and l["l_quantity"] < 24
    ]
)
print(json.dumps(result, default=lambda o: vars(o)))
test_Q6_calculates_revenue_from_qualified_lineitems()
