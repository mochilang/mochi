# Generated by Mochi compiler v0.10.25 on 2025-07-14T07:14:19Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ps_partkey: int
    value: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: int
    n_name: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Partsupp:
    ps_partkey: int
    ps_suppkey: int
    ps_supplycost: float
    ps_availqty: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: int
    s_nationkey: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q11_returns_high_value_partkeys_from_GERMANY():
    assert result == [
        Auto1(ps_partkey=1000, value=2000.0),
        Auto1(ps_partkey=2000, value=50.0),
    ]


nation: list[Nation] = [
    Nation(n_nationkey=1, n_name="GERMANY"),
    Nation(n_nationkey=2, n_name="FRANCE"),
]
supplier: list[Supplier] = [
    Supplier(s_suppkey=100, s_nationkey=1),
    Supplier(s_suppkey=200, s_nationkey=1),
    Supplier(s_suppkey=300, s_nationkey=2),
]
partsupp: list[Partsupp] = [
    Partsupp(ps_partkey=1000, ps_suppkey=100, ps_supplycost=10.0, ps_availqty=100),
    Partsupp(ps_partkey=1000, ps_suppkey=200, ps_supplycost=20.0, ps_availqty=50),
    Partsupp(ps_partkey=2000, ps_suppkey=100, ps_supplycost=5.0, ps_availqty=10),
    Partsupp(ps_partkey=3000, ps_suppkey=300, ps_supplycost=8.0, ps_availqty=500),
]
target_nation: str = "GERMANY"
filtered: list[Auto1] = _query(
    partsupp,
    [
        {"items": supplier, "on": lambda ps, s: s.s_suppkey == ps.ps_suppkey},
        {"items": nation, "on": lambda ps, s, n: n.n_nationkey == s.s_nationkey},
    ],
    {
        "select": lambda ps, s, n: Auto1(
            ps_partkey=ps.ps_partkey, value=ps.ps_supplycost * ps.ps_availqty
        ),
        "where": lambda ps, s, n: n.n_name == target_nation,
    },
)


def _q0():
    _src = filtered
    _rows = _query(_src, [], {"select": lambda x: x})
    _groups = _group_by(_rows, lambda x: x.ps_partkey)
    _items1 = _groups
    return [Auto1(ps_partkey=g.key, value=_sum([r.value for r in g])) for g in _items1]


grouped: list[Auto1] = _q0()
total: float = sum([x.value for x in filtered])
threshold: float = total * 0.0001
result: list[dict[str, object]] = [
    x
    for x in sorted(
        [x for x in grouped if x.value > threshold], key=lambda x: _sort_key(-x.value)
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q11_returns_high_value_partkeys_from_GERMANY()
