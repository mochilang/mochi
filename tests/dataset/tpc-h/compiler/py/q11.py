# Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ps_partkey: int
    value: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: int
    n_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Partsupp:
    ps_partkey: int
    ps_suppkey: int
    ps_supplycost: float
    ps_availqty: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: int
    s_nationkey: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q11_returns_high_value_partkeys_from_GERMANY():
    assert result == [
        Auto1(ps_partkey=1000, value=2000.0),
        Auto1(ps_partkey=2000, value=50.0),
    ]


nation = [
    Nation(n_nationkey=1, n_name="GERMANY"),
    Nation(n_nationkey=2, n_name="FRANCE"),
]
supplier = [
    Supplier(s_suppkey=100, s_nationkey=1),
    Supplier(s_suppkey=200, s_nationkey=1),
    Supplier(s_suppkey=300, s_nationkey=2),
]
partsupp = [
    Partsupp(ps_partkey=1000, ps_suppkey=100, ps_supplycost=10.0, ps_availqty=100),
    Partsupp(ps_partkey=1000, ps_suppkey=200, ps_supplycost=20.0, ps_availqty=50),
    Partsupp(ps_partkey=2000, ps_suppkey=100, ps_supplycost=5.0, ps_availqty=10),
    Partsupp(ps_partkey=3000, ps_suppkey=300, ps_supplycost=8.0, ps_availqty=500),
]
target_nation = "GERMANY"
filtered = _query(
    partsupp,
    [
        {"items": supplier, "on": lambda ps, s: s.s_suppkey == ps.ps_suppkey},
        {"items": nation, "on": lambda ps, s, n: n.n_nationkey == s.s_nationkey},
    ],
    {
        "select": lambda ps, s, n: Auto1(
            ps_partkey=ps.ps_partkey, value=ps.ps_supplycost * ps.ps_availqty
        ),
        "where": lambda ps, s, n: n.n_name == target_nation,
    },
)


def _q0():
    _groups = {}
    _order = []
    for x in filtered:
        _k = x.ps_partkey
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(x)
    _items1 = [_groups[k] for k in _order]
    return [Auto1(ps_partkey=g.key, value=sum([r.value for r in g])) for g in _items1]


grouped = _q0()
total = sum([x.value for x in filtered])
threshold = total * 0.0001
result = [
    x
    for x in sorted([x for x in grouped if x.value > threshold], key=lambda x: -x.value)
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q11_returns_high_value_partkeys_from_GERMANY()
