# Generated by Mochi compiler v0.10.26 on 2025-07-15T08:18:53Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    cntrycode: str
    numcust: int
    totacctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    cntrycode: str
    c_acctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Customer:
    c_custkey: int
    c_phone: str
    c_acctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: int
    o_custkey: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q22_returns_wealthy_inactive_customers_by_phone_prefix():
    assert result == [
        Auto1(cntrycode="13", numcust=1, totacctbal=600.0),
        Auto1(cntrycode="30", numcust=1, totacctbal=700.0),
    ]


customer = [
    Customer(c_custkey=1, c_phone="13-123-4567", c_acctbal=600.0),
    Customer(c_custkey=2, c_phone="31-456-7890", c_acctbal=100.0),
    Customer(c_custkey=3, c_phone="30-000-0000", c_acctbal=700.0),
]
orders = [Order(o_orderkey=10, o_custkey=2)]
valid_codes = ["13", "31", "23", "29", "30", "18", "17"]
avg_balance = (
    sum(
        [
            c.c_acctbal
            for c in customer
            if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
        ]
    )
    / len(
        [
            c.c_acctbal
            for c in customer
            if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
        ]
    )
    if [
        c.c_acctbal
        for c in customer
        if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
    ]
    else 0
)
eligible_customers = [
    Auto2(cntrycode=c.c_phone[0:2], c_acctbal=c.c_acctbal)
    for c in customer
    if (c.c_phone[0:2] in valid_codes and c.c_acctbal > avg_balance)
    and (not len([o for o in orders if o.o_custkey == c.c_custkey]) > 0)
]


def _q0():
    _groups = {}
    _order = []
    for c in eligible_customers:
        _k = c.cntrycode
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(c)
    _items1 = [_groups[k] for k in _order]
    return [g for g in _items1]


groups = _q0()
tmp = []
for g in groups:
    total = _sum([x["c_acctbal"] for x in g.Items])
    row = Auto1(cntrycode=g.key, numcust=len(g), totacctbal=total)
    tmp = tmp + [row]
result = [
    r
    for r in sorted(
        [r for r in tmp],
        key=lambda r: _sort_key(
            r.get("cntrycode") if isinstance(r, dict) else getattr(r, "cntrycode")
        ),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q22_returns_wealthy_inactive_customers_by_phone_prefix()
