# Generated by Mochi compiler v0.10.25 on 2025-07-14T07:14:28Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    cntrycode: str
    numcust: int
    totacctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    cntrycode: str
    c_acctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Customer:
    c_custkey: int
    c_phone: str
    c_acctbal: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: int
    o_custkey: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q22_returns_wealthy_inactive_customers_by_phone_prefix():
    assert result == [
        Auto1(cntrycode="13", numcust=1, totacctbal=600.0),
        Auto1(cntrycode="30", numcust=1, totacctbal=700.0),
    ]


customer: list[Customer] = [
    Customer(c_custkey=1, c_phone="13-123-4567", c_acctbal=600.0),
    Customer(c_custkey=2, c_phone="31-456-7890", c_acctbal=100.0),
    Customer(c_custkey=3, c_phone="30-000-0000", c_acctbal=700.0),
]
orders: list[Order] = [Order(o_orderkey=10, o_custkey=2)]
valid_codes: list[str] = ["13", "31", "23", "29", "30", "18", "17"]
avg_balance: float = (
    sum(
        [
            c.c_acctbal
            for c in customer
            if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
        ]
    )
    / len(
        [
            c.c_acctbal
            for c in customer
            if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
        ]
    )
    if [
        c.c_acctbal
        for c in customer
        if c.c_acctbal > 0.0 and c.c_phone[0:2] in valid_codes
    ]
    else 0
)
eligible_customers: list[Auto2] = [
    Auto2(cntrycode=c.c_phone[0:2], c_acctbal=c.c_acctbal)
    for c in customer
    if (c.c_phone[0:2] in valid_codes and c.c_acctbal > avg_balance)
    and (not len([o for o in orders if o.o_custkey == c.c_custkey]) > 0)
]


def _q0():
    _src = eligible_customers
    _rows = _query(_src, [], {"select": lambda c: c})
    _groups = _group_by(_rows, lambda c: c.cntrycode)
    _items1 = _groups
    return [g for g in _items1]


groups: list[_Group[Any, dict[str, str]]] = _q0()
tmp: list[object] = []
for g in groups:
    total: float = _sum([x["c_acctbal"] for x in g.Items])
    row: Auto1 = Auto1(cntrycode=g.key, numcust=len(g), totacctbal=total)
    tmp = tmp + [row]
result: list[object] = [
    r for r in sorted([r for r in tmp], key=lambda r: _sort_key(_get(r, "cntrycode")))
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q22_returns_wealthy_inactive_customers_by_phone_prefix()
