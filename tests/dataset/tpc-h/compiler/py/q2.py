# Generated by Mochi compiler v0.10.25 on 2025-07-13T05:04:53Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Nation:
    n_nationkey: object
    n_regionkey: object
    n_name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Part:
    p_partkey: object
    p_type: object
    p_size: object
    p_mfgr: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Partsupp:
    ps_partkey: object
    ps_suppkey: object
    ps_supplycost: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Region:
    r_regionkey: object
    r_name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: object
    s_name: object
    s_address: object
    s_nationkey: object
    s_phone: object
    s_acctbal: object
    s_comment: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part():
    assert result == [
        {
            "s_acctbal": 1000.0,
            "s_name": "BestSupplier",
            "n_name": "FRANCE",
            "p_partkey": 1000,
            "p_mfgr": "M1",
            "s_address": "123 Rue",
            "s_phone": "123",
            "s_comment": "Fast and reliable",
            "ps_supplycost": 10.0,
        }
    ]


region = [Region(r_regionkey=1, r_name="EUROPE"), Region(r_regionkey=2, r_name="ASIA")]
nation = [
    Nation(n_nationkey=10, n_regionkey=1, n_name="FRANCE"),
    Nation(n_nationkey=20, n_regionkey=2, n_name="CHINA"),
]
supplier = [
    Supplier(
        s_suppkey=100,
        s_name="BestSupplier",
        s_address="123 Rue",
        s_nationkey=10,
        s_phone="123",
        s_acctbal=1000.0,
        s_comment="Fast and reliable",
    ),
    Supplier(
        s_suppkey=200,
        s_name="AltSupplier",
        s_address="456 Way",
        s_nationkey=20,
        s_phone="456",
        s_acctbal=500.0,
        s_comment="Slow",
    ),
]
part = [
    Part(p_partkey=1000, p_type="LARGE BRASS", p_size=15, p_mfgr="M1"),
    Part(p_partkey=2000, p_type="SMALL COPPER", p_size=15, p_mfgr="M2"),
]
partsupp = [
    Partsupp(ps_partkey=1000, ps_suppkey=100, ps_supplycost=10.0),
    Partsupp(ps_partkey=1000, ps_suppkey=200, ps_supplycost=15.0),
]
europe_nations = _query(
    region,
    [{"items": nation, "on": lambda r, n: n["n_regionkey"] == r["r_regionkey"]}],
    {"select": lambda r, n: n, "where": lambda r, n: r["r_name"] == "EUROPE"},
)
europe_suppliers = _query(
    supplier,
    [
        {
            "items": europe_nations,
            "on": lambda s, n: s["s_nationkey"] == n["n_nationkey"],
        }
    ],
    {"select": lambda s, n: {"s": s, "n": n}},
)
target_parts = [p for p in part if p["p_size"] == 15 and p["p_type"] == "LARGE BRASS"]
target_partsupp = _query(
    partsupp,
    [
        {"items": target_parts, "on": lambda ps, p: ps["ps_partkey"] == p["p_partkey"]},
        {
            "items": europe_suppliers,
            "on": lambda ps, p, s: ps["ps_suppkey"] == s["s"]["s_suppkey"],
        },
    ],
    {
        "select": lambda ps, p, s: {
            "s_acctbal": s["s"]["s_acctbal"],
            "s_name": s["s"]["s_name"],
            "n_name": s["n"]["n_name"],
            "p_partkey": p["p_partkey"],
            "p_mfgr": p["p_mfgr"],
            "s_address": s["s"]["s_address"],
            "s_phone": s["s"]["s_phone"],
            "s_comment": s["s"]["s_comment"],
            "ps_supplycost": ps["ps_supplycost"],
        }
    },
)
costs = [x["ps_supplycost"] for x in target_partsupp]
min_cost = _min(costs)
result = [
    x
    for x in sorted(
        [x for x in target_partsupp if x["ps_supplycost"] == min_cost],
        key=lambda x: _sort_key(-x["s_acctbal"]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
