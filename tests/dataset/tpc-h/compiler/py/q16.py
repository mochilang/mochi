# Generated by Mochi compiler v0.10.25 on 2025-07-13T06:12:11Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Part:
    p_partkey: object
    p_brand: object
    p_type: object
    p_size: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Partsupp:
    ps_partkey: object
    ps_suppkey: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: object
    s_name: object
    s_address: object
    s_comment: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints():
    assert result == []


supplier = [
    Supplier(
        s_suppkey=100,
        s_name="AlphaSupply",
        s_address="123 Hilltop",
        s_comment="Reliable and efficient",
    ),
    Supplier(
        s_suppkey=200,
        s_name="BetaSupply",
        s_address="456 Riverside",
        s_comment="Known for Customer Complaints",
    ),
]
part = [
    Part(p_partkey=1, p_brand="Brand#12", p_type="SMALL ANODIZED", p_size=5),
    Part(p_partkey=2, p_brand="Brand#23", p_type="MEDIUM POLISHED", p_size=10),
]
partsupp = [
    Partsupp(ps_partkey=1, ps_suppkey=100),
    Partsupp(ps_partkey=2, ps_suppkey=200),
]
excluded_suppliers = _query(
    partsupp,
    [{"items": part, "on": lambda ps, p: p["p_partkey"] == ps["ps_partkey"]}],
    {
        "select": lambda ps, p: ps["ps_suppkey"],
        "where": lambda ps, p: (p["p_brand"] == "Brand#12" and "SMALL" in p["p_type"])
        and p["p_size"] == 5,
    },
)
result = [
    {"s_name": s["s_name"], "s_address": s["s_address"]}
    for s in sorted(
        [
            s
            for s in supplier
            if (
                not s["s_suppkey"] in excluded_suppliers
                and (not "Customer" in s["s_comment"])
            )
            and (not "Complaints" in s["s_comment"])
        ],
        key=lambda s: _sort_key(s["s_name"]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q16_returns_suppliers_not_linked_to_certain_parts_or_complaints()
