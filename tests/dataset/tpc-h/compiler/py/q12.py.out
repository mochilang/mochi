# Generated by Mochi compiler v0.10.25 on 2025-07-13T05:03:51Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_orderkey: object
    l_shipmode: object
    l_commitdate: object
    l_receiptdate: object
    l_shipdate: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: object
    o_orderpriority: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q12_counts_lineitems_by_ship_mode_and_priority():
    assert result == [{"l_shipmode": "MAIL", "high_line_count": 1, "low_line_count": 0}]


orders = [
    Order(o_orderkey=1, o_orderpriority="1-URGENT"),
    Order(o_orderkey=2, o_orderpriority="3-MEDIUM"),
]
lineitem = [
    Lineitem(
        l_orderkey=1,
        l_shipmode="MAIL",
        l_commitdate="1994-02-10",
        l_receiptdate="1994-02-15",
        l_shipdate="1994-02-05",
    ),
    Lineitem(
        l_orderkey=2,
        l_shipmode="SHIP",
        l_commitdate="1994-03-01",
        l_receiptdate="1994-02-28",
        l_shipdate="1994-02-27",
    ),
]


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [{"items": orders, "on": lambda l, o: o["o_orderkey"] == l["l_orderkey"]}],
        {
            "select": lambda l, o: (l, o),
            "where": lambda l, o: (
                (
                    (
                        l["l_shipmode"] in ["MAIL", "SHIP"]
                        and l["l_commitdate"] < l["l_receiptdate"]
                    )
                    and l["l_shipdate"] < l["l_commitdate"]
                )
                and l["l_receiptdate"] >= "1994-01-01"
            )
            and l["l_receiptdate"] < "1995-01-01",
        },
    )
    _groups = _group_by(_rows, lambda l, o: l["l_shipmode"])
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: _sort_key(_get(g, "key")))
    return [
        {
            "l_shipmode": _get(g, "key"),
            "high_line_count": sum(
                [
                    1 if x[1]["o_orderpriority"] in ["1-URGENT", "2-HIGH"] else 0
                    for x in g
                ]
            ),
            "low_line_count": sum(
                [
                    1 if not x[1]["o_orderpriority"] in ["1-URGENT", "2-HIGH"] else 0
                    for x in g
                ]
            ),
        }
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q12_counts_lineitems_by_ship_mode_and_priority()
