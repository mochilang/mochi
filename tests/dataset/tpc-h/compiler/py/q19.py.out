# Generated by Mochi compiler v0.10.25 on 2025-07-13T05:03:58Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_partkey: object
    l_quantity: object
    l_extendedprice: object
    l_discount: object
    l_shipmode: object
    l_shipinstruct: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Part:
    p_partkey: object
    p_brand: object
    p_container: object
    p_size: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q19_returns_total_revenue_from_qualifying_branded_parts():
    assert result == 2800.0


part = [
    Part(p_partkey=1, p_brand="Brand#12", p_container="SM BOX", p_size=3),
    Part(p_partkey=2, p_brand="Brand#23", p_container="MED BOX", p_size=5),
    Part(p_partkey=3, p_brand="Brand#34", p_container="LG BOX", p_size=15),
]
lineitem = [
    Lineitem(
        l_partkey=1,
        l_quantity=5,
        l_extendedprice=1000.0,
        l_discount=0.1,
        l_shipmode="AIR",
        l_shipinstruct="DELIVER IN PERSON",
    ),
    Lineitem(
        l_partkey=2,
        l_quantity=15,
        l_extendedprice=2000.0,
        l_discount=0.05,
        l_shipmode="AIR REG",
        l_shipinstruct="DELIVER IN PERSON",
    ),
    Lineitem(
        l_partkey=3,
        l_quantity=35,
        l_extendedprice=1500.0,
        l_discount=0.0,
        l_shipmode="AIR",
        l_shipinstruct="DELIVER IN PERSON",
    ),
]
revenues = _query(
    lineitem,
    [{"items": part, "on": lambda l, p: p["p_partkey"] == l["l_partkey"]}],
    {
        "select": lambda l, p: l["l_extendedprice"] * (1 - l["l_discount"]),
        "where": lambda l, p: (
            (
                (
                    (
                        (
                            p["p_brand"] == "Brand#12"
                            and p["p_container"]
                            in ["SM CASE", "SM BOX", "SM PACK", "SM PKG"]
                        )
                        and (l["l_quantity"] >= 1 and l["l_quantity"] <= 11)
                    )
                    and (p["p_size"] >= 1 and p["p_size"] <= 5)
                    or (
                        (
                            (
                                p["p_brand"] == "Brand#23"
                                and p["p_container"]
                                in ["MED BAG", "MED BOX", "MED PKG", "MED PACK"]
                            )
                            and (l["l_quantity"] >= 10 and l["l_quantity"] <= 20)
                        )
                        and (p["p_size"] >= 1 and p["p_size"] <= 10)
                    )
                )
                or (
                    (
                        (
                            p["p_brand"] == "Brand#34"
                            and p["p_container"]
                            in ["LG CASE", "LG BOX", "LG PACK", "LG PKG"]
                        )
                        and (l["l_quantity"] >= 20 and l["l_quantity"] <= 30)
                    )
                    and (p["p_size"] >= 1 and p["p_size"] <= 15)
                )
            )
            and l["l_shipmode"] in ["AIR", "AIR REG"]
        )
        and l["l_shipinstruct"] == "DELIVER IN PERSON",
    },
)
result = _sum(revenues)
print(json.dumps(result, default=lambda o: vars(o)))
test_Q19_returns_total_revenue_from_qualifying_branded_parts()
