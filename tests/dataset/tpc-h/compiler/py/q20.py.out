# Generated by Mochi Python compiler
from __future__ import annotations
import json
import typing
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _slice(obj: list[T] | str, i: int, j: int) -> list[T] | str:
    start = i
    end = j
    n = len(obj)
    if start < 0:
        start += n
    if end < 0:
        end += n
    if start < 0:
        start = 0
    if end > n:
        end = n
    if end < start:
        end = start
    return obj[start:end]


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments():
    assert result == [{"s_name": "Maple Supply", "s_address": "123 Forest Lane"}]


nation: list[dict[str, typing.Any]] = [
    {"n_nationkey": 1, "n_name": "CANADA"},
    {"n_nationkey": 2, "n_name": "GERMANY"},
]
supplier: list[dict[str, typing.Any]] = [
    {
        "s_suppkey": 100,
        "s_name": "Maple Supply",
        "s_address": "123 Forest Lane",
        "s_nationkey": 1,
    },
    {
        "s_suppkey": 200,
        "s_name": "Berlin Metals",
        "s_address": "456 Iron Str",
        "s_nationkey": 2,
    },
]
part: list[dict[str, typing.Any]] = [
    {"p_partkey": 10, "p_name": "forest glade bricks"},
    {"p_partkey": 20, "p_name": "desert sand paper"},
]
partsupp: list[dict[str, int]] = [
    {"ps_partkey": 10, "ps_suppkey": 100, "ps_availqty": 100},
    {"ps_partkey": 20, "ps_suppkey": 200, "ps_availqty": 30},
]
lineitem: list[dict[str, typing.Any]] = [
    {"l_partkey": 10, "l_suppkey": 100, "l_quantity": 100, "l_shipdate": "1994-05-15"},
    {"l_partkey": 10, "l_suppkey": 100, "l_quantity": 50, "l_shipdate": "1995-01-01"},
]
prefix: str = "forest"


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [],
        {
            "select": lambda l: l,
            "where": lambda l: l["l_shipdate"] >= "1994-01-01"
            and l["l_shipdate"] < "1995-01-01",
        },
    )
    _groups = _group_by(
        _rows, lambda l: {"partkey": l["l_partkey"], "suppkey": l["l_suppkey"]}
    )
    _items1 = _groups
    return [
        {
            "partkey": _get(_get(g, "key"), "partkey"),
            "suppkey": _get(_get(g, "key"), "suppkey"),
            "qty": _sum([x["l_quantity"] for x in g]),
        }
        for g in _items1
    ]


shipped_94: list[dict[str, typing.Any]] = _q0()
target_partkeys: list[int] = _query(
    partsupp,
    [
        {"items": part, "on": lambda ps, p: ps["ps_partkey"] == p["p_partkey"]},
        {
            "items": shipped_94,
            "on": lambda ps, p, s: ps["ps_partkey"] == s["partkey"]
            and ps["ps_suppkey"] == s["suppkey"],
        },
    ],
    {
        "select": lambda ps, p, s: ps["ps_suppkey"],
        "where": lambda ps, p, s: _slice(p["p_name"], 0, len(prefix)) == prefix
        and ps["ps_availqty"] > 0.5 * s["qty"],
    },
)
result: list[dict[str, typing.Any]] = _query(
    supplier,
    [{"items": nation, "on": lambda s, n: n["n_nationkey"] == s["s_nationkey"]}],
    {
        "select": lambda s, n: {"s_name": s["s_name"], "s_address": s["s_address"]},
        "where": lambda s, n: s["s_suppkey"] in target_partkeys
        and n["n_name"] == "CANADA",
        "sortKey": lambda s, n: s["s_name"],
    },
)
print(json.dumps(result, default=lambda o: vars(o)))
test_Q20_returns_suppliers_from_CANADA_with_forest_part_stock___50__of_1994_shipments()
