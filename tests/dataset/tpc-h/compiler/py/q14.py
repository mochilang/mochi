# Generated by Mochi compiler v0.10.25 on 2025-07-14T07:14:22Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    is_promo: bool
    revenue: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Lineitem:
    l_partkey: int
    l_extendedprice: float
    l_discount: float
    l_shipdate: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Part:
    p_partkey: int
    p_type: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q14_calculates_promo_revenue_percent_in_1995_09():
    promo: float = 1000.0 * 0.9
    total: float = 900 + 800.0
    expected: float = 100.0 * promo / total
    assert result == expected


part: list[Part] = [
    Part(p_partkey=1, p_type="PROMO LUXURY"),
    Part(p_partkey=2, p_type="STANDARD BRASS"),
]
lineitem: list[Lineitem] = [
    Lineitem(
        l_partkey=1, l_extendedprice=1000.0, l_discount=0.1, l_shipdate="1995-09-05"
    ),
    Lineitem(
        l_partkey=2, l_extendedprice=800.0, l_discount=0.0, l_shipdate="1995-09-20"
    ),
    Lineitem(
        l_partkey=1, l_extendedprice=500.0, l_discount=0.2, l_shipdate="1995-10-02"
    ),
]
start_date: str = "1995-09-01"
end_date: str = "1995-10-01"
filtered: list[Auto1] = _query(
    lineitem,
    [{"items": part, "on": lambda l, p: p.p_partkey == l.l_partkey}],
    {
        "select": lambda l, p: Auto1(
            is_promo="PROMO" in p.p_type, revenue=l.l_extendedprice * (1 - l.l_discount)
        ),
        "where": lambda l, p: l.l_shipdate >= start_date and l.l_shipdate < end_date,
    },
)
promo_sum: float = sum([x.revenue for x in filtered if x.is_promo])
total_sum: float = sum([x.revenue for x in filtered])
result: float = 100.0 * promo_sum / total_sum
print(json.dumps(result, default=lambda o: vars(o)))
test_Q14_calculates_promo_revenue_percent_in_1995_09()
