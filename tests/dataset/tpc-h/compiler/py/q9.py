# Generated by Mochi compiler v0.10.24 on 2006-01-02T15:04:05Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_orderkey: object
    l_partkey: object
    l_suppkey: object
    l_quantity: object
    l_extendedprice: object
    l_discount: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: object
    n_name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: object
    o_orderdate: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Part:
    p_partkey: object
    p_name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Partsupp:
    ps_partkey: object
    ps_suppkey: object
    ps_supplycost: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: object
    s_nationkey: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _slice(obj: list[T] | str, i: int, j: int) -> list[T] | str:
    start = i
    end = j
    n = len(obj)
    if start < 0:
        start += n
    if end < 0:
        end += n
    if start < 0:
        start = 0
    if end > n:
        end = n
    if end < start:
        end = start
    return obj[start:end]


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q9_computes_profit_for_green_parts_by_nation_and_year():
    revenue = 1000 * 0.9
    cost = 5 * 10
    assert result == [{"nation": "BRAZIL", "o_year": "1995", "profit": revenue - cost}]


nation = [
    Nation(n_nationkey=1, n_name="BRAZIL"),
    Nation(n_nationkey=2, n_name="CANADA"),
]
supplier = [
    Supplier(s_suppkey=100, s_nationkey=1),
    Supplier(s_suppkey=200, s_nationkey=2),
]
part = [
    Part(p_partkey=1000, p_name="green metal box"),
    Part(p_partkey=2000, p_name="red plastic crate"),
]
partsupp = [
    Partsupp(ps_partkey=1000, ps_suppkey=100, ps_supplycost=10),
    Partsupp(ps_partkey=1000, ps_suppkey=200, ps_supplycost=8),
]
orders = [
    Order(o_orderkey=1, o_orderdate="1995-02-10"),
    Order(o_orderkey=2, o_orderdate="1997-01-01"),
]
lineitem = [
    Lineitem(
        l_orderkey=1,
        l_partkey=1000,
        l_suppkey=100,
        l_quantity=5,
        l_extendedprice=1000,
        l_discount=0.1,
    ),
    Lineitem(
        l_orderkey=2,
        l_partkey=1000,
        l_suppkey=200,
        l_quantity=10,
        l_extendedprice=800,
        l_discount=0.05,
    ),
]
prefix = "green"
start_date = "1995-01-01"
end_date = "1996-12-31"


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [
            {"items": part, "on": lambda l, p: p["p_partkey"] == l["l_partkey"]},
            {"items": supplier, "on": lambda l, p, s: s["s_suppkey"] == l["l_suppkey"]},
            {
                "items": partsupp,
                "on": lambda l, p, s, ps: ps["ps_partkey"] == l["l_partkey"]
                and ps["ps_suppkey"] == l["l_suppkey"],
            },
            {
                "items": orders,
                "on": lambda l, p, s, ps, o: o["o_orderkey"] == l["l_orderkey"],
            },
            {
                "items": nation,
                "on": lambda l, p, s, ps, o, n: n["n_nationkey"] == s["s_nationkey"],
            },
        ],
        {
            "select": lambda l, p, s, ps, o, n: (l, p, s, ps, o, n),
            "where": lambda l, p, s, ps, o, n: (
                _slice(p["p_name"], 0, len(prefix)) == prefix
                and o["o_orderdate"] >= start_date
            )
            and o["o_orderdate"] <= end_date,
        },
    )
    _groups = _group_by(
        _rows,
        lambda l, p, s, ps, o, n: {
            "nation": n["n_name"],
            "o_year": int(_slice(o["o_orderdate"], 0, 4)),
        },
    )
    _items1 = _groups
    _items1 = sorted(
        _items1,
        key=lambda g: _sort_key(
            [_get(_get(g, "key"), "nation"), -_get(_get(g, "key"), "o_year")]
        ),
    )
    return [
        {
            "nation": _get(_get(g, "key"), "nation"),
            "o_year": str(_get(_get(g, "key"), "o_year")),
            "profit": _sum(
                [
                    x[0]["l_extendedprice"] * (1 - x[0]["l_discount"])
                    - x[3]["ps_supplycost"] * x[0]["l_quantity"]
                    for x in g
                ]
            ),
        }
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q9_computes_profit_for_green_parts_by_nation_and_year()
