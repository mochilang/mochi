# Generated by Mochi compiler v0.10.25 on 2025-07-13T06:12:10Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_suppkey: object
    l_extendedprice: object
    l_discount: object
    l_shipdate: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: object
    s_name: object
    s_address: object
    s_phone: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _max(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("max() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return max(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q15_returns_top_revenue_supplier_s__for_Q1_1996():
    rev = 1000.0 * 0.9 + 500.0
    assert result == [
        {
            "s_suppkey": 100,
            "s_name": "Best Supplier",
            "s_address": "123 Market St",
            "s_phone": "123-456",
            "total_revenue": rev,
        }
    ]


supplier = [
    Supplier(
        s_suppkey=100,
        s_name="Best Supplier",
        s_address="123 Market St",
        s_phone="123-456",
    ),
    Supplier(
        s_suppkey=200,
        s_name="Second Supplier",
        s_address="456 Elm St",
        s_phone="987-654",
    ),
]
lineitem = [
    Lineitem(
        l_suppkey=100, l_extendedprice=1000.0, l_discount=0.1, l_shipdate="1996-01-15"
    ),
    Lineitem(
        l_suppkey=100, l_extendedprice=500.0, l_discount=0.0, l_shipdate="1996-03-20"
    ),
    Lineitem(
        l_suppkey=200, l_extendedprice=800.0, l_discount=0.05, l_shipdate="1995-12-30"
    ),
]
start_date = "1996-01-01"
end_date = "1996-04-01"


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [],
        {
            "select": lambda l: l,
            "where": lambda l: l["l_shipdate"] >= start_date
            and l["l_shipdate"] < end_date,
        },
    )
    _groups = _group_by(_rows, lambda l: l["l_suppkey"])
    _items1 = _groups
    return [
        {
            "supplier_no": _get(g, "key"),
            "total_revenue": _sum(
                [x["l_extendedprice"] * (1 - x["l_discount"]) for x in g]
            ),
        }
        for g in _items1
    ]


revenue0 = _q0()
revenues = [x["total_revenue"] for x in revenue0]
max_revenue = _max(revenues)
result = _query(
    supplier,
    [{"items": revenue0, "on": lambda s, r: s["s_suppkey"] == r["supplier_no"]}],
    {
        "select": lambda s, r: {
            "s_suppkey": s["s_suppkey"],
            "s_name": s["s_name"],
            "s_address": s["s_address"],
            "s_phone": s["s_phone"],
            "total_revenue": r["total_revenue"],
        },
        "where": lambda s, r: r["total_revenue"] == max_revenue,
        "sortKey": lambda s, r: s["s_suppkey"],
    },
)
print(json.dumps(result, default=lambda o: vars(o)))
test_Q15_returns_top_revenue_supplier_s__for_Q1_1996()
