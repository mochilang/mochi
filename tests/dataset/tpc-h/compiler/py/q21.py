# Generated by Mochi compiler v0.10.25 on 2025-07-13T06:12:15Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_orderkey: object
    l_suppkey: object
    l_receiptdate: object
    l_commitdate: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: object
    n_name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: object
    o_orderstatus: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Supplier:
    s_suppkey: object
    s_name: object
    s_nationkey: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays():
    assert result == [{"s_name": "Desert Trade", "numwait": 1}]


nation = [
    Nation(n_nationkey=1, n_name="SAUDI ARABIA"),
    Nation(n_nationkey=2, n_name="FRANCE"),
]
supplier = [
    Supplier(s_suppkey=100, s_name="Desert Trade", s_nationkey=1),
    Supplier(s_suppkey=200, s_name="Euro Goods", s_nationkey=2),
]
orders = [
    Order(o_orderkey=500, o_orderstatus="F"),
    Order(o_orderkey=600, o_orderstatus="O"),
]
lineitem = [
    Lineitem(
        l_orderkey=500,
        l_suppkey=100,
        l_receiptdate="1995-04-15",
        l_commitdate="1995-04-10",
    ),
    Lineitem(
        l_orderkey=500,
        l_suppkey=200,
        l_receiptdate="1995-04-12",
        l_commitdate="1995-04-12",
    ),
    Lineitem(
        l_orderkey=600,
        l_suppkey=100,
        l_receiptdate="1995-05-01",
        l_commitdate="1995-04-25",
    ),
]


def _q0():
    _src = supplier
    _rows = _query(
        _src,
        [
            {"items": lineitem, "on": lambda s, l1: s["s_suppkey"] == l1["l_suppkey"]},
            {
                "items": orders,
                "on": lambda s, l1, o: o["o_orderkey"] == l1["l_orderkey"],
            },
            {
                "items": nation,
                "on": lambda s, l1, o, n: n["n_nationkey"] == s["s_nationkey"],
            },
        ],
        {
            "select": lambda s, l1, o, n: (s, l1, o, n),
            "where": lambda s, l1, o, n: (
                (o["o_orderstatus"] == "F" and l1["l_receiptdate"] > l1["l_commitdate"])
                and n["n_name"] == "SAUDI ARABIA"
            )
            and (
                not len(
                    [
                        x
                        for x in lineitem
                        if (
                            x["l_orderkey"] == l1["l_orderkey"]
                            and x["l_suppkey"] != l1["l_suppkey"]
                        )
                        and x["l_receiptdate"] > x["l_commitdate"]
                    ]
                )
                > 0
            ),
        },
    )
    _groups = _group_by(_rows, lambda s, l1, o, n: s["s_name"])
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: _sort_key([-len(g.Items), _get(g, "key")]))
    return [{"s_name": _get(g, "key"), "numwait": len(g.Items)} for g in _items1]


result = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q21_returns_Saudi_suppliers_who_caused_unique_delivery_delays()
