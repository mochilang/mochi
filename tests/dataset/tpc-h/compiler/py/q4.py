# Generated by Mochi compiler v0.10.24 on 2006-01-02T15:04:05Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Lineitem:
    l_orderkey: object
    l_commitdate: object
    l_receiptdate: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: object
    o_orderdate: object
    o_orderpriority: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q4_returns_count_of_orders_with_late_lineitems_in_range():
    assert result == [
        {"o_orderpriority": "1-URGENT", "order_count": 1},
        {"o_orderpriority": "2-HIGH", "order_count": 1},
    ]


orders = [
    Order(o_orderkey=1, o_orderdate="1993-07-01", o_orderpriority="1-URGENT"),
    Order(o_orderkey=2, o_orderdate="1993-07-15", o_orderpriority="2-HIGH"),
    Order(o_orderkey=3, o_orderdate="1993-08-01", o_orderpriority="3-NORMAL"),
]
lineitem = [
    Lineitem(l_orderkey=1, l_commitdate="1993-07-10", l_receiptdate="1993-07-12"),
    Lineitem(l_orderkey=1, l_commitdate="1993-07-12", l_receiptdate="1993-07-10"),
    Lineitem(l_orderkey=2, l_commitdate="1993-07-20", l_receiptdate="1993-07-25"),
    Lineitem(l_orderkey=3, l_commitdate="1993-08-02", l_receiptdate="1993-08-01"),
    Lineitem(l_orderkey=3, l_commitdate="1993-08-05", l_receiptdate="1993-08-10"),
]
start_date = "1993-07-01"
end_date = "1993-08-01"
date_filtered_orders = [
    o for o in orders if o["o_orderdate"] >= start_date and o["o_orderdate"] < end_date
]
late_orders = [
    o
    for o in date_filtered_orders
    if len(
        [
            l
            for l in lineitem
            if l["l_orderkey"] == o["o_orderkey"]
            and l["l_commitdate"] < l["l_receiptdate"]
        ]
    )
    > 0
]


def _q0():
    _src = late_orders
    _rows = _query(_src, [], {"select": lambda o: o})
    _groups = _group_by(_rows, lambda o: o["o_orderpriority"])
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: _sort_key(_get(g, "key")))
    return [
        {"o_orderpriority": _get(g, "key"), "order_count": len(g.Items)}
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q4_returns_count_of_orders_with_late_lineitems_in_range()
