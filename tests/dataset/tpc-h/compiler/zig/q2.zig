// Generated by Mochi compiler v0.10.25 on 1970-01-01T00:00:00Z
const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn _min_int(v: []const i32) i32 {
    if (v.len == 0) return 0;
    var m: i32 = v[0];
    for (v[1..]) |it| { if (it < m) m = it; }
    return m;
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch unreachable;
    std.debug.print("{s}\n", .{buf.items});
}

fn test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() void {
    expect((result == &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, f64).init(std.heap.page_allocator); m.put("s_acctbal", 1000) catch unreachable; m.put("s_name", "BestSupplier") catch unreachable; m.put("n_name", "FRANCE") catch unreachable; m.put("p_partkey", @as(i32,@intCast(1000))) catch unreachable; m.put("p_mfgr", "M1") catch unreachable; m.put("s_address", "123 Rue") catch unreachable; m.put("s_phone", "123") catch unreachable; m.put("s_comment", "Fast and reliable") catch unreachable; m.put("ps_supplycost", 10) catch unreachable; break :blk m; }}));
}

pub fn main() void {
    const region: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("r_regionkey", @as(i32,@intCast(1))) catch unreachable; m.put("r_name", "EUROPE") catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("r_regionkey", @as(i32,@intCast(2))) catch unreachable; m.put("r_name", "ASIA") catch unreachable; break :blk m; }};
    const nation: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("n_nationkey", @as(i32,@intCast(10))) catch unreachable; m.put("n_regionkey", @as(i32,@intCast(1))) catch unreachable; m.put("n_name", "FRANCE") catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("n_nationkey", @as(i32,@intCast(20))) catch unreachable; m.put("n_regionkey", @as(i32,@intCast(2))) catch unreachable; m.put("n_name", "CHINA") catch unreachable; break :blk m; }};
    const supplier: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("s_suppkey", @as(i32,@intCast(100))) catch unreachable; m.put("s_name", "BestSupplier") catch unreachable; m.put("s_address", "123 Rue") catch unreachable; m.put("s_nationkey", @as(i32,@intCast(10))) catch unreachable; m.put("s_phone", "123") catch unreachable; m.put("s_acctbal", 1000) catch unreachable; m.put("s_comment", "Fast and reliable") catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("s_suppkey", @as(i32,@intCast(200))) catch unreachable; m.put("s_name", "AltSupplier") catch unreachable; m.put("s_address", "456 Way") catch unreachable; m.put("s_nationkey", @as(i32,@intCast(20))) catch unreachable; m.put("s_phone", "456") catch unreachable; m.put("s_acctbal", 500) catch unreachable; m.put("s_comment", "Slow") catch unreachable; break :blk m; }};
    const part: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("p_partkey", @as(i32,@intCast(1000))) catch unreachable; m.put("p_type", "LARGE BRASS") catch unreachable; m.put("p_size", @as(i32,@intCast(15))) catch unreachable; m.put("p_mfgr", "M1") catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("p_partkey", @as(i32,@intCast(2000))) catch unreachable; m.put("p_type", "SMALL COPPER") catch unreachable; m.put("p_size", @as(i32,@intCast(15))) catch unreachable; m.put("p_mfgr", "M2") catch unreachable; break :blk m; }};
    const partsupp: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("ps_partkey", @as(i32,@intCast(1000))) catch unreachable; m.put("ps_suppkey", @as(i32,@intCast(100))) catch unreachable; m.put("ps_supplycost", 10) catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("ps_partkey", @as(i32,@intCast(1000))) catch unreachable; m.put("ps_suppkey", @as(i32,@intCast(200))) catch unreachable; m.put("ps_supplycost", 15) catch unreachable; break :blk m; }};
    const europe_nations: []const std.AutoHashMap([]const u8, i32) = blk: { var _tmp0 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (region) |r| { for (nation) |n| { if (!((n.n_regionkey == r.r_regionkey))) continue; if (!(std.mem.eql(u8, r.r_name, "EUROPE"))) continue; _tmp0.append(n) catch unreachable; } } var _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk _tmp1; };
    const europe_suppliers: []const std.AutoHashMap([]const u8, std.AutoHashMap([]const u8, i32)) = blk: { var _tmp2 = std.ArrayList(std.AutoHashMap([]const u8, std.AutoHashMap([]const u8, i32))).init(std.heap.page_allocator); for (supplier) |s| { for (europe_nations) |n| { if (!((s.s_nationkey == n.n_nationkey))) continue; _tmp2.append(blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put(s, s) catch unreachable; m.put(n, n) catch unreachable; break :blk m; }) catch unreachable; } } var _tmp3 = _tmp2.toOwnedSlice() catch unreachable; break :blk _tmp3; };
    const target_parts: []const std.AutoHashMap([]const u8, i32) = blk: { var _tmp4 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (part) |p| { if (!(((p.p_size == @as(i32,@intCast(15))) and std.mem.eql(u8, p.p_type, "LARGE BRASS")))) continue; _tmp4.append(p) catch unreachable; } var _tmp5 = _tmp4.toOwnedSlice() catch unreachable; break :blk _tmp5; };
    const target_partsupp: []const std.AutoHashMap([]const u8, i32) = blk: { var _tmp6 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (partsupp) |ps| { for (target_parts) |p| { if (!((ps.ps_partkey == p.p_partkey))) continue; for (europe_suppliers) |s| { if (!((ps.ps_suppkey == s.s.s_suppkey))) continue; _tmp6.append(blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("s_acctbal", s.s.s_acctbal) catch unreachable; m.put("s_name", s.s.s_name) catch unreachable; m.put("n_name", s.n.n_name) catch unreachable; m.put("p_partkey", p.p_partkey) catch unreachable; m.put("p_mfgr", p.p_mfgr) catch unreachable; m.put("s_address", s.s.s_address) catch unreachable; m.put("s_phone", s.s.s_phone) catch unreachable; m.put("s_comment", s.s.s_comment) catch unreachable; m.put("ps_supplycost", ps.ps_supplycost) catch unreachable; break :blk m; }) catch unreachable; } } } var _tmp7 = _tmp6.toOwnedSlice() catch unreachable; break :blk _tmp7; };
    const costs: []const i32 = blk: { var _tmp8 = std.ArrayList(i32).init(std.heap.page_allocator); for (target_partsupp) |x| { _tmp8.append(x.ps_supplycost) catch unreachable; } var _tmp9 = _tmp8.toOwnedSlice() catch unreachable; break :blk _tmp9; };
    const min_cost: i32 = _min_int(costs);
    const result: []const std.AutoHashMap([]const u8, i32) = blk: { var _tmp10 = std.ArrayList(struct { item: std.AutoHashMap([]const u8, i32), key: i32 }).init(std.heap.page_allocator); for (target_partsupp) |x| { if (!((x.ps_supplycost == min_cost))) continue; _tmp10.append(.{ .item = x, .key = -x.s_acctbal }) catch unreachable; } for (0.._tmp10.items.len) |i| { for (i+1.._tmp10.items.len) |j| { if (_tmp10.items[j].key < _tmp10.items[i].key) { const t = _tmp10.items[i]; _tmp10.items[i] = _tmp10.items[j]; _tmp10.items[j] = t; } } } var _tmp11 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp10.items) |p| { _tmp11.append(p.item) catch unreachable; } var _tmp12 = _tmp11.toOwnedSlice() catch unreachable; break :blk _tmp12; };
    _json(result);
    test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part();
}

