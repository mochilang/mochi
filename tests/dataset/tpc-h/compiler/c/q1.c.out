#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
typedef struct {
  int key;
  int value;
} map_int_bool_item;
static map_int_bool_item *map_int_bool_item_new(int key, int value) {
  map_int_bool_item *it =
      (map_int_bool_item *)malloc(sizeof(map_int_bool_item));
  it->key = key;
  it->value = value;
  return it;
}
typedef struct {
  int len;
  int cap;
  map_int_bool_item **data;
} map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
  map_int_bool m;
  m.len = 0;
  m.cap = cap;
  m.data = cap ? (map_int_bool_item **)malloc(sizeof(map_int_bool_item *) * cap)
               : NULL;
  return m;
}
static void map_int_bool_put(map_int_bool *m, int key, int value) {
  for (int i = 0; i < m->len; i++)
    if (m->data[i]->key == key) {
      m->data[i]->value = value;
      return;
    }
  if (m->len >= m->cap) {
    m->cap = m->cap ? m->cap * 2 : 4;
    m->data = (map_int_bool_item **)realloc(
        m->data, sizeof(map_int_bool_item *) * m->cap);
  }
  m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
  for (int i = 0; i < m.len; i++)
    if (m.data[i]->key == key)
      return 1;
  return 0;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
static void
test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
  list_int _t1 = list_int_create(1);
  map_int_bool _t2 = map_int_bool_create(10);
  map_int_bool_put(&_t2, returnflag, "N");
  map_int_bool_put(&_t2, linestatus, "O");
  map_int_bool_put(&_t2, sum_qty, 53);
  map_int_bool_put(&_t2, sum_base_price, 3000);
  map_int_bool_put(&_t2, sum_disc_price, (950.0 + 1800.0));
  map_int_bool_put(&_t2, sum_charge, (((950.0 * 1.07)) + ((1800.0 * 1.05))));
  map_int_bool_put(&_t2, avg_qty, 26.5);
  map_int_bool_put(&_t2, avg_price, 1500);
  map_int_bool_put(&_t2, avg_disc, 0.07500000000000001);
  map_int_bool_put(&_t2, count_order, 2);
  _t1.data[0] = _t2;
  if (!((result == _t1))) {
    fprintf(stderr, "expect failed\n");
    exit(1);
  }
}

int main() {
  typedef struct {
    int l_quantity;
    double l_extendedprice;
    double l_discount;
    double l_tax;
    char *l_returnflag;
    char *l_linestatus;
    char *l_shipdate;
  } lineitemItem;
  typedef struct {
    int len;
    lineitemItem *data;
  } list_lineitemItem;
  static list_lineitemItem list_lineitemItem_create(int len) {
    list_lineitemItem l;
    l.len = len;
    l.data = (lineitemItem *)malloc(sizeof(lineitemItem) * len);
    return l;
  }
  list_lineitemItem _t3 = list_lineitemItem_create(3);
  _t3.data[0] = (lineitemItem){.l_quantity = 17,
                               .l_extendedprice = 1000.0,
                               .l_discount = 0.05,
                               .l_tax = 0.07,
                               .l_returnflag = "N",
                               .l_linestatus = "O",
                               .l_shipdate = "1998-08-01"};
  _t3.data[1] = (lineitemItem){.l_quantity = 36,
                               .l_extendedprice = 2000.0,
                               .l_discount = 0.1,
                               .l_tax = 0.05,
                               .l_returnflag = "N",
                               .l_linestatus = "O",
                               .l_shipdate = "1998-09-01"};
  _t3.data[2] = (lineitemItem){.l_quantity = 25,
                               .l_extendedprice = 1500.0,
                               .l_discount = 0.0,
                               .l_tax = 0.08,
                               .l_returnflag = "R",
                               .l_linestatus = "F",
                               .l_shipdate = "1998-09-03"};
  int lineitem = _t3;
  list_int result = 0;
  _json_int(result);
  test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
  return 0;
}
