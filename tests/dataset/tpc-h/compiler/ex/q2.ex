# Generated by Mochi compiler v0.10.27 on 2025-07-17T18:23:28Z
defmodule Main do
  def main do
    # region :: list(map())
    region = [%{r_regionkey: 1, r_name: "EUROPE"}, %{r_regionkey: 2, r_name: "ASIA"}]
    # nation :: list(map())
    nation = [
      %{n_nationkey: 10, n_regionkey: 1, n_name: "FRANCE"},
      %{n_nationkey: 20, n_regionkey: 2, n_name: "CHINA"}
    ]

    # supplier :: list(map())
    supplier = [
      %{
        s_suppkey: 100,
        s_name: "BestSupplier",
        s_address: "123 Rue",
        s_nationkey: 10,
        s_phone: "123",
        s_acctbal: 1000,
        s_comment: "Fast and reliable"
      },
      %{
        s_suppkey: 200,
        s_name: "AltSupplier",
        s_address: "456 Way",
        s_nationkey: 20,
        s_phone: "456",
        s_acctbal: 500,
        s_comment: "Slow"
      }
    ]

    # part :: list(map())
    part = [
      %{p_partkey: 1000, p_type: "LARGE BRASS", p_size: 15, p_mfgr: "M1"},
      %{p_partkey: 2000, p_type: "SMALL COPPER", p_size: 15, p_mfgr: "M2"}
    ]

    # partsupp :: list(map())
    partsupp = [
      %{ps_partkey: 1000, ps_suppkey: 100, ps_supplycost: 10},
      %{ps_partkey: 1000, ps_suppkey: 200, ps_supplycost: 15}
    ]

    # europe_nations :: list(map())
    europe_nations =
      for r <- region, n <- nation, n.n_regionkey == r.r_regionkey && r.r_name == "EUROPE", do: n

    # europe_suppliers :: list(map())
    europe_suppliers =
      for s <- supplier, n <- europe_nations, s.s_nationkey == n.n_nationkey, do: %{s: s, n: n}

    # target_parts :: list(map())
    target_parts = for p <- part, p.p_size == 15 && p.p_type == "LARGE BRASS", do: p
    # target_partsupp :: list(map())
    target_partsupp =
      for ps <- partsupp,
          p <- target_parts,
          s <- europe_suppliers,
          ps.ps_partkey == p.p_partkey && ps.ps_suppkey == s.s.s_suppkey,
          do: %{
            s_acctbal: s.s.s_acctbal,
            s_name: s.s.s_name,
            n_name: s.n.n_name,
            p_partkey: p.p_partkey,
            p_mfgr: p.p_mfgr,
            s_address: s.s.s_address,
            s_phone: s.s.s_phone,
            s_comment: s.s.s_comment,
            ps_supplycost: ps.ps_supplycost
          }

    # costs :: list(any())
    costs = for x <- target_partsupp, do: x.ps_supplycost
    # min_cost :: any()
    min_cost = Enum.min(costs)
    # result :: list(map())
    result =
      for x <- Enum.sort_by(target_partsupp, fn x -> -x.s_acctbal end),
          x.ps_supplycost == min_cost,
          do: x

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
