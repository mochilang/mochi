# Generated by Mochi compiler v0.10.25 on 2025-07-13T14:08:24Z
defmodule Main do
  def main do
    # supplier :: list(map())
    supplier = [
      %{
        s_suppkey: 100,
        s_name: "AlphaSupply",
        s_address: "123 Hilltop",
        s_comment: "Reliable and efficient"
      },
      %{
        s_suppkey: 200,
        s_name: "BetaSupply",
        s_address: "456 Riverside",
        s_comment: "Known for Customer Complaints"
      }
    ]

    # part :: list(map())
    part = [
      %{p_partkey: 1, p_brand: "Brand#12", p_type: "SMALL ANODIZED", p_size: 5},
      %{p_partkey: 2, p_brand: "Brand#23", p_type: "MEDIUM POLISHED", p_size: 10}
    ]

    # partsupp :: list(map())
    partsupp = [%{ps_partkey: 1, ps_suppkey: 100}, %{ps_partkey: 2, ps_suppkey: 200}]
    # excluded_suppliers :: list(integer())
    excluded_suppliers =
      for ps <- partsupp,
          p <- part,
          p.p_partkey == ps.ps_partkey &&
            (p.p_brand == "Brand#12" && String.contains?(p.p_type, "SMALL") && p.p_size == 5),
          do: ps.ps_suppkey

    # result :: list(map())
    result =
      for s <- Enum.sort_by(supplier, fn s -> s.s_name end),
          !if(is_map(excluded_suppliers),
            do: Map.has_key?(excluded_suppliers, s.s_suppkey),
            else: Enum.member?(excluded_suppliers, s.s_suppkey)
          ) && !String.contains?(s.s_comment, "Customer") &&
            !String.contains?(s.s_comment, "Complaints"),
          do: %{s_name: s.s_name, s_address: s.s_address}

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
