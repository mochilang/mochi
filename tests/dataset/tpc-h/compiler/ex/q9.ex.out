# Generated by Mochi compiler v0.10.24 on 2006-01-02T15:04:05Z
defmodule Main do
  @prefix "green"
  @start_date "1995-01-01"
  @end_date "1996-12-31"
  def main do
    # nation :: list(map())
    nation = [%{n_nationkey: 1, n_name: "BRAZIL"}, %{n_nationkey: 2, n_name: "CANADA"}]
    # supplier :: list(map())
    supplier = [%{s_suppkey: 100, s_nationkey: 1}, %{s_suppkey: 200, s_nationkey: 2}]
    # part :: list(map())
    part = [
      %{p_partkey: 1000, p_name: "green metal box"},
      %{p_partkey: 2000, p_name: "red plastic crate"}
    ]

    # partsupp :: list(map())
    partsupp = [
      %{ps_partkey: 1000, ps_suppkey: 100, ps_supplycost: 10},
      %{ps_partkey: 1000, ps_suppkey: 200, ps_supplycost: 8}
    ]

    # orders :: list(map())
    orders = [
      %{o_orderkey: 1, o_orderdate: "1995-02-10"},
      %{o_orderkey: 2, o_orderdate: "1997-01-01"}
    ]

    # lineitem :: list(map())
    lineitem = [
      %{
        l_orderkey: 1,
        l_partkey: 1000,
        l_suppkey: 100,
        l_quantity: 5,
        l_extendedprice: 1000,
        l_discount: 0.1
      },
      %{
        l_orderkey: 2,
        l_partkey: 1000,
        l_suppkey: 200,
        l_quantity: 10,
        l_extendedprice: 800,
        l_discount: 0.05
      }
    ]

    # result :: list(map())
    result =
      (fn ->
         src = lineitem

         rows =
           _query(
             src,
             [
               %{items: part, on: fn l, p -> p.p_partkey == l.l_partkey end},
               %{items: supplier, on: fn l, p, s -> s.s_suppkey == l.l_suppkey end},
               %{
                 items: partsupp,
                 on: fn l, p, s, ps ->
                   ps.ps_partkey == l.l_partkey && ps.ps_suppkey == l.l_suppkey
                 end
               },
               %{items: orders, on: fn l, p, s, ps, o -> o.o_orderkey == l.l_orderkey end},
               %{items: nation, on: fn l, p, s, ps, o, n -> n.n_nationkey == s.s_nationkey end}
             ],
             %{
               select: fn l, p, s, ps, o, n -> %{l: l, p: p, s: s, ps: ps, o: o, n: n} end,
               where: fn [l, p, s, ps, o, n] ->
                 _slice_string(p.p_name, 0, String.length(@prefix)) == @prefix &&
                   o.o_orderdate >= @start_date && o.o_orderdate <= @end_date
               end
             }
           )

         groups =
           _group_by(rows, fn %{l: l, p: p, s: s, ps: ps, o: o, n: n} ->
             %{nation: n.n_name, o_year: String.to_integer(_slice_string(o.o_orderdate, 0, 4))}
           end)

         items = groups
         items = Enum.sort_by(items, fn g -> [g.key.nation, -g.key.o_year] end)

         Enum.map(items, fn g ->
           %{
             nation: g.key.nation,
             o_year: to_string(g.key.o_year),
             profit:
               _sum(
                 for x <- g.items,
                     do:
                       x.l.l_extendedprice * (1 - x.l.l_discount) -
                         x.ps.ps_supplycost * x.l.l_quantity
               )
           }
         end)
       end).()

    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
