# Generated by Mochi compiler v0.10.24 on 2006-01-02T15:04:05Z
defmodule Main do
  @valid_codes ["13", "31", "23", "29", "30", "18", "17"]
  def main do
    # customer :: list(map())
    customer = [
      %{c_custkey: 1, c_phone: "13-123-4567", c_acctbal: 600},
      %{c_custkey: 2, c_phone: "31-456-7890", c_acctbal: 100},
      %{c_custkey: 3, c_phone: "30-000-0000", c_acctbal: 700}
    ]

    # orders :: list(map())
    orders = [%{o_orderkey: 10, o_custkey: 2}]
    # avg_balance :: float()
    avg_balance =
      _avg(
        for c <- customer,
            c.c_acctbal > 0 &&
              if(is_map(@valid_codes),
                do: Map.has_key?(@valid_codes, _slice_string(c.c_phone, 0, 2)),
                else: Enum.member?(@valid_codes, _slice_string(c.c_phone, 0, 2))
              ),
            do: c.c_acctbal
      )

    # eligible_customers :: list(map())
    eligible_customers =
      for c <- customer,
          if(is_map(@valid_codes),
            do: Map.has_key?(@valid_codes, _slice_string(c.c_phone, 0, 2)),
            else: Enum.member?(@valid_codes, _slice_string(c.c_phone, 0, 2))
          ) && c.c_acctbal > avg_balance &&
            !_exists(for o <- orders, o.o_custkey == c.c_custkey, do: o),
          do: %{cntrycode: _slice_string(c.c_phone, 0, 2), c_acctbal: c.c_acctbal}

    # groups :: list(Group.t())
    groups = Enum.map(_group_by(eligible_customers, fn c -> c.cntrycode end), fn g -> g end)
    # tmp :: list(any())
    tmp = []
    _ = tmp

    {tmp} =
      Enum.reduce(groups, {tmp}, fn g, {tmp} ->
        total = _sum(for x <- g.items, do: x.c_acctbal)
        row = %{cntrycode: g.key, numcust: _count(g), totacctbal: total}
        tmp = tmp ++ [row]
        {tmp}
      end)

    _ = tmp
    # result :: list(any())
    result = for r <- Enum.sort_by(tmp, fn r -> r.cntrycode end), do: r
    _json(result)
  end

  defp _avg(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "avg() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      Enum.sum(list) / Enum.count(list)
    end
  end

  defp _count(v) do
    cond do
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      true -> raise "count() expects list or group"
    end
  end

  defp _exists(v) do
    cond do
      is_list(v) -> length(v) > 0
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items)) > 0
      is_map(v) -> map_size(v) > 0
      is_binary(v) -> String.length(v) > 0
      true -> raise "exists expects list, map or string"
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
