# Generated by Mochi compiler v0.10.25 on 2025-07-13T14:08:21Z
defmodule Main do
  @start_date "1995-09-01"
  @end_date "1995-10-01"
  def main do
    # part :: list(map())
    part = [%{p_partkey: 1, p_type: "PROMO LUXURY"}, %{p_partkey: 2, p_type: "STANDARD BRASS"}]
    # lineitem :: list(map())
    lineitem = [
      %{l_partkey: 1, l_extendedprice: 1000, l_discount: 0.1, l_shipdate: "1995-09-05"},
      %{l_partkey: 2, l_extendedprice: 800, l_discount: 0, l_shipdate: "1995-09-20"},
      %{l_partkey: 1, l_extendedprice: 500, l_discount: 0.2, l_shipdate: "1995-10-02"}
    ]

    # filtered :: list(map())
    filtered =
      for l <- lineitem,
          p <- part,
          p.p_partkey == l.l_partkey && (l.l_shipdate >= @start_date && l.l_shipdate < @end_date),
          do: %{
            is_promo: String.contains?(p.p_type, "PROMO"),
            revenue: l.l_extendedprice * (1 - l.l_discount)
          }

    # promo_sum :: float()
    promo_sum = _sum(for x <- filtered, x.is_promo, do: x.revenue)
    # total_sum :: float()
    total_sum = _sum(for x <- filtered, do: x.revenue)
    # result :: float()
    result = 100 * promo_sum / total_sum
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
