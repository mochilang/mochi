# Generated by Mochi compiler v0.10.27 on 2025-07-17T18:23:53Z
defmodule Main do
  @start_date "1993-10-01"
  @end_date "1994-01-01"
  def main do
    # nation :: list(map())
    nation = [%{n_nationkey: 1, n_name: "BRAZIL"}]
    # customer :: list(map())
    customer = [
      %{
        c_custkey: 1,
        c_name: "Alice",
        c_acctbal: 100,
        c_nationkey: 1,
        c_address: "123 St",
        c_phone: "123-456",
        c_comment: "Loyal"
      }
    ]

    # orders :: list(map())
    orders = [
      %{o_orderkey: 1000, o_custkey: 1, o_orderdate: "1993-10-15"},
      %{o_orderkey: 2000, o_custkey: 1, o_orderdate: "1994-01-02"}
    ]

    # lineitem :: list(map())
    lineitem = [
      %{l_orderkey: 1000, l_returnflag: "R", l_extendedprice: 1000, l_discount: 0.1},
      %{l_orderkey: 2000, l_returnflag: "N", l_extendedprice: 500, l_discount: 0}
    ]

    # result :: list(map())
    result =
      (fn ->
         src = customer

         rows =
           _query(
             src,
             [
               %{items: orders, on: fn c, o -> o.o_custkey == c.c_custkey end},
               %{items: lineitem, on: fn c, o, l -> l.l_orderkey == o.o_orderkey end},
               %{items: nation, on: fn c, o, l, n -> n.n_nationkey == c.c_nationkey end}
             ],
             %{
               select: fn c, o, l, n ->
                 _merge_map(_merge_map(_merge_map(_merge_map(c, o), l), n), %{
                   c: c,
                   o: o,
                   l: l,
                   n: n
                 })
               end,
               where: fn [c, o, l, n] ->
                 o.o_orderdate >= @start_date && o.o_orderdate < @end_date &&
                   l.l_returnflag == "R"
               end
             }
           )

         groups =
           _group_by(rows, fn %{c: c, o: o, l: l, n: n} ->
             %{
               c_custkey: c.c_custkey,
               c_name: c.c_name,
               c_acctbal: c.c_acctbal,
               c_address: c.c_address,
               c_phone: c.c_phone,
               c_comment: c.c_comment,
               n_name: n.n_name
             }
           end)

         items = groups

         items =
           Enum.sort_by(items, fn g ->
             -Enum.sum(for x <- g.items, do: x.l.l_extendedprice * (1 - x.l.l_discount))
           end)

         Enum.map(items, fn g ->
           %{
             c_custkey: g.key.c_custkey,
             c_name: g.key.c_name,
             revenue: Enum.sum(for x <- g.items, do: x.l.l_extendedprice * (1 - x.l.l_discount)),
             c_acctbal: g.key.c_acctbal,
             n_name: g.key.n_name,
             c_address: g.key.c_address,
             c_phone: g.key.c_phone,
             c_comment: g.key.c_comment
           }
         end)
       end).()

    _json(result)
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _merge_map(a, b) do
    cond do
      is_map(a) and is_map(b) -> Map.merge(a, b)
      is_map(a) -> a
      is_map(b) -> b
      true -> %{}
    end
  end

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end
end

Main.main()
