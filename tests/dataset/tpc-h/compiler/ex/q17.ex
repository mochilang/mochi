# Generated by Mochi compiler v0.10.27 on 2025-07-17T18:24:12Z
defmodule Main do
  @brand "Brand#23"
  @container "MED BOX"
  def main do
    # part :: list(map())
    part = [
      %{p_partkey: 1, p_brand: "Brand#23", p_container: "MED BOX"},
      %{p_partkey: 2, p_brand: "Brand#77", p_container: "LG JAR"}
    ]

    # lineitem :: list(map())
    lineitem = [
      %{l_partkey: 1, l_quantity: 1, l_extendedprice: 100},
      %{l_partkey: 1, l_quantity: 10, l_extendedprice: 1000},
      %{l_partkey: 1, l_quantity: 20, l_extendedprice: 2000},
      %{l_partkey: 2, l_quantity: 5, l_extendedprice: 500}
    ]

    # filtered :: list(any())
    filtered =
      for l <- lineitem,
          p <- part,
          p.p_partkey == l.l_partkey &&
            (p.p_brand == @brand && p.p_container == @container &&
               l.l_quantity <
                 0.2 *
                   (Enum.sum(for x <- lineitem, x.l_partkey == p.p_partkey, do: x.l_quantity) /
                      Enum.count(for x <- lineitem, x.l_partkey == p.p_partkey, do: x.l_quantity))),
          do: l.l_extendedprice

    # result :: float()
    result = Enum.sum(filtered) / 7
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
