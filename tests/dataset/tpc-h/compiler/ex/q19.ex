# Generated by Mochi compiler v0.10.24 on 2006-01-02T15:04:05Z
defmodule Main do
  def main do
    # part :: list(map())
    part = [
      %{p_partkey: 1, p_brand: "Brand#12", p_container: "SM BOX", p_size: 3},
      %{p_partkey: 2, p_brand: "Brand#23", p_container: "MED BOX", p_size: 5},
      %{p_partkey: 3, p_brand: "Brand#34", p_container: "LG BOX", p_size: 15}
    ]

    # lineitem :: list(map())
    lineitem = [
      %{
        l_partkey: 1,
        l_quantity: 5,
        l_extendedprice: 1000,
        l_discount: 0.1,
        l_shipmode: "AIR",
        l_shipinstruct: "DELIVER IN PERSON"
      },
      %{
        l_partkey: 2,
        l_quantity: 15,
        l_extendedprice: 2000,
        l_discount: 0.05,
        l_shipmode: "AIR REG",
        l_shipinstruct: "DELIVER IN PERSON"
      },
      %{
        l_partkey: 3,
        l_quantity: 35,
        l_extendedprice: 1500,
        l_discount: 0,
        l_shipmode: "AIR",
        l_shipinstruct: "DELIVER IN PERSON"
      }
    ]

    # revenues :: list(any())
    revenues =
      for l <- lineitem,
          p <- part,
          p.p_partkey == l.l_partkey &&
            (((p.p_brand == "Brand#12" &&
                 if(is_map(["SM CASE", "SM BOX", "SM PACK", "SM PKG"]),
                   do: Map.has_key?(["SM CASE", "SM BOX", "SM PACK", "SM PKG"], p.p_container),
                   else: Enum.member?(["SM CASE", "SM BOX", "SM PACK", "SM PKG"], p.p_container)
                 ) && (l.l_quantity >= 1 && l.l_quantity <= 11) &&
                 (p.p_size >= 1 && p.p_size <= 5)) ||
                (p.p_brand == "Brand#23" &&
                   if(is_map(["MED BAG", "MED BOX", "MED PKG", "MED PACK"]),
                     do:
                       Map.has_key?(["MED BAG", "MED BOX", "MED PKG", "MED PACK"], p.p_container),
                     else:
                       Enum.member?(["MED BAG", "MED BOX", "MED PKG", "MED PACK"], p.p_container)
                   ) && (l.l_quantity >= 10 && l.l_quantity <= 20) &&
                   (p.p_size >= 1 && p.p_size <= 10)) ||
                (p.p_brand == "Brand#34" &&
                   if(is_map(["LG CASE", "LG BOX", "LG PACK", "LG PKG"]),
                     do: Map.has_key?(["LG CASE", "LG BOX", "LG PACK", "LG PKG"], p.p_container),
                     else: Enum.member?(["LG CASE", "LG BOX", "LG PACK", "LG PKG"], p.p_container)
                   ) && (l.l_quantity >= 20 && l.l_quantity <= 30) &&
                   (p.p_size >= 1 && p.p_size <= 15))) &&
               if(is_map(["AIR", "AIR REG"]),
                 do: Map.has_key?(["AIR", "AIR REG"], l.l_shipmode),
                 else: Enum.member?(["AIR", "AIR REG"], l.l_shipmode)
               ) && l.l_shipinstruct == "DELIVER IN PERSON"),
          do: l.l_extendedprice * (1 - l.l_discount)

    # result :: float()
    result = _sum(revenues)
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _sum(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "sum() expects list or group"
      end

    Enum.sum(list)
  end
end

Main.main()
