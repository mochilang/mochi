public class Main {
	static void test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
		expect((result == new Object[]{new java.util.HashMap<>(java.util.Map.of("returnflag", "N", "linestatus", "O", "sum_qty", 53, "sum_base_price", 3000, "sum_disc_price", (950 + 1800), "sum_charge", ((950 * 1.07) + (1800 * 1.05)), "avg_qty", 26.5, "avg_price", 1500, "avg_disc", 0.07500000000000001, "count_order", 2))}));
	}
	
	static Object[] lineitem = new Object[]{new java.util.HashMap<>(java.util.Map.of("l_quantity", 17, "l_extendedprice", 1000, "l_discount", 0.05, "l_tax", 0.07, "l_returnflag", "N", "l_linestatus", "O", "l_shipdate", "1998-08-01")), new java.util.HashMap<>(java.util.Map.of("l_quantity", 36, "l_extendedprice", 2000, "l_discount", 0.1, "l_tax", 0.05, "l_returnflag", "N", "l_linestatus", "O", "l_shipdate", "1998-09-01")), new java.util.HashMap<>(java.util.Map.of("l_quantity", 25, "l_extendedprice", 1500, "l_discount", 0, "l_tax", 0.08, "l_returnflag", "R", "l_linestatus", "F", "l_shipdate", "1998-09-03"))};
	
	static Object[] result = (new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(lineitem);
		_src = _filter(_src, (Object row) -> { return (row.l_shipdate <= "1998-09-02"); });
		java.util.List<_Group> _grps = _group_by(_src, row -> new java.util.HashMap<>(java.util.Map.of("returnflag", row.l_returnflag, "linestatus", row.l_linestatus)));
		java.util.List<Object> _res = new java.util.ArrayList<>();
		for (_Group g : _grps) {
			_res.add(new java.util.HashMap<>(java.util.Map.of("returnflag", g.key.returnflag, "linestatus", g.key.linestatus, "sum_qty", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.l_quantity; }, null, null, -1, -1));
	}
}).get()), "sum_base_price", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.l_extendedprice; }, null, null, -1, -1));
	}
}).get()), "sum_disc_price", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return (x.l_extendedprice * (1 - x.l_discount)); }, null, null, -1, -1));
	}
}).get()), "sum_charge", _sum((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return ((x.l_extendedprice * (1 - x.l_discount)) * (1 + x.l_tax)); }, null, null, -1, -1));
	}
}).get()), "avg_qty", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.l_quantity; }, null, null, -1, -1));
	}
}).get()), "avg_price", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.l_extendedprice; }, null, null, -1, -1));
	}
}).get()), "avg_disc", _avg((new java.util.function.Supplier<java.util.List<Object>>() {
	public java.util.List<Object> get() {
		java.util.List<Object> _src = _toList(g);
		java.util.List<_JoinSpec> _joins = java.util.List.of(
		);
		return _query(_src, _joins, new _QueryOpts((Object[] a) -> { Object x = a[0]; return x.l_discount; }, null, null, -1, -1));
	}
}).get()), "count_order", _count(g))));
		}
		return _res;
	}
}).get();
	
	public static void main(String[] args) {
		test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
		_json(result);
	}
	
	static int _count(Object v) {
		if (v instanceof _Group) return ((_Group)v).length();
		java.util.List<Object> items = _toList(v);
		return items.size();
	}
	
	static double _sum(Object v) {
		java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
		double sum = 0;
		for (Object it : items) {
			if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("sum() expects numbers");
		}
		return sum;
	}
	
	static double _avg(Object v) {
		java.util.List<Object> items = (v instanceof _Group) ? ((_Group)v).Items : _toList(v);
		if (items.isEmpty()) return 0;
		double sum = 0;
		for (Object it : items) {
			if (it instanceof Number) sum += ((Number)it).doubleValue(); else throw new RuntimeException("avg() expects numbers");
		}
		return sum / items.size();
	}
	
	static void expect(boolean cond) {
		if (!cond) throw new RuntimeException("expect failed");
	}
	
	static void _json(Object v) {
		System.out.println(_toJson(v));
	}
	
	static String _toJson(Object v) {
		if (v == null) return "null";
		if (v instanceof String) {
			String s = (String) v;
			return "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\"";
		}
		if (v instanceof Number || v instanceof Boolean) return v.toString();
		if (v.getClass().isArray()) {
			int n = java.lang.reflect.Array.getLength(v);
			StringBuilder sb = new StringBuilder();
			sb.append('[');
			for (int i=0;i<n;i++) {
				if (i>0) sb.append(',');
				sb.append(_toJson(java.lang.reflect.Array.get(v,i)));
			}
			sb.append(']');
			return sb.toString();
		}
		if (v instanceof java.util.List<?>) {
			java.util.List<?> l=(java.util.List<?>)v;
			StringBuilder sb=new StringBuilder();
			sb.append('[');
			for (int i=0;i<l.size();i++) {
				if(i>0) sb.append(',');
				sb.append(_toJson(l.get(i)));
			}
			sb.append(']');
			return sb.toString();
		}
		if (v instanceof java.util.Map<?,?>) {
			java.util.Map<?,?> m=(java.util.Map<?,?>)v;
			StringBuilder sb=new StringBuilder();
			sb.append('{');
			boolean first=true;
			for (var e : m.entrySet()) {
				if(!first) sb.append(',');
				first=false;
				sb.append(_toJson(String.valueOf(e.getKey())));
				sb.append(':');
				sb.append(_toJson(e.getValue()));
			}
			sb.append('}');
			return sb.toString();
		}
		return _toJson(v.toString());
	}
	
	static java.util.List<Object> _toList(Object v) {
		if (v instanceof java.util.List<?>) return new java.util.ArrayList<>((java.util.List<?>)v);
		int n = java.lang.reflect.Array.getLength(v);
		java.util.List<Object> out = new java.util.ArrayList<>(n);
		for (int i=0;i<n;i++) out.add(java.lang.reflect.Array.get(v,i));
		return out;
	}
	
	static java.util.List<Object> _filter(java.util.List<Object> src, java.util.function.Function<Object,Boolean> pred) {
		java.util.List<Object> out = new java.util.ArrayList<>();
		for (Object it : src) { if (pred.apply(it)) out.add(it); }
		return out;
	}
	
	static class _JoinSpec {
		java.util.List<Object> items;
		java.util.function.Function<Object[],Boolean> on;
		boolean left;
		boolean right;
		_JoinSpec(java.util.List<Object> items, java.util.function.Function<Object[],Boolean> on, boolean left, boolean right) {
			this.items=items; this.on=on; this.left=left; this.right=right;
		}
	}
	
	static class _QueryOpts {
		java.util.function.Function<Object[],Object> selectFn;
		java.util.function.Function<Object[],Boolean> where;
		java.util.function.Function<Object[],Object> sortKey;
		int skip; int take;
		_QueryOpts(java.util.function.Function<Object[],Object> s, java.util.function.Function<Object[],Boolean> w, java.util.function.Function<Object[],Object> k, int skip, int take) {
			this.selectFn=s; this.where=w; this.sortKey=k; this.skip=skip; this.take=take;
		}
	}
	static java.util.List<Object> _query(java.util.List<Object> src, java.util.List<_JoinSpec> joins, _QueryOpts opts) {
		java.util.List<java.util.List<Object>> items = new java.util.ArrayList<>();
		for (Object v : src) { java.util.List<Object> r = new java.util.ArrayList<>(); r.add(v); items.add(r); }
		for (_JoinSpec j : joins) {
			java.util.List<java.util.List<Object>> joined = new java.util.ArrayList<>();
			java.util.List<Object> jitems = j.items;
			if (j.right && j.left) {
				boolean[] matched = new boolean[jitems.size()];
				for (java.util.List<Object> left : items) {
					boolean m = false;
					for (int ri=0; ri<jitems.size(); ri++) {
						Object right = jitems.get(ri);
						boolean keep = true;
						if (j.on != null) {
							Object[] args = new Object[left.size()+1];
							for (int i=0;i<left.size();i++) args[i]=left.get(i);
							args[left.size()] = right;
							keep = j.on.apply(args);
						}
						if (!keep) continue;
						m = true; matched[ri] = true;
						java.util.List<Object> row = new java.util.ArrayList<>(left);
						row.add(right); joined.add(row);
					}
					if (!m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
				}
				for (int ri=0; ri<jitems.size(); ri++) {
					if (!matched[ri]) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(jitems.get(ri)); joined.add(undef); }
				}
			} else if (j.right) {
				for (Object right : jitems) {
					boolean m = false;
					for (java.util.List<Object> left : items) {
						boolean keep = true;
						if (j.on != null) {
							Object[] args = new Object[left.size()+1];
							for (int i=0;i<left.size();i++) args[i]=left.get(i);
							args[left.size()] = right;
							keep = j.on.apply(args);
						}
						if (!keep) continue;
						m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
					}
					if (!m) { java.util.List<Object> undef = new java.util.ArrayList<>(items.isEmpty()?0:items.get(0).size()); for(int k=0;k<undef.size();k++) undef.set(k,null); undef.add(right); joined.add(undef); }
				}
			} else {
				for (java.util.List<Object> left : items) {
					boolean m = false;
					for (Object right : jitems) {
						boolean keep = true;
						if (j.on != null) {
							Object[] args = new Object[left.size()+1];
							for (int i=0;i<left.size();i++) args[i]=left.get(i);
							args[left.size()] = right;
							keep = j.on.apply(args);
						}
						if (!keep) continue;
						m = true; java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(right); joined.add(row);
					}
					if (j.left && !m) { java.util.List<Object> row = new java.util.ArrayList<>(left); row.add(null); joined.add(row); }
				}
			items = joined;
		}
		if (opts.where != null) {
			java.util.List<java.util.List<Object>> filtered = new java.util.ArrayList<>();
			for (java.util.List<Object> r : items) if (opts.where.apply(r.toArray(new Object[0]))) filtered.add(r);
			items = filtered;
		}
		if (opts.sortKey != null) {
			class Pair { java.util.List<Object> item; Object key; Pair(java.util.List<Object> i,Object k){item=i;key=k;} }
			java.util.List<Pair> pairs = new java.util.ArrayList<>();
			for (java.util.List<Object> it : items) pairs.add(new Pair(it, opts.sortKey.apply(it.toArray(new Object[0]))));
			pairs.sort((a,b) -> {
				Object ak=a.key, bk=b.key;
				if (ak instanceof Number && bk instanceof Number) return Double.compare(((Number)ak).doubleValue(), ((Number)bk).doubleValue());
				if (ak instanceof String && bk instanceof String) return ((String)ak).compareTo((String)bk);
				return ak.toString().compareTo(bk.toString());
			});
			for (int i=0;i<pairs.size();i++) items.set(i, pairs.get(i).item);
		}
		if (opts.skip >= 0) { if (opts.skip < items.size()) items = new java.util.ArrayList<>(items.subList(opts.skip, items.size())); else items = new java.util.ArrayList<>(); }
		if (opts.take >= 0) { if (opts.take < items.size()) items = new java.util.ArrayList<>(items.subList(0, opts.take)); }
		java.util.List<Object> res = new java.util.ArrayList<>();
		for (java.util.List<Object> r : items) res.add(opts.selectFn.apply(r.toArray(new Object[0])));
		return res;
	}
	
	static class _Group {
		Object key;
		java.util.List<Object> Items = new java.util.ArrayList<>();
		_Group(Object k) { key = k; }
		int length() { return Items.size(); }
	}
	
	static java.util.List<_Group> _group_by(java.util.List<Object> src, java.util.function.Function<Object,Object> keyfn) {
		java.util.Map<String,_Group> groups = new java.util.LinkedHashMap<>();
		for (Object it : src) {
			Object key = keyfn.apply(it);
			String ks = String.valueOf(key);
			_Group g = groups.get(ks);
			if (g == null) { g = new _Group(key); groups.put(ks, g); }
			g.Items.add(it);
		}
		return new java.util.ArrayList<>(groups.values());
	}
}
