// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:56Z
// q16.mochi
import java.util.*;

class Supplier {
    int s_suppkey;
    String s_name;
    String s_address;
    String s_comment;
    Supplier(int s_suppkey, String s_name, String s_address, String s_comment) {
        this.s_suppkey = s_suppkey;
        this.s_name = s_name;
        this.s_address = s_address;
        this.s_comment = s_comment;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Supplier other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_name, other.s_name) && Objects.equals(this.s_address, other.s_address) && Objects.equals(this.s_comment, other.s_comment);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_name, s_address, s_comment);
    }
    int size() { return 4; }
}
class Part {
    int p_partkey;
    String p_brand;
    String p_type;
    int p_size;
    Part(int p_partkey, String p_brand, String p_type, int p_size) {
        this.p_partkey = p_partkey;
        this.p_brand = p_brand;
        this.p_type = p_type;
        this.p_size = p_size;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Part other)) return false;
        return Objects.equals(this.p_partkey, other.p_partkey) && Objects.equals(this.p_brand, other.p_brand) && Objects.equals(this.p_type, other.p_type) && Objects.equals(this.p_size, other.p_size);
    }
    @Override public int hashCode() {
        return Objects.hash(p_partkey, p_brand, p_type, p_size);
    }
    int size() { return 4; }
}
class Partsupp {
    int ps_partkey;
    int ps_suppkey;
    Partsupp(int ps_partkey, int ps_suppkey) {
        this.ps_partkey = ps_partkey;
        this.ps_suppkey = ps_suppkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Partsupp other)) return false;
        return Objects.equals(this.ps_partkey, other.ps_partkey) && Objects.equals(this.ps_suppkey, other.ps_suppkey);
    }
    @Override public int hashCode() {
        return Objects.hash(ps_partkey, ps_suppkey);
    }
    int size() { return 2; }
}
class Result {
    String s_name;
    String s_address;
    Result(String s_name, String s_address) {
        this.s_name = s_name;
        this.s_address = s_address;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.s_name, other.s_name) && Objects.equals(this.s_address, other.s_address);
    }
    @Override public int hashCode() {
        return Objects.hash(s_name, s_address);
    }
    int size() { return 2; }
}
public class Q16 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Supplier> supplier = new ArrayList<>(Arrays.asList(new Supplier(100, "AlphaSupply", "123 Hilltop", "Reliable and efficient"), new Supplier(200, "BetaSupply", "456 Riverside", "Known for Customer Complaints")));
        List<Part> part = new ArrayList<>(Arrays.asList(new Part(1, "Brand#12", "SMALL ANODIZED", 5), new Part(2, "Brand#23", "MEDIUM POLISHED", 10)));
        List<Partsupp> partsupp = new ArrayList<>(Arrays.asList(new Partsupp(1, 100), new Partsupp(2, 200)));
        List<Integer> excluded_suppliers = (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res0 = new ArrayList<>();
    for (var ps : partsupp) {
        for (var p : part) {
            if (!(p.p_partkey == ps.ps_partkey)) continue;
            if (!(Objects.equals(p.p_brand, "Brand#12") && p.p_type.contains("SMALL") && p.p_size == 5)) continue;
            res0.add(ps.ps_suppkey);
        }
    }
    return res0;
}}).get();
        List<Result> result = (new java.util.function.Supplier<List<Result>>(){public List<Result> get(){
    List<Result> res1 = new ArrayList<>();
    for (var s : supplier) {
        if (!(!((Boolean)(excluded_suppliers.contains(s.s_suppkey))) && (!((Boolean)s.s_comment.contains("Customer"))) && (!((Boolean)s.s_comment.contains("Complaints"))))) continue;
        res1.add(new Result(s.s_name, s.s_address));
    }
    return res1;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList()))) throw new AssertionError("expect failed");
    }
}
