// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:53Z
// q12.mochi
import java.util.*;

class Order {
    int o_orderkey;
    String o_orderpriority;
    Order(int o_orderkey, String o_orderpriority) {
        this.o_orderkey = o_orderkey;
        this.o_orderpriority = o_orderpriority;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_orderpriority, other.o_orderpriority);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_orderpriority);
    }
    int size() { return 2; }
}
class Lineitem {
    int l_orderkey;
    String l_shipmode;
    String l_commitdate;
    String l_receiptdate;
    String l_shipdate;
    Lineitem(int l_orderkey, String l_shipmode, String l_commitdate, String l_receiptdate, String l_shipdate) {
        this.l_orderkey = l_orderkey;
        this.l_shipmode = l_shipmode;
        this.l_commitdate = l_commitdate;
        this.l_receiptdate = l_receiptdate;
        this.l_shipdate = l_shipdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_shipmode, other.l_shipmode) && Objects.equals(this.l_commitdate, other.l_commitdate) && Objects.equals(this.l_receiptdate, other.l_receiptdate) && Objects.equals(this.l_shipdate, other.l_shipdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_shipmode, l_commitdate, l_receiptdate, l_shipdate);
    }
    int size() { return 5; }
}
class Result {
    Lineitem l;
    Order o;
    Result(Lineitem l, Order o) {
        this.l = l;
        this.o = o;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.l, other.l) && Objects.equals(this.o, other.o);
    }
    @Override public int hashCode() {
        return Objects.hash(l, o);
    }
    int size() { return 2; }
}
class LShipmodeHighLineCountLowLineCount {
    String l_shipmode;
    int high_line_count;
    int low_line_count;
    LShipmodeHighLineCountLowLineCount(String l_shipmode, int high_line_count, int low_line_count) {
        this.l_shipmode = l_shipmode;
        this.high_line_count = high_line_count;
        this.low_line_count = low_line_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LShipmodeHighLineCountLowLineCount other)) return false;
        return Objects.equals(this.l_shipmode, other.l_shipmode) && Objects.equals(this.high_line_count, other.high_line_count) && Objects.equals(this.low_line_count, other.low_line_count);
    }
    @Override public int hashCode() {
        return Objects.hash(l_shipmode, high_line_count, low_line_count);
    }
    int size() { return 3; }
}
public class Q12 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(1, "1-URGENT"), new Order(2, "3-MEDIUM")));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1, "MAIL", "1994-02-10", "1994-02-15", "1994-02-05"), new Lineitem(2, "SHIP", "1994-03-01", "1994-02-28", "1994-02-27")));
        List<LShipmodeHighLineCountLowLineCount> result = (new java.util.function.Supplier<List<LShipmodeHighLineCountLowLineCount>>(){public List<LShipmodeHighLineCountLowLineCount> get(){
    List<LShipmodeHighLineCountLowLineCount> res0 = new ArrayList<>();
    Map<String,List<Result>> groups1 = new LinkedHashMap<>();
    for (var l : lineitem) {
        for (var o : orders) {
            if (!(o.o_orderkey == l.l_orderkey)) continue;
            if (!((Arrays.asList("MAIL", "SHIP").contains(l.l_shipmode)) && (String.valueOf(l.l_commitdate).compareTo(String.valueOf(l.l_receiptdate)) < 0) && (String.valueOf(l.l_shipdate).compareTo(String.valueOf(l.l_commitdate)) < 0) && (String.valueOf(l.l_receiptdate).compareTo(String.valueOf("1994-01-01")) >= 0) && (String.valueOf(l.l_receiptdate).compareTo(String.valueOf("1995-01-01")) < 0))) continue;
            Result row2 = new Result(l, o);
            String key3 = l.l_shipmode;
            List<Result> bucket4 = groups1.get(key3);
            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
            bucket4.add(row2);
        }
    }
    for (Map.Entry<String,List<Result>> __e : groups1.entrySet()) {
        String g_key = __e.getKey();
        Group<String,Result> g = new Group<>(g_key, __e.getValue());
        res0.add(new LShipmodeHighLineCountLowLineCount(g.key, (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add((Arrays.asList("1-URGENT", "2-HIGH").contains(x.o.o_orderpriority) ? 1 : 0));
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add((!((Boolean)(Arrays.asList("1-URGENT", "2-HIGH").contains(x.o.o_orderpriority))) ? 1 : 0));
    }
    return res6;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()));
    }
    return res0;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList(new LShipmodeHighLineCountLowLineCount("MAIL", 1, 0))))) throw new AssertionError("expect failed");
    }
}
