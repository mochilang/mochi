// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:43Z
// q11.mochi
import java.util.*;

class Nation {
    int n_nationkey;
    String n_name;
    Nation(int n_nationkey, String n_name) {
        this.n_nationkey = n_nationkey;
        this.n_name = n_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Nation other)) return false;
        return Objects.equals(this.n_nationkey, other.n_nationkey) && Objects.equals(this.n_name, other.n_name);
    }
    @Override public int hashCode() {
        return Objects.hash(n_nationkey, n_name);
    }
    int size() { return 2; }
}
class Supplier {
    int s_suppkey;
    int s_nationkey;
    Supplier(int s_suppkey, int s_nationkey) {
        this.s_suppkey = s_suppkey;
        this.s_nationkey = s_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Supplier other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_nationkey, other.s_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_nationkey);
    }
    int size() { return 2; }
}
class Partsupp {
    int ps_partkey;
    int ps_suppkey;
    double ps_supplycost;
    int ps_availqty;
    Partsupp(int ps_partkey, int ps_suppkey, double ps_supplycost, int ps_availqty) {
        this.ps_partkey = ps_partkey;
        this.ps_suppkey = ps_suppkey;
        this.ps_supplycost = ps_supplycost;
        this.ps_availqty = ps_availqty;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Partsupp other)) return false;
        return Objects.equals(this.ps_partkey, other.ps_partkey) && Objects.equals(this.ps_suppkey, other.ps_suppkey) && Objects.equals(this.ps_supplycost, other.ps_supplycost) && Objects.equals(this.ps_availqty, other.ps_availqty);
    }
    @Override public int hashCode() {
        return Objects.hash(ps_partkey, ps_suppkey, ps_supplycost, ps_availqty);
    }
    int size() { return 4; }
}
class Filtered {
    int ps_partkey;
    double value;
    Filtered(int ps_partkey, double value) {
        this.ps_partkey = ps_partkey;
        this.value = value;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Filtered other)) return false;
        return Objects.equals(this.ps_partkey, other.ps_partkey) && Objects.equals(this.value, other.value);
    }
    @Override public int hashCode() {
        return Objects.hash(ps_partkey, value);
    }
    int size() { return 2; }
}
public class Q11 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Nation> nation = new ArrayList<>(Arrays.asList(new Nation(1, "GERMANY"), new Nation(2, "FRANCE")));
        List<Supplier> supplier = new ArrayList<>(Arrays.asList(new Supplier(100, 1), new Supplier(200, 1), new Supplier(300, 2)));
        List<Partsupp> partsupp = new ArrayList<>(Arrays.asList(new Partsupp(1000, 100, 10.000000, 100), new Partsupp(1000, 200, 20.000000, 50), new Partsupp(2000, 100, 5.000000, 10), new Partsupp(3000, 300, 8.000000, 500)));
        String target_nation = "GERMANY";
        List<Filtered> filtered = (new java.util.function.Supplier<List<Filtered>>(){public List<Filtered> get(){
    List<Filtered> res0 = new ArrayList<>();
    for (var ps : partsupp) {
        for (var s : supplier) {
            if (!(s.s_suppkey == ps.ps_suppkey)) continue;
            for (var n : nation) {
                if (!(n.n_nationkey == s.s_nationkey)) continue;
                if (!(Objects.equals(n.n_name, target_nation))) continue;
                res0.add(new Filtered(ps.ps_partkey, ps.ps_supplycost * ps.ps_availqty));
            }
        }
    }
    return res0;
}}).get();
        List<Filtered> grouped = (new java.util.function.Supplier<List<Filtered>>(){public List<Filtered> get(){
    List<Filtered> res1 = new ArrayList<>();
    Map<Integer,List<Filtered>> groups2 = new LinkedHashMap<>();
    for (var x : filtered) {
        var row3 = x;
        int key4 = x.ps_partkey;
        List<Filtered> bucket5 = groups2.get(key4);
        if (bucket5 == null) { bucket5 = new ArrayList<>(); groups2.put(key4, bucket5); }
        bucket5.add(row3);
    }
    for (Map.Entry<Integer,List<Filtered>> __e : groups2.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,Filtered> g = new Group<>(g_key, __e.getValue());
        res1.add(new Filtered(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var r : g) {
        res6.add(r.value);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res1;
}}).get();
        double total = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : filtered) {
        res7.add(x.value);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
        double threshold = total * 0.000100;
        List<Filtered> result = (new java.util.function.Supplier<List<Filtered>>(){public List<Filtered> get(){
    List<Filtered> res8 = new ArrayList<>();
    for (var x : grouped) {
        if (!(x.value > threshold)) continue;
        res8.add(x);
    }
    return res8;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList(new Filtered(1000, 2000.000000), new Filtered(2000, 50.000000))))) throw new AssertionError("expect failed");
    }
}
