// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:25:29Z
// q15.mochi
import java.util.*;

class SSuppkeySNameSAddressSPhone {
    int s_suppkey;
    String s_name;
    String s_address;
    String s_phone;
    SSuppkeySNameSAddressSPhone(int s_suppkey, String s_name, String s_address, String s_phone) {
        this.s_suppkey = s_suppkey;
        this.s_name = s_name;
        this.s_address = s_address;
        this.s_phone = s_phone;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SSuppkeySNameSAddressSPhone other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_name, other.s_name) && Objects.equals(this.s_address, other.s_address) && Objects.equals(this.s_phone, other.s_phone);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_name, s_address, s_phone);
    }
    int size() { return 4; }
}
class LSuppkeyLExtendedpriceLDiscountLShipdate {
    int l_suppkey;
    double l_extendedprice;
    double l_discount;
    String l_shipdate;
    LSuppkeyLExtendedpriceLDiscountLShipdate(int l_suppkey, double l_extendedprice, double l_discount, String l_shipdate) {
        this.l_suppkey = l_suppkey;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_shipdate = l_shipdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LSuppkeyLExtendedpriceLDiscountLShipdate other)) return false;
        return Objects.equals(this.l_suppkey, other.l_suppkey) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_shipdate, other.l_shipdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_suppkey, l_extendedprice, l_discount, l_shipdate);
    }
    int size() { return 4; }
}
class SupplierNoTotalRevenue {
    int supplier_no;
    double total_revenue;
    SupplierNoTotalRevenue(int supplier_no, double total_revenue) {
        this.supplier_no = supplier_no;
        this.total_revenue = total_revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SupplierNoTotalRevenue other)) return false;
        return Objects.equals(this.supplier_no, other.supplier_no) && Objects.equals(this.total_revenue, other.total_revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(supplier_no, total_revenue);
    }
    int size() { return 2; }
}
class SSuppkeySNameSAddressSPhoneTotalRevenue {
    int s_suppkey;
    String s_name;
    String s_address;
    String s_phone;
    double total_revenue;
    SSuppkeySNameSAddressSPhoneTotalRevenue(int s_suppkey, String s_name, String s_address, String s_phone, double total_revenue) {
        this.s_suppkey = s_suppkey;
        this.s_name = s_name;
        this.s_address = s_address;
        this.s_phone = s_phone;
        this.total_revenue = total_revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SSuppkeySNameSAddressSPhoneTotalRevenue other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_name, other.s_name) && Objects.equals(this.s_address, other.s_address) && Objects.equals(this.s_phone, other.s_phone) && Objects.equals(this.total_revenue, other.total_revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_name, s_address, s_phone, total_revenue);
    }
    int size() { return 5; }
}
public class Q15 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<SSuppkeySNameSAddressSPhone> supplier = new ArrayList<>(Arrays.asList(new SSuppkeySNameSAddressSPhone(100, "Best Supplier", "123 Market St", "123-456"), new SSuppkeySNameSAddressSPhone(200, "Second Supplier", "456 Elm St", "987-654")));
    List<LSuppkeyLExtendedpriceLDiscountLShipdate> lineitem = new ArrayList<>(Arrays.asList(new LSuppkeyLExtendedpriceLDiscountLShipdate(100, 1000.000000, 0.100000, "1996-01-15"), new LSuppkeyLExtendedpriceLDiscountLShipdate(100, 500.000000, 0.000000, "1996-03-20"), new LSuppkeyLExtendedpriceLDiscountLShipdate(200, 800.000000, 0.050000, "1995-12-30")));
    String start_date = "1996-01-01";
    String end_date = "1996-04-01";
    List<SupplierNoTotalRevenue> revenue0 = (new java.util.function.Supplier<List<SupplierNoTotalRevenue>>(){public List<SupplierNoTotalRevenue> get(){
    List<SupplierNoTotalRevenue> res0 = new ArrayList<>();
    Map<Integer,List<LSuppkeyLExtendedpriceLDiscountLShipdate>> groups1 = new LinkedHashMap<>();
    for (var l : lineitem) {
        if (!(String.valueOf(l.l_shipdate).compareTo(String.valueOf(start_date)) >= 0 && String.valueOf(l.l_shipdate).compareTo(String.valueOf(end_date)) < 0)) continue;
        var row2 = l;
        int key3 = l.l_suppkey;
        List<LSuppkeyLExtendedpriceLDiscountLShipdate> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Integer,List<LSuppkeyLExtendedpriceLDiscountLShipdate>> __e : groups1.entrySet()) {
        int g_key = __e.getKey();
        Group<Integer,LSuppkeyLExtendedpriceLDiscountLShipdate> g = new Group<>(g_key, __e.getValue());
        res0.add(new SupplierNoTotalRevenue(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.l_extendedprice * (1 - x.l_discount));
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
    List<Double> revenues = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : revenue0) {
        res6.add(x.total_revenue);
    }
    return res6;
}}).get();
    double max_revenue = revenues.stream().mapToDouble(n -> ((Number)n).doubleValue()).max().orElse(-Double.MAX_VALUE);
    List<SSuppkeySNameSAddressSPhoneTotalRevenue> result = (new java.util.function.Supplier<List<SSuppkeySNameSAddressSPhoneTotalRevenue>>(){public List<SSuppkeySNameSAddressSPhoneTotalRevenue> get(){
    List<SSuppkeySNameSAddressSPhoneTotalRevenue> res7 = new ArrayList<>();
    for (var s : supplier) {
        for (var r : revenue0) {
            if (!(s.s_suppkey == r.supplier_no)) continue;
            if (!(r.total_revenue == max_revenue)) continue;
            res7.add(new SSuppkeySNameSAddressSPhoneTotalRevenue(s.s_suppkey, s.s_name, s.s_address, s.s_phone, r.total_revenue));
        }
    }
    return res7;
}}).get();
    json(result);
    double rev = 1000.000000 * 0.900000 + 500.000000;
    if (!(Objects.equals(result, Arrays.asList(new SSuppkeySNameSAddressSPhoneTotalRevenue(100, "Best Supplier", "123 Market St", "123-456", rev))))) throw new AssertionError("expect failed");
    }
}
