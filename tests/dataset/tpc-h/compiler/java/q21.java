// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:39:29Z
// q21.mochi
import java.util.*;

class NNationkeyNName {
    int n_nationkey;
    String n_name;
    NNationkeyNName(int n_nationkey, String n_name) {
        this.n_nationkey = n_nationkey;
        this.n_name = n_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NNationkeyNName other)) return false;
        return Objects.equals(this.n_nationkey, other.n_nationkey) && Objects.equals(this.n_name, other.n_name);
    }
    @Override public int hashCode() {
        return Objects.hash(n_nationkey, n_name);
    }
    int size() { return 2; }
}
class SSuppkeySNameSNationkey {
    int s_suppkey;
    String s_name;
    int s_nationkey;
    SSuppkeySNameSNationkey(int s_suppkey, String s_name, int s_nationkey) {
        this.s_suppkey = s_suppkey;
        this.s_name = s_name;
        this.s_nationkey = s_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SSuppkeySNameSNationkey other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_name, other.s_name) && Objects.equals(this.s_nationkey, other.s_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_name, s_nationkey);
    }
    int size() { return 3; }
}
class OOrderkeyOOrderstatus {
    int o_orderkey;
    String o_orderstatus;
    OOrderkeyOOrderstatus(int o_orderkey, String o_orderstatus) {
        this.o_orderkey = o_orderkey;
        this.o_orderstatus = o_orderstatus;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OOrderkeyOOrderstatus other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_orderstatus, other.o_orderstatus);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_orderstatus);
    }
    int size() { return 2; }
}
class LOrderkeyLSuppkeyLReceiptdateLCommitdate {
    int l_orderkey;
    int l_suppkey;
    String l_receiptdate;
    String l_commitdate;
    LOrderkeyLSuppkeyLReceiptdateLCommitdate(int l_orderkey, int l_suppkey, String l_receiptdate, String l_commitdate) {
        this.l_orderkey = l_orderkey;
        this.l_suppkey = l_suppkey;
        this.l_receiptdate = l_receiptdate;
        this.l_commitdate = l_commitdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LOrderkeyLSuppkeyLReceiptdateLCommitdate other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_suppkey, other.l_suppkey) && Objects.equals(this.l_receiptdate, other.l_receiptdate) && Objects.equals(this.l_commitdate, other.l_commitdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_suppkey, l_receiptdate, l_commitdate);
    }
    int size() { return 4; }
}
class SL1ON {
    SSuppkeySNameSNationkey s;
    LOrderkeyLSuppkeyLReceiptdateLCommitdate l1;
    OOrderkeyOOrderstatus o;
    NNationkeyNName n;
    SL1ON(SSuppkeySNameSNationkey s, LOrderkeyLSuppkeyLReceiptdateLCommitdate l1, OOrderkeyOOrderstatus o, NNationkeyNName n) {
        this.s = s;
        this.l1 = l1;
        this.o = o;
        this.n = n;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SL1ON other)) return false;
        return Objects.equals(this.s, other.s) && Objects.equals(this.l1, other.l1) && Objects.equals(this.o, other.o) && Objects.equals(this.n, other.n);
    }
    @Override public int hashCode() {
        return Objects.hash(s, l1, o, n);
    }
    int size() { return 4; }
}
class SNameNumwait {
    String s_name;
    int numwait;
    SNameNumwait(String s_name, int numwait) {
        this.s_name = s_name;
        this.numwait = numwait;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SNameNumwait other)) return false;
        return Objects.equals(this.s_name, other.s_name) && Objects.equals(this.numwait, other.numwait);
    }
    @Override public int hashCode() {
        return Objects.hash(s_name, numwait);
    }
    int size() { return 2; }
}
public class Q21 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<NNationkeyNName> nation = new ArrayList<>(Arrays.asList(new NNationkeyNName(1, "SAUDI ARABIA"), new NNationkeyNName(2, "FRANCE")));
    List<SSuppkeySNameSNationkey> supplier = new ArrayList<>(Arrays.asList(new SSuppkeySNameSNationkey(100, "Desert Trade", 1), new SSuppkeySNameSNationkey(200, "Euro Goods", 2)));
    List<OOrderkeyOOrderstatus> orders = new ArrayList<>(Arrays.asList(new OOrderkeyOOrderstatus(500, "F"), new OOrderkeyOOrderstatus(600, "O")));
    List<LOrderkeyLSuppkeyLReceiptdateLCommitdate> lineitem = new ArrayList<>(Arrays.asList(new LOrderkeyLSuppkeyLReceiptdateLCommitdate(500, 100, "1995-04-15", "1995-04-10"), new LOrderkeyLSuppkeyLReceiptdateLCommitdate(500, 200, "1995-04-12", "1995-04-12"), new LOrderkeyLSuppkeyLReceiptdateLCommitdate(600, 100, "1995-05-01", "1995-04-25")));
    List<SNameNumwait> result = (new java.util.function.Supplier<List<SNameNumwait>>(){public List<SNameNumwait> get(){
    List<SNameNumwait> res0 = new ArrayList<>();
    Map<String,List<SL1ON>> groups1 = new LinkedHashMap<>();
    for (var s : supplier) {
        for (var l1 : lineitem) {
            if (!(s.s_suppkey == l1.l_suppkey)) continue;
            for (var o : orders) {
                if (!(o.o_orderkey == l1.l_orderkey)) continue;
                for (var n : nation) {
                    if (!(n.n_nationkey == s.s_nationkey)) continue;
                    if (!(Objects.equals(o.o_orderstatus, "F") && String.valueOf(l1.l_receiptdate).compareTo(String.valueOf(l1.l_commitdate)) > 0 && Objects.equals(n.n_name, "SAUDI ARABIA") && (!lineitem.stream().anyMatch(x -> Objects.equals(x.l_orderkey, l1.l_orderkey) && !Objects.equals(x.l_suppkey, l1.l_suppkey) && String.valueOf(x.l_receiptdate).compareTo(String.valueOf(x.l_commitdate)) > 0)))) continue;
                    SL1ON row2 = new SL1ON(s, l1, o, n);
                    String key3 = s.s_name;
                    List<SL1ON> bucket4 = groups1.get(key3);
                    if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                    bucket4.add(row2);
                }
            }
        }
    }
    for (Map.Entry<String,List<SL1ON>> __e : groups1.entrySet()) {
        String g_key = __e.getKey();
        Group<String,SL1ON> g = new Group<>(g_key, __e.getValue());
        res0.add(new SNameNumwait(g.key, g.size()));
    }
    return res0;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new SNameNumwait("Desert Trade", 1))))) throw new AssertionError("expect failed");
    }
}
