// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:37Z
// q6.mochi
import java.util.*;

class Lineitem {
    double l_extendedprice;
    double l_discount;
    String l_shipdate;
    int l_quantity;
    Lineitem(double l_extendedprice, double l_discount, String l_shipdate, int l_quantity) {
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_shipdate = l_shipdate;
        this.l_quantity = l_quantity;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_shipdate, other.l_shipdate) && Objects.equals(this.l_quantity, other.l_quantity);
    }
    @Override public int hashCode() {
        return Objects.hash(l_extendedprice, l_discount, l_shipdate, l_quantity);
    }
    int size() { return 4; }
}
public class Q6 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1000.000000, 0.060000, "1994-02-15", 10), new Lineitem(500.000000, 0.070000, "1994-03-10", 23), new Lineitem(400.000000, 0.040000, "1994-04-10", 15), new Lineitem(200.000000, 0.060000, "1995-01-01", 5)));
        double result = (new java.util.function.Supplier<Double>(){public Double get(){
    double _sum1 = 0.0;
    for (var l : lineitem) {
        if (!((String.valueOf(l.l_shipdate).compareTo(String.valueOf("1994-01-01")) >= 0) && (String.valueOf(l.l_shipdate).compareTo(String.valueOf("1995-01-01")) < 0) && (l.l_discount >= 0.050000) && (l.l_discount <= 0.070000) && (l.l_quantity < 24))) continue;
        _sum1 += l.l_extendedprice * l.l_discount;
    }
    return _sum1;
}}).get();
        json(result);
        if (!(Objects.equals(result, ((1000.000000 * 0.060000) + (500.000000 * 0.070000))))) throw new AssertionError("expect failed");
    }
}
