// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:59Z
// q19.mochi
import java.util.*;

class Part {
    int p_partkey;
    String p_brand;
    String p_container;
    int p_size;
    Part(int p_partkey, String p_brand, String p_container, int p_size) {
        this.p_partkey = p_partkey;
        this.p_brand = p_brand;
        this.p_container = p_container;
        this.p_size = p_size;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Part other)) return false;
        return Objects.equals(this.p_partkey, other.p_partkey) && Objects.equals(this.p_brand, other.p_brand) && Objects.equals(this.p_container, other.p_container) && Objects.equals(this.p_size, other.p_size);
    }
    @Override public int hashCode() {
        return Objects.hash(p_partkey, p_brand, p_container, p_size);
    }
    int size() { return 4; }
}
class Lineitem {
    int l_partkey;
    int l_quantity;
    double l_extendedprice;
    double l_discount;
    String l_shipmode;
    String l_shipinstruct;
    Lineitem(int l_partkey, int l_quantity, double l_extendedprice, double l_discount, String l_shipmode, String l_shipinstruct) {
        this.l_partkey = l_partkey;
        this.l_quantity = l_quantity;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_shipmode = l_shipmode;
        this.l_shipinstruct = l_shipinstruct;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_partkey, other.l_partkey) && Objects.equals(this.l_quantity, other.l_quantity) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_shipmode, other.l_shipmode) && Objects.equals(this.l_shipinstruct, other.l_shipinstruct);
    }
    @Override public int hashCode() {
        return Objects.hash(l_partkey, l_quantity, l_extendedprice, l_discount, l_shipmode, l_shipinstruct);
    }
    int size() { return 6; }
}
public class Q19 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Part> part = new ArrayList<>(Arrays.asList(new Part(1, "Brand#12", "SM BOX", 3), new Part(2, "Brand#23", "MED BOX", 5), new Part(3, "Brand#34", "LG BOX", 15)));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1, 5, 1000.000000, 0.100000, "AIR", "DELIVER IN PERSON"), new Lineitem(2, 15, 2000.000000, 0.050000, "AIR REG", "DELIVER IN PERSON"), new Lineitem(3, 35, 1500.000000, 0.000000, "AIR", "DELIVER IN PERSON")));
        List<Double> revenues = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res0 = new ArrayList<>();
    for (var l : lineitem) {
        for (var p : part) {
            if (!(p.p_partkey == l.l_partkey)) continue;
            if (!((((Objects.equals(p.p_brand, "Brand#12")) && (Arrays.asList("SM CASE", "SM BOX", "SM PACK", "SM PKG").contains(p.p_container)) && (l.l_quantity >= 1 && l.l_quantity <= 11) && (p.p_size >= 1 && p.p_size <= 5)) || ((Objects.equals(p.p_brand, "Brand#23")) && (Arrays.asList("MED BAG", "MED BOX", "MED PKG", "MED PACK").contains(p.p_container)) && (l.l_quantity >= 10 && l.l_quantity <= 20) && (p.p_size >= 1 && p.p_size <= 10)) || ((Objects.equals(p.p_brand, "Brand#34")) && (Arrays.asList("LG CASE", "LG BOX", "LG PACK", "LG PKG").contains(p.p_container)) && (l.l_quantity >= 20 && l.l_quantity <= 30) && (p.p_size >= 1 && p.p_size <= 15))) && Arrays.asList("AIR", "AIR REG").contains(l.l_shipmode) && Objects.equals(l.l_shipinstruct, "DELIVER IN PERSON"))) continue;
            res0.add(l.l_extendedprice * (1 - l.l_discount));
        }
    }
    return res0;
}}).get();
        double result = revenues.stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
        json(result);
        if (!(result == 2800.000000)) throw new AssertionError("expect failed");
    }
}
