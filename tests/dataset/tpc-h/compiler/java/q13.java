// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:54Z
// q13.mochi
import java.util.*;

class Order {
    int o_orderkey;
    int o_custkey;
    String o_comment;
    Order(int o_orderkey, int o_custkey, String o_comment) {
        this.o_orderkey = o_orderkey;
        this.o_custkey = o_custkey;
        this.o_comment = o_comment;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_custkey, other.o_custkey) && Objects.equals(this.o_comment, other.o_comment);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_custkey, o_comment);
    }
    int size() { return 3; }
}
class Grouped {
    Integer c_count;
    int custdist;
    Grouped(Integer c_count, int custdist) {
        this.c_count = c_count;
        this.custdist = custdist;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Grouped other)) return false;
        return Objects.equals(this.c_count, other.c_count) && Objects.equals(this.custdist, other.custdist);
    }
    @Override public int hashCode() {
        return Objects.hash(c_count, custdist);
    }
    int size() { return 2; }
}
public class Q13 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Map<String,Integer>> customer = new ArrayList<>(Arrays.asList(new LinkedHashMap<>(Map.ofEntries(Map.entry("c_custkey", 1))), new LinkedHashMap<>(Map.ofEntries(Map.entry("c_custkey", 2))), new LinkedHashMap<>(Map.ofEntries(Map.entry("c_custkey", 3)))));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(100, 1, "fast delivery"), new Order(101, 1, "no comment"), new Order(102, 2, "special requests only")));
        List<Map<String,Integer>> per_customer = (new java.util.function.Supplier<List<Map<String,Integer>>>(){public List<Map<String,Integer>> get(){
    List<Map<String,Integer>> res0 = new ArrayList<>();
    for (var c : customer) {
        res0.add(new LinkedHashMap<>(Map.ofEntries(Map.entry("c_count", (new java.util.function.Supplier<List<Order>>(){public List<Order> get(){
    List<Order> res1 = new ArrayList<>();
    for (var o : orders) {
        if (!((Objects.equals(o.o_custkey, ((Map<String,Integer>)c).get("c_custkey")) && (!((Boolean)(o.o_comment.contains(String.valueOf("special"))))) && (!((Boolean)(o.o_comment.contains(String.valueOf("requests")))))))) continue;
        res1.add(o);
    }
    return res1;
}}).get().size()))));
    }
    return res0;
}}).get();
        List<Grouped> grouped = (new java.util.function.Supplier<List<Grouped>>(){public List<Grouped> get(){
    List<Grouped> res2 = new ArrayList<>();
    Map<Integer,List<Map<String,Integer>>> groups3 = new LinkedHashMap<>();
    for (var x : per_customer) {
        var row4 = x;
        Integer key5 = ((Map<String,Integer>)x).get("c_count");
        List<Map<String,Integer>> bucket6 = groups3.get(key5);
        if (bucket6 == null) { bucket6 = new ArrayList<>(); groups3.put(key5, bucket6); }
        bucket6.add(row4);
    }
    for (Map.Entry<Integer,List<Map<String,Integer>>> __e : groups3.entrySet()) {
        Integer g_key = __e.getKey();
        Group<Integer,Map<String,Integer>> g = new Group<>(g_key, __e.getValue());
        res2.add(new Grouped(g.key, g.size()));
    }
    return res2;
}}).get();
        json(grouped);
        if (!(Objects.equals(grouped, Arrays.asList(new Grouped(2, 1), new Grouped(0, 2))))) throw new AssertionError("expect failed");
    }
}
