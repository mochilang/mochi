// Generated by Mochi compiler v0.10.28 on 2025-07-18T06:59:48Z
// q7.mochi
import java.util.*;

class Nation {
    int n_nationkey;
    String n_name;
    Nation(int n_nationkey, String n_name) {
        this.n_nationkey = n_nationkey;
        this.n_name = n_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Nation other)) return false;
        return Objects.equals(this.n_nationkey, other.n_nationkey) && Objects.equals(this.n_name, other.n_name);
    }
    @Override public int hashCode() {
        return Objects.hash(n_nationkey, n_name);
    }
    int size() { return 2; }
}
class Supplier {
    int s_suppkey;
    int s_nationkey;
    Supplier(int s_suppkey, int s_nationkey) {
        this.s_suppkey = s_suppkey;
        this.s_nationkey = s_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Supplier other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_nationkey, other.s_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_nationkey);
    }
    int size() { return 2; }
}
class Customer {
    int c_custkey;
    int c_nationkey;
    Customer(int c_custkey, int c_nationkey) {
        this.c_custkey = c_custkey;
        this.c_nationkey = c_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_custkey, other.c_custkey) && Objects.equals(this.c_nationkey, other.c_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(c_custkey, c_nationkey);
    }
    int size() { return 2; }
}
class Order {
    int o_orderkey;
    int o_custkey;
    Order(int o_orderkey, int o_custkey) {
        this.o_orderkey = o_orderkey;
        this.o_custkey = o_custkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_custkey, other.o_custkey);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_custkey);
    }
    int size() { return 2; }
}
class Lineitem {
    int l_orderkey;
    int l_suppkey;
    double l_extendedprice;
    double l_discount;
    String l_shipdate;
    Lineitem(int l_orderkey, int l_suppkey, double l_extendedprice, double l_discount, String l_shipdate) {
        this.l_orderkey = l_orderkey;
        this.l_suppkey = l_suppkey;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_shipdate = l_shipdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_suppkey, other.l_suppkey) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_shipdate, other.l_shipdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_suppkey, l_extendedprice, l_discount, l_shipdate);
    }
    int size() { return 5; }
}
class Result {
    Lineitem l;
    Order o;
    Customer c;
    Supplier s;
    Nation n1;
    Nation n2;
    Result(Lineitem l, Order o, Customer c, Supplier s, Nation n1, Nation n2) {
        this.l = l;
        this.o = o;
        this.c = c;
        this.s = s;
        this.n1 = n1;
        this.n2 = n2;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.l, other.l) && Objects.equals(this.o, other.o) && Objects.equals(this.c, other.c) && Objects.equals(this.s, other.s) && Objects.equals(this.n1, other.n1) && Objects.equals(this.n2, other.n2);
    }
    @Override public int hashCode() {
        return Objects.hash(l, o, c, s, n1, n2);
    }
    int size() { return 6; }
}
class SuppNationCustNationLYear {
    String supp_nation;
    String cust_nation;
    String l_year;
    SuppNationCustNationLYear(String supp_nation, String cust_nation, String l_year) {
        this.supp_nation = supp_nation;
        this.cust_nation = cust_nation;
        this.l_year = l_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SuppNationCustNationLYear other)) return false;
        return Objects.equals(this.supp_nation, other.supp_nation) && Objects.equals(this.cust_nation, other.cust_nation) && Objects.equals(this.l_year, other.l_year);
    }
    @Override public int hashCode() {
        return Objects.hash(supp_nation, cust_nation, l_year);
    }
    int size() { return 3; }
}
class SuppNationCustNationLYearRevenue {
    String supp_nation;
    String cust_nation;
    String l_year;
    double revenue;
    SuppNationCustNationLYearRevenue(String supp_nation, String cust_nation, String l_year, double revenue) {
        this.supp_nation = supp_nation;
        this.cust_nation = cust_nation;
        this.l_year = l_year;
        this.revenue = revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SuppNationCustNationLYearRevenue other)) return false;
        return Objects.equals(this.supp_nation, other.supp_nation) && Objects.equals(this.cust_nation, other.cust_nation) && Objects.equals(this.l_year, other.l_year) && Objects.equals(this.revenue, other.revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(supp_nation, cust_nation, l_year, revenue);
    }
    int size() { return 4; }
}
public class Q7 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Nation> nation = new ArrayList<>(Arrays.asList(new Nation(1, "FRANCE"), new Nation(2, "GERMANY")));
        List<Supplier> supplier = new ArrayList<>(Arrays.asList(new Supplier(100, 1)));
        List<Customer> customer = new ArrayList<>(Arrays.asList(new Customer(200, 2)));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(1000, 200)));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1000, 100, 1000.000000, 0.100000, "1995-06-15"), new Lineitem(1000, 100, 800.000000, 0.050000, "1997-01-01")));
        String start_date = "1995-01-01";
        String end_date = "1996-12-31";
        String nation1 = "FRANCE";
        String nation2 = "GERMANY";
        List<SuppNationCustNationLYearRevenue> result = (new java.util.function.Supplier<List<SuppNationCustNationLYearRevenue>>(){public List<SuppNationCustNationLYearRevenue> get(){
    List<SuppNationCustNationLYearRevenue> res0 = new ArrayList<>();
    Map<SuppNationCustNationLYear,List<Result>> groups1 = new LinkedHashMap<>();
    for (var l : lineitem) {
        for (var o : orders) {
            if (!(o.o_orderkey == l.l_orderkey)) continue;
            for (var c : customer) {
                if (!(c.c_custkey == o.o_custkey)) continue;
                for (var s : supplier) {
                    if (!(s.s_suppkey == l.l_suppkey)) continue;
                    for (var n1 : nation) {
                        if (!(n1.n_nationkey == s.s_nationkey)) continue;
                        for (var n2 : nation) {
                            if (!(n2.n_nationkey == c.c_nationkey)) continue;
                            if (!((String.valueOf(l.l_shipdate).compareTo(String.valueOf(start_date)) >= 0 && String.valueOf(l.l_shipdate).compareTo(String.valueOf(end_date)) <= 0 && (Objects.equals(n1.n_name, nation1) && Objects.equals(n2.n_name, nation2)) || (Objects.equals(n1.n_name, nation2) && Objects.equals(n2.n_name, nation1))))) continue;
                            Result row2 = new Result(l, o, c, s, n1, n2);
                            SuppNationCustNationLYear key3 = new SuppNationCustNationLYear(n1.n_name, n2.n_name, l.l_shipdate.substring(0, 4));
                            List<Result> bucket4 = groups1.get(key3);
                            if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                            bucket4.add(row2);
                        }
                    }
                }
            }
        }
    }
    for (Map.Entry<SuppNationCustNationLYear,List<Result>> __e : groups1.entrySet()) {
        SuppNationCustNationLYear g_key = __e.getKey();
        Group<SuppNationCustNationLYear,Result> g = new Group<>(g_key, __e.getValue());
        res0.add(new SuppNationCustNationLYearRevenue(g.key.supp_nation, g.key.cust_nation, g.key.l_year, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.l.l_extendedprice * (1 - x.l.l_discount));
    }
    return res5;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res0;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList(new SuppNationCustNationLYearRevenue("FRANCE", "GERMANY", "1995", 900.000000))))) throw new AssertionError("expect failed");
    }
}
