// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:36Z
// q5.mochi
import java.util.*;

class Region {
    int r_regionkey;
    String r_name;
    Region(int r_regionkey, String r_name) {
        this.r_regionkey = r_regionkey;
        this.r_name = r_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Region other)) return false;
        return Objects.equals(this.r_regionkey, other.r_regionkey) && Objects.equals(this.r_name, other.r_name);
    }
    @Override public int hashCode() {
        return Objects.hash(r_regionkey, r_name);
    }
    int size() { return 2; }
}
class Nation {
    int n_nationkey;
    int n_regionkey;
    String n_name;
    Nation(int n_nationkey, int n_regionkey, String n_name) {
        this.n_nationkey = n_nationkey;
        this.n_regionkey = n_regionkey;
        this.n_name = n_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Nation other)) return false;
        return Objects.equals(this.n_nationkey, other.n_nationkey) && Objects.equals(this.n_regionkey, other.n_regionkey) && Objects.equals(this.n_name, other.n_name);
    }
    @Override public int hashCode() {
        return Objects.hash(n_nationkey, n_regionkey, n_name);
    }
    int size() { return 3; }
}
class Customer {
    int c_custkey;
    int c_nationkey;
    Customer(int c_custkey, int c_nationkey) {
        this.c_custkey = c_custkey;
        this.c_nationkey = c_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_custkey, other.c_custkey) && Objects.equals(this.c_nationkey, other.c_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(c_custkey, c_nationkey);
    }
    int size() { return 2; }
}
class Supplier {
    int s_suppkey;
    int s_nationkey;
    Supplier(int s_suppkey, int s_nationkey) {
        this.s_suppkey = s_suppkey;
        this.s_nationkey = s_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Supplier other)) return false;
        return Objects.equals(this.s_suppkey, other.s_suppkey) && Objects.equals(this.s_nationkey, other.s_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(s_suppkey, s_nationkey);
    }
    int size() { return 2; }
}
class Order {
    int o_orderkey;
    int o_custkey;
    String o_orderdate;
    Order(int o_orderkey, int o_custkey, String o_orderdate) {
        this.o_orderkey = o_orderkey;
        this.o_custkey = o_custkey;
        this.o_orderdate = o_orderdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_custkey, other.o_custkey) && Objects.equals(this.o_orderdate, other.o_orderdate);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_custkey, o_orderdate);
    }
    int size() { return 3; }
}
class Lineitem {
    int l_orderkey;
    int l_suppkey;
    double l_extendedprice;
    double l_discount;
    Lineitem(int l_orderkey, int l_suppkey, double l_extendedprice, double l_discount) {
        this.l_orderkey = l_orderkey;
        this.l_suppkey = l_suppkey;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_suppkey, other.l_suppkey) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_suppkey, l_extendedprice, l_discount);
    }
    int size() { return 4; }
}
class LocalCustomerSupplierOrder {
    String nation;
    double revenue;
    LocalCustomerSupplierOrder(String nation, double revenue) {
        this.nation = nation;
        this.revenue = revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LocalCustomerSupplierOrder other)) return false;
        return Objects.equals(this.nation, other.nation) && Objects.equals(this.revenue, other.revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(nation, revenue);
    }
    int size() { return 2; }
}
class Result {
    String n_name;
    double revenue;
    Result(String n_name, double revenue) {
        this.n_name = n_name;
        this.revenue = revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.n_name, other.n_name) && Objects.equals(this.revenue, other.revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(n_name, revenue);
    }
    int size() { return 2; }
}
public class Q5 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Region> region = new ArrayList<>(Arrays.asList(new Region(0, "ASIA"), new Region(1, "EUROPE")));
        List<Nation> nation = new ArrayList<>(Arrays.asList(new Nation(10, 0, "JAPAN"), new Nation(20, 0, "INDIA"), new Nation(30, 1, "FRANCE")));
        List<Customer> customer = new ArrayList<>(Arrays.asList(new Customer(1, 10), new Customer(2, 20)));
        List<Supplier> supplier = new ArrayList<>(Arrays.asList(new Supplier(100, 10), new Supplier(200, 20)));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(1000, 1, "1994-03-15"), new Order(2000, 2, "1994-06-10"), new Order(3000, 2, "1995-01-01")));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1000, 100, 1000.000000, 0.050000), new Lineitem(2000, 200, 800.000000, 0.100000), new Lineitem(3000, 200, 900.000000, 0.050000)));
        List<Nation> asia_nations = (new java.util.function.Supplier<List<Nation>>(){public List<Nation> get(){
    List<Nation> res0 = new ArrayList<>();
    for (var r : region) {
        for (var n : nation) {
            if (!(n.n_regionkey == r.r_regionkey)) continue;
            if (!(Objects.equals(r.r_name, "ASIA"))) continue;
            res0.add(n);
        }
    }
    return res0;
}}).get();
        List<LocalCustomerSupplierOrder> local_customer_supplier_orders = (new java.util.function.Supplier<List<LocalCustomerSupplierOrder>>(){public List<LocalCustomerSupplierOrder> get(){
    List<LocalCustomerSupplierOrder> res1 = new ArrayList<>();
    for (var c : customer) {
        for (var n : asia_nations) {
            if (!(c.c_nationkey == n.n_nationkey)) continue;
            for (var o : orders) {
                if (!(o.o_custkey == c.c_custkey)) continue;
                for (var l : lineitem) {
                    if (!(l.l_orderkey == o.o_orderkey)) continue;
                    for (var s : supplier) {
                        if (!(s.s_suppkey == l.l_suppkey)) continue;
                        if (!(String.valueOf(o.o_orderdate).compareTo(String.valueOf("1994-01-01")) >= 0 && String.valueOf(o.o_orderdate).compareTo(String.valueOf("1995-01-01")) < 0 && s.s_nationkey == c.c_nationkey)) continue;
                        res1.add(new LocalCustomerSupplierOrder(n.n_name, l.l_extendedprice * (1 - l.l_discount)));
                    }
                }
            }
        }
    }
    return res1;
}}).get();
        List<Result> result = (new java.util.function.Supplier<List<Result>>(){public List<Result> get(){
    List<Result> res2 = new ArrayList<>();
    Map<String,List<LocalCustomerSupplierOrder>> groups3 = new LinkedHashMap<>();
    for (var r : local_customer_supplier_orders) {
        var row4 = r;
        String key5 = r.nation;
        List<LocalCustomerSupplierOrder> bucket6 = groups3.get(key5);
        if (bucket6 == null) { bucket6 = new ArrayList<>(); groups3.put(key5, bucket6); }
        bucket6.add(row4);
    }
    for (Map.Entry<String,List<LocalCustomerSupplierOrder>> __e : groups3.entrySet()) {
        String g_key = __e.getKey();
        Group<String,LocalCustomerSupplierOrder> g = new Group<>(g_key, __e.getValue());
        res2.add(new Result(g.key, (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add(x.revenue);
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()));
    }
    return res2;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList(new Result("JAPAN", 950), new Result("INDIA", 720))))) throw new AssertionError("expect failed");
    }
}
