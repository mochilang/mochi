// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:51Z
// q17.mochi
import java.util.*;

class Part {
    int p_partkey;
    String p_brand;
    String p_container;
    Part(int p_partkey, String p_brand, String p_container) {
        this.p_partkey = p_partkey;
        this.p_brand = p_brand;
        this.p_container = p_container;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Part other)) return false;
        return Objects.equals(this.p_partkey, other.p_partkey) && Objects.equals(this.p_brand, other.p_brand) && Objects.equals(this.p_container, other.p_container);
    }
    @Override public int hashCode() {
        return Objects.hash(p_partkey, p_brand, p_container);
    }
    int size() { return 3; }
}
class Lineitem {
    int l_partkey;
    int l_quantity;
    double l_extendedprice;
    Lineitem(int l_partkey, int l_quantity, double l_extendedprice) {
        this.l_partkey = l_partkey;
        this.l_quantity = l_quantity;
        this.l_extendedprice = l_extendedprice;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_partkey, other.l_partkey) && Objects.equals(this.l_quantity, other.l_quantity) && Objects.equals(this.l_extendedprice, other.l_extendedprice);
    }
    @Override public int hashCode() {
        return Objects.hash(l_partkey, l_quantity, l_extendedprice);
    }
    int size() { return 3; }
}
public class Q17 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Part> part = new ArrayList<>(Arrays.asList(new Part(1, "Brand#23", "MED BOX"), new Part(2, "Brand#77", "LG JAR")));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(1, 1, 100.000000), new Lineitem(1, 10, 1000.000000), new Lineitem(1, 20, 2000.000000), new Lineitem(2, 5, 500.000000)));
        String brand = "Brand#23";
        String container = "MED BOX";
        List<Double> filtered = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res0 = new ArrayList<>();
    for (var l : lineitem) {
        for (var p : part) {
            if (!(p.p_partkey == l.l_partkey)) continue;
            if (!(((Objects.equals(p.p_brand, brand)) && (Objects.equals(p.p_container, container)) && (l.l_quantity < ((Number)(0.200000 * ((Number)(new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res1 = new ArrayList<>();
    for (var x : lineitem) {
        if (!(x.l_partkey == p.p_partkey)) continue;
        res1.add(x.l_quantity);
    }
    return res1;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0)).doubleValue())).doubleValue())))) continue;
            res0.add(l.l_extendedprice);
        }
    }
    return res0;
}}).get();
        double result = filtered.stream().mapToDouble(n -> ((Number)n).doubleValue()).sum() / 7.000000;
        json(result);
        double expected = 100.000000 / 7.000000;
        if (!(result == expected)) throw new AssertionError("expect failed");
    }
}
