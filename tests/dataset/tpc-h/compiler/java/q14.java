// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:25:29Z
// q14.mochi
import java.util.*;

class PPartkeyPType {
    int p_partkey;
    String p_type;
    PPartkeyPType(int p_partkey, String p_type) {
        this.p_partkey = p_partkey;
        this.p_type = p_type;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PPartkeyPType other)) return false;
        return Objects.equals(this.p_partkey, other.p_partkey) && Objects.equals(this.p_type, other.p_type);
    }
    @Override public int hashCode() {
        return Objects.hash(p_partkey, p_type);
    }
    int size() { return 2; }
}
class LPartkeyLExtendedpriceLDiscountLShipdate {
    int l_partkey;
    double l_extendedprice;
    double l_discount;
    String l_shipdate;
    LPartkeyLExtendedpriceLDiscountLShipdate(int l_partkey, double l_extendedprice, double l_discount, String l_shipdate) {
        this.l_partkey = l_partkey;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_shipdate = l_shipdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LPartkeyLExtendedpriceLDiscountLShipdate other)) return false;
        return Objects.equals(this.l_partkey, other.l_partkey) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_shipdate, other.l_shipdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_partkey, l_extendedprice, l_discount, l_shipdate);
    }
    int size() { return 4; }
}
class IsPromoRevenue {
    boolean is_promo;
    double revenue;
    IsPromoRevenue(boolean is_promo, double revenue) {
        this.is_promo = is_promo;
        this.revenue = revenue;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IsPromoRevenue other)) return false;
        return Objects.equals(this.is_promo, other.is_promo) && Objects.equals(this.revenue, other.revenue);
    }
    @Override public int hashCode() {
        return Objects.hash(is_promo, revenue);
    }
    int size() { return 2; }
}
public class Q14 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<PPartkeyPType> part = new ArrayList<>(Arrays.asList(new PPartkeyPType(1, "PROMO LUXURY"), new PPartkeyPType(2, "STANDARD BRASS")));
    List<LPartkeyLExtendedpriceLDiscountLShipdate> lineitem = new ArrayList<>(Arrays.asList(new LPartkeyLExtendedpriceLDiscountLShipdate(1, 1000.000000, 0.100000, "1995-09-05"), new LPartkeyLExtendedpriceLDiscountLShipdate(2, 800.000000, 0.000000, "1995-09-20"), new LPartkeyLExtendedpriceLDiscountLShipdate(1, 500.000000, 0.200000, "1995-10-02")));
    String start_date = "1995-09-01";
    String end_date = "1995-10-01";
    List<IsPromoRevenue> filtered = (new java.util.function.Supplier<List<IsPromoRevenue>>(){public List<IsPromoRevenue> get(){
    List<IsPromoRevenue> res0 = new ArrayList<>();
    for (var l : lineitem) {
        for (var p : part) {
            if (!(p.p_partkey == l.l_partkey)) continue;
            if (!(String.valueOf(l.l_shipdate).compareTo(String.valueOf(start_date)) >= 0 && String.valueOf(l.l_shipdate).compareTo(String.valueOf(end_date)) < 0)) continue;
            res0.add(new IsPromoRevenue(p.p_type.contains(String.valueOf("PROMO")), l.l_extendedprice * (1 - l.l_discount)));
        }
    }
    return res0;
}}).get();
    double promo_sum = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res1 = new ArrayList<>();
    for (var x : filtered) {
        if (!(x.is_promo)) continue;
        res1.add(x.revenue);
    }
    return res1;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    double total_sum = (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res2 = new ArrayList<>();
    for (var x : filtered) {
        res2.add(x.revenue);
    }
    return res2;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum();
    double result = 100.000000 * promo_sum / total_sum;
    json(result);
    double promo = 1000.000000 * 0.900000;
    double total = 900 + 800.000000;
    double expected = 100.000000 * promo / total;
    if (!(result == expected)) throw new AssertionError("expect failed");
    }
}
