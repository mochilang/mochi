// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:30Z
// q1.mochi
import java.util.*;

class Lineitem {
    int l_quantity;
    double l_extendedprice;
    double l_discount;
    double l_tax;
    String l_returnflag;
    String l_linestatus;
    String l_shipdate;
    Lineitem(int l_quantity, double l_extendedprice, double l_discount, double l_tax, String l_returnflag, String l_linestatus, String l_shipdate) {
        this.l_quantity = l_quantity;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
        this.l_tax = l_tax;
        this.l_returnflag = l_returnflag;
        this.l_linestatus = l_linestatus;
        this.l_shipdate = l_shipdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_quantity, other.l_quantity) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount) && Objects.equals(this.l_tax, other.l_tax) && Objects.equals(this.l_returnflag, other.l_returnflag) && Objects.equals(this.l_linestatus, other.l_linestatus) && Objects.equals(this.l_shipdate, other.l_shipdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate);
    }
    int size() { return 7; }
}
class Result {
    String returnflag;
    String linestatus;
    Result(String returnflag, String linestatus) {
        this.returnflag = returnflag;
        this.linestatus = linestatus;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.returnflag, other.returnflag) && Objects.equals(this.linestatus, other.linestatus);
    }
    @Override public int hashCode() {
        return Objects.hash(returnflag, linestatus);
    }
    int size() { return 2; }
}
class ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder {
    String returnflag;
    String linestatus;
    int sum_qty;
    double sum_base_price;
    double sum_disc_price;
    double sum_charge;
    double avg_qty;
    double avg_price;
    double avg_disc;
    int count_order;
    ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder(String returnflag, String linestatus, int sum_qty, double sum_base_price, double sum_disc_price, double sum_charge, double avg_qty, double avg_price, double avg_disc, int count_order) {
        this.returnflag = returnflag;
        this.linestatus = linestatus;
        this.sum_qty = sum_qty;
        this.sum_base_price = sum_base_price;
        this.sum_disc_price = sum_disc_price;
        this.sum_charge = sum_charge;
        this.avg_qty = avg_qty;
        this.avg_price = avg_price;
        this.avg_disc = avg_disc;
        this.count_order = count_order;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder other)) return false;
        return Objects.equals(this.returnflag, other.returnflag) && Objects.equals(this.linestatus, other.linestatus) && Objects.equals(this.sum_qty, other.sum_qty) && Objects.equals(this.sum_base_price, other.sum_base_price) && Objects.equals(this.sum_disc_price, other.sum_disc_price) && Objects.equals(this.sum_charge, other.sum_charge) && Objects.equals(this.avg_qty, other.avg_qty) && Objects.equals(this.avg_price, other.avg_price) && Objects.equals(this.avg_disc, other.avg_disc) && Objects.equals(this.count_order, other.count_order);
    }
    @Override public int hashCode() {
        return Objects.hash(returnflag, linestatus, sum_qty, sum_base_price, sum_disc_price, sum_charge, avg_qty, avg_price, avg_disc, count_order);
    }
    int size() { return 10; }
}
public class Q1 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(17, 1000.000000, 0.050000, 0.070000, "N", "O", "1998-08-01"), new Lineitem(36, 2000.000000, 0.100000, 0.050000, "N", "O", "1998-09-01"), new Lineitem(25, 1500.000000, 0.000000, 0.080000, "R", "F", "1998-09-03")));
        List<ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder> result = (new java.util.function.Supplier<List<ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder>>(){public List<ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder> get(){
    List<ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder> res0 = new ArrayList<>();
    Map<Result,List<Lineitem>> groups1 = new LinkedHashMap<>();
    for (var row : lineitem) {
        if (!(String.valueOf(row.l_shipdate).compareTo(String.valueOf("1998-09-02")) <= 0)) continue;
        var row2 = row;
        Result key3 = new Result(row.l_returnflag, row.l_linestatus);
        List<Lineitem> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Result,List<Lineitem>> __e : groups1.entrySet()) {
        Result g_key = __e.getKey();
        Group<Result,Lineitem> g = new Group<>(g_key, __e.getValue());
        res0.add(new ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder(g.key.returnflag, g.key.linestatus, (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res5 = new ArrayList<>();
    for (var x : g) {
        res5.add(x.l_quantity);
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res6 = new ArrayList<>();
    for (var x : g) {
        res6.add(x.l_extendedprice);
    }
    return res6;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : g) {
        res7.add(x.l_extendedprice * (1 - x.l_discount));
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res8 = new ArrayList<>();
    for (var x : g) {
        res8.add(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax));
    }
    return res8;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum(), (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res9 = new ArrayList<>();
    for (var x : g) {
        res9.add(x.l_quantity);
    }
    return res9;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res10 = new ArrayList<>();
    for (var x : g) {
        res10.add(x.l_extendedprice);
    }
    return res10;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), (new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res11 = new ArrayList<>();
    for (var x : g) {
        res11.add(x.l_discount);
    }
    return res11;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).average().orElse(0), g.size()));
    }
    return res0;
}}).get();
        json(result);
        if (!(Objects.equals(result, Arrays.asList(new ReturnflagLinestatusSumQtySumBasePriceSumDiscPriceSumChargeAvgQtyAvgPriceAvgDiscCountOrder("N", "O", 53, 3000, 950.000000 + 1800.000000, (950.000000 * 1.070000) + (1800.000000 * 1.050000), 26.500000, 1500, 0.075000, 2))))) throw new AssertionError("expect failed");
    }
}
