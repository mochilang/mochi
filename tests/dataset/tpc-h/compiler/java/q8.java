// Generated by Mochi compiler v0.10.28 on 2025-07-18T03:28:40Z
// q8.mochi
import java.util.*;
import java.util.function.*;

class Region {
    int r_regionkey;
    String r_name;
    Region(int r_regionkey, String r_name) {
        this.r_regionkey = r_regionkey;
        this.r_name = r_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Region other)) return false;
        return Objects.equals(this.r_regionkey, other.r_regionkey) && Objects.equals(this.r_name, other.r_name);
    }
    @Override public int hashCode() {
        return Objects.hash(r_regionkey, r_name);
    }
    int size() { return 2; }
}
class Nation {
    int n_nationkey;
    int n_regionkey;
    String n_name;
    Nation(int n_nationkey, int n_regionkey, String n_name) {
        this.n_nationkey = n_nationkey;
        this.n_regionkey = n_regionkey;
        this.n_name = n_name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Nation other)) return false;
        return Objects.equals(this.n_nationkey, other.n_nationkey) && Objects.equals(this.n_regionkey, other.n_regionkey) && Objects.equals(this.n_name, other.n_name);
    }
    @Override public int hashCode() {
        return Objects.hash(n_nationkey, n_regionkey, n_name);
    }
    int size() { return 3; }
}
class Customer {
    int c_custkey;
    int c_nationkey;
    Customer(int c_custkey, int c_nationkey) {
        this.c_custkey = c_custkey;
        this.c_nationkey = c_nationkey;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.c_custkey, other.c_custkey) && Objects.equals(this.c_nationkey, other.c_nationkey);
    }
    @Override public int hashCode() {
        return Objects.hash(c_custkey, c_nationkey);
    }
    int size() { return 2; }
}
class Order {
    int o_orderkey;
    int o_custkey;
    String o_orderdate;
    Order(int o_orderkey, int o_custkey, String o_orderdate) {
        this.o_orderkey = o_orderkey;
        this.o_custkey = o_custkey;
        this.o_orderdate = o_orderdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_custkey, other.o_custkey) && Objects.equals(this.o_orderdate, other.o_orderdate);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_custkey, o_orderdate);
    }
    int size() { return 3; }
}
class Lineitem {
    int l_orderkey;
    int l_suppkey;
    int l_partkey;
    double l_extendedprice;
    double l_discount;
    Lineitem(int l_orderkey, int l_suppkey, int l_partkey, double l_extendedprice, double l_discount) {
        this.l_orderkey = l_orderkey;
        this.l_suppkey = l_suppkey;
        this.l_partkey = l_partkey;
        this.l_extendedprice = l_extendedprice;
        this.l_discount = l_discount;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Lineitem other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_suppkey, other.l_suppkey) && Objects.equals(this.l_partkey, other.l_partkey) && Objects.equals(this.l_extendedprice, other.l_extendedprice) && Objects.equals(this.l_discount, other.l_discount);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_suppkey, l_partkey, l_extendedprice, l_discount);
    }
    int size() { return 5; }
}
class Part {
    int p_partkey;
    String p_type;
    Part(int p_partkey, String p_type) {
        this.p_partkey = p_partkey;
        this.p_type = p_type;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Part other)) return false;
        return Objects.equals(this.p_partkey, other.p_partkey) && Objects.equals(this.p_type, other.p_type);
    }
    @Override public int hashCode() {
        return Objects.hash(p_partkey, p_type);
    }
    int size() { return 2; }
}
class Result {
    Lineitem l;
    Part p;
    Map<String,Integer> s;
    Order o;
    Customer c;
    Nation n;
    Region r;
    Result(Lineitem l, Part p, Map<String,Integer> s, Order o, Customer c, Nation n, Region r) {
        this.l = l;
        this.p = p;
        this.s = s;
        this.o = o;
        this.c = c;
        this.n = n;
        this.r = r;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.l, other.l) && Objects.equals(this.p, other.p) && Objects.equals(this.s, other.s) && Objects.equals(this.o, other.o) && Objects.equals(this.c, other.c) && Objects.equals(this.n, other.n) && Objects.equals(this.r, other.r);
    }
    @Override public int hashCode() {
        return Objects.hash(l, p, s, o, c, n, r);
    }
    int size() { return 7; }
}
class OYearMktShare {
    String o_year;
    double mkt_share;
    OYearMktShare(String o_year, double mkt_share) {
        this.o_year = o_year;
        this.mkt_share = mkt_share;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OYearMktShare other)) return false;
        return Objects.equals(this.o_year, other.o_year) && Objects.equals(this.mkt_share, other.mkt_share);
    }
    @Override public int hashCode() {
        return Objects.hash(o_year, mkt_share);
    }
    int size() { return 2; }
}
public class Q8 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
        List<Region> region = new ArrayList<>(Arrays.asList(new Region(0, "AMERICA")));
        List<Nation> nation = new ArrayList<>(Arrays.asList(new Nation(10, 0, "BRAZIL"), new Nation(20, 0, "CANADA")));
        List<Customer> customer = new ArrayList<>(Arrays.asList(new Customer(1, 10), new Customer(2, 20)));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(100, 1, "1995-04-10"), new Order(200, 2, "1995-07-15")));
        List<Lineitem> lineitem = new ArrayList<>(Arrays.asList(new Lineitem(100, 1000, 5000, 1000.000000, 0.100000), new Lineitem(200, 2000, 5000, 500.000000, 0.050000)));
        List<Map<String,Integer>> supplier = new ArrayList<>(Arrays.asList(new LinkedHashMap<>(Map.ofEntries(Map.entry("s_suppkey", 1000))), new LinkedHashMap<>(Map.ofEntries(Map.entry("s_suppkey", 2000)))));
        List<Part> part = new ArrayList<>(Arrays.asList(new Part(5000, "ECONOMY ANODIZED STEEL"), new Part(6000, "SMALL BRASS")));
        String start_date = "1995-01-01";
        String end_date = "1996-12-31";
        String target_type = "ECONOMY ANODIZED STEEL";
        String target_nation = "BRAZIL";
        List<OYearMktShare> result = (new java.util.function.Supplier<List<OYearMktShare>>(){public List<OYearMktShare> get(){
    List<OYearMktShare> res0 = new ArrayList<>();
    Map<String,List<Result>> groups1 = new LinkedHashMap<>();
    for (var l : lineitem) {
        for (var p : part) {
            if (!(p.p_partkey == l.l_partkey)) continue;
            for (var s : supplier) {
                if (!(Objects.equals(((Map<String,Integer>)s).get("s_suppkey"), l.l_suppkey))) continue;
                for (var o : orders) {
                    if (!(o.o_orderkey == l.l_orderkey)) continue;
                    for (var c : customer) {
                        if (!(c.c_custkey == o.o_custkey)) continue;
                        for (var n : nation) {
                            if (!(n.n_nationkey == c.c_nationkey)) continue;
                            for (var r : region) {
                                if (!(r.r_regionkey == n.n_regionkey)) continue;
                                if (!((Objects.equals(p.p_type, target_type) && String.valueOf(o.o_orderdate).compareTo(String.valueOf(start_date)) >= 0 && String.valueOf(o.o_orderdate).compareTo(String.valueOf(end_date)) <= 0 && Objects.equals(r.r_name, "AMERICA")))) continue;
                                Result row2 = new Result(l, p, s, o, c, n, r);
                                String key3 = o.o_orderdate.substring(0, 4);
                                List<Result> bucket4 = groups1.get(key3);
                                if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
                                bucket4.add(row2);
                            }
                        }
                    }
                }
            }
        }
    }
    for (Map.Entry<String,List<Result>> __e : groups1.entrySet()) {
        String year_key = __e.getKey();
        Group<String,Result> year = new Group<>(year_key, __e.getValue());
        res0.add(new OYearMktShare(year.key, ((Number)(new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var x : year) {
        res5.add((new java.util.function.Supplier<Double>(){public Double get(){
    var t6 = Objects.equals(x.n.n_name, target_nation);
    if (Objects.equals(t6, true)) return x.l.l_extendedprice * (1 - x.l.l_discount);
    return 0.000000;
}}).get());
    }
    return res5;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).sum()).doubleValue() / ((Number)(new java.util.function.Supplier<List<Double>>(){public List<Double> get(){
    List<Double> res7 = new ArrayList<>();
    for (var x : year) {
        res7.add(x.l.l_extendedprice * (1 - x.l.l_discount));
    }
    return res7;
}}).get().stream().mapToDouble(n -> ((Number)n).doubleValue()).sum()).doubleValue()));
    }
    return res0;
}}).get();
        json(result);
        double numerator = 1000.000000 * 0.900000;
        double denominator = numerator + (500.000000 * 0.950000);
        double share = numerator / denominator;
        if (!(Objects.equals(result, Arrays.asList(new OYearMktShare("1995", share))))) throw new AssertionError("expect failed");
    }
}
