// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:27:28Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Region {
    r_regionkey: i32,
    r_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Nation {
    n_nationkey: i32,
    n_regionkey: i32,
    n_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_custkey: i32,
    c_nationkey: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Supplier {
    s_suppkey: i32,
    s_nationkey: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Order {
    o_orderkey: i32,
    o_custkey: i32,
    o_orderdate: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Lineitem {
    l_orderkey: i32,
    l_suppkey: i32,
    l_extendedprice: f64,
    l_discount: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    nation: &'static str,
    revenue: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: &'static str,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    n_name: &'static str,
    revenue: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let region = vec![Region { r_regionkey: 0, r_name: "ASIA" }, Region { r_regionkey: 1, r_name: "EUROPE" }];
    let nation = vec![Nation { n_nationkey: 10, n_regionkey: 0, n_name: "JAPAN" }, Nation { n_nationkey: 20, n_regionkey: 0, n_name: "INDIA" }, Nation { n_nationkey: 30, n_regionkey: 1, n_name: "FRANCE" }];
    let customer = vec![Customer { c_custkey: 1, c_nationkey: 10 }, Customer { c_custkey: 2, c_nationkey: 20 }];
    let supplier = vec![Supplier { s_suppkey: 100, s_nationkey: 10 }, Supplier { s_suppkey: 200, s_nationkey: 20 }];
    let orders = vec![Order { o_orderkey: 1000, o_custkey: 1, o_orderdate: "1994-03-15" }, Order { o_orderkey: 2000, o_custkey: 2, o_orderdate: "1994-06-10" }, Order { o_orderkey: 3000, o_custkey: 2, o_orderdate: "1995-01-01" }];
    let lineitem = vec![Lineitem { l_orderkey: 1000, l_suppkey: 100, l_extendedprice: 1000.0, l_discount: 0.05 }, Lineitem { l_orderkey: 2000, l_suppkey: 200, l_extendedprice: 800.0, l_discount: 0.1 }, Lineitem { l_orderkey: 3000, l_suppkey: 200, l_extendedprice: 900.0, l_discount: 0.05 }];
    let asia_nations = { let mut tmp1 = Vec::new();for r in &region { for n in &nation { if !(n.n_regionkey == r.r_regionkey) { continue; } if !(r.r_name == "ASIA") { continue; } tmp1.push(n.clone()); } } tmp1 };
    let local_customer_supplier_orders = { let mut tmp2 = Vec::new();for c in &customer { for n in &asia_nations { if !(c.c_nationkey == n.n_nationkey) { continue; } for o in &orders { if !(o.o_custkey == c.c_custkey) { continue; } for l in &lineitem { if !(l.l_orderkey == o.o_orderkey) { continue; } for s in &supplier { if !(s.s_suppkey == l.l_suppkey) { continue; } if !(o.o_orderdate >= "1994-01-01" && o.o_orderdate < "1995-01-01" && s.s_nationkey == c.c_nationkey) { continue; } tmp2.push(Result { nation: n.n_name, revenue: l.l_extendedprice * ((1 as f64) - l.l_discount) }); } } } } } tmp2 };
    let result = { let mut tmp3 = std::collections::HashMap::new();for r in &local_customer_supplier_orders { let key = r.nation; tmp3.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp4.sort_by(|a,b| (-sum(&{ let mut tmp5 = Vec::new();for x in &a.clone().items { tmp5.push(x.revenue); } tmp5 })).partial_cmp(&(-sum(&{ let mut tmp5 = Vec::new();for x in &b.clone().items { tmp5.push(x.revenue); } tmp5 }))).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result1 { n_name: g.key, revenue: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.revenue); } tmp6 }) }); } result };
    _json(&result);
    assert!(result == vec![Result1 { n_name: "JAPAN", revenue: 950.0 }, Result1 { n_name: "INDIA", revenue: 720.0 }]);
}
