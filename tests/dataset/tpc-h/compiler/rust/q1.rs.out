fn test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
    expect(result == vec![std::collections::HashMap::from([("returnflag".to_string(), "N"), ("linestatus".to_string(), "O"), ("sum_qty".to_string(), 53), ("sum_base_price".to_string(), 3000), ("sum_disc_price".to_string(), 950.0 + 1800.0), ("sum_charge".to_string(), (950.0 * 1.07) + (1800.0 * 1.05)), ("avg_qty".to_string(), 26.5), ("avg_price".to_string(), 1500), ("avg_disc".to_string(), 0.07500000000000001), ("count_order".to_string(), 2)])]);
}

fn main() {
    let mut lineitem = vec![std::collections::HashMap::from([("l_quantity".to_string(), 17), ("l_extendedprice".to_string(), 1000.0), ("l_discount".to_string(), 0.05), ("l_tax".to_string(), 0.07), ("l_returnflag".to_string(), "N"), ("l_linestatus".to_string(), "O"), ("l_shipdate".to_string(), "1998-08-01")]), std::collections::HashMap::from([("l_quantity".to_string(), 36), ("l_extendedprice".to_string(), 2000.0), ("l_discount".to_string(), 0.1), ("l_tax".to_string(), 0.05), ("l_returnflag".to_string(), "N"), ("l_linestatus".to_string(), "O"), ("l_shipdate".to_string(), "1998-09-01")]), std::collections::HashMap::from([("l_quantity".to_string(), 25), ("l_extendedprice".to_string(), 1500.0), ("l_discount".to_string(), 0.0), ("l_tax".to_string(), 0.08), ("l_returnflag".to_string(), "R"), ("l_linestatus".to_string(), "F"), ("l_shipdate".to_string(), "1998-09-03")])];
    let mut result = {
    #[derive(Clone, Debug)]
    struct Group { key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>, items: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> }
    let mut groups: std::collections::HashMap<String, Group> = std::collections::HashMap::new();
    let mut order: Vec<String> = Vec::new();
    for row in lineitem.clone() {
        if !(row.l_shipdate <= "1998-09-02") { continue; }
        let key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>> = std::collections::HashMap::from([("returnflag".to_string(), row.l_returnflag), ("linestatus".to_string(), row.l_linestatus)]);
        let ks = format!("{:?}", key.clone());
        if !groups.contains_key(&ks) {
            groups.insert(ks.clone(), Group{ key: key.clone(), items: Vec::new() });
            order.push(ks.clone());
        }
        groups.get_mut(&ks).unwrap().items.push(row.clone());
    }
    let mut _res: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> = Vec::new();
    for ks in order {
        let g = groups.get(&ks).unwrap().clone();
        _res.push(std::collections::HashMap::from([("returnflag".to_string(), g.key.returnflag), ("linestatus".to_string(), g.key.linestatus), ("sum_qty".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_quantity);
    }
    _res
})), ("sum_base_price".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice);
    }
    _res
})), ("sum_disc_price".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice * (1 - x.l_discount));
    }
    _res
})), ("sum_charge".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax));
    }
    _res
})), ("avg_qty".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_quantity);
    }
    _res
})), ("avg_price".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice);
    }
    _res
})), ("avg_disc".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_discount);
    }
    _res
})), ("count_order".to_string(), _count(&g))]));
    }
    _res
}
;
    json(result);
    test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
}

fn _avg<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum / v.len() as f64
}
fn _count<T>(v: &[T]) -> i32 {
    v.len() as i32
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
