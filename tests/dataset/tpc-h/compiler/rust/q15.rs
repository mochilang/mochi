// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:34:45Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Supplier {
    s_suppkey: i32,
    s_name: &'static str,
    s_address: &'static str,
    s_phone: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Lineitem {
    l_suppkey: i32,
    l_extendedprice: f64,
    l_discount: f64,
    l_shipdate: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Lineitem>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    supplier_no: i32,
    total_revenue: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    s_suppkey: i32,
    s_name: &'static str,
    s_address: &'static str,
    s_phone: &'static str,
    total_revenue: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn max<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().max_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let supplier = vec![Supplier { s_suppkey: 100, s_name: "Best Supplier", s_address: "123 Market St", s_phone: "123-456" }, Supplier { s_suppkey: 200, s_name: "Second Supplier", s_address: "456 Elm St", s_phone: "987-654" }];
    let lineitem = vec![Lineitem { l_suppkey: 100, l_extendedprice: 1000.0, l_discount: 0.1, l_shipdate: "1996-01-15" }, Lineitem { l_suppkey: 100, l_extendedprice: 500.0, l_discount: 0.0, l_shipdate: "1996-03-20" }, Lineitem { l_suppkey: 200, l_extendedprice: 800.0, l_discount: 0.05, l_shipdate: "1995-12-30" }];
    let start_date = "1996-01-01";
    let end_date = "1996-04-01";
    let revenue0 = { let mut tmp1 = std::collections::HashMap::new();for l in &lineitem { if !(l.l_shipdate >= start_date && l.l_shipdate < end_date) { continue; } let key = l.l_suppkey; tmp1.entry(key).or_insert_with(Vec::new).push(l.clone()); } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { supplier_no: g.key, total_revenue: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.l_extendedprice * ((1 as f64) - x.l_discount as f64)); } tmp3 }) }); } result };
    let revenues = { let mut tmp4 = Vec::new();for x in &revenue0 { tmp4.push(x.total_revenue); } tmp4 };
    let max_revenue = max(&revenues);
    let result = { let mut tmp5 = Vec::new();for s in &supplier { for r in &revenue0 { if !(s.s_suppkey == r.supplier_no) { continue; } if !(r.total_revenue == max_revenue) { continue; } let tmp6 = Result1 { s_suppkey: s.s_suppkey, s_name: s.s_name, s_address: s.s_address, s_phone: s.s_phone, total_revenue: r.total_revenue }; let tmp7 = s.s_suppkey; tmp5.push((tmp7, tmp6)); } } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    _json(&result);
    let rev = 1000.0 * 0.9 + 500.0;
    assert!(result == vec![Result1 { s_suppkey: 100, s_name: "Best Supplier", s_address: "123 Market St", s_phone: "123-456", total_revenue: rev }]);
}
