// Generated by Mochi compiler v0.10.25 on 2025-07-13T18:02:37Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Region {
    r_regionkey: i32,
    r_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Nation {
    n_nationkey: i32,
    n_regionkey: i32,
    n_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_custkey: i32,
    c_nationkey: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Order {
    o_orderkey: i32,
    o_custkey: i32,
    o_orderdate: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Lineitem {
    l_orderkey: i32,
    l_suppkey: i32,
    l_partkey: i32,
    l_extendedprice: f64,
    l_discount: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Supplier {
    s_suppkey: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Part {
    p_partkey: i32,
    p_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    l: Lineitem,
    p: Part,
    s: Supplier,
    o: Order,
    c: Customer,
    n: Nation,
    r: Region,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: &'static str,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    o_year: &'static str,
    mkt_share: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let region = vec![Region { r_regionkey: 0, r_name: "AMERICA" }];
    let nation = vec![Nation { n_nationkey: 10, n_regionkey: 0, n_name: "BRAZIL" }, Nation { n_nationkey: 20, n_regionkey: 0, n_name: "CANADA" }];
    let customer = vec![Customer { c_custkey: 1, c_nationkey: 10 }, Customer { c_custkey: 2, c_nationkey: 20 }];
    let orders = vec![Order { o_orderkey: 100, o_custkey: 1, o_orderdate: "1995-04-10" }, Order { o_orderkey: 200, o_custkey: 2, o_orderdate: "1995-07-15" }];
    let lineitem = vec![Lineitem { l_orderkey: 100, l_suppkey: 1000, l_partkey: 5000, l_extendedprice: 1000.0, l_discount: 0.1 }, Lineitem { l_orderkey: 200, l_suppkey: 2000, l_partkey: 5000, l_extendedprice: 500.0, l_discount: 0.05 }];
    let supplier = vec![Supplier { s_suppkey: 1000 }, Supplier { s_suppkey: 2000 }];
    let part = vec![Part { p_partkey: 5000, p_type: "ECONOMY ANODIZED STEEL" }, Part { p_partkey: 6000, p_type: "SMALL BRASS" }];
    let start_date = "1995-01-01";
    let end_date = "1996-12-31";
    let target_type = "ECONOMY ANODIZED STEEL";
    let target_nation = "BRAZIL";
    let result = { let mut tmp1 = std::collections::HashMap::new();for l in &lineitem { for p in &part { if !(p.p_partkey == l.l_partkey) { continue; } for s in &supplier { if !(s.s_suppkey == l.l_suppkey) { continue; } for o in &orders { if !(o.o_orderkey == l.l_orderkey) { continue; } for c in &customer { if !(c.c_custkey == o.o_custkey) { continue; } for n in &nation { if !(n.n_nationkey == c.c_nationkey) { continue; } for r in &region { if !(r.r_regionkey == n.n_regionkey) { continue; } if !((p.p_type == target_type && o.o_orderdate >= start_date && o.o_orderdate <= end_date && r.r_name == "AMERICA")) { continue; } let key = &o.o_orderdate[0..4]; tmp1.entry(key).or_insert_with(Vec::new).push(Item {l: l.clone(), p: p.clone(), s: s.clone(), o: o.clone(), c: c.clone(), n: n.clone(), r: r.clone() }); } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| (a.key).partial_cmp(&(b.key)).unwrap()); let mut result = Vec::new(); for year in tmp2 { result.push(Result { o_year: year.key, mkt_share: sum(&{ let mut tmp3 = Vec::new();for x in &year.clone().items { tmp3.push(match x.n.n_name == target_nation {true => x.l.l_extendedprice * ((1 as f64) - x.l.l_discount as f64), _ => 0.0, }); } tmp3 }) / sum(&{ let mut tmp4 = Vec::new();for x in &year.clone().items { tmp4.push(x.l.l_extendedprice * ((1 as f64) - x.l.l_discount as f64)); } tmp4 }) }); } result };
    _json(&result);
    let numerator = 1000.0 * 0.9;
    let denominator = numerator + (500.0 * 0.95);
    let share = numerator / denominator;
    assert!(result == vec![Result { o_year: "1995", mkt_share: share }]);
}
