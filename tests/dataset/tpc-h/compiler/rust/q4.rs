// Generated by Mochi compiler v0.10.25 on 2025-07-13T06:27:27Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Order {
    o_orderkey: i32,
    o_orderdate: &'static str,
    o_orderpriority: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Lineitem {
    l_orderkey: i32,
    l_commitdate: &'static str,
    l_receiptdate: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: &'static str,
    items: Vec<Order>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    o_orderpriority: &'static str,
    order_count: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let orders = vec![Order { o_orderkey: 1, o_orderdate: "1993-07-01", o_orderpriority: "1-URGENT" }, Order { o_orderkey: 2, o_orderdate: "1993-07-15", o_orderpriority: "2-HIGH" }, Order { o_orderkey: 3, o_orderdate: "1993-08-01", o_orderpriority: "3-NORMAL" }];
    let lineitem = vec![Lineitem { l_orderkey: 1, l_commitdate: "1993-07-10", l_receiptdate: "1993-07-12" }, Lineitem { l_orderkey: 1, l_commitdate: "1993-07-12", l_receiptdate: "1993-07-10" }, Lineitem { l_orderkey: 2, l_commitdate: "1993-07-20", l_receiptdate: "1993-07-25" }, Lineitem { l_orderkey: 3, l_commitdate: "1993-08-02", l_receiptdate: "1993-08-01" }, Lineitem { l_orderkey: 3, l_commitdate: "1993-08-05", l_receiptdate: "1993-08-10" }];
    let start_date = "1993-07-01";
    let end_date = "1993-08-01";
    let date_filtered_orders = { let mut tmp1 = Vec::new();for o in &orders { if !(o.o_orderdate >= start_date && o.o_orderdate < end_date) { continue; } tmp1.push(o.clone()); } tmp1 };
    let late_orders = { let mut tmp3 = Vec::new();for o in &date_filtered_orders { if !(({ let mut tmp2 = Vec::new();for l in &lineitem { if !(l.l_orderkey == o.o_orderkey && l.l_commitdate < l.l_receiptdate) { continue; } tmp2.push(l.clone()); } tmp2 }.len() > 0)) { continue; } tmp3.push(o.clone()); } tmp3 };
    let result = { let mut tmp4 = std::collections::HashMap::new();for o in &late_orders { let key = o.o_orderpriority; tmp4.entry(key).or_insert_with(Vec::new).push(o.clone()); } let mut tmp5 = Vec::<Group>::new(); for (k,v) in tmp4 { tmp5.push(Group { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp5.sort_by(|a,b| (a.key).partial_cmp(&(b.key)).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result { o_orderpriority: g.key, order_count: g.clone().items.len() as i32 }); } result };
    _json(&result);
    assert!(result == vec![Result { o_orderpriority: "1-URGENT", order_count: 1 }, Result { o_orderpriority: "2-HIGH", order_count: 1 }]);
}
