// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:34:46Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Supplier {
    s_suppkey: i32,
    s_name: &'static str,
    s_address: &'static str,
    s_comment: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Part {
    p_partkey: i32,
    p_brand: &'static str,
    p_type: &'static str,
    p_size: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Partsupp {
    ps_partkey: i32,
    ps_suppkey: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    s_name: &'static str,
    s_address: &'static str,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let supplier = vec![Supplier { s_suppkey: 100, s_name: "AlphaSupply", s_address: "123 Hilltop", s_comment: "Reliable and efficient" }, Supplier { s_suppkey: 200, s_name: "BetaSupply", s_address: "456 Riverside", s_comment: "Known for Customer Complaints" }];
    let part = vec![Part { p_partkey: 1, p_brand: "Brand#12", p_type: "SMALL ANODIZED", p_size: 5 }, Part { p_partkey: 2, p_brand: "Brand#23", p_type: "MEDIUM POLISHED", p_size: 10 }];
    let partsupp = vec![Partsupp { ps_partkey: 1, ps_suppkey: 100 }, Partsupp { ps_partkey: 2, ps_suppkey: 200 }];
    let excluded_suppliers = { let mut tmp1 = Vec::new();for ps in &partsupp { for p in &part { if !(p.p_partkey == ps.ps_partkey) { continue; } if !(p.p_brand == "Brand#12" && p.p_type.contains("SMALL") && p.p_size == 5) { continue; } tmp1.push(ps.ps_suppkey); } } tmp1 };
    let result = { let mut tmp2 = Vec::new();for s in &supplier { if !(!(excluded_suppliers.contains(&s.s_suppkey)) && (!s.s_comment.contains("Customer")) && (!s.s_comment.contains("Complaints"))) { continue; } let tmp3 = Result { s_name: s.s_name, s_address: s.s_address }; let tmp4 = s.s_name; tmp2.push((tmp4, tmp3)); } tmp2.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp5 = Vec::new(); for p in tmp2 { tmp5.push(p.1); } tmp5 };
    _json(&result);
    assert!(result == vec![]);
}
