// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:28:57Z
program Q11;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp13: Variant;
  _tmp14: string;
  _tmp15: integer;
  _tmp16: integer;
  _tmp17: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp20: specialize TArray<Variant>;
  _tmp21: specialize TArray<Variant>;
  _tmp22: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp23: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  filtered: specialize TArray<specialize TFPGMap<string, Variant>>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  n: specialize TFPGMap<string, Variant>;
  nation: specialize TArray<specialize TFPGMap<string, Variant>>;
  partsupp: specialize TArray<specialize TFPGMap<string, Variant>>;
  ps: specialize TFPGMap<string, Variant>;
  r: integer;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, integer>;
  supplier: specialize TArray<specialize TFPGMap<string, integer>>;
  target_nation: string;
  threshold: double;
  total: double;
  x: specialize TFPGMap<string, Variant>;

procedure test_Q11_returns_high_value_partkeys_from_GERMANY;
var
  _tmp24: specialize TFPGMap<string, Variant>;
  _tmp25: specialize TFPGMap<string, Variant>;
begin
  _tmp24 := specialize TFPGMap<string, Variant>.Create;
  _tmp24.AddOrSetData('ps_partkey', 1000);
  _tmp24.AddOrSetData('value', 2000);
  _tmp25 := specialize TFPGMap<string, Variant>.Create;
  _tmp25.AddOrSetData('ps_partkey', 2000);
  _tmp25.AddOrSetData('value', 50);
  if not ((_result = specialize TArray<_>([_tmp24, _tmp25]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('n_nationkey', 1);
  _tmp0.AddOrSetData('n_name', 'GERMANY');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('n_nationkey', 2);
  _tmp1.AddOrSetData('n_name', 'FRANCE');
  nation := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('s_suppkey', 100);
  _tmp2.AddOrSetData('s_nationkey', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('s_suppkey', 200);
  _tmp3.AddOrSetData('s_nationkey', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('s_suppkey', 300);
  _tmp4.AddOrSetData('s_nationkey', 2);
  supplier := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ps_partkey', 1000);
  _tmp5.AddOrSetData('ps_suppkey', 100);
  _tmp5.AddOrSetData('ps_supplycost', 10);
  _tmp5.AddOrSetData('ps_availqty', 100);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('ps_partkey', 1000);
  _tmp6.AddOrSetData('ps_suppkey', 200);
  _tmp6.AddOrSetData('ps_supplycost', 20);
  _tmp6.AddOrSetData('ps_availqty', 50);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('ps_partkey', 2000);
  _tmp7.AddOrSetData('ps_suppkey', 100);
  _tmp7.AddOrSetData('ps_supplycost', 5);
  _tmp7.AddOrSetData('ps_availqty', 10);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('ps_partkey', 3000);
  _tmp8.AddOrSetData('ps_suppkey', 300);
  _tmp8.AddOrSetData('ps_supplycost', 8);
  _tmp8.AddOrSetData('ps_availqty', 500);
  partsupp := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6, _tmp7, _tmp8]);
  target_nation := 'GERMANY';
  SetLength(_tmp9, 0);
  for ps in partsupp do
  begin
    for s in supplier do
    begin
      if not ((s.KeyData['s_suppkey'] = ps.KeyData['ps_suppkey'])) then continue;
      for n in nation do
      begin
        if not ((n.KeyData['n_nationkey'] = s.KeyData['s_nationkey'])) then continue;
        if not ((n.KeyData['n_name'] = target_nation)) then continue;
        _tmp10 := specialize TFPGMap<string, Variant>.Create;
        _tmp10.AddOrSetData('ps_partkey', ps.KeyData['ps_partkey']);
        _tmp10.AddOrSetData('value', ps.KeyData['ps_supplycost'] * ps.KeyData['ps_availqty']);
        _tmp9 := Concat(_tmp9, [_tmp10]);
      end;
    end;
  end;
  filtered := _tmp9;
  SetLength(_tmp11, 0);
  for x in filtered do
  begin
    _tmp11 := Concat(_tmp11, [x]);
  end;
  SetLength(_tmp12, 0);
  for x in _tmp11 do
  begin
    _tmp13 := x.KeyData['ps_partkey'];
    _tmp14 := VarToStr(_tmp13);
    _tmp15 := -1;
    for _tmp16 := 0 to High(_tmp12) do
      if VarToStr(_tmp12[_tmp16].Key) = _tmp14 then begin _tmp15 := _tmp16; Break; end;
    if _tmp15 = -1 then
    begin
      _tmp15 := Length(_tmp12);
      SetLength(_tmp12, _tmp15 + 1);
      _tmp12[_tmp15].Key := _tmp13;
      SetLength(_tmp12[_tmp15].Items, 0);
    end;
    SetLength(_tmp12[_tmp15].Items, Length(_tmp12[_tmp15].Items)+1);
    _tmp12[_tmp15].Items[High(_tmp12[_tmp15].Items)] := x;
  end;
  SetLength(_tmp18, 0);
  for _tmp17 in _tmp12 do
  begin
    _tmp19 := specialize TFPGMap<string, Variant>.Create;
    _tmp19.AddOrSetData('ps_partkey', g.key);
    SetLength(_tmp20, 0);
    for r in g do
    begin
      _tmp20 := Concat(_tmp20, [r.value]);
    end;
    _tmp19.AddOrSetData('value', specialize _sumList<Variant>(_tmp20));
    _tmp18 := Concat(_tmp18, [_tmp19]);
  end;
  grouped := _tmp18;
  SetLength(_tmp21, 0);
  for x in filtered do
  begin
    _tmp21 := Concat(_tmp21, [x.KeyData['value']]);
  end;
  total := specialize _sumList<Variant>(_tmp21);
  threshold := total * 0.0001;
  SetLength(_tmp22, 0);
  SetLength(_tmp23, 0);
  for x in grouped do
  begin
    if not ((x.KeyData['value'] > threshold)) then continue;
    _tmp22 := Concat(_tmp22, [x]);
    _tmp23 := Concat(_tmp23, [-x.KeyData['value']]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp22, _tmp23);
  _result := _tmp22;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q11_returns_high_value_partkeys_from_GERMANY;
end.
