// Generated by Mochi compiler v0.10.25 on 2025-07-13T17:28:57Z
program Q12;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _containsList<T>(arr: specialize TArray<T>; v: T): boolean;
var i: Integer;
begin
  Result := False;
  for i := 0 to High(arr) do
    if arr[i] = v then exit(True);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp5: specialize TArray<Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<integer>;
  l: specialize TFPGMap<string, Variant>;
  lineitem: specialize TArray<specialize TFPGMap<string, Variant>>;
  o: specialize TFPGMap<string, Variant>;
  orders: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_Q12_counts_lineitems_by_ship_mode_and_priority;
var
  _tmp11: specialize TFPGMap<string, Variant>;
begin
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('l_shipmode', 'MAIL');
  _tmp11.AddOrSetData('high_line_count', 1);
  _tmp11.AddOrSetData('low_line_count', 0);
  if not ((_result = specialize TArray<_>([_tmp11]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('o_orderkey', 1);
  _tmp0.AddOrSetData('o_orderpriority', '1-URGENT');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('o_orderkey', 2);
  _tmp1.AddOrSetData('o_orderpriority', '3-MEDIUM');
  orders := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('l_orderkey', 1);
  _tmp2.AddOrSetData('l_shipmode', 'MAIL');
  _tmp2.AddOrSetData('l_commitdate', '1994-02-10');
  _tmp2.AddOrSetData('l_receiptdate', '1994-02-15');
  _tmp2.AddOrSetData('l_shipdate', '1994-02-05');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('l_orderkey', 2);
  _tmp3.AddOrSetData('l_shipmode', 'SHIP');
  _tmp3.AddOrSetData('l_commitdate', '1994-03-01');
  _tmp3.AddOrSetData('l_receiptdate', '1994-02-28');
  _tmp3.AddOrSetData('l_shipdate', '1994-02-27');
  lineitem := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  SetLength(_tmp4, 0);
  SetLength(_tmp5, 0);
  for l in lineitem do
  begin
    for o in orders do
    begin
      if not ((o.KeyData['o_orderkey'] = l.KeyData['l_orderkey'])) then continue;
      if not (((((specialize _containsList<string>(specialize TArray<specialize TFPGMap<string, Variant>>(['MAIL', 'SHIP']), l.KeyData['l_shipmode']) and (l.KeyData['l_commitdate'] < l.KeyData['l_receiptdate'])) and (l.KeyData['l_shipdate'] < l.KeyData['l_commitdate'])) and (l.KeyData['l_receiptdate'] >= '1994-01-01')) and (l.KeyData['l_receiptdate'] < '1995-01-01'))) then continue;
      _tmp6 := specialize TFPGMap<string, Variant>.Create;
      _tmp6.AddOrSetData('l_shipmode', g.key);
      SetLength(_tmp7, 0);
      for x in g do
      begin
        if specialize _containsList<string>(specialize TArray<specialize TFPGMap<string, Variant>>(['1-URGENT', '2-HIGH']), x.o.o_orderpriority) then
        begin
          _tmp8 := 1;
        end else
        begin
          _tmp8 := 0;
        end;
        _tmp7 := Concat(_tmp7, [_tmp8]);
      end;
      _tmp6.AddOrSetData('high_line_count', specialize _sumList<integer>(_tmp7));
      SetLength(_tmp9, 0);
      for x in g do
      begin
        if not specialize _containsList<string>(specialize TArray<specialize TFPGMap<string, Variant>>(['1-URGENT', '2-HIGH']), x.o.o_orderpriority) then
        begin
          _tmp10 := 1;
        end else
        begin
          _tmp10 := 0;
        end;
        _tmp9 := Concat(_tmp9, [_tmp10]);
      end;
      _tmp6.AddOrSetData('low_line_count', specialize _sumList<integer>(_tmp9));
      _tmp4 := Concat(_tmp4, [_tmp6]);
      _tmp5 := Concat(_tmp5, [g.key]);
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp4, _tmp5);
  _result := _tmp4;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_Q12_counts_lineitems_by_ship_mode_and_priority;
end.
