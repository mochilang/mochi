" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:39Z
"
| end_date lineitem nation orders part partsupp prefix result start_date supplier |
nation := {Dictionary from: {'n_nationkey' -> 1. 'n_name' -> 'BRAZIL'}. Dictionary from: {'n_nationkey' -> 2. 'n_name' -> 'CANADA'}}.
supplier := {Dictionary from: {'s_suppkey' -> 100. 's_nationkey' -> 1}. Dictionary from: {'s_suppkey' -> 200. 's_nationkey' -> 2}}.
part := {Dictionary from: {'p_partkey' -> 1000. 'p_name' -> 'green metal box'}. Dictionary from: {'p_partkey' -> 2000. 'p_name' -> 'red plastic crate'}}.
partsupp := {Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 100. 'ps_supplycost' -> 10}. Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 200. 'ps_supplycost' -> 8}}.
orders := {Dictionary from: {'o_orderkey' -> 1. 'o_orderdate' -> '1995-02-10'}. Dictionary from: {'o_orderkey' -> 2. 'o_orderdate' -> '1997-01-01'}}.
lineitem := {Dictionary from: {'l_orderkey' -> 1. 'l_partkey' -> 1000. 'l_suppkey' -> 100. 'l_quantity' -> 5. 'l_extendedprice' -> 1000. 'l_discount' -> 0.1}. Dictionary from: {'l_orderkey' -> 2. 'l_partkey' -> 1000. 'l_suppkey' -> 200. 'l_quantity' -> 10. 'l_extendedprice' -> 800. 'l_discount' -> 0.05}}.
prefix := 'green'.
start_date := '1995-01-01'.
end_date := '1996-12-31'.
result := [ | groups res |
  groups := Dictionary new.
  lineitem do: [:l |
    part do: [:p |
      supplier do: [:s |
        partsupp do: [:ps |
          orders do: [:o |
            nation do: [:n |
              ((((((((((p.p_name copyFrom: 0 to: (prefix size)) = prefix) and: [(o.o_orderdate >= start_date)]) and: [(o.o_orderdate <= end_date)]) and: [(p.p_partkey = l.l_partkey)]) and: [(s.s_suppkey = l.l_suppkey)]) and: [((ps.ps_partkey = l.l_partkey) and: [(ps.ps_suppkey = l.l_suppkey)])]) and: [(o.o_orderkey = l.l_orderkey)]) and: [(n.n_nationkey = s.s_nationkey)])) ifTrue: [
                | g k |
                k := Dictionary from: {'nation' -> n.n_name. 'o_year' -> (o.o_orderdate copyFrom: 0 to: 4) asInteger}.
                g := groups at: k ifAbsentPut: [OrderedCollection new].
                g add: l.
              ]
            ]
          ]
        ]
      ]
    ]
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'nation' -> g.key.nation. 'o_year' -> (g.key.o_year asString). 'profit' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: ((x.l.l_extendedprice * (1 - x.l.l_discount)) - (x.ps.ps_supplycost * x.l.l_quantity)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])}.
  ].
  res := res asSortedCollection: [:a :b | {a.key.nation. -a.key.o_year} < {b.key.nation. -b.key.o_year}].
  res
] value.
json value: result.
