" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:38Z
"
| costs europe_nations europe_suppliers min_cost nation part partsupp region result supplier target_parts target_partsupp |
region := {Dictionary from: {'r_regionkey' -> 1. 'r_name' -> 'EUROPE'}. Dictionary from: {'r_regionkey' -> 2. 'r_name' -> 'ASIA'}}.
nation := {Dictionary from: {'n_nationkey' -> 10. 'n_regionkey' -> 1. 'n_name' -> 'FRANCE'}. Dictionary from: {'n_nationkey' -> 20. 'n_regionkey' -> 2. 'n_name' -> 'CHINA'}}.
supplier := {Dictionary from: {'s_suppkey' -> 100. 's_name' -> 'BestSupplier'. 's_address' -> '123 Rue'. 's_nationkey' -> 10. 's_phone' -> '123'. 's_acctbal' -> 1000. 's_comment' -> 'Fast and reliable'}. Dictionary from: {'s_suppkey' -> 200. 's_name' -> 'AltSupplier'. 's_address' -> '456 Way'. 's_nationkey' -> 20. 's_phone' -> '456'. 's_acctbal' -> 500. 's_comment' -> 'Slow'}}.
part := {Dictionary from: {'p_partkey' -> 1000. 'p_type' -> 'LARGE BRASS'. 'p_size' -> 15. 'p_mfgr' -> 'M1'}. Dictionary from: {'p_partkey' -> 2000. 'p_type' -> 'SMALL COPPER'. 'p_size' -> 15. 'p_mfgr' -> 'M2'}}.
partsupp := {Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 100. 'ps_supplycost' -> 10}. Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 200. 'ps_supplycost' -> 15}}.
europe_nations := [ | tmp |
  tmp := OrderedCollection new.
  region do: [:r |
    nation do: [:n |
      (((r.r_name = 'EUROPE') and: [(n.n_regionkey = r.r_regionkey)])) ifTrue: [
        tmp add: n.
      ].
    ].
  ].
  tmp
] value.
europe_suppliers := [ | tmp |
  tmp := OrderedCollection new.
  supplier do: [:s |
    europe_nations do: [:n |
      ((s.s_nationkey = n.n_nationkey)) ifTrue: [
        tmp add: Dictionary from: {'s' -> s. 'n' -> n}.
      ].
    ].
  ].
  tmp
] value.
target_parts := [ | tmp |
  tmp := OrderedCollection new.
  part do: [:p |
    (((p.p_size = 15) and: [(p.p_type = 'LARGE BRASS')])) ifTrue: [
      tmp add: p.
    ].
  ].
  tmp
] value.
target_partsupp := [ | tmp |
  tmp := OrderedCollection new.
  partsupp do: [:ps |
    target_parts do: [:p |
      europe_suppliers do: [:s |
        (((ps.ps_partkey = p.p_partkey) and: [(ps.ps_suppkey = s.s.s_suppkey)])) ifTrue: [
          tmp add: Dictionary from: {'s_acctbal' -> s.s.s_acctbal. 's_name' -> s.s.s_name. 'n_name' -> s.n.n_name. 'p_partkey' -> p.p_partkey. 'p_mfgr' -> p.p_mfgr. 's_address' -> s.s.s_address. 's_phone' -> s.s.s_phone. 's_comment' -> s.s.s_comment. 'ps_supplycost' -> ps.ps_supplycost}.
        ].
      ].
    ].
  ].
  tmp
] value.
costs := [ | tmp |
  tmp := OrderedCollection new.
  target_partsupp do: [:x |
    tmp add: x.ps_supplycost.
  ].
  tmp
] value.
min_cost := (costs min).
result := [ | tmp |
  tmp := OrderedCollection new.
  target_partsupp do: [:x |
    ((x.ps_supplycost = min_cost)) ifTrue: [
      tmp add: x.
    ].
  ].
  tmp := tmp asSortedCollection: [:a :b | -a.s_acctbal < -b.s_acctbal].
  tmp
] value.
json value: result.
