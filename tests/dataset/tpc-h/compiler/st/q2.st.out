Smalltalk at: #costs put: nil.
Smalltalk at: #europe_nations put: nil.
Smalltalk at: #europe_suppliers put: nil.
Smalltalk at: #min_cost put: nil.
Smalltalk at: #nation put: nil.
Smalltalk at: #part put: nil.
Smalltalk at: #partsupp put: nil.
Smalltalk at: #region put: nil.
Smalltalk at: #result put: nil.
Smalltalk at: #supplier put: nil.
Smalltalk at: #target_parts put: nil.
Smalltalk at: #target_partsupp put: nil.

Object subclass: #Main instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: nil!

!Main class methodsFor: 'tests'!
test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part
    ((result = Array with: (Dictionary from: {'s_acctbal' -> 1000.000000. 's_name' -> 'BestSupplier'. 'n_name' -> 'FRANCE'. 'p_partkey' -> 1000. 'p_mfgr' -> 'M1'. 's_address' -> '123 Rue'. 's_phone' -> '123'. 's_comment' -> 'Fast and reliable'. 'ps_supplycost' -> 10.000000}))) ifFalse: [ self error: 'expect failed' ]
!

!Main class methodsFor: 'runtime'!
__min: v
    (v respondsTo: #do:) ifFalse: [ ^ self error: 'min() expects collection' ]
    | m |
    m := nil.
    v do: [:it | m isNil ifTrue: [ m := it ] ifFalse: [ (it < m) ifTrue: [ m := it ] ] ].
    ^ m
!
!!
region := Array with: (Dictionary from: {'r_regionkey' -> 1. 'r_name' -> 'EUROPE'}) with: (Dictionary from: {'r_regionkey' -> 2. 'r_name' -> 'ASIA'}).
nation := Array with: (Dictionary from: {'n_nationkey' -> 10. 'n_regionkey' -> 1. 'n_name' -> 'FRANCE'}) with: (Dictionary from: {'n_nationkey' -> 20. 'n_regionkey' -> 2. 'n_name' -> 'CHINA'}).
supplier := Array with: (Dictionary from: {'s_suppkey' -> 100. 's_name' -> 'BestSupplier'. 's_address' -> '123 Rue'. 's_nationkey' -> 10. 's_phone' -> '123'. 's_acctbal' -> 1000.000000. 's_comment' -> 'Fast and reliable'}) with: (Dictionary from: {'s_suppkey' -> 200. 's_name' -> 'AltSupplier'. 's_address' -> '456 Way'. 's_nationkey' -> 20. 's_phone' -> '456'. 's_acctbal' -> 500.000000. 's_comment' -> 'Slow'}).
part := Array with: (Dictionary from: {'p_partkey' -> 1000. 'p_type' -> 'LARGE BRASS'. 'p_size' -> 15. 'p_mfgr' -> 'M1'}) with: (Dictionary from: {'p_partkey' -> 2000. 'p_type' -> 'SMALL COPPER'. 'p_size' -> 15. 'p_mfgr' -> 'M2'}).
partsupp := Array with: (Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 100. 'ps_supplycost' -> 10.000000}) with: (Dictionary from: {'ps_partkey' -> 1000. 'ps_suppkey' -> 200. 'ps_supplycost' -> 15.000000}).
europe_nations := ((| res |
res := OrderedCollection new.
((region) select: [:r | ((r at: 'r_name' = 'EUROPE') and: [(n at: 'n_regionkey' = r at: 'r_regionkey')])]) do: [:r |
    (nation) do: [:n |
        res add: n.
    ]
]
res := res asArray.
res)).
europe_suppliers := ((| res |
res := OrderedCollection new.
((supplier) select: [:s | (s at: 's_nationkey' = n at: 'n_nationkey')]) do: [:s |
    (europe_nations) do: [:n |
        res add: Dictionary from: {'s' -> s. 'n' -> n}.
    ]
]
res := res asArray.
res)).
target_parts := ((| res |
res := OrderedCollection new.
((part) select: [:p | (((p at: 'p_size' = 15) and: [p at: 'p_type']) = 'LARGE BRASS')]) do: [:p |
    res add: p.
]
res := res asArray.
res)).
target_partsupp := ((| res |
res := OrderedCollection new.
((partsupp) select: [:ps | ((ps at: 'ps_partkey' = p at: 'p_partkey') and: [(ps at: 'ps_suppkey' = s at: 's' at: 's_suppkey')])]) do: [:ps |
    (target_parts) do: [:p |
        (europe_suppliers) do: [:s |
            res add: Dictionary from: {'s_acctbal' -> s at: 's' at: 's_acctbal'. 's_name' -> s at: 's' at: 's_name'. 'n_name' -> s at: 'n' at: 'n_name'. 'p_partkey' -> p at: 'p_partkey'. 'p_mfgr' -> p at: 'p_mfgr'. 's_address' -> s at: 's' at: 's_address'. 's_phone' -> s at: 's' at: 's_phone'. 's_comment' -> s at: 's' at: 's_comment'. 'ps_supplycost' -> ps at: 'ps_supplycost'}.
        ]
    ]
]
res := res asArray.
res)).
costs := ((| res |
res := OrderedCollection new.
(target_partsupp) do: [:x |
    res add: x at: 'ps_supplycost'.
]
res := res asArray.
res)).
min_cost := (Main __min: costs).
result := ((| res |
res := OrderedCollection new.
((target_partsupp) select: [:x | (x at: 'ps_supplycost' = min_cost)]) do: [:x |
    res add: { (x at: 's_acctbal' negated) . x }.
]
res := res asArray.
res := (SortedCollection sortBlock: [:a :b | a first <= b first ]) withAll: res; asArray.
res := res collect: [:p | p second].
res)).
(result toJSON) displayOn: Transcript. Transcript cr.
Main test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part.
