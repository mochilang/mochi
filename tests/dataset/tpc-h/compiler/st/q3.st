" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:38Z
"
| building_customers customer cutoff lineitem order_line_join orders segment valid_lineitems valid_orders |
customer := {Dictionary from: {'c_custkey' -> 1. 'c_mktsegment' -> 'BUILDING'}. Dictionary from: {'c_custkey' -> 2. 'c_mktsegment' -> 'AUTOMOBILE'}}.
orders := {Dictionary from: {'o_orderkey' -> 100. 'o_custkey' -> 1. 'o_orderdate' -> '1995-03-14'. 'o_shippriority' -> 1}. Dictionary from: {'o_orderkey' -> 200. 'o_custkey' -> 2. 'o_orderdate' -> '1995-03-10'. 'o_shippriority' -> 2}}.
lineitem := {Dictionary from: {'l_orderkey' -> 100. 'l_extendedprice' -> 1000. 'l_discount' -> 0.05. 'l_shipdate' -> '1995-03-16'}. Dictionary from: {'l_orderkey' -> 100. 'l_extendedprice' -> 500. 'l_discount' -> 0. 'l_shipdate' -> '1995-03-20'}. Dictionary from: {'l_orderkey' -> 200. 'l_extendedprice' -> 1000. 'l_discount' -> 0.1. 'l_shipdate' -> '1995-03-14'}}.
cutoff := '1995-03-15'.
segment := 'BUILDING'.
building_customers := [ | tmp |
  tmp := OrderedCollection new.
  customer do: [:c |
    ((c.c_mktsegment = segment)) ifTrue: [
      tmp add: c.
    ].
  ].
  tmp
] value.
valid_orders := [ | tmp |
  tmp := OrderedCollection new.
  orders do: [:o |
    building_customers do: [:c |
      (((o.o_orderdate < cutoff) and: [(o.o_custkey = c.c_custkey)])) ifTrue: [
        tmp add: o.
      ].
    ].
  ].
  tmp
] value.
valid_lineitems := [ | tmp |
  tmp := OrderedCollection new.
  lineitem do: [:l |
    ((l.l_shipdate > cutoff)) ifTrue: [
      tmp add: l.
    ].
  ].
  tmp
] value.
order_line_join := [ | groups res |
  groups := Dictionary new.
  valid_orders do: [:o |
    valid_lineitems do: [:l |
      ((l.l_orderkey = o.o_orderkey)) ifTrue: [
        | g k |
        k := Dictionary from: {'o_orderkey' -> o.o_orderkey. 'o_orderdate' -> o.o_orderdate. 'o_shippriority' -> o.o_shippriority}.
        g := groups at: k ifAbsentPut: [OrderedCollection new].
        g add: o.
      ]
    ]
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'l_orderkey' -> g.key.o_orderkey. 'revenue' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:r |
    tmp add: (r.l.l_extendedprice * (1 - r.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'o_orderdate' -> g.key.o_orderdate. 'o_shippriority' -> g.key.o_shippriority}.
  ].
  res := res asSortedCollection: [:a :b | {-([ | tmp |
  tmp := OrderedCollection new.
  a do: [:r |
    tmp add: (r.l.l_extendedprice * (1 - r.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). a.key.o_orderdate} < {-([ | tmp |
  tmp := OrderedCollection new.
  b do: [:r |
    tmp add: (r.l.l_extendedprice * (1 - r.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). b.key.o_orderdate}].
  res
] value.
json value: order_line_join.
