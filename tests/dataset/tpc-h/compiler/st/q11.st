" Generated by Mochi compiler v0.10.25 on 2025-07-13T17:00:37Z
"
| nation supplier partsupp target_nation filtered grouped total threshold result |
nation := {Dictionary from:{'n_nationkey'->1. 'n_name'->'GERMANY'}. Dictionary from:{'n_nationkey'->2. 'n_name'->'FRANCE'}}.
supplier := {Dictionary from:{'s_suppkey'->100. 's_nationkey'->1}. Dictionary from:{'s_suppkey'->200. 's_nationkey'->1}. Dictionary from:{'s_suppkey'->300. 's_nationkey'->2}}.
partsupp := {Dictionary from:{'ps_partkey'->1000. 'ps_suppkey'->100. 'ps_supplycost'->10. 'ps_availqty'->100}. Dictionary from:{'ps_partkey'->1000. 'ps_suppkey'->200. 'ps_supplycost'->20. 'ps_availqty'->50}. Dictionary from:{'ps_partkey'->2000. 'ps_suppkey'->100. 'ps_supplycost'->5. 'ps_availqty'->10}. Dictionary from:{'ps_partkey'->3000. 'ps_suppkey'->300. 'ps_supplycost'->8. 'ps_availqty'->500}}.
target_nation := 'GERMANY'.
filtered := [ | tmp |
  tmp := OrderedCollection new.
  partsupp do: [:ps |
    supplier do: [:s |
      nation do: [:n |
        (((((n at: 'n_name') = target_nation) and: [(s.s_suppkey = ps.ps_suppkey)]) and: [(n.n_nationkey = s.s_nationkey)])) ifTrue: [
          tmp add: Dictionary from:{'ps_partkey'->(ps at: 'ps_partkey'). 'value'->(((ps at: 'ps_supplycost') * (ps at: 'ps_availqty')))}.
        ].
      ].
    ].
  ].
  tmp
] value.
grouped := [ | groups tmp |
  groups := Dictionary new.
  tmp := OrderedCollection new.
  filtered do: [:x |
    | g |
    g := groups at: (x at: 'ps_partkey') ifAbsentPut:[OrderedCollection new].
    g add: Dictionary from:{#x->x}.
  ].
  groups keysAndValuesDo: [:k :grp |
    | g |
    g := Dictionary from:{'key'->k. 'items'->grp}.
    tmp add: Dictionary from:{'ps_partkey'->g.key. 'value'->(([ | tmp |
  tmp := OrderedCollection new.
  g do: [:r |
    tmp add: r at: 'value'.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]))}.
  ].
  tmp
] value.
total := ([ | tmp |
  tmp := OrderedCollection new.
  filtered do: [:x |
    tmp add: x at: 'value'.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]).
threshold := (total * 0.0001).
result := [ | tmp |
  tmp := OrderedCollection new.
  grouped do: [:x |
    (((x at: 'value') > threshold)) ifTrue: [
      tmp add: x.
    ].
  ].
  tmp := tmp asSortedCollection: [:a :b | -(a at: 'value') < -(b at: 'value')].
  tmp
] value.
json value: result.
((result = ({Dictionary from:{'ps_partkey'->1000. 'value'->2000}. Dictionary from:{'ps_partkey'->2000. 'value'->50}}))) ifTrue: [Transcript show:'ok'; cr] ifFalse: [Transcript show:'fail'; cr].
