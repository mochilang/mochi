" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:38Z
"
| lineitem result |
lineitem := {Dictionary from: {'l_quantity' -> 17. 'l_extendedprice' -> 1000. 'l_discount' -> 0.05. 'l_tax' -> 0.07. 'l_returnflag' -> 'N'. 'l_linestatus' -> 'O'. 'l_shipdate' -> '1998-08-01'}. Dictionary from: {'l_quantity' -> 36. 'l_extendedprice' -> 2000. 'l_discount' -> 0.1. 'l_tax' -> 0.05. 'l_returnflag' -> 'N'. 'l_linestatus' -> 'O'. 'l_shipdate' -> '1998-09-01'}. Dictionary from: {'l_quantity' -> 25. 'l_extendedprice' -> 1500. 'l_discount' -> 0. 'l_tax' -> 0.08. 'l_returnflag' -> 'R'. 'l_linestatus' -> 'F'. 'l_shipdate' -> '1998-09-03'}}.
result := [ | groups res |
  groups := Dictionary new.
  lineitem do: [:row |
    ((row.l_shipdate <= '1998-09-02')) ifTrue: [
      | g k |
      k := Dictionary from: {'returnflag' -> row.l_returnflag. 'linestatus' -> row.l_linestatus}.
      g := groups at: k ifAbsentPut: [OrderedCollection new].
      g add: row.
    ]
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'returnflag' -> g.key.returnflag. 'linestatus' -> g.key.linestatus. 'sum_qty' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_quantity.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'sum_base_price' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_extendedprice.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'sum_disc_price' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: (x.l_extendedprice * (1 - x.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'sum_charge' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: ((x.l_extendedprice * (1 - x.l_discount)) * (1 + x.l_tax)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'avg_qty' -> (([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_quantity.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) / [ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_quantity.
  ].
  tmp
] value size). 'avg_price' -> (([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_extendedprice.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) / [ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_extendedprice.
  ].
  tmp
] value size). 'avg_disc' -> (([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_discount.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) / [ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.l_discount.
  ].
  tmp
] value size). 'count_order' -> (g size)}.
  ].
  res
] value.
json value: result.
