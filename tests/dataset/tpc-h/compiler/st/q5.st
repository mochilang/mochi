" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:38Z
"
| asia_nations customer lineitem local_customer_supplier_orders nation orders region result supplier |
region := {Dictionary from: {'r_regionkey' -> 0. 'r_name' -> 'ASIA'}. Dictionary from: {'r_regionkey' -> 1. 'r_name' -> 'EUROPE'}}.
nation := {Dictionary from: {'n_nationkey' -> 10. 'n_regionkey' -> 0. 'n_name' -> 'JAPAN'}. Dictionary from: {'n_nationkey' -> 20. 'n_regionkey' -> 0. 'n_name' -> 'INDIA'}. Dictionary from: {'n_nationkey' -> 30. 'n_regionkey' -> 1. 'n_name' -> 'FRANCE'}}.
customer := {Dictionary from: {'c_custkey' -> 1. 'c_nationkey' -> 10}. Dictionary from: {'c_custkey' -> 2. 'c_nationkey' -> 20}}.
supplier := {Dictionary from: {'s_suppkey' -> 100. 's_nationkey' -> 10}. Dictionary from: {'s_suppkey' -> 200. 's_nationkey' -> 20}}.
orders := {Dictionary from: {'o_orderkey' -> 1000. 'o_custkey' -> 1. 'o_orderdate' -> '1994-03-15'}. Dictionary from: {'o_orderkey' -> 2000. 'o_custkey' -> 2. 'o_orderdate' -> '1994-06-10'}. Dictionary from: {'o_orderkey' -> 3000. 'o_custkey' -> 2. 'o_orderdate' -> '1995-01-01'}}.
lineitem := {Dictionary from: {'l_orderkey' -> 1000. 'l_suppkey' -> 100. 'l_extendedprice' -> 1000. 'l_discount' -> 0.05}. Dictionary from: {'l_orderkey' -> 2000. 'l_suppkey' -> 200. 'l_extendedprice' -> 800. 'l_discount' -> 0.1}. Dictionary from: {'l_orderkey' -> 3000. 'l_suppkey' -> 200. 'l_extendedprice' -> 900. 'l_discount' -> 0.05}}.
asia_nations := [ | tmp |
  tmp := OrderedCollection new.
  region do: [:r |
    nation do: [:n |
      (((r.r_name = 'ASIA') and: [(n.n_regionkey = r.r_regionkey)])) ifTrue: [
        tmp add: n.
      ].
    ].
  ].
  tmp
] value.
local_customer_supplier_orders := [ | tmp |
  tmp := OrderedCollection new.
  customer do: [:c |
    asia_nations do: [:n |
      orders do: [:o |
        lineitem do: [:l |
          supplier do: [:s |
            ((((((((o.o_orderdate >= '1994-01-01') and: [(o.o_orderdate < '1995-01-01')]) and: [(s.s_nationkey = c.c_nationkey)]) and: [(c.c_nationkey = n.n_nationkey)]) and: [(o.o_custkey = c.c_custkey)]) and: [(l.l_orderkey = o.o_orderkey)]) and: [(s.s_suppkey = l.l_suppkey)])) ifTrue: [
              tmp add: Dictionary from: {'nation' -> n.n_name. 'revenue' -> (l.l_extendedprice * (1 - l.l_discount))}.
            ].
          ].
        ].
      ].
    ].
  ].
  tmp
] value.
result := [ | groups res |
  groups := Dictionary new.
  local_customer_supplier_orders do: [:r |
    | g k |
    k := r.nation.
    g := groups at: k ifAbsentPut: [OrderedCollection new].
    g add: r.
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'n_name' -> g.key. 'revenue' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.revenue.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])}.
  ].
  res := res asSortedCollection: [:a :b | -([ | tmp |
  tmp := OrderedCollection new.
  a do: [:x |
    tmp add: x.revenue.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) < -([ | tmp |
  tmp := OrderedCollection new.
  b do: [:x |
    tmp add: x.revenue.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])].
  res
] value.
json value: result.
