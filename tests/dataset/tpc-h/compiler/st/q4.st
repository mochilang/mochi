" Generated by Mochi compiler v0.10.25 on 2025-07-13T14:25:38Z
"
| date_filtered_orders end_date late_orders lineitem orders result start_date |
orders := {Dictionary from: {'o_orderkey' -> 1. 'o_orderdate' -> '1993-07-01'. 'o_orderpriority' -> '1-URGENT'}. Dictionary from: {'o_orderkey' -> 2. 'o_orderdate' -> '1993-07-15'. 'o_orderpriority' -> '2-HIGH'}. Dictionary from: {'o_orderkey' -> 3. 'o_orderdate' -> '1993-08-01'. 'o_orderpriority' -> '3-NORMAL'}}.
lineitem := {Dictionary from: {'l_orderkey' -> 1. 'l_commitdate' -> '1993-07-10'. 'l_receiptdate' -> '1993-07-12'}. Dictionary from: {'l_orderkey' -> 1. 'l_commitdate' -> '1993-07-12'. 'l_receiptdate' -> '1993-07-10'}. Dictionary from: {'l_orderkey' -> 2. 'l_commitdate' -> '1993-07-20'. 'l_receiptdate' -> '1993-07-25'}. Dictionary from: {'l_orderkey' -> 3. 'l_commitdate' -> '1993-08-02'. 'l_receiptdate' -> '1993-08-01'}. Dictionary from: {'l_orderkey' -> 3. 'l_commitdate' -> '1993-08-05'. 'l_receiptdate' -> '1993-08-10'}}.
start_date := '1993-07-01'.
end_date := '1993-08-01'.
date_filtered_orders := [ | tmp |
  tmp := OrderedCollection new.
  orders do: [:o |
    (((o.o_orderdate >= start_date) and: [(o.o_orderdate < end_date)])) ifTrue: [
      tmp add: o.
    ].
  ].
  tmp
] value.
late_orders := [ | tmp |
  tmp := OrderedCollection new.
  date_filtered_orders do: [:o |
    (exists value: [ | tmp |
  tmp := OrderedCollection new.
  lineitem do: [:l |
    (((l.l_orderkey = o.o_orderkey) and: [(l.l_commitdate < l.l_receiptdate)])) ifTrue: [
      tmp add: l.
    ].
  ].
  tmp
] value) ifTrue: [
      tmp add: o.
    ].
  ].
  tmp
] value.
result := [ | groups res |
  groups := Dictionary new.
  late_orders do: [:o |
    | g k |
    k := o.o_orderpriority.
    g := groups at: k ifAbsentPut: [OrderedCollection new].
    g add: o.
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'o_orderpriority' -> g.key. 'order_count' -> (g size)}.
  ].
  res := res asSortedCollection: [:a :b | a.key < b.key].
  res
] value.
json value: result.
