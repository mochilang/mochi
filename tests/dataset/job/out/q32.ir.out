func main (regs=129)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "10,000-mile-club"}, {"id": 2, "keyword": "character-name-in-title"}]
  // let link_type = [
  Const        r1, [{"id": 1, "link": "sequel"}, {"id": 2, "link": "remake"}]
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
  // let movie_link = [
  Const        r3, [{"link_type_id": 1, "linked_movie_id": 300, "movie_id": 100}, {"link_type_id": 2, "linked_movie_id": 400, "movie_id": 200}]
  // let title = [
  Const        r4, [{"id": 100, "title": "Movie A"}, {"id": 200, "title": "Movie B"}, {"id": 300, "title": "Movie C"}, {"id": 400, "title": "Movie D"}]
  // from k in keyword
  Const        r5, []
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // from k in keyword
  IterPrep     r12, r0
  Len          r13, r12
  Const        r15, 0
  Move         r14, r15
  LessInt      r16, r14, r13
L11:
  JumpIfFalse  r16, L0
  Index        r17, r12, r14
  Move         r18, r17
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r19, r2
  Len          r20, r19
  Const        r21, "keyword_id"
  Const        r22, "id"
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // join mk in movie_keyword on mk.keyword_id == k.id
  Const        r15, 0
  Move         r23, r15
  LessInt      r24, r23, r20
  JumpIfFalse  r24, L1
L10:
  Index        r25, r19, r23
  Move         r26, r25
  Const        r21, "keyword_id"
  Index        r27, r26, r21
  Const        r22, "id"
  Index        r28, r18, r22
  Equal        r29, r27, r28
  JumpIfFalse  r29, L2
  // join t1 in title on t1.id == mk.movie_id
  IterPrep     r30, r4
  Len          r31, r30
  Const        r22, "id"
  Const        r32, "movie_id"
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // join t1 in title on t1.id == mk.movie_id
  Const        r15, 0
  Move         r33, r15
  LessInt      r34, r33, r31
  JumpIfFalse  r34, L2
  Index        r35, r30, r33
L9:
  Move         r36, r35
  Const        r22, "id"
  Index        r37, r36, r22
  Const        r32, "movie_id"
  Index        r38, r26, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r40, r3
  Len          r41, r40
  Const        r32, "movie_id"
  Const        r22, "id"
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // join ml in movie_link on ml.movie_id == t1.id
  Const        r15, 0
  Move         r42, r15
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L3
  Index        r44, r40, r42
  Move         r45, r44
L8:
  Const        r32, "movie_id"
  Index        r46, r45, r32
  Const        r22, "id"
  Index        r47, r36, r22
  Equal        r48, r46, r47
  JumpIfFalse  r48, L4
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r49, r4
  Len          r50, r49
  Const        r22, "id"
  Const        r51, "linked_movie_id"
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // join t2 in title on t2.id == ml.linked_movie_id
  Const        r15, 0
  Move         r52, r15
  LessInt      r53, r52, r50
  JumpIfFalse  r53, L4
  Index        r54, r49, r52
  Move         r55, r54
  Const        r22, "id"
  Index        r56, r55, r22
  Const        r51, "linked_movie_id"
  Index        r57, r45, r51
  Equal        r58, r56, r57
  JumpIfFalse  r58, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r59, r1
  Len          r60, r59
  Const        r22, "id"
  Const        r61, "link_type_id"
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r15, 0
  Move         r62, r15
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L5
  Index        r64, r59, r62
  Move         r65, r64
  Const        r22, "id"
  Index        r66, r65, r22
L7:
  Const        r61, "link_type_id"
  Index        r67, r45, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L6
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  Index        r69, r18, r6
  Const        r70, "10,000-mile-club"
  Equal        r71, r69, r70
  JumpIfFalse  r71, L6
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r72, "link_type"
  Const        r8, "link"
  Index        r73, r65, r8
  Const        r74, "first_movie"
  Const        r10, "title"
  Index        r75, r36, r10
  Const        r76, "second_movie"
  Index        r77, r55, r10
  Move         r78, r72
  Move         r79, r73
  Move         r80, r74
  Move         r81, r75
  Move         r82, r76
  Move         r83, r77
  MakeMap      r84, 3, r78
  // from k in keyword
  Append       r85, r5, r84
  Move         r5, r85
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r86, 1
  Add          r62, r62, r86
  Jump         L7
L6:
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r42, r42, r86
  Jump         L8
L5:
  // join t1 in title on t1.id == mk.movie_id
  Add          r33, r33, r86
  Jump         L9
L4:
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r23, r23, r86
  Jump         L10
L3:
  // from k in keyword
  AddInt       r14, r14, r86
  Jump         L11
L2:
  // link_type: min(from r in joined select r.link_type),
  Const        r88, []
  Const        r7, "link_type"
  IterPrep     r89, r5
L1:
  Len          r90, r89
  Const        r15, 0
  Move         r91, r15
L0:
  LessInt      r92, r91, r90
  JumpIfFalse  r92, L12
  Index        r93, r89, r91
  Move         r94, r93
  Const        r7, "link_type"
  Index        r95, r94, r7
  Append       r96, r88, r95
L13:
  Move         r88, r96
  Const        r86, 1
  AddInt       r91, r91, r86
  Jump         L13
L12:
  // first_movie: min(from r in joined select r.first_movie),
  Move         r102, r15
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L14
  Index        r104, r100, r102
  Move         r94, r104
  Const        r9, "first_movie"
  Index        r105, r94, r9
  Append       r106, r99, r105
L15:
  Move         r99, r106
  Const        r86, 1
  AddInt       r102, r102, r86
  Jump         L15
L14:
  // second_movie: min(from r in joined select r.second_movie)
  Move         r112, r15
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L16
  Index        r114, r110, r112
  Move         r94, r114
  Const        r11, "second_movie"
  Index        r115, r94, r11
  Append       r116, r109, r115
L17:
  Move         r109, r116
  Const        r86, 1
  AddInt       r112, r112, r86
  Jump         L17
L16:
  // let result = {
  MakeMap      r124, 3, r118
  // json([result])
  Move         r125, r124
  MakeList     r126, 1, r125
  JSON         r126
  // expect result == {
  Const        r127, {"first_movie": "Movie A", "link_type": "sequel", "second_movie": "Movie C"}
  Equal        r128, r124, r127
  Expect       r128
  Return       r0
