func main (regs=40)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "10,000-mile-club"}, {"id": 2, "keyword": "character-name-in-title"}]
  // let link_type = [
  Const        r1, [{"id": 1, "link": "sequel"}, {"id": 2, "link": "remake"}]
L4:
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
  // let movie_link = [
  Const        r3, [{"link_type_id": 1, "linked_movie_id": 300, "movie_id": 100}, {"link_type_id": 2, "linked_movie_id": 400, "movie_id": 200}]
  // let title = [
  Const        r4, [{"id": 100, "title": "Movie A"}, {"id": 200, "title": "Movie B"}, {"id": 300, "title": "Movie C"}, {"id": 400, "title": "Movie D"}]
  // from k in keyword
  Const        r5, []
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
L6:
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // from k in keyword
  IterPrep     r12, r0
L3:
  Len          r13, r12
  Const        r14, 0
  Move         r15, r14
L5:
  LessInt      r16, r15, r13
  JumpIfFalse  r16, L0
  Index        r13, r12, r15
  Move         r12, r13
L1:
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r13, r2
L2:
  Len          r2, r13
  Const        r17, "keyword_id"
  Const        r18, "id"
L0:
  Move         r19, r14
  LessInt      r20, r19, r2
  JumpIfFalse  r20, L1
  Index        r2, r13, r19
  Move         r20, r2
L7:
  Index        r13, r20, r17
  Index        r17, r12, r18
L8:
  Equal        r21, r13, r17
  JumpIfFalse  r21, L2
  // join t1 in title on t1.id == mk.movie_id
  IterPrep     r13, r4
  Len          r17, r13
  Const        r21, "movie_id"
  Move         r22, r14
  LessInt      r23, r22, r17
  JumpIfFalse  r23, L2
  Index        r17, r13, r22
  Move         r23, r17
  Index        r13, r23, r18
  Index        r17, r20, r21
  Equal        r20, r13, r17
  JumpIfFalse  r20, L3
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r17, r3
  Len          r20, r17
  Move         r3, r14
  LessInt      r24, r3, r20
  JumpIfFalse  r24, L3
  Index        r20, r17, r3
  Move         r24, r20
  Index        r17, r24, r21
  Index        r20, r23, r18
  Equal        r21, r17, r20
  JumpIfFalse  r21, L4
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r17, r4
  Len          r20, r17
  Const        r4, "linked_movie_id"
  Move         r25, r14
  LessInt      r26, r25, r20
  JumpIfFalse  r26, L4
  Index        r20, r17, r25
  Move         r26, r20
  Index        r17, r26, r18
  Index        r20, r24, r4
  Equal        r4, r17, r20
  JumpIfFalse  r4, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r17, r1
  Len          r20, r17
  Const        r4, "link_type_id"
  Move         r1, r14
  LessInt      r27, r1, r20
  JumpIfFalse  r27, L5
  Index        r27, r17, r1
  Move         r17, r27
  Index        r27, r17, r18
  Index        r18, r24, r4
  Equal        r24, r27, r18
  JumpIfFalse  r24, L6
  // where k.keyword == "10,000-mile-club"
  Index        r4, r12, r6
  Const        r27, "10,000-mile-club"
  Equal        r18, r4, r27
  JumpIfFalse  r18, L6
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r24, "link_type"
  Index        r6, r17, r8
  Const        r12, "first_movie"
  Index        r4, r23, r10
  Const        r27, "second_movie"
  Index        r18, r26, r10
  Move         r28, r24
  Move         r29, r6
  Move         r30, r12
  Move         r31, r4
  Move         r32, r27
  Move         r33, r18
  MakeMap      r8, 3, r28
  // from k in keyword
  Append       r17, r5, r8
  Move         r5, r17
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r23, 1
  Add          r1, r1, r23
  Jump         L0
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r25, r25, r23
  Jump         L1
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r3, r3, r23
  Jump         L2
  // join t1 in title on t1.id == mk.movie_id
  Add          r22, r22, r23
  Jump         L3
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r19, r19, r23
  Jump         L4
  // from k in keyword
  AddInt       r15, r15, r23
  Jump         L5
  // link_type: min(from r in joined select r.link_type),
  Const        r10, "link_type"
  Const        r26, []
  IterPrep     r6, r5
  Len          r12, r6
  Move         r4, r14
  LessInt      r27, r4, r12
  JumpIfFalse  r27, L7
  Index        r18, r6, r4
  Move         r28, r18
  Index        r29, r28, r7
  Append       r30, r26, r29
  Move         r26, r30
  AddInt       r4, r4, r23
  Jump         L8
  Min          r32, r26
  // first_movie: min(from r in joined select r.first_movie),
  Const        r33, "first_movie"
  Const        r8, []
  IterPrep     r17, r5
  Len          r15, r17
  Move         r16, r14
L10:
  LessInt      r19, r16, r15
  JumpIfFalse  r19, L9
  Index        r2, r17, r16
  Move         r28, r2
  Index        r22, r28, r9
  Append       r13, r8, r22
  Move         r8, r13
  AddInt       r16, r16, r23
  Jump         L10
L9:
  Min          r3, r8
  // second_movie: min(from r in joined select r.second_movie)
  Const        r21, "second_movie"
  Const        r25, []
  IterPrep     r20, r5
  Len          r1, r20
  Move         r24, r14
L12:
  LessInt      r12, r24, r1
  JumpIfFalse  r12, L11
  Index        r27, r20, r24
  Move         r28, r27
  Index        r6, r28, r11
  Append       r18, r25, r6
  Move         r25, r18
  AddInt       r24, r24, r23
  Jump         L12
L11:
  Min          r31, r25
  // link_type: min(from r in joined select r.link_type),
  Move         r34, r10
  Move         r35, r32
  // first_movie: min(from r in joined select r.first_movie),
  Move         r36, r33
  Move         r37, r3
  // second_movie: min(from r in joined select r.second_movie)
  Move         r38, r21
  Move         r39, r31
  // let result = {
  MakeMap      r7, 3, r34
  // json([result])
  Move         r4, r7
  MakeList     r29, 1, r4
  JSON         r29
  // expect result == {
  Const        r30, {"first_movie": "Movie A", "link_type": "sequel", "second_movie": "Movie C"}
  Equal        r26, r7, r30
  Expect       r26
  Return       r0
