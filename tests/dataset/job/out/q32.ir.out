func main (regs=123)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "10,000-mile-club"}, {"id": 2, "keyword": "character-name-in-title"}]
  // let link_type = [
  Const        r1, [{"id": 1, "link": "sequel"}, {"id": 2, "link": "remake"}]
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
  // let movie_link = [
  Const        r3, [{"link_type_id": 1, "linked_movie_id": 300, "movie_id": 100}, {"link_type_id": 2, "linked_movie_id": 400, "movie_id": 200}]
  // let title = [
  Const        r4, [{"id": 100, "title": "Movie A"}, {"id": 200, "title": "Movie B"}, {"id": 300, "title": "Movie C"}, {"id": 400, "title": "Movie D"}]
  // from k in keyword
  Const        r5, []
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // from k in keyword
  IterPrep     r12, r0
  Len          r13, r12
  Const        r15, 0
  Move         r14, r15
L12:
  LessInt      r16, r14, r13
  JumpIfFalse  r16, L0
  Index        r18, r12, r14
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r19, r2
  Len          r20, r19
  Const        r21, "keyword_id"
  Const        r22, "id"
  Move         r23, r15
L11:
  LessInt      r24, r23, r20
  JumpIfFalse  r24, L1
  Index        r26, r19, r23
  Index        r27, r26, r21
  Index        r28, r18, r22
  Equal        r29, r27, r28
  JumpIfFalse  r29, L2
  // join t1 in title on t1.id == mk.movie_id
  IterPrep     r30, r4
  Len          r31, r30
  Const        r32, "movie_id"
  Move         r33, r15
L10:
  LessInt      r34, r33, r31
  JumpIfFalse  r34, L2
  Index        r36, r30, r33
  Index        r37, r36, r22
  Index        r38, r26, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r40, r3
  Len          r41, r40
  Move         r42, r15
L9:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L3
  Index        r45, r40, r42
  Index        r46, r45, r32
  Index        r47, r36, r22
  Equal        r48, r46, r47
  JumpIfFalse  r48, L4
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r49, r4
  Len          r50, r49
  Const        r51, "linked_movie_id"
  Move         r52, r15
L8:
  LessInt      r53, r52, r50
  JumpIfFalse  r53, L4
  Index        r55, r49, r52
  Index        r56, r55, r22
  Index        r57, r45, r51
  Equal        r58, r56, r57
  JumpIfFalse  r58, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r59, r1
  Len          r60, r59
  Const        r61, "link_type_id"
  Move         r62, r15
L7:
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L5
  Index        r65, r59, r62
  Index        r66, r65, r22
  Index        r67, r45, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L6
  // where k.keyword == "10,000-mile-club"
  Index        r69, r18, r6
  Const        r70, "10,000-mile-club"
  Equal        r71, r69, r70
  JumpIfFalse  r71, L6
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r72, "link_type"
  Index        r73, r65, r8
  Const        r74, "first_movie"
  Index        r75, r36, r10
  Const        r76, "second_movie"
  Index        r77, r55, r10
  MakeMap      r81, 3, r72
  // from k in keyword
  Append       r5, r5, r81
L6:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r83, 1
  Add          r62, r62, r83
  Jump         L7
L5:
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r52, r52, r83
  Jump         L8
L4:
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r42, r42, r83
  Jump         L9
L3:
  // join t1 in title on t1.id == mk.movie_id
  Add          r33, r33, r83
  Jump         L10
L2:
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r23, r23, r83
  Jump         L11
L1:
  // from k in keyword
  AddInt       r14, r14, r83
  Jump         L12
L0:
  // link_type: min(from r in joined select r.link_type),
  Const        r84, "link_type"
  Const        r85, []
  IterPrep     r86, r5
  Len          r87, r86
  Move         r88, r15
L14:
  LessInt      r89, r88, r87
  JumpIfFalse  r89, L13
  Index        r91, r86, r88
  Index        r92, r91, r7
  Append       r85, r85, r92
  AddInt       r88, r88, r83
  Jump         L14
L13:
  // first_movie: min(from r in joined select r.first_movie),
  Const        r96, []
  IterPrep     r97, r5
  Len          r98, r97
  Move         r99, r15
L16:
  LessInt      r100, r99, r98
  JumpIfFalse  r100, L15
  Index        r91, r97, r99
  Index        r102, r91, r9
  Append       r96, r96, r102
  AddInt       r99, r99, r83
  Jump         L16
L15:
  // second_movie: min(from r in joined select r.second_movie)
  Const        r106, []
  IterPrep     r107, r5
  Len          r108, r107
  Move         r109, r15
L18:
  LessInt      r110, r109, r108
  JumpIfFalse  r110, L17
  Index        r91, r107, r109
  Index        r112, r91, r11
  Append       r106, r106, r112
  AddInt       r109, r109, r83
  Jump         L18
L17:
  // let result = {
  MakeMap      r118, 3, r84
  // json([result])
  Move         r119, r118
  MakeList     r120, 1, r119
  JSON         r120
  // expect result == {
  Const        r121, {"first_movie": "Movie A", "link_type": "sequel", "second_movie": "Movie C"}
  Equal        r122, r118, r121
  Expect       r122
  Return       r0
