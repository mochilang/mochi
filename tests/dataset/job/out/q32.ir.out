func main (regs=27)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "10,000-mile-club"}, {"id": 2, "keyword": "character-name-in-title"}]
  // let link_type = [
  Const        r1, [{"id": 1, "link": "sequel"}, {"id": 2, "link": "remake"}]
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
L1:
  // let movie_link = [
  Const        r3, [{"link_type_id": 1, "linked_movie_id": 300, "movie_id": 100}, {"link_type_id": 2, "linked_movie_id": 400, "movie_id": 200}]
  // let title = [
  Const        r4, [{"id": 100, "title": "Movie A"}, {"id": 200, "title": "Movie B"}, {"id": 300, "title": "Movie C"}, {"id": 400, "title": "Movie D"}]
  // from k in keyword
  Const        r5, []
  // where k.keyword == "10,000-mile-club"
  Const        r6, "keyword"
L2:
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Const        r7, "link_type"
  Const        r8, "link"
  Const        r9, "first_movie"
  Const        r10, "title"
  Const        r11, "second_movie"
  // from k in keyword
  IterPrep     r12, r0
  Len          r13, r12
L9:
  Const        r14, 0
L3:
  Move         r15, r14
L8:
  LessInt      r16, r15, r13
  JumpIfFalse  r16, L0
L6:
  Index        r13, r12, r15
L4:
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r12, r2
L7:
  Len          r2, r12
L0:
  Const        r17, "keyword_id"
  Const        r18, "id"
  Move         r19, r14
  LessInt      r20, r19, r2
L5:
  JumpIfFalse  r20, L0
  Index        r2, r12, r19
  Index        r12, r2, r17
  Index        r17, r13, r18
  Equal        r21, r12, r17
  JumpIfFalse  r21, L1
  // join t1 in title on t1.id == mk.movie_id
  IterPrep     r21, r4
  Len          r17, r21
  Const        r12, "movie_id"
  Move         r22, r14
  LessInt      r23, r22, r17
  JumpIfFalse  r23, L1
  Index        r23, r21, r22
  Index        r21, r23, r18
  Index        r17, r2, r12
  Equal        r2, r21, r17
  JumpIfFalse  r2, L2
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r2, r3
  Len          r3, r2
  Move         r17, r14
  LessInt      r21, r17, r3
  JumpIfFalse  r21, L2
  Index        r21, r2, r17
  Index        r2, r21, r12
  Index        r12, r23, r18
  Equal        r3, r2, r12
  JumpIfFalse  r3, L3
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r3, r4
  Len          r4, r3
  Const        r12, "linked_movie_id"
  Move         r2, r14
  LessInt      r24, r2, r4
  JumpIfFalse  r24, L3
  Index        r24, r3, r2
  Index        r3, r24, r18
  Index        r4, r21, r12
  Equal        r12, r3, r4
  JumpIfFalse  r12, L4
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r12, r1
  Len          r1, r12
  Const        r4, "link_type_id"
  Move         r25, r14
  LessInt      r26, r25, r1
  JumpIfFalse  r26, L4
  Index        r26, r12, r25
  Index        r12, r26, r18
  Index        r18, r21, r4
  Equal        r4, r12, r18
  JumpIfFalse  r4, L5
  // where k.keyword == "10,000-mile-club"
  Index        r4, r13, r6
  Const        r13, "10,000-mile-club"
  Equal        r6, r4, r13
  JumpIfFalse  r6, L5
  // select { link_type: lt.link, first_movie: t1.title, second_movie: t2.title }
  Move         r6, r7
  Index        r13, r26, r8
  Move         r26, r9
  Index        r8, r23, r10
  Move         r23, r11
  Index        r4, r24, r10
  Move         r24, r6
  Move         r6, r13
  Move         r13, r26
  Move         r26, r8
  Move         r8, r23
  Move         r23, r4
  MakeMap      r4, 3, r24
  // from k in keyword
  Append       r5, r5, r4
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r4, 1
  Add          r25, r25, r4
  Jump         L6
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r2, r2, r4
  Jump         L1
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r17, r17, r4
  Jump         L0
  // join t1 in title on t1.id == mk.movie_id
  Add          r22, r22, r4
  Jump         L6
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r19, r19, r4
  Jump         L7
  // from k in keyword
  AddInt       r15, r15, r4
  Jump         L8
  // link_type: min(from r in joined select r.link_type),
  Move         r18, r7
  Const        r20, []
  IterPrep     r19, r5
  Len          r16, r19
  Move         r15, r14
  LessInt      r25, r15, r16
  JumpIfFalse  r25, L9
  Index        r25, r19, r15
  Index        r19, r25, r7
  Append       r20, r20, r19
  AddInt       r15, r15, r4
  Jump         L4
  Min          r15, r20
  // first_movie: min(from r in joined select r.first_movie),
  Move         r20, r9
  Const        r7, []
  IterPrep     r16, r5
  Len          r3, r16
  Move         r2, r14
  LessInt      r21, r2, r3
  JumpIfFalse  r21, L10
  Index        r25, r16, r2
  Index        r21, r25, r9
  Append       r7, r7, r21
  AddInt       r2, r2, r4
  Jump         L0
L10:
  Min          r2, r7
  // second_movie: min(from r in joined select r.second_movie)
  Move         r7, r11
  Const        r9, []
  IterPrep     r19, r5
  Len          r5, r19
  Move         r3, r14
L12:
  LessInt      r14, r3, r5
  JumpIfFalse  r14, L11
  Index        r25, r19, r3
  Index        r14, r25, r11
  Append       r9, r9, r14
  AddInt       r3, r3, r4
  Jump         L12
L11:
  Min          r14, r9
  // link_type: min(from r in joined select r.link_type),
  Move         r9, r18
  Move         r18, r15
  // first_movie: min(from r in joined select r.first_movie),
  Move         r15, r20
  Move         r20, r2
  // second_movie: min(from r in joined select r.second_movie)
  Move         r2, r7
  Move         r21, r14
  // let result = {
  MakeMap      r14, 3, r9
  // json([result])
  Move         r2, r14
  MakeList     r20, 1, r2
  JSON         r20
  // expect result == {
  Const        r20, {"first_movie": "Movie A", "link_type": "sequel", "second_movie": "Movie C"}
  Equal        r2, r14, r20
  Expect       r2
  Return       r0
