func main (regs=178)
  // let aka_name = [
  Const        r0, [{"name": "A. N. G.", "person_id": 1}, {"name": "J. D.", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 100, "note": "(voice)", "person_id": 1, "person_role_id": 10, "role_id": 1000}, {"movie_id": 200, "note": "(voice)", "person_id": 2, "person_role_id": 20, "role_id": 1000}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 100}, {"country_code": "[gb]", "id": 200}]
  // let movie_companies = [
  Const        r4, [{"company_id": 100, "movie_id": 100, "note": "ACME Studios (USA)"}, {"company_id": 200, "movie_id": 200, "note": "Maple Films"}]
  // let name = [
  Const        r5, [{"gender": "f", "id": 1, "name": "Angela Smith"}, {"gender": "m", "id": 2, "name": "John Doe"}]
  // let role_type = [
  Const        r6, [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
  // let title = [
  Const        r7, [{"id": 100, "production_year": 2010, "title": "Famous Film"}, {"id": 200, "production_year": 1999, "title": "Old Movie"}]
  // from an in aka_name
  Const        r8, []
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r9, "note"
  // cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // n.gender == "f" &&
  Const        r12, "gender"
  // n.name.contains("Ang") &&
  Const        r13, "name"
  // rt.role == "actress" &&
  Const        r14, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r15, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r16, "alt"
  Const        r17, "character"
  Const        r18, "movie"
  Const        r19, "title"
  // from an in aka_name
  IterPrep     r20, r0
  Len          r21, r20
  Const        r23, 0
  Move         r22, r23
L23:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r26, r20, r22
  // join n in name on an.person_id == n.id
  IterPrep     r27, r5
  Len          r28, r27
  Const        r29, "person_id"
  Const        r30, "id"
  Move         r31, r23
L22:
  LessInt      r32, r31, r28
  JumpIfFalse  r32, L1
  Index        r34, r27, r31
  Index        r35, r26, r29
  Index        r36, r34, r30
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r38, r2
  Len          r39, r38
  Move         r40, r23
L21:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  Index        r44, r43, r29
  Index        r45, r34, r30
  Equal        r46, r44, r45
  JumpIfFalse  r46, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r47, r1
  Len          r48, r47
  Const        r49, "person_role_id"
  Move         r50, r23
L20:
  LessInt      r51, r50, r48
  JumpIfFalse  r51, L3
  Index        r53, r47, r50
  Index        r54, r53, r30
  Index        r55, r43, r49
  Equal        r56, r54, r55
  JumpIfFalse  r56, L4
  // join t in title on t.id == ci.movie_id
  IterPrep     r57, r7
  Len          r58, r57
  Const        r59, "movie_id"
  Move         r60, r23
L19:
  LessInt      r61, r60, r58
  JumpIfFalse  r61, L4
  Index        r63, r57, r60
  Index        r64, r63, r30
  Index        r65, r43, r59
  Equal        r66, r64, r65
  JumpIfFalse  r66, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r67, r4
  Len          r68, r67
  Move         r69, r23
L18:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L5
  Index        r72, r67, r69
  Index        r73, r72, r59
  Index        r74, r63, r30
  Equal        r75, r73, r74
  JumpIfFalse  r75, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r76, r3
  Len          r77, r76
  Const        r78, "company_id"
  Move         r79, r23
L17:
  LessInt      r80, r79, r77
  JumpIfFalse  r80, L6
  Index        r82, r76, r79
  Index        r83, r82, r30
  Index        r84, r72, r78
  Equal        r85, r83, r84
  JumpIfFalse  r85, L7
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r86, r6
  Len          r87, r86
  Const        r88, "role_id"
  Move         r89, r23
L16:
  LessInt      r90, r89, r87
  JumpIfFalse  r90, L7
  Index        r92, r86, r89
  Index        r93, r92, r30
  Index        r94, r43, r88
  Equal        r95, r93, r94
  JumpIfFalse  r95, L8
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Index        r96, r43, r9
  Const        r97, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r98, r96, r97
  // t.production_year >= 2005 && t.production_year <= 2015
  Index        r99, r63, r15
  Const        r100, 2005
  LessEq       r101, r100, r99
  Index        r102, r63, r15
  Const        r103, 2015
  LessEq       r104, r102, r103
  // cn.country_code == "[us]" &&
  Index        r105, r82, r10
  Const        r106, "[us]"
  Equal        r107, r105, r106
  // n.gender == "f" &&
  Index        r108, r34, r12
  Const        r109, "f"
  Equal        r110, r108, r109
  // rt.role == "actress" &&
  Index        r111, r92, r14
  Const        r112, "actress"
  Equal        r113, r111, r112
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Move         r114, r98
  JumpIfFalse  r114, L9
L9:
  // cn.country_code == "[us]" &&
  Move         r115, r107
  JumpIfFalse  r115, L10
  Index        r116, r72, r9
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r117, "(USA)"
  In           r119, r117, r116
  JumpIfTrue   r119, L10
  Index        r120, r72, r9
  Const        r121, "(worldwide)"
  In           r119, r121, r120
L10:
  Move         r123, r119
  JumpIfFalse  r123, L11
L11:
  // n.gender == "f" &&
  Move         r124, r110
  JumpIfFalse  r124, L12
  Index        r125, r34, r13
  // n.name.contains("Ang") &&
  Const        r126, "Ang"
  In           r128, r126, r125
L12:
  JumpIfFalse  r128, L13
L13:
  // rt.role == "actress" &&
  Move         r129, r113
  JumpIfFalse  r129, L14
L14:
  // t.production_year >= 2005 && t.production_year <= 2015
  Move         r130, r101
  JumpIfFalse  r130, L15
  Move         r130, r104
L15:
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  JumpIfFalse  r130, L8
  // select { alt: an.name, character: chn.name, movie: t.title }
  MakeMap      r137, 3, r16
  // from an in aka_name
  Append       r8, r8, r137
L8:
  // join rt in role_type on rt.id == ci.role_id
  Const        r139, 1
  Add          r89, r89, r139
  Jump         L16
L7:
  // join cn in company_name on cn.id == mc.company_id
  Add          r79, r79, r139
  Jump         L17
L6:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r69, r69, r139
  Jump         L18
L5:
  // join t in title on t.id == ci.movie_id
  Add          r60, r60, r139
  Jump         L19
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r50, r50, r139
  Jump         L20
L3:
  // join ci in cast_info on ci.person_id == n.id
  Add          r40, r40, r139
  Jump         L21
L2:
  // join n in name on an.person_id == n.id
  Jump         L22
L1:
  // from an in aka_name
  AddInt       r22, r22, r139
  Jump         L23
L0:
  // alternative_name: min(from x in matches select x.alt),
  Const        r140, "alternative_name"
  Const        r141, []
  IterPrep     r142, r8
  Len          r143, r142
  Move         r144, r23
L25:
  LessInt      r145, r144, r143
  JumpIfFalse  r145, L24
  Index        r147, r142, r144
  Index        r148, r147, r16
  Append       r141, r141, r148
  AddInt       r144, r144, r139
  Jump         L25
L24:
  // character_name: min(from x in matches select x.character),
  Const        r152, []
  IterPrep     r153, r8
  Len          r154, r153
  Move         r155, r23
L27:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L26
  Index        r147, r153, r155
  Index        r158, r147, r17
  Append       r152, r152, r158
  AddInt       r155, r155, r139
  Jump         L27
L26:
  // movie: min(from x in matches select x.movie)
  Const        r161, []
  IterPrep     r162, r8
  Len          r163, r162
  Move         r164, r23
L29:
  LessInt      r165, r164, r163
  JumpIfFalse  r165, L28
  Index        r147, r162, r164
  Index        r167, r147, r18
  Append       r161, r161, r167
  AddInt       r164, r164, r139
  Jump         L29
L28:
  // {
  MakeMap      r174, 3, r140
  // let result = [
  MakeList     r175, 1, r174
  // json(result)
  JSON         r175
  // expect result == [
  Const        r176, [{"alternative_name": "A. N. G.", "character_name": "Angel", "movie": "Famous Film"}]
  Equal        r177, r175, r176
  Expect       r177
  Return       r0
