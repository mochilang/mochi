func main (regs=381)
  // let aka_name = [
  Const        r0, [{"name": "A. N. G.", "person_id": 1}, {"name": "J. D.", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 100, "note": "(voice)", "person_id": 1, "person_role_id": 10, "role_id": 1000}, {"movie_id": 200, "note": "(voice)", "person_id": 2, "person_role_id": 20, "role_id": 1000}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 100}, {"country_code": "[gb]", "id": 200}]
  // let movie_companies = [
  Const        r4, [{"company_id": 100, "movie_id": 100, "note": "ACME Studios (USA)"}, {"company_id": 200, "movie_id": 200, "note": "Maple Films"}]
  // let name = [
  Const        r5, [{"gender": "f", "id": 1, "name": "Angela Smith"}, {"gender": "m", "id": 2, "name": "John Doe"}]
  // let role_type = [
  Const        r6, [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
  // let title = [
  Const        r7, [{"id": 100, "production_year": 2010, "title": "Famous Film"}, {"id": 200, "production_year": 1999, "title": "Old Movie"}]
  // from an in aka_name
  Const        r8, []
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r9, "note"
  // cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r11, "note"
  Const        r12, "contains"
  Const        r13, "note"
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  Const        r17, "contains"
  // rt.role == "actress" &&
  Const        r18, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r19, "production_year"
  Const        r20, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r21, "alt"
  Const        r22, "name"
  Const        r23, "character"
  Const        r24, "name"
  Const        r25, "movie"
  Const        r26, "title"
  // from an in aka_name
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, 0
L23:
  LessInt      r31, r29, r28
  JumpIfFalse  r31, L0
  Index        r33, r27, r29
  // join n in name on an.person_id == n.id
  IterPrep     r34, r5
  Len          r35, r34
  Const        r36, "person_id"
  Const        r37, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r38, "note"
  // cn.country_code == "[us]" &&
  Const        r39, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r40, "note"
  Const        r41, "contains"
  Const        r42, "note"
  Const        r43, "contains"
  // n.gender == "f" &&
  Const        r44, "gender"
  // n.name.contains("Ang") &&
  Const        r45, "name"
  Const        r46, "contains"
  // rt.role == "actress" &&
  Const        r47, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r48, "production_year"
  Const        r49, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r50, "alt"
  Const        r51, "name"
  Const        r52, "character"
  Const        r53, "name"
  Const        r54, "movie"
  Const        r55, "title"
  // join n in name on an.person_id == n.id
  Const        r56, 0
L22:
  LessInt      r58, r56, r35
  JumpIfFalse  r58, L1
  Index        r60, r34, r56
  Const        r61, "person_id"
  Index        r62, r33, r61
  Const        r63, "id"
  Index        r64, r60, r63
  Equal        r65, r62, r64
  JumpIfFalse  r65, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r66, r2
  Len          r67, r66
  Const        r68, "person_id"
  Const        r69, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r70, "note"
  // cn.country_code == "[us]" &&
  Const        r71, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r72, "note"
  Const        r73, "contains"
  Const        r74, "note"
  Const        r75, "contains"
  // n.gender == "f" &&
  Const        r76, "gender"
  // n.name.contains("Ang") &&
  Const        r77, "name"
  Const        r78, "contains"
  // rt.role == "actress" &&
  Const        r79, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r80, "production_year"
  Const        r81, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r82, "alt"
  Const        r83, "name"
  Const        r84, "character"
  Const        r85, "name"
  Const        r86, "movie"
  Const        r87, "title"
  // join ci in cast_info on ci.person_id == n.id
  Const        r88, 0
L21:
  LessInt      r90, r88, r67
  JumpIfFalse  r90, L2
  Index        r92, r66, r88
  Const        r93, "person_id"
  Index        r94, r92, r93
  Const        r95, "id"
  Index        r96, r60, r95
  Equal        r97, r94, r96
  JumpIfFalse  r97, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r98, r1
  Len          r99, r98
  Const        r100, "id"
  Const        r101, "person_role_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r102, "note"
  // cn.country_code == "[us]" &&
  Const        r103, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r104, "note"
  Const        r105, "contains"
  Const        r106, "note"
  Const        r107, "contains"
  // n.gender == "f" &&
  Const        r108, "gender"
  // n.name.contains("Ang") &&
  Const        r109, "name"
  Const        r110, "contains"
  // rt.role == "actress" &&
  Const        r111, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r112, "production_year"
  Const        r113, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r114, "alt"
  Const        r115, "name"
  Const        r116, "character"
  Const        r117, "name"
  Const        r118, "movie"
  Const        r119, "title"
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r120, 0
L20:
  LessInt      r122, r120, r99
  JumpIfFalse  r122, L3
  Index        r124, r98, r120
  Const        r125, "id"
  Index        r126, r124, r125
  Const        r127, "person_role_id"
  Index        r128, r92, r127
  Equal        r129, r126, r128
  JumpIfFalse  r129, L4
  // join t in title on t.id == ci.movie_id
  IterPrep     r130, r7
  Len          r131, r130
  Const        r132, "id"
  Const        r133, "movie_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r134, "note"
  // cn.country_code == "[us]" &&
  Const        r135, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r136, "note"
  Const        r137, "contains"
  Const        r138, "note"
  Const        r139, "contains"
  // n.gender == "f" &&
  Const        r140, "gender"
  // n.name.contains("Ang") &&
  Const        r141, "name"
  Const        r142, "contains"
  // rt.role == "actress" &&
  Const        r143, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r144, "production_year"
  Const        r145, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r146, "alt"
  Const        r147, "name"
  Const        r148, "character"
  Const        r149, "name"
  Const        r150, "movie"
  Const        r151, "title"
  // join t in title on t.id == ci.movie_id
  Const        r152, 0
L19:
  LessInt      r154, r152, r131
  JumpIfFalse  r154, L4
  Index        r156, r130, r152
  Const        r157, "id"
  Index        r158, r156, r157
  Const        r159, "movie_id"
  Index        r160, r92, r159
  Equal        r161, r158, r160
  JumpIfFalse  r161, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r162, r4
  Len          r163, r162
  Const        r164, "movie_id"
  Const        r165, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r166, "note"
  // cn.country_code == "[us]" &&
  Const        r167, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r168, "note"
  Const        r169, "contains"
  Const        r170, "note"
  Const        r171, "contains"
  // n.gender == "f" &&
  Const        r172, "gender"
  // n.name.contains("Ang") &&
  Const        r173, "name"
  Const        r174, "contains"
  // rt.role == "actress" &&
  Const        r175, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r176, "production_year"
  Const        r177, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r178, "alt"
  Const        r179, "name"
  Const        r180, "character"
  Const        r181, "name"
  Const        r182, "movie"
  Const        r183, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r184, 0
L18:
  LessInt      r186, r184, r163
  JumpIfFalse  r186, L5
  Index        r188, r162, r184
  Const        r189, "movie_id"
  Index        r190, r188, r189
  Const        r191, "id"
  Index        r192, r156, r191
  Equal        r193, r190, r192
  JumpIfFalse  r193, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r194, r3
  Len          r195, r194
  Const        r196, "id"
  Const        r197, "company_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r198, "note"
  // cn.country_code == "[us]" &&
  Const        r199, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r200, "note"
  Const        r201, "contains"
  Const        r202, "note"
  Const        r203, "contains"
  // n.gender == "f" &&
  Const        r204, "gender"
  // n.name.contains("Ang") &&
  Const        r205, "name"
  Const        r206, "contains"
  // rt.role == "actress" &&
  Const        r207, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r208, "production_year"
  Const        r209, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r210, "alt"
  Const        r211, "name"
  Const        r212, "character"
  Const        r213, "name"
  Const        r214, "movie"
  Const        r215, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r216, 0
L17:
  LessInt      r218, r216, r195
  JumpIfFalse  r218, L6
  Index        r220, r194, r216
  Const        r221, "id"
  Index        r222, r220, r221
  Const        r223, "company_id"
  Index        r224, r188, r223
  Equal        r225, r222, r224
  JumpIfFalse  r225, L7
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r226, r6
  Len          r227, r226
  Const        r228, "id"
  Const        r229, "role_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r230, "note"
  // cn.country_code == "[us]" &&
  Const        r231, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r232, "note"
  Const        r233, "contains"
  Const        r234, "note"
  Const        r235, "contains"
  // n.gender == "f" &&
  Const        r236, "gender"
  // n.name.contains("Ang") &&
  Const        r237, "name"
  Const        r238, "contains"
  // rt.role == "actress" &&
  Const        r239, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r240, "production_year"
  Const        r241, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r242, "alt"
  Const        r243, "name"
  Const        r244, "character"
  Const        r245, "name"
  Const        r246, "movie"
  Const        r247, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r248, 0
L16:
  LessInt      r250, r248, r227
  JumpIfFalse  r250, L7
  Index        r252, r226, r248
  Const        r253, "id"
  Index        r254, r252, r253
  Const        r255, "role_id"
  Index        r256, r92, r255
  Equal        r257, r254, r256
  JumpIfFalse  r257, L8
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r258, "note"
  Index        r259, r92, r258
  Const        r260, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r261, r259, r260
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r262, "production_year"
  Index        r263, r156, r262
  Const        r264, 2005
  LessEq       r265, r264, r263
  Const        r266, "production_year"
  Index        r267, r156, r266
  Const        r268, 2015
  LessEq       r269, r267, r268
  // cn.country_code == "[us]" &&
  Const        r270, "country_code"
  Index        r271, r220, r270
  Const        r272, "[us]"
  Equal        r273, r271, r272
  // n.gender == "f" &&
  Const        r274, "gender"
  Index        r275, r60, r274
  Const        r276, "f"
  Equal        r277, r275, r276
  // rt.role == "actress" &&
  Const        r278, "role"
  Index        r279, r252, r278
  Const        r280, "actress"
  Equal        r281, r279, r280
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Move         r282, r261
  JumpIfFalse  r282, L9
L9:
  // cn.country_code == "[us]" &&
  Move         r283, r273
  JumpIfFalse  r283, L10
  Const        r284, "note"
  Index        r285, r188, r284
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r286, "(USA)"
  In           r288, r286, r285
  JumpIfTrue   r288, L10
  Const        r289, "note"
  Index        r290, r188, r289
  Const        r291, "(worldwide)"
  In           r288, r291, r290
L10:
  Move         r293, r288
  JumpIfFalse  r293, L11
L11:
  // n.gender == "f" &&
  Move         r294, r277
  JumpIfFalse  r294, L12
  Const        r295, "name"
  Index        r296, r60, r295
  // n.name.contains("Ang") &&
  Const        r297, "Ang"
  In           r299, r297, r296
L12:
  JumpIfFalse  r299, L13
L13:
  // rt.role == "actress" &&
  Move         r300, r281
  JumpIfFalse  r300, L14
L14:
  // t.production_year >= 2005 && t.production_year <= 2015
  Move         r301, r265
  JumpIfFalse  r301, L15
  Move         r301, r269
L15:
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  JumpIfFalse  r301, L8
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r302, "alt"
  Const        r303, "name"
  Index        r304, r33, r303
  Const        r305, "character"
  Const        r306, "name"
  Index        r307, r124, r306
  Const        r308, "movie"
  Const        r309, "title"
  Index        r310, r156, r309
  Move         r311, r302
  Move         r312, r304
  Move         r313, r305
  Move         r314, r307
  Move         r315, r308
  Move         r316, r310
  MakeMap      r317, 3, r311
  // from an in aka_name
  Append       r8, r8, r317
L8:
  // join rt in role_type on rt.id == ci.role_id
  Const        r319, 1
  Add          r248, r248, r319
  Jump         L16
L7:
  // join cn in company_name on cn.id == mc.company_id
  Const        r320, 1
  Add          r216, r216, r320
  Jump         L17
L6:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r321, 1
  Add          r184, r184, r321
  Jump         L18
L5:
  // join t in title on t.id == ci.movie_id
  Const        r322, 1
  Add          r152, r152, r322
  Jump         L19
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r323, 1
  Add          r120, r120, r323
  Jump         L20
L3:
  // join ci in cast_info on ci.person_id == n.id
  Const        r324, 1
  Add          r88, r88, r324
  Jump         L21
L2:
  // join n in name on an.person_id == n.id
  Const        r325, 1
  Add          r56, r56, r325
  Jump         L22
L1:
  // from an in aka_name
  Const        r326, 1
  AddInt       r29, r29, r326
  Jump         L23
L0:
  // alternative_name: min(from x in matches select x.alt),
  Const        r327, "alternative_name"
  Const        r328, []
  Const        r329, "alt"
  IterPrep     r330, r8
  Len          r331, r330
  Const        r332, 0
L25:
  LessInt      r334, r332, r331
  JumpIfFalse  r334, L24
  Index        r336, r330, r332
  Const        r337, "alt"
  Index        r338, r336, r337
  Append       r328, r328, r338
  Const        r340, 1
  AddInt       r332, r332, r340
  Jump         L25
L24:
  Min          r341, r328
  // character_name: min(from x in matches select x.character),
  Const        r342, "character_name"
  Const        r343, []
  Const        r344, "character"
  IterPrep     r345, r8
  Len          r346, r345
  Const        r347, 0
L27:
  LessInt      r349, r347, r346
  JumpIfFalse  r349, L26
  Index        r336, r345, r347
  Const        r351, "character"
  Index        r352, r336, r351
  Append       r343, r343, r352
  Const        r354, 1
  AddInt       r347, r347, r354
  Jump         L27
L26:
  Min          r355, r343
  // movie: min(from x in matches select x.movie)
  Const        r356, "movie"
  Const        r357, []
  Const        r358, "movie"
  IterPrep     r359, r8
  Len          r360, r359
  Const        r361, 0
L29:
  LessInt      r363, r361, r360
  JumpIfFalse  r363, L28
  Index        r336, r359, r361
  Const        r365, "movie"
  Index        r366, r336, r365
  Append       r357, r357, r366
  Const        r368, 1
  AddInt       r361, r361, r368
  Jump         L29
L28:
  Min          r369, r357
  // alternative_name: min(from x in matches select x.alt),
  Move         r370, r327
  Move         r371, r341
  // character_name: min(from x in matches select x.character),
  Move         r372, r342
  Move         r373, r355
  // movie: min(from x in matches select x.movie)
  Move         r374, r356
  Move         r375, r369
  // {
  MakeMap      r377, 3, r370
  // let result = [
  MakeList     r378, 1, r377
  // json(result)
  JSON         r378
  // expect result == [
  Const        r379, [{"alternative_name": "A. N. G.", "character_name": "Angel", "movie": "Famous Film"}]
  Equal        r380, r378, r379
  Expect       r380
  Return       r0
