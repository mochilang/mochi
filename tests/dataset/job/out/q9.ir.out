func main (regs=375)
  // let aka_name = [
  Const        r0, [{"name": "A. N. G.", "person_id": 1}, {"name": "J. D.", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 100, "note": "(voice)", "person_id": 1, "person_role_id": 10, "role_id": 1000}, {"movie_id": 200, "note": "(voice)", "person_id": 2, "person_role_id": 20, "role_id": 1000}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 100}, {"country_code": "[gb]", "id": 200}]
  // let movie_companies = [
  Const        r4, [{"company_id": 100, "movie_id": 100, "note": "ACME Studios (USA)"}, {"company_id": 200, "movie_id": 200, "note": "Maple Films"}]
  // let name = [
  Const        r5, [{"gender": "f", "id": 1, "name": "Angela Smith"}, {"gender": "m", "id": 2, "name": "John Doe"}]
  // let role_type = [
  Const        r6, [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
  // let title = [
  Const        r7, [{"id": 100, "production_year": 2010, "title": "Famous Film"}, {"id": 200, "production_year": 1999, "title": "Old Movie"}]
  // from an in aka_name
  Const        r8, []
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r9, "note"
  // cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r11, "note"
  Const        r12, "contains"
  Const        r13, "note"
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  Const        r17, "contains"
  // rt.role == "actress" &&
  Const        r18, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r19, "production_year"
  Const        r20, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r21, "alt"
  Const        r22, "name"
  Const        r23, "character"
  Const        r24, "name"
  Const        r25, "movie"
  Const        r26, "title"
  // from an in aka_name
  IterPrep     r27, r0
  Len          r28, r27
  Const        r30, 0
  Move         r29, r30
L18:
  LessInt      r31, r29, r28
  JumpIfFalse  r31, L0
  Index        r32, r27, r29
  Move         r33, r32
  // join n in name on an.person_id == n.id
  IterPrep     r34, r5
  Len          r35, r34
  Const        r36, "person_id"
  Const        r37, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r38, "note"
  // cn.country_code == "[us]" &&
  Const        r39, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r40, "note"
  Const        r41, "contains"
  Const        r42, "note"
  Const        r43, "contains"
  // n.gender == "f" &&
  Const        r44, "gender"
  // n.name.contains("Ang") &&
  Const        r45, "name"
  Const        r46, "contains"
  // rt.role == "actress" &&
  Const        r47, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r48, "production_year"
  Const        r49, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r50, "alt"
  Const        r51, "name"
  Const        r52, "character"
  Const        r53, "name"
  Const        r54, "movie"
  Const        r55, "title"
  // join n in name on an.person_id == n.id
  Const        r57, 0
  Move         r56, r57
L17:
  LessInt      r58, r56, r35
  JumpIfFalse  r58, L1
  Index        r59, r34, r56
  Move         r60, r59
  Const        r61, "person_id"
  Index        r62, r33, r61
  Const        r63, "id"
  Index        r64, r60, r63
  Equal        r65, r62, r64
  JumpIfFalse  r65, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r66, r2
  Len          r67, r66
  Const        r68, "person_id"
  Const        r69, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r70, "note"
  // cn.country_code == "[us]" &&
  Const        r71, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r72, "note"
  Const        r73, "contains"
  Const        r74, "note"
  Const        r75, "contains"
  // n.gender == "f" &&
  Const        r76, "gender"
  // n.name.contains("Ang") &&
  Const        r77, "name"
  Const        r78, "contains"
  // rt.role == "actress" &&
  Const        r79, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r80, "production_year"
  Const        r81, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r82, "alt"
  Const        r83, "name"
  Const        r84, "character"
  Const        r85, "name"
  Const        r86, "movie"
  Const        r87, "title"
  // join ci in cast_info on ci.person_id == n.id
  Const        r89, 0
  Move         r88, r89
L16:
  LessInt      r90, r88, r67
  JumpIfFalse  r90, L2
  Index        r91, r66, r88
  Move         r92, r91
  Const        r93, "person_id"
  Index        r94, r92, r93
  Const        r95, "id"
  Index        r96, r60, r95
  Equal        r97, r94, r96
  JumpIfFalse  r97, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r98, r1
  Len          r99, r98
  Const        r100, "id"
  Const        r101, "person_role_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r102, "note"
  // cn.country_code == "[us]" &&
  Const        r103, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r104, "note"
  Const        r105, "contains"
  Const        r106, "note"
  Const        r107, "contains"
  // n.gender == "f" &&
  Const        r108, "gender"
  // n.name.contains("Ang") &&
  Const        r109, "name"
  Const        r110, "contains"
  // rt.role == "actress" &&
  Const        r111, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r112, "production_year"
  Const        r113, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r114, "alt"
  Const        r115, "name"
  Const        r116, "character"
  Const        r117, "name"
  Const        r118, "movie"
  Const        r119, "title"
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r121, 0
  Move         r120, r121
L15:
  LessInt      r122, r120, r99
  JumpIfFalse  r122, L3
  Index        r123, r98, r120
  Move         r124, r123
  Const        r125, "id"
  Index        r126, r124, r125
  Const        r127, "person_role_id"
  Index        r128, r92, r127
  Equal        r129, r126, r128
  JumpIfFalse  r129, L4
  // join t in title on t.id == ci.movie_id
  IterPrep     r130, r7
  Len          r131, r130
  Const        r132, "id"
  Const        r133, "movie_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r134, "note"
  // cn.country_code == "[us]" &&
  Const        r135, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r136, "note"
  Const        r137, "contains"
  Const        r138, "note"
  Const        r139, "contains"
  // n.gender == "f" &&
  Const        r140, "gender"
  // n.name.contains("Ang") &&
  Const        r141, "name"
  Const        r142, "contains"
  // rt.role == "actress" &&
  Const        r143, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r144, "production_year"
  Const        r145, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r146, "alt"
  Const        r147, "name"
  Const        r148, "character"
  Const        r149, "name"
  Const        r150, "movie"
  Const        r151, "title"
  // join t in title on t.id == ci.movie_id
  Const        r153, 0
  Move         r152, r153
L14:
  LessInt      r154, r152, r131
  JumpIfFalse  r154, L4
  Index        r155, r130, r152
  Move         r156, r155
  Const        r157, "id"
  Index        r158, r156, r157
  Const        r159, "movie_id"
  Index        r160, r92, r159
  Equal        r161, r158, r160
  JumpIfFalse  r161, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r162, r4
  Len          r163, r162
  Const        r164, "movie_id"
  Const        r165, "id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r166, "note"
  // cn.country_code == "[us]" &&
  Const        r167, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r168, "note"
  Const        r169, "contains"
  Const        r170, "note"
  Const        r171, "contains"
  // n.gender == "f" &&
  Const        r172, "gender"
  // n.name.contains("Ang") &&
  Const        r173, "name"
  Const        r174, "contains"
  // rt.role == "actress" &&
  Const        r175, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r176, "production_year"
  Const        r177, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r178, "alt"
  Const        r179, "name"
  Const        r180, "character"
  Const        r181, "name"
  Const        r182, "movie"
  Const        r183, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r185, 0
  Move         r184, r185
L13:
  LessInt      r186, r184, r163
  JumpIfFalse  r186, L5
  Index        r187, r162, r184
  Move         r188, r187
  Const        r189, "movie_id"
  Index        r190, r188, r189
  Const        r191, "id"
  Index        r192, r156, r191
  Equal        r193, r190, r192
  JumpIfFalse  r193, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r194, r3
  Len          r195, r194
  Const        r196, "id"
  Const        r197, "company_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r198, "note"
  // cn.country_code == "[us]" &&
  Const        r199, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r200, "note"
  Const        r201, "contains"
  Const        r202, "note"
  Const        r203, "contains"
  // n.gender == "f" &&
  Const        r204, "gender"
  // n.name.contains("Ang") &&
  Const        r205, "name"
  Const        r206, "contains"
  // rt.role == "actress" &&
  Const        r207, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r208, "production_year"
  Const        r209, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r210, "alt"
  Const        r211, "name"
  Const        r212, "character"
  Const        r213, "name"
  Const        r214, "movie"
  Const        r215, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r217, 0
  Move         r216, r217
L12:
  LessInt      r218, r216, r195
  JumpIfFalse  r218, L6
  Index        r219, r194, r216
  Move         r220, r219
  Const        r221, "id"
  Index        r222, r220, r221
  Const        r223, "company_id"
  Index        r224, r188, r223
  Equal        r225, r222, r224
  JumpIfFalse  r225, L7
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r226, r6
  Len          r227, r226
  Const        r228, "id"
  Const        r229, "role_id"
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r230, "note"
  // cn.country_code == "[us]" &&
  Const        r231, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r232, "note"
  Const        r233, "contains"
  Const        r234, "note"
  Const        r235, "contains"
  // n.gender == "f" &&
  Const        r236, "gender"
  // n.name.contains("Ang") &&
  Const        r237, "name"
  Const        r238, "contains"
  // rt.role == "actress" &&
  Const        r239, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r240, "production_year"
  Const        r241, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r242, "alt"
  Const        r243, "name"
  Const        r244, "character"
  Const        r245, "name"
  Const        r246, "movie"
  Const        r247, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r249, 0
  Move         r248, r249
L11:
  LessInt      r250, r248, r227
  JumpIfFalse  r250, L7
  Index        r251, r226, r248
  Move         r252, r251
  Const        r253, "id"
  Index        r254, r252, r253
  Const        r255, "role_id"
  Index        r256, r92, r255
  Equal        r257, r254, r256
  JumpIfFalse  r257, L8
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r258, "note"
  Index        r259, r92, r258
  Const        r260, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r261, r259, r260
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r262, "production_year"
  Index        r263, r156, r262
  Const        r264, 2005
  LessEq       r265, r264, r263
  Const        r266, "production_year"
  Index        r267, r156, r266
  Const        r268, 2015
  LessEq       r269, r267, r268
  // cn.country_code == "[us]" &&
  Const        r270, "country_code"
  Index        r271, r220, r270
  Const        r272, "[us]"
  Equal        r273, r271, r272
  // n.gender == "f" &&
  Const        r274, "gender"
  Index        r275, r60, r274
  Const        r276, "f"
  Equal        r277, r275, r276
  // rt.role == "actress" &&
  Const        r278, "role"
  Index        r279, r252, r278
  Const        r280, "actress"
  Equal        r281, r279, r280
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Move         r282, r261
  JumpIfFalse  r282, L9
  Move         r282, r273
  // cn.country_code == "[us]" &&
  JumpIfFalse  r282, L9
  Const        r283, "note"
  Index        r284, r188, r283
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r285, "(USA)"
  In           r286, r285, r284
  Move         r287, r286
  JumpIfTrue   r287, L10
  Const        r288, "note"
  Index        r289, r188, r288
  Const        r290, "(worldwide)"
  In           r291, r290, r289
  Move         r287, r291
L10:
  // cn.country_code == "[us]" &&
  Move         r282, r287
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  JumpIfFalse  r282, L9
  Move         r282, r277
  // n.gender == "f" &&
  JumpIfFalse  r282, L9
  Const        r292, "name"
  Index        r293, r60, r292
  // n.name.contains("Ang") &&
  Const        r294, "Ang"
  In           r295, r294, r293
  // n.gender == "f" &&
  Move         r282, r295
  // n.name.contains("Ang") &&
  JumpIfFalse  r282, L9
  Move         r282, r281
  // rt.role == "actress" &&
  JumpIfFalse  r282, L9
  Move         r282, r265
  // t.production_year >= 2005 && t.production_year <= 2015
  JumpIfFalse  r282, L9
  Move         r282, r269
L9:
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  JumpIfFalse  r282, L8
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r296, "alt"
  Const        r297, "name"
  Index        r298, r33, r297
  Const        r299, "character"
  Const        r300, "name"
  Index        r301, r124, r300
  Const        r302, "movie"
  Const        r303, "title"
  Index        r304, r156, r303
  Move         r305, r296
  Move         r306, r298
  Move         r307, r299
  Move         r308, r301
  Move         r309, r302
  Move         r310, r304
  MakeMap      r311, 3, r305
  // from an in aka_name
  Append       r312, r8, r311
  Move         r8, r312
L8:
  // join rt in role_type on rt.id == ci.role_id
  Const        r313, 1
  Add          r248, r248, r313
  Jump         L11
L7:
  // join cn in company_name on cn.id == mc.company_id
  Const        r314, 1
  Add          r216, r216, r314
  Jump         L12
L6:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r315, 1
  Add          r184, r184, r315
  Jump         L13
L5:
  // join t in title on t.id == ci.movie_id
  Const        r316, 1
  Add          r152, r152, r316
  Jump         L14
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r317, 1
  Add          r120, r120, r317
  Jump         L15
L3:
  // join ci in cast_info on ci.person_id == n.id
  Const        r318, 1
  Add          r88, r88, r318
  Jump         L16
L2:
  // join n in name on an.person_id == n.id
  Const        r319, 1
  Add          r56, r56, r319
  Jump         L17
L1:
  // from an in aka_name
  Const        r320, 1
  AddInt       r29, r29, r320
  Jump         L18
L0:
  // alternative_name: min(from x in matches select x.alt),
  Const        r321, "alternative_name"
  Const        r322, []
  Const        r323, "alt"
  IterPrep     r324, r8
  Len          r325, r324
  Const        r327, 0
  Move         r326, r327
L20:
  LessInt      r328, r326, r325
  JumpIfFalse  r328, L19
  Index        r329, r324, r326
  Move         r330, r329
  Const        r331, "alt"
  Index        r332, r330, r331
  Append       r333, r322, r332
  Move         r322, r333
  Const        r334, 1
  AddInt       r326, r326, r334
  Jump         L20
L19:
  Min          r335, r322
  // character_name: min(from x in matches select x.character),
  Const        r336, "character_name"
  Const        r337, []
  Const        r338, "character"
  IterPrep     r339, r8
  Len          r340, r339
  Const        r342, 0
  Move         r341, r342
L22:
  LessInt      r343, r341, r340
  JumpIfFalse  r343, L21
  Index        r344, r339, r341
  Move         r330, r344
  Const        r345, "character"
  Index        r346, r330, r345
  Append       r347, r337, r346
  Move         r337, r347
  Const        r348, 1
  AddInt       r341, r341, r348
  Jump         L22
L21:
  Min          r349, r337
  // movie: min(from x in matches select x.movie)
  Const        r350, "movie"
  Const        r351, []
  Const        r352, "movie"
  IterPrep     r353, r8
  Len          r354, r353
  Const        r356, 0
  Move         r355, r356
L24:
  LessInt      r357, r355, r354
  JumpIfFalse  r357, L23
  Index        r358, r353, r355
  Move         r330, r358
  Const        r359, "movie"
  Index        r360, r330, r359
  Append       r361, r351, r360
  Move         r351, r361
  Const        r362, 1
  AddInt       r355, r355, r362
  Jump         L24
L23:
  Min          r363, r351
  // alternative_name: min(from x in matches select x.alt),
  Move         r364, r321
  Move         r365, r335
  // character_name: min(from x in matches select x.character),
  Move         r366, r336
  Move         r367, r349
  // movie: min(from x in matches select x.movie)
  Move         r368, r350
  Move         r369, r363
  // {
  MakeMap      r370, 3, r364
  Move         r371, r370
  // let result = [
  MakeList     r372, 1, r371
  // json(result)
  JSON         r372
  // expect result == [
  Const        r373, [{"alternative_name": "A. N. G.", "character_name": "Angel", "movie": "Famous Film"}]
  Equal        r374, r372, r373
  Expect       r374
  Return       r0
