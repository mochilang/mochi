func main (regs=35)
  // let aka_name = [
  Const        r0, [{"name": "A. N. G.", "person_id": 1}, {"name": "J. D.", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
L9:
  // let cast_info = [
  Const        r2, [{"movie_id": 100, "note": "(voice)", "person_id": 1, "person_role_id": 10, "role_id": 1000}, {"movie_id": 200, "note": "(voice)", "person_id": 2, "person_role_id": 20, "role_id": 1000}]
L13:
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 100}, {"country_code": "[gb]", "id": 200}]
L12:
  // let movie_companies = [
  Const        r4, [{"company_id": 100, "movie_id": 100, "note": "ACME Studios (USA)"}, {"company_id": 200, "movie_id": 200, "note": "Maple Films"}]
  // let name = [
  Const        r5, [{"gender": "f", "id": 1, "name": "Angela Smith"}, {"gender": "m", "id": 2, "name": "John Doe"}]
L10:
  // let role_type = [
  Const        r6, [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
L4:
  // let title = [
  Const        r7, [{"id": 100, "production_year": 2010, "title": "Famous Film"}, {"id": 200, "production_year": 1999, "title": "Old Movie"}]
L2:
  // from an in aka_name
  Const        r8, []
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r9, "note"
  // cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // n.gender == "f" &&
  Const        r11, "gender"
  // n.name.contains("Ang") &&
  Const        r12, "name"
  // rt.role == "actress" &&
  Const        r13, "role"
L7:
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r14, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r15, "alt"
  Const        r16, "character"
  Const        r17, "movie"
  Const        r18, "title"
L15:
  // from an in aka_name
  IterPrep     r19, r0
  Len          r20, r19
L0:
  Const        r21, 0
L5:
  Move         r22, r21
L8:
  LessInt      r23, r22, r20
  JumpIfFalse  r23, L0
L1:
  Index        r23, r19, r22
  // join n in name on an.person_id == n.id
  IterPrep     r19, r5
  Len          r5, r19
  Const        r20, "person_id"
L14:
  Const        r24, "id"
L3:
  Move         r25, r21
  LessInt      r26, r25, r5
  JumpIfFalse  r26, L0
  Index        r26, r19, r25
  Index        r25, r23, r20
  Index        r19, r26, r24
  Equal        r5, r25, r19
  JumpIfFalse  r5, L1
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r5, r2
  Len          r2, r5
  Move         r19, r21
  LessInt      r25, r19, r2
  JumpIfFalse  r25, L1
  Index        r2, r5, r19
  Index        r5, r2, r20
  Index        r20, r26, r24
  Equal        r27, r5, r20
  JumpIfFalse  r27, L2
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r27, r1
  Len          r1, r27
  Const        r20, "person_role_id"
  Move         r5, r21
  LessInt      r28, r5, r1
  JumpIfFalse  r28, L2
  Index        r28, r27, r5
  Index        r27, r28, r24
  Index        r1, r2, r20
  Equal        r20, r27, r1
  JumpIfFalse  r20, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r20, r7
  Len          r7, r20
  Const        r1, "movie_id"
  Move         r27, r21
  LessInt      r29, r27, r7
  JumpIfFalse  r29, L3
  Index        r29, r20, r27
  Index        r20, r29, r24
  Index        r7, r2, r1
  Equal        r30, r20, r7
  JumpIfFalse  r30, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r30, r4
  Len          r4, r30
  Move         r7, r21
  LessInt      r20, r7, r4
  JumpIfFalse  r20, L4
  Index        r20, r30, r7
  Index        r30, r20, r1
  Index        r1, r29, r24
  Equal        r4, r30, r1
  JumpIfFalse  r4, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r4, r3
  Len          r3, r4
  Const        r1, "company_id"
  Move         r31, r21
  LessInt      r32, r31, r3
  JumpIfFalse  r32, L4
  Index        r32, r4, r31
  Index        r4, r32, r24
  Index        r3, r20, r1
  Equal        r1, r4, r3
  JumpIfFalse  r1, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r1, r6
  Len          r6, r1
  Const        r4, "role_id"
  Move         r33, r21
  LessInt      r34, r33, r6
  JumpIfFalse  r34, L4
  Index        r34, r1, r33
  Index        r1, r34, r24
  Index        r24, r2, r4
  Equal        r4, r1, r24
  JumpIfFalse  r4, L5
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Index        r24, r2, r9
  Const        r2, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r1, r24, r2
  // t.production_year >= 2005 && t.production_year <= 2015
  Index        r2, r29, r14
  Const        r24, 2005
  LessEq       r6, r24, r2
  Index        r24, r29, r14
  Const        r14, 2015
  LessEq       r2, r24, r14
  // cn.country_code == "[us]" &&
  Index        r14, r32, r10
  Const        r32, "[us]"
  Equal        r10, r14, r32
  // n.gender == "f" &&
  Index        r32, r26, r11
  Const        r11, "f"
  Equal        r14, r32, r11
  // rt.role == "actress" &&
  Index        r11, r34, r13
  Const        r34, "actress"
  Equal        r13, r11, r34
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Move         r34, r1
  JumpIfFalse  r34, L6
L6:
  // cn.country_code == "[us]" &&
  Move         r34, r10
  JumpIfFalse  r34, L7
  Index        r34, r20, r9
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r10, "(USA)"
  In           r1, r10, r34
  JumpIfTrue   r1, L7
  Index        r10, r20, r9
  Const        r20, "(worldwide)"
  In           r1, r20, r10
  Move         r20, r1
  JumpIfFalse  r20, L8
  // n.gender == "f" &&
  Move         r20, r14
  JumpIfFalse  r20, L7
  Index        r20, r26, r12
  // n.name.contains("Ang") &&
  Const        r26, "Ang"
  In           r14, r26, r20
  JumpIfFalse  r14, L9
  // rt.role == "actress" &&
  Move         r14, r13
  JumpIfFalse  r14, L10
  // t.production_year >= 2005 && t.production_year <= 2015
  Move         r14, r6
  JumpIfFalse  r14, L11
  Move         r14, r2
L11:
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  JumpIfFalse  r14, L5
  // select { alt: an.name, character: chn.name, movie: t.title }
  Move         r14, r15
  Index        r2, r23, r12
  Move         r23, r16
  Index        r6, r28, r12
  Move         r28, r17
  Index        r12, r29, r18
  Move         r18, r14
  Move         r14, r2
  Move         r2, r23
  Move         r23, r6
  Move         r6, r28
  Move         r28, r12
  MakeMap      r12, 3, r18
  // from an in aka_name
  Append       r8, r8, r12
  // join rt in role_type on rt.id == ci.role_id
  Const        r12, 1
  Add          r33, r33, r12
  Jump         L12
  // join cn in company_name on cn.id == mc.company_id
  Add          r31, r31, r12
  Jump         L13
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r7, r7, r12
  Jump         L3
  // join t in title on t.id == ci.movie_id
  Add          r27, r27, r12
  Jump         L14
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r5, r5, r12
  Jump         L12
  // join ci in cast_info on ci.person_id == n.id
  Add          r19, r19, r12
  Jump         L1
  // from an in aka_name
  AddInt       r22, r22, r12
  Jump         L0
  // alternative_name: min(from x in matches select x.alt),
  Const        r4, "alternative_name"
  Const        r25, []
  IterPrep     r19, r8
  Len          r22, r19
  Move         r33, r21
  LessInt      r3, r33, r22
  JumpIfFalse  r3, L0
  Index        r3, r19, r33
  Index        r19, r3, r15
  Append       r25, r25, r19
  AddInt       r33, r33, r12
  Jump         L15
  Min          r33, r25
  // character_name: min(from x in matches select x.character),
  Const        r25, "character_name"
  Const        r15, []
  IterPrep     r22, r8
  Len          r31, r22
  Move         r30, r21
L17:
  LessInt      r7, r30, r31
  JumpIfFalse  r7, L16
  Index        r3, r22, r30
  Index        r7, r3, r16
  Append       r15, r15, r7
  AddInt       r30, r30, r12
  Jump         L17
L16:
  Min          r7, r15
  // movie: min(from x in matches select x.movie)
  Move         r15, r17
  Const        r30, []
  IterPrep     r16, r8
  Len          r8, r16
  Move         r31, r21
L19:
  LessInt      r21, r31, r8
  JumpIfFalse  r21, L18
  Index        r3, r16, r31
  Index        r21, r3, r17
  Append       r30, r30, r21
  AddInt       r31, r31, r12
  Jump         L19
L18:
  Min          r21, r30
  // alternative_name: min(from x in matches select x.alt),
  Move         r30, r4
  Move         r4, r33
  // character_name: min(from x in matches select x.character),
  Move         r19, r25
  Move         r25, r7
  // movie: min(from x in matches select x.movie)
  Move         r7, r15
  Move         r15, r21
  // {
  MakeMap      r21, 3, r30
  // let result = [
  MakeList     r15, 1, r21
  // json(result)
  JSON         r15
  // expect result == [
  Const        r21, [{"alternative_name": "A. N. G.", "character_name": "Angel", "movie": "Famous Film"}]
  Equal        r7, r15, r21
  Expect       r7
  Return       r0
