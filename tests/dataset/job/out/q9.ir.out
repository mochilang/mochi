func main (regs=182)
  // let aka_name = [
  Const        r0, [{"name": "A. N. G.", "person_id": 1}, {"name": "J. D.", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 100, "note": "(voice)", "person_id": 1, "person_role_id": 10, "role_id": 1000}, {"movie_id": 200, "note": "(voice)", "person_id": 2, "person_role_id": 20, "role_id": 1000}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 100}, {"country_code": "[gb]", "id": 200}]
  // let movie_companies = [
  Const        r4, [{"company_id": 100, "movie_id": 100, "note": "ACME Studios (USA)"}, {"company_id": 200, "movie_id": 200, "note": "Maple Films"}]
  // let name = [
  Const        r5, [{"gender": "f", "id": 1, "name": "Angela Smith"}, {"gender": "m", "id": 2, "name": "John Doe"}]
  // let role_type = [
  Const        r6, [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
  // let title = [
  Const        r7, [{"id": 100, "production_year": 2010, "title": "Famous Film"}, {"id": 200, "production_year": 1999, "title": "Old Movie"}]
  // from an in aka_name
  Const        r8, []
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Const        r9, "note"
  // cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r11, "contains"
  // n.gender == "f" &&
  Const        r12, "gender"
  // n.name.contains("Ang") &&
  Const        r13, "name"
  // rt.role == "actress" &&
  Const        r14, "role"
  // t.production_year >= 2005 && t.production_year <= 2015
  Const        r15, "production_year"
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r16, "alt"
  Const        r17, "character"
  Const        r18, "movie"
  Const        r19, "title"
  // from an in aka_name
  IterPrep     r20, r0
  Len          r21, r20
  Const        r23, 0
  Move         r22, r23
L18:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r25, r20, r22
  Move         r26, r25
  // join n in name on an.person_id == n.id
  IterPrep     r27, r5
  Len          r28, r27
  Const        r29, "person_id"
  Const        r30, "id"
  Move         r31, r23
L17:
  LessInt      r32, r31, r28
  JumpIfFalse  r32, L1
  Index        r33, r27, r31
  Move         r34, r33
  Index        r35, r26, r29
  Index        r36, r34, r30
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r38, r2
  Len          r39, r38
  Move         r40, r23
L16:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Move         r43, r42
  Index        r44, r43, r29
  Index        r45, r34, r30
  Equal        r46, r44, r45
  JumpIfFalse  r46, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r47, r1
  Len          r48, r47
  Const        r49, "person_role_id"
  Move         r50, r23
L15:
  LessInt      r51, r50, r48
  JumpIfFalse  r51, L3
  Index        r52, r47, r50
  Move         r53, r52
  Index        r54, r53, r30
  Index        r55, r43, r49
  Equal        r56, r54, r55
  JumpIfFalse  r56, L4
  // join t in title on t.id == ci.movie_id
  IterPrep     r57, r7
  Len          r58, r57
  Const        r59, "movie_id"
  Move         r60, r23
L14:
  LessInt      r61, r60, r58
  JumpIfFalse  r61, L4
  Index        r62, r57, r60
  Move         r63, r62
  Index        r64, r63, r30
  Index        r65, r43, r59
  Equal        r66, r64, r65
  JumpIfFalse  r66, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r67, r4
  Len          r68, r67
  Move         r69, r23
L13:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L5
  Index        r71, r67, r69
  Move         r72, r71
  Index        r73, r72, r59
  Index        r74, r63, r30
  Equal        r75, r73, r74
  JumpIfFalse  r75, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r76, r3
  Len          r77, r76
  Const        r78, "company_id"
  Move         r79, r23
L12:
  LessInt      r80, r79, r77
  JumpIfFalse  r80, L6
  Index        r81, r76, r79
  Move         r82, r81
  Index        r83, r82, r30
  Index        r84, r72, r78
  Equal        r85, r83, r84
  JumpIfFalse  r85, L7
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r86, r6
  Len          r87, r86
  Const        r88, "role_id"
  Move         r89, r23
L11:
  LessInt      r90, r89, r87
  JumpIfFalse  r90, L7
  Index        r91, r86, r89
  Move         r92, r91
  Index        r93, r92, r30
  Index        r94, r43, r88
  Equal        r95, r93, r94
  JumpIfFalse  r95, L8
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Index        r96, r43, r9
  Const        r97, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r98, r96, r97
  // t.production_year >= 2005 && t.production_year <= 2015
  Index        r99, r63, r15
  Const        r100, 2005
  LessEq       r101, r100, r99
  Index        r102, r63, r15
  Const        r103, 2015
  LessEq       r104, r102, r103
  // cn.country_code == "[us]" &&
  Index        r105, r82, r10
  Const        r106, "[us]"
  Equal        r107, r105, r106
  // n.gender == "f" &&
  Index        r108, r34, r12
  Const        r109, "f"
  Equal        r110, r108, r109
  // rt.role == "actress" &&
  Index        r111, r92, r14
  Const        r112, "actress"
  Equal        r113, r111, r112
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  Move         r114, r98
  JumpIfFalse  r114, L9
  Move         r114, r107
  // cn.country_code == "[us]" &&
  JumpIfFalse  r114, L9
  Index        r115, r72, r9
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r116, "(USA)"
  In           r117, r116, r115
  Move         r118, r117
  JumpIfTrue   r118, L10
  Index        r119, r72, r9
  Const        r120, "(worldwide)"
  In           r121, r120, r119
  Move         r118, r121
L10:
  // cn.country_code == "[us]" &&
  Move         r114, r118
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  JumpIfFalse  r114, L9
  Move         r114, r110
  // n.gender == "f" &&
  JumpIfFalse  r114, L9
  Index        r122, r34, r13
  // n.name.contains("Ang") &&
  Const        r123, "Ang"
  In           r124, r123, r122
  // n.gender == "f" &&
  Move         r114, r124
  // n.name.contains("Ang") &&
  JumpIfFalse  r114, L9
  Move         r114, r113
  // rt.role == "actress" &&
  JumpIfFalse  r114, L9
  Move         r114, r101
  // t.production_year >= 2005 && t.production_year <= 2015
  JumpIfFalse  r114, L9
  Move         r114, r104
L9:
  // where (ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]) &&
  JumpIfFalse  r114, L8
  // select { alt: an.name, character: chn.name, movie: t.title }
  Const        r125, "alt"
  Index        r126, r26, r13
  Const        r127, "character"
  Index        r128, r53, r13
  Const        r129, "movie"
  Index        r130, r63, r19
  Move         r131, r125
  Move         r132, r126
  Move         r133, r127
  Move         r134, r128
  Move         r135, r129
  Move         r136, r130
  MakeMap      r137, 3, r131
  // from an in aka_name
  Append       r138, r8, r137
  Move         r8, r138
L8:
  // join rt in role_type on rt.id == ci.role_id
  Const        r139, 1
  Add          r89, r89, r139
  Jump         L11
L7:
  // join cn in company_name on cn.id == mc.company_id
  Add          r79, r79, r139
  Jump         L12
L6:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r69, r69, r139
  Jump         L13
L5:
  // join t in title on t.id == ci.movie_id
  Add          r60, r60, r139
  Jump         L14
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r50, r50, r139
  Jump         L15
L3:
  // join ci in cast_info on ci.person_id == n.id
  Add          r40, r40, r139
  Jump         L16
L2:
  // join n in name on an.person_id == n.id
  Add          r31, r31, r139
  Jump         L17
L1:
  // from an in aka_name
  AddInt       r22, r22, r139
  Jump         L18
L0:
  // alternative_name: min(from x in matches select x.alt),
  Const        r140, "alternative_name"
  Const        r141, []
  IterPrep     r142, r8
  Len          r143, r142
  Move         r144, r23
L20:
  LessInt      r145, r144, r143
  JumpIfFalse  r145, L19
  Index        r146, r142, r144
  Move         r147, r146
  Index        r148, r147, r16
  Append       r149, r141, r148
  Move         r141, r149
  AddInt       r144, r144, r139
  Jump         L20
L19:
  Min          r150, r141
  // character_name: min(from x in matches select x.character),
  Const        r151, "character_name"
  Const        r152, []
  IterPrep     r153, r8
  Len          r154, r153
  Move         r155, r23
L22:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L21
  Index        r157, r153, r155
  Move         r147, r157
  Index        r158, r147, r17
  Append       r159, r152, r158
  Move         r152, r159
  AddInt       r155, r155, r139
  Jump         L22
L21:
  Min          r160, r152
  // movie: min(from x in matches select x.movie)
  Const        r161, "movie"
  Const        r162, []
  IterPrep     r163, r8
  Len          r164, r163
  Move         r165, r23
L24:
  LessInt      r166, r165, r164
  JumpIfFalse  r166, L23
  Index        r167, r163, r165
  Move         r147, r167
  Index        r168, r147, r18
  Append       r169, r162, r168
  Move         r162, r169
  AddInt       r165, r165, r139
  Jump         L24
L23:
  Min          r170, r162
  // alternative_name: min(from x in matches select x.alt),
  Move         r171, r140
  Move         r172, r150
  // character_name: min(from x in matches select x.character),
  Move         r173, r151
  Move         r174, r160
  // movie: min(from x in matches select x.movie)
  Move         r175, r161
  Move         r176, r170
  // {
  MakeMap      r177, 3, r171
  Move         r178, r177
  // let result = [
  MakeList     r179, 1, r178
  // json(result)
  JSON         r179
  // expect result == [
  Const        r180, [{"alternative_name": "A. N. G.", "character_name": "Angel", "movie": "Famous Film"}]
  Equal        r181, r179, r180
  Expect       r181
  Return       r0
