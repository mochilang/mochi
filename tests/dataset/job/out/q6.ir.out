func main (regs=110)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "person_id": 101}, {"movie_id": 2, "person_id": 102}]
  Move         r1, r0
  // let keyword = [
  Const        r2, [{"id": 100, "keyword": "marvel-cinematic-universe"}, {"id": 200, "keyword": "other"}]
  Move         r3, r2
  // let movie_keyword = [
  Const        r4, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 200, "movie_id": 2}]
  Move         r5, r4
  // let name = [
  Const        r6, [{"id": 101, "name": "Downey Robert Jr."}, {"id": 102, "name": "Chris Evans"}]
  Move         r7, r6
  // let title = [
  Const        r8, [{"id": 1, "production_year": 2013, "title": "Iron Man 3"}, {"id": 2, "production_year": 2000, "title": "Old Movie"}]
  Move         r9, r8
  // from ci in cast_info
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L13:
  Less         r14, r13, r12
  JumpIfFalse  r14, L0
  Index        r15, r11, r13
  Move         r16, r15
  // join mk in movie_keyword on ci.movie_id == mk.movie_id
  IterPrep     r17, r5
  Len          r18, r17
  Const        r19, 0
L12:
  Less         r20, r19, r18
  JumpIfFalse  r20, L1
  Index        r21, r17, r19
  Move         r22, r21
  Const        r23, "movie_id"
  Index        r24, r16, r23
  Const        r25, "movie_id"
  Index        r26, r22, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // join k in keyword on mk.keyword_id == k.id
  IterPrep     r28, r3
  Len          r29, r28
  Const        r30, 0
L11:
  Less         r31, r30, r29
  JumpIfFalse  r31, L2
  Index        r32, r28, r30
  Move         r33, r32
  Const        r34, "keyword_id"
  Index        r35, r22, r34
  Const        r36, "id"
  Index        r37, r33, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L3
  // join n in name on ci.person_id == n.id
  IterPrep     r39, r7
  Len          r40, r39
  Const        r41, 0
L10:
  Less         r42, r41, r40
  JumpIfFalse  r42, L3
  Index        r43, r39, r41
  Move         r44, r43
  Const        r45, "person_id"
  Index        r46, r16, r45
  Const        r47, "id"
  Index        r48, r44, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L4
  // join t in title on ci.movie_id == t.id
  IterPrep     r50, r9
  Len          r51, r50
  Const        r52, 0
L9:
  Less         r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Const        r56, "movie_id"
  Index        r57, r16, r56
  Const        r58, "id"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L5
  // k.keyword == "marvel-cinematic-universe" &&
  Const        r61, "keyword"
  Index        r62, r33, r61
  // t.production_year > 2010
  Const        r63, "production_year"
  Index        r64, r55, r63
  Const        r65, 2010
  Less         r66, r65, r64
  // k.keyword == "marvel-cinematic-universe" &&
  Const        r67, "marvel-cinematic-universe"
  Equal        r68, r62, r67
  Move         r69, r68
  JumpIfFalse  r69, L6
  Const        r70, "name"
  Index        r71, r44, r70
  // n.name.contains("Downey") &&
  Const        r72, "Downey"
  In           r73, r72, r71
  // k.keyword == "marvel-cinematic-universe" &&
  Move         r69, r73
L6:
  // n.name.contains("Downey") &&
  Move         r74, r69
  JumpIfFalse  r74, L7
  Const        r75, "name"
  Index        r76, r44, r75
  // n.name.contains("Robert") &&
  Const        r77, "Robert"
  In           r78, r77, r76
  // n.name.contains("Downey") &&
  Move         r74, r78
L7:
  // n.name.contains("Robert") &&
  Move         r79, r74
  JumpIfFalse  r79, L8
  Move         r79, r66
L8:
  // k.keyword == "marvel-cinematic-universe" &&
  JumpIfFalse  r79, L5
  // movie_keyword: k.keyword,
  Const        r80, "movie_keyword"
  Const        r81, "keyword"
  Index        r82, r33, r81
  // actor_name: n.name,
  Const        r83, "actor_name"
  Const        r84, "name"
  Index        r85, r44, r84
  // marvel_movie: t.title
  Const        r86, "marvel_movie"
  Const        r87, "title"
  Index        r88, r55, r87
  // movie_keyword: k.keyword,
  Move         r89, r80
  Move         r90, r82
  // actor_name: n.name,
  Move         r91, r83
  Move         r92, r85
  // marvel_movie: t.title
  Move         r93, r86
  Move         r94, r88
  // select {
  MakeMap      r95, 3, r89
  // from ci in cast_info
  Append       r96, r10, r95
  Move         r10, r96
L5:
  // join t in title on ci.movie_id == t.id
  Const        r97, 1
  Add          r98, r52, r97
  Move         r52, r98
  Jump         L9
L4:
  // join n in name on ci.person_id == n.id
  Const        r99, 1
  Add          r100, r41, r99
  Move         r41, r100
  Jump         L10
L3:
  // join k in keyword on mk.keyword_id == k.id
  Const        r101, 1
  Add          r102, r30, r101
  Move         r30, r102
  Jump         L11
L2:
  // join mk in movie_keyword on ci.movie_id == mk.movie_id
  Const        r103, 1
  Add          r104, r19, r103
  Move         r19, r104
  Jump         L12
L1:
  // from ci in cast_info
  Const        r105, 1
  Add          r106, r13, r105
  Move         r13, r106
  Jump         L13
L0:
  // let result =
  Move         r107, r10
  // json(result)
  JSON         r107
  // expect result == [
  Const        r108, [{"actor_name": "Downey Robert Jr.", "marvel_movie": "Iron Man 3", "movie_keyword": "marvel-cinematic-universe"}]
  Equal        r109, r107, r108
  Expect       r109
  Return       r0
