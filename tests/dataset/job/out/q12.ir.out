func main (regs=41)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "Best Pictures"}, {"country_code": "[uk]", "id": 2, "name": "Foreign Films"}]
  // let company_type = [
  Const        r1, [{"id": 10, "kind": "production companies"}, {"id": 20, "kind": "distributors"}]
L11:
  // let info_type = [
  Const        r2, [{"id": 100, "info": "genres"}, {"id": 200, "info": "rating"}]
L17:
  // let movie_companies = [
  Const        r3, [{"company_id": 1, "company_type_id": 10, "movie_id": 1000}, {"company_id": 2, "company_type_id": 10, "movie_id": 2000}]
  // let movie_info = [
  Const        r4, [{"info": "Drama", "info_type_id": 100, "movie_id": 1000}, {"info": "Horror", "info_type_id": 100, "movie_id": 2000}]
L13:
  // let movie_info_idx = [
  Const        r5, [{"info": 8.3, "info_type_id": 200, "movie_id": 1000}, {"info": 7.5, "info_type_id": 200, "movie_id": 2000}]
L12:
  // let title = [
  Const        r6, [{"id": 1000, "production_year": 2006, "title": "Great Drama"}, {"id": 2000, "production_year": 2007, "title": "Low Rated"}]
  // from cn in company_name
  Const        r7, []
  // cn.country_code == "[us]" &&
  Const        r8, "country_code"
  // ct.kind == "production companies" &&
  Const        r9, "kind"
  // it1.info == "genres" &&
  Const        r10, "info"
  // t.production_year >= 2005 &&
  Const        r11, "production_year"
  // movie_company: cn.name,
  Const        r12, "movie_company"
  Const        r12, "name"
  // rating: mi_idx.info,
  Const        r13, "rating"
  // drama_horror_movie: t.title
  Const        r14, "drama_horror_movie"
L16:
  Const        r14, "title"
  // from cn in company_name
  IterPrep     r15, r0
  Len          r16, r15
L18:
  Const        r17, 0
  Move         r18, r17
  LessInt      r19, r18, r16
  JumpIfFalse  r19, L0
L15:
  Index        r16, r15, r18
L14:
  Move         r15, r16
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r16, r3
  Len          r3, r16
  Const        r20, "company_id"
  Const        r21, "id"
  Move         r22, r17
  LessInt      r23, r22, r3
  JumpIfFalse  r23, L1
  Index        r3, r16, r22
  Move         r23, r3
  Index        r16, r23, r20
  Index        r20, r15, r21
  Equal        r24, r16, r20
  JumpIfFalse  r24, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r16, r1
  Len          r20, r16
  Const        r24, "company_type_id"
  Move         r1, r17
  LessInt      r25, r1, r20
  JumpIfFalse  r25, L2
  Index        r20, r16, r1
  Move         r25, r20
  Index        r16, r25, r21
  Index        r20, r23, r24
  Equal        r24, r16, r20
  JumpIfFalse  r24, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r20, r6
  Len          r24, r20
  Const        r6, "movie_id"
  Move         r26, r17
  LessInt      r27, r26, r24
  JumpIfFalse  r27, L3
  Index        r24, r20, r26
  Move         r27, r24
  Index        r20, r27, r21
  Index        r24, r23, r6
  Equal        r23, r20, r24
  JumpIfFalse  r23, L4
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r20, r4
  Len          r24, r20
  Move         r4, r17
  LessInt      r28, r4, r24
  JumpIfFalse  r28, L4
  Index        r24, r20, r4
  Move         r28, r24
  Index        r20, r28, r6
  Index        r24, r27, r21
  Equal        r29, r20, r24
  JumpIfFalse  r29, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r20, r2
  Len          r24, r20
  Const        r29, "info_type_id"
  Move         r30, r17
  LessInt      r31, r30, r24
  JumpIfFalse  r31, L5
  Index        r31, r20, r30
  Move         r20, r31
  Index        r31, r20, r21
  Index        r32, r28, r29
  Equal        r33, r31, r32
  JumpIfFalse  r33, L6
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r31, r5
  Len          r32, r31
  Move         r33, r17
  LessInt      r5, r33, r32
  JumpIfFalse  r5, L6
  Index        r32, r31, r33
  Move         r31, r32
  Index        r32, r31, r6
  Index        r6, r27, r21
  Equal        r34, r32, r6
  JumpIfFalse  r34, L7
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r32, r2
  Len          r6, r32
  Move         r34, r17
  LessInt      r2, r34, r6
  JumpIfFalse  r2, L7
  Index        r17, r32, r34
  Move         r6, r17
  Index        r2, r6, r21
  Index        r32, r31, r29
  Equal        r17, r2, r32
  JumpIfFalse  r17, L8
  // cn.country_code == "[us]" &&
  Index        r21, r15, r8
  // mi_idx.info > 8.0 &&
  Index        r29, r31, r10
  Const        r2, 8.0
  LessFloat    r32, r2, r29
  // t.production_year >= 2005 &&
  Index        r17, r27, r11
  Const        r8, 2005
  LessEq       r29, r8, r17
  // t.production_year <= 2008
  Index        r2, r27, r11
  Const        r17, 2008
  LessEq       r8, r2, r17
  // cn.country_code == "[us]" &&
  Const        r11, "[us]"
  Equal        r17, r21, r11
  // ct.kind == "production companies" &&
  Index        r21, r25, r9
  Const        r11, "production companies"
  Equal        r9, r21, r11
  // it1.info == "genres" &&
  Index        r25, r20, r10
  Const        r21, "genres"
  Equal        r11, r25, r21
  // it2.info == "rating" &&
  Index        r20, r6, r10
  Equal        r25, r20, r13
  // cn.country_code == "[us]" &&
  Move         r21, r17
  JumpIfFalse  r21, L9
  Move         r21, r9
  // ct.kind == "production companies" &&
  JumpIfFalse  r21, L9
  Move         r21, r11
  // it1.info == "genres" &&
  JumpIfFalse  r21, L9
  Move         r21, r25
  // it2.info == "rating" &&
  JumpIfFalse  r21, L9
  // (mi.info == "Drama" || mi.info == "Horror") &&
  Index        r13, r28, r10
  Const        r20, "Drama"
  Equal        r17, r13, r20
  Index        r9, r28, r10
  Const        r11, "Horror"
  Equal        r25, r9, r11
  Move         r13, r17
  JumpIfTrue   r13, L10
  Move         r13, r25
L10:
  // it2.info == "rating" &&
  Move         r21, r13
  // (mi.info == "Drama" || mi.info == "Horror") &&
  JumpIfFalse  r21, L9
  Move         r21, r32
  // mi_idx.info > 8.0 &&
  JumpIfFalse  r21, L9
  Move         r21, r29
  // t.production_year >= 2005 &&
  JumpIfFalse  r21, L9
  Move         r21, r8
L9:
  // cn.country_code == "[us]" &&
  JumpIfFalse  r21, L8
  // movie_company: cn.name,
  Const        r20, "movie_company"
  Index        r28, r15, r12
  // rating: mi_idx.info,
  Const        r9, "rating"
  Index        r11, r31, r10
  // drama_horror_movie: t.title
  Const        r32, "drama_horror_movie"
  Index        r29, r27, r14
  // movie_company: cn.name,
  Move         r35, r20
  Move         r36, r28
  // rating: mi_idx.info,
  Move         r37, r9
  Move         r38, r11
  // drama_horror_movie: t.title
  Move         r39, r32
  Move         r40, r29
  // select {
  MakeMap      r8, 3, r35
  // from cn in company_name
  Append       r21, r7, r8
  Move         r7, r21
L8:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r17, 1
  Add          r34, r34, r17
  Jump         L11
L7:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r33, r33, r17
  Jump         L12
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r30, r30, r17
  Jump         L13
L5:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r4, r4, r17
  Jump         L14
L4:
  // join t in title on t.id == mc.movie_id
  Add          r26, r26, r17
  Jump         L15
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r1, r1, r17
  Jump         L16
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r22, r22, r17
  Jump         L17
L1:
  // from cn in company_name
  AddInt       r18, r18, r17
  Jump         L18
L0:
  // json(result)
  JSON         r7
  // expect result == [
  Const        r25, [{"drama_horror_movie": "Great Drama", "movie_company": "Best Pictures", "rating": 8.3}]
  Equal        r13, r7, r25
  Expect       r13
  Return       r0
