func main (regs=41)
  // let aka_name = [
  Const        r0, [{"name": "Alpha", "person_id": 1}, {"name": "Beta", "person_id": 2}]
L14:
  // let cast_info = [
  Const        r1, [{"movie_id": 101, "person_id": 1}, {"movie_id": 102, "person_id": 2}]
  // let company_name = [
  Const        r2, [{"country_code": "[us]", "id": 1}, {"country_code": "[de]", "id": 2}]
L5:
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "character-name-in-title"}, {"id": 2, "keyword": "other"}]
L11:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 101}, {"company_id": 2, "movie_id": 102}]
L6:
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 101}, {"keyword_id": 2, "movie_id": 102}]
L16:
  // let name = [
  Const        r6, [{"id": 1}, {"id": 2}]
L7:
  // let title = [
  Const        r7, [{"episode_nr": 60, "id": 101, "title": "Hero Bob"}, {"episode_nr": 40, "id": 102, "title": "Other Show"}]
  // from an in aka_name
  Const        r8, []
  // where cn.country_code == "[us]" &&
  Const        r9, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r10, "keyword"
  // t.episode_nr >= 50 &&
  Const        r11, "episode_nr"
  // select { pseudonym: an.name, series: t.title }
  Const        r12, "pseudonym"
  Const        r13, "name"
  Const        r14, "series"
  Const        r15, "title"
  // from an in aka_name
  IterPrep     r16, r0
L15:
  Len          r17, r16
  Const        r18, 0
  Move         r19, r18
L17:
  LessInt      r20, r19, r17
L10:
  JumpIfFalse  r20, L0
  Index        r17, r16, r19
  Move         r16, r17
  // join n in name on n.id == an.person_id
  IterPrep     r17, r6
L13:
  Len          r6, r17
  Const        r21, "id"
  Const        r22, "person_id"
L12:
  Move         r23, r18
  LessInt      r24, r23, r6
  JumpIfFalse  r24, L1
  Index        r6, r17, r23
  Move         r24, r6
  Index        r17, r24, r21
L9:
  Index        r25, r16, r22
  Equal        r26, r17, r25
  JumpIfFalse  r26, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r17, r1
L8:
  Len          r25, r17
  Move         r26, r18
  LessInt      r1, r26, r25
  JumpIfFalse  r1, L2
  Index        r25, r17, r26
  Move         r1, r25
  Index        r17, r1, r22
  Index        r25, r24, r21
  Equal        r22, r17, r25
  JumpIfFalse  r22, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r24, r7
  Len          r25, r24
  Const        r22, "movie_id"
  Move         r7, r18
  LessInt      r27, r7, r25
  JumpIfFalse  r27, L3
  Index        r25, r24, r7
  Move         r27, r25
  Index        r24, r27, r21
  Index        r25, r1, r22
  Equal        r1, r24, r25
  JumpIfFalse  r1, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r24, r5
  Len          r25, r24
  Move         r5, r18
  LessInt      r28, r5, r25
  JumpIfFalse  r28, L4
  Index        r25, r24, r5
  Move         r28, r25
  Index        r24, r28, r22
  Index        r25, r27, r21
  Equal        r29, r24, r25
  JumpIfFalse  r29, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r24, r3
  Len          r25, r24
  Const        r29, "keyword_id"
  Move         r3, r18
  LessInt      r30, r3, r25
  JumpIfFalse  r30, L5
  Index        r30, r24, r3
  Move         r24, r30
  Index        r30, r24, r21
  Index        r31, r28, r29
  Equal        r28, r30, r31
  JumpIfFalse  r28, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r29, r4
  Len          r30, r29
  Move         r31, r18
  LessInt      r28, r31, r30
  JumpIfFalse  r28, L6
  Index        r4, r29, r31
  Move         r30, r4
  Index        r29, r30, r22
  Index        r4, r27, r21
  Equal        r22, r29, r4
  JumpIfFalse  r22, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r29, r2
  Len          r4, r29
  Const        r22, "company_id"
  Move         r2, r18
  LessInt      r32, r2, r4
  JumpIfFalse  r32, L7
  Index        r4, r29, r2
  Move         r32, r4
  Index        r29, r32, r21
  Index        r21, r30, r22
  Equal        r30, r29, r21
  JumpIfFalse  r30, L8
  // where cn.country_code == "[us]" &&
  Index        r22, r32, r9
  // t.episode_nr >= 50 &&
  Index        r29, r27, r11
  Const        r21, 50
  LessEq       r30, r21, r29
  // t.episode_nr < 100
  Index        r9, r27, r11
  Const        r32, 100
  Less         r29, r9, r32
  // where cn.country_code == "[us]" &&
  Const        r21, "[us]"
  Equal        r11, r22, r21
  // k.keyword == "character-name-in-title" &&
  Index        r9, r24, r10
  Const        r32, "character-name-in-title"
  Equal        r22, r9, r32
  // where cn.country_code == "[us]" &&
  Move         r10, r11
  JumpIfFalse  r10, L9
  Move         r10, r22
  // k.keyword == "character-name-in-title" &&
  JumpIfFalse  r10, L9
  Move         r10, r30
  // t.episode_nr >= 50 &&
  JumpIfFalse  r10, L9
  Move         r10, r29
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r10, L8
  // select { pseudonym: an.name, series: t.title }
  Const        r24, "pseudonym"
  Index        r9, r16, r13
  Const        r32, "series"
  Index        r30, r27, r15
  Move         r33, r24
  Move         r34, r9
  Move         r35, r32
  Move         r36, r30
  MakeMap      r29, 2, r33
  // from an in aka_name
  Append       r11, r8, r29
  Move         r8, r11
  // join cn in company_name on cn.id == mc.company_id
  Const        r22, 1
  Add          r2, r2, r22
  Jump         L10
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r31, r31, r22
  Jump         L11
  // join k in keyword on k.id == mk.keyword_id
  Add          r3, r3, r22
  Jump         L12
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r5, r5, r22
  Jump         L13
L4:
  // join t in title on t.id == ci.movie_id
  Add          r7, r7, r22
  Jump         L14
L3:
  // join ci in cast_info on ci.person_id == n.id
  Add          r26, r26, r22
  Jump         L15
L2:
  // join n in name on n.id == an.person_id
  Add          r23, r23, r22
  Jump         L16
L1:
  // from an in aka_name
  AddInt       r19, r19, r22
  Jump         L17
L0:
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Const        r10, "cool_actor_pseudonym"
  Const        r13, []
  IterPrep     r16, r8
  Len          r15, r16
  Move         r27, r18
L19:
  LessInt      r24, r27, r15
  JumpIfFalse  r24, L18
  Index        r9, r16, r27
  Move         r32, r9
  Index        r30, r32, r12
  Append       r33, r13, r30
  Move         r13, r33
  AddInt       r27, r27, r22
  Jump         L19
L18:
  Min          r34, r13
  // series_named_after_char: min(from r in rows select r.series)
  Const        r35, "series_named_after_char"
  Const        r36, []
  IterPrep     r29, r8
  Len          r11, r29
  Move         r19, r18
L21:
  LessInt      r20, r19, r11
  JumpIfFalse  r20, L20
  Index        r23, r29, r19
  Move         r32, r23
  Index        r6, r32, r14
  Append       r26, r36, r6
  Move         r36, r26
  AddInt       r19, r19, r22
  Jump         L21
L20:
  Min          r17, r36
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Move         r37, r10
  Move         r38, r34
  // series_named_after_char: min(from r in rows select r.series)
  Move         r39, r35
  Move         r40, r17
  // {
  MakeMap      r7, 2, r37
  Move         r1, r7
  // let result = [
  MakeList     r5, 1, r1
  // json(result)
  JSON         r5
  // expect result == [
  Const        r25, [{"cool_actor_pseudonym": "Alpha", "series_named_after_char": "Hero Bob"}]
  Equal        r3, r5, r25
  Expect       r3
  Return       r0
