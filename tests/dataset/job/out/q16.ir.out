func main (regs=32)
  // let aka_name = [
  Const        r0, [{"name": "Alpha", "person_id": 1}, {"name": "Beta", "person_id": 2}]
L9:
  // let cast_info = [
  Const        r1, [{"movie_id": 101, "person_id": 1}, {"movie_id": 102, "person_id": 2}]
  // let company_name = [
  Const        r2, [{"country_code": "[us]", "id": 1}, {"country_code": "[de]", "id": 2}]
L7:
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "character-name-in-title"}, {"id": 2, "keyword": "other"}]
L6:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 101}, {"company_id": 2, "movie_id": 102}]
L2:
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 101}, {"keyword_id": 2, "movie_id": 102}]
  // let name = [
  Const        r6, [{"id": 1}, {"id": 2}]
  // let title = [
  Const        r7, [{"episode_nr": 60, "id": 101, "title": "Hero Bob"}, {"episode_nr": 40, "id": 102, "title": "Other Show"}]
L3:
  // from an in aka_name
  Const        r8, []
  // where cn.country_code == "[us]" &&
  Const        r9, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r10, "keyword"
  // t.episode_nr >= 50 &&
  Const        r11, "episode_nr"
  // select { pseudonym: an.name, series: t.title }
  Const        r12, "pseudonym"
L5:
  Const        r13, "name"
  Const        r14, "series"
  Const        r15, "title"
L8:
  // from an in aka_name
  IterPrep     r16, r0
  Len          r17, r16
L0:
  Const        r18, 0
  Move         r19, r18
L10:
  LessInt      r20, r19, r17
  JumpIfFalse  r20, L0
  Index        r17, r16, r19
  // join n in name on n.id == an.person_id
  IterPrep     r16, r6
L1:
  Len          r6, r16
  Const        r21, "id"
  Const        r22, "person_id"
  Move         r23, r18
  LessInt      r24, r23, r6
  JumpIfFalse  r24, L0
  Index        r6, r16, r23
L4:
  Index        r16, r6, r21
  Index        r25, r17, r22
  Equal        r26, r16, r25
  JumpIfFalse  r26, L1
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r26, r1
  Len          r1, r26
  Move         r25, r18
  LessInt      r16, r25, r1
  JumpIfFalse  r16, L1
  Index        r16, r26, r25
  Index        r26, r16, r22
  Index        r22, r6, r21
  Equal        r6, r26, r22
  JumpIfFalse  r6, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r6, r7
  Len          r7, r6
  Const        r22, "movie_id"
  Move         r26, r18
  LessInt      r1, r26, r7
  JumpIfFalse  r1, L2
  Index        r1, r6, r26
  Index        r6, r1, r21
  Index        r7, r16, r22
  Equal        r16, r6, r7
  JumpIfFalse  r16, L0
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r16, r5
  Len          r5, r16
  Move         r7, r18
  LessInt      r6, r7, r5
  JumpIfFalse  r6, L0
  Index        r6, r16, r7
  Index        r16, r6, r22
  Index        r5, r1, r21
  Equal        r27, r16, r5
  JumpIfFalse  r27, L0
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r27, r3
  Len          r3, r27
  Const        r5, "keyword_id"
  Move         r28, r18
  LessInt      r29, r28, r3
  JumpIfFalse  r29, L0
  Index        r29, r27, r28
  Index        r27, r29, r21
  Index        r3, r6, r5
  Equal        r5, r27, r3
  JumpIfFalse  r5, L0
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r5, r4
  Len          r4, r5
  Move         r27, r18
  LessInt      r6, r27, r4
  JumpIfFalse  r6, L0
  Index        r6, r5, r27
  Index        r5, r6, r22
  Index        r22, r1, r21
  Equal        r4, r5, r22
  JumpIfFalse  r4, L3
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r22, r2
  Len          r2, r22
  Const        r5, "company_id"
  Move         r30, r18
  LessInt      r31, r30, r2
  JumpIfFalse  r31, L3
  Index        r31, r22, r30
  Index        r22, r31, r21
  Index        r21, r6, r5
  Equal        r5, r22, r21
  JumpIfFalse  r5, L1
  // where cn.country_code == "[us]" &&
  Index        r5, r31, r9
  // t.episode_nr >= 50 &&
  Index        r31, r1, r11
  Const        r9, 50
  LessEq       r21, r9, r31
  // t.episode_nr < 100
  Index        r9, r1, r11
  Const        r11, 100
  Less         r31, r9, r11
  // where cn.country_code == "[us]" &&
  Const        r11, "[us]"
  Equal        r9, r5, r11
  // k.keyword == "character-name-in-title" &&
  Index        r11, r29, r10
  Const        r29, "character-name-in-title"
  Equal        r10, r11, r29
  // where cn.country_code == "[us]" &&
  Move         r29, r9
  JumpIfFalse  r29, L4
  // k.keyword == "character-name-in-title" &&
  Move         r29, r10
  JumpIfFalse  r29, L5
  // t.episode_nr >= 50 &&
  Move         r29, r21
  JumpIfFalse  r29, L2
  Move         r29, r31
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r29, L1
  // select { pseudonym: an.name, series: t.title }
  Move         r29, r12
  Index        r31, r17, r13
  Move         r17, r14
  Index        r13, r1, r15
  Move         r15, r29
  Move         r29, r31
  Move         r31, r17
  Move         r17, r13
  MakeMap      r13, 2, r15
  // from an in aka_name
  Append       r8, r8, r13
  // join cn in company_name on cn.id == mc.company_id
  Const        r13, 1
  Add          r30, r30, r13
  Jump         L2
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r27, r27, r13
  Jump         L6
  // join k in keyword on k.id == mk.keyword_id
  Add          r28, r28, r13
  Jump         L7
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r7, r7, r13
  Jump         L8
  // join t in title on t.id == ci.movie_id
  Add          r26, r26, r13
  Jump         L9
  // join ci in cast_info on ci.person_id == n.id
  Add          r25, r25, r13
  Jump         L2
  // join n in name on n.id == an.person_id
  Add          r23, r23, r13
  Jump         L1
  // from an in aka_name
  AddInt       r19, r19, r13
  Jump         L10
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Const        r5, "cool_actor_pseudonym"
  Const        r24, []
  IterPrep     r23, r8
  Len          r20, r23
  Move         r19, r18
L12:
  LessInt      r30, r19, r20
  JumpIfFalse  r30, L11
  Index        r30, r23, r19
  Index        r23, r30, r12
  Append       r24, r24, r23
  AddInt       r19, r19, r13
  Jump         L12
L11:
  Min          r23, r24
  // series_named_after_char: min(from r in rows select r.series)
  Const        r24, "series_named_after_char"
  Const        r19, []
  IterPrep     r12, r8
  Len          r8, r12
  Move         r20, r18
L14:
  LessInt      r18, r20, r8
  JumpIfFalse  r18, L13
  Index        r30, r12, r20
  Index        r18, r30, r14
  Append       r19, r19, r18
  AddInt       r20, r20, r13
  Jump         L14
L13:
  Min          r18, r19
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Move         r19, r5
  Move         r5, r23
  // series_named_after_char: min(from r in rows select r.series)
  Move         r23, r24
  Move         r24, r18
  // {
  MakeMap      r18, 2, r19
  // let result = [
  MakeList     r24, 1, r18
  // json(result)
  JSON         r24
  // expect result == [
  Const        r18, [{"cool_actor_pseudonym": "Alpha", "series_named_after_char": "Hero Bob"}]
  Equal        r23, r24, r18
  Expect       r23
  Return       r0
