func main (regs=145)
  // let aka_name = [
  Const        r0, [{"name": "Alpha", "person_id": 1}, {"name": "Beta", "person_id": 2}]
  // let cast_info = [
  Const        r1, [{"movie_id": 101, "person_id": 1}, {"movie_id": 102, "person_id": 2}]
  // let company_name = [
  Const        r2, [{"country_code": "[us]", "id": 1}, {"country_code": "[de]", "id": 2}]
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "character-name-in-title"}, {"id": 2, "keyword": "other"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 101}, {"company_id": 2, "movie_id": 102}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 101}, {"keyword_id": 2, "movie_id": 102}]
  // let name = [
  Const        r6, [{"id": 1}, {"id": 2}]
  // let title = [
  Const        r7, [{"episode_nr": 60, "id": 101, "title": "Hero Bob"}, {"episode_nr": 40, "id": 102, "title": "Other Show"}]
  // from an in aka_name
  Const        r8, []
  // where cn.country_code == "[us]" &&
  Const        r9, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r10, "keyword"
  // t.episode_nr >= 50 &&
  Const        r11, "episode_nr"
  // select { pseudonym: an.name, series: t.title }
  Const        r12, "pseudonym"
  Const        r13, "name"
  Const        r14, "series"
  Const        r15, "title"
  // from an in aka_name
  IterPrep     r16, r0
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
L17:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r21, r16, r18
  Move         r22, r21
  // join n in name on n.id == an.person_id
  IterPrep     r23, r6
  Len          r24, r23
  Const        r25, "id"
  Const        r26, "person_id"
  Move         r27, r19
L16:
  LessInt      r28, r27, r24
  JumpIfFalse  r28, L1
  Index        r29, r23, r27
  Move         r30, r29
  Index        r31, r30, r25
  Index        r32, r22, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r34, r1
  Len          r35, r34
  Move         r36, r19
L15:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Index        r40, r39, r26
  Index        r41, r30, r25
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r43, r7
  Len          r44, r43
  Const        r45, "movie_id"
  Move         r46, r19
L14:
  LessInt      r47, r46, r44
  JumpIfFalse  r47, L3
  Index        r48, r43, r46
  Move         r49, r48
  Index        r50, r49, r25
  Index        r51, r39, r45
  Equal        r52, r50, r51
  JumpIfFalse  r52, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r53, r5
  Len          r54, r53
  Move         r55, r19
L13:
  LessInt      r56, r55, r54
  JumpIfFalse  r56, L4
  Index        r57, r53, r55
  Move         r58, r57
  Index        r59, r58, r45
  Index        r60, r49, r25
  Equal        r61, r59, r60
  JumpIfFalse  r61, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, "keyword_id"
  Move         r65, r19
L12:
  LessInt      r66, r65, r63
  JumpIfFalse  r66, L5
  Index        r67, r62, r65
  Move         r68, r67
  Index        r69, r68, r25
  Index        r70, r58, r64
  Equal        r71, r69, r70
  JumpIfFalse  r71, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r72, r4
  Len          r73, r72
  Move         r74, r19
L11:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L6
  Index        r76, r72, r74
  Move         r77, r76
  Index        r78, r77, r45
  Index        r79, r49, r25
  Equal        r80, r78, r79
  JumpIfFalse  r80, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r81, r2
  Len          r82, r81
  Const        r83, "company_id"
  Move         r84, r19
L10:
  LessInt      r85, r84, r82
  JumpIfFalse  r85, L7
  Index        r86, r81, r84
  Move         r87, r86
  Index        r88, r87, r25
  Index        r89, r77, r83
  Equal        r90, r88, r89
  JumpIfFalse  r90, L8
  // where cn.country_code == "[us]" &&
  Index        r91, r87, r9
  // t.episode_nr >= 50 &&
  Index        r92, r49, r11
  Const        r93, 50
  LessEq       r94, r93, r92
  // t.episode_nr < 100
  Index        r95, r49, r11
  Const        r96, 100
  Less         r97, r95, r96
  // where cn.country_code == "[us]" &&
  Const        r98, "[us]"
  Equal        r99, r91, r98
  // k.keyword == "character-name-in-title" &&
  Index        r100, r68, r10
  Const        r101, "character-name-in-title"
  Equal        r102, r100, r101
  // where cn.country_code == "[us]" &&
  Move         r103, r99
  JumpIfFalse  r103, L9
  Move         r103, r102
  // k.keyword == "character-name-in-title" &&
  JumpIfFalse  r103, L9
  Move         r103, r94
  // t.episode_nr >= 50 &&
  JumpIfFalse  r103, L9
  Move         r103, r97
L9:
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r103, L8
  // select { pseudonym: an.name, series: t.title }
  Const        r104, "pseudonym"
  Index        r105, r22, r13
  Const        r106, "series"
  Index        r107, r49, r15
  Move         r108, r104
  Move         r109, r105
  Move         r110, r106
  Move         r111, r107
  MakeMap      r112, 2, r108
  // from an in aka_name
  Append       r113, r8, r112
  Move         r8, r113
L8:
  // join cn in company_name on cn.id == mc.company_id
  Const        r114, 1
  Add          r84, r84, r114
  Jump         L10
L7:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r74, r74, r114
  Jump         L11
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r65, r65, r114
  Jump         L12
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r55, r55, r114
  Jump         L13
L4:
  // join t in title on t.id == ci.movie_id
  Add          r46, r46, r114
  Jump         L14
L3:
  // join ci in cast_info on ci.person_id == n.id
  Add          r36, r36, r114
  Jump         L15
L2:
  // join n in name on n.id == an.person_id
  Add          r27, r27, r114
  Jump         L16
L1:
  // from an in aka_name
  AddInt       r18, r18, r114
  Jump         L17
L0:
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Const        r115, "cool_actor_pseudonym"
  Const        r116, []
  IterPrep     r117, r8
  Len          r118, r117
  Move         r119, r19
L19:
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L18
  Index        r121, r117, r119
  Move         r122, r121
  Index        r123, r122, r12
  Append       r124, r116, r123
  Move         r116, r124
  AddInt       r119, r119, r114
  Jump         L19
L18:
  Min          r125, r116
  // series_named_after_char: min(from r in rows select r.series)
  Const        r126, "series_named_after_char"
  Const        r127, []
  IterPrep     r128, r8
  Len          r129, r128
  Move         r130, r19
L21:
  LessInt      r131, r130, r129
  JumpIfFalse  r131, L20
  Index        r132, r128, r130
  Move         r122, r132
  Index        r133, r122, r14
  Append       r134, r127, r133
  Move         r127, r134
  AddInt       r130, r130, r114
  Jump         L21
L20:
  Min          r135, r127
  // cool_actor_pseudonym: min(from r in rows select r.pseudonym),
  Move         r136, r115
  Move         r137, r125
  // series_named_after_char: min(from r in rows select r.series)
  Move         r138, r126
  Move         r139, r135
  // {
  MakeMap      r140, 2, r136
  Move         r141, r140
  // let result = [
  MakeList     r142, 1, r141
  // json(result)
  JSON         r142
  // expect result == [
  Const        r143, [{"cool_actor_pseudonym": "Alpha", "series_named_after_char": "Hero Bob"}]
  Equal        r144, r142, r143
  Expect       r144
  Return       r0
