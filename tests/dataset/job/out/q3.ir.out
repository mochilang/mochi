func main (regs=23)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
  // let movie_info = [
  Const        r1, [{"info": "Germany", "movie_id": 10}, {"info": "Sweden", "movie_id": 30}, {"info": "France", "movie_id": 20}]
L8:
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 30}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 10}]
  // let title = [
  Const        r3, [{"id": 10, "production_year": 2006, "title": "Alpha"}, {"id": 30, "production_year": 2008, "title": "Beta"}, {"id": 20, "production_year": 2009, "title": "Gamma"}]
  // let allowed_infos = [
  Const        r4, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from k in keyword
  Const        r4, []
  // where k.keyword.contains("sequel") &&
  Const        r5, "keyword"
  Const        r6, "contains"
  // mi.info in allowed_infos &&
  Const        r6, "info"
  // t.production_year > 2005 &&
  Const        r7, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r8, "movie_id"
L7:
  // select t.title
  Const        r9, "title"
  // from k in keyword
  IterPrep     r10, r0
  Len          r11, r10
L9:
  Const        r12, 0
  Move         r13, r12
L6:
  LessInt      r14, r13, r11
  JumpIfFalse  r14, L0
  Index        r11, r10, r13
  Move         r10, r11
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r11, r2
  Len          r2, r11
  Const        r15, "keyword_id"
  Const        r16, "id"
  Move         r17, r12
  LessInt      r18, r17, r2
  JumpIfFalse  r18, L1
  Index        r2, r11, r17
  Move         r18, r2
  Index        r11, r18, r15
  Index        r15, r10, r16
  Equal        r19, r11, r15
  JumpIfFalse  r19, L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  IterPrep     r11, r1
  Len          r15, r11
  Move         r19, r12
  LessInt      r1, r19, r15
  JumpIfFalse  r1, L2
  Index        r15, r11, r19
  Move         r1, r15
  Index        r11, r1, r8
  Index        r15, r18, r8
  Equal        r20, r11, r15
  JumpIfFalse  r20, L3
  // join t in title on t.id == mi.movie_id
  IterPrep     r15, r3
  Len          r20, r15
  Move         r3, r12
  LessInt      r12, r3, r20
  JumpIfFalse  r12, L3
  Index        r20, r15, r3
  Move         r12, r20
  Index        r15, r12, r16
  Index        r20, r1, r8
  Equal        r16, r15, r20
  JumpIfFalse  r16, L4
  Index        r15, r10, r5
  // where k.keyword.contains("sequel") &&
  Const        r20, "sequel"
  In           r5, r20, r15
  // t.production_year > 2005 &&
  Index        r10, r12, r7
  Const        r15, 2005
  Less         r20, r15, r10
  // mi.info in allowed_infos &&
  Index        r7, r1, r6
  Const        r10, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r15, r7, r10
  // mk.movie_id == mi.movie_id
  Index        r6, r18, r8
  Index        r7, r1, r8
  Equal        r10, r6, r7
  // where k.keyword.contains("sequel") &&
  Move         r18, r5
  JumpIfFalse  r18, L5
  Move         r18, r15
  // mi.info in allowed_infos &&
  JumpIfFalse  r18, L5
  Move         r18, r20
  // t.production_year > 2005 &&
  JumpIfFalse  r18, L5
  Move         r18, r10
L5:
  // where k.keyword.contains("sequel") &&
  JumpIfFalse  r18, L4
  // select t.title
  Index        r8, r12, r9
  // from k in keyword
  Append       r1, r4, r8
  Move         r4, r1
L4:
  // join t in title on t.id == mi.movie_id
  Const        r6, 1
  Add          r3, r3, r6
  Jump         L6
L3:
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Add          r19, r19, r6
  Jump         L7
L2:
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r17, r17, r6
  Jump         L8
L1:
  // from k in keyword
  AddInt       r13, r13, r6
  Jump         L9
L0:
  // let result = [{ movie_title: min(candidate_titles) }]
  Const        r7, "movie_title"
  Min          r5, r4
  Move         r21, r7
  Move         r22, r5
  MakeMap      r20, 1, r21
  Move         r15, r20
  MakeList     r10, 1, r15
  // json(result)
  JSON         r10
  // expect result == [ { movie_title: "Alpha" } ]
  Const        r18, [{"movie_title": "Alpha"}]
  Equal        r9, r10, r18
  Expect       r9
  Return       r0
