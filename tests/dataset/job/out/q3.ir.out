func main (regs=116)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
  // let movie_info = [
  Const        r1, [{"info": "Germany", "movie_id": 10}, {"info": "Sweden", "movie_id": 30}, {"info": "France", "movie_id": 20}]
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 30}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 10}]
  // let title = [
  Const        r3, [{"id": 10, "production_year": 2006, "title": "Alpha"}, {"id": 30, "production_year": 2008, "title": "Beta"}, {"id": 20, "production_year": 2009, "title": "Gamma"}]
  // let allowed_infos = [
  Const        r4, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from k in keyword
  Const        r5, []
  // where k.keyword.contains("sequel") &&
  Const        r6, "keyword"
  Const        r7, "contains"
  // mi.info in allowed_infos &&
  Const        r8, "info"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  Const        r11, "movie_id"
  // select t.title
  Const        r12, "title"
  // from k in keyword
  IterPrep     r13, r0
  Len          r14, r13
  Const        r16, 0
  Move         r15, r16
L9:
  LessInt      r17, r15, r14
  JumpIfFalse  r17, L0
  Index        r18, r13, r15
  Move         r19, r18
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r20, r2
  Len          r21, r20
  Const        r22, "keyword_id"
  Const        r23, "id"
  // where k.keyword.contains("sequel") &&
  Const        r24, "keyword"
  Const        r25, "contains"
  // mi.info in allowed_infos &&
  Const        r26, "info"
  // t.production_year > 2005 &&
  Const        r27, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r28, "movie_id"
  Const        r29, "movie_id"
  // select t.title
  Const        r30, "title"
  // join mk in movie_keyword on mk.keyword_id == k.id
  Const        r32, 0
  Move         r31, r32
L8:
  LessInt      r33, r31, r21
  JumpIfFalse  r33, L1
  Index        r34, r20, r31
  Move         r35, r34
  Const        r36, "keyword_id"
  Index        r37, r35, r36
  Const        r38, "id"
  Index        r39, r19, r38
  Equal        r40, r37, r39
  JumpIfFalse  r40, L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  IterPrep     r41, r1
  Len          r42, r41
  Const        r43, "movie_id"
  Const        r44, "movie_id"
  // where k.keyword.contains("sequel") &&
  Const        r45, "keyword"
  Const        r46, "contains"
  // mi.info in allowed_infos &&
  Const        r47, "info"
  // t.production_year > 2005 &&
  Const        r48, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r49, "movie_id"
  Const        r50, "movie_id"
  // select t.title
  Const        r51, "title"
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Const        r53, 0
  Move         r52, r53
L7:
  LessInt      r54, r52, r42
  JumpIfFalse  r54, L2
  Index        r55, r41, r52
  Move         r56, r55
  Const        r57, "movie_id"
  Index        r58, r56, r57
  Const        r59, "movie_id"
  Index        r60, r35, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L3
  // join t in title on t.id == mi.movie_id
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, "id"
  Const        r65, "movie_id"
  // where k.keyword.contains("sequel") &&
  Const        r66, "keyword"
  Const        r67, "contains"
  // mi.info in allowed_infos &&
  Const        r68, "info"
  // t.production_year > 2005 &&
  Const        r69, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r70, "movie_id"
  Const        r71, "movie_id"
  // select t.title
  Const        r72, "title"
  // join t in title on t.id == mi.movie_id
  Const        r74, 0
  Move         r73, r74
L6:
  LessInt      r75, r73, r63
  JumpIfFalse  r75, L3
  Index        r76, r62, r73
  Move         r77, r76
  Const        r78, "id"
  Index        r79, r77, r78
  Const        r80, "movie_id"
  Index        r81, r56, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L4
  Const        r83, "keyword"
  Index        r84, r19, r83
  // where k.keyword.contains("sequel") &&
  Const        r85, "sequel"
  In           r86, r85, r84
  // t.production_year > 2005 &&
  Const        r87, "production_year"
  Index        r88, r77, r87
  Const        r89, 2005
  Less         r90, r89, r88
  // mi.info in allowed_infos &&
  Const        r91, "info"
  Index        r92, r56, r91
  In           r93, r92, r4
  // mk.movie_id == mi.movie_id
  Const        r94, "movie_id"
  Index        r95, r35, r94
  Const        r96, "movie_id"
  Index        r97, r56, r96
  Equal        r98, r95, r97
  // where k.keyword.contains("sequel") &&
  Move         r99, r86
  JumpIfFalse  r99, L5
  Move         r99, r93
  // mi.info in allowed_infos &&
  JumpIfFalse  r99, L5
  Move         r99, r90
  // t.production_year > 2005 &&
  JumpIfFalse  r99, L5
  Move         r99, r98
L5:
  // where k.keyword.contains("sequel") &&
  JumpIfFalse  r99, L4
  // select t.title
  Const        r100, "title"
  Index        r101, r77, r100
  // from k in keyword
  Append       r102, r5, r101
  Move         r5, r102
L4:
  // join t in title on t.id == mi.movie_id
  Const        r103, 1
  Add          r73, r73, r103
  Jump         L6
L3:
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Const        r104, 1
  Add          r52, r52, r104
  Jump         L7
L2:
  // join mk in movie_keyword on mk.keyword_id == k.id
  Const        r105, 1
  Add          r31, r31, r105
  Jump         L8
L1:
  // from k in keyword
  Const        r106, 1
  AddInt       r15, r15, r106
  Jump         L9
L0:
  // let result = [{ movie_title: min(candidate_titles) }]
  Const        r107, "movie_title"
  Min          r108, r5
  Move         r109, r107
  Move         r110, r108
  MakeMap      r111, 1, r109
  Move         r112, r111
  MakeList     r113, 1, r112
  // json(result)
  JSON         r113
  // expect result == [ { movie_title: "Alpha" } ]
  Const        r114, [{"movie_title": "Alpha"}]
  Equal        r115, r113, r114
  Expect       r115
  Return       r0
