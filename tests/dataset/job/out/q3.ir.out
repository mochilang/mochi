func main (regs=20)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
  // let movie_info = [
  Const        r1, [{"info": "Germany", "movie_id": 10}, {"info": "Sweden", "movie_id": 30}, {"info": "France", "movie_id": 20}]
L4:
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 30}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 10}]
  // let title = [
  Const        r3, [{"id": 10, "production_year": 2006, "title": "Alpha"}, {"id": 30, "production_year": 2008, "title": "Beta"}, {"id": 20, "production_year": 2009, "title": "Gamma"}]
  // let allowed_infos = [
  Const        r4, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from k in keyword
  Const        r5, []
  // where k.keyword.contains("sequel") &&
  Const        r6, "keyword"
  // mi.info in allowed_infos &&
  Const        r7, "info"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r9, "movie_id"
  // select t.title
  Const        r10, "title"
  // from k in keyword
  IterPrep     r11, r0
  Len          r12, r11
L6:
  Const        r13, 0
  Move         r14, r13
  LessInt      r15, r14, r12
  JumpIfFalse  r15, L0
L2:
  Index        r15, r11, r14
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r11, r2
  Len          r2, r11
  Const        r12, "keyword_id"
  Const        r16, "id"
  Move         r17, r13
  LessInt      r18, r17, r2
  JumpIfFalse  r18, L1
  Index        r18, r11, r17
  Index        r17, r18, r12
  Index        r12, r15, r16
  Equal        r11, r17, r12
  JumpIfFalse  r11, L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  IterPrep     r11, r1
  Len          r1, r11
  Move         r12, r13
  LessInt      r17, r12, r1
  JumpIfFalse  r17, L2
  Index        r1, r11, r12
  Index        r11, r1, r9
  Index        r2, r18, r9
  Equal        r19, r11, r2
  JumpIfFalse  r19, L3
  // join t in title on t.id == mi.movie_id
  IterPrep     r19, r3
  Len          r3, r19
  Move         r2, r13
  LessInt      r11, r2, r3
  JumpIfFalse  r11, L3
  Index        r11, r19, r2
  Index        r19, r11, r16
  Index        r16, r1, r9
  Equal        r3, r19, r16
  JumpIfFalse  r3, L4
  Index        r3, r15, r6
  // where k.keyword.contains("sequel") &&
  Const        r15, "sequel"
  In           r6, r15, r3
  // t.production_year > 2005 &&
  Index        r15, r11, r8
  Const        r8, 2005
  Less         r3, r8, r15
  // mi.info in allowed_infos &&
  Index        r8, r1, r7
  In           r7, r8, r4
  // mk.movie_id == mi.movie_id
  Index        r8, r18, r9
  Index        r18, r1, r9
  Equal        r1, r8, r18
  // where k.keyword.contains("sequel") &&
  Move         r18, r6
  JumpIfFalse  r18, L5
L5:
  // mi.info in allowed_infos &&
  Move         r18, r7
  JumpIfFalse  r18, L4
  // t.production_year > 2005 &&
  Move         r18, r3
  JumpIfFalse  r18, L4
  Move         r18, r1
  // where k.keyword.contains("sequel") &&
  JumpIfFalse  r18, L4
  // select t.title
  Index        r18, r11, r10
  // from k in keyword
  Append       r5, r5, r18
  // join t in title on t.id == mi.movie_id
  Const        r18, 1
  Add          r2, r2, r18
  Jump         L4
L3:
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Add          r12, r12, r18
  Jump         L2
L1:
  // from k in keyword
  AddInt       r14, r14, r18
  Jump         L6
L0:
  // let result = [{ movie_title: min(candidate_titles) }]
  Const        r2, "movie_title"
  Min          r18, r5
  Move         r5, r2
  Move         r2, r18
  MakeMap      r18, 1, r5
  MakeList     r2, 1, r18
  // json(result)
  JSON         r2
  // expect result == [ { movie_title: "Alpha" } ]
  Const        r18, [{"movie_title": "Alpha"}]
  Equal        r5, r2, r18
  Expect       r5
  Return       r0
