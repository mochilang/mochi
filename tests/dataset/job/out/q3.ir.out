func main (regs=16)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
L8:
  // let movie_info = [
  Const        r1, [{"info": "Germany", "movie_id": 10}, {"info": "Sweden", "movie_id": 30}, {"info": "France", "movie_id": 20}]
L9:
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 30}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 10}]
L2:
  // let title = [
  Const        r3, [{"id": 10, "production_year": 2006, "title": "Alpha"}, {"id": 30, "production_year": 2008, "title": "Beta"}, {"id": 20, "production_year": 2009, "title": "Gamma"}]
L10:
  // let allowed_infos = [
  Const        r4, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from k in keyword
  Const        r5, []
  // where k.keyword.contains("sequel") &&
  Const        r6, "keyword"
  Const        r7, "contains"
L6:
  // mi.info in allowed_infos &&
  Const        r8, "info"
  // t.production_year > 2005 &&
  Const        r6, "production_year"
L5:
  // mk.movie_id == mi.movie_id
  Const        r7, "movie_id"
  Const        r8, "movie_id"
L4:
  // select t.title
  Const        r6, "title"
L7:
  // from k in keyword
  IterPrep     r7, r0
  Len          r8, r7
L3:
  Const        r6, 0
  LessInt      r9, r6, r8
  JumpIfFalse  r9, L0
  Index        r8, r7, r6
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r9, r2
  Len          r7, r9
  Const        r2, "keyword_id"
  Const        r2, "id"
  // where k.keyword.contains("sequel") &&
  Const        r2, "keyword"
  Const        r2, "contains"
  // mi.info in allowed_infos &&
  Const        r2, "info"
  // t.production_year > 2005 &&
  Const        r2, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r2, "movie_id"
  Const        r2, "movie_id"
  // select t.title
  Const        r2, "title"
  // join mk in movie_keyword on mk.keyword_id == k.id
  Const        r2, 0
  LessInt      r10, r2, r7
  JumpIfFalse  r10, L1
  Index        r7, r9, r2
  Const        r10, "keyword_id"
  Index        r9, r7, r10
  Const        r10, "id"
  Index        r11, r8, r10
  Equal        r10, r9, r11
  JumpIfFalse  r10, L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  IterPrep     r9, r1
  Len          r11, r9
  Const        r10, "movie_id"
  Const        r1, "movie_id"
  // where k.keyword.contains("sequel") &&
  Const        r10, "keyword"
  Const        r1, "contains"
  // mi.info in allowed_infos &&
  Const        r10, "info"
  // t.production_year > 2005 &&
  Const        r1, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  Const        r1, "movie_id"
  // select t.title
  Const        r10, "title"
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Const        r1, 0
  LessInt      r10, r1, r11
  JumpIfFalse  r10, L2
  Index        r11, r9, r1
  Const        r10, "movie_id"
  Index        r9, r11, r10
  Const        r10, "movie_id"
  Index        r12, r7, r10
  Equal        r10, r9, r12
  JumpIfFalse  r10, L3
  // join t in title on t.id == mi.movie_id
  IterPrep     r9, r3
  Len          r12, r9
  Const        r10, "id"
  Const        r3, "movie_id"
  // where k.keyword.contains("sequel") &&
  Const        r10, "keyword"
  Const        r3, "contains"
  // mi.info in allowed_infos &&
  Const        r10, "info"
  // t.production_year > 2005 &&
  Const        r3, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  Const        r3, "movie_id"
  // select t.title
  Const        r10, "title"
  // join t in title on t.id == mi.movie_id
  Const        r3, 0
  LessInt      r10, r3, r12
  JumpIfFalse  r10, L3
  Index        r12, r9, r3
  Const        r10, "id"
  Index        r9, r12, r10
  Const        r10, "movie_id"
  Index        r13, r11, r10
  Equal        r10, r9, r13
  JumpIfFalse  r10, L4
  Const        r9, "keyword"
  Index        r13, r8, r9
  // where k.keyword.contains("sequel") &&
  Const        r10, "sequel"
  In           r8, r10, r13
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  Index        r13, r12, r9
  Const        r10, 2005
  Less         r9, r10, r13
  // mi.info in allowed_infos &&
  Const        r13, "info"
  Index        r10, r11, r13
  In           r13, r10, r4
  // mk.movie_id == mi.movie_id
  Const        r4, "movie_id"
  Index        r10, r7, r4
  Const        r7, "movie_id"
  Index        r4, r11, r7
  Equal        r11, r10, r4
  // where k.keyword.contains("sequel") &&
  Move         r7, r8
  JumpIfFalse  r7, L5
  // mi.info in allowed_infos &&
  Move         r10, r13
  JumpIfFalse  r10, L6
  // t.production_year > 2005 &&
  Move         r4, r9
  JumpIfFalse  r4, L7
  Move         r4, r11
  // where k.keyword.contains("sequel") &&
  JumpIfFalse  r4, L4
  // select t.title
  Const        r8, "title"
  Index        r7, r12, r8
  // from k in keyword
  Append       r5, r5, r7
  // join t in title on t.id == mi.movie_id
  Const        r13, 1
  Add          r3, r3, r13
  Jump         L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Const        r10, 1
  Add          r1, r1, r10
  Jump         L8
  // join mk in movie_keyword on mk.keyword_id == k.id
  Const        r9, 1
  Add          r2, r2, r9
  Jump         L9
L1:
  // from k in keyword
  Const        r11, 1
  AddInt       r6, r6, r11
  Jump         L10
L0:
  // let result = [{ movie_title: min(candidate_titles) }]
  Const        r12, "movie_title"
  Min          r8, r5
  Move         r14, r12
  Move         r15, r8
  MakeMap      r7, 1, r14
  MakeList     r3, 1, r7
  // json(result)
  JSON         r3
  // expect result == [ { movie_title: "Alpha" } ]
  Const        r13, [{"movie_title": "Alpha"}]
  Equal        r1, r3, r13
  Expect       r1
  Return       r0
