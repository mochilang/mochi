func main (regs=72)
  // let keyword = [
  Const        r0, [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
  // let movie_info = [
  Const        r1, [{"info": "Germany", "movie_id": 10}, {"info": "Sweden", "movie_id": 30}, {"info": "France", "movie_id": 20}]
  // let movie_keyword = [
  Const        r2, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 30}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 10}]
  // let title = [
  Const        r3, [{"id": 10, "production_year": 2006, "title": "Alpha"}, {"id": 30, "production_year": 2008, "title": "Beta"}, {"id": 20, "production_year": 2009, "title": "Gamma"}]
  // let allowed_infos = [
  Const        r4, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from k in keyword
  Const        r5, []
  // where k.keyword.contains("sequel") &&
  Const        r6, "keyword"
  Const        r7, "contains"
  // mi.info in allowed_infos &&
  Const        r8, "info"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  // select t.title
  Const        r11, "title"
  // from k in keyword
  IterPrep     r12, r0
  Len          r13, r12
  Const        r15, 0
  Move         r14, r15
L9:
  LessInt      r16, r14, r13
  JumpIfFalse  r16, L0
  Index        r18, r12, r14
  // join mk in movie_keyword on mk.keyword_id == k.id
  IterPrep     r19, r2
  Len          r20, r19
  Const        r21, "keyword_id"
  Const        r22, "id"
  Move         r23, r15
L8:
  LessInt      r24, r23, r20
  JumpIfFalse  r24, L1
  Index        r26, r19, r23
  Index        r27, r26, r21
  Index        r28, r18, r22
  Equal        r29, r27, r28
  JumpIfFalse  r29, L2
  // join mi in movie_info on mi.movie_id == mk.movie_id
  IterPrep     r30, r1
  Len          r31, r30
  Move         r32, r15
L7:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L2
  Index        r35, r30, r32
  Index        r36, r35, r10
  Index        r37, r26, r10
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // join t in title on t.id == mi.movie_id
  IterPrep     r39, r3
  Len          r40, r39
  Move         r41, r15
L6:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L3
  Index        r44, r39, r41
  Index        r45, r44, r22
  Index        r46, r35, r10
  Equal        r47, r45, r46
  JumpIfFalse  r47, L4
  Index        r48, r18, r6
  // where k.keyword.contains("sequel") &&
  Const        r49, "sequel"
  In           r50, r49, r48
  // t.production_year > 2005 &&
  Index        r51, r44, r9
  Const        r52, 2005
  Less         r53, r52, r51
  // mi.info in allowed_infos &&
  Index        r54, r35, r8
  In           r55, r54, r4
  // mk.movie_id == mi.movie_id
  Index        r56, r26, r10
  Index        r57, r35, r10
  Equal        r58, r56, r57
  // where k.keyword.contains("sequel") &&
  Move         r59, r50
  JumpIfFalse  r59, L5
  Move         r59, r55
  // mi.info in allowed_infos &&
  JumpIfFalse  r59, L5
  Move         r59, r53
  // t.production_year > 2005 &&
  JumpIfFalse  r59, L5
  Move         r59, r58
L5:
  // where k.keyword.contains("sequel") &&
  JumpIfFalse  r59, L4
  // select t.title
  Index        r60, r44, r11
  // from k in keyword
  Append       r5, r5, r60
L4:
  // join t in title on t.id == mi.movie_id
  Const        r62, 1
  Add          r41, r41, r62
  Jump         L6
L3:
  // join mi in movie_info on mi.movie_id == mk.movie_id
  Add          r32, r32, r62
  Jump         L7
L2:
  // join mk in movie_keyword on mk.keyword_id == k.id
  Add          r23, r23, r62
  Jump         L8
L1:
  // from k in keyword
  AddInt       r14, r14, r62
  Jump         L9
L0:
  // let result = [{ movie_title: min(candidate_titles) }]
  Const        r63, "movie_title"
  Min          r64, r5
  Move         r65, r63
  Move         r66, r64
  MakeMap      r68, 1, r65
  MakeList     r69, 1, r68
  // json(result)
  JSON         r69
  // expect result == [ { movie_title: "Alpha" } ]
  Const        r70, [{"movie_title": "Alpha"}]
  Equal        r71, r69, r70
  Expect       r71
  Return       r0
