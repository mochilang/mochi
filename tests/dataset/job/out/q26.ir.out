func main (regs=242)
  // let complete_cast = [
  Const        r0, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let comp_cast_type = [
  Const        r1, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete"}]
  // let char_name = [
  Const        r2, [{"id": 1, "name": "Spider-Man"}, {"id": 2, "name": "Villain"}]
  // let cast_info = [
  Const        r3, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
  // let info_type = [
  Const        r4, [{"id": 1, "info": "rating"}]
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "superhero"}, {"id": 2, "keyword": "comedy"}]
  // let kind_type = [
  Const        r6, [{"id": 1, "kind": "movie"}]
  // let movie_info_idx = [
  Const        r7, [{"info": 8.5, "info_type_id": 1, "movie_id": 1}, {"info": 6.5, "info_type_id": 1, "movie_id": 2}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r9, [{"id": 1, "name": "Actor One"}, {"id": 2, "name": "Actor Two"}]
  // let title = [
  Const        r10, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Hero Movie"}, {"id": 2, "kind_id": 1, "production_year": 1999, "title": "Old Film"}]
  // let allowed_keywords = [
  Const        r11, ["superhero", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence", "magnet", "web", "claw", "laser"]
  // from cc in complete_cast
  Const        r12, []
  // where cct1.kind == "cast" &&
  Const        r13, "kind"
  // cct2.kind.contains("complete") &&
  Const        r14, "contains"
  // chn.name != null &&
  Const        r15, "name"
  // it2.info == "rating" &&
  Const        r16, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r17, "keyword"
  // t.production_year > 2000
  Const        r18, "production_year"
  // character: chn.name,
  Const        r19, "character"
  // rating: mi_idx.info,
  Const        r20, "rating"
  // actor: n.name,
  Const        r21, "actor"
  // movie: t.title
  Const        r22, "movie"
  Const        r23, "title"
  // from cc in complete_cast
  IterPrep     r24, r0
  Len          r25, r24
  Const        r27, 0
  Move         r26, r27
L26:
  LessInt      r28, r26, r25
  JumpIfFalse  r28, L0
  Index        r29, r24, r26
  Move         r30, r29
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, "id"
  Const        r34, "subject_id"
  Move         r35, r27
L25:
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L1
  Index        r37, r31, r35
  Move         r38, r37
  Index        r39, r38, r33
  Index        r40, r30, r34
  Equal        r41, r39, r40
  JumpIfFalse  r41, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r42, r1
  Len          r43, r42
  Const        r44, "status_id"
  Move         r45, r27
L24:
  LessInt      r46, r45, r43
  JumpIfFalse  r46, L2
  Index        r47, r42, r45
  Move         r48, r47
  Index        r49, r48, r33
  Index        r50, r30, r44
  Equal        r51, r49, r50
  JumpIfFalse  r51, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r52, r3
  Len          r53, r52
  Const        r54, "movie_id"
  Move         r55, r27
L23:
  LessInt      r56, r55, r53
  JumpIfFalse  r56, L3
  Index        r57, r52, r55
  Move         r58, r57
  Index        r59, r58, r54
  Index        r60, r30, r54
  Equal        r61, r59, r60
  JumpIfFalse  r61, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r62, r2
  Len          r63, r62
  Const        r64, "person_role_id"
  Move         r65, r27
L22:
  LessInt      r66, r65, r63
  JumpIfFalse  r66, L4
  Index        r67, r62, r65
  Move         r68, r67
  Index        r69, r68, r33
  Index        r70, r58, r64
  Equal        r71, r69, r70
  JumpIfFalse  r71, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r72, r9
  Len          r73, r72
  Const        r74, "person_id"
  Move         r75, r27
L21:
  LessInt      r76, r75, r73
  JumpIfFalse  r76, L5
  Index        r77, r72, r75
  Move         r78, r77
  Index        r79, r78, r33
  Index        r80, r58, r74
  Equal        r81, r79, r80
  JumpIfFalse  r81, L6
  // join t in title on t.id == ci.movie_id
  IterPrep     r82, r10
  Len          r83, r82
  Move         r84, r27
L20:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L6
  Index        r86, r82, r84
  Move         r87, r86
  Index        r88, r87, r33
  Index        r89, r58, r54
  Equal        r90, r88, r89
  JumpIfFalse  r90, L7
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r91, r6
  Len          r92, r91
  Const        r93, "kind_id"
  Move         r94, r27
L19:
  LessInt      r95, r94, r92
  JumpIfFalse  r95, L7
  Index        r96, r91, r94
  Move         r97, r96
  Index        r98, r97, r33
  Index        r99, r87, r93
  Equal        r100, r98, r99
  JumpIfFalse  r100, L8
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r101, r8
  Len          r102, r101
  Move         r103, r27
L18:
  LessInt      r104, r103, r102
  JumpIfFalse  r104, L8
  Index        r105, r101, r103
  Move         r106, r105
  Index        r107, r106, r54
  Index        r108, r87, r33
  Equal        r109, r107, r108
  JumpIfFalse  r109, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r110, r5
  Len          r111, r110
  Const        r112, "keyword_id"
  Move         r113, r27
L17:
  LessInt      r114, r113, r111
  JumpIfFalse  r114, L9
  Index        r115, r110, r113
  Move         r116, r115
  Index        r117, r116, r33
  Index        r118, r106, r112
  Equal        r119, r117, r118
  JumpIfFalse  r119, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r120, r7
  Len          r121, r120
  Move         r122, r27
L16:
  LessInt      r123, r122, r121
  JumpIfFalse  r123, L10
  Index        r124, r120, r122
  Move         r125, r124
  Index        r126, r125, r54
  Index        r127, r87, r33
  Equal        r128, r126, r127
  JumpIfFalse  r128, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r129, r4
  Len          r130, r129
  Const        r131, "info_type_id"
  Move         r132, r27
L15:
  LessInt      r133, r132, r130
  JumpIfFalse  r133, L11
  Index        r134, r129, r132
  Move         r135, r134
  Index        r136, r135, r33
  Index        r137, r125, r131
  Equal        r138, r136, r137
  JumpIfFalse  r138, L12
  // where cct1.kind == "cast" &&
  Index        r139, r38, r13
  // mi_idx.info > 7.0 &&
  Index        r140, r125, r16
  Const        r141, 7.0
  LessFloat    r142, r141, r140
  // t.production_year > 2000
  Index        r143, r87, r18
  Const        r144, 2000
  Less         r145, r144, r143
  // where cct1.kind == "cast" &&
  Const        r146, "cast"
  Equal        r147, r139, r146
  // chn.name != null &&
  Index        r148, r68, r15
  Const        r149, nil
  NotEqual     r150, r148, r149
  // it2.info == "rating" &&
  Index        r151, r135, r16
  Equal        r152, r151, r20
  // kt.kind == "movie" &&
  Index        r153, r97, r13
  Equal        r154, r153, r22
  // where cct1.kind == "cast" &&
  Move         r155, r147
  JumpIfFalse  r155, L13
  Index        r156, r48, r13
  // cct2.kind.contains("complete") &&
  Const        r157, "complete"
  In           r158, r157, r156
  // where cct1.kind == "cast" &&
  Move         r155, r158
  // cct2.kind.contains("complete") &&
  JumpIfFalse  r155, L13
  Move         r155, r150
  // chn.name != null &&
  JumpIfFalse  r155, L13
  Index        r159, r68, r15
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  Const        r160, "man"
  In           r161, r160, r159
  Move         r162, r161
  JumpIfTrue   r162, L14
  Index        r163, r68, r15
  Const        r164, "Man"
  In           r165, r164, r163
  Move         r162, r165
L14:
  // chn.name != null &&
  Move         r155, r162
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  JumpIfFalse  r155, L13
  Move         r155, r152
  // it2.info == "rating" &&
  JumpIfFalse  r155, L13
  // (k.keyword in allowed_keywords) &&
  Index        r166, r116, r17
  Const        r167, ["superhero", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence", "magnet", "web", "claw", "laser"]
  In           r168, r166, r167
  // it2.info == "rating" &&
  Move         r155, r168
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r155, L13
  Move         r155, r154
  // kt.kind == "movie" &&
  JumpIfFalse  r155, L13
  Move         r155, r142
  // mi_idx.info > 7.0 &&
  JumpIfFalse  r155, L13
  Move         r155, r145
L13:
  // where cct1.kind == "cast" &&
  JumpIfFalse  r155, L12
  // character: chn.name,
  Const        r169, "character"
  Index        r170, r68, r15
  // rating: mi_idx.info,
  Const        r171, "rating"
  Index        r172, r125, r16
  // actor: n.name,
  Const        r173, "actor"
  Index        r174, r78, r15
  // movie: t.title
  Const        r175, "movie"
  Index        r176, r87, r23
  // character: chn.name,
  Move         r177, r169
  Move         r178, r170
  // rating: mi_idx.info,
  Move         r179, r171
  Move         r180, r172
  // actor: n.name,
  Move         r181, r173
  Move         r182, r174
  // movie: t.title
  Move         r183, r175
  Move         r184, r176
  // select {
  MakeMap      r185, 4, r177
  // from cc in complete_cast
  Append       r186, r12, r185
  Move         r12, r186
L12:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r187, 1
  Add          r132, r132, r187
  Jump         L15
L11:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r122, r122, r187
  Jump         L16
L10:
  // join k in keyword on k.id == mk.keyword_id
  Add          r113, r113, r187
  Jump         L17
L9:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r103, r103, r187
  Jump         L18
L8:
  // join kt in kind_type on kt.id == t.kind_id
  Add          r94, r94, r187
  Jump         L19
L7:
  // join t in title on t.id == ci.movie_id
  Add          r84, r84, r187
  Jump         L20
L6:
  // join n in name on n.id == ci.person_id
  Add          r75, r75, r187
  Jump         L21
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r65, r65, r187
  Jump         L22
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r55, r55, r187
  Jump         L23
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r45, r45, r187
  Jump         L24
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r35, r35, r187
  Jump         L25
L1:
  // from cc in complete_cast
  AddInt       r26, r26, r187
  Jump         L26
L0:
  // character_name: min(from r in rows select r.character),
  Const        r188, "character_name"
  Const        r189, []
  IterPrep     r190, r12
  Len          r191, r190
  Move         r192, r27
L28:
  LessInt      r193, r192, r191
  JumpIfFalse  r193, L27
  Index        r194, r190, r192
  Move         r195, r194
  Index        r196, r195, r19
  Append       r197, r189, r196
  Move         r189, r197
  AddInt       r192, r192, r187
  Jump         L28
L27:
  Min          r198, r189
  // rating: min(from r in rows select r.rating),
  Const        r199, "rating"
  Const        r200, []
  IterPrep     r201, r12
  Len          r202, r201
  Move         r203, r27
L30:
  LessInt      r204, r203, r202
  JumpIfFalse  r204, L29
  Index        r205, r201, r203
  Move         r195, r205
  Index        r206, r195, r20
  Append       r207, r200, r206
  Move         r200, r207
  AddInt       r203, r203, r187
  Jump         L30
L29:
  Min          r208, r200
  // playing_actor: min(from r in rows select r.actor),
  Const        r209, "playing_actor"
  Const        r210, []
  IterPrep     r211, r12
  Len          r212, r211
  Move         r213, r27
L32:
  LessInt      r214, r213, r212
  JumpIfFalse  r214, L31
  Index        r215, r211, r213
  Move         r195, r215
  Index        r216, r195, r21
  Append       r217, r210, r216
  Move         r210, r217
  AddInt       r213, r213, r187
  Jump         L32
L31:
  Min          r218, r210
  // complete_hero_movie: min(from r in rows select r.movie)
  Const        r219, "complete_hero_movie"
  Const        r220, []
  IterPrep     r221, r12
  Len          r222, r221
  Move         r223, r27
L34:
  LessInt      r224, r223, r222
  JumpIfFalse  r224, L33
  Index        r225, r221, r223
  Move         r195, r225
  Index        r226, r195, r22
  Append       r227, r220, r226
  Move         r220, r227
  AddInt       r223, r223, r187
  Jump         L34
L33:
  Min          r228, r220
  // character_name: min(from r in rows select r.character),
  Move         r229, r188
  Move         r230, r198
  // rating: min(from r in rows select r.rating),
  Move         r231, r199
  Move         r232, r208
  // playing_actor: min(from r in rows select r.actor),
  Move         r233, r209
  Move         r234, r218
  // complete_hero_movie: min(from r in rows select r.movie)
  Move         r235, r219
  Move         r236, r228
  // {
  MakeMap      r237, 4, r229
  Move         r238, r237
  // let result = [
  MakeList     r239, 1, r238
  // json(result)
  JSON         r239
  // expect result == [
  Const        r240, [{"character_name": "Spider-Man", "complete_hero_movie": "Hero Movie", "playing_actor": "Actor One", "rating": 8.5}]
  Equal        r241, r239, r240
  Expect       r241
  Return       r0
