func main (regs=314)
  // let complete_cast = [
  Const        r0, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  Move         r1, r0
  // let comp_cast_type = [
  Const        r2, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete"}]
  Move         r3, r2
  // let char_name = [
  Const        r4, [{"id": 1, "name": "Spider-Man"}, {"id": 2, "name": "Villain"}]
  Move         r5, r4
  // let cast_info = [
  Const        r6, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
  Move         r7, r6
  // let info_type = [
  Const        r8, [{"id": 1, "info": "rating"}]
  Move         r9, r8
  // let keyword = [
  Const        r10, [{"id": 1, "keyword": "superhero"}, {"id": 2, "keyword": "comedy"}]
  Move         r11, r10
  // let kind_type = [
  Const        r12, [{"id": 1, "kind": "movie"}]
  Move         r13, r12
  // let movie_info_idx = [
  Const        r14, [{"info": 8.5, "info_type_id": 1, "movie_id": 1}, {"info": 6.5, "info_type_id": 1, "movie_id": 2}]
  Move         r15, r14
  // let movie_keyword = [
  Const        r16, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  Move         r17, r16
  // let name = [
  Const        r18, [{"id": 1, "name": "Actor One"}, {"id": 2, "name": "Actor Two"}]
  Move         r19, r18
  // let title = [
  Const        r20, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Hero Movie"}, {"id": 2, "kind_id": 1, "production_year": 1999, "title": "Old Film"}]
  Move         r21, r20
  // let allowed_keywords = [
  Const        r22, ["superhero", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence", "magnet", "web", "claw", "laser"]
  Move         r23, r22
  // from cc in complete_cast
  Const        r24, []
  IterPrep     r25, r1
  Len          r26, r25
  Const        r27, 0
L33:
  Less         r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r31, r3
  Len          r32, r31
  Const        r33, 0
L32:
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "id"
  Index        r38, r36, r37
  Const        r39, "subject_id"
  Index        r40, r30, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r42, r3
  Len          r43, r42
  Const        r44, 0
L31:
  Less         r45, r44, r43
  JumpIfFalse  r45, L2
  Index        r46, r42, r44
  Move         r47, r46
  Const        r48, "id"
  Index        r49, r47, r48
  Const        r50, "status_id"
  Index        r51, r30, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r53, r7
  Len          r54, r53
  Const        r55, 0
L30:
  Less         r56, r55, r54
  JumpIfFalse  r56, L3
  Index        r57, r53, r55
  Move         r58, r57
  Const        r59, "movie_id"
  Index        r60, r58, r59
  Const        r61, "movie_id"
  Index        r62, r30, r61
  Equal        r63, r60, r62
  JumpIfFalse  r63, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r64, r5
  Len          r65, r64
  Const        r66, 0
L29:
  Less         r67, r66, r65
  JumpIfFalse  r67, L4
  Index        r68, r64, r66
  Move         r69, r68
  Const        r70, "id"
  Index        r71, r69, r70
  Const        r72, "person_role_id"
  Index        r73, r58, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r75, r19
  Len          r76, r75
  Const        r77, 0
L28:
  Less         r78, r77, r76
  JumpIfFalse  r78, L5
  Index        r79, r75, r77
  Move         r80, r79
  Const        r81, "id"
  Index        r82, r80, r81
  Const        r83, "person_id"
  Index        r84, r58, r83
  Equal        r85, r82, r84
  JumpIfFalse  r85, L6
  // join t in title on t.id == ci.movie_id
  IterPrep     r86, r21
  Len          r87, r86
  Const        r88, 0
L27:
  Less         r89, r88, r87
  JumpIfFalse  r89, L6
  Index        r90, r86, r88
  Move         r91, r90
  Const        r92, "id"
  Index        r93, r91, r92
  Const        r94, "movie_id"
  Index        r95, r58, r94
  Equal        r96, r93, r95
  JumpIfFalse  r96, L7
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r97, r13
  Len          r98, r97
  Const        r99, 0
L26:
  Less         r100, r99, r98
  JumpIfFalse  r100, L7
  Index        r101, r97, r99
  Move         r102, r101
  Const        r103, "id"
  Index        r104, r102, r103
  Const        r105, "kind_id"
  Index        r106, r91, r105
  Equal        r107, r104, r106
  JumpIfFalse  r107, L8
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r108, r17
  Len          r109, r108
  Const        r110, 0
L25:
  Less         r111, r110, r109
  JumpIfFalse  r111, L8
  Index        r112, r108, r110
  Move         r113, r112
  Const        r114, "movie_id"
  Index        r115, r113, r114
  Const        r116, "id"
  Index        r117, r91, r116
  Equal        r118, r115, r117
  JumpIfFalse  r118, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r119, r11
  Len          r120, r119
  Const        r121, 0
L24:
  Less         r122, r121, r120
  JumpIfFalse  r122, L9
  Index        r123, r119, r121
  Move         r124, r123
  Const        r125, "id"
  Index        r126, r124, r125
  Const        r127, "keyword_id"
  Index        r128, r113, r127
  Equal        r129, r126, r128
  JumpIfFalse  r129, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r130, r15
  Len          r131, r130
  Const        r132, 0
L23:
  Less         r133, r132, r131
  JumpIfFalse  r133, L10
  Index        r134, r130, r132
  Move         r135, r134
  Const        r136, "movie_id"
  Index        r137, r135, r136
  Const        r138, "id"
  Index        r139, r91, r138
  Equal        r140, r137, r139
  JumpIfFalse  r140, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r141, r9
  Len          r142, r141
  Const        r143, 0
L22:
  Less         r144, r143, r142
  JumpIfFalse  r144, L11
  Index        r145, r141, r143
  Move         r146, r145
  Const        r147, "id"
  Index        r148, r146, r147
  Const        r149, "info_type_id"
  Index        r150, r135, r149
  Equal        r151, r148, r150
  JumpIfFalse  r151, L12
  // where cct1.kind == "cast" &&
  Const        r152, "kind"
  Index        r153, r36, r152
  // mi_idx.info > 7.0 &&
  Const        r154, "info"
  Index        r155, r135, r154
  Const        r156, 7
  LessFloat    r157, r156, r155
  // t.production_year > 2000
  Const        r158, "production_year"
  Index        r159, r91, r158
  Const        r160, 2000
  Less         r161, r160, r159
  // where cct1.kind == "cast" &&
  Const        r162, "cast"
  Equal        r163, r153, r162
  // chn.name != null &&
  Const        r164, "name"
  Index        r165, r69, r164
  Const        r166, nil
  NotEqual     r167, r165, r166
  // it2.info == "rating" &&
  Const        r168, "info"
  Index        r169, r146, r168
  Const        r170, "rating"
  Equal        r171, r169, r170
  // kt.kind == "movie" &&
  Const        r172, "kind"
  Index        r173, r102, r172
  Const        r174, "movie"
  Equal        r175, r173, r174
  // where cct1.kind == "cast" &&
  Move         r176, r163
  JumpIfFalse  r176, L13
  Const        r177, "kind"
  Index        r178, r47, r177
  // cct2.kind.contains("complete") &&
  Const        r179, "complete"
  In           r180, r179, r178
  // where cct1.kind == "cast" &&
  Move         r176, r180
L13:
  // cct2.kind.contains("complete") &&
  Move         r181, r176
  JumpIfFalse  r181, L14
  Move         r181, r167
L14:
  // chn.name != null &&
  Move         r182, r181
  JumpIfFalse  r182, L15
  Const        r183, "name"
  Index        r184, r69, r183
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  Const        r185, "man"
  In           r186, r185, r184
  Move         r187, r186
  JumpIfTrue   r187, L16
  Const        r188, "name"
  Index        r189, r69, r188
  Const        r190, "Man"
  In           r191, r190, r189
  Move         r187, r191
L16:
  // chn.name != null &&
  Move         r182, r187
L15:
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  Move         r192, r182
  JumpIfFalse  r192, L17
  Move         r192, r171
L17:
  // it2.info == "rating" &&
  Move         r193, r192
  JumpIfFalse  r193, L18
  // (k.keyword in allowed_keywords) &&
  Const        r194, "keyword"
  Index        r195, r124, r194
  In           r196, r195, r23
  // it2.info == "rating" &&
  Move         r193, r196
L18:
  // (k.keyword in allowed_keywords) &&
  Move         r197, r193
  JumpIfFalse  r197, L19
  Move         r197, r175
L19:
  // kt.kind == "movie" &&
  Move         r198, r197
  JumpIfFalse  r198, L20
  Move         r198, r157
L20:
  // mi_idx.info > 7.0 &&
  Move         r199, r198
  JumpIfFalse  r199, L21
  Move         r199, r161
L21:
  // where cct1.kind == "cast" &&
  JumpIfFalse  r199, L12
  // character: chn.name,
  Const        r200, "character"
  Const        r201, "name"
  Index        r202, r69, r201
  // rating: mi_idx.info,
  Const        r203, "rating"
  Const        r204, "info"
  Index        r205, r135, r204
  // actor: n.name,
  Const        r206, "actor"
  Const        r207, "name"
  Index        r208, r80, r207
  // movie: t.title
  Const        r209, "movie"
  Const        r210, "title"
  Index        r211, r91, r210
  // character: chn.name,
  Move         r212, r200
  Move         r213, r202
  // rating: mi_idx.info,
  Move         r214, r203
  Move         r215, r205
  // actor: n.name,
  Move         r216, r206
  Move         r217, r208
  // movie: t.title
  Move         r218, r209
  Move         r219, r211
  // select {
  MakeMap      r220, 4, r212
  // from cc in complete_cast
  Append       r221, r24, r220
  Move         r24, r221
L12:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r222, 1
  Add          r223, r143, r222
  Move         r143, r223
  Jump         L22
L11:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r224, 1
  Add          r225, r132, r224
  Move         r132, r225
  Jump         L23
L10:
  // join k in keyword on k.id == mk.keyword_id
  Const        r226, 1
  Add          r227, r121, r226
  Move         r121, r227
  Jump         L24
L9:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r228, 1
  Add          r229, r110, r228
  Move         r110, r229
  Jump         L25
L8:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r230, 1
  Add          r231, r99, r230
  Move         r99, r231
  Jump         L26
L7:
  // join t in title on t.id == ci.movie_id
  Const        r232, 1
  Add          r233, r88, r232
  Move         r88, r233
  Jump         L27
L6:
  // join n in name on n.id == ci.person_id
  Const        r234, 1
  Add          r235, r77, r234
  Move         r77, r235
  Jump         L28
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r236, 1
  Add          r237, r66, r236
  Move         r66, r237
  Jump         L29
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Const        r238, 1
  Add          r239, r55, r238
  Move         r55, r239
  Jump         L30
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r240, 1
  Add          r241, r44, r240
  Move         r44, r241
  Jump         L31
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r242, 1
  Add          r243, r33, r242
  Move         r33, r243
  Jump         L32
L1:
  // from cc in complete_cast
  Const        r244, 1
  Add          r245, r27, r244
  Move         r27, r245
  Jump         L33
L0:
  // let rows =
  Move         r246, r24
  // character_name: min(from r in rows select r.character),
  Const        r247, "character_name"
  Const        r248, []
  IterPrep     r249, r246
  Len          r250, r249
  Const        r251, 0
L35:
  Less         r252, r251, r250
  JumpIfFalse  r252, L34
  Index        r253, r249, r251
  Move         r254, r253
  Const        r255, "character"
  Index        r256, r254, r255
  Append       r257, r248, r256
  Move         r248, r257
  Const        r258, 1
  Add          r259, r251, r258
  Move         r251, r259
  Jump         L35
L34:
  Min          r260, r248
  // rating: min(from r in rows select r.rating),
  Const        r261, "rating"
  Const        r262, []
  IterPrep     r263, r246
  Len          r264, r263
  Const        r265, 0
L37:
  Less         r266, r265, r264
  JumpIfFalse  r266, L36
  Index        r267, r263, r265
  Move         r254, r267
  Const        r268, "rating"
  Index        r269, r254, r268
  Append       r270, r262, r269
  Move         r262, r270
  Const        r271, 1
  Add          r272, r265, r271
  Move         r265, r272
  Jump         L37
L36:
  Min          r273, r262
  // playing_actor: min(from r in rows select r.actor),
  Const        r274, "playing_actor"
  Const        r275, []
  IterPrep     r276, r246
  Len          r277, r276
  Const        r278, 0
L39:
  Less         r279, r278, r277
  JumpIfFalse  r279, L38
  Index        r280, r276, r278
  Move         r254, r280
  Const        r281, "actor"
  Index        r282, r254, r281
  Append       r283, r275, r282
  Move         r275, r283
  Const        r284, 1
  Add          r285, r278, r284
  Move         r278, r285
  Jump         L39
L38:
  Min          r286, r275
  // complete_hero_movie: min(from r in rows select r.movie)
  Const        r287, "complete_hero_movie"
  Const        r288, []
  IterPrep     r289, r246
  Len          r290, r289
  Const        r291, 0
L41:
  Less         r292, r291, r290
  JumpIfFalse  r292, L40
  Index        r293, r289, r291
  Move         r254, r293
  Const        r294, "movie"
  Index        r295, r254, r294
  Append       r296, r288, r295
  Move         r288, r296
  Const        r297, 1
  Add          r298, r291, r297
  Move         r291, r298
  Jump         L41
L40:
  Min          r299, r288
  // character_name: min(from r in rows select r.character),
  Move         r300, r247
  Move         r301, r260
  // rating: min(from r in rows select r.rating),
  Move         r302, r261
  Move         r303, r273
  // playing_actor: min(from r in rows select r.actor),
  Move         r304, r274
  Move         r305, r286
  // complete_hero_movie: min(from r in rows select r.movie)
  Move         r306, r287
  Move         r307, r299
  // {
  MakeMap      r308, 4, r300
  Move         r309, r308
  // let result = [
  MakeList     r310, 1, r309
  Move         r311, r310
  // json(result)
  JSON         r311
  // expect result == [
  Const        r312, [{"character_name": "Spider-Man", "complete_hero_movie": "Hero Movie", "playing_actor": "Actor One", "rating": 8.5}]
  Equal        r313, r311, r312
  Expect       r313
  Return       r0
