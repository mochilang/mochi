func main (regs=64)
  // let complete_cast = [
  Const        r0, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let comp_cast_type = [
  Const        r1, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete"}]
  // let char_name = [
  Const        r2, [{"id": 1, "name": "Spider-Man"}, {"id": 2, "name": "Villain"}]
L17:
  // let cast_info = [
  Const        r3, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
L7:
  // let info_type = [
  Const        r4, [{"id": 1, "info": "rating"}]
L15:
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "superhero"}, {"id": 2, "keyword": "comedy"}]
  // let kind_type = [
  Const        r6, [{"id": 1, "kind": "movie"}]
  // let movie_info_idx = [
  Const        r7, [{"info": 8.5, "info_type_id": 1, "movie_id": 1}, {"info": 6.5, "info_type_id": 1, "movie_id": 2}]
L18:
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r9, [{"id": 1, "name": "Actor One"}, {"id": 2, "name": "Actor Two"}]
L21:
  // let title = [
  Const        r10, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Hero Movie"}, {"id": 2, "kind_id": 1, "production_year": 1999, "title": "Old Film"}]
  // let allowed_keywords = [
  Const        r11, ["superhero", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence", "magnet", "web", "claw", "laser"]
  // from cc in complete_cast
  Const        r11, []
  // where cct1.kind == "cast" &&
  Const        r12, "kind"
  // cct2.kind.contains("complete") &&
  Const        r13, "contains"
  // chn.name != null &&
  Const        r13, "name"
  // it2.info == "rating" &&
  Const        r14, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r15, "keyword"
  // t.production_year > 2000
  Const        r16, "production_year"
  // character: chn.name,
  Const        r17, "character"
  // rating: mi_idx.info,
  Const        r18, "rating"
  // actor: n.name,
  Const        r19, "actor"
L23:
  // movie: t.title
  Const        r20, "movie"
L24:
  Const        r21, "title"
  // from cc in complete_cast
  IterPrep     r22, r0
  Len          r23, r22
L26:
  Const        r24, 0
L25:
  Move         r25, r24
  LessInt      r26, r25, r23
L22:
  JumpIfFalse  r26, L0
  Index        r23, r22, r25
L16:
  Move         r22, r23
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r23, r1
  Len          r27, r23
  Const        r28, "id"
  Const        r29, "subject_id"
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
L13:
  Index        r27, r23, r30
L20:
  Move         r31, r27
  Index        r23, r31, r28
L19:
  Index        r32, r22, r29
L8:
  Equal        r29, r23, r32
L9:
  JumpIfFalse  r29, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r23, r1
  Len          r32, r23
L14:
  Const        r29, "status_id"
  Move         r1, r24
  LessInt      r33, r1, r32
  JumpIfFalse  r33, L2
  Index        r32, r23, r1
  Move         r33, r32
  Index        r23, r33, r28
  Index        r32, r22, r29
  Equal        r29, r23, r32
  JumpIfFalse  r29, L3
L12:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r32, r3
  Len          r29, r32
  Const        r3, "movie_id"
L11:
  Move         r34, r24
  LessInt      r35, r34, r29
L10:
  JumpIfFalse  r35, L3
  Index        r29, r32, r34
  Move         r35, r29
  Index        r32, r35, r3
  Index        r29, r22, r3
  Equal        r22, r32, r29
  JumpIfFalse  r22, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r32, r2
  Len          r29, r32
  Const        r2, "person_role_id"
  Move         r36, r24
  LessInt      r37, r36, r29
  JumpIfFalse  r37, L4
  Index        r29, r32, r36
  Move         r37, r29
  Index        r32, r37, r28
  Index        r29, r35, r2
  Equal        r2, r32, r29
  JumpIfFalse  r2, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r32, r9
  Len          r29, r32
  Const        r2, "person_id"
  Move         r9, r24
  LessInt      r38, r9, r29
  JumpIfFalse  r38, L5
  Index        r38, r32, r9
  Move         r32, r38
  Index        r38, r32, r28
  Index        r39, r35, r2
  Equal        r2, r38, r39
  JumpIfFalse  r2, L6
  // join t in title on t.id == ci.movie_id
  IterPrep     r38, r10
  Len          r39, r38
  Move         r2, r24
  LessInt      r10, r2, r39
  JumpIfFalse  r10, L6
  Index        r39, r38, r2
  Move         r38, r39
  Index        r39, r38, r28
  Index        r40, r35, r3
  Equal        r35, r39, r40
  JumpIfFalse  r35, L7
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r39, r6
  Len          r40, r39
  Const        r35, "kind_id"
  Move         r6, r24
  LessInt      r41, r6, r40
  JumpIfFalse  r41, L7
  Index        r40, r39, r6
  Move         r41, r40
  Index        r39, r41, r28
  Index        r42, r38, r35
  Equal        r35, r39, r42
  JumpIfFalse  r35, L8
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r39, r8
  Len          r42, r39
  Move         r35, r24
  LessInt      r8, r35, r42
  JumpIfFalse  r8, L8
  Index        r42, r39, r35
  Move         r8, r42
  Index        r39, r8, r3
  Index        r42, r38, r28
  Equal        r43, r39, r42
  JumpIfFalse  r43, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r39, r5
  Len          r43, r39
  Const        r5, "keyword_id"
  Move         r44, r24
  LessInt      r45, r44, r43
  JumpIfFalse  r45, L9
  Index        r43, r39, r44
  Move         r45, r43
  Index        r39, r45, r28
  Index        r43, r8, r5
  Equal        r8, r39, r43
  JumpIfFalse  r8, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r5, r7
  Len          r39, r5
  Move         r43, r24
  LessInt      r7, r43, r39
  JumpIfFalse  r7, L10
  Index        r39, r5, r43
  Move         r7, r39
  Index        r5, r7, r3
  Index        r39, r38, r28
  Equal        r3, r5, r39
  JumpIfFalse  r3, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r5, r4
  Len          r39, r5
  Const        r3, "info_type_id"
  Move         r4, r24
  LessInt      r46, r4, r39
  JumpIfFalse  r46, L11
  Index        r39, r5, r4
  Move         r46, r39
  Index        r5, r46, r28
  Index        r39, r7, r3
  Equal        r28, r5, r39
  JumpIfFalse  r28, L12
  // where cct1.kind == "cast" &&
  Index        r5, r31, r12
  // mi_idx.info > 7.0 &&
  Index        r39, r7, r14
  Const        r28, 7.0
  LessFloat    r31, r28, r39
  // t.production_year > 2000
  Index        r39, r38, r16
  Const        r28, 2000
  Less         r16, r28, r39
  // where cct1.kind == "cast" &&
  Const        r39, "cast"
  Equal        r28, r5, r39
  // chn.name != null &&
  Index        r5, r37, r13
  Const        r39, nil
  NotEqual     r47, r5, r39
  // it2.info == "rating" &&
  Index        r5, r46, r14
  Equal        r39, r5, r18
  // kt.kind == "movie" &&
  Index        r46, r41, r12
  Equal        r5, r46, r20
  // where cct1.kind == "cast" &&
  Move         r41, r28
  JumpIfFalse  r41, L13
  Index        r46, r33, r12
  // cct2.kind.contains("complete") &&
  Const        r28, "complete"
  In           r12, r28, r46
  // where cct1.kind == "cast" &&
  Move         r41, r12
  // cct2.kind.contains("complete") &&
  JumpIfFalse  r41, L13
  Move         r41, r47
  // chn.name != null &&
  JumpIfFalse  r41, L13
  Index        r33, r37, r13
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  Const        r47, "man"
  In           r46, r47, r33
  Move         r28, r46
  JumpIfTrue   r28, L14
  Index        r12, r37, r13
  Const        r33, "Man"
  In           r47, r33, r12
  Move         r28, r47
  // chn.name != null &&
  Move         r41, r28
  // (chn.name.contains("man") || chn.name.contains("Man")) &&
  JumpIfFalse  r41, L13
  Move         r41, r39
  // it2.info == "rating" &&
  JumpIfFalse  r41, L13
  // (k.keyword in allowed_keywords) &&
  Index        r46, r45, r15
  Const        r39, ["superhero", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence", "magnet", "web", "claw", "laser"]
  In           r28, r46, r39
  // it2.info == "rating" &&
  Move         r41, r28
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r41, L13
  Move         r41, r5
  // kt.kind == "movie" &&
  JumpIfFalse  r41, L13
  Move         r41, r31
  // mi_idx.info > 7.0 &&
  JumpIfFalse  r41, L13
  Move         r41, r16
  // where cct1.kind == "cast" &&
  JumpIfFalse  r41, L12
  // character: chn.name,
  Const        r12, "character"
  Index        r33, r37, r13
  // rating: mi_idx.info,
  Const        r47, "rating"
  Index        r15, r7, r14
  // actor: n.name,
  Const        r45, "actor"
  Index        r16, r32, r13
  // movie: t.title
  Const        r41, "movie"
  Index        r46, r38, r21
  // character: chn.name,
  Move         r48, r12
  Move         r49, r33
  // rating: mi_idx.info,
  Move         r50, r47
  Move         r51, r15
  // actor: n.name,
  Move         r52, r45
  Move         r53, r16
  // movie: t.title
  Move         r54, r41
  Move         r55, r46
  // select {
  MakeMap      r39, 4, r48
  // from cc in complete_cast
  Append       r28, r11, r39
  Move         r11, r28
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r37, 1
  Add          r4, r4, r37
  Jump         L15
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r43, r43, r37
  Jump         L16
  // join k in keyword on k.id == mk.keyword_id
  Add          r44, r44, r37
  Jump         L17
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r35, r35, r37
  Jump         L18
  // join kt in kind_type on kt.id == t.kind_id
  Add          r6, r6, r37
  Jump         L19
  // join t in title on t.id == ci.movie_id
  Add          r2, r2, r37
  Jump         L20
L6:
  // join n in name on n.id == ci.person_id
  Add          r9, r9, r37
  Jump         L21
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r36, r36, r37
  Jump         L22
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r34, r34, r37
  Jump         L23
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r1, r1, r37
  Jump         L24
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r30, r30, r37
  Jump         L25
L1:
  // from cc in complete_cast
  AddInt       r25, r25, r37
  Jump         L26
L0:
  // character_name: min(from r in rows select r.character),
  Const        r14, "character_name"
  Const        r7, []
  IterPrep     r13, r11
  Len          r32, r13
  Move         r21, r24
L28:
  LessInt      r38, r21, r32
  JumpIfFalse  r38, L27
  Index        r12, r13, r21
  Move         r33, r12
  Index        r47, r33, r17
  Append       r15, r7, r47
  Move         r7, r15
  AddInt       r21, r21, r37
  Jump         L28
L27:
  Min          r45, r7
  // rating: min(from r in rows select r.rating),
  Const        r16, "rating"
  Const        r41, []
  IterPrep     r46, r11
  Len          r48, r46
  Move         r49, r24
L30:
  LessInt      r50, r49, r48
  JumpIfFalse  r50, L29
  Index        r51, r46, r49
  Move         r33, r51
  Index        r52, r33, r18
  Append       r53, r41, r52
  Move         r41, r53
  AddInt       r49, r49, r37
  Jump         L30
L29:
  Min          r54, r41
  // playing_actor: min(from r in rows select r.actor),
  Const        r55, "playing_actor"
  Const        r39, []
  IterPrep     r28, r11
  Len          r25, r28
  Move         r26, r24
L32:
  LessInt      r30, r26, r25
  JumpIfFalse  r30, L31
  Index        r27, r28, r26
  Move         r33, r27
  Index        r1, r33, r19
  Append       r23, r39, r1
  Move         r39, r23
  AddInt       r26, r26, r37
  Jump         L32
L31:
  Min          r34, r39
  // complete_hero_movie: min(from r in rows select r.movie)
  Const        r22, "complete_hero_movie"
  Const        r36, []
  IterPrep     r29, r11
  Len          r9, r29
  Move         r2, r24
L34:
  LessInt      r10, r2, r9
  JumpIfFalse  r10, L33
  Index        r6, r29, r2
  Move         r33, r6
  Index        r40, r33, r20
  Append       r35, r36, r40
  Move         r36, r35
  AddInt       r2, r2, r37
  Jump         L34
L33:
  Min          r42, r36
  // character_name: min(from r in rows select r.character),
  Move         r56, r14
  Move         r57, r45
  // rating: min(from r in rows select r.rating),
  Move         r58, r16
  Move         r59, r54
  // playing_actor: min(from r in rows select r.actor),
  Move         r60, r55
  Move         r61, r34
  // complete_hero_movie: min(from r in rows select r.movie)
  Move         r62, r22
  Move         r63, r42
  // {
  MakeMap      r44, 4, r56
  Move         r8, r44
  // let result = [
  MakeList     r43, 1, r8
  // json(result)
  JSON         r43
  // expect result == [
  Const        r3, [{"character_name": "Spider-Man", "complete_hero_movie": "Hero Movie", "playing_actor": "Actor One", "rating": 8.5}]
  Equal        r4, r43, r3
  Expect       r4
  Return       r0
