func main (regs=175)
  // let char_name = [
  Const        r0, [{"id": 1, "name": "Ivan"}, {"id": 2, "name": "Alex"}]
  Move         r1, r0
  // let cast_info = [
  Const        r2, [{"movie_id": 10, "note": "Soldier (voice) (uncredited)", "person_role_id": 1, "role_id": 1}, {"movie_id": 11, "note": "(voice)", "person_role_id": 2, "role_id": 1}]
  Move         r3, r2
  // let company_name = [
  Const        r4, [{"country_code": "[ru]", "id": 1}, {"country_code": "[us]", "id": 2}]
  Move         r5, r4
  // let company_type = [
  Const        r6, [{"id": 1}, {"id": 2}]
  Move         r7, r6
  // let movie_companies = [
  Const        r8, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 2, "company_type_id": 1, "movie_id": 11}]
  Move         r9, r8
  // let role_type = [
  Const        r10, [{"id": 1, "role": "actor"}, {"id": 2, "role": "director"}]
  Move         r11, r10
  // let title = [
  Const        r12, [{"id": 10, "production_year": 2006, "title": "Vodka Dreams"}, {"id": 11, "production_year": 2004, "title": "Other Film"}]
  Move         r13, r12
  // from chn in char_name
  Const        r14, []
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L18:
  Less         r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join ci in cast_info on chn.id == ci.person_role_id
  IterPrep     r21, r3
  Len          r22, r21
  Const        r23, 0
L17:
  Less         r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r25, r21, r23
  Move         r26, r25
  Const        r27, "id"
  Index        r28, r20, r27
  Const        r29, "person_role_id"
  Index        r30, r26, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r32, r11
  Len          r33, r32
  Const        r34, 0
L16:
  Less         r35, r34, r33
  JumpIfFalse  r35, L2
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "id"
  Index        r39, r37, r38
  Const        r40, "role_id"
  Index        r41, r26, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r43, r13
  Len          r44, r43
  Const        r45, 0
L15:
  Less         r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "id"
  Index        r50, r48, r49
  Const        r51, "movie_id"
  Index        r52, r26, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r54, r9
  Len          r55, r54
  Const        r56, 0
L14:
  Less         r57, r56, r55
  JumpIfFalse  r57, L4
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "movie_id"
  Index        r61, r59, r60
  Const        r62, "id"
  Index        r63, r48, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r65, r5
  Len          r66, r65
  Const        r67, 0
L13:
  Less         r68, r67, r66
  JumpIfFalse  r68, L5
  Index        r69, r65, r67
  Move         r70, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Const        r73, "company_id"
  Index        r74, r59, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L6
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r76, r7
  Len          r77, r76
  Const        r78, 0
L12:
  Less         r79, r78, r77
  JumpIfFalse  r79, L6
  Index        r80, r76, r78
  Move         r81, r80
  Const        r82, "id"
  Index        r83, r81, r82
  Const        r84, "company_type_id"
  Index        r85, r59, r84
  Equal        r86, r83, r85
  JumpIfFalse  r86, L7
  Const        r87, "note"
  Index        r88, r26, r87
  // where ci.note.contains("(voice)") &&
  Const        r89, "(voice)"
  In           r90, r89, r88
  // t.production_year > 2005
  Const        r91, "production_year"
  Index        r92, r48, r91
  Const        r93, 2005
  Less         r94, r93, r92
  // cn.country_code == "[ru]" &&
  Const        r95, "country_code"
  Index        r96, r70, r95
  Const        r97, "[ru]"
  Equal        r98, r96, r97
  // rt.role == "actor" &&
  Const        r99, "role"
  Index        r100, r37, r99
  Const        r101, "actor"
  Equal        r102, r100, r101
  // where ci.note.contains("(voice)") &&
  Move         r103, r90
  JumpIfFalse  r103, L8
  Const        r104, "note"
  Index        r105, r26, r104
  // ci.note.contains("(uncredited)") &&
  Const        r106, "(uncredited)"
  In           r107, r106, r105
  // where ci.note.contains("(voice)") &&
  Move         r103, r107
L8:
  // ci.note.contains("(uncredited)") &&
  Move         r108, r103
  JumpIfFalse  r108, L9
  Move         r108, r98
L9:
  // cn.country_code == "[ru]" &&
  Move         r109, r108
  JumpIfFalse  r109, L10
  Move         r109, r102
L10:
  // rt.role == "actor" &&
  Move         r110, r109
  JumpIfFalse  r110, L11
  Move         r110, r94
L11:
  // where ci.note.contains("(voice)") &&
  JumpIfFalse  r110, L7
  // select { character: chn.name, movie: t.title }
  Const        r111, "character"
  Const        r112, "name"
  Index        r113, r20, r112
  Const        r114, "movie"
  Const        r115, "title"
  Index        r116, r48, r115
  Move         r117, r111
  Move         r118, r113
  Move         r119, r114
  Move         r120, r116
  MakeMap      r121, 2, r117
  // from chn in char_name
  Append       r122, r14, r121
  Move         r14, r122
L7:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r123, 1
  Add          r124, r78, r123
  Move         r78, r124
  Jump         L12
L6:
  // join cn in company_name on cn.id == mc.company_id
  Const        r125, 1
  Add          r126, r67, r125
  Move         r67, r126
  Jump         L13
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r127, 1
  Add          r128, r56, r127
  Move         r56, r128
  Jump         L14
L4:
  // join t in title on t.id == ci.movie_id
  Const        r129, 1
  Add          r130, r45, r129
  Move         r45, r130
  Jump         L15
L3:
  // join rt in role_type on rt.id == ci.role_id
  Const        r131, 1
  Add          r132, r34, r131
  Move         r34, r132
  Jump         L16
L2:
  // join ci in cast_info on chn.id == ci.person_role_id
  Const        r133, 1
  Add          r134, r23, r133
  Move         r23, r134
  Jump         L17
L1:
  // from chn in char_name
  Const        r135, 1
  Add          r136, r17, r135
  Move         r17, r136
  Jump         L18
L0:
  // let matches =
  Move         r137, r14
  // uncredited_voiced_character: min(from x in matches select x.character),
  Const        r138, "uncredited_voiced_character"
  Const        r139, []
  IterPrep     r140, r137
  Len          r141, r140
  Const        r142, 0
L20:
  Less         r143, r142, r141
  JumpIfFalse  r143, L19
  Index        r144, r140, r142
  Move         r145, r144
  Const        r146, "character"
  Index        r147, r145, r146
  Append       r148, r139, r147
  Move         r139, r148
  Const        r149, 1
  Add          r150, r142, r149
  Move         r142, r150
  Jump         L20
L19:
  Min          r151, r139
  // russian_movie: min(from x in matches select x.movie)
  Const        r152, "russian_movie"
  Const        r153, []
  IterPrep     r154, r137
  Len          r155, r154
  Const        r156, 0
L22:
  Less         r157, r156, r155
  JumpIfFalse  r157, L21
  Index        r158, r154, r156
  Move         r145, r158
  Const        r159, "movie"
  Index        r160, r145, r159
  Append       r161, r153, r160
  Move         r153, r161
  Const        r162, 1
  Add          r163, r156, r162
  Move         r156, r163
  Jump         L22
L21:
  Min          r164, r153
  // uncredited_voiced_character: min(from x in matches select x.character),
  Move         r165, r138
  Move         r166, r151
  // russian_movie: min(from x in matches select x.movie)
  Move         r167, r152
  Move         r168, r164
  // {
  MakeMap      r169, 2, r165
  Move         r170, r169
  // let result = [
  MakeList     r171, 1, r170
  Move         r172, r171
  // json(result)
  JSON         r172
  // expect result == [
  Const        r173, [{"russian_movie": "Vodka Dreams", "uncredited_voiced_character": "Ivan"}]
  Equal        r174, r172, r173
  Expect       r174
  Return       r0
