func main (regs=254)
  // let char_name = [
  Const        r0, [{"id": 1, "name": "Ivan"}, {"id": 2, "name": "Alex"}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "Soldier (voice) (uncredited)", "person_role_id": 1, "role_id": 1}, {"movie_id": 11, "note": "(voice)", "person_role_id": 2, "role_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[ru]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 2, "company_type_id": 1, "movie_id": 11}]
  // let role_type = [
  Const        r5, [{"id": 1, "role": "actor"}, {"id": 2, "role": "director"}]
  // let title = [
  Const        r6, [{"id": 10, "production_year": 2006, "title": "Vodka Dreams"}, {"id": 11, "production_year": 2004, "title": "Other Film"}]
  // from chn in char_name
  Const        r7, []
  // where ci.note.contains("(voice)") &&
  Const        r8, "note"
  Const        r9, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r10, "note"
  Const        r11, "contains"
  // cn.country_code == "[ru]" &&
  Const        r12, "country_code"
  // rt.role == "actor" &&
  Const        r13, "role"
  // t.production_year > 2005
  Const        r14, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r15, "character"
  Const        r16, "name"
  Const        r17, "movie"
  Const        r18, "title"
  // from chn in char_name
  IterPrep     r19, r0
  Len          r20, r19
  Const        r22, 0
  Move         r21, r22
L15:
  LessInt      r23, r21, r20
  JumpIfFalse  r23, L0
  Index        r24, r19, r21
  Move         r25, r24
  // join ci in cast_info on chn.id == ci.person_role_id
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, "id"
  Const        r29, "person_role_id"
  // where ci.note.contains("(voice)") &&
  Const        r30, "note"
  Const        r31, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r32, "note"
  Const        r33, "contains"
  // cn.country_code == "[ru]" &&
  Const        r34, "country_code"
  // rt.role == "actor" &&
  Const        r35, "role"
  // t.production_year > 2005
  Const        r36, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r37, "character"
  Const        r38, "name"
  Const        r39, "movie"
  Const        r40, "title"
  // join ci in cast_info on chn.id == ci.person_role_id
  Const        r42, 0
  Move         r41, r42
L14:
  LessInt      r43, r41, r27
  JumpIfFalse  r43, L1
  Index        r44, r26, r41
  Move         r45, r44
  Const        r46, "id"
  Index        r47, r25, r46
  Const        r48, "person_role_id"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L2
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r51, r5
  Len          r52, r51
  Const        r53, "id"
  Const        r54, "role_id"
  // where ci.note.contains("(voice)") &&
  Const        r55, "note"
  Const        r56, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r57, "note"
  Const        r58, "contains"
  // cn.country_code == "[ru]" &&
  Const        r59, "country_code"
  // rt.role == "actor" &&
  Const        r60, "role"
  // t.production_year > 2005
  Const        r61, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r62, "character"
  Const        r63, "name"
  Const        r64, "movie"
  Const        r65, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r67, 0
  Move         r66, r67
L13:
  LessInt      r68, r66, r52
  JumpIfFalse  r68, L2
  Index        r69, r51, r66
  Move         r70, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Const        r73, "role_id"
  Index        r74, r45, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r76, r6
  Len          r77, r76
  Const        r78, "id"
  Const        r79, "movie_id"
  // where ci.note.contains("(voice)") &&
  Const        r80, "note"
  Const        r81, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r82, "note"
  Const        r83, "contains"
  // cn.country_code == "[ru]" &&
  Const        r84, "country_code"
  // rt.role == "actor" &&
  Const        r85, "role"
  // t.production_year > 2005
  Const        r86, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r87, "character"
  Const        r88, "name"
  Const        r89, "movie"
  Const        r90, "title"
  // join t in title on t.id == ci.movie_id
  Const        r92, 0
  Move         r91, r92
L12:
  LessInt      r93, r91, r77
  JumpIfFalse  r93, L3
  Index        r94, r76, r91
  Move         r95, r94
  Const        r96, "id"
  Index        r97, r95, r96
  Const        r98, "movie_id"
  Index        r99, r45, r98
  Equal        r100, r97, r99
  JumpIfFalse  r100, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r101, r4
  Len          r102, r101
  Const        r103, "movie_id"
  Const        r104, "id"
  // where ci.note.contains("(voice)") &&
  Const        r105, "note"
  Const        r106, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r107, "note"
  Const        r108, "contains"
  // cn.country_code == "[ru]" &&
  Const        r109, "country_code"
  // rt.role == "actor" &&
  Const        r110, "role"
  // t.production_year > 2005
  Const        r111, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r112, "character"
  Const        r113, "name"
  Const        r114, "movie"
  Const        r115, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r117, 0
  Move         r116, r117
L11:
  LessInt      r118, r116, r102
  JumpIfFalse  r118, L4
  Index        r119, r101, r116
  Move         r120, r119
  Const        r121, "movie_id"
  Index        r122, r120, r121
  Const        r123, "id"
  Index        r124, r95, r123
  Equal        r125, r122, r124
  JumpIfFalse  r125, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r126, r2
  Len          r127, r126
  Const        r128, "id"
  Const        r129, "company_id"
  // where ci.note.contains("(voice)") &&
  Const        r130, "note"
  Const        r131, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r132, "note"
  Const        r133, "contains"
  // cn.country_code == "[ru]" &&
  Const        r134, "country_code"
  // rt.role == "actor" &&
  Const        r135, "role"
  // t.production_year > 2005
  Const        r136, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r137, "character"
  Const        r138, "name"
  Const        r139, "movie"
  Const        r140, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r142, 0
  Move         r141, r142
L10:
  LessInt      r143, r141, r127
  JumpIfFalse  r143, L5
  Index        r144, r126, r141
  Move         r145, r144
  Const        r146, "id"
  Index        r147, r145, r146
  Const        r148, "company_id"
  Index        r149, r120, r148
  Equal        r150, r147, r149
  JumpIfFalse  r150, L6
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r151, r3
  Len          r152, r151
  Const        r153, "id"
  Const        r154, "company_type_id"
  // where ci.note.contains("(voice)") &&
  Const        r155, "note"
  Const        r156, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r157, "note"
  Const        r158, "contains"
  // cn.country_code == "[ru]" &&
  Const        r159, "country_code"
  // rt.role == "actor" &&
  Const        r160, "role"
  // t.production_year > 2005
  Const        r161, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r162, "character"
  Const        r163, "name"
  Const        r164, "movie"
  Const        r165, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r167, 0
  Move         r166, r167
L9:
  LessInt      r168, r166, r152
  JumpIfFalse  r168, L6
  Index        r169, r151, r166
  Move         r170, r169
  Const        r171, "id"
  Index        r172, r170, r171
  Const        r173, "company_type_id"
  Index        r174, r120, r173
  Equal        r175, r172, r174
  JumpIfFalse  r175, L7
  Const        r176, "note"
  Index        r177, r45, r176
  // where ci.note.contains("(voice)") &&
  Const        r178, "(voice)"
  In           r179, r178, r177
  // t.production_year > 2005
  Const        r180, "production_year"
  Index        r181, r95, r180
  Const        r182, 2005
  Less         r183, r182, r181
  // cn.country_code == "[ru]" &&
  Const        r184, "country_code"
  Index        r185, r145, r184
  Const        r186, "[ru]"
  Equal        r187, r185, r186
  // rt.role == "actor" &&
  Const        r188, "role"
  Index        r189, r70, r188
  Const        r190, "actor"
  Equal        r191, r189, r190
  // where ci.note.contains("(voice)") &&
  Move         r192, r179
  JumpIfFalse  r192, L8
  Const        r193, "note"
  Index        r194, r45, r193
  // ci.note.contains("(uncredited)") &&
  Const        r195, "(uncredited)"
  In           r196, r195, r194
  // where ci.note.contains("(voice)") &&
  Move         r192, r196
  // ci.note.contains("(uncredited)") &&
  JumpIfFalse  r192, L8
  Move         r192, r187
  // cn.country_code == "[ru]" &&
  JumpIfFalse  r192, L8
  Move         r192, r191
  // rt.role == "actor" &&
  JumpIfFalse  r192, L8
  Move         r192, r183
L8:
  // where ci.note.contains("(voice)") &&
  JumpIfFalse  r192, L7
  // select { character: chn.name, movie: t.title }
  Const        r197, "character"
  Const        r198, "name"
  Index        r199, r25, r198
  Const        r200, "movie"
  Const        r201, "title"
  Index        r202, r95, r201
  Move         r203, r197
  Move         r204, r199
  Move         r205, r200
  Move         r206, r202
  MakeMap      r207, 2, r203
  // from chn in char_name
  Append       r208, r7, r207
  Move         r7, r208
L7:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r209, 1
  Add          r166, r166, r209
  Jump         L9
L6:
  // join cn in company_name on cn.id == mc.company_id
  Const        r210, 1
  Add          r141, r141, r210
  Jump         L10
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r211, 1
  Add          r116, r116, r211
  Jump         L11
L4:
  // join t in title on t.id == ci.movie_id
  Const        r212, 1
  Add          r91, r91, r212
  Jump         L12
L3:
  // join rt in role_type on rt.id == ci.role_id
  Const        r213, 1
  Add          r66, r66, r213
  Jump         L13
L2:
  // join ci in cast_info on chn.id == ci.person_role_id
  Const        r214, 1
  Add          r41, r41, r214
  Jump         L14
L1:
  // from chn in char_name
  Const        r215, 1
  AddInt       r21, r21, r215
  Jump         L15
L0:
  // uncredited_voiced_character: min(from x in matches select x.character),
  Const        r216, "uncredited_voiced_character"
  Const        r217, []
  Const        r218, "character"
  IterPrep     r219, r7
  Len          r220, r219
  Const        r222, 0
  Move         r221, r222
L17:
  LessInt      r223, r221, r220
  JumpIfFalse  r223, L16
  Index        r224, r219, r221
  Move         r225, r224
  Const        r226, "character"
  Index        r227, r225, r226
  Append       r228, r217, r227
  Move         r217, r228
  Const        r229, 1
  AddInt       r221, r221, r229
  Jump         L17
L16:
  Min          r230, r217
  // russian_movie: min(from x in matches select x.movie)
  Const        r231, "russian_movie"
  Const        r232, []
  Const        r233, "movie"
  IterPrep     r234, r7
  Len          r235, r234
  Const        r237, 0
  Move         r236, r237
L19:
  LessInt      r238, r236, r235
  JumpIfFalse  r238, L18
  Index        r239, r234, r236
  Move         r225, r239
  Const        r240, "movie"
  Index        r241, r225, r240
  Append       r242, r232, r241
  Move         r232, r242
  Const        r243, 1
  AddInt       r236, r236, r243
  Jump         L19
L18:
  Min          r244, r232
  // uncredited_voiced_character: min(from x in matches select x.character),
  Move         r245, r216
  Move         r246, r230
  // russian_movie: min(from x in matches select x.movie)
  Move         r247, r231
  Move         r248, r244
  // {
  MakeMap      r249, 2, r245
  Move         r250, r249
  // let result = [
  MakeList     r251, 1, r250
  // json(result)
  JSON         r251
  // expect result == [
  Const        r252, [{"russian_movie": "Vodka Dreams", "uncredited_voiced_character": "Ivan"}]
  Equal        r253, r251, r252
  Expect       r253
  Return       r0
