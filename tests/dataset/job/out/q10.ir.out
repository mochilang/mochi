func main (regs=257)
  // let char_name = [
  Const        r0, [{"id": 1, "name": "Ivan"}, {"id": 2, "name": "Alex"}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "Soldier (voice) (uncredited)", "person_role_id": 1, "role_id": 1}, {"movie_id": 11, "note": "(voice)", "person_role_id": 2, "role_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[ru]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 2, "company_type_id": 1, "movie_id": 11}]
  // let role_type = [
  Const        r5, [{"id": 1, "role": "actor"}, {"id": 2, "role": "director"}]
  // let title = [
  Const        r6, [{"id": 10, "production_year": 2006, "title": "Vodka Dreams"}, {"id": 11, "production_year": 2004, "title": "Other Film"}]
  // from chn in char_name
  Const        r7, []
  // where ci.note.contains("(voice)") &&
  Const        r8, "note"
  Const        r9, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r10, "note"
  Const        r11, "contains"
  // cn.country_code == "[ru]" &&
  Const        r12, "country_code"
  // rt.role == "actor" &&
  Const        r13, "role"
  // t.production_year > 2005
  Const        r14, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r15, "character"
  Const        r16, "name"
  Const        r17, "movie"
  Const        r18, "title"
  // from chn in char_name
  IterPrep     r19, r0
  Len          r20, r19
  Const        r21, 0
L18:
  LessInt      r23, r21, r20
  JumpIfFalse  r23, L0
  Index        r25, r19, r21
  // join ci in cast_info on chn.id == ci.person_role_id
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, "id"
  Const        r29, "person_role_id"
  // where ci.note.contains("(voice)") &&
  Const        r30, "note"
  Const        r31, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r32, "note"
  Const        r33, "contains"
  // cn.country_code == "[ru]" &&
  Const        r34, "country_code"
  // rt.role == "actor" &&
  Const        r35, "role"
  // t.production_year > 2005
  Const        r36, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r37, "character"
  Const        r38, "name"
  Const        r39, "movie"
  Const        r40, "title"
  // join ci in cast_info on chn.id == ci.person_role_id
  Const        r41, 0
L17:
  LessInt      r43, r41, r27
  JumpIfFalse  r43, L1
  Index        r45, r26, r41
  Const        r46, "id"
  Index        r47, r25, r46
  Const        r48, "person_role_id"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L2
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r51, r5
  Len          r52, r51
  Const        r53, "id"
  Const        r54, "role_id"
  // where ci.note.contains("(voice)") &&
  Const        r55, "note"
  Const        r56, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r57, "note"
  Const        r58, "contains"
  // cn.country_code == "[ru]" &&
  Const        r59, "country_code"
  // rt.role == "actor" &&
  Const        r60, "role"
  // t.production_year > 2005
  Const        r61, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r62, "character"
  Const        r63, "name"
  Const        r64, "movie"
  Const        r65, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r66, 0
L16:
  LessInt      r68, r66, r52
  JumpIfFalse  r68, L2
  Index        r70, r51, r66
  Const        r71, "id"
  Index        r72, r70, r71
  Const        r73, "role_id"
  Index        r74, r45, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r76, r6
  Len          r77, r76
  Const        r78, "id"
  Const        r79, "movie_id"
  // where ci.note.contains("(voice)") &&
  Const        r80, "note"
  Const        r81, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r82, "note"
  Const        r83, "contains"
  // cn.country_code == "[ru]" &&
  Const        r84, "country_code"
  // rt.role == "actor" &&
  Const        r85, "role"
  // t.production_year > 2005
  Const        r86, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r87, "character"
  Const        r88, "name"
  Const        r89, "movie"
  Const        r90, "title"
  // join t in title on t.id == ci.movie_id
  Const        r91, 0
L15:
  LessInt      r93, r91, r77
  JumpIfFalse  r93, L3
  Index        r95, r76, r91
  Const        r96, "id"
  Index        r97, r95, r96
  Const        r98, "movie_id"
  Index        r99, r45, r98
  Equal        r100, r97, r99
  JumpIfFalse  r100, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r101, r4
  Len          r102, r101
  Const        r103, "movie_id"
  Const        r104, "id"
  // where ci.note.contains("(voice)") &&
  Const        r105, "note"
  Const        r106, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r107, "note"
  Const        r108, "contains"
  // cn.country_code == "[ru]" &&
  Const        r109, "country_code"
  // rt.role == "actor" &&
  Const        r110, "role"
  // t.production_year > 2005
  Const        r111, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r112, "character"
  Const        r113, "name"
  Const        r114, "movie"
  Const        r115, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r116, 0
L14:
  LessInt      r118, r116, r102
  JumpIfFalse  r118, L4
  Index        r120, r101, r116
  Const        r121, "movie_id"
  Index        r122, r120, r121
  Const        r123, "id"
  Index        r124, r95, r123
  Equal        r125, r122, r124
  JumpIfFalse  r125, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r126, r2
  Len          r127, r126
  Const        r128, "id"
  Const        r129, "company_id"
  // where ci.note.contains("(voice)") &&
  Const        r130, "note"
  Const        r131, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r132, "note"
  Const        r133, "contains"
  // cn.country_code == "[ru]" &&
  Const        r134, "country_code"
  // rt.role == "actor" &&
  Const        r135, "role"
  // t.production_year > 2005
  Const        r136, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r137, "character"
  Const        r138, "name"
  Const        r139, "movie"
  Const        r140, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r141, 0
L13:
  LessInt      r143, r141, r127
  JumpIfFalse  r143, L5
  Index        r145, r126, r141
  Const        r146, "id"
  Index        r147, r145, r146
  Const        r148, "company_id"
  Index        r149, r120, r148
  Equal        r150, r147, r149
  JumpIfFalse  r150, L6
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r151, r3
  Len          r152, r151
  Const        r153, "id"
  Const        r154, "company_type_id"
  // where ci.note.contains("(voice)") &&
  Const        r155, "note"
  Const        r156, "contains"
  // ci.note.contains("(uncredited)") &&
  Const        r157, "note"
  Const        r158, "contains"
  // cn.country_code == "[ru]" &&
  Const        r159, "country_code"
  // rt.role == "actor" &&
  Const        r160, "role"
  // t.production_year > 2005
  Const        r161, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r162, "character"
  Const        r163, "name"
  Const        r164, "movie"
  Const        r165, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r166, 0
L12:
  LessInt      r168, r166, r152
  JumpIfFalse  r168, L6
  Index        r170, r151, r166
  Const        r171, "id"
  Index        r172, r170, r171
  Const        r173, "company_type_id"
  Index        r174, r120, r173
  Equal        r175, r172, r174
  JumpIfFalse  r175, L7
  Const        r176, "note"
  Index        r177, r45, r176
  // where ci.note.contains("(voice)") &&
  Const        r178, "(voice)"
  In           r179, r178, r177
  // t.production_year > 2005
  Const        r180, "production_year"
  Index        r181, r95, r180
  Const        r182, 2005
  Less         r183, r182, r181
  // cn.country_code == "[ru]" &&
  Const        r184, "country_code"
  Index        r185, r145, r184
  Const        r186, "[ru]"
  Equal        r187, r185, r186
  // rt.role == "actor" &&
  Const        r188, "role"
  Index        r189, r70, r188
  Const        r190, "actor"
  Equal        r191, r189, r190
  // where ci.note.contains("(voice)") &&
  Move         r192, r179
  JumpIfFalse  r192, L8
  Const        r193, "note"
  Index        r194, r45, r193
  // ci.note.contains("(uncredited)") &&
  Const        r195, "(uncredited)"
  In           r197, r195, r194
L8:
  JumpIfFalse  r197, L9
L9:
  // cn.country_code == "[ru]" &&
  Move         r198, r187
  JumpIfFalse  r198, L10
L10:
  // rt.role == "actor" &&
  Move         r199, r191
  JumpIfFalse  r199, L11
  Move         r199, r183
L11:
  // where ci.note.contains("(voice)") &&
  JumpIfFalse  r199, L7
  // select { character: chn.name, movie: t.title }
  Const        r200, "character"
  Const        r201, "name"
  Index        r202, r25, r201
  Const        r203, "movie"
  Const        r204, "title"
  Index        r205, r95, r204
  Move         r206, r200
  Move         r207, r202
  Move         r208, r203
  Move         r209, r205
  MakeMap      r210, 2, r206
  // from chn in char_name
  Append       r7, r7, r210
L7:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r212, 1
  Add          r166, r166, r212
  Jump         L12
L6:
  // join cn in company_name on cn.id == mc.company_id
  Const        r213, 1
  Add          r141, r141, r213
  Jump         L13
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r214, 1
  Add          r116, r116, r214
  Jump         L14
L4:
  // join t in title on t.id == ci.movie_id
  Const        r215, 1
  Add          r91, r91, r215
  Jump         L15
L3:
  // join rt in role_type on rt.id == ci.role_id
  Const        r216, 1
  Add          r66, r66, r216
  Jump         L16
L2:
  // join ci in cast_info on chn.id == ci.person_role_id
  Const        r217, 1
  Add          r41, r41, r217
  Jump         L17
L1:
  // from chn in char_name
  Const        r218, 1
  AddInt       r21, r21, r218
  Jump         L18
L0:
  // uncredited_voiced_character: min(from x in matches select x.character),
  Const        r219, "uncredited_voiced_character"
  Const        r220, []
  Const        r221, "character"
  IterPrep     r222, r7
  Len          r223, r222
  Const        r224, 0
L20:
  LessInt      r226, r224, r223
  JumpIfFalse  r226, L19
  Index        r228, r222, r224
  Const        r229, "character"
  Index        r230, r228, r229
  Append       r220, r220, r230
  Const        r232, 1
  AddInt       r224, r224, r232
  Jump         L20
L19:
  Min          r233, r220
  // russian_movie: min(from x in matches select x.movie)
  Const        r234, "russian_movie"
  Const        r235, []
  Const        r236, "movie"
  IterPrep     r237, r7
  Len          r238, r237
  Const        r239, 0
L22:
  LessInt      r241, r239, r238
  JumpIfFalse  r241, L21
  Index        r228, r237, r239
  Const        r243, "movie"
  Index        r244, r228, r243
  Append       r235, r235, r244
  Const        r246, 1
  AddInt       r239, r239, r246
  Jump         L22
L21:
  Min          r247, r235
  // uncredited_voiced_character: min(from x in matches select x.character),
  Move         r248, r219
  Move         r249, r233
  // russian_movie: min(from x in matches select x.movie)
  Move         r250, r234
  Move         r251, r247
  // {
  MakeMap      r253, 2, r248
  // let result = [
  MakeList     r254, 1, r253
  // json(result)
  JSON         r254
  // expect result == [
  Const        r255, [{"russian_movie": "Vodka Dreams", "uncredited_voiced_character": "Ivan"}]
  Equal        r256, r254, r255
  Expect       r256
  Return       r0
