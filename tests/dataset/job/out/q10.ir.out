func main (regs=140)
  // let char_name = [
  Const        r0, [{"id": 1, "name": "Ivan"}, {"id": 2, "name": "Alex"}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "Soldier (voice) (uncredited)", "person_role_id": 1, "role_id": 1}, {"movie_id": 11, "note": "(voice)", "person_role_id": 2, "role_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[ru]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 2, "company_type_id": 1, "movie_id": 11}]
  // let role_type = [
  Const        r5, [{"id": 1, "role": "actor"}, {"id": 2, "role": "director"}]
  // let title = [
  Const        r6, [{"id": 10, "production_year": 2006, "title": "Vodka Dreams"}, {"id": 11, "production_year": 2004, "title": "Other Film"}]
  // from chn in char_name
  Const        r7, []
  // where ci.note.contains("(voice)") &&
  Const        r8, "note"
  // cn.country_code == "[ru]" &&
  Const        r10, "country_code"
  // rt.role == "actor" &&
  Const        r11, "role"
  // t.production_year > 2005
  Const        r12, "production_year"
  // select { character: chn.name, movie: t.title }
  Const        r13, "character"
  Const        r14, "name"
  Const        r15, "movie"
  Const        r16, "title"
  // from chn in char_name
  IterPrep     r17, r0
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L18:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r23, r17, r19
  // join ci in cast_info on chn.id == ci.person_role_id
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "id"
  Const        r27, "person_role_id"
  Move         r28, r20
L17:
  LessInt      r29, r28, r25
  JumpIfFalse  r29, L1
  Index        r31, r24, r28
  Index        r32, r23, r26
  Index        r33, r31, r27
  Equal        r34, r32, r33
  JumpIfFalse  r34, L2
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r35, r5
  Len          r36, r35
  Const        r37, "role_id"
  Move         r38, r20
L16:
  LessInt      r39, r38, r36
  JumpIfFalse  r39, L2
  Index        r41, r35, r38
  Index        r42, r41, r26
  Index        r43, r31, r37
  Equal        r44, r42, r43
  JumpIfFalse  r44, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r45, r6
  Len          r46, r45
  Const        r47, "movie_id"
  Move         r48, r20
L15:
  LessInt      r49, r48, r46
  JumpIfFalse  r49, L3
  Index        r51, r45, r48
  Index        r52, r51, r26
  Index        r53, r31, r47
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r55, r4
  Len          r56, r55
  Move         r57, r20
L14:
  LessInt      r58, r57, r56
  JumpIfFalse  r58, L4
  Index        r60, r55, r57
  Index        r61, r60, r47
  Index        r62, r51, r26
  Equal        r63, r61, r62
  JumpIfFalse  r63, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r64, r2
  Len          r65, r64
  Const        r66, "company_id"
  Move         r67, r20
L13:
  LessInt      r68, r67, r65
  JumpIfFalse  r68, L5
  Index        r70, r64, r67
  Index        r71, r70, r26
  Index        r72, r60, r66
  Equal        r73, r71, r72
  JumpIfFalse  r73, L6
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r74, r3
  Len          r75, r74
  Const        r76, "company_type_id"
  Move         r77, r20
L12:
  LessInt      r78, r77, r75
  JumpIfFalse  r78, L6
  Index        r80, r74, r77
  Index        r81, r80, r26
  Index        r82, r60, r76
  Equal        r83, r81, r82
  JumpIfFalse  r83, L7
  Index        r84, r31, r8
  // where ci.note.contains("(voice)") &&
  Const        r85, "(voice)"
  In           r86, r85, r84
  // t.production_year > 2005
  Index        r87, r51, r12
  Const        r88, 2005
  Less         r89, r88, r87
  // cn.country_code == "[ru]" &&
  Index        r90, r70, r10
  Const        r91, "[ru]"
  Equal        r92, r90, r91
  // rt.role == "actor" &&
  Index        r93, r41, r11
  Const        r94, "actor"
  Equal        r95, r93, r94
  // where ci.note.contains("(voice)") &&
  Move         r96, r86
  JumpIfFalse  r96, L8
  Index        r97, r31, r8
  // ci.note.contains("(uncredited)") &&
  Const        r98, "(uncredited)"
  In           r100, r98, r97
L8:
  JumpIfFalse  r100, L9
L9:
  // cn.country_code == "[ru]" &&
  Move         r101, r92
  JumpIfFalse  r101, L10
L10:
  // rt.role == "actor" &&
  Move         r102, r95
  JumpIfFalse  r102, L11
  Move         r102, r89
L11:
  // where ci.note.contains("(voice)") &&
  JumpIfFalse  r102, L7
  // select { character: chn.name, movie: t.title }
  Const        r103, "character"
  Index        r104, r23, r14
  Const        r105, "movie"
  Index        r106, r51, r16
  MakeMap      r109, 2, r103
  // from chn in char_name
  Append       r7, r7, r109
L7:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r111, 1
  Add          r77, r77, r111
  Jump         L12
L6:
  // join cn in company_name on cn.id == mc.company_id
  Add          r67, r67, r111
  Jump         L13
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r57, r57, r111
  Jump         L14
L4:
  // join t in title on t.id == ci.movie_id
  Add          r48, r48, r111
  Jump         L15
L3:
  // join rt in role_type on rt.id == ci.role_id
  Add          r38, r38, r111
  Jump         L16
L2:
  // join ci in cast_info on chn.id == ci.person_role_id
  Jump         L17
L1:
  // from chn in char_name
  AddInt       r19, r19, r111
  Jump         L18
L0:
  // uncredited_voiced_character: min(from x in matches select x.character),
  Const        r112, "uncredited_voiced_character"
  Const        r113, []
  IterPrep     r114, r7
  Len          r115, r114
  Move         r116, r20
L20:
  LessInt      r117, r116, r115
  JumpIfFalse  r117, L19
  Index        r119, r114, r116
  Index        r120, r119, r13
  Append       r113, r113, r120
  AddInt       r116, r116, r111
  Jump         L20
L19:
  // russian_movie: min(from x in matches select x.movie)
  Const        r124, []
  IterPrep     r125, r7
  Len          r126, r125
  Move         r127, r20
L22:
  LessInt      r128, r127, r126
  JumpIfFalse  r128, L21
  Index        r119, r125, r127
  Index        r130, r119, r15
  Append       r124, r124, r130
  AddInt       r127, r127, r111
  Jump         L22
L21:
  // {
  MakeMap      r136, 2, r112
  // let result = [
  MakeList     r137, 1, r136
  // json(result)
  JSON         r137
  // expect result == [
  Const        r138, [{"russian_movie": "Vodka Dreams", "uncredited_voiced_character": "Ivan"}]
  Equal        r139, r137, r138
  Expect       r139
  Return       r0
