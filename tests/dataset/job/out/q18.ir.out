func main (regs=362)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
  // let name = [
  Const        r1, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
  // let title = [
  Const        r2, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
  // let cast_info = [
  Const        r3, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
  // let movie_info = [
  Const        r4, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r5, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
  // from ci in cast_info
  Const        r6, []
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r7, "note"
  // it1.info == "budget" &&
  Const        r8, "info"
  // it2.info == "votes" &&
  Const        r9, "info"
  // n.gender == "m" &&
  Const        r10, "gender"
  // n.name.contains("Tim") &&
  Const        r11, "name"
  Const        r12, "contains"
  // t.id == ci.movie_id &&
  Const        r13, "id"
  Const        r14, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r15, "movie_id"
  Const        r16, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r17, "movie_id"
  Const        r18, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r19, "movie_id"
  Const        r20, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r21, "budget"
  Const        r22, "info"
  Const        r23, "votes"
  Const        r24, "info"
  Const        r25, "title"
  Const        r26, "title"
  // from ci in cast_info
  IterPrep     r27, r3
  Len          r28, r27
  Const        r29, 0
L22:
  LessInt      r31, r29, r28
  JumpIfFalse  r31, L0
  Index        r33, r27, r29
  // join n in name on n.id == ci.person_id
  IterPrep     r34, r1
  Len          r35, r34
  Const        r36, "id"
  Const        r37, "person_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r38, "note"
  // it1.info == "budget" &&
  Const        r39, "info"
  // it2.info == "votes" &&
  Const        r40, "info"
  // n.gender == "m" &&
  Const        r41, "gender"
  // n.name.contains("Tim") &&
  Const        r42, "name"
  Const        r43, "contains"
  // t.id == ci.movie_id &&
  Const        r44, "id"
  Const        r45, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r46, "movie_id"
  Const        r47, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r48, "movie_id"
  Const        r49, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r50, "movie_id"
  Const        r51, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r52, "budget"
  Const        r53, "info"
  Const        r54, "votes"
  Const        r55, "info"
  Const        r56, "title"
  Const        r57, "title"
  // join n in name on n.id == ci.person_id
  Const        r58, 0
L21:
  LessInt      r60, r58, r35
  JumpIfFalse  r60, L1
  Index        r62, r34, r58
  Const        r63, "id"
  Index        r64, r62, r63
  Const        r65, "person_id"
  Index        r66, r33, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r68, r2
  Len          r69, r68
  Const        r70, "id"
  Const        r71, "movie_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r72, "note"
  // it1.info == "budget" &&
  Const        r73, "info"
  // it2.info == "votes" &&
  Const        r74, "info"
  // n.gender == "m" &&
  Const        r75, "gender"
  // n.name.contains("Tim") &&
  Const        r76, "name"
  Const        r77, "contains"
  // t.id == ci.movie_id &&
  Const        r78, "id"
  Const        r79, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r80, "movie_id"
  Const        r81, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r82, "movie_id"
  Const        r83, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r84, "movie_id"
  Const        r85, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r86, "budget"
  Const        r87, "info"
  Const        r88, "votes"
  Const        r89, "info"
  Const        r90, "title"
  Const        r91, "title"
  // join t in title on t.id == ci.movie_id
  Const        r92, 0
L20:
  LessInt      r94, r92, r69
  JumpIfFalse  r94, L2
  Index        r96, r68, r92
  Const        r97, "id"
  Index        r98, r96, r97
  Const        r99, "movie_id"
  Index        r100, r33, r99
  Equal        r101, r98, r100
  JumpIfFalse  r101, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r102, r4
  Len          r103, r102
  Const        r104, "movie_id"
  Const        r105, "id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r106, "note"
  // it1.info == "budget" &&
  Const        r107, "info"
  // it2.info == "votes" &&
  Const        r108, "info"
  // n.gender == "m" &&
  Const        r109, "gender"
  // n.name.contains("Tim") &&
  Const        r110, "name"
  Const        r111, "contains"
  // t.id == ci.movie_id &&
  Const        r112, "id"
  Const        r113, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r114, "movie_id"
  Const        r115, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r116, "movie_id"
  Const        r117, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r118, "movie_id"
  Const        r119, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r120, "budget"
  Const        r121, "info"
  Const        r122, "votes"
  Const        r123, "info"
  Const        r124, "title"
  Const        r125, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r126, 0
L19:
  LessInt      r128, r126, r103
  JumpIfFalse  r128, L3
  Index        r130, r102, r126
  Const        r131, "movie_id"
  Index        r132, r130, r131
  Const        r133, "id"
  Index        r134, r96, r133
  Equal        r135, r132, r134
  JumpIfFalse  r135, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r136, r5
  Len          r137, r136
  Const        r138, "movie_id"
  Const        r139, "id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r140, "note"
  // it1.info == "budget" &&
  Const        r141, "info"
  // it2.info == "votes" &&
  Const        r142, "info"
  // n.gender == "m" &&
  Const        r143, "gender"
  // n.name.contains("Tim") &&
  Const        r144, "name"
  Const        r145, "contains"
  // t.id == ci.movie_id &&
  Const        r146, "id"
  Const        r147, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r148, "movie_id"
  Const        r149, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r150, "movie_id"
  Const        r151, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r152, "movie_id"
  Const        r153, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r154, "budget"
  Const        r155, "info"
  Const        r156, "votes"
  Const        r157, "info"
  Const        r158, "title"
  Const        r159, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r160, 0
L18:
  LessInt      r162, r160, r137
  JumpIfFalse  r162, L4
  Index        r164, r136, r160
  Const        r165, "movie_id"
  Index        r166, r164, r165
  Const        r167, "id"
  Index        r168, r96, r167
  Equal        r169, r166, r168
  JumpIfFalse  r169, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r170, r0
  Len          r171, r170
  Const        r172, "id"
  Const        r173, "info_type_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r174, "note"
  // it1.info == "budget" &&
  Const        r175, "info"
  // it2.info == "votes" &&
  Const        r176, "info"
  // n.gender == "m" &&
  Const        r177, "gender"
  // n.name.contains("Tim") &&
  Const        r178, "name"
  Const        r179, "contains"
  // t.id == ci.movie_id &&
  Const        r180, "id"
  Const        r181, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r182, "movie_id"
  Const        r183, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r184, "movie_id"
  Const        r185, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r186, "movie_id"
  Const        r187, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r188, "budget"
  Const        r189, "info"
  Const        r190, "votes"
  Const        r191, "info"
  Const        r192, "title"
  Const        r193, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r194, 0
L17:
  LessInt      r196, r194, r171
  JumpIfFalse  r196, L5
  Index        r198, r170, r194
  Const        r199, "id"
  Index        r200, r198, r199
  Const        r201, "info_type_id"
  Index        r202, r130, r201
  Equal        r203, r200, r202
  JumpIfFalse  r203, L6
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r204, r0
  Len          r205, r204
  Const        r206, "id"
  Const        r207, "info_type_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r208, "note"
  // it1.info == "budget" &&
  Const        r209, "info"
  // it2.info == "votes" &&
  Const        r210, "info"
  // n.gender == "m" &&
  Const        r211, "gender"
  // n.name.contains("Tim") &&
  Const        r212, "name"
  Const        r213, "contains"
  // t.id == ci.movie_id &&
  Const        r214, "id"
  Const        r215, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r216, "movie_id"
  Const        r217, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r218, "movie_id"
  Const        r219, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r220, "movie_id"
  Const        r221, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r222, "budget"
  Const        r223, "info"
  Const        r224, "votes"
  Const        r225, "info"
  Const        r226, "title"
  Const        r227, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r228, 0
L16:
  LessInt      r230, r228, r205
  JumpIfFalse  r230, L6
  Index        r232, r204, r228
  Const        r233, "id"
  Index        r234, r232, r233
  Const        r235, "info_type_id"
  Index        r236, r164, r235
  Equal        r237, r234, r236
  JumpIfFalse  r237, L7
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r238, "note"
  Index        r239, r33, r238
  Const        r240, ["(producer)", "(executive producer)"]
  In           r241, r239, r240
  // it1.info == "budget" &&
  Const        r242, "info"
  Index        r243, r198, r242
  Const        r244, "budget"
  Equal        r245, r243, r244
  // it2.info == "votes" &&
  Const        r246, "info"
  Index        r247, r232, r246
  Const        r248, "votes"
  Equal        r249, r247, r248
  // n.gender == "m" &&
  Const        r250, "gender"
  Index        r251, r62, r250
  Const        r252, "m"
  Equal        r253, r251, r252
  // t.id == ci.movie_id &&
  Const        r254, "id"
  Index        r255, r96, r254
  Const        r256, "movie_id"
  Index        r257, r33, r256
  Equal        r258, r255, r257
  // ci.movie_id == mi.movie_id &&
  Const        r259, "movie_id"
  Index        r260, r33, r259
  Const        r261, "movie_id"
  Index        r262, r130, r261
  Equal        r263, r260, r262
  // ci.movie_id == mi_idx.movie_id &&
  Const        r264, "movie_id"
  Index        r265, r33, r264
  Const        r266, "movie_id"
  Index        r267, r164, r266
  Equal        r268, r265, r267
  // mi.movie_id == mi_idx.movie_id
  Const        r269, "movie_id"
  Index        r270, r130, r269
  Const        r271, "movie_id"
  Index        r272, r164, r271
  Equal        r273, r270, r272
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r274, r241
  JumpIfFalse  r274, L8
L8:
  // it1.info == "budget" &&
  Move         r275, r245
  JumpIfFalse  r275, L9
L9:
  // it2.info == "votes" &&
  Move         r276, r249
  JumpIfFalse  r276, L10
L10:
  // n.gender == "m" &&
  Move         r277, r253
  JumpIfFalse  r277, L11
  Const        r278, "name"
  Index        r279, r62, r278
  // n.name.contains("Tim") &&
  Const        r280, "Tim"
  In           r282, r280, r279
L11:
  JumpIfFalse  r282, L12
L12:
  // t.id == ci.movie_id &&
  Move         r283, r258
  JumpIfFalse  r283, L13
L13:
  // ci.movie_id == mi.movie_id &&
  Move         r284, r263
  JumpIfFalse  r284, L14
L14:
  // ci.movie_id == mi_idx.movie_id &&
  Move         r285, r268
  JumpIfFalse  r285, L15
  Move         r285, r273
L15:
  // where (
  JumpIfFalse  r285, L7
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r286, "budget"
  Const        r287, "info"
  Index        r288, r130, r287
  Const        r289, "votes"
  Const        r290, "info"
  Index        r291, r164, r290
  Const        r292, "title"
  Const        r293, "title"
  Index        r294, r96, r293
  Move         r295, r286
  Move         r296, r288
  Move         r297, r289
  Move         r298, r291
  Move         r299, r292
  Move         r300, r294
  MakeMap      r301, 3, r295
  // from ci in cast_info
  Append       r6, r6, r301
L7:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r303, 1
  Add          r228, r228, r303
  Jump         L16
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r304, 1
  Add          r194, r194, r304
  Jump         L17
L5:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r305, 1
  Add          r160, r160, r305
  Jump         L18
L4:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r306, 1
  Add          r126, r126, r306
  Jump         L19
L3:
  // join t in title on t.id == ci.movie_id
  Const        r307, 1
  Add          r92, r92, r307
  Jump         L20
L2:
  // join n in name on n.id == ci.person_id
  Const        r308, 1
  Add          r58, r58, r308
  Jump         L21
L1:
  // from ci in cast_info
  Const        r309, 1
  AddInt       r29, r29, r309
  Jump         L22
L0:
  // movie_budget: min(from r in rows select r.budget),
  Const        r310, "movie_budget"
  Const        r311, []
  Const        r312, "budget"
  IterPrep     r313, r6
  Len          r314, r313
  Const        r315, 0
L24:
  LessInt      r317, r315, r314
  JumpIfFalse  r317, L23
  Index        r319, r313, r315
  Const        r320, "budget"
  Index        r321, r319, r320
  Append       r311, r311, r321
  Const        r323, 1
  AddInt       r315, r315, r323
  Jump         L24
L23:
  Min          r324, r311
  // movie_votes: min(from r in rows select r.votes),
  Const        r325, "movie_votes"
  Const        r326, []
  Const        r327, "votes"
  IterPrep     r328, r6
  Len          r329, r328
  Const        r330, 0
L26:
  LessInt      r332, r330, r329
  JumpIfFalse  r332, L25
  Index        r319, r328, r330
  Const        r334, "votes"
  Index        r335, r319, r334
  Append       r326, r326, r335
  Const        r337, 1
  AddInt       r330, r330, r337
  Jump         L26
L25:
  Min          r338, r326
  // movie_title: min(from r in rows select r.title)
  Const        r339, "movie_title"
  Const        r340, []
  Const        r341, "title"
  IterPrep     r342, r6
  Len          r343, r342
  Const        r344, 0
L28:
  LessInt      r346, r344, r343
  JumpIfFalse  r346, L27
  Index        r319, r342, r344
  Const        r348, "title"
  Index        r349, r319, r348
  Append       r340, r340, r349
  Const        r351, 1
  AddInt       r344, r344, r351
  Jump         L28
L27:
  Min          r352, r340
  // movie_budget: min(from r in rows select r.budget),
  Move         r353, r310
  Move         r354, r324
  // movie_votes: min(from r in rows select r.votes),
  Move         r355, r325
  Move         r356, r338
  // movie_title: min(from r in rows select r.title)
  Move         r357, r339
  Move         r358, r352
  // let result = {
  MakeMap      r359, 3, r353
  // json(result)
  JSON         r359
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r360, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r361, r359, r360
  Expect       r361
  Return       r0
