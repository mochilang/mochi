func main (regs=162)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
  // let name = [
  Const        r1, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
  // let title = [
  Const        r2, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
  // let cast_info = [
  Const        r3, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
  // let movie_info = [
  Const        r4, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r5, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
  // from ci in cast_info
  Const        r6, []
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r7, "note"
  // it1.info == "budget" &&
  Const        r8, "info"
  // n.gender == "m" &&
  Const        r9, "gender"
  // n.name.contains("Tim") &&
  Const        r10, "name"
  // t.id == ci.movie_id &&
  Const        r12, "id"
  Const        r13, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r14, "budget"
  Const        r15, "votes"
  Const        r16, "title"
  // from ci in cast_info
  IterPrep     r17, r3
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L22:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r23, r17, r19
  // join n in name on n.id == ci.person_id
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "person_id"
  Move         r27, r20
L21:
  LessInt      r28, r27, r25
  JumpIfFalse  r28, L1
  Index        r30, r24, r27
  Index        r31, r30, r12
  Index        r32, r23, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r34, r2
  Len          r35, r34
  Move         r36, r20
L20:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r39, r34, r36
  Index        r40, r39, r12
  Index        r41, r23, r13
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r43, r4
  Len          r44, r43
  Move         r45, r20
L19:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r48, r43, r45
  Index        r49, r48, r13
  Index        r50, r39, r12
  Equal        r51, r49, r50
  JumpIfFalse  r51, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r52, r5
  Len          r53, r52
  Move         r54, r20
L18:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r57, r52, r54
  Index        r58, r57, r13
  Index        r59, r39, r12
  Equal        r60, r58, r59
  JumpIfFalse  r60, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r61, r0
  Len          r62, r61
  Const        r63, "info_type_id"
  Move         r64, r20
L17:
  LessInt      r65, r64, r62
  JumpIfFalse  r65, L5
  Index        r67, r61, r64
  Index        r68, r67, r12
  Index        r69, r48, r63
  Equal        r70, r68, r69
  JumpIfFalse  r70, L6
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r71, r0
  Len          r72, r71
  Move         r73, r20
L16:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L6
  Index        r76, r71, r73
  Index        r77, r76, r12
  Index        r78, r57, r63
  Equal        r79, r77, r78
  JumpIfFalse  r79, L7
  // ci.note in ["(producer)", "(executive producer)"] &&
  Index        r80, r23, r7
  Const        r81, ["(producer)", "(executive producer)"]
  In           r82, r80, r81
  // it1.info == "budget" &&
  Index        r83, r67, r8
  Equal        r84, r83, r14
  // it2.info == "votes" &&
  Index        r85, r76, r8
  Equal        r86, r85, r15
  // n.gender == "m" &&
  Index        r87, r30, r9
  Const        r88, "m"
  Equal        r89, r87, r88
  // t.id == ci.movie_id &&
  Index        r90, r39, r12
  Index        r91, r23, r13
  Equal        r92, r90, r91
  // ci.movie_id == mi.movie_id &&
  Index        r93, r23, r13
  Index        r94, r48, r13
  Equal        r95, r93, r94
  // ci.movie_id == mi_idx.movie_id &&
  Index        r96, r23, r13
  Index        r97, r57, r13
  Equal        r98, r96, r97
  // mi.movie_id == mi_idx.movie_id
  Index        r99, r48, r13
  Index        r100, r57, r13
  Equal        r101, r99, r100
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r102, r82
  JumpIfFalse  r102, L8
L8:
  // it1.info == "budget" &&
  Move         r103, r84
  JumpIfFalse  r103, L9
L9:
  // it2.info == "votes" &&
  Move         r104, r86
  JumpIfFalse  r104, L10
L10:
  // n.gender == "m" &&
  Move         r105, r89
  JumpIfFalse  r105, L11
  Index        r106, r30, r10
  // n.name.contains("Tim") &&
  Const        r107, "Tim"
  In           r109, r107, r106
L11:
  JumpIfFalse  r109, L12
L12:
  // t.id == ci.movie_id &&
  Move         r110, r92
  JumpIfFalse  r110, L13
L13:
  // ci.movie_id == mi.movie_id &&
  Move         r111, r95
  JumpIfFalse  r111, L14
L14:
  // ci.movie_id == mi_idx.movie_id &&
  Move         r112, r98
  JumpIfFalse  r112, L15
  Move         r112, r101
L15:
  // where (
  JumpIfFalse  r112, L7
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r113, "budget"
  Index        r114, r48, r8
  Const        r115, "votes"
  Index        r116, r57, r8
  Const        r117, "title"
  Index        r118, r39, r16
  MakeMap      r122, 3, r113
  // from ci in cast_info
  Append       r6, r6, r122
L7:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r124, 1
  Add          r73, r73, r124
  Jump         L16
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r64, r64, r124
  Jump         L17
L5:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r54, r54, r124
  Jump         L18
L4:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r45, r45, r124
  Jump         L19
L3:
  // join t in title on t.id == ci.movie_id
  Add          r36, r36, r124
  Jump         L20
L2:
  // join n in name on n.id == ci.person_id
  Jump         L21
L1:
  // from ci in cast_info
  AddInt       r19, r19, r124
  Jump         L22
L0:
  // movie_budget: min(from r in rows select r.budget),
  Const        r125, "movie_budget"
  Const        r126, []
  IterPrep     r127, r6
  Len          r128, r127
  Move         r129, r20
L24:
  LessInt      r130, r129, r128
  JumpIfFalse  r130, L23
  Index        r132, r127, r129
  Index        r133, r132, r14
  Append       r126, r126, r133
  AddInt       r129, r129, r124
  Jump         L24
L23:
  // movie_votes: min(from r in rows select r.votes),
  Const        r137, []
  IterPrep     r138, r6
  Len          r139, r138
  Move         r140, r20
L26:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L25
  Index        r132, r138, r140
  Index        r143, r132, r15
  Append       r137, r137, r143
  AddInt       r140, r140, r124
  Jump         L26
L25:
  // movie_title: min(from r in rows select r.title)
  Const        r147, []
  IterPrep     r148, r6
  Len          r149, r148
  Move         r150, r20
L28:
  LessInt      r151, r150, r149
  JumpIfFalse  r151, L27
  Index        r132, r148, r150
  Index        r153, r132, r16
  Append       r147, r147, r153
  AddInt       r150, r150, r124
  Jump         L28
L27:
  // let result = {
  MakeMap      r159, 3, r125
  // json(result)
  JSON         r159
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r160, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r161, r159, r160
  Expect       r161
  Return       r0
