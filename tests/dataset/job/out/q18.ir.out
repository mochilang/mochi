func main (regs=36)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
L0:
  // let name = [
  Const        r1, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
L2:
  // let title = [
  Const        r2, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
L15:
  // let cast_info = [
  Const        r3, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
  // let movie_info = [
  Const        r4, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
L9:
  // let movie_info_idx = [
  Const        r5, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
  // from ci in cast_info
  Const        r6, []
L16:
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r7, "note"
L8:
  // it1.info == "budget" &&
  Const        r8, "info"
L10:
  // it2.info == "votes" &&
  Const        r9, "info"
L12:
  // n.gender == "m" &&
  Const        r10, "gender"
  // n.name.contains("Tim") &&
  Const        r11, "name"
  Const        r12, "contains"
L14:
  // t.id == ci.movie_id &&
  Const        r13, "id"
  Const        r14, "movie_id"
L1:
  // ci.movie_id == mi.movie_id &&
  Const        r15, "movie_id"
  Const        r16, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r17, "movie_id"
L11:
  Const        r18, "movie_id"
L13:
  // mi.movie_id == mi_idx.movie_id
  Const        r19, "movie_id"
  Const        r20, "movie_id"
L6:
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r21, "budget"
L7:
  Const        r22, "info"
  Const        r23, "votes"
L5:
  Const        r7, "info"
  Const        r8, "title"
L4:
  Const        r9, "title"
  // from ci in cast_info
  IterPrep     r10, r3
L3:
  Len          r11, r10
L17:
  Const        r12, 0
  LessInt      r13, r12, r11
L19:
  JumpIfFalse  r13, L0
  Index        r14, r10, r12
  // join n in name on n.id == ci.person_id
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, "id"
  Const        r18, "person_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r19, "note"
  // it1.info == "budget" &&
  Const        r20, "info"
  // it2.info == "votes" &&
  Const        r21, "info"
  // n.gender == "m" &&
  Const        r22, "gender"
  // n.name.contains("Tim") &&
  Const        r23, "name"
  Const        r7, "contains"
  // t.id == ci.movie_id &&
  Const        r8, "id"
  Const        r9, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r3, "movie_id"
  Const        r11, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r13, "movie_id"
  Const        r10, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r1, "movie_id"
  Const        r17, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r18, "budget"
  Const        r19, "info"
  Const        r20, "votes"
  Const        r21, "info"
  Const        r22, "title"
  Const        r23, "title"
  // join n in name on n.id == ci.person_id
  Const        r7, 0
  LessInt      r8, r7, r16
  JumpIfFalse  r8, L1
  Index        r9, r15, r7
  Const        r3, "id"
  Index        r11, r9, r3
  Const        r13, "person_id"
  Index        r10, r14, r13
  Equal        r1, r11, r10
  JumpIfFalse  r1, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, "id"
  Const        r20, "movie_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r21, "note"
  // it1.info == "budget" &&
  Const        r22, "info"
  // it2.info == "votes" &&
  Const        r23, "info"
  // n.gender == "m" &&
  Const        r16, "gender"
  // n.name.contains("Tim") &&
  Const        r8, "name"
  Const        r15, "contains"
  // t.id == ci.movie_id &&
  Const        r3, "id"
  Const        r13, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r11, "movie_id"
  Const        r10, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r1, "movie_id"
  Const        r2, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r19, "movie_id"
  Const        r20, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r21, "budget"
  Const        r22, "info"
  Const        r23, "votes"
  Const        r16, "info"
  Const        r8, "title"
  Const        r15, "title"
  // join t in title on t.id == ci.movie_id
  Const        r3, 0
  LessInt      r13, r3, r18
  JumpIfFalse  r13, L2
  Index        r11, r17, r3
  Const        r10, "id"
  Index        r1, r11, r10
  Const        r2, "movie_id"
  Index        r19, r14, r2
  Equal        r20, r1, r19
  JumpIfFalse  r20, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r21, r4
  Len          r22, r21
  Const        r23, "movie_id"
  Const        r16, "id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r8, "note"
  // it1.info == "budget" &&
  Const        r15, "info"
  // it2.info == "votes" &&
  Const        r18, "info"
  // n.gender == "m" &&
  Const        r13, "gender"
  // n.name.contains("Tim") &&
  Const        r17, "name"
  Const        r10, "contains"
  // t.id == ci.movie_id &&
  Const        r2, "id"
  Const        r1, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r19, "movie_id"
  Const        r20, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r4, "movie_id"
  Const        r23, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r16, "movie_id"
  Const        r8, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r15, "budget"
  Const        r18, "info"
  Const        r13, "votes"
  Const        r17, "info"
  Const        r10, "title"
  Const        r2, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r1, 0
  LessInt      r19, r1, r22
  JumpIfFalse  r19, L3
  Index        r20, r21, r1
  Const        r4, "movie_id"
  Index        r23, r20, r4
  Const        r16, "id"
  Index        r8, r11, r16
  Equal        r15, r23, r8
  JumpIfFalse  r15, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r18, r5
  Len          r13, r18
  Const        r17, "movie_id"
  Const        r10, "id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r2, "note"
  // it1.info == "budget" &&
  Const        r22, "info"
  // it2.info == "votes" &&
  Const        r19, "info"
  // n.gender == "m" &&
  Const        r21, "gender"
  // n.name.contains("Tim") &&
  Const        r4, "name"
  Const        r16, "contains"
  // t.id == ci.movie_id &&
  Const        r23, "id"
  Const        r8, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r15, "movie_id"
  Const        r5, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r17, "movie_id"
  Const        r10, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r2, "movie_id"
  Const        r22, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r19, "budget"
  Const        r21, "info"
  Const        r4, "votes"
  Const        r16, "info"
  Const        r23, "title"
  Const        r8, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r15, 0
  LessInt      r5, r15, r13
  JumpIfFalse  r5, L4
  Index        r17, r18, r15
  Const        r10, "movie_id"
  Index        r2, r17, r10
  Const        r22, "id"
  Index        r19, r11, r22
  Equal        r21, r2, r19
  JumpIfFalse  r21, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r4, r0
  Len          r16, r4
  Const        r23, "id"
  Const        r8, "info_type_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r13, "note"
  // it1.info == "budget" &&
  Const        r5, "info"
  // it2.info == "votes" &&
  Const        r18, "info"
  // n.gender == "m" &&
  Const        r10, "gender"
  // n.name.contains("Tim") &&
  Const        r22, "name"
  Const        r2, "contains"
  // t.id == ci.movie_id &&
  Const        r19, "id"
  Const        r21, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r23, "movie_id"
  Const        r8, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r13, "movie_id"
  Const        r5, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r18, "movie_id"
  Const        r10, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r22, "budget"
  Const        r2, "info"
  Const        r19, "votes"
  Const        r21, "info"
  Const        r23, "title"
  Const        r8, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r13, 0
  LessInt      r5, r13, r16
  JumpIfFalse  r5, L5
  Index        r18, r4, r13
  Const        r10, "id"
  Index        r22, r18, r10
  Const        r2, "info_type_id"
  Index        r19, r20, r2
  Equal        r21, r22, r19
  JumpIfFalse  r21, L6
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r23, r0
  Len          r8, r23
  Const        r16, "id"
  Const        r5, "info_type_id"
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r4, "note"
  // it1.info == "budget" &&
  Const        r10, "info"
  // it2.info == "votes" &&
  Const        r2, "info"
  // n.gender == "m" &&
  Const        r22, "gender"
  // n.name.contains("Tim") &&
  Const        r19, "name"
  Const        r21, "contains"
  // t.id == ci.movie_id &&
  Const        r16, "id"
  Const        r5, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r4, "movie_id"
  Const        r10, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r2, "movie_id"
  Const        r22, "movie_id"
  // mi.movie_id == mi_idx.movie_id
  Const        r19, "movie_id"
  Const        r21, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r16, "budget"
  Const        r5, "info"
  Const        r4, "votes"
  Const        r10, "info"
  Const        r2, "title"
  Const        r22, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r19, 0
  LessInt      r21, r19, r8
  JumpIfFalse  r21, L6
  Index        r16, r23, r19
  Const        r5, "id"
  Index        r4, r16, r5
  Const        r10, "info_type_id"
  Index        r2, r17, r10
  Equal        r22, r4, r2
  JumpIfFalse  r22, L7
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r8, "note"
  Index        r21, r14, r8
  Const        r23, ["(producer)", "(executive producer)"]
  In           r5, r21, r23
  // it1.info == "budget" &&
  Const        r10, "info"
  Index        r4, r18, r10
  Const        r2, "budget"
  Equal        r22, r4, r2
  // it2.info == "votes" &&
  Const        r8, "info"
  Index        r21, r16, r8
  Const        r23, "votes"
  Equal        r18, r21, r23
  // n.gender == "m" &&
  Const        r10, "gender"
  Index        r4, r9, r10
  Const        r2, "m"
  Equal        r16, r4, r2
  // t.id == ci.movie_id &&
  Const        r8, "id"
  Index        r21, r11, r8
  Const        r23, "movie_id"
  Index        r10, r14, r23
  Equal        r4, r21, r10
  // ci.movie_id == mi.movie_id &&
  Const        r2, "movie_id"
  Index        r8, r14, r2
  Const        r23, "movie_id"
  Index        r21, r20, r23
  Equal        r10, r8, r21
  // ci.movie_id == mi_idx.movie_id &&
  Const        r2, "movie_id"
  Index        r23, r14, r2
  Const        r8, "movie_id"
  Index        r21, r17, r8
  Equal        r14, r23, r21
  // mi.movie_id == mi_idx.movie_id
  Const        r2, "movie_id"
  Index        r8, r20, r2
  Const        r23, "movie_id"
  Index        r21, r17, r23
  Equal        r2, r8, r21
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r23, r5
  JumpIfFalse  r23, L8
  // it1.info == "budget" &&
  Move         r8, r22
  JumpIfFalse  r8, L9
  // it2.info == "votes" &&
  Move         r21, r18
  JumpIfFalse  r21, L7
  // n.gender == "m" &&
  Move         r5, r16
  JumpIfFalse  r5, L9
  Const        r23, "name"
  Index        r22, r9, r23
  // n.name.contains("Tim") &&
  Const        r8, "Tim"
  In           r18, r8, r22
  JumpIfFalse  r18, L10
  // t.id == ci.movie_id &&
  Move         r21, r4
  JumpIfFalse  r21, L7
  // ci.movie_id == mi.movie_id &&
  Move         r16, r10
  JumpIfFalse  r16, L11
  // ci.movie_id == mi_idx.movie_id &&
  Move         r5, r14
  JumpIfFalse  r5, L12
  Move         r5, r2
  // where (
  JumpIfFalse  r5, L7
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r9, "budget"
  Const        r23, "info"
  Index        r22, r20, r23
  Const        r8, "votes"
  Const        r18, "info"
  Index        r4, r17, r18
  Const        r21, "title"
  Const        r10, "title"
  Index        r16, r11, r10
  Move         r24, r9
  Move         r25, r22
  Move         r26, r8
  Move         r27, r4
  Move         r28, r21
  Move         r29, r16
  MakeMap      r14, 3, r24
  // from ci in cast_info
  Append       r6, r6, r14
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r2, 1
  Add          r19, r19, r2
  Jump         L13
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r5, 1
  Add          r13, r13, r5
  Jump         L14
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r20, 1
  Add          r15, r15, r20
  Jump         L1
  // join mi in movie_info on mi.movie_id == t.id
  Const        r23, 1
  Add          r1, r1, r23
  Jump         L0
  // join t in title on t.id == ci.movie_id
  Const        r17, 1
  Add          r3, r3, r17
  Jump         L15
  // join n in name on n.id == ci.person_id
  Const        r18, 1
  Add          r7, r7, r18
  Jump         L16
  // from ci in cast_info
  Const        r11, 1
  AddInt       r12, r12, r11
  Jump         L12
  // movie_budget: min(from r in rows select r.budget),
  Const        r9, "movie_budget"
  Const        r22, []
  Const        r8, "budget"
  IterPrep     r4, r6
  Len          r21, r4
  Const        r16, 0
  LessInt      r24, r16, r21
  JumpIfFalse  r24, L0
  Index        r25, r4, r16
  Const        r26, "budget"
  Index        r27, r25, r26
  Append       r22, r22, r27
  Const        r28, 1
  AddInt       r16, r16, r28
  Jump         L17
  Min          r14, r22
  // movie_votes: min(from r in rows select r.votes),
  Const        r19, "movie_votes"
  Const        r2, []
  Const        r13, "votes"
  IterPrep     r5, r6
  Len          r15, r5
  Const        r20, 0
  LessInt      r1, r20, r15
  JumpIfFalse  r1, L18
  Index        r25, r5, r20
  Const        r23, "votes"
  Index        r3, r25, r23
  Append       r2, r2, r3
  Const        r17, 1
  AddInt       r20, r20, r17
  Jump         L19
L18:
  Min          r29, r2
  // movie_title: min(from r in rows select r.title)
  Const        r7, "movie_title"
  Const        r18, []
  Const        r12, "title"
  IterPrep     r11, r6
  Len          r10, r11
  Const        r8, 0
L21:
  LessInt      r21, r8, r10
  JumpIfFalse  r21, L20
  Index        r25, r11, r8
  Const        r24, "title"
  Index        r4, r25, r24
  Append       r18, r18, r4
  Const        r26, 1
  AddInt       r8, r8, r26
  Jump         L21
L20:
  Min          r27, r18
  // movie_budget: min(from r in rows select r.budget),
  Move         r30, r9
  Move         r31, r14
  // movie_votes: min(from r in rows select r.votes),
  Move         r32, r19
  Move         r33, r29
  // movie_title: min(from r in rows select r.title)
  Move         r34, r7
  Move         r35, r27
  // let result = {
  MakeMap      r16, 3, r30
  // json(result)
  JSON         r16
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r28, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r22, r16, r28
  Expect       r22
  Return       r0
