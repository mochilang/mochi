func main (regs=161)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
  // let name = [
  Const        r1, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
  // let title = [
  Const        r2, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
  // let cast_info = [
  Const        r3, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
  // let movie_info = [
  Const        r4, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r5, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
  // from ci in cast_info
  Const        r6, []
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r7, "note"
  // it1.info == "budget" &&
  Const        r8, "info"
  // n.gender == "m" &&
  Const        r9, "gender"
  // n.name.contains("Tim") &&
  Const        r10, "name"
  Const        r11, "contains"
  // t.id == ci.movie_id &&
  Const        r12, "id"
  Const        r13, "movie_id"
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r14, "budget"
  Const        r15, "votes"
  Const        r16, "title"
  // from ci in cast_info
  IterPrep     r17, r3
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L15:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r23, r17, r19
  // join n in name on n.id == ci.person_id
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "person_id"
  Move         r27, r20
L14:
  LessInt      r28, r27, r25
  JumpIfFalse  r28, L1
  Index        r30, r24, r27
  Index        r31, r30, r12
  Index        r32, r23, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r34, r2
  Len          r35, r34
  Move         r36, r20
L13:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r39, r34, r36
  Index        r40, r39, r12
  Index        r41, r23, r13
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r43, r4
  Len          r44, r43
  Move         r45, r20
L12:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r48, r43, r45
  Index        r49, r48, r13
  Index        r50, r39, r12
  Equal        r51, r49, r50
  JumpIfFalse  r51, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r52, r5
  Len          r53, r52
  Move         r54, r20
L11:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r57, r52, r54
  Index        r58, r57, r13
  Index        r59, r39, r12
  Equal        r60, r58, r59
  JumpIfFalse  r60, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r61, r0
  Len          r62, r61
  Const        r63, "info_type_id"
  Move         r64, r20
L10:
  LessInt      r65, r64, r62
  JumpIfFalse  r65, L5
  Index        r67, r61, r64
  Index        r68, r67, r12
  Index        r69, r48, r63
  Equal        r70, r68, r69
  JumpIfFalse  r70, L6
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r71, r0
  Len          r72, r71
  Move         r73, r20
L9:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L6
  Index        r76, r71, r73
  Index        r77, r76, r12
  Index        r78, r57, r63
  Equal        r79, r77, r78
  JumpIfFalse  r79, L7
  // ci.note in ["(producer)", "(executive producer)"] &&
  Index        r80, r23, r7
  Const        r81, ["(producer)", "(executive producer)"]
  In           r82, r80, r81
  // it1.info == "budget" &&
  Index        r83, r67, r8
  Equal        r84, r83, r14
  // it2.info == "votes" &&
  Index        r85, r76, r8
  Equal        r86, r85, r15
  // n.gender == "m" &&
  Index        r87, r30, r9
  Const        r88, "m"
  Equal        r89, r87, r88
  // t.id == ci.movie_id &&
  Index        r90, r39, r12
  Index        r91, r23, r13
  Equal        r92, r90, r91
  // ci.movie_id == mi.movie_id &&
  Index        r93, r23, r13
  Index        r94, r48, r13
  Equal        r95, r93, r94
  // ci.movie_id == mi_idx.movie_id &&
  Index        r96, r23, r13
  Index        r97, r57, r13
  Equal        r98, r96, r97
  // mi.movie_id == mi_idx.movie_id
  Index        r99, r48, r13
  Index        r100, r57, r13
  Equal        r101, r99, r100
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r102, r82
  JumpIfFalse  r102, L8
  Move         r102, r84
  // it1.info == "budget" &&
  JumpIfFalse  r102, L8
  Move         r102, r86
  // it2.info == "votes" &&
  JumpIfFalse  r102, L8
  Move         r102, r89
  // n.gender == "m" &&
  JumpIfFalse  r102, L8
  Index        r103, r30, r10
  // n.name.contains("Tim") &&
  Const        r104, "Tim"
  In           r102, r104, r103
  JumpIfFalse  r102, L8
  Move         r102, r92
  // t.id == ci.movie_id &&
  JumpIfFalse  r102, L8
  Move         r102, r95
  // ci.movie_id == mi.movie_id &&
  JumpIfFalse  r102, L8
  Move         r102, r98
  // ci.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r102, L8
  Move         r102, r101
L8:
  // where (
  JumpIfFalse  r102, L7
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r106, "budget"
  Index        r107, r48, r8
  Const        r108, "votes"
  Index        r109, r57, r8
  Const        r110, "title"
  Index        r111, r39, r16
  Move         r112, r106
  Move         r113, r107
  Move         r114, r108
  Move         r115, r109
  Move         r116, r110
  Move         r117, r111
  MakeMap      r118, 3, r112
  // from ci in cast_info
  Append       r6, r6, r118
L7:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r120, 1
  Add          r73, r73, r120
  Jump         L9
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r64, r64, r120
  Jump         L10
L5:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r54, r54, r120
  Jump         L11
L4:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r45, r45, r120
  Jump         L12
L3:
  // join t in title on t.id == ci.movie_id
  Add          r36, r36, r120
  Jump         L13
L2:
  // join n in name on n.id == ci.person_id
  Add          r27, r27, r120
  Jump         L14
L1:
  // from ci in cast_info
  AddInt       r19, r19, r120
  Jump         L15
L0:
  // movie_budget: min(from r in rows select r.budget),
  Const        r121, "movie_budget"
  Const        r122, []
  IterPrep     r123, r6
  Len          r124, r123
  Move         r125, r20
L17:
  LessInt      r126, r125, r124
  JumpIfFalse  r126, L16
  Index        r128, r123, r125
  Index        r129, r128, r14
  Append       r122, r122, r129
  AddInt       r125, r125, r120
  Jump         L17
L16:
  Min          r131, r122
  // movie_votes: min(from r in rows select r.votes),
  Const        r132, "movie_votes"
  Const        r133, []
  IterPrep     r134, r6
  Len          r135, r134
  Move         r136, r20
L19:
  LessInt      r137, r136, r135
  JumpIfFalse  r137, L18
  Index        r128, r134, r136
  Index        r139, r128, r15
  Append       r133, r133, r139
  AddInt       r136, r136, r120
  Jump         L19
L18:
  Min          r141, r133
  // movie_title: min(from r in rows select r.title)
  Const        r142, "movie_title"
  Const        r143, []
  IterPrep     r144, r6
  Len          r145, r144
  Move         r146, r20
L21:
  LessInt      r147, r146, r145
  JumpIfFalse  r147, L20
  Index        r128, r144, r146
  Index        r149, r128, r16
  Append       r143, r143, r149
  AddInt       r146, r146, r120
  Jump         L21
L20:
  Min          r151, r143
  // movie_budget: min(from r in rows select r.budget),
  Move         r152, r121
  Move         r153, r131
  // movie_votes: min(from r in rows select r.votes),
  Move         r154, r132
  Move         r155, r141
  // movie_title: min(from r in rows select r.title)
  Move         r156, r142
  Move         r157, r151
  // let result = {
  MakeMap      r158, 3, r152
  // json(result)
  JSON         r158
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r159, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r160, r158, r159
  Expect       r160
  Return       r0
