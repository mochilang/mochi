func main (regs=31)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
  // let name = [
  Const        r1, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
L8:
  // let title = [
  Const        r2, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
  // let cast_info = [
  Const        r3, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
L4:
  // let movie_info = [
  Const        r4, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
L12:
  // let movie_info_idx = [
  Const        r5, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
L1:
  // from ci in cast_info
  Const        r6, []
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r7, "note"
  // it1.info == "budget" &&
  Const        r8, "info"
  // n.gender == "m" &&
  Const        r9, "gender"
L6:
  // n.name.contains("Tim") &&
  Const        r10, "name"
L10:
  // t.id == ci.movie_id &&
  Const        r11, "id"
L9:
  Const        r12, "movie_id"
L14:
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r13, "budget"
  Const        r14, "votes"
  Const        r15, "title"
L15:
  // from ci in cast_info
  IterPrep     r16, r3
L0:
  Len          r3, r16
L5:
  Const        r17, 0
  Move         r18, r17
L2:
  LessInt      r19, r18, r3
  JumpIfFalse  r19, L0
L3:
  Index        r19, r16, r18
  // join n in name on n.id == ci.person_id
  IterPrep     r16, r1
L13:
  Len          r1, r16
  Const        r3, "person_id"
  Move         r20, r17
  LessInt      r21, r20, r1
  JumpIfFalse  r21, L1
  Index        r21, r16, r20
L7:
  Index        r20, r21, r11
  Index        r16, r19, r3
  Equal        r3, r20, r16
  JumpIfFalse  r3, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r3, r2
  Len          r2, r3
  Move         r16, r17
  LessInt      r20, r16, r2
  JumpIfFalse  r20, L2
  Index        r2, r3, r16
  Index        r3, r2, r11
  Index        r1, r19, r12
  Equal        r22, r3, r1
  JumpIfFalse  r22, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r22, r4
  Len          r4, r22
  Move         r1, r17
  LessInt      r3, r1, r4
  JumpIfFalse  r3, L3
  Index        r3, r22, r1
  Index        r22, r3, r12
  Index        r4, r2, r11
  Equal        r23, r22, r4
  JumpIfFalse  r23, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r23, r5
  Len          r5, r23
  Move         r4, r17
  LessInt      r22, r4, r5
  JumpIfFalse  r22, L4
  Index        r22, r23, r4
  Index        r23, r22, r12
  Index        r5, r2, r11
  Equal        r24, r23, r5
  JumpIfFalse  r24, L4
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r24, r0
  Len          r5, r24
  Const        r23, "info_type_id"
  Move         r25, r17
  LessInt      r26, r25, r5
  JumpIfFalse  r26, L4
  Index        r26, r24, r25
  Index        r24, r26, r11
  Index        r5, r3, r23
  Equal        r27, r24, r5
  JumpIfFalse  r27, L4
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r27, r0
  Len          r5, r27
  Move         r28, r17
  LessInt      r29, r28, r5
  JumpIfFalse  r29, L4
  Index        r29, r27, r28
  Index        r27, r29, r11
  Index        r5, r22, r23
  Equal        r23, r27, r5
  JumpIfFalse  r23, L5
  // ci.note in ["(producer)", "(executive producer)"] &&
  Index        r23, r19, r7
  Const        r7, ["(producer)", "(executive producer)"]
  In           r27, r23, r7
  // it1.info == "budget" &&
  Index        r7, r26, r8
  Equal        r26, r7, r13
  // it2.info == "votes" &&
  Index        r7, r29, r8
  Equal        r29, r7, r14
  // n.gender == "m" &&
  Index        r7, r21, r9
  Const        r9, "m"
  Equal        r23, r7, r9
  // t.id == ci.movie_id &&
  Index        r9, r2, r11
  Index        r11, r19, r12
  Equal        r7, r9, r11
  // ci.movie_id == mi.movie_id &&
  Index        r11, r19, r12
  Index        r9, r3, r12
  Equal        r30, r11, r9
  // ci.movie_id == mi_idx.movie_id &&
  Index        r9, r19, r12
  Index        r19, r22, r12
  Equal        r11, r9, r19
  // mi.movie_id == mi_idx.movie_id
  Index        r19, r3, r12
  Index        r9, r22, r12
  Equal        r12, r19, r9
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r9, r27
  JumpIfFalse  r9, L6
  // it1.info == "budget" &&
  Move         r9, r26
  JumpIfFalse  r9, L6
  // it2.info == "votes" &&
  Move         r9, r29
  JumpIfFalse  r9, L6
  // n.gender == "m" &&
  Move         r9, r23
  JumpIfFalse  r9, L7
  Index        r9, r21, r10
  // n.name.contains("Tim") &&
  Const        r21, "Tim"
  In           r10, r21, r9
  JumpIfFalse  r10, L8
  // t.id == ci.movie_id &&
  Move         r10, r7
  JumpIfFalse  r10, L9
  // ci.movie_id == mi.movie_id &&
  Move         r10, r30
  JumpIfFalse  r10, L10
  // ci.movie_id == mi_idx.movie_id &&
  Move         r10, r11
  JumpIfFalse  r10, L11
  Move         r10, r12
L11:
  // where (
  JumpIfFalse  r10, L5
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Move         r10, r13
  Index        r12, r3, r8
  Move         r3, r14
  Index        r11, r22, r8
  Move         r8, r15
  Index        r30, r2, r15
  Move         r2, r10
  Move         r10, r12
  Move         r12, r3
  Move         r3, r11
  Move         r11, r8
  Move         r8, r30
  MakeMap      r30, 3, r2
  // from ci in cast_info
  Append       r6, r6, r30
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r30, 1
  Add          r28, r28, r30
  Jump         L12
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r25, r25, r30
  Jump         L13
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r4, r4, r30
  Jump         L3
  // join mi in movie_info on mi.movie_id == t.id
  Add          r1, r1, r30
  Jump         L12
  // join t in title on t.id == ci.movie_id
  Add          r16, r16, r30
  Jump         L2
  // from ci in cast_info
  AddInt       r18, r18, r30
  Jump         L0
  // movie_budget: min(from r in rows select r.budget),
  Const        r5, "movie_budget"
  Const        r20, []
  IterPrep     r16, r6
  Len          r18, r16
  Move         r28, r17
  LessInt      r24, r28, r18
  JumpIfFalse  r24, L14
  Index        r24, r16, r28
  Index        r16, r24, r13
  Append       r20, r20, r16
  AddInt       r28, r28, r30
  Jump         L15
  Min          r28, r20
  // movie_votes: min(from r in rows select r.votes),
  Const        r20, "movie_votes"
  Const        r13, []
  IterPrep     r18, r6
  Len          r25, r18
  Move         r22, r17
L17:
  LessInt      r4, r22, r25
  JumpIfFalse  r4, L16
  Index        r24, r18, r22
  Index        r4, r24, r14
  Append       r13, r13, r4
  AddInt       r22, r22, r30
  Jump         L17
L16:
  Min          r4, r13
  // movie_title: min(from r in rows select r.title)
  Const        r13, "movie_title"
  Const        r22, []
  IterPrep     r14, r6
  Len          r6, r14
  Move         r25, r17
L19:
  LessInt      r17, r25, r6
  JumpIfFalse  r17, L18
  Index        r24, r14, r25
  Index        r17, r24, r15
  Append       r22, r22, r17
  AddInt       r25, r25, r30
  Jump         L19
L18:
  Min          r17, r22
  // movie_budget: min(from r in rows select r.budget),
  Move         r16, r5
  Move         r22, r28
  // movie_votes: min(from r in rows select r.votes),
  Move         r28, r20
  Move         r20, r4
  // movie_title: min(from r in rows select r.title)
  Move         r4, r13
  Move         r13, r17
  // let result = {
  MakeMap      r17, 3, r16
  // json(result)
  JSON         r17
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r13, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r4, r17, r13
  Expect       r4
  Return       r0
