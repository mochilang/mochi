func main (regs=215)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "budget"}, {"id": 2, "info": "votes"}, {"id": 3, "info": "rating"}]
  Move         r1, r0
  // let name = [
  Const        r2, [{"gender": "m", "id": 1, "name": "Big Tim"}, {"gender": "m", "id": 2, "name": "Slim Tim"}, {"gender": "f", "id": 3, "name": "Alice"}]
  Move         r3, r2
  // let title = [
  Const        r4, [{"id": 10, "title": "Alpha"}, {"id": 20, "title": "Beta"}, {"id": 30, "title": "Gamma"}]
  Move         r5, r4
  // let cast_info = [
  Const        r6, [{"movie_id": 10, "note": "(producer)", "person_id": 1}, {"movie_id": 20, "note": "(executive producer)", "person_id": 2}, {"movie_id": 30, "note": "(producer)", "person_id": 3}]
  Move         r7, r6
  // let movie_info = [
  Const        r8, [{"info": 90, "info_type_id": 1, "movie_id": 10}, {"info": 120, "info_type_id": 1, "movie_id": 20}, {"info": 110, "info_type_id": 1, "movie_id": 30}]
  Move         r9, r8
  // let movie_info_idx = [
  Const        r10, [{"info": 500, "info_type_id": 2, "movie_id": 10}, {"info": 400, "info_type_id": 2, "movie_id": 20}, {"info": 800, "info_type_id": 2, "movie_id": 30}]
  Move         r11, r10
  // from ci in cast_info
  Const        r12, []
  IterPrep     r13, r7
  Len          r14, r13
  Const        r15, 0
L22:
  Less         r16, r15, r14
  JumpIfFalse  r16, L0
  Index        r17, r13, r15
  Move         r18, r17
  // join n in name on n.id == ci.person_id
  IterPrep     r19, r3
  Len          r20, r19
  Const        r21, 0
L21:
  Less         r22, r21, r20
  JumpIfFalse  r22, L1
  Index        r23, r19, r21
  Move         r24, r23
  Const        r25, "id"
  Index        r26, r24, r25
  Const        r27, "person_id"
  Index        r28, r18, r27
  Equal        r29, r26, r28
  JumpIfFalse  r29, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r30, r5
  Len          r31, r30
  Const        r32, 0
L20:
  Less         r33, r32, r31
  JumpIfFalse  r33, L2
  Index        r34, r30, r32
  Move         r35, r34
  Const        r36, "id"
  Index        r37, r35, r36
  Const        r38, "movie_id"
  Index        r39, r18, r38
  Equal        r40, r37, r39
  JumpIfFalse  r40, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r41, r9
  Len          r42, r41
  Const        r43, 0
L19:
  Less         r44, r43, r42
  JumpIfFalse  r44, L3
  Index        r45, r41, r43
  Move         r46, r45
  Const        r47, "movie_id"
  Index        r48, r46, r47
  Const        r49, "id"
  Index        r50, r35, r49
  Equal        r51, r48, r50
  JumpIfFalse  r51, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r52, r11
  Len          r53, r52
  Const        r54, 0
L18:
  Less         r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r56, r52, r54
  Move         r57, r56
  Const        r58, "movie_id"
  Index        r59, r57, r58
  Const        r60, "id"
  Index        r61, r35, r60
  Equal        r62, r59, r61
  JumpIfFalse  r62, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r63, r1
  Len          r64, r63
  Const        r65, 0
L17:
  Less         r66, r65, r64
  JumpIfFalse  r66, L5
  Index        r67, r63, r65
  Move         r68, r67
  Const        r69, "id"
  Index        r70, r68, r69
  Const        r71, "info_type_id"
  Index        r72, r46, r71
  Equal        r73, r70, r72
  JumpIfFalse  r73, L6
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r74, r1
  Len          r75, r74
  Const        r76, 0
L16:
  Less         r77, r76, r75
  JumpIfFalse  r77, L6
  Index        r78, r74, r76
  Move         r79, r78
  Const        r80, "id"
  Index        r81, r79, r80
  Const        r82, "info_type_id"
  Index        r83, r57, r82
  Equal        r84, r81, r83
  JumpIfFalse  r84, L7
  // ci.note in ["(producer)", "(executive producer)"] &&
  Const        r85, "note"
  Index        r86, r18, r85
  Const        r87, ["(producer)", "(executive producer)"]
  In           r88, r86, r87
  // it1.info == "budget" &&
  Const        r89, "info"
  Index        r90, r68, r89
  Const        r91, "budget"
  Equal        r92, r90, r91
  // it2.info == "votes" &&
  Const        r93, "info"
  Index        r94, r79, r93
  Const        r95, "votes"
  Equal        r96, r94, r95
  // n.gender == "m" &&
  Const        r97, "gender"
  Index        r98, r24, r97
  Const        r99, "m"
  Equal        r100, r98, r99
  // t.id == ci.movie_id &&
  Const        r101, "id"
  Index        r102, r35, r101
  Const        r103, "movie_id"
  Index        r104, r18, r103
  Equal        r105, r102, r104
  // ci.movie_id == mi.movie_id &&
  Const        r106, "movie_id"
  Index        r107, r18, r106
  Const        r108, "movie_id"
  Index        r109, r46, r108
  Equal        r110, r107, r109
  // ci.movie_id == mi_idx.movie_id &&
  Const        r111, "movie_id"
  Index        r112, r18, r111
  Const        r113, "movie_id"
  Index        r114, r57, r113
  Equal        r115, r112, r114
  // mi.movie_id == mi_idx.movie_id
  Const        r116, "movie_id"
  Index        r117, r46, r116
  Const        r118, "movie_id"
  Index        r119, r57, r118
  Equal        r120, r117, r119
  // ci.note in ["(producer)", "(executive producer)"] &&
  Move         r121, r88
  JumpIfFalse  r121, L8
  Move         r121, r92
L8:
  // it1.info == "budget" &&
  Move         r122, r121
  JumpIfFalse  r122, L9
  Move         r122, r96
L9:
  // it2.info == "votes" &&
  Move         r123, r122
  JumpIfFalse  r123, L10
  Move         r123, r100
L10:
  // n.gender == "m" &&
  Move         r124, r123
  JumpIfFalse  r124, L11
  Const        r125, "name"
  Index        r126, r24, r125
  // n.name.contains("Tim") &&
  Const        r127, "Tim"
  In           r128, r127, r126
  // n.gender == "m" &&
  Move         r124, r128
L11:
  // n.name.contains("Tim") &&
  Move         r129, r124
  JumpIfFalse  r129, L12
  Move         r129, r105
L12:
  // t.id == ci.movie_id &&
  Move         r130, r129
  JumpIfFalse  r130, L13
  Move         r130, r110
L13:
  // ci.movie_id == mi.movie_id &&
  Move         r131, r130
  JumpIfFalse  r131, L14
  Move         r131, r115
L14:
  // ci.movie_id == mi_idx.movie_id &&
  Move         r132, r131
  JumpIfFalse  r132, L15
  Move         r132, r120
L15:
  // where (
  JumpIfFalse  r132, L7
  // select { budget: mi.info, votes: mi_idx.info, title: t.title }
  Const        r133, "budget"
  Const        r134, "info"
  Index        r135, r46, r134
  Const        r136, "votes"
  Const        r137, "info"
  Index        r138, r57, r137
  Const        r139, "title"
  Const        r140, "title"
  Index        r141, r35, r140
  Move         r142, r133
  Move         r143, r135
  Move         r144, r136
  Move         r145, r138
  Move         r146, r139
  Move         r147, r141
  MakeMap      r148, 3, r142
  // from ci in cast_info
  Append       r149, r12, r148
  Move         r12, r149
L7:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r150, 1
  Add          r151, r76, r150
  Move         r76, r151
  Jump         L16
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r152, 1
  Add          r153, r65, r152
  Move         r65, r153
  Jump         L17
L5:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Const        r154, 1
  Add          r155, r54, r154
  Move         r54, r155
  Jump         L18
L4:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r156, 1
  Add          r157, r43, r156
  Move         r43, r157
  Jump         L19
L3:
  // join t in title on t.id == ci.movie_id
  Const        r158, 1
  Add          r159, r32, r158
  Move         r32, r159
  Jump         L20
L2:
  // join n in name on n.id == ci.person_id
  Const        r160, 1
  Add          r161, r21, r160
  Move         r21, r161
  Jump         L21
L1:
  // from ci in cast_info
  Const        r162, 1
  Add          r163, r15, r162
  Move         r15, r163
  Jump         L22
L0:
  // let rows =
  Move         r164, r12
  // movie_budget: min(from r in rows select r.budget),
  Const        r165, "movie_budget"
  Const        r166, []
  IterPrep     r167, r164
  Len          r168, r167
  Const        r169, 0
L24:
  Less         r170, r169, r168
  JumpIfFalse  r170, L23
  Index        r171, r167, r169
  Move         r172, r171
  Const        r173, "budget"
  Index        r174, r172, r173
  Append       r175, r166, r174
  Move         r166, r175
  Const        r176, 1
  Add          r177, r169, r176
  Move         r169, r177
  Jump         L24
L23:
  Min          r178, r166
  // movie_votes: min(from r in rows select r.votes),
  Const        r179, "movie_votes"
  Const        r180, []
  IterPrep     r181, r164
  Len          r182, r181
  Const        r183, 0
L26:
  Less         r184, r183, r182
  JumpIfFalse  r184, L25
  Index        r185, r181, r183
  Move         r172, r185
  Const        r186, "votes"
  Index        r187, r172, r186
  Append       r188, r180, r187
  Move         r180, r188
  Const        r189, 1
  Add          r190, r183, r189
  Move         r183, r190
  Jump         L26
L25:
  Min          r191, r180
  // movie_title: min(from r in rows select r.title)
  Const        r192, "movie_title"
  Const        r193, []
  IterPrep     r194, r164
  Len          r195, r194
  Const        r196, 0
L28:
  Less         r197, r196, r195
  JumpIfFalse  r197, L27
  Index        r198, r194, r196
  Move         r172, r198
  Const        r199, "title"
  Index        r200, r172, r199
  Append       r201, r193, r200
  Move         r193, r201
  Const        r202, 1
  Add          r203, r196, r202
  Move         r196, r203
  Jump         L28
L27:
  Min          r204, r193
  // movie_budget: min(from r in rows select r.budget),
  Move         r205, r165
  Move         r206, r178
  // movie_votes: min(from r in rows select r.votes),
  Move         r207, r179
  Move         r208, r191
  // movie_title: min(from r in rows select r.title)
  Move         r209, r192
  Move         r210, r204
  // let result = {
  MakeMap      r211, 3, r205
  Move         r212, r211
  // json(result)
  JSON         r212
  // expect result == { movie_budget: 90, movie_votes: 400, movie_title: "Alpha" }
  Const        r213, {"movie_budget": 90, "movie_title": "Alpha", "movie_votes": 400}
  Equal        r214, r212, r213
  Expect       r214
  Return       r0
