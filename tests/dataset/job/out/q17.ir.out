func main (regs=25)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "person_id": 1}, {"movie_id": 2, "person_id": 2}]
  // let company_name = [
  Const        r1, [{"country_code": "[us]", "id": 1}, {"country_code": "[ca]", "id": 2}]
  // let keyword = [
  Const        r2, [{"id": 10, "keyword": "character-name-in-title"}, {"id": 20, "keyword": "other"}]
L9:
  // let movie_companies = [
  Const        r3, [{"company_id": 1, "movie_id": 1}, {"company_id": 2, "movie_id": 2}]
L11:
  // let movie_keyword = [
  Const        r4, [{"keyword_id": 10, "movie_id": 1}, {"keyword_id": 20, "movie_id": 2}]
  // let name = [
  Const        r5, [{"id": 1, "name": "Bob Smith"}, {"id": 2, "name": "Alice Jones"}]
  // let title = [
  Const        r6, [{"id": 1, "title": "Bob's Journey"}, {"id": 2, "title": "Foreign Film"}]
  // from n in name
  Const        r7, []
  // where cn.country_code == "[us]" &&
  Const        r8, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r9, "keyword"
  // n.name.starts_with("B") &&
  Const        r10, "name"
  // ci.movie_id == mk.movie_id &&
  Const        r11, "movie_id"
  // from n in name
  IterPrep     r12, r5
L13:
  Len          r5, r12
  Const        r13, 0
  Move         r14, r13
L5:
  LessInt      r15, r14, r5
L10:
  JumpIfFalse  r15, L0
L2:
  Index        r15, r12, r14
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r12, r0
  Len          r5, r12
L6:
  Const        r16, "person_id"
L12:
  Const        r17, "id"
  Move         r18, r13
  LessInt      r19, r18, r5
  JumpIfFalse  r19, L1
  Index        r19, r12, r18
  Index        r18, r19, r16
  Index        r16, r15, r17
  Equal        r12, r18, r16
  JumpIfFalse  r12, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r12, r6
  Len          r6, r12
  Move         r16, r13
  LessInt      r18, r16, r6
  JumpIfFalse  r18, L2
  Index        r6, r12, r16
  Index        r12, r6, r17
  Index        r5, r19, r11
  Equal        r20, r12, r5
  JumpIfFalse  r20, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r20, r4
  Len          r4, r20
  Move         r5, r13
  LessInt      r12, r5, r4
  JumpIfFalse  r12, L3
  Index        r12, r20, r5
  Index        r20, r12, r11
  Index        r4, r6, r17
  Equal        r21, r20, r4
  JumpIfFalse  r21, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r21, r2
  Len          r2, r21
  Const        r4, "keyword_id"
  Move         r20, r13
  LessInt      r22, r20, r2
  JumpIfFalse  r22, L4
  Index        r22, r21, r20
  Index        r21, r22, r17
  Index        r2, r12, r4
  Equal        r4, r21, r2
  JumpIfFalse  r4, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r4, r3
  Len          r3, r4
  Move         r2, r13
  LessInt      r21, r2, r3
  JumpIfFalse  r21, L5
  Index        r21, r4, r2
  Index        r4, r21, r11
  Index        r3, r6, r17
  Equal        r6, r4, r3
  JumpIfFalse  r6, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r6, r1
  Len          r1, r6
  Const        r3, "company_id"
  Move         r23, r13
  LessInt      r24, r23, r1
  JumpIfFalse  r24, L5
  Index        r24, r6, r23
  Index        r6, r24, r17
  Index        r17, r21, r3
  Equal        r3, r6, r17
  JumpIfFalse  r3, L6
  // where cn.country_code == "[us]" &&
  Index        r3, r24, r8
  Const        r24, "[us]"
  Equal        r8, r3, r24
  // k.keyword == "character-name-in-title" &&
  Index        r24, r22, r9
  Const        r9, "character-name-in-title"
  Equal        r3, r24, r9
  // ci.movie_id == mk.movie_id &&
  Index        r9, r19, r11
  Index        r24, r12, r11
  Equal        r6, r9, r24
  // ci.movie_id == mc.movie_id &&
  Index        r24, r19, r11
  Index        r19, r21, r11
  Equal        r9, r24, r19
  // mc.movie_id == mk.movie_id
  Index        r19, r21, r11
  Index        r21, r12, r11
  Equal        r12, r19, r21
  // where cn.country_code == "[us]" &&
  Move         r21, r8
  JumpIfFalse  r21, L6
  // k.keyword == "character-name-in-title" &&
  Move         r21, r3
  JumpIfFalse  r21, L7
  Index        r21, r15, r10
  // n.name.starts_with("B") &&
  Const        r3, 1
  Len          r8, r21
  LessEq       r21, r3, r8
  JumpIfFalse  r21, L8
  Jump         L7
L8:
  // ci.movie_id == mk.movie_id &&
  Move         r21, r6
  JumpIfFalse  r21, L9
  // ci.movie_id == mc.movie_id &&
  Move         r21, r9
  JumpIfFalse  r21, L5
  Move         r21, r12
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r21, L6
  // select n.name
  Index        r21, r15, r10
  // from n in name
  Append       r7, r7, r21
  // join cn in company_name on cn.id == mc.company_id
  Move         r21, r3
  Add          r23, r23, r21
  Jump         L10
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r2, r2, r21
  Jump         L11
  // join k in keyword on k.id == mk.keyword_id
  Add          r20, r20, r21
  Jump         L12
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r5, r5, r21
  Jump         L9
L3:
  // join t in title on t.id == ci.movie_id
  Add          r16, r16, r21
  Jump         L2
L1:
  // from n in name
  AddInt       r14, r14, r21
  Jump         L13
L0:
  // member_in_charnamed_american_movie: min(matches),
  Const        r3, "member_in_charnamed_american_movie"
  Min          r21, r7
  // a1: min(matches)
  Const        r18, "a1"
  Min          r16, r7
  // member_in_charnamed_american_movie: min(matches),
  Move         r7, r3
  Move         r3, r21
  // a1: min(matches)
  Move         r21, r18
  Move         r18, r16
  // {
  MakeMap      r16, 2, r7
  // let result = [
  MakeList     r18, 1, r16
  // json(result)
  JSON         r18
  // expect result == [
  Const        r16, [{"a1": "Bob Smith", "member_in_charnamed_american_movie": "Bob Smith"}]
  Equal        r21, r18, r16
  Expect       r21
  Return       r0
