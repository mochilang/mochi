func main (regs=52)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "crew"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 3}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(writer)", "person_id": 10}, {"movie_id": 2, "note": "(actor)", "person_id": 11}]
L4:
  // let info_type = [
  Const        r3, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
L16:
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
L19:
  // let movie_info_idx = [
  Const        r6, [{"info": 2000, "info_type_id": 2, "movie_id": 1}, {"info": 150, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
L5:
  // let name = [
  Const        r8, [{"gender": "m", "id": 10, "name": "John Writer"}, {"gender": "f", "id": 11, "name": "Jane Actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2005, "title": "Violent Horror"}, {"id": 2, "production_year": 1995, "title": "Old Comedy"}]
L9:
  // let violent_keywords = [
  Const        r10, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  // let writer_notes = [
  Const        r11, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
L2:
  // from cc in complete_cast
  Const        r12, []
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
L12:
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
L0:
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
L10:
  // from cc in complete_cast
  IterPrep     r25, r1
L1:
  Len          r1, r25
  Const        r26, 0
L3:
  Move         r27, r26
  LessInt      r28, r27, r1
  JumpIfFalse  r28, L0
  Index        r1, r25, r27
L24:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r25, r0
L22:
  Len          r29, r25
L11:
  Const        r30, "id"
  Const        r31, "subject_id"
  Move         r32, r26
L21:
  LessInt      r33, r32, r29
L20:
  JumpIfFalse  r33, L1
  Index        r29, r25, r32
L13:
  Index        r25, r29, r30
  Index        r34, r1, r31
  Equal        r31, r25, r34
L18:
  JumpIfFalse  r31, L1
L6:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r31, r0
  Len          r34, r31
  Const        r25, "status_id"
L17:
  Move         r35, r26
L15:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L1
L7:
  Index        r36, r31, r35
  Index        r31, r36, r30
  Index        r34, r1, r25
  Equal        r25, r31, r34
  JumpIfFalse  r25, L1
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r25, r2
  Len          r2, r25
  Const        r34, "movie_id"
  Move         r31, r26
  LessInt      r37, r31, r2
  JumpIfFalse  r37, L1
  Index        r37, r25, r31
  Index        r25, r37, r34
  Index        r2, r1, r34
  Equal        r38, r25, r2
  JumpIfFalse  r38, L2
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r38, r5
  Len          r5, r38
  Move         r2, r26
  LessInt      r25, r2, r5
  JumpIfFalse  r25, L2
  Index        r25, r38, r2
  Index        r38, r25, r34
  Index        r5, r1, r34
  Equal        r39, r38, r5
  JumpIfFalse  r39, L3
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r39, r6
  Len          r6, r39
  Move         r5, r26
  LessInt      r40, r5, r6
  JumpIfFalse  r40, L3
  Index        r40, r39, r5
  Index        r39, r40, r34
  Index        r6, r1, r34
  Equal        r41, r39, r6
  JumpIfFalse  r41, L4
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r41, r7
  Len          r7, r41
  Move         r39, r26
  LessInt      r42, r39, r7
  JumpIfFalse  r42, L4
  Index        r42, r41, r39
  Index        r41, r42, r34
  Index        r7, r1, r34
  Equal        r43, r41, r7
  JumpIfFalse  r43, L4
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r7, r3
  Len          r41, r7
  Const        r44, "info_type_id"
  Move         r45, r26
  LessInt      r46, r45, r41
  JumpIfFalse  r46, L4
  Index        r46, r7, r45
  Index        r7, r46, r30
  Index        r41, r25, r44
  Equal        r47, r7, r41
  JumpIfFalse  r47, L4
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r47, r3
  Len          r3, r47
  Move         r41, r26
  LessInt      r7, r41, r3
  JumpIfFalse  r7, L4
  Index        r7, r47, r41
  Index        r3, r7, r30
  Index        r48, r40, r44
  Equal        r44, r3, r48
  JumpIfFalse  r44, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r44, r4
  Len          r4, r44
  Const        r48, "keyword_id"
  Move         r3, r26
  LessInt      r49, r3, r4
  JumpIfFalse  r49, L5
  Index        r49, r44, r3
  Index        r44, r49, r30
  Index        r50, r42, r48
  Equal        r48, r44, r50
  JumpIfFalse  r48, L6
  // join n in name on n.id == ci.person_id
  IterPrep     r48, r8
  Len          r8, r48
  Const        r50, "person_id"
  Move         r44, r26
  LessInt      r42, r44, r8
  JumpIfFalse  r42, L6
  Index        r42, r48, r44
  Index        r48, r42, r30
  Index        r8, r37, r50
  Equal        r51, r48, r8
  JumpIfFalse  r51, L7
  // join t in title on t.id == cc.movie_id
  IterPrep     r51, r9
  Len          r9, r51
  Move         r8, r26
  LessInt      r48, r8, r9
  JumpIfFalse  r48, L7
  Index        r9, r51, r8
  Index        r51, r9, r30
  Index        r30, r1, r34
  Equal        r34, r51, r30
  JumpIfFalse  r34, L8
  // where (cct1.kind in ["cast", "crew"]) &&
  Index        r34, r29, r13
  Const        r29, ["cast", "crew"]
  In           r30, r34, r29
  // t.production_year > 2000
  Index        r29, r9, r18
  Const        r18, 2000
  Less         r34, r18, r29
  // cct2.kind == "complete+verified" &&
  Index        r29, r36, r13
  Const        r36, "complete+verified"
  Equal        r13, r29, r36
  // it1.info == "genres" &&
  Index        r36, r46, r15
  Const        r46, "genres"
  Equal        r29, r36, r46
  // it2.info == "votes" &&
  Index        r46, r7, r15
  Equal        r7, r46, r20
  // n.gender == "m" &&
  Index        r46, r42, r17
  Const        r17, "m"
  Equal        r36, r46, r17
  // where (cct1.kind in ["cast", "crew"]) &&
  Move         r17, r30
  JumpIfFalse  r17, L9
  // cct2.kind == "complete+verified" &&
  Move         r17, r13
  JumpIfFalse  r17, L10
  // (ci.note in writer_notes) &&
  Index        r17, r37, r14
  In           r14, r17, r11
  JumpIfFalse  r14, L11
  // it1.info == "genres" &&
  Move         r14, r29
  JumpIfFalse  r14, L12
  // it2.info == "votes" &&
  Move         r14, r7
  JumpIfFalse  r14, L9
  // (k.keyword in violent_keywords) &&
  Index        r14, r49, r16
  In           r49, r14, r10
  JumpIfFalse  r49, L13
  // (mi.info in ["Horror", "Thriller"]) &&
  Index        r49, r25, r15
  Const        r14, ["Horror", "Thriller"]
  In           r10, r49, r14
  JumpIfFalse  r10, L12
  // n.gender == "m" &&
  Move         r10, r36
  JumpIfFalse  r10, L14
  Move         r10, r34
L14:
  // where (cct1.kind in ["cast", "crew"]) &&
  JumpIfFalse  r10, L8
  // budget: mi.info,
  Move         r10, r19
  Index        r36, r25, r15
  // votes: mi_idx.info,
  Move         r25, r20
  Index        r34, r40, r15
  // writer: n.name,
  Move         r40, r21
  Index        r15, r42, r22
  // movie: t.title
  Move         r42, r23
  Index        r22, r9, r24
  // budget: mi.info,
  Move         r9, r10
  Move         r10, r36
  // votes: mi_idx.info,
  Move         r36, r25
  Move         r25, r34
  // writer: n.name,
  Move         r34, r40
  Move         r40, r15
  // movie: t.title
  Move         r15, r42
  Move         r42, r22
  // select {
  MakeMap      r22, 4, r9
  // from cc in complete_cast
  Append       r12, r12, r22
L8:
  // join t in title on t.id == cc.movie_id
  Const        r22, 1
  Add          r8, r8, r22
  Jump         L0
  // join n in name on n.id == ci.person_id
  Add          r44, r44, r22
  Jump         L15
  // join k in keyword on k.id == mk.keyword_id
  Add          r3, r3, r22
  Jump         L7
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r41, r41, r22
  Jump         L16
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r45, r45, r22
  Jump         L17
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r39, r39, r22
  Jump         L18
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Add          r5, r5, r22
  Jump         L19
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Add          r2, r2, r22
  Jump         L20
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r31, r31, r22
  Jump         L21
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r35, r35, r22
  Jump         L0
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r32, r32, r22
  Jump         L22
  // from cc in complete_cast
  AddInt       r27, r27, r22
  Jump         L3
  // movie_budget: min(from x in matches select x.budget),
  Const        r18, "movie_budget"
  Const        r33, []
  IterPrep     r32, r12
  Len          r28, r32
  Move         r27, r26
  LessInt      r48, r27, r28
  JumpIfFalse  r48, L23
  Index        r48, r32, r27
  Index        r32, r48, r19
  Append       r33, r33, r32
  AddInt       r27, r27, r22
  Jump         L24
L23:
  Min          r27, r33
  // movie_votes: min(from x in matches select x.votes),
  Const        r33, "movie_votes"
  Const        r19, []
  IterPrep     r28, r12
  Len          r8, r28
  Move         r44, r26
L26:
  LessInt      r50, r44, r8
  JumpIfFalse  r50, L25
  Index        r48, r28, r44
  Index        r50, r48, r20
  Append       r19, r19, r50
  AddInt       r44, r44, r22
  Jump         L26
L25:
  Min          r50, r19
  // writer: min(from x in matches select x.writer),
  Move         r19, r21
  Const        r44, []
  IterPrep     r20, r12
  Len          r8, r20
  Move         r28, r26
L28:
  LessInt      r3, r28, r8
  JumpIfFalse  r3, L27
  Index        r48, r20, r28
  Index        r3, r48, r21
  Append       r44, r44, r3
  AddInt       r28, r28, r22
  Jump         L28
L27:
  Min          r3, r44
  // complete_violent_movie: min(from x in matches select x.movie)
  Const        r44, "complete_violent_movie"
  Const        r28, []
  IterPrep     r21, r12
  Len          r12, r21
  Move         r8, r26
L30:
  LessInt      r26, r8, r12
  JumpIfFalse  r26, L29
  Index        r48, r21, r8
  Index        r26, r48, r23
  Append       r28, r28, r26
  AddInt       r8, r8, r22
  Jump         L30
L29:
  Min          r26, r28
  // movie_budget: min(from x in matches select x.budget),
  Move         r28, r18
  Move         r18, r27
  // movie_votes: min(from x in matches select x.votes),
  Move         r27, r33
  Move         r33, r50
  // writer: min(from x in matches select x.writer),
  Move         r50, r19
  Move         r19, r3
  // complete_violent_movie: min(from x in matches select x.movie)
  Move         r32, r44
  Move         r44, r26
  // {
  MakeMap      r26, 4, r28
  // let result = [
  MakeList     r44, 1, r26
  // json(result)
  JSON         r44
  // expect result == [
  Const        r26, [{"complete_violent_movie": "Violent Horror", "movie_budget": "Horror", "movie_votes": 2000, "writer": "John Writer"}]
  Equal        r19, r44, r26
  Expect       r19
  Return       r0
