func main (regs=238)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "crew"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 3}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(writer)", "person_id": 10}, {"movie_id": 2, "note": "(actor)", "person_id": 11}]
  // let info_type = [
  Const        r3, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r6, [{"info": 2000, "info_type_id": 2, "movie_id": 1}, {"info": 150, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r8, [{"gender": "m", "id": 10, "name": "John Writer"}, {"gender": "f", "id": 11, "name": "Jane Actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2005, "title": "Violent Horror"}, {"id": 2, "production_year": 1995, "title": "Old Comedy"}]
  // let violent_keywords = [
  Const        r10, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  // let writer_notes = [
  Const        r11, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // from cc in complete_cast
  Const        r12, []
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // from cc in complete_cast
  IterPrep     r25, r1
  Len          r26, r25
  Const        r28, 0
  Move         r27, r28
  LessInt      r29, r27, r26
  JumpIfFalse  r29, L0
  Index        r30, r25, r27
  Move         r31, r30
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r32, r0
  Len          r33, r32
  Const        r34, "id"
  Const        r35, "subject_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r28, 0
  Move         r36, r28
  LessInt      r37, r36, r33
  JumpIfFalse  r37, L1
  Index        r38, r32, r36
  Move         r39, r38
  Const        r34, "id"
  Index        r40, r39, r34
  Const        r35, "subject_id"
  Index        r41, r31, r35
  Equal        r42, r40, r41
  JumpIfFalse  r42, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r43, r0
  Len          r44, r43
  Const        r34, "id"
  Const        r45, "status_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r28, 0
  Move         r46, r28
  LessInt      r47, r46, r44
  JumpIfFalse  r47, L2
  Index        r48, r43, r46
  Move         r49, r48
  Const        r34, "id"
  Index        r50, r49, r34
  Const        r45, "status_id"
  Index        r51, r31, r45
  Equal        r52, r50, r51
  JumpIfFalse  r52, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r53, r2
  Len          r54, r53
  Const        r55, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Const        r28, 0
  Move         r56, r28
  LessInt      r57, r56, r54
  JumpIfFalse  r57, L3
  Index        r58, r53, r56
  Move         r59, r58
  Const        r55, "movie_id"
  Index        r60, r59, r55
  Index        r61, r31, r55
  Equal        r62, r60, r61
  JumpIfFalse  r62, L4
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r63, r5
  Len          r64, r63
  Const        r55, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r28, 0
  Move         r65, r28
  LessInt      r66, r65, r64
  JumpIfFalse  r66, L4
  Index        r67, r63, r65
  Move         r68, r67
  Const        r55, "movie_id"
  Index        r69, r68, r55
  Index        r70, r31, r55
  Equal        r71, r69, r70
  JumpIfFalse  r71, L5
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r72, r6
  Len          r73, r72
  Const        r55, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r28, 0
  Move         r74, r28
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L5
  Index        r76, r72, r74
  Move         r77, r76
  Const        r55, "movie_id"
  Index        r78, r77, r55
  Index        r79, r31, r55
  Equal        r80, r78, r79
  JumpIfFalse  r80, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r81, r7
  Len          r82, r81
  Const        r55, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r28, 0
  Move         r83, r28
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L6
  Index        r85, r81, r83
  Move         r86, r85
  Const        r55, "movie_id"
  Index        r87, r86, r55
  Index        r88, r31, r55
  Equal        r89, r87, r88
  JumpIfFalse  r89, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r90, r3
  Len          r91, r90
  Const        r34, "id"
  Const        r92, "info_type_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r28, 0
  Move         r93, r28
  LessInt      r94, r93, r91
  JumpIfFalse  r94, L7
  Index        r95, r90, r93
  Move         r96, r95
  Const        r34, "id"
  Index        r97, r96, r34
  Const        r92, "info_type_id"
  Index        r98, r68, r92
  Equal        r99, r97, r98
  JumpIfFalse  r99, L8
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r100, r3
  Len          r101, r100
  Const        r34, "id"
  Const        r92, "info_type_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r28, 0
  Move         r102, r28
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L8
  Index        r104, r100, r102
  Move         r105, r104
  Const        r34, "id"
  Index        r106, r105, r34
  Const        r92, "info_type_id"
  Index        r107, r77, r92
  Equal        r108, r106, r107
  JumpIfFalse  r108, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r109, r4
  Len          r110, r109
  Const        r34, "id"
  Const        r111, "keyword_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r28, 0
  Move         r112, r28
  LessInt      r113, r112, r110
  JumpIfFalse  r113, L9
  Index        r114, r109, r112
  Move         r115, r114
  Const        r34, "id"
  Index        r116, r115, r34
  Const        r111, "keyword_id"
  Index        r117, r86, r111
  Equal        r118, r116, r117
  JumpIfFalse  r118, L10
  // join n in name on n.id == ci.person_id
  IterPrep     r119, r8
  Len          r120, r119
  Const        r34, "id"
  Const        r121, "person_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join n in name on n.id == ci.person_id
  Const        r28, 0
  Move         r122, r28
  LessInt      r123, r122, r120
  JumpIfFalse  r123, L10
  Index        r124, r119, r122
  Move         r125, r124
  Const        r34, "id"
  Index        r126, r125, r34
  Const        r121, "person_id"
  Index        r127, r59, r121
  Equal        r128, r126, r127
  JumpIfFalse  r128, L11
  // join t in title on t.id == cc.movie_id
  IterPrep     r129, r9
  Len          r130, r129
  Const        r34, "id"
  Const        r55, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  // it1.info == "genres" &&
  Const        r15, "info"
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  // n.gender == "m" &&
  Const        r17, "gender"
  // t.production_year > 2000
  Const        r18, "production_year"
  // budget: mi.info,
  Const        r19, "budget"
  // votes: mi_idx.info,
  Const        r20, "votes"
  // writer: n.name,
  Const        r21, "writer"
  Const        r22, "name"
  // movie: t.title
  Const        r23, "movie"
  Const        r24, "title"
  // join t in title on t.id == cc.movie_id
  Const        r28, 0
  Move         r131, r28
  LessInt      r132, r131, r130
  JumpIfFalse  r132, L11
  Index        r133, r129, r131
  Move         r134, r133
  Const        r34, "id"
  Index        r135, r134, r34
  Const        r55, "movie_id"
  Index        r136, r31, r55
  Equal        r137, r135, r136
  JumpIfFalse  r137, L12
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  Index        r138, r39, r13
  Const        r139, ["cast", "crew"]
  In           r140, r138, r139
  // t.production_year > 2000
  Const        r18, "production_year"
  Index        r141, r134, r18
  Const        r142, 2000
  Less         r143, r142, r141
  // cct2.kind == "complete+verified" &&
  Index        r144, r49, r13
  Const        r145, "complete+verified"
  Equal        r146, r144, r145
  // it1.info == "genres" &&
  Const        r15, "info"
  Index        r147, r96, r15
  Const        r148, "genres"
  Equal        r149, r147, r148
  // it2.info == "votes" &&
  Index        r150, r105, r15
  Const        r20, "votes"
  Equal        r151, r150, r20
  // n.gender == "m" &&
  Const        r17, "gender"
  Index        r152, r125, r17
  Const        r153, "m"
  Equal        r154, r152, r153
  // where (cct1.kind in ["cast", "crew"]) &&
  Move         r155, r140
  JumpIfFalse  r155, L13
  Move         r155, r146
  // cct2.kind == "complete+verified" &&
  JumpIfFalse  r155, L13
  // (ci.note in writer_notes) &&
  Const        r14, "note"
  Index        r156, r59, r14
  Const        r157, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r158, r156, r157
  // cct2.kind == "complete+verified" &&
  Move         r155, r158
  // (ci.note in writer_notes) &&
  JumpIfFalse  r155, L13
  Move         r155, r149
  // it1.info == "genres" &&
  JumpIfFalse  r155, L13
  Move         r155, r151
  // it2.info == "votes" &&
  JumpIfFalse  r155, L13
  // (k.keyword in violent_keywords) &&
  Const        r16, "keyword"
  Index        r159, r115, r16
  Const        r160, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  In           r161, r159, r160
  // it2.info == "votes" &&
  Move         r155, r161
  // (k.keyword in violent_keywords) &&
  JumpIfFalse  r155, L13
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r15, "info"
  Index        r162, r68, r15
  Const        r163, ["Horror", "Thriller"]
  In           r164, r162, r163
  // (k.keyword in violent_keywords) &&
  Move         r155, r164
  // (mi.info in ["Horror", "Thriller"]) &&
  JumpIfFalse  r155, L13
  Move         r155, r154
  // n.gender == "m" &&
  JumpIfFalse  r155, L13
  Move         r155, r143
  // where (cct1.kind in ["cast", "crew"]) &&
  JumpIfFalse  r155, L12
  // budget: mi.info,
  Const        r165, "budget"
  Const        r15, "info"
  Index        r166, r68, r15
  // votes: mi_idx.info,
  Const        r167, "votes"
  Index        r168, r77, r15
  // writer: n.name,
  Const        r169, "writer"
L14:
  Const        r22, "name"
  Index        r170, r125, r22
  // movie: t.title
  Const        r171, "movie"
  Const        r24, "title"
  Index        r172, r134, r24
  // budget: mi.info,
  Move         r173, r165
  Move         r174, r166
  // votes: mi_idx.info,
  Move         r175, r167
  Move         r176, r168
  // writer: n.name,
  Move         r177, r169
  Move         r178, r170
  // movie: t.title
  Move         r179, r171
  Move         r180, r172
  // select {
  MakeMap      r181, 4, r173
  // from cc in complete_cast
  Append       r182, r12, r181
  Move         r12, r182
  // join t in title on t.id == cc.movie_id
  Const        r183, 1
  Add          r131, r131, r183
  Jump         L14
L13:
  // movie_budget: min(from x in matches select x.budget),
  Const        r19, "budget"
  Index        r193, r192, r19
  Append       r194, r186, r193
  Move         r186, r194
  Const        r183, 1
  AddInt       r189, r189, r183
  Jump         L15
L12:
  // movie_votes: min(from x in matches select x.votes),
  AddInt       r200, r200, r183
  Jump         L16
L11:
  // writer: min(from x in matches select x.writer),
  Const        r206, "writer"
  Const        r207, []
  Const        r21, "writer"
L10:
  IterPrep     r208, r12
  Len          r209, r208
  Const        r28, 0
L9:
  Move         r210, r28
  LessInt      r211, r210, r209
  JumpIfFalse  r211, L17
L8:
  Index        r212, r208, r210
  Move         r192, r212
  Const        r21, "writer"
L7:
  Index        r213, r192, r21
  Append       r214, r207, r213
  Move         r207, r214
L6:
  Const        r183, 1
  AddInt       r210, r210, r183
  Jump         L18
L5:
  Min          r215, r207
  // complete_violent_movie: min(from x in matches select x.movie)
  Const        r216, "complete_violent_movie"
  Const        r217, []
L4:
  Const        r23, "movie"
  IterPrep     r218, r12
  Len          r219, r218
L3:
  Const        r28, 0
  Move         r220, r28
  LessInt      r221, r220, r219
L2:
  JumpIfFalse  r221, L19
  Index        r222, r218, r220
  Move         r192, r222
L1:
  Const        r23, "movie"
  Index        r223, r192, r23
  Append       r224, r217, r223
L0:
  Move         r217, r224
  Const        r183, 1
  AddInt       r220, r220, r183
  Jump         L20
L15:
  // movie_votes: min(from x in matches select x.votes),
  Move         r228, r196
  Move         r229, r205
  // writer: min(from x in matches select x.writer),
  Move         r230, r206
  Move         r231, r215
  // complete_violent_movie: min(from x in matches select x.movie)
  Move         r232, r216
  Move         r233, r225
  // {
  MakeMap      r234, 4, r226
  Move         r184, r234
  // let result = [
  MakeList     r235, 1, r184
  // json(result)
  JSON         r235
  // expect result == [
  Const        r236, [{"complete_violent_movie": "Violent Horror", "movie_budget": "Horror", "movie_votes": 2000, "writer": "John Writer"}]
  Equal        r237, r235, r236
  Expect       r237
  Return       r0
