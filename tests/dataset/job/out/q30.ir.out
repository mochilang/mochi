func main (regs=517)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "crew"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 3}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(writer)", "person_id": 10}, {"movie_id": 2, "note": "(actor)", "person_id": 11}]
  // let info_type = [
  Const        r3, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r6, [{"info": 2000, "info_type_id": 2, "movie_id": 1}, {"info": 150, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r8, [{"gender": "m", "id": 10, "name": "John Writer"}, {"gender": "f", "id": 11, "name": "Jane Actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2005, "title": "Violent Horror"}, {"id": 2, "production_year": 1995, "title": "Old Comedy"}]
  // let violent_keywords = [
  Const        r10, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  // let writer_notes = [
  Const        r11, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // from cc in complete_cast
  Const        r12, []
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r13, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r14, "kind"
  // (ci.note in writer_notes) &&
  Const        r15, "note"
  // it1.info == "genres" &&
  Const        r16, "info"
  // it2.info == "votes" &&
  Const        r17, "info"
  // (k.keyword in violent_keywords) &&
  Const        r18, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r19, "info"
  // n.gender == "m" &&
  Const        r20, "gender"
  // t.production_year > 2000
  Const        r21, "production_year"
  // budget: mi.info,
  Const        r22, "budget"
  Const        r23, "info"
  // votes: mi_idx.info,
  Const        r24, "votes"
  Const        r25, "info"
  // writer: n.name,
  Const        r26, "writer"
  Const        r27, "name"
  // movie: t.title
  Const        r28, "movie"
  Const        r29, "title"
  // from cc in complete_cast
  IterPrep     r30, r1
  Len          r31, r30
  Const        r33, 0
  Move         r32, r33
L25:
  LessInt      r34, r32, r31
  JumpIfFalse  r34, L0
  Index        r35, r30, r32
  Move         r36, r35
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r37, r0
  Len          r38, r37
  Const        r39, "id"
  Const        r40, "subject_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r41, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r42, "kind"
  // (ci.note in writer_notes) &&
  Const        r43, "note"
  // it1.info == "genres" &&
  Const        r44, "info"
  // it2.info == "votes" &&
  Const        r45, "info"
  // (k.keyword in violent_keywords) &&
  Const        r46, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r47, "info"
  // n.gender == "m" &&
  Const        r48, "gender"
  // t.production_year > 2000
  Const        r49, "production_year"
  // budget: mi.info,
  Const        r50, "budget"
  Const        r51, "info"
  // votes: mi_idx.info,
  Const        r52, "votes"
  Const        r53, "info"
  // writer: n.name,
  Const        r54, "writer"
  Const        r55, "name"
  // movie: t.title
  Const        r56, "movie"
  Const        r57, "title"
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r59, 0
  Move         r58, r59
L24:
  LessInt      r60, r58, r38
  JumpIfFalse  r60, L1
  Index        r61, r37, r58
  Move         r62, r61
  Const        r63, "id"
  Index        r64, r62, r63
  Const        r65, "subject_id"
  Index        r66, r36, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r68, r0
  Len          r69, r68
  Const        r70, "id"
  Const        r71, "status_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r72, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r73, "kind"
  // (ci.note in writer_notes) &&
  Const        r74, "note"
  // it1.info == "genres" &&
  Const        r75, "info"
  // it2.info == "votes" &&
  Const        r76, "info"
  // (k.keyword in violent_keywords) &&
  Const        r77, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r78, "info"
  // n.gender == "m" &&
  Const        r79, "gender"
  // t.production_year > 2000
  Const        r80, "production_year"
  // budget: mi.info,
  Const        r81, "budget"
  Const        r82, "info"
  // votes: mi_idx.info,
  Const        r83, "votes"
  Const        r84, "info"
  // writer: n.name,
  Const        r85, "writer"
  Const        r86, "name"
  // movie: t.title
  Const        r87, "movie"
  Const        r88, "title"
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r90, 0
  Move         r89, r90
L23:
  LessInt      r91, r89, r69
  JumpIfFalse  r91, L2
  Index        r92, r68, r89
  Move         r93, r92
  Const        r94, "id"
  Index        r95, r93, r94
  Const        r96, "status_id"
  Index        r97, r36, r96
  Equal        r98, r95, r97
  JumpIfFalse  r98, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r99, r2
  Len          r100, r99
  Const        r101, "movie_id"
  Const        r102, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r103, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r104, "kind"
  // (ci.note in writer_notes) &&
  Const        r105, "note"
  // it1.info == "genres" &&
  Const        r106, "info"
  // it2.info == "votes" &&
  Const        r107, "info"
  // (k.keyword in violent_keywords) &&
  Const        r108, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r109, "info"
  // n.gender == "m" &&
  Const        r110, "gender"
  // t.production_year > 2000
  Const        r111, "production_year"
  // budget: mi.info,
  Const        r112, "budget"
  Const        r113, "info"
  // votes: mi_idx.info,
  Const        r114, "votes"
  Const        r115, "info"
  // writer: n.name,
  Const        r116, "writer"
  Const        r117, "name"
  // movie: t.title
  Const        r118, "movie"
  Const        r119, "title"
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Const        r121, 0
  Move         r120, r121
L22:
  LessInt      r122, r120, r100
  JumpIfFalse  r122, L3
  Index        r123, r99, r120
  Move         r124, r123
  Const        r125, "movie_id"
  Index        r126, r124, r125
  Const        r127, "movie_id"
  Index        r128, r36, r127
  Equal        r129, r126, r128
  JumpIfFalse  r129, L4
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r130, r5
  Len          r131, r130
  Const        r132, "movie_id"
  Const        r133, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r134, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r135, "kind"
  // (ci.note in writer_notes) &&
  Const        r136, "note"
  // it1.info == "genres" &&
  Const        r137, "info"
  // it2.info == "votes" &&
  Const        r138, "info"
  // (k.keyword in violent_keywords) &&
  Const        r139, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r140, "info"
  // n.gender == "m" &&
  Const        r141, "gender"
  // t.production_year > 2000
  Const        r142, "production_year"
  // budget: mi.info,
  Const        r143, "budget"
  Const        r144, "info"
  // votes: mi_idx.info,
  Const        r145, "votes"
  Const        r146, "info"
  // writer: n.name,
  Const        r147, "writer"
  Const        r148, "name"
  // movie: t.title
  Const        r149, "movie"
  Const        r150, "title"
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r152, 0
  Move         r151, r152
L21:
  LessInt      r153, r151, r131
  JumpIfFalse  r153, L4
  Index        r154, r130, r151
  Move         r155, r154
  Const        r156, "movie_id"
  Index        r157, r155, r156
  Const        r158, "movie_id"
  Index        r159, r36, r158
  Equal        r160, r157, r159
  JumpIfFalse  r160, L5
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r161, r6
  Len          r162, r161
  Const        r163, "movie_id"
  Const        r164, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r165, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r166, "kind"
  // (ci.note in writer_notes) &&
  Const        r167, "note"
  // it1.info == "genres" &&
  Const        r168, "info"
  // it2.info == "votes" &&
  Const        r169, "info"
  // (k.keyword in violent_keywords) &&
  Const        r170, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r171, "info"
  // n.gender == "m" &&
  Const        r172, "gender"
  // t.production_year > 2000
  Const        r173, "production_year"
  // budget: mi.info,
  Const        r174, "budget"
  Const        r175, "info"
  // votes: mi_idx.info,
  Const        r176, "votes"
  Const        r177, "info"
  // writer: n.name,
  Const        r178, "writer"
  Const        r179, "name"
  // movie: t.title
  Const        r180, "movie"
  Const        r181, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r183, 0
  Move         r182, r183
L20:
  LessInt      r184, r182, r162
  JumpIfFalse  r184, L5
  Index        r185, r161, r182
  Move         r186, r185
  Const        r187, "movie_id"
  Index        r188, r186, r187
  Const        r189, "movie_id"
  Index        r190, r36, r189
  Equal        r191, r188, r190
  JumpIfFalse  r191, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r192, r7
  Len          r193, r192
  Const        r194, "movie_id"
  Const        r195, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r196, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r197, "kind"
  // (ci.note in writer_notes) &&
  Const        r198, "note"
  // it1.info == "genres" &&
  Const        r199, "info"
  // it2.info == "votes" &&
  Const        r200, "info"
  // (k.keyword in violent_keywords) &&
  Const        r201, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r202, "info"
  // n.gender == "m" &&
  Const        r203, "gender"
  // t.production_year > 2000
  Const        r204, "production_year"
  // budget: mi.info,
  Const        r205, "budget"
  Const        r206, "info"
  // votes: mi_idx.info,
  Const        r207, "votes"
  Const        r208, "info"
  // writer: n.name,
  Const        r209, "writer"
  Const        r210, "name"
  // movie: t.title
  Const        r211, "movie"
  Const        r212, "title"
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r214, 0
  Move         r213, r214
L19:
  LessInt      r215, r213, r193
  JumpIfFalse  r215, L6
  Index        r216, r192, r213
  Move         r217, r216
  Const        r218, "movie_id"
  Index        r219, r217, r218
  Const        r220, "movie_id"
  Index        r221, r36, r220
  Equal        r222, r219, r221
  JumpIfFalse  r222, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r223, r3
  Len          r224, r223
  Const        r225, "id"
  Const        r226, "info_type_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r227, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r228, "kind"
  // (ci.note in writer_notes) &&
  Const        r229, "note"
  // it1.info == "genres" &&
  Const        r230, "info"
  // it2.info == "votes" &&
  Const        r231, "info"
  // (k.keyword in violent_keywords) &&
  Const        r232, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r233, "info"
  // n.gender == "m" &&
  Const        r234, "gender"
  // t.production_year > 2000
  Const        r235, "production_year"
  // budget: mi.info,
  Const        r236, "budget"
  Const        r237, "info"
  // votes: mi_idx.info,
  Const        r238, "votes"
  Const        r239, "info"
  // writer: n.name,
  Const        r240, "writer"
  Const        r241, "name"
  // movie: t.title
  Const        r242, "movie"
  Const        r243, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r245, 0
  Move         r244, r245
L18:
  LessInt      r246, r244, r224
  JumpIfFalse  r246, L7
  Index        r247, r223, r244
  Move         r248, r247
  Const        r249, "id"
  Index        r250, r248, r249
  Const        r251, "info_type_id"
  Index        r252, r155, r251
  Equal        r253, r250, r252
  JumpIfFalse  r253, L8
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r254, r3
  Len          r255, r254
  Const        r256, "id"
  Const        r257, "info_type_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r258, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r259, "kind"
  // (ci.note in writer_notes) &&
  Const        r260, "note"
  // it1.info == "genres" &&
  Const        r261, "info"
  // it2.info == "votes" &&
  Const        r262, "info"
  // (k.keyword in violent_keywords) &&
  Const        r263, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r264, "info"
  // n.gender == "m" &&
  Const        r265, "gender"
  // t.production_year > 2000
  Const        r266, "production_year"
  // budget: mi.info,
  Const        r267, "budget"
  Const        r268, "info"
  // votes: mi_idx.info,
  Const        r269, "votes"
  Const        r270, "info"
  // writer: n.name,
  Const        r271, "writer"
  Const        r272, "name"
  // movie: t.title
  Const        r273, "movie"
  Const        r274, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r276, 0
  Move         r275, r276
L17:
  LessInt      r277, r275, r255
  JumpIfFalse  r277, L8
  Index        r278, r254, r275
  Move         r279, r278
  Const        r280, "id"
  Index        r281, r279, r280
  Const        r282, "info_type_id"
  Index        r283, r186, r282
  Equal        r284, r281, r283
  JumpIfFalse  r284, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r285, r4
  Len          r286, r285
  Const        r287, "id"
  Const        r288, "keyword_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r289, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r290, "kind"
  // (ci.note in writer_notes) &&
  Const        r291, "note"
  // it1.info == "genres" &&
  Const        r292, "info"
  // it2.info == "votes" &&
  Const        r293, "info"
  // (k.keyword in violent_keywords) &&
  Const        r294, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r295, "info"
  // n.gender == "m" &&
  Const        r296, "gender"
  // t.production_year > 2000
  Const        r297, "production_year"
  // budget: mi.info,
  Const        r298, "budget"
  Const        r299, "info"
  // votes: mi_idx.info,
  Const        r300, "votes"
  Const        r301, "info"
  // writer: n.name,
  Const        r302, "writer"
  Const        r303, "name"
  // movie: t.title
  Const        r304, "movie"
  Const        r305, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r307, 0
  Move         r306, r307
L16:
  LessInt      r308, r306, r286
  JumpIfFalse  r308, L9
  Index        r309, r285, r306
  Move         r310, r309
  Const        r311, "id"
  Index        r312, r310, r311
  Const        r313, "keyword_id"
  Index        r314, r217, r313
  Equal        r315, r312, r314
  JumpIfFalse  r315, L10
  // join n in name on n.id == ci.person_id
  IterPrep     r316, r8
  Len          r317, r316
  Const        r318, "id"
  Const        r319, "person_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r320, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r321, "kind"
  // (ci.note in writer_notes) &&
  Const        r322, "note"
  // it1.info == "genres" &&
  Const        r323, "info"
  // it2.info == "votes" &&
  Const        r324, "info"
  // (k.keyword in violent_keywords) &&
  Const        r325, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r326, "info"
  // n.gender == "m" &&
  Const        r327, "gender"
  // t.production_year > 2000
  Const        r328, "production_year"
  // budget: mi.info,
  Const        r329, "budget"
  Const        r330, "info"
  // votes: mi_idx.info,
  Const        r331, "votes"
  Const        r332, "info"
  // writer: n.name,
  Const        r333, "writer"
  Const        r334, "name"
  // movie: t.title
  Const        r335, "movie"
  Const        r336, "title"
  // join n in name on n.id == ci.person_id
  Const        r338, 0
  Move         r337, r338
L15:
  LessInt      r339, r337, r317
  JumpIfFalse  r339, L10
  Index        r340, r316, r337
  Move         r341, r340
  Const        r342, "id"
  Index        r343, r341, r342
  Const        r344, "person_id"
  Index        r345, r124, r344
  Equal        r346, r343, r345
  JumpIfFalse  r346, L11
  // join t in title on t.id == cc.movie_id
  IterPrep     r347, r9
  Len          r348, r347
  Const        r349, "id"
  Const        r350, "movie_id"
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r351, "kind"
  // cct2.kind == "complete+verified" &&
  Const        r352, "kind"
  // (ci.note in writer_notes) &&
  Const        r353, "note"
  // it1.info == "genres" &&
  Const        r354, "info"
  // it2.info == "votes" &&
  Const        r355, "info"
  // (k.keyword in violent_keywords) &&
  Const        r356, "keyword"
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r357, "info"
  // n.gender == "m" &&
  Const        r358, "gender"
  // t.production_year > 2000
  Const        r359, "production_year"
  // budget: mi.info,
  Const        r360, "budget"
  Const        r361, "info"
  // votes: mi_idx.info,
  Const        r362, "votes"
  Const        r363, "info"
  // writer: n.name,
  Const        r364, "writer"
  Const        r365, "name"
  // movie: t.title
  Const        r366, "movie"
  Const        r367, "title"
  // join t in title on t.id == cc.movie_id
  Const        r369, 0
  Move         r368, r369
L14:
  LessInt      r370, r368, r348
  JumpIfFalse  r370, L11
  Index        r371, r347, r368
  Move         r372, r371
  Const        r373, "id"
  Index        r374, r372, r373
  Const        r375, "movie_id"
  Index        r376, r36, r375
  Equal        r377, r374, r376
  JumpIfFalse  r377, L12
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r378, "kind"
  Index        r379, r62, r378
  Const        r380, ["cast", "crew"]
  In           r381, r379, r380
  // t.production_year > 2000
  Const        r382, "production_year"
  Index        r383, r372, r382
  Const        r384, 2000
  Less         r385, r384, r383
  // cct2.kind == "complete+verified" &&
  Const        r386, "kind"
  Index        r387, r93, r386
  Const        r388, "complete+verified"
  Equal        r389, r387, r388
  // it1.info == "genres" &&
  Const        r390, "info"
  Index        r391, r248, r390
  Const        r392, "genres"
  Equal        r393, r391, r392
  // it2.info == "votes" &&
  Const        r394, "info"
  Index        r395, r279, r394
  Const        r396, "votes"
  Equal        r397, r395, r396
  // n.gender == "m" &&
  Const        r398, "gender"
  Index        r399, r341, r398
  Const        r400, "m"
  Equal        r401, r399, r400
  // where (cct1.kind in ["cast", "crew"]) &&
  Move         r402, r381
  JumpIfFalse  r402, L13
  Move         r402, r389
  // cct2.kind == "complete+verified" &&
  JumpIfFalse  r402, L13
  // (ci.note in writer_notes) &&
  Const        r403, "note"
  Index        r404, r124, r403
  In           r405, r404, r11
  // cct2.kind == "complete+verified" &&
  Move         r402, r405
  // (ci.note in writer_notes) &&
  JumpIfFalse  r402, L13
  Move         r402, r393
  // it1.info == "genres" &&
  JumpIfFalse  r402, L13
  Move         r402, r397
  // it2.info == "votes" &&
  JumpIfFalse  r402, L13
  // (k.keyword in violent_keywords) &&
  Const        r406, "keyword"
  Index        r407, r310, r406
  In           r408, r407, r10
  // it2.info == "votes" &&
  Move         r402, r408
  // (k.keyword in violent_keywords) &&
  JumpIfFalse  r402, L13
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r409, "info"
  Index        r410, r155, r409
  Const        r411, ["Horror", "Thriller"]
  In           r412, r410, r411
  // (k.keyword in violent_keywords) &&
  Move         r402, r412
  // (mi.info in ["Horror", "Thriller"]) &&
  JumpIfFalse  r402, L13
  Move         r402, r401
  // n.gender == "m" &&
  JumpIfFalse  r402, L13
  Move         r402, r385
L13:
  // where (cct1.kind in ["cast", "crew"]) &&
  JumpIfFalse  r402, L12
  // budget: mi.info,
  Const        r413, "budget"
  Const        r414, "info"
  Index        r415, r155, r414
  // votes: mi_idx.info,
  Const        r416, "votes"
  Const        r417, "info"
  Index        r418, r186, r417
  // writer: n.name,
  Const        r419, "writer"
  Const        r420, "name"
  Index        r421, r341, r420
  // movie: t.title
  Const        r422, "movie"
  Const        r423, "title"
  Index        r424, r372, r423
  // budget: mi.info,
  Move         r425, r413
  Move         r426, r415
  // votes: mi_idx.info,
  Move         r427, r416
  Move         r428, r418
  // writer: n.name,
  Move         r429, r419
  Move         r430, r421
  // movie: t.title
  Move         r431, r422
  Move         r432, r424
  // select {
  MakeMap      r433, 4, r425
  // from cc in complete_cast
  Append       r434, r12, r433
  Move         r12, r434
L12:
  // join t in title on t.id == cc.movie_id
  Const        r435, 1
  Add          r368, r368, r435
  Jump         L14
L11:
  // join n in name on n.id == ci.person_id
  Const        r436, 1
  Add          r337, r337, r436
  Jump         L15
L10:
  // join k in keyword on k.id == mk.keyword_id
  Const        r437, 1
  Add          r306, r306, r437
  Jump         L16
L9:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r438, 1
  Add          r275, r275, r438
  Jump         L17
L8:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r439, 1
  Add          r244, r244, r439
  Jump         L18
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r440, 1
  Add          r213, r213, r440
  Jump         L19
L6:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r441, 1
  Add          r182, r182, r441
  Jump         L20
L5:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r442, 1
  Add          r151, r151, r442
  Jump         L21
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Const        r443, 1
  Add          r120, r120, r443
  Jump         L22
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r444, 1
  Add          r89, r89, r444
  Jump         L23
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r445, 1
  Add          r58, r58, r445
  Jump         L24
L1:
  // from cc in complete_cast
  Const        r446, 1
  AddInt       r32, r32, r446
  Jump         L25
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r447, "movie_budget"
  Const        r448, []
  Const        r449, "budget"
  IterPrep     r450, r12
  Len          r451, r450
  Const        r453, 0
  Move         r452, r453
L27:
  LessInt      r454, r452, r451
  JumpIfFalse  r454, L26
  Index        r455, r450, r452
  Move         r456, r455
  Const        r457, "budget"
  Index        r458, r456, r457
  Append       r459, r448, r458
  Move         r448, r459
  Const        r460, 1
  AddInt       r452, r452, r460
  Jump         L27
L26:
  Min          r461, r448
  // movie_votes: min(from x in matches select x.votes),
  Const        r462, "movie_votes"
  Const        r463, []
  Const        r464, "votes"
  IterPrep     r465, r12
  Len          r466, r465
  Const        r468, 0
  Move         r467, r468
L29:
  LessInt      r469, r467, r466
  JumpIfFalse  r469, L28
  Index        r470, r465, r467
  Move         r456, r470
  Const        r471, "votes"
  Index        r472, r456, r471
  Append       r473, r463, r472
  Move         r463, r473
  Const        r474, 1
  AddInt       r467, r467, r474
  Jump         L29
L28:
  Min          r475, r463
  // writer: min(from x in matches select x.writer),
  Const        r476, "writer"
  Const        r477, []
  Const        r478, "writer"
  IterPrep     r479, r12
  Len          r480, r479
  Const        r482, 0
  Move         r481, r482
L31:
  LessInt      r483, r481, r480
  JumpIfFalse  r483, L30
  Index        r484, r479, r481
  Move         r456, r484
  Const        r485, "writer"
  Index        r486, r456, r485
  Append       r487, r477, r486
  Move         r477, r487
  Const        r488, 1
  AddInt       r481, r481, r488
  Jump         L31
L30:
  Min          r489, r477
  // complete_violent_movie: min(from x in matches select x.movie)
  Const        r490, "complete_violent_movie"
  Const        r491, []
  Const        r492, "movie"
  IterPrep     r493, r12
  Len          r494, r493
  Const        r496, 0
  Move         r495, r496
L33:
  LessInt      r497, r495, r494
  JumpIfFalse  r497, L32
  Index        r498, r493, r495
  Move         r456, r498
  Const        r499, "movie"
  Index        r500, r456, r499
  Append       r501, r491, r500
  Move         r491, r501
  Const        r502, 1
  AddInt       r495, r495, r502
  Jump         L33
L32:
  Min          r503, r491
  // movie_budget: min(from x in matches select x.budget),
  Move         r504, r447
  Move         r505, r461
  // movie_votes: min(from x in matches select x.votes),
  Move         r506, r462
  Move         r507, r475
  // writer: min(from x in matches select x.writer),
  Move         r508, r476
  Move         r509, r489
  // complete_violent_movie: min(from x in matches select x.movie)
  Move         r510, r490
  Move         r511, r503
  // {
  MakeMap      r512, 4, r504
  Move         r513, r512
  // let result = [
  MakeList     r514, 1, r513
  // json(result)
  JSON         r514
  // expect result == [
  Const        r515, [{"complete_violent_movie": "Violent Horror", "movie_budget": "Horror", "movie_votes": 2000, "writer": "John Writer"}]
  Equal        r516, r514, r515
  Expect       r516
  Return       r0
