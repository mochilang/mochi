func main (regs=67)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "crew"}]
L20:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 3}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(writer)", "person_id": 10}, {"movie_id": 2, "note": "(actor)", "person_id": 11}]
  // let info_type = [
  Const        r3, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
L6:
  // let movie_info_idx = [
  Const        r6, [{"info": 2000, "info_type_id": 2, "movie_id": 1}, {"info": 150, "info_type_id": 2, "movie_id": 2}]
L17:
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r8, [{"gender": "m", "id": 10, "name": "John Writer"}, {"gender": "f", "id": 11, "name": "Jane Actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2005, "title": "Violent Horror"}, {"id": 2, "production_year": 1995, "title": "Old Comedy"}]
  // let violent_keywords = [
  Const        r10, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  // let writer_notes = [
  Const        r10, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // from cc in complete_cast
  Const        r10, []
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r11, "kind"
  // (ci.note in writer_notes) &&
  Const        r12, "note"
  // it1.info == "genres" &&
  Const        r13, "info"
  // (k.keyword in violent_keywords) &&
  Const        r14, "keyword"
  // n.gender == "m" &&
  Const        r15, "gender"
  // t.production_year > 2000
  Const        r16, "production_year"
  // budget: mi.info,
  Const        r17, "budget"
  // votes: mi_idx.info,
  Const        r18, "votes"
  // writer: n.name,
  Const        r19, "writer"
  Const        r20, "name"
  // movie: t.title
  Const        r21, "movie"
  Const        r22, "title"
  // from cc in complete_cast
  IterPrep     r23, r1
L22:
  Len          r1, r23
L21:
  Const        r24, 0
  Move         r25, r24
L18:
  LessInt      r26, r25, r1
  JumpIfFalse  r26, L0
L15:
  Index        r1, r23, r25
  Move         r23, r1
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r1, r0
L14:
  Len          r27, r1
  Const        r28, "id"
  Const        r29, "subject_id"
L19:
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
L16:
  Index        r27, r1, r30
  Move         r31, r27
L8:
  Index        r1, r31, r28
  Index        r32, r23, r29
L12:
  Equal        r29, r1, r32
  JumpIfFalse  r29, L2
L7:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r1, r0
  Len          r32, r1
  Const        r29, "status_id"
  Move         r33, r24
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r32, r1, r33
  Move         r34, r32
L13:
  Index        r1, r34, r28
  Index        r32, r23, r29
  Equal        r29, r1, r32
  JumpIfFalse  r29, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r32, r2
  Len          r29, r32
  Const        r2, "movie_id"
L11:
  Move         r35, r24
  LessInt      r36, r35, r29
L10:
  JumpIfFalse  r36, L3
  Index        r29, r32, r35
L9:
  Move         r36, r29
  Index        r32, r36, r2
  Index        r29, r23, r2
  Equal        r37, r32, r29
  JumpIfFalse  r37, L4
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r32, r5
  Len          r29, r32
  Move         r5, r24
  LessInt      r38, r5, r29
  JumpIfFalse  r38, L4
  Index        r29, r32, r5
  Move         r38, r29
  Index        r32, r38, r2
  Index        r29, r23, r2
  Equal        r39, r32, r29
  JumpIfFalse  r39, L5
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r32, r6
  Len          r29, r32
  Move         r39, r24
  LessInt      r6, r39, r29
  JumpIfFalse  r6, L5
  Index        r6, r32, r39
  Move         r32, r6
  Index        r6, r32, r2
  Index        r40, r23, r2
  Equal        r41, r6, r40
  JumpIfFalse  r41, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r6, r7
  Len          r40, r6
  Move         r41, r24
  LessInt      r7, r41, r40
  JumpIfFalse  r7, L6
  Index        r40, r6, r41
  Move         r6, r40
  Index        r40, r6, r2
  Index        r42, r23, r2
  Equal        r43, r40, r42
  JumpIfFalse  r43, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r40, r3
  Len          r42, r40
  Const        r43, "info_type_id"
  Move         r44, r24
  LessInt      r45, r44, r42
  JumpIfFalse  r45, L7
  Index        r42, r40, r44
  Move         r45, r42
  Index        r40, r45, r28
  Index        r46, r38, r43
  Equal        r47, r40, r46
  JumpIfFalse  r47, L8
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r40, r3
  Len          r46, r40
  Move         r47, r24
  LessInt      r3, r47, r46
  JumpIfFalse  r3, L8
  Index        r46, r40, r47
  Move         r3, r46
  Index        r40, r3, r28
  Index        r46, r32, r43
  Equal        r43, r40, r46
  JumpIfFalse  r43, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r40, r4
  Len          r43, r40
  Const        r4, "keyword_id"
  Move         r48, r24
  LessInt      r49, r48, r43
  JumpIfFalse  r49, L9
  Index        r43, r40, r48
  Move         r49, r43
  Index        r40, r49, r28
  Index        r43, r6, r4
  Equal        r6, r40, r43
  JumpIfFalse  r6, L10
  // join n in name on n.id == ci.person_id
  IterPrep     r4, r8
  Len          r40, r4
  Const        r43, "person_id"
  Move         r8, r24
  LessInt      r50, r8, r40
  JumpIfFalse  r50, L10
  Index        r40, r4, r8
  Move         r50, r40
  Index        r4, r50, r28
  Index        r40, r36, r43
  Equal        r43, r4, r40
  JumpIfFalse  r43, L11
  // join t in title on t.id == cc.movie_id
  IterPrep     r4, r9
  Len          r40, r4
  Move         r43, r24
  LessInt      r9, r43, r40
  JumpIfFalse  r9, L11
  Index        r9, r4, r43
  Move         r4, r9
  Index        r9, r4, r28
  Index        r28, r23, r2
  Equal        r23, r9, r28
  JumpIfFalse  r23, L12
  // where (cct1.kind in ["cast", "crew"]) &&
  Index        r2, r31, r11
  Const        r9, ["cast", "crew"]
  In           r28, r2, r9
  // t.production_year > 2000
  Index        r23, r4, r16
  Const        r31, 2000
  Less         r2, r31, r23
  // cct2.kind == "complete+verified" &&
  Index        r9, r34, r11
  Const        r16, "complete+verified"
  Equal        r23, r9, r16
  // it1.info == "genres" &&
  Index        r11, r45, r13
  Const        r34, "genres"
  Equal        r9, r11, r34
  // it2.info == "votes" &&
  Index        r16, r3, r13
  Equal        r45, r16, r18
  // n.gender == "m" &&
  Index        r11, r50, r15
  Const        r34, "m"
  Equal        r3, r11, r34
  // where (cct1.kind in ["cast", "crew"]) &&
  Move         r16, r28
  JumpIfFalse  r16, L13
  Move         r16, r23
  // cct2.kind == "complete+verified" &&
  JumpIfFalse  r16, L13
  // (ci.note in writer_notes) &&
  Index        r15, r36, r12
  Const        r11, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r28, r15, r11
  // cct2.kind == "complete+verified" &&
  Move         r16, r28
  // (ci.note in writer_notes) &&
  JumpIfFalse  r16, L13
  Move         r16, r9
  // it1.info == "genres" &&
  JumpIfFalse  r16, L13
  Move         r16, r45
  // it2.info == "votes" &&
  JumpIfFalse  r16, L13
  // (k.keyword in violent_keywords) &&
  Index        r23, r49, r14
  Const        r12, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  In           r36, r23, r12
  // it2.info == "votes" &&
  Move         r16, r36
  // (k.keyword in violent_keywords) &&
  JumpIfFalse  r16, L13
  // (mi.info in ["Horror", "Thriller"]) &&
  Index        r9, r38, r13
  Const        r45, ["Horror", "Thriller"]
  In           r15, r9, r45
  // (k.keyword in violent_keywords) &&
  Move         r16, r15
  // (mi.info in ["Horror", "Thriller"]) &&
  JumpIfFalse  r16, L13
  Move         r16, r3
  // n.gender == "m" &&
  JumpIfFalse  r16, L13
  Move         r16, r2
  // where (cct1.kind in ["cast", "crew"]) &&
  JumpIfFalse  r16, L12
  // budget: mi.info,
  Const        r11, "budget"
  Index        r28, r38, r13
  // votes: mi_idx.info,
  Const        r14, "votes"
  Index        r49, r32, r13
  // writer: n.name,
  Const        r23, "writer"
  Index        r12, r50, r20
  // movie: t.title
  Const        r36, "movie"
  Index        r2, r4, r22
  // budget: mi.info,
  Move         r51, r11
  Move         r52, r28
  // votes: mi_idx.info,
  Move         r53, r14
  Move         r54, r49
  // writer: n.name,
  Move         r55, r23
  Move         r56, r12
  // movie: t.title
  Move         r57, r36
  Move         r58, r2
  // select {
  MakeMap      r3, 4, r51
  // from cc in complete_cast
  Append       r16, r10, r3
  Move         r10, r16
  // join t in title on t.id == cc.movie_id
  Const        r9, 1
  Add          r43, r43, r9
  Jump         L14
  // join n in name on n.id == ci.person_id
  Add          r8, r8, r9
  Jump         L15
  // join k in keyword on k.id == mk.keyword_id
  Add          r48, r48, r9
  Jump         L16
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r47, r47, r9
  Jump         L6
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r44, r44, r9
  Jump         L7
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r41, r41, r9
  Jump         L8
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Add          r39, r39, r9
  Jump         L17
L5:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Add          r5, r5, r9
  Jump         L18
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r35, r35, r9
  Jump         L19
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r33, r33, r9
  Jump         L20
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r30, r30, r9
  Jump         L21
L1:
  // from cc in complete_cast
  AddInt       r25, r25, r9
  Jump         L22
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r45, "movie_budget"
  Const        r15, []
  IterPrep     r38, r10
  Len          r13, r38
  Move         r32, r24
L24:
  LessInt      r20, r32, r13
  JumpIfFalse  r20, L23
  Index        r50, r38, r32
  Move         r22, r50
  Index        r4, r22, r17
  Append       r11, r15, r4
  Move         r15, r11
  AddInt       r32, r32, r9
  Jump         L24
L23:
  Min          r28, r15
  // movie_votes: min(from x in matches select x.votes),
  Const        r14, "movie_votes"
  Const        r49, []
  IterPrep     r23, r10
  Len          r12, r23
  Move         r36, r24
L26:
  LessInt      r2, r36, r12
  JumpIfFalse  r2, L25
  Index        r51, r23, r36
  Move         r22, r51
  Index        r52, r22, r18
  Append       r53, r49, r52
  Move         r49, r53
  AddInt       r36, r36, r9
  Jump         L26
L25:
  Min          r54, r49
  // writer: min(from x in matches select x.writer),
  Const        r55, "writer"
  Const        r56, []
  IterPrep     r57, r10
  Len          r58, r57
  Move         r3, r24
L28:
  LessInt      r16, r3, r58
  JumpIfFalse  r16, L27
  Index        r25, r57, r3
  Move         r22, r25
  Index        r26, r22, r19
  Append       r30, r56, r26
  Move         r56, r30
  AddInt       r3, r3, r9
  Jump         L28
L27:
  Min          r27, r56
  // complete_violent_movie: min(from x in matches select x.movie)
  Const        r33, "complete_violent_movie"
  Const        r1, []
  IterPrep     r35, r10
  Len          r37, r35
  Move         r5, r24
L30:
  LessInt      r29, r5, r37
  JumpIfFalse  r29, L29
  Index        r39, r35, r5
  Move         r22, r39
  Index        r41, r22, r21
  Append       r7, r1, r41
  Move         r1, r7
  AddInt       r5, r5, r9
  Jump         L30
L29:
  Min          r44, r1
  // movie_budget: min(from x in matches select x.budget),
  Move         r59, r45
  Move         r60, r28
  // movie_votes: min(from x in matches select x.votes),
  Move         r61, r14
  Move         r62, r54
  // writer: min(from x in matches select x.writer),
  Move         r63, r55
  Move         r64, r27
  // complete_violent_movie: min(from x in matches select x.movie)
  Move         r65, r33
  Move         r66, r44
  // {
  MakeMap      r42, 4, r59
  Move         r47, r42
  // let result = [
  MakeList     r46, 1, r47
  // json(result)
  JSON         r46
  // expect result == [
  Const        r48, [{"complete_violent_movie": "Violent Horror", "movie_budget": "Horror", "movie_votes": 2000, "writer": "John Writer"}]
  Equal        r6, r46, r48
  Expect       r6
  Return       r0
