func main (regs=308)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "crew"}]
  Move         r1, r0
  // let complete_cast = [
  Const        r2, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 3}]
  Move         r3, r2
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "note": "(writer)", "person_id": 10}, {"movie_id": 2, "note": "(actor)", "person_id": 11}]
  Move         r5, r4
  // let info_type = [
  Const        r6, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  Move         r7, r6
  // let keyword = [
  Const        r8, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  Move         r9, r8
  // let movie_info = [
  Const        r10, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  Move         r11, r10
  // let movie_info_idx = [
  Const        r12, [{"info": 2000, "info_type_id": 2, "movie_id": 1}, {"info": 150, "info_type_id": 2, "movie_id": 2}]
  Move         r13, r12
  // let movie_keyword = [
  Const        r14, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  Move         r15, r14
  // let name = [
  Const        r16, [{"gender": "m", "id": 10, "name": "John Writer"}, {"gender": "f", "id": 11, "name": "Jane Actor"}]
  Move         r17, r16
  // let title = [
  Const        r18, [{"id": 1, "production_year": 2005, "title": "Violent Horror"}, {"id": 2, "production_year": 1995, "title": "Old Comedy"}]
  Move         r19, r18
  // let violent_keywords = [
  Const        r20, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  Move         r21, r20
  // let writer_notes = [
  Const        r22, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Move         r23, r22
  // from cc in complete_cast
  Const        r24, []
  IterPrep     r25, r3
  Len          r26, r25
  Const        r27, 0
L32:
  Less         r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, 0
L31:
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "id"
  Index        r38, r36, r37
  Const        r39, "subject_id"
  Index        r40, r30, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r42, r1
  Len          r43, r42
  Const        r44, 0
L30:
  Less         r45, r44, r43
  JumpIfFalse  r45, L2
  Index        r46, r42, r44
  Move         r47, r46
  Const        r48, "id"
  Index        r49, r47, r48
  Const        r50, "status_id"
  Index        r51, r30, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r53, r5
  Len          r54, r53
  Const        r55, 0
L29:
  Less         r56, r55, r54
  JumpIfFalse  r56, L3
  Index        r57, r53, r55
  Move         r58, r57
  Const        r59, "movie_id"
  Index        r60, r58, r59
  Const        r61, "movie_id"
  Index        r62, r30, r61
  Equal        r63, r60, r62
  JumpIfFalse  r63, L4
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r64, r11
  Len          r65, r64
  Const        r66, 0
L28:
  Less         r67, r66, r65
  JumpIfFalse  r67, L4
  Index        r68, r64, r66
  Move         r69, r68
  Const        r70, "movie_id"
  Index        r71, r69, r70
  Const        r72, "movie_id"
  Index        r73, r30, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L5
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r75, r13
  Len          r76, r75
  Const        r77, 0
L27:
  Less         r78, r77, r76
  JumpIfFalse  r78, L5
  Index        r79, r75, r77
  Move         r80, r79
  Const        r81, "movie_id"
  Index        r82, r80, r81
  Const        r83, "movie_id"
  Index        r84, r30, r83
  Equal        r85, r82, r84
  JumpIfFalse  r85, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r86, r15
  Len          r87, r86
  Const        r88, 0
L26:
  Less         r89, r88, r87
  JumpIfFalse  r89, L6
  Index        r90, r86, r88
  Move         r91, r90
  Const        r92, "movie_id"
  Index        r93, r91, r92
  Const        r94, "movie_id"
  Index        r95, r30, r94
  Equal        r96, r93, r95
  JumpIfFalse  r96, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r97, r7
  Len          r98, r97
  Const        r99, 0
L25:
  Less         r100, r99, r98
  JumpIfFalse  r100, L7
  Index        r101, r97, r99
  Move         r102, r101
  Const        r103, "id"
  Index        r104, r102, r103
  Const        r105, "info_type_id"
  Index        r106, r69, r105
  Equal        r107, r104, r106
  JumpIfFalse  r107, L8
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r108, r7
  Len          r109, r108
  Const        r110, 0
L24:
  Less         r111, r110, r109
  JumpIfFalse  r111, L8
  Index        r112, r108, r110
  Move         r113, r112
  Const        r114, "id"
  Index        r115, r113, r114
  Const        r116, "info_type_id"
  Index        r117, r80, r116
  Equal        r118, r115, r117
  JumpIfFalse  r118, L9
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r119, r9
  Len          r120, r119
  Const        r121, 0
L23:
  Less         r122, r121, r120
  JumpIfFalse  r122, L9
  Index        r123, r119, r121
  Move         r124, r123
  Const        r125, "id"
  Index        r126, r124, r125
  Const        r127, "keyword_id"
  Index        r128, r91, r127
  Equal        r129, r126, r128
  JumpIfFalse  r129, L10
  // join n in name on n.id == ci.person_id
  IterPrep     r130, r17
  Len          r131, r130
  Const        r132, 0
L22:
  Less         r133, r132, r131
  JumpIfFalse  r133, L10
  Index        r134, r130, r132
  Move         r135, r134
  Const        r136, "id"
  Index        r137, r135, r136
  Const        r138, "person_id"
  Index        r139, r58, r138
  Equal        r140, r137, r139
  JumpIfFalse  r140, L11
  // join t in title on t.id == cc.movie_id
  IterPrep     r141, r19
  Len          r142, r141
  Const        r143, 0
L21:
  Less         r144, r143, r142
  JumpIfFalse  r144, L11
  Index        r145, r141, r143
  Move         r146, r145
  Const        r147, "id"
  Index        r148, r146, r147
  Const        r149, "movie_id"
  Index        r150, r30, r149
  Equal        r151, r148, r150
  JumpIfFalse  r151, L12
  // where (cct1.kind in ["cast", "crew"]) &&
  Const        r152, "kind"
  Index        r153, r36, r152
  Const        r154, ["cast", "crew"]
  In           r155, r153, r154
  // t.production_year > 2000
  Const        r156, "production_year"
  Index        r157, r146, r156
  Const        r158, 2000
  Less         r159, r158, r157
  // cct2.kind == "complete+verified" &&
  Const        r160, "kind"
  Index        r161, r47, r160
  Const        r162, "complete+verified"
  Equal        r163, r161, r162
  // it1.info == "genres" &&
  Const        r164, "info"
  Index        r165, r102, r164
  Const        r166, "genres"
  Equal        r167, r165, r166
  // it2.info == "votes" &&
  Const        r168, "info"
  Index        r169, r113, r168
  Const        r170, "votes"
  Equal        r171, r169, r170
  // n.gender == "m" &&
  Const        r172, "gender"
  Index        r173, r135, r172
  Const        r174, "m"
  Equal        r175, r173, r174
  // where (cct1.kind in ["cast", "crew"]) &&
  Move         r176, r155
  JumpIfFalse  r176, L13
  Move         r176, r163
L13:
  // cct2.kind == "complete+verified" &&
  Move         r177, r176
  JumpIfFalse  r177, L14
  // (ci.note in writer_notes) &&
  Const        r178, "note"
  Index        r179, r58, r178
  In           r180, r179, r23
  // cct2.kind == "complete+verified" &&
  Move         r177, r180
L14:
  // (ci.note in writer_notes) &&
  Move         r181, r177
  JumpIfFalse  r181, L15
  Move         r181, r167
L15:
  // it1.info == "genres" &&
  Move         r182, r181
  JumpIfFalse  r182, L16
  Move         r182, r171
L16:
  // it2.info == "votes" &&
  Move         r183, r182
  JumpIfFalse  r183, L17
  // (k.keyword in violent_keywords) &&
  Const        r184, "keyword"
  Index        r185, r124, r184
  In           r186, r185, r21
  // it2.info == "votes" &&
  Move         r183, r186
L17:
  // (k.keyword in violent_keywords) &&
  Move         r187, r183
  JumpIfFalse  r187, L18
  // (mi.info in ["Horror", "Thriller"]) &&
  Const        r188, "info"
  Index        r189, r69, r188
  Const        r190, ["Horror", "Thriller"]
  In           r191, r189, r190
  // (k.keyword in violent_keywords) &&
  Move         r187, r191
L18:
  // (mi.info in ["Horror", "Thriller"]) &&
  Move         r192, r187
  JumpIfFalse  r192, L19
  Move         r192, r175
L19:
  // n.gender == "m" &&
  Move         r193, r192
  JumpIfFalse  r193, L20
  Move         r193, r159
L20:
  // where (cct1.kind in ["cast", "crew"]) &&
  JumpIfFalse  r193, L12
  // budget: mi.info,
  Const        r194, "budget"
  Const        r195, "info"
  Index        r196, r69, r195
  // votes: mi_idx.info,
  Const        r197, "votes"
  Const        r198, "info"
  Index        r199, r80, r198
  // writer: n.name,
  Const        r200, "writer"
  Const        r201, "name"
  Index        r202, r135, r201
  // movie: t.title
  Const        r203, "movie"
  Const        r204, "title"
  Index        r205, r146, r204
  // budget: mi.info,
  Move         r206, r194
  Move         r207, r196
  // votes: mi_idx.info,
  Move         r208, r197
  Move         r209, r199
  // writer: n.name,
  Move         r210, r200
  Move         r211, r202
  // movie: t.title
  Move         r212, r203
  Move         r213, r205
  // select {
  MakeMap      r214, 4, r206
  // from cc in complete_cast
  Append       r215, r24, r214
  Move         r24, r215
L12:
  // join t in title on t.id == cc.movie_id
  Const        r216, 1
  Add          r217, r143, r216
  Move         r143, r217
  Jump         L21
L11:
  // join n in name on n.id == ci.person_id
  Const        r218, 1
  Add          r219, r132, r218
  Move         r132, r219
  Jump         L22
L10:
  // join k in keyword on k.id == mk.keyword_id
  Const        r220, 1
  Add          r221, r121, r220
  Move         r121, r221
  Jump         L23
L9:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r222, 1
  Add          r223, r110, r222
  Move         r110, r223
  Jump         L24
L8:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r224, 1
  Add          r225, r99, r224
  Move         r99, r225
  Jump         L25
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r226, 1
  Add          r227, r88, r226
  Move         r88, r227
  Jump         L26
L6:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r228, 1
  Add          r229, r77, r228
  Move         r77, r229
  Jump         L27
L5:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r230, 1
  Add          r231, r66, r230
  Move         r66, r231
  Jump         L28
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Const        r232, 1
  Add          r233, r55, r232
  Move         r55, r233
  Jump         L29
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r234, 1
  Add          r235, r44, r234
  Move         r44, r235
  Jump         L30
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r236, 1
  Add          r237, r33, r236
  Move         r33, r237
  Jump         L31
L1:
  // from cc in complete_cast
  Const        r238, 1
  Add          r239, r27, r238
  Move         r27, r239
  Jump         L32
L0:
  // let matches =
  Move         r240, r24
  // movie_budget: min(from x in matches select x.budget),
  Const        r241, "movie_budget"
  Const        r242, []
  IterPrep     r243, r240
  Len          r244, r243
  Const        r245, 0
L34:
  Less         r246, r245, r244
  JumpIfFalse  r246, L33
  Index        r247, r243, r245
  Move         r248, r247
  Const        r249, "budget"
  Index        r250, r248, r249
  Append       r251, r242, r250
  Move         r242, r251
  Const        r252, 1
  Add          r253, r245, r252
  Move         r245, r253
  Jump         L34
L33:
  Min          r254, r242
  // movie_votes: min(from x in matches select x.votes),
  Const        r255, "movie_votes"
  Const        r256, []
  IterPrep     r257, r240
  Len          r258, r257
  Const        r259, 0
L36:
  Less         r260, r259, r258
  JumpIfFalse  r260, L35
  Index        r261, r257, r259
  Move         r248, r261
  Const        r262, "votes"
  Index        r263, r248, r262
  Append       r264, r256, r263
  Move         r256, r264
  Const        r265, 1
  Add          r266, r259, r265
  Move         r259, r266
  Jump         L36
L35:
  Min          r267, r256
  // writer: min(from x in matches select x.writer),
  Const        r268, "writer"
  Const        r269, []
  IterPrep     r270, r240
  Len          r271, r270
  Const        r272, 0
L38:
  Less         r273, r272, r271
  JumpIfFalse  r273, L37
  Index        r274, r270, r272
  Move         r248, r274
  Const        r275, "writer"
  Index        r276, r248, r275
  Append       r277, r269, r276
  Move         r269, r277
  Const        r278, 1
  Add          r279, r272, r278
  Move         r272, r279
  Jump         L38
L37:
  Min          r280, r269
  // complete_violent_movie: min(from x in matches select x.movie)
  Const        r281, "complete_violent_movie"
  Const        r282, []
  IterPrep     r283, r240
  Len          r284, r283
  Const        r285, 0
L40:
  Less         r286, r285, r284
  JumpIfFalse  r286, L39
  Index        r287, r283, r285
  Move         r248, r287
  Const        r288, "movie"
  Index        r289, r248, r288
  Append       r290, r282, r289
  Move         r282, r290
  Const        r291, 1
  Add          r292, r285, r291
  Move         r285, r292
  Jump         L40
L39:
  Min          r293, r282
  // movie_budget: min(from x in matches select x.budget),
  Move         r294, r241
  Move         r295, r254
  // movie_votes: min(from x in matches select x.votes),
  Move         r296, r255
  Move         r297, r267
  // writer: min(from x in matches select x.writer),
  Move         r298, r268
  Move         r299, r280
  // complete_violent_movie: min(from x in matches select x.movie)
  Move         r300, r281
  Move         r301, r293
  // {
  MakeMap      r302, 4, r294
  Move         r303, r302
  // let result = [
  MakeList     r304, 1, r303
  Move         r305, r304
  // json(result)
  JSON         r305
  // expect result == [
  Const        r306, [{"complete_violent_movie": "Violent Horror", "movie_budget": "Horror", "movie_votes": 2000, "writer": "John Writer"}]
  Equal        r307, r305, r306
  Expect       r307
  Return       r0
