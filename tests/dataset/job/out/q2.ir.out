func main (regs=119)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "character-name-in-title"}, {"id": 2, "keyword": "other"}]
  // let movie_companies = [
  Const        r2, [{"company_id": 1, "movie_id": 100}, {"company_id": 2, "movie_id": 200}]
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
  // let title = [
  Const        r4, [{"id": 100, "title": "Der Film"}, {"id": 200, "title": "Other Movie"}]
  // from cn in company_name
  Const        r5, []
  // where cn.country_code == "[de]" &&
  Const        r6, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r7, "keyword"
  // mc.movie_id == mk.movie_id
  Const        r8, "movie_id"
  Const        r9, "movie_id"
  // select t.title
  Const        r10, "title"
  // from cn in company_name
  IterPrep     r11, r0
  Len          r12, r11
  Const        r14, 0
  Move         r13, r14
L11:
  LessInt      r15, r13, r12
  JumpIfFalse  r15, L0
  Index        r16, r11, r13
  Move         r17, r16
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r18, r2
  Len          r19, r18
  Const        r20, "company_id"
  Const        r21, "id"
  // where cn.country_code == "[de]" &&
  Const        r22, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r23, "keyword"
  // mc.movie_id == mk.movie_id
  Const        r24, "movie_id"
  Const        r25, "movie_id"
  // select t.title
  Const        r26, "title"
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r28, 0
  Move         r27, r28
L10:
  LessInt      r29, r27, r19
  JumpIfFalse  r29, L1
  Index        r30, r18, r27
  Move         r31, r30
  Const        r32, "company_id"
  Index        r33, r31, r32
  Const        r34, "id"
  Index        r35, r17, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L2
  // join t in title on mc.movie_id == t.id
  IterPrep     r37, r4
  Len          r38, r37
  Const        r39, "movie_id"
  Const        r40, "id"
  // where cn.country_code == "[de]" &&
  Const        r41, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r42, "keyword"
  // mc.movie_id == mk.movie_id
  Const        r43, "movie_id"
  Const        r44, "movie_id"
  // select t.title
  Const        r45, "title"
  // join t in title on mc.movie_id == t.id
  Const        r47, 0
  Move         r46, r47
L9:
  LessInt      r48, r46, r38
  JumpIfFalse  r48, L2
  Index        r49, r37, r46
  Move         r50, r49
  Const        r51, "movie_id"
  Index        r52, r31, r51
  Const        r53, "id"
  Index        r54, r50, r53
  Equal        r55, r52, r54
  JumpIfFalse  r55, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, "movie_id"
  Const        r59, "id"
  // where cn.country_code == "[de]" &&
  Const        r60, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r61, "keyword"
  // mc.movie_id == mk.movie_id
  Const        r62, "movie_id"
  Const        r63, "movie_id"
  // select t.title
  Const        r64, "title"
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r66, 0
  Move         r65, r66
L8:
  LessInt      r67, r65, r57
  JumpIfFalse  r67, L3
  Index        r68, r56, r65
  Move         r69, r68
  Const        r70, "movie_id"
  Index        r71, r69, r70
  Const        r72, "id"
  Index        r73, r50, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L4
  // join k in keyword on mk.keyword_id == k.id
  IterPrep     r75, r1
  Len          r76, r75
  Const        r77, "keyword_id"
  Const        r78, "id"
  // where cn.country_code == "[de]" &&
  Const        r79, "country_code"
  // k.keyword == "character-name-in-title" &&
  Const        r80, "keyword"
  // mc.movie_id == mk.movie_id
  Const        r81, "movie_id"
  Const        r82, "movie_id"
  // select t.title
  Const        r83, "title"
  // join k in keyword on mk.keyword_id == k.id
  Const        r85, 0
  Move         r84, r85
L7:
  LessInt      r86, r84, r76
  JumpIfFalse  r86, L4
  Index        r87, r75, r84
  Move         r88, r87
  Const        r89, "keyword_id"
  Index        r90, r69, r89
  Const        r91, "id"
  Index        r92, r88, r91
  Equal        r93, r90, r92
  JumpIfFalse  r93, L5
  // where cn.country_code == "[de]" &&
  Const        r94, "country_code"
  Index        r95, r17, r94
  Const        r96, "[de]"
  Equal        r97, r95, r96
  // k.keyword == "character-name-in-title" &&
  Const        r98, "keyword"
  Index        r99, r88, r98
  Const        r100, "character-name-in-title"
  Equal        r101, r99, r100
  // mc.movie_id == mk.movie_id
  Const        r102, "movie_id"
  Index        r103, r31, r102
  Const        r104, "movie_id"
  Index        r105, r69, r104
  Equal        r106, r103, r105
  // where cn.country_code == "[de]" &&
  Move         r107, r97
  JumpIfFalse  r107, L6
  Move         r107, r101
  // k.keyword == "character-name-in-title" &&
  JumpIfFalse  r107, L6
  Move         r107, r106
L6:
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r107, L5
  // select t.title
  Const        r108, "title"
  Index        r109, r50, r108
  // from cn in company_name
  Append       r110, r5, r109
  Move         r5, r110
L5:
  // join k in keyword on mk.keyword_id == k.id
  Const        r111, 1
  Add          r84, r84, r111
  Jump         L7
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r112, 1
  Add          r65, r65, r112
  Jump         L8
L3:
  // join t in title on mc.movie_id == t.id
  Const        r113, 1
  Add          r46, r46, r113
  Jump         L9
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r114, 1
  Add          r27, r27, r114
  Jump         L10
L1:
  // from cn in company_name
  Const        r115, 1
  AddInt       r13, r13, r115
  Jump         L11
L0:
  // let result = min(titles)
  Min          r116, r5
  // json(result)
  JSON         r116
  // expect result == "Der Film"
  Const        r117, "Der Film"
  Equal        r118, r116, r117
  Expect       r118
  Return       r0
