func main (regs=94)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  Move         r1, r0
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "character-name-in-title"}, {"id": 2, "keyword": "other"}]
  Move         r3, r2
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 100}, {"company_id": 2, "movie_id": 200}]
  Move         r5, r4
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 1, "movie_id": 100}, {"keyword_id": 2, "movie_id": 200}]
  Move         r7, r6
  // let title = [
  Const        r8, [{"id": 100, "title": "Der Film"}, {"id": 200, "title": "Other Movie"}]
  Move         r9, r8
  // from cn in company_name
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L12:
  Less         r14, r13, r12
  JumpIfFalse  r14, L0
  Index        r15, r11, r13
  Move         r16, r15
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r17, r5
  Len          r18, r17
  Const        r19, 0
L11:
  Less         r20, r19, r18
  JumpIfFalse  r20, L1
  Index        r21, r17, r19
  Move         r22, r21
  Const        r23, "company_id"
  Index        r24, r22, r23
  Const        r25, "id"
  Index        r26, r16, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // join t in title on mc.movie_id == t.id
  IterPrep     r28, r9
  Len          r29, r28
  Const        r30, 0
L10:
  Less         r31, r30, r29
  JumpIfFalse  r31, L2
  Index        r32, r28, r30
  Move         r33, r32
  Const        r34, "movie_id"
  Index        r35, r22, r34
  Const        r36, "id"
  Index        r37, r33, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r39, r7
  Len          r40, r39
  Const        r41, 0
L9:
  Less         r42, r41, r40
  JumpIfFalse  r42, L3
  Index        r43, r39, r41
  Move         r44, r43
  Const        r45, "movie_id"
  Index        r46, r44, r45
  Const        r47, "id"
  Index        r48, r33, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L4
  // join k in keyword on mk.keyword_id == k.id
  IterPrep     r50, r3
  Len          r51, r50
  Const        r52, 0
L8:
  Less         r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Const        r56, "keyword_id"
  Index        r57, r44, r56
  Const        r58, "id"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L5
  // where cn.country_code == "[de]" &&
  Const        r61, "country_code"
  Index        r62, r16, r61
  Const        r63, "[de]"
  Equal        r64, r62, r63
  // k.keyword == "character-name-in-title" &&
  Const        r65, "keyword"
  Index        r66, r55, r65
  Const        r67, "character-name-in-title"
  Equal        r68, r66, r67
  // mc.movie_id == mk.movie_id
  Const        r69, "movie_id"
  Index        r70, r22, r69
  Const        r71, "movie_id"
  Index        r72, r44, r71
  Equal        r73, r70, r72
  // where cn.country_code == "[de]" &&
  Move         r74, r64
  JumpIfFalse  r74, L6
  Move         r74, r68
L6:
  // k.keyword == "character-name-in-title" &&
  Move         r75, r74
  JumpIfFalse  r75, L7
  Move         r75, r73
L7:
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r75, L5
  // select t.title
  Const        r76, "title"
  Index        r77, r33, r76
  // from cn in company_name
  Append       r78, r10, r77
  Move         r10, r78
L5:
  // join k in keyword on mk.keyword_id == k.id
  Const        r79, 1
  Add          r80, r52, r79
  Move         r52, r80
  Jump         L8
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r81, 1
  Add          r82, r41, r81
  Move         r41, r82
  Jump         L9
L3:
  // join t in title on mc.movie_id == t.id
  Const        r83, 1
  Add          r84, r30, r83
  Move         r30, r84
  Jump         L10
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r85, 1
  Add          r86, r19, r85
  Move         r19, r86
  Jump         L11
L1:
  // from cn in company_name
  Const        r87, 1
  Add          r88, r13, r87
  Move         r13, r88
  Jump         L12
L0:
  // let titles =
  Move         r89, r10
  // let result = min(titles)
  Min          r90, r89
  Move         r91, r90
  // json(result)
  JSON         r91
  // expect result == "Der Film"
  Const        r92, "Der Film"
  Equal        r93, r91, r92
  Expect       r93
  Return       r0
