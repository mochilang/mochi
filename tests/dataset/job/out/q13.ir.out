func main (regs=186)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
  // let kind_type = [
  Const        r3, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
  // let title = [
  Const        r4, [{"id": 10, "kind_id": 1, "title": "Alpha"}, {"id": 20, "kind_id": 1, "title": "Beta"}, {"id": 30, "kind_id": 2, "title": "Gamma"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 1, "company_type_id": 1, "movie_id": 20}, {"company_id": 2, "company_type_id": 1, "movie_id": 30}]
  // let movie_info = [
  Const        r6, [{"info": "1997-05-10", "info_type_id": 2, "movie_id": 10}, {"info": "1998-03-20", "info_type_id": 2, "movie_id": 20}, {"info": "1999-07-30", "info_type_id": 2, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r7, [{"info": "6.0", "info_type_id": 1, "movie_id": 10}, {"info": "7.5", "info_type_id": 1, "movie_id": 20}, {"info": "5.5", "info_type_id": 1, "movie_id": 30}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // from cn in company_name
  IterPrep     r16, r0
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r21, r16, r18
  Move         r22, r21
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r23, r5
  Len          r24, r23
  Const        r25, "company_id"
  Const        r26, "id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r19, 0
  Move         r27, r19
  LessInt      r28, r27, r24
  JumpIfFalse  r28, L1
  Index        r29, r23, r27
  Move         r30, r29
  Const        r25, "company_id"
  Index        r31, r30, r25
  Const        r26, "id"
  Index        r32, r22, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r34, r1
  Len          r35, r34
  Const        r26, "id"
  Const        r36, "company_type_id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r19, 0
  Move         r37, r19
  LessInt      r38, r37, r35
  JumpIfFalse  r38, L2
  Index        r39, r34, r37
  Move         r40, r39
  Const        r26, "id"
  Index        r41, r40, r26
  Const        r36, "company_type_id"
  Index        r42, r30, r36
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r44, r4
  Len          r45, r44
L10:
  Const        r26, "id"
  Const        r46, "movie_id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join t in title on t.id == mc.movie_id
  Const        r19, 0
  Move         r47, r19
  LessInt      r48, r47, r45
  JumpIfFalse  r48, L3
  Index        r49, r44, r47
  Move         r50, r49
  Const        r26, "id"
  Index        r51, r50, r26
  Const        r46, "movie_id"
  Index        r52, r30, r46
  Equal        r53, r51, r52
  JumpIfFalse  r53, L4
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r54, r3
  Len          r55, r54
  Const        r26, "id"
  Const        r56, "kind_id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join kt in kind_type on kt.id == t.kind_id
  Const        r19, 0
  Move         r57, r19
  LessInt      r58, r57, r55
  JumpIfFalse  r58, L4
  Index        r59, r54, r57
  Move         r60, r59
  Const        r26, "id"
  Index        r61, r60, r26
  Const        r56, "kind_id"
  Index        r62, r50, r56
  Equal        r63, r61, r62
  JumpIfFalse  r63, L5
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r64, r6
  Len          r65, r64
  Const        r46, "movie_id"
  Const        r26, "id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r19, 0
  Move         r66, r19
  LessInt      r67, r66, r65
  JumpIfFalse  r67, L5
  Index        r68, r64, r66
  Move         r69, r68
  Const        r46, "movie_id"
  Index        r70, r69, r46
  Const        r26, "id"
  Index        r71, r50, r26
  Equal        r72, r70, r71
  JumpIfFalse  r72, L6
  // join it2 in info_type on it2.id == mi.info_type_id
  IterPrep     r73, r2
  Len          r74, r73
  Const        r26, "id"
  Const        r75, "info_type_id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join it2 in info_type on it2.id == mi.info_type_id
  Const        r19, 0
  Move         r76, r19
  LessInt      r77, r76, r74
  JumpIfFalse  r77, L6
  Index        r78, r73, r76
  Move         r79, r78
  Const        r26, "id"
  Index        r80, r79, r26
  Const        r75, "info_type_id"
  Index        r81, r69, r75
  Equal        r82, r80, r81
  JumpIfFalse  r82, L7
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  IterPrep     r83, r7
  Len          r84, r83
  Const        r46, "movie_id"
  Const        r26, "id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Const        r19, 0
  Move         r85, r19
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L7
  Index        r87, r83, r85
  Move         r88, r87
  Const        r46, "movie_id"
  Index        r89, r88, r46
  Const        r26, "id"
  Index        r90, r50, r26
  Equal        r91, r89, r90
  JumpIfFalse  r91, L8
  // join it in info_type on it.id == miidx.info_type_id
  IterPrep     r92, r2
  Len          r93, r92
  Const        r26, "id"
  Const        r75, "info_type_id"
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // join it in info_type on it.id == miidx.info_type_id
  Const        r19, 0
  Move         r94, r19
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L8
  Index        r96, r92, r94
  Move         r97, r96
  Const        r26, "id"
  Index        r98, r97, r26
  Const        r75, "info_type_id"
  Index        r99, r88, r75
  Equal        r100, r98, r99
  JumpIfFalse  r100, L9
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  Index        r101, r22, r9
  Const        r102, "[de]"
  Equal        r103, r101, r102
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  Index        r104, r40, r10
  Const        r105, "production companies"
  Equal        r106, r104, r105
  // it.info == "rating" &&
  Const        r11, "info"
  Index        r107, r97, r11
  Const        r13, "rating"
  Equal        r108, r107, r13
  // it2.info == "release dates" &&
  Index        r109, r79, r11
  Const        r110, "release dates"
  Equal        r111, r109, r110
  // kt.kind == "movie"
  Index        r112, r60, r10
  Const        r113, "movie"
  Equal        r114, r112, r113
  // where cn.country_code == "[de]" &&
  Move         r115, r103
  JumpIfFalse  r115, L10
  Move         r115, r106
  // ct.kind == "production companies" &&
  JumpIfFalse  r115, L10
  Move         r115, r108
  // it.info == "rating" &&
  JumpIfFalse  r115, L10
  Move         r115, r111
  // it2.info == "release dates" &&
  JumpIfFalse  r115, L10
L11:
  Move         r115, r114
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r115, L9
  // release_date: mi.info,
  Const        r116, "release_date"
  Const        r11, "info"
  Index        r117, r69, r11
  // rating: miidx.info,
  Const        r118, "rating"
  Index        r119, r88, r11
  // german_movie: t.title
  Const        r120, "german_movie"
  Const        r15, "title"
  Index        r121, r50, r15
  // release_date: mi.info,
  Move         r122, r116
  Move         r123, r117
  // rating: miidx.info,
  Move         r124, r118
  Move         r125, r119
  // german_movie: t.title
  Move         r126, r120
  Move         r127, r121
  // select {
  MakeMap      r128, 3, r122
  // from cn in company_name
  Append       r129, r8, r128
  Move         r8, r129
  // join it in info_type on it.id == miidx.info_type_id
  Const        r130, 1
  Add          r94, r94, r130
  Jump         L11
L9:
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Index        r139, r138, r12
  Index        r142, r138, r12
  Move         r140, r142
L8:
  Move         r141, r139
  MakeList     r143, 2, r140
  Append       r144, r132, r143
L7:
  Move         r132, r144
  Const        r130, 1
  AddInt       r135, r135, r130
  Jump         L6
L5:
  Const        r19, 0
  Index        r146, r132, r19
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Const        r147, "rating"
L4:
  Const        r148, []
  Const        r13, "rating"
  IterPrep     r149, r8
L3:
  Len          r150, r149
  Move         r151, r19
  LessInt      r152, r151, r150
L2:
  JumpIfFalse  r152, L12
  Index        r153, r149, r151
  Move         r138, r153
L1:
  Const        r13, "rating"
  Index        r154, r138, r13
  Index        r157, r138, r13
L0:
  Move         r155, r157
  Move         r156, r154
  MakeList     r158, 2, r155
  Append       r159, r148, r158
  Move         r148, r159
  Const        r130, 1
  AddInt       r151, r151, r130
  Jump         L13
L6:
  Sort         r160, r148
  Move         r148, r160
  Const        r19, 0
  Index        r161, r148, r19
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Const        r162, "german_movie"
  Const        r163, []
  Const        r14, "german_movie"
  IterPrep     r164, r8
  Len          r165, r164
  Move         r166, r19
  LessInt      r167, r166, r165
  JumpIfFalse  r167, L14
  Index        r168, r164, r166
  Move         r138, r168
  Const        r14, "german_movie"
  Index        r169, r138, r14
  Index        r172, r138, r14
  Move         r170, r172
  Move         r171, r169
  MakeList     r173, 2, r170
  Append       r174, r163, r173
  Move         r163, r174
  Const        r130, 1
  AddInt       r166, r166, r130
  Jump         L15
L13:
  Index        r176, r163, r19
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r177, r131
  Move         r178, r146
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r179, r147
  Move         r180, r161
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r181, r162
  Move         r182, r176
  // let result = {
  MakeMap      r183, 3, r177
  // json(result)
  JSON         r183
  // expect result == {
  Const        r184, {"german_movie": "Alpha", "rating": "6.0", "release_date": "1997-05-10"}
  Equal        r185, r183, r184
  Expect       r185
  Return       r0
