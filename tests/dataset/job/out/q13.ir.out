func main (regs=350)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
  // let kind_type = [
  Const        r3, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
  // let title = [
  Const        r4, [{"id": 10, "kind_id": 1, "title": "Alpha"}, {"id": 20, "kind_id": 1, "title": "Beta"}, {"id": 30, "kind_id": 2, "title": "Gamma"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 1, "company_type_id": 1, "movie_id": 20}, {"company_id": 2, "company_type_id": 1, "movie_id": 30}]
  // let movie_info = [
  Const        r6, [{"info": "1997-05-10", "info_type_id": 2, "movie_id": 10}, {"info": "1998-03-20", "info_type_id": 2, "movie_id": 20}, {"info": "1999-07-30", "info_type_id": 2, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r7, [{"info": "6.0", "info_type_id": 1, "movie_id": 10}, {"info": "7.5", "info_type_id": 1, "movie_id": 20}, {"info": "5.5", "info_type_id": 1, "movie_id": 30}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // it2.info == "release dates" &&
  Const        r12, "info"
  // kt.kind == "movie"
  Const        r13, "kind"
  // release_date: mi.info,
  Const        r14, "release_date"
  Const        r15, "info"
  // rating: miidx.info,
  Const        r16, "rating"
  Const        r17, "info"
  // german_movie: t.title
  Const        r18, "german_movie"
  Const        r19, "title"
  // from cn in company_name
  IterPrep     r20, r0
  Len          r21, r20
  Const        r23, 0
  Move         r22, r23
L19:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r25, r20, r22
  Move         r26, r25
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r27, r5
  Len          r28, r27
  Const        r29, "company_id"
  Const        r30, "id"
  // where cn.country_code == "[de]" &&
  Const        r31, "country_code"
  // ct.kind == "production companies" &&
  Const        r32, "kind"
  // it.info == "rating" &&
  Const        r33, "info"
  // it2.info == "release dates" &&
  Const        r34, "info"
  // kt.kind == "movie"
  Const        r35, "kind"
  // release_date: mi.info,
  Const        r36, "release_date"
  Const        r37, "info"
  // rating: miidx.info,
  Const        r38, "rating"
  Const        r39, "info"
  // german_movie: t.title
  Const        r40, "german_movie"
  Const        r41, "title"
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r43, 0
  Move         r42, r43
L18:
  LessInt      r44, r42, r28
  JumpIfFalse  r44, L1
  Index        r45, r27, r42
  Move         r46, r45
  Const        r47, "company_id"
  Index        r48, r46, r47
  Const        r49, "id"
  Index        r50, r26, r49
  Equal        r51, r48, r50
  JumpIfFalse  r51, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r52, r1
  Len          r53, r52
  Const        r54, "id"
  Const        r55, "company_type_id"
  // where cn.country_code == "[de]" &&
  Const        r56, "country_code"
  // ct.kind == "production companies" &&
  Const        r57, "kind"
  // it.info == "rating" &&
  Const        r58, "info"
  // it2.info == "release dates" &&
  Const        r59, "info"
  // kt.kind == "movie"
  Const        r60, "kind"
  // release_date: mi.info,
  Const        r61, "release_date"
  Const        r62, "info"
  // rating: miidx.info,
  Const        r63, "rating"
  Const        r64, "info"
  // german_movie: t.title
  Const        r65, "german_movie"
  Const        r66, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r68, 0
  Move         r67, r68
L17:
  LessInt      r69, r67, r53
  JumpIfFalse  r69, L2
  Index        r70, r52, r67
  Move         r71, r70
  Const        r72, "id"
  Index        r73, r71, r72
  Const        r74, "company_type_id"
  Index        r75, r46, r74
  Equal        r76, r73, r75
  JumpIfFalse  r76, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r77, r4
  Len          r78, r77
  Const        r79, "id"
  Const        r80, "movie_id"
  // where cn.country_code == "[de]" &&
  Const        r81, "country_code"
  // ct.kind == "production companies" &&
  Const        r82, "kind"
  // it.info == "rating" &&
  Const        r83, "info"
  // it2.info == "release dates" &&
  Const        r84, "info"
  // kt.kind == "movie"
  Const        r85, "kind"
  // release_date: mi.info,
  Const        r86, "release_date"
  Const        r87, "info"
  // rating: miidx.info,
  Const        r88, "rating"
  Const        r89, "info"
  // german_movie: t.title
  Const        r90, "german_movie"
  Const        r91, "title"
  // join t in title on t.id == mc.movie_id
  Const        r93, 0
  Move         r92, r93
L16:
  LessInt      r94, r92, r78
  JumpIfFalse  r94, L3
  Index        r95, r77, r92
  Move         r96, r95
  Const        r97, "id"
  Index        r98, r96, r97
  Const        r99, "movie_id"
  Index        r100, r46, r99
  Equal        r101, r98, r100
  JumpIfFalse  r101, L4
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r102, r3
  Len          r103, r102
  Const        r104, "id"
  Const        r105, "kind_id"
  // where cn.country_code == "[de]" &&
  Const        r106, "country_code"
  // ct.kind == "production companies" &&
  Const        r107, "kind"
  // it.info == "rating" &&
  Const        r108, "info"
  // it2.info == "release dates" &&
  Const        r109, "info"
  // kt.kind == "movie"
  Const        r110, "kind"
  // release_date: mi.info,
  Const        r111, "release_date"
  Const        r112, "info"
  // rating: miidx.info,
  Const        r113, "rating"
  Const        r114, "info"
  // german_movie: t.title
  Const        r115, "german_movie"
  Const        r116, "title"
  // join kt in kind_type on kt.id == t.kind_id
  Const        r118, 0
  Move         r117, r118
L15:
  LessInt      r119, r117, r103
  JumpIfFalse  r119, L4
  Index        r120, r102, r117
  Move         r121, r120
  Const        r122, "id"
  Index        r123, r121, r122
  Const        r124, "kind_id"
  Index        r125, r96, r124
  Equal        r126, r123, r125
  JumpIfFalse  r126, L5
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r127, r6
  Len          r128, r127
  Const        r129, "movie_id"
  Const        r130, "id"
  // where cn.country_code == "[de]" &&
  Const        r131, "country_code"
  // ct.kind == "production companies" &&
  Const        r132, "kind"
  // it.info == "rating" &&
  Const        r133, "info"
  // it2.info == "release dates" &&
  Const        r134, "info"
  // kt.kind == "movie"
  Const        r135, "kind"
  // release_date: mi.info,
  Const        r136, "release_date"
  Const        r137, "info"
  // rating: miidx.info,
  Const        r138, "rating"
  Const        r139, "info"
  // german_movie: t.title
  Const        r140, "german_movie"
  Const        r141, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r143, 0
  Move         r142, r143
L14:
  LessInt      r144, r142, r128
  JumpIfFalse  r144, L5
  Index        r145, r127, r142
  Move         r146, r145
  Const        r147, "movie_id"
  Index        r148, r146, r147
  Const        r149, "id"
  Index        r150, r96, r149
  Equal        r151, r148, r150
  JumpIfFalse  r151, L6
  // join it2 in info_type on it2.id == mi.info_type_id
  IterPrep     r152, r2
  Len          r153, r152
  Const        r154, "id"
  Const        r155, "info_type_id"
  // where cn.country_code == "[de]" &&
  Const        r156, "country_code"
  // ct.kind == "production companies" &&
  Const        r157, "kind"
  // it.info == "rating" &&
  Const        r158, "info"
  // it2.info == "release dates" &&
  Const        r159, "info"
  // kt.kind == "movie"
  Const        r160, "kind"
  // release_date: mi.info,
  Const        r161, "release_date"
  Const        r162, "info"
  // rating: miidx.info,
  Const        r163, "rating"
  Const        r164, "info"
  // german_movie: t.title
  Const        r165, "german_movie"
  Const        r166, "title"
  // join it2 in info_type on it2.id == mi.info_type_id
  Const        r168, 0
  Move         r167, r168
L13:
  LessInt      r169, r167, r153
  JumpIfFalse  r169, L6
  Index        r170, r152, r167
  Move         r171, r170
  Const        r172, "id"
  Index        r173, r171, r172
  Const        r174, "info_type_id"
  Index        r175, r146, r174
  Equal        r176, r173, r175
  JumpIfFalse  r176, L7
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  IterPrep     r177, r7
  Len          r178, r177
  Const        r179, "movie_id"
  Const        r180, "id"
  // where cn.country_code == "[de]" &&
  Const        r181, "country_code"
  // ct.kind == "production companies" &&
  Const        r182, "kind"
  // it.info == "rating" &&
  Const        r183, "info"
  // it2.info == "release dates" &&
  Const        r184, "info"
  // kt.kind == "movie"
  Const        r185, "kind"
  // release_date: mi.info,
  Const        r186, "release_date"
  Const        r187, "info"
  // rating: miidx.info,
  Const        r188, "rating"
  Const        r189, "info"
  // german_movie: t.title
  Const        r190, "german_movie"
  Const        r191, "title"
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Const        r193, 0
  Move         r192, r193
L12:
  LessInt      r194, r192, r178
  JumpIfFalse  r194, L7
  Index        r195, r177, r192
  Move         r196, r195
  Const        r197, "movie_id"
  Index        r198, r196, r197
  Const        r199, "id"
  Index        r200, r96, r199
  Equal        r201, r198, r200
  JumpIfFalse  r201, L8
  // join it in info_type on it.id == miidx.info_type_id
  IterPrep     r202, r2
  Len          r203, r202
  Const        r204, "id"
  Const        r205, "info_type_id"
  // where cn.country_code == "[de]" &&
  Const        r206, "country_code"
  // ct.kind == "production companies" &&
  Const        r207, "kind"
  // it.info == "rating" &&
  Const        r208, "info"
  // it2.info == "release dates" &&
  Const        r209, "info"
  // kt.kind == "movie"
  Const        r210, "kind"
  // release_date: mi.info,
  Const        r211, "release_date"
  Const        r212, "info"
  // rating: miidx.info,
  Const        r213, "rating"
  Const        r214, "info"
  // german_movie: t.title
  Const        r215, "german_movie"
  Const        r216, "title"
  // join it in info_type on it.id == miidx.info_type_id
  Const        r218, 0
  Move         r217, r218
L11:
  LessInt      r219, r217, r203
  JumpIfFalse  r219, L8
  Index        r220, r202, r217
  Move         r221, r220
  Const        r222, "id"
  Index        r223, r221, r222
  Const        r224, "info_type_id"
  Index        r225, r196, r224
  Equal        r226, r223, r225
  JumpIfFalse  r226, L9
  // where cn.country_code == "[de]" &&
  Const        r227, "country_code"
  Index        r228, r26, r227
  Const        r229, "[de]"
  Equal        r230, r228, r229
  // ct.kind == "production companies" &&
  Const        r231, "kind"
  Index        r232, r71, r231
  Const        r233, "production companies"
  Equal        r234, r232, r233
  // it.info == "rating" &&
  Const        r235, "info"
  Index        r236, r221, r235
  Const        r237, "rating"
  Equal        r238, r236, r237
  // it2.info == "release dates" &&
  Const        r239, "info"
  Index        r240, r171, r239
  Const        r241, "release dates"
  Equal        r242, r240, r241
  // kt.kind == "movie"
  Const        r243, "kind"
  Index        r244, r121, r243
  Const        r245, "movie"
  Equal        r246, r244, r245
  // where cn.country_code == "[de]" &&
  Move         r247, r230
  JumpIfFalse  r247, L10
  Move         r247, r234
  // ct.kind == "production companies" &&
  JumpIfFalse  r247, L10
  Move         r247, r238
  // it.info == "rating" &&
  JumpIfFalse  r247, L10
  Move         r247, r242
  // it2.info == "release dates" &&
  JumpIfFalse  r247, L10
  Move         r247, r246
L10:
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r247, L9
  // release_date: mi.info,
  Const        r248, "release_date"
  Const        r249, "info"
  Index        r250, r146, r249
  // rating: miidx.info,
  Const        r251, "rating"
  Const        r252, "info"
  Index        r253, r196, r252
  // german_movie: t.title
  Const        r254, "german_movie"
  Const        r255, "title"
  Index        r256, r96, r255
  // release_date: mi.info,
  Move         r257, r248
  Move         r258, r250
  // rating: miidx.info,
  Move         r259, r251
  Move         r260, r253
  // german_movie: t.title
  Move         r261, r254
  Move         r262, r256
  // select {
  MakeMap      r263, 3, r257
  // from cn in company_name
  Append       r264, r8, r263
  Move         r8, r264
L9:
  // join it in info_type on it.id == miidx.info_type_id
  Const        r265, 1
  Add          r217, r217, r265
  Jump         L11
L8:
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Const        r266, 1
  Add          r192, r192, r266
  Jump         L12
L7:
  // join it2 in info_type on it2.id == mi.info_type_id
  Const        r267, 1
  Add          r167, r167, r267
  Jump         L13
L6:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r268, 1
  Add          r142, r142, r268
  Jump         L14
L5:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r269, 1
  Add          r117, r117, r269
  Jump         L15
L4:
  // join t in title on t.id == mc.movie_id
  Const        r270, 1
  Add          r92, r92, r270
  Jump         L16
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r271, 1
  Add          r67, r67, r271
  Jump         L17
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r272, 1
  Add          r42, r42, r272
  Jump         L18
L1:
  // from cn in company_name
  Const        r273, 1
  AddInt       r22, r22, r273
  Jump         L19
L0:
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Const        r274, "release_date"
  Const        r275, []
  Const        r276, "release_date"
  Const        r277, "release_date"
  IterPrep     r278, r8
  Len          r279, r278
  Const        r281, 0
  Move         r280, r281
L21:
  LessInt      r282, r280, r279
  JumpIfFalse  r282, L20
  Index        r283, r278, r280
  Move         r284, r283
  Const        r285, "release_date"
  Index        r286, r284, r285
  Const        r287, "release_date"
  Index        r288, r284, r287
  Move         r289, r288
  Move         r290, r286
  MakeList     r291, 2, r289
  Append       r292, r275, r291
  Move         r275, r292
  Const        r293, 1
  AddInt       r280, r280, r293
  Jump         L21
L20:
  Sort         r294, r275
  Move         r275, r294
  Const        r295, 0
  Index        r296, r275, r295
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Const        r297, "rating"
  Const        r298, []
  Const        r299, "rating"
  Const        r300, "rating"
  IterPrep     r301, r8
  Len          r302, r301
  Const        r304, 0
  Move         r303, r304
L23:
  LessInt      r305, r303, r302
  JumpIfFalse  r305, L22
  Index        r306, r301, r303
  Move         r284, r306
  Const        r307, "rating"
  Index        r308, r284, r307
  Const        r309, "rating"
  Index        r310, r284, r309
  Move         r311, r310
  Move         r312, r308
  MakeList     r313, 2, r311
  Append       r314, r298, r313
  Move         r298, r314
  Const        r315, 1
  AddInt       r303, r303, r315
  Jump         L23
L22:
  Sort         r316, r298
  Move         r298, r316
  Const        r317, 0
  Index        r318, r298, r317
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Const        r319, "german_movie"
  Const        r320, []
  Const        r321, "german_movie"
  Const        r322, "german_movie"
  IterPrep     r323, r8
  Len          r324, r323
  Const        r326, 0
  Move         r325, r326
L25:
  LessInt      r327, r325, r324
  JumpIfFalse  r327, L24
  Index        r328, r323, r325
  Move         r284, r328
  Const        r329, "german_movie"
  Index        r330, r284, r329
  Const        r331, "german_movie"
  Index        r332, r284, r331
  Move         r333, r332
  Move         r334, r330
  MakeList     r335, 2, r333
  Append       r336, r320, r335
  Move         r320, r336
  Const        r337, 1
  AddInt       r325, r325, r337
  Jump         L25
L24:
  Sort         r338, r320
  Move         r320, r338
  Const        r339, 0
  Index        r340, r320, r339
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r341, r274
  Move         r342, r296
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r343, r297
  Move         r344, r318
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r345, r319
  Move         r346, r340
  // let result = {
  MakeMap      r347, 3, r341
  // json(result)
  JSON         r347
  // expect result == {
  Const        r348, {"german_movie": "Alpha", "rating": "6.0", "release_date": "1997-05-10"}
  Equal        r349, r347, r348
  Expect       r349
  Return       r0
