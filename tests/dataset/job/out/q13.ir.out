func main (regs=36)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
  // let kind_type = [
  Const        r3, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
  // let title = [
  Const        r4, [{"id": 10, "kind_id": 1, "title": "Alpha"}, {"id": 20, "kind_id": 1, "title": "Beta"}, {"id": 30, "kind_id": 2, "title": "Gamma"}]
L16:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 1, "company_type_id": 1, "movie_id": 20}, {"company_id": 2, "company_type_id": 1, "movie_id": 30}]
L15:
  // let movie_info = [
  Const        r6, [{"info": "1997-05-10", "info_type_id": 2, "movie_id": 10}, {"info": "1998-03-20", "info_type_id": 2, "movie_id": 20}, {"info": "1999-07-30", "info_type_id": 2, "movie_id": 30}]
L5:
  // let movie_info_idx = [
  Const        r7, [{"info": "6.0", "info_type_id": 1, "movie_id": 10}, {"info": "7.5", "info_type_id": 1, "movie_id": 20}, {"info": "5.5", "info_type_id": 1, "movie_id": 30}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
L10:
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
L1:
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
L9:
  Const        r15, "title"
  // from cn in company_name
  IterPrep     r16, r0
L13:
  Len          r17, r16
  Const        r18, 0
L0:
  Move         r19, r18
L6:
  LessInt      r20, r19, r17
  JumpIfFalse  r20, L0
  Index        r17, r16, r19
L18:
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r16, r5
L7:
  Len          r5, r16
  Const        r21, "company_id"
  Const        r22, "id"
L17:
  Move         r23, r18
  LessInt      r24, r23, r5
  JumpIfFalse  r24, L1
L20:
  Index        r5, r16, r23
L11:
  Index        r16, r5, r21
  Index        r21, r17, r22
  Equal        r25, r16, r21
L14:
  JumpIfFalse  r25, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r25, r1
  Len          r1, r25
  Const        r21, "company_type_id"
  Move         r16, r18
  LessInt      r26, r16, r1
  JumpIfFalse  r26, L2
  Index        r26, r25, r16
  Index        r25, r26, r22
  Index        r1, r5, r21
  Equal        r21, r25, r1
  JumpIfFalse  r21, L1
  // join t in title on t.id == mc.movie_id
  IterPrep     r21, r4
  Len          r4, r21
  Const        r1, "movie_id"
  Move         r25, r18
  LessInt      r27, r25, r4
  JumpIfFalse  r27, L1
  Index        r27, r21, r25
  Index        r21, r27, r22
  Index        r4, r5, r1
  Equal        r5, r21, r4
  JumpIfFalse  r5, L3
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r5, r3
  Len          r3, r5
  Const        r4, "kind_id"
  Move         r21, r18
  LessInt      r28, r21, r3
  JumpIfFalse  r28, L3
  Index        r28, r5, r21
  Index        r5, r28, r22
  Index        r3, r27, r4
  Equal        r4, r5, r3
  JumpIfFalse  r4, L4
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r4, r6
  Len          r6, r4
  Move         r3, r18
  LessInt      r29, r3, r6
  JumpIfFalse  r29, L4
  Index        r29, r4, r3
  Index        r4, r29, r1
  Index        r6, r27, r22
  Equal        r30, r4, r6
  JumpIfFalse  r30, L5
  // join it2 in info_type on it2.id == mi.info_type_id
  IterPrep     r30, r2
  Len          r4, r30
  Const        r31, "info_type_id"
  Move         r32, r18
  LessInt      r33, r32, r4
  JumpIfFalse  r33, L5
  Index        r33, r30, r32
  Index        r30, r33, r22
  Index        r4, r29, r31
  Equal        r34, r30, r4
  JumpIfFalse  r34, L6
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  IterPrep     r4, r7
  Len          r7, r4
  Move         r30, r18
  LessInt      r35, r30, r7
  JumpIfFalse  r35, L6
  Index        r35, r4, r30
  Index        r4, r35, r1
  Index        r1, r27, r22
  Equal        r7, r4, r1
  JumpIfFalse  r7, L7
  // join it in info_type on it.id == miidx.info_type_id
  IterPrep     r7, r2
  Len          r2, r7
  Move         r1, r18
  LessInt      r4, r1, r2
  JumpIfFalse  r4, L7
  Index        r4, r7, r1
  Index        r2, r4, r22
  Index        r22, r35, r31
  Equal        r31, r2, r22
  JumpIfFalse  r31, L8
  // where cn.country_code == "[de]" &&
  Index        r31, r17, r9
  Const        r17, "[de]"
  Equal        r9, r31, r17
  // ct.kind == "production companies" &&
  Index        r31, r26, r10
  Const        r26, "production companies"
  Equal        r22, r31, r26
  // it.info == "rating" &&
  Index        r26, r4, r11
  Equal        r4, r26, r13
  // it2.info == "release dates" &&
  Index        r26, r33, r11
  Const        r33, "release dates"
  Equal        r31, r26, r33
  // kt.kind == "movie"
  Index        r33, r28, r10
  Const        r28, "movie"
  Equal        r10, r33, r28
  // where cn.country_code == "[de]" &&
  Move         r28, r9
  JumpIfFalse  r28, L9
  // ct.kind == "production companies" &&
  Move         r28, r22
  JumpIfFalse  r28, L10
  // it.info == "rating" &&
  Move         r28, r4
  JumpIfFalse  r28, L11
  // it2.info == "release dates" &&
  Move         r28, r31
  JumpIfFalse  r28, L12
  Move         r28, r10
L12:
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r28, L8
  // release_date: mi.info,
  Move         r28, r12
  Index        r10, r29, r11
  // rating: miidx.info,
  Move         r29, r13
  Index        r31, r35, r11
  // german_movie: t.title
  Move         r35, r14
  Index        r11, r27, r15
  // release_date: mi.info,
  Move         r15, r28
  Move         r28, r10
  // rating: miidx.info,
  Move         r10, r29
  Move         r29, r31
  // german_movie: t.title
  Move         r31, r35
  Move         r35, r11
  // select {
  MakeMap      r11, 3, r15
  // from cn in company_name
  Append       r8, r8, r11
L8:
  // join it in info_type on it.id == miidx.info_type_id
  Const        r11, 1
  Add          r1, r1, r11
  Jump         L13
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Add          r30, r30, r11
  Jump         L5
  // join it2 in info_type on it2.id == mi.info_type_id
  Add          r32, r32, r11
  Jump         L14
  // join mi in movie_info on mi.movie_id == t.id
  Add          r3, r3, r11
  Jump         L15
L4:
  // join kt in kind_type on kt.id == t.kind_id
  Add          r21, r21, r11
  Jump         L16
L3:
  // join t in title on t.id == mc.movie_id
  Add          r25, r25, r11
  Jump         L17
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r16, r16, r11
  Jump         L13
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r23, r23, r11
  Jump         L7
  // from cn in company_name
  AddInt       r19, r19, r11
  Jump         L6
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r17, r12
  Const        r24, []
  IterPrep     r23, r8
  Len          r20, r23
  Move         r19, r18
  LessInt      r1, r19, r20
  JumpIfFalse  r1, L13
  Index        r1, r23, r19
  Index        r23, r1, r12
  Index        r20, r1, r12
  Move         r12, r23
  MakeList     r23, 2, r20
  Append       r24, r24, r23
  AddInt       r19, r19, r11
  Jump         L18
  Sort         r24, r24
  Index        r23, r24, r18
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r24, r13
  Const        r12, []
  IterPrep     r20, r8
  Len          r19, r20
  Move         r7, r18
  LessInt      r30, r7, r19
  JumpIfFalse  r30, L19
  Index        r1, r20, r7
  Index        r30, r1, r13
  Index        r19, r1, r13
  Move         r13, r30
  MakeList     r30, 2, r19
  Append       r12, r12, r30
  AddInt       r7, r7, r11
  Jump         L20
L19:
  Sort         r12, r12
  Index        r13, r12, r18
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r12, r14
  Const        r19, []
  IterPrep     r7, r8
  Len          r8, r7
  Move         r20, r18
L22:
  LessInt      r34, r20, r8
  JumpIfFalse  r34, L21
  Index        r1, r7, r20
  Index        r34, r1, r14
  Index        r8, r1, r14
  Move         r1, r34
  MakeList     r34, 2, r8
  Append       r19, r19, r34
  AddInt       r20, r20, r11
  Jump         L22
L21:
  Sort         r19, r19
  Index        r34, r19, r18
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r19, r17
  Move         r17, r23
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r23, r24
  Move         r24, r13
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r13, r12
  Move         r12, r34
  // let result = {
  MakeMap      r34, 3, r19
  // json(result)
  JSON         r34
  // expect result == {
  Const        r12, {"german_movie": "Alpha", "rating": "6.0", "release_date": "1997-05-10"}
  Equal        r30, r34, r12
  Expect       r30
  Return       r0
