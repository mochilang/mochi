func main (regs=189)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
  // let kind_type = [
  Const        r3, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
  // let title = [
  Const        r4, [{"id": 10, "kind_id": 1, "title": "Alpha"}, {"id": 20, "kind_id": 1, "title": "Beta"}, {"id": 30, "kind_id": 2, "title": "Gamma"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 1, "company_type_id": 1, "movie_id": 20}, {"company_id": 2, "company_type_id": 1, "movie_id": 30}]
  // let movie_info = [
  Const        r6, [{"info": "1997-05-10", "info_type_id": 2, "movie_id": 10}, {"info": "1998-03-20", "info_type_id": 2, "movie_id": 20}, {"info": "1999-07-30", "info_type_id": 2, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r7, [{"info": "6.0", "info_type_id": 1, "movie_id": 10}, {"info": "7.5", "info_type_id": 1, "movie_id": 20}, {"info": "5.5", "info_type_id": 1, "movie_id": 30}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
  Const        r15, "title"
  // from cn in company_name
  IterPrep     r16, r0
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
L22:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r22, r16, r18
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r23, r5
  Len          r24, r23
  Const        r25, "company_id"
  Const        r26, "id"
  Move         r27, r19
L21:
  LessInt      r28, r27, r24
  JumpIfFalse  r28, L1
  Index        r30, r23, r27
  Index        r31, r30, r25
  Index        r32, r22, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r34, r1
  Len          r35, r34
  Const        r36, "company_type_id"
  Move         r37, r19
L20:
  LessInt      r38, r37, r35
  JumpIfFalse  r38, L2
  Index        r40, r34, r37
  Index        r41, r40, r26
  Index        r42, r30, r36
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r44, r4
  Len          r45, r44
  Const        r46, "movie_id"
  Move         r47, r19
L19:
  LessInt      r48, r47, r45
  JumpIfFalse  r48, L3
  Index        r50, r44, r47
  Index        r51, r50, r26
  Index        r52, r30, r46
  Equal        r53, r51, r52
  JumpIfFalse  r53, L4
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, "kind_id"
  Move         r57, r19
L18:
  LessInt      r58, r57, r55
  JumpIfFalse  r58, L4
  Index        r60, r54, r57
  Index        r61, r60, r26
  Index        r62, r50, r56
  Equal        r63, r61, r62
  JumpIfFalse  r63, L5
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r64, r6
  Len          r65, r64
  Move         r66, r19
L17:
  LessInt      r67, r66, r65
  JumpIfFalse  r67, L5
  Index        r69, r64, r66
  Index        r70, r69, r46
  Index        r71, r50, r26
  Equal        r72, r70, r71
  JumpIfFalse  r72, L6
  // join it2 in info_type on it2.id == mi.info_type_id
  IterPrep     r73, r2
  Len          r74, r73
  Const        r75, "info_type_id"
  Move         r76, r19
L16:
  LessInt      r77, r76, r74
  JumpIfFalse  r77, L6
  Index        r79, r73, r76
  Index        r80, r79, r26
  Index        r81, r69, r75
  Equal        r82, r80, r81
  JumpIfFalse  r82, L7
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  IterPrep     r83, r7
  Len          r84, r83
  Move         r85, r19
L15:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L7
  Index        r88, r83, r85
  Index        r89, r88, r46
  Index        r90, r50, r26
  Equal        r91, r89, r90
  JumpIfFalse  r91, L8
  // join it in info_type on it.id == miidx.info_type_id
  IterPrep     r92, r2
  Len          r93, r92
  Move         r94, r19
L14:
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L8
  Index        r97, r92, r94
  Index        r98, r97, r26
  Index        r99, r88, r75
  Equal        r100, r98, r99
  JumpIfFalse  r100, L9
  // where cn.country_code == "[de]" &&
  Index        r101, r22, r9
  Const        r102, "[de]"
  Equal        r103, r101, r102
  // ct.kind == "production companies" &&
  Index        r104, r40, r10
  Const        r105, "production companies"
  Equal        r106, r104, r105
  // it.info == "rating" &&
  Index        r107, r97, r11
  Equal        r108, r107, r13
  // it2.info == "release dates" &&
  Index        r109, r79, r11
  Const        r110, "release dates"
  Equal        r111, r109, r110
  // kt.kind == "movie"
  Index        r112, r60, r10
  Const        r113, "movie"
  Equal        r114, r112, r113
  // where cn.country_code == "[de]" &&
  Move         r115, r103
  JumpIfFalse  r115, L10
L10:
  // ct.kind == "production companies" &&
  Move         r116, r106
  JumpIfFalse  r116, L11
L11:
  // it.info == "rating" &&
  Move         r117, r108
  JumpIfFalse  r117, L12
L12:
  // it2.info == "release dates" &&
  Move         r118, r111
  JumpIfFalse  r118, L13
  Move         r118, r114
L13:
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r118, L9
  // release_date: mi.info,
  Move         r119, r12
  Index        r120, r69, r11
  // rating: miidx.info,
  Move         r121, r13
  Index        r122, r88, r11
  // german_movie: t.title
  Move         r123, r14
  Index        r124, r50, r15
  // release_date: mi.info,
  Move         r125, r119
  Move         r126, r120
  // rating: miidx.info,
  Move         r127, r121
  Move         r128, r122
  // german_movie: t.title
  Move         r129, r123
  Move         r130, r124
  // select {
  MakeMap      r131, 3, r125
  // from cn in company_name
  Append       r8, r8, r131
L9:
  // join it in info_type on it.id == miidx.info_type_id
  Const        r133, 1
  Add          r94, r94, r133
  Jump         L14
L8:
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Add          r85, r85, r133
  Jump         L15
L7:
  // join it2 in info_type on it2.id == mi.info_type_id
  Add          r76, r76, r133
  Jump         L16
L6:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r66, r66, r133
  Jump         L17
L5:
  // join kt in kind_type on kt.id == t.kind_id
  Add          r57, r57, r133
  Jump         L18
L4:
  // join t in title on t.id == mc.movie_id
  Add          r47, r47, r133
  Jump         L19
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r37, r37, r133
  Jump         L20
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r27, r27, r133
  Jump         L21
L1:
  // from cn in company_name
  AddInt       r18, r18, r133
  Jump         L22
L0:
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r134, r12
  Const        r135, []
  IterPrep     r136, r8
  Len          r137, r136
  Move         r138, r19
L24:
  LessInt      r139, r138, r137
  JumpIfFalse  r139, L23
  Index        r141, r136, r138
  Index        r142, r141, r12
  Index        r144, r141, r12
  Move         r145, r142
  MakeList     r146, 2, r144
  Append       r135, r135, r146
  AddInt       r138, r138, r133
  Jump         L24
L23:
  Sort         r135, r135
  Index        r149, r135, r19
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r150, r13
  Const        r151, []
  IterPrep     r152, r8
  Len          r153, r152
  Move         r154, r19
L26:
  LessInt      r155, r154, r153
  JumpIfFalse  r155, L25
  Index        r141, r152, r154
  Index        r157, r141, r13
  Index        r159, r141, r13
  Move         r160, r157
  MakeList     r161, 2, r159
  Append       r151, r151, r161
  AddInt       r154, r154, r133
  Jump         L26
L25:
  Sort         r151, r151
  Index        r164, r151, r19
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r165, r14
  Const        r166, []
  IterPrep     r167, r8
  Len          r168, r167
  Move         r169, r19
L28:
  LessInt      r170, r169, r168
  JumpIfFalse  r170, L27
  Index        r141, r167, r169
  Index        r172, r141, r14
  Index        r174, r141, r14
  Move         r175, r172
  MakeList     r176, 2, r174
  Append       r166, r166, r176
  AddInt       r169, r169, r133
  Jump         L28
L27:
  Sort         r166, r166
  Index        r179, r166, r19
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r180, r134
  Move         r181, r149
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r182, r150
  Move         r183, r164
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r184, r165
  Move         r185, r179
  // let result = {
  MakeMap      r186, 3, r180
  // json(result)
  JSON         r186
  // expect result == {
  Const        r187, {"german_movie": "Alpha", "rating": "6.0", "release_date": "1997-05-10"}
  Equal        r188, r186, r187
  Expect       r188
  Return       r0
