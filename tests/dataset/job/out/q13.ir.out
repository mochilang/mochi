func main (regs=48)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1}, {"country_code": "[us]", "id": 2}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
  // let kind_type = [
  Const        r3, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
  // let title = [
  Const        r4, [{"id": 10, "kind_id": 1, "title": "Alpha"}, {"id": 20, "kind_id": 1, "title": "Beta"}, {"id": 30, "kind_id": 2, "title": "Gamma"}]
L13:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10}, {"company_id": 1, "company_type_id": 1, "movie_id": 20}, {"company_id": 2, "company_type_id": 1, "movie_id": 30}]
  // let movie_info = [
  Const        r6, [{"info": "1997-05-10", "info_type_id": 2, "movie_id": 10}, {"info": "1998-03-20", "info_type_id": 2, "movie_id": 20}, {"info": "1999-07-30", "info_type_id": 2, "movie_id": 30}]
L6:
  // let movie_info_idx = [
  Const        r7, [{"info": "6.0", "info_type_id": 1, "movie_id": 10}, {"info": "7.5", "info_type_id": 1, "movie_id": 20}, {"info": "5.5", "info_type_id": 1, "movie_id": 30}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code == "[de]" &&
  Const        r9, "country_code"
  // ct.kind == "production companies" &&
  Const        r10, "kind"
  // it.info == "rating" &&
  Const        r11, "info"
L1:
  // release_date: mi.info,
  Const        r12, "release_date"
  // rating: miidx.info,
  Const        r13, "rating"
  // german_movie: t.title
  Const        r14, "german_movie"
L3:
  Const        r15, "title"
L10:
  // from cn in company_name
  IterPrep     r16, r0
L12:
  Len          r17, r16
  Const        r18, 0
  Move         r19, r18
L14:
  LessInt      r20, r19, r17
  JumpIfFalse  r20, L0
  Index        r17, r16, r19
  Move         r16, r17
L11:
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r17, r5
L8:
  Len          r5, r17
L0:
  Const        r21, "company_id"
  Const        r22, "id"
L4:
  Move         r23, r18
  LessInt      r24, r23, r5
  JumpIfFalse  r24, L1
L5:
  Index        r5, r17, r23
  Move         r24, r5
L7:
  Index        r17, r24, r21
  Index        r21, r16, r22
  Equal        r25, r17, r21
L9:
  JumpIfFalse  r25, L2
L2:
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r17, r1
  Len          r21, r17
  Const        r25, "company_type_id"
  Move         r1, r18
  LessInt      r26, r1, r21
  JumpIfFalse  r26, L2
  Index        r21, r17, r1
  Move         r26, r21
  Index        r17, r26, r22
L16:
  Index        r21, r24, r25
  Equal        r25, r17, r21
  JumpIfFalse  r25, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r21, r4
  Len          r25, r21
  Const        r4, "movie_id"
  Move         r27, r18
  LessInt      r28, r27, r25
  JumpIfFalse  r28, L3
  Index        r25, r21, r27
  Move         r28, r25
  Index        r21, r28, r22
  Index        r25, r24, r4
  Equal        r24, r21, r25
  JumpIfFalse  r24, L4
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r21, r3
  Len          r25, r21
  Const        r3, "kind_id"
  Move         r29, r18
  LessInt      r30, r29, r25
  JumpIfFalse  r30, L4
  Index        r25, r21, r29
  Move         r30, r25
  Index        r21, r30, r22
  Index        r25, r28, r3
  Equal        r3, r21, r25
  JumpIfFalse  r3, L5
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r21, r6
  Len          r25, r21
  Move         r3, r18
  LessInt      r6, r3, r25
  JumpIfFalse  r6, L5
  Index        r6, r21, r3
  Move         r21, r6
  Index        r6, r21, r4
  Index        r31, r28, r22
  Equal        r32, r6, r31
  JumpIfFalse  r32, L6
  // join it2 in info_type on it2.id == mi.info_type_id
  IterPrep     r6, r2
  Len          r31, r6
  Const        r32, "info_type_id"
  Move         r33, r18
  LessInt      r34, r33, r31
  JumpIfFalse  r34, L6
  Index        r31, r6, r33
  Move         r34, r31
  Index        r6, r34, r22
  Index        r31, r21, r32
  Equal        r35, r6, r31
  JumpIfFalse  r35, L7
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  IterPrep     r6, r7
  Len          r31, r6
  Move         r35, r18
  LessInt      r7, r35, r31
  JumpIfFalse  r7, L7
  Index        r31, r6, r35
  Move         r7, r31
  Index        r6, r7, r4
  Index        r31, r28, r22
  Equal        r4, r6, r31
  JumpIfFalse  r4, L8
  // join it in info_type on it.id == miidx.info_type_id
  IterPrep     r6, r2
  Len          r31, r6
  Move         r4, r18
  LessInt      r2, r4, r31
  JumpIfFalse  r2, L8
  Index        r31, r6, r4
  Move         r2, r31
  Index        r6, r2, r22
  Index        r31, r7, r32
  Equal        r22, r6, r31
  JumpIfFalse  r22, L2
  // where cn.country_code == "[de]" &&
  Index        r32, r16, r9
  Const        r6, "[de]"
  Equal        r22, r32, r6
  // ct.kind == "production companies" &&
  Index        r9, r26, r10
  Const        r16, "production companies"
  Equal        r32, r9, r16
  // it.info == "rating" &&
  Index        r6, r2, r11
  Equal        r26, r6, r13
  // it2.info == "release dates" &&
  Index        r9, r34, r11
  Const        r16, "release dates"
  Equal        r2, r9, r16
  // kt.kind == "movie"
  Index        r6, r30, r10
  Const        r34, "movie"
  Equal        r9, r6, r34
  // where cn.country_code == "[de]" &&
  Move         r10, r22
  JumpIfFalse  r10, L9
  Move         r10, r32
  // ct.kind == "production companies" &&
  JumpIfFalse  r10, L9
  Move         r10, r26
  // it.info == "rating" &&
  JumpIfFalse  r10, L9
  Move         r10, r2
  // it2.info == "release dates" &&
  JumpIfFalse  r10, L9
  Move         r10, r9
  // where cn.country_code == "[de]" &&
  JumpIfFalse  r10, L2
  // release_date: mi.info,
  Const        r30, "release_date"
  Index        r6, r21, r11
  // rating: miidx.info,
  Const        r34, "rating"
  Index        r22, r7, r11
  // german_movie: t.title
  Const        r32, "german_movie"
  Index        r26, r28, r15
  // release_date: mi.info,
  Move         r36, r30
  Move         r37, r6
  // rating: miidx.info,
  Move         r38, r34
  Move         r39, r22
  // german_movie: t.title
  Move         r40, r32
  Move         r41, r26
  // select {
  MakeMap      r2, 3, r36
  // from cn in company_name
  Append       r9, r8, r2
  Move         r8, r9
  // join it in info_type on it.id == miidx.info_type_id
  Const        r10, 1
  Add          r4, r4, r10
  Jump         L10
  // join miidx in movie_info_idx on miidx.movie_id == t.id
  Add          r35, r35, r10
  Jump         L5
  // join it2 in info_type on it2.id == mi.info_type_id
  Add          r33, r33, r10
  Jump         L6
  // join mi in movie_info on mi.movie_id == t.id
  Add          r3, r3, r10
  Jump         L7
  // join kt in kind_type on kt.id == t.kind_id
  Add          r29, r29, r10
  Jump         L8
  // join t in title on t.id == mc.movie_id
  Add          r27, r27, r10
  Jump         L11
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r1, r1, r10
  Jump         L12
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r23, r23, r10
  Jump         L13
  // from cn in company_name
  AddInt       r19, r19, r10
  Jump         L14
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Const        r21, "release_date"
  Const        r11, []
  IterPrep     r15, r8
  Len          r28, r15
  Move         r30, r18
  LessInt      r6, r30, r28
  JumpIfFalse  r6, L15
  Index        r34, r15, r30
  Move         r22, r34
  Index        r32, r22, r12
  Index        r26, r22, r12
  Move         r36, r26
  Move         r37, r32
  MakeList     r38, 2, r36
  Append       r39, r11, r38
  Move         r11, r39
  AddInt       r30, r30, r10
  Jump         L16
L15:
  Sort         r40, r11
  Move         r11, r40
  Index        r41, r11, r18
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Const        r2, "rating"
  Const        r9, []
  IterPrep     r19, r8
  Len          r20, r19
  Move         r23, r18
L18:
  LessInt      r5, r23, r20
  JumpIfFalse  r5, L17
  Index        r1, r19, r23
  Move         r22, r1
  Index        r17, r22, r13
  Index        r27, r22, r13
  Move         r36, r27
  Move         r37, r17
  MakeList     r24, 2, r36
  Append       r29, r9, r24
  Move         r9, r29
  AddInt       r23, r23, r10
  Jump         L18
L17:
  Sort         r25, r9
  Move         r9, r25
  Index        r3, r9, r18
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Const        r33, "german_movie"
  Const        r35, []
  IterPrep     r7, r8
  Len          r4, r7
  Move         r31, r18
L20:
  LessInt      r16, r31, r4
  JumpIfFalse  r16, L19
  Index        r28, r7, r31
  Move         r22, r28
  Index        r6, r22, r14
  Index        r15, r22, r14
  Move         r36, r15
  Move         r37, r6
  MakeList     r34, 2, r36
  Append       r12, r35, r34
  Move         r35, r12
  AddInt       r31, r31, r10
  Jump         L20
L19:
  Sort         r32, r35
  Move         r35, r32
  Index        r26, r35, r18
  // release_date: (from x in candidates sort by x.release_date select x.release_date)[0],
  Move         r42, r21
  Move         r43, r41
  // rating: (from x in candidates sort by x.rating select x.rating)[0],
  Move         r44, r2
  Move         r45, r3
  // german_movie: (from x in candidates sort by x.german_movie select x.german_movie)[0]
  Move         r46, r33
  Move         r47, r26
  // let result = {
  MakeMap      r30, 3, r42
  // json(result)
  JSON         r30
  // expect result == {
  Const        r38, {"german_movie": "Alpha", "rating": "6.0", "release_date": "1997-05-10"}
  Equal        r39, r30, r38
  Expect       r39
  Return       r0
