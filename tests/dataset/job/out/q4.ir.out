func main (regs=115)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
  // let title = [
  Const        r2, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r4, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
  // from it in info_type
  Const        r5, []
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r11, "rating"
  Const        r12, "title"
  // from it in info_type
  IterPrep     r13, r0
  Len          r14, r13
  Const        r16, 0
  Move         r15, r16
  LessInt      r17, r15, r14
  JumpIfFalse  r17, L0
  Index        r18, r13, r15
  Move         r19, r18
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r20, r4
  Len          r21, r20
  Const        r22, "id"
  Const        r23, "info_type_id"
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r11, "rating"
  Const        r12, "title"
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r16, 0
  Move         r24, r16
  LessInt      r25, r24, r21
  JumpIfFalse  r25, L1
  Index        r26, r20, r24
  Move         r27, r26
  Const        r22, "id"
  Index        r28, r19, r22
  Const        r23, "info_type_id"
  Index        r29, r27, r23
L8:
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r31, r2
  Len          r32, r31
  Const        r22, "id"
  Const        r10, "movie_id"
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // select { rating: mi.info, title: t.title }
  Const        r11, "rating"
  Const        r12, "title"
  // join t in title on t.id == mi.movie_id
  Const        r16, 0
  Move         r33, r16
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r35, r31, r33
  Move         r36, r35
  Const        r22, "id"
  Index        r37, r36, r22
  Const        r10, "movie_id"
  Index        r38, r27, r10
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r40, r3
  Len          r41, r40
  Const        r10, "movie_id"
  Const        r22, "id"
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // select { rating: mi.info, title: t.title }
  Const        r11, "rating"
  Const        r12, "title"
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r16, 0
  Move         r42, r16
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L3
  Index        r44, r40, r42
  Move         r45, r44
  Const        r10, "movie_id"
  Index        r46, r45, r10
  Const        r22, "id"
  Index        r47, r36, r22
  Equal        r48, r46, r47
  JumpIfFalse  r48, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r49, r1
  Len          r50, r49
  Const        r22, "id"
  Const        r51, "keyword_id"
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r11, "rating"
  Const        r12, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r16, 0
  Move         r52, r16
  LessInt      r53, r52, r50
  JumpIfFalse  r53, L4
  Index        r54, r49, r52
  Move         r55, r54
  Const        r22, "id"
  Index        r56, r55, r22
  Const        r51, "keyword_id"
  Index        r57, r45, r51
  Equal        r58, r56, r57
  JumpIfFalse  r58, L5
  // where it.info == "rating" &&
  Const        r6, "info"
  Index        r59, r19, r6
  // mi.info > "5.0" &&
  Index        r60, r27, r6
  Const        r61, "5.0"
  Less         r62, r61, r60
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  Index        r63, r36, r9
  Const        r64, 2005
  Less         r65, r64, r63
  // where it.info == "rating" &&
  Const        r11, "rating"
  Equal        r66, r59, r11
  // mk.movie_id == mi.movie_id
  Const        r10, "movie_id"
L7:
  Index        r67, r45, r10
  Index        r68, r27, r10
  Equal        r69, r67, r68
  // where it.info == "rating" &&
  Move         r70, r66
  JumpIfFalse  r70, L6
  Const        r7, "keyword"
  Index        r71, r55, r7
  // k.keyword.contains("sequel") &&
  Const        r72, "sequel"
  In           r73, r72, r71
  // where it.info == "rating" &&
  Move         r70, r73
  // k.keyword.contains("sequel") &&
  JumpIfFalse  r70, L6
  Move         r70, r62
  // mi.info > "5.0" &&
  JumpIfFalse  r70, L6
  Move         r70, r65
  // t.production_year > 2005 &&
  JumpIfFalse  r70, L6
  Move         r70, r69
  // where it.info == "rating" &&
  JumpIfFalse  r70, L5
  // select { rating: mi.info, title: t.title }
  Const        r74, "rating"
  Const        r6, "info"
  Index        r75, r27, r6
  Const        r76, "title"
  Const        r12, "title"
  Index        r77, r36, r12
  Move         r78, r74
  Move         r79, r75
  Move         r80, r76
  Move         r81, r77
  MakeMap      r82, 2, r78
  // from it in info_type
  Append       r83, r5, r82
  Move         r5, r83
  // join k in keyword on k.id == mk.keyword_id
  Const        r84, 1
  Add          r52, r52, r84
  Jump         L7
L6:
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Add          r24, r24, r84
  Jump         L8
L5:
  // rating: min(from r in rows select r.rating),
  Index        r92, r88, r90
  Move         r93, r92
  Const        r11, "rating"
L4:
  Index        r94, r93, r11
  Append       r95, r87, r94
  Move         r87, r95
L3:
  Const        r84, 1
  AddInt       r90, r90, r84
  Jump         L9
L2:
  Min          r96, r87
  // movie_title: min(from r in rows select r.title)
  Const        r97, "movie_title"
  Const        r98, []
L1:
  Const        r12, "title"
  IterPrep     r99, r5
  Len          r100, r99
L0:
  Const        r16, 0
  Move         r101, r16
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L10
  Index        r103, r99, r101
  Move         r93, r103
  Const        r12, "title"
L9:
  Index        r104, r93, r12
  Append       r105, r98, r104
  Move         r98, r105
  Const        r84, 1
  AddInt       r101, r101, r84
  Jump         L11
