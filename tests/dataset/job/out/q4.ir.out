func main (regs=35)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
  // let title = [
  Const        r2, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
L2:
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
L5:
  // let movie_info_idx = [
  Const        r4, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
  // from it in info_type
  Const        r5, []
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r9, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r10, "rating"
  Const        r11, "title"
L9:
  // from it in info_type
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L10:
  Move         r15, r14
  LessInt      r16, r15, r13
  JumpIfFalse  r16, L0
  Index        r13, r12, r15
L0:
  Move         r12, r13
L7:
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r13, r4
  Len          r4, r13
  Const        r17, "id"
L8:
  Const        r18, "info_type_id"
L1:
  Move         r19, r14
L6:
  LessInt      r20, r19, r4
  JumpIfFalse  r20, L1
  Index        r4, r13, r19
  Move         r20, r4
  Index        r13, r12, r17
L4:
  Index        r21, r20, r18
  Equal        r18, r13, r21
L3:
  JumpIfFalse  r18, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r13, r2
  Len          r21, r13
  Move         r18, r14
  LessInt      r2, r18, r21
  JumpIfFalse  r2, L2
  Index        r21, r13, r18
  Move         r2, r21
  Index        r13, r2, r17
  Index        r21, r20, r9
  Equal        r22, r13, r21
  JumpIfFalse  r22, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r21, r3
  Len          r22, r21
  Move         r3, r14
  LessInt      r23, r3, r22
  JumpIfFalse  r23, L3
  Index        r22, r21, r3
  Move         r23, r22
  Index        r21, r23, r9
  Index        r22, r2, r17
  Equal        r24, r21, r22
  JumpIfFalse  r24, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r21, r1
  Len          r22, r21
  Const        r1, "keyword_id"
  Move         r25, r14
  LessInt      r26, r25, r22
  JumpIfFalse  r26, L4
  Index        r22, r21, r25
  Move         r26, r22
  Index        r21, r26, r17
  Index        r22, r23, r1
  Equal        r17, r21, r22
  JumpIfFalse  r17, L5
  // where it.info == "rating" &&
  Index        r1, r12, r6
  // mi.info > "5.0" &&
  Index        r21, r20, r6
  Const        r22, "5.0"
  Less         r17, r22, r21
  // t.production_year > 2005 &&
  Index        r12, r2, r8
  Const        r22, 2005
  Less         r8, r22, r12
  // where it.info == "rating" &&
  Equal        r12, r1, r10
  // mk.movie_id == mi.movie_id
  Index        r22, r23, r9
  Index        r1, r20, r9
  Equal        r23, r22, r1
  // where it.info == "rating" &&
  Move         r9, r12
  JumpIfFalse  r9, L6
  Index        r22, r26, r7
  // k.keyword.contains("sequel") &&
  Const        r1, "sequel"
  In           r12, r1, r22
  // where it.info == "rating" &&
  Move         r9, r12
  // k.keyword.contains("sequel") &&
  JumpIfFalse  r9, L6
  Move         r9, r17
  // mi.info > "5.0" &&
  JumpIfFalse  r9, L6
  Move         r9, r8
  // t.production_year > 2005 &&
  JumpIfFalse  r9, L6
  Move         r9, r23
  // where it.info == "rating" &&
  JumpIfFalse  r9, L5
  // select { rating: mi.info, title: t.title }
  Const        r7, "rating"
  Index        r26, r20, r6
  Const        r17, "title"
  Index        r8, r2, r11
  Move         r27, r7
  Move         r28, r26
  Move         r29, r17
  Move         r30, r8
  MakeMap      r23, 2, r27
  // from it in info_type
  Append       r9, r5, r23
  Move         r5, r9
  // join k in keyword on k.id == mk.keyword_id
  Const        r22, 1
  Add          r25, r25, r22
  Jump         L7
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r3, r3, r22
  Jump         L8
  // join t in title on t.id == mi.movie_id
  Add          r18, r18, r22
  Jump         L9
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Add          r19, r19, r22
  Jump         L5
  // from it in info_type
  AddInt       r15, r15, r22
  Jump         L10
  // rating: min(from r in rows select r.rating),
  Const        r1, "rating"
  Const        r12, []
  IterPrep     r6, r5
  Len          r20, r6
  Move         r2, r14
L12:
  LessInt      r7, r2, r20
  JumpIfFalse  r7, L11
  Index        r26, r6, r2
  Move         r17, r26
  Index        r8, r17, r10
  Append       r27, r12, r8
  Move         r12, r27
  AddInt       r2, r2, r22
  Jump         L12
L11:
  Min          r28, r12
  // movie_title: min(from r in rows select r.title)
  Const        r29, "movie_title"
  Const        r30, []
  IterPrep     r23, r5
  Len          r9, r23
  Move         r15, r14
L14:
  LessInt      r16, r15, r9
  JumpIfFalse  r16, L13
  Index        r19, r23, r15
  Move         r17, r19
  Index        r4, r17, r11
  Append       r18, r30, r4
  Move         r30, r18
  AddInt       r15, r15, r22
  Jump         L14
L13:
  Min          r13, r30
  // rating: min(from r in rows select r.rating),
  Move         r31, r1
  Move         r32, r28
  // movie_title: min(from r in rows select r.title)
  Move         r33, r29
  Move         r34, r13
  // {
  MakeMap      r3, 2, r31
  Move         r24, r3
  // let result = [
  MakeList     r25, 1, r24
  // json(result)
  JSON         r25
  // expect result == [ { rating: "6.2", movie_title: "Alpha Movie" } ]
  Const        r21, [{"movie_title": "Alpha Movie", "rating": "6.2"}]
  Equal        r20, r25, r21
  Expect       r20
  Return       r0
