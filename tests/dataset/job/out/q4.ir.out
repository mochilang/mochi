func main (regs=26)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
L2:
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
L5:
  // let title = [
  Const        r2, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
L8:
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
L0:
  // let movie_info_idx = [
  Const        r4, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
  // from it in info_type
  Const        r5, []
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
L4:
  // mi.info > "5.0" &&
  Const        r9, "info"
L11:
  // t.production_year > 2005 &&
  Const        r10, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r11, "movie_id"
L1:
  Const        r12, "movie_id"
L9:
  // select { rating: mi.info, title: t.title }
  Const        r13, "rating"
L7:
  Const        r14, "info"
L6:
  Const        r15, "title"
L10:
  Const        r16, "title"
  // from it in info_type
  IterPrep     r17, r0
  Len          r6, r17
L3:
  Const        r7, 0
L14:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
L12:
  Index        r9, r17, r7
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r10, r4
  Len          r11, r10
  Const        r12, "id"
  Const        r13, "info_type_id"
  // where it.info == "rating" &&
  Const        r14, "info"
  // k.keyword.contains("sequel") &&
  Const        r15, "keyword"
  Const        r16, "contains"
  // mi.info > "5.0" &&
  Const        r6, "info"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r17, "movie_id"
  Const        r4, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r12, "rating"
  Const        r13, "info"
  Const        r14, "title"
  Const        r15, "title"
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r16, 0
  LessInt      r6, r16, r11
  JumpIfFalse  r6, L1
  Index        r8, r10, r16
  Const        r17, "id"
  Index        r4, r9, r17
  Const        r12, "info_type_id"
  Index        r13, r8, r12
  Equal        r14, r4, r13
  JumpIfFalse  r14, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r15, r2
  Len          r11, r15
  Const        r6, "id"
  Const        r10, "movie_id"
  // where it.info == "rating" &&
  Const        r17, "info"
  // k.keyword.contains("sequel") &&
  Const        r12, "keyword"
  Const        r4, "contains"
  // mi.info > "5.0" &&
  Const        r13, "info"
  // t.production_year > 2005 &&
  Const        r14, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r2, "movie_id"
  Const        r6, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r10, "rating"
  Const        r17, "info"
  Const        r12, "title"
  Const        r4, "title"
  // join t in title on t.id == mi.movie_id
  Const        r13, 0
  LessInt      r14, r13, r11
  JumpIfFalse  r14, L2
  Index        r2, r15, r13
  Const        r6, "id"
  Index        r10, r2, r6
  Const        r17, "movie_id"
  Index        r12, r8, r17
  Equal        r4, r10, r12
  JumpIfFalse  r4, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r11, r3
  Len          r14, r11
  Const        r15, "movie_id"
  Const        r6, "id"
  // where it.info == "rating" &&
  Const        r17, "info"
  // k.keyword.contains("sequel") &&
  Const        r10, "keyword"
  Const        r12, "contains"
  // mi.info > "5.0" &&
  Const        r4, "info"
  // t.production_year > 2005 &&
  Const        r3, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r15, "movie_id"
  Const        r6, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r17, "rating"
  Const        r10, "info"
  Const        r12, "title"
  Const        r4, "title"
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r3, 0
  LessInt      r15, r3, r14
  JumpIfFalse  r15, L3
  Index        r6, r11, r3
  Const        r17, "movie_id"
  Index        r10, r6, r17
  Const        r12, "id"
  Index        r4, r2, r12
  Equal        r14, r10, r4
  JumpIfFalse  r14, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r15, r1
  Len          r11, r15
  Const        r17, "id"
  Const        r12, "keyword_id"
  // where it.info == "rating" &&
  Const        r10, "info"
  // k.keyword.contains("sequel") &&
  Const        r4, "keyword"
  Const        r14, "contains"
  // mi.info > "5.0" &&
  Const        r1, "info"
  // t.production_year > 2005 &&
  Const        r17, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r12, "movie_id"
  Const        r10, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r4, "rating"
  Const        r14, "info"
  Const        r1, "title"
  Const        r17, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r12, 0
  LessInt      r10, r12, r11
  JumpIfFalse  r10, L4
  Index        r4, r15, r12
  Const        r14, "id"
  Index        r1, r4, r14
  Const        r17, "keyword_id"
  Index        r11, r6, r17
  Equal        r10, r1, r11
  JumpIfFalse  r10, L5
  // where it.info == "rating" &&
  Const        r15, "info"
  Index        r14, r9, r15
  // mi.info > "5.0" &&
  Const        r17, "info"
  Index        r1, r8, r17
  Const        r11, "5.0"
  Less         r10, r11, r1
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  Index        r15, r2, r9
  Const        r17, 2005
  Less         r1, r17, r15
  // where it.info == "rating" &&
  Const        r11, "rating"
  Equal        r9, r14, r11
  // mk.movie_id == mi.movie_id
  Const        r15, "movie_id"
  Index        r17, r6, r15
  Const        r14, "movie_id"
  Index        r11, r8, r14
  Equal        r6, r17, r11
  // where it.info == "rating" &&
  Move         r15, r9
  JumpIfFalse  r15, L4
  Const        r14, "keyword"
  Index        r17, r4, r14
  // k.keyword.contains("sequel") &&
  Const        r11, "sequel"
  In           r9, r11, r17
  JumpIfFalse  r9, L6
  // mi.info > "5.0" &&
  Move         r15, r10
  JumpIfFalse  r15, L7
  // t.production_year > 2005 &&
  Move         r4, r1
  JumpIfFalse  r4, L4
  Move         r4, r6
  // where it.info == "rating" &&
  JumpIfFalse  r4, L5
  // select { rating: mi.info, title: t.title }
  Const        r14, "rating"
  Const        r17, "info"
  Index        r11, r8, r17
  Const        r9, "title"
  Const        r10, "title"
  Index        r15, r2, r10
  Move         r18, r14
  Move         r19, r11
  Move         r20, r9
  Move         r21, r15
  MakeMap      r1, 2, r18
  // from it in info_type
  Append       r5, r5, r1
  // join k in keyword on k.id == mk.keyword_id
  Const        r6, 1
  Add          r12, r12, r6
  Jump         L1
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r4, 1
  Add          r3, r3, r4
  Jump         L8
  // join t in title on t.id == mi.movie_id
  Const        r8, 1
  Add          r13, r13, r8
  Jump         L9
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r17, 1
  Add          r16, r16, r17
  Jump         L10
  // from it in info_type
  Const        r2, 1
  AddInt       r7, r7, r2
  Jump         L11
  // rating: min(from r in rows select r.rating),
  Const        r14, "rating"
  Const        r11, []
  Const        r9, "rating"
  IterPrep     r15, r5
  Len          r18, r15
  Const        r19, 0
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L12
  Index        r21, r15, r19
  Const        r1, "rating"
  Index        r12, r21, r1
  Append       r11, r11, r12
  Const        r6, 1
  AddInt       r19, r19, r6
  Jump         L8
  Min          r4, r11
  // movie_title: min(from r in rows select r.title)
  Const        r13, "movie_title"
  Const        r8, []
  Const        r16, "title"
  IterPrep     r17, r5
  Len          r7, r17
  Const        r3, 0
  LessInt      r2, r3, r7
  JumpIfFalse  r2, L13
  Index        r21, r17, r3
  Const        r10, "title"
  Index        r9, r21, r10
  Append       r8, r8, r9
  Const        r18, 1
  AddInt       r3, r3, r18
  Jump         L14
L13:
  Min          r15, r8
  // rating: min(from r in rows select r.rating),
  Move         r22, r14
  Move         r23, r4
  // movie_title: min(from r in rows select r.title)
  Move         r24, r13
  Move         r25, r15
  // {
  MakeMap      r1, 2, r22
  // let result = [
  MakeList     r12, 1, r1
  // json(result)
  JSON         r12
  // expect result == [ { rating: "6.2", movie_title: "Alpha Movie" } ]
  Const        r20, [{"movie_title": "Alpha Movie", "rating": "6.2"}]
  Equal        r19, r12, r20
  Expect       r19
  Return       r0
