func main (regs=146)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  Move         r1, r0
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
  Move         r3, r2
  // let title = [
  Const        r4, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
  Move         r5, r4
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
  Move         r7, r6
  // let movie_info_idx = [
  Const        r8, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
  Move         r9, r8
  // from it in info_type
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L14:
  Less         r14, r13, r12
  JumpIfFalse  r14, L0
  Index        r15, r11, r13
  Move         r16, r15
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r17, r9
  Len          r18, r17
  Const        r19, 0
L13:
  Less         r20, r19, r18
  JumpIfFalse  r20, L1
  Index        r21, r17, r19
  Move         r22, r21
  Const        r23, "id"
  Index        r24, r16, r23
  Const        r25, "info_type_id"
  Index        r26, r22, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r28, r5
  Len          r29, r28
  Const        r30, 0
L12:
  Less         r31, r30, r29
  JumpIfFalse  r31, L2
  Index        r32, r28, r30
  Move         r33, r32
  Const        r34, "id"
  Index        r35, r33, r34
  Const        r36, "movie_id"
  Index        r37, r22, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r39, r7
  Len          r40, r39
  Const        r41, 0
L11:
  Less         r42, r41, r40
  JumpIfFalse  r42, L3
  Index        r43, r39, r41
  Move         r44, r43
  Const        r45, "movie_id"
  Index        r46, r44, r45
  Const        r47, "id"
  Index        r48, r33, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r50, r3
  Len          r51, r50
  Const        r52, 0
L10:
  Less         r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Const        r56, "id"
  Index        r57, r55, r56
  Const        r58, "keyword_id"
  Index        r59, r44, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L5
  // where it.info == "rating" &&
  Const        r61, "info"
  Index        r62, r16, r61
  // mi.info > "5.0" &&
  Const        r63, "info"
  Index        r64, r22, r63
  Const        r65, "5.0"
  Less         r66, r65, r64
  // t.production_year > 2005 &&
  Const        r67, "production_year"
  Index        r68, r33, r67
  Const        r69, 2005
  Less         r70, r69, r68
  // where it.info == "rating" &&
  Const        r71, "rating"
  Equal        r72, r62, r71
  // mk.movie_id == mi.movie_id
  Const        r73, "movie_id"
  Index        r74, r44, r73
  Const        r75, "movie_id"
  Index        r76, r22, r75
  Equal        r77, r74, r76
  // where it.info == "rating" &&
  Move         r78, r72
  JumpIfFalse  r78, L6
  Const        r79, "keyword"
  Index        r80, r55, r79
  // k.keyword.contains("sequel") &&
  Const        r81, "sequel"
  In           r82, r81, r80
  // where it.info == "rating" &&
  Move         r78, r82
L6:
  // k.keyword.contains("sequel") &&
  Move         r83, r78
  JumpIfFalse  r83, L7
  Move         r83, r66
L7:
  // mi.info > "5.0" &&
  Move         r84, r83
  JumpIfFalse  r84, L8
  Move         r84, r70
L8:
  // t.production_year > 2005 &&
  Move         r85, r84
  JumpIfFalse  r85, L9
  Move         r85, r77
L9:
  // where it.info == "rating" &&
  JumpIfFalse  r85, L5
  // select { rating: mi.info, title: t.title }
  Const        r86, "rating"
  Const        r87, "info"
  Index        r88, r22, r87
  Const        r89, "title"
  Const        r90, "title"
  Index        r91, r33, r90
  Move         r92, r86
  Move         r93, r88
  Move         r94, r89
  Move         r95, r91
  MakeMap      r96, 2, r92
  // from it in info_type
  Append       r97, r10, r96
  Move         r10, r97
L5:
  // join k in keyword on k.id == mk.keyword_id
  Const        r98, 1
  Add          r99, r52, r98
  Move         r52, r99
  Jump         L10
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r100, 1
  Add          r101, r41, r100
  Move         r41, r101
  Jump         L11
L3:
  // join t in title on t.id == mi.movie_id
  Const        r102, 1
  Add          r103, r30, r102
  Move         r30, r103
  Jump         L12
L2:
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r104, 1
  Add          r105, r19, r104
  Move         r19, r105
  Jump         L13
L1:
  // from it in info_type
  Const        r106, 1
  Add          r107, r13, r106
  Move         r13, r107
  Jump         L14
L0:
  // let rows =
  Move         r108, r10
  // rating: min(from r in rows select r.rating),
  Const        r109, "rating"
  Const        r110, []
  IterPrep     r111, r108
  Len          r112, r111
  Const        r113, 0
L16:
  Less         r114, r113, r112
  JumpIfFalse  r114, L15
  Index        r115, r111, r113
  Move         r116, r115
  Const        r117, "rating"
  Index        r118, r116, r117
  Append       r119, r110, r118
  Move         r110, r119
  Const        r120, 1
  Add          r121, r113, r120
  Move         r113, r121
  Jump         L16
L15:
  Min          r122, r110
  // movie_title: min(from r in rows select r.title)
  Const        r123, "movie_title"
  Const        r124, []
  IterPrep     r125, r108
  Len          r126, r125
  Const        r127, 0
L18:
  Less         r128, r127, r126
  JumpIfFalse  r128, L17
  Index        r129, r125, r127
  Move         r116, r129
  Const        r130, "title"
  Index        r131, r116, r130
  Append       r132, r124, r131
  Move         r124, r132
  Const        r133, 1
  Add          r134, r127, r133
  Move         r127, r134
  Jump         L18
L17:
  Min          r135, r124
  // rating: min(from r in rows select r.rating),
  Move         r136, r109
  Move         r137, r122
  // movie_title: min(from r in rows select r.title)
  Move         r138, r123
  Move         r139, r135
  // {
  MakeMap      r140, 2, r136
  Move         r141, r140
  // let result = [
  MakeList     r142, 1, r141
  Move         r143, r142
  // json(result)
  JSON         r143
  // expect result == [ { rating: "6.2", movie_title: "Alpha Movie" } ]
  Const        r144, [{"movie_title": "Alpha Movie", "rating": "6.2"}]
  Equal        r145, r143, r144
  Expect       r145
  Return       r0
