func main (regs=23)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
L8:
  // let title = [
  Const        r2, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
L5:
  // let movie_info_idx = [
  Const        r4, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
L1:
  // from it in info_type
  Const        r5, []
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
L6:
  // mk.movie_id == mi.movie_id
  Const        r9, "movie_id"
L3:
  // select { rating: mi.info, title: t.title }
  Const        r10, "rating"
  Const        r11, "title"
L10:
  // from it in info_type
  IterPrep     r12, r0
  Len          r13, r12
L0:
  Const        r14, 0
  Move         r15, r14
  LessInt      r16, r15, r13
  JumpIfFalse  r16, L0
L2:
  Index        r16, r12, r15
L7:
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r12, r4
L4:
  Len          r4, r12
  Const        r13, "id"
L9:
  Const        r17, "info_type_id"
  Move         r18, r14
  LessInt      r19, r18, r4
  JumpIfFalse  r19, L1
  Index        r19, r12, r18
  Index        r18, r16, r13
  Index        r12, r19, r17
  Equal        r17, r18, r12
  JumpIfFalse  r17, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r17, r2
  Len          r2, r17
  Move         r12, r14
  LessInt      r18, r12, r2
  JumpIfFalse  r18, L2
  Index        r2, r17, r12
  Index        r17, r2, r13
  Index        r4, r19, r9
  Equal        r20, r17, r4
  JumpIfFalse  r20, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r20, r3
  Len          r3, r20
  Move         r4, r14
  LessInt      r17, r4, r3
  JumpIfFalse  r17, L3
  Index        r17, r20, r4
  Index        r20, r17, r9
  Index        r3, r2, r13
  Equal        r21, r20, r3
  JumpIfFalse  r21, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r21, r1
  Len          r1, r21
  Const        r3, "keyword_id"
  Move         r20, r14
  LessInt      r22, r20, r1
  JumpIfFalse  r22, L4
  Index        r22, r21, r20
  Index        r21, r22, r13
  Index        r13, r17, r3
  Equal        r3, r21, r13
  JumpIfFalse  r3, L5
  // where it.info == "rating" &&
  Index        r3, r16, r6
  // mi.info > "5.0" &&
  Index        r16, r19, r6
  Const        r13, "5.0"
  Less         r21, r13, r16
  // t.production_year > 2005 &&
  Index        r13, r2, r8
  Const        r8, 2005
  Less         r16, r8, r13
  // where it.info == "rating" &&
  Equal        r8, r3, r10
  // mk.movie_id == mi.movie_id
  Index        r3, r17, r9
  Index        r17, r19, r9
  Equal        r9, r3, r17
  // where it.info == "rating" &&
  Move         r17, r8
  JumpIfFalse  r17, L6
  Index        r17, r22, r7
  // k.keyword.contains("sequel") &&
  Const        r7, "sequel"
  In           r8, r7, r17
  JumpIfFalse  r8, L7
  // mi.info > "5.0" &&
  Move         r8, r21
  JumpIfFalse  r8, L8
  // t.production_year > 2005 &&
  Move         r8, r16
  JumpIfFalse  r8, L7
  Move         r8, r9
  // where it.info == "rating" &&
  JumpIfFalse  r8, L5
  // select { rating: mi.info, title: t.title }
  Move         r8, r10
  Index        r9, r19, r6
  Move         r19, r11
  Index        r6, r2, r11
  Move         r2, r8
  Move         r8, r9
  Move         r9, r19
  Move         r19, r6
  MakeMap      r6, 2, r2
  // from it in info_type
  Append       r5, r5, r6
  // join k in keyword on k.id == mk.keyword_id
  Const        r6, 1
  Add          r20, r20, r6
  Jump         L9
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r4, r4, r6
  Jump         L9
  // join t in title on t.id == mi.movie_id
  Add          r12, r12, r6
  Jump         L2
  // from it in info_type
  AddInt       r15, r15, r6
  Jump         L0
  // rating: min(from r in rows select r.rating),
  Move         r22, r10
  Const        r18, []
  IterPrep     r12, r5
  Len          r15, r12
  Move         r20, r14
  LessInt      r4, r20, r15
  JumpIfFalse  r4, L0
  Index        r4, r12, r20
  Index        r12, r4, r10
  Append       r18, r18, r12
  AddInt       r20, r20, r6
  Jump         L10
  Min          r20, r18
  // movie_title: min(from r in rows select r.title)
  Const        r18, "movie_title"
  Const        r10, []
  IterPrep     r15, r5
  Len          r5, r15
  Move         r19, r14
L12:
  LessInt      r14, r19, r5
  JumpIfFalse  r14, L11
  Index        r4, r15, r19
  Index        r14, r4, r11
  Append       r10, r10, r14
  AddInt       r19, r19, r6
  Jump         L12
L11:
  Min          r14, r10
  // rating: min(from r in rows select r.rating),
  Move         r12, r22
  Move         r10, r20
  // movie_title: min(from r in rows select r.title)
  Move         r20, r18
  Move         r18, r14
  // {
  MakeMap      r14, 2, r12
  // let result = [
  MakeList     r18, 1, r14
  // json(result)
  JSON         r18
  // expect result == [ { rating: "6.2", movie_title: "Alpha Movie" } ]
  Const        r14, [{"movie_title": "Alpha Movie", "rating": "6.2"}]
  Equal        r20, r18, r14
  Expect       r20
  Return       r0
