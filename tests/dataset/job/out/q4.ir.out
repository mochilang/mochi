func main (regs=201)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "great sequel"}, {"id": 2, "keyword": "prequel"}]
  // let title = [
  Const        r2, [{"id": 10, "production_year": 2006, "title": "Alpha Movie"}, {"id": 20, "production_year": 2007, "title": "Beta Film"}, {"id": 30, "production_year": 2004, "title": "Old Film"}]
  // let movie_keyword = [
  Const        r3, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
  // let movie_info_idx = [
  Const        r4, [{"info": "6.2", "info_type_id": 1, "movie_id": 10}, {"info": "7.8", "info_type_id": 1, "movie_id": 20}, {"info": "4.5", "info_type_id": 1, "movie_id": 30}]
  // from it in info_type
  Const        r5, []
  // where it.info == "rating" &&
  Const        r6, "info"
  // k.keyword.contains("sequel") &&
  Const        r7, "keyword"
  Const        r8, "contains"
  // mi.info > "5.0" &&
  Const        r9, "info"
  // t.production_year > 2005 &&
  Const        r10, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r11, "movie_id"
  Const        r12, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r13, "rating"
  Const        r14, "info"
  Const        r15, "title"
  Const        r16, "title"
  // from it in info_type
  IterPrep     r17, r0
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L11:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r22, r17, r19
  Move         r23, r22
  // join mi in movie_info_idx on it.id == mi.info_type_id
  IterPrep     r24, r4
  Len          r25, r24
  Const        r26, "id"
  Const        r27, "info_type_id"
  // where it.info == "rating" &&
  Const        r28, "info"
  // k.keyword.contains("sequel") &&
  Const        r29, "keyword"
  Const        r30, "contains"
  // mi.info > "5.0" &&
  Const        r31, "info"
  // t.production_year > 2005 &&
  Const        r32, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r33, "movie_id"
  Const        r34, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r35, "rating"
  Const        r36, "info"
  Const        r37, "title"
  Const        r38, "title"
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r40, 0
  Move         r39, r40
L10:
  LessInt      r41, r39, r25
  JumpIfFalse  r41, L1
  Index        r42, r24, r39
  Move         r43, r42
  Const        r44, "id"
  Index        r45, r23, r44
  Const        r46, "info_type_id"
  Index        r47, r43, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L2
  // join t in title on t.id == mi.movie_id
  IterPrep     r49, r2
  Len          r50, r49
  Const        r51, "id"
  Const        r52, "movie_id"
  // where it.info == "rating" &&
  Const        r53, "info"
  // k.keyword.contains("sequel") &&
  Const        r54, "keyword"
  Const        r55, "contains"
  // mi.info > "5.0" &&
  Const        r56, "info"
  // t.production_year > 2005 &&
  Const        r57, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r58, "movie_id"
  Const        r59, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r60, "rating"
  Const        r61, "info"
  Const        r62, "title"
  Const        r63, "title"
  // join t in title on t.id == mi.movie_id
  Const        r65, 0
  Move         r64, r65
L9:
  LessInt      r66, r64, r50
  JumpIfFalse  r66, L2
  Index        r67, r49, r64
  Move         r68, r67
  Const        r69, "id"
  Index        r70, r68, r69
  Const        r71, "movie_id"
  Index        r72, r43, r71
  Equal        r73, r70, r72
  JumpIfFalse  r73, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r74, r3
  Len          r75, r74
  Const        r76, "movie_id"
  Const        r77, "id"
  // where it.info == "rating" &&
  Const        r78, "info"
  // k.keyword.contains("sequel") &&
  Const        r79, "keyword"
  Const        r80, "contains"
  // mi.info > "5.0" &&
  Const        r81, "info"
  // t.production_year > 2005 &&
  Const        r82, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r83, "movie_id"
  Const        r84, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r85, "rating"
  Const        r86, "info"
  Const        r87, "title"
  Const        r88, "title"
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r90, 0
  Move         r89, r90
L8:
  LessInt      r91, r89, r75
  JumpIfFalse  r91, L3
  Index        r92, r74, r89
  Move         r93, r92
  Const        r94, "movie_id"
  Index        r95, r93, r94
  Const        r96, "id"
  Index        r97, r68, r96
  Equal        r98, r95, r97
  JumpIfFalse  r98, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r99, r1
  Len          r100, r99
  Const        r101, "id"
  Const        r102, "keyword_id"
  // where it.info == "rating" &&
  Const        r103, "info"
  // k.keyword.contains("sequel") &&
  Const        r104, "keyword"
  Const        r105, "contains"
  // mi.info > "5.0" &&
  Const        r106, "info"
  // t.production_year > 2005 &&
  Const        r107, "production_year"
  // mk.movie_id == mi.movie_id
  Const        r108, "movie_id"
  Const        r109, "movie_id"
  // select { rating: mi.info, title: t.title }
  Const        r110, "rating"
  Const        r111, "info"
  Const        r112, "title"
  Const        r113, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r115, 0
  Move         r114, r115
L7:
  LessInt      r116, r114, r100
  JumpIfFalse  r116, L4
  Index        r117, r99, r114
  Move         r118, r117
  Const        r119, "id"
  Index        r120, r118, r119
  Const        r121, "keyword_id"
  Index        r122, r93, r121
  Equal        r123, r120, r122
  JumpIfFalse  r123, L5
  // where it.info == "rating" &&
  Const        r124, "info"
  Index        r125, r23, r124
  // mi.info > "5.0" &&
  Const        r126, "info"
  Index        r127, r43, r126
  Const        r128, "5.0"
  Less         r129, r128, r127
  // t.production_year > 2005 &&
  Const        r130, "production_year"
  Index        r131, r68, r130
  Const        r132, 2005
  Less         r133, r132, r131
  // where it.info == "rating" &&
  Const        r134, "rating"
  Equal        r135, r125, r134
  // mk.movie_id == mi.movie_id
  Const        r136, "movie_id"
  Index        r137, r93, r136
  Const        r138, "movie_id"
  Index        r139, r43, r138
  Equal        r140, r137, r139
  // where it.info == "rating" &&
  Move         r141, r135
  JumpIfFalse  r141, L6
  Const        r142, "keyword"
  Index        r143, r118, r142
  // k.keyword.contains("sequel") &&
  Const        r144, "sequel"
  In           r145, r144, r143
  // where it.info == "rating" &&
  Move         r141, r145
  // k.keyword.contains("sequel") &&
  JumpIfFalse  r141, L6
  Move         r141, r129
  // mi.info > "5.0" &&
  JumpIfFalse  r141, L6
  Move         r141, r133
  // t.production_year > 2005 &&
  JumpIfFalse  r141, L6
  Move         r141, r140
L6:
  // where it.info == "rating" &&
  JumpIfFalse  r141, L5
  // select { rating: mi.info, title: t.title }
  Const        r146, "rating"
  Const        r147, "info"
  Index        r148, r43, r147
  Const        r149, "title"
  Const        r150, "title"
  Index        r151, r68, r150
  Move         r152, r146
  Move         r153, r148
  Move         r154, r149
  Move         r155, r151
  MakeMap      r156, 2, r152
  // from it in info_type
  Append       r157, r5, r156
  Move         r5, r157
L5:
  // join k in keyword on k.id == mk.keyword_id
  Const        r158, 1
  Add          r114, r114, r158
  Jump         L7
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r159, 1
  Add          r89, r89, r159
  Jump         L8
L3:
  // join t in title on t.id == mi.movie_id
  Const        r160, 1
  Add          r64, r64, r160
  Jump         L9
L2:
  // join mi in movie_info_idx on it.id == mi.info_type_id
  Const        r161, 1
  Add          r39, r39, r161
  Jump         L10
L1:
  // from it in info_type
  Const        r162, 1
  AddInt       r19, r19, r162
  Jump         L11
L0:
  // rating: min(from r in rows select r.rating),
  Const        r163, "rating"
  Const        r164, []
  Const        r165, "rating"
  IterPrep     r166, r5
  Len          r167, r166
  Const        r169, 0
  Move         r168, r169
L13:
  LessInt      r170, r168, r167
  JumpIfFalse  r170, L12
  Index        r171, r166, r168
  Move         r172, r171
  Const        r173, "rating"
  Index        r174, r172, r173
  Append       r175, r164, r174
  Move         r164, r175
  Const        r176, 1
  AddInt       r168, r168, r176
  Jump         L13
L12:
  Min          r177, r164
  // movie_title: min(from r in rows select r.title)
  Const        r178, "movie_title"
  Const        r179, []
  Const        r180, "title"
  IterPrep     r181, r5
  Len          r182, r181
  Const        r184, 0
  Move         r183, r184
L15:
  LessInt      r185, r183, r182
  JumpIfFalse  r185, L14
  Index        r186, r181, r183
  Move         r172, r186
  Const        r187, "title"
  Index        r188, r172, r187
  Append       r189, r179, r188
  Move         r179, r189
  Const        r190, 1
  AddInt       r183, r183, r190
  Jump         L15
L14:
  Min          r191, r179
  // rating: min(from r in rows select r.rating),
  Move         r192, r163
  Move         r193, r177
  // movie_title: min(from r in rows select r.title)
  Move         r194, r178
  Move         r195, r191
  // {
  MakeMap      r196, 2, r192
  Move         r197, r196
  // let result = [
  MakeList     r198, 1, r197
  // json(result)
  JSON         r198
  // expect result == [ { rating: "6.2", movie_title: "Alpha Movie" } ]
  Const        r199, [{"movie_title": "Alpha Movie", "rating": "6.2"}]
  Equal        r200, r198, r199
  Expect       r200
  Return       r0
