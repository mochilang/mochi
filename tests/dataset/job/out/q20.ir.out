func main (regs=31)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete cast"}]
L16:
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Tony Stark"}, {"id": 2, "name": "Sherlock Holmes"}]
  // let complete_cast = [
  Const        r2, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let name = [
  Const        r3, [{"id": 1, "name": "Robert Downey Jr."}, {"id": 2, "name": "Another Actor"}]
L18:
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
  // let keyword = [
  Const        r5, [{"id": 10, "keyword": "superhero"}, {"id": 20, "keyword": "romance"}]
L17:
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 10, "movie_id": 1}, {"keyword_id": 20, "movie_id": 2}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}]
  // let title = [
  Const        r8, [{"id": 1, "kind_id": 1, "production_year": 2008, "title": "Iron Man"}, {"id": 2, "kind_id": 1, "production_year": 1940, "title": "Old Hero"}]
  // from cc in complete_cast
  Const        r9, []
L11:
  // where cct1.kind == "cast" &&
  Const        r10, "kind"
L12:
  // (!chn.name.contains("Sherlock")) &&
  Const        r11, "name"
  // k.keyword in [
  Const        r12, "keyword"
  // t.production_year > 1950
  Const        r13, "production_year"
  // select t.title
  Const        r14, "title"
  // from cc in complete_cast
  IterPrep     r15, r2
L21:
  Len          r2, r15
  Const        r16, 0
  Move         r17, r16
  LessInt      r18, r17, r2
  JumpIfFalse  r18, L0
L2:
  Index        r18, r15, r17
L13:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r15, r0
L20:
  Len          r2, r15
L15:
  Const        r19, "id"
  Const        r20, "subject_id"
  Move         r21, r16
L19:
  LessInt      r22, r21, r2
  JumpIfFalse  r22, L1
  Index        r22, r15, r21
  Index        r21, r22, r19
  Index        r15, r18, r20
  Equal        r20, r21, r15
  JumpIfFalse  r20, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r20, r0
  Len          r15, r20
  Const        r21, "status_id"
  Move         r2, r16
  LessInt      r23, r2, r15
  JumpIfFalse  r23, L2
  Index        r15, r20, r2
  Index        r20, r15, r19
  Index        r24, r18, r21
  Equal        r21, r20, r24
  JumpIfFalse  r21, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r21, r4
  Len          r4, r21
  Const        r24, "movie_id"
  Move         r20, r16
  LessInt      r25, r20, r4
  JumpIfFalse  r25, L3
  Index        r25, r21, r20
  Index        r21, r25, r24
  Index        r4, r18, r24
  Equal        r26, r21, r4
  JumpIfFalse  r26, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r26, r1
  Len          r1, r26
  Const        r4, "person_role_id"
  Move         r21, r16
  LessInt      r27, r21, r1
  JumpIfFalse  r27, L4
  Index        r27, r26, r21
  Index        r26, r27, r19
  Index        r1, r25, r4
  Equal        r4, r26, r1
  JumpIfFalse  r4, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r4, r3
  Len          r3, r4
  Const        r1, "person_id"
  Move         r26, r16
  LessInt      r28, r26, r3
  JumpIfFalse  r28, L5
  Index        r28, r4, r26
  Index        r4, r28, r19
  Index        r28, r25, r1
  Equal        r1, r4, r28
  JumpIfFalse  r1, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r1, r6
  Len          r6, r1
  Move         r28, r16
  LessInt      r25, r28, r6
  JumpIfFalse  r25, L6
  Index        r25, r1, r28
  Index        r1, r25, r24
  Index        r6, r18, r24
  Equal        r3, r1, r6
  JumpIfFalse  r3, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r3, r5
  Len          r5, r3
  Const        r1, "keyword_id"
  Move         r29, r16
  LessInt      r30, r29, r5
  JumpIfFalse  r30, L7
  Index        r30, r3, r29
  Index        r3, r30, r19
  Index        r5, r25, r1
  Equal        r1, r3, r5
  JumpIfFalse  r1, L8
  // join t in title on t.id == cc.movie_id
  IterPrep     r5, r8
  Len          r8, r5
  Move         r3, r16
  LessInt      r25, r3, r8
  JumpIfFalse  r25, L8
  Index        r25, r5, r3
  Index        r5, r25, r19
  Index        r8, r18, r24
  Equal        r24, r5, r8
  JumpIfFalse  r24, L9
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r24, r7
  Len          r7, r24
  Const        r8, "kind_id"
  Move         r5, r16
  LessInt      r18, r5, r7
  JumpIfFalse  r18, L9
  Index        r18, r24, r5
  Index        r7, r18, r19
  Index        r19, r25, r8
  Equal        r8, r7, r19
  JumpIfFalse  r8, L10
  // where cct1.kind == "cast" &&
  Index        r8, r22, r10
  // t.production_year > 1950
  Index        r22, r25, r13
  Const        r13, 1950
  Less         r19, r13, r22
  // where cct1.kind == "cast" &&
  Const        r13, "cast"
  Equal        r7, r8, r13
  // k.keyword in [
  Index        r13, r30, r12
  Const        r30, ["superhero", "sequel", "second-part", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence"]
  In           r12, r13, r30
  // kt.kind == "movie" &&
  Index        r30, r18, r10
  Const        r18, "movie"
  Equal        r13, r30, r18
  // where cct1.kind == "cast" &&
  Move         r18, r7
  JumpIfFalse  r18, L11
  Index        r18, r15, r10
  // cct2.kind.contains("complete") &&
  Const        r15, "complete"
  In           r10, r15, r18
  JumpIfFalse  r10, L12
  Index        r10, r27, r11
  // (!chn.name.contains("Sherlock")) &&
  Const        r15, "Sherlock"
  In           r18, r15, r10
  Not          r15, r18
  JumpIfFalse  r15, L13
  Index        r15, r27, r11
  // (chn.name.contains("Tony Stark") || chn.name.contains("Iron Man")) &&
  Const        r18, "Tony Stark"
  In           r10, r18, r15
  JumpIfTrue   r10, L13
  Index        r18, r27, r11
  Const        r11, "Iron Man"
  In           r10, r11, r18
  Move         r11, r10
  JumpIfFalse  r11, L12
  // ] &&
  Move         r11, r12
  JumpIfFalse  r11, L12
  // kt.kind == "movie" &&
  Move         r11, r13
  JumpIfFalse  r11, L14
  Move         r11, r19
L14:
  // where cct1.kind == "cast" &&
  JumpIfFalse  r11, L10
  // select t.title
  Index        r11, r25, r14
  // from cc in complete_cast
  Append       r9, r9, r11
L10:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r11, 1
  Add          r5, r5, r11
  Jump         L13
L9:
  // join t in title on t.id == cc.movie_id
  Add          r3, r3, r11
  Jump         L15
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r29, r29, r11
  Jump         L16
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r28, r28, r11
  Jump         L17
L6:
  // join n in name on n.id == ci.person_id
  Add          r26, r26, r11
  Jump         L18
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r21, r21, r11
  Jump         L19
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r20, r20, r11
  Jump         L13
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r2, r2, r11
  Jump         L20
L1:
  // from cc in complete_cast
  AddInt       r17, r17, r11
  Jump         L21
L0:
  // let result = [ { complete_downey_ironman_movie: min(matches) } ]
  Const        r22, "complete_downey_ironman_movie"
  Min          r11, r9
  Move         r9, r22
  Move         r22, r11
  MakeMap      r11, 1, r9
  MakeList     r22, 1, r11
  // json(result)
  JSON         r22
  // expect result == [ { complete_downey_ironman_movie: "Iron Man" } ]
  Const        r11, [{"complete_downey_ironman_movie": "Iron Man"}]
  Equal        r9, r22, r11
  Expect       r9
  Return       r0
