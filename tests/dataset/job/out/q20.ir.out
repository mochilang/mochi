func main (regs=156)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete cast"}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Tony Stark"}, {"id": 2, "name": "Sherlock Holmes"}]
  // let complete_cast = [
  Const        r2, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let name = [
  Const        r3, [{"id": 1, "name": "Robert Downey Jr."}, {"id": 2, "name": "Another Actor"}]
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
  // let keyword = [
  Const        r5, [{"id": 10, "keyword": "superhero"}, {"id": 20, "keyword": "romance"}]
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 10, "movie_id": 1}, {"keyword_id": 20, "movie_id": 2}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}]
  // let title = [
  Const        r8, [{"id": 1, "kind_id": 1, "production_year": 2008, "title": "Iron Man"}, {"id": 2, "kind_id": 1, "production_year": 1940, "title": "Old Hero"}]
  // from cc in complete_cast
  Const        r9, []
  // where cct1.kind == "cast" &&
  Const        r10, "kind"
  // (!chn.name.contains("Sherlock")) &&
  Const        r12, "name"
  // k.keyword in [
  Const        r13, "keyword"
  // t.production_year > 1950
  Const        r14, "production_year"
  // select t.title
  Const        r15, "title"
  // from cc in complete_cast
  IterPrep     r16, r2
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
L26:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r22, r16, r18
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r23, r0
  Len          r24, r23
  Const        r25, "id"
  Const        r26, "subject_id"
  Move         r27, r19
L25:
  LessInt      r28, r27, r24
  JumpIfFalse  r28, L1
  Index        r30, r23, r27
  Index        r31, r30, r25
  Index        r32, r22, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, "status_id"
  Move         r37, r19
L24:
  LessInt      r38, r37, r35
  JumpIfFalse  r38, L2
  Index        r40, r34, r37
  Index        r41, r40, r25
  Index        r42, r22, r36
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r44, r4
  Len          r45, r44
  Const        r46, "movie_id"
  Move         r47, r19
L23:
  LessInt      r48, r47, r45
  JumpIfFalse  r48, L3
  Index        r50, r44, r47
  Index        r51, r50, r46
  Index        r52, r22, r46
  Equal        r53, r51, r52
  JumpIfFalse  r53, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r54, r1
  Len          r55, r54
  Const        r56, "person_role_id"
  Move         r57, r19
L22:
  LessInt      r58, r57, r55
  JumpIfFalse  r58, L4
  Index        r60, r54, r57
  Index        r61, r60, r25
  Index        r62, r50, r56
  Equal        r63, r61, r62
  JumpIfFalse  r63, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r64, r3
  Len          r65, r64
  Const        r66, "person_id"
  Move         r67, r19
L21:
  LessInt      r68, r67, r65
  JumpIfFalse  r68, L5
  Index        r70, r64, r67
  Index        r71, r70, r25
  Index        r72, r50, r66
  Equal        r73, r71, r72
  JumpIfFalse  r73, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r74, r6
  Len          r75, r74
  Move         r76, r19
L20:
  LessInt      r77, r76, r75
  JumpIfFalse  r77, L6
  Index        r79, r74, r76
  Index        r80, r79, r46
  Index        r81, r22, r46
  Equal        r82, r80, r81
  JumpIfFalse  r82, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r83, r5
  Len          r84, r83
  Const        r85, "keyword_id"
  Move         r86, r19
L19:
  LessInt      r87, r86, r84
  JumpIfFalse  r87, L7
  Index        r89, r83, r86
  Index        r90, r89, r25
  Index        r91, r79, r85
  Equal        r92, r90, r91
  JumpIfFalse  r92, L8
  // join t in title on t.id == cc.movie_id
  IterPrep     r93, r8
  Len          r94, r93
  Move         r95, r19
L18:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L8
  Index        r98, r93, r95
  Index        r99, r98, r25
  Index        r100, r22, r46
  Equal        r101, r99, r100
  JumpIfFalse  r101, L9
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r102, r7
  Len          r103, r102
  Const        r104, "kind_id"
  Move         r105, r19
L17:
  LessInt      r106, r105, r103
  JumpIfFalse  r106, L9
  Index        r108, r102, r105
  Index        r109, r108, r25
  Index        r110, r98, r104
  Equal        r111, r109, r110
  JumpIfFalse  r111, L10
  // where cct1.kind == "cast" &&
  Index        r112, r30, r10
  // t.production_year > 1950
  Index        r113, r98, r14
  Const        r114, 1950
  Less         r115, r114, r113
  // where cct1.kind == "cast" &&
  Const        r116, "cast"
  Equal        r117, r112, r116
  // k.keyword in [
  Index        r118, r89, r13
  Const        r119, ["superhero", "sequel", "second-part", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence"]
  In           r120, r118, r119
  // kt.kind == "movie" &&
  Index        r121, r108, r10
  Const        r122, "movie"
  Equal        r123, r121, r122
  // where cct1.kind == "cast" &&
  Move         r124, r117
  JumpIfFalse  r124, L11
  Index        r125, r40, r10
  // cct2.kind.contains("complete") &&
  Const        r126, "complete"
  In           r128, r126, r125
L11:
  JumpIfFalse  r128, L12
  Index        r129, r60, r12
  // (!chn.name.contains("Sherlock")) &&
  Const        r130, "Sherlock"
  In           r131, r130, r129
  Not          r133, r131
L12:
  JumpIfFalse  r133, L13
  Index        r134, r60, r12
  // (chn.name.contains("Tony Stark") || chn.name.contains("Iron Man")) &&
  Const        r135, "Tony Stark"
  In           r137, r135, r134
  JumpIfTrue   r137, L13
  Index        r138, r60, r12
  Const        r139, "Iron Man"
  In           r137, r139, r138
L13:
  Move         r141, r137
  JumpIfFalse  r141, L14
L14:
  // ] &&
  Move         r142, r120
  JumpIfFalse  r142, L15
L15:
  // kt.kind == "movie" &&
  Move         r143, r123
  JumpIfFalse  r143, L16
  Move         r143, r115
L16:
  // where cct1.kind == "cast" &&
  JumpIfFalse  r143, L10
  // select t.title
  Index        r144, r98, r15
  // from cc in complete_cast
  Append       r9, r9, r144
L10:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r146, 1
  Add          r105, r105, r146
  Jump         L17
L9:
  // join t in title on t.id == cc.movie_id
  Add          r95, r95, r146
  Jump         L18
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r86, r86, r146
  Jump         L19
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r76, r76, r146
  Jump         L20
L6:
  // join n in name on n.id == ci.person_id
  Add          r67, r67, r146
  Jump         L21
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r57, r57, r146
  Jump         L22
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r47, r47, r146
  Jump         L23
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r37, r37, r146
  Jump         L24
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Jump         L25
L1:
  // from cc in complete_cast
  AddInt       r18, r18, r146
  Jump         L26
L0:
  // let result = [ { complete_downey_ironman_movie: min(matches) } ]
  Const        r147, "complete_downey_ironman_movie"
  Min          r148, r9
  Move         r149, r147
  Move         r150, r148
  MakeMap      r152, 1, r149
  MakeList     r153, 1, r152
  // json(result)
  JSON         r153
  // expect result == [ { complete_downey_ironman_movie: "Iron Man" } ]
  Const        r154, [{"complete_downey_ironman_movie": "Iron Man"}]
  Equal        r155, r153, r154
  Expect       r155
  Return       r0
