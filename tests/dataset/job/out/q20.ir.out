func main (regs=38)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete cast"}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Tony Stark"}, {"id": 2, "name": "Sherlock Holmes"}]
L20:
  // let complete_cast = [
  Const        r2, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let name = [
  Const        r3, [{"id": 1, "name": "Robert Downey Jr."}, {"id": 2, "name": "Another Actor"}]
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "person_id": 1, "person_role_id": 1}, {"movie_id": 2, "person_id": 2, "person_role_id": 2}]
  // let keyword = [
  Const        r5, [{"id": 10, "keyword": "superhero"}, {"id": 20, "keyword": "romance"}]
L16:
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 10, "movie_id": 1}, {"keyword_id": 20, "movie_id": 2}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}]
  // let title = [
  Const        r8, [{"id": 1, "kind_id": 1, "production_year": 2008, "title": "Iron Man"}, {"id": 2, "kind_id": 1, "production_year": 1940, "title": "Old Hero"}]
  // from cc in complete_cast
  Const        r9, []
  // where cct1.kind == "cast" &&
  Const        r10, "kind"
  // cct2.kind.contains("complete") &&
  Const        r11, "contains"
  // (!chn.name.contains("Sherlock")) &&
  Const        r11, "name"
  // k.keyword in [
  Const        r12, "keyword"
  // t.production_year > 1950
  Const        r13, "production_year"
  // select t.title
  Const        r14, "title"
L14:
  // from cc in complete_cast
  IterPrep     r15, r2
  Len          r2, r15
L22:
  Const        r16, 0
L21:
  Move         r17, r16
  LessInt      r18, r17, r2
L18:
  JumpIfFalse  r18, L0
  Index        r2, r15, r17
  Move         r15, r2
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r2, r0
  Len          r19, r2
  Const        r20, "id"
  Const        r21, "subject_id"
L17:
  Move         r22, r16
L19:
  LessInt      r23, r22, r19
  JumpIfFalse  r23, L1
  Index        r19, r2, r22
  Move         r23, r19
L15:
  Index        r2, r23, r20
L13:
  Index        r24, r15, r21
  Equal        r21, r2, r24
  JumpIfFalse  r21, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r2, r0
  Len          r24, r2
  Const        r21, "status_id"
  Move         r25, r16
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L2
  Index        r24, r2, r25
  Move         r26, r24
  Index        r2, r26, r20
  Index        r24, r15, r21
  Equal        r21, r2, r24
  JumpIfFalse  r21, L3
  // join ci in cast_info on ci.movie_id == cc.movie_id
  IterPrep     r24, r4
  Len          r21, r24
  Const        r4, "movie_id"
  Move         r27, r16
  LessInt      r28, r27, r21
  JumpIfFalse  r28, L3
  Index        r21, r24, r27
  Move         r28, r21
  Index        r24, r28, r4
  Index        r21, r15, r4
  Equal        r29, r24, r21
  JumpIfFalse  r29, L4
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r24, r1
  Len          r21, r24
  Const        r1, "person_role_id"
  Move         r30, r16
  LessInt      r31, r30, r21
  JumpIfFalse  r31, L4
  Index        r21, r24, r30
  Move         r31, r21
  Index        r24, r31, r20
  Index        r21, r28, r1
  Equal        r1, r24, r21
  JumpIfFalse  r1, L5
  // join n in name on n.id == ci.person_id
  IterPrep     r24, r3
  Len          r21, r24
  Const        r1, "person_id"
  Move         r3, r16
  LessInt      r32, r3, r21
  JumpIfFalse  r32, L5
  Index        r32, r24, r3
  Move         r24, r32
  Index        r32, r24, r20
  Index        r24, r28, r1
  Equal        r28, r32, r24
  JumpIfFalse  r28, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r1, r6
  Len          r32, r1
  Move         r24, r16
  LessInt      r28, r24, r32
  JumpIfFalse  r28, L6
  Index        r6, r1, r24
  Move         r32, r6
  Index        r1, r32, r4
  Index        r6, r15, r4
  Equal        r33, r1, r6
  JumpIfFalse  r33, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r1, r5
  Len          r6, r1
  Const        r33, "keyword_id"
  Move         r5, r16
  LessInt      r34, r5, r6
  JumpIfFalse  r34, L7
  Index        r6, r1, r5
  Move         r34, r6
  Index        r1, r34, r20
  Index        r35, r32, r33
  Equal        r32, r1, r35
  JumpIfFalse  r32, L8
  // join t in title on t.id == cc.movie_id
  IterPrep     r33, r8
  Len          r1, r33
  Move         r35, r16
  LessInt      r32, r35, r1
  JumpIfFalse  r32, L8
  Index        r8, r33, r35
  Move         r1, r8
  Index        r32, r1, r20
  Index        r33, r15, r4
  Equal        r8, r32, r33
  JumpIfFalse  r8, L9
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r15, r7
  Len          r4, r15
  Const        r32, "kind_id"
  Move         r8, r16
  LessInt      r7, r8, r4
  JumpIfFalse  r7, L9
  Index        r16, r15, r8
  Move         r4, r16
  Index        r7, r4, r20
  Index        r15, r1, r32
  Equal        r16, r7, r15
  JumpIfFalse  r16, L10
  // where cct1.kind == "cast" &&
  Index        r20, r23, r10
  // t.production_year > 1950
  Index        r32, r1, r13
  Const        r7, 1950
  Less         r15, r7, r32
  // where cct1.kind == "cast" &&
  Const        r23, "cast"
  Equal        r13, r20, r23
  // k.keyword in [
  Index        r32, r34, r12
  Const        r7, ["superhero", "sequel", "second-part", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence"]
  In           r20, r32, r7
  // kt.kind == "movie" &&
  Index        r23, r4, r10
  Const        r12, "movie"
  Equal        r34, r23, r12
  // where cct1.kind == "cast" &&
  Move         r32, r13
  JumpIfFalse  r32, L11
  Index        r7, r26, r10
  // cct2.kind.contains("complete") &&
  Const        r4, "complete"
  In           r23, r4, r7
  // where cct1.kind == "cast" &&
  Move         r32, r23
  // cct2.kind.contains("complete") &&
  JumpIfFalse  r32, L11
  Index        r12, r31, r11
  // (!chn.name.contains("Sherlock")) &&
  Const        r13, "Sherlock"
  In           r10, r13, r12
  Not          r26, r10
  // cct2.kind.contains("complete") &&
  Move         r32, r26
  // (!chn.name.contains("Sherlock")) &&
  JumpIfFalse  r32, L11
  Index        r7, r31, r11
  // (chn.name.contains("Tony Stark") || chn.name.contains("Iron Man")) &&
  Const        r4, "Tony Stark"
  In           r23, r4, r7
  Move         r12, r23
  JumpIfTrue   r12, L12
  Index        r13, r31, r11
  Const        r10, "Iron Man"
  In           r26, r10, r13
  Move         r12, r26
L12:
  // (!chn.name.contains("Sherlock")) &&
  Move         r32, r12
  // (chn.name.contains("Tony Stark") || chn.name.contains("Iron Man")) &&
  JumpIfFalse  r32, L11
  Move         r32, r20
  // ] &&
  JumpIfFalse  r32, L11
  Move         r32, r34
  // kt.kind == "movie" &&
  JumpIfFalse  r32, L11
  Move         r32, r15
L11:
  // where cct1.kind == "cast" &&
  JumpIfFalse  r32, L10
  // select t.title
  Index        r7, r1, r14
  // from cc in complete_cast
  Append       r4, r9, r7
  Move         r9, r4
L10:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r23, 1
  Add          r8, r8, r23
  Jump         L13
L9:
  // join t in title on t.id == cc.movie_id
  Add          r35, r35, r23
  Jump         L14
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r5, r5, r23
  Jump         L15
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r24, r24, r23
  Jump         L16
L6:
  // join n in name on n.id == ci.person_id
  Add          r3, r3, r23
  Jump         L17
L5:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r30, r30, r23
  Jump         L18
L4:
  // join ci in cast_info on ci.movie_id == cc.movie_id
  Add          r27, r27, r23
  Jump         L19
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r25, r25, r23
  Jump         L20
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r22, r22, r23
  Jump         L21
L1:
  // from cc in complete_cast
  AddInt       r17, r17, r23
  Jump         L22
L0:
  // let result = [ { complete_downey_ironman_movie: min(matches) } ]
  Const        r11, "complete_downey_ironman_movie"
  Min          r31, r9
  Move         r36, r11
  Move         r37, r31
  MakeMap      r15, 1, r36
  Move         r20, r15
  MakeList     r32, 1, r20
  // json(result)
  JSON         r32
  // expect result == [ { complete_downey_ironman_movie: "Iron Man" } ]
  Const        r12, [{"complete_downey_ironman_movie": "Iron Man"}]
  Equal        r13, r32, r12
  Expect       r13
  Return       r0
