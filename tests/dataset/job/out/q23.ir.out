func main (regs=255)
  // let complete_cast = [
  Const        r0, [{"movie_id": 1, "status_id": 1}, {"movie_id": 2, "status_id": 2}]
  Move         r1, r0
  // let comp_cast_type = [
  Const        r2, [{"id": 1, "kind": "complete+verified"}, {"id": 2, "kind": "partial"}]
  Move         r3, r2
  // let company_name = [
  Const        r4, [{"country_code": "[us]", "id": 1}, {"country_code": "[gb]", "id": 2}]
  Move         r5, r4
  // let company_type = [
  Const        r6, [{"id": 1}, {"id": 2}]
  Move         r7, r6
  // let info_type = [
  Const        r8, [{"id": 1, "info": "release dates"}, {"id": 2, "info": "other"}]
  Move         r9, r8
  // let keyword = [
  Const        r10, [{"id": 1, "keyword": "internet"}, {"id": 2, "keyword": "other"}]
  Move         r11, r10
  // let kind_type = [
  Const        r12, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "series"}]
  Move         r13, r12
  // let movie_companies = [
  Const        r14, [{"company_id": 1, "company_type_id": 1, "movie_id": 1}, {"company_id": 2, "company_type_id": 2, "movie_id": 2}]
  Move         r15, r14
  // let movie_info = [
  Const        r16, [{"info": "USA: May 2005", "info_type_id": 1, "movie_id": 1, "note": "internet release"}, {"info": "USA: April 1998", "info_type_id": 1, "movie_id": 2, "note": "theater"}]
  Move         r17, r16
  // let movie_keyword = [
  Const        r18, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  Move         r19, r18
  // let title = [
  Const        r20, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Web Movie"}, {"id": 2, "kind_id": 1, "production_year": 1998, "title": "Old Movie"}]
  Move         r21, r20
  // from cc in complete_cast
  Const        r22, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L30:
  Less         r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r27, r23, r25
  Move         r28, r27
  // join cct1 in comp_cast_type on cct1.id == cc.status_id
  IterPrep     r29, r3
  Len          r30, r29
  Const        r31, 0
L29:
  Less         r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r33, r29, r31
  Move         r34, r33
  Const        r35, "id"
  Index        r36, r34, r35
  Const        r37, "status_id"
  Index        r38, r28, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join t in title on t.id == cc.movie_id
  IterPrep     r40, r21
  Len          r41, r40
  Const        r42, 0
L28:
  Less         r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r44, r40, r42
  Move         r45, r44
  Const        r46, "id"
  Index        r47, r45, r46
  Const        r48, "movie_id"
  Index        r49, r28, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r51, r13
  Len          r52, r51
  Const        r53, 0
L27:
  Less         r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r55, r51, r53
  Move         r56, r55
  Const        r57, "id"
  Index        r58, r56, r57
  Const        r59, "kind_id"
  Index        r60, r45, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r62, r17
  Len          r63, r62
  Const        r64, 0
L26:
  Less         r65, r64, r63
  JumpIfFalse  r65, L4
  Index        r66, r62, r64
  Move         r67, r66
  Const        r68, "movie_id"
  Index        r69, r67, r68
  Const        r70, "id"
  Index        r71, r45, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r73, r9
  Len          r74, r73
  Const        r75, 0
L25:
  Less         r76, r75, r74
  JumpIfFalse  r76, L5
  Index        r77, r73, r75
  Move         r78, r77
  Const        r79, "id"
  Index        r80, r78, r79
  Const        r81, "info_type_id"
  Index        r82, r67, r81
  Equal        r83, r80, r82
  JumpIfFalse  r83, L6
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r84, r19
  Len          r85, r84
  Const        r86, 0
L24:
  Less         r87, r86, r85
  JumpIfFalse  r87, L6
  Index        r88, r84, r86
  Move         r89, r88
  Const        r90, "movie_id"
  Index        r91, r89, r90
  Const        r92, "id"
  Index        r93, r45, r92
  Equal        r94, r91, r93
  JumpIfFalse  r94, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r95, r11
  Len          r96, r95
  Const        r97, 0
L23:
  Less         r98, r97, r96
  JumpIfFalse  r98, L7
  Index        r99, r95, r97
  Move         r100, r99
  Const        r101, "id"
  Index        r102, r100, r101
  Const        r103, "keyword_id"
  Index        r104, r89, r103
  Equal        r105, r102, r104
  JumpIfFalse  r105, L8
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r106, r15
  Len          r107, r106
  Const        r108, 0
L22:
  Less         r109, r108, r107
  JumpIfFalse  r109, L8
  Index        r110, r106, r108
  Move         r111, r110
  Const        r112, "movie_id"
  Index        r113, r111, r112
  Const        r114, "id"
  Index        r115, r45, r114
  Equal        r116, r113, r115
  JumpIfFalse  r116, L9
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r117, r5
  Len          r118, r117
  Const        r119, 0
L21:
  Less         r120, r119, r118
  JumpIfFalse  r120, L9
  Index        r121, r117, r119
  Move         r122, r121
  Const        r123, "id"
  Index        r124, r122, r123
  Const        r125, "company_id"
  Index        r126, r111, r125
  Equal        r127, r124, r126
  JumpIfFalse  r127, L10
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r128, r7
  Len          r129, r128
  Const        r130, 0
L20:
  Less         r131, r130, r129
  JumpIfFalse  r131, L10
  Index        r132, r128, r130
  Move         r133, r132
  Const        r134, "id"
  Index        r135, r133, r134
  Const        r136, "company_type_id"
  Index        r137, r111, r136
  Equal        r138, r135, r137
  JumpIfFalse  r138, L11
  // where cct1.kind == "complete+verified" &&
  Const        r139, "kind"
  Index        r140, r34, r139
  // t.production_year > 2000
  Const        r141, "production_year"
  Index        r142, r45, r141
  Const        r143, 2000
  Less         r144, r143, r142
  // where cct1.kind == "complete+verified" &&
  Const        r145, "complete+verified"
  Equal        r146, r140, r145
  // cn.country_code == "[us]" &&
  Const        r147, "country_code"
  Index        r148, r122, r147
  Const        r149, "[us]"
  Equal        r150, r148, r149
  // it1.info == "release dates" &&
  Const        r151, "info"
  Index        r152, r78, r151
  Const        r153, "release dates"
  Equal        r154, r152, r153
  // kt.kind == "movie" &&
  Const        r155, "kind"
  Index        r156, r56, r155
  Const        r157, "movie"
  Equal        r158, r156, r157
  // where cct1.kind == "complete+verified" &&
  Move         r159, r146
  JumpIfFalse  r159, L12
  Move         r159, r150
L12:
  // cn.country_code == "[us]" &&
  Move         r160, r159
  JumpIfFalse  r160, L13
  Move         r160, r154
L13:
  // it1.info == "release dates" &&
  Move         r161, r160
  JumpIfFalse  r161, L14
  Move         r161, r158
L14:
  // kt.kind == "movie" &&
  Move         r162, r161
  JumpIfFalse  r162, L15
  Const        r163, "note"
  Index        r164, r67, r163
  // mi.note.contains("internet") &&
  Const        r165, "internet"
  In           r166, r165, r164
  // kt.kind == "movie" &&
  Move         r162, r166
L15:
  // mi.note.contains("internet") &&
  Move         r167, r162
  JumpIfFalse  r167, L16
  Const        r168, "info"
  Index        r169, r67, r168
  // (mi.info.contains("USA:") && (mi.info.contains("199") || mi.info.contains("200"))) &&
  Const        r170, "USA:"
  In           r171, r170, r169
  Move         r172, r171
  JumpIfFalse  r172, L17
  Const        r173, "info"
  Index        r174, r67, r173
  Const        r175, "199"
  In           r176, r175, r174
  Move         r177, r176
  JumpIfTrue   r177, L18
  Const        r178, "info"
  Index        r179, r67, r178
  Const        r180, "200"
  In           r181, r180, r179
  Move         r177, r181
L18:
  Move         r172, r177
L17:
  // mi.note.contains("internet") &&
  Move         r167, r172
L16:
  // (mi.info.contains("USA:") && (mi.info.contains("199") || mi.info.contains("200"))) &&
  Move         r182, r167
  JumpIfFalse  r182, L19
  Move         r182, r144
L19:
  // where cct1.kind == "complete+verified" &&
  JumpIfFalse  r182, L11
  // select { movie_kind: kt.kind, complete_us_internet_movie: t.title }
  Const        r183, "movie_kind"
  Const        r184, "kind"
  Index        r185, r56, r184
  Const        r186, "complete_us_internet_movie"
  Const        r187, "title"
  Index        r188, r45, r187
  Move         r189, r183
  Move         r190, r185
  Move         r191, r186
  Move         r192, r188
  MakeMap      r193, 2, r189
  // from cc in complete_cast
  Append       r194, r22, r193
  Move         r22, r194
L11:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r195, 1
  Add          r196, r130, r195
  Move         r130, r196
  Jump         L20
L10:
  // join cn in company_name on cn.id == mc.company_id
  Const        r197, 1
  Add          r198, r119, r197
  Move         r119, r198
  Jump         L21
L9:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r199, 1
  Add          r200, r108, r199
  Move         r108, r200
  Jump         L22
L8:
  // join k in keyword on k.id == mk.keyword_id
  Const        r201, 1
  Add          r202, r97, r201
  Move         r97, r202
  Jump         L23
L7:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r203, 1
  Add          r204, r86, r203
  Move         r86, r204
  Jump         L24
L6:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r205, 1
  Add          r206, r75, r205
  Move         r75, r206
  Jump         L25
L5:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r207, 1
  Add          r208, r64, r207
  Move         r64, r208
  Jump         L26
L4:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r209, 1
  Add          r210, r53, r209
  Move         r53, r210
  Jump         L27
L3:
  // join t in title on t.id == cc.movie_id
  Const        r211, 1
  Add          r212, r42, r211
  Move         r42, r212
  Jump         L28
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.status_id
  Const        r213, 1
  Add          r214, r31, r213
  Move         r31, r214
  Jump         L29
L1:
  // from cc in complete_cast
  Const        r215, 1
  Add          r216, r25, r215
  Move         r25, r216
  Jump         L30
L0:
  // let matches =
  Move         r217, r22
  // movie_kind: min(from r in matches select r.movie_kind),
  Const        r218, "movie_kind"
  Const        r219, []
  IterPrep     r220, r217
  Len          r221, r220
  Const        r222, 0
L32:
  Less         r223, r222, r221
  JumpIfFalse  r223, L31
  Index        r224, r220, r222
  Move         r225, r224
  Const        r226, "movie_kind"
  Index        r227, r225, r226
  Append       r228, r219, r227
  Move         r219, r228
  Const        r229, 1
  Add          r230, r222, r229
  Move         r222, r230
  Jump         L32
L31:
  Min          r231, r219
  // complete_us_internet_movie: min(from r in matches select r.complete_us_internet_movie)
  Const        r232, "complete_us_internet_movie"
  Const        r233, []
  IterPrep     r234, r217
  Len          r235, r234
  Const        r236, 0
L34:
  Less         r237, r236, r235
  JumpIfFalse  r237, L33
  Index        r238, r234, r236
  Move         r225, r238
  Const        r239, "complete_us_internet_movie"
  Index        r240, r225, r239
  Append       r241, r233, r240
  Move         r233, r241
  Const        r242, 1
  Add          r243, r236, r242
  Move         r236, r243
  Jump         L34
L33:
  Min          r244, r233
  // movie_kind: min(from r in matches select r.movie_kind),
  Move         r245, r218
  Move         r246, r231
  // complete_us_internet_movie: min(from r in matches select r.complete_us_internet_movie)
  Move         r247, r232
  Move         r248, r244
  // {
  MakeMap      r249, 2, r245
  Move         r250, r249
  // let result = [
  MakeList     r251, 1, r250
  Move         r252, r251
  // json(result)
  JSON         r252
  // expect result == [
  Const        r253, [{"complete_us_internet_movie": "Web Movie", "movie_kind": "movie"}]
  Equal        r254, r252, r253
  Expect       r254
  Return       r0
