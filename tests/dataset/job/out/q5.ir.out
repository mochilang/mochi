func main (regs=24)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
  // let info_type = [
  Const        r1, [{"info": "languages", "it_id": 10}]
  // let title = [
  Const        r2, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
  // let movie_info = [
  Const        r4, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
L5:
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // from ct in company_type
  IterPrep     r11, r0
  Len          r12, r11
  Const        r13, 0
  Move         r14, r13
L12:
  LessInt      r15, r14, r12
  JumpIfFalse  r15, L0
L8:
  Index        r12, r11, r14
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r11, r3
L11:
  Len          r3, r11
L9:
  Const        r16, "company_type_id"
  Const        r17, "ct_id"
  Move         r18, r13
L10:
  LessInt      r19, r18, r3
  JumpIfFalse  r19, L1
  Index        r3, r11, r18
  Index        r11, r3, r16
  Index        r16, r12, r17
  Equal        r17, r11, r16
  JumpIfFalse  r17, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r17, r4
  Len          r4, r17
  Const        r16, "movie_id"
  Move         r11, r13
  LessInt      r20, r11, r4
  JumpIfFalse  r20, L2
  Index        r20, r17, r11
  Index        r17, r20, r16
  Index        r4, r3, r16
  Equal        r21, r17, r4
  JumpIfFalse  r21, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r21, r1
  Len          r1, r21
  Const        r4, "it_id"
  Const        r17, "info_type_id"
  Move         r22, r13
  LessInt      r23, r22, r1
  JumpIfFalse  r23, L3
  Index        r23, r21, r22
  Index        r21, r23, r4
  Index        r4, r20, r17
  Equal        r17, r21, r4
  JumpIfFalse  r17, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r17, r2
  Len          r2, r17
  Const        r4, "t_id"
  Move         r21, r13
  LessInt      r13, r21, r2
  JumpIfFalse  r13, L4
  Index        r13, r17, r21
  Index        r17, r13, r4
  Index        r4, r3, r16
  Equal        r16, r17, r4
  JumpIfFalse  r16, L5
  // where ct.kind == "production companies" &&
  Index        r16, r12, r6
  // t.production_year > 2005 &&
  Index        r12, r13, r8
  Const        r8, 2005
  Less         r6, r8, r12
  // where ct.kind == "production companies" &&
  Const        r8, "production companies"
  Equal        r12, r16, r8
  // "(theatrical)" in mc.note &&
  Const        r8, "(theatrical)"
  Index        r16, r3, r7
  In           r4, r8, r16
  // "(France)" in mc.note &&
  Const        r16, "(France)"
  Index        r8, r3, r7
  In           r3, r16, r8
  // where ct.kind == "production companies" &&
  Move         r8, r12
  JumpIfFalse  r8, L6
L6:
  // "(theatrical)" in mc.note &&
  Move         r8, r4
  JumpIfFalse  r8, L7
L7:
  // "(France)" in mc.note &&
  Move         r8, r3
  JumpIfFalse  r8, L8
  // t.production_year > 2005 &&
  Move         r8, r6
  JumpIfFalse  r8, L9
  // (mi.info in [
  Index        r6, r20, r9
  Const        r20, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r8, r6, r20
  // where ct.kind == "production companies" &&
  JumpIfFalse  r8, L5
  // select t.title
  Index        r20, r13, r10
  // from ct in company_type
  Append       r5, r5, r20
  // join t in title on t.t_id == mc.movie_id
  Const        r20, 1
  Add          r21, r21, r20
  Jump         L8
L4:
  // join it in info_type on it.it_id == mi.info_type_id
  Add          r22, r22, r20
  Jump         L10
L3:
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Add          r11, r11, r20
  Jump         L8
L2:
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Add          r18, r18, r20
  Jump         L11
L1:
  // from ct in company_type
  AddInt       r14, r14, r20
  Jump         L12
L0:
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r17, "typical_european_movie"
  Min          r20, r5
  Move         r5, r17
  Move         r17, r20
  MakeMap      r20, 1, r5
  MakeList     r17, 1, r20
  // json(result)
  JSON         r17
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r20, [{"typical_european_movie": "A Film"}]
  Equal        r5, r17, r20
  Expect       r5
  Return       r0
