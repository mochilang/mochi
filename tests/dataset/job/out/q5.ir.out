func main (regs=18)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
  // let info_type = [
  Const        r1, [{"info": "languages", "it_id": 10}]
L8:
  // let title = [
  Const        r2, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
L11:
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
L2:
  // let movie_info = [
  Const        r4, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r8, "note"
L7:
  // t.production_year > 2005 &&
  Const        r9, "production_year"
L5:
  // (mi.info in [
  Const        r10, "info"
L10:
  // select t.title
  Const        r11, "title"
L9:
  // from ct in company_type
  IterPrep     r6, r0
L6:
  Len          r7, r6
  Const        r8, 0
L3:
  LessInt      r9, r8, r7
L4:
  JumpIfFalse  r9, L0
  Index        r10, r6, r8
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r11, r3
  Len          r7, r11
  Const        r9, "company_type_id"
  Const        r6, "ct_id"
  // where ct.kind == "production companies" &&
  Const        r3, "kind"
  // "(theatrical)" in mc.note &&
  Const        r9, "note"
  // "(France)" in mc.note &&
  Const        r6, "note"
  // t.production_year > 2005 &&
  Const        r3, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r6, "title"
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r3, 0
  LessInt      r9, r3, r7
  JumpIfFalse  r9, L1
  Index        r6, r11, r3
  Const        r7, "company_type_id"
  Index        r9, r6, r7
  Const        r11, "ct_id"
  Index        r7, r10, r11
  Equal        r11, r9, r7
  JumpIfFalse  r11, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r9, r4
  Len          r7, r9
  Const        r11, "movie_id"
  Const        r4, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r11, "kind"
  // "(theatrical)" in mc.note &&
  Const        r4, "note"
  // "(France)" in mc.note &&
  Const        r11, "note"
  // t.production_year > 2005 &&
  Const        r4, "production_year"
  // (mi.info in [
  Const        r11, "info"
  // select t.title
  Const        r4, "title"
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r11, 0
  LessInt      r4, r11, r7
  JumpIfFalse  r4, L2
  Index        r7, r9, r11
  Const        r4, "movie_id"
  Index        r9, r7, r4
  Const        r4, "movie_id"
  Index        r12, r6, r4
  Equal        r4, r9, r12
  JumpIfFalse  r4, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r9, r1
  Len          r12, r9
  Const        r4, "it_id"
  Const        r1, "info_type_id"
  // where ct.kind == "production companies" &&
  Const        r4, "kind"
  // "(theatrical)" in mc.note &&
  Const        r1, "note"
  // "(France)" in mc.note &&
  Const        r4, "note"
  // t.production_year > 2005 &&
  Const        r1, "production_year"
  // (mi.info in [
  Const        r4, "info"
  // select t.title
  Const        r1, "title"
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r4, 0
  LessInt      r1, r4, r12
  JumpIfFalse  r1, L3
  Index        r12, r9, r4
  Const        r1, "it_id"
  Index        r9, r12, r1
  Const        r12, "info_type_id"
  Index        r1, r7, r12
  Equal        r12, r9, r1
  JumpIfFalse  r12, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r9, r2
  Len          r1, r9
  Const        r12, "t_id"
  Const        r2, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r12, "kind"
  // "(theatrical)" in mc.note &&
  Const        r2, "note"
  // "(France)" in mc.note &&
  Const        r12, "note"
  // t.production_year > 2005 &&
  Const        r2, "production_year"
  // (mi.info in [
  Const        r12, "info"
  // select t.title
  Const        r2, "title"
  // join t in title on t.t_id == mc.movie_id
  Const        r12, 0
  LessInt      r2, r12, r1
  JumpIfFalse  r2, L4
  Index        r1, r9, r12
  Const        r2, "t_id"
  Index        r9, r1, r2
  Const        r2, "movie_id"
  Index        r13, r6, r2
  Equal        r2, r9, r13
  JumpIfFalse  r2, L5
  // where ct.kind == "production companies" &&
  Const        r9, "kind"
  Index        r13, r10, r9
  // t.production_year > 2005 &&
  Const        r2, "production_year"
  Index        r10, r1, r2
  Const        r9, 2005
  Less         r2, r9, r10
  // where ct.kind == "production companies" &&
  Const        r10, "production companies"
  Equal        r9, r13, r10
  // "(theatrical)" in mc.note &&
  Const        r13, "(theatrical)"
  Const        r10, "note"
  Index        r14, r6, r10
  In           r10, r13, r14
  // "(France)" in mc.note &&
  Const        r13, "(France)"
  Const        r14, "note"
  Index        r15, r6, r14
  In           r6, r13, r15
  // where ct.kind == "production companies" &&
  Move         r14, r9
  JumpIfFalse  r14, L6
  // "(theatrical)" in mc.note &&
  Move         r13, r10
  JumpIfFalse  r13, L7
  // "(France)" in mc.note &&
  Move         r15, r6
  JumpIfFalse  r15, L5
  // t.production_year > 2005 &&
  Move         r9, r2
  JumpIfFalse  r9, L8
  // (mi.info in [
  Const        r14, "info"
  Index        r10, r7, r14
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r9, r10, r13
  // where ct.kind == "production companies" &&
  JumpIfFalse  r9, L5
  // select t.title
  Const        r6, "title"
  Index        r15, r1, r6
  // from ct in company_type
  Append       r5, r5, r15
  // join t in title on t.t_id == mc.movie_id
  Const        r2, 1
  Add          r12, r12, r2
  Jump         L9
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r7, 1
  Add          r4, r4, r7
  Jump         L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r14, 1
  Add          r11, r11, r14
  Jump         L10
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r9, 1
  Add          r3, r3, r9
  Jump         L11
L1:
  // from ct in company_type
  Const        r10, 1
  AddInt       r8, r8, r10
  Jump         L6
L0:
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r1, "typical_european_movie"
  Min          r6, r5
  Move         r16, r1
  Move         r17, r6
  MakeMap      r15, 1, r16
  MakeList     r12, 1, r15
  // json(result)
  JSON         r12
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r2, [{"typical_european_movie": "A Film"}]
  Equal        r4, r12, r2
  Expect       r4
  Return       r0
