func main (regs=109)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
  Move         r1, r0
  // let info_type = [
  Const        r2, [{"info": "languages", "it_id": 10}]
  Move         r3, r2
  // let title = [
  Const        r4, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
  Move         r5, r4
  // let movie_companies = [
  Const        r6, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
  Move         r7, r6
  // let movie_info = [
  Const        r8, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
  Move         r9, r8
  // from ct in company_type
  Const        r10, []
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L14:
  Less         r14, r13, r12
  JumpIfFalse  r14, L0
  Index        r15, r11, r13
  Move         r16, r15
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r17, r7
  Len          r18, r17
  Const        r19, 0
L13:
  Less         r20, r19, r18
  JumpIfFalse  r20, L1
  Index        r21, r17, r19
  Move         r22, r21
  Const        r23, "company_type_id"
  Index        r24, r22, r23
  Const        r25, "ct_id"
  Index        r26, r16, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r28, r9
  Len          r29, r28
  Const        r30, 0
L12:
  Less         r31, r30, r29
  JumpIfFalse  r31, L2
  Index        r32, r28, r30
  Move         r33, r32
  Const        r34, "movie_id"
  Index        r35, r33, r34
  Const        r36, "movie_id"
  Index        r37, r22, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r39, r3
  Len          r40, r39
  Const        r41, 0
L11:
  Less         r42, r41, r40
  JumpIfFalse  r42, L3
  Index        r43, r39, r41
  Move         r44, r43
  Const        r45, "it_id"
  Index        r46, r44, r45
  Const        r47, "info_type_id"
  Index        r48, r33, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r50, r5
  Len          r51, r50
  Const        r52, 0
L10:
  Less         r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Const        r56, "t_id"
  Index        r57, r55, r56
  Const        r58, "movie_id"
  Index        r59, r22, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L5
  // where ct.kind == "production companies" &&
  Const        r61, "kind"
  Index        r62, r16, r61
  // t.production_year > 2005 &&
  Const        r63, "production_year"
  Index        r64, r55, r63
  Const        r65, 2005
  Less         r66, r65, r64
  // where ct.kind == "production companies" &&
  Const        r67, "production companies"
  Equal        r68, r62, r67
  // "(theatrical)" in mc.note &&
  Const        r69, "(theatrical)"
  Const        r70, "note"
  Index        r71, r22, r70
  In           r72, r69, r71
  // "(France)" in mc.note &&
  Const        r73, "(France)"
  Const        r74, "note"
  Index        r75, r22, r74
  In           r76, r73, r75
  // where ct.kind == "production companies" &&
  Move         r77, r68
  JumpIfFalse  r77, L6
  Move         r77, r72
L6:
  // "(theatrical)" in mc.note &&
  Move         r78, r77
  JumpIfFalse  r78, L7
  Move         r78, r76
L7:
  // "(France)" in mc.note &&
  Move         r79, r78
  JumpIfFalse  r79, L8
  Move         r79, r66
L8:
  // t.production_year > 2005 &&
  Move         r80, r79
  JumpIfFalse  r80, L9
  // (mi.info in [
  Const        r81, "info"
  Index        r82, r33, r81
  Const        r83, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r84, r82, r83
  // t.production_year > 2005 &&
  Move         r80, r84
L9:
  // where ct.kind == "production companies" &&
  JumpIfFalse  r80, L5
  // select t.title
  Const        r85, "title"
  Index        r86, r55, r85
  // from ct in company_type
  Append       r87, r10, r86
  Move         r10, r87
L5:
  // join t in title on t.t_id == mc.movie_id
  Const        r88, 1
  Add          r89, r52, r88
  Move         r52, r89
  Jump         L10
L4:
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r90, 1
  Add          r91, r41, r90
  Move         r41, r91
  Jump         L11
L3:
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r92, 1
  Add          r93, r30, r92
  Move         r30, r93
  Jump         L12
L2:
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r94, 1
  Add          r95, r19, r94
  Move         r19, r95
  Jump         L13
L1:
  // from ct in company_type
  Const        r96, 1
  Add          r97, r13, r96
  Move         r13, r97
  Jump         L14
L0:
  // let candidate_titles =
  Move         r98, r10
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r99, "typical_european_movie"
  Min          r100, r98
  Move         r101, r99
  Move         r102, r100
  MakeMap      r103, 1, r101
  Move         r104, r103
  MakeList     r105, 1, r104
  Move         r106, r105
  // json(result)
  JSON         r106
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r107, [{"typical_european_movie": "A Film"}]
  Equal        r108, r106, r107
  Expect       r108
  Return       r0
