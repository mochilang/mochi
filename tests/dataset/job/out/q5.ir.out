func main (regs=88)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
  // let info_type = [
  Const        r1, [{"info": "languages", "it_id": 10}]
  // let title = [
  Const        r2, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
  // let movie_info = [
  Const        r4, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // from ct in company_type
  IterPrep     r11, r0
  Len          r12, r11
  Const        r14, 0
  Move         r13, r14
L11:
  LessInt      r15, r13, r12
  JumpIfFalse  r15, L0
  Index        r16, r11, r13
  Move         r17, r16
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r18, r3
  Len          r19, r18
  Const        r20, "company_type_id"
  Const        r21, "ct_id"
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r14, 0
  Move         r22, r14
L10:
  LessInt      r23, r22, r19
  JumpIfFalse  r23, L1
  Index        r24, r18, r22
  Move         r25, r24
  Const        r20, "company_type_id"
  Index        r26, r25, r20
  Const        r21, "ct_id"
  Index        r27, r17, r21
  Equal        r28, r26, r27
  JumpIfFalse  r28, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r29, r4
  Len          r30, r29
  Const        r31, "movie_id"
  Const        r31, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r14, 0
  Move         r32, r14
L9:
  LessInt      r33, r32, r30
  JumpIfFalse  r33, L2
  Index        r34, r29, r32
  Move         r35, r34
  Const        r31, "movie_id"
  Index        r36, r35, r31
  Const        r31, "movie_id"
  Index        r37, r25, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r39, r1
  Len          r40, r39
  Const        r41, "it_id"
  Const        r42, "info_type_id"
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r14, 0
  Move         r43, r14
L8:
  LessInt      r44, r43, r40
  JumpIfFalse  r44, L3
  Index        r45, r39, r43
  Move         r46, r45
  Const        r41, "it_id"
  Index        r47, r46, r41
  Const        r42, "info_type_id"
  Index        r48, r35, r42
  Equal        r49, r47, r48
  JumpIfFalse  r49, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r50, r2
  Len          r51, r50
  Const        r52, "t_id"
  Const        r31, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // join t in title on t.t_id == mc.movie_id
  Const        r14, 0
  Move         r53, r14
L7:
  LessInt      r54, r53, r51
  JumpIfFalse  r54, L4
  Index        r55, r50, r53
  Move         r56, r55
  Const        r52, "t_id"
  Index        r57, r56, r52
  Const        r31, "movie_id"
  Index        r58, r25, r31
  Equal        r59, r57, r58
  JumpIfFalse  r59, L5
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  Index        r60, r17, r6
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  Index        r61, r56, r8
  Const        r62, 2005
  Less         r63, r62, r61
  // where ct.kind == "production companies" &&
  Const        r64, "production companies"
  Equal        r65, r60, r64
  // "(theatrical)" in mc.note &&
  Const        r66, "(theatrical)"
  Const        r7, "note"
  Index        r67, r25, r7
  In           r68, r66, r67
  // "(France)" in mc.note &&
  Const        r69, "(France)"
  Const        r7, "note"
  Index        r70, r25, r7
  In           r71, r69, r70
  // where ct.kind == "production companies" &&
  Move         r72, r65
  JumpIfFalse  r72, L6
  Move         r72, r68
  // "(theatrical)" in mc.note &&
  JumpIfFalse  r72, L6
  Move         r72, r71
  // "(France)" in mc.note &&
  JumpIfFalse  r72, L6
  Move         r72, r63
  // t.production_year > 2005 &&
  JumpIfFalse  r72, L6
  // (mi.info in [
  Const        r9, "info"
  Index        r73, r35, r9
  Const        r74, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r75, r73, r74
  // t.production_year > 2005 &&
  Move         r72, r75
L6:
  // where ct.kind == "production companies" &&
  JumpIfFalse  r72, L5
  // select t.title
  Const        r10, "title"
  Index        r76, r56, r10
  // from ct in company_type
  Append       r77, r5, r76
  Move         r5, r77
L5:
  // join t in title on t.t_id == mc.movie_id
  Const        r78, 1
  Add          r53, r53, r78
  Jump         L7
L4:
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r78, 1
  Add          r43, r43, r78
  Jump         L8
L3:
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r78, 1
  Add          r32, r32, r78
  Jump         L9
L2:
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r78, 1
  Add          r22, r22, r78
  Jump         L10
L1:
  // from ct in company_type
  Const        r78, 1
  AddInt       r13, r13, r78
  Jump         L11
L0:
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r80, "typical_european_movie"
  Min          r81, r5
  Move         r82, r80
  Move         r83, r81
  MakeMap      r84, 1, r82
  Move         r79, r84
  MakeList     r85, 1, r79
  // json(result)
  JSON         r85
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r86, [{"typical_european_movie": "A Film"}]
  Equal        r87, r85, r86
  Expect       r87
  Return       r0
