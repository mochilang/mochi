func main (regs=137)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
  // let info_type = [
  Const        r1, [{"info": "languages", "it_id": 10}]
  // let title = [
  Const        r2, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
  // let movie_info = [
  Const        r4, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // "(France)" in mc.note &&
  Const        r8, "note"
  // t.production_year > 2005 &&
  Const        r9, "production_year"
  // (mi.info in [
  Const        r10, "info"
  // select t.title
  Const        r11, "title"
  // from ct in company_type
  IterPrep     r12, r0
  Len          r13, r12
  Const        r15, 0
  Move         r14, r15
L11:
  LessInt      r16, r14, r13
  JumpIfFalse  r16, L0
  Index        r17, r12, r14
  Move         r18, r17
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r19, r3
  Len          r20, r19
  Const        r21, "company_type_id"
  Const        r22, "ct_id"
  // where ct.kind == "production companies" &&
  Const        r23, "kind"
  // "(theatrical)" in mc.note &&
  Const        r24, "note"
  // "(France)" in mc.note &&
  Const        r25, "note"
  // t.production_year > 2005 &&
  Const        r26, "production_year"
  // (mi.info in [
  Const        r27, "info"
  // select t.title
  Const        r28, "title"
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r30, 0
  Move         r29, r30
L10:
  LessInt      r31, r29, r20
  JumpIfFalse  r31, L1
  Index        r32, r19, r29
  Move         r33, r32
  Const        r34, "company_type_id"
  Index        r35, r33, r34
  Const        r36, "ct_id"
  Index        r37, r18, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r39, r4
  Len          r40, r39
  Const        r41, "movie_id"
  Const        r42, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r43, "kind"
  // "(theatrical)" in mc.note &&
  Const        r44, "note"
  // "(France)" in mc.note &&
  Const        r45, "note"
  // t.production_year > 2005 &&
  Const        r46, "production_year"
  // (mi.info in [
  Const        r47, "info"
  // select t.title
  Const        r48, "title"
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r50, 0
  Move         r49, r50
L9:
  LessInt      r51, r49, r40
  JumpIfFalse  r51, L2
  Index        r52, r39, r49
  Move         r53, r52
  Const        r54, "movie_id"
  Index        r55, r53, r54
  Const        r56, "movie_id"
  Index        r57, r33, r56
  Equal        r58, r55, r57
  JumpIfFalse  r58, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r59, r1
  Len          r60, r59
  Const        r61, "it_id"
  Const        r62, "info_type_id"
  // where ct.kind == "production companies" &&
  Const        r63, "kind"
  // "(theatrical)" in mc.note &&
  Const        r64, "note"
  // "(France)" in mc.note &&
  Const        r65, "note"
  // t.production_year > 2005 &&
  Const        r66, "production_year"
  // (mi.info in [
  Const        r67, "info"
  // select t.title
  Const        r68, "title"
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r70, 0
  Move         r69, r70
L8:
  LessInt      r71, r69, r60
  JumpIfFalse  r71, L3
  Index        r72, r59, r69
  Move         r73, r72
  Const        r74, "it_id"
  Index        r75, r73, r74
  Const        r76, "info_type_id"
  Index        r77, r53, r76
  Equal        r78, r75, r77
  JumpIfFalse  r78, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r79, r2
  Len          r80, r79
  Const        r81, "t_id"
  Const        r82, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r83, "kind"
  // "(theatrical)" in mc.note &&
  Const        r84, "note"
  // "(France)" in mc.note &&
  Const        r85, "note"
  // t.production_year > 2005 &&
  Const        r86, "production_year"
  // (mi.info in [
  Const        r87, "info"
  // select t.title
  Const        r88, "title"
  // join t in title on t.t_id == mc.movie_id
  Const        r90, 0
  Move         r89, r90
L7:
  LessInt      r91, r89, r80
  JumpIfFalse  r91, L4
  Index        r92, r79, r89
  Move         r93, r92
  Const        r94, "t_id"
  Index        r95, r93, r94
  Const        r96, "movie_id"
  Index        r97, r33, r96
  Equal        r98, r95, r97
  JumpIfFalse  r98, L5
  // where ct.kind == "production companies" &&
  Const        r99, "kind"
  Index        r100, r18, r99
  // t.production_year > 2005 &&
  Const        r101, "production_year"
  Index        r102, r93, r101
  Const        r103, 2005
  Less         r104, r103, r102
  // where ct.kind == "production companies" &&
  Const        r105, "production companies"
  Equal        r106, r100, r105
  // "(theatrical)" in mc.note &&
  Const        r107, "(theatrical)"
  Const        r108, "note"
  Index        r109, r33, r108
  In           r110, r107, r109
  // "(France)" in mc.note &&
  Const        r111, "(France)"
  Const        r112, "note"
  Index        r113, r33, r112
  In           r114, r111, r113
  // where ct.kind == "production companies" &&
  Move         r115, r106
  JumpIfFalse  r115, L6
  Move         r115, r110
  // "(theatrical)" in mc.note &&
  JumpIfFalse  r115, L6
  Move         r115, r114
  // "(France)" in mc.note &&
  JumpIfFalse  r115, L6
  Move         r115, r104
  // t.production_year > 2005 &&
  JumpIfFalse  r115, L6
  // (mi.info in [
  Const        r116, "info"
  Index        r117, r53, r116
  Const        r118, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r119, r117, r118
  // t.production_year > 2005 &&
  Move         r115, r119
L6:
  // where ct.kind == "production companies" &&
  JumpIfFalse  r115, L5
  // select t.title
  Const        r120, "title"
  Index        r121, r93, r120
  // from ct in company_type
  Append       r122, r5, r121
  Move         r5, r122
L5:
  // join t in title on t.t_id == mc.movie_id
  Const        r123, 1
  Add          r89, r89, r123
  Jump         L7
L4:
  // join it in info_type on it.it_id == mi.info_type_id
  Const        r124, 1
  Add          r69, r69, r124
  Jump         L8
L3:
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Const        r125, 1
  Add          r49, r49, r125
  Jump         L9
L2:
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Const        r126, 1
  Add          r29, r29, r126
  Jump         L10
L1:
  // from ct in company_type
  Const        r127, 1
  AddInt       r14, r14, r127
  Jump         L11
L0:
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r128, "typical_european_movie"
  Min          r129, r5
  Move         r130, r128
  Move         r131, r129
  MakeMap      r132, 1, r130
  Move         r133, r132
  MakeList     r134, 1, r133
  // json(result)
  JSON         r134
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r135, [{"typical_european_movie": "A Film"}]
  Equal        r136, r134, r135
  Expect       r136
  Return       r0
