func main (regs=27)
  // let company_type = [
  Const        r0, [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}]
L8:
  // let info_type = [
  Const        r1, [{"info": "languages", "it_id": 10}]
  // let title = [
  Const        r2, [{"production_year": 2010, "t_id": 100, "title": "B Movie"}, {"production_year": 2012, "t_id": 200, "title": "A Film"}, {"production_year": 2000, "t_id": 300, "title": "Old Movie"}]
L10:
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 200, "note": "ACME (France) (theatrical)"}, {"company_type_id": 1, "movie_id": 300, "note": "ACME (France) (theatrical)"}]
  // let movie_info = [
  Const        r4, [{"info": "German", "info_type_id": 10, "movie_id": 100}, {"info": "Swedish", "info_type_id": 10, "movie_id": 200}, {"info": "German", "info_type_id": 10, "movie_id": 300}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // "(theatrical)" in mc.note &&
  Const        r7, "note"
  // t.production_year > 2005 &&
  Const        r8, "production_year"
  // (mi.info in [
  Const        r9, "info"
  // select t.title
  Const        r10, "title"
  // from ct in company_type
  IterPrep     r11, r0
L9:
  Len          r12, r11
  Const        r13, 0
  Move         r14, r13
L11:
  LessInt      r15, r14, r12
  JumpIfFalse  r15, L0
L7:
  Index        r12, r11, r14
  Move         r11, r12
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  IterPrep     r12, r3
  Len          r3, r12
  Const        r16, "company_type_id"
  Const        r17, "ct_id"
  Move         r18, r13
  LessInt      r19, r18, r3
  JumpIfFalse  r19, L1
  Index        r3, r12, r18
  Move         r19, r3
  Index        r12, r19, r16
  Index        r16, r11, r17
  Equal        r17, r12, r16
  JumpIfFalse  r17, L2
  // join mi in movie_info on mi.movie_id == mc.movie_id
  IterPrep     r12, r4
  Len          r16, r12
  Const        r17, "movie_id"
  Move         r4, r13
  LessInt      r20, r4, r16
  JumpIfFalse  r20, L2
  Index        r16, r12, r4
  Move         r20, r16
  Index        r12, r20, r17
  Index        r16, r19, r17
  Equal        r21, r12, r16
  JumpIfFalse  r21, L3
  // join it in info_type on it.it_id == mi.info_type_id
  IterPrep     r16, r1
  Len          r21, r16
  Const        r1, "it_id"
  Const        r22, "info_type_id"
  Move         r23, r13
  LessInt      r24, r23, r21
  JumpIfFalse  r24, L3
  Index        r21, r16, r23
  Move         r24, r21
  Index        r16, r24, r1
  Index        r21, r20, r22
  Equal        r1, r16, r21
  JumpIfFalse  r1, L4
  // join t in title on t.t_id == mc.movie_id
  IterPrep     r24, r2
  Len          r22, r24
  Const        r16, "t_id"
  Move         r21, r13
  LessInt      r2, r21, r22
  JumpIfFalse  r2, L4
  Index        r13, r24, r21
  Move         r22, r13
  Index        r2, r22, r16
  Index        r24, r19, r17
  Equal        r13, r2, r24
  JumpIfFalse  r13, L5
  // where ct.kind == "production companies" &&
  Index        r16, r11, r6
  // t.production_year > 2005 &&
  Index        r17, r22, r8
  Const        r2, 2005
  Less         r24, r2, r17
  // where ct.kind == "production companies" &&
  Const        r13, "production companies"
  Equal        r6, r16, r13
  // "(theatrical)" in mc.note &&
  Const        r11, "(theatrical)"
  Index        r8, r19, r7
  In           r2, r11, r8
  // "(France)" in mc.note &&
  Const        r16, "(France)"
  Index        r13, r19, r7
  In           r11, r16, r13
  // where ct.kind == "production companies" &&
  Move         r8, r6
  JumpIfFalse  r8, L6
  Move         r8, r2
  // "(theatrical)" in mc.note &&
  JumpIfFalse  r8, L6
  Move         r8, r11
  // "(France)" in mc.note &&
  JumpIfFalse  r8, L6
  Move         r8, r24
  // t.production_year > 2005 &&
  JumpIfFalse  r8, L6
  // (mi.info in [
  Index        r7, r20, r9
  Const        r19, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r16, r7, r19
  // t.production_year > 2005 &&
  Move         r8, r16
L6:
  // where ct.kind == "production companies" &&
  JumpIfFalse  r8, L5
  // select t.title
  Index        r13, r22, r10
  // from ct in company_type
  Append       r24, r5, r13
  Move         r5, r24
L5:
  // join t in title on t.t_id == mc.movie_id
  Const        r6, 1
  Add          r21, r21, r6
  Jump         L7
L4:
  // join it in info_type on it.it_id == mi.info_type_id
  Add          r23, r23, r6
  Jump         L8
L3:
  // join mi in movie_info on mi.movie_id == mc.movie_id
  Add          r4, r4, r6
  Jump         L9
L2:
  // join mc in movie_companies on mc.company_type_id == ct.ct_id
  Add          r18, r18, r6
  Jump         L10
L1:
  // from ct in company_type
  AddInt       r14, r14, r6
  Jump         L11
L0:
  // let result = [ { typical_european_movie: min(candidate_titles) } ]
  Const        r2, "typical_european_movie"
  Min          r11, r5
  Move         r25, r2
  Move         r26, r11
  MakeMap      r9, 1, r25
  Move         r20, r9
  MakeList     r8, 1, r20
  // json(result)
  JSON         r8
  // expect result == [ { typical_european_movie: "A Film" } ]
  Const        r7, [{"typical_european_movie": "A Film"}]
  Equal        r19, r8, r7
  Expect       r19
  Return       r0
