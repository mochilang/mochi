func main (regs=286)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "crew"}, {"id": 3, "kind": "complete"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 3, "subject_id": 2}]
  // let company_name = [
  Const        r2, [{"country_code": "[se]", "id": 1, "name": "Best Film"}, {"country_code": "[pl]", "id": 2, "name": "Polish Film"}]
  // let company_type = [
  Const        r3, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "remake"}]
  // let link_type = [
  Const        r5, [{"id": 1, "link": "follows"}, {"id": 2, "link": "related"}]
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "extra"}]
  // let movie_info = [
  Const        r7, [{"info": "Sweden", "movie_id": 1}, {"info": "USA", "movie_id": 2}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let movie_link = [
  Const        r9, [{"link_type_id": 1, "movie_id": 1}, {"link_type_id": 2, "movie_id": 2}]
  // let title = [
  Const        r10, [{"id": 1, "production_year": 1980, "title": "Western Sequel"}, {"id": 2, "production_year": 1999, "title": "Another Movie"}]
  // from cc in complete_cast
  Const        r11, []
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Const        r12, "kind"
  // cn.country_code != "[pl]" &&
  Const        r13, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r14, "name"
  // k.keyword == "sequel" &&
  Const        r16, "keyword"
  // lt.link.contains("follow") &&
  Const        r17, "link"
  // mc.note == null &&
  Const        r18, "note"
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Const        r19, "info"
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r20, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r21, "movie_id"
  // company: cn.name,
  Const        r22, "company"
  // title: t.title
  Const        r23, "title"
  // from cc in complete_cast
  IterPrep     r24, r1
  Len          r25, r24
  Const        r27, 0
  Move         r26, r27
L47:
  LessInt      r28, r26, r25
  JumpIfFalse  r28, L0
  Index        r30, r24, r26
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r31, r0
  Len          r32, r31
  Const        r33, "id"
  Const        r34, "subject_id"
  Move         r35, r27
L46:
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L1
  Index        r38, r31, r35
  Index        r39, r38, r33
  Index        r40, r30, r34
  Equal        r41, r39, r40
  JumpIfFalse  r41, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r42, r0
  Len          r43, r42
  Const        r44, "status_id"
  Move         r45, r27
L45:
  LessInt      r46, r45, r43
  JumpIfFalse  r46, L2
  Index        r48, r42, r45
  Index        r49, r48, r33
  Index        r50, r30, r44
  Equal        r51, r49, r50
  JumpIfFalse  r51, L3
  // join t in title on t.id == cc.movie_id
  IterPrep     r52, r10
  Len          r53, r52
  Move         r54, r27
L44:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L3
  Index        r57, r52, r54
  Index        r58, r57, r33
  Index        r59, r30, r21
  Equal        r60, r58, r59
  JumpIfFalse  r60, L4
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r61, r9
  Len          r62, r61
  Move         r63, r27
L43:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L4
  Index        r66, r61, r63
  Index        r67, r66, r21
  Index        r68, r57, r33
  Equal        r69, r67, r68
  JumpIfFalse  r69, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r70, r5
  Len          r71, r70
  Const        r72, "link_type_id"
  Move         r73, r27
L42:
  LessInt      r74, r73, r71
  JumpIfFalse  r74, L5
  Index        r76, r70, r73
  Index        r77, r76, r33
  Index        r78, r66, r72
  Equal        r79, r77, r78
  JumpIfFalse  r79, L6
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r80, r8
  Len          r81, r80
  Move         r82, r27
L41:
  LessInt      r83, r82, r81
  JumpIfFalse  r83, L6
  Index        r85, r80, r82
  Index        r86, r85, r21
  Index        r87, r57, r33
  Equal        r88, r86, r87
  JumpIfFalse  r88, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r89, r4
  Len          r90, r89
  Const        r91, "keyword_id"
  Move         r92, r27
L40:
  LessInt      r93, r92, r90
  JumpIfFalse  r93, L7
  Index        r95, r89, r92
  Index        r96, r95, r33
  Index        r97, r85, r91
  Equal        r98, r96, r97
  JumpIfFalse  r98, L8
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r99, r6
  Len          r100, r99
  Move         r101, r27
L39:
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L8
  Index        r104, r99, r101
  Index        r105, r104, r21
  Index        r106, r57, r33
  Equal        r107, r105, r106
  JumpIfFalse  r107, L9
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r108, r3
  Len          r109, r108
  Const        r110, "company_type_id"
  Move         r111, r27
L38:
  LessInt      r112, r111, r109
  JumpIfFalse  r112, L9
  Index        r114, r108, r111
  Index        r115, r114, r33
  Index        r116, r104, r110
  Equal        r117, r115, r116
  JumpIfFalse  r117, L10
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r118, r2
  Len          r119, r118
  Const        r120, "company_id"
  Move         r121, r27
L37:
  LessInt      r122, r121, r119
  JumpIfFalse  r122, L10
  Index        r124, r118, r121
  Index        r125, r124, r33
  Index        r126, r104, r120
  Equal        r127, r125, r126
  JumpIfFalse  r127, L11
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r128, r7
  Len          r129, r128
  Move         r130, r27
L36:
  LessInt      r131, r130, r129
  JumpIfFalse  r131, L11
  Index        r133, r128, r130
  Index        r134, r133, r21
  Index        r135, r57, r33
  Equal        r136, r134, r135
  JumpIfFalse  r136, L12
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Index        r137, r38, r12
  Const        r138, "cast"
  Equal        r139, r137, r138
  Index        r140, r38, r12
  Const        r141, "crew"
  Equal        r142, r140, r141
  Move         r143, r139
  JumpIfTrue   r143, L13
  Move         r143, r142
L13:
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r144, r57, r20
  Const        r145, 1950
  LessEq       r146, r145, r144
  Index        r147, r57, r20
  Const        r148, 2000
  LessEq       r149, r147, r148
  // cct2.kind == "complete" &&
  Index        r150, r48, r12
  Const        r151, "complete"
  Equal        r152, r150, r151
  // cn.country_code != "[pl]" &&
  Index        r153, r124, r13
  Const        r154, "[pl]"
  NotEqual     r155, r153, r154
  // ct.kind == "production companies" &&
  Index        r156, r114, r12
  Const        r157, "production companies"
  Equal        r158, r156, r157
  // k.keyword == "sequel" &&
  Index        r159, r95, r16
  Const        r160, "sequel"
  Equal        r161, r159, r160
  // mc.note == null &&
  Index        r162, r104, r18
  Const        r163, nil
  Equal        r164, r162, r163
  // ml.movie_id == mk.movie_id &&
  Index        r165, r66, r21
  Index        r166, r85, r21
  Equal        r167, r165, r166
  // ml.movie_id == mc.movie_id &&
  Index        r168, r66, r21
  Index        r169, r104, r21
  Equal        r170, r168, r169
  // mk.movie_id == mc.movie_id &&
  Index        r171, r85, r21
  Index        r172, r104, r21
  Equal        r173, r171, r172
  // ml.movie_id == mi.movie_id &&
  Index        r174, r66, r21
  Index        r175, r133, r21
  Equal        r176, r174, r175
  // mk.movie_id == mi.movie_id &&
  Index        r177, r85, r21
  Index        r178, r133, r21
  Equal        r179, r177, r178
  // mc.movie_id == mi.movie_id &&
  Index        r180, r104, r21
  Index        r181, r133, r21
  Equal        r182, r180, r181
  // ml.movie_id == cc.movie_id &&
  Index        r183, r66, r21
  Index        r184, r30, r21
  Equal        r185, r183, r184
  // mk.movie_id == cc.movie_id &&
  Index        r186, r85, r21
  Index        r187, r30, r21
  Equal        r188, r186, r187
  // mc.movie_id == cc.movie_id &&
  Index        r189, r104, r21
  Index        r190, r30, r21
  Equal        r191, r189, r190
  // mi.movie_id == cc.movie_id
  Index        r192, r133, r21
  Index        r193, r30, r21
  Equal        r194, r192, r193
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Move         r195, r143
  JumpIfFalse  r195, L14
L14:
  // cct2.kind == "complete" &&
  Move         r196, r152
  JumpIfFalse  r196, L15
L15:
  // cn.country_code != "[pl]" &&
  Move         r197, r155
  JumpIfFalse  r197, L16
  Index        r198, r124, r14
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r199, "Film"
  In           r201, r199, r198
  JumpIfTrue   r201, L16
  Index        r202, r124, r14
  Const        r203, "Warner"
  In           r201, r203, r202
L16:
  Move         r205, r201
  JumpIfFalse  r205, L17
L17:
  // ct.kind == "production companies" &&
  Move         r206, r158
  JumpIfFalse  r206, L18
L18:
  // k.keyword == "sequel" &&
  Move         r207, r161
  JumpIfFalse  r207, L19
  Index        r208, r76, r17
  // lt.link.contains("follow") &&
  Const        r209, "follow"
  In           r211, r209, r208
L19:
  JumpIfFalse  r211, L20
L20:
  // mc.note == null &&
  Move         r212, r164
  JumpIfFalse  r212, L21
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Index        r213, r133, r19
  Const        r214, "Sweden"
  Equal        r215, r213, r214
  Index        r216, r133, r19
  Const        r217, "Germany"
  Equal        r218, r216, r217
  // mi.info == "Swedish" || mi.info == "German") &&
  Index        r219, r133, r19
  Const        r220, "Swedish"
  Equal        r221, r219, r220
  Index        r222, r133, r19
  Const        r223, "German"
  Equal        r224, r222, r223
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Move         r225, r215
  JumpIfTrue   r225, L22
L22:
  Move         r226, r218
  JumpIfTrue   r226, L23
L23:
  // mi.info == "Swedish" || mi.info == "German") &&
  Move         r227, r221
  JumpIfTrue   r227, L21
L21:
  Move         r228, r224
  JumpIfFalse  r228, L24
L24:
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Move         r229, r146
  JumpIfFalse  r229, L25
L25:
  Move         r230, r149
  JumpIfFalse  r230, L26
L26:
  // ml.movie_id == mk.movie_id &&
  Move         r231, r167
  JumpIfFalse  r231, L27
L27:
  // ml.movie_id == mc.movie_id &&
  Move         r232, r170
  JumpIfFalse  r232, L28
L28:
  // mk.movie_id == mc.movie_id &&
  Move         r233, r173
  JumpIfFalse  r233, L29
L29:
  // ml.movie_id == mi.movie_id &&
  Move         r234, r176
  JumpIfFalse  r234, L30
L30:
  // mk.movie_id == mi.movie_id &&
  Move         r235, r179
  JumpIfFalse  r235, L31
L31:
  // mc.movie_id == mi.movie_id &&
  Move         r236, r182
  JumpIfFalse  r236, L32
L32:
  // ml.movie_id == cc.movie_id &&
  Move         r237, r185
  JumpIfFalse  r237, L33
L33:
  // mk.movie_id == cc.movie_id &&
  Move         r238, r188
  JumpIfFalse  r238, L34
L34:
  // mc.movie_id == cc.movie_id &&
  Move         r239, r191
  JumpIfFalse  r239, L35
  Move         r239, r194
L35:
  // where (
  JumpIfFalse  r239, L12
  // select {
  MakeMap      r246, 3, r22
  // from cc in complete_cast
  Append       r11, r11, r246
L12:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r248, 1
  Add          r130, r130, r248
  Jump         L36
L11:
  // join cn in company_name on cn.id == mc.company_id
  Add          r121, r121, r248
  Jump         L37
L10:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r111, r111, r248
  Jump         L38
L9:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r101, r101, r248
  Jump         L39
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r92, r92, r248
  Jump         L40
L7:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r82, r82, r248
  Jump         L41
L6:
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r73, r73, r248
  Jump         L42
L5:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r63, r63, r248
  Jump         L43
L4:
  // join t in title on t.id == cc.movie_id
  Add          r54, r54, r248
  Jump         L44
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r45, r45, r248
  Jump         L45
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Jump         L46
L1:
  // from cc in complete_cast
  AddInt       r26, r26, r248
  Jump         L47
L0:
  // producing_company: min(from x in matches select x.company),
  Const        r249, "producing_company"
  Const        r250, []
  IterPrep     r251, r11
  Len          r252, r251
  Move         r253, r27
L49:
  LessInt      r254, r253, r252
  JumpIfFalse  r254, L48
  Index        r256, r251, r253
  Index        r257, r256, r22
  Append       r250, r250, r257
  AddInt       r253, r253, r248
  Jump         L49
L48:
  // link_type: min(from x in matches select x.link),
  Const        r261, []
  IterPrep     r262, r11
  Len          r263, r262
  Move         r264, r27
L51:
  LessInt      r265, r264, r263
  JumpIfFalse  r265, L50
  Index        r256, r262, r264
  Index        r267, r256, r17
  Append       r261, r261, r267
  AddInt       r264, r264, r248
  Jump         L51
L50:
  // complete_western_sequel: min(from x in matches select x.title)
  Const        r271, []
  IterPrep     r272, r11
  Len          r273, r272
  Move         r274, r27
L53:
  LessInt      r275, r274, r273
  JumpIfFalse  r275, L52
  Index        r256, r272, r274
  Index        r277, r256, r23
  Append       r271, r271, r277
  AddInt       r274, r274, r248
  Jump         L53
L52:
  // let result = {
  MakeMap      r283, 3, r249
  // json(result)
  JSON         r283
  // expect result == {
  Const        r284, {"complete_western_sequel": "Western Sequel", "link_type": "follows", "producing_company": "Best Film"}
  Equal        r285, r283, r284
  Expect       r285
  Return       r0
