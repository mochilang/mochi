func main (regs=52)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "crew"}, {"id": 3, "kind": "complete"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 3, "subject_id": 2}]
L28:
  // let company_name = [
  Const        r2, [{"country_code": "[se]", "id": 1, "name": "Best Film"}, {"country_code": "[pl]", "id": 2, "name": "Polish Film"}]
L25:
  // let company_type = [
  Const        r3, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
L12:
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "remake"}]
  // let link_type = [
  Const        r5, [{"id": 1, "link": "follows"}, {"id": 2, "link": "related"}]
L18:
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "extra"}]
L30:
  // let movie_info = [
  Const        r7, [{"info": "Sweden", "movie_id": 1}, {"info": "USA", "movie_id": 2}]
L33:
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
L32:
  // let movie_link = [
  Const        r9, [{"link_type_id": 1, "movie_id": 1}, {"link_type_id": 2, "movie_id": 2}]
  // let title = [
  Const        r10, [{"id": 1, "production_year": 1980, "title": "Western Sequel"}, {"id": 2, "production_year": 1999, "title": "Another Movie"}]
  // from cc in complete_cast
  Const        r11, []
L15:
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Const        r12, "kind"
L13:
  // cn.country_code != "[pl]" &&
  Const        r13, "country_code"
L19:
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r14, "name"
L14:
  // k.keyword == "sequel" &&
  Const        r15, "keyword"
  // lt.link.contains("follow") &&
  Const        r16, "link"
  // mc.note == null &&
  Const        r17, "note"
L17:
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Const        r18, "info"
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r19, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r20, "movie_id"
L27:
  // company: cn.name,
  Const        r21, "company"
  // title: t.title
  Const        r22, "title"
  // from cc in complete_cast
  IterPrep     r23, r1
L35:
  Len          r1, r23
L24:
  Const        r24, 0
L21:
  Move         r25, r24
  LessInt      r26, r25, r1
L20:
  JumpIfFalse  r26, L0
L2:
  Index        r26, r23, r25
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r23, r0
L23:
  Len          r1, r23
  Const        r27, "id"
  Const        r28, "subject_id"
L34:
  Move         r29, r24
  LessInt      r30, r29, r1
  JumpIfFalse  r30, L1
  Index        r30, r23, r29
  Index        r29, r30, r27
L22:
  Index        r23, r26, r28
  Equal        r28, r29, r23
L31:
  JumpIfFalse  r28, L2
L16:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r28, r0
  Len          r23, r28
  Const        r29, "status_id"
L11:
  Move         r1, r24
  LessInt      r31, r1, r23
  JumpIfFalse  r31, L2
  Index        r23, r28, r1
  Index        r28, r23, r27
  Index        r32, r26, r29
  Equal        r29, r28, r32
  JumpIfFalse  r29, L3
  // join t in title on t.id == cc.movie_id
  IterPrep     r29, r10
  Len          r10, r29
  Move         r32, r24
  LessInt      r28, r32, r10
  JumpIfFalse  r28, L3
  Index        r28, r29, r32
  Index        r29, r28, r27
  Index        r10, r26, r20
  Equal        r33, r29, r10
  JumpIfFalse  r33, L4
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r33, r9
  Len          r9, r33
  Move         r10, r24
  LessInt      r29, r10, r9
  JumpIfFalse  r29, L4
  Index        r29, r33, r10
  Index        r33, r29, r20
  Index        r9, r28, r27
  Equal        r34, r33, r9
  JumpIfFalse  r34, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r34, r5
  Len          r5, r34
  Const        r9, "link_type_id"
  Move         r33, r24
  LessInt      r35, r33, r5
  JumpIfFalse  r35, L5
  Index        r35, r34, r33
  Index        r34, r35, r27
  Index        r5, r29, r9
  Equal        r9, r34, r5
  JumpIfFalse  r9, L6
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r9, r8
  Len          r8, r9
  Move         r5, r24
  LessInt      r36, r5, r8
  JumpIfFalse  r36, L6
  Index        r36, r9, r5
  Index        r9, r36, r20
  Index        r8, r28, r27
  Equal        r37, r9, r8
  JumpIfFalse  r37, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r37, r4
  Len          r4, r37
  Const        r9, "keyword_id"
  Move         r38, r24
  LessInt      r39, r38, r4
  JumpIfFalse  r39, L7
  Index        r39, r37, r38
  Index        r37, r39, r27
  Index        r4, r36, r9
  Equal        r9, r37, r4
  JumpIfFalse  r9, L8
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r4, r6
  Len          r6, r4
  Move         r37, r24
  LessInt      r40, r37, r6
  JumpIfFalse  r40, L8
  Index        r40, r4, r37
  Index        r4, r40, r20
  Index        r6, r28, r27
  Equal        r41, r4, r6
  JumpIfFalse  r41, L9
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r41, r3
  Len          r3, r41
  Const        r6, "company_type_id"
  Move         r4, r24
  LessInt      r42, r4, r3
  JumpIfFalse  r42, L9
  Index        r42, r41, r4
  Index        r3, r42, r27
  Index        r43, r40, r6
  Equal        r6, r3, r43
  JumpIfFalse  r6, L10
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r6, r2
  Len          r2, r6
  Const        r43, "company_id"
  Move         r3, r24
  LessInt      r44, r3, r2
  JumpIfFalse  r44, L10
  Index        r44, r6, r3
  Index        r6, r44, r27
  Index        r45, r40, r43
  Equal        r43, r6, r45
  JumpIfFalse  r43, L11
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r43, r7
  Len          r7, r43
  Move         r45, r24
  LessInt      r6, r45, r7
  JumpIfFalse  r6, L11
  Index        r6, r43, r45
  Index        r43, r6, r20
  Index        r7, r28, r27
  Equal        r27, r43, r7
  JumpIfFalse  r27, L12
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Index        r27, r30, r12
  Const        r7, "cast"
  Equal        r43, r27, r7
  Index        r7, r30, r12
  Const        r30, "crew"
  Equal        r27, r7, r30
  Move         r30, r43
  JumpIfTrue   r30, L13
  Move         r30, r27
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r27, r28, r19
  Const        r43, 1950
  LessEq       r46, r43, r27
  Index        r43, r28, r19
  Const        r19, 2000
  LessEq       r27, r43, r19
  // cct2.kind == "complete" &&
  Index        r19, r23, r12
  Const        r23, "complete"
  Equal        r43, r19, r23
  // cn.country_code != "[pl]" &&
  Index        r23, r44, r13
  Const        r13, "[pl]"
  NotEqual     r19, r23, r13
  // ct.kind == "production companies" &&
  Index        r13, r42, r12
  Const        r42, "production companies"
  Equal        r12, r13, r42
  // k.keyword == "sequel" &&
  Index        r42, r39, r15
  Const        r39, "sequel"
  Equal        r15, r42, r39
  // mc.note == null &&
  Index        r39, r40, r17
  Const        r17, nil
  Equal        r42, r39, r17
  // ml.movie_id == mk.movie_id &&
  Index        r17, r29, r20
  Index        r39, r36, r20
  Equal        r13, r17, r39
  // ml.movie_id == mc.movie_id &&
  Index        r39, r29, r20
  Index        r17, r40, r20
  Equal        r23, r39, r17
  // mk.movie_id == mc.movie_id &&
  Index        r17, r36, r20
  Index        r39, r40, r20
  Equal        r47, r17, r39
  // ml.movie_id == mi.movie_id &&
  Index        r39, r29, r20
  Index        r17, r6, r20
  Equal        r48, r39, r17
  // mk.movie_id == mi.movie_id &&
  Index        r17, r36, r20
  Index        r39, r6, r20
  Equal        r49, r17, r39
  // mc.movie_id == mi.movie_id &&
  Index        r39, r40, r20
  Index        r17, r6, r20
  Equal        r50, r39, r17
  // ml.movie_id == cc.movie_id &&
  Index        r17, r29, r20
  Index        r39, r26, r20
  Equal        r51, r17, r39
  // mk.movie_id == cc.movie_id &&
  Index        r39, r36, r20
  Index        r36, r26, r20
  Equal        r17, r39, r36
  // mc.movie_id == cc.movie_id &&
  Index        r36, r40, r20
  Index        r40, r26, r20
  Equal        r39, r36, r40
  // mi.movie_id == cc.movie_id
  Index        r40, r6, r20
  Index        r36, r26, r20
  Equal        r26, r40, r36
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Move         r36, r30
  JumpIfFalse  r36, L14
  // cct2.kind == "complete" &&
  Move         r36, r43
  JumpIfFalse  r36, L15
  // cn.country_code != "[pl]" &&
  Move         r36, r19
  JumpIfFalse  r36, L16
  Index        r36, r44, r14
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r19, "Film"
  In           r43, r19, r36
  JumpIfTrue   r43, L16
  Index        r19, r44, r14
  Const        r36, "Warner"
  In           r43, r36, r19
  Move         r36, r43
  JumpIfFalse  r36, L16
  // ct.kind == "production companies" &&
  Move         r36, r12
  JumpIfFalse  r36, L17
  // k.keyword == "sequel" &&
  Move         r36, r15
  JumpIfFalse  r36, L18
  Index        r36, r35, r16
  // lt.link.contains("follow") &&
  Const        r15, "follow"
  In           r12, r15, r36
  JumpIfFalse  r12, L18
  // mc.note == null &&
  Move         r12, r42
  JumpIfFalse  r12, L19
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Index        r12, r6, r18
  Const        r42, "Sweden"
  Equal        r15, r12, r42
  Index        r42, r6, r18
  Const        r12, "Germany"
  Equal        r36, r42, r12
  // mi.info == "Swedish" || mi.info == "German") &&
  Index        r12, r6, r18
  Const        r42, "Swedish"
  Equal        r43, r12, r42
  Index        r42, r6, r18
  Const        r6, "German"
  Equal        r18, r42, r6
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Move         r6, r15
  JumpIfTrue   r6, L20
  Move         r6, r36
  JumpIfTrue   r6, L21
  // mi.info == "Swedish" || mi.info == "German") &&
  Move         r6, r43
  JumpIfTrue   r6, L19
  Move         r6, r18
  JumpIfFalse  r6, L22
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Move         r6, r46
  JumpIfFalse  r6, L22
  Move         r6, r27
  JumpIfFalse  r6, L23
  // ml.movie_id == mk.movie_id &&
  Move         r6, r13
  JumpIfFalse  r6, L24
  // ml.movie_id == mc.movie_id &&
  Move         r6, r23
  JumpIfFalse  r6, L25
  // mk.movie_id == mc.movie_id &&
  Move         r6, r47
  JumpIfFalse  r6, L25
  // ml.movie_id == mi.movie_id &&
  Move         r6, r48
  JumpIfFalse  r6, L26
L26:
  // mk.movie_id == mi.movie_id &&
  Move         r6, r49
  JumpIfFalse  r6, L23
  // mc.movie_id == mi.movie_id &&
  Move         r6, r50
  JumpIfFalse  r6, L27
  // ml.movie_id == cc.movie_id &&
  Move         r6, r51
  JumpIfFalse  r6, L28
  // mk.movie_id == cc.movie_id &&
  Move         r6, r17
  JumpIfFalse  r6, L29
L29:
  // mc.movie_id == cc.movie_id &&
  Move         r6, r39
  JumpIfFalse  r6, L12
  Move         r6, r26
  // where (
  JumpIfFalse  r6, L12
  // company: cn.name,
  Move         r6, r21
  Index        r26, r44, r14
  // link: lt.link,
  Move         r44, r16
  Index        r14, r35, r16
  // title: t.title
  Move         r35, r22
  Index        r39, r28, r22
  // company: cn.name,
  Move         r28, r6
  Move         r6, r26
  // link: lt.link,
  Move         r26, r44
  Move         r44, r14
  // title: t.title
  Move         r14, r35
  Move         r35, r39
  // select {
  MakeMap      r39, 3, r28
  // from cc in complete_cast
  Append       r11, r11, r39
  // join mi in movie_info on mi.movie_id == t.id
  Const        r39, 1
  Add          r45, r45, r39
  Jump         L30
  // join cn in company_name on cn.id == mc.company_id
  Add          r3, r3, r39
  Jump         L11
L10:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r4, r4, r39
  Jump         L28
L9:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r37, r37, r39
  Jump         L31
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r38, r38, r39
  Jump         L32
L7:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r5, r5, r39
  Jump         L33
L6:
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r33, r33, r39
  Jump         L34
L5:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r10, r10, r39
  Jump         L2
L4:
  // join t in title on t.id == cc.movie_id
  Add          r32, r32, r39
  Jump         L30
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r1, r1, r39
  Jump         L23
L1:
  // from cc in complete_cast
  AddInt       r25, r25, r39
  Jump         L35
L0:
  // producing_company: min(from x in matches select x.company),
  Const        r7, "producing_company"
  Const        r31, []
  IterPrep     r1, r11
  Len          r25, r1
  Move         r45, r24
L37:
  LessInt      r3, r45, r25
  JumpIfFalse  r3, L36
  Index        r3, r1, r45
  Index        r1, r3, r21
  Append       r31, r31, r1
  AddInt       r45, r45, r39
  Jump         L37
L36:
  Min          r1, r31
  // link_type: min(from x in matches select x.link),
  Const        r31, "link_type"
  Const        r45, []
  IterPrep     r21, r11
  Len          r25, r21
  Move         r2, r24
L39:
  LessInt      r4, r2, r25
  JumpIfFalse  r4, L38
  Index        r3, r21, r2
  Index        r4, r3, r16
  Append       r45, r45, r4
  AddInt       r2, r2, r39
  Jump         L39
L38:
  Min          r4, r45
  // complete_western_sequel: min(from x in matches select x.title)
  Const        r45, "complete_western_sequel"
  Const        r2, []
  IterPrep     r16, r11
  Len          r11, r16
  Move         r25, r24
L41:
  LessInt      r24, r25, r11
  JumpIfFalse  r24, L40
  Index        r3, r16, r25
  Index        r24, r3, r22
  Append       r2, r2, r24
  AddInt       r25, r25, r39
  Jump         L41
L40:
  Min          r24, r2
  // producing_company: min(from x in matches select x.company),
  Move         r2, r7
  Move         r7, r1
  // link_type: min(from x in matches select x.link),
  Move         r1, r31
  Move         r31, r4
  // complete_western_sequel: min(from x in matches select x.title)
  Move         r4, r45
  Move         r45, r24
  // let result = {
  MakeMap      r24, 3, r2
  // json(result)
  JSON         r24
  // expect result == {
  Const        r45, {"complete_western_sequel": "Western Sequel", "link_type": "follows", "producing_company": "Best Film"}
  Equal        r4, r24, r45
  Expect       r4
  Return       r0
