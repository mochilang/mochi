func main (regs=68)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "crew"}, {"id": 3, "kind": "complete"}]
L26:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 3, "subject_id": 2}]
  // let company_name = [
  Const        r2, [{"country_code": "[se]", "id": 1, "name": "Best Film"}, {"country_code": "[pl]", "id": 2, "name": "Polish Film"}]
L20:
  // let company_type = [
  Const        r3, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
  // let keyword = [
  Const        r4, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "remake"}]
  // let link_type = [
  Const        r5, [{"id": 1, "link": "follows"}, {"id": 2, "link": "related"}]
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "extra"}]
  // let movie_info = [
  Const        r7, [{"info": "Sweden", "movie_id": 1}, {"info": "USA", "movie_id": 2}]
L23:
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let movie_link = [
  Const        r9, [{"link_type_id": 1, "movie_id": 1}, {"link_type_id": 2, "movie_id": 2}]
  // let title = [
  Const        r10, [{"id": 1, "production_year": 1980, "title": "Western Sequel"}, {"id": 2, "production_year": 1999, "title": "Another Movie"}]
  // from cc in complete_cast
  Const        r11, []
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Const        r12, "kind"
  // cn.country_code != "[pl]" &&
  Const        r13, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r14, "name"
  Const        r15, "contains"
  // k.keyword == "sequel" &&
  Const        r15, "keyword"
  // lt.link.contains("follow") &&
  Const        r16, "link"
  // mc.note == null &&
  Const        r17, "note"
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Const        r18, "info"
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r19, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r20, "movie_id"
  // company: cn.name,
  Const        r21, "company"
  // title: t.title
  Const        r22, "title"
  // from cc in complete_cast
  IterPrep     r23, r1
  Len          r1, r23
L28:
  Const        r24, 0
L27:
  Move         r25, r24
L13:
  LessInt      r26, r25, r1
L24:
  JumpIfFalse  r26, L0
  Index        r1, r23, r25
  Move         r23, r1
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r1, r0
  Len          r27, r1
L17:
  Const        r28, "id"
  Const        r29, "subject_id"
L25:
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
  Index        r27, r1, r30
  Move         r31, r27
L22:
  Index        r1, r31, r28
  Index        r32, r23, r29
  Equal        r29, r1, r32
L21:
  JumpIfFalse  r29, L2
L19:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r1, r0
  Len          r32, r1
  Const        r29, "status_id"
  Move         r33, r24
  LessInt      r34, r33, r32
L18:
  JumpIfFalse  r34, L2
  Index        r32, r1, r33
  Move         r34, r32
  Index        r1, r34, r28
L15:
  Index        r32, r23, r29
  Equal        r29, r1, r32
  JumpIfFalse  r29, L3
  // join t in title on t.id == cc.movie_id
  IterPrep     r32, r10
  Len          r29, r32
  Move         r10, r24
  LessInt      r35, r10, r29
  JumpIfFalse  r35, L3
  Index        r29, r32, r10
  Move         r35, r29
L16:
  Index        r32, r35, r28
  Index        r29, r23, r20
  Equal        r36, r32, r29
  JumpIfFalse  r36, L4
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r32, r9
  Len          r29, r32
  Move         r9, r24
  LessInt      r37, r9, r29
  JumpIfFalse  r37, L4
  Index        r29, r32, r9
  Move         r37, r29
  Index        r32, r37, r20
  Index        r29, r35, r28
  Equal        r38, r32, r29
  JumpIfFalse  r38, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r32, r5
  Len          r29, r32
  Const        r38, "link_type_id"
  Move         r5, r24
  LessInt      r39, r5, r29
  JumpIfFalse  r39, L5
  Index        r39, r32, r5
  Move         r32, r39
  Index        r39, r32, r28
  Index        r40, r37, r38
  Equal        r38, r39, r40
  JumpIfFalse  r38, L6
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r39, r8
  Len          r40, r39
  Move         r38, r24
  LessInt      r8, r38, r40
  JumpIfFalse  r8, L6
  Index        r40, r39, r38
  Move         r39, r40
  Index        r40, r39, r20
  Index        r41, r35, r28
  Equal        r42, r40, r41
  JumpIfFalse  r42, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r40, r4
  Len          r41, r40
  Const        r42, "keyword_id"
  Move         r4, r24
  LessInt      r43, r4, r41
  JumpIfFalse  r43, L7
  Index        r41, r40, r4
  Move         r43, r41
  Index        r40, r43, r28
  Index        r44, r39, r42
  Equal        r42, r40, r44
  JumpIfFalse  r42, L8
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r40, r6
  Len          r44, r40
  Move         r42, r24
  LessInt      r6, r42, r44
  JumpIfFalse  r6, L8
  Index        r44, r40, r42
  Move         r6, r44
  Index        r40, r6, r20
  Index        r44, r35, r28
  Equal        r45, r40, r44
  JumpIfFalse  r45, L9
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r40, r3
  Len          r45, r40
  Const        r3, "company_type_id"
  Move         r46, r24
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L9
  Index        r45, r40, r46
  Move         r47, r45
  Index        r40, r47, r28
  Index        r45, r6, r3
  Equal        r3, r40, r45
  JumpIfFalse  r3, L10
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r40, r2
  Len          r45, r40
  Const        r2, "company_id"
  Move         r48, r24
  LessInt      r49, r48, r45
  JumpIfFalse  r49, L10
  Index        r45, r40, r48
  Move         r49, r45
  Index        r40, r49, r28
  Index        r45, r6, r2
  Equal        r2, r40, r45
  JumpIfFalse  r2, L11
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r40, r7
  Len          r45, r40
  Move         r2, r24
  LessInt      r7, r2, r45
  JumpIfFalse  r7, L11
  Index        r7, r40, r2
  Move         r40, r7
  Index        r7, r40, r20
  Index        r50, r35, r28
  Equal        r28, r7, r50
  JumpIfFalse  r28, L12
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Index        r7, r31, r12
  Const        r50, "cast"
  Equal        r28, r7, r50
  Index        r7, r31, r12
  Const        r50, "crew"
  Equal        r31, r7, r50
  Move         r7, r28
  JumpIfTrue   r7, L13
  Move         r7, r31
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r28, r35, r19
  Const        r31, 1950
  LessEq       r51, r31, r28
  Index        r28, r35, r19
  Const        r31, 2000
  LessEq       r19, r28, r31
  // cct2.kind == "complete" &&
  Index        r28, r34, r12
  Const        r31, "complete"
  Equal        r34, r28, r31
  // cn.country_code != "[pl]" &&
  Index        r28, r49, r13
  Const        r31, "[pl]"
  NotEqual     r13, r28, r31
  // ct.kind == "production companies" &&
  Index        r28, r47, r12
  Const        r31, "production companies"
  Equal        r12, r28, r31
  // k.keyword == "sequel" &&
  Index        r47, r43, r15
  Const        r28, "sequel"
  Equal        r31, r47, r28
  // mc.note == null &&
  Index        r15, r6, r17
  Const        r43, nil
  Equal        r47, r15, r43
  // ml.movie_id == mk.movie_id &&
  Index        r28, r37, r20
  Index        r17, r39, r20
  Equal        r15, r28, r17
  // ml.movie_id == mc.movie_id &&
  Index        r43, r37, r20
  Index        r28, r6, r20
  Equal        r17, r43, r28
  // mk.movie_id == mc.movie_id &&
  Index        r43, r39, r20
  Index        r28, r6, r20
  Equal        r52, r43, r28
  // ml.movie_id == mi.movie_id &&
  Index        r43, r37, r20
  Index        r28, r40, r20
  Equal        r53, r43, r28
  // mk.movie_id == mi.movie_id &&
  Index        r43, r39, r20
  Index        r28, r40, r20
  Equal        r54, r43, r28
  // mc.movie_id == mi.movie_id &&
  Index        r43, r6, r20
  Index        r28, r40, r20
  Equal        r55, r43, r28
  // ml.movie_id == cc.movie_id &&
  Index        r43, r37, r20
  Index        r28, r23, r20
  Equal        r37, r43, r28
  // mk.movie_id == cc.movie_id &&
  Index        r43, r39, r20
  Index        r28, r23, r20
  Equal        r39, r43, r28
  // mc.movie_id == cc.movie_id &&
  Index        r43, r6, r20
  Index        r28, r23, r20
  Equal        r6, r43, r28
  // mi.movie_id == cc.movie_id
  Index        r43, r40, r20
  Index        r28, r23, r20
  Equal        r20, r43, r28
  // (cct1.kind == "cast" || cct1.kind == "crew") &&
  Move         r23, r7
  JumpIfFalse  r23, L14
  Move         r23, r34
  // cct2.kind == "complete" &&
  JumpIfFalse  r23, L14
  Move         r23, r13
  // cn.country_code != "[pl]" &&
  JumpIfFalse  r23, L14
  Index        r43, r49, r14
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r28, "Film"
  In           r7, r28, r43
  Move         r13, r7
  JumpIfTrue   r13, L15
  Index        r43, r49, r14
  Const        r28, "Warner"
  In           r7, r28, r43
  Move         r13, r7
  // cn.country_code != "[pl]" &&
  Move         r23, r13
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  JumpIfFalse  r23, L14
  Move         r23, r12
  // ct.kind == "production companies" &&
  JumpIfFalse  r23, L14
  Move         r23, r31
  // k.keyword == "sequel" &&
  JumpIfFalse  r23, L14
  Index        r12, r32, r16
  // lt.link.contains("follow") &&
  Const        r31, "follow"
  In           r13, r31, r12
  // k.keyword == "sequel" &&
  Move         r23, r13
  // lt.link.contains("follow") &&
  JumpIfFalse  r23, L14
  Move         r23, r47
  // mc.note == null &&
  JumpIfFalse  r23, L14
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Index        r43, r40, r18
  Const        r28, "Sweden"
  Equal        r7, r43, r28
  Index        r47, r40, r18
  Const        r12, "Germany"
  Equal        r31, r47, r12
  // mi.info == "Swedish" || mi.info == "German") &&
  Index        r13, r40, r18
  Const        r43, "Swedish"
  Equal        r28, r13, r43
  Index        r47, r40, r18
  Const        r12, "German"
  Equal        r13, r47, r12
  // (mi.info == "Sweden" || mi.info == "Germany" ||
  Move         r43, r7
  JumpIfTrue   r43, L16
  Move         r43, r31
  JumpIfTrue   r43, L16
  Move         r43, r28
  // mi.info == "Swedish" || mi.info == "German") &&
  JumpIfTrue   r43, L16
  Move         r43, r13
  // mc.note == null &&
  Move         r23, r43
  // mi.info == "Swedish" || mi.info == "German") &&
  JumpIfFalse  r23, L14
  Move         r23, r51
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  JumpIfFalse  r23, L14
  Move         r23, r19
  JumpIfFalse  r23, L14
  Move         r23, r15
  // ml.movie_id == mk.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r17
  // ml.movie_id == mc.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r52
  // mk.movie_id == mc.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r53
  // ml.movie_id == mi.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r54
  // mk.movie_id == mi.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r55
  // mc.movie_id == mi.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r37
  // ml.movie_id == cc.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r39
  // mk.movie_id == cc.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r6
  // mc.movie_id == cc.movie_id &&
  JumpIfFalse  r23, L14
  Move         r23, r20
L14:
  // where (
  JumpIfFalse  r23, L12
  // company: cn.name,
  Const        r18, "company"
  Index        r40, r49, r14
  // link: lt.link,
  Const        r47, "link"
  Index        r12, r32, r16
  // title: t.title
  Const        r51, "title"
  Index        r19, r35, r22
  // company: cn.name,
  Move         r56, r18
  Move         r57, r40
  // link: lt.link,
  Move         r58, r47
  Move         r59, r12
  // title: t.title
  Move         r60, r51
  Move         r61, r19
  // select {
  MakeMap      r15, 3, r56
  // from cc in complete_cast
  Append       r17, r11, r15
  Move         r11, r17
L12:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r52, 1
  Add          r2, r2, r52
  Jump         L17
L11:
  // join cn in company_name on cn.id == mc.company_id
  Add          r48, r48, r52
  Jump         L18
L10:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r46, r46, r52
  Jump         L19
L9:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r42, r42, r52
  Jump         L20
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r4, r4, r52
  Jump         L21
L7:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r38, r38, r52
  Jump         L22
L6:
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r5, r5, r52
  Jump         L23
L5:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r9, r9, r52
  Jump         L24
L4:
  // join t in title on t.id == cc.movie_id
  Add          r10, r10, r52
  Jump         L25
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r33, r33, r52
  Jump         L26
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r30, r30, r52
  Jump         L27
L1:
  // from cc in complete_cast
  AddInt       r25, r25, r52
  Jump         L28
L0:
  // producing_company: min(from x in matches select x.company),
  Const        r53, "producing_company"
  Const        r54, []
  IterPrep     r55, r11
  Len          r37, r55
  Move         r39, r24
L30:
  LessInt      r6, r39, r37
  JumpIfFalse  r6, L29
  Index        r20, r55, r39
  Move         r23, r20
  Index        r7, r23, r21
  Append       r31, r54, r7
  Move         r54, r31
  AddInt       r39, r39, r52
  Jump         L30
L29:
  Min          r28, r54
  // link_type: min(from x in matches select x.link),
  Const        r13, "link_type"
  Const        r43, []
  IterPrep     r14, r11
  Len          r49, r14
  Move         r32, r24
L32:
  LessInt      r35, r32, r49
  JumpIfFalse  r35, L31
  Index        r18, r14, r32
  Move         r23, r18
  Index        r40, r23, r16
  Append       r47, r43, r40
  Move         r43, r47
  AddInt       r32, r32, r52
  Jump         L32
L31:
  Min          r12, r43
  // complete_western_sequel: min(from x in matches select x.title)
  Const        r51, "complete_western_sequel"
  Const        r19, []
  IterPrep     r56, r11
  Len          r57, r56
  Move         r58, r24
L34:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L33
  Index        r60, r56, r58
  Move         r23, r60
  Index        r61, r23, r22
  Append       r15, r19, r61
  Move         r19, r15
  AddInt       r58, r58, r52
  Jump         L34
L33:
  Min          r17, r19
  // producing_company: min(from x in matches select x.company),
  Move         r62, r53
  Move         r63, r28
  // link_type: min(from x in matches select x.link),
  Move         r64, r13
  Move         r65, r12
  // complete_western_sequel: min(from x in matches select x.title)
  Move         r66, r51
  Move         r67, r17
  // let result = {
  MakeMap      r25, 3, r62
  // json(result)
  JSON         r25
  // expect result == {
  Const        r26, {"complete_western_sequel": "Western Sequel", "link_type": "follows", "producing_company": "Best Film"}
  Equal        r30, r25, r26
  Expect       r30
  Return       r0
