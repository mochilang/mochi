func main (regs=44)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "ACME Film Works"}, {"country_code": "[pl]", "id": 2, "name": "Polish Warner"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
L11:
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "drama"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "is follow up"}, {"id": 2, "link": "references"}]
L12:
  // let title = [
  Const        r4, [{"id": 10, "production_year": 1975, "title": "Western Return"}, {"id": 20, "production_year": 2015, "title": "Other Movie"}]
L17:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}]
L9:
  // let movie_info = [
  Const        r6, [{"info": "Sweden", "movie_id": 10}, {"info": "USA", "movie_id": 20}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
  // let movie_link = [
  Const        r8, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}]
  // let allowed_countries = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  Const        r9, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from cn in company_name
  Const        r10, []
  // where cn.country_code != "[pl]" &&
  Const        r11, "country_code"
L16:
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r12, "name"
  Const        r13, "contains"
L14:
  Const        r14, "name"
  Const        r15, "contains"
L13:
  // ct.kind == "production companies" &&
  Const        r16, "kind"
L19:
  // k.keyword == "sequel" &&
  Const        r17, "keyword"
L0:
  // lt.link.contains("follow") &&
  Const        r18, "link"
L18:
  Const        r19, "contains"
  // mc.note == null &&
  Const        r20, "note"
  // (mi.info in allowed_countries) &&
  Const        r21, "info"
L8:
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r22, "production_year"
L15:
  Const        r23, "production_year"
  // company_name: cn.name,
  Const        r24, "company_name"
L1:
  Const        r25, "name"
L6:
  // link_type: lt.link,
  Const        r26, "link_type"
L5:
  Const        r27, "link"
  // western_follow_up: t.title
  Const        r28, "western_follow_up"
L7:
  Const        r29, "title"
L2:
  // from cn in company_name
  IterPrep     r30, r0
L10:
  Len          r31, r30
L4:
  Const        r11, 0
L20:
  LessInt      r12, r11, r31
  JumpIfFalse  r12, L0
  Index        r13, r30, r11
L3:
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r14, r5
  Len          r15, r14
  Const        r16, "company_id"
  Const        r17, "id"
  // where cn.country_code != "[pl]" &&
  Const        r18, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r19, "name"
L22:
  Const        r20, "contains"
  Const        r21, "name"
  Const        r22, "contains"
  // ct.kind == "production companies" &&
  Const        r23, "kind"
  // k.keyword == "sequel" &&
  Const        r24, "keyword"
  // lt.link.contains("follow") &&
  Const        r25, "link"
  Const        r26, "contains"
  // mc.note == null &&
  Const        r27, "note"
  // (mi.info in allowed_countries) &&
  Const        r28, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r29, "production_year"
  Const        r31, "production_year"
  // company_name: cn.name,
  Const        r12, "company_name"
  Const        r30, "name"
  // link_type: lt.link,
  Const        r5, "link_type"
  Const        r16, "link"
  // western_follow_up: t.title
  Const        r17, "western_follow_up"
  Const        r18, "title"
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r19, 0
  LessInt      r20, r19, r15
  JumpIfFalse  r20, L1
  Index        r21, r14, r19
  Const        r22, "company_id"
  Index        r23, r21, r22
  Const        r24, "id"
  Index        r25, r13, r24
  Equal        r26, r23, r25
  JumpIfFalse  r26, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, "id"
  Const        r31, "company_type_id"
  // where cn.country_code != "[pl]" &&
  Const        r12, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r30, "name"
  Const        r5, "contains"
  Const        r16, "name"
  Const        r17, "contains"
  // ct.kind == "production companies" &&
  Const        r18, "kind"
  // k.keyword == "sequel" &&
  Const        r15, "keyword"
  // lt.link.contains("follow") &&
  Const        r20, "link"
  Const        r14, "contains"
  // mc.note == null &&
  Const        r22, "note"
  // (mi.info in allowed_countries) &&
  Const        r24, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r23, "production_year"
  Const        r25, "production_year"
  // company_name: cn.name,
  Const        r26, "company_name"
  Const        r1, "name"
  // link_type: lt.link,
  Const        r29, "link_type"
  Const        r31, "link"
  // western_follow_up: t.title
  Const        r12, "western_follow_up"
  Const        r30, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r5, 0
  LessInt      r16, r5, r28
  JumpIfFalse  r16, L2
  Index        r17, r27, r5
  Const        r18, "id"
  Index        r15, r17, r18
  Const        r20, "company_type_id"
  Index        r14, r21, r20
  Equal        r22, r15, r14
  JumpIfFalse  r22, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r24, r4
  Len          r23, r24
  Const        r25, "id"
  Const        r26, "movie_id"
  // where cn.country_code != "[pl]" &&
  Const        r1, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r29, "name"
  Const        r31, "contains"
  Const        r12, "name"
  Const        r30, "contains"
  // ct.kind == "production companies" &&
  Const        r28, "kind"
  // k.keyword == "sequel" &&
  Const        r16, "keyword"
  // lt.link.contains("follow") &&
  Const        r27, "link"
  Const        r18, "contains"
  // mc.note == null &&
  Const        r20, "note"
  // (mi.info in allowed_countries) &&
  Const        r15, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r14, "production_year"
  Const        r22, "production_year"
  // company_name: cn.name,
  Const        r4, "company_name"
  Const        r25, "name"
  // link_type: lt.link,
  Const        r26, "link_type"
  Const        r1, "link"
  // western_follow_up: t.title
  Const        r29, "western_follow_up"
  Const        r31, "title"
  // join t in title on t.id == mc.movie_id
  Const        r12, 0
  LessInt      r30, r12, r23
  JumpIfFalse  r30, L3
  Index        r28, r24, r12
  Const        r16, "id"
  Index        r27, r28, r16
  Const        r18, "movie_id"
  Index        r20, r21, r18
  Equal        r15, r27, r20
  JumpIfFalse  r15, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r14, r7
  Len          r22, r14
  Const        r4, "movie_id"
  Const        r25, "id"
  // where cn.country_code != "[pl]" &&
  Const        r26, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r1, "name"
  Const        r29, "contains"
  Const        r31, "name"
  Const        r23, "contains"
  // ct.kind == "production companies" &&
  Const        r30, "kind"
  // k.keyword == "sequel" &&
  Const        r24, "keyword"
  // lt.link.contains("follow") &&
  Const        r16, "link"
  Const        r18, "contains"
  // mc.note == null &&
  Const        r27, "note"
  // (mi.info in allowed_countries) &&
  Const        r20, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r15, "production_year"
  Const        r7, "production_year"
  // company_name: cn.name,
  Const        r4, "company_name"
  Const        r25, "name"
  // link_type: lt.link,
  Const        r26, "link_type"
  Const        r1, "link"
  // western_follow_up: t.title
  Const        r29, "western_follow_up"
  Const        r31, "title"
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r23, 0
  LessInt      r30, r23, r22
  JumpIfFalse  r30, L4
  Index        r24, r14, r23
  Const        r16, "movie_id"
  Index        r18, r24, r16
  Const        r27, "id"
  Index        r20, r28, r27
  Equal        r15, r18, r20
  JumpIfFalse  r15, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r7, r2
  Len          r4, r7
  Const        r25, "id"
  Const        r26, "keyword_id"
  // where cn.country_code != "[pl]" &&
  Const        r1, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r29, "name"
  Const        r31, "contains"
  Const        r22, "name"
  Const        r30, "contains"
  // ct.kind == "production companies" &&
  Const        r14, "kind"
  // k.keyword == "sequel" &&
  Const        r16, "keyword"
  // lt.link.contains("follow") &&
  Const        r27, "link"
  Const        r18, "contains"
  // mc.note == null &&
  Const        r20, "note"
  // (mi.info in allowed_countries) &&
  Const        r15, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r2, "production_year"
  Const        r25, "production_year"
  // company_name: cn.name,
  Const        r26, "company_name"
  Const        r1, "name"
  // link_type: lt.link,
  Const        r29, "link_type"
  Const        r31, "link"
  // western_follow_up: t.title
  Const        r22, "western_follow_up"
  Const        r30, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r14, 0
  LessInt      r16, r14, r4
  JumpIfFalse  r16, L5
  Index        r27, r7, r14
  Const        r18, "id"
  Index        r20, r27, r18
  Const        r15, "keyword_id"
  Index        r2, r24, r15
  Equal        r25, r20, r2
  JumpIfFalse  r25, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r26, r8
  Len          r1, r26
  Const        r29, "movie_id"
  Const        r31, "id"
  // where cn.country_code != "[pl]" &&
  Const        r22, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r30, "name"
  Const        r4, "contains"
  Const        r16, "name"
  Const        r7, "contains"
  // ct.kind == "production companies" &&
  Const        r18, "kind"
  // k.keyword == "sequel" &&
  Const        r24, "keyword"
  // lt.link.contains("follow") &&
  Const        r15, "link"
  Const        r20, "contains"
  // mc.note == null &&
  Const        r2, "note"
  // (mi.info in allowed_countries) &&
  Const        r25, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r8, "production_year"
  Const        r29, "production_year"
  // company_name: cn.name,
  Const        r31, "company_name"
  Const        r22, "name"
  // link_type: lt.link,
  Const        r30, "link_type"
  Const        r4, "link"
  // western_follow_up: t.title
  Const        r16, "western_follow_up"
  Const        r7, "title"
  // join ml in movie_link on ml.movie_id == t.id
  Const        r18, 0
  LessInt      r24, r18, r1
  JumpIfFalse  r24, L6
  Index        r15, r26, r18
  Const        r20, "movie_id"
  Index        r2, r15, r20
  Const        r25, "id"
  Index        r8, r28, r25
  Equal        r29, r2, r8
  JumpIfFalse  r29, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r31, r3
  Len          r22, r31
  Const        r30, "id"
  Const        r4, "link_type_id"
  // where cn.country_code != "[pl]" &&
  Const        r16, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r7, "name"
  Const        r1, "contains"
  Const        r24, "name"
  Const        r26, "contains"
  // ct.kind == "production companies" &&
  Const        r20, "kind"
  // k.keyword == "sequel" &&
  Const        r25, "keyword"
  // lt.link.contains("follow") &&
  Const        r2, "link"
  Const        r8, "contains"
  // mc.note == null &&
  Const        r29, "note"
  // (mi.info in allowed_countries) &&
  Const        r3, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r30, "production_year"
  Const        r4, "production_year"
  // company_name: cn.name,
  Const        r16, "company_name"
  Const        r7, "name"
  // link_type: lt.link,
  Const        r1, "link_type"
  Const        r24, "link"
  // western_follow_up: t.title
  Const        r26, "western_follow_up"
  Const        r20, "title"
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r25, 0
  LessInt      r2, r25, r22
  JumpIfFalse  r2, L7
  Index        r8, r31, r25
  Const        r29, "id"
  Index        r3, r8, r29
  Const        r30, "link_type_id"
  Index        r4, r15, r30
  Equal        r16, r3, r4
  JumpIfFalse  r16, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r7, r6
  Len          r1, r7
  Const        r24, "movie_id"
  Const        r26, "id"
  // where cn.country_code != "[pl]" &&
  Const        r20, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r22, "name"
  Const        r2, "contains"
  Const        r31, "name"
  Const        r29, "contains"
  // ct.kind == "production companies" &&
  Const        r15, "kind"
  // k.keyword == "sequel" &&
  Const        r30, "keyword"
  // lt.link.contains("follow") &&
  Const        r3, "link"
  Const        r4, "contains"
  // mc.note == null &&
  Const        r16, "note"
  // (mi.info in allowed_countries) &&
  Const        r6, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r24, "production_year"
  Const        r26, "production_year"
  // company_name: cn.name,
  Const        r20, "company_name"
  Const        r22, "name"
  // link_type: lt.link,
  Const        r2, "link_type"
  Const        r31, "link"
  // western_follow_up: t.title
  Const        r29, "western_follow_up"
  Const        r15, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r30, 0
  LessInt      r3, r30, r1
  JumpIfFalse  r3, L8
  Index        r4, r7, r30
  Const        r16, "movie_id"
  Index        r6, r4, r16
  Const        r24, "id"
  Index        r26, r28, r24
  Equal        r20, r6, r26
  JumpIfFalse  r20, L9
  // where cn.country_code != "[pl]" &&
  Const        r22, "country_code"
  Index        r2, r13, r22
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r31, "production_year"
  Index        r29, r28, r31
  Const        r15, 1950
  LessEq       r1, r15, r29
  Const        r3, "production_year"
  Index        r7, r28, r3
  Const        r16, 2000
  LessEq       r24, r7, r16
  // where cn.country_code != "[pl]" &&
  Const        r6, "[pl]"
  NotEqual     r26, r2, r6
  // ct.kind == "production companies" &&
  Const        r20, "kind"
  Index        r22, r17, r20
  Const        r31, "production companies"
  Equal        r29, r22, r31
  // k.keyword == "sequel" &&
  Const        r15, "keyword"
  Index        r3, r27, r15
  Const        r7, "sequel"
  Equal        r16, r3, r7
  // mc.note == null &&
  Const        r2, "note"
  Index        r6, r21, r2
  Const        r17, nil
  Equal        r20, r6, r17
  // where cn.country_code != "[pl]" &&
  Move         r22, r26
  JumpIfFalse  r22, L9
  Const        r31, "name"
  Index        r27, r13, r31
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r15, "Film"
  In           r3, r15, r27
  JumpIfTrue   r3, L9
  Const        r7, "name"
  Index        r21, r13, r7
  Const        r2, "Warner"
  In           r3, r2, r21
  Move         r6, r3
  JumpIfFalse  r6, L6
  // ct.kind == "production companies" &&
  Move         r17, r29
  JumpIfFalse  r17, L10
  // k.keyword == "sequel" &&
  Move         r26, r16
  JumpIfFalse  r26, L11
  Const        r22, "link"
  Index        r31, r8, r22
  // lt.link.contains("follow") &&
  Const        r27, "follow"
  In           r15, r27, r31
  JumpIfFalse  r15, L12
  // mc.note == null &&
  Move         r7, r20
  JumpIfFalse  r7, L13
  // (mi.info in allowed_countries) &&
  Const        r21, "info"
  Index        r2, r4, r21
  In           r3, r2, r9
  JumpIfFalse  r3, L6
  // t.production_year >= 1950 && t.production_year <= 2000
  Move         r6, r1
  JumpIfFalse  r6, L5
  Move         r6, r24
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r6, L9
  // company_name: cn.name,
  Const        r29, "company_name"
  Const        r17, "name"
  Index        r16, r13, r17
  // link_type: lt.link,
  Const        r26, "link_type"
  Const        r22, "link"
  Index        r31, r8, r22
  // western_follow_up: t.title
  Const        r27, "western_follow_up"
  Const        r15, "title"
  Index        r20, r28, r15
  // company_name: cn.name,
  Move         r32, r29
  Move         r33, r16
  // link_type: lt.link,
  Move         r34, r26
  Move         r35, r31
  // western_follow_up: t.title
  Move         r36, r27
  Move         r37, r20
  // select {
  MakeMap      r7, 3, r32
  // from cn in company_name
  Append       r10, r10, r7
  // join mi in movie_info on mi.movie_id == t.id
  Const        r4, 1
  Add          r30, r30, r4
  Jump         L2
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r21, 1
  Add          r25, r25, r21
  Jump         L1
  // join ml in movie_link on ml.movie_id == t.id
  Const        r9, 1
  Add          r18, r18, r9
  Jump         L0
  // join k in keyword on k.id == mk.keyword_id
  Const        r2, 1
  Add          r14, r14, r2
  Jump         L14
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r3, 1
  Add          r23, r23, r3
  Jump         L15
  // join t in title on t.id == mc.movie_id
  Const        r1, 1
  Add          r12, r12, r1
  Jump         L16
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r24, 1
  Add          r5, r5, r24
  Jump         L17
  // join mc in movie_companies on mc.company_id == cn.id
  Const        r6, 1
  Add          r19, r19, r6
  Jump         L18
  // from cn in company_name
  Const        r13, 1
  AddInt       r11, r11, r13
  Jump         L19
  // company_name: min(from r in rows select r.company_name),
  Const        r8, "company_name"
  Const        r22, []
  Const        r28, "company_name"
  IterPrep     r15, r10
  Len          r29, r15
  Const        r16, 0
  LessInt      r26, r16, r29
  JumpIfFalse  r26, L7
  Index        r31, r15, r16
  Const        r27, "company_name"
  Index        r20, r31, r27
  Append       r22, r22, r20
  Const        r32, 1
  AddInt       r16, r16, r32
  Jump         L20
  Min          r34, r22
  // link_type: min(from r in rows select r.link_type),
  Const        r35, "link_type"
  Const        r36, []
  Const        r37, "link_type"
  IterPrep     r7, r10
  Len          r30, r7
  Const        r4, 0
  LessInt      r25, r4, r30
  JumpIfFalse  r25, L21
  Index        r31, r7, r4
  Const        r21, "link_type"
  Index        r18, r31, r21
  Append       r36, r36, r18
  Const        r9, 1
  AddInt       r4, r4, r9
  Jump         L22
L21:
  Min          r14, r36
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Const        r2, "western_follow_up"
  Const        r23, []
  Const        r33, "western_follow_up"
  IterPrep     r3, r10
  Len          r12, r3
  Const        r1, 0
L24:
  LessInt      r5, r1, r12
  JumpIfFalse  r5, L23
  Index        r31, r3, r1
  Const        r24, "western_follow_up"
  Index        r19, r31, r24
  Append       r23, r23, r19
  Const        r6, 1
  AddInt       r1, r1, r6
  Jump         L24
L23:
  Min          r11, r23
  // company_name: min(from r in rows select r.company_name),
  Move         r38, r8
  Move         r39, r34
  // link_type: min(from r in rows select r.link_type),
  Move         r40, r35
  Move         r41, r14
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Move         r42, r2
  Move         r43, r11
  // {
  MakeMap      r13, 3, r38
  // let result = [
  MakeList     r17, 1, r13
  // json(result)
  JSON         r17
  // expect result == [
  Const        r28, [{"company_name": "ACME Film Works", "link_type": "is follow up", "western_follow_up": "Western Return"}]
  Equal        r29, r17, r28
  Expect       r29
  Return       r0
