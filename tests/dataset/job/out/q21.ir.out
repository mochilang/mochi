func main (regs=55)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "ACME Film Works"}, {"country_code": "[pl]", "id": 2, "name": "Polish Warner"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "drama"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "is follow up"}, {"id": 2, "link": "references"}]
  // let title = [
  Const        r4, [{"id": 10, "production_year": 1975, "title": "Western Return"}, {"id": 20, "production_year": 2015, "title": "Other Movie"}]
L18:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}]
  // let movie_info = [
  Const        r6, [{"info": "Sweden", "movie_id": 10}, {"info": "USA", "movie_id": 20}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
L14:
  // let movie_link = [
  Const        r8, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}]
  // let allowed_countries = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  Const        r9, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from cn in company_name
  Const        r9, []
  // where cn.country_code != "[pl]" &&
  Const        r10, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r11, "name"
  Const        r12, "contains"
  // ct.kind == "production companies" &&
  Const        r12, "kind"
  // k.keyword == "sequel" &&
  Const        r13, "keyword"
  // lt.link.contains("follow") &&
  Const        r14, "link"
  // mc.note == null &&
  Const        r15, "note"
  // (mi.info in allowed_countries) &&
  Const        r16, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r17, "production_year"
  // company_name: cn.name,
  Const        r18, "company_name"
  // link_type: lt.link,
  Const        r19, "link_type"
  // western_follow_up: t.title
  Const        r20, "western_follow_up"
L17:
  Const        r21, "title"
  // from cn in company_name
  IterPrep     r22, r0
  Len          r23, r22
L19:
  Const        r24, 0
  Move         r25, r24
L12:
  LessInt      r26, r25, r23
  JumpIfFalse  r26, L0
  Index        r23, r22, r25
L8:
  Move         r22, r23
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r23, r5
  Len          r5, r23
  Const        r27, "company_id"
L16:
  Const        r28, "id"
L15:
  Move         r29, r24
  LessInt      r30, r29, r5
L11:
  JumpIfFalse  r30, L1
L7:
  Index        r5, r23, r29
L13:
  Move         r30, r5
  Index        r23, r30, r27
  Index        r27, r22, r28
  Equal        r31, r23, r27
  JumpIfFalse  r31, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r23, r1
  Len          r27, r23
L10:
  Const        r31, "company_type_id"
  Move         r1, r24
  LessInt      r32, r1, r27
  JumpIfFalse  r32, L2
  Index        r27, r23, r1
  Move         r32, r27
  Index        r23, r32, r28
L9:
  Index        r27, r30, r31
  Equal        r31, r23, r27
  JumpIfFalse  r31, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r27, r4
  Len          r31, r27
  Const        r4, "movie_id"
  Move         r33, r24
  LessInt      r34, r33, r31
  JumpIfFalse  r34, L3
  Index        r31, r27, r33
  Move         r34, r31
  Index        r27, r34, r28
  Index        r31, r30, r4
  Equal        r35, r27, r31
  JumpIfFalse  r35, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r27, r7
  Len          r31, r27
  Move         r7, r24
  LessInt      r36, r7, r31
  JumpIfFalse  r36, L4
  Index        r31, r27, r7
  Move         r36, r31
  Index        r27, r36, r4
  Index        r31, r34, r28
  Equal        r37, r27, r31
  JumpIfFalse  r37, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r27, r2
  Len          r31, r27
  Const        r37, "keyword_id"
  Move         r2, r24
  LessInt      r38, r2, r31
  JumpIfFalse  r38, L5
  Index        r38, r27, r2
  Move         r27, r38
  Index        r38, r27, r28
  Index        r39, r36, r37
  Equal        r36, r38, r39
  JumpIfFalse  r36, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r37, r8
  Len          r38, r37
  Move         r39, r24
  LessInt      r36, r39, r38
  JumpIfFalse  r36, L6
  Index        r8, r37, r39
  Move         r38, r8
  Index        r37, r38, r4
  Index        r8, r34, r28
  Equal        r40, r37, r8
  JumpIfFalse  r40, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r37, r3
  Len          r8, r37
  Const        r40, "link_type_id"
  Move         r3, r24
  LessInt      r41, r3, r8
  JumpIfFalse  r41, L7
  Index        r8, r37, r3
  Move         r41, r8
  Index        r37, r41, r28
  Index        r42, r38, r40
  Equal        r38, r37, r42
  JumpIfFalse  r38, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r40, r6
  Len          r37, r40
  Move         r42, r24
  LessInt      r38, r42, r37
  JumpIfFalse  r38, L8
  Index        r6, r40, r42
  Move         r37, r6
  Index        r38, r37, r4
  Index        r40, r34, r28
  Equal        r6, r38, r40
  JumpIfFalse  r6, L9
  // where cn.country_code != "[pl]" &&
  Index        r4, r22, r10
  // t.production_year >= 1950 && t.production_year <= 2000
  Index        r28, r34, r17
  Const        r38, 1950
  LessEq       r6, r38, r28
  Index        r10, r34, r17
  Const        r28, 2000
  LessEq       r38, r10, r28
  // where cn.country_code != "[pl]" &&
  Const        r17, "[pl]"
  NotEqual     r10, r4, r17
  // ct.kind == "production companies" &&
  Index        r28, r32, r12
  Const        r4, "production companies"
  Equal        r17, r28, r4
  // k.keyword == "sequel" &&
  Index        r12, r27, r13
  Const        r32, "sequel"
  Equal        r4, r12, r32
  // mc.note == null &&
  Index        r13, r30, r15
  Const        r27, nil
  Equal        r12, r13, r27
  // where cn.country_code != "[pl]" &&
  Move         r32, r10
  JumpIfFalse  r32, L10
  Index        r15, r22, r11
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r30, "Film"
  In           r13, r30, r15
  Move         r27, r13
  JumpIfTrue   r27, L11
  Index        r10, r22, r11
  Const        r15, "Warner"
  In           r30, r15, r10
  Move         r27, r30
  // where cn.country_code != "[pl]" &&
  Move         r32, r27
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  JumpIfFalse  r32, L10
  Move         r32, r17
  // ct.kind == "production companies" &&
  JumpIfFalse  r32, L10
  Move         r32, r4
  // k.keyword == "sequel" &&
  JumpIfFalse  r32, L10
  Index        r13, r41, r14
  // lt.link.contains("follow") &&
  Const        r17, "follow"
  In           r4, r17, r13
  // k.keyword == "sequel" &&
  Move         r32, r4
  // lt.link.contains("follow") &&
  JumpIfFalse  r32, L10
  Move         r32, r12
  // mc.note == null &&
  JumpIfFalse  r32, L10
  // (mi.info in allowed_countries) &&
  Index        r27, r37, r16
  Const        r10, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  In           r15, r27, r10
  // mc.note == null &&
  Move         r32, r15
  // (mi.info in allowed_countries) &&
  JumpIfFalse  r32, L10
  Move         r32, r6
  // t.production_year >= 1950 && t.production_year <= 2000
  JumpIfFalse  r32, L10
  Move         r32, r38
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r32, L9
  // company_name: cn.name,
  Const        r30, "company_name"
  Index        r12, r22, r11
  // link_type: lt.link,
  Const        r13, "link_type"
  Index        r17, r41, r14
  // western_follow_up: t.title
  Const        r4, "western_follow_up"
  Index        r16, r34, r21
  // company_name: cn.name,
  Move         r43, r30
  Move         r44, r12
  // link_type: lt.link,
  Move         r45, r13
  Move         r46, r17
  // western_follow_up: t.title
  Move         r47, r4
  Move         r48, r16
  // select {
  MakeMap      r37, 3, r43
  // from cn in company_name
  Append       r6, r9, r37
  Move         r9, r6
  // join mi in movie_info on mi.movie_id == t.id
  Const        r38, 1
  Add          r42, r42, r38
  Jump         L12
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r3, r3, r38
  Jump         L13
  // join ml in movie_link on ml.movie_id == t.id
  Add          r39, r39, r38
  Jump         L14
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r2, r2, r38
  Jump         L15
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r7, r7, r38
  Jump         L8
L4:
  // join t in title on t.id == mc.movie_id
  Add          r33, r33, r38
  Jump         L16
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r1, r1, r38
  Jump         L17
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r29, r29, r38
  Jump         L18
L1:
  // from cn in company_name
  AddInt       r25, r25, r38
  Jump         L19
L0:
  // company_name: min(from r in rows select r.company_name),
  Const        r32, "company_name"
  Const        r27, []
  IterPrep     r10, r9
  Len          r15, r10
  Move         r11, r24
L21:
  LessInt      r22, r11, r15
  JumpIfFalse  r22, L20
  Index        r14, r10, r11
  Move         r41, r14
  Index        r21, r41, r18
  Append       r34, r27, r21
  Move         r27, r34
  AddInt       r11, r11, r38
  Jump         L21
L20:
  Min          r30, r27
  // link_type: min(from r in rows select r.link_type),
  Const        r12, "link_type"
  Const        r13, []
  IterPrep     r17, r9
  Len          r4, r17
  Move         r16, r24
L23:
  LessInt      r43, r16, r4
  JumpIfFalse  r43, L22
  Index        r44, r17, r16
  Move         r41, r44
  Index        r45, r41, r19
  Append       r46, r13, r45
  Move         r13, r46
  AddInt       r16, r16, r38
  Jump         L23
L22:
  Min          r47, r13
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Const        r48, "western_follow_up"
  Const        r37, []
  IterPrep     r6, r9
  Len          r25, r6
  Move         r26, r24
L25:
  LessInt      r29, r26, r25
  JumpIfFalse  r29, L24
  Index        r5, r6, r26
  Move         r41, r5
  Index        r1, r41, r20
  Append       r23, r37, r1
  Move         r37, r23
  AddInt       r26, r26, r38
  Jump         L25
L24:
  Min          r33, r37
  // company_name: min(from r in rows select r.company_name),
  Move         r49, r32
  Move         r50, r30
  // link_type: min(from r in rows select r.link_type),
  Move         r51, r12
  Move         r52, r47
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Move         r53, r48
  Move         r54, r33
  // {
  MakeMap      r35, 3, r49
  Move         r7, r35
  // let result = [
  MakeList     r31, 1, r7
  // json(result)
  JSON         r31
  // expect result == [
  Const        r2, [{"company_name": "ACME Film Works", "link_type": "is follow up", "western_follow_up": "Western Return"}]
  Equal        r39, r31, r2
  Expect       r39
  Return       r0
