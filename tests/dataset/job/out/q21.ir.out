func main (regs=40)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "ACME Film Works"}, {"country_code": "[pl]", "id": 2, "name": "Polish Warner"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "drama"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "is follow up"}, {"id": 2, "link": "references"}]
  // let title = [
  Const        r4, [{"id": 10, "production_year": 1975, "title": "Western Return"}, {"id": 20, "production_year": 2015, "title": "Other Movie"}]
L19:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}]
  // let movie_info = [
  Const        r6, [{"info": "Sweden", "movie_id": 10}, {"info": "USA", "movie_id": 20}]
L16:
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
L0:
  // let movie_link = [
  Const        r8, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}]
  // let allowed_countries = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  Const        r9, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from cn in company_name
  Const        r10, []
  // where cn.country_code != "[pl]" &&
  Const        r11, "country_code"
L13:
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r12, "name"
L9:
  // ct.kind == "production companies" &&
  Const        r13, "kind"
  // k.keyword == "sequel" &&
  Const        r14, "keyword"
L11:
  // lt.link.contains("follow") &&
  Const        r15, "link"
  // mc.note == null &&
  Const        r16, "note"
  // (mi.info in allowed_countries) &&
  Const        r17, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r18, "production_year"
L6:
  // company_name: cn.name,
  Const        r19, "company_name"
L5:
  // link_type: lt.link,
  Const        r20, "link_type"
  // western_follow_up: t.title
  Const        r21, "western_follow_up"
  Const        r22, "title"
  // from cn in company_name
  IterPrep     r23, r0
L18:
  Len          r24, r23
L20:
  Const        r25, 0
  Move         r26, r25
  LessInt      r27, r26, r24
L15:
  JumpIfFalse  r27, L0
L2:
  Index        r27, r23, r26
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r23, r5
  Len          r5, r23
L12:
  Const        r24, "company_id"
  Const        r28, "id"
L17:
  Move         r29, r25
  LessInt      r30, r29, r5
L10:
  JumpIfFalse  r30, L1
  Index        r30, r23, r29
L4:
  Index        r29, r30, r24
L14:
  Index        r24, r27, r28
  Equal        r23, r29, r24
  JumpIfFalse  r23, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r23, r1
  Len          r1, r23
  Const        r24, "company_type_id"
  Move         r29, r25
  LessInt      r5, r29, r1
  JumpIfFalse  r5, L2
  Index        r1, r23, r29
  Index        r23, r1, r28
  Index        r31, r30, r24
  Equal        r24, r23, r31
  JumpIfFalse  r24, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r24, r4
  Len          r4, r24
  Const        r31, "movie_id"
  Move         r23, r25
  LessInt      r32, r23, r4
  JumpIfFalse  r32, L3
  Index        r32, r24, r23
  Index        r24, r32, r28
  Index        r4, r30, r31
  Equal        r33, r24, r4
  JumpIfFalse  r33, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r33, r7
  Len          r7, r33
  Move         r4, r25
  LessInt      r24, r4, r7
  JumpIfFalse  r24, L4
  Index        r24, r33, r4
  Index        r33, r24, r31
  Index        r7, r32, r28
  Equal        r34, r33, r7
  JumpIfFalse  r34, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r34, r2
  Len          r2, r34
  Const        r7, "keyword_id"
  Move         r33, r25
  LessInt      r35, r33, r2
  JumpIfFalse  r35, L5
  Index        r35, r34, r33
  Index        r34, r35, r28
  Index        r2, r24, r7
  Equal        r7, r34, r2
  JumpIfFalse  r7, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r7, r8
  Len          r8, r7
  Move         r2, r25
  LessInt      r36, r2, r8
  JumpIfFalse  r36, L6
  Index        r36, r7, r2
  Index        r7, r36, r31
  Index        r8, r32, r28
  Equal        r37, r7, r8
  JumpIfFalse  r37, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r37, r3
  Len          r3, r37
  Const        r7, "link_type_id"
  Move         r38, r25
  LessInt      r39, r38, r3
  JumpIfFalse  r39, L7
  Index        r39, r37, r38
  Index        r37, r39, r28
  Index        r3, r36, r7
  Equal        r7, r37, r3
  JumpIfFalse  r7, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r3, r6
  Len          r6, r3
  Move         r37, r25
  LessInt      r36, r37, r6
  JumpIfFalse  r36, L8
  Index        r36, r3, r37
  Index        r3, r36, r31
  Index        r31, r32, r28
  Equal        r28, r3, r31
  JumpIfFalse  r28, L4
  // where cn.country_code != "[pl]" &&
  Index        r28, r27, r11
  // t.production_year >= 1950 && t.production_year <= 2000
  Index        r11, r32, r18
  Const        r31, 1950
  LessEq       r3, r31, r11
  Index        r31, r32, r18
  Const        r18, 2000
  LessEq       r11, r31, r18
  // where cn.country_code != "[pl]" &&
  Const        r18, "[pl]"
  NotEqual     r31, r28, r18
  // ct.kind == "production companies" &&
  Index        r18, r1, r13
  Const        r1, "production companies"
  Equal        r13, r18, r1
  // k.keyword == "sequel" &&
  Index        r1, r35, r14
  Const        r35, "sequel"
  Equal        r14, r1, r35
  // mc.note == null &&
  Index        r35, r30, r16
  Const        r30, nil
  Equal        r16, r35, r30
  // where cn.country_code != "[pl]" &&
  Move         r30, r31
  JumpIfFalse  r30, L9
  Index        r30, r27, r12
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r31, "Film"
  In           r35, r31, r30
  JumpIfTrue   r35, L9
  Index        r31, r27, r12
  Const        r30, "Warner"
  In           r35, r30, r31
  Move         r30, r35
  JumpIfFalse  r30, L10
  // ct.kind == "production companies" &&
  Move         r30, r13
  JumpIfFalse  r30, L10
  // k.keyword == "sequel" &&
  Move         r30, r14
  JumpIfFalse  r30, L11
  Index        r30, r39, r15
  // lt.link.contains("follow") &&
  Const        r14, "follow"
  In           r13, r14, r30
  JumpIfFalse  r13, L12
  // mc.note == null &&
  Move         r13, r16
  JumpIfFalse  r13, L13
  // (mi.info in allowed_countries) &&
  Index        r13, r36, r17
  In           r36, r13, r9
  JumpIfFalse  r36, L14
  // t.production_year >= 1950 && t.production_year <= 2000
  Move         r36, r3
  JumpIfFalse  r36, L11
  Move         r36, r11
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r36, L4
  // company_name: cn.name,
  Move         r36, r19
  Index        r11, r27, r12
  // link_type: lt.link,
  Move         r27, r20
  Index        r12, r39, r15
  // western_follow_up: t.title
  Move         r39, r21
  Index        r15, r32, r22
  // company_name: cn.name,
  Move         r32, r36
  Move         r36, r11
  // link_type: lt.link,
  Move         r11, r27
  Move         r27, r12
  // western_follow_up: t.title
  Move         r12, r39
  Move         r39, r15
  // select {
  MakeMap      r15, 3, r32
  // from cn in company_name
  Append       r10, r10, r15
  // join mi in movie_info on mi.movie_id == t.id
  Const        r15, 1
  Add          r37, r37, r15
  Jump         L15
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r38, r38, r15
  Jump         L16
L7:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r2, r2, r15
  Jump         L0
  // join k in keyword on k.id == mk.keyword_id
  Add          r33, r33, r15
  Jump         L17
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r4, r4, r15
  Jump         L18
  // join t in title on t.id == mc.movie_id
  Add          r23, r23, r15
  Jump         L15
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r29, r29, r15
  Jump         L19
L1:
  // from cn in company_name
  AddInt       r26, r26, r15
  Jump         L20
  // company_name: min(from r in rows select r.company_name),
  Move         r28, r19
  Const        r5, []
  IterPrep     r29, r10
  Len          r26, r29
  Move         r37, r25
  LessInt      r7, r37, r26
  JumpIfFalse  r7, L21
  Index        r7, r29, r37
  Index        r29, r7, r19
  Append       r5, r5, r29
  AddInt       r37, r37, r15
  Jump         L2
L21:
  Min          r37, r5
  // link_type: min(from r in rows select r.link_type),
  Move         r5, r20
  Const        r19, []
  IterPrep     r26, r10
  Len          r38, r26
  Move         r8, r25
L23:
  LessInt      r2, r8, r38
  JumpIfFalse  r2, L22
  Index        r7, r26, r8
  Index        r2, r7, r20
  Append       r19, r19, r2
  AddInt       r8, r8, r15
  Jump         L23
L22:
  Min          r2, r19
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Move         r19, r21
  Const        r8, []
  IterPrep     r20, r10
  Len          r10, r20
  Move         r38, r25
L25:
  LessInt      r25, r38, r10
  JumpIfFalse  r25, L24
  Index        r7, r20, r38
  Index        r25, r7, r21
  Append       r8, r8, r25
  AddInt       r38, r38, r15
  Jump         L25
L24:
  Min          r25, r8
  // company_name: min(from r in rows select r.company_name),
  Move         r8, r28
  Move         r28, r37
  // link_type: min(from r in rows select r.link_type),
  Move         r37, r5
  Move         r5, r2
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Move         r2, r19
  Move         r29, r25
  // {
  MakeMap      r25, 3, r8
  // let result = [
  MakeList     r2, 1, r25
  // json(result)
  JSON         r2
  // expect result == [
  Const        r25, [{"company_name": "ACME Film Works", "link_type": "is follow up", "western_follow_up": "Western Return"}]
  Equal        r5, r2, r25
  Expect       r5
  Return       r0
