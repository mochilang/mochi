func main (regs=197)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "ACME Film Works"}, {"country_code": "[pl]", "id": 2, "name": "Polish Warner"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "other"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "drama"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "is follow up"}, {"id": 2, "link": "references"}]
  // let title = [
  Const        r4, [{"id": 10, "production_year": 1975, "title": "Western Return"}, {"id": 20, "production_year": 2015, "title": "Other Movie"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}]
  // let movie_info = [
  Const        r6, [{"info": "Sweden", "movie_id": 10}, {"info": "USA", "movie_id": 20}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
  // let movie_link = [
  Const        r8, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}]
  // let allowed_countries = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  Const        r9, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]
  // from cn in company_name
  Const        r10, []
  // where cn.country_code != "[pl]" &&
  Const        r11, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r12, "name"
  Const        r13, "contains"
  // ct.kind == "production companies" &&
  Const        r14, "kind"
  // k.keyword == "sequel" &&
  Const        r15, "keyword"
  // lt.link.contains("follow") &&
  Const        r16, "link"
  // mc.note == null &&
  Const        r17, "note"
  // (mi.info in allowed_countries) &&
  Const        r18, "info"
  // t.production_year >= 1950 && t.production_year <= 2000
  Const        r19, "production_year"
  // company_name: cn.name,
  Const        r20, "company_name"
  // link_type: lt.link,
  Const        r21, "link_type"
  // western_follow_up: t.title
  Const        r22, "western_follow_up"
  Const        r23, "title"
  // from cn in company_name
  IterPrep     r24, r0
  Len          r25, r24
  Const        r27, 0
  Move         r26, r27
L20:
  LessInt      r28, r26, r25
  JumpIfFalse  r28, L0
  Index        r30, r24, r26
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r31, r5
  Len          r32, r31
  Const        r33, "company_id"
  Const        r34, "id"
  Move         r35, r27
L19:
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L1
  Index        r38, r31, r35
  Index        r39, r38, r33
  Index        r40, r30, r34
  Equal        r41, r39, r40
  JumpIfFalse  r41, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r42, r1
  Len          r43, r42
  Const        r44, "company_type_id"
  Move         r45, r27
L18:
  LessInt      r46, r45, r43
  JumpIfFalse  r46, L2
  Index        r48, r42, r45
  Index        r49, r48, r34
  Index        r50, r38, r44
  Equal        r51, r49, r50
  JumpIfFalse  r51, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r52, r4
  Len          r53, r52
  Const        r54, "movie_id"
  Move         r55, r27
L17:
  LessInt      r56, r55, r53
  JumpIfFalse  r56, L3
  Index        r58, r52, r55
  Index        r59, r58, r34
  Index        r60, r38, r54
  Equal        r61, r59, r60
  JumpIfFalse  r61, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r62, r7
  Len          r63, r62
  Move         r64, r27
L16:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L4
  Index        r67, r62, r64
  Index        r68, r67, r54
  Index        r69, r58, r34
  Equal        r70, r68, r69
  JumpIfFalse  r70, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r71, r2
  Len          r72, r71
  Const        r73, "keyword_id"
  Move         r74, r27
L15:
  LessInt      r75, r74, r72
  JumpIfFalse  r75, L5
  Index        r77, r71, r74
  Index        r78, r77, r34
  Index        r79, r67, r73
  Equal        r80, r78, r79
  JumpIfFalse  r80, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r81, r8
  Len          r82, r81
  Move         r83, r27
L14:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L6
  Index        r86, r81, r83
  Index        r87, r86, r54
  Index        r88, r58, r34
  Equal        r89, r87, r88
  JumpIfFalse  r89, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r90, r3
  Len          r91, r90
  Const        r92, "link_type_id"
  Move         r93, r27
L13:
  LessInt      r94, r93, r91
  JumpIfFalse  r94, L7
  Index        r96, r90, r93
  Index        r97, r96, r34
  Index        r98, r86, r92
  Equal        r99, r97, r98
  JumpIfFalse  r99, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r100, r6
  Len          r101, r100
  Move         r102, r27
L12:
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L8
  Index        r105, r100, r102
  Index        r106, r105, r54
  Index        r107, r58, r34
  Equal        r108, r106, r107
  JumpIfFalse  r108, L9
  // where cn.country_code != "[pl]" &&
  Index        r109, r30, r11
  // t.production_year >= 1950 && t.production_year <= 2000
  Index        r110, r58, r19
  Const        r111, 1950
  LessEq       r112, r111, r110
  Index        r113, r58, r19
  Const        r114, 2000
  LessEq       r115, r113, r114
  // where cn.country_code != "[pl]" &&
  Const        r116, "[pl]"
  NotEqual     r117, r109, r116
  // ct.kind == "production companies" &&
  Index        r118, r48, r14
  Const        r119, "production companies"
  Equal        r120, r118, r119
  // k.keyword == "sequel" &&
  Index        r121, r77, r15
  Const        r122, "sequel"
  Equal        r123, r121, r122
  // mc.note == null &&
  Index        r124, r38, r17
  Const        r125, nil
  Equal        r126, r124, r125
  // where cn.country_code != "[pl]" &&
  Move         r127, r117
  JumpIfFalse  r127, L10
  Index        r128, r30, r12
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r129, "Film"
  In           r131, r129, r128
  JumpIfTrue   r131, L11
  Index        r132, r30, r12
  Const        r133, "Warner"
  In           r127, r133, r132
L11:
  JumpIfFalse  r127, L10
  Move         r127, r120
  // ct.kind == "production companies" &&
  JumpIfFalse  r127, L10
  Move         r127, r123
  // k.keyword == "sequel" &&
  JumpIfFalse  r127, L10
  Index        r135, r96, r16
  // lt.link.contains("follow") &&
  Const        r136, "follow"
  In           r127, r136, r135
  JumpIfFalse  r127, L10
  Move         r127, r126
  // mc.note == null &&
  JumpIfFalse  r127, L10
  // (mi.info in allowed_countries) &&
  Index        r138, r105, r18
  In           r127, r138, r9
  JumpIfFalse  r127, L10
  Move         r127, r112
  // t.production_year >= 1950 && t.production_year <= 2000
  JumpIfFalse  r127, L10
  Move         r127, r115
L10:
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r127, L9
  // company_name: cn.name,
  Const        r140, "company_name"
  Index        r141, r30, r12
  // link_type: lt.link,
  Const        r142, "link_type"
  Index        r143, r96, r16
  // western_follow_up: t.title
  Const        r144, "western_follow_up"
  Index        r145, r58, r23
  // company_name: cn.name,
  Move         r146, r140
  Move         r147, r141
  // link_type: lt.link,
  Move         r148, r142
  Move         r149, r143
  // western_follow_up: t.title
  Move         r150, r144
  Move         r151, r145
  // select {
  MakeMap      r152, 3, r146
  // from cn in company_name
  Append       r10, r10, r152
L9:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r154, 1
  Add          r102, r102, r154
  Jump         L12
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Add          r93, r93, r154
  Jump         L13
L7:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r83, r83, r154
  Jump         L14
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r74, r74, r154
  Jump         L15
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r64, r64, r154
  Jump         L16
L4:
  // join t in title on t.id == mc.movie_id
  Add          r55, r55, r154
  Jump         L17
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r45, r45, r154
  Jump         L18
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r35, r35, r154
  Jump         L19
L1:
  // from cn in company_name
  AddInt       r26, r26, r154
  Jump         L20
L0:
  // company_name: min(from r in rows select r.company_name),
  Const        r155, "company_name"
  Const        r156, []
  IterPrep     r157, r10
  Len          r158, r157
  Move         r159, r27
L22:
  LessInt      r160, r159, r158
  JumpIfFalse  r160, L21
  Index        r162, r157, r159
  Index        r163, r162, r20
  Append       r156, r156, r163
  AddInt       r159, r159, r154
  Jump         L22
L21:
  Min          r165, r156
  // link_type: min(from r in rows select r.link_type),
  Const        r166, "link_type"
  Const        r167, []
  IterPrep     r168, r10
  Len          r169, r168
  Move         r170, r27
L24:
  LessInt      r171, r170, r169
  JumpIfFalse  r171, L23
  Index        r162, r168, r170
  Index        r173, r162, r21
  Append       r167, r167, r173
  AddInt       r170, r170, r154
  Jump         L24
L23:
  Min          r175, r167
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Const        r176, "western_follow_up"
  Const        r177, []
  IterPrep     r178, r10
  Len          r179, r178
  Move         r180, r27
L26:
  LessInt      r181, r180, r179
  JumpIfFalse  r181, L25
  Index        r162, r178, r180
  Index        r183, r162, r22
  Append       r177, r177, r183
  AddInt       r180, r180, r154
  Jump         L26
L25:
  Min          r185, r177
  // company_name: min(from r in rows select r.company_name),
  Move         r186, r155
  Move         r187, r165
  // link_type: min(from r in rows select r.link_type),
  Move         r188, r166
  Move         r189, r175
  // western_follow_up: min(from r in rows select r.western_follow_up)
  Move         r190, r176
  Move         r191, r185
  // {
  MakeMap      r193, 3, r186
  // let result = [
  MakeList     r194, 1, r193
  // json(result)
  JSON         r194
  // expect result == [
  Const        r195, [{"company_name": "ACME Film Works", "link_type": "is follow up", "western_follow_up": "Western Return"}]
  Equal        r196, r194, r195
  Expect       r196
  Return       r0
