func main (regs=41)
  // let aka_name = [
  Const        r0, [{"name": "Y. S.", "person_id": 1}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "(voice: English version)", "person_id": 1, "role_id": 1000}]
  // let company_name = [
  Const        r2, [{"country_code": "[jp]", "id": 50}]
  // let movie_companies = [
  Const        r3, [{"company_id": 50, "movie_id": 10, "note": "Studio (Japan)"}]
L13:
  // let name = [
  Const        r4, [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
L10:
  // let role_type = [
  Const        r5, [{"id": 1000, "role": "actress"}]
L9:
  // let title = [
  Const        r6, [{"id": 10, "title": "Dubbed Film"}]
  // from an1 in aka_name
  Const        r7, []
  // where ci.note == "(voice: English version)" &&
  Const        r8, "note"
  // cn.country_code == "[jp]" &&
  Const        r9, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r10, "contains"
  // n1.name.contains("Yo") &&
  Const        r10, "name"
  // rt.role == "actress"
  Const        r11, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r12, "pseudonym"
  Const        r13, "movie_title"
  Const        r14, "title"
L12:
  // from an1 in aka_name
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
L14:
  Move         r18, r17
  LessInt      r19, r18, r16
L11:
  JumpIfFalse  r19, L0
  Index        r16, r15, r18
  Move         r15, r16
  // join n1 in name on n1.id == an1.person_id
  IterPrep     r16, r4
L7:
  Len          r4, r16
  Const        r20, "id"
  Const        r21, "person_id"
L6:
  Move         r22, r17
  LessInt      r23, r22, r4
  JumpIfFalse  r23, L1
  Index        r4, r16, r22
  Move         r23, r4
  Index        r16, r23, r20
  Index        r24, r15, r21
L8:
  Equal        r25, r16, r24
  JumpIfFalse  r25, L2
  // join ci in cast_info on ci.person_id == an1.person_id
  IterPrep     r16, r1
  Len          r24, r16
  Move         r25, r17
  LessInt      r1, r25, r24
  JumpIfFalse  r1, L2
  Index        r24, r16, r25
  Move         r1, r24
  Index        r16, r1, r21
  Index        r24, r15, r21
  Equal        r21, r16, r24
  JumpIfFalse  r21, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r24, r6
  Len          r21, r24
  Const        r6, "movie_id"
  Move         r26, r17
  LessInt      r27, r26, r21
  JumpIfFalse  r27, L3
  Index        r21, r24, r26
  Move         r27, r21
  Index        r24, r27, r20
  Index        r21, r1, r6
  Equal        r28, r24, r21
  JumpIfFalse  r28, L4
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  IterPrep     r24, r3
  Len          r21, r24
  Move         r3, r17
  LessInt      r29, r3, r21
  JumpIfFalse  r29, L4
  Index        r21, r24, r3
  Move         r29, r21
  Index        r24, r29, r6
  Index        r21, r1, r6
  Equal        r6, r24, r21
  JumpIfFalse  r6, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r24, r2
  Len          r21, r24
  Const        r6, "company_id"
  Move         r2, r17
  LessInt      r30, r2, r21
  JumpIfFalse  r30, L5
  Index        r30, r24, r2
  Move         r24, r30
  Index        r30, r24, r20
  Index        r31, r29, r6
  Equal        r6, r30, r31
  JumpIfFalse  r6, L6
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r30, r5
  Len          r31, r30
  Const        r6, "role_id"
  Move         r5, r17
  LessInt      r32, r5, r31
  JumpIfFalse  r32, L6
  Index        r31, r30, r5
  Move         r32, r31
  Index        r30, r32, r20
  Index        r31, r1, r6
  Equal        r20, r30, r31
  JumpIfFalse  r20, L7
  // where ci.note == "(voice: English version)" &&
  Index        r6, r1, r8
  Const        r30, "(voice: English version)"
  Equal        r31, r6, r30
  // cn.country_code == "[jp]" &&
  Index        r20, r24, r9
  Const        r1, "[jp]"
  Equal        r6, r20, r1
  // rt.role == "actress"
  Index        r30, r32, r11
  Const        r9, "actress"
  Equal        r24, r30, r9
  // where ci.note == "(voice: English version)" &&
  Move         r20, r31
  JumpIfFalse  r20, L8
  Move         r20, r6
  // cn.country_code == "[jp]" &&
  JumpIfFalse  r20, L8
  Index        r1, r29, r8
  // mc.note.contains("(Japan)") &&
  Const        r11, "(Japan)"
  In           r32, r11, r1
  // cn.country_code == "[jp]" &&
  Move         r20, r32
  // mc.note.contains("(Japan)") &&
  JumpIfFalse  r20, L8
  Index        r30, r29, r8
  // (!mc.note.contains("(USA)")) &&
  Const        r9, "(USA)"
  In           r31, r9, r30
  Not          r1, r31
  // mc.note.contains("(Japan)") &&
  Move         r20, r1
  // (!mc.note.contains("(USA)")) &&
  JumpIfFalse  r20, L8
  Index        r11, r23, r10
  // n1.name.contains("Yo") &&
  Const        r32, "Yo"
  In           r8, r32, r11
  // (!mc.note.contains("(USA)")) &&
  Move         r20, r8
  // n1.name.contains("Yo") &&
  JumpIfFalse  r20, L8
  Index        r29, r23, r10
  // (!n1.name.contains("Yu")) &&
  Const        r30, "Yu"
  In           r9, r30, r29
  Not          r31, r9
  // n1.name.contains("Yo") &&
  Move         r20, r31
  // (!n1.name.contains("Yu")) &&
  JumpIfFalse  r20, L8
  Move         r20, r24
  // where ci.note == "(voice: English version)" &&
  JumpIfFalse  r20, L7
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r1, "pseudonym"
  Index        r11, r15, r10
  Const        r32, "movie_title"
  Index        r8, r27, r14
  Move         r33, r1
  Move         r34, r11
  Move         r35, r32
  Move         r36, r8
  MakeMap      r23, 2, r33
  // from an1 in aka_name
  Append       r29, r7, r23
  Move         r7, r29
  // join rt in role_type on rt.id == ci.role_id
  Const        r30, 1
  Add          r5, r5, r30
  Jump         L9
  // join cn in company_name on cn.id == mc.company_id
  Add          r2, r2, r30
  Jump         L10
L5:
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Add          r3, r3, r30
  Jump         L11
L4:
  // join t in title on t.id == ci.movie_id
  Add          r26, r26, r30
  Jump         L6
L3:
  // join ci in cast_info on ci.person_id == an1.person_id
  Add          r25, r25, r30
  Jump         L12
L2:
  // join n1 in name on n1.id == an1.person_id
  Add          r22, r22, r30
  Jump         L13
L1:
  // from an1 in aka_name
  AddInt       r18, r18, r30
  Jump         L14
L0:
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Const        r24, "actress_pseudonym"
  Const        r20, []
  IterPrep     r9, r7
  Len          r31, r9
  Move         r10, r17
L16:
  LessInt      r15, r10, r31
  JumpIfFalse  r15, L15
  Index        r14, r9, r10
  Move         r27, r14
  Index        r1, r27, r12
  Append       r11, r20, r1
  Move         r20, r11
  AddInt       r10, r10, r30
  Jump         L16
L15:
  Min          r32, r20
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Const        r8, "japanese_movie_dubbed"
  Const        r33, []
  IterPrep     r34, r7
  Len          r35, r34
  Move         r36, r17
L18:
  LessInt      r23, r36, r35
  JumpIfFalse  r23, L17
  Index        r29, r34, r36
  Move         r27, r29
  Index        r18, r27, r13
  Append       r19, r33, r18
  Move         r33, r19
  AddInt       r36, r36, r30
  Jump         L18
L17:
  Min          r22, r33
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Move         r37, r24
  Move         r38, r32
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Move         r39, r8
  Move         r40, r22
  // {
  MakeMap      r4, 2, r37
  Move         r25, r4
  // let result = [
  MakeList     r16, 1, r25
  // json(result)
  JSON         r16
  // expect result == [
  Const        r26, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]
  Equal        r28, r16, r26
  Expect       r28
  Return       r0
