func main (regs=29)
  // let aka_name = [
  Const        r0, [{"name": "Y. S.", "person_id": 1}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "(voice: English version)", "person_id": 1, "role_id": 1000}]
  // let company_name = [
  Const        r2, [{"country_code": "[jp]", "id": 50}]
  // let movie_companies = [
  Const        r3, [{"company_id": 50, "movie_id": 10, "note": "Studio (Japan)"}]
  // let name = [
  Const        r4, [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
  // let role_type = [
  Const        r5, [{"id": 1000, "role": "actress"}]
  // let title = [
  Const        r6, [{"id": 10, "title": "Dubbed Film"}]
  // from an1 in aka_name
  Const        r7, []
L7:
  // where ci.note == "(voice: English version)" &&
  Const        r8, "note"
L8:
  // cn.country_code == "[jp]" &&
  Const        r9, "country_code"
L9:
  // n1.name.contains("Yo") &&
  Const        r10, "name"
  // rt.role == "actress"
  Const        r11, "role"
L0:
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r12, "pseudonym"
  Const        r13, "movie_title"
  Const        r14, "title"
L6:
  // from an1 in aka_name
  IterPrep     r15, r0
L10:
  Len          r16, r15
L13:
  Const        r17, 0
L5:
  Move         r18, r17
  LessInt      r19, r18, r16
L12:
  JumpIfFalse  r19, L0
L2:
  Index        r19, r15, r18
  // join n1 in name on n1.id == an1.person_id
  IterPrep     r15, r4
L11:
  Len          r4, r15
  Const        r16, "id"
L4:
  Const        r20, "person_id"
  Move         r21, r17
  LessInt      r22, r21, r4
  JumpIfFalse  r22, L1
  Index        r22, r15, r21
  Index        r21, r22, r16
  Index        r15, r19, r20
  Equal        r4, r21, r15
  JumpIfFalse  r4, L2
  // join ci in cast_info on ci.person_id == an1.person_id
  IterPrep     r4, r1
  Len          r1, r4
  Move         r15, r17
  LessInt      r21, r15, r1
  JumpIfFalse  r21, L2
  Index        r1, r4, r15
  Index        r4, r1, r20
  Index        r23, r19, r20
  Equal        r20, r4, r23
  JumpIfFalse  r20, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r20, r6
  Len          r6, r20
  Const        r23, "movie_id"
  Move         r4, r17
  LessInt      r24, r4, r6
  JumpIfFalse  r24, L3
  Index        r24, r20, r4
  Index        r20, r24, r16
  Index        r6, r1, r23
  Equal        r25, r20, r6
  JumpIfFalse  r25, L4
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  IterPrep     r25, r3
  Len          r3, r25
  Move         r6, r17
  LessInt      r20, r6, r3
  JumpIfFalse  r20, L4
  Index        r20, r25, r6
  Index        r25, r20, r23
  Index        r3, r1, r23
  Equal        r23, r25, r3
  JumpIfFalse  r23, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r23, r2
  Len          r2, r23
  Const        r3, "company_id"
  Move         r25, r17
  LessInt      r26, r25, r2
  JumpIfFalse  r26, L5
  Index        r26, r23, r25
  Index        r23, r26, r16
  Index        r2, r20, r3
  Equal        r3, r23, r2
  JumpIfFalse  r3, L2
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r3, r5
  Len          r5, r3
  Const        r2, "role_id"
  Move         r27, r17
  LessInt      r28, r27, r5
  JumpIfFalse  r28, L2
  Index        r28, r3, r27
  Index        r3, r28, r16
  Index        r16, r1, r2
  Equal        r2, r3, r16
  JumpIfFalse  r2, L6
  // where ci.note == "(voice: English version)" &&
  Index        r2, r1, r8
  Const        r1, "(voice: English version)"
  Equal        r3, r2, r1
  // cn.country_code == "[jp]" &&
  Index        r1, r26, r9
  Const        r26, "[jp]"
  Equal        r9, r1, r26
  // rt.role == "actress"
  Index        r26, r28, r11
  Const        r28, "actress"
  Equal        r11, r26, r28
  // where ci.note == "(voice: English version)" &&
  Move         r28, r3
  JumpIfFalse  r28, L7
  // cn.country_code == "[jp]" &&
  Move         r28, r9
  JumpIfFalse  r28, L8
  Index        r28, r20, r8
  // mc.note.contains("(Japan)") &&
  Const        r9, "(Japan)"
  In           r3, r9, r28
  JumpIfFalse  r3, L8
  Index        r3, r20, r8
  // (!mc.note.contains("(USA)")) &&
  Const        r8, "(USA)"
  In           r9, r8, r3
  Not          r8, r9
  JumpIfFalse  r8, L8
  Index        r8, r22, r10
  // n1.name.contains("Yo") &&
  Const        r9, "Yo"
  In           r3, r9, r8
  JumpIfFalse  r3, L8
  Index        r3, r22, r10
  // (!n1.name.contains("Yu")) &&
  Const        r22, "Yu"
  In           r9, r22, r3
  Not          r22, r9
  JumpIfFalse  r22, L9
  Move         r22, r11
  // where ci.note == "(voice: English version)" &&
  JumpIfFalse  r22, L6
  // select { pseudonym: an1.name, movie_title: t.title }
  Move         r22, r12
  Index        r9, r19, r10
  Move         r19, r13
  Index        r10, r24, r14
  Move         r24, r22
  Move         r22, r9
  Move         r9, r19
  Move         r19, r10
  MakeMap      r10, 2, r24
  // from an1 in aka_name
  Append       r7, r7, r10
  // join rt in role_type on rt.id == ci.role_id
  Const        r10, 1
  Add          r27, r27, r10
  Jump         L10
  // join cn in company_name on cn.id == mc.company_id
  Add          r25, r25, r10
  Jump         L11
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Add          r6, r6, r10
  Jump         L12
  // join t in title on t.id == ci.movie_id
  Add          r4, r4, r10
  Jump         L10
L3:
  // join ci in cast_info on ci.person_id == an1.person_id
  Add          r15, r15, r10
  Jump         L2
L1:
  // from an1 in aka_name
  AddInt       r18, r18, r10
  Jump         L13
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Const        r16, "actress_pseudonym"
  Const        r21, []
  IterPrep     r15, r7
  Len          r18, r15
  Move         r27, r17
  LessInt      r23, r27, r18
  JumpIfFalse  r23, L14
  Index        r23, r15, r27
  Index        r15, r23, r12
  Append       r21, r21, r15
  AddInt       r27, r27, r10
  Jump         L6
L14:
  Min          r27, r21
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Const        r21, "japanese_movie_dubbed"
  Const        r12, []
  IterPrep     r18, r7
  Len          r7, r18
  Move         r25, r17
L16:
  LessInt      r17, r25, r7
  JumpIfFalse  r17, L15
  Index        r23, r18, r25
  Index        r17, r23, r13
  Append       r12, r12, r17
  AddInt       r25, r25, r10
  Jump         L16
L15:
  Min          r17, r12
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Move         r12, r16
  Move         r16, r27
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Move         r27, r21
  Move         r21, r17
  // {
  MakeMap      r15, 2, r12
  // let result = [
  MakeList     r21, 1, r15
  // json(result)
  JSON         r21
  // expect result == [
  Const        r15, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]
  Equal        r27, r21, r15
  Expect       r27
  Return       r0
