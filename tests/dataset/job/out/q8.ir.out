func main (regs=32)
  // let aka_name = [
  Const        r0, [{"name": "Y. S.", "person_id": 1}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "(voice: English version)", "person_id": 1, "role_id": 1000}]
L11:
  // let company_name = [
  Const        r2, [{"country_code": "[jp]", "id": 50}]
  // let movie_companies = [
  Const        r3, [{"company_id": 50, "movie_id": 10, "note": "Studio (Japan)"}]
L3:
  // let name = [
  Const        r4, [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
  // let role_type = [
  Const        r5, [{"id": 1000, "role": "actress"}]
L9:
  // let title = [
  Const        r6, [{"id": 10, "title": "Dubbed Film"}]
  // from an1 in aka_name
  Const        r7, []
L1:
  // where ci.note == "(voice: English version)" &&
  Const        r8, "note"
  // cn.country_code == "[jp]" &&
  Const        r9, "country_code"
L4:
  // mc.note.contains("(Japan)") &&
  Const        r10, "note"
L6:
  Const        r11, "contains"
L13:
  // (!mc.note.contains("(USA)")) &&
  Const        r12, "note"
L10:
  Const        r13, "contains"
L5:
  // n1.name.contains("Yo") &&
  Const        r14, "name"
L7:
  Const        r15, "contains"
L8:
  // (!n1.name.contains("Yu")) &&
  Const        r16, "name"
  Const        r17, "contains"
L14:
  // rt.role == "actress"
  Const        r18, "role"
L0:
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r19, "pseudonym"
  Const        r20, "name"
  Const        r21, "movie_title"
  Const        r22, "title"
L12:
  // from an1 in aka_name
  IterPrep     r23, r0
  Len          r8, r23
  Const        r9, 0
  LessInt      r10, r9, r8
L2:
  JumpIfFalse  r10, L0
  Index        r11, r23, r9
  // join n1 in name on n1.id == an1.person_id
  IterPrep     r12, r4
  Len          r13, r12
L15:
  Const        r14, "id"
  Const        r15, "person_id"
  // where ci.note == "(voice: English version)" &&
  Const        r16, "note"
  // cn.country_code == "[jp]" &&
  Const        r17, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r18, "note"
  Const        r19, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r20, "note"
  Const        r21, "contains"
  // n1.name.contains("Yo") &&
  Const        r22, "name"
  Const        r8, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r10, "name"
  Const        r23, "contains"
  // rt.role == "actress"
  Const        r4, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r14, "pseudonym"
  Const        r15, "name"
  Const        r16, "movie_title"
  Const        r17, "title"
  // join n1 in name on n1.id == an1.person_id
  Const        r18, 0
  LessInt      r19, r18, r13
  JumpIfFalse  r19, L1
  Index        r20, r12, r18
  Const        r21, "id"
  Index        r22, r20, r21
  Const        r8, "person_id"
  Index        r10, r11, r8
  Equal        r23, r22, r10
  JumpIfFalse  r23, L2
  // join ci in cast_info on ci.person_id == an1.person_id
  IterPrep     r4, r1
  Len          r14, r4
  Const        r15, "person_id"
  Const        r16, "person_id"
  // where ci.note == "(voice: English version)" &&
  Const        r17, "note"
  // cn.country_code == "[jp]" &&
  Const        r13, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r19, "note"
  Const        r12, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r21, "note"
  Const        r8, "contains"
  // n1.name.contains("Yo") &&
  Const        r22, "name"
  Const        r10, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r23, "name"
  Const        r1, "contains"
  // rt.role == "actress"
  Const        r15, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r16, "pseudonym"
  Const        r17, "name"
  Const        r13, "movie_title"
  Const        r19, "title"
  // join ci in cast_info on ci.person_id == an1.person_id
  Const        r12, 0
  LessInt      r21, r12, r14
  JumpIfFalse  r21, L2
  Index        r8, r4, r12
  Const        r22, "person_id"
  Index        r10, r8, r22
  Const        r23, "person_id"
  Index        r1, r11, r23
  Equal        r15, r10, r1
  JumpIfFalse  r15, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r16, r6
  Len          r17, r16
  Const        r13, "id"
  Const        r19, "movie_id"
  // where ci.note == "(voice: English version)" &&
  Const        r14, "note"
  // cn.country_code == "[jp]" &&
  Const        r21, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r4, "note"
  Const        r22, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r23, "note"
  Const        r10, "contains"
  // n1.name.contains("Yo") &&
  Const        r1, "name"
  Const        r15, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r6, "name"
  Const        r13, "contains"
  // rt.role == "actress"
  Const        r19, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r14, "pseudonym"
  Const        r21, "name"
  Const        r4, "movie_title"
  Const        r22, "title"
  // join t in title on t.id == ci.movie_id
  Const        r23, 0
  LessInt      r10, r23, r17
  JumpIfFalse  r10, L3
  Index        r1, r16, r23
  Const        r15, "id"
  Index        r6, r1, r15
  Const        r13, "movie_id"
  Index        r19, r8, r13
  Equal        r14, r6, r19
  JumpIfFalse  r14, L4
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  IterPrep     r21, r3
  Len          r4, r21
  Const        r22, "movie_id"
  Const        r17, "movie_id"
  // where ci.note == "(voice: English version)" &&
  Const        r10, "note"
  // cn.country_code == "[jp]" &&
  Const        r16, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r15, "note"
  Const        r13, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r6, "note"
  Const        r19, "contains"
  // n1.name.contains("Yo") &&
  Const        r14, "name"
  Const        r3, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r22, "name"
  Const        r17, "contains"
  // rt.role == "actress"
  Const        r10, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r16, "pseudonym"
  Const        r15, "name"
  Const        r13, "movie_title"
  Const        r6, "title"
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Const        r19, 0
  LessInt      r14, r19, r4
  JumpIfFalse  r14, L4
  Index        r3, r21, r19
  Const        r22, "movie_id"
  Index        r17, r3, r22
  Const        r10, "movie_id"
  Index        r16, r8, r10
  Equal        r15, r17, r16
  JumpIfFalse  r15, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r13, r2
  Len          r6, r13
  Const        r4, "id"
  Const        r14, "company_id"
  // where ci.note == "(voice: English version)" &&
  Const        r21, "note"
  // cn.country_code == "[jp]" &&
  Const        r22, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r10, "note"
  Const        r17, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r16, "note"
  Const        r15, "contains"
  // n1.name.contains("Yo") &&
  Const        r2, "name"
  Const        r4, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r14, "name"
  Const        r21, "contains"
  // rt.role == "actress"
  Const        r22, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r10, "pseudonym"
  Const        r17, "name"
  Const        r16, "movie_title"
  Const        r15, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r2, 0
  LessInt      r4, r2, r6
  JumpIfFalse  r4, L5
  Index        r14, r13, r2
  Const        r21, "id"
  Index        r22, r14, r21
  Const        r10, "company_id"
  Index        r17, r3, r10
  Equal        r16, r22, r17
  JumpIfFalse  r16, L6
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r15, r5
  Len          r6, r15
  Const        r4, "id"
  Const        r13, "role_id"
  // where ci.note == "(voice: English version)" &&
  Const        r21, "note"
  // cn.country_code == "[jp]" &&
  Const        r10, "country_code"
  // mc.note.contains("(Japan)") &&
  Const        r22, "note"
  Const        r17, "contains"
  // (!mc.note.contains("(USA)")) &&
  Const        r16, "note"
  Const        r5, "contains"
  // n1.name.contains("Yo") &&
  Const        r4, "name"
  Const        r13, "contains"
  // (!n1.name.contains("Yu")) &&
  Const        r21, "name"
  Const        r10, "contains"
  // rt.role == "actress"
  Const        r22, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r17, "pseudonym"
  Const        r16, "name"
  Const        r5, "movie_title"
  Const        r4, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r13, 0
  LessInt      r21, r13, r6
  JumpIfFalse  r21, L6
  Index        r10, r15, r13
  Const        r22, "id"
  Index        r17, r10, r22
  Const        r16, "role_id"
  Index        r5, r8, r16
  Equal        r4, r17, r5
  JumpIfFalse  r4, L7
  // where ci.note == "(voice: English version)" &&
  Const        r6, "note"
  Index        r21, r8, r6
  Const        r15, "(voice: English version)"
  Equal        r22, r21, r15
  // cn.country_code == "[jp]" &&
  Const        r16, "country_code"
  Index        r17, r14, r16
  Const        r5, "[jp]"
  Equal        r4, r17, r5
  // rt.role == "actress"
  Const        r8, "role"
  Index        r6, r10, r8
  Const        r21, "actress"
  Equal        r15, r6, r21
  // where ci.note == "(voice: English version)" &&
  Move         r14, r22
  JumpIfFalse  r14, L8
  // cn.country_code == "[jp]" &&
  Move         r16, r4
  JumpIfFalse  r16, L9
  Const        r17, "note"
  Index        r5, r3, r17
  // mc.note.contains("(Japan)") &&
  Const        r10, "(Japan)"
  In           r8, r10, r5
  JumpIfFalse  r8, L8
  Const        r6, "note"
  Index        r21, r3, r6
  // (!mc.note.contains("(USA)")) &&
  Const        r22, "(USA)"
  In           r14, r22, r21
  Not          r4, r14
  JumpIfFalse  r4, L1
  Const        r16, "name"
  Index        r17, r20, r16
  // n1.name.contains("Yo") &&
  Const        r5, "Yo"
  In           r10, r5, r17
  JumpIfFalse  r10, L5
  Const        r8, "name"
  Index        r3, r20, r8
  // (!n1.name.contains("Yu")) &&
  Const        r6, "Yu"
  In           r21, r6, r3
  Not          r22, r21
  JumpIfFalse  r22, L8
  Move         r22, r15
  // where ci.note == "(voice: English version)" &&
  JumpIfFalse  r22, L7
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r14, "pseudonym"
  Const        r4, "name"
  Index        r16, r11, r4
  Const        r17, "movie_title"
  Const        r5, "title"
  Index        r10, r1, r5
  Move         r24, r14
  Move         r25, r16
  Move         r26, r17
  Move         r27, r10
  MakeMap      r20, 2, r24
  // from an1 in aka_name
  Append       r7, r7, r20
  // join rt in role_type on rt.id == ci.role_id
  Const        r8, 1
  Add          r13, r13, r8
  Jump         L10
  // join cn in company_name on cn.id == mc.company_id
  Const        r3, 1
  Add          r2, r2, r3
  Jump         L11
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Const        r6, 1
  Add          r19, r19, r6
  Jump         L0
  // join t in title on t.id == ci.movie_id
  Const        r15, 1
  Add          r23, r23, r15
  Jump         L12
  // join ci in cast_info on ci.person_id == an1.person_id
  Const        r21, 1
  Add          r12, r12, r21
  Jump         L13
  // join n1 in name on n1.id == an1.person_id
  Const        r22, 1
  Add          r18, r18, r22
  Jump         L14
  // from an1 in aka_name
  Const        r11, 1
  AddInt       r9, r9, r11
  Jump         L3
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Const        r1, "actress_pseudonym"
  Const        r5, []
  Const        r14, "pseudonym"
  IterPrep     r16, r7
  Len          r17, r16
  Const        r10, 0
  LessInt      r24, r10, r17
  JumpIfFalse  r24, L15
  Index        r25, r16, r10
  Const        r26, "pseudonym"
  Index        r27, r25, r26
  Append       r5, r5, r27
  Const        r20, 1
  AddInt       r10, r10, r20
  Jump         L10
  Min          r8, r5
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Const        r2, "japanese_movie_dubbed"
  Const        r3, []
  Const        r19, "movie_title"
  IterPrep     r6, r7
  Len          r23, r6
  Const        r15, 0
L17:
  LessInt      r12, r15, r23
  JumpIfFalse  r12, L16
  Index        r25, r6, r15
  Const        r21, "movie_title"
  Index        r18, r25, r21
  Append       r3, r3, r18
  Const        r22, 1
  AddInt       r15, r15, r22
  Jump         L17
L16:
  Min          r9, r3
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Move         r28, r1
  Move         r29, r8
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Move         r30, r2
  Move         r31, r9
  // {
  MakeMap      r11, 2, r28
  // let result = [
  MakeList     r4, 1, r11
  // json(result)
  JSON         r4
  // expect result == [
  Const        r14, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]
  Equal        r17, r4, r14
  Expect       r17
  Return       r0
