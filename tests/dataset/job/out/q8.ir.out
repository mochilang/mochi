func main (regs=189)
  // let aka_name = [
  Const        r0, [{"name": "Y. S.", "person_id": 1}]
  Move         r1, r0
  // let cast_info = [
  Const        r2, [{"movie_id": 10, "note": "(voice: English version)", "person_id": 1, "role_id": 1000}]
  Move         r3, r2
  // let company_name = [
  Const        r4, [{"country_code": "[jp]", "id": 50}]
  Move         r5, r4
  // let movie_companies = [
  Const        r6, [{"company_id": 50, "movie_id": 10, "note": "Studio (Japan)"}]
  Move         r7, r6
  // let name = [
  Const        r8, [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
  Move         r9, r8
  // let role_type = [
  Const        r10, [{"id": 1000, "role": "actress"}]
  Move         r11, r10
  // let title = [
  Const        r12, [{"id": 10, "title": "Dubbed Film"}]
  Move         r13, r12
  // from an1 in aka_name
  Const        r14, []
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L20:
  Less         r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join n1 in name on n1.id == an1.person_id
  IterPrep     r21, r9
  Len          r22, r21
  Const        r23, 0
L19:
  Less         r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r25, r21, r23
  Move         r26, r25
  Const        r27, "id"
  Index        r28, r26, r27
  Const        r29, "person_id"
  Index        r30, r20, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // join ci in cast_info on ci.person_id == an1.person_id
  IterPrep     r32, r3
  Len          r33, r32
  Const        r34, 0
L18:
  Less         r35, r34, r33
  JumpIfFalse  r35, L2
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "person_id"
  Index        r39, r37, r38
  Const        r40, "person_id"
  Index        r41, r20, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r43, r13
  Len          r44, r43
  Const        r45, 0
L17:
  Less         r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "id"
  Index        r50, r48, r49
  Const        r51, "movie_id"
  Index        r52, r37, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  IterPrep     r54, r7
  Len          r55, r54
  Const        r56, 0
L16:
  Less         r57, r56, r55
  JumpIfFalse  r57, L4
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "movie_id"
  Index        r61, r59, r60
  Const        r62, "movie_id"
  Index        r63, r37, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r65, r5
  Len          r66, r65
  Const        r67, 0
L15:
  Less         r68, r67, r66
  JumpIfFalse  r68, L5
  Index        r69, r65, r67
  Move         r70, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Const        r73, "company_id"
  Index        r74, r59, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L6
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r76, r11
  Len          r77, r76
  Const        r78, 0
L14:
  Less         r79, r78, r77
  JumpIfFalse  r79, L6
  Index        r80, r76, r78
  Move         r81, r80
  Const        r82, "id"
  Index        r83, r81, r82
  Const        r84, "role_id"
  Index        r85, r37, r84
  Equal        r86, r83, r85
  JumpIfFalse  r86, L7
  // where ci.note == "(voice: English version)" &&
  Const        r87, "note"
  Index        r88, r37, r87
  Const        r89, "(voice: English version)"
  Equal        r90, r88, r89
  // cn.country_code == "[jp]" &&
  Const        r91, "country_code"
  Index        r92, r70, r91
  Const        r93, "[jp]"
  Equal        r94, r92, r93
  Const        r95, "note"
  Index        r96, r59, r95
  // mc.note.contains("(USA)") == false &&
  Const        r97, "(USA)"
  In           r98, r97, r96
  Const        r99, false
  Equal        r100, r98, r99
  Const        r101, "name"
  Index        r102, r26, r101
  // n1.name.contains("Yu") == false &&
  Const        r103, "Yu"
  In           r104, r103, r102
  Const        r105, false
  Equal        r106, r104, r105
  // rt.role == "actress"
  Const        r107, "role"
  Index        r108, r81, r107
  Const        r109, "actress"
  Equal        r110, r108, r109
  // where ci.note == "(voice: English version)" &&
  Move         r111, r90
  JumpIfFalse  r111, L8
  Move         r111, r94
L8:
  // cn.country_code == "[jp]" &&
  Move         r112, r111
  JumpIfFalse  r112, L9
  Const        r113, "note"
  Index        r114, r59, r113
  // mc.note.contains("(Japan)") &&
  Const        r115, "(Japan)"
  In           r116, r115, r114
  // cn.country_code == "[jp]" &&
  Move         r112, r116
L9:
  // mc.note.contains("(Japan)") &&
  Move         r117, r112
  JumpIfFalse  r117, L10
  Move         r117, r100
L10:
  // mc.note.contains("(USA)") == false &&
  Move         r118, r117
  JumpIfFalse  r118, L11
  Const        r119, "name"
  Index        r120, r26, r119
  // n1.name.contains("Yo") &&
  Const        r121, "Yo"
  In           r122, r121, r120
  // mc.note.contains("(USA)") == false &&
  Move         r118, r122
L11:
  // n1.name.contains("Yo") &&
  Move         r123, r118
  JumpIfFalse  r123, L12
  Move         r123, r106
L12:
  // n1.name.contains("Yu") == false &&
  Move         r124, r123
  JumpIfFalse  r124, L13
  Move         r124, r110
L13:
  // where ci.note == "(voice: English version)" &&
  JumpIfFalse  r124, L7
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r125, "pseudonym"
  Const        r126, "name"
  Index        r127, r20, r126
  Const        r128, "movie_title"
  Const        r129, "title"
  Index        r130, r48, r129
  Move         r131, r125
  Move         r132, r127
  Move         r133, r128
  Move         r134, r130
  MakeMap      r135, 2, r131
  // from an1 in aka_name
  Append       r136, r14, r135
  Move         r14, r136
L7:
  // join rt in role_type on rt.id == ci.role_id
  Const        r137, 1
  Add          r138, r78, r137
  Move         r78, r138
  Jump         L14
L6:
  // join cn in company_name on cn.id == mc.company_id
  Const        r139, 1
  Add          r140, r67, r139
  Move         r67, r140
  Jump         L15
L5:
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Const        r141, 1
  Add          r142, r56, r141
  Move         r56, r142
  Jump         L16
L4:
  // join t in title on t.id == ci.movie_id
  Const        r143, 1
  Add          r144, r45, r143
  Move         r45, r144
  Jump         L17
L3:
  // join ci in cast_info on ci.person_id == an1.person_id
  Const        r145, 1
  Add          r146, r34, r145
  Move         r34, r146
  Jump         L18
L2:
  // join n1 in name on n1.id == an1.person_id
  Const        r147, 1
  Add          r148, r23, r147
  Move         r23, r148
  Jump         L19
L1:
  // from an1 in aka_name
  Const        r149, 1
  Add          r150, r17, r149
  Move         r17, r150
  Jump         L20
L0:
  // let eligible =
  Move         r151, r14
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Const        r152, "actress_pseudonym"
  Const        r153, []
  IterPrep     r154, r151
  Len          r155, r154
  Const        r156, 0
L22:
  Less         r157, r156, r155
  JumpIfFalse  r157, L21
  Index        r158, r154, r156
  Move         r159, r158
  Const        r160, "pseudonym"
  Index        r161, r159, r160
  Append       r162, r153, r161
  Move         r153, r162
  Const        r163, 1
  Add          r164, r156, r163
  Move         r156, r164
  Jump         L22
L21:
  Min          r165, r153
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Const        r166, "japanese_movie_dubbed"
  Const        r167, []
  IterPrep     r168, r151
  Len          r169, r168
  Const        r170, 0
L24:
  Less         r171, r170, r169
  JumpIfFalse  r171, L23
  Index        r172, r168, r170
  Move         r159, r172
  Const        r173, "movie_title"
  Index        r174, r159, r173
  Append       r175, r167, r174
  Move         r167, r175
  Const        r176, 1
  Add          r177, r170, r176
  Move         r170, r177
  Jump         L24
L23:
  Min          r178, r167
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Move         r179, r152
  Move         r180, r165
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Move         r181, r166
  Move         r182, r178
  // {
  MakeMap      r183, 2, r179
  Move         r184, r183
  // let result = [
  MakeList     r185, 1, r184
  Move         r186, r185
  // print(result)
  Print        r186
  // expect result == [
  Const        r187, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]
  Equal        r188, r186, r187
  Expect       r188
  Return       r0
