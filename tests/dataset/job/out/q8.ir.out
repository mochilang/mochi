func main (regs=148)
  // let aka_name = [
  Const        r0, [{"name": "Y. S.", "person_id": 1}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "note": "(voice: English version)", "person_id": 1, "role_id": 1000}]
  // let company_name = [
  Const        r2, [{"country_code": "[jp]", "id": 50}]
  // let movie_companies = [
  Const        r3, [{"company_id": 50, "movie_id": 10, "note": "Studio (Japan)"}]
  // let name = [
  Const        r4, [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
  // let role_type = [
  Const        r5, [{"id": 1000, "role": "actress"}]
  // let title = [
  Const        r6, [{"id": 10, "title": "Dubbed Film"}]
  // from an1 in aka_name
  Const        r7, []
  // where ci.note == "(voice: English version)" &&
  Const        r8, "note"
  // cn.country_code == "[jp]" &&
  Const        r9, "country_code"
  // n1.name.contains("Yo") &&
  Const        r11, "name"
  // rt.role == "actress"
  Const        r12, "role"
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r13, "pseudonym"
  Const        r14, "movie_title"
  Const        r15, "title"
  // from an1 in aka_name
  IterPrep     r16, r0
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
L20:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r22, r16, r18
  // join n1 in name on n1.id == an1.person_id
  IterPrep     r23, r4
  Len          r24, r23
  Const        r25, "id"
  Const        r26, "person_id"
  Move         r27, r19
L19:
  LessInt      r28, r27, r24
  JumpIfFalse  r28, L1
  Index        r30, r23, r27
  Index        r31, r30, r25
  Index        r32, r22, r26
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // join ci in cast_info on ci.person_id == an1.person_id
  IterPrep     r34, r1
  Len          r35, r34
  Move         r36, r19
L18:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r39, r34, r36
  Index        r40, r39, r26
  Index        r41, r22, r26
  Equal        r42, r40, r41
  JumpIfFalse  r42, L3
  // join t in title on t.id == ci.movie_id
  IterPrep     r43, r6
  Len          r44, r43
  Const        r45, "movie_id"
  Move         r46, r19
L17:
  LessInt      r47, r46, r44
  JumpIfFalse  r47, L3
  Index        r49, r43, r46
  Index        r50, r49, r25
  Index        r51, r39, r45
  Equal        r52, r50, r51
  JumpIfFalse  r52, L4
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  IterPrep     r53, r3
  Len          r54, r53
  Move         r55, r19
L16:
  LessInt      r56, r55, r54
  JumpIfFalse  r56, L4
  Index        r58, r53, r55
  Index        r59, r58, r45
  Index        r60, r39, r45
  Equal        r61, r59, r60
  JumpIfFalse  r61, L5
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r62, r2
  Len          r63, r62
  Const        r64, "company_id"
  Move         r65, r19
L15:
  LessInt      r66, r65, r63
  JumpIfFalse  r66, L5
  Index        r68, r62, r65
  Index        r69, r68, r25
  Index        r70, r58, r64
  Equal        r71, r69, r70
  JumpIfFalse  r71, L6
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r72, r5
  Len          r73, r72
  Const        r74, "role_id"
  Move         r75, r19
L14:
  LessInt      r76, r75, r73
  JumpIfFalse  r76, L6
  Index        r78, r72, r75
  Index        r79, r78, r25
  Index        r80, r39, r74
  Equal        r81, r79, r80
  JumpIfFalse  r81, L7
  // where ci.note == "(voice: English version)" &&
  Index        r82, r39, r8
  Const        r83, "(voice: English version)"
  Equal        r84, r82, r83
  // cn.country_code == "[jp]" &&
  Index        r85, r68, r9
  Const        r86, "[jp]"
  Equal        r87, r85, r86
  // rt.role == "actress"
  Index        r88, r78, r12
  Const        r89, "actress"
  Equal        r90, r88, r89
  // where ci.note == "(voice: English version)" &&
  Move         r91, r84
  JumpIfFalse  r91, L8
L8:
  // cn.country_code == "[jp]" &&
  Move         r92, r87
  JumpIfFalse  r92, L9
  Index        r93, r58, r8
  // mc.note.contains("(Japan)") &&
  Const        r94, "(Japan)"
  In           r96, r94, r93
L9:
  JumpIfFalse  r96, L10
  Index        r97, r58, r8
  // (!mc.note.contains("(USA)")) &&
  Const        r98, "(USA)"
  In           r99, r98, r97
  Not          r101, r99
L10:
  JumpIfFalse  r101, L11
  Index        r102, r30, r11
  // n1.name.contains("Yo") &&
  Const        r103, "Yo"
  In           r105, r103, r102
L11:
  JumpIfFalse  r105, L12
  Index        r106, r30, r11
  // (!n1.name.contains("Yu")) &&
  Const        r107, "Yu"
  In           r108, r107, r106
  Not          r110, r108
L12:
  JumpIfFalse  r110, L13
  Move         r110, r90
L13:
  // where ci.note == "(voice: English version)" &&
  JumpIfFalse  r110, L7
  // select { pseudonym: an1.name, movie_title: t.title }
  Const        r111, "pseudonym"
  Index        r112, r22, r11
  Const        r113, "movie_title"
  Index        r114, r49, r15
  MakeMap      r117, 2, r111
  // from an1 in aka_name
  Append       r7, r7, r117
L7:
  // join rt in role_type on rt.id == ci.role_id
  Const        r119, 1
  Add          r75, r75, r119
  Jump         L14
L6:
  // join cn in company_name on cn.id == mc.company_id
  Add          r65, r65, r119
  Jump         L15
L5:
  // join mc in movie_companies on mc.movie_id == ci.movie_id
  Add          r55, r55, r119
  Jump         L16
L4:
  // join t in title on t.id == ci.movie_id
  Add          r46, r46, r119
  Jump         L17
L3:
  // join ci in cast_info on ci.person_id == an1.person_id
  Add          r36, r36, r119
  Jump         L18
L2:
  // join n1 in name on n1.id == an1.person_id
  Jump         L19
L1:
  // from an1 in aka_name
  AddInt       r18, r18, r119
  Jump         L20
L0:
  // actress_pseudonym: min(from x in eligible select x.pseudonym),
  Const        r120, "actress_pseudonym"
  Const        r121, []
  IterPrep     r122, r7
  Len          r123, r122
  Move         r124, r19
L22:
  LessInt      r125, r124, r123
  JumpIfFalse  r125, L21
  Index        r127, r122, r124
  Index        r128, r127, r13
  Append       r121, r121, r128
  AddInt       r124, r124, r119
  Jump         L22
L21:
  // japanese_movie_dubbed: min(from x in eligible select x.movie_title)
  Const        r132, []
  IterPrep     r133, r7
  Len          r134, r133
  Move         r135, r19
L24:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L23
  Index        r127, r133, r135
  Index        r138, r127, r14
  Append       r132, r132, r138
  AddInt       r135, r135, r119
  Jump         L24
L23:
  // {
  MakeMap      r144, 2, r120
  // let result = [
  MakeList     r145, 1, r144
  // json(result)
  JSON         r145
  // expect result == [
  Const        r146, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]
  Equal        r147, r145, r146
  Expect       r147
  Return       r0
