func main (regs=97)
  // let aka_name = [
  Const        r0, [{"person_id": 1}, {"person_id": 2}]
L54:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
L52:
  // let comp_cast_type = [
  Const        r2, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "other"}]
L51:
  // let char_name = [
  Const        r3, [{"id": 1, "name": "Queen"}, {"id": 2, "name": "Princess"}]
L50:
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "(voice)", "person_id": 2, "person_role_id": 2, "role_id": 1}]
L49:
  // let company_name = [
  Const        r5, [{"country_code": "[us]", "id": 1}, {"country_code": "[uk]", "id": 2}]
L47:
  // let info_type = [
  Const        r6, [{"id": 1, "info": "release dates"}, {"id": 2, "info": "trivia"}, {"id": 3, "info": "other"}]
L46:
  // let keyword = [
  Const        r7, [{"id": 1, "keyword": "computer-animation"}, {"id": 2, "keyword": "action"}]
L45:
  // let movie_companies = [
  Const        r8, [{"company_id": 1, "movie_id": 1}, {"company_id": 2, "movie_id": 2}]
L44:
  // let movie_info = [
  Const        r9, [{"info": "USA:2004", "info_type_id": 1, "movie_id": 1}, {"info": "USA:1995", "info_type_id": 1, "movie_id": 2}]
L43:
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
L42:
  // let name = [
  Const        r11, [{"gender": "f", "id": 1, "name": "Angela Aniston"}, {"gender": "m", "id": 2, "name": "Bob Brown"}]
L33:
  // let person_info = [
  Const        r12, [{"info_type_id": 2, "person_id": 1}, {"info_type_id": 2, "person_id": 2}]
L32:
  // let role_type = [
  Const        r13, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
L31:
  // let title = [
  Const        r14, [{"id": 1, "production_year": 2004, "title": "Shrek 2"}, {"id": 2, "production_year": 1999, "title": "Old Film"}]
  // from an in aka_name
  Const        r15, []
L20:
  // cct1.kind == "cast" &&
  Const        r16, "kind"
L30:
  // chn.name == "Queen" &&
  Const        r17, "name"
L24:
  // (ci.note == "(voice)" ||
  Const        r18, "note"
  // cn.country_code == "[us]" &&
  Const        r19, "country_code"
L22:
  // it.info == "release dates" &&
  Const        r20, "info"
  // k.keyword == "computer-animation" &&
  Const        r21, "keyword"
  // n.gender == "f" &&
  Const        r22, "gender"
  // rt.role == "actress" &&
  Const        r23, "role"
  // t.title == "Shrek 2" &&
  Const        r24, "title"
  // t.production_year >= 2000 &&
  Const        r25, "production_year"
  // t.id == mi.movie_id &&
  Const        r26, "id"
  Const        r27, "movie_id"
  // cn.id == mc.company_id &&
  Const        r28, "company_id"
  // it.id == mi.info_type_id &&
  Const        r29, "info_type_id"
  // n.id == ci.person_id &&
  Const        r30, "person_id"
  // rt.id == ci.role_id &&
  Const        r31, "role_id"
  // chn.id == ci.person_role_id &&
  Const        r32, "person_role_id"
  // k.id == mk.keyword_id &&
  Const        r33, "keyword_id"
L29:
  // cct1.id == cc.subject_id &&
  Const        r34, "subject_id"
  // cct2.id == cc.status_id
  Const        r35, "status_id"
L35:
  // voiced_char: chn.name,
  Const        r36, "voiced_char"
L40:
  // voicing_actress: n.name,
  Const        r37, "voicing_actress"
  // voiced_animation: t.title
  Const        r38, "voiced_animation"
  // from an in aka_name
  IterPrep     r39, r0
L28:
  Len          r40, r39
L41:
  Const        r41, 0
L1:
  Move         r42, r41
  LessInt      r43, r42, r40
L53:
  JumpIfFalse  r43, L0
  Index        r43, r39, r42
  // from cc in complete_cast
  IterPrep     r42, r1
  Len          r1, r42
L17:
  Move         r39, r41
  LessInt      r40, r39, r1
L25:
  JumpIfFalse  r40, L1
  Index        r40, r42, r39
L18:
  // from cct1 in comp_cast_type
  IterPrep     r42, r2
  Len          r44, r42
  Move         r45, r41
L48:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r46, r42, r45
  // from cct2 in comp_cast_type
  IterPrep     r42, r2
  Len          r2, r42
  Move         r47, r41
  LessInt      r48, r47, r2
  JumpIfFalse  r48, L3
  Index        r48, r42, r47
  // from chn in char_name
  IterPrep     r42, r3
  Len          r3, r42
  Move         r49, r41
  LessInt      r50, r49, r3
L36:
  JumpIfFalse  r50, L4
L26:
  Index        r50, r42, r49
L39:
  // from ci in cast_info
  IterPrep     r42, r4
  Len          r4, r42
  Move         r51, r41
  LessInt      r52, r51, r4
  JumpIfFalse  r52, L5
L27:
  Index        r52, r42, r51
  // from cn in company_name
  IterPrep     r42, r5
  Len          r5, r42
  Move         r53, r41
  LessInt      r54, r53, r5
L21:
  JumpIfFalse  r54, L6
L19:
  Index        r54, r42, r53
  // from it in info_type
  IterPrep     r42, r6
  Len          r55, r42
  Move         r56, r41
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L7
  Index        r57, r42, r56
  // from it3 in info_type
  IterPrep     r42, r6
  Len          r6, r42
  Move         r58, r41
  LessInt      r59, r58, r6
  JumpIfFalse  r59, L8
  Index        r59, r42, r58
  // from k in keyword
  IterPrep     r42, r7
  Len          r7, r42
  Move         r60, r41
  LessInt      r61, r60, r7
  JumpIfFalse  r61, L9
  Index        r61, r42, r60
  // from mc in movie_companies
  IterPrep     r42, r8
  Len          r8, r42
  Move         r62, r41
  LessInt      r63, r62, r8
  JumpIfFalse  r63, L10
  Index        r63, r42, r62
  // from mi in movie_info
  IterPrep     r42, r9
  Len          r9, r42
  Move         r64, r41
  LessInt      r65, r64, r9
  JumpIfFalse  r65, L11
  Index        r65, r42, r64
  // from mk in movie_keyword
  IterPrep     r42, r10
  Len          r10, r42
  Move         r66, r41
  LessInt      r67, r66, r10
  JumpIfFalse  r67, L12
  Index        r67, r42, r66
  // from n in name
  IterPrep     r42, r11
  Len          r11, r42
  Move         r68, r41
  LessInt      r69, r68, r11
  JumpIfFalse  r69, L13
  Index        r69, r42, r68
  // from pi in person_info
  IterPrep     r42, r12
  Len          r12, r42
  Move         r70, r41
  LessInt      r71, r70, r12
  JumpIfFalse  r71, L14
  Index        r71, r42, r70
  // from rt in role_type
  IterPrep     r42, r13
  Len          r13, r42
  Move         r72, r41
  LessInt      r73, r72, r13
  JumpIfFalse  r73, L15
  Index        r73, r42, r72
  // from t in title
  IterPrep     r42, r14
  Len          r14, r42
  Move         r74, r41
  LessInt      r75, r74, r14
  JumpIfFalse  r75, L16
  Index        r75, r42, r74
  // cct1.kind == "cast" &&
  Index        r42, r46, r16
  // t.production_year >= 2000 &&
  Index        r76, r75, r25
  Const        r77, 2000
  LessEq       r78, r77, r76
  // t.production_year <= 2010 &&
  Index        r77, r75, r25
  Const        r25, 2010
  LessEq       r76, r77, r25
  // cct1.kind == "cast" &&
  Const        r25, "cast"
  Equal        r77, r42, r25
  // cct2.kind == "complete+verified" &&
  Index        r25, r48, r16
  Const        r16, "complete+verified"
  Equal        r42, r25, r16
  // chn.name == "Queen" &&
  Index        r16, r50, r17
  Const        r25, "Queen"
  Equal        r79, r16, r25
  // cn.country_code == "[us]" &&
  Index        r25, r54, r19
  Const        r19, "[us]"
  Equal        r16, r25, r19
  // it.info == "release dates" &&
  Index        r19, r57, r20
  Const        r25, "release dates"
  Equal        r80, r19, r25
  // it3.info == "trivia" &&
  Index        r25, r59, r20
  Const        r19, "trivia"
  Equal        r81, r25, r19
  // k.keyword == "computer-animation" &&
  Index        r19, r61, r21
  Const        r21, "computer-animation"
  Equal        r25, r19, r21
  // n.gender == "f" &&
  Index        r21, r69, r22
  Const        r22, "f"
  Equal        r19, r21, r22
  // rt.role == "actress" &&
  Index        r22, r73, r23
  Const        r23, "actress"
  Equal        r21, r22, r23
  // t.title == "Shrek 2" &&
  Index        r23, r75, r24
  Const        r22, "Shrek 2"
  Equal        r82, r23, r22
  // t.id == mi.movie_id &&
  Index        r22, r75, r26
  Index        r23, r65, r27
  Equal        r83, r22, r23
  // t.id == mc.movie_id &&
  Index        r23, r75, r26
  Index        r22, r63, r27
  Equal        r84, r23, r22
  // t.id == ci.movie_id &&
  Index        r22, r75, r26
  Index        r23, r52, r27
  Equal        r85, r22, r23
  // t.id == mk.movie_id &&
  Index        r23, r75, r26
  Index        r22, r67, r27
  Equal        r86, r23, r22
  // t.id == cc.movie_id &&
  Index        r22, r75, r26
  Index        r23, r40, r27
  Equal        r87, r22, r23
  // mc.movie_id == ci.movie_id &&
  Index        r23, r63, r27
  Index        r22, r52, r27
  Equal        r88, r23, r22
  // mc.movie_id == mi.movie_id &&
  Index        r22, r63, r27
  Index        r23, r65, r27
  Equal        r89, r22, r23
  // mc.movie_id == mk.movie_id &&
  Index        r23, r63, r27
  Index        r22, r67, r27
  Equal        r90, r23, r22
  // mc.movie_id == cc.movie_id &&
  Index        r22, r63, r27
  Index        r23, r40, r27
  Equal        r91, r22, r23
  // mi.movie_id == ci.movie_id &&
  Index        r23, r65, r27
  Index        r22, r52, r27
  Equal        r92, r23, r22
  // mi.movie_id == mk.movie_id &&
  Index        r22, r65, r27
  Index        r23, r67, r27
  Equal        r93, r22, r23
  // mi.movie_id == cc.movie_id &&
  Index        r23, r65, r27
  Index        r22, r40, r27
  Equal        r94, r23, r22
  // ci.movie_id == mk.movie_id &&
  Index        r22, r52, r27
  Index        r23, r67, r27
  Equal        r95, r22, r23
  // ci.movie_id == cc.movie_id &&
  Index        r23, r52, r27
  Index        r22, r40, r27
  Equal        r96, r23, r22
  // mk.movie_id == cc.movie_id &&
  Index        r22, r67, r27
  Index        r23, r40, r27
  Equal        r27, r22, r23
  // cn.id == mc.company_id &&
  Index        r23, r54, r26
  Index        r54, r63, r28
  Equal        r63, r23, r54
  // it.id == mi.info_type_id &&
  Index        r54, r57, r26
  Index        r57, r65, r29
  Equal        r23, r54, r57
  // n.id == ci.person_id &&
  Index        r57, r69, r26
  Index        r54, r52, r30
  Equal        r28, r57, r54
  // rt.id == ci.role_id &&
  Index        r54, r73, r26
  Index        r73, r52, r31
  Equal        r31, r54, r73
  // n.id == an.person_id &&
  Index        r73, r69, r26
  Index        r54, r43, r30
  Equal        r57, r73, r54
  // ci.person_id == an.person_id &&
  Index        r54, r52, r30
  Index        r73, r43, r30
  Equal        r43, r54, r73
  // chn.id == ci.person_role_id &&
  Index        r73, r50, r26
  Index        r54, r52, r32
  Equal        r32, r73, r54
  // n.id == pi.person_id &&
  Index        r54, r69, r26
  Index        r73, r71, r30
  Equal        r22, r54, r73
  // ci.person_id == pi.person_id &&
  Index        r73, r52, r30
  Index        r54, r71, r30
  Equal        r30, r73, r54
  // it3.id == pi.info_type_id &&
  Index        r54, r59, r26
  Index        r59, r71, r29
  Equal        r71, r54, r59
  // k.id == mk.keyword_id &&
  Index        r59, r61, r26
  Index        r61, r67, r33
  Equal        r67, r59, r61
  // cct1.id == cc.subject_id &&
  Index        r61, r46, r26
  Index        r46, r40, r34
  Equal        r34, r61, r46
  // cct2.id == cc.status_id
  Index        r46, r48, r26
  Index        r48, r40, r35
  Equal        r40, r46, r48
  // cct1.kind == "cast" &&
  Move         r48, r77
  JumpIfFalse  r48, L17
  // cct2.kind == "complete+verified" &&
  Move         r48, r42
  JumpIfFalse  r48, L17
  // chn.name == "Queen" &&
  Move         r48, r79
  JumpIfFalse  r48, L18
  // (ci.note == "(voice)" ||
  Index        r48, r52, r18
  Const        r79, "(voice)"
  Equal        r42, r48, r79
  // ci.note == "(voice) (uncredited)" ||
  Index        r79, r52, r18
  Const        r48, "(voice) (uncredited)"
  Equal        r77, r79, r48
  // ci.note == "(voice: English version)") &&
  Index        r48, r52, r18
  Const        r52, "(voice: English version)"
  Equal        r18, r48, r52
  // (ci.note == "(voice)" ||
  Move         r52, r42
  JumpIfTrue   r52, L18
  // ci.note == "(voice) (uncredited)" ||
  Move         r52, r77
  JumpIfTrue   r52, L18
  // ci.note == "(voice: English version)") &&
  Move         r52, r18
  JumpIfFalse  r52, L18
  // cn.country_code == "[us]" &&
  Move         r52, r16
  JumpIfFalse  r52, L19
  // it.info == "release dates" &&
  Move         r52, r80
  JumpIfFalse  r52, L20
  // it3.info == "trivia" &&
  Move         r52, r81
  JumpIfFalse  r52, L21
  // k.keyword == "computer-animation" &&
  Move         r52, r25
  JumpIfFalse  r52, L22
  Index        r52, r65, r20
  // (mi.info.starts_with("Japan:200") || mi.info.starts_with("USA:200")) &&
  Const        r25, "Japan:200"
  Move         r81, r41
  Const        r80, 9
  Len          r16, r52
  LessEq       r18, r80, r16
  JumpIfFalse  r18, L23
  Slice        r18, r52, r81, r80
  Equal        r80, r18, r25
  Jump         L24
L23:
  Const        r80, false
  Move         r25, r80
  JumpIfTrue   r25, L22
  Index        r25, r65, r20
  Const        r65, 7
  Len          r20, r25
  LessEq       r25, r65, r20
  JumpIfFalse  r25, L22
  Move         r18, r80
  JumpIfFalse  r18, L22
  // n.gender == "f" &&
  Move         r25, r19
  JumpIfFalse  r25, L22
  Index        r25, r69, r17
  // n.name.contains("An") &&
  Const        r19, "An"
  In           r20, r19, r25
  JumpIfFalse  r20, L22
  // rt.role == "actress" &&
  Move         r20, r21
  JumpIfFalse  r20, L22
  // t.title == "Shrek 2" &&
  Move         r20, r82
  JumpIfFalse  r20, L22
  // t.production_year >= 2000 &&
  Move         r20, r78
  JumpIfFalse  r20, L22
  // t.production_year <= 2010 &&
  Move         r20, r76
  JumpIfFalse  r20, L22
  // t.id == mi.movie_id &&
  Move         r20, r83
  JumpIfFalse  r20, L22
  // t.id == mc.movie_id &&
  Move         r20, r84
  JumpIfFalse  r20, L22
  // t.id == ci.movie_id &&
  Move         r20, r85
  JumpIfFalse  r20, L22
  // t.id == mk.movie_id &&
  Move         r20, r86
  JumpIfFalse  r20, L22
  // t.id == cc.movie_id &&
  Move         r20, r87
  JumpIfFalse  r20, L22
  // mc.movie_id == ci.movie_id &&
  Move         r20, r88
  JumpIfFalse  r20, L22
  // mc.movie_id == mi.movie_id &&
  Move         r20, r89
  JumpIfFalse  r20, L22
  // mc.movie_id == mk.movie_id &&
  Move         r20, r90
  JumpIfFalse  r20, L25
  // mc.movie_id == cc.movie_id &&
  Move         r20, r91
  JumpIfFalse  r20, L26
  // mi.movie_id == ci.movie_id &&
  Move         r20, r92
  JumpIfFalse  r20, L27
  // mi.movie_id == mk.movie_id &&
  Move         r20, r93
  JumpIfFalse  r20, L28
  // mi.movie_id == cc.movie_id &&
  Move         r20, r94
  JumpIfFalse  r20, L29
  // ci.movie_id == mk.movie_id &&
  Move         r20, r95
  JumpIfFalse  r20, L30
  // ci.movie_id == cc.movie_id &&
  Move         r20, r96
  JumpIfFalse  r20, L30
  // mk.movie_id == cc.movie_id &&
  Move         r20, r27
  JumpIfFalse  r20, L31
  // cn.id == mc.company_id &&
  Move         r20, r63
  JumpIfFalse  r20, L32
  // it.id == mi.info_type_id &&
  Move         r20, r23
  JumpIfFalse  r20, L33
  // n.id == ci.person_id &&
  Move         r20, r28
  JumpIfFalse  r20, L33
  // rt.id == ci.role_id &&
  Move         r20, r31
  JumpIfFalse  r20, L34
L34:
  // n.id == an.person_id &&
  Move         r20, r57
  JumpIfFalse  r20, L31
  // ci.person_id == an.person_id &&
  Move         r20, r43
  JumpIfFalse  r20, L35
  // chn.id == ci.person_role_id &&
  Move         r20, r32
  JumpIfFalse  r20, L36
  // n.id == pi.person_id &&
  Move         r20, r22
  JumpIfFalse  r20, L37
L37:
  // ci.person_id == pi.person_id &&
  Move         r20, r30
  JumpIfFalse  r20, L38
L38:
  // it3.id == pi.info_type_id &&
  Move         r20, r71
  JumpIfFalse  r20, L39
  // k.id == mk.keyword_id &&
  Move         r20, r67
  JumpIfFalse  r20, L40
  // cct1.id == cc.subject_id &&
  Move         r20, r34
  JumpIfFalse  r20, L41
  Move         r20, r40
  // where (
  JumpIfFalse  r20, L42
  // voiced_char: chn.name,
  Move         r20, r36
  Index        r40, r50, r17
  // voicing_actress: n.name,
  Move         r50, r37
  Index        r34, r69, r17
  // voiced_animation: t.title
  Move         r69, r38
  Index        r17, r75, r24
  // voiced_char: chn.name,
  Move         r75, r20
  Move         r20, r40
  // voicing_actress: n.name,
  Move         r40, r50
  Move         r50, r34
  // voiced_animation: t.title
  Move         r34, r69
  Move         r69, r17
  // select {
  MakeMap      r17, 3, r75
  // from an in aka_name
  Append       r15, r15, r17
  // from t in title
  Const        r17, 1
  AddInt       r74, r74, r17
  Jump         L31
L16:
  // from rt in role_type
  AddInt       r72, r72, r17
  Jump         L32
L15:
  // from pi in person_info
  AddInt       r70, r70, r17
  Jump         L33
L14:
  // from n in name
  AddInt       r68, r68, r17
  Jump         L42
L13:
  // from mk in movie_keyword
  AddInt       r66, r66, r17
  Jump         L43
L12:
  // from mi in movie_info
  AddInt       r64, r64, r17
  Jump         L44
L11:
  // from mc in movie_companies
  AddInt       r62, r62, r17
  Jump         L45
L10:
  // from k in keyword
  AddInt       r60, r60, r17
  Jump         L46
L9:
  // from it3 in info_type
  AddInt       r58, r58, r17
  Jump         L47
L8:
  // from it in info_type
  AddInt       r56, r56, r17
  Jump         L48
L7:
  // from cn in company_name
  AddInt       r53, r53, r17
  Jump         L49
L6:
  // from ci in cast_info
  AddInt       r51, r51, r17
  Jump         L50
L5:
  // from chn in char_name
  AddInt       r49, r49, r17
  Jump         L51
L4:
  // from cct2 in comp_cast_type
  AddInt       r47, r47, r17
  Jump         L52
L3:
  // from cct1 in comp_cast_type
  AddInt       r45, r45, r17
  Jump         L53
L2:
  // from cc in complete_cast
  AddInt       r39, r39, r17
  Jump         L54
L0:
  // voiced_char: min(from x in matches select x.voiced_char),
  Move         r74, r36
  Const        r14, []
  IterPrep     r72, r15
  Len          r13, r72
  Move         r70, r41
L56:
  LessInt      r12, r70, r13
  JumpIfFalse  r12, L55
  Index        r12, r72, r70
  Index        r72, r12, r36
  Append       r14, r14, r72
  AddInt       r70, r70, r17
  Jump         L56
L55:
  Min          r72, r14
  // voicing_actress: min(from x in matches select x.voicing_actress),
  Move         r14, r37
  Const        r70, []
  IterPrep     r36, r15
  Len          r13, r36
  Move         r68, r41
L58:
  LessInt      r11, r68, r13
  JumpIfFalse  r11, L57
  Index        r12, r36, r68
  Index        r11, r12, r37
  Append       r70, r70, r11
  AddInt       r68, r68, r17
  Jump         L58
L57:
  Min          r11, r70
  // voiced_animation: min(from x in matches select x.voiced_animation)
  Move         r70, r38
  Const        r68, []
  IterPrep     r37, r15
  Len          r15, r37
  Move         r13, r41
L60:
  LessInt      r41, r13, r15
  JumpIfFalse  r41, L59
  Index        r12, r37, r13
  Index        r41, r12, r38
  Append       r68, r68, r41
  AddInt       r13, r13, r17
  Jump         L60
L59:
  Min          r41, r68
  // voiced_char: min(from x in matches select x.voiced_char),
  Move         r68, r74
  Move         r74, r72
  // voicing_actress: min(from x in matches select x.voicing_actress),
  Move         r72, r14
  Move         r14, r11
  // voiced_animation: min(from x in matches select x.voiced_animation)
  Move         r11, r70
  Move         r70, r41
  // {
  MakeMap      r41, 3, r68
  // let result = [
  MakeList     r70, 1, r41
  // json(result)
  JSON         r70
  // expect result == [
  Const        r41, [{"voiced_animation": "Shrek 2", "voiced_char": "Queen", "voicing_actress": "Angela Aniston"}]
  Equal        r11, r70, r41
  Expect       r11
  Return       r0
