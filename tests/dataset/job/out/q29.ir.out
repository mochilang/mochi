func main (regs=99)
  // let aka_name = [
  Const        r0, [{"person_id": 1}, {"person_id": 2}]
L40:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 2, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let comp_cast_type = [
  Const        r2, [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "other"}]
  // let char_name = [
  Const        r3, [{"id": 1, "name": "Queen"}, {"id": 2, "name": "Princess"}]
L37:
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "(voice)", "person_id": 2, "person_role_id": 2, "role_id": 1}]
L32:
  // let company_name = [
  Const        r5, [{"country_code": "[us]", "id": 1}, {"country_code": "[uk]", "id": 2}]
L34:
  // let info_type = [
  Const        r6, [{"id": 1, "info": "release dates"}, {"id": 2, "info": "trivia"}, {"id": 3, "info": "other"}]
  // let keyword = [
  Const        r7, [{"id": 1, "keyword": "computer-animation"}, {"id": 2, "keyword": "action"}]
  // let movie_companies = [
  Const        r8, [{"company_id": 1, "movie_id": 1}, {"company_id": 2, "movie_id": 2}]
  // let movie_info = [
  Const        r9, [{"info": "USA:2004", "info_type_id": 1, "movie_id": 1}, {"info": "USA:1995", "info_type_id": 1, "movie_id": 2}]
L31:
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
L21:
  // let name = [
  Const        r11, [{"gender": "f", "id": 1, "name": "Angela Aniston"}, {"gender": "m", "id": 2, "name": "Bob Brown"}]
  // let person_info = [
  Const        r12, [{"info_type_id": 2, "person_id": 1}, {"info_type_id": 2, "person_id": 2}]
L28:
  // let role_type = [
  Const        r13, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
L25:
  // let title = [
  Const        r14, [{"id": 1, "production_year": 2004, "title": "Shrek 2"}, {"id": 2, "production_year": 1999, "title": "Old Film"}]
  // from an in aka_name
  Const        r15, []
  // cct1.kind == "cast" &&
  Const        r16, "kind"
  // chn.name == "Queen" &&
  Const        r17, "name"
L18:
  // (ci.note == "(voice)" ||
  Const        r18, "note"
  // cn.country_code == "[us]" &&
  Const        r19, "country_code"
  // it.info == "release dates" &&
  Const        r20, "info"
  // k.keyword == "computer-animation" &&
  Const        r21, "keyword"
  // (mi.info.starts_with("Japan:200") || mi.info.starts_with("USA:200")) &&
  Const        r22, "starts_with"
  // n.gender == "f" &&
  Const        r22, "gender"
  // n.name.contains("An") &&
  Const        r23, "contains"
L26:
  // rt.role == "actress" &&
  Const        r23, "role"
  // t.title == "Shrek 2" &&
  Const        r24, "title"
  // t.production_year >= 2000 &&
  Const        r25, "production_year"
  // t.id == mi.movie_id &&
  Const        r26, "id"
  Const        r27, "movie_id"
  // cn.id == mc.company_id &&
  Const        r28, "company_id"
  // it.id == mi.info_type_id &&
  Const        r29, "info_type_id"
  // n.id == ci.person_id &&
  Const        r30, "person_id"
  // rt.id == ci.role_id &&
  Const        r31, "role_id"
  // chn.id == ci.person_role_id &&
  Const        r32, "person_role_id"
  // k.id == mk.keyword_id &&
  Const        r33, "keyword_id"
  // cct1.id == cc.subject_id &&
  Const        r34, "subject_id"
  // cct2.id == cc.status_id
  Const        r35, "status_id"
  // voiced_char: chn.name,
  Const        r36, "voiced_char"
  // voicing_actress: n.name,
  Const        r37, "voicing_actress"
L38:
  // voiced_animation: t.title
  Const        r38, "voiced_animation"
  // from an in aka_name
  IterPrep     r39, r0
  Len          r40, r39
L41:
  Const        r41, 0
  Move         r42, r41
L23:
  LessInt      r43, r42, r40
  JumpIfFalse  r43, L0
  Index        r40, r39, r42
L39:
  Move         r39, r40
  // from cc in complete_cast
  IterPrep     r40, r1
  Len          r1, r40
  Move         r44, r41
  LessInt      r45, r44, r1
L36:
  JumpIfFalse  r45, L1
L22:
  Index        r1, r40, r44
  Move         r45, r1
L35:
  // from cct1 in comp_cast_type
  IterPrep     r40, r2
  Len          r46, r40
  Move         r47, r41
  LessInt      r48, r47, r46
L33:
  JumpIfFalse  r48, L2
  Index        r46, r40, r47
  Move         r48, r46
  // from cct2 in comp_cast_type
  IterPrep     r40, r2
  Len          r46, r40
L30:
  Move         r2, r41
  LessInt      r49, r2, r46
L29:
  JumpIfFalse  r49, L3
  Index        r46, r40, r2
  Move         r49, r46
  // from chn in char_name
  IterPrep     r40, r3
L27:
  Len          r46, r40
  Move         r3, r41
  LessInt      r50, r3, r46
  JumpIfFalse  r50, L4
  Index        r46, r40, r3
L20:
  Move         r50, r46
  // from ci in cast_info
  IterPrep     r46, r4
  Len          r4, r46
  Move         r51, r41
  LessInt      r52, r51, r4
L19:
  JumpIfFalse  r52, L5
  Index        r52, r46, r51
  Move         r46, r52
  // from cn in company_name
  IterPrep     r52, r5
  Len          r5, r52
  Move         r53, r41
  LessInt      r54, r53, r5
  JumpIfFalse  r54, L6
  Index        r5, r52, r53
  Move         r54, r5
  // from it in info_type
  IterPrep     r52, r6
  Len          r5, r52
  Move         r55, r41
  LessInt      r56, r55, r5
  JumpIfFalse  r56, L7
  Index        r5, r52, r55
  Move         r52, r5
  // from it3 in info_type
  IterPrep     r5, r6
  Len          r6, r5
  Move         r57, r41
  LessInt      r58, r57, r6
  JumpIfFalse  r58, L8
  Index        r6, r5, r57
  Move         r58, r6
  // from k in keyword
  IterPrep     r5, r7
  Len          r7, r5
  Move         r59, r41
  LessInt      r60, r59, r7
  JumpIfFalse  r60, L9
  Index        r7, r5, r59
  Move         r60, r7
  // from mc in movie_companies
  IterPrep     r5, r8
  Len          r7, r5
  Move         r8, r41
  LessInt      r61, r8, r7
  JumpIfFalse  r61, L10
  Index        r7, r5, r8
  Move         r61, r7
  // from mi in movie_info
  IterPrep     r5, r9
  Len          r7, r5
  Move         r9, r41
  LessInt      r62, r9, r7
  JumpIfFalse  r62, L11
  Index        r7, r5, r9
  Move         r62, r7
  // from mk in movie_keyword
  IterPrep     r7, r10
  Len          r10, r7
  Move         r63, r41
  LessInt      r64, r63, r10
  JumpIfFalse  r64, L12
  Index        r64, r7, r63
  Move         r7, r64
  // from n in name
  IterPrep     r64, r11
  Len          r11, r64
  Move         r65, r41
  LessInt      r66, r65, r11
  JumpIfFalse  r66, L13
  Index        r11, r64, r65
  Move         r66, r11
  // from pi in person_info
  IterPrep     r64, r12
  Len          r11, r64
  Move         r12, r41
  LessInt      r67, r12, r11
  JumpIfFalse  r67, L14
  Index        r11, r64, r12
  Move         r64, r11
  // from rt in role_type
  IterPrep     r11, r13
  Len          r13, r11
  Move         r68, r41
  LessInt      r69, r68, r13
  JumpIfFalse  r69, L15
  Index        r13, r11, r68
  Move         r69, r13
  // from t in title
  IterPrep     r11, r14
  Len          r14, r11
  Move         r70, r41
  LessInt      r71, r70, r14
  JumpIfFalse  r71, L16
  Index        r14, r11, r70
  Move         r71, r14
  // cct1.kind == "cast" &&
  Index        r11, r48, r16
  // t.production_year >= 2000 &&
  Index        r14, r71, r25
  Const        r72, 2000
  LessEq       r73, r72, r14
  // t.production_year <= 2010 &&
  Index        r14, r71, r25
  Const        r72, 2010
  LessEq       r25, r14, r72
  // cct1.kind == "cast" &&
  Const        r14, "cast"
  Equal        r72, r11, r14
  // cct2.kind == "complete+verified" &&
  Index        r11, r49, r16
  Const        r14, "complete+verified"
  Equal        r16, r11, r14
  // chn.name == "Queen" &&
  Index        r11, r50, r17
  Const        r14, "Queen"
  Equal        r74, r11, r14
  // cn.country_code == "[us]" &&
  Index        r11, r54, r19
  Const        r19, "[us]"
  Equal        r75, r11, r19
  // it.info == "release dates" &&
  Index        r11, r52, r20
  Const        r19, "release dates"
  Equal        r76, r11, r19
  // it3.info == "trivia" &&
  Index        r11, r58, r20
  Const        r19, "trivia"
  Equal        r77, r11, r19
  // k.keyword == "computer-animation" &&
  Index        r11, r60, r21
  Const        r19, "computer-animation"
  Equal        r21, r11, r19
  // n.gender == "f" &&
  Index        r11, r66, r22
  Const        r19, "f"
  Equal        r22, r11, r19
  // rt.role == "actress" &&
  Index        r11, r69, r23
  Const        r19, "actress"
  Equal        r23, r11, r19
  // t.title == "Shrek 2" &&
  Index        r11, r71, r24
  Const        r19, "Shrek 2"
  Equal        r78, r11, r19
  // t.id == mi.movie_id &&
  Index        r11, r71, r26
  Index        r19, r62, r27
  Equal        r79, r11, r19
  // t.id == mc.movie_id &&
  Index        r11, r71, r26
  Index        r19, r61, r27
  Equal        r80, r11, r19
  // t.id == ci.movie_id &&
  Index        r11, r71, r26
  Index        r19, r46, r27
  Equal        r81, r11, r19
  // t.id == mk.movie_id &&
  Index        r11, r71, r26
  Index        r19, r7, r27
  Equal        r82, r11, r19
  // t.id == cc.movie_id &&
  Index        r11, r71, r26
  Index        r19, r45, r27
  Equal        r83, r11, r19
  // mc.movie_id == ci.movie_id &&
  Index        r11, r61, r27
  Index        r19, r46, r27
  Equal        r84, r11, r19
  // mc.movie_id == mi.movie_id &&
  Index        r11, r61, r27
  Index        r19, r62, r27
  Equal        r85, r11, r19
  // mc.movie_id == mk.movie_id &&
  Index        r11, r61, r27
  Index        r19, r7, r27
  Equal        r86, r11, r19
  // mc.movie_id == cc.movie_id &&
  Index        r11, r61, r27
  Index        r19, r45, r27
  Equal        r87, r11, r19
  // mi.movie_id == ci.movie_id &&
  Index        r11, r62, r27
  Index        r19, r46, r27
  Equal        r88, r11, r19
  // mi.movie_id == mk.movie_id &&
  Index        r11, r62, r27
  Index        r19, r7, r27
  Equal        r89, r11, r19
  // mi.movie_id == cc.movie_id &&
  Index        r11, r62, r27
  Index        r19, r45, r27
  Equal        r90, r11, r19
  // ci.movie_id == mk.movie_id &&
  Index        r11, r46, r27
  Index        r19, r7, r27
  Equal        r91, r11, r19
  // ci.movie_id == cc.movie_id &&
  Index        r11, r46, r27
  Index        r19, r45, r27
  Equal        r92, r11, r19
  // mk.movie_id == cc.movie_id &&
  Index        r11, r7, r27
  Index        r19, r45, r27
  Equal        r27, r11, r19
  // cn.id == mc.company_id &&
  Index        r11, r54, r26
  Index        r19, r61, r28
  Equal        r54, r11, r19
  // it.id == mi.info_type_id &&
  Index        r28, r52, r26
  Index        r61, r62, r29
  Equal        r11, r28, r61
  // n.id == ci.person_id &&
  Index        r19, r66, r26
  Index        r52, r46, r30
  Equal        r28, r19, r52
  // rt.id == ci.role_id &&
  Index        r61, r69, r26
  Index        r19, r46, r31
  Equal        r52, r61, r19
  // n.id == an.person_id &&
  Index        r69, r66, r26
  Index        r31, r39, r30
  Equal        r61, r69, r31
  // ci.person_id == an.person_id &&
  Index        r19, r46, r30
  Index        r69, r39, r30
  Equal        r31, r19, r69
  // chn.id == ci.person_role_id &&
  Index        r39, r50, r26
  Index        r19, r46, r32
  Equal        r69, r39, r19
  // n.id == pi.person_id &&
  Index        r32, r66, r26
  Index        r39, r64, r30
  Equal        r19, r32, r39
  // ci.person_id == pi.person_id &&
  Index        r32, r46, r30
  Index        r39, r64, r30
  Equal        r30, r32, r39
  // it3.id == pi.info_type_id &&
  Index        r32, r58, r26
  Index        r39, r64, r29
  Equal        r58, r32, r39
  // k.id == mk.keyword_id &&
  Index        r29, r60, r26
  Index        r64, r7, r33
  Equal        r32, r29, r64
  // cct1.id == cc.subject_id &&
  Index        r39, r48, r26
  Index        r33, r45, r34
  Equal        r7, r39, r33
  // cct2.id == cc.status_id
  Index        r29, r49, r26
  Index        r64, r45, r35
  Equal        r34, r29, r64
  // cct1.kind == "cast" &&
  Move         r39, r72
  JumpIfFalse  r39, L17
  Move         r39, r16
  // cct2.kind == "complete+verified" &&
  JumpIfFalse  r39, L17
  Move         r39, r74
  // chn.name == "Queen" &&
  JumpIfFalse  r39, L17
  // (ci.note == "(voice)" ||
  Index        r33, r46, r18
  Const        r26, "(voice)"
  Equal        r49, r33, r26
  // ci.note == "(voice) (uncredited)" ||
  Index        r35, r46, r18
  Const        r45, "(voice) (uncredited)"
  Equal        r29, r35, r45
  // ci.note == "(voice: English version)") &&
  Index        r64, r46, r18
  Const        r72, "(voice: English version)"
  Equal        r16, r64, r72
  // (ci.note == "(voice)" ||
  Move         r74, r49
  JumpIfTrue   r74, L18
  Move         r74, r29
  // ci.note == "(voice) (uncredited)" ||
  JumpIfTrue   r74, L18
  Move         r74, r16
  // chn.name == "Queen" &&
  Move         r39, r74
  // ci.note == "(voice: English version)") &&
  JumpIfFalse  r39, L17
  Move         r39, r75
  // cn.country_code == "[us]" &&
  JumpIfFalse  r39, L17
  Move         r39, r76
  // it.info == "release dates" &&
  JumpIfFalse  r39, L17
  Move         r39, r77
  // it3.info == "trivia" &&
  JumpIfFalse  r39, L17
  Move         r39, r21
  // k.keyword == "computer-animation" &&
  JumpIfFalse  r39, L17
  Index        r33, r62, r20
  // (mi.info.starts_with("Japan:200") || mi.info.starts_with("USA:200")) &&
  Const        r26, "Japan:200"
  Const        r35, 0
  Const        r45, 9
  Len          r18, r33
  LessEq       r46, r45, r18
  JumpIfFalse  r46, L19
  Slice        r64, r33, r35, r45
  Equal        r72, r64, r26
  Move         r75, r72
  Jump         L20
  Const        r75, false
  Move         r77, r75
  JumpIfTrue   r77, L21
  Index        r21, r62, r20
  Const        r49, "USA:200"
  Const        r29, 0
  Const        r16, 7
  Len          r74, r21
  LessEq       r18, r16, r74
  JumpIfFalse  r18, L22
  Slice        r46, r21, r29, r16
  Equal        r33, r46, r49
  Move         r35, r33
  Jump         L23
  Const        r35, false
  Move         r77, r35
  // k.keyword == "computer-animation" &&
  Move         r39, r77
  // (mi.info.starts_with("Japan:200") || mi.info.starts_with("USA:200")) &&
  JumpIfFalse  r39, L17
  Move         r39, r22
  // n.gender == "f" &&
  JumpIfFalse  r39, L17
  Index        r26, r66, r17
  // n.name.contains("An") &&
  Const        r64, "An"
  In           r72, r64, r26
  // n.gender == "f" &&
  Move         r39, r72
  // n.name.contains("An") &&
  JumpIfFalse  r39, L17
  Move         r39, r23
  // rt.role == "actress" &&
  JumpIfFalse  r39, L17
  Move         r39, r78
  // t.title == "Shrek 2" &&
  JumpIfFalse  r39, L17
  Move         r39, r73
  // t.production_year >= 2000 &&
  JumpIfFalse  r39, L17
  Move         r39, r25
  // t.production_year <= 2010 &&
  JumpIfFalse  r39, L17
  Move         r39, r79
  // t.id == mi.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r80
  // t.id == mc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r81
  // t.id == ci.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r82
  // t.id == mk.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r83
  // t.id == cc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r84
  // mc.movie_id == ci.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r85
  // mc.movie_id == mi.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r86
  // mc.movie_id == mk.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r87
  // mc.movie_id == cc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r88
  // mi.movie_id == ci.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r89
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r90
  // mi.movie_id == cc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r91
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r92
  // ci.movie_id == cc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r27
  // mk.movie_id == cc.movie_id &&
  JumpIfFalse  r39, L17
  Move         r39, r54
  // cn.id == mc.company_id &&
  JumpIfFalse  r39, L17
  Move         r39, r11
  // it.id == mi.info_type_id &&
  JumpIfFalse  r39, L17
  Move         r39, r28
  // n.id == ci.person_id &&
  JumpIfFalse  r39, L17
  Move         r39, r52
  // rt.id == ci.role_id &&
  JumpIfFalse  r39, L17
  Move         r39, r61
  // n.id == an.person_id &&
  JumpIfFalse  r39, L17
  Move         r39, r31
  // ci.person_id == an.person_id &&
  JumpIfFalse  r39, L17
  Move         r39, r69
  // chn.id == ci.person_role_id &&
  JumpIfFalse  r39, L17
  Move         r39, r19
  // n.id == pi.person_id &&
  JumpIfFalse  r39, L17
  Move         r39, r30
  // ci.person_id == pi.person_id &&
  JumpIfFalse  r39, L17
  Move         r39, r58
  // it3.id == pi.info_type_id &&
  JumpIfFalse  r39, L17
  Move         r39, r32
  // k.id == mk.keyword_id &&
  JumpIfFalse  r39, L17
  Move         r39, r7
  // cct1.id == cc.subject_id &&
  JumpIfFalse  r39, L17
  Move         r39, r34
L17:
  // where (
  JumpIfFalse  r39, L24
  // voiced_char: chn.name,
  Const        r75, "voiced_char"
  Index        r20, r50, r17
  // voicing_actress: n.name,
  Const        r62, "voicing_actress"
  Index        r74, r66, r17
  // voiced_animation: t.title
  Const        r18, "voiced_animation"
  Index        r21, r71, r24
  // voiced_char: chn.name,
  Move         r93, r75
  Move         r94, r20
  // voicing_actress: n.name,
  Move         r95, r62
  Move         r96, r74
  // voiced_animation: t.title
  Move         r97, r18
  Move         r98, r21
  // select {
  MakeMap      r29, 3, r93
  // from an in aka_name
  Append       r16, r15, r29
  Move         r15, r16
L24:
  // from t in title
  Const        r49, 1
  AddInt       r70, r70, r49
  Jump         L25
L16:
  // from rt in role_type
  AddInt       r68, r68, r49
  Jump         L26
L15:
  // from pi in person_info
  AddInt       r12, r12, r49
  Jump         L27
L14:
  // from n in name
  AddInt       r65, r65, r49
  Jump         L28
L13:
  // from mk in movie_keyword
  AddInt       r63, r63, r49
  Jump         L29
L12:
  // from mi in movie_info
  AddInt       r9, r9, r49
  Jump         L30
L11:
  // from mc in movie_companies
  AddInt       r8, r8, r49
  Jump         L31
L10:
  // from k in keyword
  AddInt       r59, r59, r49
  Jump         L32
L9:
  // from it3 in info_type
  AddInt       r57, r57, r49
  Jump         L33
L8:
  // from it in info_type
  AddInt       r55, r55, r49
  Jump         L34
L7:
  // from cn in company_name
  AddInt       r53, r53, r49
  Jump         L35
L6:
  // from ci in cast_info
  AddInt       r51, r51, r49
  Jump         L36
L5:
  // from chn in char_name
  AddInt       r3, r3, r49
  Jump         L37
L4:
  // from cct2 in comp_cast_type
  AddInt       r2, r2, r49
  Jump         L38
L3:
  // from cct1 in comp_cast_type
  AddInt       r47, r47, r49
  Jump         L39
L2:
  // from cc in complete_cast
  AddInt       r44, r44, r49
  Jump         L40
L1:
  // from an in aka_name
  AddInt       r42, r42, r49
  Jump         L41
L0:
  // voiced_char: min(from x in matches select x.voiced_char),
  Const        r46, "voiced_char"
  Const        r33, []
  IterPrep     r22, r15
  Len          r77, r22
  Move         r35, r41
L43:
  LessInt      r73, r35, r77
  JumpIfFalse  r73, L42
  Index        r23, r22, r35
  Move         r78, r23
  Index        r79, r78, r36
  Append       r80, r33, r79
  Move         r33, r80
  AddInt       r35, r35, r49
  Jump         L43
L42:
  Min          r81, r33
  // voicing_actress: min(from x in matches select x.voicing_actress),
  Const        r76, "voicing_actress"
  Const        r82, []
  IterPrep     r83, r15
  Len          r84, r83
  Move         r85, r41
L45:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L44
  Index        r87, r83, r85
  Move         r78, r87
  Index        r88, r78, r37
  Append       r89, r82, r88
  Move         r82, r89
  AddInt       r85, r85, r49
  Jump         L45
L44:
  Min          r90, r82
  // voiced_animation: min(from x in matches select x.voiced_animation)
  Const        r91, "voiced_animation"
  Const        r92, []
  IterPrep     r27, r15
  Len          r54, r27
  Move         r45, r41
L47:
  LessInt      r11, r45, r54
  JumpIfFalse  r11, L46
  Index        r28, r27, r45
  Move         r78, r28
  Index        r52, r78, r38
  Append       r61, r92, r52
  Move         r92, r61
  AddInt       r45, r45, r49
  Jump         L47
L46:
  Min          r31, r92
  // voiced_char: min(from x in matches select x.voiced_char),
  Move         r93, r46
  Move         r94, r81
  // voicing_actress: min(from x in matches select x.voicing_actress),
  Move         r95, r76
  Move         r96, r90
  // voiced_animation: min(from x in matches select x.voiced_animation)
  Move         r97, r91
  Move         r98, r31
  // {
  MakeMap      r69, 3, r93
  Move         r19, r69
  // let result = [
  MakeList     r30, 1, r19
  // json(result)
  JSON         r30
  // expect result == [
  Const        r58, [{"voiced_animation": "Shrek 2", "voiced_char": "Queen", "voicing_actress": "Angela Aniston"}]
  Equal        r32, r30, r58
  Expect       r32
  Return       r0
