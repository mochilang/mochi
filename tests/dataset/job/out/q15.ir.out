func main (regs=174)
  // let aka_title = [
  Const        r0, [{"movie_id": 1}, {"movie_id": 2}]
  // let company_name = [
  Const        r1, [{"country_code": "[us]", "id": 1}, {"country_code": "[gb]", "id": 2}]
  // let company_type = [
  Const        r2, [{"id": 10}, {"id": 20}]
  // let info_type = [
  Const        r3, [{"id": 5, "info": "release dates"}, {"id": 6, "info": "other"}]
  // let keyword = [
  Const        r4, [{"id": 100}, {"id": 200}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 10, "movie_id": 1, "note": "release (2005) (worldwide)"}, {"company_id": 2, "company_type_id": 20, "movie_id": 2, "note": "release (1999) (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: March 2005", "info_type_id": 5, "movie_id": 1, "note": "internet"}, {"info": "USA: May 1999", "info_type_id": 5, "movie_id": 2, "note": "theater"}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 200, "movie_id": 2}]
  // let title = [
  Const        r8, [{"id": 1, "production_year": 2005, "title": "Example Movie"}, {"id": 2, "production_year": 1999, "title": "Old Movie"}]
  // from t in title
  Const        r9, []
  // where cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // it1.info == "release dates" &&
  Const        r11, "info"
  // mc.note.contains("200") &&
  Const        r12, "note"
  // t.production_year > 2000
  Const        r14, "production_year"
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r15, "release_date"
  Const        r16, "internet_movie"
  Const        r17, "title"
  // from t in title
  IterPrep     r18, r8
  Len          r19, r18
  Const        r21, 0
  Move         r20, r21
L25:
  LessInt      r22, r20, r19
  JumpIfFalse  r22, L0
  Index        r24, r18, r20
  // join at in aka_title on at.movie_id == t.id
  IterPrep     r25, r0
  Len          r26, r25
  Const        r27, "movie_id"
  Const        r28, "id"
  Move         r29, r21
L24:
  LessInt      r30, r29, r26
  JumpIfFalse  r30, L1
  Index        r32, r25, r29
  Index        r33, r32, r27
  Index        r34, r24, r28
  Equal        r35, r33, r34
  JumpIfFalse  r35, L2
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r36, r6
  Len          r37, r36
  Move         r38, r21
L23:
  LessInt      r39, r38, r37
  JumpIfFalse  r39, L2
  Index        r41, r36, r38
  Index        r42, r41, r27
  Index        r43, r24, r28
  Equal        r44, r42, r43
  JumpIfFalse  r44, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r45, r7
  Len          r46, r45
  Move         r47, r21
L22:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r50, r45, r47
  Index        r51, r50, r27
  Index        r52, r24, r28
  Equal        r53, r51, r52
  JumpIfFalse  r53, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r54, r5
  Len          r55, r54
  Move         r56, r21
L21:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L4
  Index        r59, r54, r56
  Index        r60, r59, r27
  Index        r61, r24, r28
  Equal        r62, r60, r61
  JumpIfFalse  r62, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r63, r4
  Len          r64, r63
  Const        r65, "keyword_id"
  Move         r66, r21
L20:
  LessInt      r67, r66, r64
  JumpIfFalse  r67, L5
  Index        r69, r63, r66
  Index        r70, r69, r28
  Index        r71, r50, r65
  Equal        r72, r70, r71
  JumpIfFalse  r72, L6
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r73, r3
  Len          r74, r73
  Const        r75, "info_type_id"
  Move         r76, r21
L19:
  LessInt      r77, r76, r74
  JumpIfFalse  r77, L6
  Index        r79, r73, r76
  Index        r80, r79, r28
  Index        r81, r41, r75
  Equal        r82, r80, r81
  JumpIfFalse  r82, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r83, r1
  Len          r84, r83
  Const        r85, "company_id"
  Move         r86, r21
L18:
  LessInt      r87, r86, r84
  JumpIfFalse  r87, L7
  Index        r89, r83, r86
  Index        r90, r89, r28
  Index        r91, r59, r85
  Equal        r92, r90, r91
  JumpIfFalse  r92, L8
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r93, r2
  Len          r94, r93
  Const        r95, "company_type_id"
  Move         r96, r21
L17:
  LessInt      r97, r96, r94
  JumpIfFalse  r97, L8
  Index        r99, r93, r96
  Index        r100, r99, r28
  Index        r101, r59, r95
  Equal        r102, r100, r101
  JumpIfFalse  r102, L9
  // where cn.country_code == "[us]" &&
  Index        r103, r89, r10
  // t.production_year > 2000
  Index        r104, r24, r14
  Const        r105, 2000
  Less         r106, r105, r104
  // where cn.country_code == "[us]" &&
  Const        r107, "[us]"
  Equal        r108, r103, r107
  // it1.info == "release dates" &&
  Index        r109, r79, r11
  Const        r110, "release dates"
  Equal        r111, r109, r110
  // where cn.country_code == "[us]" &&
  Move         r112, r108
  JumpIfFalse  r112, L10
L10:
  // it1.info == "release dates" &&
  Move         r113, r111
  JumpIfFalse  r113, L11
  Index        r114, r59, r12
  // mc.note.contains("200") &&
  Const        r115, "200"
  In           r117, r115, r114
L11:
  JumpIfFalse  r117, L12
  Index        r118, r59, r12
  // mc.note.contains("worldwide") &&
  Const        r119, "worldwide"
  In           r121, r119, r118
L12:
  JumpIfFalse  r121, L13
  Index        r122, r41, r12
  // mi.note.contains("internet") &&
  Const        r123, "internet"
  In           r125, r123, r122
L13:
  JumpIfFalse  r125, L14
  Index        r126, r41, r11
  // mi.info.contains("USA:") &&
  Const        r127, "USA:"
  In           r129, r127, r126
L14:
  JumpIfFalse  r129, L15
  Index        r130, r41, r11
  // mi.info.contains("200") &&
  In           r132, r115, r130
L15:
  JumpIfFalse  r132, L16
  Move         r132, r106
L16:
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r132, L9
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r133, "release_date"
  Index        r134, r41, r11
  Const        r135, "internet_movie"
  Index        r136, r24, r17
  Move         r137, r133
  Move         r138, r134
  Move         r139, r135
  Move         r140, r136
  MakeMap      r141, 2, r137
  // from t in title
  Append       r9, r9, r141
L9:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r143, 1
  Add          r96, r96, r143
  Jump         L17
L8:
  // join cn in company_name on cn.id == mc.company_id
  Add          r86, r86, r143
  Jump         L18
L7:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r76, r76, r143
  Jump         L19
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r66, r66, r143
  Jump         L20
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r56, r56, r143
  Jump         L21
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r47, r47, r143
  Jump         L22
L3:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r38, r38, r143
  Jump         L23
L2:
  // join at in aka_title on at.movie_id == t.id
  Jump         L24
L1:
  // from t in title
  AddInt       r20, r20, r143
  Jump         L25
L0:
  // release_date: min(from r in rows select r.release_date),
  Const        r144, "release_date"
  Const        r145, []
  IterPrep     r146, r9
  Len          r147, r146
  Move         r148, r21
L27:
  LessInt      r149, r148, r147
  JumpIfFalse  r149, L26
  Index        r151, r146, r148
  Index        r152, r151, r15
  Append       r145, r145, r152
  AddInt       r148, r148, r143
  Jump         L27
L26:
  Min          r154, r145
  // internet_movie: min(from r in rows select r.internet_movie)
  Const        r155, "internet_movie"
  Const        r156, []
  IterPrep     r157, r9
  Len          r158, r157
  Move         r159, r21
L29:
  LessInt      r160, r159, r158
  JumpIfFalse  r160, L28
  Index        r151, r157, r159
  Index        r162, r151, r16
  Append       r156, r156, r162
  AddInt       r159, r159, r143
  Jump         L29
L28:
  Min          r164, r156
  // release_date: min(from r in rows select r.release_date),
  Move         r165, r144
  Move         r166, r154
  // internet_movie: min(from r in rows select r.internet_movie)
  Move         r167, r155
  Move         r168, r164
  // {
  MakeMap      r170, 2, r165
  // let result = [
  MakeList     r171, 1, r170
  // json(result)
  JSON         r171
  // expect result == [
  Const        r172, [{"internet_movie": "Example Movie", "release_date": "USA: March 2005"}]
  Equal        r173, r171, r172
  Expect       r173
  Return       r0
