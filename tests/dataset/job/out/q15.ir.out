func main (regs=32)
  // let aka_title = [
  Const        r0, [{"movie_id": 1}, {"movie_id": 2}]
  // let company_name = [
  Const        r1, [{"country_code": "[us]", "id": 1}, {"country_code": "[gb]", "id": 2}]
  // let company_type = [
  Const        r2, [{"id": 10}, {"id": 20}]
L14:
  // let info_type = [
  Const        r3, [{"id": 5, "info": "release dates"}, {"id": 6, "info": "other"}]
L9:
  // let keyword = [
  Const        r4, [{"id": 100}, {"id": 200}]
L15:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 10, "movie_id": 1, "note": "release (2005) (worldwide)"}, {"company_id": 2, "company_type_id": 20, "movie_id": 2, "note": "release (1999) (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: March 2005", "info_type_id": 5, "movie_id": 1, "note": "internet"}, {"info": "USA: May 1999", "info_type_id": 5, "movie_id": 2, "note": "theater"}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 200, "movie_id": 2}]
  // let title = [
  Const        r8, [{"id": 1, "production_year": 2005, "title": "Example Movie"}, {"id": 2, "production_year": 1999, "title": "Old Movie"}]
  // from t in title
  Const        r9, []
  // where cn.country_code == "[us]" &&
  Const        r10, "country_code"
L11:
  // it1.info == "release dates" &&
  Const        r11, "info"
L10:
  // mc.note.contains("200") &&
  Const        r12, "note"
L8:
  // t.production_year > 2000
  Const        r13, "production_year"
L7:
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r14, "release_date"
  Const        r15, "internet_movie"
  Const        r16, "title"
  // from t in title
  IterPrep     r17, r8
L17:
  Len          r8, r17
L6:
  Const        r18, 0
  Move         r19, r18
L13:
  LessInt      r20, r19, r8
  JumpIfFalse  r20, L0
L0:
  Index        r20, r17, r19
L2:
  // join at in aka_title on at.movie_id == t.id
  IterPrep     r17, r0
L16:
  Len          r8, r17
  Const        r21, "movie_id"
L12:
  Const        r22, "id"
  Move         r23, r18
  LessInt      r24, r23, r8
L3:
  JumpIfFalse  r24, L1
  Index        r24, r17, r23
  Index        r23, r24, r21
  Index        r24, r20, r22
  Equal        r17, r23, r24
  JumpIfFalse  r17, L0
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r17, r6
  Len          r6, r17
  Move         r24, r18
  LessInt      r23, r24, r6
  JumpIfFalse  r23, L0
  Index        r6, r17, r24
  Index        r17, r6, r21
  Index        r8, r20, r22
  Equal        r25, r17, r8
  JumpIfFalse  r25, L2
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r25, r7
  Len          r7, r25
  Move         r8, r18
  LessInt      r17, r8, r7
  JumpIfFalse  r17, L2
  Index        r17, r25, r8
  Index        r25, r17, r21
  Index        r7, r20, r22
  Equal        r26, r25, r7
  JumpIfFalse  r26, L3
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r26, r5
  Len          r5, r26
  Move         r7, r18
  LessInt      r25, r7, r5
  JumpIfFalse  r25, L3
  Index        r25, r26, r7
  Index        r26, r25, r21
  Index        r21, r20, r22
  Equal        r5, r26, r21
  JumpIfFalse  r5, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r5, r4
  Len          r4, r5
  Const        r21, "keyword_id"
  Move         r26, r18
  LessInt      r27, r26, r4
  JumpIfFalse  r27, L4
  Index        r27, r5, r26
  Index        r5, r27, r22
  Index        r27, r17, r21
  Equal        r21, r5, r27
  JumpIfFalse  r21, L5
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r21, r3
  Len          r3, r21
  Const        r27, "info_type_id"
  Move         r17, r18
  LessInt      r4, r17, r3
  JumpIfFalse  r4, L5
  Index        r4, r21, r17
  Index        r21, r4, r22
  Index        r3, r6, r27
  Equal        r27, r21, r3
  JumpIfFalse  r27, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r27, r1
  Len          r1, r27
  Const        r21, "company_id"
  Move         r28, r18
  LessInt      r29, r28, r1
  JumpIfFalse  r29, L6
  Index        r29, r27, r28
  Index        r27, r29, r22
  Index        r1, r25, r21
  Equal        r21, r27, r1
  JumpIfFalse  r21, L7
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r1, r2
  Len          r2, r1
  Const        r27, "company_type_id"
  Move         r30, r18
  LessInt      r31, r30, r2
  JumpIfFalse  r31, L7
  Index        r31, r1, r30
  Index        r1, r31, r22
  Index        r31, r25, r27
  Equal        r27, r1, r31
  JumpIfFalse  r27, L2
  // where cn.country_code == "[us]" &&
  Index        r27, r29, r10
  // t.production_year > 2000
  Index        r29, r20, r13
  Const        r13, 2000
  Less         r10, r13, r29
  // where cn.country_code == "[us]" &&
  Const        r13, "[us]"
  Equal        r29, r27, r13
  // it1.info == "release dates" &&
  Index        r13, r4, r11
  Const        r4, "release dates"
  Equal        r31, r13, r4
  // where cn.country_code == "[us]" &&
  Move         r4, r29
  JumpIfFalse  r4, L8
  // it1.info == "release dates" &&
  Move         r4, r31
  JumpIfFalse  r4, L9
  Index        r4, r25, r12
  // mc.note.contains("200") &&
  Const        r31, "200"
  In           r29, r31, r4
  JumpIfFalse  r29, L8
  Index        r29, r25, r12
  // mc.note.contains("worldwide") &&
  Const        r4, "worldwide"
  In           r13, r4, r29
  JumpIfFalse  r13, L8
  Index        r13, r6, r12
  // mi.note.contains("internet") &&
  Const        r12, "internet"
  In           r4, r12, r13
  JumpIfFalse  r4, L10
  Index        r4, r6, r11
  // mi.info.contains("USA:") &&
  Const        r12, "USA:"
  In           r13, r12, r4
  JumpIfFalse  r13, L11
  Index        r13, r6, r11
  // mi.info.contains("200") &&
  In           r12, r31, r13
  JumpIfFalse  r12, L11
  Move         r12, r10
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r12, L2
  // select { release_date: mi.info, internet_movie: t.title }
  Move         r12, r14
  Index        r13, r6, r11
  Move         r6, r15
  Index        r11, r20, r16
  Move         r20, r12
  Move         r12, r13
  Move         r13, r6
  Move         r6, r11
  MakeMap      r11, 2, r20
  // from t in title
  Append       r9, r9, r11
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r11, 1
  Add          r30, r30, r11
  Jump         L12
  // join cn in company_name on cn.id == mc.company_id
  Add          r28, r28, r11
  Jump         L13
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r17, r17, r11
  Jump         L14
L5:
  // join k in keyword on k.id == mk.keyword_id
  Add          r26, r26, r11
  Jump         L15
L4:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r7, r7, r11
  Jump         L16
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r8, r8, r11
  Jump         L12
  // join mi in movie_info on mi.movie_id == t.id
  Add          r24, r24, r11
  Jump         L0
L1:
  // from t in title
  AddInt       r19, r19, r11
  Jump         L17
  // release_date: min(from r in rows select r.release_date),
  Move         r27, r14
  Const        r23, []
  IterPrep     r24, r9
  Len          r19, r24
  Move         r30, r18
L19:
  LessInt      r21, r30, r19
  JumpIfFalse  r21, L18
  Index        r21, r24, r30
  Index        r24, r21, r14
  Append       r23, r23, r24
  AddInt       r30, r30, r11
  Jump         L19
L18:
  Min          r24, r23
  // internet_movie: min(from r in rows select r.internet_movie)
  Move         r23, r15
  Const        r30, []
  IterPrep     r14, r9
  Len          r9, r14
  Move         r19, r18
L21:
  LessInt      r18, r19, r9
  JumpIfFalse  r18, L20
  Index        r21, r14, r19
  Index        r18, r21, r15
  Append       r30, r30, r18
  AddInt       r19, r19, r11
  Jump         L21
L20:
  Min          r18, r30
  // release_date: min(from r in rows select r.release_date),
  Move         r30, r27
  Move         r27, r24
  // internet_movie: min(from r in rows select r.internet_movie)
  Move         r24, r23
  Move         r23, r18
  // {
  MakeMap      r18, 2, r30
  // let result = [
  MakeList     r23, 1, r18
  // json(result)
  JSON         r23
  // expect result == [
  Const        r18, [{"internet_movie": "Example Movie", "release_date": "USA: March 2005"}]
  Equal        r24, r23, r18
  Expect       r24
  Return       r0
