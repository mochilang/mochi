func main (regs=43)
  // let aka_title = [
  Const        r0, [{"movie_id": 1}, {"movie_id": 2}]
  // let company_name = [
  Const        r1, [{"country_code": "[us]", "id": 1}, {"country_code": "[gb]", "id": 2}]
  // let company_type = [
  Const        r2, [{"id": 10}, {"id": 20}]
  // let info_type = [
  Const        r3, [{"id": 5, "info": "release dates"}, {"id": 6, "info": "other"}]
  // let keyword = [
  Const        r4, [{"id": 100}, {"id": 200}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 10, "movie_id": 1, "note": "release (2005) (worldwide)"}, {"company_id": 2, "company_type_id": 20, "movie_id": 2, "note": "release (1999) (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: March 2005", "info_type_id": 5, "movie_id": 1, "note": "internet"}, {"info": "USA: May 1999", "info_type_id": 5, "movie_id": 2, "note": "theater"}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 200, "movie_id": 2}]
L17:
  // let title = [
  Const        r8, [{"id": 1, "production_year": 2005, "title": "Example Movie"}, {"id": 2, "production_year": 1999, "title": "Old Movie"}]
  // from t in title
  Const        r9, []
  // where cn.country_code == "[us]" &&
  Const        r10, "country_code"
  // it1.info == "release dates" &&
  Const        r11, "info"
  // mc.note.contains("200") &&
  Const        r12, "note"
  Const        r13, "contains"
  // t.production_year > 2000
  Const        r13, "production_year"
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r14, "release_date"
  Const        r15, "internet_movie"
  Const        r16, "title"
  // from t in title
  IterPrep     r17, r8
  Len          r8, r17
L19:
  Const        r18, 0
L18:
  Move         r19, r18
L12:
  LessInt      r20, r19, r8
  JumpIfFalse  r20, L0
  Index        r8, r17, r19
  Move         r17, r8
L10:
  // join at in aka_title on at.movie_id == t.id
  IterPrep     r8, r0
L15:
  Len          r21, r8
L14:
  Const        r22, "movie_id"
L16:
  Const        r23, "id"
  Move         r24, r18
L13:
  LessInt      r25, r24, r21
  JumpIfFalse  r25, L1
  Index        r21, r8, r24
L11:
  Move         r25, r21
  Index        r8, r25, r22
  Index        r25, r17, r23
  Equal        r26, r8, r25
  JumpIfFalse  r26, L2
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r8, r6
  Len          r25, r8
  Move         r26, r18
  LessInt      r6, r26, r25
  JumpIfFalse  r6, L2
  Index        r25, r8, r26
  Move         r6, r25
  Index        r8, r6, r22
  Index        r25, r17, r23
  Equal        r27, r8, r25
  JumpIfFalse  r27, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r25, r7
  Len          r27, r25
  Move         r7, r18
  LessInt      r28, r7, r27
  JumpIfFalse  r28, L3
  Index        r27, r25, r7
  Move         r28, r27
  Index        r25, r28, r22
  Index        r27, r17, r23
  Equal        r29, r25, r27
  JumpIfFalse  r29, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r25, r5
  Len          r27, r25
  Move         r5, r18
  LessInt      r30, r5, r27
  JumpIfFalse  r30, L4
  Index        r27, r25, r5
  Move         r30, r27
  Index        r25, r30, r22
  Index        r27, r17, r23
  Equal        r22, r25, r27
  JumpIfFalse  r22, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r25, r4
  Len          r27, r25
  Const        r22, "keyword_id"
  Move         r4, r18
  LessInt      r31, r4, r27
  JumpIfFalse  r31, L5
  Index        r31, r25, r4
  Move         r25, r31
  Index        r31, r25, r23
  Index        r25, r28, r22
  Equal        r28, r31, r25
  JumpIfFalse  r28, L6
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r22, r3
  Len          r31, r22
  Const        r25, "info_type_id"
  Move         r28, r18
  LessInt      r3, r28, r31
  JumpIfFalse  r3, L6
  Index        r31, r22, r28
  Move         r3, r31
  Index        r22, r3, r23
  Index        r31, r6, r25
  Equal        r25, r22, r31
  JumpIfFalse  r25, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r22, r1
  Len          r31, r22
  Const        r25, "company_id"
  Move         r1, r18
  LessInt      r32, r1, r31
  JumpIfFalse  r32, L7
  Index        r31, r22, r1
  Move         r32, r31
  Index        r22, r32, r23
  Index        r33, r30, r25
  Equal        r25, r22, r33
  JumpIfFalse  r25, L8
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r22, r2
  Len          r33, r22
  Const        r25, "company_type_id"
  Move         r2, r18
  LessInt      r34, r2, r33
  JumpIfFalse  r34, L8
  Index        r33, r22, r2
  Move         r34, r33
  Index        r22, r34, r23
  Index        r33, r30, r25
  Equal        r23, r22, r33
  JumpIfFalse  r23, L9
  // where cn.country_code == "[us]" &&
  Index        r34, r32, r10
  // t.production_year > 2000
  Index        r25, r17, r13
  Const        r33, 2000
  Less         r23, r33, r25
  // where cn.country_code == "[us]" &&
  Const        r10, "[us]"
  Equal        r32, r34, r10
  // it1.info == "release dates" &&
  Index        r13, r3, r11
  Const        r25, "release dates"
  Equal        r33, r13, r25
  // where cn.country_code == "[us]" &&
  Move         r34, r32
  JumpIfFalse  r34, L10
  Move         r34, r33
  // it1.info == "release dates" &&
  JumpIfFalse  r34, L10
  Index        r10, r30, r12
  // mc.note.contains("200") &&
  Const        r3, "200"
  In           r13, r3, r10
  // it1.info == "release dates" &&
  Move         r34, r13
  // mc.note.contains("200") &&
  JumpIfFalse  r34, L10
  Index        r25, r30, r12
  // mc.note.contains("worldwide") &&
  Const        r32, "worldwide"
  In           r33, r32, r25
  // mc.note.contains("200") &&
  Move         r34, r33
  // mc.note.contains("worldwide") &&
  JumpIfFalse  r34, L10
  Index        r10, r6, r12
  // mi.note.contains("internet") &&
  Const        r13, "internet"
  In           r30, r13, r10
  // mc.note.contains("worldwide") &&
  Move         r34, r30
  // mi.note.contains("internet") &&
  JumpIfFalse  r34, L10
  Index        r25, r6, r11
  // mi.info.contains("USA:") &&
  Const        r32, "USA:"
  In           r33, r32, r25
  // mi.note.contains("internet") &&
  Move         r34, r33
  // mi.info.contains("USA:") &&
  JumpIfFalse  r34, L10
  Index        r12, r6, r11
  // mi.info.contains("200") &&
  In           r10, r3, r12
  // mi.info.contains("USA:") &&
  Move         r34, r10
  // mi.info.contains("200") &&
  JumpIfFalse  r34, L10
  Move         r34, r23
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r34, L9
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r13, "release_date"
  Index        r30, r6, r11
  Const        r25, "internet_movie"
  Index        r32, r17, r16
  Move         r35, r13
  Move         r36, r30
  Move         r37, r25
  Move         r38, r32
  MakeMap      r33, 2, r35
  // from t in title
  Append       r23, r9, r33
  Move         r9, r23
L9:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r3, 1
  Add          r2, r2, r3
  Jump         L11
L8:
  // join cn in company_name on cn.id == mc.company_id
  Add          r1, r1, r3
  Jump         L12
L7:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r28, r28, r3
  Jump         L13
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r4, r4, r3
  Jump         L14
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r5, r5, r3
  Jump         L15
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r7, r7, r3
  Jump         L16
L3:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r26, r26, r3
  Jump         L17
L2:
  // join at in aka_title on at.movie_id == t.id
  Add          r24, r24, r3
  Jump         L18
L1:
  // from t in title
  AddInt       r19, r19, r3
  Jump         L19
L0:
  // release_date: min(from r in rows select r.release_date),
  Const        r12, "release_date"
  Const        r10, []
  IterPrep     r11, r9
  Len          r6, r11
  Move         r16, r18
L21:
  LessInt      r17, r16, r6
  JumpIfFalse  r17, L20
  Index        r13, r11, r16
  Move         r30, r13
  Index        r25, r30, r14
  Append       r32, r10, r25
  Move         r10, r32
  AddInt       r16, r16, r3
  Jump         L21
L20:
  Min          r35, r10
  // internet_movie: min(from r in rows select r.internet_movie)
  Const        r36, "internet_movie"
  Const        r37, []
  IterPrep     r38, r9
  Len          r33, r38
  Move         r23, r18
L23:
  LessInt      r19, r23, r33
  JumpIfFalse  r19, L22
  Index        r20, r38, r23
  Move         r30, r20
  Index        r24, r30, r15
  Append       r21, r37, r24
  Move         r37, r21
  AddInt       r23, r23, r3
  Jump         L23
L22:
  Min          r26, r37
  // release_date: min(from r in rows select r.release_date),
  Move         r39, r12
  Move         r40, r35
  // internet_movie: min(from r in rows select r.internet_movie)
  Move         r41, r36
  Move         r42, r26
  // {
  MakeMap      r8, 2, r39
  Move         r7, r8
  // let result = [
  MakeList     r29, 1, r7
  // json(result)
  JSON         r29
  // expect result == [
  Const        r5, [{"internet_movie": "Example Movie", "release_date": "USA: March 2005"}]
  Equal        r27, r29, r5
  Expect       r27
  Return       r0
