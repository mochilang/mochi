func main (regs=220)
  // let aka_title = [
  Const        r0, [{"movie_id": 1}, {"movie_id": 2}]
  Move         r1, r0
  // let company_name = [
  Const        r2, [{"country_code": "[us]", "id": 1}, {"country_code": "[gb]", "id": 2}]
  Move         r3, r2
  // let company_type = [
  Const        r4, [{"id": 10}, {"id": 20}]
  Move         r5, r4
  // let info_type = [
  Const        r6, [{"id": 5, "info": "release dates"}, {"id": 6, "info": "other"}]
  Move         r7, r6
  // let keyword = [
  Const        r8, [{"id": 100}, {"id": 200}]
  Move         r9, r8
  // let movie_companies = [
  Const        r10, [{"company_id": 1, "company_type_id": 10, "movie_id": 1, "note": "release (2005) (worldwide)"}, {"company_id": 2, "company_type_id": 20, "movie_id": 2, "note": "release (1999) (worldwide)"}]
  Move         r11, r10
  // let movie_info = [
  Const        r12, [{"info": "USA: March 2005", "info_type_id": 5, "movie_id": 1, "note": "internet"}, {"info": "USA: May 1999", "info_type_id": 5, "movie_id": 2, "note": "theater"}]
  Move         r13, r12
  // let movie_keyword = [
  Const        r14, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 200, "movie_id": 2}]
  Move         r15, r14
  // let title = [
  Const        r16, [{"id": 1, "production_year": 2005, "title": "Example Movie"}, {"id": 2, "production_year": 1999, "title": "Old Movie"}]
  Move         r17, r16
  // from t in title
  Const        r18, []
  IterPrep     r19, r17
  Len          r20, r19
  Const        r21, 0
L25:
  Less         r22, r21, r20
  JumpIfFalse  r22, L0
  Index        r23, r19, r21
  Move         r24, r23
  // join at in aka_title on at.movie_id == t.id
  IterPrep     r25, r1
  Len          r26, r25
  Const        r27, 0
L24:
  Less         r28, r27, r26
  JumpIfFalse  r28, L1
  Index        r29, r25, r27
  Move         r30, r29
  Const        r31, "movie_id"
  Index        r32, r30, r31
  Const        r33, "id"
  Index        r34, r24, r33
  Equal        r35, r32, r34
  JumpIfFalse  r35, L2
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r36, r13
  Len          r37, r36
  Const        r38, 0
L23:
  Less         r39, r38, r37
  JumpIfFalse  r39, L2
  Index        r40, r36, r38
  Move         r41, r40
  Const        r42, "movie_id"
  Index        r43, r41, r42
  Const        r44, "id"
  Index        r45, r24, r44
  Equal        r46, r43, r45
  JumpIfFalse  r46, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r47, r15
  Len          r48, r47
  Const        r49, 0
L22:
  Less         r50, r49, r48
  JumpIfFalse  r50, L3
  Index        r51, r47, r49
  Move         r52, r51
  Const        r53, "movie_id"
  Index        r54, r52, r53
  Const        r55, "id"
  Index        r56, r24, r55
  Equal        r57, r54, r56
  JumpIfFalse  r57, L4
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r58, r11
  Len          r59, r58
  Const        r60, 0
L21:
  Less         r61, r60, r59
  JumpIfFalse  r61, L4
  Index        r62, r58, r60
  Move         r63, r62
  Const        r64, "movie_id"
  Index        r65, r63, r64
  Const        r66, "id"
  Index        r67, r24, r66
  Equal        r68, r65, r67
  JumpIfFalse  r68, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r69, r9
  Len          r70, r69
  Const        r71, 0
L20:
  Less         r72, r71, r70
  JumpIfFalse  r72, L5
  Index        r73, r69, r71
  Move         r74, r73
  Const        r75, "id"
  Index        r76, r74, r75
  Const        r77, "keyword_id"
  Index        r78, r52, r77
  Equal        r79, r76, r78
  JumpIfFalse  r79, L6
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r80, r7
  Len          r81, r80
  Const        r82, 0
L19:
  Less         r83, r82, r81
  JumpIfFalse  r83, L6
  Index        r84, r80, r82
  Move         r85, r84
  Const        r86, "id"
  Index        r87, r85, r86
  Const        r88, "info_type_id"
  Index        r89, r41, r88
  Equal        r90, r87, r89
  JumpIfFalse  r90, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r91, r3
  Len          r92, r91
  Const        r93, 0
L18:
  Less         r94, r93, r92
  JumpIfFalse  r94, L7
  Index        r95, r91, r93
  Move         r96, r95
  Const        r97, "id"
  Index        r98, r96, r97
  Const        r99, "company_id"
  Index        r100, r63, r99
  Equal        r101, r98, r100
  JumpIfFalse  r101, L8
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r102, r5
  Len          r103, r102
  Const        r104, 0
L17:
  Less         r105, r104, r103
  JumpIfFalse  r105, L8
  Index        r106, r102, r104
  Move         r107, r106
  Const        r108, "id"
  Index        r109, r107, r108
  Const        r110, "company_type_id"
  Index        r111, r63, r110
  Equal        r112, r109, r111
  JumpIfFalse  r112, L9
  // where cn.country_code == "[us]" &&
  Const        r113, "country_code"
  Index        r114, r96, r113
  // t.production_year > 2000
  Const        r115, "production_year"
  Index        r116, r24, r115
  Const        r117, 2000
  Less         r118, r117, r116
  // where cn.country_code == "[us]" &&
  Const        r119, "[us]"
  Equal        r120, r114, r119
  // it1.info == "release dates" &&
  Const        r121, "info"
  Index        r122, r85, r121
  Const        r123, "release dates"
  Equal        r124, r122, r123
  // where cn.country_code == "[us]" &&
  Move         r125, r120
  JumpIfFalse  r125, L10
  Move         r125, r124
L10:
  // it1.info == "release dates" &&
  Move         r126, r125
  JumpIfFalse  r126, L11
  Const        r127, "note"
  Index        r128, r63, r127
  // mc.note.contains("200") &&
  Const        r129, "200"
  In           r130, r129, r128
  // it1.info == "release dates" &&
  Move         r126, r130
L11:
  // mc.note.contains("200") &&
  Move         r131, r126
  JumpIfFalse  r131, L12
  Const        r132, "note"
  Index        r133, r63, r132
  // mc.note.contains("worldwide") &&
  Const        r134, "worldwide"
  In           r135, r134, r133
  // mc.note.contains("200") &&
  Move         r131, r135
L12:
  // mc.note.contains("worldwide") &&
  Move         r136, r131
  JumpIfFalse  r136, L13
  Const        r137, "note"
  Index        r138, r41, r137
  // mi.note.contains("internet") &&
  Const        r139, "internet"
  In           r140, r139, r138
  // mc.note.contains("worldwide") &&
  Move         r136, r140
L13:
  // mi.note.contains("internet") &&
  Move         r141, r136
  JumpIfFalse  r141, L14
  Const        r142, "info"
  Index        r143, r41, r142
  // mi.info.contains("USA:") &&
  Const        r144, "USA:"
  In           r145, r144, r143
  // mi.note.contains("internet") &&
  Move         r141, r145
L14:
  // mi.info.contains("USA:") &&
  Move         r146, r141
  JumpIfFalse  r146, L15
  Const        r147, "info"
  Index        r148, r41, r147
  // mi.info.contains("200") &&
  Const        r149, "200"
  In           r150, r149, r148
  // mi.info.contains("USA:") &&
  Move         r146, r150
L15:
  // mi.info.contains("200") &&
  Move         r151, r146
  JumpIfFalse  r151, L16
  Move         r151, r118
L16:
  // where cn.country_code == "[us]" &&
  JumpIfFalse  r151, L9
  // select { release_date: mi.info, internet_movie: t.title }
  Const        r152, "release_date"
  Const        r153, "info"
  Index        r154, r41, r153
  Const        r155, "internet_movie"
  Const        r156, "title"
  Index        r157, r24, r156
  Move         r158, r152
  Move         r159, r154
  Move         r160, r155
  Move         r161, r157
  MakeMap      r162, 2, r158
  // from t in title
  Append       r163, r18, r162
  Move         r18, r163
L9:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r164, 1
  Add          r165, r104, r164
  Move         r104, r165
  Jump         L17
L8:
  // join cn in company_name on cn.id == mc.company_id
  Const        r166, 1
  Add          r167, r93, r166
  Move         r93, r167
  Jump         L18
L7:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r168, 1
  Add          r169, r82, r168
  Move         r82, r169
  Jump         L19
L6:
  // join k in keyword on k.id == mk.keyword_id
  Const        r170, 1
  Add          r171, r71, r170
  Move         r71, r171
  Jump         L20
L5:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r172, 1
  Add          r173, r60, r172
  Move         r60, r173
  Jump         L21
L4:
  // join mk in movie_keyword on mk.movie_id == t.id
  Const        r174, 1
  Add          r175, r49, r174
  Move         r49, r175
  Jump         L22
L3:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r176, 1
  Add          r177, r38, r176
  Move         r38, r177
  Jump         L23
L2:
  // join at in aka_title on at.movie_id == t.id
  Const        r178, 1
  Add          r179, r27, r178
  Move         r27, r179
  Jump         L24
L1:
  // from t in title
  Const        r180, 1
  Add          r181, r21, r180
  Move         r21, r181
  Jump         L25
L0:
  // let rows =
  Move         r182, r18
  // release_date: min(from r in rows select r.release_date),
  Const        r183, "release_date"
  Const        r184, []
  IterPrep     r185, r182
  Len          r186, r185
  Const        r187, 0
L27:
  Less         r188, r187, r186
  JumpIfFalse  r188, L26
  Index        r189, r185, r187
  Move         r190, r189
  Const        r191, "release_date"
  Index        r192, r190, r191
  Append       r193, r184, r192
  Move         r184, r193
  Const        r194, 1
  Add          r195, r187, r194
  Move         r187, r195
  Jump         L27
L26:
  Min          r196, r184
  // internet_movie: min(from r in rows select r.internet_movie)
  Const        r197, "internet_movie"
  Const        r198, []
  IterPrep     r199, r182
  Len          r200, r199
  Const        r201, 0
L29:
  Less         r202, r201, r200
  JumpIfFalse  r202, L28
  Index        r203, r199, r201
  Move         r190, r203
  Const        r204, "internet_movie"
  Index        r205, r190, r204
  Append       r206, r198, r205
  Move         r198, r206
  Const        r207, 1
  Add          r208, r201, r207
  Move         r201, r208
  Jump         L29
L28:
  Min          r209, r198
  // release_date: min(from r in rows select r.release_date),
  Move         r210, r183
  Move         r211, r196
  // internet_movie: min(from r in rows select r.internet_movie)
  Move         r212, r197
  Move         r213, r209
  // {
  MakeMap      r214, 2, r210
  Move         r215, r214
  // let result = [
  MakeList     r216, 1, r215
  Move         r217, r216
  // json(result)
  JSON         r217
  // expect result == [
  Const        r218, [{"internet_movie": "Example Movie", "release_date": "USA: March 2005"}]
  Equal        r219, r217, r218
  Expect       r219
  Return       r0
