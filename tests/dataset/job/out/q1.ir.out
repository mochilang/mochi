func main (regs=238)
  // let company_type = [
  Const        r0, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r1, [{"id": 10, "info": "top 250 rank"}, {"id": 20, "info": "bottom 10 rank"}]
  // let title = [
  Const        r2, [{"id": 100, "production_year": 1995, "title": "Good Movie"}, {"id": 200, "production_year": 2000, "title": "Bad Movie"}]
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (co-production)"}, {"company_type_id": 1, "movie_id": 200, "note": "MGM (as Metro-Goldwyn-Mayer Pictures)"}]
  // let movie_info_idx = [
  Const        r4, [{"info_type_id": 10, "movie_id": 100}, {"info_type_id": 20, "movie_id": 200}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // it.info == "top 250 rank" &&
  Const        r7, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r8, "note"
  Const        r9, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r10, "note"
  Const        r11, "contains"
  Const        r12, "note"
  Const        r13, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r14, "note"
  Const        r15, "note"
  Const        r16, "title"
  Const        r17, "title"
  Const        r18, "year"
  Const        r19, "production_year"
  // from ct in company_type
  IterPrep     r20, r0
  Len          r21, r20
  Const        r23, 0
  Move         r22, r23
L12:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r25, r20, r22
  Move         r26, r25
  // join mc in movie_companies on ct.id == mc.company_type_id
  IterPrep     r27, r3
  Len          r28, r27
  Const        r29, "id"
  Const        r30, "company_type_id"
  // where ct.kind == "production companies" &&
  Const        r31, "kind"
  // it.info == "top 250 rank" &&
  Const        r32, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r33, "note"
  Const        r34, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r35, "note"
  Const        r36, "contains"
  Const        r37, "note"
  Const        r38, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r39, "note"
  Const        r40, "note"
  Const        r41, "title"
  Const        r42, "title"
  Const        r43, "year"
  Const        r44, "production_year"
  // join mc in movie_companies on ct.id == mc.company_type_id
  Const        r46, 0
  Move         r45, r46
L11:
  LessInt      r47, r45, r28
  JumpIfFalse  r47, L1
  Index        r48, r27, r45
  Move         r49, r48
  Const        r50, "id"
  Index        r51, r26, r50
  Const        r52, "company_type_id"
  Index        r53, r49, r52
  Equal        r54, r51, r53
  JumpIfFalse  r54, L2
  // join t in title on t.id == mc.movie_id
  IterPrep     r55, r2
  Len          r56, r55
  Const        r57, "id"
  Const        r58, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r59, "kind"
  // it.info == "top 250 rank" &&
  Const        r60, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r61, "note"
  Const        r62, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r63, "note"
  Const        r64, "contains"
  Const        r65, "note"
  Const        r66, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r67, "note"
  Const        r68, "note"
  Const        r69, "title"
  Const        r70, "title"
  Const        r71, "year"
  Const        r72, "production_year"
  // join t in title on t.id == mc.movie_id
  Const        r74, 0
  Move         r73, r74
L10:
  LessInt      r75, r73, r56
  JumpIfFalse  r75, L2
  Index        r76, r55, r73
  Move         r77, r76
  Const        r78, "id"
  Index        r79, r77, r78
  Const        r80, "movie_id"
  Index        r81, r49, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L3
  // join mi in movie_info_idx on mi.movie_id == t.id
  IterPrep     r83, r4
  Len          r84, r83
  Const        r85, "movie_id"
  Const        r86, "id"
  // where ct.kind == "production companies" &&
  Const        r87, "kind"
  // it.info == "top 250 rank" &&
  Const        r88, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r89, "note"
  Const        r90, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r91, "note"
  Const        r92, "contains"
  Const        r93, "note"
  Const        r94, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r95, "note"
  Const        r96, "note"
  Const        r97, "title"
  Const        r98, "title"
  Const        r99, "year"
  Const        r100, "production_year"
  // join mi in movie_info_idx on mi.movie_id == t.id
  Const        r102, 0
  Move         r101, r102
L9:
  LessInt      r103, r101, r84
  JumpIfFalse  r103, L3
  Index        r104, r83, r101
  Move         r105, r104
  Const        r106, "movie_id"
  Index        r107, r105, r106
  Const        r108, "id"
  Index        r109, r77, r108
  Equal        r110, r107, r109
  JumpIfFalse  r110, L4
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r111, r1
  Len          r112, r111
  Const        r113, "id"
  Const        r114, "info_type_id"
  // where ct.kind == "production companies" &&
  Const        r115, "kind"
  // it.info == "top 250 rank" &&
  Const        r116, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r117, "note"
  Const        r118, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r119, "note"
  Const        r120, "contains"
  Const        r121, "note"
  Const        r122, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r123, "note"
  Const        r124, "note"
  Const        r125, "title"
  Const        r126, "title"
  Const        r127, "year"
  Const        r128, "production_year"
  // join it in info_type on it.id == mi.info_type_id
  Const        r130, 0
  Move         r129, r130
L8:
  LessInt      r131, r129, r112
  JumpIfFalse  r131, L4
  Index        r132, r111, r129
  Move         r133, r132
  Const        r134, "id"
  Index        r135, r133, r134
  Const        r136, "info_type_id"
  Index        r137, r105, r136
  Equal        r138, r135, r137
  JumpIfFalse  r138, L5
  // where ct.kind == "production companies" &&
  Const        r139, "kind"
  Index        r140, r26, r139
  Const        r141, "production companies"
  Equal        r142, r140, r141
  // it.info == "top 250 rank" &&
  Const        r143, "info"
  Index        r144, r133, r143
  Const        r145, "top 250 rank"
  Equal        r146, r144, r145
  // where ct.kind == "production companies" &&
  Move         r147, r142
  JumpIfFalse  r147, L6
  Move         r147, r146
  // it.info == "top 250 rank" &&
  JumpIfFalse  r147, L6
  Const        r148, "note"
  Index        r149, r49, r148
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r150, "(as Metro-Goldwyn-Mayer Pictures)"
  In           r151, r150, r149
  Not          r152, r151
  // it.info == "top 250 rank" &&
  Move         r147, r152
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  JumpIfFalse  r147, L6
  Const        r153, "note"
  Index        r154, r49, r153
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r155, "(co-production)"
  In           r156, r155, r154
  Move         r157, r156
  JumpIfTrue   r157, L7
  Const        r158, "note"
  Index        r159, r49, r158
  Const        r160, "(presents)"
  In           r161, r160, r159
  Move         r157, r161
L7:
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Move         r147, r157
L6:
  // where ct.kind == "production companies" &&
  JumpIfFalse  r147, L5
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r162, "note"
  Const        r163, "note"
  Index        r164, r49, r163
  Const        r165, "title"
  Const        r166, "title"
  Index        r167, r77, r166
  Const        r168, "year"
  Const        r169, "production_year"
  Index        r170, r77, r169
  Move         r171, r162
  Move         r172, r164
  Move         r173, r165
  Move         r174, r167
  Move         r175, r168
  Move         r176, r170
  MakeMap      r177, 3, r171
  // from ct in company_type
  Append       r178, r5, r177
  Move         r5, r178
L5:
  // join it in info_type on it.id == mi.info_type_id
  Const        r179, 1
  Add          r129, r129, r179
  Jump         L8
L4:
  // join mi in movie_info_idx on mi.movie_id == t.id
  Const        r180, 1
  Add          r101, r101, r180
  Jump         L9
L3:
  // join t in title on t.id == mc.movie_id
  Const        r181, 1
  Add          r73, r73, r181
  Jump         L10
L2:
  // join mc in movie_companies on ct.id == mc.company_type_id
  Const        r182, 1
  Add          r45, r45, r182
  Jump         L11
L1:
  // from ct in company_type
  Const        r183, 1
  AddInt       r22, r22, r183
  Jump         L12
L0:
  // production_note: min(from r in filtered select r.note),
  Const        r184, "production_note"
  Const        r185, []
  Const        r186, "note"
  IterPrep     r187, r5
  Len          r188, r187
  Const        r190, 0
  Move         r189, r190
L14:
  LessInt      r191, r189, r188
  JumpIfFalse  r191, L13
  Index        r192, r187, r189
  Move         r193, r192
  Const        r194, "note"
  Index        r195, r193, r194
  Append       r196, r185, r195
  Move         r185, r196
  Const        r197, 1
  AddInt       r189, r189, r197
  Jump         L14
L13:
  Min          r198, r185
  // movie_title: min(from r in filtered select r.title),
  Const        r199, "movie_title"
  Const        r200, []
  Const        r201, "title"
  IterPrep     r202, r5
  Len          r203, r202
  Const        r205, 0
  Move         r204, r205
L16:
  LessInt      r206, r204, r203
  JumpIfFalse  r206, L15
  Index        r207, r202, r204
  Move         r193, r207
  Const        r208, "title"
  Index        r209, r193, r208
  Append       r210, r200, r209
  Move         r200, r210
  Const        r211, 1
  AddInt       r204, r204, r211
  Jump         L16
L15:
  Min          r212, r200
  // movie_year: min(from r in filtered select r.year)
  Const        r213, "movie_year"
  Const        r214, []
  Const        r215, "year"
  IterPrep     r216, r5
  Len          r217, r216
  Const        r219, 0
  Move         r218, r219
L18:
  LessInt      r220, r218, r217
  JumpIfFalse  r220, L17
  Index        r221, r216, r218
  Move         r193, r221
  Const        r222, "year"
  Index        r223, r193, r222
  Append       r224, r214, r223
  Move         r214, r224
  Const        r225, 1
  AddInt       r218, r218, r225
  Jump         L18
L17:
  Min          r226, r214
  // production_note: min(from r in filtered select r.note),
  Move         r227, r184
  Move         r228, r198
  // movie_title: min(from r in filtered select r.title),
  Move         r229, r199
  Move         r230, r212
  // movie_year: min(from r in filtered select r.year)
  Move         r231, r213
  Move         r232, r226
  // let result = {
  MakeMap      r233, 3, r227
  // json([result])
  Move         r234, r233
  MakeList     r235, 1, r234
  JSON         r235
  // expect result == {
  Const        r236, {"movie_title": "Good Movie", "movie_year": 1995, "production_note": "ACME (co-production)"}
  Equal        r237, r233, r236
  Expect       r237
  Return       r0
