func main (regs=34)
L2:
  // let company_type = [
  Const        r0, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let info_type = [
  Const        r1, [{"id": 10, "info": "top 250 rank"}, {"id": 20, "info": "bottom 10 rank"}]
L9:
  // let title = [
  Const        r2, [{"id": 100, "production_year": 1995, "title": "Good Movie"}, {"id": 200, "production_year": 2000, "title": "Bad Movie"}]
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (co-production)"}, {"company_type_id": 1, "movie_id": 200, "note": "MGM (as Metro-Goldwyn-Mayer Pictures)"}]
L13:
  // let movie_info_idx = [
  Const        r4, [{"info_type_id": 10, "movie_id": 100}, {"info_type_id": 20, "movie_id": 200}]
L0:
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // it.info == "top 250 rank" &&
  Const        r7, "info"
L3:
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r8, "note"
  Const        r9, "contains"
L7:
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r10, "note"
L8:
  Const        r11, "contains"
L5:
  Const        r12, "note"
  Const        r13, "contains"
L12:
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r14, "note"
L11:
  Const        r15, "note"
L16:
  Const        r16, "title"
L4:
  Const        r17, "title"
L1:
  Const        r18, "year"
L10:
  Const        r19, "production_year"
  // from ct in company_type
  IterPrep     r20, r0
L6:
  Len          r21, r20
  Const        r6, 0
  LessInt      r7, r6, r21
L18:
  JumpIfFalse  r7, L0
L14:
  Index        r8, r20, r6
  // join mc in movie_companies on ct.id == mc.company_type_id
  IterPrep     r9, r3
  Len          r10, r9
L15:
  Const        r11, "id"
  Const        r12, "company_type_id"
  // where ct.kind == "production companies" &&
  Const        r13, "kind"
  // it.info == "top 250 rank" &&
  Const        r14, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r15, "note"
  Const        r16, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r17, "note"
  Const        r18, "contains"
  Const        r19, "note"
  Const        r21, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r7, "note"
  Const        r20, "note"
  Const        r3, "title"
  Const        r11, "title"
  Const        r12, "year"
  Const        r13, "production_year"
  // join mc in movie_companies on ct.id == mc.company_type_id
  Const        r14, 0
  LessInt      r15, r14, r10
  JumpIfFalse  r15, L1
  Index        r16, r9, r14
  Const        r17, "id"
  Index        r18, r8, r17
  Const        r19, "company_type_id"
  Index        r21, r16, r19
  Equal        r7, r18, r21
  JumpIfFalse  r7, L2
  // join t in title on t.id == mc.movie_id
  IterPrep     r20, r2
  Len          r3, r20
  Const        r11, "id"
  Const        r12, "movie_id"
  // where ct.kind == "production companies" &&
  Const        r13, "kind"
  // it.info == "top 250 rank" &&
  Const        r10, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r15, "note"
  Const        r9, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r17, "note"
  Const        r19, "contains"
  Const        r18, "note"
  Const        r21, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r7, "note"
  Const        r2, "note"
  Const        r11, "title"
  Const        r12, "title"
  Const        r13, "year"
  Const        r10, "production_year"
  // join t in title on t.id == mc.movie_id
  Const        r15, 0
  LessInt      r9, r15, r3
  JumpIfFalse  r9, L2
  Index        r17, r20, r15
  Const        r19, "id"
  Index        r18, r17, r19
  Const        r21, "movie_id"
  Index        r7, r16, r21
  Equal        r2, r18, r7
  JumpIfFalse  r2, L3
  // join mi in movie_info_idx on mi.movie_id == t.id
  IterPrep     r11, r4
  Len          r12, r11
  Const        r13, "movie_id"
  Const        r10, "id"
  // where ct.kind == "production companies" &&
  Const        r3, "kind"
  // it.info == "top 250 rank" &&
  Const        r9, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r20, "note"
  Const        r19, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r21, "note"
  Const        r18, "contains"
  Const        r7, "note"
  Const        r2, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r4, "note"
  Const        r13, "note"
  Const        r10, "title"
  Const        r3, "title"
  Const        r9, "year"
  Const        r20, "production_year"
  // join mi in movie_info_idx on mi.movie_id == t.id
  Const        r19, 0
  LessInt      r21, r19, r12
  JumpIfFalse  r21, L3
  Index        r18, r11, r19
  Const        r7, "movie_id"
  Index        r2, r18, r7
  Const        r4, "id"
  Index        r13, r17, r4
  Equal        r10, r2, r13
  JumpIfFalse  r10, L4
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r3, r1
  Len          r9, r3
  Const        r20, "id"
  Const        r12, "info_type_id"
  // where ct.kind == "production companies" &&
  Const        r21, "kind"
  // it.info == "top 250 rank" &&
  Const        r11, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r7, "note"
  Const        r4, "contains"
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r2, "note"
  Const        r13, "contains"
  Const        r10, "note"
  Const        r1, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r20, "note"
  Const        r12, "note"
  Const        r21, "title"
  Const        r11, "title"
  Const        r7, "year"
  Const        r4, "production_year"
  // join it in info_type on it.id == mi.info_type_id
  Const        r2, 0
  LessInt      r13, r2, r9
  JumpIfFalse  r13, L4
  Index        r10, r3, r2
  Const        r1, "id"
  Index        r20, r10, r1
  Const        r12, "info_type_id"
  Index        r21, r18, r12
  Equal        r11, r20, r21
  JumpIfFalse  r11, L5
  // where ct.kind == "production companies" &&
  Const        r7, "kind"
  Index        r4, r8, r7
  Const        r9, "production companies"
  Equal        r13, r4, r9
  // it.info == "top 250 rank" &&
  Const        r3, "info"
  Index        r1, r10, r3
  Const        r18, "top 250 rank"
  Equal        r12, r1, r18
  // where ct.kind == "production companies" &&
  Move         r20, r13
  JumpIfFalse  r20, L6
  // it.info == "top 250 rank" &&
  Move         r21, r12
  JumpIfFalse  r21, L7
  Const        r11, "note"
  Index        r8, r16, r11
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r7, "(as Metro-Goldwyn-Mayer Pictures)"
  In           r4, r7, r8
  Not          r9, r4
  JumpIfFalse  r9, L8
  Const        r10, "note"
  Index        r3, r16, r10
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r1, "(co-production)"
  In           r18, r1, r3
  JumpIfTrue   r18, L8
  Const        r13, "note"
  Index        r20, r16, r13
  Const        r12, "(presents)"
  In           r9, r12, r20
  // where ct.kind == "production companies" &&
  JumpIfFalse  r9, L5
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r21, "note"
  Const        r11, "note"
  Index        r8, r16, r11
  Const        r7, "title"
  Const        r4, "title"
  Index        r10, r17, r4
  Const        r3, "year"
  Const        r1, "production_year"
  Index        r18, r17, r1
  Move         r22, r21
  Move         r23, r8
  Move         r24, r7
  Move         r25, r10
  Move         r26, r3
  Move         r27, r18
  MakeMap      r13, 3, r22
  // from ct in company_type
  Append       r5, r5, r13
  // join it in info_type on it.id == mi.info_type_id
  Const        r9, 1
  Add          r2, r2, r9
  Jump         L9
  // join mi in movie_info_idx on mi.movie_id == t.id
  Const        r20, 1
  Add          r19, r19, r20
  Jump         L10
  // join t in title on t.id == mc.movie_id
  Const        r12, 1
  Add          r15, r15, r12
  Jump         L11
  // join mc in movie_companies on ct.id == mc.company_type_id
  Const        r16, 1
  Add          r14, r14, r16
  Jump         L12
  // from ct in company_type
  Const        r11, 1
  AddInt       r6, r6, r11
  Jump         L13
  // production_note: min(from r in filtered select r.note),
  Const        r17, "production_note"
  Const        r1, []
  Const        r21, "note"
  IterPrep     r8, r5
  Len          r7, r8
  Const        r10, 0
  LessInt      r3, r10, r7
  JumpIfFalse  r3, L12
  Index        r18, r8, r10
  Const        r22, "note"
  Index        r23, r18, r22
  Append       r1, r1, r23
  Const        r24, 1
  AddInt       r10, r10, r24
  Jump         L14
  Min          r26, r1
  // movie_title: min(from r in filtered select r.title),
  Const        r27, "movie_title"
  Const        r13, []
  Const        r2, "title"
  IterPrep     r25, r5
  Len          r9, r25
  Const        r19, 0
  LessInt      r20, r19, r9
  JumpIfFalse  r20, L15
  Index        r18, r25, r19
  Const        r15, "title"
  Index        r12, r18, r15
  Append       r13, r13, r12
  Const        r14, 1
  AddInt       r19, r19, r14
  Jump         L16
  Min          r6, r13
  // movie_year: min(from r in filtered select r.year)
  Const        r11, "movie_year"
  Const        r4, []
  Const        r21, "year"
  IterPrep     r7, r5
  Len          r3, r7
  Const        r16, 0
  LessInt      r8, r16, r3
  JumpIfFalse  r8, L17
  Index        r18, r7, r16
  Const        r22, "year"
  Index        r23, r18, r22
  Append       r4, r4, r23
  Const        r10, 1
  AddInt       r16, r16, r10
  Jump         L18
L17:
  Min          r1, r4
  // production_note: min(from r in filtered select r.note),
  Move         r28, r17
  Move         r29, r26
  // movie_title: min(from r in filtered select r.title),
  Move         r30, r27
  Move         r31, r6
  // movie_year: min(from r in filtered select r.year)
  Move         r32, r11
  Move         r33, r1
  // let result = {
  MakeMap      r2, 3, r28
  // json([result])
  Move         r24, r2
  MakeList     r25, 1, r24
  JSON         r25
  // expect result == {
  Const        r9, {"movie_title": "Good Movie", "movie_year": 1995, "production_note": "ACME (co-production)"}
  Equal        r20, r2, r9
  Expect       r20
  Return       r0
