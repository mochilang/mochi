func main (regs=39)
  // let company_type = [
  Const        r0, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
L2:
  // let info_type = [
  Const        r1, [{"id": 10, "info": "top 250 rank"}, {"id": 20, "info": "bottom 10 rank"}]
  // let title = [
  Const        r2, [{"id": 100, "production_year": 1995, "title": "Good Movie"}, {"id": 200, "production_year": 2000, "title": "Bad Movie"}]
L8:
  // let movie_companies = [
  Const        r3, [{"company_type_id": 1, "movie_id": 100, "note": "ACME (co-production)"}, {"company_type_id": 1, "movie_id": 200, "note": "MGM (as Metro-Goldwyn-Mayer Pictures)"}]
  // let movie_info_idx = [
  Const        r4, [{"info_type_id": 10, "movie_id": 100}, {"info_type_id": 20, "movie_id": 200}]
  // from ct in company_type
  Const        r5, []
  // where ct.kind == "production companies" &&
  Const        r6, "kind"
  // it.info == "top 250 rank" &&
  Const        r7, "info"
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r8, "note"
  Const        r9, "contains"
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r9, "title"
  Const        r10, "year"
L1:
  Const        r11, "production_year"
L4:
  // from ct in company_type
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L9:
  Move         r15, r14
L6:
  LessInt      r16, r15, r13
L3:
  JumpIfFalse  r16, L0
L5:
  Index        r13, r12, r15
  Move         r12, r13
  // join mc in movie_companies on ct.id == mc.company_type_id
  IterPrep     r13, r3
L7:
  Len          r3, r13
  Const        r17, "id"
L0:
  Const        r18, "company_type_id"
  Move         r19, r14
  LessInt      r20, r19, r3
  JumpIfFalse  r20, L1
  Index        r3, r13, r19
  Move         r20, r3
  Index        r13, r12, r17
  Index        r21, r20, r18
  Equal        r18, r13, r21
  JumpIfFalse  r18, L2
  // join t in title on t.id == mc.movie_id
  IterPrep     r13, r2
  Len          r21, r13
L11:
  Const        r18, "movie_id"
  Move         r2, r14
  LessInt      r22, r2, r21
  JumpIfFalse  r22, L2
  Index        r21, r13, r2
  Move         r22, r21
  Index        r13, r22, r17
  Index        r21, r20, r18
  Equal        r23, r13, r21
  JumpIfFalse  r23, L3
  // join mi in movie_info_idx on mi.movie_id == t.id
  IterPrep     r21, r4
  Len          r23, r21
  Move         r4, r14
  LessInt      r24, r4, r23
  JumpIfFalse  r24, L3
  Index        r23, r21, r4
  Move         r24, r23
  Index        r21, r24, r18
  Index        r23, r22, r17
  Equal        r18, r21, r23
  JumpIfFalse  r18, L4
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r21, r1
  Len          r23, r21
  Const        r1, "info_type_id"
  Move         r25, r14
  LessInt      r26, r25, r23
  JumpIfFalse  r26, L4
  Index        r23, r21, r25
  Move         r26, r23
  Index        r21, r26, r17
  Index        r23, r24, r1
  Equal        r17, r21, r23
  JumpIfFalse  r17, L5
  // where ct.kind == "production companies" &&
  Index        r24, r12, r6
  Const        r1, "production companies"
  Equal        r21, r24, r1
  // it.info == "top 250 rank" &&
  Index        r23, r26, r7
  Const        r17, "top 250 rank"
  Equal        r6, r23, r17
  // where ct.kind == "production companies" &&
  Move         r12, r21
  JumpIfFalse  r12, L6
  Move         r12, r6
  // it.info == "top 250 rank" &&
  JumpIfFalse  r12, L6
  Index        r24, r20, r8
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Const        r7, "(as Metro-Goldwyn-Mayer Pictures)"
  In           r26, r7, r24
  Not          r23, r26
  // it.info == "top 250 rank" &&
  Move         r12, r23
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  JumpIfFalse  r12, L6
  Index        r17, r20, r8
  // (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))
  Const        r21, "(co-production)"
  In           r6, r21, r17
  Move         r24, r6
  JumpIfTrue   r24, L7
  Index        r7, r20, r8
  Const        r26, "(presents)"
  In           r23, r26, r7
  Move         r24, r23
  // (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) &&
  Move         r12, r24
  // where ct.kind == "production companies" &&
  JumpIfFalse  r12, L5
  // select { note: mc.note, title: t.title, year: t.production_year }
  Const        r17, "note"
  Index        r21, r20, r8
  Const        r6, "title"
  Index        r12, r22, r9
  Const        r24, "year"
  Index        r7, r22, r11
  Move         r27, r17
  Move         r28, r21
  Move         r29, r6
  Move         r30, r12
  Move         r31, r24
  Move         r32, r7
  MakeMap      r26, 3, r27
  // from ct in company_type
  Append       r23, r5, r26
  Move         r5, r23
  // join it in info_type on it.id == mi.info_type_id
  Const        r20, 1
  Add          r25, r25, r20
  Jump         L2
  // join mi in movie_info_idx on mi.movie_id == t.id
  Add          r4, r4, r20
  Jump         L3
  // join t in title on t.id == mc.movie_id
  Add          r2, r2, r20
  Jump         L4
  // join mc in movie_companies on ct.id == mc.company_type_id
  Add          r19, r19, r20
  Jump         L8
  // from ct in company_type
  AddInt       r15, r15, r20
  Jump         L9
  // production_note: min(from r in filtered select r.note),
  Const        r11, "production_note"
  Const        r22, []
  IterPrep     r17, r5
  Len          r21, r17
  Move         r6, r14
  LessInt      r12, r6, r21
  JumpIfFalse  r12, L10
  Index        r24, r17, r6
  Move         r7, r24
  Index        r27, r7, r8
  Append       r28, r22, r27
  Move         r22, r28
  AddInt       r6, r6, r20
  Jump         L11
L10:
  Min          r29, r22
  // movie_title: min(from r in filtered select r.title),
  Const        r30, "movie_title"
  Const        r31, []
  IterPrep     r32, r5
  Len          r26, r32
  Move         r23, r14
L13:
  LessInt      r15, r23, r26
  JumpIfFalse  r15, L12
  Index        r16, r32, r23
  Move         r7, r16
  Index        r19, r7, r9
  Append       r3, r31, r19
  Move         r31, r3
  AddInt       r23, r23, r20
  Jump         L13
L12:
  Min          r2, r31
  // movie_year: min(from r in filtered select r.year)
  Const        r13, "movie_year"
  Const        r4, []
  IterPrep     r18, r5
  Len          r25, r18
  Move         r1, r14
L15:
  LessInt      r21, r1, r25
  JumpIfFalse  r21, L14
  Index        r12, r18, r1
  Move         r7, r12
  Index        r17, r7, r10
  Append       r24, r4, r17
  Move         r4, r24
  AddInt       r1, r1, r20
  Jump         L15
L14:
  Min          r8, r4
  // production_note: min(from r in filtered select r.note),
  Move         r33, r11
  Move         r34, r29
  // movie_title: min(from r in filtered select r.title),
  Move         r35, r30
  Move         r36, r2
  // movie_year: min(from r in filtered select r.year)
  Move         r37, r13
  Move         r38, r8
  // let result = {
  MakeMap      r6, 3, r33
  // json([result])
  Move         r27, r6
  MakeList     r28, 1, r27
  JSON         r28
  // expect result == {
  Const        r22, {"movie_title": "Good Movie", "movie_year": 1995, "production_note": "ACME (co-production)"}
  Equal        r26, r6, r22
  Expect       r26
  Return       r0
