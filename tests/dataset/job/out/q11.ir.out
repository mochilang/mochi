func main (regs=51)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "Best Film Co"}, {"country_code": "[de]", "id": 2, "name": "Warner Studios"}, {"country_code": "[pl]", "id": 3, "name": "Polish Films"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
L8:
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "thriller"}]
L7:
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follow-up"}, {"id": 2, "link": "follows from"}, {"id": 3, "link": "remake"}]
L17:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}, {"company_id": 3, "company_type_id": 1, "movie_id": 30, "note": nil}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
L13:
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}, {"link_type_id": 3, "movie_id": 30}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1960, "title": "Alpha"}, {"id": 20, "production_year": 1970, "title": "Beta"}, {"id": 30, "production_year": 1985, "title": "Polish Movie"}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code != "[pl]" &&
  Const        r9, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r10, "name"
  Const        r11, "contains"
  // ct.kind == "production companies" &&
  Const        r11, "kind"
  // k.keyword == "sequel" &&
  Const        r12, "keyword"
  // lt.link.contains("follow") &&
  Const        r13, "link"
  // mc.note == null &&
  Const        r14, "note"
L10:
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r15, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r16, "movie_id"
  // select { company: cn.name, link: lt.link, title: t.title }
  Const        r17, "company"
  Const        r18, "title"
L16:
  // from cn in company_name
  IterPrep     r19, r0
  Len          r20, r19
L9:
  Const        r21, 0
L18:
  Move         r22, r21
  LessInt      r23, r22, r20
L11:
  JumpIfFalse  r23, L0
  Index        r20, r19, r22
  Move         r19, r20
L14:
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r20, r4
  Len          r4, r20
  Const        r24, "company_id"
L15:
  Const        r25, "id"
  Move         r26, r21
  LessInt      r27, r26, r4
  JumpIfFalse  r27, L1
  Index        r4, r20, r26
L12:
  Move         r27, r4
  Index        r20, r27, r24
  Index        r24, r19, r25
  Equal        r28, r20, r24
  JumpIfFalse  r28, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r20, r1
  Len          r24, r20
  Const        r28, "company_type_id"
  Move         r1, r21
  LessInt      r29, r1, r24
  JumpIfFalse  r29, L2
  Index        r24, r20, r1
  Move         r29, r24
  Index        r20, r29, r25
  Index        r24, r27, r28
  Equal        r28, r20, r24
  JumpIfFalse  r28, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r24, r7
  Len          r28, r24
  Move         r7, r21
  LessInt      r30, r7, r28
  JumpIfFalse  r30, L3
  Index        r28, r24, r7
  Move         r30, r28
  Index        r24, r30, r25
  Index        r28, r27, r16
  Equal        r31, r24, r28
  JumpIfFalse  r31, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r24, r5
  Len          r28, r24
  Move         r5, r21
  LessInt      r32, r5, r28
  JumpIfFalse  r32, L4
  Index        r28, r24, r5
  Move         r32, r28
  Index        r24, r32, r16
  Index        r28, r30, r25
  Equal        r33, r24, r28
  JumpIfFalse  r33, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r24, r2
  Len          r28, r24
  Const        r33, "keyword_id"
  Move         r2, r21
  LessInt      r34, r2, r28
  JumpIfFalse  r34, L5
  Index        r34, r24, r2
  Move         r24, r34
  Index        r34, r24, r25
  Index        r35, r32, r33
  Equal        r33, r34, r35
  JumpIfFalse  r33, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r34, r6
  Len          r35, r34
  Move         r33, r21
  LessInt      r6, r33, r35
  JumpIfFalse  r6, L6
  Index        r35, r34, r33
  Move         r34, r35
  Index        r35, r34, r16
  Index        r36, r30, r25
  Equal        r37, r35, r36
  JumpIfFalse  r37, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r35, r3
  Len          r36, r35
  Const        r37, "link_type_id"
  Move         r3, r21
  LessInt      r38, r3, r36
  JumpIfFalse  r38, L7
  Index        r36, r35, r3
  Move         r38, r36
  Index        r35, r38, r25
  Index        r25, r34, r37
  Equal        r37, r35, r25
  JumpIfFalse  r37, L8
  // where cn.country_code != "[pl]" &&
  Index        r35, r19, r9
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r25, r30, r15
  Const        r37, 1950
  LessEq       r9, r37, r25
  Index        r25, r30, r15
  Const        r37, 2000
  LessEq       r15, r25, r37
  // where cn.country_code != "[pl]" &&
  Const        r25, "[pl]"
  NotEqual     r37, r35, r25
  // ct.kind == "production companies" &&
  Index        r35, r29, r11
  Const        r11, "production companies"
  Equal        r29, r35, r11
  // k.keyword == "sequel" &&
  Index        r35, r24, r12
  Const        r11, "sequel"
  Equal        r12, r35, r11
  // mc.note == null &&
  Index        r24, r27, r14
  Const        r35, nil
  Equal        r11, r24, r35
  // ml.movie_id == mk.movie_id &&
  Index        r14, r34, r16
  Index        r24, r32, r16
  Equal        r35, r14, r24
  // ml.movie_id == mc.movie_id &&
  Index        r14, r34, r16
  Index        r24, r27, r16
  Equal        r34, r14, r24
  // mk.movie_id == mc.movie_id
  Index        r14, r32, r16
  Index        r24, r27, r16
  Equal        r32, r14, r24
  // where cn.country_code != "[pl]" &&
  Move         r16, r37
  JumpIfFalse  r16, L9
  Index        r27, r19, r10
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r14, "Film"
  In           r24, r14, r27
  Move         r37, r24
  JumpIfTrue   r37, L10
  Index        r27, r19, r10
  Const        r14, "Warner"
  In           r24, r14, r27
  Move         r37, r24
  // where cn.country_code != "[pl]" &&
  Move         r16, r37
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  JumpIfFalse  r16, L9
  Move         r16, r29
  // ct.kind == "production companies" &&
  JumpIfFalse  r16, L9
  Move         r16, r12
  // k.keyword == "sequel" &&
  JumpIfFalse  r16, L9
  Index        r29, r38, r13
  // lt.link.contains("follow") &&
  Const        r12, "follow"
  In           r37, r12, r29
  // k.keyword == "sequel" &&
  Move         r16, r37
  // lt.link.contains("follow") &&
  JumpIfFalse  r16, L9
  Move         r16, r11
  // mc.note == null &&
  JumpIfFalse  r16, L9
  Move         r16, r9
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  JumpIfFalse  r16, L9
  Move         r16, r15
  JumpIfFalse  r16, L9
  Move         r16, r35
  // ml.movie_id == mk.movie_id &&
  JumpIfFalse  r16, L9
  Move         r16, r34
  // ml.movie_id == mc.movie_id &&
  JumpIfFalse  r16, L9
  Move         r16, r32
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r16, L8
  // select { company: cn.name, link: lt.link, title: t.title }
  Const        r27, "company"
  Index        r14, r19, r10
  Const        r24, "link"
  Index        r9, r38, r13
  Const        r15, "title"
  Index        r11, r30, r18
  Move         r39, r27
  Move         r40, r14
  Move         r41, r24
  Move         r42, r9
  Move         r43, r15
  Move         r44, r11
  MakeMap      r35, 3, r39
  // from cn in company_name
  Append       r34, r8, r35
  Move         r8, r34
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r32, 1
  Add          r3, r3, r32
  Jump         L11
  // join ml in movie_link on ml.movie_id == t.id
  Add          r33, r33, r32
  Jump         L12
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r2, r2, r32
  Jump         L13
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r5, r5, r32
  Jump         L14
L4:
  // join t in title on t.id == mc.movie_id
  Add          r7, r7, r32
  Jump         L15
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r1, r1, r32
  Jump         L16
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Add          r26, r26, r32
  Jump         L17
L1:
  // from cn in company_name
  AddInt       r22, r22, r32
  Jump         L18
L0:
  // from_company: min(from x in matches select x.company),
  Const        r16, "from_company"
  Const        r29, []
  IterPrep     r12, r8
  Len          r37, r12
  Move         r10, r21
L20:
  LessInt      r19, r10, r37
  JumpIfFalse  r19, L19
  Index        r38, r12, r10
  Move         r30, r38
  Index        r27, r30, r17
  Append       r14, r29, r27
  Move         r29, r14
  AddInt       r10, r10, r32
  Jump         L20
L19:
  Min          r24, r29
  // movie_link_type: min(from x in matches select x.link),
  Const        r9, "movie_link_type"
  Const        r15, []
  IterPrep     r11, r8
  Len          r39, r11
  Move         r40, r21
L22:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L21
  Index        r42, r11, r40
  Move         r30, r42
  Index        r43, r30, r13
  Append       r44, r15, r43
  Move         r15, r44
  AddInt       r40, r40, r32
  Jump         L22
L21:
  Min          r35, r15
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Const        r34, "non_polish_sequel_movie"
  Const        r22, []
  IterPrep     r23, r8
  Len          r26, r23
  Move         r4, r21
L24:
  LessInt      r1, r4, r26
  JumpIfFalse  r1, L23
  Index        r20, r23, r4
  Move         r30, r20
  Index        r7, r30, r18
  Append       r31, r22, r7
  Move         r22, r31
  AddInt       r4, r4, r32
  Jump         L24
L23:
  Min          r5, r22
  // from_company: min(from x in matches select x.company),
  Move         r45, r16
  Move         r46, r24
  // movie_link_type: min(from x in matches select x.link),
  Move         r47, r9
  Move         r48, r35
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Move         r49, r34
  Move         r50, r5
  // {
  MakeMap      r28, 3, r45
  Move         r2, r28
  // let result = [
  MakeList     r33, 1, r2
  // json(result)
  JSON         r33
  // expect result == [
  Const        r6, [{"from_company": "Best Film Co", "movie_link_type": "follow-up", "non_polish_sequel_movie": "Alpha"}]
  Equal        r3, r33, r6
  Expect       r3
  Return       r0
