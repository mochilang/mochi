func main (regs=199)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "Best Film Co"}, {"country_code": "[de]", "id": 2, "name": "Warner Studios"}, {"country_code": "[pl]", "id": 3, "name": "Polish Films"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "thriller"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follow-up"}, {"id": 2, "link": "follows from"}, {"id": 3, "link": "remake"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}, {"company_id": 3, "company_type_id": 1, "movie_id": 30, "note": nil}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}, {"link_type_id": 3, "movie_id": 30}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1960, "title": "Alpha"}, {"id": 20, "production_year": 1970, "title": "Beta"}, {"id": 30, "production_year": 1985, "title": "Polish Movie"}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code != "[pl]" &&
  Const        r9, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r10, "name"
  // ct.kind == "production companies" &&
  Const        r12, "kind"
  // k.keyword == "sequel" &&
  Const        r13, "keyword"
  // lt.link.contains("follow") &&
  Const        r14, "link"
  // mc.note == null &&
  Const        r15, "note"
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r16, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r17, "movie_id"
  // select { company: cn.name, link: lt.link, title: t.title }
  Const        r18, "company"
  Const        r19, "title"
  // from cn in company_name
  IterPrep     r20, r0
  Len          r21, r20
  Const        r23, 0
  Move         r22, r23
L26:
  LessInt      r24, r22, r21
  JumpIfFalse  r24, L0
  Index        r26, r20, r22
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r27, r4
  Len          r28, r27
  Const        r29, "company_id"
  Const        r30, "id"
  Move         r31, r23
L25:
  LessInt      r32, r31, r28
  JumpIfFalse  r32, L1
  Index        r34, r27, r31
  Index        r35, r34, r29
  Index        r36, r26, r30
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r38, r1
  Len          r39, r38
  Const        r40, "company_type_id"
  Move         r41, r23
L24:
  LessInt      r42, r41, r39
  JumpIfFalse  r42, L2
  Index        r44, r38, r41
  Index        r45, r44, r30
  Index        r46, r34, r40
  Equal        r47, r45, r46
  JumpIfFalse  r47, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r48, r7
  Len          r49, r48
  Move         r50, r23
L23:
  LessInt      r51, r50, r49
  JumpIfFalse  r51, L3
  Index        r53, r48, r50
  Index        r54, r53, r30
  Index        r55, r34, r17
  Equal        r56, r54, r55
  JumpIfFalse  r56, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r57, r5
  Len          r58, r57
  Move         r59, r23
L22:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L4
  Index        r62, r57, r59
  Index        r63, r62, r17
  Index        r64, r53, r30
  Equal        r65, r63, r64
  JumpIfFalse  r65, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r66, r2
  Len          r67, r66
  Const        r68, "keyword_id"
  Move         r69, r23
L21:
  LessInt      r70, r69, r67
  JumpIfFalse  r70, L5
  Index        r72, r66, r69
  Index        r73, r72, r30
  Index        r74, r62, r68
  Equal        r75, r73, r74
  JumpIfFalse  r75, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r76, r6
  Len          r77, r76
  Move         r78, r23
L20:
  LessInt      r79, r78, r77
  JumpIfFalse  r79, L6
  Index        r81, r76, r78
  Index        r82, r81, r17
  Index        r83, r53, r30
  Equal        r84, r82, r83
  JumpIfFalse  r84, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r85, r3
  Len          r86, r85
  Const        r87, "link_type_id"
  Move         r88, r23
L19:
  LessInt      r89, r88, r86
  JumpIfFalse  r89, L7
  Index        r91, r85, r88
  Index        r92, r91, r30
  Index        r93, r81, r87
  Equal        r94, r92, r93
  JumpIfFalse  r94, L8
  // where cn.country_code != "[pl]" &&
  Index        r95, r26, r9
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r96, r53, r16
  Const        r97, 1950
  LessEq       r98, r97, r96
  Index        r99, r53, r16
  Const        r100, 2000
  LessEq       r101, r99, r100
  // where cn.country_code != "[pl]" &&
  Const        r102, "[pl]"
  NotEqual     r103, r95, r102
  // ct.kind == "production companies" &&
  Index        r104, r44, r12
  Const        r105, "production companies"
  Equal        r106, r104, r105
  // k.keyword == "sequel" &&
  Index        r107, r72, r13
  Const        r108, "sequel"
  Equal        r109, r107, r108
  // mc.note == null &&
  Index        r110, r34, r15
  Const        r111, nil
  Equal        r112, r110, r111
  // ml.movie_id == mk.movie_id &&
  Index        r113, r81, r17
  Index        r114, r62, r17
  Equal        r115, r113, r114
  // ml.movie_id == mc.movie_id &&
  Index        r116, r81, r17
  Index        r117, r34, r17
  Equal        r118, r116, r117
  // mk.movie_id == mc.movie_id
  Index        r119, r62, r17
  Index        r120, r34, r17
  Equal        r121, r119, r120
  // where cn.country_code != "[pl]" &&
  Move         r122, r103
  JumpIfFalse  r122, L9
  Index        r123, r26, r10
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r124, "Film"
  In           r126, r124, r123
  JumpIfTrue   r126, L9
  Index        r127, r26, r10
  Const        r128, "Warner"
  In           r126, r128, r127
L9:
  Move         r130, r126
  JumpIfFalse  r130, L10
L10:
  // ct.kind == "production companies" &&
  Move         r131, r106
  JumpIfFalse  r131, L11
L11:
  // k.keyword == "sequel" &&
  Move         r132, r109
  JumpIfFalse  r132, L12
  Index        r133, r91, r14
  // lt.link.contains("follow") &&
  Const        r134, "follow"
  In           r136, r134, r133
L12:
  JumpIfFalse  r136, L13
L13:
  // mc.note == null &&
  Move         r137, r112
  JumpIfFalse  r137, L14
L14:
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Move         r138, r98
  JumpIfFalse  r138, L15
L15:
  Move         r139, r101
  JumpIfFalse  r139, L16
L16:
  // ml.movie_id == mk.movie_id &&
  Move         r140, r115
  JumpIfFalse  r140, L17
L17:
  // ml.movie_id == mc.movie_id &&
  Move         r141, r118
  JumpIfFalse  r141, L18
  Move         r141, r121
L18:
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r141, L8
  // select { company: cn.name, link: lt.link, title: t.title }
  Const        r142, "company"
  Index        r143, r26, r10
  Const        r144, "link"
  Index        r145, r91, r14
  Const        r146, "title"
  Index        r147, r53, r19
  Move         r148, r142
  Move         r149, r143
  Move         r150, r144
  Move         r151, r145
  Move         r152, r146
  Move         r153, r147
  MakeMap      r154, 3, r148
  // from cn in company_name
  Append       r8, r8, r154
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r156, 1
  Add          r88, r88, r156
  Jump         L19
L7:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r78, r78, r156
  Jump         L20
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r69, r69, r156
  Jump         L21
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r59, r59, r156
  Jump         L22
L4:
  // join t in title on t.id == mc.movie_id
  Add          r50, r50, r156
  Jump         L23
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r41, r41, r156
  Jump         L24
L2:
  // join mc in movie_companies on mc.company_id == cn.id
  Jump         L25
L1:
  // from cn in company_name
  AddInt       r22, r22, r156
  Jump         L26
L0:
  // from_company: min(from x in matches select x.company),
  Const        r157, "from_company"
  Const        r158, []
  IterPrep     r159, r8
  Len          r160, r159
  Move         r161, r23
L28:
  LessInt      r162, r161, r160
  JumpIfFalse  r162, L27
  Index        r164, r159, r161
  Index        r165, r164, r18
  Append       r158, r158, r165
  AddInt       r161, r161, r156
  Jump         L28
L27:
  Min          r167, r158
  // movie_link_type: min(from x in matches select x.link),
  Const        r168, "movie_link_type"
  Const        r169, []
  IterPrep     r170, r8
  Len          r171, r170
  Move         r172, r23
L30:
  LessInt      r173, r172, r171
  JumpIfFalse  r173, L29
  Index        r164, r170, r172
  Index        r175, r164, r14
  Append       r169, r169, r175
  AddInt       r172, r172, r156
  Jump         L30
L29:
  Min          r177, r169
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Const        r178, "non_polish_sequel_movie"
  Const        r179, []
  IterPrep     r180, r8
  Len          r181, r180
  Move         r182, r23
L32:
  LessInt      r183, r182, r181
  JumpIfFalse  r183, L31
  Index        r164, r180, r182
  Index        r185, r164, r19
  Append       r179, r179, r185
  AddInt       r182, r182, r156
  Jump         L32
L31:
  Min          r187, r179
  // from_company: min(from x in matches select x.company),
  Move         r188, r157
  Move         r189, r167
  // movie_link_type: min(from x in matches select x.link),
  Move         r190, r168
  Move         r191, r177
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Move         r192, r178
  Move         r193, r187
  // {
  MakeMap      r195, 3, r188
  // let result = [
  MakeList     r196, 1, r195
  // json(result)
  JSON         r196
  // expect result == [
  Const        r197, [{"from_company": "Best Film Co", "movie_link_type": "follow-up", "non_polish_sequel_movie": "Alpha"}]
  Equal        r198, r196, r197
  Expect       r198
  Return       r0
