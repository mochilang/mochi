func main (regs=35)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "Best Film Co"}, {"country_code": "[de]", "id": 2, "name": "Warner Studios"}, {"country_code": "[pl]", "id": 3, "name": "Polish Films"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production companies"}, {"id": 2, "kind": "distributors"}]
L4:
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "thriller"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follow-up"}, {"id": 2, "link": "follows from"}, {"id": 3, "link": "remake"}]
L14:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": nil}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": nil}, {"company_id": 3, "company_type_id": 1, "movie_id": 30, "note": nil}]
L15:
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 1, "movie_id": 20}, {"keyword_id": 2, "movie_id": 20}, {"keyword_id": 1, "movie_id": 30}]
L16:
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "movie_id": 10}, {"link_type_id": 2, "movie_id": 20}, {"link_type_id": 3, "movie_id": 30}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1960, "title": "Alpha"}, {"id": 20, "production_year": 1970, "title": "Beta"}, {"id": 30, "production_year": 1985, "title": "Polish Movie"}]
  // from cn in company_name
  Const        r8, []
  // where cn.country_code != "[pl]" &&
  Const        r9, "country_code"
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r10, "name"
L9:
  // ct.kind == "production companies" &&
  Const        r11, "kind"
  // k.keyword == "sequel" &&
  Const        r12, "keyword"
L5:
  // lt.link.contains("follow") &&
  Const        r13, "link"
L11:
  // mc.note == null &&
  Const        r14, "note"
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Const        r15, "production_year"
  // ml.movie_id == mk.movie_id &&
  Const        r16, "movie_id"
L6:
  // select { company: cn.name, link: lt.link, title: t.title }
  Const        r17, "company"
  Const        r18, "title"
  // from cn in company_name
  IterPrep     r19, r0
L17:
  Len          r20, r19
L18:
  Const        r21, 0
  Move         r22, r21
L12:
  LessInt      r23, r22, r20
  JumpIfFalse  r23, L0
L2:
  Index        r23, r19, r22
  // join mc in movie_companies on mc.company_id == cn.id
  IterPrep     r19, r4
  Len          r4, r19
L8:
  Const        r20, "company_id"
L0:
  Const        r24, "id"
  Move         r25, r21
  LessInt      r26, r25, r4
  JumpIfFalse  r26, L1
  Index        r26, r19, r25
L10:
  Index        r25, r26, r20
  Index        r20, r23, r24
  Equal        r19, r25, r20
  JumpIfFalse  r19, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r19, r1
  Len          r1, r19
  Const        r20, "company_type_id"
  Move         r25, r21
  LessInt      r4, r25, r1
  JumpIfFalse  r4, L2
  Index        r1, r19, r25
  Index        r19, r1, r24
  Index        r27, r26, r20
  Equal        r20, r19, r27
  JumpIfFalse  r20, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r20, r7
  Len          r7, r20
  Move         r27, r21
  LessInt      r19, r27, r7
  JumpIfFalse  r19, L3
  Index        r19, r20, r27
  Index        r20, r19, r24
  Index        r7, r26, r16
  Equal        r28, r20, r7
  JumpIfFalse  r28, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r28, r5
  Len          r5, r28
  Move         r7, r21
  LessInt      r20, r7, r5
  JumpIfFalse  r20, L4
  Index        r20, r28, r7
  Index        r28, r20, r16
  Index        r5, r19, r24
  Equal        r29, r28, r5
  JumpIfFalse  r29, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r29, r2
  Len          r2, r29
  Const        r5, "keyword_id"
  Move         r28, r21
  LessInt      r30, r28, r2
  JumpIfFalse  r30, L5
  Index        r30, r29, r28
  Index        r29, r30, r24
  Index        r2, r20, r5
  Equal        r5, r29, r2
  JumpIfFalse  r5, L6
  // join ml in movie_link on ml.movie_id == t.id
  IterPrep     r5, r6
  Len          r6, r5
  Move         r2, r21
  LessInt      r31, r2, r6
  JumpIfFalse  r31, L6
  Index        r31, r5, r2
  Index        r5, r31, r16
  Index        r6, r19, r24
  Equal        r32, r5, r6
  JumpIfFalse  r32, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r32, r3
  Len          r3, r32
  Const        r5, "link_type_id"
  Move         r33, r21
  LessInt      r34, r33, r3
  JumpIfFalse  r34, L7
  Index        r34, r32, r33
  Index        r32, r34, r24
  Index        r24, r31, r5
  Equal        r5, r32, r24
  JumpIfFalse  r5, L8
  // where cn.country_code != "[pl]" &&
  Index        r24, r23, r9
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Index        r9, r19, r15
  Const        r32, 1950
  LessEq       r3, r32, r9
  Index        r32, r19, r15
  Const        r15, 2000
  LessEq       r9, r32, r15
  // where cn.country_code != "[pl]" &&
  Const        r15, "[pl]"
  NotEqual     r32, r24, r15
  // ct.kind == "production companies" &&
  Index        r15, r1, r11
  Const        r1, "production companies"
  Equal        r11, r15, r1
  // k.keyword == "sequel" &&
  Index        r1, r30, r12
  Const        r30, "sequel"
  Equal        r12, r1, r30
  // mc.note == null &&
  Index        r30, r26, r14
  Const        r14, nil
  Equal        r1, r30, r14
  // ml.movie_id == mk.movie_id &&
  Index        r14, r31, r16
  Index        r30, r20, r16
  Equal        r15, r14, r30
  // ml.movie_id == mc.movie_id &&
  Index        r30, r31, r16
  Index        r31, r26, r16
  Equal        r14, r30, r31
  // mk.movie_id == mc.movie_id
  Index        r31, r20, r16
  Index        r30, r26, r16
  Equal        r26, r31, r30
  // where cn.country_code != "[pl]" &&
  Move         r30, r32
  JumpIfFalse  r30, L9
  Index        r30, r23, r10
  // (cn.name.contains("Film") || cn.name.contains("Warner")) &&
  Const        r32, "Film"
  In           r31, r32, r30
  JumpIfTrue   r31, L9
  Index        r32, r23, r10
  Const        r30, "Warner"
  In           r31, r30, r32
  Move         r30, r31
  JumpIfFalse  r30, L9
  // ct.kind == "production companies" &&
  Move         r30, r11
  JumpIfFalse  r30, L9
  // k.keyword == "sequel" &&
  Move         r30, r12
  JumpIfFalse  r30, L10
  Index        r30, r34, r13
  // lt.link.contains("follow") &&
  Const        r12, "follow"
  In           r11, r12, r30
  JumpIfFalse  r11, L11
  // mc.note == null &&
  Move         r11, r1
  JumpIfFalse  r11, L9
  // t.production_year >= 1950 && t.production_year <= 2000 &&
  Move         r11, r3
  JumpIfFalse  r11, L12
  Move         r11, r9
  JumpIfFalse  r11, L10
  // ml.movie_id == mk.movie_id &&
  Move         r11, r15
  JumpIfFalse  r11, L13
L13:
  // ml.movie_id == mc.movie_id &&
  Move         r11, r14
  JumpIfFalse  r11, L14
  Move         r11, r26
  // where cn.country_code != "[pl]" &&
  JumpIfFalse  r11, L8
  // select { company: cn.name, link: lt.link, title: t.title }
  Move         r11, r17
  Index        r26, r23, r10
  Move         r23, r13
  Index        r10, r34, r13
  Move         r34, r18
  Index        r14, r19, r18
  Move         r19, r11
  Move         r11, r26
  Move         r26, r23
  Move         r23, r10
  Move         r10, r34
  Move         r34, r14
  MakeMap      r14, 3, r19
  // from cn in company_name
  Append       r8, r8, r14
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r14, 1
  Add          r33, r33, r14
  Jump         L15
L7:
  // join ml in movie_link on ml.movie_id == t.id
  Add          r2, r2, r14
  Jump         L16
  // join k in keyword on k.id == mk.keyword_id
  Add          r28, r28, r14
  Jump         L0
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r7, r7, r14
  Jump         L17
  // join t in title on t.id == mc.movie_id
  Add          r27, r27, r14
  Jump         L15
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r25, r25, r14
  Jump         L14
L1:
  // from cn in company_name
  AddInt       r22, r22, r14
  Jump         L18
  // from_company: min(from x in matches select x.company),
  Const        r5, "from_company"
  Const        r4, []
  IterPrep     r25, r8
  Len          r22, r25
  Move         r33, r21
  LessInt      r6, r33, r22
  JumpIfFalse  r6, L19
  Index        r6, r25, r33
  Index        r25, r6, r17
  Append       r4, r4, r25
  AddInt       r33, r33, r14
  Jump         L2
L19:
  Min          r33, r4
  // movie_link_type: min(from x in matches select x.link),
  Const        r4, "movie_link_type"
  Const        r17, []
  IterPrep     r22, r8
  Len          r2, r22
  Move         r29, r21
L21:
  LessInt      r28, r29, r2
  JumpIfFalse  r28, L20
  Index        r6, r22, r29
  Index        r28, r6, r13
  Append       r17, r17, r28
  AddInt       r29, r29, r14
  Jump         L21
L20:
  Min          r28, r17
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Const        r17, "non_polish_sequel_movie"
  Const        r29, []
  IterPrep     r13, r8
  Len          r8, r13
  Move         r2, r21
L23:
  LessInt      r21, r2, r8
  JumpIfFalse  r21, L22
  Index        r6, r13, r2
  Index        r21, r6, r18
  Append       r29, r29, r21
  AddInt       r2, r2, r14
  Jump         L23
L22:
  Min          r21, r29
  // from_company: min(from x in matches select x.company),
  Move         r29, r5
  Move         r5, r33
  // movie_link_type: min(from x in matches select x.link),
  Move         r33, r4
  Move         r4, r28
  // non_polish_sequel_movie: min(from x in matches select x.title)
  Move         r28, r17
  Move         r25, r21
  // {
  MakeMap      r21, 3, r29
  // let result = [
  MakeList     r28, 1, r21
  // json(result)
  JSON         r28
  // expect result == [
  Const        r21, [{"from_company": "Best Film Co", "movie_link_type": "follow-up", "non_polish_sequel_movie": "Alpha"}]
  Equal        r4, r28, r21
  Expect       r4
  Return       r0
