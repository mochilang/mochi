func main (regs=299)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "US Studio"}, {"country_code": "[gb]", "id": 2, "name": "GB Studio"}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "tv series"}, {"id": 2, "kind": "movie"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follows"}, {"id": 2, "link": "remake of"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 10}, {"company_id": 2, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r5, [{"info": "7.0", "info_type_id": 1, "movie_id": 10}, {"info": "2.5", "info_type_id": 1, "movie_id": 20}]
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "linked_movie_id": 20, "movie_id": 10}]
  // let title = [
  Const        r7, [{"id": 10, "kind_id": 1, "production_year": 2004, "title": "Series A"}, {"id": 20, "kind_id": 1, "production_year": 2006, "title": "Series B"}]
  // from cn1 in company_name
  Const        r8, []
  // where cn1.country_code == "[us]" &&
  Const        r9, "country_code"
  // it1.info == "rating" &&
  Const        r10, "info"
  // kt1.kind == "tv series" &&
  Const        r11, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r12, "link"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r13, "production_year"
  // first_company: cn1.name,
  Const        r14, "first_company"
  Const        r15, "name"
  // second_company: cn2.name,
  Const        r16, "second_company"
  // first_rating: mi_idx1.info,
  Const        r17, "first_rating"
  // second_rating: mi_idx2.info,
  Const        r18, "second_rating"
  // first_movie: t1.title,
  Const        r19, "first_movie"
  Const        r20, "title"
  // second_movie: t2.title
  Const        r21, "second_movie"
  // from cn1 in company_name
  IterPrep     r22, r0
  Len          r23, r22
  Const        r25, 0
  Move         r24, r25
L37:
  LessInt      r26, r24, r23
  JumpIfFalse  r26, L0
  Index        r28, r22, r24
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  IterPrep     r29, r4
  Len          r30, r29
  Const        r31, "id"
  Const        r32, "company_id"
  Move         r33, r25
L36:
  LessInt      r34, r33, r30
  JumpIfFalse  r34, L1
  Index        r36, r29, r33
  Index        r37, r28, r31
  Index        r38, r36, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join t1 in title on t1.id == mc1.movie_id
  IterPrep     r40, r7
  Len          r41, r40
  Const        r42, "movie_id"
  Move         r43, r25
L35:
  LessInt      r44, r43, r41
  JumpIfFalse  r44, L2
  Index        r46, r40, r43
  Index        r47, r46, r31
  Index        r48, r36, r42
  Equal        r49, r47, r48
  JumpIfFalse  r49, L3
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  IterPrep     r50, r5
  Len          r51, r50
  Move         r52, r25
L34:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Index        r56, r55, r42
  Index        r57, r46, r31
  Equal        r58, r56, r57
  JumpIfFalse  r58, L4
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  IterPrep     r59, r1
  Len          r60, r59
  Const        r61, "info_type_id"
  Move         r62, r25
L33:
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L4
  Index        r65, r59, r62
  Index        r66, r65, r31
  Index        r67, r55, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L5
  // join kt1 in kind_type on kt1.id == t1.kind_id
  IterPrep     r69, r2
  Len          r70, r69
  Const        r71, "kind_id"
  Move         r72, r25
L32:
  LessInt      r73, r72, r70
  JumpIfFalse  r73, L5
  Index        r75, r69, r72
  Index        r76, r75, r31
  Index        r77, r46, r71
  Equal        r78, r76, r77
  JumpIfFalse  r78, L6
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r79, r6
  Len          r80, r79
  Move         r81, r25
L31:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r84, r79, r81
  Index        r85, r84, r42
  Index        r86, r46, r31
  Equal        r87, r85, r86
  JumpIfFalse  r87, L7
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r88, r7
  Len          r89, r88
  Const        r90, "linked_movie_id"
  Move         r91, r25
L30:
  LessInt      r92, r91, r89
  JumpIfFalse  r92, L7
  Index        r94, r88, r91
  Index        r95, r94, r31
  Index        r96, r84, r90
  Equal        r97, r95, r96
  JumpIfFalse  r97, L8
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  IterPrep     r98, r5
  Len          r99, r98
  Move         r100, r25
L29:
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L8
  Index        r103, r98, r100
  Index        r104, r103, r42
  Index        r105, r94, r31
  Equal        r106, r104, r105
  JumpIfFalse  r106, L9
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  IterPrep     r107, r1
  Len          r108, r107
  Move         r109, r25
L28:
  LessInt      r110, r109, r108
  JumpIfFalse  r110, L9
  Index        r112, r107, r109
  Index        r113, r112, r31
  Index        r114, r103, r61
  Equal        r115, r113, r114
  JumpIfFalse  r115, L10
  // join kt2 in kind_type on kt2.id == t2.kind_id
  IterPrep     r116, r2
  Len          r117, r116
  Move         r118, r25
L27:
  LessInt      r119, r118, r117
  JumpIfFalse  r119, L10
  Index        r121, r116, r118
  Index        r122, r121, r31
  Index        r123, r94, r71
  Equal        r124, r122, r123
  JumpIfFalse  r124, L11
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  IterPrep     r125, r4
  Len          r126, r125
  Move         r127, r25
L26:
  LessInt      r128, r127, r126
  JumpIfFalse  r128, L11
  Index        r130, r125, r127
  Index        r131, r130, r42
  Index        r132, r94, r31
  Equal        r133, r131, r132
  JumpIfFalse  r133, L12
  // join cn2 in company_name on cn2.id == mc2.company_id
  IterPrep     r134, r0
  Len          r135, r134
  Move         r136, r25
L25:
  LessInt      r137, r136, r135
  JumpIfFalse  r137, L12
  Index        r139, r134, r136
  Index        r140, r139, r31
  Index        r141, r130, r32
  Equal        r142, r140, r141
  JumpIfFalse  r142, L13
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r143, r3
  Len          r144, r143
  Const        r145, "link_type_id"
  Move         r146, r25
L24:
  LessInt      r147, r146, r144
  JumpIfFalse  r147, L13
  Index        r149, r143, r146
  Index        r150, r149, r31
  Index        r151, r84, r145
  Equal        r152, r150, r151
  JumpIfFalse  r152, L14
  // where cn1.country_code == "[us]" &&
  Index        r153, r28, r9
  // mi_idx2.info < "3.0" &&
  Index        r154, r103, r10
  Const        r155, "3.0"
  Less         r156, r154, r155
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Index        r157, r94, r13
  Const        r158, 2005
  LessEq       r159, r158, r157
  Index        r160, r94, r13
  Const        r161, 2008
  LessEq       r162, r160, r161
  // where cn1.country_code == "[us]" &&
  Const        r163, "[us]"
  Equal        r164, r153, r163
  // it1.info == "rating" &&
  Index        r165, r65, r10
  Const        r166, "rating"
  Equal        r167, r165, r166
  // it2.info == "rating" &&
  Index        r168, r112, r10
  Equal        r169, r168, r166
  // kt1.kind == "tv series" &&
  Index        r170, r75, r11
  Const        r171, "tv series"
  Equal        r172, r170, r171
  // kt2.kind == "tv series" &&
  Index        r173, r121, r11
  Equal        r174, r173, r171
  // where cn1.country_code == "[us]" &&
  Move         r175, r164
  JumpIfFalse  r175, L15
L15:
  // it1.info == "rating" &&
  Move         r176, r167
  JumpIfFalse  r176, L16
L16:
  // it2.info == "rating" &&
  Move         r177, r169
  JumpIfFalse  r177, L17
L17:
  // kt1.kind == "tv series" &&
  Move         r178, r172
  JumpIfFalse  r178, L18
L18:
  // kt2.kind == "tv series" &&
  Move         r179, r174
  JumpIfFalse  r179, L19
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Index        r180, r149, r12
  Const        r181, "sequel"
  Equal        r182, r180, r181
  Index        r183, r149, r12
  Const        r184, "follows"
  Equal        r185, r183, r184
  Index        r186, r149, r12
  Const        r187, "followed by"
  Equal        r188, r186, r187
  Move         r189, r182
  JumpIfTrue   r189, L20
L20:
  Move         r190, r185
  JumpIfTrue   r190, L19
L19:
  Move         r191, r188
  JumpIfFalse  r191, L21
L21:
  // mi_idx2.info < "3.0" &&
  Move         r192, r156
  JumpIfFalse  r192, L22
L22:
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Move         r193, r159
  JumpIfFalse  r193, L23
  Move         r193, r162
L23:
  // where cn1.country_code == "[us]" &&
  JumpIfFalse  r193, L14
  // first_company: cn1.name,
  Const        r194, "first_company"
  Index        r195, r28, r15
  // second_company: cn2.name,
  Const        r196, "second_company"
  Index        r197, r139, r15
  // first_rating: mi_idx1.info,
  Const        r198, "first_rating"
  Index        r199, r55, r10
  // second_rating: mi_idx2.info,
  Const        r200, "second_rating"
  Index        r201, r103, r10
  // first_movie: t1.title,
  Const        r202, "first_movie"
  Index        r203, r46, r20
  // second_movie: t2.title
  Const        r204, "second_movie"
  Index        r205, r94, r20
  // first_company: cn1.name,
  Move         r206, r194
  Move         r207, r195
  // second_company: cn2.name,
  Move         r208, r196
  Move         r209, r197
  // first_rating: mi_idx1.info,
  Move         r210, r198
  Move         r211, r199
  // second_rating: mi_idx2.info,
  Move         r212, r200
  Move         r213, r201
  // first_movie: t1.title,
  Move         r214, r202
  Move         r215, r203
  // second_movie: t2.title
  Move         r216, r204
  Move         r217, r205
  // select {
  MakeMap      r218, 6, r206
  // from cn1 in company_name
  Append       r8, r8, r218
L14:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r220, 1
  Add          r146, r146, r220
  Jump         L24
L13:
  // join cn2 in company_name on cn2.id == mc2.company_id
  Add          r136, r136, r220
  Jump         L25
L12:
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Add          r127, r127, r220
  Jump         L26
L11:
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Add          r118, r118, r220
  Jump         L27
L10:
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Add          r109, r109, r220
  Jump         L28
L9:
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Add          r100, r100, r220
  Jump         L29
L8:
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r91, r91, r220
  Jump         L30
L7:
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r81, r81, r220
  Jump         L31
L6:
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Add          r72, r72, r220
  Jump         L32
L5:
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Add          r62, r62, r220
  Jump         L33
L4:
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Add          r52, r52, r220
  Jump         L34
L3:
  // join t1 in title on t1.id == mc1.movie_id
  Add          r43, r43, r220
  Jump         L35
L2:
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Add          r33, r33, r220
  Jump         L36
L1:
  // from cn1 in company_name
  AddInt       r24, r24, r220
  Jump         L37
L0:
  // first_company: min(from r in rows select r.first_company),
  Const        r221, "first_company"
  Const        r222, []
  IterPrep     r223, r8
  Len          r224, r223
  Move         r225, r25
L39:
  LessInt      r226, r225, r224
  JumpIfFalse  r226, L38
  Index        r228, r223, r225
  Index        r229, r228, r14
  Append       r222, r222, r229
  AddInt       r225, r225, r220
  Jump         L39
L38:
  Min          r231, r222
  // second_company: min(from r in rows select r.second_company),
  Const        r232, "second_company"
  Const        r233, []
  IterPrep     r234, r8
  Len          r235, r234
  Move         r236, r25
L41:
  LessInt      r237, r236, r235
  JumpIfFalse  r237, L40
  Index        r228, r234, r236
  Index        r239, r228, r16
  Append       r233, r233, r239
  AddInt       r236, r236, r220
  Jump         L41
L40:
  Min          r241, r233
  // first_rating: min(from r in rows select r.first_rating),
  Const        r242, "first_rating"
  Const        r243, []
  IterPrep     r244, r8
  Len          r245, r244
  Move         r246, r25
L43:
  LessInt      r247, r246, r245
  JumpIfFalse  r247, L42
  Index        r228, r244, r246
  Index        r249, r228, r17
  Append       r243, r243, r249
  AddInt       r246, r246, r220
  Jump         L43
L42:
  Min          r251, r243
  // second_rating: min(from r in rows select r.second_rating),
  Const        r252, "second_rating"
  Const        r253, []
  IterPrep     r254, r8
  Len          r255, r254
  Move         r256, r25
L45:
  LessInt      r257, r256, r255
  JumpIfFalse  r257, L44
  Index        r228, r254, r256
  Index        r259, r228, r18
  Append       r253, r253, r259
  AddInt       r256, r256, r220
  Jump         L45
L44:
  Min          r261, r253
  // first_movie: min(from r in rows select r.first_movie),
  Const        r262, "first_movie"
  Const        r263, []
  IterPrep     r264, r8
  Len          r265, r264
  Move         r266, r25
L47:
  LessInt      r267, r266, r265
  JumpIfFalse  r267, L46
  Index        r228, r264, r266
  Index        r269, r228, r19
  Append       r263, r263, r269
  AddInt       r266, r266, r220
  Jump         L47
L46:
  Min          r271, r263
  // second_movie: min(from r in rows select r.second_movie)
  Const        r272, "second_movie"
  Const        r273, []
  IterPrep     r274, r8
  Len          r275, r274
  Move         r276, r25
L49:
  LessInt      r277, r276, r275
  JumpIfFalse  r277, L48
  Index        r228, r274, r276
  Index        r279, r228, r21
  Append       r273, r273, r279
  AddInt       r276, r276, r220
  Jump         L49
L48:
  Min          r281, r273
  // first_company: min(from r in rows select r.first_company),
  Move         r282, r221
  Move         r283, r231
  // second_company: min(from r in rows select r.second_company),
  Move         r284, r232
  Move         r285, r241
  // first_rating: min(from r in rows select r.first_rating),
  Move         r286, r242
  Move         r287, r251
  // second_rating: min(from r in rows select r.second_rating),
  Move         r288, r252
  Move         r289, r261
  // first_movie: min(from r in rows select r.first_movie),
  Move         r290, r262
  Move         r291, r271
  // second_movie: min(from r in rows select r.second_movie)
  Move         r292, r272
  Move         r293, r281
  // {
  MakeMap      r295, 6, r282
  // let result = [
  MakeList     r296, 1, r295
  // json(result)
  JSON         r296
  // expect result == [
  Const        r297, [{"first_company": "US Studio", "first_movie": "Series A", "first_rating": "7.0", "second_company": "GB Studio", "second_movie": "Series B", "second_rating": "2.5"}]
  Equal        r298, r296, r297
  Expect       r298
  Return       r0
