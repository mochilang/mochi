func main (regs=378)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "US Studio"}, {"country_code": "[gb]", "id": 2, "name": "GB Studio"}]
  Move         r1, r0
  // let info_type = [
  Const        r2, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  Move         r3, r2
  // let kind_type = [
  Const        r4, [{"id": 1, "kind": "tv series"}, {"id": 2, "kind": "movie"}]
  Move         r5, r4
  // let link_type = [
  Const        r6, [{"id": 1, "link": "follows"}, {"id": 2, "link": "remake of"}]
  Move         r7, r6
  // let movie_companies = [
  Const        r8, [{"company_id": 1, "movie_id": 10}, {"company_id": 2, "movie_id": 20}]
  Move         r9, r8
  // let movie_info_idx = [
  Const        r10, [{"info": "7.0", "info_type_id": 1, "movie_id": 10}, {"info": "2.5", "info_type_id": 1, "movie_id": 20}]
  Move         r11, r10
  // let movie_link = [
  Const        r12, [{"link_type_id": 1, "linked_movie_id": 20, "movie_id": 10}]
  Move         r13, r12
  // let title = [
  Const        r14, [{"id": 10, "kind_id": 1, "production_year": 2004, "title": "Series A"}, {"id": 20, "kind_id": 1, "production_year": 2006, "title": "Series B"}]
  Move         r15, r14
  // from cn1 in company_name
  Const        r16, []
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L38:
  Less         r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  IterPrep     r23, r9
  Len          r24, r23
  Const        r25, 0
L37:
  Less         r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "id"
  Index        r30, r22, r29
  Const        r31, "company_id"
  Index        r32, r28, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join t1 in title on t1.id == mc1.movie_id
  IterPrep     r34, r15
  Len          r35, r34
  Const        r36, 0
L36:
  Less         r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "id"
  Index        r41, r39, r40
  Const        r42, "movie_id"
  Index        r43, r28, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  IterPrep     r45, r11
  Len          r46, r45
  Const        r47, 0
L35:
  Less         r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "movie_id"
  Index        r52, r50, r51
  Const        r53, "id"
  Index        r54, r39, r53
  Equal        r55, r52, r54
  JumpIfFalse  r55, L4
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, 0
L34:
  Less         r59, r58, r57
  JumpIfFalse  r59, L4
  Index        r60, r56, r58
  Move         r61, r60
  Const        r62, "id"
  Index        r63, r61, r62
  Const        r64, "info_type_id"
  Index        r65, r50, r64
  Equal        r66, r63, r65
  JumpIfFalse  r66, L5
  // join kt1 in kind_type on kt1.id == t1.kind_id
  IterPrep     r67, r5
  Len          r68, r67
  Const        r69, 0
L33:
  Less         r70, r69, r68
  JumpIfFalse  r70, L5
  Index        r71, r67, r69
  Move         r72, r71
  Const        r73, "id"
  Index        r74, r72, r73
  Const        r75, "kind_id"
  Index        r76, r39, r75
  Equal        r77, r74, r76
  JumpIfFalse  r77, L6
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r78, r13
  Len          r79, r78
  Const        r80, 0
L32:
  Less         r81, r80, r79
  JumpIfFalse  r81, L6
  Index        r82, r78, r80
  Move         r83, r82
  Const        r84, "movie_id"
  Index        r85, r83, r84
  Const        r86, "id"
  Index        r87, r39, r86
  Equal        r88, r85, r87
  JumpIfFalse  r88, L7
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r89, r15
  Len          r90, r89
  Const        r91, 0
L31:
  Less         r92, r91, r90
  JumpIfFalse  r92, L7
  Index        r93, r89, r91
  Move         r94, r93
  Const        r95, "id"
  Index        r96, r94, r95
  Const        r97, "linked_movie_id"
  Index        r98, r83, r97
  Equal        r99, r96, r98
  JumpIfFalse  r99, L8
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  IterPrep     r100, r11
  Len          r101, r100
  Const        r102, 0
L30:
  Less         r103, r102, r101
  JumpIfFalse  r103, L8
  Index        r104, r100, r102
  Move         r105, r104
  Const        r106, "movie_id"
  Index        r107, r105, r106
  Const        r108, "id"
  Index        r109, r94, r108
  Equal        r110, r107, r109
  JumpIfFalse  r110, L9
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  IterPrep     r111, r3
  Len          r112, r111
  Const        r113, 0
L29:
  Less         r114, r113, r112
  JumpIfFalse  r114, L9
  Index        r115, r111, r113
  Move         r116, r115
  Const        r117, "id"
  Index        r118, r116, r117
  Const        r119, "info_type_id"
  Index        r120, r105, r119
  Equal        r121, r118, r120
  JumpIfFalse  r121, L10
  // join kt2 in kind_type on kt2.id == t2.kind_id
  IterPrep     r122, r5
  Len          r123, r122
  Const        r124, 0
L28:
  Less         r125, r124, r123
  JumpIfFalse  r125, L10
  Index        r126, r122, r124
  Move         r127, r126
  Const        r128, "id"
  Index        r129, r127, r128
  Const        r130, "kind_id"
  Index        r131, r94, r130
  Equal        r132, r129, r131
  JumpIfFalse  r132, L11
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  IterPrep     r133, r9
  Len          r134, r133
  Const        r135, 0
L27:
  Less         r136, r135, r134
  JumpIfFalse  r136, L11
  Index        r137, r133, r135
  Move         r138, r137
  Const        r139, "movie_id"
  Index        r140, r138, r139
  Const        r141, "id"
  Index        r142, r94, r141
  Equal        r143, r140, r142
  JumpIfFalse  r143, L12
  // join cn2 in company_name on cn2.id == mc2.company_id
  IterPrep     r144, r1
  Len          r145, r144
  Const        r146, 0
L26:
  Less         r147, r146, r145
  JumpIfFalse  r147, L12
  Index        r148, r144, r146
  Move         r149, r148
  Const        r150, "id"
  Index        r151, r149, r150
  Const        r152, "company_id"
  Index        r153, r138, r152
  Equal        r154, r151, r153
  JumpIfFalse  r154, L13
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r155, r7
  Len          r156, r155
  Const        r157, 0
L25:
  Less         r158, r157, r156
  JumpIfFalse  r158, L13
  Index        r159, r155, r157
  Move         r160, r159
  Const        r161, "id"
  Index        r162, r160, r161
  Const        r163, "link_type_id"
  Index        r164, r83, r163
  Equal        r165, r162, r164
  JumpIfFalse  r165, L14
  // where cn1.country_code == "[us]" &&
  Const        r166, "country_code"
  Index        r167, r22, r166
  // mi_idx2.info < "3.0" &&
  Const        r168, "info"
  Index        r169, r105, r168
  Const        r170, "3.0"
  Less         r171, r169, r170
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r172, "production_year"
  Index        r173, r94, r172
  Const        r174, 2005
  LessEq       r175, r174, r173
  Const        r176, "production_year"
  Index        r177, r94, r176
  Const        r178, 2008
  LessEq       r179, r177, r178
  // where cn1.country_code == "[us]" &&
  Const        r180, "[us]"
  Equal        r181, r167, r180
  // it1.info == "rating" &&
  Const        r182, "info"
  Index        r183, r61, r182
  Const        r184, "rating"
  Equal        r185, r183, r184
  // it2.info == "rating" &&
  Const        r186, "info"
  Index        r187, r116, r186
  Const        r188, "rating"
  Equal        r189, r187, r188
  // kt1.kind == "tv series" &&
  Const        r190, "kind"
  Index        r191, r72, r190
  Const        r192, "tv series"
  Equal        r193, r191, r192
  // kt2.kind == "tv series" &&
  Const        r194, "kind"
  Index        r195, r127, r194
  Const        r196, "tv series"
  Equal        r197, r195, r196
  // where cn1.country_code == "[us]" &&
  Move         r198, r181
  JumpIfFalse  r198, L15
  Move         r198, r185
L15:
  // it1.info == "rating" &&
  Move         r199, r198
  JumpIfFalse  r199, L16
  Move         r199, r189
L16:
  // it2.info == "rating" &&
  Move         r200, r199
  JumpIfFalse  r200, L17
  Move         r200, r193
L17:
  // kt1.kind == "tv series" &&
  Move         r201, r200
  JumpIfFalse  r201, L18
  Move         r201, r197
L18:
  // kt2.kind == "tv series" &&
  Move         r202, r201
  JumpIfFalse  r202, L19
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r203, "link"
  Index        r204, r160, r203
  Const        r205, "sequel"
  Equal        r206, r204, r205
  Const        r207, "link"
  Index        r208, r160, r207
  Const        r209, "follows"
  Equal        r210, r208, r209
  Const        r211, "link"
  Index        r212, r160, r211
  Const        r213, "followed by"
  Equal        r214, r212, r213
  Move         r215, r206
  JumpIfTrue   r215, L20
  Move         r215, r210
L20:
  Move         r216, r215
  JumpIfTrue   r216, L21
  Move         r216, r214
L21:
  // kt2.kind == "tv series" &&
  Move         r202, r216
L19:
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Move         r217, r202
  JumpIfFalse  r217, L22
  Move         r217, r171
L22:
  // mi_idx2.info < "3.0" &&
  Move         r218, r217
  JumpIfFalse  r218, L23
  Move         r218, r175
L23:
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Move         r219, r218
  JumpIfFalse  r219, L24
  Move         r219, r179
L24:
  // where cn1.country_code == "[us]" &&
  JumpIfFalse  r219, L14
  // first_company: cn1.name,
  Const        r220, "first_company"
  Const        r221, "name"
  Index        r222, r22, r221
  // second_company: cn2.name,
  Const        r223, "second_company"
  Const        r224, "name"
  Index        r225, r149, r224
  // first_rating: mi_idx1.info,
  Const        r226, "first_rating"
  Const        r227, "info"
  Index        r228, r50, r227
  // second_rating: mi_idx2.info,
  Const        r229, "second_rating"
  Const        r230, "info"
  Index        r231, r105, r230
  // first_movie: t1.title,
  Const        r232, "first_movie"
  Const        r233, "title"
  Index        r234, r39, r233
  // second_movie: t2.title
  Const        r235, "second_movie"
  Const        r236, "title"
  Index        r237, r94, r236
  // first_company: cn1.name,
  Move         r238, r220
  Move         r239, r222
  // second_company: cn2.name,
  Move         r240, r223
  Move         r241, r225
  // first_rating: mi_idx1.info,
  Move         r242, r226
  Move         r243, r228
  // second_rating: mi_idx2.info,
  Move         r244, r229
  Move         r245, r231
  // first_movie: t1.title,
  Move         r246, r232
  Move         r247, r234
  // second_movie: t2.title
  Move         r248, r235
  Move         r249, r237
  // select {
  MakeMap      r250, 6, r238
  // from cn1 in company_name
  Append       r251, r16, r250
  Move         r16, r251
L14:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r252, 1
  Add          r253, r157, r252
  Move         r157, r253
  Jump         L25
L13:
  // join cn2 in company_name on cn2.id == mc2.company_id
  Const        r254, 1
  Add          r255, r146, r254
  Move         r146, r255
  Jump         L26
L12:
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Const        r256, 1
  Add          r257, r135, r256
  Move         r135, r257
  Jump         L27
L11:
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Const        r258, 1
  Add          r259, r124, r258
  Move         r124, r259
  Jump         L28
L10:
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Const        r260, 1
  Add          r261, r113, r260
  Move         r113, r261
  Jump         L29
L9:
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Const        r262, 1
  Add          r263, r102, r262
  Move         r102, r263
  Jump         L30
L8:
  // join t2 in title on t2.id == ml.linked_movie_id
  Const        r264, 1
  Add          r265, r91, r264
  Move         r91, r265
  Jump         L31
L7:
  // join ml in movie_link on ml.movie_id == t1.id
  Const        r266, 1
  Add          r267, r80, r266
  Move         r80, r267
  Jump         L32
L6:
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Const        r268, 1
  Add          r269, r69, r268
  Move         r69, r269
  Jump         L33
L5:
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Const        r270, 1
  Add          r271, r58, r270
  Move         r58, r271
  Jump         L34
L4:
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Const        r272, 1
  Add          r273, r47, r272
  Move         r47, r273
  Jump         L35
L3:
  // join t1 in title on t1.id == mc1.movie_id
  Const        r274, 1
  Add          r275, r36, r274
  Move         r36, r275
  Jump         L36
L2:
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Const        r276, 1
  Add          r277, r25, r276
  Move         r25, r277
  Jump         L37
L1:
  // from cn1 in company_name
  Const        r278, 1
  Add          r279, r19, r278
  Move         r19, r279
  Jump         L38
L0:
  // let rows =
  Move         r280, r16
  // first_company: min(from r in rows select r.first_company),
  Const        r281, "first_company"
  Const        r282, []
  IterPrep     r283, r280
  Len          r284, r283
  Const        r285, 0
L40:
  Less         r286, r285, r284
  JumpIfFalse  r286, L39
  Index        r287, r283, r285
  Move         r288, r287
  Const        r289, "first_company"
  Index        r290, r288, r289
  Append       r291, r282, r290
  Move         r282, r291
  Const        r292, 1
  Add          r293, r285, r292
  Move         r285, r293
  Jump         L40
L39:
  Min          r294, r282
  // second_company: min(from r in rows select r.second_company),
  Const        r295, "second_company"
  Const        r296, []
  IterPrep     r297, r280
  Len          r298, r297
  Const        r299, 0
L42:
  Less         r300, r299, r298
  JumpIfFalse  r300, L41
  Index        r301, r297, r299
  Move         r288, r301
  Const        r302, "second_company"
  Index        r303, r288, r302
  Append       r304, r296, r303
  Move         r296, r304
  Const        r305, 1
  Add          r306, r299, r305
  Move         r299, r306
  Jump         L42
L41:
  Min          r307, r296
  // first_rating: min(from r in rows select r.first_rating),
  Const        r308, "first_rating"
  Const        r309, []
  IterPrep     r310, r280
  Len          r311, r310
  Const        r312, 0
L44:
  Less         r313, r312, r311
  JumpIfFalse  r313, L43
  Index        r314, r310, r312
  Move         r288, r314
  Const        r315, "first_rating"
  Index        r316, r288, r315
  Append       r317, r309, r316
  Move         r309, r317
  Const        r318, 1
  Add          r319, r312, r318
  Move         r312, r319
  Jump         L44
L43:
  Min          r320, r309
  // second_rating: min(from r in rows select r.second_rating),
  Const        r321, "second_rating"
  Const        r322, []
  IterPrep     r323, r280
  Len          r324, r323
  Const        r325, 0
L46:
  Less         r326, r325, r324
  JumpIfFalse  r326, L45
  Index        r327, r323, r325
  Move         r288, r327
  Const        r328, "second_rating"
  Index        r329, r288, r328
  Append       r330, r322, r329
  Move         r322, r330
  Const        r331, 1
  Add          r332, r325, r331
  Move         r325, r332
  Jump         L46
L45:
  Min          r333, r322
  // first_movie: min(from r in rows select r.first_movie),
  Const        r334, "first_movie"
  Const        r335, []
  IterPrep     r336, r280
  Len          r337, r336
  Const        r338, 0
L48:
  Less         r339, r338, r337
  JumpIfFalse  r339, L47
  Index        r340, r336, r338
  Move         r288, r340
  Const        r341, "first_movie"
  Index        r342, r288, r341
  Append       r343, r335, r342
  Move         r335, r343
  Const        r344, 1
  Add          r345, r338, r344
  Move         r338, r345
  Jump         L48
L47:
  Min          r346, r335
  // second_movie: min(from r in rows select r.second_movie)
  Const        r347, "second_movie"
  Const        r348, []
  IterPrep     r349, r280
  Len          r350, r349
  Const        r351, 0
L50:
  Less         r352, r351, r350
  JumpIfFalse  r352, L49
  Index        r353, r349, r351
  Move         r288, r353
  Const        r354, "second_movie"
  Index        r355, r288, r354
  Append       r356, r348, r355
  Move         r348, r356
  Const        r357, 1
  Add          r358, r351, r357
  Move         r351, r358
  Jump         L50
L49:
  Min          r359, r348
  // first_company: min(from r in rows select r.first_company),
  Move         r360, r281
  Move         r361, r294
  // second_company: min(from r in rows select r.second_company),
  Move         r362, r295
  Move         r363, r307
  // first_rating: min(from r in rows select r.first_rating),
  Move         r364, r308
  Move         r365, r320
  // second_rating: min(from r in rows select r.second_rating),
  Move         r366, r321
  Move         r367, r333
  // first_movie: min(from r in rows select r.first_movie),
  Move         r368, r334
  Move         r369, r346
  // second_movie: min(from r in rows select r.second_movie)
  Move         r370, r347
  Move         r371, r359
  // {
  MakeMap      r372, 6, r360
  Move         r373, r372
  // let result = [
  MakeList     r374, 1, r373
  Move         r375, r374
  // json(result)
  JSON         r375
  // expect result == [
  Const        r376, [{"first_company": "US Studio", "first_movie": "Series A", "first_rating": "7.0", "second_company": "GB Studio", "second_movie": "Series B", "second_rating": "2.5"}]
  Equal        r377, r375, r376
  Expect       r377
  Return       r0
