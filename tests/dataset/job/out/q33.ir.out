func main (regs=80)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "US Studio"}, {"country_code": "[gb]", "id": 2, "name": "GB Studio"}]
L14:
  // let info_type = [
  Const        r1, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "tv series"}, {"id": 2, "kind": "movie"}]
L11:
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follows"}, {"id": 2, "link": "remake of"}]
L17:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 10}, {"company_id": 2, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r5, [{"info": "7.0", "info_type_id": 1, "movie_id": 10}, {"info": "2.5", "info_type_id": 1, "movie_id": 20}]
L21:
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "linked_movie_id": 20, "movie_id": 10}]
  // let title = [
  Const        r7, [{"id": 10, "kind_id": 1, "production_year": 2004, "title": "Series A"}, {"id": 20, "kind_id": 1, "production_year": 2006, "title": "Series B"}]
  // from cn1 in company_name
  Const        r8, []
  // where cn1.country_code == "[us]" &&
  Const        r9, "country_code"
  // it1.info == "rating" &&
  Const        r10, "info"
L16:
  // kt1.kind == "tv series" &&
  Const        r11, "kind"
L9:
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r12, "link"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r13, "production_year"
  // first_company: cn1.name,
  Const        r14, "first_company"
  Const        r15, "name"
  // second_company: cn2.name,
  Const        r16, "second_company"
  // first_rating: mi_idx1.info,
  Const        r17, "first_rating"
  // second_rating: mi_idx2.info,
  Const        r18, "second_rating"
  // first_movie: t1.title,
  Const        r19, "first_movie"
  Const        r20, "title"
  // second_movie: t2.title
  Const        r21, "second_movie"
  // from cn1 in company_name
  IterPrep     r22, r0
L24:
  Len          r23, r22
  Const        r24, 0
  Move         r25, r24
L26:
  LessInt      r26, r25, r23
L25:
  JumpIfFalse  r26, L0
  Index        r23, r22, r25
  Move         r22, r23
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  IterPrep     r23, r4
L22:
  Len          r27, r23
L10:
  Const        r28, "id"
  Const        r29, "company_id"
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
  Index        r27, r23, r30
L23:
  Move         r31, r27
  Index        r23, r22, r28
  Index        r32, r31, r29
  Equal        r33, r23, r32
L13:
  JumpIfFalse  r33, L2
  // join t1 in title on t1.id == mc1.movie_id
  IterPrep     r23, r7
L2:
  Len          r32, r23
L18:
  Const        r33, "movie_id"
  Move         r34, r24
L20:
  LessInt      r35, r34, r32
  JumpIfFalse  r35, L2
L1:
  Index        r32, r23, r34
L19:
  Move         r35, r32
  Index        r23, r35, r28
  Index        r32, r31, r33
L12:
  Equal        r31, r23, r32
  JumpIfFalse  r31, L3
L0:
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  IterPrep     r32, r5
  Len          r31, r32
  Move         r36, r24
  LessInt      r37, r36, r31
L15:
  JumpIfFalse  r37, L3
  Index        r31, r32, r36
  Move         r37, r31
  Index        r32, r37, r33
  Index        r31, r35, r28
  Equal        r38, r32, r31
  JumpIfFalse  r38, L4
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  IterPrep     r32, r1
  Len          r31, r32
L8:
  Const        r39, "info_type_id"
  Move         r40, r24
L7:
  LessInt      r41, r40, r31
  JumpIfFalse  r41, L4
L6:
  Index        r31, r32, r40
  Move         r41, r31
L5:
  Index        r32, r41, r28
  Index        r31, r37, r39
L4:
  Equal        r42, r32, r31
  JumpIfFalse  r42, L5
L3:
  // join kt1 in kind_type on kt1.id == t1.kind_id
  IterPrep     r32, r2
  Len          r31, r32
  Const        r42, "kind_id"
  Move         r43, r24
  LessInt      r44, r43, r31
  JumpIfFalse  r44, L5
  Index        r44, r32, r43
  Move         r32, r44
  Index        r44, r32, r28
  Index        r45, r35, r42
  Equal        r46, r44, r45
  JumpIfFalse  r46, L6
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r44, r6
  Len          r45, r44
  Move         r46, r24
  LessInt      r6, r46, r45
  JumpIfFalse  r6, L6
  Index        r45, r44, r46
  Move         r44, r45
  Index        r45, r44, r33
  Index        r47, r35, r28
  Equal        r48, r45, r47
  JumpIfFalse  r48, L7
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r45, r7
  Len          r47, r45
  Const        r48, "linked_movie_id"
  Move         r7, r24
  LessInt      r49, r7, r47
  JumpIfFalse  r49, L7
  Index        r47, r45, r7
  Move         r49, r47
  Index        r45, r49, r28
  Index        r50, r44, r48
  Equal        r48, r45, r50
  JumpIfFalse  r48, L8
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  IterPrep     r45, r5
  Len          r50, r45
  Move         r48, r24
  LessInt      r5, r48, r50
  JumpIfFalse  r5, L8
  Index        r50, r45, r48
  Move         r5, r50
  Index        r45, r5, r33
  Index        r50, r49, r28
  Equal        r51, r45, r50
  JumpIfFalse  r51, L9
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  IterPrep     r45, r1
  Len          r51, r45
  Move         r1, r24
  LessInt      r52, r1, r51
  JumpIfFalse  r52, L9
  Index        r51, r45, r1
  Move         r52, r51
  Index        r45, r52, r28
  Index        r51, r5, r39
  Equal        r39, r45, r51
  JumpIfFalse  r39, L10
  // join kt2 in kind_type on kt2.id == t2.kind_id
  IterPrep     r45, r2
  Len          r51, r45
  Move         r39, r24
  LessInt      r2, r39, r51
  JumpIfFalse  r2, L10
  Index        r51, r45, r39
  Move         r2, r51
  Index        r51, r2, r28
  Index        r53, r49, r42
  Equal        r42, r51, r53
  JumpIfFalse  r42, L11
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  IterPrep     r51, r4
  Len          r53, r51
  Move         r42, r24
  LessInt      r4, r42, r53
  JumpIfFalse  r4, L11
  Index        r53, r51, r42
  Move         r4, r53
  Index        r51, r4, r33
  Index        r53, r49, r28
  Equal        r33, r51, r53
  JumpIfFalse  r33, L12
  // join cn2 in company_name on cn2.id == mc2.company_id
  IterPrep     r51, r0
  Len          r53, r51
  Move         r33, r24
  LessInt      r54, r33, r53
  JumpIfFalse  r54, L12
  Index        r53, r51, r33
  Move         r54, r53
  Index        r51, r54, r28
  Index        r55, r4, r29
  Equal        r29, r51, r55
  JumpIfFalse  r29, L13
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r4, r3
  Len          r51, r4
  Const        r55, "link_type_id"
  Move         r29, r24
  LessInt      r3, r29, r51
  JumpIfFalse  r3, L13
  Index        r51, r4, r29
  Move         r3, r51
  Index        r4, r3, r28
  Index        r51, r44, r55
  Equal        r28, r4, r51
  JumpIfFalse  r28, L14
  // where cn1.country_code == "[us]" &&
  Index        r44, r22, r9
  // mi_idx2.info < "3.0" &&
  Index        r55, r5, r10
  Const        r4, "3.0"
  Less         r51, r55, r4
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Index        r28, r49, r13
  Const        r9, 2005
  LessEq       r55, r9, r28
  Index        r4, r49, r13
  Const        r28, 2008
  LessEq       r9, r4, r28
  // where cn1.country_code == "[us]" &&
  Const        r13, "[us]"
  Equal        r28, r44, r13
  // it1.info == "rating" &&
  Index        r44, r41, r10
  Const        r13, "rating"
  Equal        r41, r44, r13
  // it2.info == "rating" &&
  Index        r44, r52, r10
  Equal        r52, r44, r13
  // kt1.kind == "tv series" &&
  Index        r13, r32, r11
  Const        r44, "tv series"
  Equal        r32, r13, r44
  // kt2.kind == "tv series" &&
  Index        r13, r2, r11
  Equal        r11, r13, r44
  // where cn1.country_code == "[us]" &&
  Move         r2, r28
  JumpIfFalse  r2, L15
  Move         r2, r41
  // it1.info == "rating" &&
  JumpIfFalse  r2, L15
  Move         r2, r52
  // it2.info == "rating" &&
  JumpIfFalse  r2, L15
  Move         r2, r32
  // kt1.kind == "tv series" &&
  JumpIfFalse  r2, L15
  Move         r2, r11
  // kt2.kind == "tv series" &&
  JumpIfFalse  r2, L15
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Index        r44, r3, r12
  Const        r13, "sequel"
  Equal        r28, r44, r13
  Index        r41, r3, r12
  Const        r52, "follows"
  Equal        r11, r41, r52
  Index        r44, r3, r12
  Const        r13, "followed by"
  Equal        r41, r44, r13
  Move         r52, r28
  JumpIfTrue   r52, L16
  Move         r52, r11
  JumpIfTrue   r52, L16
  Move         r52, r41
  // kt2.kind == "tv series" &&
  Move         r2, r52
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  JumpIfFalse  r2, L15
  Move         r2, r51
  // mi_idx2.info < "3.0" &&
  JumpIfFalse  r2, L15
  Move         r2, r55
  // t2.production_year >= 2005 && t2.production_year <= 2008
  JumpIfFalse  r2, L15
  Move         r2, r9
  // where cn1.country_code == "[us]" &&
  JumpIfFalse  r2, L14
  // first_company: cn1.name,
  Const        r12, "first_company"
  Index        r44, r22, r15
  // second_company: cn2.name,
  Const        r13, "second_company"
  Index        r51, r54, r15
  // first_rating: mi_idx1.info,
  Const        r55, "first_rating"
  Index        r9, r37, r10
  // second_rating: mi_idx2.info,
  Const        r2, "second_rating"
  Index        r28, r5, r10
  // first_movie: t1.title,
  Const        r11, "first_movie"
  Index        r41, r35, r20
  // second_movie: t2.title
  Const        r52, "second_movie"
  Index        r22, r49, r20
  // first_company: cn1.name,
  Move         r56, r12
  Move         r57, r44
  // second_company: cn2.name,
  Move         r58, r13
  Move         r59, r51
  // first_rating: mi_idx1.info,
  Move         r60, r55
  Move         r61, r9
  // second_rating: mi_idx2.info,
  Move         r62, r2
  Move         r63, r28
  // first_movie: t1.title,
  Move         r64, r11
  Move         r65, r41
  // second_movie: t2.title
  Move         r66, r52
  Move         r67, r22
  // select {
  MakeMap      r15, 6, r56
  // from cn1 in company_name
  Append       r54, r8, r15
  Move         r8, r54
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r37, 1
  Add          r29, r29, r37
  Jump         L10
  // join cn2 in company_name on cn2.id == mc2.company_id
  Add          r33, r33, r37
  Jump         L17
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Add          r42, r42, r37
  Jump         L11
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Add          r39, r39, r37
  Jump         L12
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Add          r1, r1, r37
  Jump         L13
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Add          r48, r48, r37
  Jump         L18
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r7, r7, r37
  Jump         L19
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r46, r46, r37
  Jump         L20
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Add          r43, r43, r37
  Jump         L21
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Add          r40, r40, r37
  Jump         L22
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Add          r36, r36, r37
  Jump         L23
  // join t1 in title on t1.id == mc1.movie_id
  Add          r34, r34, r37
  Jump         L24
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Add          r30, r30, r37
  Jump         L25
  // from cn1 in company_name
  AddInt       r25, r25, r37
  Jump         L26
  // first_company: min(from r in rows select r.first_company),
  Const        r10, "first_company"
  Const        r5, []
  IterPrep     r35, r8
  Len          r20, r35
  Move         r49, r24
L28:
  LessInt      r12, r49, r20
  JumpIfFalse  r12, L27
  Index        r44, r35, r49
  Move         r13, r44
  Index        r51, r13, r14
  Append       r55, r5, r51
  Move         r5, r55
  AddInt       r49, r49, r37
  Jump         L28
L27:
  Min          r9, r5
  // second_company: min(from r in rows select r.second_company),
  Const        r2, "second_company"
  Const        r28, []
  IterPrep     r11, r8
  Len          r41, r11
  Move         r52, r24
L30:
  LessInt      r22, r52, r41
  JumpIfFalse  r22, L29
  Index        r56, r11, r52
  Move         r13, r56
  Index        r57, r13, r16
  Append       r58, r28, r57
  Move         r28, r58
  AddInt       r52, r52, r37
  Jump         L30
L29:
  Min          r59, r28
  // first_rating: min(from r in rows select r.first_rating),
  Const        r60, "first_rating"
  Const        r61, []
  IterPrep     r62, r8
  Len          r63, r62
  Move         r64, r24
L32:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L31
  Index        r66, r62, r64
  Move         r13, r66
  Index        r67, r13, r17
  Append       r15, r61, r67
  Move         r61, r15
  AddInt       r64, r64, r37
  Jump         L32
L31:
  Min          r54, r61
  // second_rating: min(from r in rows select r.second_rating),
  Const        r25, "second_rating"
  Const        r26, []
  IterPrep     r30, r8
  Len          r27, r30
  Move         r34, r24
L34:
  LessInt      r23, r34, r27
  JumpIfFalse  r23, L33
  Index        r36, r30, r34
  Move         r13, r36
  Index        r38, r13, r18
  Append       r40, r26, r38
  Move         r26, r40
  AddInt       r34, r34, r37
  Jump         L34
L33:
  Min          r31, r26
  // first_movie: min(from r in rows select r.first_movie),
  Const        r43, "first_movie"
  Const        r46, []
  IterPrep     r6, r8
  Len          r7, r6
  Move         r47, r24
L36:
  LessInt      r48, r47, r7
  JumpIfFalse  r48, L35
  Index        r50, r6, r47
  Move         r13, r50
  Index        r1, r13, r19
  Append       r45, r46, r1
  Move         r46, r45
  AddInt       r47, r47, r37
  Jump         L36
L35:
  Min          r39, r46
  // second_movie: min(from r in rows select r.second_movie)
  Const        r42, "second_movie"
  Const        r33, []
  IterPrep     r53, r8
  Len          r29, r53
  Move         r3, r24
L38:
  LessInt      r4, r3, r29
  JumpIfFalse  r4, L37
  Index        r32, r53, r3
  Move         r13, r32
  Index        r20, r13, r21
  Append       r12, r33, r20
  Move         r33, r12
  AddInt       r3, r3, r37
  Jump         L38
L37:
  Min          r35, r33
  // first_company: min(from r in rows select r.first_company),
  Move         r68, r10
  Move         r69, r9
  // second_company: min(from r in rows select r.second_company),
  Move         r70, r2
  Move         r71, r59
  // first_rating: min(from r in rows select r.first_rating),
  Move         r72, r60
  Move         r73, r54
  // second_rating: min(from r in rows select r.second_rating),
  Move         r74, r25
  Move         r75, r31
  // first_movie: min(from r in rows select r.first_movie),
  Move         r76, r43
  Move         r77, r39
  // second_movie: min(from r in rows select r.second_movie)
  Move         r78, r42
  Move         r79, r35
  // {
  MakeMap      r44, 6, r68
  Move         r14, r44
  // let result = [
  MakeList     r49, 1, r14
  // json(result)
  JSON         r49
  // expect result == [
  Const        r51, [{"first_company": "US Studio", "first_movie": "Series A", "first_rating": "7.0", "second_company": "GB Studio", "second_movie": "Series B", "second_rating": "2.5"}]
  Equal        r55, r49, r51
  Expect       r55
  Return       r0
