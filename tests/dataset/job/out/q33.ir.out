func main (regs=714)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "US Studio"}, {"country_code": "[gb]", "id": 2, "name": "GB Studio"}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "tv series"}, {"id": 2, "kind": "movie"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follows"}, {"id": 2, "link": "remake of"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 10}, {"company_id": 2, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r5, [{"info": "7.0", "info_type_id": 1, "movie_id": 10}, {"info": "2.5", "info_type_id": 1, "movie_id": 20}]
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "linked_movie_id": 20, "movie_id": 10}]
  // let title = [
  Const        r7, [{"id": 10, "kind_id": 1, "production_year": 2004, "title": "Series A"}, {"id": 20, "kind_id": 1, "production_year": 2006, "title": "Series B"}]
  // from cn1 in company_name
  Const        r8, []
  // where cn1.country_code == "[us]" &&
  Const        r9, "country_code"
  // it1.info == "rating" &&
  Const        r10, "info"
  // it2.info == "rating" &&
  Const        r11, "info"
  // kt1.kind == "tv series" &&
  Const        r12, "kind"
  // kt2.kind == "tv series" &&
  Const        r13, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r14, "link"
  Const        r15, "link"
  Const        r16, "link"
  // mi_idx2.info < "3.0" &&
  Const        r17, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r18, "production_year"
  Const        r19, "production_year"
  // first_company: cn1.name,
  Const        r20, "first_company"
  Const        r21, "name"
  // second_company: cn2.name,
  Const        r22, "second_company"
  Const        r23, "name"
  // first_rating: mi_idx1.info,
  Const        r24, "first_rating"
  Const        r25, "info"
  // second_rating: mi_idx2.info,
  Const        r26, "second_rating"
  Const        r27, "info"
  // first_movie: t1.title,
  Const        r28, "first_movie"
  Const        r29, "title"
  // second_movie: t2.title
  Const        r30, "second_movie"
  Const        r31, "title"
  // from cn1 in company_name
  IterPrep     r32, r0
  Len          r33, r32
  Const        r35, 0
  Move         r34, r35
L30:
  LessInt      r36, r34, r33
  JumpIfFalse  r36, L0
  Index        r37, r32, r34
  Move         r38, r37
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  IterPrep     r39, r4
  Len          r40, r39
  Const        r41, "id"
  Const        r42, "company_id"
  // where cn1.country_code == "[us]" &&
  Const        r43, "country_code"
  // it1.info == "rating" &&
  Const        r44, "info"
  // it2.info == "rating" &&
  Const        r45, "info"
  // kt1.kind == "tv series" &&
  Const        r46, "kind"
  // kt2.kind == "tv series" &&
  Const        r47, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r48, "link"
  Const        r49, "link"
  Const        r50, "link"
  // mi_idx2.info < "3.0" &&
  Const        r51, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r52, "production_year"
  Const        r53, "production_year"
  // first_company: cn1.name,
  Const        r54, "first_company"
  Const        r55, "name"
  // second_company: cn2.name,
  Const        r56, "second_company"
  Const        r57, "name"
  // first_rating: mi_idx1.info,
  Const        r58, "first_rating"
  Const        r59, "info"
  // second_rating: mi_idx2.info,
  Const        r60, "second_rating"
  Const        r61, "info"
  // first_movie: t1.title,
  Const        r62, "first_movie"
  Const        r63, "title"
  // second_movie: t2.title
  Const        r64, "second_movie"
  Const        r65, "title"
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Const        r67, 0
  Move         r66, r67
L29:
  LessInt      r68, r66, r40
  JumpIfFalse  r68, L1
  Index        r69, r39, r66
  Move         r70, r69
  Const        r71, "id"
  Index        r72, r38, r71
  Const        r73, "company_id"
  Index        r74, r70, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L2
  // join t1 in title on t1.id == mc1.movie_id
  IterPrep     r76, r7
  Len          r77, r76
  Const        r78, "id"
  Const        r79, "movie_id"
  // where cn1.country_code == "[us]" &&
  Const        r80, "country_code"
  // it1.info == "rating" &&
  Const        r81, "info"
  // it2.info == "rating" &&
  Const        r82, "info"
  // kt1.kind == "tv series" &&
  Const        r83, "kind"
  // kt2.kind == "tv series" &&
  Const        r84, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r85, "link"
  Const        r86, "link"
  Const        r87, "link"
  // mi_idx2.info < "3.0" &&
  Const        r88, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r89, "production_year"
  Const        r90, "production_year"
  // first_company: cn1.name,
  Const        r91, "first_company"
  Const        r92, "name"
  // second_company: cn2.name,
  Const        r93, "second_company"
  Const        r94, "name"
  // first_rating: mi_idx1.info,
  Const        r95, "first_rating"
  Const        r96, "info"
  // second_rating: mi_idx2.info,
  Const        r97, "second_rating"
  Const        r98, "info"
  // first_movie: t1.title,
  Const        r99, "first_movie"
  Const        r100, "title"
  // second_movie: t2.title
  Const        r101, "second_movie"
  Const        r102, "title"
  // join t1 in title on t1.id == mc1.movie_id
  Const        r104, 0
  Move         r103, r104
L28:
  LessInt      r105, r103, r77
  JumpIfFalse  r105, L2
  Index        r106, r76, r103
  Move         r107, r106
  Const        r108, "id"
  Index        r109, r107, r108
  Const        r110, "movie_id"
  Index        r111, r70, r110
  Equal        r112, r109, r111
  JumpIfFalse  r112, L3
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  IterPrep     r113, r5
  Len          r114, r113
  Const        r115, "movie_id"
  Const        r116, "id"
  // where cn1.country_code == "[us]" &&
  Const        r117, "country_code"
  // it1.info == "rating" &&
  Const        r118, "info"
  // it2.info == "rating" &&
  Const        r119, "info"
  // kt1.kind == "tv series" &&
  Const        r120, "kind"
  // kt2.kind == "tv series" &&
  Const        r121, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r122, "link"
  Const        r123, "link"
  Const        r124, "link"
  // mi_idx2.info < "3.0" &&
  Const        r125, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r126, "production_year"
  Const        r127, "production_year"
  // first_company: cn1.name,
  Const        r128, "first_company"
  Const        r129, "name"
  // second_company: cn2.name,
  Const        r130, "second_company"
  Const        r131, "name"
  // first_rating: mi_idx1.info,
  Const        r132, "first_rating"
  Const        r133, "info"
  // second_rating: mi_idx2.info,
  Const        r134, "second_rating"
  Const        r135, "info"
  // first_movie: t1.title,
  Const        r136, "first_movie"
  Const        r137, "title"
  // second_movie: t2.title
  Const        r138, "second_movie"
  Const        r139, "title"
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Const        r141, 0
  Move         r140, r141
L27:
  LessInt      r142, r140, r114
  JumpIfFalse  r142, L3
  Index        r143, r113, r140
  Move         r144, r143
  Const        r145, "movie_id"
  Index        r146, r144, r145
  Const        r147, "id"
  Index        r148, r107, r147
  Equal        r149, r146, r148
  JumpIfFalse  r149, L4
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  IterPrep     r150, r1
  Len          r151, r150
  Const        r152, "id"
  Const        r153, "info_type_id"
  // where cn1.country_code == "[us]" &&
  Const        r154, "country_code"
  // it1.info == "rating" &&
  Const        r155, "info"
  // it2.info == "rating" &&
  Const        r156, "info"
  // kt1.kind == "tv series" &&
  Const        r157, "kind"
  // kt2.kind == "tv series" &&
  Const        r158, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r159, "link"
  Const        r160, "link"
  Const        r161, "link"
  // mi_idx2.info < "3.0" &&
  Const        r162, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r163, "production_year"
  Const        r164, "production_year"
  // first_company: cn1.name,
  Const        r165, "first_company"
  Const        r166, "name"
  // second_company: cn2.name,
  Const        r167, "second_company"
  Const        r168, "name"
  // first_rating: mi_idx1.info,
  Const        r169, "first_rating"
  Const        r170, "info"
  // second_rating: mi_idx2.info,
  Const        r171, "second_rating"
  Const        r172, "info"
  // first_movie: t1.title,
  Const        r173, "first_movie"
  Const        r174, "title"
  // second_movie: t2.title
  Const        r175, "second_movie"
  Const        r176, "title"
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Const        r178, 0
  Move         r177, r178
L26:
  LessInt      r179, r177, r151
  JumpIfFalse  r179, L4
  Index        r180, r150, r177
  Move         r181, r180
  Const        r182, "id"
  Index        r183, r181, r182
  Const        r184, "info_type_id"
  Index        r185, r144, r184
  Equal        r186, r183, r185
  JumpIfFalse  r186, L5
  // join kt1 in kind_type on kt1.id == t1.kind_id
  IterPrep     r187, r2
  Len          r188, r187
  Const        r189, "id"
  Const        r190, "kind_id"
  // where cn1.country_code == "[us]" &&
  Const        r191, "country_code"
  // it1.info == "rating" &&
  Const        r192, "info"
  // it2.info == "rating" &&
  Const        r193, "info"
  // kt1.kind == "tv series" &&
  Const        r194, "kind"
  // kt2.kind == "tv series" &&
  Const        r195, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r196, "link"
  Const        r197, "link"
  Const        r198, "link"
  // mi_idx2.info < "3.0" &&
  Const        r199, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r200, "production_year"
  Const        r201, "production_year"
  // first_company: cn1.name,
  Const        r202, "first_company"
  Const        r203, "name"
  // second_company: cn2.name,
  Const        r204, "second_company"
  Const        r205, "name"
  // first_rating: mi_idx1.info,
  Const        r206, "first_rating"
  Const        r207, "info"
  // second_rating: mi_idx2.info,
  Const        r208, "second_rating"
  Const        r209, "info"
  // first_movie: t1.title,
  Const        r210, "first_movie"
  Const        r211, "title"
  // second_movie: t2.title
  Const        r212, "second_movie"
  Const        r213, "title"
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Const        r215, 0
  Move         r214, r215
L25:
  LessInt      r216, r214, r188
  JumpIfFalse  r216, L5
  Index        r217, r187, r214
  Move         r218, r217
  Const        r219, "id"
  Index        r220, r218, r219
  Const        r221, "kind_id"
  Index        r222, r107, r221
  Equal        r223, r220, r222
  JumpIfFalse  r223, L6
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r224, r6
  Len          r225, r224
  Const        r226, "movie_id"
  Const        r227, "id"
  // where cn1.country_code == "[us]" &&
  Const        r228, "country_code"
  // it1.info == "rating" &&
  Const        r229, "info"
  // it2.info == "rating" &&
  Const        r230, "info"
  // kt1.kind == "tv series" &&
  Const        r231, "kind"
  // kt2.kind == "tv series" &&
  Const        r232, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r233, "link"
  Const        r234, "link"
  Const        r235, "link"
  // mi_idx2.info < "3.0" &&
  Const        r236, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r237, "production_year"
  Const        r238, "production_year"
  // first_company: cn1.name,
  Const        r239, "first_company"
  Const        r240, "name"
  // second_company: cn2.name,
  Const        r241, "second_company"
  Const        r242, "name"
  // first_rating: mi_idx1.info,
  Const        r243, "first_rating"
  Const        r244, "info"
  // second_rating: mi_idx2.info,
  Const        r245, "second_rating"
  Const        r246, "info"
  // first_movie: t1.title,
  Const        r247, "first_movie"
  Const        r248, "title"
  // second_movie: t2.title
  Const        r249, "second_movie"
  Const        r250, "title"
  // join ml in movie_link on ml.movie_id == t1.id
  Const        r252, 0
  Move         r251, r252
L24:
  LessInt      r253, r251, r225
  JumpIfFalse  r253, L6
  Index        r254, r224, r251
  Move         r255, r254
  Const        r256, "movie_id"
  Index        r257, r255, r256
  Const        r258, "id"
  Index        r259, r107, r258
  Equal        r260, r257, r259
  JumpIfFalse  r260, L7
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r261, r7
  Len          r262, r261
  Const        r263, "id"
  Const        r264, "linked_movie_id"
  // where cn1.country_code == "[us]" &&
  Const        r265, "country_code"
  // it1.info == "rating" &&
  Const        r266, "info"
  // it2.info == "rating" &&
  Const        r267, "info"
  // kt1.kind == "tv series" &&
  Const        r268, "kind"
  // kt2.kind == "tv series" &&
  Const        r269, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r270, "link"
  Const        r271, "link"
  Const        r272, "link"
  // mi_idx2.info < "3.0" &&
  Const        r273, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r274, "production_year"
  Const        r275, "production_year"
  // first_company: cn1.name,
  Const        r276, "first_company"
  Const        r277, "name"
  // second_company: cn2.name,
  Const        r278, "second_company"
  Const        r279, "name"
  // first_rating: mi_idx1.info,
  Const        r280, "first_rating"
  Const        r281, "info"
  // second_rating: mi_idx2.info,
  Const        r282, "second_rating"
  Const        r283, "info"
  // first_movie: t1.title,
  Const        r284, "first_movie"
  Const        r285, "title"
  // second_movie: t2.title
  Const        r286, "second_movie"
  Const        r287, "title"
  // join t2 in title on t2.id == ml.linked_movie_id
  Const        r289, 0
  Move         r288, r289
L23:
  LessInt      r290, r288, r262
  JumpIfFalse  r290, L7
  Index        r291, r261, r288
  Move         r292, r291
  Const        r293, "id"
  Index        r294, r292, r293
  Const        r295, "linked_movie_id"
  Index        r296, r255, r295
  Equal        r297, r294, r296
  JumpIfFalse  r297, L8
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  IterPrep     r298, r5
  Len          r299, r298
  Const        r300, "movie_id"
  Const        r301, "id"
  // where cn1.country_code == "[us]" &&
  Const        r302, "country_code"
  // it1.info == "rating" &&
  Const        r303, "info"
  // it2.info == "rating" &&
  Const        r304, "info"
  // kt1.kind == "tv series" &&
  Const        r305, "kind"
  // kt2.kind == "tv series" &&
  Const        r306, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r307, "link"
  Const        r308, "link"
  Const        r309, "link"
  // mi_idx2.info < "3.0" &&
  Const        r310, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r311, "production_year"
  Const        r312, "production_year"
  // first_company: cn1.name,
  Const        r313, "first_company"
  Const        r314, "name"
  // second_company: cn2.name,
  Const        r315, "second_company"
  Const        r316, "name"
  // first_rating: mi_idx1.info,
  Const        r317, "first_rating"
  Const        r318, "info"
  // second_rating: mi_idx2.info,
  Const        r319, "second_rating"
  Const        r320, "info"
  // first_movie: t1.title,
  Const        r321, "first_movie"
  Const        r322, "title"
  // second_movie: t2.title
  Const        r323, "second_movie"
  Const        r324, "title"
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Const        r326, 0
  Move         r325, r326
L22:
  LessInt      r327, r325, r299
  JumpIfFalse  r327, L8
  Index        r328, r298, r325
  Move         r329, r328
  Const        r330, "movie_id"
  Index        r331, r329, r330
  Const        r332, "id"
  Index        r333, r292, r332
  Equal        r334, r331, r333
  JumpIfFalse  r334, L9
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  IterPrep     r335, r1
  Len          r336, r335
  Const        r337, "id"
  Const        r338, "info_type_id"
  // where cn1.country_code == "[us]" &&
  Const        r339, "country_code"
  // it1.info == "rating" &&
  Const        r340, "info"
  // it2.info == "rating" &&
  Const        r341, "info"
  // kt1.kind == "tv series" &&
  Const        r342, "kind"
  // kt2.kind == "tv series" &&
  Const        r343, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r344, "link"
  Const        r345, "link"
  Const        r346, "link"
  // mi_idx2.info < "3.0" &&
  Const        r347, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r348, "production_year"
  Const        r349, "production_year"
  // first_company: cn1.name,
  Const        r350, "first_company"
  Const        r351, "name"
  // second_company: cn2.name,
  Const        r352, "second_company"
  Const        r353, "name"
  // first_rating: mi_idx1.info,
  Const        r354, "first_rating"
  Const        r355, "info"
  // second_rating: mi_idx2.info,
  Const        r356, "second_rating"
  Const        r357, "info"
  // first_movie: t1.title,
  Const        r358, "first_movie"
  Const        r359, "title"
  // second_movie: t2.title
  Const        r360, "second_movie"
  Const        r361, "title"
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Const        r363, 0
  Move         r362, r363
L21:
  LessInt      r364, r362, r336
  JumpIfFalse  r364, L9
  Index        r365, r335, r362
  Move         r366, r365
  Const        r367, "id"
  Index        r368, r366, r367
  Const        r369, "info_type_id"
  Index        r370, r329, r369
  Equal        r371, r368, r370
  JumpIfFalse  r371, L10
  // join kt2 in kind_type on kt2.id == t2.kind_id
  IterPrep     r372, r2
  Len          r373, r372
  Const        r374, "id"
  Const        r375, "kind_id"
  // where cn1.country_code == "[us]" &&
  Const        r376, "country_code"
  // it1.info == "rating" &&
  Const        r377, "info"
  // it2.info == "rating" &&
  Const        r378, "info"
  // kt1.kind == "tv series" &&
  Const        r379, "kind"
  // kt2.kind == "tv series" &&
  Const        r380, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r381, "link"
  Const        r382, "link"
  Const        r383, "link"
  // mi_idx2.info < "3.0" &&
  Const        r384, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r385, "production_year"
  Const        r386, "production_year"
  // first_company: cn1.name,
  Const        r387, "first_company"
  Const        r388, "name"
  // second_company: cn2.name,
  Const        r389, "second_company"
  Const        r390, "name"
  // first_rating: mi_idx1.info,
  Const        r391, "first_rating"
  Const        r392, "info"
  // second_rating: mi_idx2.info,
  Const        r393, "second_rating"
  Const        r394, "info"
  // first_movie: t1.title,
  Const        r395, "first_movie"
  Const        r396, "title"
  // second_movie: t2.title
  Const        r397, "second_movie"
  Const        r398, "title"
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Const        r400, 0
  Move         r399, r400
L20:
  LessInt      r401, r399, r373
  JumpIfFalse  r401, L10
  Index        r402, r372, r399
  Move         r403, r402
  Const        r404, "id"
  Index        r405, r403, r404
  Const        r406, "kind_id"
  Index        r407, r292, r406
  Equal        r408, r405, r407
  JumpIfFalse  r408, L11
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  IterPrep     r409, r4
  Len          r410, r409
  Const        r411, "movie_id"
  Const        r412, "id"
  // where cn1.country_code == "[us]" &&
  Const        r413, "country_code"
  // it1.info == "rating" &&
  Const        r414, "info"
  // it2.info == "rating" &&
  Const        r415, "info"
  // kt1.kind == "tv series" &&
  Const        r416, "kind"
  // kt2.kind == "tv series" &&
  Const        r417, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r418, "link"
  Const        r419, "link"
  Const        r420, "link"
  // mi_idx2.info < "3.0" &&
  Const        r421, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r422, "production_year"
  Const        r423, "production_year"
  // first_company: cn1.name,
  Const        r424, "first_company"
  Const        r425, "name"
  // second_company: cn2.name,
  Const        r426, "second_company"
  Const        r427, "name"
  // first_rating: mi_idx1.info,
  Const        r428, "first_rating"
  Const        r429, "info"
  // second_rating: mi_idx2.info,
  Const        r430, "second_rating"
  Const        r431, "info"
  // first_movie: t1.title,
  Const        r432, "first_movie"
  Const        r433, "title"
  // second_movie: t2.title
  Const        r434, "second_movie"
  Const        r435, "title"
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Const        r437, 0
  Move         r436, r437
L19:
  LessInt      r438, r436, r410
  JumpIfFalse  r438, L11
  Index        r439, r409, r436
  Move         r440, r439
  Const        r441, "movie_id"
  Index        r442, r440, r441
  Const        r443, "id"
  Index        r444, r292, r443
  Equal        r445, r442, r444
  JumpIfFalse  r445, L12
  // join cn2 in company_name on cn2.id == mc2.company_id
  IterPrep     r446, r0
  Len          r447, r446
  Const        r448, "id"
  Const        r449, "company_id"
  // where cn1.country_code == "[us]" &&
  Const        r450, "country_code"
  // it1.info == "rating" &&
  Const        r451, "info"
  // it2.info == "rating" &&
  Const        r452, "info"
  // kt1.kind == "tv series" &&
  Const        r453, "kind"
  // kt2.kind == "tv series" &&
  Const        r454, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r455, "link"
  Const        r456, "link"
  Const        r457, "link"
  // mi_idx2.info < "3.0" &&
  Const        r458, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r459, "production_year"
  Const        r460, "production_year"
  // first_company: cn1.name,
  Const        r461, "first_company"
  Const        r462, "name"
  // second_company: cn2.name,
  Const        r463, "second_company"
  Const        r464, "name"
  // first_rating: mi_idx1.info,
  Const        r465, "first_rating"
  Const        r466, "info"
  // second_rating: mi_idx2.info,
  Const        r467, "second_rating"
  Const        r468, "info"
  // first_movie: t1.title,
  Const        r469, "first_movie"
  Const        r470, "title"
  // second_movie: t2.title
  Const        r471, "second_movie"
  Const        r472, "title"
  // join cn2 in company_name on cn2.id == mc2.company_id
  Const        r474, 0
  Move         r473, r474
L18:
  LessInt      r475, r473, r447
  JumpIfFalse  r475, L12
  Index        r476, r446, r473
  Move         r477, r476
  Const        r478, "id"
  Index        r479, r477, r478
  Const        r480, "company_id"
  Index        r481, r440, r480
  Equal        r482, r479, r481
  JumpIfFalse  r482, L13
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r483, r3
  Len          r484, r483
  Const        r485, "id"
  Const        r486, "link_type_id"
  // where cn1.country_code == "[us]" &&
  Const        r487, "country_code"
  // it1.info == "rating" &&
  Const        r488, "info"
  // it2.info == "rating" &&
  Const        r489, "info"
  // kt1.kind == "tv series" &&
  Const        r490, "kind"
  // kt2.kind == "tv series" &&
  Const        r491, "kind"
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r492, "link"
  Const        r493, "link"
  Const        r494, "link"
  // mi_idx2.info < "3.0" &&
  Const        r495, "info"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r496, "production_year"
  Const        r497, "production_year"
  // first_company: cn1.name,
  Const        r498, "first_company"
  Const        r499, "name"
  // second_company: cn2.name,
  Const        r500, "second_company"
  Const        r501, "name"
  // first_rating: mi_idx1.info,
  Const        r502, "first_rating"
  Const        r503, "info"
  // second_rating: mi_idx2.info,
  Const        r504, "second_rating"
  Const        r505, "info"
  // first_movie: t1.title,
  Const        r506, "first_movie"
  Const        r507, "title"
  // second_movie: t2.title
  Const        r508, "second_movie"
  Const        r509, "title"
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r511, 0
  Move         r510, r511
L17:
  LessInt      r512, r510, r484
  JumpIfFalse  r512, L13
  Index        r513, r483, r510
  Move         r514, r513
  Const        r515, "id"
  Index        r516, r514, r515
  Const        r517, "link_type_id"
  Index        r518, r255, r517
  Equal        r519, r516, r518
  JumpIfFalse  r519, L14
  // where cn1.country_code == "[us]" &&
  Const        r520, "country_code"
  Index        r521, r38, r520
  // mi_idx2.info < "3.0" &&
  Const        r522, "info"
  Index        r523, r329, r522
  Const        r524, "3.0"
  Less         r525, r523, r524
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r526, "production_year"
  Index        r527, r292, r526
  Const        r528, 2005
  LessEq       r529, r528, r527
  Const        r530, "production_year"
  Index        r531, r292, r530
  Const        r532, 2008
  LessEq       r533, r531, r532
  // where cn1.country_code == "[us]" &&
  Const        r534, "[us]"
  Equal        r535, r521, r534
  // it1.info == "rating" &&
  Const        r536, "info"
  Index        r537, r181, r536
  Const        r538, "rating"
  Equal        r539, r537, r538
  // it2.info == "rating" &&
  Const        r540, "info"
  Index        r541, r366, r540
  Const        r542, "rating"
  Equal        r543, r541, r542
  // kt1.kind == "tv series" &&
  Const        r544, "kind"
  Index        r545, r218, r544
  Const        r546, "tv series"
  Equal        r547, r545, r546
  // kt2.kind == "tv series" &&
  Const        r548, "kind"
  Index        r549, r403, r548
  Const        r550, "tv series"
  Equal        r551, r549, r550
  // where cn1.country_code == "[us]" &&
  Move         r552, r535
  JumpIfFalse  r552, L15
  Move         r552, r539
  // it1.info == "rating" &&
  JumpIfFalse  r552, L15
  Move         r552, r543
  // it2.info == "rating" &&
  JumpIfFalse  r552, L15
  Move         r552, r547
  // kt1.kind == "tv series" &&
  JumpIfFalse  r552, L15
  Move         r552, r551
  // kt2.kind == "tv series" &&
  JumpIfFalse  r552, L15
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r553, "link"
  Index        r554, r514, r553
  Const        r555, "sequel"
  Equal        r556, r554, r555
  Const        r557, "link"
  Index        r558, r514, r557
  Const        r559, "follows"
  Equal        r560, r558, r559
  Const        r561, "link"
  Index        r562, r514, r561
  Const        r563, "followed by"
  Equal        r564, r562, r563
  Move         r565, r556
  JumpIfTrue   r565, L16
  Move         r565, r560
  JumpIfTrue   r565, L16
  Move         r565, r564
L16:
  // kt2.kind == "tv series" &&
  Move         r552, r565
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  JumpIfFalse  r552, L15
  Move         r552, r525
  // mi_idx2.info < "3.0" &&
  JumpIfFalse  r552, L15
  Move         r552, r529
  // t2.production_year >= 2005 && t2.production_year <= 2008
  JumpIfFalse  r552, L15
  Move         r552, r533
L15:
  // where cn1.country_code == "[us]" &&
  JumpIfFalse  r552, L14
  // first_company: cn1.name,
  Const        r566, "first_company"
  Const        r567, "name"
  Index        r568, r38, r567
  // second_company: cn2.name,
  Const        r569, "second_company"
  Const        r570, "name"
  Index        r571, r477, r570
  // first_rating: mi_idx1.info,
  Const        r572, "first_rating"
  Const        r573, "info"
  Index        r574, r144, r573
  // second_rating: mi_idx2.info,
  Const        r575, "second_rating"
  Const        r576, "info"
  Index        r577, r329, r576
  // first_movie: t1.title,
  Const        r578, "first_movie"
  Const        r579, "title"
  Index        r580, r107, r579
  // second_movie: t2.title
  Const        r581, "second_movie"
  Const        r582, "title"
  Index        r583, r292, r582
  // first_company: cn1.name,
  Move         r584, r566
  Move         r585, r568
  // second_company: cn2.name,
  Move         r586, r569
  Move         r587, r571
  // first_rating: mi_idx1.info,
  Move         r588, r572
  Move         r589, r574
  // second_rating: mi_idx2.info,
  Move         r590, r575
  Move         r591, r577
  // first_movie: t1.title,
  Move         r592, r578
  Move         r593, r580
  // second_movie: t2.title
  Move         r594, r581
  Move         r595, r583
  // select {
  MakeMap      r596, 6, r584
  // from cn1 in company_name
  Append       r597, r8, r596
  Move         r8, r597
L14:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r598, 1
  Add          r510, r510, r598
  Jump         L17
L13:
  // join cn2 in company_name on cn2.id == mc2.company_id
  Const        r599, 1
  Add          r473, r473, r599
  Jump         L18
L12:
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Const        r600, 1
  Add          r436, r436, r600
  Jump         L19
L11:
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Const        r601, 1
  Add          r399, r399, r601
  Jump         L20
L10:
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Const        r602, 1
  Add          r362, r362, r602
  Jump         L21
L9:
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Const        r603, 1
  Add          r325, r325, r603
  Jump         L22
L8:
  // join t2 in title on t2.id == ml.linked_movie_id
  Const        r604, 1
  Add          r288, r288, r604
  Jump         L23
L7:
  // join ml in movie_link on ml.movie_id == t1.id
  Const        r605, 1
  Add          r251, r251, r605
  Jump         L24
L6:
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Const        r606, 1
  Add          r214, r214, r606
  Jump         L25
L5:
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Const        r607, 1
  Add          r177, r177, r607
  Jump         L26
L4:
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Const        r608, 1
  Add          r140, r140, r608
  Jump         L27
L3:
  // join t1 in title on t1.id == mc1.movie_id
  Const        r609, 1
  Add          r103, r103, r609
  Jump         L28
L2:
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Const        r610, 1
  Add          r66, r66, r610
  Jump         L29
L1:
  // from cn1 in company_name
  Const        r611, 1
  AddInt       r34, r34, r611
  Jump         L30
L0:
  // first_company: min(from r in rows select r.first_company),
  Const        r612, "first_company"
  Const        r613, []
  Const        r614, "first_company"
  IterPrep     r615, r8
  Len          r616, r615
  Const        r618, 0
  Move         r617, r618
L32:
  LessInt      r619, r617, r616
  JumpIfFalse  r619, L31
  Index        r620, r615, r617
  Move         r621, r620
  Const        r622, "first_company"
  Index        r623, r621, r622
  Append       r624, r613, r623
  Move         r613, r624
  Const        r625, 1
  AddInt       r617, r617, r625
  Jump         L32
L31:
  Min          r626, r613
  // second_company: min(from r in rows select r.second_company),
  Const        r627, "second_company"
  Const        r628, []
  Const        r629, "second_company"
  IterPrep     r630, r8
  Len          r631, r630
  Const        r633, 0
  Move         r632, r633
L34:
  LessInt      r634, r632, r631
  JumpIfFalse  r634, L33
  Index        r635, r630, r632
  Move         r621, r635
  Const        r636, "second_company"
  Index        r637, r621, r636
  Append       r638, r628, r637
  Move         r628, r638
  Const        r639, 1
  AddInt       r632, r632, r639
  Jump         L34
L33:
  Min          r640, r628
  // first_rating: min(from r in rows select r.first_rating),
  Const        r641, "first_rating"
  Const        r642, []
  Const        r643, "first_rating"
  IterPrep     r644, r8
  Len          r645, r644
  Const        r647, 0
  Move         r646, r647
L36:
  LessInt      r648, r646, r645
  JumpIfFalse  r648, L35
  Index        r649, r644, r646
  Move         r621, r649
  Const        r650, "first_rating"
  Index        r651, r621, r650
  Append       r652, r642, r651
  Move         r642, r652
  Const        r653, 1
  AddInt       r646, r646, r653
  Jump         L36
L35:
  Min          r654, r642
  // second_rating: min(from r in rows select r.second_rating),
  Const        r655, "second_rating"
  Const        r656, []
  Const        r657, "second_rating"
  IterPrep     r658, r8
  Len          r659, r658
  Const        r661, 0
  Move         r660, r661
L38:
  LessInt      r662, r660, r659
  JumpIfFalse  r662, L37
  Index        r663, r658, r660
  Move         r621, r663
  Const        r664, "second_rating"
  Index        r665, r621, r664
  Append       r666, r656, r665
  Move         r656, r666
  Const        r667, 1
  AddInt       r660, r660, r667
  Jump         L38
L37:
  Min          r668, r656
  // first_movie: min(from r in rows select r.first_movie),
  Const        r669, "first_movie"
  Const        r670, []
  Const        r671, "first_movie"
  IterPrep     r672, r8
  Len          r673, r672
  Const        r675, 0
  Move         r674, r675
L40:
  LessInt      r676, r674, r673
  JumpIfFalse  r676, L39
  Index        r677, r672, r674
  Move         r621, r677
  Const        r678, "first_movie"
  Index        r679, r621, r678
  Append       r680, r670, r679
  Move         r670, r680
  Const        r681, 1
  AddInt       r674, r674, r681
  Jump         L40
L39:
  Min          r682, r670
  // second_movie: min(from r in rows select r.second_movie)
  Const        r683, "second_movie"
  Const        r684, []
  Const        r685, "second_movie"
  IterPrep     r686, r8
  Len          r687, r686
  Const        r689, 0
  Move         r688, r689
L42:
  LessInt      r690, r688, r687
  JumpIfFalse  r690, L41
  Index        r691, r686, r688
  Move         r621, r691
  Const        r692, "second_movie"
  Index        r693, r621, r692
  Append       r694, r684, r693
  Move         r684, r694
  Const        r695, 1
  AddInt       r688, r688, r695
  Jump         L42
L41:
  Min          r696, r684
  // first_company: min(from r in rows select r.first_company),
  Move         r697, r612
  Move         r698, r626
  // second_company: min(from r in rows select r.second_company),
  Move         r699, r627
  Move         r700, r640
  // first_rating: min(from r in rows select r.first_rating),
  Move         r701, r641
  Move         r702, r654
  // second_rating: min(from r in rows select r.second_rating),
  Move         r703, r655
  Move         r704, r668
  // first_movie: min(from r in rows select r.first_movie),
  Move         r705, r669
  Move         r706, r682
  // second_movie: min(from r in rows select r.second_movie)
  Move         r707, r683
  Move         r708, r696
  // {
  MakeMap      r709, 6, r697
  Move         r710, r709
  // let result = [
  MakeList     r711, 1, r710
  // json(result)
  JSON         r711
  // expect result == [
  Const        r712, [{"first_company": "US Studio", "first_movie": "Series A", "first_rating": "7.0", "second_company": "GB Studio", "second_movie": "Series B", "second_rating": "2.5"}]
  Equal        r713, r711, r712
  Expect       r713
  Return       r0
