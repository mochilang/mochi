func main (regs=54)
  // let company_name = [
  Const        r0, [{"country_code": "[us]", "id": 1, "name": "US Studio"}, {"country_code": "[gb]", "id": 2, "name": "GB Studio"}]
L21:
  // let info_type = [
  Const        r1, [{"id": 1, "info": "rating"}, {"id": 2, "info": "other"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "tv series"}, {"id": 2, "kind": "movie"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "follows"}, {"id": 2, "link": "remake of"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 10}, {"company_id": 2, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r5, [{"info": "7.0", "info_type_id": 1, "movie_id": 10}, {"info": "2.5", "info_type_id": 1, "movie_id": 20}]
L17:
  // let movie_link = [
  Const        r6, [{"link_type_id": 1, "linked_movie_id": 20, "movie_id": 10}]
L6:
  // let title = [
  Const        r7, [{"id": 10, "kind_id": 1, "production_year": 2004, "title": "Series A"}, {"id": 20, "kind_id": 1, "production_year": 2006, "title": "Series B"}]
  // from cn1 in company_name
  Const        r8, []
  // where cn1.country_code == "[us]" &&
  Const        r9, "country_code"
  // it1.info == "rating" &&
  Const        r10, "info"
  // kt1.kind == "tv series" &&
  Const        r11, "kind"
L16:
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Const        r12, "link"
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Const        r13, "production_year"
  // first_company: cn1.name,
  Const        r14, "first_company"
  Const        r15, "name"
L9:
  // second_company: cn2.name,
  Const        r16, "second_company"
L4:
  // first_rating: mi_idx1.info,
  Const        r17, "first_rating"
L5:
  // second_rating: mi_idx2.info,
  Const        r18, "second_rating"
L0:
  // first_movie: t1.title,
  Const        r19, "first_movie"
  Const        r20, "title"
  // second_movie: t2.title
  Const        r21, "second_movie"
  // from cn1 in company_name
  IterPrep     r22, r0
L14:
  Len          r23, r22
  Const        r24, 0
  Move         r25, r24
L12:
  LessInt      r26, r25, r23
L20:
  JumpIfFalse  r26, L0
  Index        r23, r22, r25
L13:
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  IterPrep     r22, r4
L29:
  Len          r27, r22
L27:
  Const        r28, "id"
L24:
  Const        r29, "company_id"
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
L26:
  Index        r27, r22, r30
L25:
  Index        r22, r23, r28
  Index        r32, r27, r29
L18:
  Equal        r33, r22, r32
  JumpIfFalse  r33, L2
  // join t1 in title on t1.id == mc1.movie_id
  IterPrep     r33, r7
  Len          r32, r33
  Const        r22, "movie_id"
L22:
  Move         r34, r24
L19:
  LessInt      r35, r34, r32
L23:
  JumpIfFalse  r35, L2
  Index        r35, r33, r34
  Index        r33, r35, r28
L28:
  Index        r32, r27, r22
  Equal        r27, r33, r32
L1:
  JumpIfFalse  r27, L3
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  IterPrep     r27, r5
L15:
  Len          r32, r27
  Move         r33, r24
  LessInt      r36, r33, r32
  JumpIfFalse  r36, L3
  Index        r36, r27, r33
  Index        r27, r36, r22
  Index        r32, r35, r28
  Equal        r37, r27, r32
  JumpIfFalse  r37, L4
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  IterPrep     r37, r1
  Len          r32, r37
  Const        r27, "info_type_id"
  Move         r38, r24
  LessInt      r39, r38, r32
  JumpIfFalse  r39, L4
  Index        r39, r37, r38
  Index        r37, r39, r28
  Index        r32, r36, r27
  Equal        r40, r37, r32
  JumpIfFalse  r40, L5
  // join kt1 in kind_type on kt1.id == t1.kind_id
  IterPrep     r40, r2
  Len          r32, r40
  Const        r41, "kind_id"
  Move         r42, r24
  LessInt      r43, r42, r32
  JumpIfFalse  r43, L5
  Index        r43, r40, r42
  Index        r40, r43, r28
  Index        r32, r35, r41
  Equal        r44, r40, r32
  JumpIfFalse  r44, L6
  // join ml in movie_link on ml.movie_id == t1.id
  IterPrep     r44, r6
  Len          r6, r44
  Move         r40, r24
  LessInt      r45, r40, r6
  JumpIfFalse  r45, L6
  Index        r45, r44, r40
  Index        r44, r45, r22
  Index        r6, r35, r28
  Equal        r46, r44, r6
  JumpIfFalse  r46, L7
  // join t2 in title on t2.id == ml.linked_movie_id
  IterPrep     r6, r7
  Len          r7, r6
  Const        r44, "linked_movie_id"
  Move         r47, r24
  LessInt      r48, r47, r7
  JumpIfFalse  r48, L7
  Index        r48, r6, r47
  Index        r6, r48, r28
  Index        r7, r45, r44
  Equal        r44, r6, r7
  JumpIfFalse  r44, L8
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  IterPrep     r44, r5
  Len          r5, r44
  Move         r7, r24
  LessInt      r6, r7, r5
  JumpIfFalse  r6, L8
  Index        r6, r44, r7
  Index        r5, r6, r22
  Index        r49, r48, r28
  Equal        r50, r5, r49
  JumpIfFalse  r50, L1
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  IterPrep     r50, r1
  Len          r1, r50
  Move         r49, r24
  LessInt      r5, r49, r1
  JumpIfFalse  r5, L1
  Index        r5, r50, r49
  Index        r50, r5, r28
  Index        r51, r6, r27
  Equal        r27, r50, r51
  JumpIfFalse  r27, L4
  // join kt2 in kind_type on kt2.id == t2.kind_id
  IterPrep     r27, r2
  Len          r2, r27
  Move         r51, r24
  LessInt      r50, r51, r2
  JumpIfFalse  r50, L4
  Index        r50, r27, r51
  Index        r27, r50, r28
  Index        r2, r48, r41
  Equal        r41, r27, r2
  JumpIfFalse  r41, L9
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  IterPrep     r41, r4
  Len          r4, r41
  Move         r2, r24
  LessInt      r27, r2, r4
  JumpIfFalse  r27, L9
  Index        r4, r41, r2
  Index        r41, r4, r22
  Index        r22, r48, r28
  Equal        r52, r41, r22
  JumpIfFalse  r52, L10
  // join cn2 in company_name on cn2.id == mc2.company_id
  IterPrep     r52, r0
  Len          r22, r52
  Move         r41, r24
  LessInt      r53, r41, r22
  JumpIfFalse  r53, L10
  Index        r53, r52, r41
  Index        r52, r53, r28
  Index        r22, r4, r29
  Equal        r4, r52, r22
  JumpIfFalse  r4, L11
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r4, r3
  Len          r3, r4
  Const        r22, "link_type_id"
  Move         r52, r24
  LessInt      r29, r52, r3
  JumpIfFalse  r29, L11
  Index        r29, r4, r52
  Index        r4, r29, r28
  Index        r28, r45, r22
  Equal        r22, r4, r28
  JumpIfFalse  r22, L12
  // where cn1.country_code == "[us]" &&
  Index        r22, r23, r9
  // mi_idx2.info < "3.0" &&
  Index        r9, r6, r10
  Const        r28, "3.0"
  Less         r4, r9, r28
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Index        r28, r48, r13
  Const        r9, 2005
  LessEq       r45, r9, r28
  Index        r9, r48, r13
  Const        r13, 2008
  LessEq       r28, r9, r13
  // where cn1.country_code == "[us]" &&
  Const        r13, "[us]"
  Equal        r9, r22, r13
  // it1.info == "rating" &&
  Index        r13, r39, r10
  Const        r39, "rating"
  Equal        r22, r13, r39
  // it2.info == "rating" &&
  Index        r13, r5, r10
  Equal        r5, r13, r39
  // kt1.kind == "tv series" &&
  Index        r13, r43, r11
  Const        r43, "tv series"
  Equal        r39, r13, r43
  // kt2.kind == "tv series" &&
  Index        r13, r50, r11
  Equal        r50, r13, r43
  // where cn1.country_code == "[us]" &&
  Move         r13, r9
  JumpIfFalse  r13, L13
  // it1.info == "rating" &&
  Move         r13, r22
  JumpIfFalse  r13, L13
  // it2.info == "rating" &&
  Move         r13, r5
  JumpIfFalse  r13, L13
  // kt1.kind == "tv series" &&
  Move         r13, r39
  JumpIfFalse  r13, L14
  // kt2.kind == "tv series" &&
  Move         r13, r50
  JumpIfFalse  r13, L15
  // (lt.link == "sequel" || lt.link == "follows" || lt.link == "followed by") &&
  Index        r13, r29, r12
  Const        r50, "sequel"
  Equal        r39, r13, r50
  Index        r50, r29, r12
  Const        r13, "follows"
  Equal        r5, r50, r13
  Index        r13, r29, r12
  Const        r29, "followed by"
  Equal        r12, r13, r29
  Move         r29, r39
  JumpIfTrue   r29, L14
  Move         r29, r5
  JumpIfTrue   r29, L15
  Move         r29, r12
  JumpIfFalse  r29, L16
  // mi_idx2.info < "3.0" &&
  Move         r29, r4
  JumpIfFalse  r29, L17
  // t2.production_year >= 2005 && t2.production_year <= 2008
  Move         r29, r45
  JumpIfFalse  r29, L18
  Move         r29, r28
  // where cn1.country_code == "[us]" &&
  JumpIfFalse  r29, L12
  // first_company: cn1.name,
  Move         r29, r14
  Index        r28, r23, r15
  // second_company: cn2.name,
  Move         r23, r16
  Index        r4, r53, r15
  // first_rating: mi_idx1.info,
  Move         r53, r17
  Index        r15, r36, r10
  // second_rating: mi_idx2.info,
  Move         r12, r18
  Index        r5, r6, r10
  // first_movie: t1.title,
  Move         r6, r19
  Index        r10, r35, r20
  // second_movie: t2.title
  Move         r35, r21
  Index        r39, r48, r20
  // first_company: cn1.name,
  Move         r48, r29
  Move         r29, r28
  // second_company: cn2.name,
  Move         r28, r23
  Move         r23, r4
  // first_rating: mi_idx1.info,
  Move         r4, r53
  Move         r53, r15
  // second_rating: mi_idx2.info,
  Move         r15, r12
  Move         r12, r5
  // first_movie: t1.title,
  Move         r5, r6
  Move         r6, r10
  // second_movie: t2.title
  Move         r10, r35
  Move         r35, r39
  // select {
  MakeMap      r39, 6, r48
  // from cn1 in company_name
  Append       r8, r8, r39
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r39, 1
  Add          r52, r52, r39
  Jump         L19
L11:
  // join cn2 in company_name on cn2.id == mc2.company_id
  Add          r41, r41, r39
  Jump         L19
L10:
  // join mc2 in movie_companies on mc2.movie_id == t2.id
  Add          r2, r2, r39
  Jump         L19
  // join kt2 in kind_type on kt2.id == t2.kind_id
  Add          r51, r51, r39
  Jump         L20
  // join it2 in info_type on it2.id == mi_idx2.info_type_id
  Add          r49, r49, r39
  Jump         L1
  // join mi_idx2 in movie_info_idx on mi_idx2.movie_id == t2.id
  Add          r7, r7, r39
  Jump         L21
L8:
  // join t2 in title on t2.id == ml.linked_movie_id
  Add          r47, r47, r39
  Jump         L22
L7:
  // join ml in movie_link on ml.movie_id == t1.id
  Add          r40, r40, r39
  Jump         L23
  // join kt1 in kind_type on kt1.id == t1.kind_id
  Add          r42, r42, r39
  Jump         L24
  // join it1 in info_type on it1.id == mi_idx1.info_type_id
  Add          r38, r38, r39
  Jump         L25
  // join mi_idx1 in movie_info_idx on mi_idx1.movie_id == t1.id
  Add          r33, r33, r39
  Jump         L26
L3:
  // join t1 in title on t1.id == mc1.movie_id
  Add          r34, r34, r39
  Jump         L19
L2:
  // join mc1 in movie_companies on cn1.id == mc1.company_id
  Add          r30, r30, r39
  Jump         L27
  // from cn1 in company_name
  AddInt       r25, r25, r39
  Jump         L12
  // first_company: min(from r in rows select r.first_company),
  Move         r45, r14
  Const        r31, []
  IterPrep     r30, r8
  Len          r26, r30
  Move         r25, r24
  LessInt      r27, r25, r26
  JumpIfFalse  r27, L28
  Index        r27, r30, r25
  Index        r30, r27, r14
  Append       r31, r31, r30
  AddInt       r25, r25, r39
  Jump         L29
  Min          r25, r31
  // second_company: min(from r in rows select r.second_company),
  Move         r31, r16
  Const        r14, []
  IterPrep     r26, r8
  Len          r51, r26
  Move         r49, r24
  LessInt      r1, r49, r51
  JumpIfFalse  r1, L30
  Index        r27, r26, r49
  Index        r1, r27, r16
  Append       r14, r14, r1
  AddInt       r49, r49, r39
  Jump         L21
L30:
  Min          r49, r14
  // first_rating: min(from r in rows select r.first_rating),
  Move         r14, r17
  Const        r16, []
  IterPrep     r51, r8
  Len          r26, r51
  Move         r7, r24
L32:
  LessInt      r44, r7, r26
  JumpIfFalse  r44, L31
  Index        r27, r51, r7
  Index        r44, r27, r17
  Append       r16, r16, r44
  AddInt       r7, r7, r39
  Jump         L32
L31:
  Min          r44, r16
  // second_rating: min(from r in rows select r.second_rating),
  Move         r16, r18
  Const        r7, []
  IterPrep     r17, r8
  Len          r26, r17
  Move         r51, r24
L34:
  LessInt      r47, r51, r26
  JumpIfFalse  r47, L33
  Index        r27, r17, r51
  Index        r47, r27, r18
  Append       r7, r7, r47
  AddInt       r51, r51, r39
  Jump         L34
L33:
  Min          r47, r7
  // first_movie: min(from r in rows select r.first_movie),
  Move         r7, r19
  Const        r51, []
  IterPrep     r18, r8
  Len          r26, r18
  Move         r17, r24
L36:
  LessInt      r46, r17, r26
  JumpIfFalse  r46, L35
  Index        r27, r18, r17
  Index        r46, r27, r19
  Append       r51, r51, r46
  AddInt       r17, r17, r39
  Jump         L36
L35:
  Min          r46, r51
  // second_movie: min(from r in rows select r.second_movie)
  Move         r51, r21
  Const        r17, []
  IterPrep     r19, r8
  Len          r8, r19
  Move         r26, r24
L38:
  LessInt      r24, r26, r8
  JumpIfFalse  r24, L37
  Index        r27, r19, r26
  Index        r30, r27, r21
  Append       r17, r17, r30
  AddInt       r26, r26, r39
  Jump         L38
L37:
  Min          r24, r17
  // first_company: min(from r in rows select r.first_company),
  Move         r17, r45
  Move         r45, r25
  // second_company: min(from r in rows select r.second_company),
  Move         r25, r31
  Move         r31, r49
  // first_rating: min(from r in rows select r.first_rating),
  Move         r49, r14
  Move         r14, r44
  // second_rating: min(from r in rows select r.second_rating),
  Move         r44, r16
  Move         r16, r47
  // first_movie: min(from r in rows select r.first_movie),
  Move         r47, r7
  Move         r7, r46
  // second_movie: min(from r in rows select r.second_movie)
  Move         r1, r51
  Move         r51, r24
  // {
  MakeMap      r24, 6, r17
  // let result = [
  MakeList     r51, 1, r24
  // json(result)
  JSON         r51
  // expect result == [
  Const        r24, [{"first_company": "US Studio", "first_movie": "Series A", "first_rating": "7.0", "second_company": "GB Studio", "second_movie": "Series B", "second_rating": "2.5"}]
  Equal        r7, r51, r24
  Expect       r7
  Return       r0
