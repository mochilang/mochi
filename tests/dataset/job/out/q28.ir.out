func main (regs=250)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "crew"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "partial"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[gb]", "id": 1, "name": "Euro Films Ltd."}, {"country_code": "[us]", "id": 2, "name": "US Studios"}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": "production (2005) (UK)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "production (USA)"}]
  // let info_type = [
  Const        r5, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
  // let keyword = [
  Const        r6, [{"id": 1, "keyword": "blood"}, {"id": 2, "keyword": "romance"}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "episode"}]
  // let movie_info = [
  Const        r8, [{"info": "Germany", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r9, [{"info": 7.2, "info_type_id": 2, "movie_id": 1}, {"info": 9, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let title = [
  Const        r11, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Dark Euro Film"}, {"id": 2, "kind_id": 1, "production_year": 2005, "title": "US Film"}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r12, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  // from cc in complete_cast
  Const        r14, []
  // cct1.kind == "crew" &&
  Const        r15, "kind"
  // cn.country_code != "[us]" &&
  Const        r16, "country_code"
  // it1.info == "countries" &&
  Const        r17, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r18, "keyword"
  // mc.note.contains("(USA)") == false &&
  Const        r19, "note"
  // t.production_year > 2000
  Const        r21, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r22, "company"
  Const        r23, "name"
  Const        r24, "rating"
  Const        r25, "title"
  // from cc in complete_cast
  IterPrep     r26, r1
  Len          r27, r26
  Const        r29, 0
  Move         r28, r29
L39:
  LessInt      r30, r28, r27
  JumpIfFalse  r30, L0
  Index        r32, r26, r28
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r33, r0
  Len          r34, r33
  Const        r35, "id"
  Const        r36, "subject_id"
  Move         r37, r29
L38:
  LessInt      r38, r37, r34
  JumpIfFalse  r38, L1
  Index        r40, r33, r37
  Index        r41, r40, r35
  Index        r42, r32, r36
  Equal        r43, r41, r42
  JumpIfFalse  r43, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r44, r0
  Len          r45, r44
  Const        r46, "status_id"
  Move         r47, r29
L37:
  LessInt      r48, r47, r45
  JumpIfFalse  r48, L2
  Index        r50, r44, r47
  Index        r51, r50, r35
  Index        r52, r32, r46
  Equal        r53, r51, r52
  JumpIfFalse  r53, L3
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  IterPrep     r54, r4
  Len          r55, r54
  Const        r56, "movie_id"
  Move         r57, r29
L36:
  LessInt      r58, r57, r55
  JumpIfFalse  r58, L3
  Index        r60, r54, r57
  Index        r61, r60, r56
  Index        r62, r32, r56
  Equal        r63, r61, r62
  JumpIfFalse  r63, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r64, r2
  Len          r65, r64
  Const        r66, "company_id"
  Move         r67, r29
L35:
  LessInt      r68, r67, r65
  JumpIfFalse  r68, L4
  Index        r70, r64, r67
  Index        r71, r70, r35
  Index        r72, r60, r66
  Equal        r73, r71, r72
  JumpIfFalse  r73, L5
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r74, r3
  Len          r75, r74
  Const        r76, "company_type_id"
  Move         r77, r29
L34:
  LessInt      r78, r77, r75
  JumpIfFalse  r78, L5
  Index        r80, r74, r77
  Index        r81, r80, r35
  Index        r82, r60, r76
  Equal        r83, r81, r82
  JumpIfFalse  r83, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r84, r10
  Len          r85, r84
  Move         r86, r29
L33:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L6
  Index        r89, r84, r86
  Index        r90, r89, r56
  Index        r91, r32, r56
  Equal        r92, r90, r91
  JumpIfFalse  r92, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r93, r6
  Len          r94, r93
  Const        r95, "keyword_id"
  Move         r96, r29
L32:
  LessInt      r97, r96, r94
  JumpIfFalse  r97, L7
  Index        r99, r93, r96
  Index        r100, r99, r35
  Index        r101, r89, r95
  Equal        r102, r100, r101
  JumpIfFalse  r102, L8
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r103, r8
  Len          r104, r103
  Move         r105, r29
L31:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L8
  Index        r108, r103, r105
  Index        r109, r108, r56
  Index        r110, r32, r56
  Equal        r111, r109, r110
  JumpIfFalse  r111, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r112, r5
  Len          r113, r112
  Const        r114, "info_type_id"
  Move         r115, r29
L30:
  LessInt      r116, r115, r113
  JumpIfFalse  r116, L9
  Index        r118, r112, r115
  Index        r119, r118, r35
  Index        r120, r108, r114
  Equal        r121, r119, r120
  JumpIfFalse  r121, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r122, r9
  Len          r123, r122
  Move         r124, r29
L29:
  LessInt      r125, r124, r123
  JumpIfFalse  r125, L10
  Index        r127, r122, r124
  Index        r128, r127, r56
  Index        r129, r32, r56
  Equal        r130, r128, r129
  JumpIfFalse  r130, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r131, r5
  Len          r132, r131
  Move         r133, r29
L28:
  LessInt      r134, r133, r132
  JumpIfFalse  r134, L11
  Index        r136, r131, r133
  Index        r137, r136, r35
  Index        r138, r127, r114
  Equal        r139, r137, r138
  JumpIfFalse  r139, L12
  // join t in title on t.id == cc.movie_id
  IterPrep     r140, r11
  Len          r141, r140
  Move         r142, r29
L27:
  LessInt      r143, r142, r141
  JumpIfFalse  r143, L12
  Index        r145, r140, r142
  Index        r146, r145, r35
  Index        r147, r32, r56
  Equal        r148, r146, r147
  JumpIfFalse  r148, L13
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r149, r7
  Len          r150, r149
  Const        r151, "kind_id"
  Move         r152, r29
L26:
  LessInt      r153, r152, r150
  JumpIfFalse  r153, L13
  Index        r155, r149, r152
  Index        r156, r155, r35
  Index        r157, r145, r151
  Equal        r158, r156, r157
  JumpIfFalse  r158, L14
  // cct1.kind == "crew" &&
  Index        r159, r40, r15
  // mi_idx.info < 8.5 &&
  Index        r160, r127, r17
  Const        r161, 8.5
  LessFloat    r162, r160, r161
  // t.production_year > 2000
  Index        r163, r145, r21
  Const        r164, 2000
  Less         r165, r164, r163
  // cct1.kind == "crew" &&
  Const        r166, "crew"
  Equal        r167, r159, r166
  // cct2.kind != "complete+verified" &&
  Index        r168, r50, r15
  Const        r169, "complete+verified"
  NotEqual     r170, r168, r169
  // cn.country_code != "[us]" &&
  Index        r171, r70, r16
  Const        r172, "[us]"
  NotEqual     r173, r171, r172
  // it1.info == "countries" &&
  Index        r174, r118, r17
  Const        r175, "countries"
  Equal        r176, r174, r175
  // it2.info == "rating" &&
  Index        r177, r136, r17
  Equal        r178, r177, r24
  Index        r179, r60, r19
  // mc.note.contains("(USA)") == false &&
  Const        r180, "(USA)"
  In           r181, r180, r179
  Const        r182, false
  Equal        r183, r181, r182
  // cct1.kind == "crew" &&
  Move         r184, r167
  JumpIfFalse  r184, L15
L15:
  // cct2.kind != "complete+verified" &&
  Move         r185, r170
  JumpIfFalse  r185, L16
L16:
  // cn.country_code != "[us]" &&
  Move         r186, r173
  JumpIfFalse  r186, L17
L17:
  // it1.info == "countries" &&
  Move         r187, r176
  JumpIfFalse  r187, L18
L18:
  // it2.info == "rating" &&
  Move         r188, r178
  JumpIfFalse  r188, L19
  // (k.keyword in allowed_keywords) &&
  Index        r189, r99, r18
  In           r191, r189, r12
L19:
  JumpIfFalse  r191, L20
  // (kt.kind in ["movie", "episode"]) &&
  Index        r192, r155, r15
  Const        r193, ["movie", "episode"]
  In           r195, r192, r193
L20:
  JumpIfFalse  r195, L21
L21:
  // mc.note.contains("(USA)") == false &&
  Move         r196, r183
  JumpIfFalse  r196, L22
  Index        r197, r60, r19
  // mc.note.contains("(200") &&
  Const        r198, "(200"
  In           r200, r198, r197
L22:
  JumpIfFalse  r200, L23
  // (mi.info in allowed_countries) &&
  Index        r201, r108, r17
  In           r203, r201, r13
L23:
  JumpIfFalse  r203, L24
L24:
  // mi_idx.info < 8.5 &&
  Move         r204, r162
  JumpIfFalse  r204, L25
  Move         r204, r165
L25:
  // where (
  JumpIfFalse  r204, L14
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  MakeMap      r211, 3, r22
  // from cc in complete_cast
  Append       r14, r14, r211
L14:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r213, 1
  Add          r152, r152, r213
  Jump         L26
L13:
  // join t in title on t.id == cc.movie_id
  Add          r142, r142, r213
  Jump         L27
L12:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r133, r133, r213
  Jump         L28
L11:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Add          r124, r124, r213
  Jump         L29
L10:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r115, r115, r213
  Jump         L30
L9:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Add          r105, r105, r213
  Jump         L31
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r96, r96, r213
  Jump         L32
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r86, r86, r213
  Jump         L33
L6:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r77, r77, r213
  Jump         L34
L5:
  // join cn in company_name on cn.id == mc.company_id
  Add          r67, r67, r213
  Jump         L35
L4:
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Add          r57, r57, r213
  Jump         L36
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r47, r47, r213
  Jump         L37
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Jump         L38
L1:
  // from cc in complete_cast
  AddInt       r28, r28, r213
  Jump         L39
L0:
  // movie_company: min(from x in matches select x.company),
  Const        r214, "movie_company"
  Const        r215, []
  IterPrep     r216, r14
  Len          r217, r216
  Move         r218, r29
L41:
  LessInt      r219, r218, r217
  JumpIfFalse  r219, L40
  Index        r221, r216, r218
  Index        r222, r221, r22
  Append       r215, r215, r222
  AddInt       r218, r218, r213
  Jump         L41
L40:
  // rating: min(from x in matches select x.rating),
  Const        r225, []
  IterPrep     r226, r14
  Len          r227, r226
  Move         r228, r29
L43:
  LessInt      r229, r228, r227
  JumpIfFalse  r229, L42
  Index        r221, r226, r228
  Index        r231, r221, r24
  Append       r225, r225, r231
  AddInt       r228, r228, r213
  Jump         L43
L42:
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Const        r235, []
  IterPrep     r236, r14
  Len          r237, r236
  Move         r238, r29
L45:
  LessInt      r239, r238, r237
  JumpIfFalse  r239, L44
  Index        r221, r236, r238
  Index        r241, r221, r25
  Append       r235, r235, r241
  AddInt       r238, r238, r213
  Jump         L45
L44:
  // let result = {
  MakeMap      r247, 3, r214
  // json(result)
  JSON         r247
  // expect result == {
  Const        r248, {"complete_euro_dark_movie": "Dark Euro Film", "movie_company": "Euro Films Ltd.", "rating": 7.2}
  Equal        r249, r247, r248
  Expect       r249
  Return       r0
