func main (regs=65)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "crew"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "partial"}]
L27:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[gb]", "id": 1, "name": "Euro Films Ltd."}, {"country_code": "[us]", "id": 2, "name": "US Studios"}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": "production (2005) (UK)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "production (USA)"}]
  // let info_type = [
  Const        r5, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
  // let keyword = [
  Const        r6, [{"id": 1, "keyword": "blood"}, {"id": 2, "keyword": "romance"}]
L18:
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "episode"}]
L19:
  // let movie_info = [
  Const        r8, [{"info": "Germany", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r9, [{"info": 7.2, "info_type_id": 2, "movie_id": 1}, {"info": 9.0, "info_type_id": 2, "movie_id": 2}]
L24:
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let title = [
  Const        r11, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Dark Euro Film"}, {"id": 2, "kind_id": 1, "production_year": 2005, "title": "US Film"}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r12, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r12, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  // from cc in complete_cast
  Const        r12, []
  // cct1.kind == "crew" &&
  Const        r13, "kind"
  // cn.country_code != "[us]" &&
  Const        r14, "country_code"
  // it1.info == "countries" &&
  Const        r15, "info"
L17:
  // (k.keyword in allowed_keywords) &&
  Const        r16, "keyword"
  // mc.note.contains("(USA)") == false &&
  Const        r17, "note"
  Const        r18, "contains"
  // t.production_year > 2000
  Const        r18, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r19, "company"
  Const        r20, "name"
  Const        r21, "rating"
  Const        r22, "title"
L29:
  // from cc in complete_cast
  IterPrep     r23, r1
L28:
  Len          r1, r23
  Const        r24, 0
L25:
  Move         r25, r24
  LessInt      r26, r25, r1
  JumpIfFalse  r26, L0
  Index        r1, r23, r25
  Move         r23, r1
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r1, r0
  Len          r27, r1
  Const        r28, "id"
L26:
  Const        r29, "subject_id"
  Move         r30, r24
  LessInt      r31, r30, r27
  JumpIfFalse  r31, L1
L23:
  Index        r27, r1, r30
L22:
  Move         r31, r27
  Index        r1, r31, r28
  Index        r32, r23, r29
  Equal        r29, r1, r32
  JumpIfFalse  r29, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r1, r0
L21:
  Len          r32, r1
  Const        r29, "status_id"
L20:
  Move         r33, r24
L16:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r32, r1, r33
  Move         r34, r32
  Index        r1, r34, r28
  Index        r32, r23, r29
  Equal        r29, r1, r32
  JumpIfFalse  r29, L3
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  IterPrep     r32, r4
  Len          r29, r32
  Const        r4, "movie_id"
L15:
  Move         r35, r24
  LessInt      r36, r35, r29
  JumpIfFalse  r36, L3
  Index        r29, r32, r35
  Move         r36, r29
  Index        r32, r36, r4
  Index        r29, r23, r4
  Equal        r37, r32, r29
  JumpIfFalse  r37, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r32, r2
  Len          r29, r32
  Const        r2, "company_id"
  Move         r38, r24
  LessInt      r39, r38, r29
  JumpIfFalse  r39, L4
  Index        r29, r32, r38
  Move         r39, r29
  Index        r32, r39, r28
  Index        r29, r36, r2
  Equal        r2, r32, r29
  JumpIfFalse  r2, L5
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r32, r3
  Len          r29, r32
  Const        r2, "company_type_id"
  Move         r3, r24
  LessInt      r40, r3, r29
  JumpIfFalse  r40, L5
  Index        r40, r32, r3
  Move         r32, r40
  Index        r40, r32, r28
  Index        r32, r36, r2
  Equal        r2, r40, r32
  JumpIfFalse  r2, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r40, r10
  Len          r32, r40
  Move         r2, r24
  LessInt      r10, r2, r32
  JumpIfFalse  r10, L6
  Index        r32, r40, r2
  Move         r40, r32
  Index        r32, r40, r4
  Index        r41, r23, r4
  Equal        r42, r32, r41
  JumpIfFalse  r42, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r32, r6
  Len          r41, r32
  Const        r42, "keyword_id"
  Move         r6, r24
  LessInt      r43, r6, r41
  JumpIfFalse  r43, L7
  Index        r41, r32, r6
  Move         r43, r41
  Index        r32, r43, r28
  Index        r44, r40, r42
  Equal        r40, r32, r44
  JumpIfFalse  r40, L8
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r42, r8
  Len          r32, r42
  Move         r44, r24
  LessInt      r40, r44, r32
  JumpIfFalse  r40, L8
  Index        r8, r42, r44
  Move         r32, r8
  Index        r40, r32, r4
  Index        r42, r23, r4
  Equal        r8, r40, r42
  JumpIfFalse  r8, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r40, r5
  Len          r8, r40
  Const        r45, "info_type_id"
  Move         r46, r24
  LessInt      r47, r46, r8
  JumpIfFalse  r47, L9
  Index        r8, r40, r46
  Move         r47, r8
  Index        r40, r47, r28
  Index        r8, r32, r45
  Equal        r48, r40, r8
  JumpIfFalse  r48, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r40, r9
  Len          r8, r40
  Move         r9, r24
  LessInt      r49, r9, r8
  JumpIfFalse  r49, L10
  Index        r8, r40, r9
  Move         r49, r8
  Index        r40, r49, r4
  Index        r8, r23, r4
  Equal        r50, r40, r8
  JumpIfFalse  r50, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r40, r5
  Len          r8, r40
  Move         r50, r24
  LessInt      r5, r50, r8
  JumpIfFalse  r5, L11
  Index        r8, r40, r50
  Move         r5, r8
  Index        r40, r5, r28
  Index        r8, r49, r45
  Equal        r45, r40, r8
  JumpIfFalse  r45, L12
  // join t in title on t.id == cc.movie_id
  IterPrep     r40, r11
  Len          r8, r40
  Move         r45, r24
  LessInt      r11, r45, r8
  JumpIfFalse  r11, L12
  Index        r8, r40, r45
  Move         r11, r8
  Index        r40, r11, r28
  Index        r51, r23, r4
  Equal        r23, r40, r51
  JumpIfFalse  r23, L13
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r4, r7
  Len          r40, r4
  Const        r51, "kind_id"
  Move         r23, r24
  LessInt      r7, r23, r40
  JumpIfFalse  r7, L13
  Index        r40, r4, r23
  Move         r7, r40
  Index        r4, r7, r28
  Index        r40, r11, r51
  Equal        r28, r4, r40
  JumpIfFalse  r28, L14
  // cct1.kind == "crew" &&
  Index        r51, r31, r13
  // mi_idx.info < 8.5 &&
  Index        r4, r49, r15
  Const        r40, 8.5
  LessFloat    r28, r4, r40
  // t.production_year > 2000
  Index        r31, r11, r18
  Const        r4, 2000
  Less         r40, r4, r31
  // cct1.kind == "crew" &&
  Const        r18, "crew"
  Equal        r31, r51, r18
  // cct2.kind != "complete+verified" &&
  Index        r4, r34, r13
  Const        r51, "complete+verified"
  NotEqual     r34, r4, r51
  // cn.country_code != "[us]" &&
  Index        r4, r39, r14
  Const        r51, "[us]"
  NotEqual     r14, r4, r51
  // it1.info == "countries" &&
  Index        r4, r47, r15
  Const        r51, "countries"
  Equal        r47, r4, r51
  // it2.info == "rating" &&
  Index        r4, r5, r15
  Equal        r51, r4, r21
  Index        r5, r36, r17
  // mc.note.contains("(USA)") == false &&
  Const        r4, "(USA)"
  In           r52, r4, r5
  Const        r5, false
  Equal        r4, r52, r5
  // cct1.kind == "crew" &&
  Move         r52, r31
  JumpIfFalse  r52, L15
  Move         r52, r34
  // cct2.kind != "complete+verified" &&
  JumpIfFalse  r52, L15
  Move         r52, r14
  // cn.country_code != "[us]" &&
  JumpIfFalse  r52, L15
  Move         r52, r47
  // it1.info == "countries" &&
  JumpIfFalse  r52, L15
  Move         r52, r51
  // it2.info == "rating" &&
  JumpIfFalse  r52, L15
  // (k.keyword in allowed_keywords) &&
  Index        r5, r43, r16
  Const        r31, ["murder", "murder-in-title", "blood", "violence"]
  In           r34, r5, r31
  // it2.info == "rating" &&
  Move         r52, r34
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r52, L15
  // (kt.kind in ["movie", "episode"]) &&
  Index        r14, r7, r13
  Const        r47, ["movie", "episode"]
  In           r16, r14, r47
  // (k.keyword in allowed_keywords) &&
  Move         r52, r16
  // (kt.kind in ["movie", "episode"]) &&
  JumpIfFalse  r52, L15
  Move         r52, r4
  // mc.note.contains("(USA)") == false &&
  JumpIfFalse  r52, L15
  Index        r43, r36, r17
  // mc.note.contains("(200") &&
  Const        r5, "(200"
  In           r31, r5, r43
  // mc.note.contains("(USA)") == false &&
  Move         r52, r31
  // mc.note.contains("(200") &&
  JumpIfFalse  r52, L15
  // (mi.info in allowed_countries) &&
  Index        r34, r32, r15
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  In           r4, r34, r13
  // mc.note.contains("(200") &&
  Move         r52, r4
  // (mi.info in allowed_countries) &&
  JumpIfFalse  r52, L15
  Move         r52, r28
  // mi_idx.info < 8.5 &&
  JumpIfFalse  r52, L15
  Move         r52, r40
  // where (
  JumpIfFalse  r52, L14
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r14, "company"
  Index        r47, r39, r20
  Const        r16, "rating"
  Index        r17, r49, r15
  Const        r36, "title"
  Index        r43, r11, r22
  Move         r53, r14
  Move         r54, r47
  Move         r55, r16
  Move         r56, r17
  Move         r57, r36
  Move         r58, r43
  MakeMap      r5, 3, r53
  // from cc in complete_cast
  Append       r31, r12, r5
  Move         r12, r31
L14:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r32, 1
  Add          r23, r23, r32
  Jump         L16
L13:
  // join t in title on t.id == cc.movie_id
  Add          r45, r45, r32
  Jump         L17
L12:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r50, r50, r32
  Jump         L18
L11:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Add          r9, r9, r32
  Jump         L19
L10:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r46, r46, r32
  Jump         L20
L9:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Add          r44, r44, r32
  Jump         L21
L8:
  // join k in keyword on k.id == mk.keyword_id
  Add          r6, r6, r32
  Jump         L22
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r2, r2, r32
  Jump         L23
L6:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r3, r3, r32
  Jump         L24
L5:
  // join cn in company_name on cn.id == mc.company_id
  Add          r38, r38, r32
  Jump         L25
L4:
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Add          r35, r35, r32
  Jump         L26
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r33, r33, r32
  Jump         L27
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Add          r30, r30, r32
  Jump         L28
L1:
  // from cc in complete_cast
  AddInt       r25, r25, r32
  Jump         L29
L0:
  // movie_company: min(from x in matches select x.company),
  Const        r28, "movie_company"
  Const        r40, []
  IterPrep     r52, r12
  Len          r34, r52
  Move         r13, r24
L31:
  LessInt      r4, r13, r34
  JumpIfFalse  r4, L30
  Index        r20, r52, r13
  Move         r39, r20
  Index        r15, r39, r19
  Append       r49, r40, r15
  Move         r40, r49
  AddInt       r13, r13, r32
  Jump         L31
L30:
  Min          r11, r40
  // rating: min(from x in matches select x.rating),
  Const        r14, "rating"
  Const        r47, []
  IterPrep     r16, r12
  Len          r17, r16
  Move         r36, r24
L33:
  LessInt      r43, r36, r17
  JumpIfFalse  r43, L32
  Index        r53, r16, r36
  Move         r39, r53
  Index        r54, r39, r21
  Append       r55, r47, r54
  Move         r47, r55
  AddInt       r36, r36, r32
  Jump         L33
L32:
  Min          r56, r47
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Const        r57, "complete_euro_dark_movie"
  Const        r58, []
  IterPrep     r5, r12
  Len          r31, r5
  Move         r25, r24
L35:
  LessInt      r26, r25, r31
  JumpIfFalse  r26, L34
  Index        r30, r5, r25
  Move         r39, r30
  Index        r27, r39, r22
  Append       r33, r58, r27
  Move         r58, r33
  AddInt       r25, r25, r32
  Jump         L35
L34:
  Min          r1, r58
  // movie_company: min(from x in matches select x.company),
  Move         r59, r28
  Move         r60, r11
  // rating: min(from x in matches select x.rating),
  Move         r61, r14
  Move         r62, r56
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Move         r63, r57
  Move         r64, r1
  // let result = {
  MakeMap      r35, 3, r59
  // json(result)
  JSON         r35
  // expect result == {
  Const        r37, {"complete_euro_dark_movie": "Dark Euro Film", "movie_company": "Euro Films Ltd.", "rating": 7.2}
  Equal        r38, r35, r37
  Expect       r38
  Return       r0
