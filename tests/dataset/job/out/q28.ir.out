func main (regs=616)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "crew"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "partial"}]
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[gb]", "id": 1, "name": "Euro Films Ltd."}, {"country_code": "[us]", "id": 2, "name": "US Studios"}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": "production (2005) (UK)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "production (USA)"}]
  // let info_type = [
  Const        r5, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
  // let keyword = [
  Const        r6, [{"id": 1, "keyword": "blood"}, {"id": 2, "keyword": "romance"}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "episode"}]
  // let movie_info = [
  Const        r8, [{"info": "Germany", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r9, [{"info": 7.2, "info_type_id": 2, "movie_id": 1}, {"info": 9, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let title = [
  Const        r11, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Dark Euro Film"}, {"id": 2, "kind_id": 1, "production_year": 2005, "title": "US Film"}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r12, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  // from cc in complete_cast
  Const        r14, []
  // cct1.kind == "crew" &&
  Const        r15, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r16, "kind"
  // cn.country_code != "[us]" &&
  Const        r17, "country_code"
  // it1.info == "countries" &&
  Const        r18, "info"
  // it2.info == "rating" &&
  Const        r19, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r20, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r21, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r22, "note"
  Const        r23, "contains"
  // mc.note.contains("(200") &&
  Const        r24, "note"
  Const        r25, "contains"
  // (mi.info in allowed_countries) &&
  Const        r26, "info"
  // mi_idx.info < 8.5 &&
  Const        r27, "info"
  // t.production_year > 2000
  Const        r28, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r29, "company"
  Const        r30, "name"
  Const        r31, "rating"
  Const        r32, "info"
  Const        r33, "title"
  Const        r34, "title"
  // from cc in complete_cast
  IterPrep     r35, r1
  Len          r36, r35
  Const        r38, 0
  Move         r37, r38
L29:
  LessInt      r39, r37, r36
  JumpIfFalse  r39, L0
  Index        r40, r35, r37
  Move         r41, r40
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r42, r0
  Len          r43, r42
  Const        r44, "id"
  Const        r45, "subject_id"
  // cct1.kind == "crew" &&
  Const        r46, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r47, "kind"
  // cn.country_code != "[us]" &&
  Const        r48, "country_code"
  // it1.info == "countries" &&
  Const        r49, "info"
  // it2.info == "rating" &&
  Const        r50, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r51, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r52, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r53, "note"
  Const        r54, "contains"
  // mc.note.contains("(200") &&
  Const        r55, "note"
  Const        r56, "contains"
  // (mi.info in allowed_countries) &&
  Const        r57, "info"
  // mi_idx.info < 8.5 &&
  Const        r58, "info"
  // t.production_year > 2000
  Const        r59, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r60, "company"
  Const        r61, "name"
  Const        r62, "rating"
  Const        r63, "info"
  Const        r64, "title"
  Const        r65, "title"
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r67, 0
  Move         r66, r67
L28:
  LessInt      r68, r66, r43
  JumpIfFalse  r68, L1
  Index        r69, r42, r66
  Move         r70, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Const        r73, "subject_id"
  Index        r74, r41, r73
  Equal        r75, r72, r74
  JumpIfFalse  r75, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r76, r0
  Len          r77, r76
  Const        r78, "id"
  Const        r79, "status_id"
  // cct1.kind == "crew" &&
  Const        r80, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r81, "kind"
  // cn.country_code != "[us]" &&
  Const        r82, "country_code"
  // it1.info == "countries" &&
  Const        r83, "info"
  // it2.info == "rating" &&
  Const        r84, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r85, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r86, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r87, "note"
  Const        r88, "contains"
  // mc.note.contains("(200") &&
  Const        r89, "note"
  Const        r90, "contains"
  // (mi.info in allowed_countries) &&
  Const        r91, "info"
  // mi_idx.info < 8.5 &&
  Const        r92, "info"
  // t.production_year > 2000
  Const        r93, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r94, "company"
  Const        r95, "name"
  Const        r96, "rating"
  Const        r97, "info"
  Const        r98, "title"
  Const        r99, "title"
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r101, 0
  Move         r100, r101
L27:
  LessInt      r102, r100, r77
  JumpIfFalse  r102, L2
  Index        r103, r76, r100
  Move         r104, r103
  Const        r105, "id"
  Index        r106, r104, r105
  Const        r107, "status_id"
  Index        r108, r41, r107
  Equal        r109, r106, r108
  JumpIfFalse  r109, L3
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  IterPrep     r110, r4
  Len          r111, r110
  Const        r112, "movie_id"
  Const        r113, "movie_id"
  // cct1.kind == "crew" &&
  Const        r114, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r115, "kind"
  // cn.country_code != "[us]" &&
  Const        r116, "country_code"
  // it1.info == "countries" &&
  Const        r117, "info"
  // it2.info == "rating" &&
  Const        r118, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r119, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r120, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r121, "note"
  Const        r122, "contains"
  // mc.note.contains("(200") &&
  Const        r123, "note"
  Const        r124, "contains"
  // (mi.info in allowed_countries) &&
  Const        r125, "info"
  // mi_idx.info < 8.5 &&
  Const        r126, "info"
  // t.production_year > 2000
  Const        r127, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r128, "company"
  Const        r129, "name"
  Const        r130, "rating"
  Const        r131, "info"
  Const        r132, "title"
  Const        r133, "title"
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Const        r135, 0
  Move         r134, r135
L26:
  LessInt      r136, r134, r111
  JumpIfFalse  r136, L3
  Index        r137, r110, r134
  Move         r138, r137
  Const        r139, "movie_id"
  Index        r140, r138, r139
  Const        r141, "movie_id"
  Index        r142, r41, r141
  Equal        r143, r140, r142
  JumpIfFalse  r143, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r144, r2
  Len          r145, r144
  Const        r146, "id"
  Const        r147, "company_id"
  // cct1.kind == "crew" &&
  Const        r148, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r149, "kind"
  // cn.country_code != "[us]" &&
  Const        r150, "country_code"
  // it1.info == "countries" &&
  Const        r151, "info"
  // it2.info == "rating" &&
  Const        r152, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r153, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r154, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r155, "note"
  Const        r156, "contains"
  // mc.note.contains("(200") &&
  Const        r157, "note"
  Const        r158, "contains"
  // (mi.info in allowed_countries) &&
  Const        r159, "info"
  // mi_idx.info < 8.5 &&
  Const        r160, "info"
  // t.production_year > 2000
  Const        r161, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r162, "company"
  Const        r163, "name"
  Const        r164, "rating"
  Const        r165, "info"
  Const        r166, "title"
  Const        r167, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r169, 0
  Move         r168, r169
L25:
  LessInt      r170, r168, r145
  JumpIfFalse  r170, L4
  Index        r171, r144, r168
  Move         r172, r171
  Const        r173, "id"
  Index        r174, r172, r173
  Const        r175, "company_id"
  Index        r176, r138, r175
  Equal        r177, r174, r176
  JumpIfFalse  r177, L5
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r178, r3
  Len          r179, r178
  Const        r180, "id"
  Const        r181, "company_type_id"
  // cct1.kind == "crew" &&
  Const        r182, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r183, "kind"
  // cn.country_code != "[us]" &&
  Const        r184, "country_code"
  // it1.info == "countries" &&
  Const        r185, "info"
  // it2.info == "rating" &&
  Const        r186, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r187, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r188, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r189, "note"
  Const        r190, "contains"
  // mc.note.contains("(200") &&
  Const        r191, "note"
  Const        r192, "contains"
  // (mi.info in allowed_countries) &&
  Const        r193, "info"
  // mi_idx.info < 8.5 &&
  Const        r194, "info"
  // t.production_year > 2000
  Const        r195, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r196, "company"
  Const        r197, "name"
  Const        r198, "rating"
  Const        r199, "info"
  Const        r200, "title"
  Const        r201, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r203, 0
  Move         r202, r203
L24:
  LessInt      r204, r202, r179
  JumpIfFalse  r204, L5
  Index        r205, r178, r202
  Move         r206, r205
  Const        r207, "id"
  Index        r208, r206, r207
  Const        r209, "company_type_id"
  Index        r210, r138, r209
  Equal        r211, r208, r210
  JumpIfFalse  r211, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r212, r10
  Len          r213, r212
  Const        r214, "movie_id"
  Const        r215, "movie_id"
  // cct1.kind == "crew" &&
  Const        r216, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r217, "kind"
  // cn.country_code != "[us]" &&
  Const        r218, "country_code"
  // it1.info == "countries" &&
  Const        r219, "info"
  // it2.info == "rating" &&
  Const        r220, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r221, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r222, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r223, "note"
  Const        r224, "contains"
  // mc.note.contains("(200") &&
  Const        r225, "note"
  Const        r226, "contains"
  // (mi.info in allowed_countries) &&
  Const        r227, "info"
  // mi_idx.info < 8.5 &&
  Const        r228, "info"
  // t.production_year > 2000
  Const        r229, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r230, "company"
  Const        r231, "name"
  Const        r232, "rating"
  Const        r233, "info"
  Const        r234, "title"
  Const        r235, "title"
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r237, 0
  Move         r236, r237
L23:
  LessInt      r238, r236, r213
  JumpIfFalse  r238, L6
  Index        r239, r212, r236
  Move         r240, r239
  Const        r241, "movie_id"
  Index        r242, r240, r241
  Const        r243, "movie_id"
  Index        r244, r41, r243
  Equal        r245, r242, r244
  JumpIfFalse  r245, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r246, r6
  Len          r247, r246
  Const        r248, "id"
  Const        r249, "keyword_id"
  // cct1.kind == "crew" &&
  Const        r250, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r251, "kind"
  // cn.country_code != "[us]" &&
  Const        r252, "country_code"
  // it1.info == "countries" &&
  Const        r253, "info"
  // it2.info == "rating" &&
  Const        r254, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r255, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r256, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r257, "note"
  Const        r258, "contains"
  // mc.note.contains("(200") &&
  Const        r259, "note"
  Const        r260, "contains"
  // (mi.info in allowed_countries) &&
  Const        r261, "info"
  // mi_idx.info < 8.5 &&
  Const        r262, "info"
  // t.production_year > 2000
  Const        r263, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r264, "company"
  Const        r265, "name"
  Const        r266, "rating"
  Const        r267, "info"
  Const        r268, "title"
  Const        r269, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r271, 0
  Move         r270, r271
L22:
  LessInt      r272, r270, r247
  JumpIfFalse  r272, L7
  Index        r273, r246, r270
  Move         r274, r273
  Const        r275, "id"
  Index        r276, r274, r275
  Const        r277, "keyword_id"
  Index        r278, r240, r277
  Equal        r279, r276, r278
  JumpIfFalse  r279, L8
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r280, r8
  Len          r281, r280
  Const        r282, "movie_id"
  Const        r283, "movie_id"
  // cct1.kind == "crew" &&
  Const        r284, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r285, "kind"
  // cn.country_code != "[us]" &&
  Const        r286, "country_code"
  // it1.info == "countries" &&
  Const        r287, "info"
  // it2.info == "rating" &&
  Const        r288, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r289, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r290, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r291, "note"
  Const        r292, "contains"
  // mc.note.contains("(200") &&
  Const        r293, "note"
  Const        r294, "contains"
  // (mi.info in allowed_countries) &&
  Const        r295, "info"
  // mi_idx.info < 8.5 &&
  Const        r296, "info"
  // t.production_year > 2000
  Const        r297, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r298, "company"
  Const        r299, "name"
  Const        r300, "rating"
  Const        r301, "info"
  Const        r302, "title"
  Const        r303, "title"
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r305, 0
  Move         r304, r305
L21:
  LessInt      r306, r304, r281
  JumpIfFalse  r306, L8
  Index        r307, r280, r304
  Move         r308, r307
  Const        r309, "movie_id"
  Index        r310, r308, r309
  Const        r311, "movie_id"
  Index        r312, r41, r311
  Equal        r313, r310, r312
  JumpIfFalse  r313, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r314, r5
  Len          r315, r314
  Const        r316, "id"
  Const        r317, "info_type_id"
  // cct1.kind == "crew" &&
  Const        r318, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r319, "kind"
  // cn.country_code != "[us]" &&
  Const        r320, "country_code"
  // it1.info == "countries" &&
  Const        r321, "info"
  // it2.info == "rating" &&
  Const        r322, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r323, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r324, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r325, "note"
  Const        r326, "contains"
  // mc.note.contains("(200") &&
  Const        r327, "note"
  Const        r328, "contains"
  // (mi.info in allowed_countries) &&
  Const        r329, "info"
  // mi_idx.info < 8.5 &&
  Const        r330, "info"
  // t.production_year > 2000
  Const        r331, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r332, "company"
  Const        r333, "name"
  Const        r334, "rating"
  Const        r335, "info"
  Const        r336, "title"
  Const        r337, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r339, 0
  Move         r338, r339
L20:
  LessInt      r340, r338, r315
  JumpIfFalse  r340, L9
  Index        r341, r314, r338
  Move         r342, r341
  Const        r343, "id"
  Index        r344, r342, r343
  Const        r345, "info_type_id"
  Index        r346, r308, r345
  Equal        r347, r344, r346
  JumpIfFalse  r347, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r348, r9
  Len          r349, r348
  Const        r350, "movie_id"
  Const        r351, "movie_id"
  // cct1.kind == "crew" &&
  Const        r352, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r353, "kind"
  // cn.country_code != "[us]" &&
  Const        r354, "country_code"
  // it1.info == "countries" &&
  Const        r355, "info"
  // it2.info == "rating" &&
  Const        r356, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r357, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r358, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r359, "note"
  Const        r360, "contains"
  // mc.note.contains("(200") &&
  Const        r361, "note"
  Const        r362, "contains"
  // (mi.info in allowed_countries) &&
  Const        r363, "info"
  // mi_idx.info < 8.5 &&
  Const        r364, "info"
  // t.production_year > 2000
  Const        r365, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r366, "company"
  Const        r367, "name"
  Const        r368, "rating"
  Const        r369, "info"
  Const        r370, "title"
  Const        r371, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r373, 0
  Move         r372, r373
L19:
  LessInt      r374, r372, r349
  JumpIfFalse  r374, L10
  Index        r375, r348, r372
  Move         r376, r375
  Const        r377, "movie_id"
  Index        r378, r376, r377
  Const        r379, "movie_id"
  Index        r380, r41, r379
  Equal        r381, r378, r380
  JumpIfFalse  r381, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r382, r5
  Len          r383, r382
  Const        r384, "id"
  Const        r385, "info_type_id"
  // cct1.kind == "crew" &&
  Const        r386, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r387, "kind"
  // cn.country_code != "[us]" &&
  Const        r388, "country_code"
  // it1.info == "countries" &&
  Const        r389, "info"
  // it2.info == "rating" &&
  Const        r390, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r391, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r392, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r393, "note"
  Const        r394, "contains"
  // mc.note.contains("(200") &&
  Const        r395, "note"
  Const        r396, "contains"
  // (mi.info in allowed_countries) &&
  Const        r397, "info"
  // mi_idx.info < 8.5 &&
  Const        r398, "info"
  // t.production_year > 2000
  Const        r399, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r400, "company"
  Const        r401, "name"
  Const        r402, "rating"
  Const        r403, "info"
  Const        r404, "title"
  Const        r405, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r407, 0
  Move         r406, r407
L18:
  LessInt      r408, r406, r383
  JumpIfFalse  r408, L11
  Index        r409, r382, r406
  Move         r410, r409
  Const        r411, "id"
  Index        r412, r410, r411
  Const        r413, "info_type_id"
  Index        r414, r376, r413
  Equal        r415, r412, r414
  JumpIfFalse  r415, L12
  // join t in title on t.id == cc.movie_id
  IterPrep     r416, r11
  Len          r417, r416
  Const        r418, "id"
  Const        r419, "movie_id"
  // cct1.kind == "crew" &&
  Const        r420, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r421, "kind"
  // cn.country_code != "[us]" &&
  Const        r422, "country_code"
  // it1.info == "countries" &&
  Const        r423, "info"
  // it2.info == "rating" &&
  Const        r424, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r425, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r426, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r427, "note"
  Const        r428, "contains"
  // mc.note.contains("(200") &&
  Const        r429, "note"
  Const        r430, "contains"
  // (mi.info in allowed_countries) &&
  Const        r431, "info"
  // mi_idx.info < 8.5 &&
  Const        r432, "info"
  // t.production_year > 2000
  Const        r433, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r434, "company"
  Const        r435, "name"
  Const        r436, "rating"
  Const        r437, "info"
  Const        r438, "title"
  Const        r439, "title"
  // join t in title on t.id == cc.movie_id
  Const        r441, 0
  Move         r440, r441
L17:
  LessInt      r442, r440, r417
  JumpIfFalse  r442, L12
  Index        r443, r416, r440
  Move         r444, r443
  Const        r445, "id"
  Index        r446, r444, r445
  Const        r447, "movie_id"
  Index        r448, r41, r447
  Equal        r449, r446, r448
  JumpIfFalse  r449, L13
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r450, r7
  Len          r451, r450
  Const        r452, "id"
  Const        r453, "kind_id"
  // cct1.kind == "crew" &&
  Const        r454, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r455, "kind"
  // cn.country_code != "[us]" &&
  Const        r456, "country_code"
  // it1.info == "countries" &&
  Const        r457, "info"
  // it2.info == "rating" &&
  Const        r458, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r459, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r460, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r461, "note"
  Const        r462, "contains"
  // mc.note.contains("(200") &&
  Const        r463, "note"
  Const        r464, "contains"
  // (mi.info in allowed_countries) &&
  Const        r465, "info"
  // mi_idx.info < 8.5 &&
  Const        r466, "info"
  // t.production_year > 2000
  Const        r467, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r468, "company"
  Const        r469, "name"
  Const        r470, "rating"
  Const        r471, "info"
  Const        r472, "title"
  Const        r473, "title"
  // join kt in kind_type on kt.id == t.kind_id
  Const        r475, 0
  Move         r474, r475
L16:
  LessInt      r476, r474, r451
  JumpIfFalse  r476, L13
  Index        r477, r450, r474
  Move         r478, r477
  Const        r479, "id"
  Index        r480, r478, r479
  Const        r481, "kind_id"
  Index        r482, r444, r481
  Equal        r483, r480, r482
  JumpIfFalse  r483, L14
  // cct1.kind == "crew" &&
  Const        r484, "kind"
  Index        r485, r70, r484
  // mi_idx.info < 8.5 &&
  Const        r486, "info"
  Index        r487, r376, r486
  Const        r488, 8.5
  LessFloat    r489, r487, r488
  // t.production_year > 2000
  Const        r490, "production_year"
  Index        r491, r444, r490
  Const        r492, 2000
  Less         r493, r492, r491
  // cct1.kind == "crew" &&
  Const        r494, "crew"
  Equal        r495, r485, r494
  // cct2.kind != "complete+verified" &&
  Const        r496, "kind"
  Index        r497, r104, r496
  Const        r498, "complete+verified"
  NotEqual     r499, r497, r498
  // cn.country_code != "[us]" &&
  Const        r500, "country_code"
  Index        r501, r172, r500
  Const        r502, "[us]"
  NotEqual     r503, r501, r502
  // it1.info == "countries" &&
  Const        r504, "info"
  Index        r505, r342, r504
  Const        r506, "countries"
  Equal        r507, r505, r506
  // it2.info == "rating" &&
  Const        r508, "info"
  Index        r509, r410, r508
  Const        r510, "rating"
  Equal        r511, r509, r510
  Const        r512, "note"
  Index        r513, r138, r512
  // mc.note.contains("(USA)") == false &&
  Const        r514, "(USA)"
  In           r515, r514, r513
  Const        r516, false
  Equal        r517, r515, r516
  // cct1.kind == "crew" &&
  Move         r518, r495
  JumpIfFalse  r518, L15
  Move         r518, r499
  // cct2.kind != "complete+verified" &&
  JumpIfFalse  r518, L15
  Move         r518, r503
  // cn.country_code != "[us]" &&
  JumpIfFalse  r518, L15
  Move         r518, r507
  // it1.info == "countries" &&
  JumpIfFalse  r518, L15
  Move         r518, r511
  // it2.info == "rating" &&
  JumpIfFalse  r518, L15
  // (k.keyword in allowed_keywords) &&
  Const        r519, "keyword"
  Index        r520, r274, r519
  In           r521, r520, r12
  // it2.info == "rating" &&
  Move         r518, r521
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r518, L15
  // (kt.kind in ["movie", "episode"]) &&
  Const        r522, "kind"
  Index        r523, r478, r522
  Const        r524, ["movie", "episode"]
  In           r525, r523, r524
  // (k.keyword in allowed_keywords) &&
  Move         r518, r525
  // (kt.kind in ["movie", "episode"]) &&
  JumpIfFalse  r518, L15
  Move         r518, r517
  // mc.note.contains("(USA)") == false &&
  JumpIfFalse  r518, L15
  Const        r526, "note"
  Index        r527, r138, r526
  // mc.note.contains("(200") &&
  Const        r528, "(200"
  In           r529, r528, r527
  // mc.note.contains("(USA)") == false &&
  Move         r518, r529
  // mc.note.contains("(200") &&
  JumpIfFalse  r518, L15
  // (mi.info in allowed_countries) &&
  Const        r530, "info"
  Index        r531, r308, r530
  In           r532, r531, r13
  // mc.note.contains("(200") &&
  Move         r518, r532
  // (mi.info in allowed_countries) &&
  JumpIfFalse  r518, L15
  Move         r518, r489
  // mi_idx.info < 8.5 &&
  JumpIfFalse  r518, L15
  Move         r518, r493
L15:
  // where (
  JumpIfFalse  r518, L14
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r533, "company"
  Const        r534, "name"
  Index        r535, r172, r534
  Const        r536, "rating"
  Const        r537, "info"
  Index        r538, r376, r537
  Const        r539, "title"
  Const        r540, "title"
  Index        r541, r444, r540
  Move         r542, r533
  Move         r543, r535
  Move         r544, r536
  Move         r545, r538
  Move         r546, r539
  Move         r547, r541
  MakeMap      r548, 3, r542
  // from cc in complete_cast
  Append       r549, r14, r548
  Move         r14, r549
L14:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r550, 1
  Add          r474, r474, r550
  Jump         L16
L13:
  // join t in title on t.id == cc.movie_id
  Const        r551, 1
  Add          r440, r440, r551
  Jump         L17
L12:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r552, 1
  Add          r406, r406, r552
  Jump         L18
L11:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r553, 1
  Add          r372, r372, r553
  Jump         L19
L10:
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r554, 1
  Add          r338, r338, r554
  Jump         L20
L9:
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r555, 1
  Add          r304, r304, r555
  Jump         L21
L8:
  // join k in keyword on k.id == mk.keyword_id
  Const        r556, 1
  Add          r270, r270, r556
  Jump         L22
L7:
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r557, 1
  Add          r236, r236, r557
  Jump         L23
L6:
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r558, 1
  Add          r202, r202, r558
  Jump         L24
L5:
  // join cn in company_name on cn.id == mc.company_id
  Const        r559, 1
  Add          r168, r168, r559
  Jump         L25
L4:
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Const        r560, 1
  Add          r134, r134, r560
  Jump         L26
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r561, 1
  Add          r100, r100, r561
  Jump         L27
L2:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r562, 1
  Add          r66, r66, r562
  Jump         L28
L1:
  // from cc in complete_cast
  Const        r563, 1
  AddInt       r37, r37, r563
  Jump         L29
L0:
  // movie_company: min(from x in matches select x.company),
  Const        r564, "movie_company"
  Const        r565, []
  Const        r566, "company"
  IterPrep     r567, r14
  Len          r568, r567
  Const        r570, 0
  Move         r569, r570
L31:
  LessInt      r571, r569, r568
  JumpIfFalse  r571, L30
  Index        r572, r567, r569
  Move         r573, r572
  Const        r574, "company"
  Index        r575, r573, r574
  Append       r576, r565, r575
  Move         r565, r576
  Const        r577, 1
  AddInt       r569, r569, r577
  Jump         L31
L30:
  Min          r578, r565
  // rating: min(from x in matches select x.rating),
  Const        r579, "rating"
  Const        r580, []
  Const        r581, "rating"
  IterPrep     r582, r14
  Len          r583, r582
  Const        r585, 0
  Move         r584, r585
L33:
  LessInt      r586, r584, r583
  JumpIfFalse  r586, L32
  Index        r587, r582, r584
  Move         r573, r587
  Const        r588, "rating"
  Index        r589, r573, r588
  Append       r590, r580, r589
  Move         r580, r590
  Const        r591, 1
  AddInt       r584, r584, r591
  Jump         L33
L32:
  Min          r592, r580
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Const        r593, "complete_euro_dark_movie"
  Const        r594, []
  Const        r595, "title"
  IterPrep     r596, r14
  Len          r597, r596
  Const        r599, 0
  Move         r598, r599
L35:
  LessInt      r600, r598, r597
  JumpIfFalse  r600, L34
  Index        r601, r596, r598
  Move         r573, r601
  Const        r602, "title"
  Index        r603, r573, r602
  Append       r604, r594, r603
  Move         r594, r604
  Const        r605, 1
  AddInt       r598, r598, r605
  Jump         L35
L34:
  Min          r606, r594
  // movie_company: min(from x in matches select x.company),
  Move         r607, r564
  Move         r608, r578
  // rating: min(from x in matches select x.rating),
  Move         r609, r579
  Move         r610, r592
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Move         r611, r593
  Move         r612, r606
  // let result = {
  MakeMap      r613, 3, r607
  // json(result)
  JSON         r613
  // expect result == {
  Const        r614, {"complete_euro_dark_movie": "Dark Euro Film", "movie_company": "Euro Films Ltd.", "rating": 7.2}
  Equal        r615, r613, r614
  Expect       r615
  Return       r0
