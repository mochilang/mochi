func main (regs=52)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "crew"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "partial"}]
L7:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
L27:
  // let company_name = [
  Const        r2, [{"country_code": "[gb]", "id": 1, "name": "Euro Films Ltd."}, {"country_code": "[us]", "id": 2, "name": "US Studios"}]
L16:
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
L29:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": "production (2005) (UK)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "production (USA)"}]
L5:
  // let info_type = [
  Const        r5, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
L21:
  // let keyword = [
  Const        r6, [{"id": 1, "keyword": "blood"}, {"id": 2, "keyword": "romance"}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "episode"}]
  // let movie_info = [
  Const        r8, [{"info": "Germany", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}]
L25:
  // let movie_info_idx = [
  Const        r9, [{"info": 7.2, "info_type_id": 2, "movie_id": 1}, {"info": 9, "info_type_id": 2, "movie_id": 2}]
L28:
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let title = [
  Const        r11, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Dark Euro Film"}, {"id": 2, "kind_id": 1, "production_year": 2005, "title": "US Film"}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r12, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  // from cc in complete_cast
  Const        r14, []
  // cct1.kind == "crew" &&
  Const        r15, "kind"
  // cn.country_code != "[us]" &&
  Const        r16, "country_code"
  // it1.info == "countries" &&
  Const        r17, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r18, "keyword"
L14:
  // mc.note.contains("(USA)") == false &&
  Const        r19, "note"
L22:
  // t.production_year > 2000
  Const        r20, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r21, "company"
  Const        r22, "name"
L12:
  Const        r23, "rating"
  Const        r24, "title"
  // from cc in complete_cast
  IterPrep     r25, r1
L6:
  Len          r1, r25
L11:
  Const        r26, 0
L23:
  Move         r27, r26
  LessInt      r28, r27, r1
  JumpIfFalse  r28, L0
L2:
  Index        r28, r25, r27
L18:
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r25, r0
L20:
  Len          r1, r25
L17:
  Const        r29, "id"
L13:
  Const        r30, "subject_id"
  Move         r31, r26
L30:
  LessInt      r32, r31, r1
  JumpIfFalse  r32, L1
  Index        r32, r25, r31
  Index        r31, r32, r29
  Index        r25, r28, r30
L26:
  Equal        r30, r31, r25
  JumpIfFalse  r30, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r30, r0
  Len          r25, r30
  Const        r31, "status_id"
L24:
  Move         r1, r26
L8:
  LessInt      r33, r1, r25
  JumpIfFalse  r33, L2
  Index        r25, r30, r1
  Index        r30, r25, r29
  Index        r34, r28, r31
  Equal        r31, r30, r34
  JumpIfFalse  r31, L3
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  IterPrep     r31, r4
  Len          r4, r31
  Const        r34, "movie_id"
  Move         r30, r26
  LessInt      r35, r30, r4
  JumpIfFalse  r35, L3
  Index        r35, r31, r30
  Index        r31, r35, r34
  Index        r4, r28, r34
  Equal        r36, r31, r4
  JumpIfFalse  r36, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r36, r2
  Len          r2, r36
  Const        r4, "company_id"
  Move         r31, r26
  LessInt      r37, r31, r2
  JumpIfFalse  r37, L4
  Index        r37, r36, r31
  Index        r36, r37, r29
  Index        r2, r35, r4
  Equal        r4, r36, r2
  JumpIfFalse  r4, L5
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r4, r3
  Len          r3, r4
  Const        r2, "company_type_id"
  Move         r36, r26
  LessInt      r38, r36, r3
  JumpIfFalse  r38, L5
  Index        r38, r4, r36
  Index        r4, r38, r29
  Index        r38, r35, r2
  Equal        r2, r4, r38
  JumpIfFalse  r2, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r2, r10
  Len          r10, r2
  Move         r38, r26
  LessInt      r3, r38, r10
  JumpIfFalse  r3, L6
  Index        r3, r2, r38
  Index        r2, r3, r34
  Index        r10, r28, r34
  Equal        r39, r2, r10
  JumpIfFalse  r39, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r39, r6
  Len          r6, r39
  Const        r2, "keyword_id"
  Move         r40, r26
  LessInt      r41, r40, r6
  JumpIfFalse  r41, L5
  Index        r41, r39, r40
  Index        r39, r41, r29
  Index        r6, r3, r2
  Equal        r2, r39, r6
  JumpIfFalse  r2, L7
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r6, r8
  Len          r8, r6
  Move         r39, r26
  LessInt      r3, r39, r8
  JumpIfFalse  r3, L7
  Index        r3, r6, r39
  Index        r6, r3, r34
  Index        r8, r28, r34
  Equal        r42, r6, r8
  JumpIfFalse  r42, L8
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r42, r5
  Len          r8, r42
  Const        r6, "info_type_id"
  Move         r43, r26
  LessInt      r44, r43, r8
  JumpIfFalse  r44, L8
  Index        r44, r42, r43
  Index        r8, r44, r29
  Index        r45, r3, r6
  Equal        r46, r8, r45
  JumpIfFalse  r46, L9
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r46, r9
  Len          r9, r46
  Move         r45, r26
  LessInt      r8, r45, r9
  JumpIfFalse  r8, L9
  Index        r8, r46, r45
  Index        r46, r8, r34
  Index        r47, r28, r34
  Equal        r48, r46, r47
  JumpIfFalse  r48, L10
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r48, r5
  Len          r5, r48
  Move         r47, r26
  LessInt      r46, r47, r5
  JumpIfFalse  r46, L10
  Index        r46, r48, r47
  Index        r48, r46, r29
  Index        r5, r8, r6
  Equal        r6, r48, r5
  JumpIfFalse  r6, L11
  // join t in title on t.id == cc.movie_id
  IterPrep     r6, r11
  Len          r11, r6
  Move         r5, r26
  LessInt      r48, r5, r11
  JumpIfFalse  r48, L11
  Index        r11, r6, r5
  Index        r6, r11, r29
  Index        r49, r28, r34
  Equal        r34, r6, r49
  JumpIfFalse  r34, L12
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r34, r7
  Len          r7, r34
  Const        r49, "kind_id"
  Move         r6, r26
  LessInt      r28, r6, r7
  JumpIfFalse  r28, L12
  Index        r7, r34, r6
  Index        r34, r7, r29
  Index        r29, r11, r49
  Equal        r49, r34, r29
  JumpIfFalse  r49, L5
  // cct1.kind == "crew" &&
  Index        r49, r32, r15
  // mi_idx.info < 8.5 &&
  Index        r32, r8, r17
  Const        r29, 8.5
  LessFloat    r34, r32, r29
  // t.production_year > 2000
  Index        r29, r11, r20
  Const        r20, 2000
  Less         r32, r20, r29
  // cct1.kind == "crew" &&
  Const        r29, "crew"
  Equal        r50, r49, r29
  // cct2.kind != "complete+verified" &&
  Index        r29, r25, r15
  Const        r25, "complete+verified"
  NotEqual     r49, r29, r25
  // cn.country_code != "[us]" &&
  Index        r25, r37, r16
  Const        r16, "[us]"
  NotEqual     r29, r25, r16
  // it1.info == "countries" &&
  Index        r16, r44, r17
  Const        r44, "countries"
  Equal        r25, r16, r44
  // it2.info == "rating" &&
  Index        r44, r46, r17
  Equal        r46, r44, r23
  Index        r44, r35, r19
  // mc.note.contains("(USA)") == false &&
  Const        r16, "(USA)"
  In           r51, r16, r44
  Const        r16, false
  Equal        r44, r51, r16
  // cct1.kind == "crew" &&
  Move         r16, r50
  JumpIfFalse  r16, L13
  // cct2.kind != "complete+verified" &&
  Move         r16, r49
  JumpIfFalse  r16, L14
  // cn.country_code != "[us]" &&
  Move         r16, r29
  JumpIfFalse  r16, L15
L15:
  // it1.info == "countries" &&
  Move         r16, r25
  JumpIfFalse  r16, L16
  // it2.info == "rating" &&
  Move         r16, r46
  JumpIfFalse  r16, L17
  // (k.keyword in allowed_keywords) &&
  Index        r16, r41, r18
  In           r41, r16, r12
  JumpIfFalse  r41, L16
  // (kt.kind in ["movie", "episode"]) &&
  Index        r41, r7, r15
  Const        r7, ["movie", "episode"]
  In           r15, r41, r7
  JumpIfFalse  r15, L18
  // mc.note.contains("(USA)") == false &&
  Move         r15, r44
  JumpIfFalse  r15, L19
  Index        r15, r35, r19
  // mc.note.contains("(200") &&
  Const        r35, "(200"
  In           r19, r35, r15
L19:
  JumpIfFalse  r19, L20
  // (mi.info in allowed_countries) &&
  Index        r19, r3, r17
  In           r3, r19, r13
  JumpIfFalse  r3, L7
  // mi_idx.info < 8.5 &&
  Move         r3, r34
  JumpIfFalse  r3, L21
  Move         r3, r32
  // where (
  JumpIfFalse  r3, L5
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Move         r3, r21
  Index        r32, r37, r22
  Move         r22, r23
  Index        r34, r8, r17
  Move         r8, r24
  Index        r17, r11, r24
  Move         r11, r3
  Move         r3, r32
  Move         r32, r22
  Move         r22, r34
  Move         r34, r8
  Move         r8, r17
  MakeMap      r17, 3, r11
  // from cc in complete_cast
  Append       r14, r14, r17
  // join kt in kind_type on kt.id == t.kind_id
  Const        r17, 1
  Add          r6, r6, r17
  Jump         L22
  // join t in title on t.id == cc.movie_id
  Add          r5, r5, r17
  Jump         L23
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r47, r47, r17
  Jump         L8
L10:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Add          r45, r45, r17
  Jump         L24
L9:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r43, r43, r17
  Jump         L25
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Add          r39, r39, r17
  Jump         L26
  // join k in keyword on k.id == mk.keyword_id
  Add          r40, r40, r17
  Jump         L27
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Add          r38, r38, r17
  Jump         L28
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r36, r36, r17
  Jump         L29
  // join cn in company_name on cn.id == mc.company_id
  Add          r31, r31, r17
  Jump         L30
L4:
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Add          r30, r30, r17
  Jump         L22
L3:
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Add          r1, r1, r17
  Jump         L20
L1:
  // from cc in complete_cast
  AddInt       r27, r27, r17
  Jump         L6
L0:
  // movie_company: min(from x in matches select x.company),
  Const        r20, "movie_company"
  Const        r33, []
  IterPrep     r1, r14
  Len          r27, r1
  Move         r28, r26
L32:
  LessInt      r6, r28, r27
  JumpIfFalse  r6, L31
  Index        r6, r1, r28
  Index        r1, r6, r21
  Append       r33, r33, r1
  AddInt       r28, r28, r17
  Jump         L32
L31:
  Min          r1, r33
  // rating: min(from x in matches select x.rating),
  Move         r33, r23
  Const        r28, []
  IterPrep     r21, r14
  Len          r27, r21
  Move         r48, r26
L34:
  LessInt      r5, r48, r27
  JumpIfFalse  r5, L33
  Index        r6, r21, r48
  Index        r5, r6, r23
  Append       r28, r28, r5
  AddInt       r48, r48, r17
  Jump         L34
L33:
  Min          r5, r28
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Const        r28, "complete_euro_dark_movie"
  Const        r48, []
  IterPrep     r23, r14
  Len          r14, r23
  Move         r27, r26
L36:
  LessInt      r26, r27, r14
  JumpIfFalse  r26, L35
  Index        r6, r23, r27
  Index        r26, r6, r24
  Append       r48, r48, r26
  AddInt       r27, r27, r17
  Jump         L36
L35:
  Min          r26, r48
  // movie_company: min(from x in matches select x.company),
  Move         r48, r20
  Move         r20, r1
  // rating: min(from x in matches select x.rating),
  Move         r1, r33
  Move         r33, r5
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Move         r5, r28
  Move         r28, r26
  // let result = {
  MakeMap      r26, 3, r48
  // json(result)
  JSON         r26
  // expect result == {
  Const        r28, {"complete_euro_dark_movie": "Dark Euro Film", "movie_company": "Euro Films Ltd.", "rating": 7.2}
  Equal        r5, r26, r28
  Expect       r5
  Return       r0
