func main (regs=53)
  // let comp_cast_type = [
  Const        r0, [{"id": 1, "kind": "crew"}, {"id": 2, "kind": "complete+verified"}, {"id": 3, "kind": "partial"}]
L3:
  // let complete_cast = [
  Const        r1, [{"movie_id": 1, "status_id": 3, "subject_id": 1}, {"movie_id": 2, "status_id": 2, "subject_id": 1}]
  // let company_name = [
  Const        r2, [{"country_code": "[gb]", "id": 1, "name": "Euro Films Ltd."}, {"country_code": "[us]", "id": 2, "name": "US Studios"}]
  // let company_type = [
  Const        r3, [{"id": 1}, {"id": 2}]
L15:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "company_type_id": 1, "movie_id": 1, "note": "production (2005) (UK)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 2, "note": "production (USA)"}]
  // let info_type = [
  Const        r5, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
L16:
  // let keyword = [
  Const        r6, [{"id": 1, "keyword": "blood"}, {"id": 2, "keyword": "romance"}]
  // let kind_type = [
  Const        r7, [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "episode"}]
L11:
  // let movie_info = [
  Const        r8, [{"info": "Germany", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}]
L9:
  // let movie_info_idx = [
  Const        r9, [{"info": 7.2, "info_type_id": 2, "movie_id": 1}, {"info": 9, "info_type_id": 2, "movie_id": 2}]
L21:
  // let movie_keyword = [
  Const        r10, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let title = [
  Const        r11, [{"id": 1, "kind_id": 1, "production_year": 2005, "title": "Dark Euro Film"}, {"id": 2, "kind_id": 1, "production_year": 2005, "title": "US Film"}]
L13:
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r12, ["murder", "murder-in-title", "blood", "violence"]
L5:
  // let allowed_countries = [
  Const        r13, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Danish", "Norwegian", "German", "USA", "American"]
  // from cc in complete_cast
  Const        r14, []
L23:
  // cct1.kind == "crew" &&
  Const        r15, "kind"
L20:
  // cct2.kind != "complete+verified" &&
  Const        r16, "kind"
  // cn.country_code != "[us]" &&
  Const        r17, "country_code"
L0:
  // it1.info == "countries" &&
  Const        r18, "info"
L19:
  // it2.info == "rating" &&
  Const        r19, "info"
L18:
  // (k.keyword in allowed_keywords) &&
  Const        r20, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r21, "kind"
L22:
  // mc.note.contains("(USA)") == false &&
  Const        r22, "note"
L10:
  Const        r23, "contains"
L2:
  // mc.note.contains("(200") &&
  Const        r24, "note"
  Const        r25, "contains"
L24:
  // (mi.info in allowed_countries) &&
  Const        r26, "info"
  // mi_idx.info < 8.5 &&
  Const        r27, "info"
  // t.production_year > 2000
  Const        r28, "production_year"
L6:
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r29, "company"
L14:
  Const        r30, "name"
L17:
  Const        r31, "rating"
  Const        r32, "info"
L4:
  Const        r33, "title"
  Const        r34, "title"
L25:
  // from cc in complete_cast
  IterPrep     r35, r1
L8:
  Len          r36, r35
  Const        r37, 0
L1:
  LessInt      r38, r37, r36
L12:
  JumpIfFalse  r38, L0
  Index        r39, r35, r37
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  IterPrep     r40, r0
  Len          r15, r40
L26:
  Const        r16, "id"
  Const        r17, "subject_id"
L7:
  // cct1.kind == "crew" &&
  Const        r18, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r19, "kind"
  // cn.country_code != "[us]" &&
  Const        r20, "country_code"
  // it1.info == "countries" &&
  Const        r21, "info"
  // it2.info == "rating" &&
  Const        r22, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r23, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r24, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r25, "note"
  Const        r26, "contains"
  // mc.note.contains("(200") &&
  Const        r27, "note"
  Const        r28, "contains"
  // (mi.info in allowed_countries) &&
  Const        r29, "info"
  // mi_idx.info < 8.5 &&
  Const        r30, "info"
  // t.production_year > 2000
  Const        r31, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r32, "company"
  Const        r33, "name"
  Const        r34, "rating"
  Const        r1, "info"
  Const        r36, "title"
  Const        r38, "title"
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r35, 0
  LessInt      r16, r35, r15
  JumpIfFalse  r16, L1
  Index        r17, r40, r35
  Const        r18, "id"
  Index        r19, r17, r18
  Const        r20, "subject_id"
  Index        r21, r39, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  IterPrep     r23, r0
  Len          r24, r23
  Const        r25, "id"
  Const        r26, "status_id"
  // cct1.kind == "crew" &&
  Const        r27, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r28, "kind"
  // cn.country_code != "[us]" &&
  Const        r29, "country_code"
  // it1.info == "countries" &&
  Const        r30, "info"
  // it2.info == "rating" &&
  Const        r31, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r32, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r33, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r34, "note"
  Const        r1, "contains"
  // mc.note.contains("(200") &&
  Const        r36, "note"
  Const        r38, "contains"
  // (mi.info in allowed_countries) &&
  Const        r15, "info"
  // mi_idx.info < 8.5 &&
  Const        r16, "info"
  // t.production_year > 2000
  Const        r40, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r18, "company"
  Const        r20, "name"
  Const        r19, "rating"
  Const        r21, "info"
  Const        r22, "title"
  Const        r25, "title"
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r26, 0
  LessInt      r27, r26, r24
  JumpIfFalse  r27, L2
  Index        r28, r23, r26
  Const        r29, "id"
  Index        r30, r28, r29
  Const        r31, "status_id"
  Index        r32, r39, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L3
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  IterPrep     r34, r4
  Len          r1, r34
  Const        r36, "movie_id"
  Const        r38, "movie_id"
  // cct1.kind == "crew" &&
  Const        r15, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r16, "kind"
  // cn.country_code != "[us]" &&
  Const        r40, "country_code"
  // it1.info == "countries" &&
  Const        r18, "info"
  // it2.info == "rating" &&
  Const        r20, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r19, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r21, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r22, "note"
  Const        r25, "contains"
  // mc.note.contains("(200") &&
  Const        r24, "note"
  Const        r27, "contains"
  // (mi.info in allowed_countries) &&
  Const        r23, "info"
  // mi_idx.info < 8.5 &&
  Const        r29, "info"
  // t.production_year > 2000
  Const        r31, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r30, "company"
  Const        r32, "name"
  Const        r33, "rating"
  Const        r4, "info"
  Const        r36, "title"
  Const        r38, "title"
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Const        r15, 0
  LessInt      r16, r15, r1
  JumpIfFalse  r16, L3
  Index        r40, r34, r15
  Const        r18, "movie_id"
  Index        r20, r40, r18
  Const        r19, "movie_id"
  Index        r21, r39, r19
  Equal        r22, r20, r21
  JumpIfFalse  r22, L4
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r25, r2
  Len          r24, r25
  Const        r27, "id"
  Const        r23, "company_id"
  // cct1.kind == "crew" &&
  Const        r29, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r31, "kind"
  // cn.country_code != "[us]" &&
  Const        r30, "country_code"
  // it1.info == "countries" &&
  Const        r32, "info"
  // it2.info == "rating" &&
  Const        r33, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r4, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r36, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r38, "note"
  Const        r1, "contains"
  // mc.note.contains("(200") &&
  Const        r16, "note"
  Const        r34, "contains"
  // (mi.info in allowed_countries) &&
  Const        r18, "info"
  // mi_idx.info < 8.5 &&
  Const        r19, "info"
  // t.production_year > 2000
  Const        r20, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r21, "company"
  Const        r22, "name"
  Const        r2, "rating"
  Const        r27, "info"
  Const        r23, "title"
  Const        r29, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r31, 0
  LessInt      r30, r31, r24
  JumpIfFalse  r30, L4
  Index        r32, r25, r31
  Const        r33, "id"
  Index        r4, r32, r33
  Const        r36, "company_id"
  Index        r38, r40, r36
  Equal        r1, r4, r38
  JumpIfFalse  r1, L5
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r16, r3
  Len          r34, r16
  Const        r18, "id"
  Const        r19, "company_type_id"
  // cct1.kind == "crew" &&
  Const        r20, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r21, "kind"
  // cn.country_code != "[us]" &&
  Const        r22, "country_code"
  // it1.info == "countries" &&
  Const        r2, "info"
  // it2.info == "rating" &&
  Const        r27, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r23, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r29, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r24, "note"
  Const        r30, "contains"
  // mc.note.contains("(200") &&
  Const        r25, "note"
  Const        r33, "contains"
  // (mi.info in allowed_countries) &&
  Const        r36, "info"
  // mi_idx.info < 8.5 &&
  Const        r4, "info"
  // t.production_year > 2000
  Const        r38, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r1, "company"
  Const        r3, "name"
  Const        r18, "rating"
  Const        r19, "info"
  Const        r20, "title"
  Const        r21, "title"
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r22, 0
  LessInt      r2, r22, r34
  JumpIfFalse  r2, L5
  Index        r27, r16, r22
  Const        r23, "id"
  Index        r29, r27, r23
  Const        r24, "company_type_id"
  Index        r30, r40, r24
  Equal        r25, r29, r30
  JumpIfFalse  r25, L6
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  IterPrep     r33, r10
  Len          r36, r33
  Const        r4, "movie_id"
  Const        r38, "movie_id"
  // cct1.kind == "crew" &&
  Const        r1, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r3, "kind"
  // cn.country_code != "[us]" &&
  Const        r18, "country_code"
  // it1.info == "countries" &&
  Const        r19, "info"
  // it2.info == "rating" &&
  Const        r20, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r21, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r34, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r2, "note"
  Const        r16, "contains"
  // mc.note.contains("(200") &&
  Const        r27, "note"
  Const        r23, "contains"
  // (mi.info in allowed_countries) &&
  Const        r24, "info"
  // mi_idx.info < 8.5 &&
  Const        r29, "info"
  // t.production_year > 2000
  Const        r30, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r25, "company"
  Const        r10, "name"
  Const        r4, "rating"
  Const        r38, "info"
  Const        r1, "title"
  Const        r3, "title"
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r18, 0
  LessInt      r19, r18, r36
  JumpIfFalse  r19, L6
  Index        r20, r33, r18
  Const        r21, "movie_id"
  Index        r34, r20, r21
  Const        r2, "movie_id"
  Index        r16, r39, r2
  Equal        r27, r34, r16
  JumpIfFalse  r27, L7
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r23, r6
  Len          r24, r23
  Const        r29, "id"
  Const        r30, "keyword_id"
  // cct1.kind == "crew" &&
  Const        r25, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r10, "kind"
  // cn.country_code != "[us]" &&
  Const        r4, "country_code"
  // it1.info == "countries" &&
  Const        r38, "info"
  // it2.info == "rating" &&
  Const        r1, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r3, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r36, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r19, "note"
  Const        r33, "contains"
  // mc.note.contains("(200") &&
  Const        r21, "note"
  Const        r2, "contains"
  // (mi.info in allowed_countries) &&
  Const        r34, "info"
  // mi_idx.info < 8.5 &&
  Const        r16, "info"
  // t.production_year > 2000
  Const        r27, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r6, "company"
  Const        r29, "name"
  Const        r30, "rating"
  Const        r25, "info"
  Const        r10, "title"
  Const        r4, "title"
  // join k in keyword on k.id == mk.keyword_id
  Const        r38, 0
  LessInt      r1, r38, r24
  JumpIfFalse  r1, L7
  Index        r3, r23, r38
  Const        r36, "id"
  Index        r19, r3, r36
  Const        r33, "keyword_id"
  Index        r21, r20, r33
  Equal        r2, r19, r21
  JumpIfFalse  r2, L8
  // join mi in movie_info on mi.movie_id == cc.movie_id
  IterPrep     r34, r8
  Len          r16, r34
  Const        r27, "movie_id"
  Const        r6, "movie_id"
  // cct1.kind == "crew" &&
  Const        r29, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r30, "kind"
  // cn.country_code != "[us]" &&
  Const        r25, "country_code"
  // it1.info == "countries" &&
  Const        r10, "info"
  // it2.info == "rating" &&
  Const        r4, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r24, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r1, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r23, "note"
  Const        r36, "contains"
  // mc.note.contains("(200") &&
  Const        r20, "note"
  Const        r33, "contains"
  // (mi.info in allowed_countries) &&
  Const        r19, "info"
  // mi_idx.info < 8.5 &&
  Const        r21, "info"
  // t.production_year > 2000
  Const        r2, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r8, "company"
  Const        r27, "name"
  Const        r6, "rating"
  Const        r29, "info"
  Const        r30, "title"
  Const        r25, "title"
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r10, 0
  LessInt      r4, r10, r16
  JumpIfFalse  r4, L8
  Index        r24, r34, r10
  Const        r1, "movie_id"
  Index        r23, r24, r1
  Const        r36, "movie_id"
  Index        r20, r39, r36
  Equal        r33, r23, r20
  JumpIfFalse  r33, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r19, r5
  Len          r21, r19
  Const        r2, "id"
  Const        r8, "info_type_id"
  // cct1.kind == "crew" &&
  Const        r27, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r6, "kind"
  // cn.country_code != "[us]" &&
  Const        r29, "country_code"
  // it1.info == "countries" &&
  Const        r30, "info"
  // it2.info == "rating" &&
  Const        r25, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r16, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r4, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r34, "note"
  Const        r1, "contains"
  // mc.note.contains("(200") &&
  Const        r36, "note"
  Const        r23, "contains"
  // (mi.info in allowed_countries) &&
  Const        r20, "info"
  // mi_idx.info < 8.5 &&
  Const        r33, "info"
  // t.production_year > 2000
  Const        r2, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r8, "company"
  Const        r27, "name"
  Const        r6, "rating"
  Const        r29, "info"
  Const        r30, "title"
  Const        r25, "title"
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r16, 0
  LessInt      r4, r16, r21
  JumpIfFalse  r4, L9
  Index        r34, r19, r16
  Const        r1, "id"
  Index        r36, r34, r1
  Const        r23, "info_type_id"
  Index        r20, r24, r23
  Equal        r33, r36, r20
  JumpIfFalse  r33, L10
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  IterPrep     r2, r9
  Len          r8, r2
  Const        r27, "movie_id"
  Const        r6, "movie_id"
  // cct1.kind == "crew" &&
  Const        r29, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r30, "kind"
  // cn.country_code != "[us]" &&
  Const        r25, "country_code"
  // it1.info == "countries" &&
  Const        r21, "info"
  // it2.info == "rating" &&
  Const        r4, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r19, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r1, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r23, "note"
  Const        r36, "contains"
  // mc.note.contains("(200") &&
  Const        r20, "note"
  Const        r33, "contains"
  // (mi.info in allowed_countries) &&
  Const        r9, "info"
  // mi_idx.info < 8.5 &&
  Const        r27, "info"
  // t.production_year > 2000
  Const        r6, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r29, "company"
  Const        r30, "name"
  Const        r25, "rating"
  Const        r21, "info"
  Const        r4, "title"
  Const        r19, "title"
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r1, 0
  LessInt      r23, r1, r8
  JumpIfFalse  r23, L10
  Index        r36, r2, r1
  Const        r20, "movie_id"
  Index        r33, r36, r20
  Const        r9, "movie_id"
  Index        r27, r39, r9
  Equal        r6, r33, r27
  JumpIfFalse  r6, L11
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r29, r5
  Len          r30, r29
  Const        r25, "id"
  Const        r21, "info_type_id"
  // cct1.kind == "crew" &&
  Const        r4, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r19, "kind"
  // cn.country_code != "[us]" &&
  Const        r8, "country_code"
  // it1.info == "countries" &&
  Const        r23, "info"
  // it2.info == "rating" &&
  Const        r2, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r20, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r9, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r33, "note"
  Const        r27, "contains"
  // mc.note.contains("(200") &&
  Const        r6, "note"
  Const        r5, "contains"
  // (mi.info in allowed_countries) &&
  Const        r25, "info"
  // mi_idx.info < 8.5 &&
  Const        r21, "info"
  // t.production_year > 2000
  Const        r4, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r19, "company"
  Const        r8, "name"
  Const        r23, "rating"
  Const        r2, "info"
  Const        r20, "title"
  Const        r9, "title"
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r33, 0
  LessInt      r27, r33, r30
  JumpIfFalse  r27, L11
  Index        r6, r29, r33
  Const        r5, "id"
  Index        r25, r6, r5
  Const        r21, "info_type_id"
  Index        r4, r36, r21
  Equal        r19, r25, r4
  JumpIfFalse  r19, L12
  // join t in title on t.id == cc.movie_id
  IterPrep     r8, r11
  Len          r23, r8
  Const        r2, "id"
  Const        r20, "movie_id"
  // cct1.kind == "crew" &&
  Const        r9, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r30, "kind"
  // cn.country_code != "[us]" &&
  Const        r27, "country_code"
  // it1.info == "countries" &&
  Const        r29, "info"
  // it2.info == "rating" &&
  Const        r5, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r21, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r25, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r4, "note"
  Const        r19, "contains"
  // mc.note.contains("(200") &&
  Const        r11, "note"
  Const        r2, "contains"
  // (mi.info in allowed_countries) &&
  Const        r20, "info"
  // mi_idx.info < 8.5 &&
  Const        r9, "info"
  // t.production_year > 2000
  Const        r30, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r27, "company"
  Const        r29, "name"
  Const        r5, "rating"
  Const        r21, "info"
  Const        r25, "title"
  Const        r4, "title"
  // join t in title on t.id == cc.movie_id
  Const        r19, 0
  LessInt      r11, r19, r23
  JumpIfFalse  r11, L12
  Index        r2, r8, r19
  Const        r20, "id"
  Index        r9, r2, r20
  Const        r30, "movie_id"
  Index        r27, r39, r30
  Equal        r29, r9, r27
  JumpIfFalse  r29, L13
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r5, r7
  Len          r21, r5
  Const        r25, "id"
  Const        r4, "kind_id"
  // cct1.kind == "crew" &&
  Const        r23, "kind"
  // cct2.kind != "complete+verified" &&
  Const        r11, "kind"
  // cn.country_code != "[us]" &&
  Const        r8, "country_code"
  // it1.info == "countries" &&
  Const        r20, "info"
  // it2.info == "rating" &&
  Const        r39, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r30, "keyword"
  // (kt.kind in ["movie", "episode"]) &&
  Const        r9, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r27, "note"
  Const        r29, "contains"
  // mc.note.contains("(200") &&
  Const        r7, "note"
  Const        r25, "contains"
  // (mi.info in allowed_countries) &&
  Const        r4, "info"
  // mi_idx.info < 8.5 &&
  Const        r23, "info"
  // t.production_year > 2000
  Const        r11, "production_year"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r8, "company"
  Const        r20, "name"
  Const        r39, "rating"
  Const        r30, "info"
  Const        r9, "title"
  Const        r27, "title"
  // join kt in kind_type on kt.id == t.kind_id
  Const        r29, 0
  LessInt      r7, r29, r21
  JumpIfFalse  r7, L13
  Index        r25, r5, r29
  Const        r4, "id"
  Index        r23, r25, r4
  Const        r11, "kind_id"
  Index        r8, r2, r11
  Equal        r20, r23, r8
  JumpIfFalse  r20, L14
  // cct1.kind == "crew" &&
  Const        r39, "kind"
  Index        r30, r17, r39
  // mi_idx.info < 8.5 &&
  Const        r9, "info"
  Index        r27, r36, r9
  Const        r21, 8.5
  LessFloat    r7, r27, r21
  // t.production_year > 2000
  Const        r5, "production_year"
  Index        r4, r2, r5
  Const        r11, 2000
  Less         r23, r11, r4
  // cct1.kind == "crew" &&
  Const        r8, "crew"
  Equal        r20, r30, r8
  // cct2.kind != "complete+verified" &&
  Const        r17, "kind"
  Index        r39, r28, r17
  Const        r9, "complete+verified"
  NotEqual     r27, r39, r9
  // cn.country_code != "[us]" &&
  Const        r21, "country_code"
  Index        r5, r32, r21
  Const        r4, "[us]"
  NotEqual     r11, r5, r4
  // it1.info == "countries" &&
  Const        r30, "info"
  Index        r8, r34, r30
  Const        r28, "countries"
  Equal        r17, r8, r28
  // it2.info == "rating" &&
  Const        r39, "info"
  Index        r9, r6, r39
  Const        r21, "rating"
  Equal        r5, r9, r21
  Const        r4, "note"
  Index        r34, r40, r4
  // mc.note.contains("(USA)") == false &&
  Const        r30, "(USA)"
  In           r8, r30, r34
  Const        r28, false
  Equal        r6, r8, r28
  // cct1.kind == "crew" &&
  Move         r39, r20
  JumpIfFalse  r39, L9
  // cct2.kind != "complete+verified" &&
  Move         r9, r27
  JumpIfFalse  r9, L15
  // cn.country_code != "[us]" &&
  Move         r21, r11
  JumpIfFalse  r21, L14
  // it1.info == "countries" &&
  Move         r4, r17
  JumpIfFalse  r4, L9
  // it2.info == "rating" &&
  Move         r34, r5
  JumpIfFalse  r34, L16
  // (k.keyword in allowed_keywords) &&
  Const        r30, "keyword"
  Index        r8, r3, r30
  In           r28, r8, r12
  JumpIfFalse  r28, L15
  // (kt.kind in ["movie", "episode"]) &&
  Const        r20, "kind"
  Index        r39, r25, r20
  Const        r27, ["movie", "episode"]
  In           r9, r39, r27
  JumpIfFalse  r9, L17
  // mc.note.contains("(USA)") == false &&
  Move         r11, r6
  JumpIfFalse  r11, L13
  Const        r21, "note"
  Index        r17, r40, r21
  // mc.note.contains("(200") &&
  Const        r4, "(200"
  In           r5, r4, r17
  JumpIfFalse  r5, L18
  // (mi.info in allowed_countries) &&
  Const        r34, "info"
  Index        r3, r24, r34
  In           r30, r3, r13
  JumpIfFalse  r30, L12
  // mi_idx.info < 8.5 &&
  Move         r12, r7
  JumpIfFalse  r12, L16
  Move         r12, r23
  // where (
  JumpIfFalse  r12, L14
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r8, "company"
  Const        r28, "name"
  Index        r25, r32, r28
  Const        r20, "rating"
  Const        r39, "info"
  Index        r27, r36, r39
  Const        r9, "title"
  Const        r6, "title"
  Index        r11, r2, r6
  Move         r41, r8
  Move         r42, r25
  Move         r43, r20
  Move         r44, r27
  Move         r45, r9
  Move         r46, r11
  MakeMap      r40, 3, r41
  // from cc in complete_cast
  Append       r14, r14, r40
  // join kt in kind_type on kt.id == t.kind_id
  Const        r21, 1
  Add          r29, r29, r21
  Jump         L6
  // join t in title on t.id == cc.movie_id
  Const        r17, 1
  Add          r19, r19, r17
  Jump         L19
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r4, 1
  Add          r33, r33, r4
  Jump         L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == cc.movie_id
  Const        r5, 1
  Add          r1, r1, r5
  Jump         L3
  // join it1 in info_type on it1.id == mi.info_type_id
  Const        r24, 1
  Add          r16, r16, r24
  Jump         L20
  // join mi in movie_info on mi.movie_id == cc.movie_id
  Const        r34, 1
  Add          r10, r10, r34
  Jump         L21
  // join k in keyword on k.id == mk.keyword_id
  Const        r13, 1
  Add          r38, r38, r13
  Jump         L1
  // join mk in movie_keyword on mk.movie_id == cc.movie_id
  Const        r3, 1
  Add          r18, r18, r3
  Jump         L0
  // join ct in company_type on ct.id == mc.company_type_id
  Const        r30, 1
  Add          r22, r22, r30
  Jump         L22
  // join cn in company_name on cn.id == mc.company_id
  Const        r7, 1
  Add          r31, r31, r7
  Jump         L17
  // join mc in movie_companies on mc.movie_id == cc.movie_id
  Const        r23, 1
  Add          r15, r15, r23
  Jump         L23
  // join cct2 in comp_cast_type on cct2.id == cc.status_id
  Const        r12, 1
  Add          r26, r26, r12
  Jump         L24
  // join cct1 in comp_cast_type on cct1.id == cc.subject_id
  Const        r32, 1
  Add          r35, r35, r32
  Jump         L25
  // from cc in complete_cast
  Const        r28, 1
  AddInt       r37, r37, r28
  Jump         L8
  // movie_company: min(from x in matches select x.company),
  Const        r39, "movie_company"
  Const        r2, []
  Const        r6, "company"
  IterPrep     r8, r14
  Len          r25, r8
  Const        r20, 0
  LessInt      r27, r20, r25
  JumpIfFalse  r27, L23
  Index        r9, r8, r20
  Const        r11, "company"
  Index        r41, r9, r11
  Append       r2, r2, r41
  Const        r42, 1
  AddInt       r20, r20, r42
  Jump         L26
  Min          r44, r2
  // rating: min(from x in matches select x.rating),
  Const        r45, "rating"
  Const        r46, []
  Const        r40, "rating"
  IterPrep     r29, r14
  Len          r21, r29
  Const        r19, 0
L28:
  LessInt      r17, r19, r21
  JumpIfFalse  r17, L27
  Index        r9, r29, r19
  Const        r33, "rating"
  Index        r4, r9, r33
  Append       r46, r46, r4
  Const        r1, 1
  AddInt       r19, r19, r1
  Jump         L28
L27:
  Min          r5, r46
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Const        r16, "complete_euro_dark_movie"
  Const        r24, []
  Const        r10, "title"
  IterPrep     r34, r14
  Len          r38, r34
  Const        r13, 0
L30:
  LessInt      r18, r13, r38
  JumpIfFalse  r18, L29
  Index        r9, r34, r13
  Const        r3, "title"
  Index        r22, r9, r3
  Append       r24, r24, r22
  Const        r30, 1
  AddInt       r13, r13, r30
  Jump         L30
L29:
  Min          r43, r24
  // movie_company: min(from x in matches select x.company),
  Move         r47, r39
  Move         r48, r44
  // rating: min(from x in matches select x.rating),
  Move         r49, r45
  Move         r50, r5
  // complete_euro_dark_movie: min(from x in matches select x.title)
  Move         r51, r16
  Move         r52, r43
  // let result = {
  MakeMap      r31, 3, r47
  // json(result)
  JSON         r31
  // expect result == {
  Const        r7, {"complete_euro_dark_movie": "Dark Euro Film", "movie_company": "Euro Films Ltd.", "rating": 7.2}
  Equal        r15, r31, r7
  Expect       r15
  Return       r0
