func main (regs=230)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "blood"}, {"id": 3, "keyword": "romance"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "movie"}]
  // let title = [
  Const        r3, [{"id": 1, "kind_id": 1, "production_year": 2012, "title": "A Dark Movie"}, {"id": 2, "kind_id": 1, "production_year": 2013, "title": "Brutal Blood"}, {"id": 3, "kind_id": 1, "production_year": 2008, "title": "Old Film"}]
  // let movie_info = [
  Const        r4, [{"info": "Sweden", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}, {"info": "USA", "info_type_id": 1, "movie_id": 3}]
  // let movie_info_idx = [
  Const        r5, [{"info": 7, "info_type_id": 2, "movie_id": 1}, {"info": 7.5, "info_type_id": 2, "movie_id": 2}, {"info": 9.1, "info_type_id": 2, "movie_id": 3}]
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}, {"keyword_id": 3, "movie_id": 3}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r7, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r8, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German", "USA", "American"]
  // from it1 in info_type
  Const        r9, []
  // it1.info == "countries" &&
  Const        r10, "info"
  // it2.info == "rating" &&
  Const        r11, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r12, "keyword"
  // kt.kind == "movie" &&
  Const        r13, "kind"
  // (mi.info in allowed_countries) &&
  Const        r14, "info"
  // mi_idx.info < 8.5 &&
  Const        r15, "info"
  // t.production_year > 2010 &&
  Const        r16, "production_year"
  // kt.id == t.kind_id &&
  Const        r17, "id"
  Const        r18, "kind_id"
  // t.id == mi.movie_id &&
  Const        r19, "id"
  Const        r20, "movie_id"
  // t.id == mk.movie_id &&
  Const        r21, "id"
  Const        r22, "movie_id"
  // t.id == mi_idx.movie_id &&
  Const        r23, "id"
  Const        r24, "movie_id"
  // mk.movie_id == mi.movie_id &&
  Const        r25, "movie_id"
  Const        r26, "movie_id"
  // mk.movie_id == mi_idx.movie_id &&
  Const        r27, "movie_id"
  Const        r28, "movie_id"
  // mi.movie_id == mi_idx.movie_id &&
  Const        r29, "movie_id"
  Const        r30, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r31, "id"
  Const        r32, "keyword_id"
  // it1.id == mi.info_type_id &&
  Const        r33, "id"
  Const        r34, "info_type_id"
  // it2.id == mi_idx.info_type_id
  Const        r35, "id"
  Const        r36, "info_type_id"
  // rating: mi_idx.info,
  Const        r37, "rating"
  Const        r38, "info"
  // title: t.title
  Const        r39, "title"
  Const        r40, "title"
  // from it1 in info_type
  IterPrep     r41, r0
  Len          r42, r41
  Const        r44, 0
  Move         r43, r44
L17:
  LessInt      r45, r43, r42
  JumpIfFalse  r45, L0
  Index        r46, r41, r43
  Move         r47, r46
  // from it2 in info_type
  IterPrep     r48, r0
  Len          r49, r48
  Const        r51, 0
  Move         r50, r51
L16:
  LessInt      r52, r50, r49
  JumpIfFalse  r52, L1
  Index        r53, r48, r50
  Move         r54, r53
  // from k in keyword
  IterPrep     r55, r1
  Len          r56, r55
  Const        r58, 0
  Move         r57, r58
L15:
  LessInt      r59, r57, r56
  JumpIfFalse  r59, L2
  Index        r60, r55, r57
  Move         r61, r60
  // from kt in kind_type
  IterPrep     r62, r2
  Len          r63, r62
  Const        r65, 0
  Move         r64, r65
L14:
  LessInt      r66, r64, r63
  JumpIfFalse  r66, L3
  Index        r67, r62, r64
  Move         r68, r67
  // from mi in movie_info
  IterPrep     r69, r4
  Len          r70, r69
  Const        r72, 0
  Move         r71, r72
L13:
  LessInt      r73, r71, r70
  JumpIfFalse  r73, L4
  Index        r74, r69, r71
  Move         r75, r74
  // from mi_idx in movie_info_idx
  IterPrep     r76, r5
  Len          r77, r76
  Const        r79, 0
  Move         r78, r79
L12:
  LessInt      r80, r78, r77
  JumpIfFalse  r80, L5
  Index        r81, r76, r78
  Move         r82, r81
  // from mk in movie_keyword
  IterPrep     r83, r6
  Len          r84, r83
  Const        r86, 0
  Move         r85, r86
L11:
  LessInt      r87, r85, r84
  JumpIfFalse  r87, L6
  Index        r88, r83, r85
  Move         r89, r88
  // from t in title
  IterPrep     r90, r3
  Len          r91, r90
  Const        r93, 0
  Move         r92, r93
L10:
  LessInt      r94, r92, r91
  JumpIfFalse  r94, L7
  Index        r95, r90, r92
  Move         r96, r95
  // it1.info == "countries" &&
  Const        r97, "info"
  Index        r98, r47, r97
  // mi_idx.info < 8.5 &&
  Const        r99, "info"
  Index        r100, r82, r99
  Const        r101, 8.5
  LessFloat    r102, r100, r101
  // t.production_year > 2010 &&
  Const        r103, "production_year"
  Index        r104, r96, r103
  Const        r105, 2010
  Less         r106, r105, r104
  // it1.info == "countries" &&
  Const        r107, "countries"
  Equal        r108, r98, r107
  // it2.info == "rating" &&
  Const        r109, "info"
  Index        r110, r54, r109
  Const        r111, "rating"
  Equal        r112, r110, r111
  // kt.kind == "movie" &&
  Const        r113, "kind"
  Index        r114, r68, r113
  Const        r115, "movie"
  Equal        r116, r114, r115
  // kt.id == t.kind_id &&
  Const        r117, "id"
  Index        r118, r68, r117
  Const        r119, "kind_id"
  Index        r120, r96, r119
  Equal        r121, r118, r120
  // t.id == mi.movie_id &&
  Const        r122, "id"
  Index        r123, r96, r122
  Const        r124, "movie_id"
  Index        r125, r75, r124
  Equal        r126, r123, r125
  // t.id == mk.movie_id &&
  Const        r127, "id"
  Index        r128, r96, r127
  Const        r129, "movie_id"
  Index        r130, r89, r129
  Equal        r131, r128, r130
  // t.id == mi_idx.movie_id &&
  Const        r132, "id"
  Index        r133, r96, r132
  Const        r134, "movie_id"
  Index        r135, r82, r134
  Equal        r136, r133, r135
  // mk.movie_id == mi.movie_id &&
  Const        r137, "movie_id"
  Index        r138, r89, r137
  Const        r139, "movie_id"
  Index        r140, r75, r139
  Equal        r141, r138, r140
  // mk.movie_id == mi_idx.movie_id &&
  Const        r142, "movie_id"
  Index        r143, r89, r142
  Const        r144, "movie_id"
  Index        r145, r82, r144
  Equal        r146, r143, r145
  // mi.movie_id == mi_idx.movie_id &&
  Const        r147, "movie_id"
  Index        r148, r75, r147
  Const        r149, "movie_id"
  Index        r150, r82, r149
  Equal        r151, r148, r150
  // k.id == mk.keyword_id &&
  Const        r152, "id"
  Index        r153, r61, r152
  Const        r154, "keyword_id"
  Index        r155, r89, r154
  Equal        r156, r153, r155
  // it1.id == mi.info_type_id &&
  Const        r157, "id"
  Index        r158, r47, r157
  Const        r159, "info_type_id"
  Index        r160, r75, r159
  Equal        r161, r158, r160
  // it2.id == mi_idx.info_type_id
  Const        r162, "id"
  Index        r163, r54, r162
  Const        r164, "info_type_id"
  Index        r165, r82, r164
  Equal        r166, r163, r165
  // it1.info == "countries" &&
  Move         r167, r108
  JumpIfFalse  r167, L8
  Move         r167, r112
  // it2.info == "rating" &&
  JumpIfFalse  r167, L8
  // (k.keyword in allowed_keywords) &&
  Const        r168, "keyword"
  Index        r169, r61, r168
  In           r170, r169, r7
  // it2.info == "rating" &&
  Move         r167, r170
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r167, L8
  Move         r167, r116
  // kt.kind == "movie" &&
  JumpIfFalse  r167, L8
  // (mi.info in allowed_countries) &&
  Const        r171, "info"
  Index        r172, r75, r171
  In           r173, r172, r8
  // kt.kind == "movie" &&
  Move         r167, r173
  // (mi.info in allowed_countries) &&
  JumpIfFalse  r167, L8
  Move         r167, r102
  // mi_idx.info < 8.5 &&
  JumpIfFalse  r167, L8
  Move         r167, r106
  // t.production_year > 2010 &&
  JumpIfFalse  r167, L8
  Move         r167, r121
  // kt.id == t.kind_id &&
  JumpIfFalse  r167, L8
  Move         r167, r126
  // t.id == mi.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r131
  // t.id == mk.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r136
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r141
  // mk.movie_id == mi.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r146
  // mk.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r151
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r167, L8
  Move         r167, r156
  // k.id == mk.keyword_id &&
  JumpIfFalse  r167, L8
  Move         r167, r161
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r167, L8
  Move         r167, r166
L8:
  // where (
  JumpIfFalse  r167, L9
  // rating: mi_idx.info,
  Const        r174, "rating"
  Const        r175, "info"
  Index        r176, r82, r175
  // title: t.title
  Const        r177, "title"
  Const        r178, "title"
  Index        r179, r96, r178
  // rating: mi_idx.info,
  Move         r180, r174
  Move         r181, r176
  // title: t.title
  Move         r182, r177
  Move         r183, r179
  // select {
  MakeMap      r184, 2, r180
  // from it1 in info_type
  Append       r185, r9, r184
  Move         r9, r185
L9:
  // from t in title
  Const        r186, 1
  AddInt       r92, r92, r186
  Jump         L10
L7:
  // from mk in movie_keyword
  Const        r187, 1
  AddInt       r85, r85, r187
  Jump         L11
L6:
  // from mi_idx in movie_info_idx
  Const        r188, 1
  AddInt       r78, r78, r188
  Jump         L12
L5:
  // from mi in movie_info
  Const        r189, 1
  AddInt       r71, r71, r189
  Jump         L13
L4:
  // from kt in kind_type
  Const        r190, 1
  AddInt       r64, r64, r190
  Jump         L14
L3:
  // from k in keyword
  Const        r191, 1
  AddInt       r57, r57, r191
  Jump         L15
L2:
  // from it2 in info_type
  Const        r192, 1
  AddInt       r50, r50, r192
  Jump         L16
L1:
  // from it1 in info_type
  Const        r193, 1
  AddInt       r43, r43, r193
  Jump         L17
L0:
  // rating: min(from x in matches select x.rating),
  Const        r194, "rating"
  Const        r195, []
  Const        r196, "rating"
  IterPrep     r197, r9
  Len          r198, r197
  Const        r200, 0
  Move         r199, r200
L19:
  LessInt      r201, r199, r198
  JumpIfFalse  r201, L18
  Index        r202, r197, r199
  Move         r203, r202
  Const        r204, "rating"
  Index        r205, r203, r204
  Append       r206, r195, r205
  Move         r195, r206
  Const        r207, 1
  AddInt       r199, r199, r207
  Jump         L19
L18:
  Min          r208, r195
  // northern_dark_movie: min(from x in matches select x.title)
  Const        r209, "northern_dark_movie"
  Const        r210, []
  Const        r211, "title"
  IterPrep     r212, r9
  Len          r213, r212
  Const        r215, 0
  Move         r214, r215
L21:
  LessInt      r216, r214, r213
  JumpIfFalse  r216, L20
  Index        r217, r212, r214
  Move         r203, r217
  Const        r218, "title"
  Index        r219, r203, r218
  Append       r220, r210, r219
  Move         r210, r220
  Const        r221, 1
  AddInt       r214, r214, r221
  Jump         L21
L20:
  Min          r222, r210
  // rating: min(from x in matches select x.rating),
  Move         r223, r194
  Move         r224, r208
  // northern_dark_movie: min(from x in matches select x.title)
  Move         r225, r209
  Move         r226, r222
  // let result = {
  MakeMap      r227, 2, r223
  // json(result)
  JSON         r227
  // expect result == { rating: 7.0, northern_dark_movie: "A Dark Movie" }
  Const        r228, {"northern_dark_movie": "A Dark Movie", "rating": 7}
  Equal        r229, r227, r228
  Expect       r229
  Return       r0
