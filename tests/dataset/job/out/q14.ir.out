func main (regs=49)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "blood"}, {"id": 3, "keyword": "romance"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "movie"}]
  // let title = [
  Const        r3, [{"id": 1, "kind_id": 1, "production_year": 2012, "title": "A Dark Movie"}, {"id": 2, "kind_id": 1, "production_year": 2013, "title": "Brutal Blood"}, {"id": 3, "kind_id": 1, "production_year": 2008, "title": "Old Film"}]
  // let movie_info = [
  Const        r4, [{"info": "Sweden", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}, {"info": "USA", "info_type_id": 1, "movie_id": 3}]
L13:
  // let movie_info_idx = [
  Const        r5, [{"info": 7.0, "info_type_id": 2, "movie_id": 1}, {"info": 7.5, "info_type_id": 2, "movie_id": 2}, {"info": 9.1, "info_type_id": 2, "movie_id": 3}]
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}, {"keyword_id": 3, "movie_id": 3}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r7, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r7, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German", "USA", "American"]
  // from it1 in info_type
  Const        r7, []
  // it1.info == "countries" &&
  Const        r8, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r9, "keyword"
  // kt.kind == "movie" &&
  Const        r10, "kind"
  // t.production_year > 2010 &&
  Const        r11, "production_year"
  // kt.id == t.kind_id &&
  Const        r12, "id"
  Const        r13, "kind_id"
  // t.id == mi.movie_id &&
  Const        r14, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r15, "keyword_id"
  // it1.id == mi.info_type_id &&
  Const        r16, "info_type_id"
  // rating: mi_idx.info,
  Const        r17, "rating"
L14:
  // title: t.title
  Const        r18, "title"
  // from it1 in info_type
  IterPrep     r19, r0
  Len          r20, r19
L17:
  Const        r21, 0
L16:
  Move         r22, r21
  LessInt      r23, r22, r20
  JumpIfFalse  r23, L0
  Index        r20, r19, r22
L15:
  Move         r19, r20
  // from it2 in info_type
  IterPrep     r20, r0
  Len          r24, r20
  Move         r25, r21
  LessInt      r26, r25, r24
L12:
  JumpIfFalse  r26, L1
  Index        r24, r20, r25
L11:
  Move         r26, r24
L10:
  // from k in keyword
  IterPrep     r20, r1
  Len          r1, r20
  Move         r27, r21
  LessInt      r28, r27, r1
  JumpIfFalse  r28, L2
  Index        r1, r20, r27
  Move         r28, r1
  // from kt in kind_type
  IterPrep     r20, r2
  Len          r1, r20
  Move         r2, r21
  LessInt      r29, r2, r1
  JumpIfFalse  r29, L3
  Index        r1, r20, r2
  Move         r29, r1
  // from mi in movie_info
  IterPrep     r20, r4
  Len          r1, r20
  Move         r4, r21
  LessInt      r30, r4, r1
  JumpIfFalse  r30, L4
  Index        r1, r20, r4
  Move         r30, r1
  // from mi_idx in movie_info_idx
  IterPrep     r1, r5
  Len          r5, r1
  Move         r31, r21
  LessInt      r32, r31, r5
  JumpIfFalse  r32, L5
  Index        r32, r1, r31
  Move         r1, r32
  // from mk in movie_keyword
  IterPrep     r32, r6
  Len          r6, r32
  Move         r33, r21
  LessInt      r34, r33, r6
  JumpIfFalse  r34, L6
  Index        r6, r32, r33
  Move         r34, r6
  // from t in title
  IterPrep     r32, r3
  Len          r6, r32
  Move         r3, r21
  LessInt      r35, r3, r6
  JumpIfFalse  r35, L7
  Index        r6, r32, r3
  Move         r32, r6
  // it1.info == "countries" &&
  Index        r6, r19, r8
  // mi_idx.info < 8.5 &&
  Index        r36, r1, r8
  Const        r37, 8.5
  LessFloat    r38, r36, r37
  // t.production_year > 2010 &&
  Index        r36, r32, r11
  Const        r37, 2010
  Less         r11, r37, r36
  // it1.info == "countries" &&
  Const        r37, "countries"
  Equal        r39, r6, r37
  // it2.info == "rating" &&
  Index        r6, r26, r8
  Equal        r37, r6, r17
  // kt.kind == "movie" &&
  Index        r6, r29, r10
  Const        r10, "movie"
  Equal        r40, r6, r10
  // kt.id == t.kind_id &&
  Index        r6, r29, r12
  Index        r10, r32, r13
  Equal        r29, r6, r10
  // t.id == mi.movie_id &&
  Index        r13, r32, r12
  Index        r6, r30, r14
  Equal        r10, r13, r6
  // t.id == mk.movie_id &&
  Index        r13, r32, r12
  Index        r6, r34, r14
  Equal        r41, r13, r6
  // t.id == mi_idx.movie_id &&
  Index        r13, r32, r12
  Index        r6, r1, r14
  Equal        r42, r13, r6
  // mk.movie_id == mi.movie_id &&
  Index        r13, r34, r14
  Index        r6, r30, r14
  Equal        r43, r13, r6
  // mk.movie_id == mi_idx.movie_id &&
  Index        r13, r34, r14
  Index        r6, r1, r14
  Equal        r44, r13, r6
  // mi.movie_id == mi_idx.movie_id &&
  Index        r13, r30, r14
  Index        r6, r1, r14
  Equal        r14, r13, r6
  // k.id == mk.keyword_id &&
  Index        r13, r28, r12
  Index        r6, r34, r15
  Equal        r15, r13, r6
  // it1.id == mi.info_type_id &&
  Index        r34, r19, r12
  Index        r13, r30, r16
  Equal        r6, r34, r13
  // it2.id == mi_idx.info_type_id
  Index        r19, r26, r12
  Index        r34, r1, r16
  Equal        r13, r19, r34
  // it1.info == "countries" &&
  Move         r12, r39
  JumpIfFalse  r12, L8
  Move         r12, r37
  // it2.info == "rating" &&
  JumpIfFalse  r12, L8
  // (k.keyword in allowed_keywords) &&
  Index        r26, r28, r9
  Const        r16, ["murder", "murder-in-title", "blood", "violence"]
  In           r19, r26, r16
  // it2.info == "rating" &&
  Move         r12, r19
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r12, L8
  Move         r12, r40
  // kt.kind == "movie" &&
  JumpIfFalse  r12, L8
  // (mi.info in allowed_countries) &&
  Index        r34, r30, r8
  Const        r39, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German", "USA", "American"]
  In           r37, r34, r39
  // kt.kind == "movie" &&
  Move         r12, r37
  // (mi.info in allowed_countries) &&
  JumpIfFalse  r12, L8
  Move         r12, r38
  // mi_idx.info < 8.5 &&
  JumpIfFalse  r12, L8
  Move         r12, r11
  // t.production_year > 2010 &&
  JumpIfFalse  r12, L8
  Move         r12, r29
  // kt.id == t.kind_id &&
  JumpIfFalse  r12, L8
  Move         r12, r10
  // t.id == mi.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r41
  // t.id == mk.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r42
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r43
  // mk.movie_id == mi.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r44
  // mk.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r14
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r12, L8
  Move         r12, r15
  // k.id == mk.keyword_id &&
  JumpIfFalse  r12, L8
  Move         r12, r6
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r12, L8
  Move         r12, r13
L8:
  // where (
  JumpIfFalse  r12, L9
  // rating: mi_idx.info,
  Const        r9, "rating"
  Index        r40, r1, r8
  // title: t.title
  Const        r26, "title"
  Index        r16, r32, r18
  // rating: mi_idx.info,
  Move         r45, r9
  Move         r46, r40
  // title: t.title
  Move         r47, r26
  Move         r48, r16
  // select {
  MakeMap      r19, 2, r45
  // from it1 in info_type
  Append       r30, r7, r19
  Move         r7, r30
L9:
  // from t in title
  Const        r38, 1
  AddInt       r3, r3, r38
  Jump         L10
L7:
  // from mk in movie_keyword
  AddInt       r33, r33, r38
  Jump         L11
L6:
  // from mi_idx in movie_info_idx
  AddInt       r31, r31, r38
  Jump         L12
L5:
  // from mi in movie_info
  AddInt       r4, r4, r38
  Jump         L13
L4:
  // from kt in kind_type
  AddInt       r2, r2, r38
  Jump         L14
L3:
  // from k in keyword
  AddInt       r27, r27, r38
  Jump         L15
L2:
  // from it2 in info_type
  AddInt       r25, r25, r38
  Jump         L16
L1:
  // from it1 in info_type
  AddInt       r22, r22, r38
  Jump         L17
L0:
  // rating: min(from x in matches select x.rating),
  Const        r11, "rating"
  Const        r29, []
  IterPrep     r10, r7
  Len          r41, r10
  Move         r42, r21
L19:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L18
  Index        r44, r10, r42
  Move         r14, r44
  Index        r15, r14, r17
  Append       r6, r29, r15
  Move         r29, r6
  AddInt       r42, r42, r38
  Jump         L19
L18:
  Min          r13, r29
  // northern_dark_movie: min(from x in matches select x.title)
  Const        r12, "northern_dark_movie"
  Const        r34, []
  IterPrep     r39, r7
  Len          r37, r39
  Move         r8, r21
L21:
  LessInt      r1, r8, r37
  JumpIfFalse  r1, L20
  Index        r32, r39, r8
  Move         r14, r32
  Index        r9, r14, r18
  Append       r40, r34, r9
  Move         r34, r40
  AddInt       r8, r8, r38
  Jump         L21
L20:
  Min          r26, r34
  // rating: min(from x in matches select x.rating),
  Move         r45, r11
  Move         r46, r13
  // northern_dark_movie: min(from x in matches select x.title)
  Move         r47, r12
  Move         r48, r26
  // let result = {
  MakeMap      r16, 2, r45
  // json(result)
  JSON         r16
  // expect result == { rating: 7.0, northern_dark_movie: "A Dark Movie" }
  Const        r19, {"northern_dark_movie": "A Dark Movie", "rating": 7.0}
  Equal        r30, r16, r19
  Expect       r30
  Return       r0
