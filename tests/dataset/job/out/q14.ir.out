func main (regs=49)
  // let info_type = [
  Const        r0, [{"id": 1, "info": "countries"}, {"id": 2, "info": "rating"}]
L7:
  // let keyword = [
  Const        r1, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "blood"}, {"id": 3, "keyword": "romance"}]
  // let kind_type = [
  Const        r2, [{"id": 1, "kind": "movie"}]
L11:
  // let title = [
  Const        r3, [{"id": 1, "kind_id": 1, "production_year": 2012, "title": "A Dark Movie"}, {"id": 2, "kind_id": 1, "production_year": 2013, "title": "Brutal Blood"}, {"id": 3, "kind_id": 1, "production_year": 2008, "title": "Old Film"}]
L9:
  // let movie_info = [
  Const        r4, [{"info": "Sweden", "info_type_id": 1, "movie_id": 1}, {"info": "USA", "info_type_id": 1, "movie_id": 2}, {"info": "USA", "info_type_id": 1, "movie_id": 3}]
L10:
  // let movie_info_idx = [
  Const        r5, [{"info": 7, "info_type_id": 2, "movie_id": 1}, {"info": 7.5, "info_type_id": 2, "movie_id": 2}, {"info": 9.1, "info_type_id": 2, "movie_id": 3}]
  // let movie_keyword = [
  Const        r6, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}, {"keyword_id": 3, "movie_id": 3}]
  // let allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
  Const        r7, ["murder", "murder-in-title", "blood", "violence"]
  // let allowed_countries = [
  Const        r8, ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German", "USA", "American"]
  // from it1 in info_type
  Const        r9, []
L13:
  // it1.info == "countries" &&
  Const        r10, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r11, "keyword"
  // kt.kind == "movie" &&
  Const        r12, "kind"
  // t.production_year > 2010 &&
  Const        r13, "production_year"
  // kt.id == t.kind_id &&
  Const        r14, "id"
  Const        r15, "kind_id"
  // t.id == mi.movie_id &&
  Const        r16, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r17, "keyword_id"
L12:
  // it1.id == mi.info_type_id &&
  Const        r18, "info_type_id"
  // rating: mi_idx.info,
  Const        r19, "rating"
  // title: t.title
  Const        r20, "title"
  // from it1 in info_type
  IterPrep     r21, r0
  Len          r22, r21
L5:
  Const        r23, 0
  Move         r24, r23
L21:
  LessInt      r25, r24, r22
L6:
  JumpIfFalse  r25, L0
  Index        r22, r21, r24
L20:
  // from it2 in info_type
  IterPrep     r21, r0
  Len          r26, r21
L19:
  Move         r27, r23
  LessInt      r28, r27, r26
L18:
  JumpIfFalse  r28, L1
  Index        r26, r21, r27
L17:
  // from k in keyword
  IterPrep     r21, r1
  Len          r1, r21
L14:
  Move         r29, r23
L15:
  LessInt      r30, r29, r1
L16:
  JumpIfFalse  r30, L2
L3:
  Index        r1, r21, r29
L4:
  // from kt in kind_type
  IterPrep     r21, r2
  Len          r2, r21
  Move         r31, r23
  LessInt      r32, r31, r2
  JumpIfFalse  r32, L3
  Index        r2, r21, r31
  // from mi in movie_info
  IterPrep     r21, r4
  Len          r4, r21
  Move         r33, r23
  LessInt      r34, r33, r4
  JumpIfFalse  r34, L3
  Index        r4, r21, r33
  // from mi_idx in movie_info_idx
  IterPrep     r21, r5
  Len          r5, r21
  Move         r35, r23
  LessInt      r36, r35, r5
  JumpIfFalse  r36, L4
  Index        r5, r21, r35
  // from mk in movie_keyword
  IterPrep     r21, r6
  Len          r6, r21
  Move         r37, r23
  LessInt      r38, r37, r6
  JumpIfFalse  r38, L5
  Index        r6, r21, r37
  // from t in title
  IterPrep     r21, r3
  Len          r3, r21
  Move         r39, r23
  LessInt      r40, r39, r3
  JumpIfFalse  r40, L5
  Index        r3, r21, r39
  // it1.info == "countries" &&
  Index        r21, r22, r10
  // mi_idx.info < 8.5 &&
  Index        r41, r5, r10
  Const        r42, 8.5
  LessFloat    r43, r41, r42
  // t.production_year > 2010 &&
  Index        r42, r3, r13
  Const        r13, 2010
  Less         r41, r13, r42
  // it1.info == "countries" &&
  Const        r13, "countries"
  Equal        r42, r21, r13
  // it2.info == "rating" &&
  Index        r13, r26, r10
  Equal        r21, r13, r19
  // kt.kind == "movie" &&
  Index        r13, r2, r12
  Const        r12, "movie"
  Equal        r44, r13, r12
  // kt.id == t.kind_id &&
  Index        r12, r2, r14
  Index        r2, r3, r15
  Equal        r15, r12, r2
  // t.id == mi.movie_id &&
  Index        r2, r3, r14
  Index        r12, r4, r16
  Equal        r13, r2, r12
  // t.id == mk.movie_id &&
  Index        r12, r3, r14
  Index        r2, r6, r16
  Equal        r45, r12, r2
  // t.id == mi_idx.movie_id &&
  Index        r2, r3, r14
  Index        r12, r5, r16
  Equal        r46, r2, r12
  // mk.movie_id == mi.movie_id &&
  Index        r12, r6, r16
  Index        r2, r4, r16
  Equal        r47, r12, r2
  // mk.movie_id == mi_idx.movie_id &&
  Index        r2, r6, r16
  Index        r12, r5, r16
  Equal        r48, r2, r12
  // mi.movie_id == mi_idx.movie_id &&
  Index        r12, r4, r16
  Index        r2, r5, r16
  Equal        r16, r12, r2
  // k.id == mk.keyword_id &&
  Index        r2, r1, r14
  Index        r12, r6, r17
  Equal        r6, r2, r12
  // it1.id == mi.info_type_id &&
  Index        r12, r22, r14
  Index        r22, r4, r18
  Equal        r2, r12, r22
  // it2.id == mi_idx.info_type_id
  Index        r22, r26, r14
  Index        r26, r5, r18
  Equal        r18, r22, r26
  // it1.info == "countries" &&
  Move         r26, r42
  JumpIfFalse  r26, L6
  // it2.info == "rating" &&
  Move         r26, r21
  JumpIfFalse  r26, L7
  // (k.keyword in allowed_keywords) &&
  Index        r26, r1, r11
  In           r1, r26, r7
  JumpIfFalse  r1, L8
L8:
  // kt.kind == "movie" &&
  Move         r1, r44
  JumpIfFalse  r1, L9
  // (mi.info in allowed_countries) &&
  Index        r1, r4, r10
  In           r4, r1, r8
  JumpIfFalse  r4, L9
  // mi_idx.info < 8.5 &&
  Move         r4, r43
  JumpIfFalse  r4, L9
  // t.production_year > 2010 &&
  Move         r4, r41
  JumpIfFalse  r4, L9
  // kt.id == t.kind_id &&
  Move         r4, r15
  JumpIfFalse  r4, L9
  // t.id == mi.movie_id &&
  Move         r4, r13
  JumpIfFalse  r4, L9
  // t.id == mk.movie_id &&
  Move         r4, r45
  JumpIfFalse  r4, L10
  // t.id == mi_idx.movie_id &&
  Move         r4, r46
  JumpIfFalse  r4, L11
  // mk.movie_id == mi.movie_id &&
  Move         r4, r47
  JumpIfFalse  r4, L12
  // mk.movie_id == mi_idx.movie_id &&
  Move         r4, r48
  JumpIfFalse  r4, L13
  // mi.movie_id == mi_idx.movie_id &&
  Move         r4, r16
  JumpIfFalse  r4, L13
  // k.id == mk.keyword_id &&
  Move         r4, r6
  JumpIfFalse  r4, L3
  // it1.id == mi.info_type_id &&
  Move         r4, r2
  JumpIfFalse  r4, L14
  Move         r4, r18
  // where (
  JumpIfFalse  r4, L15
  // rating: mi_idx.info,
  Move         r4, r19
  Index        r18, r5, r10
  // title: t.title
  Move         r5, r20
  Index        r10, r3, r20
  // rating: mi_idx.info,
  Move         r3, r4
  Move         r4, r18
  // title: t.title
  Move         r18, r5
  Move         r5, r10
  // select {
  MakeMap      r10, 2, r3
  // from it1 in info_type
  Append       r9, r9, r10
  // from t in title
  Const        r10, 1
  AddInt       r39, r39, r10
  Jump         L4
  // from mk in movie_keyword
  AddInt       r37, r37, r10
  Jump         L16
  // from mi_idx in movie_info_idx
  AddInt       r35, r35, r10
  Jump         L14
  // from mi in movie_info
  AddInt       r33, r33, r10
  Jump         L17
  // from kt in kind_type
  AddInt       r31, r31, r10
  Jump         L18
  // from k in keyword
  AddInt       r29, r29, r10
  Jump         L19
L2:
  // from it2 in info_type
  AddInt       r27, r27, r10
  Jump         L20
L1:
  // from it1 in info_type
  AddInt       r24, r24, r10
  Jump         L21
L0:
  // rating: min(from x in matches select x.rating),
  Move         r40, r19
  Const        r39, []
  IterPrep     r38, r9
  Len          r37, r38
  Move         r36, r23
L23:
  LessInt      r35, r36, r37
  JumpIfFalse  r35, L22
  Index        r35, r38, r36
  Index        r38, r35, r19
  Append       r39, r39, r38
  AddInt       r36, r36, r10
  Jump         L23
L22:
  Min          r38, r39
  // northern_dark_movie: min(from x in matches select x.title)
  Const        r39, "northern_dark_movie"
  Const        r36, []
  IterPrep     r19, r9
  Len          r9, r19
  Move         r37, r23
L25:
  LessInt      r23, r37, r9
  JumpIfFalse  r23, L24
  Index        r35, r19, r37
  Index        r23, r35, r20
  Append       r36, r36, r23
  AddInt       r37, r37, r10
  Jump         L25
L24:
  Min          r23, r36
  // rating: min(from x in matches select x.rating),
  Move         r36, r40
  Move         r40, r38
  // northern_dark_movie: min(from x in matches select x.title)
  Move         r38, r39
  Move         r39, r23
  // let result = {
  MakeMap      r23, 2, r36
  // json(result)
  JSON         r23
  // expect result == { rating: 7.0, northern_dark_movie: "A Dark Movie" }
  Const        r39, {"northern_dark_movie": "A Dark Movie", "rating": 7}
  Equal        r38, r23, r39
  Expect       r38
  Return       r0
