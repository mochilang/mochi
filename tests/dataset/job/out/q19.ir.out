func main (regs=52)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  // let info_type = [
  Const        r4, [{"id": 100, "info": "release dates"}]
L20:
  // let movie_companies = [
  Const        r5, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
L13:
  // let movie_info = [
  Const        r6, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
L24:
  // let name = [
  Const        r7, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
  // let role_type = [
  Const        r8, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  // from an in aka_name
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
L16:
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r14, "gender"
  // n.name.contains("Ang") &&
  Const        r15, "name"
  // rt.role == "actress" &&
  Const        r16, "role"
  // t.production_year >= 2005 &&
  Const        r17, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r18, "actress"
  Const        r19, "movie"
  Const        r20, "title"
L23:
  // from an in aka_name
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L25:
  Move         r24, r23
L17:
  LessInt      r25, r24, r22
L21:
  JumpIfFalse  r25, L0
  Index        r22, r21, r24
  Move         r21, r22
  // join n in name on n.id == an.person_id
  IterPrep     r22, r7
  Len          r7, r22
L22:
  Const        r26, "id"
  Const        r27, "person_id"
  Move         r28, r23
  LessInt      r29, r28, r7
  JumpIfFalse  r29, L1
L19:
  Index        r7, r22, r28
  Move         r29, r7
  Index        r22, r29, r26
L18:
  Index        r30, r21, r27
  Equal        r31, r22, r30
  JumpIfFalse  r31, L2
L12:
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r22, r2
  Len          r30, r22
  Move         r31, r23
  LessInt      r2, r31, r30
  JumpIfFalse  r2, L2
  Index        r30, r22, r31
  Move         r2, r30
L15:
  Index        r22, r2, r27
L14:
  Index        r30, r21, r27
  Equal        r21, r22, r30
  JumpIfFalse  r21, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r27, r1
  Len          r30, r27
  Const        r21, "person_role_id"
  Move         r1, r23
  LessInt      r32, r1, r30
  JumpIfFalse  r32, L3
  Index        r30, r27, r1
  Move         r32, r30
  Index        r27, r32, r26
  Index        r30, r2, r21
  Equal        r32, r27, r30
  JumpIfFalse  r32, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r21, r8
  Len          r27, r21
  Const        r30, "role_id"
  Move         r8, r23
  LessInt      r33, r8, r27
  JumpIfFalse  r33, L4
  Index        r27, r21, r8
  Move         r33, r27
  Index        r21, r33, r26
  Index        r27, r2, r30
  Equal        r30, r21, r27
  JumpIfFalse  r30, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r21, r9
  Len          r27, r21
  Const        r30, "movie_id"
  Move         r9, r23
  LessInt      r34, r9, r27
  JumpIfFalse  r34, L5
  Index        r34, r21, r9
  Move         r21, r34
  Index        r34, r21, r26
  Index        r35, r2, r30
  Equal        r36, r34, r35
  JumpIfFalse  r36, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r34, r5
  Len          r35, r34
  Move         r36, r23
  LessInt      r5, r36, r35
  JumpIfFalse  r5, L6
  Index        r35, r34, r36
  Move         r34, r35
  Index        r35, r34, r30
  Index        r37, r21, r26
  Equal        r38, r35, r37
  JumpIfFalse  r38, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r35, r3
  Len          r37, r35
  Const        r38, "company_id"
  Move         r3, r23
  LessInt      r39, r3, r37
  JumpIfFalse  r39, L7
  Index        r37, r35, r3
  Move         r39, r37
  Index        r35, r39, r26
  Index        r40, r34, r38
  Equal        r38, r35, r40
  JumpIfFalse  r38, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r35, r6
  Len          r40, r35
  Move         r38, r23
  LessInt      r6, r38, r40
  JumpIfFalse  r6, L8
  Index        r40, r35, r38
  Move         r6, r40
  Index        r35, r6, r30
  Index        r40, r21, r26
  Equal        r30, r35, r40
  JumpIfFalse  r30, L9
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r35, r4
  Len          r30, r35
  Const        r4, "info_type_id"
  Move         r41, r23
  LessInt      r42, r41, r30
  JumpIfFalse  r42, L9
  Index        r30, r35, r41
  Move         r42, r30
  Index        r35, r42, r26
  Index        r30, r6, r4
  Equal        r26, r35, r30
  JumpIfFalse  r26, L10
  // where ci.note in [
  Index        r4, r2, r11
  // t.production_year >= 2005 &&
  Index        r35, r21, r17
  Const        r30, 2005
  LessEq       r2, r30, r35
  // t.production_year <= 2009
  Index        r35, r21, r17
  Const        r30, 2009
  LessEq       r17, r35, r30
  // where ci.note in [
  Const        r35, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r30, r4, r35
  // cn.country_code == "[us]" &&
  Index        r4, r39, r12
  Const        r35, "[us]"
  Equal        r12, r4, r35
  // it.info == "release dates" &&
  Index        r39, r42, r13
  Const        r4, "release dates"
  Equal        r35, r39, r4
  // mc.note != null &&
  Index        r42, r34, r11
  Const        r39, nil
  NotEqual     r4, r42, r39
  // mi.info != null &&
  Index        r42, r6, r13
  NotEqual     r43, r42, r39
  // n.gender == "f" &&
  Index        r39, r29, r14
  Const        r42, "f"
  Equal        r14, r39, r42
  // rt.role == "actress" &&
  Index        r39, r33, r16
  Equal        r42, r39, r18
  // ] &&
  Move         r16, r30
  JumpIfFalse  r16, L11
  Move         r16, r12
  // cn.country_code == "[us]" &&
  JumpIfFalse  r16, L11
  Move         r16, r35
  // it.info == "release dates" &&
  JumpIfFalse  r16, L11
  Move         r16, r4
  // mc.note != null &&
  JumpIfFalse  r16, L11
  Index        r33, r34, r11
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r39, "(USA)"
  In           r30, r39, r33
  Move         r35, r30
  JumpIfTrue   r35, L12
  Index        r4, r34, r11
  Const        r33, "(worldwide)"
  In           r39, r33, r4
  Move         r35, r39
  // mc.note != null &&
  Move         r16, r35
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  JumpIfFalse  r16, L11
  Move         r16, r43
  // mi.info != null &&
  JumpIfFalse  r16, L11
  Index        r30, r6, r13
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r11, "Japan:"
  In           r34, r11, r30
  Move         r43, r34
  JumpIfFalse  r43, L13
  Index        r35, r6, r13
  Const        r4, "200"
  In           r33, r4, r35
  Move         r43, r33
  Move         r39, r43
  JumpIfTrue   r39, L14
  Index        r30, r6, r13
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r11, "USA:"
  In           r34, r11, r30
  Move         r35, r34
  JumpIfFalse  r35, L15
  Index        r33, r6, r13
  In           r43, r4, r33
  Move         r35, r43
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Move         r39, r35
  // mi.info != null &&
  Move         r16, r39
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  JumpIfFalse  r16, L11
  Move         r16, r14
  // n.gender == "f" &&
  JumpIfFalse  r16, L11
  Index        r30, r29, r15
  // n.name.contains("Ang") &&
  Const        r11, "Ang"
  In           r34, r11, r30
  // n.gender == "f" &&
  Move         r16, r34
  // n.name.contains("Ang") &&
  JumpIfFalse  r16, L11
  Move         r16, r42
  // rt.role == "actress" &&
  JumpIfFalse  r16, L11
  Move         r16, r2
  // t.production_year >= 2005 &&
  JumpIfFalse  r16, L11
  Move         r16, r17
L11:
  // where ci.note in [
  JumpIfFalse  r16, L10
  // select { actress: n.name, movie: t.title }
  Const        r13, "actress"
  Index        r6, r29, r15
  Const        r14, "movie"
  Index        r4, r21, r20
  Move         r44, r13
  Move         r45, r6
  Move         r46, r14
  Move         r47, r4
  MakeMap      r39, 2, r44
  // from an in aka_name
  Append       r35, r10, r39
  Move         r10, r35
L10:
  // join it in info_type on it.id == mi.info_type_id
  Const        r33, 1
  Add          r41, r41, r33
  Jump         L16
L9:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r38, r38, r33
  Jump         L17
L8:
  // join cn in company_name on cn.id == mc.company_id
  Add          r3, r3, r33
  Jump         L18
L7:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r36, r36, r33
  Jump         L19
L6:
  // join t in title on t.id == ci.movie_id
  Add          r9, r9, r33
  Jump         L20
L5:
  // join rt in role_type on rt.id == ci.role_id
  Add          r8, r8, r33
  Jump         L21
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r1, r1, r33
  Jump         L22
L3:
  // join ci in cast_info on ci.person_id == an.person_id
  Add          r31, r31, r33
  Jump         L23
L2:
  // join n in name on n.id == an.person_id
  Add          r28, r28, r33
  Jump         L24
L1:
  // from an in aka_name
  AddInt       r24, r24, r33
  Jump         L25
L0:
  // voicing_actress: min(from r in matches select r.actress),
  Const        r43, "voicing_actress"
  Const        r2, []
  IterPrep     r17, r10
  Len          r42, r17
  Move         r16, r23
L27:
  LessInt      r30, r16, r42
  JumpIfFalse  r30, L26
  Index        r11, r17, r16
  Move         r34, r11
  Index        r15, r34, r18
  Append       r29, r2, r15
  Move         r2, r29
  AddInt       r16, r16, r33
  Jump         L27
L26:
  Min          r20, r2
  // voiced_movie: min(from r in matches select r.movie)
  Const        r21, "voiced_movie"
  Const        r13, []
  IterPrep     r6, r10
  Len          r14, r6
  Move         r4, r23
L29:
  LessInt      r44, r4, r14
  JumpIfFalse  r44, L28
  Index        r45, r6, r4
  Move         r34, r45
  Index        r46, r34, r19
  Append       r47, r13, r46
  Move         r13, r47
  AddInt       r4, r4, r33
  Jump         L29
L28:
  Min          r39, r13
  // voicing_actress: min(from r in matches select r.actress),
  Move         r48, r43
  Move         r49, r20
  // voiced_movie: min(from r in matches select r.movie)
  Move         r50, r21
  Move         r51, r39
  // {
  MakeMap      r35, 2, r48
  Move         r24, r35
  // let result = [
  MakeList     r25, 1, r24
  // json(result)
  JSON         r25
  // expect result == [
  Const        r28, [{"voiced_movie": "Voiced Movie", "voicing_actress": "Angela Stone"}]
  Equal        r7, r25, r28
  Expect       r7
  Return       r0
