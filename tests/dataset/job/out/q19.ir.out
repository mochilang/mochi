func main (regs=208)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  // let info_type = [
  Const        r4, [{"id": 100, "info": "release dates"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
  // let name = [
  Const        r7, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
  // let role_type = [
  Const        r8, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  // from an in aka_name
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // from an in aka_name
  IterPrep     r22, r0
  Len          r23, r22
  Const        r25, 0
  Move         r24, r25
  LessInt      r26, r24, r23
  JumpIfFalse  r26, L0
  Index        r27, r22, r24
  Move         r28, r27
  // join n in name on n.id == an.person_id
  IterPrep     r29, r7
  Len          r30, r29
  Const        r31, "id"
  Const        r32, "person_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join n in name on n.id == an.person_id
  Const        r25, 0
  Move         r33, r25
  LessInt      r34, r33, r30
  JumpIfFalse  r34, L1
  Index        r35, r29, r33
  Move         r36, r35
  Const        r31, "id"
  Index        r37, r36, r31
  Const        r32, "person_id"
  Index        r38, r28, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r40, r2
  Len          r41, r40
  Const        r32, "person_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join ci in cast_info on ci.person_id == an.person_id
  Const        r25, 0
  Move         r42, r25
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r44, r40, r42
  Move         r45, r44
  Const        r32, "person_id"
  Index        r46, r45, r32
  Index        r47, r28, r32
  Equal        r48, r46, r47
  JumpIfFalse  r48, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r49, r1
  Len          r50, r49
  Const        r31, "id"
  Const        r51, "person_role_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r25, 0
  Move         r52, r25
  LessInt      r53, r52, r50
  JumpIfFalse  r53, L3
  Index        r54, r49, r52
  Move         r55, r54
  Const        r31, "id"
  Index        r56, r55, r31
  Const        r51, "person_role_id"
  Index        r57, r45, r51
  Equal        r58, r56, r57
  JumpIfFalse  r58, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r59, r8
  Len          r60, r59
  Const        r31, "id"
  Const        r61, "role_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r25, 0
  Move         r62, r25
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L4
  Index        r64, r59, r62
  Move         r65, r64
  Const        r31, "id"
  Index        r66, r65, r31
  Const        r61, "role_id"
  Index        r67, r45, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r69, r9
  Len          r70, r69
  Const        r31, "id"
  Const        r71, "movie_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join t in title on t.id == ci.movie_id
  Const        r25, 0
  Move         r72, r25
  LessInt      r73, r72, r70
  JumpIfFalse  r73, L5
  Index        r74, r69, r72
  Move         r75, r74
  Const        r31, "id"
  Index        r76, r75, r31
  Const        r71, "movie_id"
  Index        r77, r45, r71
  Equal        r78, r76, r77
  JumpIfFalse  r78, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r79, r5
  Len          r80, r79
  Const        r71, "movie_id"
  Const        r31, "id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r25, 0
  Move         r81, r25
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r83, r79, r81
  Move         r84, r83
  Const        r71, "movie_id"
  Index        r85, r84, r71
  Const        r31, "id"
  Index        r86, r75, r31
  Equal        r87, r85, r86
  JumpIfFalse  r87, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r88, r3
  Len          r89, r88
  Const        r31, "id"
  Const        r90, "company_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r25, 0
  Move         r91, r25
  LessInt      r92, r91, r89
  JumpIfFalse  r92, L7
  Index        r93, r88, r91
  Move         r94, r93
  Const        r31, "id"
  Index        r95, r94, r31
  Const        r90, "company_id"
  Index        r96, r84, r90
  Equal        r97, r95, r96
  JumpIfFalse  r97, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r98, r6
  Len          r99, r98
  Const        r71, "movie_id"
  Const        r31, "id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r25, 0
  Move         r100, r25
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L8
  Index        r102, r98, r100
  Move         r103, r102
  Const        r71, "movie_id"
  Index        r104, r103, r71
  Const        r31, "id"
  Index        r105, r75, r31
  Equal        r106, r104, r105
  JumpIfFalse  r106, L9
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r107, r4
  Len          r108, r107
  Const        r31, "id"
  Const        r109, "info_type_id"
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r14, "contains"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // join it in info_type on it.id == mi.info_type_id
  Const        r25, 0
  Move         r110, r25
  LessInt      r111, r110, r108
  JumpIfFalse  r111, L9
  Index        r112, r107, r110
  Move         r113, r112
  Const        r31, "id"
  Index        r114, r113, r31
  Const        r109, "info_type_id"
  Index        r115, r103, r109
  Equal        r116, r114, r115
  JumpIfFalse  r116, L10
  // where ci.note in [
  Const        r11, "note"
  Index        r117, r45, r11
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  Index        r118, r75, r18
  Const        r119, 2005
  LessEq       r120, r119, r118
  // t.production_year <= 2009
  Index        r121, r75, r18
  Const        r122, 2009
  LessEq       r123, r121, r122
  // where ci.note in [
  Const        r124, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r125, r117, r124
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  Index        r126, r94, r12
  Const        r127, "[us]"
  Equal        r128, r126, r127
  // it.info == "release dates" &&
  Const        r13, "info"
  Index        r129, r113, r13
  Const        r130, "release dates"
  Equal        r131, r129, r130
  // mc.note != null &&
  Index        r132, r84, r11
  Const        r133, nil
  NotEqual     r134, r132, r133
  // mi.info != null &&
  Index        r135, r103, r13
  NotEqual     r136, r135, r133
  // n.gender == "f" &&
  Const        r15, "gender"
  Index        r137, r36, r15
  Const        r138, "f"
  Equal        r139, r137, r138
  // rt.role == "actress" &&
  Const        r17, "role"
  Index        r140, r65, r17
  Const        r19, "actress"
  Equal        r141, r140, r19
  // ] &&
  Move         r142, r125
  JumpIfFalse  r142, L11
  Move         r142, r128
  // cn.country_code == "[us]" &&
  JumpIfFalse  r142, L11
  Move         r142, r131
  // it.info == "release dates" &&
  JumpIfFalse  r142, L11
  Move         r142, r134
  // mc.note != null &&
  JumpIfFalse  r142, L11
  Const        r11, "note"
  Index        r143, r84, r11
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r144, "(USA)"
  In           r145, r144, r143
  Move         r146, r145
  JumpIfTrue   r146, L12
  Const        r11, "note"
  Index        r147, r84, r11
  Const        r148, "(worldwide)"
  In           r149, r148, r147
  Move         r146, r149
  // mc.note != null &&
  Move         r142, r146
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  JumpIfFalse  r142, L11
  Move         r142, r136
  // mi.info != null &&
  JumpIfFalse  r142, L11
  Const        r13, "info"
  Index        r150, r103, r13
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r151, "Japan:"
  In           r152, r151, r150
  Move         r153, r152
  JumpIfFalse  r153, L13
  Const        r13, "info"
  Index        r154, r103, r13
  Const        r155, "200"
  In           r156, r155, r154
  Move         r153, r156
  Move         r157, r153
  JumpIfTrue   r157, L14
  Const        r13, "info"
  Index        r158, r103, r13
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r159, "USA:"
  In           r160, r159, r158
  Move         r161, r160
  JumpIfFalse  r161, L15
  Const        r13, "info"
  Index        r162, r103, r13
  Const        r155, "200"
  In           r163, r155, r162
  Move         r161, r163
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Move         r157, r161
  // mi.info != null &&
  Move         r142, r157
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  JumpIfFalse  r142, L11
  Move         r142, r139
  // n.gender == "f" &&
  JumpIfFalse  r142, L11
  Const        r16, "name"
  Index        r164, r36, r16
  // n.name.contains("Ang") &&
  Const        r165, "Ang"
  In           r166, r165, r164
  // n.gender == "f" &&
  Move         r142, r166
  // n.name.contains("Ang") &&
  JumpIfFalse  r142, L11
  Move         r142, r141
  // rt.role == "actress" &&
  JumpIfFalse  r142, L11
  Move         r142, r120
  // t.production_year >= 2005 &&
  JumpIfFalse  r142, L11
  Move         r142, r123
  // where ci.note in [
  JumpIfFalse  r142, L10
  // select { actress: n.name, movie: t.title }
  Const        r167, "actress"
  Const        r16, "name"
  Index        r168, r36, r16
  Const        r169, "movie"
  Const        r21, "title"
  Index        r170, r75, r21
  Move         r171, r167
  Move         r172, r168
  Move         r173, r169
  Move         r174, r170
  MakeMap      r175, 2, r171
  // from an in aka_name
  Append       r176, r10, r175
  Move         r10, r176
  // join it in info_type on it.id == mi.info_type_id
  Const        r177, 1
  Add          r110, r110, r177
  // voicing_actress: min(from r in matches select r.actress),
  Append       r188, r180, r187
  Move         r180, r188
  Const        r177, 1
  AddInt       r183, r183, r177
  Jump         L16
