func main (regs=275)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
  Move         r1, r0
  // let char_name = [
  Const        r2, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
  Move         r3, r2
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
  Move         r5, r4
  // let company_name = [
  Const        r6, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  Move         r7, r6
  // let info_type = [
  Const        r8, [{"id": 100, "info": "release dates"}]
  Move         r9, r8
  // let movie_companies = [
  Const        r10, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
  Move         r11, r10
  // let movie_info = [
  Const        r12, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
  Move         r13, r12
  // let name = [
  Const        r14, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
  Move         r15, r14
  // let role_type = [
  Const        r16, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  Move         r17, r16
  // let title = [
  Const        r18, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  Move         r19, r18
  // from an in aka_name
  Const        r20, []
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L35:
  Less         r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  // join n in name on n.id == an.person_id
  IterPrep     r27, r15
  Len          r28, r27
  Const        r29, 0
L34:
  Less         r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r31, r27, r29
  Move         r32, r31
  Const        r33, "id"
  Index        r34, r32, r33
  Const        r35, "person_id"
  Index        r36, r26, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r38, r5
  Len          r39, r38
  Const        r40, 0
L33:
  Less         r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Move         r43, r42
  Const        r44, "person_id"
  Index        r45, r43, r44
  Const        r46, "person_id"
  Index        r47, r26, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r49, r3
  Len          r50, r49
  Const        r51, 0
L32:
  Less         r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r53, r49, r51
  Move         r54, r53
  Const        r55, "id"
  Index        r56, r54, r55
  Const        r57, "person_role_id"
  Index        r58, r43, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r60, r17
  Len          r61, r60
  Const        r62, 0
L31:
  Less         r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r64, r60, r62
  Move         r65, r64
  Const        r66, "id"
  Index        r67, r65, r66
  Const        r68, "role_id"
  Index        r69, r43, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r71, r19
  Len          r72, r71
  Const        r73, 0
L30:
  Less         r74, r73, r72
  JumpIfFalse  r74, L5
  Index        r75, r71, r73
  Move         r76, r75
  Const        r77, "id"
  Index        r78, r76, r77
  Const        r79, "movie_id"
  Index        r80, r43, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r82, r11
  Len          r83, r82
  Const        r84, 0
L29:
  Less         r85, r84, r83
  JumpIfFalse  r85, L6
  Index        r86, r82, r84
  Move         r87, r86
  Const        r88, "movie_id"
  Index        r89, r87, r88
  Const        r90, "id"
  Index        r91, r76, r90
  Equal        r92, r89, r91
  JumpIfFalse  r92, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r93, r7
  Len          r94, r93
  Const        r95, 0
L28:
  Less         r96, r95, r94
  JumpIfFalse  r96, L7
  Index        r97, r93, r95
  Move         r98, r97
  Const        r99, "id"
  Index        r100, r98, r99
  Const        r101, "company_id"
  Index        r102, r87, r101
  Equal        r103, r100, r102
  JumpIfFalse  r103, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r104, r13
  Len          r105, r104
  Const        r106, 0
L27:
  Less         r107, r106, r105
  JumpIfFalse  r107, L8
  Index        r108, r104, r106
  Move         r109, r108
  Const        r110, "movie_id"
  Index        r111, r109, r110
  Const        r112, "id"
  Index        r113, r76, r112
  Equal        r114, r111, r113
  JumpIfFalse  r114, L9
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r115, r9
  Len          r116, r115
  Const        r117, 0
L26:
  Less         r118, r117, r116
  JumpIfFalse  r118, L9
  Index        r119, r115, r117
  Move         r120, r119
  Const        r121, "id"
  Index        r122, r120, r121
  Const        r123, "info_type_id"
  Index        r124, r109, r123
  Equal        r125, r122, r124
  JumpIfFalse  r125, L10
  // where ci.note in [
  Const        r126, "note"
  Index        r127, r43, r126
  // t.production_year >= 2005 &&
  Const        r128, "production_year"
  Index        r129, r76, r128
  Const        r130, 2005
  LessEq       r131, r130, r129
  // t.production_year <= 2009
  Const        r132, "production_year"
  Index        r133, r76, r132
  Const        r134, 2009
  LessEq       r135, r133, r134
  // where ci.note in [
  Const        r136, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r137, r127, r136
  // cn.country_code == "[us]" &&
  Const        r138, "country_code"
  Index        r139, r98, r138
  Const        r140, "[us]"
  Equal        r141, r139, r140
  // it.info == "release dates" &&
  Const        r142, "info"
  Index        r143, r120, r142
  Const        r144, "release dates"
  Equal        r145, r143, r144
  // mc.note != null &&
  Const        r146, "note"
  Index        r147, r87, r146
  Const        r148, nil
  NotEqual     r149, r147, r148
  // mi.info != null &&
  Const        r150, "info"
  Index        r151, r109, r150
  Const        r152, nil
  NotEqual     r153, r151, r152
  // n.gender == "f" &&
  Const        r154, "gender"
  Index        r155, r32, r154
  Const        r156, "f"
  Equal        r157, r155, r156
  // rt.role == "actress" &&
  Const        r158, "role"
  Index        r159, r65, r158
  Const        r160, "actress"
  Equal        r161, r159, r160
  // ] &&
  Move         r162, r137
  JumpIfFalse  r162, L11
  Move         r162, r141
L11:
  // cn.country_code == "[us]" &&
  Move         r163, r162
  JumpIfFalse  r163, L12
  Move         r163, r145
L12:
  // it.info == "release dates" &&
  Move         r164, r163
  JumpIfFalse  r164, L13
  Move         r164, r149
L13:
  // mc.note != null &&
  Move         r165, r164
  JumpIfFalse  r165, L14
  Const        r166, "note"
  Index        r167, r87, r166
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r168, "(USA)"
  In           r169, r168, r167
  Move         r170, r169
  JumpIfTrue   r170, L15
  Const        r171, "note"
  Index        r172, r87, r171
  Const        r173, "(worldwide)"
  In           r174, r173, r172
  Move         r170, r174
L15:
  // mc.note != null &&
  Move         r165, r170
L14:
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Move         r175, r165
  JumpIfFalse  r175, L16
  Move         r175, r153
L16:
  // mi.info != null &&
  Move         r176, r175
  JumpIfFalse  r176, L17
  Const        r177, "info"
  Index        r178, r109, r177
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r179, "Japan:"
  In           r180, r179, r178
  Move         r181, r180
  JumpIfFalse  r181, L18
  Const        r182, "info"
  Index        r183, r109, r182
  Const        r184, "200"
  In           r185, r184, r183
  Move         r181, r185
L18:
  Move         r186, r181
  JumpIfTrue   r186, L19
  Const        r187, "info"
  Index        r188, r109, r187
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r189, "USA:"
  In           r190, r189, r188
  Move         r191, r190
  JumpIfFalse  r191, L20
  Const        r192, "info"
  Index        r193, r109, r192
  Const        r194, "200"
  In           r195, r194, r193
  Move         r191, r195
L20:
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Move         r186, r191
L19:
  // mi.info != null &&
  Move         r176, r186
L17:
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Move         r196, r176
  JumpIfFalse  r196, L21
  Move         r196, r157
L21:
  // n.gender == "f" &&
  Move         r197, r196
  JumpIfFalse  r197, L22
  Const        r198, "name"
  Index        r199, r32, r198
  // n.name.contains("Ang") &&
  Const        r200, "Ang"
  In           r201, r200, r199
  // n.gender == "f" &&
  Move         r197, r201
L22:
  // n.name.contains("Ang") &&
  Move         r202, r197
  JumpIfFalse  r202, L23
  Move         r202, r161
L23:
  // rt.role == "actress" &&
  Move         r203, r202
  JumpIfFalse  r203, L24
  Move         r203, r131
L24:
  // t.production_year >= 2005 &&
  Move         r204, r203
  JumpIfFalse  r204, L25
  Move         r204, r135
L25:
  // where ci.note in [
  JumpIfFalse  r204, L10
  // select { actress: n.name, movie: t.title }
  Const        r205, "actress"
  Const        r206, "name"
  Index        r207, r32, r206
  Const        r208, "movie"
  Const        r209, "title"
  Index        r210, r76, r209
  Move         r211, r205
  Move         r212, r207
  Move         r213, r208
  Move         r214, r210
  MakeMap      r215, 2, r211
  // from an in aka_name
  Append       r216, r20, r215
  Move         r20, r216
L10:
  // join it in info_type on it.id == mi.info_type_id
  Const        r217, 1
  Add          r218, r117, r217
  Move         r117, r218
  Jump         L26
L9:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r219, 1
  Add          r220, r106, r219
  Move         r106, r220
  Jump         L27
L8:
  // join cn in company_name on cn.id == mc.company_id
  Const        r221, 1
  Add          r222, r95, r221
  Move         r95, r222
  Jump         L28
L7:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r223, 1
  Add          r224, r84, r223
  Move         r84, r224
  Jump         L29
L6:
  // join t in title on t.id == ci.movie_id
  Const        r225, 1
  Add          r226, r73, r225
  Move         r73, r226
  Jump         L30
L5:
  // join rt in role_type on rt.id == ci.role_id
  Const        r227, 1
  Add          r228, r62, r227
  Move         r62, r228
  Jump         L31
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r229, 1
  Add          r230, r51, r229
  Move         r51, r230
  Jump         L32
L3:
  // join ci in cast_info on ci.person_id == an.person_id
  Const        r231, 1
  Add          r232, r40, r231
  Move         r40, r232
  Jump         L33
L2:
  // join n in name on n.id == an.person_id
  Const        r233, 1
  Add          r234, r29, r233
  Move         r29, r234
  Jump         L34
L1:
  // from an in aka_name
  Const        r235, 1
  Add          r236, r23, r235
  Move         r23, r236
  Jump         L35
L0:
  // let matches =
  Move         r237, r20
  // voicing_actress: min(from r in matches select r.actress),
  Const        r238, "voicing_actress"
  Const        r239, []
  IterPrep     r240, r237
  Len          r241, r240
  Const        r242, 0
L37:
  Less         r243, r242, r241
  JumpIfFalse  r243, L36
  Index        r244, r240, r242
  Move         r245, r244
  Const        r246, "actress"
  Index        r247, r245, r246
  Append       r248, r239, r247
  Move         r239, r248
  Const        r249, 1
  Add          r250, r242, r249
  Move         r242, r250
  Jump         L37
L36:
  Min          r251, r239
  // voiced_movie: min(from r in matches select r.movie)
  Const        r252, "voiced_movie"
  Const        r253, []
  IterPrep     r254, r237
  Len          r255, r254
  Const        r256, 0
L39:
  Less         r257, r256, r255
  JumpIfFalse  r257, L38
  Index        r258, r254, r256
  Move         r245, r258
  Const        r259, "movie"
  Index        r260, r245, r259
  Append       r261, r253, r260
  Move         r253, r261
  Const        r262, 1
  Add          r263, r256, r262
  Move         r256, r263
  Jump         L39
L38:
  Min          r264, r253
  // voicing_actress: min(from r in matches select r.actress),
  Move         r265, r238
  Move         r266, r251
  // voiced_movie: min(from r in matches select r.movie)
  Move         r267, r252
  Move         r268, r264
  // {
  MakeMap      r269, 2, r265
  Move         r270, r269
  // let result = [
  MakeList     r271, 1, r270
  Move         r272, r271
  // json(result)
  JSON         r272
  // expect result == [
  Const        r273, [{"voiced_movie": "Voiced Movie", "voicing_actress": "Angela Stone"}]
  Equal        r274, r272, r273
  Expect       r274
  Return       r0
