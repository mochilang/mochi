func main (regs=553)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  // let info_type = [
  Const        r4, [{"id": 100, "info": "release dates"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
  // let name = [
  Const        r7, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
  // let role_type = [
  Const        r8, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  // from an in aka_name
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // mc.note != null &&
  Const        r14, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r15, "note"
  Const        r16, "contains"
  Const        r17, "note"
  Const        r18, "contains"
  // mi.info != null &&
  Const        r19, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r20, "info"
  Const        r21, "contains"
  Const        r22, "info"
  Const        r23, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r24, "info"
  Const        r25, "contains"
  Const        r26, "info"
  Const        r27, "contains"
  // n.gender == "f" &&
  Const        r28, "gender"
  // n.name.contains("Ang") &&
  Const        r29, "name"
  Const        r30, "contains"
  // rt.role == "actress" &&
  Const        r31, "role"
  // t.production_year >= 2005 &&
  Const        r32, "production_year"
  // t.production_year <= 2009
  Const        r33, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r34, "actress"
  Const        r35, "name"
  Const        r36, "movie"
  Const        r37, "title"
  // from an in aka_name
  IterPrep     r38, r0
  Len          r39, r38
  Const        r40, 0
L32:
  LessInt      r42, r40, r39
  JumpIfFalse  r42, L0
  Index        r44, r38, r40
  // join n in name on n.id == an.person_id
  IterPrep     r45, r7
  Len          r46, r45
  Const        r47, "id"
  Const        r48, "person_id"
  // where ci.note in [
  Const        r49, "note"
  // cn.country_code == "[us]" &&
  Const        r50, "country_code"
  // it.info == "release dates" &&
  Const        r51, "info"
  // mc.note != null &&
  Const        r52, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r53, "note"
  Const        r54, "contains"
  Const        r55, "note"
  Const        r56, "contains"
  // mi.info != null &&
  Const        r57, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r58, "info"
  Const        r59, "contains"
  Const        r60, "info"
  Const        r61, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r62, "info"
  Const        r63, "contains"
  Const        r64, "info"
  Const        r65, "contains"
  // n.gender == "f" &&
  Const        r66, "gender"
  // n.name.contains("Ang") &&
  Const        r67, "name"
  Const        r68, "contains"
  // rt.role == "actress" &&
  Const        r69, "role"
  // t.production_year >= 2005 &&
  Const        r70, "production_year"
  // t.production_year <= 2009
  Const        r71, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r72, "actress"
  Const        r73, "name"
  Const        r74, "movie"
  Const        r75, "title"
  // join n in name on n.id == an.person_id
  Const        r76, 0
L31:
  LessInt      r78, r76, r46
  JumpIfFalse  r78, L1
  Index        r80, r45, r76
  Const        r81, "id"
  Index        r82, r80, r81
  Const        r83, "person_id"
  Index        r84, r44, r83
  Equal        r85, r82, r84
  JumpIfFalse  r85, L2
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r86, r2
  Len          r87, r86
  Const        r88, "person_id"
  Const        r89, "person_id"
  // where ci.note in [
  Const        r90, "note"
  // cn.country_code == "[us]" &&
  Const        r91, "country_code"
  // it.info == "release dates" &&
  Const        r92, "info"
  // mc.note != null &&
  Const        r93, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r94, "note"
  Const        r95, "contains"
  Const        r96, "note"
  Const        r97, "contains"
  // mi.info != null &&
  Const        r98, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r99, "info"
  Const        r100, "contains"
  Const        r101, "info"
  Const        r102, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r103, "info"
  Const        r104, "contains"
  Const        r105, "info"
  Const        r106, "contains"
  // n.gender == "f" &&
  Const        r107, "gender"
  // n.name.contains("Ang") &&
  Const        r108, "name"
  Const        r109, "contains"
  // rt.role == "actress" &&
  Const        r110, "role"
  // t.production_year >= 2005 &&
  Const        r111, "production_year"
  // t.production_year <= 2009
  Const        r112, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r113, "actress"
  Const        r114, "name"
  Const        r115, "movie"
  Const        r116, "title"
  // join ci in cast_info on ci.person_id == an.person_id
  Const        r117, 0
L30:
  LessInt      r119, r117, r87
  JumpIfFalse  r119, L2
  Index        r121, r86, r117
  Const        r122, "person_id"
  Index        r123, r121, r122
  Const        r124, "person_id"
  Index        r125, r44, r124
  Equal        r126, r123, r125
  JumpIfFalse  r126, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r127, r1
  Len          r128, r127
  Const        r129, "id"
  Const        r130, "person_role_id"
  // where ci.note in [
  Const        r131, "note"
  // cn.country_code == "[us]" &&
  Const        r132, "country_code"
  // it.info == "release dates" &&
  Const        r133, "info"
  // mc.note != null &&
  Const        r134, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r135, "note"
  Const        r136, "contains"
  Const        r137, "note"
  Const        r138, "contains"
  // mi.info != null &&
  Const        r139, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r140, "info"
  Const        r141, "contains"
  Const        r142, "info"
  Const        r143, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r144, "info"
  Const        r145, "contains"
  Const        r146, "info"
  Const        r147, "contains"
  // n.gender == "f" &&
  Const        r148, "gender"
  // n.name.contains("Ang") &&
  Const        r149, "name"
  Const        r150, "contains"
  // rt.role == "actress" &&
  Const        r151, "role"
  // t.production_year >= 2005 &&
  Const        r152, "production_year"
  // t.production_year <= 2009
  Const        r153, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r154, "actress"
  Const        r155, "name"
  Const        r156, "movie"
  Const        r157, "title"
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r158, 0
L29:
  LessInt      r160, r158, r128
  JumpIfFalse  r160, L3
  Index        r162, r127, r158
  Const        r163, "id"
  Index        r164, r162, r163
  Const        r165, "person_role_id"
  Index        r166, r121, r165
  Equal        r167, r164, r166
  JumpIfFalse  r167, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r168, r8
  Len          r169, r168
  Const        r170, "id"
  Const        r171, "role_id"
  // where ci.note in [
  Const        r172, "note"
  // cn.country_code == "[us]" &&
  Const        r173, "country_code"
  // it.info == "release dates" &&
  Const        r174, "info"
  // mc.note != null &&
  Const        r175, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r176, "note"
  Const        r177, "contains"
  Const        r178, "note"
  Const        r179, "contains"
  // mi.info != null &&
  Const        r180, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r181, "info"
  Const        r182, "contains"
  Const        r183, "info"
  Const        r184, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r185, "info"
  Const        r186, "contains"
  Const        r187, "info"
  Const        r188, "contains"
  // n.gender == "f" &&
  Const        r189, "gender"
  // n.name.contains("Ang") &&
  Const        r190, "name"
  Const        r191, "contains"
  // rt.role == "actress" &&
  Const        r192, "role"
  // t.production_year >= 2005 &&
  Const        r193, "production_year"
  // t.production_year <= 2009
  Const        r194, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r195, "actress"
  Const        r196, "name"
  Const        r197, "movie"
  Const        r198, "title"
  // join rt in role_type on rt.id == ci.role_id
  Const        r199, 0
L28:
  LessInt      r201, r199, r169
  JumpIfFalse  r201, L4
  Index        r203, r168, r199
  Const        r204, "id"
  Index        r205, r203, r204
  Const        r206, "role_id"
  Index        r207, r121, r206
  Equal        r208, r205, r207
  JumpIfFalse  r208, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r209, r9
  Len          r210, r209
  Const        r211, "id"
  Const        r212, "movie_id"
  // where ci.note in [
  Const        r213, "note"
  // cn.country_code == "[us]" &&
  Const        r214, "country_code"
  // it.info == "release dates" &&
  Const        r215, "info"
  // mc.note != null &&
  Const        r216, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r217, "note"
  Const        r218, "contains"
  Const        r219, "note"
  Const        r220, "contains"
  // mi.info != null &&
  Const        r221, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r222, "info"
  Const        r223, "contains"
  Const        r224, "info"
  Const        r225, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r226, "info"
  Const        r227, "contains"
  Const        r228, "info"
  Const        r229, "contains"
  // n.gender == "f" &&
  Const        r230, "gender"
  // n.name.contains("Ang") &&
  Const        r231, "name"
  Const        r232, "contains"
  // rt.role == "actress" &&
  Const        r233, "role"
  // t.production_year >= 2005 &&
  Const        r234, "production_year"
  // t.production_year <= 2009
  Const        r235, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r236, "actress"
  Const        r237, "name"
  Const        r238, "movie"
  Const        r239, "title"
  // join t in title on t.id == ci.movie_id
  Const        r240, 0
L27:
  LessInt      r242, r240, r210
  JumpIfFalse  r242, L5
  Index        r244, r209, r240
  Const        r245, "id"
  Index        r246, r244, r245
  Const        r247, "movie_id"
  Index        r248, r121, r247
  Equal        r249, r246, r248
  JumpIfFalse  r249, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r250, r5
  Len          r251, r250
  Const        r252, "movie_id"
  Const        r253, "id"
  // where ci.note in [
  Const        r254, "note"
  // cn.country_code == "[us]" &&
  Const        r255, "country_code"
  // it.info == "release dates" &&
  Const        r256, "info"
  // mc.note != null &&
  Const        r257, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r258, "note"
  Const        r259, "contains"
  Const        r260, "note"
  Const        r261, "contains"
  // mi.info != null &&
  Const        r262, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r263, "info"
  Const        r264, "contains"
  Const        r265, "info"
  Const        r266, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r267, "info"
  Const        r268, "contains"
  Const        r269, "info"
  Const        r270, "contains"
  // n.gender == "f" &&
  Const        r271, "gender"
  // n.name.contains("Ang") &&
  Const        r272, "name"
  Const        r273, "contains"
  // rt.role == "actress" &&
  Const        r274, "role"
  // t.production_year >= 2005 &&
  Const        r275, "production_year"
  // t.production_year <= 2009
  Const        r276, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r277, "actress"
  Const        r278, "name"
  Const        r279, "movie"
  Const        r280, "title"
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r281, 0
L26:
  LessInt      r283, r281, r251
  JumpIfFalse  r283, L6
  Index        r285, r250, r281
  Const        r286, "movie_id"
  Index        r287, r285, r286
  Const        r288, "id"
  Index        r289, r244, r288
  Equal        r290, r287, r289
  JumpIfFalse  r290, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r291, r3
  Len          r292, r291
  Const        r293, "id"
  Const        r294, "company_id"
  // where ci.note in [
  Const        r295, "note"
  // cn.country_code == "[us]" &&
  Const        r296, "country_code"
  // it.info == "release dates" &&
  Const        r297, "info"
  // mc.note != null &&
  Const        r298, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r299, "note"
  Const        r300, "contains"
  Const        r301, "note"
  Const        r302, "contains"
  // mi.info != null &&
  Const        r303, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r304, "info"
  Const        r305, "contains"
  Const        r306, "info"
  Const        r307, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r308, "info"
  Const        r309, "contains"
  Const        r310, "info"
  Const        r311, "contains"
  // n.gender == "f" &&
  Const        r312, "gender"
  // n.name.contains("Ang") &&
  Const        r313, "name"
  Const        r314, "contains"
  // rt.role == "actress" &&
  Const        r315, "role"
  // t.production_year >= 2005 &&
  Const        r316, "production_year"
  // t.production_year <= 2009
  Const        r317, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r318, "actress"
  Const        r319, "name"
  Const        r320, "movie"
  Const        r321, "title"
  // join cn in company_name on cn.id == mc.company_id
  Const        r322, 0
L25:
  LessInt      r324, r322, r292
  JumpIfFalse  r324, L7
  Index        r326, r291, r322
  Const        r327, "id"
  Index        r328, r326, r327
  Const        r329, "company_id"
  Index        r330, r285, r329
  Equal        r331, r328, r330
  JumpIfFalse  r331, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r332, r6
  Len          r333, r332
  Const        r334, "movie_id"
  Const        r335, "id"
  // where ci.note in [
  Const        r336, "note"
  // cn.country_code == "[us]" &&
  Const        r337, "country_code"
  // it.info == "release dates" &&
  Const        r338, "info"
  // mc.note != null &&
  Const        r339, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r340, "note"
  Const        r341, "contains"
  Const        r342, "note"
  Const        r343, "contains"
  // mi.info != null &&
  Const        r344, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r345, "info"
  Const        r346, "contains"
  Const        r347, "info"
  Const        r348, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r349, "info"
  Const        r350, "contains"
  Const        r351, "info"
  Const        r352, "contains"
  // n.gender == "f" &&
  Const        r353, "gender"
  // n.name.contains("Ang") &&
  Const        r354, "name"
  Const        r355, "contains"
  // rt.role == "actress" &&
  Const        r356, "role"
  // t.production_year >= 2005 &&
  Const        r357, "production_year"
  // t.production_year <= 2009
  Const        r358, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r359, "actress"
  Const        r360, "name"
  Const        r361, "movie"
  Const        r362, "title"
  // join mi in movie_info on mi.movie_id == t.id
  Const        r363, 0
L24:
  LessInt      r365, r363, r333
  JumpIfFalse  r365, L8
  Index        r367, r332, r363
  Const        r368, "movie_id"
  Index        r369, r367, r368
  Const        r370, "id"
  Index        r371, r244, r370
  Equal        r372, r369, r371
  JumpIfFalse  r372, L9
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r373, r4
  Len          r374, r373
  Const        r375, "id"
  Const        r376, "info_type_id"
  // where ci.note in [
  Const        r377, "note"
  // cn.country_code == "[us]" &&
  Const        r378, "country_code"
  // it.info == "release dates" &&
  Const        r379, "info"
  // mc.note != null &&
  Const        r380, "note"
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r381, "note"
  Const        r382, "contains"
  Const        r383, "note"
  Const        r384, "contains"
  // mi.info != null &&
  Const        r385, "info"
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r386, "info"
  Const        r387, "contains"
  Const        r388, "info"
  Const        r389, "contains"
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r390, "info"
  Const        r391, "contains"
  Const        r392, "info"
  Const        r393, "contains"
  // n.gender == "f" &&
  Const        r394, "gender"
  // n.name.contains("Ang") &&
  Const        r395, "name"
  Const        r396, "contains"
  // rt.role == "actress" &&
  Const        r397, "role"
  // t.production_year >= 2005 &&
  Const        r398, "production_year"
  // t.production_year <= 2009
  Const        r399, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r400, "actress"
  Const        r401, "name"
  Const        r402, "movie"
  Const        r403, "title"
  // join it in info_type on it.id == mi.info_type_id
  Const        r404, 0
L23:
  LessInt      r406, r404, r374
  JumpIfFalse  r406, L9
  Index        r408, r373, r404
  Const        r409, "id"
  Index        r410, r408, r409
  Const        r411, "info_type_id"
  Index        r412, r367, r411
  Equal        r413, r410, r412
  JumpIfFalse  r413, L10
  // where ci.note in [
  Const        r414, "note"
  Index        r415, r121, r414
  // t.production_year >= 2005 &&
  Const        r416, "production_year"
  Index        r417, r244, r416
  Const        r418, 2005
  LessEq       r419, r418, r417
  // t.production_year <= 2009
  Const        r420, "production_year"
  Index        r421, r244, r420
  Const        r422, 2009
  LessEq       r423, r421, r422
  // where ci.note in [
  Const        r424, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r425, r415, r424
  // cn.country_code == "[us]" &&
  Const        r426, "country_code"
  Index        r427, r326, r426
  Const        r428, "[us]"
  Equal        r429, r427, r428
  // it.info == "release dates" &&
  Const        r430, "info"
  Index        r431, r408, r430
  Const        r432, "release dates"
  Equal        r433, r431, r432
  // mc.note != null &&
  Const        r434, "note"
  Index        r435, r285, r434
  Const        r436, nil
  NotEqual     r437, r435, r436
  // mi.info != null &&
  Const        r438, "info"
  Index        r439, r367, r438
  Const        r440, nil
  NotEqual     r441, r439, r440
  // n.gender == "f" &&
  Const        r442, "gender"
  Index        r443, r80, r442
  Const        r444, "f"
  Equal        r445, r443, r444
  // rt.role == "actress" &&
  Const        r446, "role"
  Index        r447, r203, r446
  Const        r448, "actress"
  Equal        r449, r447, r448
  // ] &&
  Move         r450, r425
  JumpIfFalse  r450, L11
L11:
  // cn.country_code == "[us]" &&
  Move         r451, r429
  JumpIfFalse  r451, L12
L12:
  // it.info == "release dates" &&
  Move         r452, r433
  JumpIfFalse  r452, L13
L13:
  // mc.note != null &&
  Move         r453, r437
  JumpIfFalse  r453, L14
  Const        r454, "note"
  Index        r455, r285, r454
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r456, "(USA)"
  In           r458, r456, r455
  JumpIfTrue   r458, L14
  Const        r459, "note"
  Index        r460, r285, r459
  Const        r461, "(worldwide)"
  In           r458, r461, r460
L14:
  Move         r463, r458
  JumpIfFalse  r463, L15
L15:
  // mi.info != null &&
  Move         r464, r441
  JumpIfFalse  r464, L16
  Const        r465, "info"
  Index        r466, r367, r465
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r467, "Japan:"
  In           r469, r467, r466
  JumpIfFalse  r469, L17
  Const        r470, "info"
  Index        r471, r367, r470
  Const        r472, "200"
  In           r474, r472, r471
L17:
  JumpIfTrue   r474, L16
  Const        r475, "info"
  Index        r476, r367, r475
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r477, "USA:"
  In           r479, r477, r476
  JumpIfFalse  r479, L16
  Const        r480, "info"
  Index        r481, r367, r480
  Const        r482, "200"
  In           r479, r482, r481
L16:
  Move         r484, r479
  JumpIfFalse  r484, L18
L18:
  // n.gender == "f" &&
  Move         r485, r445
  JumpIfFalse  r485, L19
  Const        r486, "name"
  Index        r487, r80, r486
  // n.name.contains("Ang") &&
  Const        r488, "Ang"
  In           r490, r488, r487
L19:
  JumpIfFalse  r490, L20
L20:
  // rt.role == "actress" &&
  Move         r491, r449
  JumpIfFalse  r491, L21
L21:
  // t.production_year >= 2005 &&
  Move         r492, r419
  JumpIfFalse  r492, L22
  Move         r492, r423
L22:
  // where ci.note in [
  JumpIfFalse  r492, L10
  // select { actress: n.name, movie: t.title }
  Const        r493, "actress"
  Const        r494, "name"
  Index        r495, r80, r494
  Const        r496, "movie"
  Const        r497, "title"
  Index        r498, r244, r497
  Move         r499, r493
  Move         r500, r495
  Move         r501, r496
  Move         r502, r498
  MakeMap      r503, 2, r499
  // from an in aka_name
  Append       r10, r10, r503
L10:
  // join it in info_type on it.id == mi.info_type_id
  Const        r505, 1
  Add          r404, r404, r505
  Jump         L23
L9:
  // join mi in movie_info on mi.movie_id == t.id
  Const        r506, 1
  Add          r363, r363, r506
  Jump         L24
L8:
  // join cn in company_name on cn.id == mc.company_id
  Const        r507, 1
  Add          r322, r322, r507
  Jump         L25
L7:
  // join mc in movie_companies on mc.movie_id == t.id
  Const        r508, 1
  Add          r281, r281, r508
  Jump         L26
L6:
  // join t in title on t.id == ci.movie_id
  Const        r509, 1
  Add          r240, r240, r509
  Jump         L27
L5:
  // join rt in role_type on rt.id == ci.role_id
  Const        r510, 1
  Add          r199, r199, r510
  Jump         L28
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Const        r511, 1
  Add          r158, r158, r511
  Jump         L29
L3:
  // join ci in cast_info on ci.person_id == an.person_id
  Const        r512, 1
  Add          r117, r117, r512
  Jump         L30
L2:
  // join n in name on n.id == an.person_id
  Const        r513, 1
  Add          r76, r76, r513
  Jump         L31
L1:
  // from an in aka_name
  Const        r514, 1
  AddInt       r40, r40, r514
  Jump         L32
L0:
  // voicing_actress: min(from r in matches select r.actress),
  Const        r515, "voicing_actress"
  Const        r516, []
  Const        r517, "actress"
  IterPrep     r518, r10
  Len          r519, r518
  Const        r520, 0
L34:
  LessInt      r522, r520, r519
  JumpIfFalse  r522, L33
  Index        r524, r518, r520
  Const        r525, "actress"
  Index        r526, r524, r525
  Append       r516, r516, r526
  Const        r528, 1
  AddInt       r520, r520, r528
  Jump         L34
L33:
  Min          r529, r516
  // voiced_movie: min(from r in matches select r.movie)
  Const        r530, "voiced_movie"
  Const        r531, []
  Const        r532, "movie"
  IterPrep     r533, r10
  Len          r534, r533
  Const        r535, 0
L36:
  LessInt      r537, r535, r534
  JumpIfFalse  r537, L35
  Index        r524, r533, r535
  Const        r539, "movie"
  Index        r540, r524, r539
  Append       r531, r531, r540
  Const        r542, 1
  AddInt       r535, r535, r542
  Jump         L36
L35:
  Min          r543, r531
  // voicing_actress: min(from r in matches select r.actress),
  Move         r544, r515
  Move         r545, r529
  // voiced_movie: min(from r in matches select r.movie)
  Move         r546, r530
  Move         r547, r543
  // {
  MakeMap      r549, 2, r544
  // let result = [
  MakeList     r550, 1, r549
  // json(result)
  JSON         r550
  // expect result == [
  Const        r551, [{"voiced_movie": "Voiced Movie", "voicing_actress": "Angela Stone"}]
  Equal        r552, r550, r551
  Expect       r552
  Return       r0
