func main (regs=215)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  // let info_type = [
  Const        r4, [{"id": 100, "info": "release dates"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
  // let movie_info = [
  Const        r6, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
  // let name = [
  Const        r7, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
  // let role_type = [
  Const        r8, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  // from an in aka_name
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // n.gender == "f" &&
  Const        r15, "gender"
  // n.name.contains("Ang") &&
  Const        r16, "name"
  // rt.role == "actress" &&
  Const        r17, "role"
  // t.production_year >= 2005 &&
  Const        r18, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r19, "actress"
  Const        r20, "movie"
  Const        r21, "title"
  // from an in aka_name
  IterPrep     r22, r0
  Len          r23, r22
  Const        r25, 0
  Move         r24, r25
L32:
  LessInt      r26, r24, r23
  JumpIfFalse  r26, L0
  Index        r28, r22, r24
  // join n in name on n.id == an.person_id
  IterPrep     r29, r7
  Len          r30, r29
  Const        r31, "id"
  Const        r32, "person_id"
  Move         r33, r25
L31:
  LessInt      r34, r33, r30
  JumpIfFalse  r34, L1
  Index        r36, r29, r33
  Index        r37, r36, r31
  Index        r38, r28, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r40, r2
  Len          r41, r40
  Move         r42, r25
L30:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Index        r46, r45, r32
  Index        r47, r28, r32
  Equal        r48, r46, r47
  JumpIfFalse  r48, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r49, r1
  Len          r50, r49
  Const        r51, "person_role_id"
  Move         r52, r25
L29:
  LessInt      r53, r52, r50
  JumpIfFalse  r53, L3
  Index        r55, r49, r52
  Index        r56, r55, r31
  Index        r57, r45, r51
  Equal        r58, r56, r57
  JumpIfFalse  r58, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r59, r8
  Len          r60, r59
  Const        r61, "role_id"
  Move         r62, r25
L28:
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L4
  Index        r65, r59, r62
  Index        r66, r65, r31
  Index        r67, r45, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r69, r9
  Len          r70, r69
  Const        r71, "movie_id"
  Move         r72, r25
L27:
  LessInt      r73, r72, r70
  JumpIfFalse  r73, L5
  Index        r75, r69, r72
  Index        r76, r75, r31
  Index        r77, r45, r71
  Equal        r78, r76, r77
  JumpIfFalse  r78, L6
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r79, r5
  Len          r80, r79
  Move         r81, r25
L26:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L6
  Index        r84, r79, r81
  Index        r85, r84, r71
  Index        r86, r75, r31
  Equal        r87, r85, r86
  JumpIfFalse  r87, L7
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r88, r3
  Len          r89, r88
  Const        r90, "company_id"
  Move         r91, r25
L25:
  LessInt      r92, r91, r89
  JumpIfFalse  r92, L7
  Index        r94, r88, r91
  Index        r95, r94, r31
  Index        r96, r84, r90
  Equal        r97, r95, r96
  JumpIfFalse  r97, L8
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r98, r6
  Len          r99, r98
  Move         r100, r25
L24:
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L8
  Index        r103, r98, r100
  Index        r104, r103, r71
  Index        r105, r75, r31
  Equal        r106, r104, r105
  JumpIfFalse  r106, L9
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r107, r4
  Len          r108, r107
  Const        r109, "info_type_id"
  Move         r110, r25
L23:
  LessInt      r111, r110, r108
  JumpIfFalse  r111, L9
  Index        r113, r107, r110
  Index        r114, r113, r31
  Index        r115, r103, r109
  Equal        r116, r114, r115
  JumpIfFalse  r116, L10
  // where ci.note in [
  Index        r117, r45, r11
  // t.production_year >= 2005 &&
  Index        r118, r75, r18
  Const        r119, 2005
  LessEq       r120, r119, r118
  // t.production_year <= 2009
  Index        r121, r75, r18
  Const        r122, 2009
  LessEq       r123, r121, r122
  // where ci.note in [
  Const        r124, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r125, r117, r124
  // cn.country_code == "[us]" &&
  Index        r126, r94, r12
  Const        r127, "[us]"
  Equal        r128, r126, r127
  // it.info == "release dates" &&
  Index        r129, r113, r13
  Const        r130, "release dates"
  Equal        r131, r129, r130
  // mc.note != null &&
  Index        r132, r84, r11
  Const        r133, nil
  NotEqual     r134, r132, r133
  // mi.info != null &&
  Index        r135, r103, r13
  Const        r136, nil
  NotEqual     r137, r135, r136
  // n.gender == "f" &&
  Index        r138, r36, r15
  Const        r139, "f"
  Equal        r140, r138, r139
  // rt.role == "actress" &&
  Index        r141, r65, r17
  Equal        r142, r141, r19
  // ] &&
  Move         r143, r125
  JumpIfFalse  r143, L11
L11:
  // cn.country_code == "[us]" &&
  Move         r144, r128
  JumpIfFalse  r144, L12
L12:
  // it.info == "release dates" &&
  Move         r145, r131
  JumpIfFalse  r145, L13
L13:
  // mc.note != null &&
  Move         r146, r134
  JumpIfFalse  r146, L14
  Index        r147, r84, r11
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r148, "(USA)"
  In           r150, r148, r147
  JumpIfTrue   r150, L14
  Index        r151, r84, r11
  Const        r152, "(worldwide)"
  In           r150, r152, r151
L14:
  Move         r154, r150
  JumpIfFalse  r154, L15
L15:
  // mi.info != null &&
  Move         r155, r137
  JumpIfFalse  r155, L16
  Index        r156, r103, r13
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r157, "Japan:"
  In           r159, r157, r156
  JumpIfFalse  r159, L17
  Index        r160, r103, r13
  Const        r161, "200"
  In           r163, r161, r160
L17:
  JumpIfTrue   r163, L16
  Index        r164, r103, r13
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r165, "USA:"
  In           r167, r165, r164
  JumpIfFalse  r167, L16
  Index        r168, r103, r13
  In           r167, r161, r168
L16:
  Move         r170, r167
  JumpIfFalse  r170, L18
L18:
  // n.gender == "f" &&
  Move         r171, r140
  JumpIfFalse  r171, L19
  Index        r172, r36, r16
  // n.name.contains("Ang") &&
  Const        r173, "Ang"
  In           r175, r173, r172
L19:
  JumpIfFalse  r175, L20
L20:
  // rt.role == "actress" &&
  Move         r176, r142
  JumpIfFalse  r176, L21
L21:
  // t.production_year >= 2005 &&
  Move         r177, r120
  JumpIfFalse  r177, L22
  Move         r177, r123
L22:
  // where ci.note in [
  JumpIfFalse  r177, L10
  // select { actress: n.name, movie: t.title }
  Const        r178, "actress"
  Index        r179, r36, r16
  Const        r180, "movie"
  Index        r181, r75, r21
  MakeMap      r184, 2, r178
  // from an in aka_name
  Append       r10, r10, r184
L10:
  // join it in info_type on it.id == mi.info_type_id
  Const        r186, 1
  Add          r110, r110, r186
  Jump         L23
L9:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r100, r100, r186
  Jump         L24
L8:
  // join cn in company_name on cn.id == mc.company_id
  Add          r91, r91, r186
  Jump         L25
L7:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r81, r81, r186
  Jump         L26
L6:
  // join t in title on t.id == ci.movie_id
  Add          r72, r72, r186
  Jump         L27
L5:
  // join rt in role_type on rt.id == ci.role_id
  Add          r62, r62, r186
  Jump         L28
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r52, r52, r186
  Jump         L29
L3:
  // join ci in cast_info on ci.person_id == an.person_id
  Add          r42, r42, r186
  Jump         L30
L2:
  // join n in name on n.id == an.person_id
  Jump         L31
L1:
  // from an in aka_name
  AddInt       r24, r24, r186
  Jump         L32
L0:
  // voicing_actress: min(from r in matches select r.actress),
  Const        r187, "voicing_actress"
  Const        r188, []
  IterPrep     r189, r10
  Len          r190, r189
  Move         r191, r25
L34:
  LessInt      r192, r191, r190
  JumpIfFalse  r192, L33
  Index        r194, r189, r191
  Index        r195, r194, r19
  Append       r188, r188, r195
  AddInt       r191, r191, r186
  Jump         L34
L33:
  // voiced_movie: min(from r in matches select r.movie)
  Const        r199, []
  IterPrep     r200, r10
  Len          r201, r200
  Move         r202, r25
L36:
  LessInt      r203, r202, r201
  JumpIfFalse  r203, L35
  Index        r194, r200, r202
  Index        r205, r194, r20
  Append       r199, r199, r205
  AddInt       r202, r202, r186
  Jump         L36
L35:
  // {
  MakeMap      r211, 2, r187
  // let result = [
  MakeList     r212, 1, r211
  // json(result)
  JSON         r212
  // expect result == [
  Const        r213, [{"voiced_movie": "Voiced Movie", "voicing_actress": "Angela Stone"}]
  Equal        r214, r212, r213
  Expect       r214
  Return       r0
