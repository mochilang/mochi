func main (regs=40)
  // let aka_name = [
  Const        r0, [{"name": "A. Stone", "person_id": 1}, {"name": "J. Doe", "person_id": 2}]
L18:
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
L14:
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}, {"movie_id": 2, "note": "Cameo", "person_id": 2, "person_role_id": 2, "role_id": 2}]
L7:
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 10}, {"country_code": "[gb]", "id": 20}]
  // let info_type = [
  Const        r4, [{"id": 100, "info": "release dates"}]
L16:
  // let movie_companies = [
  Const        r5, [{"company_id": 10, "movie_id": 1, "note": "Studio (USA)"}, {"company_id": 20, "movie_id": 2, "note": "Other (worldwide)"}]
L13:
  // let movie_info = [
  Const        r6, [{"info": "USA: June 2006", "info_type_id": 100, "movie_id": 1}, {"info": "UK: 1999", "info_type_id": 100, "movie_id": 2}]
  // let name = [
  Const        r7, [{"gender": "f", "id": 1, "name": "Angela Stone"}, {"gender": "m", "id": 2, "name": "Bob Angstrom"}]
L11:
  // let role_type = [
  Const        r8, [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
  // let title = [
  Const        r9, [{"id": 1, "production_year": 2006, "title": "Voiced Movie"}, {"id": 2, "production_year": 2010, "title": "Other Movie"}]
  // from an in aka_name
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.country_code == "[us]" &&
  Const        r12, "country_code"
  // it.info == "release dates" &&
  Const        r13, "info"
  // n.gender == "f" &&
  Const        r14, "gender"
  // n.name.contains("Ang") &&
  Const        r15, "name"
  // rt.role == "actress" &&
  Const        r16, "role"
L10:
  // t.production_year >= 2005 &&
  Const        r17, "production_year"
  // select { actress: n.name, movie: t.title }
  Const        r18, "actress"
  Const        r19, "movie"
  Const        r20, "title"
L5:
  // from an in aka_name
  IterPrep     r21, r0
  Len          r22, r21
L8:
  Const        r23, 0
  Move         r24, r23
L17:
  LessInt      r25, r24, r22
  JumpIfFalse  r25, L0
L2:
  Index        r25, r21, r24
L12:
  // join n in name on n.id == an.person_id
  IterPrep     r21, r7
  Len          r7, r21
  Const        r22, "id"
L15:
  Const        r26, "person_id"
L9:
  Move         r27, r23
  LessInt      r28, r27, r7
  JumpIfFalse  r28, L1
  Index        r28, r21, r27
  Index        r27, r28, r22
  Index        r21, r25, r26
  Equal        r7, r27, r21
  JumpIfFalse  r7, L2
  // join ci in cast_info on ci.person_id == an.person_id
  IterPrep     r7, r2
  Len          r2, r7
  Move         r21, r23
  LessInt      r27, r21, r2
  JumpIfFalse  r27, L2
  Index        r2, r7, r21
  Index        r7, r2, r26
  Index        r29, r25, r26
  Equal        r26, r7, r29
  JumpIfFalse  r26, L3
  // join chn in char_name on chn.id == ci.person_role_id
  IterPrep     r26, r1
  Len          r1, r26
  Const        r29, "person_role_id"
  Move         r7, r23
  LessInt      r25, r7, r1
  JumpIfFalse  r25, L3
  Index        r25, r26, r7
  Index        r26, r25, r22
  Index        r25, r2, r29
  Equal        r29, r26, r25
  JumpIfFalse  r29, L4
  // join rt in role_type on rt.id == ci.role_id
  IterPrep     r29, r8
  Len          r8, r29
  Const        r25, "role_id"
  Move         r26, r23
  LessInt      r1, r26, r8
  JumpIfFalse  r1, L4
  Index        r1, r29, r26
  Index        r29, r1, r22
  Index        r8, r2, r25
  Equal        r25, r29, r8
  JumpIfFalse  r25, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r25, r9
  Len          r9, r25
  Const        r8, "movie_id"
  Move         r29, r23
  LessInt      r30, r29, r9
  JumpIfFalse  r30, L5
  Index        r30, r25, r29
  Index        r25, r30, r22
  Index        r9, r2, r8
  Equal        r31, r25, r9
  JumpIfFalse  r31, L2
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r31, r5
  Len          r5, r31
  Move         r9, r23
  LessInt      r32, r9, r5
  JumpIfFalse  r32, L2
  Index        r32, r31, r9
  Index        r31, r32, r8
  Index        r5, r30, r22
  Equal        r33, r31, r5
  JumpIfFalse  r33, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r33, r3
  Len          r3, r33
  Const        r31, "company_id"
  Move         r34, r23
  LessInt      r35, r34, r3
  JumpIfFalse  r35, L6
  Index        r35, r33, r34
  Index        r33, r35, r22
  Index        r3, r32, r31
  Equal        r31, r33, r3
  JumpIfFalse  r31, L5
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r3, r6
  Len          r6, r3
  Move         r33, r23
  LessInt      r36, r33, r6
  JumpIfFalse  r36, L5
  Index        r36, r3, r33
  Index        r3, r36, r8
  Index        r8, r30, r22
  Equal        r6, r3, r8
  JumpIfFalse  r6, L7
  // join it in info_type on it.id == mi.info_type_id
  IterPrep     r6, r4
  Len          r4, r6
  Const        r8, "info_type_id"
  Move         r3, r23
  LessInt      r37, r3, r4
  JumpIfFalse  r37, L7
  Index        r37, r6, r3
  Index        r4, r37, r22
  Index        r22, r36, r8
  Equal        r8, r4, r22
  JumpIfFalse  r8, L8
  // where ci.note in [
  Index        r8, r2, r11
  // t.production_year >= 2005 &&
  Index        r2, r30, r17
  Const        r22, 2005
  LessEq       r4, r22, r2
  // t.production_year <= 2009
  Index        r22, r30, r17
  Const        r17, 2009
  LessEq       r38, r22, r17
  // where ci.note in [
  Const        r17, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r22, r8, r17
  // cn.country_code == "[us]" &&
  Index        r17, r35, r12
  Const        r35, "[us]"
  Equal        r12, r17, r35
  // it.info == "release dates" &&
  Index        r35, r37, r13
  Const        r37, "release dates"
  Equal        r17, r35, r37
  // mc.note != null &&
  Index        r37, r32, r11
  Const        r35, nil
  NotEqual     r8, r37, r35
  // mi.info != null &&
  Index        r37, r36, r13
  NotEqual     r39, r37, r35
  // n.gender == "f" &&
  Index        r37, r28, r14
  Const        r14, "f"
  Equal        r35, r37, r14
  // rt.role == "actress" &&
  Index        r14, r1, r16
  Equal        r16, r14, r18
  // ] &&
  Move         r14, r22
  JumpIfFalse  r14, L9
  // cn.country_code == "[us]" &&
  Move         r14, r12
  JumpIfFalse  r14, L9
  // it.info == "release dates" &&
  Move         r14, r17
  JumpIfFalse  r14, L9
  // mc.note != null &&
  Move         r14, r8
  JumpIfFalse  r14, L10
  Index        r14, r32, r11
  // (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) &&
  Const        r8, "(USA)"
  In           r17, r8, r14
  JumpIfTrue   r17, L10
  Index        r8, r32, r11
  Const        r32, "(worldwide)"
  In           r17, r32, r8
  Move         r32, r17
  JumpIfFalse  r32, L11
  // mi.info != null &&
  Move         r32, r39
  JumpIfFalse  r32, L11
  Index        r32, r36, r13
  // ((mi.info.contains("Japan:") && mi.info.contains("200")) ||
  Const        r39, "Japan:"
  In           r17, r39, r32
  JumpIfFalse  r17, L11
  Index        r17, r36, r13
  Const        r39, "200"
  In           r32, r39, r17
  JumpIfTrue   r32, L11
  Index        r32, r36, r13
  // (mi.info.contains("USA:") && mi.info.contains("200"))) &&
  Const        r17, "USA:"
  In           r8, r17, r32
  JumpIfFalse  r8, L11
  Index        r17, r36, r13
  In           r8, r39, r17
  Move         r17, r8
  JumpIfFalse  r17, L12
  // n.gender == "f" &&
  Move         r17, r35
  JumpIfFalse  r17, L2
  Index        r17, r28, r15
  // n.name.contains("Ang") &&
  Const        r35, "Ang"
  In           r8, r35, r17
  JumpIfFalse  r8, L5
  // rt.role == "actress" &&
  Move         r8, r16
  JumpIfFalse  r8, L7
  // t.production_year >= 2005 &&
  Move         r8, r4
  JumpIfFalse  r8, L13
  Move         r8, r38
  // where ci.note in [
  JumpIfFalse  r8, L8
  // select { actress: n.name, movie: t.title }
  Move         r8, r18
  Index        r38, r28, r15
  Move         r28, r19
  Index        r15, r30, r20
  Move         r30, r8
  Move         r8, r38
  Move         r38, r28
  Move         r28, r15
  MakeMap      r15, 2, r30
  // from an in aka_name
  Append       r10, r10, r15
  // join it in info_type on it.id == mi.info_type_id
  Const        r15, 1
  Add          r3, r3, r15
  Jump         L14
  // join mi in movie_info on mi.movie_id == t.id
  Add          r33, r33, r15
  Jump         L13
  // join cn in company_name on cn.id == mc.company_id
  Add          r34, r34, r15
  Jump         L15
L6:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r9, r9, r15
  Jump         L16
  // join t in title on t.id == ci.movie_id
  Add          r29, r29, r15
  Jump         L17
  // join rt in role_type on rt.id == ci.role_id
  Add          r26, r26, r15
  Jump         L18
L4:
  // join chn in char_name on chn.id == ci.person_role_id
  Add          r7, r7, r15
  Jump         L14
L3:
  // join ci in cast_info on ci.person_id == an.person_id
  Add          r21, r21, r15
  Jump         L2
L1:
  // from an in aka_name
  AddInt       r24, r24, r15
  Jump         L8
L0:
  // voicing_actress: min(from r in matches select r.actress),
  Const        r2, "voicing_actress"
  Const        r27, []
  IterPrep     r21, r10
  Len          r24, r21
  Move         r3, r23
L20:
  LessInt      r6, r3, r24
  JumpIfFalse  r6, L19
  Index        r6, r21, r3
  Index        r21, r6, r18
  Append       r27, r27, r21
  AddInt       r3, r3, r15
  Jump         L20
L19:
  Min          r21, r27
  // voiced_movie: min(from r in matches select r.movie)
  Const        r27, "voiced_movie"
  Const        r3, []
  IterPrep     r18, r10
  Len          r10, r18
  Move         r24, r23
L22:
  LessInt      r23, r24, r10
  JumpIfFalse  r23, L21
  Index        r6, r18, r24
  Index        r23, r6, r19
  Append       r3, r3, r23
  AddInt       r24, r24, r15
  Jump         L22
L21:
  Min          r23, r3
  // voicing_actress: min(from r in matches select r.actress),
  Move         r3, r2
  Move         r2, r21
  // voiced_movie: min(from r in matches select r.movie)
  Move         r21, r27
  Move         r27, r23
  // {
  MakeMap      r23, 2, r3
  // let result = [
  MakeList     r27, 1, r23
  // json(result)
  JSON         r27
  // expect result == [
  Const        r23, [{"voiced_movie": "Voiced Movie", "voicing_actress": "Angela Stone"}]
  Equal        r21, r27, r23
  Expect       r21
  Return       r0
