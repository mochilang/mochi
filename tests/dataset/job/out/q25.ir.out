func main (regs=211)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(writer)", "person_id": 2}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "romance"}]
  // let movie_info = [
  Const        r3, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r4, [{"info": 100, "info_type_id": 2, "movie_id": 1}, {"info": 50, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r6, [{"gender": "m", "id": 1, "name": "Mike"}, {"gender": "f", "id": 2, "name": "Sue"}]
  // let title = [
  Const        r7, [{"id": 1, "title": "Scary Movie"}, {"id": 2, "title": "Funny Movie"}]
  // let allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Const        r8, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // let allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
  Const        r9, ["murder", "blood", "gore", "death", "female-nudity"]
  // from ci in cast_info
  Const        r10, []
  // (ci.note in allowed_notes) &&
  Const        r11, "note"
  // it1.info == "genres" &&
  Const        r12, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r13, "keyword"
  // n.gender == "m" &&
  Const        r14, "gender"
  // t.id == mi.movie_id &&
  Const        r15, "id"
  Const        r16, "movie_id"
  // n.id == ci.person_id &&
  Const        r17, "person_id"
  // it1.id == mi.info_type_id &&
  Const        r18, "info_type_id"
  // k.id == mk.keyword_id
  Const        r19, "keyword_id"
  // budget: mi.info,
  Const        r20, "budget"
  // votes: mi_idx.info,
  Const        r21, "votes"
  // writer: n.name,
  Const        r22, "writer"
  Const        r23, "name"
  // title: t.title
  Const        r24, "title"
  // from ci in cast_info
  IterPrep     r25, r0
  Len          r26, r25
  Const        r28, 0
  Move         r27, r28
L19:
  LessInt      r29, r27, r26
  JumpIfFalse  r29, L0
  Index        r31, r25, r27
  // from it1 in info_type
  IterPrep     r32, r1
  Len          r33, r32
  Move         r34, r28
L18:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  // from it2 in info_type
  IterPrep     r38, r1
  Len          r39, r38
  Move         r40, r28
L17:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  // from k in keyword
  IterPrep     r44, r2
  Len          r45, r44
  Move         r46, r28
L16:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L3
  Index        r49, r44, r46
  // from mi in movie_info
  IterPrep     r50, r3
  Len          r51, r50
  Move         r52, r28
L15:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r55, r50, r52
  // from mi_idx in movie_info_idx
  IterPrep     r56, r4
  Len          r57, r56
  Move         r58, r28
L14:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L5
  Index        r61, r56, r58
  // from mk in movie_keyword
  IterPrep     r62, r5
  Len          r63, r62
  Move         r64, r28
L13:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L6
  Index        r67, r62, r64
  // from n in name
  IterPrep     r68, r6
  Len          r69, r68
  Move         r70, r28
L12:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L7
  Index        r73, r68, r70
  // from t in title
  IterPrep     r74, r7
  Len          r75, r74
  Move         r76, r28
L11:
  LessInt      r77, r76, r75
  JumpIfFalse  r77, L8
  Index        r79, r74, r76
  // (ci.note in allowed_notes) &&
  Index        r80, r31, r11
  In           r81, r80, r8
  // it1.info == "genres" &&
  Index        r82, r37, r12
  Const        r83, "genres"
  Equal        r84, r82, r83
  // it2.info == "votes" &&
  Index        r85, r43, r12
  Equal        r86, r85, r21
  // mi.info == "Horror" &&
  Index        r87, r55, r12
  Const        r88, "Horror"
  Equal        r89, r87, r88
  // n.gender == "m" &&
  Index        r90, r73, r14
  Const        r91, "m"
  Equal        r92, r90, r91
  // t.id == mi.movie_id &&
  Index        r93, r79, r15
  Index        r94, r55, r16
  Equal        r95, r93, r94
  // t.id == mi_idx.movie_id &&
  Index        r96, r79, r15
  Index        r97, r61, r16
  Equal        r98, r96, r97
  // t.id == ci.movie_id &&
  Index        r99, r79, r15
  Index        r100, r31, r16
  Equal        r101, r99, r100
  // t.id == mk.movie_id &&
  Index        r102, r79, r15
  Index        r103, r67, r16
  Equal        r104, r102, r103
  // ci.movie_id == mi.movie_id &&
  Index        r105, r31, r16
  Index        r106, r55, r16
  Equal        r107, r105, r106
  // ci.movie_id == mi_idx.movie_id &&
  Index        r108, r31, r16
  Index        r109, r61, r16
  Equal        r110, r108, r109
  // ci.movie_id == mk.movie_id &&
  Index        r111, r31, r16
  Index        r112, r67, r16
  Equal        r113, r111, r112
  // mi.movie_id == mi_idx.movie_id &&
  Index        r114, r55, r16
  Index        r115, r61, r16
  Equal        r116, r114, r115
  // mi.movie_id == mk.movie_id &&
  Index        r117, r55, r16
  Index        r118, r67, r16
  Equal        r119, r117, r118
  // mi_idx.movie_id == mk.movie_id &&
  Index        r120, r61, r16
  Index        r121, r67, r16
  Equal        r122, r120, r121
  // n.id == ci.person_id &&
  Index        r123, r73, r15
  Index        r124, r31, r17
  Equal        r125, r123, r124
  // it1.id == mi.info_type_id &&
  Index        r126, r37, r15
  Index        r127, r55, r18
  Equal        r128, r126, r127
  // it2.id == mi_idx.info_type_id &&
  Index        r129, r43, r15
  Index        r130, r61, r18
  Equal        r131, r129, r130
  // k.id == mk.keyword_id
  Index        r132, r49, r15
  Index        r133, r67, r19
  Equal        r134, r132, r133
  // (ci.note in allowed_notes) &&
  Move         r135, r81
  JumpIfFalse  r135, L9
  Move         r135, r84
  // it1.info == "genres" &&
  JumpIfFalse  r135, L9
  Move         r135, r86
  // it2.info == "votes" &&
  JumpIfFalse  r135, L9
  // (k.keyword in allowed_keywords) &&
  Index        r136, r49, r13
  In           r135, r136, r9
  JumpIfFalse  r135, L9
  Move         r135, r89
  // mi.info == "Horror" &&
  JumpIfFalse  r135, L9
  Move         r135, r92
  // n.gender == "m" &&
  JumpIfFalse  r135, L9
  Move         r135, r95
  // t.id == mi.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r98
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r101
  // t.id == ci.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r104
  // t.id == mk.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r107
  // ci.movie_id == mi.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r110
  // ci.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r113
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r116
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r119
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r122
  // mi_idx.movie_id == mk.movie_id &&
  JumpIfFalse  r135, L9
  Move         r135, r125
  // n.id == ci.person_id &&
  JumpIfFalse  r135, L9
  Move         r135, r128
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r135, L9
  Move         r135, r131
  // it2.id == mi_idx.info_type_id &&
  JumpIfFalse  r135, L9
  Move         r135, r134
L9:
  // where (
  JumpIfFalse  r135, L10
  // budget: mi.info,
  Const        r138, "budget"
  Index        r139, r55, r12
  // votes: mi_idx.info,
  Const        r140, "votes"
  Index        r141, r61, r12
  // writer: n.name,
  Const        r142, "writer"
  Index        r143, r73, r23
  // title: t.title
  Const        r144, "title"
  Index        r145, r79, r24
  // budget: mi.info,
  Move         r146, r138
  Move         r147, r139
  // votes: mi_idx.info,
  Move         r148, r140
  Move         r149, r141
  // writer: n.name,
  Move         r150, r142
  Move         r151, r143
  // title: t.title
  Move         r152, r144
  Move         r153, r145
  // select {
  MakeMap      r154, 4, r146
  // from ci in cast_info
  Append       r10, r10, r154
L10:
  // from t in title
  Const        r156, 1
  AddInt       r76, r76, r156
  Jump         L11
L8:
  // from n in name
  AddInt       r70, r70, r156
  Jump         L12
L7:
  // from mk in movie_keyword
  AddInt       r64, r64, r156
  Jump         L13
L6:
  // from mi_idx in movie_info_idx
  AddInt       r58, r58, r156
  Jump         L14
L5:
  // from mi in movie_info
  AddInt       r52, r52, r156
  Jump         L15
L4:
  // from k in keyword
  AddInt       r46, r46, r156
  Jump         L16
L3:
  // from it2 in info_type
  AddInt       r40, r40, r156
  Jump         L17
L2:
  // from it1 in info_type
  AddInt       r34, r34, r156
  Jump         L18
L1:
  // from ci in cast_info
  AddInt       r27, r27, r156
  Jump         L19
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r157, "movie_budget"
  Const        r158, []
  IterPrep     r159, r10
  Len          r160, r159
  Move         r161, r28
L21:
  LessInt      r162, r161, r160
  JumpIfFalse  r162, L20
  Index        r164, r159, r161
  Index        r165, r164, r20
  Append       r158, r158, r165
  AddInt       r161, r161, r156
  Jump         L21
L20:
  Min          r167, r158
  // movie_votes: min(from x in matches select x.votes),
  Const        r168, "movie_votes"
  Const        r169, []
  IterPrep     r170, r10
  Len          r171, r170
  Move         r172, r28
L23:
  LessInt      r173, r172, r171
  JumpIfFalse  r173, L22
  Index        r164, r170, r172
  Index        r175, r164, r21
  Append       r169, r169, r175
  AddInt       r172, r172, r156
  Jump         L23
L22:
  Min          r177, r169
  // male_writer: min(from x in matches select x.writer),
  Const        r178, "male_writer"
  Const        r179, []
  IterPrep     r180, r10
  Len          r181, r180
  Move         r182, r28
L25:
  LessInt      r183, r182, r181
  JumpIfFalse  r183, L24
  Index        r164, r180, r182
  Index        r185, r164, r22
  Append       r179, r179, r185
  AddInt       r182, r182, r156
  Jump         L25
L24:
  Min          r187, r179
  // violent_movie_title: min(from x in matches select x.title)
  Const        r188, "violent_movie_title"
  Const        r189, []
  IterPrep     r190, r10
  Len          r191, r190
  Move         r192, r28
L27:
  LessInt      r193, r192, r191
  JumpIfFalse  r193, L26
  Index        r164, r190, r192
  Index        r195, r164, r24
  Append       r189, r189, r195
  AddInt       r192, r192, r156
  Jump         L27
L26:
  Min          r197, r189
  // movie_budget: min(from x in matches select x.budget),
  Move         r198, r157
  Move         r199, r167
  // movie_votes: min(from x in matches select x.votes),
  Move         r200, r168
  Move         r201, r177
  // male_writer: min(from x in matches select x.writer),
  Move         r202, r178
  Move         r203, r187
  // violent_movie_title: min(from x in matches select x.title)
  Move         r204, r188
  Move         r205, r197
  // {
  MakeMap      r207, 4, r198
  // let result = [
  MakeList     r208, 1, r207
  // json(result)
  JSON         r208
  // expect result == [
  Const        r209, [{"male_writer": "Mike", "movie_budget": "Horror", "movie_votes": 100, "violent_movie_title": "Scary Movie"}]
  Equal        r210, r208, r209
  Expect       r210
  Return       r0
