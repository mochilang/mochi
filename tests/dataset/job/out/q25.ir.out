func main (regs=59)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(writer)", "person_id": 2}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
L8:
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "romance"}]
L9:
  // let movie_info = [
  Const        r3, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
L10:
  // let movie_info_idx = [
  Const        r4, [{"info": 100, "info_type_id": 2, "movie_id": 1}, {"info": 50, "info_type_id": 2, "movie_id": 2}]
L13:
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
L11:
  // let name = [
  Const        r6, [{"gender": "m", "id": 1, "name": "Mike"}, {"gender": "f", "id": 2, "name": "Sue"}]
L12:
  // let title = [
  Const        r7, [{"id": 1, "title": "Scary Movie"}, {"id": 2, "title": "Funny Movie"}]
  // let allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Const        r8, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // let allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
  Const        r9, ["murder", "blood", "gore", "death", "female-nudity"]
L1:
  // from ci in cast_info
  Const        r10, []
  // (ci.note in allowed_notes) &&
  Const        r11, "note"
L15:
  // it1.info == "genres" &&
  Const        r12, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r13, "keyword"
  // n.gender == "m" &&
  Const        r14, "gender"
L6:
  // t.id == mi.movie_id &&
  Const        r15, "id"
  Const        r16, "movie_id"
  // n.id == ci.person_id &&
  Const        r17, "person_id"
L14:
  // it1.id == mi.info_type_id &&
  Const        r18, "info_type_id"
  // k.id == mk.keyword_id
  Const        r19, "keyword_id"
  // budget: mi.info,
  Const        r20, "budget"
  // votes: mi_idx.info,
  Const        r21, "votes"
  // writer: n.name,
  Const        r22, "writer"
L16:
  Const        r23, "name"
  // title: t.title
  Const        r24, "title"
  // from ci in cast_info
  IterPrep     r25, r0
  Len          r26, r25
L0:
  Const        r27, 0
  Move         r28, r27
L25:
  LessInt      r29, r28, r26
  JumpIfFalse  r29, L0
  Index        r26, r25, r28
L24:
  // from it1 in info_type
  IterPrep     r25, r1
  Len          r30, r25
L23:
  Move         r31, r27
  LessInt      r32, r31, r30
L22:
  JumpIfFalse  r32, L0
L3:
  Index        r30, r25, r31
L21:
  // from it2 in info_type
  IterPrep     r25, r1
L5:
  Len          r1, r25
L4:
  Move         r33, r27
  LessInt      r34, r33, r1
L20:
  JumpIfFalse  r34, L1
L2:
  Index        r1, r25, r33
L19:
  // from k in keyword
  IterPrep     r25, r2
  Len          r2, r25
L17:
  Move         r35, r27
  LessInt      r36, r35, r2
  JumpIfFalse  r36, L2
  Index        r2, r25, r35
  // from mi in movie_info
  IterPrep     r25, r3
  Len          r3, r25
  Move         r37, r27
  LessInt      r38, r37, r3
  JumpIfFalse  r38, L3
  Index        r3, r25, r37
  // from mi_idx in movie_info_idx
  IterPrep     r25, r4
  Len          r4, r25
  Move         r39, r27
  LessInt      r40, r39, r4
  JumpIfFalse  r40, L3
  Index        r4, r25, r39
  // from mk in movie_keyword
  IterPrep     r25, r5
  Len          r5, r25
  Move         r41, r27
  LessInt      r42, r41, r5
  JumpIfFalse  r42, L3
  Index        r5, r25, r41
  // from n in name
  IterPrep     r25, r6
  Len          r6, r25
  Move         r43, r27
  LessInt      r44, r43, r6
  JumpIfFalse  r44, L4
  Index        r6, r25, r43
  // from t in title
  IterPrep     r25, r7
  Len          r7, r25
  Move         r45, r27
  LessInt      r46, r45, r7
  JumpIfFalse  r46, L5
  Index        r7, r25, r45
  // (ci.note in allowed_notes) &&
  Index        r25, r26, r11
  In           r11, r25, r8
  // it1.info == "genres" &&
  Index        r25, r30, r12
  Const        r8, "genres"
  Equal        r47, r25, r8
  // it2.info == "votes" &&
  Index        r8, r1, r12
  Equal        r25, r8, r21
  // mi.info == "Horror" &&
  Index        r8, r3, r12
  Const        r48, "Horror"
  Equal        r49, r8, r48
  // n.gender == "m" &&
  Index        r48, r6, r14
  Const        r14, "m"
  Equal        r8, r48, r14
  // t.id == mi.movie_id &&
  Index        r14, r7, r15
  Index        r48, r3, r16
  Equal        r50, r14, r48
  // t.id == mi_idx.movie_id &&
  Index        r48, r7, r15
  Index        r14, r4, r16
  Equal        r51, r48, r14
  // t.id == ci.movie_id &&
  Index        r14, r7, r15
  Index        r48, r26, r16
  Equal        r52, r14, r48
  // t.id == mk.movie_id &&
  Index        r48, r7, r15
  Index        r14, r5, r16
  Equal        r53, r48, r14
  // ci.movie_id == mi.movie_id &&
  Index        r14, r26, r16
  Index        r48, r3, r16
  Equal        r54, r14, r48
  // ci.movie_id == mi_idx.movie_id &&
  Index        r48, r26, r16
  Index        r14, r4, r16
  Equal        r55, r48, r14
  // ci.movie_id == mk.movie_id &&
  Index        r14, r26, r16
  Index        r48, r5, r16
  Equal        r56, r14, r48
  // mi.movie_id == mi_idx.movie_id &&
  Index        r48, r3, r16
  Index        r14, r4, r16
  Equal        r57, r48, r14
  // mi.movie_id == mk.movie_id &&
  Index        r14, r3, r16
  Index        r48, r5, r16
  Equal        r58, r14, r48
  // mi_idx.movie_id == mk.movie_id &&
  Index        r48, r4, r16
  Index        r14, r5, r16
  Equal        r16, r48, r14
  // n.id == ci.person_id &&
  Index        r14, r6, r15
  Index        r48, r26, r17
  Equal        r26, r14, r48
  // it1.id == mi.info_type_id &&
  Index        r48, r30, r15
  Index        r30, r3, r18
  Equal        r14, r48, r30
  // it2.id == mi_idx.info_type_id &&
  Index        r30, r1, r15
  Index        r1, r4, r18
  Equal        r18, r30, r1
  // k.id == mk.keyword_id
  Index        r1, r2, r15
  Index        r15, r5, r19
  Equal        r5, r1, r15
  // (ci.note in allowed_notes) &&
  Move         r15, r11
  JumpIfFalse  r15, L6
  // it1.info == "genres" &&
  Move         r15, r47
  JumpIfFalse  r15, L7
L7:
  // it2.info == "votes" &&
  Move         r15, r25
  JumpIfFalse  r15, L8
  // (k.keyword in allowed_keywords) &&
  Index        r15, r2, r13
  In           r2, r15, r9
  JumpIfFalse  r2, L8
  // mi.info == "Horror" &&
  Move         r2, r49
  JumpIfFalse  r2, L8
  // n.gender == "m" &&
  Move         r2, r8
  JumpIfFalse  r2, L8
  // t.id == mi.movie_id &&
  Move         r2, r50
  JumpIfFalse  r2, L8
  // t.id == mi_idx.movie_id &&
  Move         r2, r51
  JumpIfFalse  r2, L8
  // t.id == ci.movie_id &&
  Move         r2, r52
  JumpIfFalse  r2, L8
  // t.id == mk.movie_id &&
  Move         r2, r53
  JumpIfFalse  r2, L8
  // ci.movie_id == mi.movie_id &&
  Move         r2, r54
  JumpIfFalse  r2, L9
  // ci.movie_id == mi_idx.movie_id &&
  Move         r2, r55
  JumpIfFalse  r2, L10
  // ci.movie_id == mk.movie_id &&
  Move         r2, r56
  JumpIfFalse  r2, L11
  // mi.movie_id == mi_idx.movie_id &&
  Move         r2, r57
  JumpIfFalse  r2, L12
  // mi.movie_id == mk.movie_id &&
  Move         r2, r58
  JumpIfFalse  r2, L13
  // mi_idx.movie_id == mk.movie_id &&
  Move         r2, r16
  JumpIfFalse  r2, L14
  // n.id == ci.person_id &&
  Move         r2, r26
  JumpIfFalse  r2, L15
  // it1.id == mi.info_type_id &&
  Move         r2, r14
  JumpIfFalse  r2, L16
  // it2.id == mi_idx.info_type_id &&
  Move         r2, r18
  JumpIfFalse  r2, L17
  Move         r2, r5
  // where (
  JumpIfFalse  r2, L18
  // budget: mi.info,
  Move         r2, r20
  Index        r5, r3, r12
  // votes: mi_idx.info,
  Move         r3, r21
  Index        r18, r4, r12
  // writer: n.name,
  Move         r4, r22
  Index        r12, r6, r23
  // title: t.title
  Move         r6, r24
  Index        r23, r7, r24
  // budget: mi.info,
  Move         r7, r2
  Move         r2, r5
  // votes: mi_idx.info,
  Move         r5, r3
  Move         r3, r18
  // writer: n.name,
  Move         r18, r4
  Move         r4, r12
  // title: t.title
  Move         r12, r6
  Move         r6, r23
  // select {
  MakeMap      r23, 4, r7
  // from ci in cast_info
  Append       r10, r10, r23
L18:
  // from t in title
  Const        r23, 1
  AddInt       r45, r45, r23
  Jump         L17
  // from n in name
  AddInt       r43, r43, r23
  Jump         L19
  // from mk in movie_keyword
  AddInt       r41, r41, r23
  Jump         L20
  // from mi_idx in movie_info_idx
  AddInt       r39, r39, r23
  Jump         L4
  // from mi in movie_info
  AddInt       r37, r37, r23
  Jump         L21
  // from k in keyword
  AddInt       r35, r35, r23
  Jump         L22
  // from it2 in info_type
  AddInt       r33, r33, r23
  Jump         L23
  // from it1 in info_type
  AddInt       r31, r31, r23
  Jump         L24
  // from ci in cast_info
  AddInt       r28, r28, r23
  Jump         L25
  // movie_budget: min(from x in matches select x.budget),
  Const        r46, "movie_budget"
  Const        r45, []
  IterPrep     r44, r10
  Len          r43, r44
  Move         r42, r27
  LessInt      r41, r42, r43
  JumpIfFalse  r41, L0
  Index        r41, r44, r42
  Index        r44, r41, r20
  Append       r45, r45, r44
  AddInt       r42, r42, r23
  Jump         L19
  Min          r42, r45
  // movie_votes: min(from x in matches select x.votes),
  Const        r45, "movie_votes"
  Const        r20, []
  IterPrep     r43, r10
  Len          r40, r43
  Move         r39, r27
L27:
  LessInt      r38, r39, r40
  JumpIfFalse  r38, L26
  Index        r41, r43, r39
  Index        r38, r41, r21
  Append       r20, r20, r38
  AddInt       r39, r39, r23
  Jump         L27
L26:
  Min          r38, r20
  // male_writer: min(from x in matches select x.writer),
  Const        r20, "male_writer"
  Const        r39, []
  IterPrep     r21, r10
  Len          r40, r21
  Move         r43, r27
L29:
  LessInt      r37, r43, r40
  JumpIfFalse  r37, L28
  Index        r41, r21, r43
  Index        r37, r41, r22
  Append       r39, r39, r37
  AddInt       r43, r43, r23
  Jump         L29
L28:
  Min          r37, r39
  // violent_movie_title: min(from x in matches select x.title)
  Const        r39, "violent_movie_title"
  Const        r43, []
  IterPrep     r22, r10
  Len          r10, r22
  Move         r40, r27
L31:
  LessInt      r27, r40, r10
  JumpIfFalse  r27, L30
  Index        r41, r22, r40
  Index        r27, r41, r24
  Append       r43, r43, r27
  AddInt       r40, r40, r23
  Jump         L31
L30:
  Min          r27, r43
  // movie_budget: min(from x in matches select x.budget),
  Move         r43, r46
  Move         r46, r42
  // movie_votes: min(from x in matches select x.votes),
  Move         r44, r45
  Move         r45, r38
  // male_writer: min(from x in matches select x.writer),
  Move         r38, r20
  Move         r20, r37
  // violent_movie_title: min(from x in matches select x.title)
  Move         r37, r39
  Move         r39, r27
  // {
  MakeMap      r27, 4, r43
  // let result = [
  MakeList     r39, 1, r27
  // json(result)
  JSON         r39
  // expect result == [
  Const        r27, [{"male_writer": "Mike", "movie_budget": "Horror", "movie_votes": 100, "violent_movie_title": "Scary Movie"}]
  Equal        r37, r39, r27
  Expect       r37
  Return       r0
