func main (regs=310)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(writer)", "person_id": 2}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "romance"}]
  // let movie_info = [
  Const        r3, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r4, [{"info": 100, "info_type_id": 2, "movie_id": 1}, {"info": 50, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r6, [{"gender": "m", "id": 1, "name": "Mike"}, {"gender": "f", "id": 2, "name": "Sue"}]
  // let title = [
  Const        r7, [{"id": 1, "title": "Scary Movie"}, {"id": 2, "title": "Funny Movie"}]
  // let allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Const        r8, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // let allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
  Const        r9, ["murder", "blood", "gore", "death", "female-nudity"]
  // from ci in cast_info
  Const        r10, []
  // (ci.note in allowed_notes) &&
  Const        r11, "note"
  // it1.info == "genres" &&
  Const        r12, "info"
  // it2.info == "votes" &&
  Const        r13, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r14, "keyword"
  // mi.info == "Horror" &&
  Const        r15, "info"
  // n.gender == "m" &&
  Const        r16, "gender"
  // t.id == mi.movie_id &&
  Const        r17, "id"
  Const        r18, "movie_id"
  // t.id == mi_idx.movie_id &&
  Const        r19, "id"
  Const        r20, "movie_id"
  // t.id == ci.movie_id &&
  Const        r21, "id"
  Const        r22, "movie_id"
  // t.id == mk.movie_id &&
  Const        r23, "id"
  Const        r24, "movie_id"
  // ci.movie_id == mi.movie_id &&
  Const        r25, "movie_id"
  Const        r26, "movie_id"
  // ci.movie_id == mi_idx.movie_id &&
  Const        r27, "movie_id"
  Const        r28, "movie_id"
  // ci.movie_id == mk.movie_id &&
  Const        r29, "movie_id"
  Const        r30, "movie_id"
  // mi.movie_id == mi_idx.movie_id &&
  Const        r31, "movie_id"
  Const        r32, "movie_id"
  // mi.movie_id == mk.movie_id &&
  Const        r33, "movie_id"
  Const        r34, "movie_id"
  // mi_idx.movie_id == mk.movie_id &&
  Const        r35, "movie_id"
  Const        r36, "movie_id"
  // n.id == ci.person_id &&
  Const        r37, "id"
  Const        r38, "person_id"
  // it1.id == mi.info_type_id &&
  Const        r39, "id"
  Const        r40, "info_type_id"
  // it2.id == mi_idx.info_type_id &&
  Const        r41, "id"
  Const        r42, "info_type_id"
  // k.id == mk.keyword_id
  Const        r43, "id"
  Const        r44, "keyword_id"
  // budget: mi.info,
  Const        r45, "budget"
  Const        r46, "info"
  // votes: mi_idx.info,
  Const        r47, "votes"
  Const        r48, "info"
  // writer: n.name,
  Const        r49, "writer"
  Const        r50, "name"
  // title: t.title
  Const        r51, "title"
  Const        r52, "title"
  // from ci in cast_info
  IterPrep     r53, r0
  Len          r54, r53
  Const        r56, 0
  Move         r55, r56
L19:
  LessInt      r57, r55, r54
  JumpIfFalse  r57, L0
  Index        r58, r53, r55
  Move         r59, r58
  // from it1 in info_type
  IterPrep     r60, r1
  Len          r61, r60
  Const        r63, 0
  Move         r62, r63
L18:
  LessInt      r64, r62, r61
  JumpIfFalse  r64, L1
  Index        r65, r60, r62
  Move         r66, r65
  // from it2 in info_type
  IterPrep     r67, r1
  Len          r68, r67
  Const        r70, 0
  Move         r69, r70
L17:
  LessInt      r71, r69, r68
  JumpIfFalse  r71, L2
  Index        r72, r67, r69
  Move         r73, r72
  // from k in keyword
  IterPrep     r74, r2
  Len          r75, r74
  Const        r77, 0
  Move         r76, r77
L16:
  LessInt      r78, r76, r75
  JumpIfFalse  r78, L3
  Index        r79, r74, r76
  Move         r80, r79
  // from mi in movie_info
  IterPrep     r81, r3
  Len          r82, r81
  Const        r84, 0
  Move         r83, r84
L15:
  LessInt      r85, r83, r82
  JumpIfFalse  r85, L4
  Index        r86, r81, r83
  Move         r87, r86
  // from mi_idx in movie_info_idx
  IterPrep     r88, r4
  Len          r89, r88
  Const        r91, 0
  Move         r90, r91
L14:
  LessInt      r92, r90, r89
  JumpIfFalse  r92, L5
  Index        r93, r88, r90
  Move         r94, r93
  // from mk in movie_keyword
  IterPrep     r95, r5
  Len          r96, r95
  Const        r98, 0
  Move         r97, r98
L13:
  LessInt      r99, r97, r96
  JumpIfFalse  r99, L6
  Index        r100, r95, r97
  Move         r101, r100
  // from n in name
  IterPrep     r102, r6
  Len          r103, r102
  Const        r105, 0
  Move         r104, r105
L12:
  LessInt      r106, r104, r103
  JumpIfFalse  r106, L7
  Index        r107, r102, r104
  Move         r108, r107
  // from t in title
  IterPrep     r109, r7
  Len          r110, r109
  Const        r112, 0
  Move         r111, r112
L11:
  LessInt      r113, r111, r110
  JumpIfFalse  r113, L8
  Index        r114, r109, r111
  Move         r115, r114
  // (ci.note in allowed_notes) &&
  Const        r116, "note"
  Index        r117, r59, r116
  In           r118, r117, r8
  // it1.info == "genres" &&
  Const        r119, "info"
  Index        r120, r66, r119
  Const        r121, "genres"
  Equal        r122, r120, r121
  // it2.info == "votes" &&
  Const        r123, "info"
  Index        r124, r73, r123
  Const        r125, "votes"
  Equal        r126, r124, r125
  // mi.info == "Horror" &&
  Const        r127, "info"
  Index        r128, r87, r127
  Const        r129, "Horror"
  Equal        r130, r128, r129
  // n.gender == "m" &&
  Const        r131, "gender"
  Index        r132, r108, r131
  Const        r133, "m"
  Equal        r134, r132, r133
  // t.id == mi.movie_id &&
  Const        r135, "id"
  Index        r136, r115, r135
  Const        r137, "movie_id"
  Index        r138, r87, r137
  Equal        r139, r136, r138
  // t.id == mi_idx.movie_id &&
  Const        r140, "id"
  Index        r141, r115, r140
  Const        r142, "movie_id"
  Index        r143, r94, r142
  Equal        r144, r141, r143
  // t.id == ci.movie_id &&
  Const        r145, "id"
  Index        r146, r115, r145
  Const        r147, "movie_id"
  Index        r148, r59, r147
  Equal        r149, r146, r148
  // t.id == mk.movie_id &&
  Const        r150, "id"
  Index        r151, r115, r150
  Const        r152, "movie_id"
  Index        r153, r101, r152
  Equal        r154, r151, r153
  // ci.movie_id == mi.movie_id &&
  Const        r155, "movie_id"
  Index        r156, r59, r155
  Const        r157, "movie_id"
  Index        r158, r87, r157
  Equal        r159, r156, r158
  // ci.movie_id == mi_idx.movie_id &&
  Const        r160, "movie_id"
  Index        r161, r59, r160
  Const        r162, "movie_id"
  Index        r163, r94, r162
  Equal        r164, r161, r163
  // ci.movie_id == mk.movie_id &&
  Const        r165, "movie_id"
  Index        r166, r59, r165
  Const        r167, "movie_id"
  Index        r168, r101, r167
  Equal        r169, r166, r168
  // mi.movie_id == mi_idx.movie_id &&
  Const        r170, "movie_id"
  Index        r171, r87, r170
  Const        r172, "movie_id"
  Index        r173, r94, r172
  Equal        r174, r171, r173
  // mi.movie_id == mk.movie_id &&
  Const        r175, "movie_id"
  Index        r176, r87, r175
  Const        r177, "movie_id"
  Index        r178, r101, r177
  Equal        r179, r176, r178
  // mi_idx.movie_id == mk.movie_id &&
  Const        r180, "movie_id"
  Index        r181, r94, r180
  Const        r182, "movie_id"
  Index        r183, r101, r182
  Equal        r184, r181, r183
  // n.id == ci.person_id &&
  Const        r185, "id"
  Index        r186, r108, r185
  Const        r187, "person_id"
  Index        r188, r59, r187
  Equal        r189, r186, r188
  // it1.id == mi.info_type_id &&
  Const        r190, "id"
  Index        r191, r66, r190
  Const        r192, "info_type_id"
  Index        r193, r87, r192
  Equal        r194, r191, r193
  // it2.id == mi_idx.info_type_id &&
  Const        r195, "id"
  Index        r196, r73, r195
  Const        r197, "info_type_id"
  Index        r198, r94, r197
  Equal        r199, r196, r198
  // k.id == mk.keyword_id
  Const        r200, "id"
  Index        r201, r80, r200
  Const        r202, "keyword_id"
  Index        r203, r101, r202
  Equal        r204, r201, r203
  // (ci.note in allowed_notes) &&
  Move         r205, r118
  JumpIfFalse  r205, L9
  Move         r205, r122
  // it1.info == "genres" &&
  JumpIfFalse  r205, L9
  Move         r205, r126
  // it2.info == "votes" &&
  JumpIfFalse  r205, L9
  // (k.keyword in allowed_keywords) &&
  Const        r206, "keyword"
  Index        r207, r80, r206
  In           r208, r207, r9
  // it2.info == "votes" &&
  Move         r205, r208
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r205, L9
  Move         r205, r130
  // mi.info == "Horror" &&
  JumpIfFalse  r205, L9
  Move         r205, r134
  // n.gender == "m" &&
  JumpIfFalse  r205, L9
  Move         r205, r139
  // t.id == mi.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r144
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r149
  // t.id == ci.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r154
  // t.id == mk.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r159
  // ci.movie_id == mi.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r164
  // ci.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r169
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r174
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r179
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r184
  // mi_idx.movie_id == mk.movie_id &&
  JumpIfFalse  r205, L9
  Move         r205, r189
  // n.id == ci.person_id &&
  JumpIfFalse  r205, L9
  Move         r205, r194
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r205, L9
  Move         r205, r199
  // it2.id == mi_idx.info_type_id &&
  JumpIfFalse  r205, L9
  Move         r205, r204
L9:
  // where (
  JumpIfFalse  r205, L10
  // budget: mi.info,
  Const        r209, "budget"
  Const        r210, "info"
  Index        r211, r87, r210
  // votes: mi_idx.info,
  Const        r212, "votes"
  Const        r213, "info"
  Index        r214, r94, r213
  // writer: n.name,
  Const        r215, "writer"
  Const        r216, "name"
  Index        r217, r108, r216
  // title: t.title
  Const        r218, "title"
  Const        r219, "title"
  Index        r220, r115, r219
  // budget: mi.info,
  Move         r221, r209
  Move         r222, r211
  // votes: mi_idx.info,
  Move         r223, r212
  Move         r224, r214
  // writer: n.name,
  Move         r225, r215
  Move         r226, r217
  // title: t.title
  Move         r227, r218
  Move         r228, r220
  // select {
  MakeMap      r229, 4, r221
  // from ci in cast_info
  Append       r230, r10, r229
  Move         r10, r230
L10:
  // from t in title
  Const        r231, 1
  AddInt       r111, r111, r231
  Jump         L11
L8:
  // from n in name
  Const        r232, 1
  AddInt       r104, r104, r232
  Jump         L12
L7:
  // from mk in movie_keyword
  Const        r233, 1
  AddInt       r97, r97, r233
  Jump         L13
L6:
  // from mi_idx in movie_info_idx
  Const        r234, 1
  AddInt       r90, r90, r234
  Jump         L14
L5:
  // from mi in movie_info
  Const        r235, 1
  AddInt       r83, r83, r235
  Jump         L15
L4:
  // from k in keyword
  Const        r236, 1
  AddInt       r76, r76, r236
  Jump         L16
L3:
  // from it2 in info_type
  Const        r237, 1
  AddInt       r69, r69, r237
  Jump         L17
L2:
  // from it1 in info_type
  Const        r238, 1
  AddInt       r62, r62, r238
  Jump         L18
L1:
  // from ci in cast_info
  Const        r239, 1
  AddInt       r55, r55, r239
  Jump         L19
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r240, "movie_budget"
  Const        r241, []
  Const        r242, "budget"
  IterPrep     r243, r10
  Len          r244, r243
  Const        r246, 0
  Move         r245, r246
L21:
  LessInt      r247, r245, r244
  JumpIfFalse  r247, L20
  Index        r248, r243, r245
  Move         r249, r248
  Const        r250, "budget"
  Index        r251, r249, r250
  Append       r252, r241, r251
  Move         r241, r252
  Const        r253, 1
  AddInt       r245, r245, r253
  Jump         L21
L20:
  Min          r254, r241
  // movie_votes: min(from x in matches select x.votes),
  Const        r255, "movie_votes"
  Const        r256, []
  Const        r257, "votes"
  IterPrep     r258, r10
  Len          r259, r258
  Const        r261, 0
  Move         r260, r261
L23:
  LessInt      r262, r260, r259
  JumpIfFalse  r262, L22
  Index        r263, r258, r260
  Move         r249, r263
  Const        r264, "votes"
  Index        r265, r249, r264
  Append       r266, r256, r265
  Move         r256, r266
  Const        r267, 1
  AddInt       r260, r260, r267
  Jump         L23
L22:
  Min          r268, r256
  // male_writer: min(from x in matches select x.writer),
  Const        r269, "male_writer"
  Const        r270, []
  Const        r271, "writer"
  IterPrep     r272, r10
  Len          r273, r272
  Const        r275, 0
  Move         r274, r275
L25:
  LessInt      r276, r274, r273
  JumpIfFalse  r276, L24
  Index        r277, r272, r274
  Move         r249, r277
  Const        r278, "writer"
  Index        r279, r249, r278
  Append       r280, r270, r279
  Move         r270, r280
  Const        r281, 1
  AddInt       r274, r274, r281
  Jump         L25
L24:
  Min          r282, r270
  // violent_movie_title: min(from x in matches select x.title)
  Const        r283, "violent_movie_title"
  Const        r284, []
  Const        r285, "title"
  IterPrep     r286, r10
  Len          r287, r286
  Const        r289, 0
  Move         r288, r289
L27:
  LessInt      r290, r288, r287
  JumpIfFalse  r290, L26
  Index        r291, r286, r288
  Move         r249, r291
  Const        r292, "title"
  Index        r293, r249, r292
  Append       r294, r284, r293
  Move         r284, r294
  Const        r295, 1
  AddInt       r288, r288, r295
  Jump         L27
L26:
  Min          r296, r284
  // movie_budget: min(from x in matches select x.budget),
  Move         r297, r240
  Move         r298, r254
  // movie_votes: min(from x in matches select x.votes),
  Move         r299, r255
  Move         r300, r268
  // male_writer: min(from x in matches select x.writer),
  Move         r301, r269
  Move         r302, r282
  // violent_movie_title: min(from x in matches select x.title)
  Move         r303, r283
  Move         r304, r296
  // {
  MakeMap      r305, 4, r297
  Move         r306, r305
  // let result = [
  MakeList     r307, 1, r306
  // json(result)
  JSON         r307
  // expect result == [
  Const        r308, [{"male_writer": "Mike", "movie_budget": "Horror", "movie_votes": 100, "violent_movie_title": "Scary Movie"}]
  Equal        r309, r307, r308
  Expect       r309
  Return       r0
