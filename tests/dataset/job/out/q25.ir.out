func main (regs=229)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(writer)", "person_id": 2}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "romance"}]
  // let movie_info = [
  Const        r3, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
  // let movie_info_idx = [
  Const        r4, [{"info": 100, "info_type_id": 2, "movie_id": 1}, {"info": 50, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r6, [{"gender": "m", "id": 1, "name": "Mike"}, {"gender": "f", "id": 2, "name": "Sue"}]
  // let title = [
  Const        r7, [{"id": 1, "title": "Scary Movie"}, {"id": 2, "title": "Funny Movie"}]
  // let allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Const        r8, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // let allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
  Const        r9, ["murder", "blood", "gore", "death", "female-nudity"]
  // from ci in cast_info
  Const        r10, []
  // (ci.note in allowed_notes) &&
  Const        r11, "note"
  // it1.info == "genres" &&
  Const        r12, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r13, "keyword"
  // n.gender == "m" &&
  Const        r14, "gender"
  // t.id == mi.movie_id &&
  Const        r15, "id"
  Const        r16, "movie_id"
  // n.id == ci.person_id &&
  Const        r17, "person_id"
  // it1.id == mi.info_type_id &&
  Const        r18, "info_type_id"
  // k.id == mk.keyword_id
  Const        r19, "keyword_id"
  // budget: mi.info,
  Const        r20, "budget"
  // votes: mi_idx.info,
  Const        r21, "votes"
  // writer: n.name,
  Const        r22, "writer"
  Const        r23, "name"
  // title: t.title
  Const        r24, "title"
  // from ci in cast_info
  IterPrep     r25, r0
  Len          r26, r25
  Const        r28, 0
  Move         r27, r28
L37:
  LessInt      r29, r27, r26
  JumpIfFalse  r29, L0
  Index        r31, r25, r27
  // from it1 in info_type
  IterPrep     r32, r1
  Len          r33, r32
  Move         r34, r28
L36:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  // from it2 in info_type
  IterPrep     r38, r1
  Len          r39, r38
  Move         r40, r28
L35:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  // from k in keyword
  IterPrep     r44, r2
  Len          r45, r44
  Move         r46, r28
L34:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L3
  Index        r49, r44, r46
  // from mi in movie_info
  IterPrep     r50, r3
  Len          r51, r50
  Move         r52, r28
L33:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r55, r50, r52
  // from mi_idx in movie_info_idx
  IterPrep     r56, r4
  Len          r57, r56
  Move         r58, r28
L32:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L5
  Index        r61, r56, r58
  // from mk in movie_keyword
  IterPrep     r62, r5
  Len          r63, r62
  Move         r64, r28
L31:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L6
  Index        r67, r62, r64
  // from n in name
  IterPrep     r68, r6
  Len          r69, r68
  Move         r70, r28
L30:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L7
  Index        r73, r68, r70
  // from t in title
  IterPrep     r74, r7
  Len          r75, r74
  Move         r76, r28
L29:
  LessInt      r77, r76, r75
  JumpIfFalse  r77, L8
  Index        r79, r74, r76
  // (ci.note in allowed_notes) &&
  Index        r80, r31, r11
  In           r81, r80, r8
  // it1.info == "genres" &&
  Index        r82, r37, r12
  Const        r83, "genres"
  Equal        r84, r82, r83
  // it2.info == "votes" &&
  Index        r85, r43, r12
  Equal        r86, r85, r21
  // mi.info == "Horror" &&
  Index        r87, r55, r12
  Const        r88, "Horror"
  Equal        r89, r87, r88
  // n.gender == "m" &&
  Index        r90, r73, r14
  Const        r91, "m"
  Equal        r92, r90, r91
  // t.id == mi.movie_id &&
  Index        r93, r79, r15
  Index        r94, r55, r16
  Equal        r95, r93, r94
  // t.id == mi_idx.movie_id &&
  Index        r96, r79, r15
  Index        r97, r61, r16
  Equal        r98, r96, r97
  // t.id == ci.movie_id &&
  Index        r99, r79, r15
  Index        r100, r31, r16
  Equal        r101, r99, r100
  // t.id == mk.movie_id &&
  Index        r102, r79, r15
  Index        r103, r67, r16
  Equal        r104, r102, r103
  // ci.movie_id == mi.movie_id &&
  Index        r105, r31, r16
  Index        r106, r55, r16
  Equal        r107, r105, r106
  // ci.movie_id == mi_idx.movie_id &&
  Index        r108, r31, r16
  Index        r109, r61, r16
  Equal        r110, r108, r109
  // ci.movie_id == mk.movie_id &&
  Index        r111, r31, r16
  Index        r112, r67, r16
  Equal        r113, r111, r112
  // mi.movie_id == mi_idx.movie_id &&
  Index        r114, r55, r16
  Index        r115, r61, r16
  Equal        r116, r114, r115
  // mi.movie_id == mk.movie_id &&
  Index        r117, r55, r16
  Index        r118, r67, r16
  Equal        r119, r117, r118
  // mi_idx.movie_id == mk.movie_id &&
  Index        r120, r61, r16
  Index        r121, r67, r16
  Equal        r122, r120, r121
  // n.id == ci.person_id &&
  Index        r123, r73, r15
  Index        r124, r31, r17
  Equal        r125, r123, r124
  // it1.id == mi.info_type_id &&
  Index        r126, r37, r15
  Index        r127, r55, r18
  Equal        r128, r126, r127
  // it2.id == mi_idx.info_type_id &&
  Index        r129, r43, r15
  Index        r130, r61, r18
  Equal        r131, r129, r130
  // k.id == mk.keyword_id
  Index        r132, r49, r15
  Index        r133, r67, r19
  Equal        r134, r132, r133
  // (ci.note in allowed_notes) &&
  Move         r135, r81
  JumpIfFalse  r135, L9
L9:
  // it1.info == "genres" &&
  Move         r136, r84
  JumpIfFalse  r136, L10
L10:
  // it2.info == "votes" &&
  Move         r137, r86
  JumpIfFalse  r137, L11
  // (k.keyword in allowed_keywords) &&
  Index        r138, r49, r13
  In           r140, r138, r9
L11:
  JumpIfFalse  r140, L12
L12:
  // mi.info == "Horror" &&
  Move         r141, r89
  JumpIfFalse  r141, L13
L13:
  // n.gender == "m" &&
  Move         r142, r92
  JumpIfFalse  r142, L14
L14:
  // t.id == mi.movie_id &&
  Move         r143, r95
  JumpIfFalse  r143, L15
L15:
  // t.id == mi_idx.movie_id &&
  Move         r144, r98
  JumpIfFalse  r144, L16
L16:
  // t.id == ci.movie_id &&
  Move         r145, r101
  JumpIfFalse  r145, L17
L17:
  // t.id == mk.movie_id &&
  Move         r146, r104
  JumpIfFalse  r146, L18
L18:
  // ci.movie_id == mi.movie_id &&
  Move         r147, r107
  JumpIfFalse  r147, L19
L19:
  // ci.movie_id == mi_idx.movie_id &&
  Move         r148, r110
  JumpIfFalse  r148, L20
L20:
  // ci.movie_id == mk.movie_id &&
  Move         r149, r113
  JumpIfFalse  r149, L21
L21:
  // mi.movie_id == mi_idx.movie_id &&
  Move         r150, r116
  JumpIfFalse  r150, L22
L22:
  // mi.movie_id == mk.movie_id &&
  Move         r151, r119
  JumpIfFalse  r151, L23
L23:
  // mi_idx.movie_id == mk.movie_id &&
  Move         r152, r122
  JumpIfFalse  r152, L24
L24:
  // n.id == ci.person_id &&
  Move         r153, r125
  JumpIfFalse  r153, L25
L25:
  // it1.id == mi.info_type_id &&
  Move         r154, r128
  JumpIfFalse  r154, L26
L26:
  // it2.id == mi_idx.info_type_id &&
  Move         r155, r131
  JumpIfFalse  r155, L27
  Move         r155, r134
L27:
  // where (
  JumpIfFalse  r155, L28
  // budget: mi.info,
  Move         r156, r20
  Index        r157, r55, r12
  // votes: mi_idx.info,
  Move         r158, r21
  Index        r159, r61, r12
  // writer: n.name,
  Move         r160, r22
  Index        r161, r73, r23
  // title: t.title
  Move         r162, r24
  Index        r163, r79, r24
  // budget: mi.info,
  Move         r164, r156
  Move         r165, r157
  // votes: mi_idx.info,
  Move         r166, r158
  Move         r167, r159
  // writer: n.name,
  Move         r168, r160
  Move         r169, r161
  // title: t.title
  Move         r170, r162
  Move         r171, r163
  // select {
  MakeMap      r172, 4, r164
  // from ci in cast_info
  Append       r10, r10, r172
L28:
  // from t in title
  Const        r174, 1
  AddInt       r76, r76, r174
  Jump         L29
L8:
  // from n in name
  AddInt       r70, r70, r174
  Jump         L30
L7:
  // from mk in movie_keyword
  AddInt       r64, r64, r174
  Jump         L31
L6:
  // from mi_idx in movie_info_idx
  AddInt       r58, r58, r174
  Jump         L32
L5:
  // from mi in movie_info
  AddInt       r52, r52, r174
  Jump         L33
L4:
  // from k in keyword
  AddInt       r46, r46, r174
  Jump         L34
L3:
  // from it2 in info_type
  AddInt       r40, r40, r174
  Jump         L35
L2:
  // from it1 in info_type
  AddInt       r34, r34, r174
  Jump         L36
L1:
  // from ci in cast_info
  AddInt       r27, r27, r174
  Jump         L37
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r175, "movie_budget"
  Const        r176, []
  IterPrep     r177, r10
  Len          r178, r177
  Move         r179, r28
L39:
  LessInt      r180, r179, r178
  JumpIfFalse  r180, L38
  Index        r182, r177, r179
  Index        r183, r182, r20
  Append       r176, r176, r183
  AddInt       r179, r179, r174
  Jump         L39
L38:
  Min          r185, r176
  // movie_votes: min(from x in matches select x.votes),
  Const        r186, "movie_votes"
  Const        r187, []
  IterPrep     r188, r10
  Len          r189, r188
  Move         r190, r28
L41:
  LessInt      r191, r190, r189
  JumpIfFalse  r191, L40
  Index        r182, r188, r190
  Index        r193, r182, r21
  Append       r187, r187, r193
  AddInt       r190, r190, r174
  Jump         L41
L40:
  Min          r195, r187
  // male_writer: min(from x in matches select x.writer),
  Const        r196, "male_writer"
  Const        r197, []
  IterPrep     r198, r10
  Len          r199, r198
  Move         r200, r28
L43:
  LessInt      r201, r200, r199
  JumpIfFalse  r201, L42
  Index        r182, r198, r200
  Index        r203, r182, r22
  Append       r197, r197, r203
  AddInt       r200, r200, r174
  Jump         L43
L42:
  Min          r205, r197
  // violent_movie_title: min(from x in matches select x.title)
  Const        r206, "violent_movie_title"
  Const        r207, []
  IterPrep     r208, r10
  Len          r209, r208
  Move         r210, r28
L45:
  LessInt      r211, r210, r209
  JumpIfFalse  r211, L44
  Index        r182, r208, r210
  Index        r213, r182, r24
  Append       r207, r207, r213
  AddInt       r210, r210, r174
  Jump         L45
L44:
  Min          r215, r207
  // movie_budget: min(from x in matches select x.budget),
  Move         r216, r175
  Move         r217, r185
  // movie_votes: min(from x in matches select x.votes),
  Move         r218, r186
  Move         r219, r195
  // male_writer: min(from x in matches select x.writer),
  Move         r220, r196
  Move         r221, r205
  // violent_movie_title: min(from x in matches select x.title)
  Move         r222, r206
  Move         r223, r215
  // {
  MakeMap      r225, 4, r216
  // let result = [
  MakeList     r226, 1, r225
  // json(result)
  JSON         r226
  // expect result == [
  Const        r227, [{"male_writer": "Mike", "movie_budget": "Horror", "movie_votes": 100, "violent_movie_title": "Scary Movie"}]
  Equal        r228, r226, r227
  Expect       r228
  Return       r0
