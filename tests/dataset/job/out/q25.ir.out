func main (regs=71)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(writer)", "person_id": 2}]
  // let info_type = [
  Const        r1, [{"id": 1, "info": "genres"}, {"id": 2, "info": "votes"}]
  // let keyword = [
  Const        r2, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "romance"}]
  // let movie_info = [
  Const        r3, [{"info": "Horror", "info_type_id": 1, "movie_id": 1}, {"info": "Comedy", "info_type_id": 1, "movie_id": 2}]
L15:
  // let movie_info_idx = [
  Const        r4, [{"info": 100, "info_type_id": 2, "movie_id": 1}, {"info": 50, "info_type_id": 2, "movie_id": 2}]
  // let movie_keyword = [
  Const        r5, [{"keyword_id": 1, "movie_id": 1}, {"keyword_id": 2, "movie_id": 2}]
  // let name = [
  Const        r6, [{"gender": "m", "id": 1, "name": "Mike"}, {"gender": "f", "id": 2, "name": "Sue"}]
L12:
  // let title = [
  Const        r7, [{"id": 1, "title": "Scary Movie"}, {"id": 2, "title": "Funny Movie"}]
  // let allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  Const        r8, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  // let allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
  Const        r8, ["murder", "blood", "gore", "death", "female-nudity"]
  // from ci in cast_info
  Const        r8, []
  // (ci.note in allowed_notes) &&
  Const        r9, "note"
  // it1.info == "genres" &&
  Const        r10, "info"
  // (k.keyword in allowed_keywords) &&
  Const        r11, "keyword"
  // n.gender == "m" &&
  Const        r12, "gender"
  // t.id == mi.movie_id &&
  Const        r13, "id"
  Const        r14, "movie_id"
  // n.id == ci.person_id &&
  Const        r15, "person_id"
  // it1.id == mi.info_type_id &&
  Const        r16, "info_type_id"
  // k.id == mk.keyword_id
  Const        r17, "keyword_id"
  // budget: mi.info,
  Const        r18, "budget"
  // votes: mi_idx.info,
  Const        r19, "votes"
  // writer: n.name,
  Const        r20, "writer"
  Const        r21, "name"
L7:
  // title: t.title
  Const        r22, "title"
  // from ci in cast_info
  IterPrep     r23, r0
  Len          r24, r23
L17:
  Const        r25, 0
L16:
  Move         r26, r25
  LessInt      r27, r26, r24
  JumpIfFalse  r27, L0
  Index        r24, r23, r26
L8:
  Move         r23, r24
  // from it1 in info_type
  IterPrep     r24, r1
  Len          r28, r24
  Move         r29, r25
  LessInt      r30, r29, r28
L14:
  JumpIfFalse  r30, L1
  Index        r28, r24, r29
L13:
  Move         r30, r28
  // from it2 in info_type
  IterPrep     r24, r1
  Len          r1, r24
  Move         r31, r25
L11:
  LessInt      r32, r31, r1
  JumpIfFalse  r32, L2
  Index        r1, r24, r31
  Move         r32, r1
  // from k in keyword
  IterPrep     r24, r2
  Len          r1, r24
  Move         r2, r25
  LessInt      r33, r2, r1
  JumpIfFalse  r33, L3
  Index        r1, r24, r2
  Move         r33, r1
  // from mi in movie_info
  IterPrep     r24, r3
L9:
  Len          r1, r24
  Move         r3, r25
  LessInt      r34, r3, r1
  JumpIfFalse  r34, L4
  Index        r1, r24, r3
  Move         r34, r1
  // from mi_idx in movie_info_idx
  IterPrep     r1, r4
  Len          r4, r1
  Move         r35, r25
  LessInt      r36, r35, r4
  JumpIfFalse  r36, L5
  Index        r36, r1, r35
  Move         r1, r36
  // from mk in movie_keyword
  IterPrep     r36, r5
  Len          r5, r36
L10:
  Move         r37, r25
  LessInt      r38, r37, r5
  JumpIfFalse  r38, L6
  Index        r5, r36, r37
  Move         r38, r5
  // from n in name
  IterPrep     r36, r6
  Len          r5, r36
  Move         r6, r25
  LessInt      r39, r6, r5
  JumpIfFalse  r39, L7
  Index        r5, r36, r6
  Move         r36, r5
  // from t in title
  IterPrep     r5, r7
  Len          r7, r5
  Move         r40, r25
  LessInt      r41, r40, r7
  JumpIfFalse  r41, L8
  Index        r7, r5, r40
  Move         r41, r7
  // (ci.note in allowed_notes) &&
  Index        r5, r23, r9
  Const        r9, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r42, r5, r9
  // it1.info == "genres" &&
  Index        r5, r30, r10
  Const        r9, "genres"
  Equal        r43, r5, r9
  // it2.info == "votes" &&
  Index        r5, r32, r10
  Equal        r9, r5, r19
  // mi.info == "Horror" &&
  Index        r5, r34, r10
  Const        r44, "Horror"
  Equal        r45, r5, r44
  // n.gender == "m" &&
  Index        r5, r36, r12
  Const        r44, "m"
  Equal        r12, r5, r44
  // t.id == mi.movie_id &&
  Index        r5, r41, r13
  Index        r44, r34, r14
  Equal        r46, r5, r44
  // t.id == mi_idx.movie_id &&
  Index        r5, r41, r13
  Index        r44, r1, r14
  Equal        r47, r5, r44
  // t.id == ci.movie_id &&
  Index        r5, r41, r13
  Index        r44, r23, r14
  Equal        r48, r5, r44
  // t.id == mk.movie_id &&
  Index        r5, r41, r13
  Index        r44, r38, r14
  Equal        r49, r5, r44
  // ci.movie_id == mi.movie_id &&
  Index        r5, r23, r14
  Index        r44, r34, r14
  Equal        r50, r5, r44
  // ci.movie_id == mi_idx.movie_id &&
  Index        r5, r23, r14
  Index        r44, r1, r14
  Equal        r51, r5, r44
  // ci.movie_id == mk.movie_id &&
  Index        r5, r23, r14
  Index        r44, r38, r14
  Equal        r52, r5, r44
  // mi.movie_id == mi_idx.movie_id &&
  Index        r5, r34, r14
  Index        r44, r1, r14
  Equal        r53, r5, r44
  // mi.movie_id == mk.movie_id &&
  Index        r5, r34, r14
  Index        r44, r38, r14
  Equal        r54, r5, r44
  // mi_idx.movie_id == mk.movie_id &&
  Index        r5, r1, r14
  Index        r44, r38, r14
  Equal        r14, r5, r44
  // n.id == ci.person_id &&
  Index        r5, r36, r13
  Index        r44, r23, r15
  Equal        r15, r5, r44
  // it1.id == mi.info_type_id &&
  Index        r23, r30, r13
  Index        r5, r34, r16
  Equal        r44, r23, r5
  // it2.id == mi_idx.info_type_id &&
  Index        r30, r32, r13
  Index        r23, r1, r16
  Equal        r5, r30, r23
  // k.id == mk.keyword_id
  Index        r16, r33, r13
  Index        r30, r38, r17
  Equal        r23, r16, r30
  // (ci.note in allowed_notes) &&
  Move         r13, r42
  JumpIfFalse  r13, L9
  Move         r13, r43
  // it1.info == "genres" &&
  JumpIfFalse  r13, L9
  Move         r13, r9
  // it2.info == "votes" &&
  JumpIfFalse  r13, L9
  // (k.keyword in allowed_keywords) &&
  Index        r17, r33, r11
  Const        r38, ["murder", "blood", "gore", "death", "female-nudity"]
  In           r16, r17, r38
  // it2.info == "votes" &&
  Move         r13, r16
  // (k.keyword in allowed_keywords) &&
  JumpIfFalse  r13, L9
  Move         r13, r45
  // mi.info == "Horror" &&
  JumpIfFalse  r13, L9
  Move         r13, r12
  // n.gender == "m" &&
  JumpIfFalse  r13, L9
  Move         r13, r46
  // t.id == mi.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r47
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r48
  // t.id == ci.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r49
  // t.id == mk.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r50
  // ci.movie_id == mi.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r51
  // ci.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r52
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r53
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r54
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r14
  // mi_idx.movie_id == mk.movie_id &&
  JumpIfFalse  r13, L9
  Move         r13, r15
  // n.id == ci.person_id &&
  JumpIfFalse  r13, L9
  Move         r13, r44
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r13, L9
  Move         r13, r5
  // it2.id == mi_idx.info_type_id &&
  JumpIfFalse  r13, L9
  Move         r13, r23
  // where (
  JumpIfFalse  r13, L10
  // budget: mi.info,
  Const        r30, "budget"
  Index        r42, r34, r10
  // votes: mi_idx.info,
  Const        r9, "votes"
  Index        r11, r1, r10
  // writer: n.name,
  Const        r33, "writer"
  Index        r45, r36, r21
  // title: t.title
  Const        r12, "title"
  Index        r46, r41, r22
  // budget: mi.info,
  Move         r55, r30
  Move         r56, r42
  // votes: mi_idx.info,
  Move         r57, r9
  Move         r58, r11
  // writer: n.name,
  Move         r59, r33
  Move         r60, r45
  // title: t.title
  Move         r61, r12
  Move         r62, r46
  // select {
  MakeMap      r47, 4, r55
  // from ci in cast_info
  Append       r48, r8, r47
  Move         r8, r48
  // from t in title
  Const        r49, 1
  AddInt       r40, r40, r49
  Jump         L11
  // from n in name
  AddInt       r6, r6, r49
  Jump         L12
  // from mk in movie_keyword
  AddInt       r37, r37, r49
  Jump         L13
L6:
  // from mi_idx in movie_info_idx
  AddInt       r35, r35, r49
  Jump         L14
L5:
  // from mi in movie_info
  AddInt       r3, r3, r49
  Jump         L15
L4:
  // from k in keyword
  AddInt       r2, r2, r49
  Jump         L7
L3:
  // from it2 in info_type
  AddInt       r31, r31, r49
  Jump         L8
L2:
  // from it1 in info_type
  AddInt       r29, r29, r49
  Jump         L16
L1:
  // from ci in cast_info
  AddInt       r26, r26, r49
  Jump         L17
L0:
  // movie_budget: min(from x in matches select x.budget),
  Const        r50, "movie_budget"
  Const        r51, []
  IterPrep     r52, r8
  Len          r53, r52
  Move         r54, r25
L19:
  LessInt      r14, r54, r53
  JumpIfFalse  r14, L18
  Index        r15, r52, r54
  Move         r44, r15
  Index        r5, r44, r18
  Append       r23, r51, r5
  Move         r51, r23
  AddInt       r54, r54, r49
  Jump         L19
L18:
  Min          r13, r51
  // movie_votes: min(from x in matches select x.votes),
  Const        r17, "movie_votes"
  Const        r38, []
  IterPrep     r16, r8
  Len          r34, r16
  Move         r10, r25
L21:
  LessInt      r1, r10, r34
  JumpIfFalse  r1, L20
  Index        r21, r16, r10
  Move         r44, r21
  Index        r36, r44, r19
  Append       r41, r38, r36
  Move         r38, r41
  AddInt       r10, r10, r49
  Jump         L21
L20:
  Min          r30, r38
  // male_writer: min(from x in matches select x.writer),
  Const        r42, "male_writer"
  Const        r9, []
  IterPrep     r11, r8
  Len          r33, r11
  Move         r45, r25
L23:
  LessInt      r12, r45, r33
  JumpIfFalse  r12, L22
  Index        r46, r11, r45
  Move         r44, r46
  Index        r55, r44, r20
  Append       r56, r9, r55
  Move         r9, r56
  AddInt       r45, r45, r49
  Jump         L23
L22:
  Min          r57, r9
  // violent_movie_title: min(from x in matches select x.title)
  Const        r58, "violent_movie_title"
  Const        r59, []
  IterPrep     r60, r8
  Len          r61, r60
  Move         r62, r25
L25:
  LessInt      r47, r62, r61
  JumpIfFalse  r47, L24
  Index        r48, r60, r62
  Move         r44, r48
  Index        r26, r44, r22
  Append       r27, r59, r26
  Move         r59, r27
  AddInt       r62, r62, r49
  Jump         L25
L24:
  Min          r29, r59
  // movie_budget: min(from x in matches select x.budget),
  Move         r63, r50
  Move         r64, r13
  // movie_votes: min(from x in matches select x.votes),
  Move         r65, r17
  Move         r66, r30
  // male_writer: min(from x in matches select x.writer),
  Move         r67, r42
  Move         r68, r57
  // violent_movie_title: min(from x in matches select x.title)
  Move         r69, r58
  Move         r70, r29
  // {
  MakeMap      r28, 4, r63
  Move         r31, r28
  // let result = [
  MakeList     r32, 1, r31
  // json(result)
  JSON         r32
  // expect result == [
  Const        r2, [{"male_writer": "Mike", "movie_budget": "Horror", "movie_votes": 100, "violent_movie_title": "Scary Movie"}]
  Equal        r24, r32, r2
  Expect       r24
  Return       r0
