func main (regs=72)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1, "name": "Euro Films"}, {"country_code": "[us]", "id": 2, "name": "US Films"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production"}]
  // let info_type = [
  Const        r2, [{"id": 10, "info": "countries"}, {"id": 20, "info": "rating"}]
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let kind_type = [
  Const        r4, [{"id": 100, "kind": "movie"}, {"id": 200, "kind": "episode"}]
L25:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": "release (2009) (worldwide)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": "release (2007) (USA)"}]
L21:
  // let movie_info = [
  Const        r6, [{"info": "Germany", "info_type_id": 10, "movie_id": 10}, {"info": "USA", "info_type_id": 10, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r7, [{"info": 6.5, "info_type_id": 20, "movie_id": 10}, {"info": 7.8, "info_type_id": 20, "movie_id": 20}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
  // let title = [
  Const        r9, [{"id": 10, "kind_id": 100, "production_year": 2009, "title": "Violent Western"}, {"id": 20, "kind_id": 100, "production_year": 2007, "title": "Old Western"}]
  // from cn in company_name
  Const        r10, []
  // cn.country_code != "[us]" &&
  Const        r11, "country_code"
  // it1.info == "countries" &&
  Const        r12, "info"
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Const        r13, "keyword"
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Const        r14, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r15, "note"
  Const        r16, "contains"
  // t.production_year > 2008 &&
  Const        r16, "production_year"
  // kt.id == t.kind_id &&
  Const        r17, "id"
  Const        r18, "kind_id"
  // t.id == mi.movie_id &&
  Const        r19, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r20, "keyword_id"
  // it1.id == mi.info_type_id &&
  Const        r21, "info_type_id"
  // ct.id == mc.company_type_id &&
  Const        r22, "company_type_id"
  // cn.id == mc.company_id
  Const        r23, "company_id"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r24, "company"
  Const        r25, "name"
  Const        r26, "rating"
  Const        r27, "title"
L24:
  // from cn in company_name
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, 0
L26:
  Move         r31, r30
  LessInt      r32, r31, r29
  JumpIfFalse  r32, L0
  Index        r29, r28, r31
  Move         r28, r29
L22:
  // join mc in movie_companies on cn.id == mc.company_id
  IterPrep     r29, r5
  Len          r5, r29
L23:
  Move         r33, r30
  LessInt      r34, r33, r5
  JumpIfFalse  r34, L1
L18:
  Index        r5, r29, r33
  Move         r34, r5
L19:
  Index        r29, r28, r17
  Index        r35, r34, r23
L20:
  Equal        r36, r29, r35
  JumpIfFalse  r36, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r29, r1
  Len          r35, r29
  Move         r36, r30
L16:
  LessInt      r1, r36, r35
L17:
  JumpIfFalse  r1, L2
  Index        r35, r29, r36
  Move         r1, r35
  Index        r29, r1, r17
  Index        r35, r34, r22
  Equal        r37, r29, r35
  JumpIfFalse  r37, L3
L14:
  // join t in title on t.id == mc.movie_id
  IterPrep     r35, r9
  Len          r37, r35
  Move         r9, r30
  LessInt      r38, r9, r37
  JumpIfFalse  r38, L3
  Index        r37, r35, r9
  Move         r38, r37
  Index        r35, r38, r17
  Index        r37, r34, r19
L15:
  Equal        r39, r35, r37
L13:
  JumpIfFalse  r39, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r35, r8
  Len          r37, r35
  Move         r8, r30
  LessInt      r40, r8, r37
  JumpIfFalse  r40, L4
  Index        r37, r35, r8
  Move         r40, r37
  Index        r35, r40, r19
  Index        r37, r38, r17
  Equal        r41, r35, r37
  JumpIfFalse  r41, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r35, r3
  Len          r37, r35
  Move         r41, r30
  LessInt      r3, r41, r37
  JumpIfFalse  r3, L5
  Index        r3, r35, r41
  Move         r35, r3
  Index        r3, r35, r17
  Index        r42, r40, r20
  Equal        r43, r3, r42
  JumpIfFalse  r43, L6
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r3, r6
  Len          r42, r3
  Move         r43, r30
  LessInt      r6, r43, r42
  JumpIfFalse  r6, L6
  Index        r42, r3, r43
  Move         r3, r42
  Index        r42, r3, r19
  Index        r44, r38, r17
  Equal        r45, r42, r44
  JumpIfFalse  r45, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r42, r2
  Len          r44, r42
  Move         r45, r30
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L7
  Index        r44, r42, r45
  Move         r46, r44
  Index        r42, r46, r17
  Index        r44, r3, r21
  Equal        r47, r42, r44
  JumpIfFalse  r47, L8
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r42, r7
  Len          r44, r42
  Move         r47, r30
  LessInt      r7, r47, r44
  JumpIfFalse  r7, L8
  Index        r44, r42, r47
  Move         r7, r44
  Index        r42, r7, r19
  Index        r44, r38, r17
  Equal        r48, r42, r44
  JumpIfFalse  r48, L9
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r42, r2
  Len          r48, r42
  Move         r2, r30
  LessInt      r49, r2, r48
  JumpIfFalse  r49, L9
  Index        r48, r42, r2
  Move         r49, r48
  Index        r42, r49, r17
  Index        r48, r7, r21
  Equal        r50, r42, r48
  JumpIfFalse  r50, L10
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r42, r4
  Len          r48, r42
  Move         r50, r30
  LessInt      r4, r50, r48
  JumpIfFalse  r4, L10
  Index        r48, r42, r50
  Move         r4, r48
  Index        r48, r4, r17
  Index        r51, r38, r18
  Equal        r52, r48, r51
  JumpIfFalse  r52, L11
  // cn.country_code != "[us]" &&
  Index        r48, r28, r11
  // mi_idx.info < 7.0 &&
  Index        r51, r7, r12
  Const        r52, 7.0
  LessFloat    r11, r51, r52
  // t.production_year > 2008 &&
  Index        r51, r38, r16
  Const        r16, 2008
  Less         r53, r16, r51
  // cn.country_code != "[us]" &&
  Const        r51, "[us]"
  NotEqual     r16, r48, r51
  // it1.info == "countries" &&
  Index        r48, r46, r12
  Const        r51, "countries"
  Equal        r54, r48, r51
  // it2.info == "rating" &&
  Index        r48, r49, r12
  Equal        r51, r48, r26
  Index        r48, r34, r15
  // mc.note.contains("(USA)") == false &&
  Const        r55, "(USA)"
  In           r56, r55, r48
  Const        r48, false
  Equal        r55, r56, r48
  // kt.id == t.kind_id &&
  Index        r56, r4, r17
  Index        r48, r38, r18
  Equal        r18, r56, r48
  // t.id == mi.movie_id &&
  Index        r56, r38, r17
  Index        r48, r3, r19
  Equal        r57, r56, r48
  // t.id == mk.movie_id &&
  Index        r56, r38, r17
  Index        r48, r40, r19
  Equal        r58, r56, r48
  // t.id == mi_idx.movie_id &&
  Index        r56, r38, r17
  Index        r48, r7, r19
  Equal        r59, r56, r48
  // t.id == mc.movie_id &&
  Index        r56, r38, r17
  Index        r48, r34, r19
  Equal        r60, r56, r48
  // mk.movie_id == mi.movie_id &&
  Index        r56, r40, r19
  Index        r48, r3, r19
  Equal        r61, r56, r48
  // mk.movie_id == mi_idx.movie_id &&
  Index        r56, r40, r19
  Index        r48, r7, r19
  Equal        r62, r56, r48
  // mk.movie_id == mc.movie_id &&
  Index        r56, r40, r19
  Index        r48, r34, r19
  Equal        r63, r56, r48
  // mi.movie_id == mi_idx.movie_id &&
  Index        r56, r3, r19
  Index        r48, r7, r19
  Equal        r64, r56, r48
  // mi.movie_id == mc.movie_id &&
  Index        r56, r3, r19
  Index        r48, r34, r19
  Equal        r65, r56, r48
  // mc.movie_id == mi_idx.movie_id &&
  Index        r56, r34, r19
  Index        r48, r7, r19
  Equal        r19, r56, r48
  // k.id == mk.keyword_id &&
  Index        r56, r35, r17
  Index        r48, r40, r20
  Equal        r20, r56, r48
  // it1.id == mi.info_type_id &&
  Index        r40, r46, r17
  Index        r56, r3, r21
  Equal        r48, r40, r56
  // it2.id == mi_idx.info_type_id &&
  Index        r40, r49, r17
  Index        r56, r7, r21
  Equal        r49, r40, r56
  // ct.id == mc.company_type_id &&
  Index        r21, r1, r17
  Index        r40, r34, r22
  Equal        r56, r21, r40
  // cn.id == mc.company_id
  Index        r1, r28, r17
  Index        r22, r34, r23
  Equal        r21, r1, r22
  // cn.country_code != "[us]" &&
  Move         r40, r16
  JumpIfFalse  r40, L12
  Move         r40, r54
  // it1.info == "countries" &&
  JumpIfFalse  r40, L12
  Move         r40, r51
  // it2.info == "rating" &&
  JumpIfFalse  r40, L12
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Index        r17, r35, r13
  Const        r23, "murder"
  Equal        r1, r17, r23
  Index        r22, r35, r13
  Const        r16, "murder-in-title"
  Equal        r54, r22, r16
  Index        r17, r35, r13
  Const        r23, "blood"
  Equal        r22, r17, r23
  Index        r16, r35, r13
  Const        r17, "violence"
  Equal        r23, r16, r17
  Move         r13, r1
  JumpIfTrue   r13, L13
  Move         r13, r54
  JumpIfTrue   r13, L13
  Move         r13, r22
  JumpIfTrue   r13, L13
  Move         r13, r23
  // it2.info == "rating" &&
  Move         r40, r13
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  JumpIfFalse  r40, L12
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Index        r35, r4, r14
  Const        r16, "movie"
  Equal        r17, r35, r16
  Index        r1, r4, r14
  Const        r54, "episode"
  Equal        r22, r1, r54
  Move         r23, r17
  JumpIfTrue   r23, L14
  Move         r23, r22
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Move         r40, r23
  // (kt.kind == "movie" || kt.kind == "episode") &&
  JumpIfFalse  r40, L12
  Move         r40, r55
  // mc.note.contains("(USA)") == false &&
  JumpIfFalse  r40, L12
  Index        r13, r34, r15
  // mc.note.contains("(200") &&
  Const        r35, "(200"
  In           r16, r35, r13
  // mc.note.contains("(USA)") == false &&
  Move         r40, r16
  // mc.note.contains("(200") &&
  JumpIfFalse  r40, L12
  // (mi.info == "Germany" || mi.info == "German" || mi.info == "USA" || mi.info == "American") &&
  Index        r14, r3, r12
  Const        r4, "Germany"
  Equal        r1, r14, r4
  Index        r54, r3, r12
  Const        r55, "German"
  Equal        r17, r54, r55
  Index        r22, r3, r12
  Const        r23, "USA"
  Equal        r15, r22, r23
  Index        r34, r3, r12
  Const        r13, "American"
  Equal        r35, r34, r13
  Move         r16, r1
  JumpIfTrue   r16, L15
  Move         r16, r17
  JumpIfTrue   r16, L15
  Move         r16, r15
  JumpIfTrue   r16, L15
  Move         r16, r35
  // mc.note.contains("(200") &&
  Move         r40, r16
  // (mi.info == "Germany" || mi.info == "German" || mi.info == "USA" || mi.info == "American") &&
  JumpIfFalse  r40, L12
  Move         r40, r11
  // mi_idx.info < 7.0 &&
  JumpIfFalse  r40, L12
  Move         r40, r53
  // t.production_year > 2008 &&
  JumpIfFalse  r40, L12
  Move         r40, r18
  // kt.id == t.kind_id &&
  JumpIfFalse  r40, L12
  Move         r40, r57
  // t.id == mi.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r58
  // t.id == mk.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r59
  // t.id == mi_idx.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r60
  // t.id == mc.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r61
  // mk.movie_id == mi.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r62
  // mk.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r63
  // mk.movie_id == mc.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r64
  // mi.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r65
  // mi.movie_id == mc.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r19
  // mc.movie_id == mi_idx.movie_id &&
  JumpIfFalse  r40, L12
  Move         r40, r20
  // k.id == mk.keyword_id &&
  JumpIfFalse  r40, L12
  Move         r40, r48
  // it1.id == mi.info_type_id &&
  JumpIfFalse  r40, L12
  Move         r40, r49
  // it2.id == mi_idx.info_type_id &&
  JumpIfFalse  r40, L12
  Move         r40, r56
  // ct.id == mc.company_type_id &&
  JumpIfFalse  r40, L12
  Move         r40, r21
L12:
  // where (
  JumpIfFalse  r40, L11
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r14, "company"
  Index        r4, r28, r25
  Const        r54, "rating"
  Index        r55, r7, r12
  Const        r22, "title"
  Index        r23, r38, r27
  Move         r66, r14
  Move         r67, r4
  Move         r68, r54
  Move         r69, r55
  Move         r70, r22
  Move         r71, r23
  MakeMap      r3, 3, r66
  // from cn in company_name
  Append       r34, r10, r3
  Move         r10, r34
L11:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r13, 1
  Add          r50, r50, r13
  Jump         L16
L10:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r2, r2, r13
  Jump         L17
L9:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r47, r47, r13
  Jump         L18
L8:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r45, r45, r13
  Jump         L19
L7:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r43, r43, r13
  Jump         L20
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r41, r41, r13
  Jump         L21
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r8, r8, r13
  Jump         L22
L4:
  // join t in title on t.id == mc.movie_id
  Add          r9, r9, r13
  Jump         L23
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r36, r36, r13
  Jump         L24
L2:
  // join mc in movie_companies on cn.id == mc.company_id
  Add          r33, r33, r13
  Jump         L25
L1:
  // from cn in company_name
  AddInt       r31, r31, r13
  Jump         L26
L0:
  // movie_company: min(from r in rows select r.company),
  Const        r11, "movie_company"
  Const        r53, []
  IterPrep     r18, r10
  Len          r57, r18
  Move         r58, r30
L28:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L27
  Index        r60, r18, r58
  Move         r61, r60
  Index        r62, r61, r24
  Append       r63, r53, r62
  Move         r53, r63
  AddInt       r58, r58, r13
  Jump         L28
L27:
  Min          r64, r53
  // rating: min(from r in rows select r.rating),
  Const        r65, "rating"
  Const        r19, []
  IterPrep     r20, r10
  Len          r48, r20
  Move         r49, r30
L30:
  LessInt      r56, r49, r48
  JumpIfFalse  r56, L29
  Index        r21, r20, r49
  Move         r61, r21
  Index        r40, r61, r26
  Append       r1, r19, r40
  Move         r19, r1
  AddInt       r49, r49, r13
  Jump         L30
L29:
  Min          r17, r19
  // western_violent_movie: min(from r in rows select r.title)
  Const        r15, "western_violent_movie"
  Const        r35, []
  IterPrep     r16, r10
  Len          r25, r16
  Move         r28, r30
L32:
  LessInt      r12, r28, r25
  JumpIfFalse  r12, L31
  Index        r7, r16, r28
  Move         r61, r7
  Index        r38, r61, r27
  Append       r14, r35, r38
  Move         r35, r14
  AddInt       r28, r28, r13
  Jump         L32
L31:
  Min          r4, r35
  // movie_company: min(from r in rows select r.company),
  Move         r66, r11
  Move         r67, r64
  // rating: min(from r in rows select r.rating),
  Move         r68, r65
  Move         r69, r17
  // western_violent_movie: min(from r in rows select r.title)
  Move         r70, r15
  Move         r71, r4
  // {
  MakeMap      r54, 3, r66
  Move         r55, r54
  // let result = [
  MakeList     r22, 1, r55
  // json(result)
  JSON         r22
  // expect result == [
  Const        r23, [{"movie_company": "Euro Films", "rating": 6.5, "western_violent_movie": "Violent Western"}]
  Equal        r3, r22, r23
  Expect       r3
  Return       r0
