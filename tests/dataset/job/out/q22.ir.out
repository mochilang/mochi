func main (regs=315)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1, "name": "Euro Films"}, {"country_code": "[us]", "id": 2, "name": "US Films"}]
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production"}]
  // let info_type = [
  Const        r2, [{"id": 10, "info": "countries"}, {"id": 20, "info": "rating"}]
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
  // let kind_type = [
  Const        r4, [{"id": 100, "kind": "movie"}, {"id": 200, "kind": "episode"}]
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": "release (2009) (worldwide)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": "release (2007) (USA)"}]
  // let movie_info = [
  Const        r6, [{"info": "Germany", "info_type_id": 10, "movie_id": 10}, {"info": "USA", "info_type_id": 10, "movie_id": 20}]
  // let movie_info_idx = [
  Const        r7, [{"info": 6.5, "info_type_id": 20, "movie_id": 10}, {"info": 7.8, "info_type_id": 20, "movie_id": 20}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
  // let title = [
  Const        r9, [{"id": 10, "kind_id": 100, "production_year": 2009, "title": "Violent Western"}, {"id": 20, "kind_id": 100, "production_year": 2007, "title": "Old Western"}]
  // from cn in company_name
  Const        r10, []
  // cn.country_code != "[us]" &&
  Const        r11, "country_code"
  // it1.info == "countries" &&
  Const        r12, "info"
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Const        r13, "keyword"
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Const        r14, "kind"
  // mc.note.contains("(USA)") == false &&
  Const        r15, "note"
  // t.production_year > 2008 &&
  Const        r17, "production_year"
  // kt.id == t.kind_id &&
  Const        r18, "id"
  Const        r19, "kind_id"
  // t.id == mi.movie_id &&
  Const        r20, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r21, "keyword_id"
  // it1.id == mi.info_type_id &&
  Const        r22, "info_type_id"
  // ct.id == mc.company_type_id &&
  Const        r23, "company_type_id"
  // cn.id == mc.company_id
  Const        r24, "company_id"
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r25, "company"
  Const        r26, "name"
  Const        r27, "rating"
  Const        r28, "title"
  // from cn in company_name
  IterPrep     r29, r0
  Len          r30, r29
  Const        r32, 0
  Move         r31, r32
L51:
  LessInt      r33, r31, r30
  JumpIfFalse  r33, L0
  Index        r35, r29, r31
  // join mc in movie_companies on cn.id == mc.company_id
  IterPrep     r36, r5
  Len          r37, r36
  Move         r38, r32
L50:
  LessInt      r39, r38, r37
  JumpIfFalse  r39, L1
  Index        r41, r36, r38
  Index        r42, r35, r18
  Index        r43, r41, r24
  Equal        r44, r42, r43
  JumpIfFalse  r44, L2
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r45, r1
  Len          r46, r45
  Move         r47, r32
L49:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L2
  Index        r50, r45, r47
  Index        r51, r50, r18
  Index        r52, r41, r23
  Equal        r53, r51, r52
  JumpIfFalse  r53, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r54, r9
  Len          r55, r54
  Move         r56, r32
L48:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Index        r60, r59, r18
  Index        r61, r41, r20
  Equal        r62, r60, r61
  JumpIfFalse  r62, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r63, r8
  Len          r64, r63
  Move         r65, r32
L47:
  LessInt      r66, r65, r64
  JumpIfFalse  r66, L4
  Index        r68, r63, r65
  Index        r69, r68, r20
  Index        r70, r59, r18
  Equal        r71, r69, r70
  JumpIfFalse  r71, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r72, r3
  Len          r73, r72
  Move         r74, r32
L46:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L5
  Index        r77, r72, r74
  Index        r78, r77, r18
  Index        r79, r68, r21
  Equal        r80, r78, r79
  JumpIfFalse  r80, L6
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r81, r6
  Len          r82, r81
  Move         r83, r32
L45:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L6
  Index        r86, r81, r83
  Index        r87, r86, r20
  Index        r88, r59, r18
  Equal        r89, r87, r88
  JumpIfFalse  r89, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r90, r2
  Len          r91, r90
  Move         r92, r32
L44:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L7
  Index        r95, r90, r92
  Index        r96, r95, r18
  Index        r97, r86, r22
  Equal        r98, r96, r97
  JumpIfFalse  r98, L8
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r99, r7
  Len          r100, r99
  Move         r101, r32
L43:
  LessInt      r102, r101, r100
  JumpIfFalse  r102, L8
  Index        r104, r99, r101
  Index        r105, r104, r20
  Index        r106, r59, r18
  Equal        r107, r105, r106
  JumpIfFalse  r107, L9
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r108, r2
  Len          r109, r108
  Move         r110, r32
L42:
  LessInt      r111, r110, r109
  JumpIfFalse  r111, L9
  Index        r113, r108, r110
  Index        r114, r113, r18
  Index        r115, r104, r22
  Equal        r116, r114, r115
  JumpIfFalse  r116, L10
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r117, r4
  Len          r118, r117
  Move         r119, r32
L41:
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L10
  Index        r122, r117, r119
  Index        r123, r122, r18
  Index        r124, r59, r19
  Equal        r125, r123, r124
  JumpIfFalse  r125, L11
  // cn.country_code != "[us]" &&
  Index        r126, r35, r11
  // mi_idx.info < 7.0 &&
  Index        r127, r104, r12
  Const        r128, 7
  LessFloat    r129, r127, r128
  // t.production_year > 2008 &&
  Index        r130, r59, r17
  Const        r131, 2008
  Less         r132, r131, r130
  // cn.country_code != "[us]" &&
  Const        r133, "[us]"
  NotEqual     r134, r126, r133
  // it1.info == "countries" &&
  Index        r135, r95, r12
  Const        r136, "countries"
  Equal        r137, r135, r136
  // it2.info == "rating" &&
  Index        r138, r113, r12
  Equal        r139, r138, r27
  Index        r140, r41, r15
  // mc.note.contains("(USA)") == false &&
  Const        r141, "(USA)"
  In           r142, r141, r140
  Const        r143, false
  Equal        r144, r142, r143
  // kt.id == t.kind_id &&
  Index        r145, r122, r18
  Index        r146, r59, r19
  Equal        r147, r145, r146
  // t.id == mi.movie_id &&
  Index        r148, r59, r18
  Index        r149, r86, r20
  Equal        r150, r148, r149
  // t.id == mk.movie_id &&
  Index        r151, r59, r18
  Index        r152, r68, r20
  Equal        r153, r151, r152
  // t.id == mi_idx.movie_id &&
  Index        r154, r59, r18
  Index        r155, r104, r20
  Equal        r156, r154, r155
  // t.id == mc.movie_id &&
  Index        r157, r59, r18
  Index        r158, r41, r20
  Equal        r159, r157, r158
  // mk.movie_id == mi.movie_id &&
  Index        r160, r68, r20
  Index        r161, r86, r20
  Equal        r162, r160, r161
  // mk.movie_id == mi_idx.movie_id &&
  Index        r163, r68, r20
  Index        r164, r104, r20
  Equal        r165, r163, r164
  // mk.movie_id == mc.movie_id &&
  Index        r166, r68, r20
  Index        r167, r41, r20
  Equal        r168, r166, r167
  // mi.movie_id == mi_idx.movie_id &&
  Index        r169, r86, r20
  Index        r170, r104, r20
  Equal        r171, r169, r170
  // mi.movie_id == mc.movie_id &&
  Index        r172, r86, r20
  Index        r173, r41, r20
  Equal        r174, r172, r173
  // mc.movie_id == mi_idx.movie_id &&
  Index        r175, r41, r20
  Index        r176, r104, r20
  Equal        r177, r175, r176
  // k.id == mk.keyword_id &&
  Index        r178, r77, r18
  Index        r179, r68, r21
  Equal        r180, r178, r179
  // it1.id == mi.info_type_id &&
  Index        r181, r95, r18
  Index        r182, r86, r22
  Equal        r183, r181, r182
  // it2.id == mi_idx.info_type_id &&
  Index        r184, r113, r18
  Index        r185, r104, r22
  Equal        r186, r184, r185
  // ct.id == mc.company_type_id &&
  Index        r187, r50, r18
  Index        r188, r41, r23
  Equal        r189, r187, r188
  // cn.id == mc.company_id
  Index        r190, r35, r18
  Index        r191, r41, r24
  Equal        r192, r190, r191
  // cn.country_code != "[us]" &&
  Move         r193, r134
  JumpIfFalse  r193, L12
L12:
  // it1.info == "countries" &&
  Move         r194, r137
  JumpIfFalse  r194, L13
L13:
  // it2.info == "rating" &&
  Move         r195, r139
  JumpIfFalse  r195, L14
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Index        r196, r77, r13
  Const        r197, "murder"
  Equal        r198, r196, r197
  Index        r199, r77, r13
  Const        r200, "murder-in-title"
  Equal        r201, r199, r200
  Index        r202, r77, r13
  Const        r203, "blood"
  Equal        r204, r202, r203
  Index        r205, r77, r13
  Const        r206, "violence"
  Equal        r207, r205, r206
  Move         r208, r198
  JumpIfTrue   r208, L15
L15:
  Move         r209, r201
  JumpIfTrue   r209, L16
L16:
  Move         r210, r204
  JumpIfTrue   r210, L14
L14:
  Move         r211, r207
  JumpIfFalse  r211, L17
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Index        r212, r122, r14
  Const        r213, "movie"
  Equal        r214, r212, r213
  Index        r215, r122, r14
  Const        r216, "episode"
  Equal        r217, r215, r216
  Move         r218, r214
  JumpIfTrue   r218, L17
L17:
  Move         r219, r217
  JumpIfFalse  r219, L18
L18:
  // mc.note.contains("(USA)") == false &&
  Move         r220, r144
  JumpIfFalse  r220, L19
  Index        r221, r41, r15
  // mc.note.contains("(200") &&
  Const        r222, "(200"
  In           r224, r222, r221
L19:
  JumpIfFalse  r224, L20
  // (mi.info == "Germany" || mi.info == "German" || mi.info == "USA" || mi.info == "American") &&
  Index        r225, r86, r12
  Const        r226, "Germany"
  Equal        r227, r225, r226
  Index        r228, r86, r12
  Const        r229, "German"
  Equal        r230, r228, r229
  Index        r231, r86, r12
  Const        r232, "USA"
  Equal        r233, r231, r232
  Index        r234, r86, r12
  Const        r235, "American"
  Equal        r236, r234, r235
  Move         r237, r227
  JumpIfTrue   r237, L21
L21:
  Move         r238, r230
  JumpIfTrue   r238, L22
L22:
  Move         r239, r233
  JumpIfTrue   r239, L20
L20:
  Move         r240, r236
  JumpIfFalse  r240, L23
L23:
  // mi_idx.info < 7.0 &&
  Move         r241, r129
  JumpIfFalse  r241, L24
L24:
  // t.production_year > 2008 &&
  Move         r242, r132
  JumpIfFalse  r242, L25
L25:
  // kt.id == t.kind_id &&
  Move         r243, r147
  JumpIfFalse  r243, L26
L26:
  // t.id == mi.movie_id &&
  Move         r244, r150
  JumpIfFalse  r244, L27
L27:
  // t.id == mk.movie_id &&
  Move         r245, r153
  JumpIfFalse  r245, L28
L28:
  // t.id == mi_idx.movie_id &&
  Move         r246, r156
  JumpIfFalse  r246, L29
L29:
  // t.id == mc.movie_id &&
  Move         r247, r159
  JumpIfFalse  r247, L30
L30:
  // mk.movie_id == mi.movie_id &&
  Move         r248, r162
  JumpIfFalse  r248, L31
L31:
  // mk.movie_id == mi_idx.movie_id &&
  Move         r249, r165
  JumpIfFalse  r249, L32
L32:
  // mk.movie_id == mc.movie_id &&
  Move         r250, r168
  JumpIfFalse  r250, L33
L33:
  // mi.movie_id == mi_idx.movie_id &&
  Move         r251, r171
  JumpIfFalse  r251, L34
L34:
  // mi.movie_id == mc.movie_id &&
  Move         r252, r174
  JumpIfFalse  r252, L35
L35:
  // mc.movie_id == mi_idx.movie_id &&
  Move         r253, r177
  JumpIfFalse  r253, L36
L36:
  // k.id == mk.keyword_id &&
  Move         r254, r180
  JumpIfFalse  r254, L37
L37:
  // it1.id == mi.info_type_id &&
  Move         r255, r183
  JumpIfFalse  r255, L38
L38:
  // it2.id == mi_idx.info_type_id &&
  Move         r256, r186
  JumpIfFalse  r256, L39
L39:
  // ct.id == mc.company_type_id &&
  Move         r257, r189
  JumpIfFalse  r257, L40
  Move         r257, r192
L40:
  // where (
  JumpIfFalse  r257, L11
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r258, "company"
  Index        r259, r35, r26
  Const        r260, "rating"
  Index        r261, r104, r12
  Const        r262, "title"
  Index        r263, r59, r28
  Move         r264, r258
  Move         r265, r259
  Move         r266, r260
  Move         r267, r261
  Move         r268, r262
  Move         r269, r263
  MakeMap      r270, 3, r264
  // from cn in company_name
  Append       r10, r10, r270
L11:
  // join kt in kind_type on kt.id == t.kind_id
  Const        r272, 1
  Add          r119, r119, r272
  Jump         L41
L10:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r110, r110, r272
  Jump         L42
L9:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r101, r101, r272
  Jump         L43
L8:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r92, r92, r272
  Jump         L44
L7:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r83, r83, r272
  Jump         L45
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r74, r74, r272
  Jump         L46
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r65, r65, r272
  Jump         L47
L4:
  // join t in title on t.id == mc.movie_id
  Add          r56, r56, r272
  Jump         L48
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r47, r47, r272
  Jump         L49
L2:
  // join mc in movie_companies on cn.id == mc.company_id
  Jump         L50
L1:
  // from cn in company_name
  AddInt       r31, r31, r272
  Jump         L51
L0:
  // movie_company: min(from r in rows select r.company),
  Const        r273, "movie_company"
  Const        r274, []
  IterPrep     r275, r10
  Len          r276, r275
  Move         r277, r32
L53:
  LessInt      r278, r277, r276
  JumpIfFalse  r278, L52
  Index        r280, r275, r277
  Index        r281, r280, r25
  Append       r274, r274, r281
  AddInt       r277, r277, r272
  Jump         L53
L52:
  Min          r283, r274
  // rating: min(from r in rows select r.rating),
  Const        r284, "rating"
  Const        r285, []
  IterPrep     r286, r10
  Len          r287, r286
  Move         r288, r32
L55:
  LessInt      r289, r288, r287
  JumpIfFalse  r289, L54
  Index        r280, r286, r288
  Index        r291, r280, r27
  Append       r285, r285, r291
  AddInt       r288, r288, r272
  Jump         L55
L54:
  Min          r293, r285
  // western_violent_movie: min(from r in rows select r.title)
  Const        r294, "western_violent_movie"
  Const        r295, []
  IterPrep     r296, r10
  Len          r297, r296
  Move         r298, r32
L57:
  LessInt      r299, r298, r297
  JumpIfFalse  r299, L56
  Index        r280, r296, r298
  Index        r301, r280, r28
  Append       r295, r295, r301
  AddInt       r298, r298, r272
  Jump         L57
L56:
  Min          r303, r295
  // movie_company: min(from r in rows select r.company),
  Move         r304, r273
  Move         r305, r283
  // rating: min(from r in rows select r.rating),
  Move         r306, r284
  Move         r307, r293
  // western_violent_movie: min(from r in rows select r.title)
  Move         r308, r294
  Move         r309, r303
  // {
  MakeMap      r311, 3, r304
  // let result = [
  MakeList     r312, 1, r311
  // json(result)
  JSON         r312
  // expect result == [
  Const        r313, [{"movie_company": "Euro Films", "rating": 6.5, "western_violent_movie": "Violent Western"}]
  Equal        r314, r312, r313
  Expect       r314
  Return       r0
