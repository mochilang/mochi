func main (regs=63)
  // let company_name = [
  Const        r0, [{"country_code": "[de]", "id": 1, "name": "Euro Films"}, {"country_code": "[us]", "id": 2, "name": "US Films"}]
L12:
  // let company_type = [
  Const        r1, [{"id": 1, "kind": "production"}]
  // let info_type = [
  Const        r2, [{"id": 10, "info": "countries"}, {"id": 20, "info": "rating"}]
  // let keyword = [
  Const        r3, [{"id": 1, "keyword": "murder"}, {"id": 2, "keyword": "comedy"}]
L24:
  // let kind_type = [
  Const        r4, [{"id": 100, "kind": "movie"}, {"id": 200, "kind": "episode"}]
L19:
  // let movie_companies = [
  Const        r5, [{"company_id": 1, "company_type_id": 1, "movie_id": 10, "note": "release (2009) (worldwide)"}, {"company_id": 2, "company_type_id": 1, "movie_id": 20, "note": "release (2007) (USA)"}]
L35:
  // let movie_info = [
  Const        r6, [{"info": "Germany", "info_type_id": 10, "movie_id": 10}, {"info": "USA", "info_type_id": 10, "movie_id": 20}]
L27:
  // let movie_info_idx = [
  Const        r7, [{"info": 6.5, "info_type_id": 20, "movie_id": 10}, {"info": 7.8, "info_type_id": 20, "movie_id": 20}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 10}, {"keyword_id": 2, "movie_id": 20}]
  // let title = [
  Const        r9, [{"id": 10, "kind_id": 100, "production_year": 2009, "title": "Violent Western"}, {"id": 20, "kind_id": 100, "production_year": 2007, "title": "Old Western"}]
  // from cn in company_name
  Const        r10, []
  // cn.country_code != "[us]" &&
  Const        r11, "country_code"
L22:
  // it1.info == "countries" &&
  Const        r12, "info"
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Const        r13, "keyword"
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Const        r14, "kind"
L15:
  // mc.note.contains("(USA)") == false &&
  Const        r15, "note"
  // t.production_year > 2008 &&
  Const        r16, "production_year"
  // kt.id == t.kind_id &&
  Const        r17, "id"
  Const        r18, "kind_id"
  // t.id == mi.movie_id &&
  Const        r19, "movie_id"
  // k.id == mk.keyword_id &&
  Const        r20, "keyword_id"
  // it1.id == mi.info_type_id &&
  Const        r21, "info_type_id"
  // ct.id == mc.company_type_id &&
  Const        r22, "company_type_id"
L20:
  // cn.id == mc.company_id
  Const        r23, "company_id"
L26:
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Const        r24, "company"
L21:
  Const        r25, "name"
L31:
  Const        r26, "rating"
  Const        r27, "title"
  // from cn in company_name
  IterPrep     r28, r0
L2:
  Len          r29, r28
L32:
  Const        r30, 0
L23:
  Move         r31, r30
L18:
  LessInt      r32, r31, r29
L14:
  JumpIfFalse  r32, L0
  Index        r32, r28, r31
L37:
  // join mc in movie_companies on cn.id == mc.company_id
  IterPrep     r28, r5
L13:
  Len          r5, r28
L36:
  Move         r29, r30
  LessInt      r33, r29, r5
L16:
  JumpIfFalse  r33, L1
  Index        r33, r28, r29
  Index        r29, r32, r17
  Index        r28, r33, r23
L34:
  Equal        r5, r29, r28
L17:
  JumpIfFalse  r5, L2
L11:
  // join ct in company_type on ct.id == mc.company_type_id
  IterPrep     r5, r1
L30:
  Len          r1, r5
  Move         r28, r30
L33:
  LessInt      r29, r28, r1
  JumpIfFalse  r29, L2
  Index        r1, r5, r28
  Index        r5, r1, r17
  Index        r34, r33, r22
  Equal        r35, r5, r34
  JumpIfFalse  r35, L3
  // join t in title on t.id == mc.movie_id
  IterPrep     r35, r9
  Len          r9, r35
  Move         r34, r30
  LessInt      r5, r34, r9
  JumpIfFalse  r5, L3
  Index        r5, r35, r34
  Index        r35, r5, r17
  Index        r9, r33, r19
  Equal        r36, r35, r9
  JumpIfFalse  r36, L4
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r36, r8
  Len          r8, r36
  Move         r9, r30
  LessInt      r35, r9, r8
  JumpIfFalse  r35, L4
  Index        r35, r36, r9
  Index        r36, r35, r19
  Index        r8, r5, r17
  Equal        r37, r36, r8
  JumpIfFalse  r37, L5
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r37, r3
  Len          r3, r37
  Move         r8, r30
  LessInt      r36, r8, r3
  JumpIfFalse  r36, L5
  Index        r36, r37, r8
  Index        r37, r36, r17
  Index        r3, r35, r20
  Equal        r38, r37, r3
  JumpIfFalse  r38, L6
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r38, r6
  Len          r6, r38
  Move         r3, r30
  LessInt      r39, r3, r6
  JumpIfFalse  r39, L6
  Index        r39, r38, r3
  Index        r38, r39, r19
  Index        r6, r5, r17
  Equal        r40, r38, r6
  JumpIfFalse  r40, L7
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r40, r2
  Len          r38, r40
  Move         r41, r30
  LessInt      r42, r41, r38
  JumpIfFalse  r42, L7
  Index        r42, r40, r41
  Index        r40, r42, r17
  Index        r38, r39, r21
  Equal        r43, r40, r38
  JumpIfFalse  r43, L8
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r38, r7
  Len          r7, r38
  Move         r40, r30
  LessInt      r44, r40, r7
  JumpIfFalse  r44, L8
  Index        r44, r38, r40
  Index        r38, r44, r19
  Index        r7, r5, r17
  Equal        r45, r38, r7
  JumpIfFalse  r45, L9
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r45, r2
  Len          r2, r45
  Move         r7, r30
  LessInt      r38, r7, r2
  JumpIfFalse  r38, L9
  Index        r38, r45, r7
  Index        r2, r38, r17
  Index        r46, r44, r21
  Equal        r47, r2, r46
  JumpIfFalse  r47, L10
  // join kt in kind_type on kt.id == t.kind_id
  IterPrep     r47, r4
  Len          r4, r47
  Move         r46, r30
  LessInt      r2, r46, r4
  JumpIfFalse  r2, L10
  Index        r2, r47, r46
  Index        r47, r2, r17
  Index        r48, r5, r18
  Equal        r49, r47, r48
  JumpIfFalse  r49, L11
  // cn.country_code != "[us]" &&
  Index        r49, r32, r11
  // mi_idx.info < 7.0 &&
  Index        r11, r44, r12
  Const        r48, 7
  LessFloat    r47, r11, r48
  // t.production_year > 2008 &&
  Index        r11, r5, r16
  Const        r16, 2008
  Less         r50, r16, r11
  // cn.country_code != "[us]" &&
  Const        r16, "[us]"
  NotEqual     r11, r49, r16
  // it1.info == "countries" &&
  Index        r16, r42, r12
  Const        r49, "countries"
  Equal        r51, r16, r49
  // it2.info == "rating" &&
  Index        r49, r38, r12
  Equal        r16, r49, r26
  Index        r49, r33, r15
  // mc.note.contains("(USA)") == false &&
  Const        r52, "(USA)"
  In           r53, r52, r49
  Const        r52, false
  Equal        r49, r53, r52
  // kt.id == t.kind_id &&
  Index        r52, r2, r17
  Index        r53, r5, r18
  Equal        r18, r52, r53
  // t.id == mi.movie_id &&
  Index        r53, r5, r17
  Index        r52, r39, r19
  Equal        r54, r53, r52
  // t.id == mk.movie_id &&
  Index        r52, r5, r17
  Index        r53, r35, r19
  Equal        r55, r52, r53
  // t.id == mi_idx.movie_id &&
  Index        r53, r5, r17
  Index        r52, r44, r19
  Equal        r56, r53, r52
  // t.id == mc.movie_id &&
  Index        r52, r5, r17
  Index        r53, r33, r19
  Equal        r57, r52, r53
  // mk.movie_id == mi.movie_id &&
  Index        r53, r35, r19
  Index        r52, r39, r19
  Equal        r58, r53, r52
  // mk.movie_id == mi_idx.movie_id &&
  Index        r52, r35, r19
  Index        r53, r44, r19
  Equal        r59, r52, r53
  // mk.movie_id == mc.movie_id &&
  Index        r53, r35, r19
  Index        r52, r33, r19
  Equal        r60, r53, r52
  // mi.movie_id == mi_idx.movie_id &&
  Index        r52, r39, r19
  Index        r53, r44, r19
  Equal        r61, r52, r53
  // mi.movie_id == mc.movie_id &&
  Index        r53, r39, r19
  Index        r52, r33, r19
  Equal        r62, r53, r52
  // mc.movie_id == mi_idx.movie_id &&
  Index        r52, r33, r19
  Index        r53, r44, r19
  Equal        r19, r52, r53
  // k.id == mk.keyword_id &&
  Index        r53, r36, r17
  Index        r52, r35, r20
  Equal        r20, r53, r52
  // it1.id == mi.info_type_id &&
  Index        r52, r42, r17
  Index        r42, r39, r21
  Equal        r53, r52, r42
  // it2.id == mi_idx.info_type_id &&
  Index        r42, r38, r17
  Index        r38, r44, r21
  Equal        r21, r42, r38
  // ct.id == mc.company_type_id &&
  Index        r38, r1, r17
  Index        r1, r33, r22
  Equal        r22, r38, r1
  // cn.id == mc.company_id
  Index        r1, r32, r17
  Index        r17, r33, r23
  Equal        r23, r1, r17
  // cn.country_code != "[us]" &&
  Move         r17, r11
  JumpIfFalse  r17, L12
  // it1.info == "countries" &&
  Move         r17, r51
  JumpIfFalse  r17, L13
  // it2.info == "rating" &&
  Move         r17, r16
  JumpIfFalse  r17, L14
  // (k.keyword == "murder" || k.keyword == "murder-in-title" || k.keyword == "blood" || k.keyword == "violence") &&
  Index        r17, r36, r13
  Const        r16, "murder"
  Equal        r51, r17, r16
  Index        r16, r36, r13
  Const        r17, "murder-in-title"
  Equal        r11, r16, r17
  Index        r17, r36, r13
  Const        r16, "blood"
  Equal        r1, r17, r16
  Index        r16, r36, r13
  Const        r36, "violence"
  Equal        r13, r16, r36
  Move         r36, r51
  JumpIfTrue   r36, L14
  Move         r36, r11
  JumpIfTrue   r36, L15
  Move         r36, r1
  JumpIfTrue   r36, L14
  Move         r36, r13
  JumpIfFalse  r36, L15
  // (kt.kind == "movie" || kt.kind == "episode") &&
  Index        r36, r2, r14
  Const        r13, "movie"
  Equal        r1, r36, r13
  Index        r13, r2, r14
  Const        r2, "episode"
  Equal        r14, r13, r2
  Move         r2, r1
  JumpIfTrue   r2, L15
  Move         r2, r14
  JumpIfFalse  r2, L16
  // mc.note.contains("(USA)") == false &&
  Move         r2, r49
  JumpIfFalse  r2, L16
  Index        r2, r33, r15
  // mc.note.contains("(200") &&
  Const        r33, "(200"
  In           r15, r33, r2
  JumpIfFalse  r15, L17
  // (mi.info == "Germany" || mi.info == "German" || mi.info == "USA" || mi.info == "American") &&
  Index        r15, r39, r12
  Const        r33, "Germany"
  Equal        r2, r15, r33
  Index        r33, r39, r12
  Const        r15, "German"
  Equal        r49, r33, r15
  Index        r15, r39, r12
  Const        r33, "USA"
  Equal        r14, r15, r33
  Index        r33, r39, r12
  Const        r39, "American"
  Equal        r15, r33, r39
  Move         r39, r2
  JumpIfTrue   r39, L16
  Move         r39, r49
  JumpIfTrue   r39, L18
  Move         r39, r14
  JumpIfTrue   r39, L17
  Move         r39, r15
  JumpIfFalse  r39, L19
  // mi_idx.info < 7.0 &&
  Move         r39, r47
  JumpIfFalse  r39, L20
  // t.production_year > 2008 &&
  Move         r39, r50
  JumpIfFalse  r39, L21
  // kt.id == t.kind_id &&
  Move         r39, r18
  JumpIfFalse  r39, L22
  // t.id == mi.movie_id &&
  Move         r39, r54
  JumpIfFalse  r39, L22
  // t.id == mk.movie_id &&
  Move         r39, r55
  JumpIfFalse  r39, L2
  // t.id == mi_idx.movie_id &&
  Move         r39, r56
  JumpIfFalse  r39, L23
  // t.id == mc.movie_id &&
  Move         r39, r57
  JumpIfFalse  r39, L24
  // mk.movie_id == mi.movie_id &&
  Move         r39, r58
  JumpIfFalse  r39, L24
  // mk.movie_id == mi_idx.movie_id &&
  Move         r39, r59
  JumpIfFalse  r39, L25
L25:
  // mk.movie_id == mc.movie_id &&
  Move         r39, r60
  JumpIfFalse  r39, L2
  // mi.movie_id == mi_idx.movie_id &&
  Move         r39, r61
  JumpIfFalse  r39, L26
  // mi.movie_id == mc.movie_id &&
  Move         r39, r62
  JumpIfFalse  r39, L27
  // mc.movie_id == mi_idx.movie_id &&
  Move         r39, r19
  JumpIfFalse  r39, L28
L28:
  // k.id == mk.keyword_id &&
  Move         r39, r20
  JumpIfFalse  r39, L29
L29:
  // it1.id == mi.info_type_id &&
  Move         r39, r53
  JumpIfFalse  r39, L30
  // it2.id == mi_idx.info_type_id &&
  Move         r39, r21
  JumpIfFalse  r39, L31
  // ct.id == mc.company_type_id &&
  Move         r39, r22
  JumpIfFalse  r39, L32
  Move         r39, r23
  // where (
  JumpIfFalse  r39, L11
  // select { company: cn.name, rating: mi_idx.info, title: t.title }
  Move         r39, r24
  Index        r23, r32, r25
  Move         r32, r26
  Index        r25, r44, r12
  Move         r44, r27
  Index        r12, r5, r27
  Move         r5, r39
  Move         r39, r23
  Move         r23, r32
  Move         r32, r25
  Move         r25, r44
  Move         r44, r12
  MakeMap      r12, 3, r5
  // from cn in company_name
  Append       r10, r10, r12
  // join kt in kind_type on kt.id == t.kind_id
  Const        r12, 1
  Add          r46, r46, r12
  Jump         L33
L10:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Add          r7, r7, r12
  Jump         L24
L9:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r40, r40, r12
  Jump         L11
L8:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r41, r41, r12
  Jump         L34
L7:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r3, r3, r12
  Jump         L35
L6:
  // join k in keyword on k.id == mk.keyword_id
  Add          r8, r8, r12
  Jump         L36
L5:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r9, r9, r12
  Jump         L37
L4:
  // join t in title on t.id == mc.movie_id
  Add          r34, r34, r12
  Jump         L33
L3:
  // join ct in company_type on ct.id == mc.company_type_id
  Add          r28, r28, r12
  Jump         L2
L1:
  // from cn in company_name
  AddInt       r31, r31, r12
  Jump         L32
L0:
  // movie_company: min(from r in rows select r.company),
  Const        r48, "movie_company"
  Const        r29, []
  IterPrep     r28, r10
  Len          r31, r28
  Move         r46, r30
L39:
  LessInt      r4, r46, r31
  JumpIfFalse  r4, L38
  Index        r4, r28, r46
  Index        r28, r4, r24
  Append       r29, r29, r28
  AddInt       r46, r46, r12
  Jump         L39
L38:
  Min          r28, r29
  // rating: min(from r in rows select r.rating),
  Move         r29, r26
  Const        r46, []
  IterPrep     r24, r10
  Len          r31, r24
  Move         r7, r30
L41:
  LessInt      r45, r7, r31
  JumpIfFalse  r45, L40
  Index        r4, r24, r7
  Index        r45, r4, r26
  Append       r46, r46, r45
  AddInt       r7, r7, r12
  Jump         L41
L40:
  Min          r45, r46
  // western_violent_movie: min(from r in rows select r.title)
  Const        r46, "western_violent_movie"
  Const        r7, []
  IterPrep     r26, r10
  Len          r10, r26
  Move         r31, r30
L43:
  LessInt      r30, r31, r10
  JumpIfFalse  r30, L42
  Index        r4, r26, r31
  Index        r30, r4, r27
  Append       r7, r7, r30
  AddInt       r31, r31, r12
  Jump         L43
L42:
  Min          r30, r7
  // movie_company: min(from r in rows select r.company),
  Move         r7, r48
  Move         r48, r28
  // rating: min(from r in rows select r.rating),
  Move         r28, r29
  Move         r29, r45
  // western_violent_movie: min(from r in rows select r.title)
  Move         r45, r46
  Move         r46, r30
  // {
  MakeMap      r30, 3, r7
  // let result = [
  MakeList     r46, 1, r30
  // json(result)
  JSON         r46
  // expect result == [
  Const        r30, [{"movie_company": "Euro Films", "rating": 6.5, "western_violent_movie": "Violent Western"}]
  Equal        r45, r46, r30
  Expect       r45
  Return       r0
