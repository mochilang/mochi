func main (regs=63)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(story)", "person_id": 2}, {"movie_id": 3, "note": "(writer)", "person_id": 3}]
  // let company_name = [
  Const        r1, [{"id": 1, "name": "Lionsgate Pictures"}, {"id": 2, "name": "Other Studio"}]
L4:
  // let info_type = [
  Const        r2, [{"id": 10, "info": "genres"}, {"id": 20, "info": "votes"}]
L11:
  // let keyword = [
  Const        r3, [{"id": 100, "keyword": "murder"}, {"id": 200, "keyword": "comedy"}]
L10:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 1}, {"company_id": 1, "movie_id": 2}, {"company_id": 2, "movie_id": 3}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 10, "movie_id": 1}, {"info": "Thriller", "info_type_id": 10, "movie_id": 2}, {"info": "Comedy", "info_type_id": 10, "movie_id": 3}]
  // let movie_info_idx = [
  Const        r6, [{"info": 1000, "info_type_id": 20, "movie_id": 1}, {"info": 800, "info_type_id": 20, "movie_id": 2}, {"info": 500, "info_type_id": 20, "movie_id": 3}]
L19:
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 100, "movie_id": 2}, {"keyword_id": 200, "movie_id": 3}]
L23:
  // let name = [
  Const        r8, [{"gender": "m", "id": 1, "name": "Arthur"}, {"gender": "m", "id": 2, "name": "Bob"}, {"gender": "f", "id": 3, "name": "Carla"}]
  // let title = [
  Const        r9, [{"id": 1, "title": "Alpha Horror"}, {"id": 2, "title": "Beta Blood"}, {"id": 3, "title": "Gamma Comedy"}]
  // from ci in cast_info
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.name.starts_with("Lionsgate") &&
  Const        r12, "name"
  Const        r13, "starts_with"
  // it1.info == "genres" &&
  Const        r13, "info"
  // k.keyword in [
  Const        r14, "keyword"
  // n.gender == "m"
  Const        r15, "gender"
  // movie_budget: mi.info,
  Const        r16, "movie_budget"
  // movie_votes: mi_idx.info,
  Const        r17, "movie_votes"
  // writer: n.name,
  Const        r18, "writer"
L13:
  // violent_liongate_movie: t.title
  Const        r19, "violent_liongate_movie"
  Const        r20, "title"
L22:
  // from ci in cast_info
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L24:
  Move         r24, r23
L14:
  LessInt      r25, r24, r22
L18:
  JumpIfFalse  r25, L0
  Index        r22, r21, r24
  Move         r21, r22
L15:
  // join n in name on n.id == ci.person_id
  IterPrep     r22, r8
  Len          r8, r22
L20:
  Const        r26, "id"
  Const        r27, "person_id"
L21:
  Move         r28, r23
  LessInt      r29, r28, r8
  JumpIfFalse  r29, L1
  Index        r8, r22, r28
L16:
  Move         r29, r8
  Index        r22, r29, r26
  Index        r30, r21, r27
L5:
  Equal        r27, r22, r30
  JumpIfFalse  r27, L2
L17:
  // join t in title on t.id == ci.movie_id
  IterPrep     r22, r9
  Len          r30, r22
  Const        r27, "movie_id"
  Move         r9, r23
  LessInt      r31, r9, r30
L12:
  JumpIfFalse  r31, L2
  Index        r30, r22, r9
  Move         r31, r30
  Index        r22, r31, r26
  Index        r30, r21, r27
  Equal        r32, r22, r30
  JumpIfFalse  r32, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r30, r5
L9:
  Len          r32, r30
  Move         r5, r23
L8:
  LessInt      r33, r5, r32
  JumpIfFalse  r33, L3
L7:
  Index        r32, r30, r5
  Move         r33, r32
L6:
  Index        r30, r33, r27
  Index        r32, r31, r26
  Equal        r34, r30, r32
  JumpIfFalse  r34, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r30, r6
  Len          r32, r30
  Move         r6, r23
  LessInt      r35, r6, r32
  JumpIfFalse  r35, L4
  Index        r32, r30, r6
  Move         r35, r32
  Index        r30, r35, r27
  Index        r32, r31, r26
  Equal        r36, r30, r32
  JumpIfFalse  r36, L5
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r30, r7
  Len          r32, r30
  Move         r36, r23
  LessInt      r7, r36, r32
  JumpIfFalse  r7, L5
  Index        r7, r30, r36
  Move         r30, r7
  Index        r7, r30, r27
  Index        r37, r31, r26
  Equal        r38, r7, r37
  JumpIfFalse  r38, L6
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r7, r3
  Len          r37, r7
  Const        r38, "keyword_id"
  Move         r3, r23
  LessInt      r39, r3, r37
  JumpIfFalse  r39, L6
  Index        r37, r7, r3
  Move         r39, r37
  Index        r7, r39, r26
  Index        r37, r30, r38
  Equal        r30, r7, r37
  JumpIfFalse  r30, L7
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r38, r4
  Len          r7, r38
  Move         r37, r23
  LessInt      r30, r37, r7
  JumpIfFalse  r30, L7
  Index        r4, r38, r37
  Move         r7, r4
  Index        r30, r7, r27
  Index        r38, r31, r26
  Equal        r4, r30, r38
  JumpIfFalse  r4, L8
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r27, r1
  Len          r30, r27
  Const        r38, "company_id"
  Move         r4, r23
  LessInt      r1, r4, r30
  JumpIfFalse  r1, L8
  Index        r30, r27, r4
  Move         r1, r30
  Index        r27, r1, r26
  Index        r30, r7, r38
  Equal        r38, r27, r30
  JumpIfFalse  r38, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r30, r2
  Len          r38, r30
  Const        r40, "info_type_id"
  Move         r41, r23
  LessInt      r42, r41, r38
  JumpIfFalse  r42, L9
  Index        r38, r30, r41
  Move         r42, r38
  Index        r30, r42, r26
  Index        r38, r33, r40
  Equal        r43, r30, r38
  JumpIfFalse  r43, L10
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r30, r2
  Len          r38, r30
  Move         r2, r23
  LessInt      r44, r2, r38
  JumpIfFalse  r44, L10
  Index        r38, r30, r2
  Move         r44, r38
  Index        r30, r44, r26
  Index        r38, r35, r40
  Equal        r26, r30, r38
  JumpIfFalse  r26, L11
  // where ci.note in [
  Index        r40, r21, r11
  Const        r30, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r38, r40, r30
  // it1.info == "genres" &&
  Index        r26, r42, r13
  Const        r11, "genres"
  Equal        r21, r26, r11
  // it2.info == "votes" &&
  Index        r40, r44, r13
  Const        r30, "votes"
  Equal        r42, r40, r30
  // k.keyword in [
  Index        r26, r39, r14
  Const        r11, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  In           r44, r26, r11
  // mi.info in ["Horror", "Thriller"] &&
  Index        r40, r33, r13
  Const        r30, ["Horror", "Thriller"]
  In           r14, r40, r30
  // n.gender == "m"
  Index        r39, r29, r15
  Const        r26, "m"
  Equal        r11, r39, r26
  // ] &&
  Move         r40, r38
  JumpIfFalse  r40, L12
  Index        r15, r1, r12
  // cn.name.starts_with("Lionsgate") &&
  Const        r39, "Lionsgate"
  Const        r26, 0
  Const        r1, 9
  Len          r45, r15
  LessEq       r46, r1, r45
  JumpIfFalse  r46, L13
  Slice        r45, r15, r26, r1
  Equal        r46, r45, r39
  Move         r15, r46
  Jump         L14
  Const        r15, false
  // ] &&
  Move         r40, r15
  // cn.name.starts_with("Lionsgate") &&
  JumpIfFalse  r40, L12
  Move         r40, r21
  // it1.info == "genres" &&
  JumpIfFalse  r40, L12
  Move         r40, r42
  // it2.info == "votes" &&
  JumpIfFalse  r40, L12
  Move         r40, r44
  // ] &&
  JumpIfFalse  r40, L12
  Move         r40, r14
  // mi.info in ["Horror", "Thriller"] &&
  JumpIfFalse  r40, L12
  Move         r40, r11
  // where ci.note in [
  JumpIfFalse  r40, L11
  // movie_budget: mi.info,
  Const        r1, "movie_budget"
  Index        r39, r33, r13
  // movie_votes: mi_idx.info,
  Const        r45, "movie_votes"
  Index        r46, r35, r13
  // writer: n.name,
  Const        r21, "writer"
  Index        r42, r29, r12
  // violent_liongate_movie: t.title
  Const        r44, "violent_liongate_movie"
  Index        r14, r31, r20
  // movie_budget: mi.info,
  Move         r47, r1
  Move         r48, r39
  // movie_votes: mi_idx.info,
  Move         r49, r45
  Move         r50, r46
  // writer: n.name,
  Move         r51, r21
  Move         r52, r42
  // violent_liongate_movie: t.title
  Move         r53, r44
  Move         r54, r14
  // select {
  MakeMap      r11, 4, r47
  // from ci in cast_info
  Append       r40, r10, r11
  Move         r10, r40
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r15, 1
  Add          r2, r2, r15
  Jump         L15
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r41, r41, r15
  Jump         L16
  // join cn in company_name on cn.id == mc.company_id
  Add          r4, r4, r15
  Jump         L17
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r37, r37, r15
  Jump         L18
  // join k in keyword on k.id == mk.keyword_id
  Add          r3, r3, r15
  Jump         L19
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r36, r36, r15
  Jump         L11
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r6, r6, r15
  Jump         L20
  // join mi in movie_info on mi.movie_id == t.id
  Add          r5, r5, r15
  Jump         L21
L3:
  // join t in title on t.id == ci.movie_id
  Add          r9, r9, r15
  Jump         L22
L2:
  // join n in name on n.id == ci.person_id
  Add          r28, r28, r15
  Jump         L23
L1:
  // from ci in cast_info
  AddInt       r24, r24, r15
  Jump         L24
L0:
  // movie_budget: min(from r in matches select r.movie_budget),
  Const        r33, "movie_budget"
  Const        r13, []
  IterPrep     r35, r10
  Len          r12, r35
  Move         r29, r23
L26:
  LessInt      r20, r29, r12
  JumpIfFalse  r20, L25
  Index        r26, r35, r29
  Move         r31, r26
  Index        r1, r31, r16
  Append       r39, r13, r1
  Move         r13, r39
  AddInt       r29, r29, r15
  Jump         L26
L25:
  Min          r45, r13
  // movie_votes: min(from r in matches select r.movie_votes),
  Const        r46, "movie_votes"
  Const        r21, []
  IterPrep     r42, r10
  Len          r44, r42
  Move         r14, r23
L28:
  LessInt      r47, r14, r44
  JumpIfFalse  r47, L27
  Index        r48, r42, r14
  Move         r31, r48
  Index        r49, r31, r17
  Append       r50, r21, r49
  Move         r21, r50
  AddInt       r14, r14, r15
  Jump         L28
L27:
  Min          r51, r21
  // writer: min(from r in matches select r.writer),
  Const        r52, "writer"
  Const        r53, []
  IterPrep     r54, r10
  Len          r11, r54
  Move         r40, r23
L30:
  LessInt      r24, r40, r11
  JumpIfFalse  r24, L29
  Index        r25, r54, r40
  Move         r31, r25
  Index        r28, r31, r18
  Append       r8, r53, r28
  Move         r53, r8
  AddInt       r40, r40, r15
  Jump         L30
L29:
  Min          r9, r53
  // violent_liongate_movie: min(from r in matches select r.violent_liongate_movie)
  Const        r22, "violent_liongate_movie"
  Const        r5, []
  IterPrep     r34, r10
  Len          r6, r34
  Move         r32, r23
L32:
  LessInt      r36, r32, r6
  JumpIfFalse  r36, L31
  Index        r3, r34, r32
  Move         r31, r3
  Index        r37, r31, r19
  Append       r7, r5, r37
  Move         r5, r7
  AddInt       r32, r32, r15
  Jump         L32
L31:
  Min          r4, r5
  // movie_budget: min(from r in matches select r.movie_budget),
  Move         r55, r33
  Move         r56, r45
  // movie_votes: min(from r in matches select r.movie_votes),
  Move         r57, r46
  Move         r58, r51
  // writer: min(from r in matches select r.writer),
  Move         r59, r52
  Move         r60, r9
  // violent_liongate_movie: min(from r in matches select r.violent_liongate_movie)
  Move         r61, r22
  Move         r62, r4
  // {
  MakeMap      r27, 4, r55
  Move         r41, r27
  // let result = [
  MakeList     r43, 1, r41
  // json(result)
  JSON         r43
  // expect result == [
  Const        r2, [{"movie_budget": "Horror", "movie_votes": 800, "violent_liongate_movie": "Alpha Horror", "writer": "Arthur"}]
  Equal        r38, r43, r2
  Expect       r38
  Return       r0
