func main (regs=41)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(story)", "person_id": 2}, {"movie_id": 3, "note": "(writer)", "person_id": 3}]
  // let company_name = [
  Const        r1, [{"id": 1, "name": "Lionsgate Pictures"}, {"id": 2, "name": "Other Studio"}]
L15:
  // let info_type = [
  Const        r2, [{"id": 10, "info": "genres"}, {"id": 20, "info": "votes"}]
L16:
  // let keyword = [
  Const        r3, [{"id": 100, "keyword": "murder"}, {"id": 200, "keyword": "comedy"}]
L1:
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 1}, {"company_id": 1, "movie_id": 2}, {"company_id": 2, "movie_id": 3}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 10, "movie_id": 1}, {"info": "Thriller", "info_type_id": 10, "movie_id": 2}, {"info": "Comedy", "info_type_id": 10, "movie_id": 3}]
  // let movie_info_idx = [
  Const        r6, [{"info": 1000, "info_type_id": 20, "movie_id": 1}, {"info": 800, "info_type_id": 20, "movie_id": 2}, {"info": 500, "info_type_id": 20, "movie_id": 3}]
L6:
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 100, "movie_id": 2}, {"keyword_id": 200, "movie_id": 3}]
L8:
  // let name = [
  Const        r8, [{"gender": "m", "id": 1, "name": "Arthur"}, {"gender": "m", "id": 2, "name": "Bob"}, {"gender": "f", "id": 3, "name": "Carla"}]
L13:
  // let title = [
  Const        r9, [{"id": 1, "title": "Alpha Horror"}, {"id": 2, "title": "Beta Blood"}, {"id": 3, "title": "Gamma Comedy"}]
  // from ci in cast_info
  Const        r10, []
L14:
  // where ci.note in [
  Const        r11, "note"
  // cn.name.starts_with("Lionsgate") &&
  Const        r12, "name"
L11:
  // it1.info == "genres" &&
  Const        r13, "info"
  // k.keyword in [
  Const        r14, "keyword"
  // n.gender == "m"
  Const        r15, "gender"
L3:
  // movie_budget: mi.info,
  Const        r16, "movie_budget"
L4:
  // movie_votes: mi_idx.info,
  Const        r17, "movie_votes"
  // writer: n.name,
  Const        r18, "writer"
  // violent_liongate_movie: t.title
  Const        r19, "violent_liongate_movie"
  Const        r20, "title"
  // from ci in cast_info
  IterPrep     r21, r0
  Len          r22, r21
L19:
  Const        r23, 0
L7:
  Move         r24, r23
  LessInt      r25, r24, r22
L10:
  JumpIfFalse  r25, L0
L2:
  Index        r25, r21, r24
L12:
  // join n in name on n.id == ci.person_id
  IterPrep     r21, r8
  Len          r8, r21
L18:
  Const        r22, "id"
L5:
  Const        r26, "person_id"
L17:
  Move         r27, r23
  LessInt      r28, r27, r8
  JumpIfFalse  r28, L1
  Index        r28, r21, r27
L0:
  Index        r27, r28, r22
  Index        r21, r25, r26
  Equal        r26, r27, r21
  JumpIfFalse  r26, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r26, r9
  Len          r9, r26
  Const        r21, "movie_id"
  Move         r27, r23
  LessInt      r8, r27, r9
  JumpIfFalse  r8, L2
  Index        r9, r26, r27
  Index        r26, r9, r22
  Index        r29, r25, r21
  Equal        r30, r26, r29
  JumpIfFalse  r30, L1
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r30, r5
  Len          r5, r30
  Move         r29, r23
  LessInt      r26, r29, r5
  JumpIfFalse  r26, L1
  Index        r26, r30, r29
  Index        r30, r26, r21
  Index        r5, r9, r22
  Equal        r31, r30, r5
  JumpIfFalse  r31, L1
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r31, r6
  Len          r6, r31
  Move         r5, r23
  LessInt      r30, r5, r6
  JumpIfFalse  r30, L1
  Index        r30, r31, r5
  Index        r31, r30, r21
  Index        r6, r9, r22
  Equal        r32, r31, r6
  JumpIfFalse  r32, L3
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r32, r7
  Len          r7, r32
  Move         r6, r23
  LessInt      r31, r6, r7
  JumpIfFalse  r31, L3
  Index        r31, r32, r6
  Index        r32, r31, r21
  Index        r7, r9, r22
  Equal        r33, r32, r7
  JumpIfFalse  r33, L4
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r33, r3
  Len          r3, r33
  Const        r7, "keyword_id"
  Move         r34, r23
  LessInt      r35, r34, r3
  JumpIfFalse  r35, L4
  Index        r35, r33, r34
  Index        r33, r35, r22
  Index        r3, r31, r7
  Equal        r7, r33, r3
  JumpIfFalse  r7, L5
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r7, r4
  Len          r4, r7
  Move         r33, r23
  LessInt      r31, r33, r4
  JumpIfFalse  r31, L5
  Index        r31, r7, r33
  Index        r7, r31, r21
  Index        r21, r9, r22
  Equal        r4, r7, r21
  JumpIfFalse  r4, L6
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r21, r1
  Len          r1, r21
  Const        r7, "company_id"
  Move         r36, r23
  LessInt      r37, r36, r1
  JumpIfFalse  r37, L6
  Index        r37, r21, r36
  Index        r21, r37, r22
  Index        r1, r31, r7
  Equal        r7, r21, r1
  JumpIfFalse  r7, L6
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r7, r2
  Len          r1, r7
  Const        r21, "info_type_id"
  Move         r31, r23
  LessInt      r38, r31, r1
  JumpIfFalse  r38, L6
  Index        r38, r7, r31
  Index        r1, r38, r22
  Index        r39, r26, r21
  Equal        r40, r1, r39
  JumpIfFalse  r40, L7
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r40, r2
  Len          r2, r40
  Move         r39, r23
  LessInt      r1, r39, r2
  JumpIfFalse  r1, L7
  Index        r1, r40, r39
  Index        r40, r1, r22
  Index        r22, r30, r21
  Equal        r21, r40, r22
  JumpIfFalse  r21, L8
  // where ci.note in [
  Index        r21, r25, r11
  Const        r25, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r11, r21, r25
  // it1.info == "genres" &&
  Index        r25, r38, r13
  Const        r38, "genres"
  Equal        r21, r25, r38
  // it2.info == "votes" &&
  Index        r38, r1, r13
  Const        r1, "votes"
  Equal        r25, r38, r1
  // k.keyword in [
  Index        r1, r35, r14
  Const        r35, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  In           r14, r1, r35
  // mi.info in ["Horror", "Thriller"] &&
  Index        r35, r26, r13
  Const        r1, ["Horror", "Thriller"]
  In           r38, r35, r1
  // n.gender == "m"
  Index        r1, r28, r15
  Const        r15, "m"
  Equal        r35, r1, r15
  // ] &&
  Move         r15, r11
  JumpIfFalse  r15, L9
  Index        r15, r37, r12
  // cn.name.starts_with("Lionsgate") &&
  Const        r37, 9
  Len          r1, r15
  LessEq       r15, r37, r1
  JumpIfFalse  r15, L10
  Jump         L9
  // it1.info == "genres" &&
  Move         r15, r21
  JumpIfFalse  r15, L11
  // it2.info == "votes" &&
  Move         r15, r25
  JumpIfFalse  r15, L12
  // ] &&
  Move         r15, r14
  JumpIfFalse  r15, L13
  // mi.info in ["Horror", "Thriller"] &&
  Move         r15, r38
  JumpIfFalse  r15, L10
  Move         r15, r35
  // where ci.note in [
  JumpIfFalse  r15, L8
  // movie_budget: mi.info,
  Move         r15, r16
  Index        r35, r26, r13
  // movie_votes: mi_idx.info,
  Move         r26, r17
  Index        r38, r30, r13
  // writer: n.name,
  Move         r13, r18
  Index        r14, r28, r12
  // violent_liongate_movie: t.title
  Move         r28, r19
  Index        r12, r9, r20
  // movie_budget: mi.info,
  Move         r9, r15
  Move         r15, r35
  // movie_votes: mi_idx.info,
  Move         r35, r26
  Move         r26, r38
  // writer: n.name,
  Move         r38, r13
  Move         r13, r14
  // violent_liongate_movie: t.title
  Move         r14, r28
  Move         r28, r12
  // select {
  MakeMap      r12, 4, r9
  // from ci in cast_info
  Append       r10, r10, r12
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r12, 1
  Add          r39, r39, r12
  Jump         L14
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r31, r31, r12
  Jump         L15
  // join cn in company_name on cn.id == mc.company_id
  Add          r36, r36, r12
  Jump         L6
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r33, r33, r12
  Jump         L1
  // join k in keyword on k.id == mk.keyword_id
  Add          r34, r34, r12
  Jump         L16
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r6, r6, r12
  Jump         L17
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r5, r5, r12
  Jump         L18
  // join mi in movie_info on mi.movie_id == t.id
  Add          r29, r29, r12
  Jump         L14
  // join t in title on t.id == ci.movie_id
  Add          r27, r27, r12
  Jump         L8
  // from ci in cast_info
  AddInt       r24, r24, r12
  Jump         L19
  // movie_budget: min(from r in matches select r.movie_budget),
  Move         r11, r16
  Const        r8, []
  IterPrep     r27, r10
  Len          r24, r27
  Move         r39, r23
  LessInt      r2, r39, r24
  JumpIfFalse  r2, L8
  Index        r2, r27, r39
  Index        r27, r2, r16
  Append       r8, r8, r27
  AddInt       r39, r39, r12
  Jump         L2
  Min          r27, r8
  // movie_votes: min(from r in matches select r.movie_votes),
  Move         r8, r17
  Const        r39, []
  IterPrep     r16, r10
  Len          r24, r16
  Move         r31, r23
  LessInt      r7, r31, r24
  JumpIfFalse  r7, L20
  Index        r2, r16, r31
  Index        r7, r2, r17
  Append       r39, r39, r7
  AddInt       r31, r31, r12
  Jump         L6
L20:
  Min          r31, r39
  // writer: min(from r in matches select r.writer),
  Move         r39, r18
  Const        r17, []
  IterPrep     r24, r10
  Len          r16, r24
  Move         r36, r23
L22:
  LessInt      r4, r36, r16
  JumpIfFalse  r4, L21
  Index        r2, r24, r36
  Index        r4, r2, r18
  Append       r17, r17, r4
  AddInt       r36, r36, r12
  Jump         L22
L21:
  Min          r4, r17
  // violent_liongate_movie: min(from r in matches select r.violent_liongate_movie)
  Move         r17, r19
  Const        r36, []
  IterPrep     r18, r10
  Len          r10, r18
  Move         r16, r23
L24:
  LessInt      r23, r16, r10
  JumpIfFalse  r23, L23
  Index        r2, r18, r16
  Index        r23, r2, r19
  Append       r36, r36, r23
  AddInt       r16, r16, r12
  Jump         L24
L23:
  Min          r23, r36
  // movie_budget: min(from r in matches select r.movie_budget),
  Move         r36, r11
  Move         r11, r27
  // movie_votes: min(from r in matches select r.movie_votes),
  Move         r27, r8
  Move         r8, r31
  // writer: min(from r in matches select r.writer),
  Move         r31, r39
  Move         r39, r4
  // violent_liongate_movie: min(from r in matches select r.violent_liongate_movie)
  Move         r4, r17
  Move         r17, r23
  // {
  MakeMap      r7, 4, r36
  // let result = [
  MakeList     r17, 1, r7
  // json(result)
  JSON         r17
  // expect result == [
  Const        r7, [{"movie_budget": "Horror", "movie_votes": 800, "violent_liongate_movie": "Alpha Horror", "writer": "Arthur"}]
  Equal        r4, r17, r7
  Expect       r4
  Return       r0
