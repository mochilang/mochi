func main (regs=223)
  // let cast_info = [
  Const        r0, [{"movie_id": 1, "note": "(writer)", "person_id": 1}, {"movie_id": 2, "note": "(story)", "person_id": 2}, {"movie_id": 3, "note": "(writer)", "person_id": 3}]
  // let company_name = [
  Const        r1, [{"id": 1, "name": "Lionsgate Pictures"}, {"id": 2, "name": "Other Studio"}]
  // let info_type = [
  Const        r2, [{"id": 10, "info": "genres"}, {"id": 20, "info": "votes"}]
  // let keyword = [
  Const        r3, [{"id": 100, "keyword": "murder"}, {"id": 200, "keyword": "comedy"}]
  // let movie_companies = [
  Const        r4, [{"company_id": 1, "movie_id": 1}, {"company_id": 1, "movie_id": 2}, {"company_id": 2, "movie_id": 3}]
  // let movie_info = [
  Const        r5, [{"info": "Horror", "info_type_id": 10, "movie_id": 1}, {"info": "Thriller", "info_type_id": 10, "movie_id": 2}, {"info": "Comedy", "info_type_id": 10, "movie_id": 3}]
  // let movie_info_idx = [
  Const        r6, [{"info": 1000, "info_type_id": 20, "movie_id": 1}, {"info": 800, "info_type_id": 20, "movie_id": 2}, {"info": 500, "info_type_id": 20, "movie_id": 3}]
  // let movie_keyword = [
  Const        r7, [{"keyword_id": 100, "movie_id": 1}, {"keyword_id": 100, "movie_id": 2}, {"keyword_id": 200, "movie_id": 3}]
  // let name = [
  Const        r8, [{"gender": "m", "id": 1, "name": "Arthur"}, {"gender": "m", "id": 2, "name": "Bob"}, {"gender": "f", "id": 3, "name": "Carla"}]
  // let title = [
  Const        r9, [{"id": 1, "title": "Alpha Horror"}, {"id": 2, "title": "Beta Blood"}, {"id": 3, "title": "Gamma Comedy"}]
  // from ci in cast_info
  Const        r10, []
  // where ci.note in [
  Const        r11, "note"
  // cn.name.starts_with("Lionsgate") &&
  Const        r12, "name"
  // it1.info == "genres" &&
  Const        r14, "info"
  // k.keyword in [
  Const        r15, "keyword"
  // n.gender == "m"
  Const        r16, "gender"
  // movie_budget: mi.info,
  Const        r17, "movie_budget"
  // movie_votes: mi_idx.info,
  Const        r18, "movie_votes"
  // writer: n.name,
  Const        r19, "writer"
  // violent_liongate_movie: t.title
  Const        r20, "violent_liongate_movie"
  Const        r21, "title"
  // from ci in cast_info
  IterPrep     r22, r0
  Len          r23, r22
  Const        r25, 0
  Move         r24, r25
L28:
  LessInt      r26, r24, r23
  JumpIfFalse  r26, L0
  Index        r28, r22, r24
  // join n in name on n.id == ci.person_id
  IterPrep     r29, r8
  Len          r30, r29
  Const        r31, "id"
  Const        r32, "person_id"
  Move         r33, r25
L27:
  LessInt      r34, r33, r30
  JumpIfFalse  r34, L1
  Index        r36, r29, r33
  Index        r37, r36, r31
  Index        r38, r28, r32
  Equal        r39, r37, r38
  JumpIfFalse  r39, L2
  // join t in title on t.id == ci.movie_id
  IterPrep     r40, r9
  Len          r41, r40
  Const        r42, "movie_id"
  Move         r43, r25
L26:
  LessInt      r44, r43, r41
  JumpIfFalse  r44, L2
  Index        r46, r40, r43
  Index        r47, r46, r31
  Index        r48, r28, r42
  Equal        r49, r47, r48
  JumpIfFalse  r49, L3
  // join mi in movie_info on mi.movie_id == t.id
  IterPrep     r50, r5
  Len          r51, r50
  Move         r52, r25
L25:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Index        r56, r55, r42
  Index        r57, r46, r31
  Equal        r58, r56, r57
  JumpIfFalse  r58, L4
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  IterPrep     r59, r6
  Len          r60, r59
  Move         r61, r25
L24:
  LessInt      r62, r61, r60
  JumpIfFalse  r62, L4
  Index        r64, r59, r61
  Index        r65, r64, r42
  Index        r66, r46, r31
  Equal        r67, r65, r66
  JumpIfFalse  r67, L5
  // join mk in movie_keyword on mk.movie_id == t.id
  IterPrep     r68, r7
  Len          r69, r68
  Move         r70, r25
L23:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L5
  Index        r73, r68, r70
  Index        r74, r73, r42
  Index        r75, r46, r31
  Equal        r76, r74, r75
  JumpIfFalse  r76, L6
  // join k in keyword on k.id == mk.keyword_id
  IterPrep     r77, r3
  Len          r78, r77
  Const        r79, "keyword_id"
  Move         r80, r25
L22:
  LessInt      r81, r80, r78
  JumpIfFalse  r81, L6
  Index        r83, r77, r80
  Index        r84, r83, r31
  Index        r85, r73, r79
  Equal        r86, r84, r85
  JumpIfFalse  r86, L7
  // join mc in movie_companies on mc.movie_id == t.id
  IterPrep     r87, r4
  Len          r88, r87
  Move         r89, r25
L21:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L7
  Index        r92, r87, r89
  Index        r93, r92, r42
  Index        r94, r46, r31
  Equal        r95, r93, r94
  JumpIfFalse  r95, L8
  // join cn in company_name on cn.id == mc.company_id
  IterPrep     r96, r1
  Len          r97, r96
  Const        r98, "company_id"
  Move         r99, r25
L20:
  LessInt      r100, r99, r97
  JumpIfFalse  r100, L8
  Index        r102, r96, r99
  Index        r103, r102, r31
  Index        r104, r92, r98
  Equal        r105, r103, r104
  JumpIfFalse  r105, L9
  // join it1 in info_type on it1.id == mi.info_type_id
  IterPrep     r106, r2
  Len          r107, r106
  Const        r108, "info_type_id"
  Move         r109, r25
L19:
  LessInt      r110, r109, r107
  JumpIfFalse  r110, L9
  Index        r112, r106, r109
  Index        r113, r112, r31
  Index        r114, r55, r108
  Equal        r115, r113, r114
  JumpIfFalse  r115, L10
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  IterPrep     r116, r2
  Len          r117, r116
  Move         r118, r25
L18:
  LessInt      r119, r118, r117
  JumpIfFalse  r119, L10
  Index        r121, r116, r118
  Index        r122, r121, r31
  Index        r123, r64, r108
  Equal        r124, r122, r123
  JumpIfFalse  r124, L11
  // where ci.note in [
  Index        r125, r28, r11
  Const        r126, ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
  In           r127, r125, r126
  // it1.info == "genres" &&
  Index        r128, r112, r14
  Const        r129, "genres"
  Equal        r130, r128, r129
  // it2.info == "votes" &&
  Index        r131, r121, r14
  Const        r132, "votes"
  Equal        r133, r131, r132
  // k.keyword in [
  Index        r134, r83, r15
  Const        r135, ["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"]
  In           r136, r134, r135
  // mi.info in ["Horror", "Thriller"] &&
  Index        r137, r55, r14
  Const        r138, ["Horror", "Thriller"]
  In           r139, r137, r138
  // n.gender == "m"
  Index        r140, r36, r16
  Const        r141, "m"
  Equal        r142, r140, r141
  // ] &&
  Move         r143, r127
  JumpIfFalse  r143, L12
  Index        r144, r102, r12
  // cn.name.starts_with("Lionsgate") &&
  Const        r147, 9
  Len          r148, r144
  LessEq       r149, r147, r148
  JumpIfFalse  r149, L13
  Jump         L12
L13:
  // it1.info == "genres" &&
  Move         r154, r130
  JumpIfFalse  r154, L14
L14:
  // it2.info == "votes" &&
  Move         r155, r133
  JumpIfFalse  r155, L15
L15:
  // ] &&
  Move         r156, r136
  JumpIfFalse  r156, L16
L16:
  // mi.info in ["Horror", "Thriller"] &&
  Move         r157, r139
  JumpIfFalse  r157, L17
  Move         r157, r142
L17:
  // where ci.note in [
  JumpIfFalse  r157, L11
  // movie_budget: mi.info,
  Const        r158, "movie_budget"
  Index        r159, r55, r14
  // movie_votes: mi_idx.info,
  Const        r160, "movie_votes"
  Index        r161, r64, r14
  // writer: n.name,
  Const        r162, "writer"
  Index        r163, r36, r12
  // violent_liongate_movie: t.title
  Const        r164, "violent_liongate_movie"
  Index        r165, r46, r21
  // select {
  MakeMap      r170, 4, r158
  // from ci in cast_info
  Append       r10, r10, r170
L11:
  // join it2 in info_type on it2.id == mi_idx.info_type_id
  Const        r172, 1
  Add          r118, r118, r172
  Jump         L18
L10:
  // join it1 in info_type on it1.id == mi.info_type_id
  Add          r109, r109, r172
  Jump         L19
L9:
  // join cn in company_name on cn.id == mc.company_id
  Add          r99, r99, r172
  Jump         L20
L8:
  // join mc in movie_companies on mc.movie_id == t.id
  Add          r89, r89, r172
  Jump         L21
L7:
  // join k in keyword on k.id == mk.keyword_id
  Add          r80, r80, r172
  Jump         L22
L6:
  // join mk in movie_keyword on mk.movie_id == t.id
  Add          r70, r70, r172
  Jump         L23
L5:
  // join mi_idx in movie_info_idx on mi_idx.movie_id == t.id
  Add          r61, r61, r172
  Jump         L24
L4:
  // join mi in movie_info on mi.movie_id == t.id
  Add          r52, r52, r172
  Jump         L25
L3:
  // join t in title on t.id == ci.movie_id
  Add          r43, r43, r172
  Jump         L26
L2:
  // join n in name on n.id == ci.person_id
  Jump         L27
L1:
  // from ci in cast_info
  AddInt       r24, r24, r172
  Jump         L28
L0:
  // movie_budget: min(from r in matches select r.movie_budget),
  Const        r173, "movie_budget"
  Const        r174, []
  IterPrep     r175, r10
  Len          r176, r175
  Move         r177, r25
L30:
  LessInt      r178, r177, r176
  JumpIfFalse  r178, L29
  Index        r179, r175, r177
  Move         r180, r179
  Index        r181, r180, r17
  Append       r174, r174, r181
  AddInt       r177, r177, r172
  Jump         L30
L29:
  // movie_votes: min(from r in matches select r.movie_votes),
  Const        r185, []
  IterPrep     r186, r10
  Len          r187, r186
  Move         r188, r25
L32:
  LessInt      r189, r188, r187
  JumpIfFalse  r189, L31
  Index        r180, r186, r188
  Index        r191, r180, r18
  Append       r185, r185, r191
  AddInt       r188, r188, r172
  Jump         L32
L31:
  // writer: min(from r in matches select r.writer),
  Const        r195, []
  IterPrep     r196, r10
  Len          r197, r196
  Move         r198, r25
L34:
  LessInt      r199, r198, r197
  JumpIfFalse  r199, L33
  Index        r180, r196, r198
  Index        r201, r180, r19
  Append       r195, r195, r201
  AddInt       r198, r198, r172
  Jump         L34
L33:
  // violent_liongate_movie: min(from r in matches select r.violent_liongate_movie)
  Const        r205, []
  IterPrep     r206, r10
  Len          r207, r206
  Move         r208, r25
L36:
  LessInt      r209, r208, r207
  JumpIfFalse  r209, L35
  Index        r180, r206, r208
  Index        r211, r180, r20
  Append       r205, r205, r211
  AddInt       r208, r208, r172
  Jump         L36
L35:
  // {
  MakeMap      r219, 4, r173
  // let result = [
  MakeList     r220, 1, r219
  // json(result)
  JSON         r220
  // expect result == [
  Const        r221, [{"movie_budget": "Horror", "movie_votes": 800, "violent_liongate_movie": "Alpha Horror", "writer": "Arthur"}]
  Equal        r222, r220, r221
  Expect       r222
  Return       r0
