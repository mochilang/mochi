func main (regs=398)
  // let aka_name = [
  Const        r0, [{"person_id": 1}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Hero Character"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 1}]
  // let info_type = [
  Const        r4, [{"id": 1, "info": "release dates"}]
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "hero"}]
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "movie_id": 1}]
  // let movie_info = [
  Const        r7, [{"info": "Japan: Feb 2015", "info_type_id": 1, "movie_id": 1}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}]
  // let name = [
  Const        r9, [{"gender": "f", "id": 1, "name": "Ann Actress"}]
  // let role_type = [
  Const        r10, [{"id": 1, "role": "actress"}]
  // let title = [
  Const        r11, [{"id": 1, "production_year": 2015, "title": "Heroic Adventure"}]
  // from an in aka_name
  Const        r12, []
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r13, "note"
  // cn.country_code == "[us]" &&
  Const        r14, "country_code"
  // it.info == "release dates" &&
  Const        r15, "info"
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r16, "keyword"
  // mi.info != null &&
  Const        r17, "info"
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r18, "info"
  Const        r19, "starts_with"
  Const        r20, "info"
  Const        r21, "contains"
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r22, "info"
  Const        r23, "starts_with"
  Const        r24, "info"
  Const        r25, "contains"
  // n.gender == "f" &&
  Const        r26, "gender"
  // n.name.contains("An") &&
  Const        r27, "name"
  Const        r28, "contains"
  // rt.role == "actress" &&
  Const        r29, "role"
  // t.production_year > 2010 &&
  Const        r30, "production_year"
  // t.id == mi.movie_id &&
  Const        r31, "id"
  Const        r32, "movie_id"
  // t.id == mc.movie_id &&
  Const        r33, "id"
  Const        r34, "movie_id"
  // t.id == ci.movie_id &&
  Const        r35, "id"
  Const        r36, "movie_id"
  // t.id == mk.movie_id &&
  Const        r37, "id"
  Const        r38, "movie_id"
  // mc.movie_id == ci.movie_id &&
  Const        r39, "movie_id"
  Const        r40, "movie_id"
  // mc.movie_id == mi.movie_id &&
  Const        r41, "movie_id"
  Const        r42, "movie_id"
  // mc.movie_id == mk.movie_id &&
  Const        r43, "movie_id"
  Const        r44, "movie_id"
  // mi.movie_id == ci.movie_id &&
  Const        r45, "movie_id"
  Const        r46, "movie_id"
  // mi.movie_id == mk.movie_id &&
  Const        r47, "movie_id"
  Const        r48, "movie_id"
  // ci.movie_id == mk.movie_id &&
  Const        r49, "movie_id"
  Const        r50, "movie_id"
  // cn.id == mc.company_id &&
  Const        r51, "id"
  Const        r52, "company_id"
  // it.id == mi.info_type_id &&
  Const        r53, "id"
  Const        r54, "info_type_id"
  // n.id == ci.person_id &&
  Const        r55, "id"
  Const        r56, "person_id"
  // rt.id == ci.role_id &&
  Const        r57, "id"
  Const        r58, "role_id"
  // n.id == an.person_id &&
  Const        r59, "id"
  Const        r60, "person_id"
  // ci.person_id == an.person_id &&
  Const        r61, "person_id"
  Const        r62, "person_id"
  // chn.id == ci.person_role_id &&
  Const        r63, "id"
  Const        r64, "person_role_id"
  // k.id == mk.keyword_id
  Const        r65, "id"
  Const        r66, "keyword_id"
  // voiced_char_name: chn.name,
  Const        r67, "voiced_char_name"
  Const        r68, "name"
  // voicing_actress_name: n.name,
  Const        r69, "voicing_actress_name"
  Const        r70, "name"
  // voiced_action_movie_jap_eng: t.title
  Const        r71, "voiced_action_movie_jap_eng"
  Const        r72, "title"
  // from an in aka_name
  IterPrep     r73, r0
  Len          r74, r73
  Const        r76, 0
  Move         r75, r76
L32:
  LessInt      r77, r75, r74
  JumpIfFalse  r77, L0
  Index        r78, r73, r75
  Move         r79, r78
  // from chn in char_name
  IterPrep     r80, r1
  Len          r81, r80
  Const        r83, 0
  Move         r82, r83
L31:
  LessInt      r84, r82, r81
  JumpIfFalse  r84, L1
  Index        r85, r80, r82
  Move         r86, r85
  // from ci in cast_info
  IterPrep     r87, r2
  Len          r88, r87
  Const        r90, 0
  Move         r89, r90
L30:
  LessInt      r91, r89, r88
  JumpIfFalse  r91, L2
  Index        r92, r87, r89
  Move         r93, r92
  // from cn in company_name
  IterPrep     r94, r3
  Len          r95, r94
  Const        r97, 0
  Move         r96, r97
L29:
  LessInt      r98, r96, r95
  JumpIfFalse  r98, L3
  Index        r99, r94, r96
  Move         r100, r99
  // from it in info_type
  IterPrep     r101, r4
  Len          r102, r101
  Const        r104, 0
  Move         r103, r104
L28:
  LessInt      r105, r103, r102
  JumpIfFalse  r105, L4
  Index        r106, r101, r103
  Move         r107, r106
  // from k in keyword
  IterPrep     r108, r5
  Len          r109, r108
  Const        r111, 0
  Move         r110, r111
L27:
  LessInt      r112, r110, r109
  JumpIfFalse  r112, L5
  Index        r113, r108, r110
  Move         r114, r113
  // from mc in movie_companies
  IterPrep     r115, r6
  Len          r116, r115
  Const        r118, 0
  Move         r117, r118
L26:
  LessInt      r119, r117, r116
  JumpIfFalse  r119, L6
  Index        r120, r115, r117
  Move         r121, r120
  // from mi in movie_info
  IterPrep     r122, r7
  Len          r123, r122
  Const        r125, 0
  Move         r124, r125
L25:
  LessInt      r126, r124, r123
  JumpIfFalse  r126, L7
  Index        r127, r122, r124
  Move         r128, r127
  // from mk in movie_keyword
  IterPrep     r129, r8
  Len          r130, r129
  Const        r132, 0
  Move         r131, r132
L24:
  LessInt      r133, r131, r130
  JumpIfFalse  r133, L8
  Index        r134, r129, r131
  Move         r135, r134
  // from n in name
  IterPrep     r136, r9
  Len          r137, r136
  Const        r139, 0
  Move         r138, r139
L23:
  LessInt      r140, r138, r137
  JumpIfFalse  r140, L9
  Index        r141, r136, r138
  Move         r142, r141
  // from rt in role_type
  IterPrep     r143, r10
  Len          r144, r143
  Const        r146, 0
  Move         r145, r146
L22:
  LessInt      r147, r145, r144
  JumpIfFalse  r147, L10
  Index        r148, r143, r145
  Move         r149, r148
  // from t in title
  IterPrep     r150, r11
  Len          r151, r150
  Const        r153, 0
  Move         r152, r153
L21:
  LessInt      r154, r152, r151
  JumpIfFalse  r154, L11
  Index        r155, r150, r152
  Move         r156, r155
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r157, "note"
  Index        r158, r93, r157
  // t.production_year > 2010 &&
  Const        r159, "production_year"
  Index        r160, r156, r159
  Const        r161, 2010
  Less         r162, r161, r160
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r163, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r164, r158, r163
  // cn.country_code == "[us]" &&
  Const        r165, "country_code"
  Index        r166, r100, r165
  Const        r167, "[us]"
  Equal        r168, r166, r167
  // it.info == "release dates" &&
  Const        r169, "info"
  Index        r170, r107, r169
  Const        r171, "release dates"
  Equal        r172, r170, r171
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r173, "keyword"
  Index        r174, r114, r173
  Const        r175, ["hero", "martial-arts", "hand-to-hand-combat"]
  In           r176, r174, r175
  // mi.info != null &&
  Const        r177, "info"
  Index        r178, r128, r177
  Const        r179, nil
  NotEqual     r180, r178, r179
  // n.gender == "f" &&
  Const        r181, "gender"
  Index        r182, r142, r181
  Const        r183, "f"
  Equal        r184, r182, r183
  // rt.role == "actress" &&
  Const        r185, "role"
  Index        r186, r149, r185
  Const        r187, "actress"
  Equal        r188, r186, r187
  // t.id == mi.movie_id &&
  Const        r189, "id"
  Index        r190, r156, r189
  Const        r191, "movie_id"
  Index        r192, r128, r191
  Equal        r193, r190, r192
  // t.id == mc.movie_id &&
  Const        r194, "id"
  Index        r195, r156, r194
  Const        r196, "movie_id"
  Index        r197, r121, r196
  Equal        r198, r195, r197
  // t.id == ci.movie_id &&
  Const        r199, "id"
  Index        r200, r156, r199
  Const        r201, "movie_id"
  Index        r202, r93, r201
  Equal        r203, r200, r202
  // t.id == mk.movie_id &&
  Const        r204, "id"
  Index        r205, r156, r204
  Const        r206, "movie_id"
  Index        r207, r135, r206
  Equal        r208, r205, r207
  // mc.movie_id == ci.movie_id &&
  Const        r209, "movie_id"
  Index        r210, r121, r209
  Const        r211, "movie_id"
  Index        r212, r93, r211
  Equal        r213, r210, r212
  // mc.movie_id == mi.movie_id &&
  Const        r214, "movie_id"
  Index        r215, r121, r214
  Const        r216, "movie_id"
  Index        r217, r128, r216
  Equal        r218, r215, r217
  // mc.movie_id == mk.movie_id &&
  Const        r219, "movie_id"
  Index        r220, r121, r219
  Const        r221, "movie_id"
  Index        r222, r135, r221
  Equal        r223, r220, r222
  // mi.movie_id == ci.movie_id &&
  Const        r224, "movie_id"
  Index        r225, r128, r224
  Const        r226, "movie_id"
  Index        r227, r93, r226
  Equal        r228, r225, r227
  // mi.movie_id == mk.movie_id &&
  Const        r229, "movie_id"
  Index        r230, r128, r229
  Const        r231, "movie_id"
  Index        r232, r135, r231
  Equal        r233, r230, r232
  // ci.movie_id == mk.movie_id &&
  Const        r234, "movie_id"
  Index        r235, r93, r234
  Const        r236, "movie_id"
  Index        r237, r135, r236
  Equal        r238, r235, r237
  // cn.id == mc.company_id &&
  Const        r239, "id"
  Index        r240, r100, r239
  Const        r241, "company_id"
  Index        r242, r121, r241
  Equal        r243, r240, r242
  // it.id == mi.info_type_id &&
  Const        r244, "id"
  Index        r245, r107, r244
  Const        r246, "info_type_id"
  Index        r247, r128, r246
  Equal        r248, r245, r247
  // n.id == ci.person_id &&
  Const        r249, "id"
  Index        r250, r142, r249
  Const        r251, "person_id"
  Index        r252, r93, r251
  Equal        r253, r250, r252
  // rt.id == ci.role_id &&
  Const        r254, "id"
  Index        r255, r149, r254
  Const        r256, "role_id"
  Index        r257, r93, r256
  Equal        r258, r255, r257
  // n.id == an.person_id &&
  Const        r259, "id"
  Index        r260, r142, r259
  Const        r261, "person_id"
  Index        r262, r79, r261
  Equal        r263, r260, r262
  // ci.person_id == an.person_id &&
  Const        r264, "person_id"
  Index        r265, r93, r264
  Const        r266, "person_id"
  Index        r267, r79, r266
  Equal        r268, r265, r267
  // chn.id == ci.person_role_id &&
  Const        r269, "id"
  Index        r270, r86, r269
  Const        r271, "person_role_id"
  Index        r272, r93, r271
  Equal        r273, r270, r272
  // k.id == mk.keyword_id
  Const        r274, "id"
  Index        r275, r114, r274
  Const        r276, "keyword_id"
  Index        r277, r135, r276
  Equal        r278, r275, r277
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Move         r279, r164
  JumpIfFalse  r279, L12
  Move         r279, r168
  // cn.country_code == "[us]" &&
  JumpIfFalse  r279, L12
  Move         r279, r172
  // it.info == "release dates" &&
  JumpIfFalse  r279, L12
  Move         r279, r176
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  JumpIfFalse  r279, L12
  Move         r279, r180
  // mi.info != null &&
  JumpIfFalse  r279, L12
  Const        r280, "info"
  Index        r281, r128, r280
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r282, "Japan:"
  Const        r283, 0
  Const        r284, 6
  Len          r285, r281
  LessEq       r286, r284, r285
  JumpIfFalse  r286, L13
  Slice        r288, r281, r283, r284
  Equal        r289, r288, r282
  Move         r287, r289
  Jump         L14
L13:
  Const        r287, false
L14:
  Move         r290, r287
  JumpIfFalse  r290, L15
  Const        r291, "info"
  Index        r292, r128, r291
  Const        r293, "201"
  In           r294, r293, r292
  Move         r290, r294
L15:
  Const        r295, "info"
  Index        r296, r128, r295
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r297, "USA:"
  Const        r298, 0
  Const        r299, 4
  Len          r300, r296
  LessEq       r301, r299, r300
  JumpIfFalse  r301, L16
  Slice        r303, r296, r298, r299
  Equal        r304, r303, r297
  Move         r302, r304
  Jump         L17
L16:
  Const        r302, false
L17:
  Move         r305, r302
  JumpIfFalse  r305, L18
  Const        r306, "info"
  Index        r307, r128, r306
  Const        r308, "201"
  In           r309, r308, r307
  Move         r305, r309
L18:
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Move         r310, r290
  JumpIfTrue   r310, L19
  Move         r310, r305
L19:
  // mi.info != null &&
  Move         r279, r310
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  JumpIfFalse  r279, L12
  Move         r279, r184
  // n.gender == "f" &&
  JumpIfFalse  r279, L12
  Const        r311, "name"
  Index        r312, r142, r311
  // n.name.contains("An") &&
  Const        r313, "An"
  In           r314, r313, r312
  // n.gender == "f" &&
  Move         r279, r314
  // n.name.contains("An") &&
  JumpIfFalse  r279, L12
  Move         r279, r188
  // rt.role == "actress" &&
  JumpIfFalse  r279, L12
  Move         r279, r162
  // t.production_year > 2010 &&
  JumpIfFalse  r279, L12
  Move         r279, r193
  // t.id == mi.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r198
  // t.id == mc.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r203
  // t.id == ci.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r208
  // t.id == mk.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r213
  // mc.movie_id == ci.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r218
  // mc.movie_id == mi.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r223
  // mc.movie_id == mk.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r228
  // mi.movie_id == ci.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r233
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r238
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r279, L12
  Move         r279, r243
  // cn.id == mc.company_id &&
  JumpIfFalse  r279, L12
  Move         r279, r248
  // it.id == mi.info_type_id &&
  JumpIfFalse  r279, L12
  Move         r279, r253
  // n.id == ci.person_id &&
  JumpIfFalse  r279, L12
  Move         r279, r258
  // rt.id == ci.role_id &&
  JumpIfFalse  r279, L12
  Move         r279, r263
  // n.id == an.person_id &&
  JumpIfFalse  r279, L12
  Move         r279, r268
  // ci.person_id == an.person_id &&
  JumpIfFalse  r279, L12
  Move         r279, r273
  // chn.id == ci.person_role_id &&
  JumpIfFalse  r279, L12
  Move         r279, r278
L12:
  // where (
  JumpIfFalse  r279, L20
  // voiced_char_name: chn.name,
  Const        r315, "voiced_char_name"
  Const        r316, "name"
  Index        r317, r86, r316
  // voicing_actress_name: n.name,
  Const        r318, "voicing_actress_name"
  Const        r319, "name"
  Index        r320, r142, r319
  // voiced_action_movie_jap_eng: t.title
  Const        r321, "voiced_action_movie_jap_eng"
  Const        r322, "title"
  Index        r323, r156, r322
  // voiced_char_name: chn.name,
  Move         r324, r315
  Move         r325, r317
  // voicing_actress_name: n.name,
  Move         r326, r318
  Move         r327, r320
  // voiced_action_movie_jap_eng: t.title
  Move         r328, r321
  Move         r329, r323
  // select {
  MakeMap      r330, 3, r324
  // from an in aka_name
  Append       r331, r12, r330
  Move         r12, r331
L20:
  // from t in title
  Const        r332, 1
  AddInt       r152, r152, r332
  Jump         L21
L11:
  // from rt in role_type
  Const        r333, 1
  AddInt       r145, r145, r333
  Jump         L22
L10:
  // from n in name
  Const        r334, 1
  AddInt       r138, r138, r334
  Jump         L23
L9:
  // from mk in movie_keyword
  Const        r335, 1
  AddInt       r131, r131, r335
  Jump         L24
L8:
  // from mi in movie_info
  Const        r336, 1
  AddInt       r124, r124, r336
  Jump         L25
L7:
  // from mc in movie_companies
  Const        r337, 1
  AddInt       r117, r117, r337
  Jump         L26
L6:
  // from k in keyword
  Const        r338, 1
  AddInt       r110, r110, r338
  Jump         L27
L5:
  // from it in info_type
  Const        r339, 1
  AddInt       r103, r103, r339
  Jump         L28
L4:
  // from cn in company_name
  Const        r340, 1
  AddInt       r96, r96, r340
  Jump         L29
L3:
  // from ci in cast_info
  Const        r341, 1
  AddInt       r89, r89, r341
  Jump         L30
L2:
  // from chn in char_name
  Const        r342, 1
  AddInt       r82, r82, r342
  Jump         L31
L1:
  // from an in aka_name
  Const        r343, 1
  AddInt       r75, r75, r343
  Jump         L32
L0:
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Const        r344, "voiced_char_name"
  Const        r345, []
  Const        r346, "voiced_char_name"
  IterPrep     r347, r12
  Len          r348, r347
  Const        r350, 0
  Move         r349, r350
L34:
  LessInt      r351, r349, r348
  JumpIfFalse  r351, L33
  Index        r352, r347, r349
  Move         r353, r352
  Const        r354, "voiced_char_name"
  Index        r355, r353, r354
  Append       r356, r345, r355
  Move         r345, r356
  Const        r357, 1
  AddInt       r349, r349, r357
  Jump         L34
L33:
  Min          r358, r345
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Const        r359, "voicing_actress_name"
  Const        r360, []
  Const        r361, "voicing_actress_name"
  IterPrep     r362, r12
  Len          r363, r362
  Const        r365, 0
  Move         r364, r365
L36:
  LessInt      r366, r364, r363
  JumpIfFalse  r366, L35
  Index        r367, r362, r364
  Move         r353, r367
  Const        r368, "voicing_actress_name"
  Index        r369, r353, r368
  Append       r370, r360, r369
  Move         r360, r370
  Const        r371, 1
  AddInt       r364, r364, r371
  Jump         L36
L35:
  Min          r372, r360
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Const        r373, "voiced_action_movie_jap_eng"
  Const        r374, []
  Const        r375, "voiced_action_movie_jap_eng"
  IterPrep     r376, r12
  Len          r377, r376
  Const        r379, 0
  Move         r378, r379
L38:
  LessInt      r380, r378, r377
  JumpIfFalse  r380, L37
  Index        r381, r376, r378
  Move         r353, r381
  Const        r382, "voiced_action_movie_jap_eng"
  Index        r383, r353, r382
  Append       r384, r374, r383
  Move         r374, r384
  Const        r385, 1
  AddInt       r378, r378, r385
  Jump         L38
L37:
  Min          r386, r374
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r387, r344
  Move         r388, r358
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r389, r359
  Move         r390, r372
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r391, r373
  Move         r392, r386
  // {
  MakeMap      r393, 3, r387
  Move         r394, r393
  // let result = [
  MakeList     r395, 1, r394
  // json(result)
  JSON         r395
  // expect result == [
  Const        r396, [{"voiced_action_movie_jap_eng": "Heroic Adventure", "voiced_char_name": "Hero Character", "voicing_actress_name": "Ann Actress"}]
  Equal        r397, r395, r396
  Expect       r397
  Return       r0
