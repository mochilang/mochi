func main (regs=70)
  // let aka_name = [
  Const        r0, [{"person_id": 1}]
L36:
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Hero Character"}]
L35:
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}]
L34:
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 1}]
L33:
  // let info_type = [
  Const        r4, [{"id": 1, "info": "release dates"}]
L32:
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "hero"}]
L31:
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "movie_id": 1}]
L30:
  // let movie_info = [
  Const        r7, [{"info": "Japan: Feb 2015", "info_type_id": 1, "movie_id": 1}]
L5:
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}]
L29:
  // let name = [
  Const        r9, [{"gender": "f", "id": 1, "name": "Ann Actress"}]
L28:
  // let role_type = [
  Const        r10, [{"id": 1, "role": "actress"}]
L26:
  // let title = [
  Const        r11, [{"id": 1, "production_year": 2015, "title": "Heroic Adventure"}]
  // from an in aka_name
  Const        r12, []
L14:
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r13, "note"
  // cn.country_code == "[us]" &&
  Const        r14, "country_code"
  // it.info == "release dates" &&
  Const        r15, "info"
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r16, "keyword"
  // n.gender == "f" &&
  Const        r17, "gender"
L20:
  // n.name.contains("An") &&
  Const        r18, "name"
  // rt.role == "actress" &&
  Const        r19, "role"
  // t.production_year > 2010 &&
  Const        r20, "production_year"
  // t.id == mi.movie_id &&
  Const        r21, "id"
  Const        r22, "movie_id"
  // cn.id == mc.company_id &&
  Const        r23, "company_id"
  // it.id == mi.info_type_id &&
  Const        r24, "info_type_id"
  // n.id == ci.person_id &&
  Const        r25, "person_id"
  // rt.id == ci.role_id &&
  Const        r26, "role_id"
  // chn.id == ci.person_role_id &&
  Const        r27, "person_role_id"
  // k.id == mk.keyword_id
  Const        r28, "keyword_id"
  // voiced_char_name: chn.name,
  Const        r29, "voiced_char_name"
  // voicing_actress_name: n.name,
  Const        r30, "voicing_actress_name"
  // voiced_action_movie_jap_eng: t.title
  Const        r31, "voiced_action_movie_jap_eng"
  Const        r32, "title"
  // from an in aka_name
  IterPrep     r33, r0
L21:
  Len          r34, r33
L27:
  Const        r35, 0
L1:
  Move         r36, r35
  LessInt      r37, r36, r34
  JumpIfFalse  r37, L0
L19:
  Index        r37, r33, r36
  // from chn in char_name
  IterPrep     r36, r1
  Len          r1, r36
  Move         r33, r35
  LessInt      r34, r33, r1
  JumpIfFalse  r34, L1
L11:
  Index        r34, r36, r33
  // from ci in cast_info
  IterPrep     r36, r2
  Len          r2, r36
  Move         r38, r35
  LessInt      r39, r38, r2
L9:
  JumpIfFalse  r39, L2
L18:
  Index        r39, r36, r38
L6:
  // from cn in company_name
  IterPrep     r36, r3
L22:
  Len          r3, r36
L8:
  Move         r40, r35
  LessInt      r41, r40, r3
L24:
  JumpIfFalse  r41, L3
  Index        r41, r36, r40
  // from it in info_type
  IterPrep     r36, r4
L17:
  Len          r4, r36
L12:
  Move         r42, r35
  LessInt      r43, r42, r4
  JumpIfFalse  r43, L4
  Index        r43, r36, r42
  // from k in keyword
  IterPrep     r36, r5
  Len          r5, r36
  Move         r44, r35
  LessInt      r45, r44, r5
  JumpIfFalse  r45, L5
  Index        r45, r36, r44
  // from mc in movie_companies
  IterPrep     r36, r6
  Len          r6, r36
  Move         r46, r35
  LessInt      r47, r46, r6
  JumpIfFalse  r47, L6
  Index        r47, r36, r46
  // from mi in movie_info
  IterPrep     r36, r7
  Len          r7, r36
  Move         r48, r35
  LessInt      r49, r48, r7
  JumpIfFalse  r49, L7
  Index        r49, r36, r48
  // from mk in movie_keyword
  IterPrep     r36, r8
  Len          r8, r36
  Move         r50, r35
  LessInt      r51, r50, r8
  JumpIfFalse  r51, L5
  Index        r51, r36, r50
  // from n in name
  IterPrep     r36, r9
  Len          r9, r36
  Move         r52, r35
  LessInt      r53, r52, r9
  JumpIfFalse  r53, L8
  Index        r53, r36, r52
  // from rt in role_type
  IterPrep     r36, r10
  Len          r10, r36
  Move         r54, r35
  LessInt      r55, r54, r10
  JumpIfFalse  r55, L9
  Index        r55, r36, r54
  // from t in title
  IterPrep     r36, r11
  Len          r11, r36
  Move         r56, r35
  LessInt      r57, r56, r11
  JumpIfFalse  r57, L10
  Index        r57, r36, r56
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Index        r36, r39, r13
  // t.production_year > 2010 &&
  Index        r13, r57, r20
  Const        r20, 2010
  Less         r58, r20, r13
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r20, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r13, r36, r20
  // cn.country_code == "[us]" &&
  Index        r20, r41, r14
  Const        r14, "[us]"
  Equal        r36, r20, r14
  // it.info == "release dates" &&
  Index        r14, r43, r15
  Const        r20, "release dates"
  Equal        r59, r14, r20
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Index        r20, r45, r16
  Const        r16, ["hero", "martial-arts", "hand-to-hand-combat"]
  In           r14, r20, r16
  // mi.info != null &&
  Index        r16, r49, r15
  Const        r20, nil
  NotEqual     r60, r16, r20
  // n.gender == "f" &&
  Index        r20, r53, r17
  Const        r17, "f"
  Equal        r16, r20, r17
  // rt.role == "actress" &&
  Index        r17, r55, r19
  Const        r19, "actress"
  Equal        r20, r17, r19
  // t.id == mi.movie_id &&
  Index        r19, r57, r21
  Index        r17, r49, r22
  Equal        r61, r19, r17
  // t.id == mc.movie_id &&
  Index        r17, r57, r21
  Index        r19, r47, r22
  Equal        r62, r17, r19
  // t.id == ci.movie_id &&
  Index        r19, r57, r21
  Index        r17, r39, r22
  Equal        r63, r19, r17
  // t.id == mk.movie_id &&
  Index        r17, r57, r21
  Index        r19, r51, r22
  Equal        r64, r17, r19
  // mc.movie_id == ci.movie_id &&
  Index        r19, r47, r22
  Index        r17, r39, r22
  Equal        r65, r19, r17
  // mc.movie_id == mi.movie_id &&
  Index        r17, r47, r22
  Index        r19, r49, r22
  Equal        r66, r17, r19
  // mc.movie_id == mk.movie_id &&
  Index        r19, r47, r22
  Index        r17, r51, r22
  Equal        r67, r19, r17
  // mi.movie_id == ci.movie_id &&
  Index        r17, r49, r22
  Index        r19, r39, r22
  Equal        r68, r17, r19
  // mi.movie_id == mk.movie_id &&
  Index        r19, r49, r22
  Index        r17, r51, r22
  Equal        r69, r19, r17
  // ci.movie_id == mk.movie_id &&
  Index        r17, r39, r22
  Index        r19, r51, r22
  Equal        r22, r17, r19
  // cn.id == mc.company_id &&
  Index        r19, r41, r21
  Index        r41, r47, r23
  Equal        r47, r19, r41
  // it.id == mi.info_type_id &&
  Index        r41, r43, r21
  Index        r43, r49, r24
  Equal        r24, r41, r43
  // n.id == ci.person_id &&
  Index        r43, r53, r21
  Index        r41, r39, r25
  Equal        r19, r43, r41
  // rt.id == ci.role_id &&
  Index        r41, r55, r21
  Index        r55, r39, r26
  Equal        r26, r41, r55
  // n.id == an.person_id &&
  Index        r55, r53, r21
  Index        r41, r37, r25
  Equal        r43, r55, r41
  // ci.person_id == an.person_id &&
  Index        r41, r39, r25
  Index        r55, r37, r25
  Equal        r37, r41, r55
  // chn.id == ci.person_role_id &&
  Index        r55, r34, r21
  Index        r41, r39, r27
  Equal        r39, r55, r41
  // k.id == mk.keyword_id
  Index        r41, r45, r21
  Index        r45, r51, r28
  Equal        r51, r41, r45
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Move         r45, r13
  JumpIfFalse  r45, L11
  // cn.country_code == "[us]" &&
  Move         r45, r36
  JumpIfFalse  r45, L11
  // it.info == "release dates" &&
  Move         r45, r59
  JumpIfFalse  r45, L11
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Move         r45, r14
  JumpIfFalse  r45, L12
  // mi.info != null &&
  Move         r45, r60
  JumpIfFalse  r45, L13
  Index        r45, r49, r15
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r60, "Japan:"
  Move         r14, r35
  Const        r59, 6
  Len          r36, r45
  LessEq       r13, r59, r36
  JumpIfFalse  r13, L12
  Slice        r13, r45, r14, r59
  Equal        r59, r13, r60
  Jump         L14
  Const        r59, false
  Move         r13, r59
  JumpIfFalse  r13, L15
  Index        r60, r49, r15
  Const        r14, "201"
  In           r13, r14, r60
L15:
  Index        r60, r49, r15
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r45, 4
  Len          r36, r60
  LessEq       r60, r45, r36
  JumpIfFalse  r60, L16
L16:
  Move         r60, r59
  JumpIfFalse  r60, L17
  Index        r59, r49, r15
  In           r60, r14, r59
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Move         r59, r13
  JumpIfTrue   r59, L13
L13:
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Move         r59, r60
  JumpIfFalse  r59, L12
  // n.gender == "f" &&
  Move         r59, r16
  JumpIfFalse  r59, L12
  Index        r59, r53, r18
  // n.name.contains("An") &&
  Const        r16, "An"
  In           r60, r16, r59
  JumpIfFalse  r60, L12
  // rt.role == "actress" &&
  Move         r60, r20
  JumpIfFalse  r60, L12
  // t.production_year > 2010 &&
  Move         r60, r58
  JumpIfFalse  r60, L12
  // t.id == mi.movie_id &&
  Move         r60, r61
  JumpIfFalse  r60, L12
  // t.id == mc.movie_id &&
  Move         r60, r62
  JumpIfFalse  r60, L12
  // t.id == ci.movie_id &&
  Move         r60, r63
  JumpIfFalse  r60, L12
  // t.id == mk.movie_id &&
  Move         r60, r64
  JumpIfFalse  r60, L12
  // mc.movie_id == ci.movie_id &&
  Move         r60, r65
  JumpIfFalse  r60, L18
  // mc.movie_id == mi.movie_id &&
  Move         r60, r66
  JumpIfFalse  r60, L19
  // mc.movie_id == mk.movie_id &&
  Move         r60, r67
  JumpIfFalse  r60, L20
  // mi.movie_id == ci.movie_id &&
  Move         r60, r68
  JumpIfFalse  r60, L12
  // mi.movie_id == mk.movie_id &&
  Move         r60, r69
  JumpIfFalse  r60, L21
  // ci.movie_id == mk.movie_id &&
  Move         r60, r22
  JumpIfFalse  r60, L22
  // cn.id == mc.company_id &&
  Move         r60, r47
  JumpIfFalse  r60, L23
L23:
  // it.id == mi.info_type_id &&
  Move         r60, r24
  JumpIfFalse  r60, L24
  // n.id == ci.person_id &&
  Move         r60, r19
  JumpIfFalse  r60, L8
  // rt.id == ci.role_id &&
  Move         r60, r26
  JumpIfFalse  r60, L6
  // n.id == an.person_id &&
  Move         r60, r43
  JumpIfFalse  r60, L25
L25:
  // ci.person_id == an.person_id &&
  Move         r60, r37
  JumpIfFalse  r60, L8
  // chn.id == ci.person_role_id &&
  Move         r60, r39
  JumpIfFalse  r60, L26
  Move         r60, r51
  // where (
  JumpIfFalse  r60, L27
  // voiced_char_name: chn.name,
  Move         r60, r29
  Index        r51, r34, r18
  // voicing_actress_name: n.name,
  Move         r34, r30
  Index        r39, r53, r18
  // voiced_action_movie_jap_eng: t.title
  Move         r53, r31
  Index        r18, r57, r32
  // voiced_char_name: chn.name,
  Move         r57, r60
  Move         r60, r51
  // voicing_actress_name: n.name,
  Move         r51, r34
  Move         r34, r39
  // voiced_action_movie_jap_eng: t.title
  Move         r39, r53
  Move         r53, r18
  // select {
  MakeMap      r18, 3, r57
  // from an in aka_name
  Append       r12, r12, r18
  // from t in title
  Const        r18, 1
  AddInt       r56, r56, r18
  Jump         L26
L10:
  // from rt in role_type
  AddInt       r54, r54, r18
  Jump         L28
  // from n in name
  AddInt       r52, r52, r18
  Jump         L29
  // from mk in movie_keyword
  AddInt       r50, r50, r18
  Jump         L5
  // from mi in movie_info
  AddInt       r48, r48, r18
  Jump         L30
L7:
  // from mc in movie_companies
  AddInt       r46, r46, r18
  Jump         L31
  // from k in keyword
  AddInt       r44, r44, r18
  Jump         L32
  // from it in info_type
  AddInt       r42, r42, r18
  Jump         L33
L4:
  // from cn in company_name
  AddInt       r40, r40, r18
  Jump         L34
L3:
  // from ci in cast_info
  AddInt       r38, r38, r18
  Jump         L35
L2:
  // from chn in char_name
  AddInt       r33, r33, r18
  Jump         L36
L0:
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r56, r29
  Const        r11, []
  IterPrep     r54, r12
  Len          r10, r54
  Move         r52, r35
L38:
  LessInt      r9, r52, r10
  JumpIfFalse  r9, L37
  Index        r9, r54, r52
  Index        r54, r9, r29
  Append       r11, r11, r54
  AddInt       r52, r52, r18
  Jump         L38
L37:
  Min          r54, r11
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r11, r30
  Const        r52, []
  IterPrep     r29, r12
  Len          r10, r29
  Move         r50, r35
L40:
  LessInt      r8, r50, r10
  JumpIfFalse  r8, L39
  Index        r9, r29, r50
  Index        r8, r9, r30
  Append       r52, r52, r8
  AddInt       r50, r50, r18
  Jump         L40
L39:
  Min          r8, r52
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r52, r31
  Const        r50, []
  IterPrep     r30, r12
  Len          r12, r30
  Move         r10, r35
L42:
  LessInt      r35, r10, r12
  JumpIfFalse  r35, L41
  Index        r9, r30, r10
  Index        r35, r9, r31
  Append       r50, r50, r35
  AddInt       r10, r10, r18
  Jump         L42
L41:
  Min          r35, r50
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r50, r56
  Move         r56, r54
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r54, r11
  Move         r11, r8
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r8, r52
  Move         r52, r35
  // {
  MakeMap      r35, 3, r50
  // let result = [
  MakeList     r52, 1, r35
  // json(result)
  JSON         r52
  // expect result == [
  Const        r35, [{"voiced_action_movie_jap_eng": "Heroic Adventure", "voiced_char_name": "Hero Character", "voicing_actress_name": "Ann Actress"}]
  Equal        r8, r52, r35
  Expect       r8
  Return       r0
