func main (regs=375)
  // let aka_name = [
  Const        r0, [{"person_id": 1}]
  Move         r1, r0
  // let char_name = [
  Const        r2, [{"id": 1, "name": "Hero Character"}]
  Move         r3, r2
  // let cast_info = [
  Const        r4, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}]
  Move         r5, r4
  // let company_name = [
  Const        r6, [{"country_code": "[us]", "id": 1}]
  Move         r7, r6
  // let info_type = [
  Const        r8, [{"id": 1, "info": "release dates"}]
  Move         r9, r8
  // let keyword = [
  Const        r10, [{"id": 1, "keyword": "hero"}]
  Move         r11, r10
  // let movie_companies = [
  Const        r12, [{"company_id": 1, "movie_id": 1}]
  Move         r13, r12
  // let movie_info = [
  Const        r14, [{"info": "Japan: Feb 2015", "info_type_id": 1, "movie_id": 1}]
  Move         r15, r14
  // let movie_keyword = [
  Const        r16, [{"keyword_id": 1, "movie_id": 1}]
  Move         r17, r16
  // let name = [
  Const        r18, [{"gender": "f", "id": 1, "name": "Ann Actress"}]
  Move         r19, r18
  // let role_type = [
  Const        r20, [{"id": 1, "role": "actress"}]
  Move         r21, r20
  // let title = [
  Const        r22, [{"id": 1, "production_year": 2015, "title": "Heroic Adventure"}]
  Move         r23, r22
  // from an in aka_name
  Const        r24, []
  IterPrep     r25, r1
  Len          r26, r25
  Const        r27, 0
L58:
  Less         r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // from chn in char_name
  IterPrep     r31, r3
  Len          r32, r31
  Const        r33, 0
L57:
  Less         r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r35, r31, r33
  Move         r36, r35
  // from ci in cast_info
  IterPrep     r37, r5
  Len          r38, r37
  Const        r39, 0
L56:
  Less         r40, r39, r38
  JumpIfFalse  r40, L2
  Index        r41, r37, r39
  Move         r42, r41
  // from cn in company_name
  IterPrep     r43, r7
  Len          r44, r43
  Const        r45, 0
L55:
  Less         r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r47, r43, r45
  Move         r48, r47
  // from it in info_type
  IterPrep     r49, r9
  Len          r50, r49
  Const        r51, 0
L54:
  Less         r52, r51, r50
  JumpIfFalse  r52, L4
  Index        r53, r49, r51
  Move         r54, r53
  // from k in keyword
  IterPrep     r55, r11
  Len          r56, r55
  Const        r57, 0
L53:
  Less         r58, r57, r56
  JumpIfFalse  r58, L5
  Index        r59, r55, r57
  Move         r60, r59
  // from mc in movie_companies
  IterPrep     r61, r13
  Len          r62, r61
  Const        r63, 0
L52:
  Less         r64, r63, r62
  JumpIfFalse  r64, L6
  Index        r65, r61, r63
  Move         r66, r65
  // from mi in movie_info
  IterPrep     r67, r15
  Len          r68, r67
  Const        r69, 0
L51:
  Less         r70, r69, r68
  JumpIfFalse  r70, L7
  Index        r71, r67, r69
  Move         r72, r71
  // from mk in movie_keyword
  IterPrep     r73, r17
  Len          r74, r73
  Const        r75, 0
L50:
  Less         r76, r75, r74
  JumpIfFalse  r76, L8
  Index        r77, r73, r75
  Move         r78, r77
  // from n in name
  IterPrep     r79, r19
  Len          r80, r79
  Const        r81, 0
L49:
  Less         r82, r81, r80
  JumpIfFalse  r82, L9
  Index        r83, r79, r81
  Move         r84, r83
  // from rt in role_type
  IterPrep     r85, r21
  Len          r86, r85
  Const        r87, 0
L48:
  Less         r88, r87, r86
  JumpIfFalse  r88, L10
  Index        r89, r85, r87
  Move         r90, r89
  // from t in title
  IterPrep     r91, r23
  Len          r92, r91
  Const        r93, 0
L47:
  Less         r94, r93, r92
  JumpIfFalse  r94, L11
  Index        r95, r91, r93
  Move         r96, r95
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r97, "note"
  Index        r98, r42, r97
  // t.production_year > 2010 &&
  Const        r99, "production_year"
  Index        r100, r96, r99
  Const        r101, 2010
  Less         r102, r101, r100
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r103, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r104, r98, r103
  // cn.country_code == "[us]" &&
  Const        r105, "country_code"
  Index        r106, r48, r105
  Const        r107, "[us]"
  Equal        r108, r106, r107
  // it.info == "release dates" &&
  Const        r109, "info"
  Index        r110, r54, r109
  Const        r111, "release dates"
  Equal        r112, r110, r111
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r113, "keyword"
  Index        r114, r60, r113
  Const        r115, ["hero", "martial-arts", "hand-to-hand-combat"]
  In           r116, r114, r115
  // mi.info != null &&
  Const        r117, "info"
  Index        r118, r72, r117
  Const        r119, nil
  NotEqual     r120, r118, r119
  // n.gender == "f" &&
  Const        r121, "gender"
  Index        r122, r84, r121
  Const        r123, "f"
  Equal        r124, r122, r123
  // rt.role == "actress" &&
  Const        r125, "role"
  Index        r126, r90, r125
  Const        r127, "actress"
  Equal        r128, r126, r127
  // t.id == mi.movie_id &&
  Const        r129, "id"
  Index        r130, r96, r129
  Const        r131, "movie_id"
  Index        r132, r72, r131
  Equal        r133, r130, r132
  // t.id == mc.movie_id &&
  Const        r134, "id"
  Index        r135, r96, r134
  Const        r136, "movie_id"
  Index        r137, r66, r136
  Equal        r138, r135, r137
  // t.id == ci.movie_id &&
  Const        r139, "id"
  Index        r140, r96, r139
  Const        r141, "movie_id"
  Index        r142, r42, r141
  Equal        r143, r140, r142
  // t.id == mk.movie_id &&
  Const        r144, "id"
  Index        r145, r96, r144
  Const        r146, "movie_id"
  Index        r147, r78, r146
  Equal        r148, r145, r147
  // mc.movie_id == ci.movie_id &&
  Const        r149, "movie_id"
  Index        r150, r66, r149
  Const        r151, "movie_id"
  Index        r152, r42, r151
  Equal        r153, r150, r152
  // mc.movie_id == mi.movie_id &&
  Const        r154, "movie_id"
  Index        r155, r66, r154
  Const        r156, "movie_id"
  Index        r157, r72, r156
  Equal        r158, r155, r157
  // mc.movie_id == mk.movie_id &&
  Const        r159, "movie_id"
  Index        r160, r66, r159
  Const        r161, "movie_id"
  Index        r162, r78, r161
  Equal        r163, r160, r162
  // mi.movie_id == ci.movie_id &&
  Const        r164, "movie_id"
  Index        r165, r72, r164
  Const        r166, "movie_id"
  Index        r167, r42, r166
  Equal        r168, r165, r167
  // mi.movie_id == mk.movie_id &&
  Const        r169, "movie_id"
  Index        r170, r72, r169
  Const        r171, "movie_id"
  Index        r172, r78, r171
  Equal        r173, r170, r172
  // ci.movie_id == mk.movie_id &&
  Const        r174, "movie_id"
  Index        r175, r42, r174
  Const        r176, "movie_id"
  Index        r177, r78, r176
  Equal        r178, r175, r177
  // cn.id == mc.company_id &&
  Const        r179, "id"
  Index        r180, r48, r179
  Const        r181, "company_id"
  Index        r182, r66, r181
  Equal        r183, r180, r182
  // it.id == mi.info_type_id &&
  Const        r184, "id"
  Index        r185, r54, r184
  Const        r186, "info_type_id"
  Index        r187, r72, r186
  Equal        r188, r185, r187
  // n.id == ci.person_id &&
  Const        r189, "id"
  Index        r190, r84, r189
  Const        r191, "person_id"
  Index        r192, r42, r191
  Equal        r193, r190, r192
  // rt.id == ci.role_id &&
  Const        r194, "id"
  Index        r195, r90, r194
  Const        r196, "role_id"
  Index        r197, r42, r196
  Equal        r198, r195, r197
  // n.id == an.person_id &&
  Const        r199, "id"
  Index        r200, r84, r199
  Const        r201, "person_id"
  Index        r202, r30, r201
  Equal        r203, r200, r202
  // ci.person_id == an.person_id &&
  Const        r204, "person_id"
  Index        r205, r42, r204
  Const        r206, "person_id"
  Index        r207, r30, r206
  Equal        r208, r205, r207
  // chn.id == ci.person_role_id &&
  Const        r209, "id"
  Index        r210, r36, r209
  Const        r211, "person_role_id"
  Index        r212, r42, r211
  Equal        r213, r210, r212
  // k.id == mk.keyword_id
  Const        r214, "id"
  Index        r215, r60, r214
  Const        r216, "keyword_id"
  Index        r217, r78, r216
  Equal        r218, r215, r217
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Move         r219, r104
  JumpIfFalse  r219, L12
  Move         r219, r108
L12:
  // cn.country_code == "[us]" &&
  Move         r220, r219
  JumpIfFalse  r220, L13
  Move         r220, r112
L13:
  // it.info == "release dates" &&
  Move         r221, r220
  JumpIfFalse  r221, L14
  Move         r221, r116
L14:
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Move         r222, r221
  JumpIfFalse  r222, L15
  Move         r222, r120
L15:
  // mi.info != null &&
  Move         r223, r222
  JumpIfFalse  r223, L16
  Const        r224, "info"
  Index        r225, r72, r224
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r226, "Japan:"
  Const        r227, 0
  Const        r228, 6
  Len          r229, r225
  LessEq       r230, r228, r229
  JumpIfFalse  r230, L17
  Slice        r232, r225, r227, r228
  Equal        r233, r232, r226
  Move         r231, r233
  Jump         L18
L17:
  Const        r231, false
L18:
  Move         r234, r231
  JumpIfFalse  r234, L19
  Const        r235, "info"
  Index        r236, r72, r235
  Const        r237, "201"
  In           r238, r237, r236
  Move         r234, r238
L19:
  Const        r239, "info"
  Index        r240, r72, r239
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r241, "USA:"
  Const        r242, 0
  Const        r243, 4
  Len          r244, r240
  LessEq       r245, r243, r244
  JumpIfFalse  r245, L20
  Slice        r247, r240, r242, r243
  Equal        r248, r247, r241
  Move         r246, r248
  Jump         L21
L20:
  Const        r246, false
L21:
  Move         r249, r246
  JumpIfFalse  r249, L22
  Const        r250, "info"
  Index        r251, r72, r250
  Const        r252, "201"
  In           r253, r252, r251
  Move         r249, r253
L22:
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Move         r254, r234
  JumpIfTrue   r254, L23
  Move         r254, r249
L23:
  // mi.info != null &&
  Move         r223, r254
L16:
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Move         r255, r223
  JumpIfFalse  r255, L24
  Move         r255, r124
L24:
  // n.gender == "f" &&
  Move         r256, r255
  JumpIfFalse  r256, L25
  Const        r257, "name"
  Index        r258, r84, r257
  // n.name.contains("An") &&
  Const        r259, "An"
  In           r260, r259, r258
  // n.gender == "f" &&
  Move         r256, r260
L25:
  // n.name.contains("An") &&
  Move         r261, r256
  JumpIfFalse  r261, L26
  Move         r261, r128
L26:
  // rt.role == "actress" &&
  Move         r262, r261
  JumpIfFalse  r262, L27
  Move         r262, r102
L27:
  // t.production_year > 2010 &&
  Move         r263, r262
  JumpIfFalse  r263, L28
  Move         r263, r133
L28:
  // t.id == mi.movie_id &&
  Move         r264, r263
  JumpIfFalse  r264, L29
  Move         r264, r138
L29:
  // t.id == mc.movie_id &&
  Move         r265, r264
  JumpIfFalse  r265, L30
  Move         r265, r143
L30:
  // t.id == ci.movie_id &&
  Move         r266, r265
  JumpIfFalse  r266, L31
  Move         r266, r148
L31:
  // t.id == mk.movie_id &&
  Move         r267, r266
  JumpIfFalse  r267, L32
  Move         r267, r153
L32:
  // mc.movie_id == ci.movie_id &&
  Move         r268, r267
  JumpIfFalse  r268, L33
  Move         r268, r158
L33:
  // mc.movie_id == mi.movie_id &&
  Move         r269, r268
  JumpIfFalse  r269, L34
  Move         r269, r163
L34:
  // mc.movie_id == mk.movie_id &&
  Move         r270, r269
  JumpIfFalse  r270, L35
  Move         r270, r168
L35:
  // mi.movie_id == ci.movie_id &&
  Move         r271, r270
  JumpIfFalse  r271, L36
  Move         r271, r173
L36:
  // mi.movie_id == mk.movie_id &&
  Move         r272, r271
  JumpIfFalse  r272, L37
  Move         r272, r178
L37:
  // ci.movie_id == mk.movie_id &&
  Move         r273, r272
  JumpIfFalse  r273, L38
  Move         r273, r183
L38:
  // cn.id == mc.company_id &&
  Move         r274, r273
  JumpIfFalse  r274, L39
  Move         r274, r188
L39:
  // it.id == mi.info_type_id &&
  Move         r275, r274
  JumpIfFalse  r275, L40
  Move         r275, r193
L40:
  // n.id == ci.person_id &&
  Move         r276, r275
  JumpIfFalse  r276, L41
  Move         r276, r198
L41:
  // rt.id == ci.role_id &&
  Move         r277, r276
  JumpIfFalse  r277, L42
  Move         r277, r203
L42:
  // n.id == an.person_id &&
  Move         r278, r277
  JumpIfFalse  r278, L43
  Move         r278, r208
L43:
  // ci.person_id == an.person_id &&
  Move         r279, r278
  JumpIfFalse  r279, L44
  Move         r279, r213
L44:
  // chn.id == ci.person_role_id &&
  Move         r280, r279
  JumpIfFalse  r280, L45
  Move         r280, r218
L45:
  // where (
  JumpIfFalse  r280, L46
  // voiced_char_name: chn.name,
  Const        r281, "voiced_char_name"
  Const        r282, "name"
  Index        r283, r36, r282
  // voicing_actress_name: n.name,
  Const        r284, "voicing_actress_name"
  Const        r285, "name"
  Index        r286, r84, r285
  // voiced_action_movie_jap_eng: t.title
  Const        r287, "voiced_action_movie_jap_eng"
  Const        r288, "title"
  Index        r289, r96, r288
  // voiced_char_name: chn.name,
  Move         r290, r281
  Move         r291, r283
  // voicing_actress_name: n.name,
  Move         r292, r284
  Move         r293, r286
  // voiced_action_movie_jap_eng: t.title
  Move         r294, r287
  Move         r295, r289
  // select {
  MakeMap      r296, 3, r290
  // from an in aka_name
  Append       r297, r24, r296
  Move         r24, r297
L46:
  // from t in title
  Const        r298, 1
  Add          r299, r93, r298
  Move         r93, r299
  Jump         L47
L11:
  // from rt in role_type
  Const        r300, 1
  Add          r301, r87, r300
  Move         r87, r301
  Jump         L48
L10:
  // from n in name
  Const        r302, 1
  Add          r303, r81, r302
  Move         r81, r303
  Jump         L49
L9:
  // from mk in movie_keyword
  Const        r304, 1
  Add          r305, r75, r304
  Move         r75, r305
  Jump         L50
L8:
  // from mi in movie_info
  Const        r306, 1
  Add          r307, r69, r306
  Move         r69, r307
  Jump         L51
L7:
  // from mc in movie_companies
  Const        r308, 1
  Add          r309, r63, r308
  Move         r63, r309
  Jump         L52
L6:
  // from k in keyword
  Const        r310, 1
  Add          r311, r57, r310
  Move         r57, r311
  Jump         L53
L5:
  // from it in info_type
  Const        r312, 1
  Add          r313, r51, r312
  Move         r51, r313
  Jump         L54
L4:
  // from cn in company_name
  Const        r314, 1
  Add          r315, r45, r314
  Move         r45, r315
  Jump         L55
L3:
  // from ci in cast_info
  Const        r316, 1
  Add          r317, r39, r316
  Move         r39, r317
  Jump         L56
L2:
  // from chn in char_name
  Const        r318, 1
  Add          r319, r33, r318
  Move         r33, r319
  Jump         L57
L1:
  // from an in aka_name
  Const        r320, 1
  Add          r321, r27, r320
  Move         r27, r321
  Jump         L58
L0:
  // let matches =
  Move         r322, r24
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Const        r323, "voiced_char_name"
  Const        r324, []
  IterPrep     r325, r322
  Len          r326, r325
  Const        r327, 0
L60:
  Less         r328, r327, r326
  JumpIfFalse  r328, L59
  Index        r329, r325, r327
  Move         r330, r329
  Const        r331, "voiced_char_name"
  Index        r332, r330, r331
  Append       r333, r324, r332
  Move         r324, r333
  Const        r334, 1
  Add          r335, r327, r334
  Move         r327, r335
  Jump         L60
L59:
  Min          r336, r324
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Const        r337, "voicing_actress_name"
  Const        r338, []
  IterPrep     r339, r322
  Len          r340, r339
  Const        r341, 0
L62:
  Less         r342, r341, r340
  JumpIfFalse  r342, L61
  Index        r343, r339, r341
  Move         r330, r343
  Const        r344, "voicing_actress_name"
  Index        r345, r330, r344
  Append       r346, r338, r345
  Move         r338, r346
  Const        r347, 1
  Add          r348, r341, r347
  Move         r341, r348
  Jump         L62
L61:
  Min          r349, r338
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Const        r350, "voiced_action_movie_jap_eng"
  Const        r351, []
  IterPrep     r352, r322
  Len          r353, r352
  Const        r354, 0
L64:
  Less         r355, r354, r353
  JumpIfFalse  r355, L63
  Index        r356, r352, r354
  Move         r330, r356
  Const        r357, "voiced_action_movie_jap_eng"
  Index        r358, r330, r357
  Append       r359, r351, r358
  Move         r351, r359
  Const        r360, 1
  Add          r361, r354, r360
  Move         r354, r361
  Jump         L64
L63:
  Min          r362, r351
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r363, r323
  Move         r364, r336
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r365, r337
  Move         r366, r349
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r367, r350
  Move         r368, r362
  // {
  MakeMap      r369, 3, r363
  Move         r370, r369
  // let result = [
  MakeList     r371, 1, r370
  Move         r372, r371
  // json(result)
  JSON         r372
  // expect result == [
  Const        r373, [{"voiced_action_movie_jap_eng": "Heroic Adventure", "voiced_char_name": "Hero Character", "voicing_actress_name": "Ann Actress"}]
  Equal        r374, r372, r373
  Expect       r374
  Return       r0
