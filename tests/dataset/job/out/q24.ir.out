func main (regs=273)
  // let aka_name = [
  Const        r0, [{"person_id": 1}]
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Hero Character"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 1}]
  // let info_type = [
  Const        r4, [{"id": 1, "info": "release dates"}]
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "hero"}]
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "movie_id": 1}]
  // let movie_info = [
  Const        r7, [{"info": "Japan: Feb 2015", "info_type_id": 1, "movie_id": 1}]
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}]
  // let name = [
  Const        r9, [{"gender": "f", "id": 1, "name": "Ann Actress"}]
  // let role_type = [
  Const        r10, [{"id": 1, "role": "actress"}]
  // let title = [
  Const        r11, [{"id": 1, "production_year": 2015, "title": "Heroic Adventure"}]
  // from an in aka_name
  Const        r12, []
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r13, "note"
  // cn.country_code == "[us]" &&
  Const        r14, "country_code"
  // it.info == "release dates" &&
  Const        r15, "info"
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r16, "keyword"
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r17, "starts_with"
  Const        r18, "contains"
  // n.gender == "f" &&
  Const        r19, "gender"
  // n.name.contains("An") &&
  Const        r20, "name"
  // rt.role == "actress" &&
  Const        r21, "role"
  // t.production_year > 2010 &&
  Const        r22, "production_year"
  // t.id == mi.movie_id &&
  Const        r23, "id"
  Const        r24, "movie_id"
  // cn.id == mc.company_id &&
  Const        r25, "company_id"
  // it.id == mi.info_type_id &&
  Const        r26, "info_type_id"
  // n.id == ci.person_id &&
  Const        r27, "person_id"
  // rt.id == ci.role_id &&
  Const        r28, "role_id"
  // chn.id == ci.person_role_id &&
  Const        r29, "person_role_id"
  // k.id == mk.keyword_id
  Const        r30, "keyword_id"
  // voiced_char_name: chn.name,
  Const        r31, "voiced_char_name"
  // voicing_actress_name: n.name,
  Const        r32, "voicing_actress_name"
  // voiced_action_movie_jap_eng: t.title
  Const        r33, "voiced_action_movie_jap_eng"
  Const        r34, "title"
  // from an in aka_name
  IterPrep     r35, r0
  Len          r36, r35
  Const        r38, 0
  Move         r37, r38
L32:
  LessInt      r39, r37, r36
  JumpIfFalse  r39, L0
  Index        r40, r35, r37
  Move         r41, r40
  // from chn in char_name
  IterPrep     r42, r1
  Len          r43, r42
  Move         r44, r38
L31:
  LessInt      r45, r44, r43
  JumpIfFalse  r45, L1
  Index        r46, r42, r44
  Move         r47, r46
  // from ci in cast_info
  IterPrep     r48, r2
  Len          r49, r48
  Move         r50, r38
L30:
  LessInt      r51, r50, r49
  JumpIfFalse  r51, L2
  Index        r52, r48, r50
  Move         r53, r52
  // from cn in company_name
  IterPrep     r54, r3
  Len          r55, r54
  Move         r56, r38
L29:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r58, r54, r56
  Move         r59, r58
  // from it in info_type
  IterPrep     r60, r4
  Len          r61, r60
  Move         r62, r38
L28:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r64, r60, r62
  Move         r65, r64
  // from k in keyword
  IterPrep     r66, r5
  Len          r67, r66
  Move         r68, r38
L27:
  LessInt      r69, r68, r67
  JumpIfFalse  r69, L5
  Index        r70, r66, r68
  Move         r71, r70
  // from mc in movie_companies
  IterPrep     r72, r6
  Len          r73, r72
  Move         r74, r38
L26:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L6
  Index        r76, r72, r74
  Move         r77, r76
  // from mi in movie_info
  IterPrep     r78, r7
  Len          r79, r78
  Move         r80, r38
L25:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L7
  Index        r82, r78, r80
  Move         r83, r82
  // from mk in movie_keyword
  IterPrep     r84, r8
  Len          r85, r84
  Move         r86, r38
L24:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L8
  Index        r88, r84, r86
  Move         r89, r88
  // from n in name
  IterPrep     r90, r9
  Len          r91, r90
  Move         r92, r38
L23:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L9
  Index        r94, r90, r92
  Move         r95, r94
  // from rt in role_type
  IterPrep     r96, r10
  Len          r97, r96
  Move         r98, r38
L22:
  LessInt      r99, r98, r97
  JumpIfFalse  r99, L10
  Index        r100, r96, r98
  Move         r101, r100
  // from t in title
  IterPrep     r102, r11
  Len          r103, r102
  Move         r104, r38
L21:
  LessInt      r105, r104, r103
  JumpIfFalse  r105, L11
  Index        r106, r102, r104
  Move         r107, r106
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Index        r108, r53, r13
  // t.production_year > 2010 &&
  Index        r109, r107, r22
  Const        r110, 2010
  Less         r111, r110, r109
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r112, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r113, r108, r112
  // cn.country_code == "[us]" &&
  Index        r114, r59, r14
  Const        r115, "[us]"
  Equal        r116, r114, r115
  // it.info == "release dates" &&
  Index        r117, r65, r15
  Const        r118, "release dates"
  Equal        r119, r117, r118
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Index        r120, r71, r16
  Const        r121, ["hero", "martial-arts", "hand-to-hand-combat"]
  In           r122, r120, r121
  // mi.info != null &&
  Index        r123, r83, r15
  Const        r124, nil
  NotEqual     r125, r123, r124
  // n.gender == "f" &&
  Index        r126, r95, r19
  Const        r127, "f"
  Equal        r128, r126, r127
  // rt.role == "actress" &&
  Index        r129, r101, r21
  Const        r130, "actress"
  Equal        r131, r129, r130
  // t.id == mi.movie_id &&
  Index        r132, r107, r23
  Index        r133, r83, r24
  Equal        r134, r132, r133
  // t.id == mc.movie_id &&
  Index        r135, r107, r23
  Index        r136, r77, r24
  Equal        r137, r135, r136
  // t.id == ci.movie_id &&
  Index        r138, r107, r23
  Index        r139, r53, r24
  Equal        r140, r138, r139
  // t.id == mk.movie_id &&
  Index        r141, r107, r23
  Index        r142, r89, r24
  Equal        r143, r141, r142
  // mc.movie_id == ci.movie_id &&
  Index        r144, r77, r24
  Index        r145, r53, r24
  Equal        r146, r144, r145
  // mc.movie_id == mi.movie_id &&
  Index        r147, r77, r24
  Index        r148, r83, r24
  Equal        r149, r147, r148
  // mc.movie_id == mk.movie_id &&
  Index        r150, r77, r24
  Index        r151, r89, r24
  Equal        r152, r150, r151
  // mi.movie_id == ci.movie_id &&
  Index        r153, r83, r24
  Index        r154, r53, r24
  Equal        r155, r153, r154
  // mi.movie_id == mk.movie_id &&
  Index        r156, r83, r24
  Index        r157, r89, r24
  Equal        r158, r156, r157
  // ci.movie_id == mk.movie_id &&
  Index        r159, r53, r24
  Index        r160, r89, r24
  Equal        r161, r159, r160
  // cn.id == mc.company_id &&
  Index        r162, r59, r23
  Index        r163, r77, r25
  Equal        r164, r162, r163
  // it.id == mi.info_type_id &&
  Index        r165, r65, r23
  Index        r166, r83, r26
  Equal        r167, r165, r166
  // n.id == ci.person_id &&
  Index        r168, r95, r23
  Index        r169, r53, r27
  Equal        r170, r168, r169
  // rt.id == ci.role_id &&
  Index        r171, r101, r23
  Index        r172, r53, r28
  Equal        r173, r171, r172
  // n.id == an.person_id &&
  Index        r174, r95, r23
  Index        r175, r41, r27
  Equal        r176, r174, r175
  // ci.person_id == an.person_id &&
  Index        r177, r53, r27
  Index        r178, r41, r27
  Equal        r179, r177, r178
  // chn.id == ci.person_role_id &&
  Index        r180, r47, r23
  Index        r181, r53, r29
  Equal        r182, r180, r181
  // k.id == mk.keyword_id
  Index        r183, r71, r23
  Index        r184, r89, r30
  Equal        r185, r183, r184
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Move         r186, r113
  JumpIfFalse  r186, L12
  Move         r186, r116
  // cn.country_code == "[us]" &&
  JumpIfFalse  r186, L12
  Move         r186, r119
  // it.info == "release dates" &&
  JumpIfFalse  r186, L12
  Move         r186, r122
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  JumpIfFalse  r186, L12
  Move         r186, r125
  // mi.info != null &&
  JumpIfFalse  r186, L12
  Index        r187, r83, r15
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r188, "Japan:"
  Const        r189, 0
  Const        r190, 6
  Len          r191, r187
  LessEq       r192, r190, r191
  JumpIfFalse  r192, L13
  Slice        r194, r187, r189, r190
  Equal        r195, r194, r188
  Move         r193, r195
  Jump         L14
L13:
  Const        r193, false
L14:
  Move         r196, r193
  JumpIfFalse  r196, L15
  Index        r197, r83, r15
  Const        r198, "201"
  In           r199, r198, r197
  Move         r196, r199
L15:
  Index        r200, r83, r15
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r201, "USA:"
  Const        r202, 0
  Const        r203, 4
  Len          r204, r200
  LessEq       r205, r203, r204
  JumpIfFalse  r205, L16
  Slice        r207, r200, r202, r203
  Equal        r208, r207, r201
  Move         r206, r208
  Jump         L17
L16:
  Const        r206, false
L17:
  Move         r209, r206
  JumpIfFalse  r209, L18
  Index        r210, r83, r15
  In           r211, r198, r210
  Move         r209, r211
L18:
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Move         r212, r196
  JumpIfTrue   r212, L19
  Move         r212, r209
L19:
  // mi.info != null &&
  Move         r186, r212
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  JumpIfFalse  r186, L12
  Move         r186, r128
  // n.gender == "f" &&
  JumpIfFalse  r186, L12
  Index        r213, r95, r20
  // n.name.contains("An") &&
  Const        r214, "An"
  In           r215, r214, r213
  // n.gender == "f" &&
  Move         r186, r215
  // n.name.contains("An") &&
  JumpIfFalse  r186, L12
  Move         r186, r131
  // rt.role == "actress" &&
  JumpIfFalse  r186, L12
  Move         r186, r111
  // t.production_year > 2010 &&
  JumpIfFalse  r186, L12
  Move         r186, r134
  // t.id == mi.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r137
  // t.id == mc.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r140
  // t.id == ci.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r143
  // t.id == mk.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r146
  // mc.movie_id == ci.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r149
  // mc.movie_id == mi.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r152
  // mc.movie_id == mk.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r155
  // mi.movie_id == ci.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r158
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r161
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r186, L12
  Move         r186, r164
  // cn.id == mc.company_id &&
  JumpIfFalse  r186, L12
  Move         r186, r167
  // it.id == mi.info_type_id &&
  JumpIfFalse  r186, L12
  Move         r186, r170
  // n.id == ci.person_id &&
  JumpIfFalse  r186, L12
  Move         r186, r173
  // rt.id == ci.role_id &&
  JumpIfFalse  r186, L12
  Move         r186, r176
  // n.id == an.person_id &&
  JumpIfFalse  r186, L12
  Move         r186, r179
  // ci.person_id == an.person_id &&
  JumpIfFalse  r186, L12
  Move         r186, r182
  // chn.id == ci.person_role_id &&
  JumpIfFalse  r186, L12
  Move         r186, r185
L12:
  // where (
  JumpIfFalse  r186, L20
  // voiced_char_name: chn.name,
  Const        r216, "voiced_char_name"
  Index        r217, r47, r20
  // voicing_actress_name: n.name,
  Const        r218, "voicing_actress_name"
  Index        r219, r95, r20
  // voiced_action_movie_jap_eng: t.title
  Const        r220, "voiced_action_movie_jap_eng"
  Index        r221, r107, r34
  // voiced_char_name: chn.name,
  Move         r222, r216
  Move         r223, r217
  // voicing_actress_name: n.name,
  Move         r224, r218
  Move         r225, r219
  // voiced_action_movie_jap_eng: t.title
  Move         r226, r220
  Move         r227, r221
  // select {
  MakeMap      r228, 3, r222
  // from an in aka_name
  Append       r229, r12, r228
  Move         r12, r229
L20:
  // from t in title
  Const        r230, 1
  AddInt       r104, r104, r230
  Jump         L21
L11:
  // from rt in role_type
  AddInt       r98, r98, r230
  Jump         L22
L10:
  // from n in name
  AddInt       r92, r92, r230
  Jump         L23
L9:
  // from mk in movie_keyword
  AddInt       r86, r86, r230
  Jump         L24
L8:
  // from mi in movie_info
  AddInt       r80, r80, r230
  Jump         L25
L7:
  // from mc in movie_companies
  AddInt       r74, r74, r230
  Jump         L26
L6:
  // from k in keyword
  AddInt       r68, r68, r230
  Jump         L27
L5:
  // from it in info_type
  AddInt       r62, r62, r230
  Jump         L28
L4:
  // from cn in company_name
  AddInt       r56, r56, r230
  Jump         L29
L3:
  // from ci in cast_info
  AddInt       r50, r50, r230
  Jump         L30
L2:
  // from chn in char_name
  AddInt       r44, r44, r230
  Jump         L31
L1:
  // from an in aka_name
  AddInt       r37, r37, r230
  Jump         L32
L0:
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Const        r231, "voiced_char_name"
  Const        r232, []
  IterPrep     r233, r12
  Len          r234, r233
  Move         r235, r38
L34:
  LessInt      r236, r235, r234
  JumpIfFalse  r236, L33
  Index        r237, r233, r235
  Move         r238, r237
  Index        r239, r238, r31
  Append       r240, r232, r239
  Move         r232, r240
  AddInt       r235, r235, r230
  Jump         L34
L33:
  Min          r241, r232
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Const        r242, "voicing_actress_name"
  Const        r243, []
  IterPrep     r244, r12
  Len          r245, r244
  Move         r246, r38
L36:
  LessInt      r247, r246, r245
  JumpIfFalse  r247, L35
  Index        r248, r244, r246
  Move         r238, r248
  Index        r249, r238, r32
  Append       r250, r243, r249
  Move         r243, r250
  AddInt       r246, r246, r230
  Jump         L36
L35:
  Min          r251, r243
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Const        r252, "voiced_action_movie_jap_eng"
  Const        r253, []
  IterPrep     r254, r12
  Len          r255, r254
  Move         r256, r38
L38:
  LessInt      r257, r256, r255
  JumpIfFalse  r257, L37
  Index        r258, r254, r256
  Move         r238, r258
  Index        r259, r238, r33
  Append       r260, r253, r259
  Move         r253, r260
  AddInt       r256, r256, r230
  Jump         L38
L37:
  Min          r261, r253
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r262, r231
  Move         r263, r241
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r264, r242
  Move         r265, r251
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r266, r252
  Move         r267, r261
  // {
  MakeMap      r268, 3, r262
  Move         r269, r268
  // let result = [
  MakeList     r270, 1, r269
  // json(result)
  JSON         r270
  // expect result == [
  Const        r271, [{"voiced_action_movie_jap_eng": "Heroic Adventure", "voiced_char_name": "Hero Character", "voicing_actress_name": "Ann Actress"}]
  Equal        r272, r270, r271
  Expect       r272
  Return       r0
