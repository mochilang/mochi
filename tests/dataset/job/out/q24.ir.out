func main (regs=74)
  // let aka_name = [
  Const        r0, [{"person_id": 1}]
L31:
  // let char_name = [
  Const        r1, [{"id": 1, "name": "Hero Character"}]
  // let cast_info = [
  Const        r2, [{"movie_id": 1, "note": "(voice)", "person_id": 1, "person_role_id": 1, "role_id": 1}]
  // let company_name = [
  Const        r3, [{"country_code": "[us]", "id": 1}]
  // let info_type = [
  Const        r4, [{"id": 1, "info": "release dates"}]
L28:
  // let keyword = [
  Const        r5, [{"id": 1, "keyword": "hero"}]
L23:
  // let movie_companies = [
  Const        r6, [{"company_id": 1, "movie_id": 1}]
  // let movie_info = [
  Const        r7, [{"info": "Japan: Feb 2015", "info_type_id": 1, "movie_id": 1}]
L25:
  // let movie_keyword = [
  Const        r8, [{"keyword_id": 1, "movie_id": 1}]
L19:
  // let name = [
  Const        r9, [{"gender": "f", "id": 1, "name": "Ann Actress"}]
  // let role_type = [
  Const        r10, [{"id": 1, "role": "actress"}]
  // let title = [
  Const        r11, [{"id": 1, "production_year": 2015, "title": "Heroic Adventure"}]
  // from an in aka_name
  Const        r12, []
L22:
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r13, "note"
L21:
  // cn.country_code == "[us]" &&
  Const        r14, "country_code"
  // it.info == "release dates" &&
  Const        r15, "info"
L14:
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Const        r16, "keyword"
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r17, "starts_with"
  Const        r17, "contains"
  // n.gender == "f" &&
  Const        r17, "gender"
  // n.name.contains("An") &&
  Const        r18, "name"
L13:
  // rt.role == "actress" &&
  Const        r19, "role"
  // t.production_year > 2010 &&
  Const        r20, "production_year"
  // t.id == mi.movie_id &&
  Const        r21, "id"
  Const        r22, "movie_id"
  // cn.id == mc.company_id &&
  Const        r23, "company_id"
  // it.id == mi.info_type_id &&
  Const        r24, "info_type_id"
  // n.id == ci.person_id &&
  Const        r25, "person_id"
  // rt.id == ci.role_id &&
  Const        r26, "role_id"
  // chn.id == ci.person_role_id &&
  Const        r27, "person_role_id"
  // k.id == mk.keyword_id
  Const        r28, "keyword_id"
  // voiced_char_name: chn.name,
  Const        r29, "voiced_char_name"
  // voicing_actress_name: n.name,
  Const        r30, "voicing_actress_name"
  // voiced_action_movie_jap_eng: t.title
  Const        r31, "voiced_action_movie_jap_eng"
L29:
  Const        r32, "title"
  // from an in aka_name
  IterPrep     r33, r0
  Len          r34, r33
L32:
  Const        r35, 0
  Move         r36, r35
  LessInt      r37, r36, r34
  JumpIfFalse  r37, L0
L30:
  Index        r34, r33, r36
  Move         r33, r34
  // from chn in char_name
  IterPrep     r34, r1
  Len          r1, r34
  Move         r38, r35
L27:
  LessInt      r39, r38, r1
  JumpIfFalse  r39, L1
L26:
  Index        r1, r34, r38
  Move         r39, r1
  // from ci in cast_info
  IterPrep     r34, r2
  Len          r2, r34
L24:
  Move         r40, r35
  LessInt      r41, r40, r2
  JumpIfFalse  r41, L2
  Index        r2, r34, r40
  Move         r41, r2
L17:
  // from cn in company_name
  IterPrep     r34, r3
  Len          r2, r34
  Move         r3, r35
  LessInt      r42, r3, r2
  JumpIfFalse  r42, L3
L16:
  Index        r2, r34, r3
  Move         r42, r2
  // from it in info_type
  IterPrep     r34, r4
  Len          r2, r34
  Move         r4, r35
L18:
  LessInt      r43, r4, r2
  JumpIfFalse  r43, L4
  Index        r2, r34, r4
  Move         r43, r2
  // from k in keyword
  IterPrep     r2, r5
L15:
  Len          r5, r2
  Move         r44, r35
  LessInt      r45, r44, r5
  JumpIfFalse  r45, L5
  Index        r45, r2, r44
  Move         r2, r45
  // from mc in movie_companies
  IterPrep     r45, r6
  Len          r6, r45
  Move         r46, r35
  LessInt      r47, r46, r6
  JumpIfFalse  r47, L6
  Index        r6, r45, r46
  Move         r47, r6
  // from mi in movie_info
  IterPrep     r45, r7
  Len          r6, r45
  Move         r7, r35
  LessInt      r48, r7, r6
  JumpIfFalse  r48, L7
  Index        r6, r45, r7
  Move         r45, r6
  // from mk in movie_keyword
  IterPrep     r6, r8
  Len          r8, r6
  Move         r49, r35
  LessInt      r50, r49, r8
  JumpIfFalse  r50, L8
  Index        r8, r6, r49
  Move         r50, r8
  // from n in name
  IterPrep     r6, r9
  Len          r9, r6
  Move         r51, r35
  LessInt      r52, r51, r9
  JumpIfFalse  r52, L9
  Index        r9, r6, r51
  Move         r52, r9
  // from rt in role_type
  IterPrep     r6, r10
  Len          r9, r6
  Move         r10, r35
  LessInt      r53, r10, r9
  JumpIfFalse  r53, L10
  Index        r9, r6, r10
  Move         r53, r9
  // from t in title
  IterPrep     r6, r11
  Len          r9, r6
  Move         r11, r35
  LessInt      r54, r11, r9
  JumpIfFalse  r54, L11
  Index        r9, r6, r11
  Move         r54, r9
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Index        r9, r41, r13
  // t.production_year > 2010 &&
  Index        r13, r54, r20
  Const        r20, 2010
  Less         r55, r20, r13
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Const        r20, ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"]
  In           r56, r9, r20
  // cn.country_code == "[us]" &&
  Index        r9, r42, r14
  Const        r20, "[us]"
  Equal        r14, r9, r20
  // it.info == "release dates" &&
  Index        r9, r43, r15
  Const        r20, "release dates"
  Equal        r57, r9, r20
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  Index        r9, r2, r16
  Const        r20, ["hero", "martial-arts", "hand-to-hand-combat"]
  In           r16, r9, r20
  // mi.info != null &&
  Index        r9, r45, r15
  Const        r20, nil
  NotEqual     r58, r9, r20
  // n.gender == "f" &&
  Index        r9, r52, r17
  Const        r20, "f"
  Equal        r17, r9, r20
  // rt.role == "actress" &&
  Index        r9, r53, r19
  Const        r20, "actress"
  Equal        r19, r9, r20
  // t.id == mi.movie_id &&
  Index        r9, r54, r21
  Index        r20, r45, r22
  Equal        r59, r9, r20
  // t.id == mc.movie_id &&
  Index        r9, r54, r21
  Index        r20, r47, r22
  Equal        r60, r9, r20
  // t.id == ci.movie_id &&
  Index        r9, r54, r21
  Index        r20, r41, r22
  Equal        r61, r9, r20
  // t.id == mk.movie_id &&
  Index        r9, r54, r21
  Index        r20, r50, r22
  Equal        r62, r9, r20
  // mc.movie_id == ci.movie_id &&
  Index        r9, r47, r22
  Index        r20, r41, r22
  Equal        r63, r9, r20
  // mc.movie_id == mi.movie_id &&
  Index        r9, r47, r22
  Index        r20, r45, r22
  Equal        r64, r9, r20
  // mc.movie_id == mk.movie_id &&
  Index        r9, r47, r22
  Index        r20, r50, r22
  Equal        r65, r9, r20
  // mi.movie_id == ci.movie_id &&
  Index        r9, r45, r22
  Index        r20, r41, r22
  Equal        r66, r9, r20
  // mi.movie_id == mk.movie_id &&
  Index        r9, r45, r22
  Index        r20, r50, r22
  Equal        r67, r9, r20
  // ci.movie_id == mk.movie_id &&
  Index        r9, r41, r22
  Index        r20, r50, r22
  Equal        r22, r9, r20
  // cn.id == mc.company_id &&
  Index        r9, r42, r21
  Index        r20, r47, r23
  Equal        r42, r9, r20
  // it.id == mi.info_type_id &&
  Index        r23, r43, r21
  Index        r47, r45, r24
  Equal        r9, r23, r47
  // n.id == ci.person_id &&
  Index        r20, r52, r21
  Index        r43, r41, r25
  Equal        r24, r20, r43
  // rt.id == ci.role_id &&
  Index        r23, r53, r21
  Index        r47, r41, r26
  Equal        r20, r23, r47
  // n.id == an.person_id &&
  Index        r43, r52, r21
  Index        r53, r33, r25
  Equal        r26, r43, r53
  // ci.person_id == an.person_id &&
  Index        r23, r41, r25
  Index        r47, r33, r25
  Equal        r43, r23, r47
  // chn.id == ci.person_role_id &&
  Index        r53, r39, r21
  Index        r25, r41, r27
  Equal        r33, r53, r25
  // k.id == mk.keyword_id
  Index        r23, r2, r21
  Index        r47, r50, r28
  Equal        r27, r23, r47
  // ci.note in ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"] &&
  Move         r53, r56
  JumpIfFalse  r53, L12
  Move         r53, r14
  // cn.country_code == "[us]" &&
  JumpIfFalse  r53, L12
  Move         r53, r57
  // it.info == "release dates" &&
  JumpIfFalse  r53, L12
  Move         r53, r16
  // k.keyword in ["hero", "martial-arts", "hand-to-hand-combat"] &&
  JumpIfFalse  r53, L12
  Move         r53, r58
  // mi.info != null &&
  JumpIfFalse  r53, L12
  Index        r25, r45, r15
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Const        r21, "Japan:"
  Const        r2, 0
  Const        r28, 6
  Len          r50, r25
  LessEq       r23, r28, r50
  JumpIfFalse  r23, L13
  Slice        r47, r25, r2, r28
  Equal        r56, r47, r21
  Move         r57, r56
  Jump         L14
  Const        r57, false
  Move         r58, r57
  JumpIfFalse  r58, L15
  Index        r50, r45, r15
  Const        r23, "201"
  In           r25, r23, r50
  Move         r58, r25
  Index        r2, r45, r15
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  Const        r28, "USA:"
  Const        r21, 0
  Const        r47, 4
  Len          r56, r2
  LessEq       r57, r47, r56
  JumpIfFalse  r57, L16
  Slice        r50, r2, r21, r47
  Equal        r25, r50, r28
  Move         r56, r25
  Jump         L17
  Const        r56, false
  Move         r2, r56
  JumpIfFalse  r2, L18
  Index        r21, r45, r15
  In           r47, r23, r21
  Move         r2, r47
  // (mi.info.starts_with("Japan:") && mi.info.contains("201") ||
  Move         r28, r58
  JumpIfTrue   r28, L19
  Move         r28, r2
  // mi.info != null &&
  Move         r53, r28
  // mi.info.starts_with("USA:") && mi.info.contains("201")) &&
  JumpIfFalse  r53, L12
  Move         r53, r17
  // n.gender == "f" &&
  JumpIfFalse  r53, L12
  Index        r50, r52, r18
  // n.name.contains("An") &&
  Const        r25, "An"
  In           r56, r25, r50
  // n.gender == "f" &&
  Move         r53, r56
  // n.name.contains("An") &&
  JumpIfFalse  r53, L12
  Move         r53, r19
  // rt.role == "actress" &&
  JumpIfFalse  r53, L12
  Move         r53, r55
  // t.production_year > 2010 &&
  JumpIfFalse  r53, L12
  Move         r53, r59
  // t.id == mi.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r60
  // t.id == mc.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r61
  // t.id == ci.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r62
  // t.id == mk.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r63
  // mc.movie_id == ci.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r64
  // mc.movie_id == mi.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r65
  // mc.movie_id == mk.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r66
  // mi.movie_id == ci.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r67
  // mi.movie_id == mk.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r22
  // ci.movie_id == mk.movie_id &&
  JumpIfFalse  r53, L12
  Move         r53, r42
  // cn.id == mc.company_id &&
  JumpIfFalse  r53, L12
  Move         r53, r9
  // it.id == mi.info_type_id &&
  JumpIfFalse  r53, L12
  Move         r53, r24
  // n.id == ci.person_id &&
  JumpIfFalse  r53, L12
  Move         r53, r20
  // rt.id == ci.role_id &&
  JumpIfFalse  r53, L12
  Move         r53, r26
  // n.id == an.person_id &&
  JumpIfFalse  r53, L12
  Move         r53, r43
  // ci.person_id == an.person_id &&
  JumpIfFalse  r53, L12
  Move         r53, r33
  // chn.id == ci.person_role_id &&
  JumpIfFalse  r53, L12
  Move         r53, r27
L12:
  // where (
  JumpIfFalse  r53, L20
  // voiced_char_name: chn.name,
  Const        r15, "voiced_char_name"
  Index        r45, r39, r18
  // voicing_actress_name: n.name,
  Const        r23, "voicing_actress_name"
  Index        r21, r52, r18
  // voiced_action_movie_jap_eng: t.title
  Const        r16, "voiced_action_movie_jap_eng"
  Index        r47, r54, r32
  // voiced_char_name: chn.name,
  Move         r68, r15
  Move         r69, r45
  // voicing_actress_name: n.name,
  Move         r70, r23
  Move         r71, r21
  // voiced_action_movie_jap_eng: t.title
  Move         r72, r16
  Move         r73, r47
  // select {
  MakeMap      r17, 3, r68
  // from an in aka_name
  Append       r58, r12, r17
  Move         r12, r58
L20:
  // from t in title
  Const        r2, 1
  AddInt       r11, r11, r2
  Jump         L21
L11:
  // from rt in role_type
  AddInt       r10, r10, r2
  Jump         L22
L10:
  // from n in name
  AddInt       r51, r51, r2
  Jump         L23
L9:
  // from mk in movie_keyword
  AddInt       r49, r49, r2
  Jump         L24
L8:
  // from mi in movie_info
  AddInt       r7, r7, r2
  Jump         L25
L7:
  // from mc in movie_companies
  AddInt       r46, r46, r2
  Jump         L26
L6:
  // from k in keyword
  AddInt       r44, r44, r2
  Jump         L27
L5:
  // from it in info_type
  AddInt       r4, r4, r2
  Jump         L28
L4:
  // from cn in company_name
  AddInt       r3, r3, r2
  Jump         L29
L3:
  // from ci in cast_info
  AddInt       r40, r40, r2
  Jump         L30
L2:
  // from chn in char_name
  AddInt       r38, r38, r2
  Jump         L31
L1:
  // from an in aka_name
  AddInt       r36, r36, r2
  Jump         L32
L0:
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Const        r28, "voiced_char_name"
  Const        r55, []
  IterPrep     r19, r12
  Len          r59, r19
  Move         r60, r35
L34:
  LessInt      r61, r60, r59
  JumpIfFalse  r61, L33
  Index        r62, r19, r60
  Move         r57, r62
  Index        r63, r57, r29
  Append       r64, r55, r63
  Move         r55, r64
  AddInt       r60, r60, r2
  Jump         L34
L33:
  Min          r65, r55
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Const        r66, "voicing_actress_name"
  Const        r67, []
  IterPrep     r22, r12
  Len          r42, r22
  Move         r9, r35
L36:
  LessInt      r24, r9, r42
  JumpIfFalse  r24, L35
  Index        r20, r22, r9
  Move         r57, r20
  Index        r26, r57, r30
  Append       r43, r67, r26
  Move         r67, r43
  AddInt       r9, r9, r2
  Jump         L36
L35:
  Min          r33, r67
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Const        r27, "voiced_action_movie_jap_eng"
  Const        r53, []
  IterPrep     r50, r12
  Len          r25, r50
  Move         r56, r35
L38:
  LessInt      r39, r56, r25
  JumpIfFalse  r39, L37
  Index        r18, r50, r56
  Move         r57, r18
  Index        r32, r57, r31
  Append       r54, r53, r32
  Move         r53, r54
  AddInt       r56, r56, r2
  Jump         L38
L37:
  Min          r16, r53
  // voiced_char_name: min(from x in matches select x.voiced_char_name),
  Move         r68, r28
  Move         r69, r65
  // voicing_actress_name: min(from x in matches select x.voicing_actress_name),
  Move         r70, r66
  Move         r71, r33
  // voiced_action_movie_jap_eng: min(from x in matches select x.voiced_action_movie_jap_eng)
  Move         r72, r27
  Move         r73, r16
  // {
  MakeMap      r15, 3, r68
  Move         r45, r15
  // let result = [
  MakeList     r23, 1, r45
  // json(result)
  JSON         r23
  // expect result == [
  Const        r21, [{"voiced_action_movie_jap_eng": "Heroic Adventure", "voiced_char_name": "Hero Character", "voicing_actress_name": "Ann Actress"}]
  Equal        r47, r23, r21
  Expect       r47
  Return       r0
