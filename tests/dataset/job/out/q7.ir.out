func main (regs=192)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
  // let movie_link = [
  Const        r4, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
  // let name = [
  Const        r5, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
  // let person_info = [
  Const        r6, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  // from an in aka_name
  Const        r8, []
  // an.name.contains("a") &&
  Const        r9, "name"
  Const        r10, "contains"
  // it.info == "mini biography" &&
  Const        r11, "info"
  // lt.link == "features" &&
  Const        r12, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r13, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r14, "gender"
  Const        r15, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r16, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r17, "production_year"
  // pi.person_id == an.person_id &&
  Const        r18, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r19, "movie_id"
  Const        r20, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r21, "person_name"
  Const        r22, "movie_title"
  Const        r23, "title"
  // from an in aka_name
  IterPrep     r24, r0
  Len          r25, r24
  Const        r27, 0
  Move         r26, r27
L21:
  LessInt      r28, r26, r25
  JumpIfFalse  r28, L0
  Index        r29, r24, r26
  Move         r30, r29
  // join n in name on n.id == an.person_id
  IterPrep     r31, r5
  Len          r32, r31
  Const        r33, "id"
  Move         r34, r27
L20:
  LessInt      r35, r34, r32
  JumpIfFalse  r35, L1
  Index        r36, r31, r34
  Move         r37, r36
  Index        r38, r37, r33
  Index        r39, r30, r18
  Equal        r40, r38, r39
  JumpIfFalse  r40, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r41, r6
  Len          r42, r41
  Move         r43, r27
L19:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L2
  Index        r45, r41, r43
  Move         r46, r45
  Index        r47, r46, r18
  Index        r48, r30, r18
  Equal        r49, r47, r48
  JumpIfFalse  r49, L3
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r50, r2
  Len          r51, r50
  Const        r52, "info_type_id"
  Move         r53, r27
L18:
  LessInt      r54, r53, r51
  JumpIfFalse  r54, L3
  Index        r55, r50, r53
  Move         r56, r55
  Index        r57, r56, r33
  Index        r58, r46, r52
  Equal        r59, r57, r58
  JumpIfFalse  r59, L4
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r60, r1
  Len          r61, r60
  Move         r62, r27
L17:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r64, r60, r62
  Move         r65, r64
  Index        r66, r65, r18
  Index        r67, r37, r33
  Equal        r68, r66, r67
  JumpIfFalse  r68, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r69, r7
  Len          r70, r69
  Move         r71, r27
L16:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L5
  Index        r73, r69, r71
  Move         r74, r73
  Index        r75, r74, r33
  Index        r76, r65, r19
  Equal        r77, r75, r76
  JumpIfFalse  r77, L6
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r78, r4
  Len          r79, r78
  Move         r80, r27
L15:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L6
  Index        r82, r78, r80
  Move         r83, r82
  Index        r84, r83, r20
  Index        r85, r74, r33
  Equal        r86, r84, r85
  JumpIfFalse  r86, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r87, r3
  Len          r88, r87
  Const        r89, "link_type_id"
  Move         r90, r27
L14:
  LessInt      r91, r90, r88
  JumpIfFalse  r91, L7
  Index        r92, r87, r90
  Move         r93, r92
  Index        r94, r93, r33
  Index        r95, r83, r89
  Equal        r96, r94, r95
  JumpIfFalse  r96, L8
  Index        r97, r30, r9
  // an.name.contains("a") &&
  Const        r98, "a"
  In           r99, r98, r97
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Index        r100, r37, r13
  Const        r101, "A"
  LessEq       r102, r101, r100
  Index        r103, r37, r13
  Const        r104, "F"
  LessEq       r105, r103, r104
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Index        r106, r74, r17
  Const        r107, 1980
  LessEq       r108, r107, r106
  Index        r109, r74, r17
  Const        r110, 1995
  LessEq       r111, r109, r110
  // it.info == "mini biography" &&
  Index        r112, r56, r11
  Const        r113, "mini biography"
  Equal        r114, r112, r113
  // lt.link == "features" &&
  Index        r115, r93, r12
  Const        r116, "features"
  Equal        r117, r115, r116
  // pi.note == "Volker Boehm" &&
  Index        r118, r46, r16
  Const        r119, "Volker Boehm"
  Equal        r120, r118, r119
  // pi.person_id == an.person_id &&
  Index        r121, r46, r18
  Index        r122, r30, r18
  Equal        r123, r121, r122
  // pi.person_id == ci.person_id &&
  Index        r124, r46, r18
  Index        r125, r65, r18
  Equal        r126, r124, r125
  // an.person_id == ci.person_id &&
  Index        r127, r30, r18
  Index        r128, r65, r18
  Equal        r129, r127, r128
  // ci.movie_id == ml.linked_movie_id
  Index        r130, r65, r19
  Index        r131, r83, r20
  Equal        r132, r130, r131
  // an.name.contains("a") &&
  Move         r133, r99
  JumpIfFalse  r133, L9
  Move         r133, r114
  // it.info == "mini biography" &&
  JumpIfFalse  r133, L9
  Move         r133, r117
  // lt.link == "features" &&
  JumpIfFalse  r133, L9
  Move         r133, r102
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  JumpIfFalse  r133, L9
  Move         r133, r105
  JumpIfFalse  r133, L9
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Index        r134, r37, r14
  Const        r135, "m"
  Equal        r136, r134, r135
  Move         r137, r136
  JumpIfTrue   r137, L10
  Index        r138, r37, r14
  Const        r139, "f"
  Equal        r140, r138, r139
  Move         r141, r140
  JumpIfFalse  r141, L11
  Index        r142, r37, r9
  Const        r143, "B"
  Const        r144, 0
  Const        r145, 1
  Len          r146, r142
  LessEq       r147, r145, r146
  JumpIfFalse  r147, L12
  Slice        r149, r142, r144, r145
  Equal        r150, r149, r143
  Move         r148, r150
  Jump         L13
L12:
  Const        r148, false
L13:
  Move         r141, r148
L11:
  Move         r137, r141
L10:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r133, r137
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  JumpIfFalse  r133, L9
  Move         r133, r120
  // pi.note == "Volker Boehm" &&
  JumpIfFalse  r133, L9
  Move         r133, r108
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  JumpIfFalse  r133, L9
  Move         r133, r111
  JumpIfFalse  r133, L9
  Move         r133, r123
  // pi.person_id == an.person_id &&
  JumpIfFalse  r133, L9
  Move         r133, r126
  // pi.person_id == ci.person_id &&
  JumpIfFalse  r133, L9
  Move         r133, r129
  // an.person_id == ci.person_id &&
  JumpIfFalse  r133, L9
  Move         r133, r132
L9:
  // where (
  JumpIfFalse  r133, L8
  // select { person_name: n.name, movie_title: t.title }
  Const        r151, "person_name"
  Index        r152, r37, r9
  Const        r153, "movie_title"
  Index        r154, r74, r23
  Move         r155, r151
  Move         r156, r152
  Move         r157, r153
  Move         r158, r154
  MakeMap      r159, 2, r155
  // from an in aka_name
  Append       r160, r8, r159
  Move         r8, r160
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r161, 1
  Add          r90, r90, r161
  Jump         L14
L7:
  // join ml in movie_link on ml.linked_movie_id == t.id
  Add          r80, r80, r161
  Jump         L15
L6:
  // join t in title on t.id == ci.movie_id
  Add          r71, r71, r161
  Jump         L16
L5:
  // join ci in cast_info on ci.person_id == n.id
  Add          r62, r62, r161
  Jump         L17
L4:
  // join it in info_type on it.id == pi.info_type_id
  Add          r53, r53, r161
  Jump         L18
L3:
  // join pi in person_info on pi.person_id == an.person_id
  Add          r43, r43, r161
  Jump         L19
L2:
  // join n in name on n.id == an.person_id
  Add          r34, r34, r161
  Jump         L20
L1:
  // from an in aka_name
  AddInt       r26, r26, r161
  Jump         L21
L0:
  // of_person: min(from r in rows select r.person_name),
  Const        r162, "of_person"
  Const        r163, []
  IterPrep     r164, r8
  Len          r165, r164
  Move         r166, r27
L23:
  LessInt      r167, r166, r165
  JumpIfFalse  r167, L22
  Index        r168, r164, r166
  Move         r169, r168
  Index        r170, r169, r21
  Append       r171, r163, r170
  Move         r163, r171
  AddInt       r166, r166, r161
  Jump         L23
L22:
  Min          r172, r163
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r173, "biography_movie"
  Const        r174, []
  IterPrep     r175, r8
  Len          r176, r175
  Move         r177, r27
L25:
  LessInt      r178, r177, r176
  JumpIfFalse  r178, L24
  Index        r179, r175, r177
  Move         r169, r179
  Index        r180, r169, r22
  Append       r181, r174, r180
  Move         r174, r181
  AddInt       r177, r177, r161
  Jump         L25
L24:
  Min          r182, r174
  // of_person: min(from r in rows select r.person_name),
  Move         r183, r162
  Move         r184, r172
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r185, r173
  Move         r186, r182
  // {
  MakeMap      r187, 2, r183
  Move         r188, r187
  // let result = [
  MakeList     r189, 1, r188
  // json(result)
  JSON         r189
  // expect result == [
  Const        r190, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r191, r189, r190
  Expect       r191
  Return       r0
