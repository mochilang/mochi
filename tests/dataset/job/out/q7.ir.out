func main (regs=35)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
L13:
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
L11:
  // let info_type = [
  Const        r2, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
  // let movie_link = [
  Const        r4, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
L20:
  // let name = [
  Const        r5, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
L16:
  // let person_info = [
  Const        r6, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
L14:
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  // from an in aka_name
  Const        r8, []
L10:
  // an.name.contains("a") &&
  Const        r9, "name"
L8:
  Const        r10, "contains"
L23:
  // it.info == "mini biography" &&
  Const        r11, "info"
L1:
  // lt.link == "features" &&
  Const        r12, "link"
L15:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r13, "name_pcode_cf"
L4:
  Const        r14, "name_pcode_cf"
L18:
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r15, "gender"
L12:
  Const        r16, "gender"
L3:
  Const        r17, "name"
L19:
  Const        r18, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r19, "note"
L5:
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r20, "production_year"
L2:
  Const        r21, "production_year"
  // pi.person_id == an.person_id &&
  Const        r22, "person_id"
L17:
  Const        r23, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r24, "person_id"
L21:
  Const        r25, "person_id"
L9:
  // an.person_id == ci.person_id &&
  Const        r9, "person_id"
  Const        r10, "person_id"
L7:
  // ci.movie_id == ml.linked_movie_id
  Const        r11, "movie_id"
  Const        r12, "linked_movie_id"
L6:
  // select { person_name: n.name, movie_title: t.title }
  Const        r13, "person_name"
  Const        r14, "name"
  Const        r15, "movie_title"
L0:
  Const        r16, "title"
  // from an in aka_name
  IterPrep     r17, r0
  Len          r18, r17
  Const        r19, 0
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  // join n in name on n.id == an.person_id
  IterPrep     r22, r5
  Len          r23, r22
  Const        r24, "id"
  Const        r25, "person_id"
  // an.name.contains("a") &&
  Const        r9, "name"
  Const        r10, "contains"
  // it.info == "mini biography" &&
  Const        r11, "info"
  // lt.link == "features" &&
  Const        r12, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r13, "name_pcode_cf"
  Const        r14, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r15, "gender"
  Const        r16, "gender"
  Const        r18, "name"
  Const        r20, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r17, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r5, "production_year"
  Const        r24, "production_year"
  // pi.person_id == an.person_id &&
  Const        r25, "person_id"
  Const        r9, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r10, "person_id"
  Const        r11, "person_id"
  // an.person_id == ci.person_id &&
  Const        r12, "person_id"
  Const        r13, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r14, "movie_id"
  Const        r15, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r16, "person_name"
  Const        r18, "name"
  Const        r20, "movie_title"
  Const        r17, "title"
  // join n in name on n.id == an.person_id
  Const        r5, 0
  LessInt      r24, r5, r23
  JumpIfFalse  r24, L1
  Index        r25, r22, r5
  Const        r9, "id"
  Index        r10, r25, r9
  Const        r11, "person_id"
  Index        r12, r21, r11
  Equal        r13, r10, r12
  JumpIfFalse  r13, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r14, r6
  Len          r15, r14
  Const        r16, "person_id"
  Const        r18, "person_id"
  // an.name.contains("a") &&
  Const        r20, "name"
  Const        r17, "contains"
  // it.info == "mini biography" &&
  Const        r23, "info"
  // lt.link == "features" &&
  Const        r24, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r22, "name_pcode_cf"
  Const        r9, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r11, "gender"
  Const        r10, "gender"
  Const        r12, "name"
  Const        r13, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r6, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r16, "production_year"
  Const        r18, "production_year"
  // pi.person_id == an.person_id &&
  Const        r20, "person_id"
  Const        r17, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r23, "person_id"
  Const        r24, "person_id"
  // an.person_id == ci.person_id &&
  Const        r22, "person_id"
  Const        r9, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r11, "movie_id"
  Const        r10, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r12, "person_name"
  Const        r13, "name"
  Const        r6, "movie_title"
  Const        r16, "title"
  // join pi in person_info on pi.person_id == an.person_id
  Const        r18, 0
  LessInt      r20, r18, r15
  JumpIfFalse  r20, L2
  Index        r17, r14, r18
  Const        r23, "person_id"
  Index        r24, r17, r23
  Const        r22, "person_id"
  Index        r9, r21, r22
  Equal        r11, r24, r9
  JumpIfFalse  r11, L3
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r10, r2
  Len          r12, r10
  Const        r13, "id"
  Const        r6, "info_type_id"
  // an.name.contains("a") &&
  Const        r16, "name"
  Const        r15, "contains"
  // it.info == "mini biography" &&
  Const        r20, "info"
  // lt.link == "features" &&
  Const        r14, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r23, "name_pcode_cf"
  Const        r22, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r24, "gender"
  Const        r9, "gender"
  Const        r11, "name"
  Const        r2, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r13, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r6, "production_year"
  Const        r16, "production_year"
  // pi.person_id == an.person_id &&
  Const        r15, "person_id"
  Const        r20, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r14, "person_id"
  Const        r23, "person_id"
  // an.person_id == ci.person_id &&
  Const        r22, "person_id"
  Const        r24, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r9, "movie_id"
  Const        r11, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r2, "person_name"
  Const        r13, "name"
  Const        r6, "movie_title"
  Const        r16, "title"
  // join it in info_type on it.id == pi.info_type_id
  Const        r15, 0
  LessInt      r20, r15, r12
  JumpIfFalse  r20, L3
  Index        r14, r10, r15
  Const        r23, "id"
  Index        r22, r14, r23
  Const        r24, "info_type_id"
  Index        r9, r17, r24
  Equal        r11, r22, r9
  JumpIfFalse  r11, L4
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r2, r1
  Len          r13, r2
  Const        r6, "person_id"
  Const        r16, "id"
  // an.name.contains("a") &&
  Const        r12, "name"
  Const        r20, "contains"
  // it.info == "mini biography" &&
  Const        r10, "info"
  // lt.link == "features" &&
  Const        r23, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r24, "name_pcode_cf"
  Const        r22, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r9, "gender"
  Const        r11, "gender"
  Const        r1, "name"
  Const        r6, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r16, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r12, "production_year"
  Const        r20, "production_year"
  // pi.person_id == an.person_id &&
  Const        r10, "person_id"
  Const        r23, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r24, "person_id"
  Const        r22, "person_id"
  // an.person_id == ci.person_id &&
  Const        r9, "person_id"
  Const        r11, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r1, "movie_id"
  Const        r6, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r16, "person_name"
  Const        r12, "name"
  Const        r20, "movie_title"
  Const        r10, "title"
  // join ci in cast_info on ci.person_id == n.id
  Const        r23, 0
  LessInt      r24, r23, r13
  JumpIfFalse  r24, L4
  Index        r22, r2, r23
  Const        r9, "person_id"
  Index        r11, r22, r9
  Const        r1, "id"
  Index        r6, r25, r1
  Equal        r16, r11, r6
  JumpIfFalse  r16, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r12, r7
  Len          r20, r12
  Const        r10, "id"
  Const        r13, "movie_id"
  // an.name.contains("a") &&
  Const        r24, "name"
  Const        r2, "contains"
  // it.info == "mini biography" &&
  Const        r9, "info"
  // lt.link == "features" &&
  Const        r1, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r11, "name_pcode_cf"
  Const        r6, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r16, "gender"
  Const        r7, "gender"
  Const        r10, "name"
  Const        r13, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r24, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r2, "production_year"
  Const        r9, "production_year"
  // pi.person_id == an.person_id &&
  Const        r1, "person_id"
  Const        r11, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r6, "person_id"
  Const        r16, "person_id"
  // an.person_id == ci.person_id &&
  Const        r7, "person_id"
  Const        r10, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r13, "movie_id"
  Const        r24, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r2, "person_name"
  Const        r9, "name"
  Const        r1, "movie_title"
  Const        r11, "title"
  // join t in title on t.id == ci.movie_id
  Const        r6, 0
  LessInt      r16, r6, r20
  JumpIfFalse  r16, L5
  Index        r7, r12, r6
  Const        r10, "id"
  Index        r13, r7, r10
  Const        r24, "movie_id"
  Index        r2, r22, r24
  Equal        r9, r13, r2
  JumpIfFalse  r9, L6
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r1, r4
  Len          r11, r1
  Const        r20, "linked_movie_id"
  Const        r16, "id"
  // an.name.contains("a") &&
  Const        r12, "name"
  Const        r10, "contains"
  // it.info == "mini biography" &&
  Const        r24, "info"
  // lt.link == "features" &&
  Const        r13, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r2, "name_pcode_cf"
  Const        r9, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r4, "gender"
  Const        r20, "gender"
  Const        r16, "name"
  Const        r12, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r10, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r24, "production_year"
  Const        r13, "production_year"
  // pi.person_id == an.person_id &&
  Const        r2, "person_id"
  Const        r9, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r4, "person_id"
  Const        r20, "person_id"
  // an.person_id == ci.person_id &&
  Const        r16, "person_id"
  Const        r12, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r10, "movie_id"
  Const        r24, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r13, "person_name"
  Const        r2, "name"
  Const        r9, "movie_title"
  Const        r4, "title"
  // join ml in movie_link on ml.linked_movie_id == t.id
  Const        r20, 0
  LessInt      r16, r20, r11
  JumpIfFalse  r16, L6
  Index        r12, r1, r20
  Const        r10, "linked_movie_id"
  Index        r24, r12, r10
  Const        r13, "id"
  Index        r2, r7, r13
  Equal        r9, r24, r2
  JumpIfFalse  r9, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r4, r3
  Len          r11, r4
  Const        r16, "id"
  Const        r1, "link_type_id"
  // an.name.contains("a") &&
  Const        r10, "name"
  Const        r13, "contains"
  // it.info == "mini biography" &&
  Const        r24, "info"
  // lt.link == "features" &&
  Const        r2, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r9, "name_pcode_cf"
  Const        r3, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r16, "gender"
  Const        r1, "gender"
  Const        r10, "name"
  Const        r13, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r24, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r2, "production_year"
  Const        r9, "production_year"
  // pi.person_id == an.person_id &&
  Const        r3, "person_id"
  Const        r16, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r1, "person_id"
  Const        r10, "person_id"
  // an.person_id == ci.person_id &&
  Const        r13, "person_id"
  Const        r24, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r2, "movie_id"
  Const        r9, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r3, "person_name"
  Const        r16, "name"
  Const        r1, "movie_title"
  Const        r10, "title"
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r13, 0
  LessInt      r24, r13, r11
  JumpIfFalse  r24, L7
  Index        r2, r4, r13
  Const        r9, "id"
  Index        r3, r2, r9
  Const        r16, "link_type_id"
  Index        r1, r12, r16
  Equal        r10, r3, r1
  JumpIfFalse  r10, L8
  Const        r11, "name"
  Index        r24, r21, r11
  // an.name.contains("a") &&
  Const        r4, "a"
  In           r9, r4, r24
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r16, "name_pcode_cf"
  Index        r3, r25, r16
  Const        r1, "A"
  LessEq       r10, r1, r3
  Const        r11, "name_pcode_cf"
  Index        r24, r25, r11
  Const        r4, "F"
  LessEq       r16, r24, r4
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r3, "production_year"
  Index        r1, r7, r3
  Const        r11, 1980
  LessEq       r24, r11, r1
  Const        r4, "production_year"
  Index        r3, r7, r4
  Const        r1, 1995
  LessEq       r11, r3, r1
  // it.info == "mini biography" &&
  Const        r4, "info"
  Index        r3, r14, r4
  Const        r1, "mini biography"
  Equal        r14, r3, r1
  // lt.link == "features" &&
  Const        r4, "link"
  Index        r3, r2, r4
  Const        r1, "features"
  Equal        r2, r3, r1
  // pi.note == "Volker Boehm" &&
  Const        r4, "note"
  Index        r3, r17, r4
  Const        r1, "Volker Boehm"
  Equal        r4, r3, r1
  // pi.person_id == an.person_id &&
  Const        r3, "person_id"
  Index        r1, r17, r3
  Const        r3, "person_id"
  Index        r26, r21, r3
  Equal        r3, r1, r26
  // pi.person_id == ci.person_id &&
  Const        r1, "person_id"
  Index        r26, r17, r1
  Const        r17, "person_id"
  Index        r1, r22, r17
  Equal        r17, r26, r1
  // an.person_id == ci.person_id &&
  Const        r26, "person_id"
  Index        r1, r21, r26
  Const        r21, "person_id"
  Index        r26, r22, r21
  Equal        r21, r1, r26
  // ci.movie_id == ml.linked_movie_id
  Const        r1, "movie_id"
  Index        r26, r22, r1
  Const        r22, "linked_movie_id"
  Index        r1, r12, r22
  Equal        r12, r26, r1
  // an.name.contains("a") &&
  Move         r22, r9
  JumpIfFalse  r22, L9
  // it.info == "mini biography" &&
  Move         r26, r14
  JumpIfFalse  r26, L10
  // lt.link == "features" &&
  Move         r1, r2
  JumpIfFalse  r1, L4
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r9, r10
  JumpIfFalse  r9, L11
  Move         r22, r16
  JumpIfFalse  r22, L12
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r14, "gender"
  Index        r26, r25, r14
  Const        r2, "m"
  Equal        r1, r26, r2
  JumpIfTrue   r1, L12
  Const        r10, "gender"
  Index        r9, r25, r10
  Const        r16, "f"
  Equal        r22, r9, r16
  JumpIfFalse  r22, L12
  Const        r14, "name"
  Index        r26, r25, r14
  Const        r2, "B"
  Const        r1, 0
  Const        r10, 1
  Len          r9, r26
  LessEq       r16, r10, r9
  JumpIfFalse  r16, L10
  Slice        r14, r26, r1, r10
  Equal        r9, r14, r2
  Jump         L12
  Const        r22, false
  Move         r26, r22
  JumpIfFalse  r26, L9
  // pi.note == "Volker Boehm" &&
  Move         r1, r4
  JumpIfFalse  r1, L13
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Move         r10, r24
  JumpIfFalse  r10, L8
  Move         r2, r11
  JumpIfFalse  r2, L7
  // pi.person_id == an.person_id &&
  Move         r14, r3
  JumpIfFalse  r14, L6
  // pi.person_id == ci.person_id &&
  Move         r9, r17
  JumpIfFalse  r9, L14
  // an.person_id == ci.person_id &&
  Move         r16, r21
  JumpIfFalse  r16, L4
  Move         r16, r12
  // where (
  JumpIfFalse  r16, L8
  // select { person_name: n.name, movie_title: t.title }
  Const        r22, "person_name"
  Const        r26, "name"
  Index        r4, r25, r26
  Const        r1, "movie_title"
  Const        r24, "title"
  Index        r10, r7, r24
  Move         r27, r22
  Move         r28, r4
  Move         r29, r1
  Move         r30, r10
  MakeMap      r11, 2, r27
  // from an in aka_name
  Append       r8, r8, r11
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r2, 1
  Add          r13, r13, r2
  Jump         L15
  // join ml in movie_link on ml.linked_movie_id == t.id
  Const        r3, 1
  Add          r20, r20, r3
  Jump         L5
  // join t in title on t.id == ci.movie_id
  Const        r14, 1
  Add          r6, r6, r14
  Jump         L16
  // join ci in cast_info on ci.person_id == n.id
  Const        r17, 1
  Add          r23, r23, r17
  Jump         L17
  // join it in info_type on it.id == pi.info_type_id
  Const        r21, 1
  Add          r15, r15, r21
  Jump         L18
  // join pi in person_info on pi.person_id == an.person_id
  Const        r12, 1
  Add          r18, r18, r12
  Jump         L19
  // join n in name on n.id == an.person_id
  Const        r16, 1
  Add          r5, r5, r16
  Jump         L20
  // from an in aka_name
  Const        r9, 1
  AddInt       r19, r19, r9
  Jump         L21
  // of_person: min(from r in rows select r.person_name),
  Const        r26, "of_person"
  Const        r7, []
  Const        r24, "person_name"
  IterPrep     r22, r8
  Len          r4, r22
  Const        r1, 0
  LessInt      r10, r1, r4
  JumpIfFalse  r10, L22
  Index        r27, r22, r1
  Const        r28, "person_name"
  Index        r29, r27, r28
  Append       r7, r7, r29
  Const        r30, 1
  AddInt       r1, r1, r30
  Jump         L23
L22:
  Min          r13, r7
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r2, "biography_movie"
  Const        r20, []
  Const        r3, "movie_title"
  IterPrep     r6, r8
  Len          r14, r6
  Const        r23, 0
L25:
  LessInt      r17, r23, r14
  JumpIfFalse  r17, L24
  Index        r27, r6, r23
  Const        r15, "movie_title"
  Index        r21, r27, r15
  Append       r20, r20, r21
  Const        r18, 1
  AddInt       r23, r23, r18
  Jump         L25
L24:
  Min          r12, r20
  // of_person: min(from r in rows select r.person_name),
  Move         r31, r26
  Move         r32, r13
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r33, r2
  Move         r34, r12
  // {
  MakeMap      r5, 2, r31
  // let result = [
  MakeList     r16, 1, r5
  // json(result)
  JSON         r16
  // expect result == [
  Const        r19, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r11, r16, r19
  Expect       r11
  Return       r0
