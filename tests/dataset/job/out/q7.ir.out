func main (regs=39)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
L15:
  // let link_type = [
  Const        r3, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
  // let movie_link = [
  Const        r4, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
L0:
  // let name = [
  Const        r5, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
L11:
  // let person_info = [
  Const        r6, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  // from an in aka_name
  Const        r8, []
L12:
  // an.name.contains("a") &&
  Const        r9, "name"
  // it.info == "mini biography" &&
  Const        r10, "info"
  // lt.link == "features" &&
  Const        r11, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r12, "name_pcode_cf"
L10:
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r13, "gender"
  // pi.note == "Volker Boehm" &&
  Const        r14, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r15, "production_year"
  // pi.person_id == an.person_id &&
  Const        r16, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r17, "movie_id"
  Const        r18, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r19, "person_name"
  Const        r20, "movie_title"
  Const        r21, "title"
L4:
  // from an in aka_name
  IterPrep     r22, r0
  Len          r23, r22
L6:
  Const        r24, 0
L1:
  Move         r25, r24
  LessInt      r26, r25, r23
L13:
  JumpIfFalse  r26, L0
L17:
  Index        r26, r22, r25
L2:
  // join n in name on n.id == an.person_id
  IterPrep     r25, r5
  Len          r5, r25
  Const        r22, "id"
L16:
  Move         r23, r24
  LessInt      r27, r23, r5
  JumpIfFalse  r27, L1
  Index        r27, r25, r23
  Index        r25, r27, r22
L8:
  Index        r5, r26, r16
  Equal        r28, r25, r5
  JumpIfFalse  r28, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r28, r6
  Len          r6, r28
  Move         r5, r24
  LessInt      r25, r5, r6
  JumpIfFalse  r25, L2
  Index        r25, r28, r5
  Index        r5, r25, r16
  Index        r28, r26, r16
  Equal        r6, r5, r28
  JumpIfFalse  r6, L0
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r6, r2
  Len          r2, r6
  Const        r28, "info_type_id"
  Move         r5, r24
  LessInt      r29, r5, r2
  JumpIfFalse  r29, L0
  Index        r2, r6, r5
  Index        r6, r2, r22
  Index        r30, r25, r28
  Equal        r28, r6, r30
  JumpIfFalse  r28, L3
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r28, r1
  Len          r1, r28
  Move         r30, r24
  LessInt      r6, r30, r1
  JumpIfFalse  r6, L3
  Index        r6, r28, r30
  Index        r28, r6, r16
  Index        r1, r27, r22
  Equal        r31, r28, r1
  JumpIfFalse  r31, L0
  // join t in title on t.id == ci.movie_id
  IterPrep     r31, r7
  Len          r7, r31
  Move         r1, r24
  LessInt      r28, r1, r7
  JumpIfFalse  r28, L0
  Index        r28, r31, r1
  Index        r31, r28, r22
  Index        r7, r6, r17
  Equal        r32, r31, r7
  JumpIfFalse  r32, L4
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r32, r4
  Len          r4, r32
  Move         r7, r24
  LessInt      r31, r7, r4
  JumpIfFalse  r31, L4
  Index        r31, r32, r7
  Index        r32, r31, r18
  Index        r4, r28, r22
  Equal        r33, r32, r4
  JumpIfFalse  r33, L5
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r33, r3
  Len          r3, r33
  Const        r4, "link_type_id"
  Move         r34, r24
  LessInt      r35, r34, r3
  JumpIfFalse  r35, L5
  Index        r35, r33, r34
  Index        r33, r35, r22
  Index        r3, r31, r4
  Equal        r4, r33, r3
  JumpIfFalse  r4, L6
  Index        r4, r26, r9
  // an.name.contains("a") &&
  Const        r33, "a"
  In           r36, r33, r4
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Index        r33, r27, r12
  Const        r4, "A"
  LessEq       r37, r4, r33
  Index        r4, r27, r12
  Const        r12, "F"
  LessEq       r33, r4, r12
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Index        r12, r28, r15
  Const        r4, 1980
  LessEq       r38, r4, r12
  Index        r4, r28, r15
  Const        r15, 1995
  LessEq       r12, r4, r15
  // it.info == "mini biography" &&
  Index        r15, r2, r10
  Const        r2, "mini biography"
  Equal        r10, r15, r2
  // lt.link == "features" &&
  Index        r2, r35, r11
  Const        r35, "features"
  Equal        r11, r2, r35
  // pi.note == "Volker Boehm" &&
  Index        r35, r25, r14
  Const        r14, "Volker Boehm"
  Equal        r2, r35, r14
  // pi.person_id == an.person_id &&
  Index        r14, r25, r16
  Index        r35, r26, r16
  Equal        r15, r14, r35
  // pi.person_id == ci.person_id &&
  Index        r35, r25, r16
  Index        r25, r6, r16
  Equal        r14, r35, r25
  // an.person_id == ci.person_id &&
  Index        r25, r26, r16
  Index        r26, r6, r16
  Equal        r16, r25, r26
  // ci.movie_id == ml.linked_movie_id
  Index        r26, r6, r17
  Index        r6, r31, r18
  Equal        r31, r26, r6
  // an.name.contains("a") &&
  Move         r6, r36
  JumpIfFalse  r6, L7
L7:
  // it.info == "mini biography" &&
  Move         r6, r10
  JumpIfFalse  r6, L8
  // lt.link == "features" &&
  Move         r6, r11
  JumpIfFalse  r6, L9
L9:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r6, r37
  JumpIfFalse  r6, L10
  Move         r6, r33
  JumpIfFalse  r6, L10
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Index        r6, r27, r13
  Const        r33, "m"
  Equal        r37, r6, r33
  JumpIfTrue   r37, L10
  Index        r37, r27, r13
  Const        r13, "f"
  Equal        r33, r37, r13
  JumpIfFalse  r33, L10
  Index        r13, r27, r9
  Const        r37, 1
  Len          r6, r13
  LessEq       r13, r37, r6
  JumpIfFalse  r13, L11
  Jump         L10
  Const        r33, false
  Move         r6, r33
  JumpIfFalse  r6, L12
  // pi.note == "Volker Boehm" &&
  Move         r6, r2
  JumpIfFalse  r6, L11
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Move         r6, r38
  JumpIfFalse  r6, L13
  Move         r6, r12
  JumpIfFalse  r6, L14
L14:
  // pi.person_id == an.person_id &&
  Move         r6, r15
  JumpIfFalse  r6, L8
  // pi.person_id == ci.person_id &&
  Move         r6, r14
  JumpIfFalse  r6, L0
  // an.person_id == ci.person_id &&
  Move         r6, r16
  JumpIfFalse  r6, L15
  Move         r6, r31
  // where (
  JumpIfFalse  r6, L6
  // select { person_name: n.name, movie_title: t.title }
  Move         r6, r19
  Index        r13, r27, r9
  Move         r27, r20
  Index        r9, r28, r21
  Move         r21, r6
  Move         r6, r13
  Move         r13, r27
  Move         r27, r9
  MakeMap      r9, 2, r21
  // from an in aka_name
  Append       r8, r8, r9
  // join lt in link_type on lt.id == ml.link_type_id
  Move         r9, r37
  Add          r34, r34, r9
  Jump         L15
L5:
  // join ml in movie_link on ml.linked_movie_id == t.id
  Add          r7, r7, r9
  Jump         L16
  // join t in title on t.id == ci.movie_id
  Add          r1, r1, r9
  Jump         L17
  // join ci in cast_info on ci.person_id == n.id
  Add          r30, r30, r9
  Jump         L8
L3:
  // join it in info_type on it.id == pi.info_type_id
  Add          r5, r5, r9
  Jump         L2
  // join n in name on n.id == an.person_id
  Add          r23, r23, r9
  Jump         L4
  // of_person: min(from r in rows select r.person_name),
  Const        r37, "of_person"
  Const        r29, []
  IterPrep     r5, r8
  Len          r23, r5
  Move         r22, r24
L19:
  LessInt      r3, r22, r23
  JumpIfFalse  r3, L18
  Index        r3, r5, r22
  Index        r5, r3, r19
  Append       r29, r29, r5
  AddInt       r22, r22, r9
  Jump         L19
L18:
  Min          r5, r29
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r29, "biography_movie"
  Const        r22, []
  IterPrep     r19, r8
  Len          r8, r19
  Move         r23, r24
L21:
  LessInt      r24, r23, r8
  JumpIfFalse  r24, L20
  Index        r3, r19, r23
  Index        r24, r3, r20
  Append       r22, r22, r24
  AddInt       r23, r23, r9
  Jump         L21
L20:
  Min          r24, r22
  // of_person: min(from r in rows select r.person_name),
  Move         r22, r37
  Move         r37, r5
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r5, r29
  Move         r29, r24
  // {
  MakeMap      r24, 2, r22
  // let result = [
  MakeList     r29, 1, r24
  // json(result)
  JSON         r29
  // expect result == [
  Const        r24, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r5, r29, r24
  Expect       r5
  Return       r0
