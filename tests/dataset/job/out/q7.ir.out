func main (regs=247)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
  Move         r1, r0
  // let cast_info = [
  Const        r2, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
  Move         r3, r2
  // let info_type = [
  Const        r4, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
  Move         r5, r4
  // let link_type = [
  Const        r6, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
  Move         r7, r6
  // let movie_link = [
  Const        r8, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
  Move         r9, r8
  // let name = [
  Const        r10, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
  Move         r11, r10
  // let person_info = [
  Const        r12, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
  Move         r13, r12
  // let title = [
  Const        r14, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  Move         r15, r14
  // from an in aka_name
  Const        r16, []
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, 0
L30:
  Less         r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join n in name on n.id == an.person_id
  IterPrep     r23, r11
  Len          r24, r23
  Const        r25, 0
L29:
  Less         r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "id"
  Index        r30, r28, r29
  Const        r31, "person_id"
  Index        r32, r22, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r34, r13
  Len          r35, r34
  Const        r36, 0
L28:
  Less         r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "person_id"
  Index        r41, r39, r40
  Const        r42, "person_id"
  Index        r43, r22, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r45, r5
  Len          r46, r45
  Const        r47, 0
L27:
  Less         r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "id"
  Index        r52, r50, r51
  Const        r53, "info_type_id"
  Index        r54, r39, r53
  Equal        r55, r52, r54
  JumpIfFalse  r55, L4
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, 0
L26:
  Less         r59, r58, r57
  JumpIfFalse  r59, L4
  Index        r60, r56, r58
  Move         r61, r60
  Const        r62, "person_id"
  Index        r63, r61, r62
  Const        r64, "id"
  Index        r65, r28, r64
  Equal        r66, r63, r65
  JumpIfFalse  r66, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r67, r15
  Len          r68, r67
  Const        r69, 0
L25:
  Less         r70, r69, r68
  JumpIfFalse  r70, L5
  Index        r71, r67, r69
  Move         r72, r71
  Const        r73, "id"
  Index        r74, r72, r73
  Const        r75, "movie_id"
  Index        r76, r61, r75
  Equal        r77, r74, r76
  JumpIfFalse  r77, L6
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r78, r9
  Len          r79, r78
  Const        r80, 0
L24:
  Less         r81, r80, r79
  JumpIfFalse  r81, L6
  Index        r82, r78, r80
  Move         r83, r82
  Const        r84, "linked_movie_id"
  Index        r85, r83, r84
  Const        r86, "id"
  Index        r87, r72, r86
  Equal        r88, r85, r87
  JumpIfFalse  r88, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r89, r7
  Len          r90, r89
  Const        r91, 0
L23:
  Less         r92, r91, r90
  JumpIfFalse  r92, L7
  Index        r93, r89, r91
  Move         r94, r93
  Const        r95, "id"
  Index        r96, r94, r95
  Const        r97, "link_type_id"
  Index        r98, r83, r97
  Equal        r99, r96, r98
  JumpIfFalse  r99, L8
  Const        r100, "name"
  Index        r101, r22, r100
  // an.name.contains("a") &&
  Const        r102, "a"
  In           r103, r102, r101
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r104, "name_pcode_cf"
  Index        r105, r28, r104
  Const        r106, "A"
  LessEq       r107, r106, r105
  Const        r108, "name_pcode_cf"
  Index        r109, r28, r108
  Const        r110, "F"
  LessEq       r111, r109, r110
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r112, "production_year"
  Index        r113, r72, r112
  Const        r114, 1980
  LessEq       r115, r114, r113
  Const        r116, "production_year"
  Index        r117, r72, r116
  Const        r118, 1995
  LessEq       r119, r117, r118
  // it.info == "mini biography" &&
  Const        r120, "info"
  Index        r121, r50, r120
  Const        r122, "mini biography"
  Equal        r123, r121, r122
  // lt.link == "features" &&
  Const        r124, "link"
  Index        r125, r94, r124
  Const        r126, "features"
  Equal        r127, r125, r126
  // pi.note == "Volker Boehm" &&
  Const        r128, "note"
  Index        r129, r39, r128
  Const        r130, "Volker Boehm"
  Equal        r131, r129, r130
  // pi.person_id == an.person_id &&
  Const        r132, "person_id"
  Index        r133, r39, r132
  Const        r134, "person_id"
  Index        r135, r22, r134
  Equal        r136, r133, r135
  // pi.person_id == ci.person_id &&
  Const        r137, "person_id"
  Index        r138, r39, r137
  Const        r139, "person_id"
  Index        r140, r61, r139
  Equal        r141, r138, r140
  // an.person_id == ci.person_id &&
  Const        r142, "person_id"
  Index        r143, r22, r142
  Const        r144, "person_id"
  Index        r145, r61, r144
  Equal        r146, r143, r145
  // ci.movie_id == ml.linked_movie_id
  Const        r147, "movie_id"
  Index        r148, r61, r147
  Const        r149, "linked_movie_id"
  Index        r150, r83, r149
  Equal        r151, r148, r150
  // an.name.contains("a") &&
  Move         r152, r103
  JumpIfFalse  r152, L9
  Move         r152, r123
L9:
  // it.info == "mini biography" &&
  Move         r153, r152
  JumpIfFalse  r153, L10
  Move         r153, r127
L10:
  // lt.link == "features" &&
  Move         r154, r153
  JumpIfFalse  r154, L11
  Move         r154, r107
L11:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r155, r154
  JumpIfFalse  r155, L12
  Move         r155, r111
L12:
  Move         r156, r155
  JumpIfFalse  r156, L13
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r157, "gender"
  Index        r158, r28, r157
  Const        r159, "m"
  Equal        r160, r158, r159
  Move         r161, r160
  JumpIfTrue   r161, L14
  Const        r162, "gender"
  Index        r163, r28, r162
  Const        r164, "f"
  Equal        r165, r163, r164
  Move         r166, r165
  JumpIfFalse  r166, L15
  Const        r167, "name"
  Index        r168, r28, r167
  Const        r169, "B"
  Const        r170, 0
  Len          r171, r169
  Slice        r172, r168, r170, r171
  Equal        r173, r172, r169
  Move         r166, r173
L15:
  Move         r161, r166
L14:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r156, r161
L13:
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Move         r174, r156
  JumpIfFalse  r174, L16
  Move         r174, r131
L16:
  // pi.note == "Volker Boehm" &&
  Move         r175, r174
  JumpIfFalse  r175, L17
  Move         r175, r115
L17:
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Move         r176, r175
  JumpIfFalse  r176, L18
  Move         r176, r119
L18:
  Move         r177, r176
  JumpIfFalse  r177, L19
  Move         r177, r136
L19:
  // pi.person_id == an.person_id &&
  Move         r178, r177
  JumpIfFalse  r178, L20
  Move         r178, r141
L20:
  // pi.person_id == ci.person_id &&
  Move         r179, r178
  JumpIfFalse  r179, L21
  Move         r179, r146
L21:
  // an.person_id == ci.person_id &&
  Move         r180, r179
  JumpIfFalse  r180, L22
  Move         r180, r151
L22:
  // where (
  JumpIfFalse  r180, L8
  // select { person_name: n.name, movie_title: t.title }
  Const        r181, "person_name"
  Const        r182, "name"
  Index        r183, r28, r182
  Const        r184, "movie_title"
  Const        r185, "title"
  Index        r186, r72, r185
  Move         r187, r181
  Move         r188, r183
  Move         r189, r184
  Move         r190, r186
  MakeMap      r191, 2, r187
  // from an in aka_name
  Append       r192, r16, r191
  Move         r16, r192
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r193, 1
  Add          r194, r91, r193
  Move         r91, r194
  Jump         L23
L7:
  // join ml in movie_link on ml.linked_movie_id == t.id
  Const        r195, 1
  Add          r196, r80, r195
  Move         r80, r196
  Jump         L24
L6:
  // join t in title on t.id == ci.movie_id
  Const        r197, 1
  Add          r198, r69, r197
  Move         r69, r198
  Jump         L25
L5:
  // join ci in cast_info on ci.person_id == n.id
  Const        r199, 1
  Add          r200, r58, r199
  Move         r58, r200
  Jump         L26
L4:
  // join it in info_type on it.id == pi.info_type_id
  Const        r201, 1
  Add          r202, r47, r201
  Move         r47, r202
  Jump         L27
L3:
  // join pi in person_info on pi.person_id == an.person_id
  Const        r203, 1
  Add          r204, r36, r203
  Move         r36, r204
  Jump         L28
L2:
  // join n in name on n.id == an.person_id
  Const        r205, 1
  Add          r206, r25, r205
  Move         r25, r206
  Jump         L29
L1:
  // from an in aka_name
  Const        r207, 1
  Add          r208, r19, r207
  Move         r19, r208
  Jump         L30
L0:
  // let rows =
  Move         r209, r16
  // of_person: min(from r in rows select r.person_name),
  Const        r210, "of_person"
  Const        r211, []
  IterPrep     r212, r209
  Len          r213, r212
  Const        r214, 0
L32:
  Less         r215, r214, r213
  JumpIfFalse  r215, L31
  Index        r216, r212, r214
  Move         r217, r216
  Const        r218, "person_name"
  Index        r219, r217, r218
  Append       r220, r211, r219
  Move         r211, r220
  Const        r221, 1
  Add          r222, r214, r221
  Move         r214, r222
  Jump         L32
L31:
  Min          r223, r211
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r224, "biography_movie"
  Const        r225, []
  IterPrep     r226, r209
  Len          r227, r226
  Const        r228, 0
L34:
  Less         r229, r228, r227
  JumpIfFalse  r229, L33
  Index        r230, r226, r228
  Move         r217, r230
  Const        r231, "movie_title"
  Index        r232, r217, r231
  Append       r233, r225, r232
  Move         r225, r233
  Const        r234, 1
  Add          r235, r228, r234
  Move         r228, r235
  Jump         L34
L33:
  Min          r236, r225
  // of_person: min(from r in rows select r.person_name),
  Move         r237, r210
  Move         r238, r223
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r239, r224
  Move         r240, r236
  // {
  MakeMap      r241, 2, r237
  Move         r242, r241
  // let result = [
  MakeList     r243, 1, r242
  Move         r244, r243
  // json(result)
  JSON         r244
  // expect result == [
  Const        r245, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r246, r244, r245
  Expect       r246
  Return       r0
