func main (regs=49)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
L18:
  // let info_type = [
  Const        r2, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
L16:
  // let movie_link = [
  Const        r4, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
L20:
  // let name = [
  Const        r5, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
  // let person_info = [
  Const        r6, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  // from an in aka_name
  Const        r8, []
  // an.name.contains("a") &&
  Const        r9, "name"
  Const        r10, "contains"
  // it.info == "mini biography" &&
  Const        r10, "info"
L11:
  // lt.link == "features" &&
  Const        r11, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r12, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r13, "gender"
  Const        r14, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r14, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r15, "production_year"
L12:
  // pi.person_id == an.person_id &&
  Const        r16, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r17, "movie_id"
  Const        r18, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r19, "person_name"
  Const        r20, "movie_title"
L19:
  Const        r21, "title"
  // from an in aka_name
  IterPrep     r22, r0
  Len          r23, r22
L21:
  Const        r24, 0
L14:
  Move         r25, r24
  LessInt      r26, r25, r23
  JumpIfFalse  r26, L0
  Index        r23, r22, r25
  Move         r22, r23
L17:
  // join n in name on n.id == an.person_id
  IterPrep     r23, r5
  Len          r5, r23
  Const        r27, "id"
  Move         r28, r24
  LessInt      r29, r28, r5
  JumpIfFalse  r29, L1
  Index        r5, r23, r28
L15:
  Move         r29, r5
L13:
  Index        r23, r29, r27
  Index        r30, r22, r16
  Equal        r31, r23, r30
L10:
  JumpIfFalse  r31, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r23, r6
  Len          r30, r23
  Move         r31, r24
  LessInt      r6, r31, r30
  JumpIfFalse  r6, L2
  Index        r30, r23, r31
  Move         r6, r30
  Index        r23, r6, r16
  Index        r30, r22, r16
  Equal        r32, r23, r30
  JumpIfFalse  r32, L3
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r30, r2
  Len          r32, r30
  Const        r2, "info_type_id"
  Move         r33, r24
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L3
  Index        r32, r30, r33
  Move         r34, r32
  Index        r30, r34, r27
  Index        r32, r6, r2
  Equal        r2, r30, r32
  JumpIfFalse  r2, L4
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r30, r1
  Len          r32, r30
  Move         r1, r24
  LessInt      r35, r1, r32
  JumpIfFalse  r35, L4
  Index        r32, r30, r1
  Move         r35, r32
  Index        r30, r35, r16
  Index        r32, r29, r27
  Equal        r36, r30, r32
  JumpIfFalse  r36, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r30, r7
  Len          r32, r30
  Move         r36, r24
  LessInt      r7, r36, r32
  JumpIfFalse  r7, L5
  Index        r7, r30, r36
  Move         r30, r7
  Index        r7, r30, r27
  Index        r37, r35, r17
  Equal        r38, r7, r37
  JumpIfFalse  r38, L6
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r7, r4
  Len          r37, r7
  Move         r38, r24
  LessInt      r4, r38, r37
  JumpIfFalse  r4, L6
  Index        r37, r7, r38
  Move         r7, r37
  Index        r37, r7, r18
  Index        r39, r30, r27
  Equal        r40, r37, r39
  JumpIfFalse  r40, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r37, r3
  Len          r39, r37
  Const        r40, "link_type_id"
  Move         r3, r24
  LessInt      r41, r3, r39
  JumpIfFalse  r41, L7
  Index        r39, r37, r3
  Move         r41, r39
  Index        r37, r41, r27
  Index        r27, r7, r40
  Equal        r40, r37, r27
  JumpIfFalse  r40, L8
  Index        r37, r22, r9
  // an.name.contains("a") &&
  Const        r27, "a"
  In           r40, r27, r37
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Index        r37, r29, r12
  Const        r27, "A"
  LessEq       r42, r27, r37
  Index        r37, r29, r12
  Const        r27, "F"
  LessEq       r12, r37, r27
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Index        r37, r30, r15
  Const        r43, 1980
  LessEq       r44, r43, r37
  Index        r37, r30, r15
  Const        r43, 1995
  LessEq       r15, r37, r43
  // it.info == "mini biography" &&
  Index        r37, r34, r10
  Const        r43, "mini biography"
  Equal        r10, r37, r43
  // lt.link == "features" &&
  Index        r34, r41, r11
  Const        r37, "features"
  Equal        r43, r34, r37
  // pi.note == "Volker Boehm" &&
  Index        r11, r6, r14
  Const        r41, "Volker Boehm"
  Equal        r34, r11, r41
  // pi.person_id == an.person_id &&
  Index        r37, r6, r16
  Index        r14, r22, r16
  Equal        r11, r37, r14
  // pi.person_id == ci.person_id &&
  Index        r41, r6, r16
  Index        r37, r35, r16
  Equal        r14, r41, r37
  // an.person_id == ci.person_id &&
  Index        r6, r22, r16
  Index        r41, r35, r16
  Equal        r37, r6, r41
  // ci.movie_id == ml.linked_movie_id
  Index        r22, r35, r17
  Index        r16, r7, r18
  Equal        r6, r22, r16
  // an.name.contains("a") &&
  Move         r41, r40
  JumpIfFalse  r41, L9
  Move         r41, r10
  // it.info == "mini biography" &&
  JumpIfFalse  r41, L9
  Move         r41, r43
  // lt.link == "features" &&
  JumpIfFalse  r41, L9
  Move         r41, r42
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  JumpIfFalse  r41, L9
  Move         r41, r12
  JumpIfFalse  r41, L9
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Index        r17, r29, r13
  Const        r35, "m"
  Equal        r18, r17, r35
  Move         r7, r18
  JumpIfTrue   r7, L10
  Index        r22, r29, r13
  Const        r16, "f"
  Equal        r40, r22, r16
  Move         r42, r40
  JumpIfFalse  r42, L11
  Index        r12, r29, r9
  Const        r10, "B"
  Const        r43, 0
  Const        r17, 1
  Len          r35, r12
  LessEq       r18, r17, r35
  JumpIfFalse  r18, L12
  Slice        r13, r12, r43, r17
  Equal        r22, r13, r10
  Move         r16, r22
  Jump         L13
  Const        r16, false
  Move         r42, r16
  Move         r7, r42
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r41, r7
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  JumpIfFalse  r41, L9
  Move         r41, r34
  // pi.note == "Volker Boehm" &&
  JumpIfFalse  r41, L9
  Move         r41, r44
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  JumpIfFalse  r41, L9
  Move         r41, r15
  JumpIfFalse  r41, L9
  Move         r41, r11
  // pi.person_id == an.person_id &&
  JumpIfFalse  r41, L9
  Move         r41, r14
  // pi.person_id == ci.person_id &&
  JumpIfFalse  r41, L9
  Move         r41, r37
  // an.person_id == ci.person_id &&
  JumpIfFalse  r41, L9
  Move         r41, r6
L9:
  // where (
  JumpIfFalse  r41, L8
  // select { person_name: n.name, movie_title: t.title }
  Const        r35, "person_name"
  Index        r18, r29, r9
  Const        r12, "movie_title"
  Index        r43, r30, r21
  Move         r45, r35
  Move         r46, r18
  Move         r47, r12
  Move         r48, r43
  MakeMap      r17, 2, r45
  // from an in aka_name
  Append       r10, r8, r17
  Move         r8, r10
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r13, 1
  Add          r3, r3, r13
  Jump         L14
L7:
  // join ml in movie_link on ml.linked_movie_id == t.id
  Add          r38, r38, r13
  Jump         L15
L6:
  // join t in title on t.id == ci.movie_id
  Add          r36, r36, r13
  Jump         L16
L5:
  // join ci in cast_info on ci.person_id == n.id
  Add          r1, r1, r13
  Jump         L17
L4:
  // join it in info_type on it.id == pi.info_type_id
  Add          r33, r33, r13
  Jump         L18
L3:
  // join pi in person_info on pi.person_id == an.person_id
  Add          r31, r31, r13
  Jump         L19
L2:
  // join n in name on n.id == an.person_id
  Add          r28, r28, r13
  Jump         L20
L1:
  // from an in aka_name
  AddInt       r25, r25, r13
  Jump         L21
L0:
  // of_person: min(from r in rows select r.person_name),
  Const        r22, "of_person"
  Const        r44, []
  IterPrep     r15, r8
  Len          r34, r15
  Move         r11, r24
L23:
  LessInt      r14, r11, r34
  JumpIfFalse  r14, L22
  Index        r37, r15, r11
  Move         r6, r37
  Index        r41, r6, r19
  Append       r7, r44, r41
  Move         r44, r7
  AddInt       r11, r11, r13
  Jump         L23
L22:
  Min          r42, r44
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r16, "biography_movie"
  Const        r9, []
  IterPrep     r29, r8
  Len          r21, r29
  Move         r30, r24
L25:
  LessInt      r35, r30, r21
  JumpIfFalse  r35, L24
  Index        r18, r29, r30
  Move         r6, r18
  Index        r40, r6, r20
  Append       r12, r9, r40
  Move         r9, r12
  AddInt       r30, r30, r13
  Jump         L25
L24:
  Min          r43, r9
  // of_person: min(from r in rows select r.person_name),
  Move         r45, r22
  Move         r46, r42
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r47, r16
  Move         r48, r43
  // {
  MakeMap      r17, 2, r45
  Move         r10, r17
  // let result = [
  MakeList     r25, 1, r10
  // json(result)
  JSON         r25
  // expect result == [
  Const        r26, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r28, r25, r26
  Expect       r28
  Return       r0
