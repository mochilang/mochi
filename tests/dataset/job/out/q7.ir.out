func main (regs=445)
  // let aka_name = [
  Const        r0, [{"name": "Anna Mae", "person_id": 1}, {"name": "Chris", "person_id": 2}]
  // let cast_info = [
  Const        r1, [{"movie_id": 10, "person_id": 1}, {"movie_id": 20, "person_id": 2}]
  // let info_type = [
  Const        r2, [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
  // let link_type = [
  Const        r3, [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
  // let movie_link = [
  Const        r4, [{"link_type_id": 1, "linked_movie_id": 10}, {"link_type_id": 2, "linked_movie_id": 20}]
  // let name = [
  Const        r5, [{"gender": "m", "id": 1, "name": "Alan Brown", "name_pcode_cf": "B"}, {"gender": "f", "id": 2, "name": "Zoe", "name_pcode_cf": "Z"}]
  // let person_info = [
  Const        r6, [{"info_type_id": 1, "note": "Volker Boehm", "person_id": 1}, {"info_type_id": 1, "note": "Other", "person_id": 2}]
  // let title = [
  Const        r7, [{"id": 10, "production_year": 1990, "title": "Feature Film"}, {"id": 20, "production_year": 2000, "title": "Late Film"}]
  // from an in aka_name
  Const        r8, []
  // an.name.contains("a") &&
  Const        r9, "name"
  Const        r10, "contains"
  // it.info == "mini biography" &&
  Const        r11, "info"
  // lt.link == "features" &&
  Const        r12, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r13, "name_pcode_cf"
  Const        r14, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r15, "gender"
  Const        r16, "gender"
  Const        r17, "name"
  Const        r18, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r19, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r20, "production_year"
  Const        r21, "production_year"
  // pi.person_id == an.person_id &&
  Const        r22, "person_id"
  Const        r23, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r24, "person_id"
  Const        r25, "person_id"
  // an.person_id == ci.person_id &&
  Const        r26, "person_id"
  Const        r27, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r28, "movie_id"
  Const        r29, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r30, "person_name"
  Const        r31, "name"
  Const        r32, "movie_title"
  Const        r33, "title"
  // from an in aka_name
  IterPrep     r34, r0
  Len          r35, r34
  Const        r37, 0
  Move         r36, r37
L21:
  LessInt      r38, r36, r35
  JumpIfFalse  r38, L0
  Index        r39, r34, r36
  Move         r40, r39
  // join n in name on n.id == an.person_id
  IterPrep     r41, r5
  Len          r42, r41
  Const        r43, "id"
  Const        r44, "person_id"
  // an.name.contains("a") &&
  Const        r45, "name"
  Const        r46, "contains"
  // it.info == "mini biography" &&
  Const        r47, "info"
  // lt.link == "features" &&
  Const        r48, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r49, "name_pcode_cf"
  Const        r50, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r51, "gender"
  Const        r52, "gender"
  Const        r53, "name"
  Const        r54, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r55, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r56, "production_year"
  Const        r57, "production_year"
  // pi.person_id == an.person_id &&
  Const        r58, "person_id"
  Const        r59, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r60, "person_id"
  Const        r61, "person_id"
  // an.person_id == ci.person_id &&
  Const        r62, "person_id"
  Const        r63, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r64, "movie_id"
  Const        r65, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r66, "person_name"
  Const        r67, "name"
  Const        r68, "movie_title"
  Const        r69, "title"
  // join n in name on n.id == an.person_id
  Const        r71, 0
  Move         r70, r71
L20:
  LessInt      r72, r70, r42
  JumpIfFalse  r72, L1
  Index        r73, r41, r70
  Move         r74, r73
  Const        r75, "id"
  Index        r76, r74, r75
  Const        r77, "person_id"
  Index        r78, r40, r77
  Equal        r79, r76, r78
  JumpIfFalse  r79, L2
  // join pi in person_info on pi.person_id == an.person_id
  IterPrep     r80, r6
  Len          r81, r80
  Const        r82, "person_id"
  Const        r83, "person_id"
  // an.name.contains("a") &&
  Const        r84, "name"
  Const        r85, "contains"
  // it.info == "mini biography" &&
  Const        r86, "info"
  // lt.link == "features" &&
  Const        r87, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r88, "name_pcode_cf"
  Const        r89, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r90, "gender"
  Const        r91, "gender"
  Const        r92, "name"
  Const        r93, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r94, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r95, "production_year"
  Const        r96, "production_year"
  // pi.person_id == an.person_id &&
  Const        r97, "person_id"
  Const        r98, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r99, "person_id"
  Const        r100, "person_id"
  // an.person_id == ci.person_id &&
  Const        r101, "person_id"
  Const        r102, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r103, "movie_id"
  Const        r104, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r105, "person_name"
  Const        r106, "name"
  Const        r107, "movie_title"
  Const        r108, "title"
  // join pi in person_info on pi.person_id == an.person_id
  Const        r110, 0
  Move         r109, r110
L19:
  LessInt      r111, r109, r81
  JumpIfFalse  r111, L2
  Index        r112, r80, r109
  Move         r113, r112
  Const        r114, "person_id"
  Index        r115, r113, r114
  Const        r116, "person_id"
  Index        r117, r40, r116
  Equal        r118, r115, r117
  JumpIfFalse  r118, L3
  // join it in info_type on it.id == pi.info_type_id
  IterPrep     r119, r2
  Len          r120, r119
  Const        r121, "id"
  Const        r122, "info_type_id"
  // an.name.contains("a") &&
  Const        r123, "name"
  Const        r124, "contains"
  // it.info == "mini biography" &&
  Const        r125, "info"
  // lt.link == "features" &&
  Const        r126, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r127, "name_pcode_cf"
  Const        r128, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r129, "gender"
  Const        r130, "gender"
  Const        r131, "name"
  Const        r132, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r133, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r134, "production_year"
  Const        r135, "production_year"
  // pi.person_id == an.person_id &&
  Const        r136, "person_id"
  Const        r137, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r138, "person_id"
  Const        r139, "person_id"
  // an.person_id == ci.person_id &&
  Const        r140, "person_id"
  Const        r141, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r142, "movie_id"
  Const        r143, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r144, "person_name"
  Const        r145, "name"
  Const        r146, "movie_title"
  Const        r147, "title"
  // join it in info_type on it.id == pi.info_type_id
  Const        r149, 0
  Move         r148, r149
L18:
  LessInt      r150, r148, r120
  JumpIfFalse  r150, L3
  Index        r151, r119, r148
  Move         r152, r151
  Const        r153, "id"
  Index        r154, r152, r153
  Const        r155, "info_type_id"
  Index        r156, r113, r155
  Equal        r157, r154, r156
  JumpIfFalse  r157, L4
  // join ci in cast_info on ci.person_id == n.id
  IterPrep     r158, r1
  Len          r159, r158
  Const        r160, "person_id"
  Const        r161, "id"
  // an.name.contains("a") &&
  Const        r162, "name"
  Const        r163, "contains"
  // it.info == "mini biography" &&
  Const        r164, "info"
  // lt.link == "features" &&
  Const        r165, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r166, "name_pcode_cf"
  Const        r167, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r168, "gender"
  Const        r169, "gender"
  Const        r170, "name"
  Const        r171, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r172, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r173, "production_year"
  Const        r174, "production_year"
  // pi.person_id == an.person_id &&
  Const        r175, "person_id"
  Const        r176, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r177, "person_id"
  Const        r178, "person_id"
  // an.person_id == ci.person_id &&
  Const        r179, "person_id"
  Const        r180, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r181, "movie_id"
  Const        r182, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r183, "person_name"
  Const        r184, "name"
  Const        r185, "movie_title"
  Const        r186, "title"
  // join ci in cast_info on ci.person_id == n.id
  Const        r188, 0
  Move         r187, r188
L17:
  LessInt      r189, r187, r159
  JumpIfFalse  r189, L4
  Index        r190, r158, r187
  Move         r191, r190
  Const        r192, "person_id"
  Index        r193, r191, r192
  Const        r194, "id"
  Index        r195, r74, r194
  Equal        r196, r193, r195
  JumpIfFalse  r196, L5
  // join t in title on t.id == ci.movie_id
  IterPrep     r197, r7
  Len          r198, r197
  Const        r199, "id"
  Const        r200, "movie_id"
  // an.name.contains("a") &&
  Const        r201, "name"
  Const        r202, "contains"
  // it.info == "mini biography" &&
  Const        r203, "info"
  // lt.link == "features" &&
  Const        r204, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r205, "name_pcode_cf"
  Const        r206, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r207, "gender"
  Const        r208, "gender"
  Const        r209, "name"
  Const        r210, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r211, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r212, "production_year"
  Const        r213, "production_year"
  // pi.person_id == an.person_id &&
  Const        r214, "person_id"
  Const        r215, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r216, "person_id"
  Const        r217, "person_id"
  // an.person_id == ci.person_id &&
  Const        r218, "person_id"
  Const        r219, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r220, "movie_id"
  Const        r221, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r222, "person_name"
  Const        r223, "name"
  Const        r224, "movie_title"
  Const        r225, "title"
  // join t in title on t.id == ci.movie_id
  Const        r227, 0
  Move         r226, r227
L16:
  LessInt      r228, r226, r198
  JumpIfFalse  r228, L5
  Index        r229, r197, r226
  Move         r230, r229
  Const        r231, "id"
  Index        r232, r230, r231
  Const        r233, "movie_id"
  Index        r234, r191, r233
  Equal        r235, r232, r234
  JumpIfFalse  r235, L6
  // join ml in movie_link on ml.linked_movie_id == t.id
  IterPrep     r236, r4
  Len          r237, r236
  Const        r238, "linked_movie_id"
  Const        r239, "id"
  // an.name.contains("a") &&
  Const        r240, "name"
  Const        r241, "contains"
  // it.info == "mini biography" &&
  Const        r242, "info"
  // lt.link == "features" &&
  Const        r243, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r244, "name_pcode_cf"
  Const        r245, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r246, "gender"
  Const        r247, "gender"
  Const        r248, "name"
  Const        r249, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r250, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r251, "production_year"
  Const        r252, "production_year"
  // pi.person_id == an.person_id &&
  Const        r253, "person_id"
  Const        r254, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r255, "person_id"
  Const        r256, "person_id"
  // an.person_id == ci.person_id &&
  Const        r257, "person_id"
  Const        r258, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r259, "movie_id"
  Const        r260, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r261, "person_name"
  Const        r262, "name"
  Const        r263, "movie_title"
  Const        r264, "title"
  // join ml in movie_link on ml.linked_movie_id == t.id
  Const        r266, 0
  Move         r265, r266
L15:
  LessInt      r267, r265, r237
  JumpIfFalse  r267, L6
  Index        r268, r236, r265
  Move         r269, r268
  Const        r270, "linked_movie_id"
  Index        r271, r269, r270
  Const        r272, "id"
  Index        r273, r230, r272
  Equal        r274, r271, r273
  JumpIfFalse  r274, L7
  // join lt in link_type on lt.id == ml.link_type_id
  IterPrep     r275, r3
  Len          r276, r275
  Const        r277, "id"
  Const        r278, "link_type_id"
  // an.name.contains("a") &&
  Const        r279, "name"
  Const        r280, "contains"
  // it.info == "mini biography" &&
  Const        r281, "info"
  // lt.link == "features" &&
  Const        r282, "link"
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r283, "name_pcode_cf"
  Const        r284, "name_pcode_cf"
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r285, "gender"
  Const        r286, "gender"
  Const        r287, "name"
  Const        r288, "starts_with"
  // pi.note == "Volker Boehm" &&
  Const        r289, "note"
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r290, "production_year"
  Const        r291, "production_year"
  // pi.person_id == an.person_id &&
  Const        r292, "person_id"
  Const        r293, "person_id"
  // pi.person_id == ci.person_id &&
  Const        r294, "person_id"
  Const        r295, "person_id"
  // an.person_id == ci.person_id &&
  Const        r296, "person_id"
  Const        r297, "person_id"
  // ci.movie_id == ml.linked_movie_id
  Const        r298, "movie_id"
  Const        r299, "linked_movie_id"
  // select { person_name: n.name, movie_title: t.title }
  Const        r300, "person_name"
  Const        r301, "name"
  Const        r302, "movie_title"
  Const        r303, "title"
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r305, 0
  Move         r304, r305
L14:
  LessInt      r306, r304, r276
  JumpIfFalse  r306, L7
  Index        r307, r275, r304
  Move         r308, r307
  Const        r309, "id"
  Index        r310, r308, r309
  Const        r311, "link_type_id"
  Index        r312, r269, r311
  Equal        r313, r310, r312
  JumpIfFalse  r313, L8
  Const        r314, "name"
  Index        r315, r40, r314
  // an.name.contains("a") &&
  Const        r316, "a"
  In           r317, r316, r315
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Const        r318, "name_pcode_cf"
  Index        r319, r74, r318
  Const        r320, "A"
  LessEq       r321, r320, r319
  Const        r322, "name_pcode_cf"
  Index        r323, r74, r322
  Const        r324, "F"
  LessEq       r325, r323, r324
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  Const        r326, "production_year"
  Index        r327, r230, r326
  Const        r328, 1980
  LessEq       r329, r328, r327
  Const        r330, "production_year"
  Index        r331, r230, r330
  Const        r332, 1995
  LessEq       r333, r331, r332
  // it.info == "mini biography" &&
  Const        r334, "info"
  Index        r335, r152, r334
  Const        r336, "mini biography"
  Equal        r337, r335, r336
  // lt.link == "features" &&
  Const        r338, "link"
  Index        r339, r308, r338
  Const        r340, "features"
  Equal        r341, r339, r340
  // pi.note == "Volker Boehm" &&
  Const        r342, "note"
  Index        r343, r113, r342
  Const        r344, "Volker Boehm"
  Equal        r345, r343, r344
  // pi.person_id == an.person_id &&
  Const        r346, "person_id"
  Index        r347, r113, r346
  Const        r348, "person_id"
  Index        r349, r40, r348
  Equal        r350, r347, r349
  // pi.person_id == ci.person_id &&
  Const        r351, "person_id"
  Index        r352, r113, r351
  Const        r353, "person_id"
  Index        r354, r191, r353
  Equal        r355, r352, r354
  // an.person_id == ci.person_id &&
  Const        r356, "person_id"
  Index        r357, r40, r356
  Const        r358, "person_id"
  Index        r359, r191, r358
  Equal        r360, r357, r359
  // ci.movie_id == ml.linked_movie_id
  Const        r361, "movie_id"
  Index        r362, r191, r361
  Const        r363, "linked_movie_id"
  Index        r364, r269, r363
  Equal        r365, r362, r364
  // an.name.contains("a") &&
  Move         r366, r317
  JumpIfFalse  r366, L9
  Move         r366, r337
  // it.info == "mini biography" &&
  JumpIfFalse  r366, L9
  Move         r366, r341
  // lt.link == "features" &&
  JumpIfFalse  r366, L9
  Move         r366, r321
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  JumpIfFalse  r366, L9
  Move         r366, r325
  JumpIfFalse  r366, L9
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  Const        r367, "gender"
  Index        r368, r74, r367
  Const        r369, "m"
  Equal        r370, r368, r369
  Move         r371, r370
  JumpIfTrue   r371, L10
  Const        r372, "gender"
  Index        r373, r74, r372
  Const        r374, "f"
  Equal        r375, r373, r374
  Move         r376, r375
  JumpIfFalse  r376, L11
  Const        r377, "name"
  Index        r378, r74, r377
  Const        r379, "B"
  Const        r380, 0
  Const        r381, 1
  Len          r382, r378
  LessEq       r383, r381, r382
  JumpIfFalse  r383, L12
  Slice        r385, r378, r380, r381
  Equal        r386, r385, r379
  Move         r384, r386
  Jump         L13
L12:
  Const        r384, false
L13:
  Move         r376, r384
L11:
  Move         r371, r376
L10:
  // n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
  Move         r366, r371
  // (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
  JumpIfFalse  r366, L9
  Move         r366, r345
  // pi.note == "Volker Boehm" &&
  JumpIfFalse  r366, L9
  Move         r366, r329
  // t.production_year >= 1980 && t.production_year <= 1995 &&
  JumpIfFalse  r366, L9
  Move         r366, r333
  JumpIfFalse  r366, L9
  Move         r366, r350
  // pi.person_id == an.person_id &&
  JumpIfFalse  r366, L9
  Move         r366, r355
  // pi.person_id == ci.person_id &&
  JumpIfFalse  r366, L9
  Move         r366, r360
  // an.person_id == ci.person_id &&
  JumpIfFalse  r366, L9
  Move         r366, r365
L9:
  // where (
  JumpIfFalse  r366, L8
  // select { person_name: n.name, movie_title: t.title }
  Const        r387, "person_name"
  Const        r388, "name"
  Index        r389, r74, r388
  Const        r390, "movie_title"
  Const        r391, "title"
  Index        r392, r230, r391
  Move         r393, r387
  Move         r394, r389
  Move         r395, r390
  Move         r396, r392
  MakeMap      r397, 2, r393
  // from an in aka_name
  Append       r398, r8, r397
  Move         r8, r398
L8:
  // join lt in link_type on lt.id == ml.link_type_id
  Const        r399, 1
  Add          r304, r304, r399
  Jump         L14
L7:
  // join ml in movie_link on ml.linked_movie_id == t.id
  Const        r400, 1
  Add          r265, r265, r400
  Jump         L15
L6:
  // join t in title on t.id == ci.movie_id
  Const        r401, 1
  Add          r226, r226, r401
  Jump         L16
L5:
  // join ci in cast_info on ci.person_id == n.id
  Const        r402, 1
  Add          r187, r187, r402
  Jump         L17
L4:
  // join it in info_type on it.id == pi.info_type_id
  Const        r403, 1
  Add          r148, r148, r403
  Jump         L18
L3:
  // join pi in person_info on pi.person_id == an.person_id
  Const        r404, 1
  Add          r109, r109, r404
  Jump         L19
L2:
  // join n in name on n.id == an.person_id
  Const        r405, 1
  Add          r70, r70, r405
  Jump         L20
L1:
  // from an in aka_name
  Const        r406, 1
  AddInt       r36, r36, r406
  Jump         L21
L0:
  // of_person: min(from r in rows select r.person_name),
  Const        r407, "of_person"
  Const        r408, []
  Const        r409, "person_name"
  IterPrep     r410, r8
  Len          r411, r410
  Const        r413, 0
  Move         r412, r413
L23:
  LessInt      r414, r412, r411
  JumpIfFalse  r414, L22
  Index        r415, r410, r412
  Move         r416, r415
  Const        r417, "person_name"
  Index        r418, r416, r417
  Append       r419, r408, r418
  Move         r408, r419
  Const        r420, 1
  AddInt       r412, r412, r420
  Jump         L23
L22:
  Min          r421, r408
  // biography_movie: min(from r in rows select r.movie_title)
  Const        r422, "biography_movie"
  Const        r423, []
  Const        r424, "movie_title"
  IterPrep     r425, r8
  Len          r426, r425
  Const        r428, 0
  Move         r427, r428
L25:
  LessInt      r429, r427, r426
  JumpIfFalse  r429, L24
  Index        r430, r425, r427
  Move         r416, r430
  Const        r431, "movie_title"
  Index        r432, r416, r431
  Append       r433, r423, r432
  Move         r423, r433
  Const        r434, 1
  AddInt       r427, r427, r434
  Jump         L25
L24:
  Min          r435, r423
  // of_person: min(from r in rows select r.person_name),
  Move         r436, r407
  Move         r437, r421
  // biography_movie: min(from r in rows select r.movie_title)
  Move         r438, r422
  Move         r439, r435
  // {
  MakeMap      r440, 2, r436
  Move         r441, r440
  // let result = [
  MakeList     r442, 1, r441
  // json(result)
  JSON         r442
  // expect result == [
  Const        r443, [{"biography_movie": "Feature Film", "of_person": "Alan Brown"}]
  Equal        r444, r442, r443
  Expect       r444
  Return       r0
