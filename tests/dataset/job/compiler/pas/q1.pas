// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:22:44Z
program Q1;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _minList<T>(arr: specialize TArray<T>): T;
var i: integer; m: T;
begin
  if Length(arr) = 0 then exit(Default(T));
  m := arr[0];
  for i := 1 to High(arr) do
    if _variantLess(arr[i], m) then m := arr[i];
  Result := m;
end;

function _variantLess(a, b: Variant): Boolean;
begin
  Result := VarCompareValue(a, b) = crLessThan;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, integer>;
  company_type: specialize TArray<specialize TFPGMap<string, Variant>>;
  ct: specialize TFPGMap<string, Variant>;
  filtered: specialize TArray<specialize TFPGMap<string, Variant>>;
  info_type: specialize TArray<specialize TFPGMap<string, Variant>>;
  it: specialize TFPGMap<string, Variant>;
  mc: specialize TFPGMap<string, Variant>;
  mi: specialize TFPGMap<string, integer>;
  movie_companies: specialize TArray<specialize TFPGMap<string, Variant>>;
  movie_info_idx: specialize TArray<specialize TFPGMap<string, integer>>;
  r: specialize TFPGMap<string, Variant>;
  _result: specialize TFPGMap<string, Variant>;
  t: specialize TFPGMap<string, Variant>;
  title: specialize TArray<specialize TFPGMap<string, Variant>>;

procedure test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production;
var
  _tmp16: specialize TFPGMap<string, Variant>;
begin
  _tmp16 := specialize TFPGMap<string, Variant>.Create;
  _tmp16.AddOrSetData('production_note', 'ACME (co-production)');
  _tmp16.AddOrSetData('movie_title', 'Good Movie');
  _tmp16.AddOrSetData('movie_year', 1995);
  if not ((_result = _tmp16)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('id', 1);
  _tmp0.AddOrSetData('kind', 'production companies');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('id', 2);
  _tmp1.AddOrSetData('kind', 'distributors');
  company_type := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('id', 10);
  _tmp2.AddOrSetData('info', 'top 250 rank');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('id', 20);
  _tmp3.AddOrSetData('info', 'bottom 10 rank');
  info_type := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('id', 100);
  _tmp4.AddOrSetData('title', 'Good Movie');
  _tmp4.AddOrSetData('production_year', 1995);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('id', 200);
  _tmp5.AddOrSetData('title', 'Bad Movie');
  _tmp5.AddOrSetData('production_year', 2000);
  title := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('movie_id', 100);
  _tmp6.AddOrSetData('company_type_id', 1);
  _tmp6.AddOrSetData('note', 'ACME (co-production)');
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('movie_id', 200);
  _tmp7.AddOrSetData('company_type_id', 1);
  _tmp7.AddOrSetData('note', 'MGM (as Metro-Goldwyn-Mayer Pictures)');
  movie_companies := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('movie_id', 100);
  _tmp8.AddOrSetData('info_type_id', 10);
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('movie_id', 200);
  _tmp9.AddOrSetData('info_type_id', 20);
  movie_info_idx := specialize TArray<specialize TFPGMap<string, integer>>([_tmp8, _tmp9]);
  SetLength(_tmp10, 0);
  for ct in company_type do
  begin
    for mc in movie_companies do
    begin
      if not ((ct.KeyData['id'] = mc.KeyData['company_type_id'])) then continue;
      for t in title do
      begin
        if not ((t.KeyData['id'] = mc.KeyData['movie_id'])) then continue;
        for mi in movie_info_idx do
        begin
          if not ((mi.KeyData['movie_id'] = t.KeyData['id'])) then continue;
          for it in info_type do
          begin
            if not ((it.KeyData['id'] = mi.KeyData['info_type_id'])) then continue;
            if not (((((ct.KeyData['kind'] = 'production companies') and (it.KeyData['info'] = 'top 250 rank')) and not mc.KeyData['note'].contains('(as Metro-Goldwyn-Mayer Pictures)')) and (mc.KeyData['note'].contains('(co-production)') or mc.KeyData['note'].contains('(presents)')))) then continue;
            _tmp11 := specialize TFPGMap<string, Variant>.Create;
            _tmp11.AddOrSetData('note', mc.KeyData['note']);
            _tmp11.AddOrSetData('title', t.KeyData['title']);
            _tmp11.AddOrSetData('year', t.KeyData['production_year']);
            _tmp10 := Concat(_tmp10, [_tmp11]);
          end;
        end;
      end;
    end;
  end;
  filtered := _tmp10;
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  SetLength(_tmp13, 0);
  for r in filtered do
  begin
    _tmp13 := Concat(_tmp13, [r.KeyData['note']]);
  end;
  _tmp12.AddOrSetData('production_note', specialize _minList<Variant>(_tmp13));
  SetLength(_tmp14, 0);
  for r in filtered do
  begin
    _tmp14 := Concat(_tmp14, [r.KeyData['title']]);
  end;
  _tmp12.AddOrSetData('movie_title', specialize _minList<Variant>(_tmp14));
  SetLength(_tmp15, 0);
  for r in filtered do
  begin
    _tmp15 := Concat(_tmp15, [r.KeyData['year']]);
  end;
  _tmp12.AddOrSetData('movie_year', specialize _minList<Variant>(_tmp15));
  _result := _tmp12;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(specialize TArray<specialize TFPGMap<string, Variant>>([_result]));
  test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production;
end.
