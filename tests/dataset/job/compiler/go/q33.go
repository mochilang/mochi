//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:47Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Company_name struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Country_code string `json:"country_code"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Link_type struct {
	ID   int    `json:"id"`
	Link string `json:"link"`
}

type Movie_companie struct {
	Movie_id   int `json:"movie_id"`
	Company_id int `json:"company_id"`
}

type Movie_info_idx struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_link struct {
	Movie_id        int `json:"movie_id"`
	Linked_movie_id int `json:"linked_movie_id"`
	Link_type_id    int `json:"link_type_id"`
}

type Result struct {
	First_company  string `json:"first_company"`
	Second_company string `json:"second_company"`
	First_rating   string `json:"first_rating"`
	Second_rating  string `json:"second_rating"`
	First_movie    string `json:"first_movie"`
	Second_movie   string `json:"second_movie"`
}

type Row struct {
	First_company  string `json:"first_company"`
	Second_company string `json:"second_company"`
	First_rating   string `json:"first_rating"`
	Second_rating  string `json:"second_rating"`
	First_movie    string `json:"first_movie"`
	Second_movie   string `json:"second_movie"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q33_finds_linked_TV_series_with_low_rated_sequel() {
	expect(_equal(result, []v{v{
		First_company:  "US Studio",
		Second_company: "GB Studio",
		First_rating:   "7.0",
		Second_rating:  "2.5",
		First_movie:    "Series A",
		Second_movie:   "Series B",
	}}))
}

var company_name []Company_name
var info_type []Info_type
var kind_type []Kind_type
var link_type []Link_type
var movie_companies []Movie_companie
var movie_info_idx []Movie_info_idx
var movie_link []Movie_link
var title []Title
var rows []Row
var result []Result

func main() {
	company_name = []Company_name{Company_name{
		ID:           1,
		Name:         "US Studio",
		Country_code: "[us]",
	}, Company_name{
		ID:           2,
		Name:         "GB Studio",
		Country_code: "[gb]",
	}}
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "rating",
	}, Info_type{
		ID:   2,
		Info: "other",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "tv series",
	}, Kind_type{
		ID:   2,
		Kind: "movie",
	}}
	link_type = []Link_type{Link_type{
		ID:   1,
		Link: "follows",
	}, Link_type{
		ID:   2,
		Link: "remake of",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:   10,
		Company_id: 1,
	}, Movie_companie{
		Movie_id:   20,
		Company_id: 2,
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     10,
		Info_type_id: 1,
		Info:         "7.0",
	}, Movie_info_idx{
		Movie_id:     20,
		Info_type_id: 1,
		Info:         "2.5",
	}}
	movie_link = []Movie_link{Movie_link{
		Movie_id:        10,
		Linked_movie_id: 20,
		Link_type_id:    1,
	}}
	title = []Title{Title{
		ID:              10,
		Title:           "Series A",
		Kind_id:         1,
		Production_year: 2004,
	}, Title{
		ID:              20,
		Title:           "Series B",
		Kind_id:         1,
		Production_year: 2006,
	}}
	rows = func() []Row {
		results := []Row{}
		for _, cn1Raw := range company_name {
			cn1 := cn1Raw.(Company_name)
			for _, mc1 := range movie_companies {
				if !(cn1.ID == mc1.Company_id) {
					continue
				}
				for _, t1 := range title {
					if !(t1.ID == mc1.Movie_id) {
						continue
					}
					for _, mi_idx1 := range movie_info_idx {
						if !(mi_idx1.Movie_id == t1.ID) {
							continue
						}
						for _, it1 := range info_type {
							if !(it1.ID == mi_idx1.Info_type_id) {
								continue
							}
							for _, kt1 := range kind_type {
								if !(kt1.ID == t1.Kind_id) {
									continue
								}
								for _, ml := range movie_link {
									if !(ml.Movie_id == t1.ID) {
										continue
									}
									for _, t2 := range title {
										if !(t2.ID == ml.Linked_movie_id) {
											continue
										}
										for _, mi_idx2 := range movie_info_idx {
											if !(mi_idx2.Movie_id == t2.ID) {
												continue
											}
											for _, it2 := range info_type {
												if !(it2.ID == mi_idx2.Info_type_id) {
													continue
												}
												for _, kt2 := range kind_type {
													if !(kt2.ID == t2.Kind_id) {
														continue
													}
													for _, mc2 := range movie_companies {
														if !(mc2.Movie_id == t2.ID) {
															continue
														}
														for _, cn2 := range company_name {
															if !(cn2.ID == mc2.Company_id) {
																continue
															}
															for _, lt := range link_type {
																if !(lt.ID == ml.Link_type_id) {
																	continue
																}
																if ((((((((cn1.Country_code == "[us]") && (it1.Info == "rating")) && (it2.Info == "rating")) && (kt1.Kind == "tv series")) && (kt2.Kind == "tv series")) && (((lt.Link == "sequel") || (lt.Link == "follows")) || (lt.Link == "followed by"))) && (mi_idx2.Info < "3.0")) && (t2.Production_year >= 2005)) && (t2.Production_year <= 2008) {
																	if ((((((((cn1.Country_code == "[us]") && (it1.Info == "rating")) && (it2.Info == "rating")) && (kt1.Kind == "tv series")) && (kt2.Kind == "tv series")) && (((lt.Link == "sequel") || (lt.Link == "follows")) || (lt.Link == "followed by"))) && (mi_idx2.Info < "3.0")) && (t2.Production_year >= 2005)) && (t2.Production_year <= 2008) {
																		results = append(results, Row{
																			First_company:  cn1.Name,
																			Second_company: cn2.Name,
																			First_rating:   mi_idx1.Info,
																			Second_rating:  mi_idx2.Info,
																			First_movie:    t1.Title,
																			Second_movie:   t2.Title,
																		})
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		First_company: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.First_company)
			}
			return results
		}()),
		Second_company: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Second_company)
			}
			return results
		}()),
		First_rating: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.First_rating)
			}
			return results
		}()),
		Second_rating: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Second_rating)
			}
			return results
		}()),
		First_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.First_movie)
			}
			return results
		}()),
		Second_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Second_movie)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q33_finds_linked_TV_series_with_low_rated_sequel()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
