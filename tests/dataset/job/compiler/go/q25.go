//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type Cast_info struct {
	Movie_id  int    `json:"movie_id"`
	Person_id int    `json:"person_id"`
	Note      string `json:"note"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Matche struct {
	Budget string `json:"budget"`
	Votes  int    `json:"votes"`
	Writer string `json:"writer"`
	Title  string `json:"title"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int `json:"movie_id"`
	Info_type_id int `json:"info_type_id"`
	Info         int `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Name struct {
	ID     int    `json:"id"`
	Name   string `json:"name"`
	Gender string `json:"gender"`
}

type Result struct {
	Movie_budget        string `json:"movie_budget"`
	Movie_votes         int    `json:"movie_votes"`
	Male_writer         string `json:"male_writer"`
	Violent_movie_title string `json:"violent_movie_title"`
}

type Title struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q25_finds_male_horror_writer_with_violent_keywords() {
	expect(_equal(result, []v{v{
		Movie_budget:        "Horror",
		Movie_votes:         100,
		Male_writer:         "Mike",
		Violent_movie_title: "Scary Movie",
	}}))
}

var cast_info []Cast_info
var info_type []Info_type
var keyword []Keyword
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var movie_keyword []Movie_keyword
var name []Name
var title []Title
var allowed_notes []string
var allowed_keywords []string
var matches []Matche
var result []Result

func main() {
	cast_info = []Cast_info{Cast_info{
		Movie_id:  1,
		Person_id: 1,
		Note:      "(writer)",
	}, Cast_info{
		Movie_id:  2,
		Person_id: 2,
		Note:      "(writer)",
	}}
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "genres",
	}, Info_type{
		ID:   2,
		Info: "votes",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "murder",
	}, Keyword{
		ID:      2,
		Keyword: "romance",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     1,
		Info_type_id: 1,
		Info:         "Horror",
	}, Movie_info{
		Movie_id:     2,
		Info_type_id: 1,
		Info:         "Comedy",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     1,
		Info_type_id: 2,
		Info:         100,
	}, Movie_info_idx{
		Movie_id:     2,
		Info_type_id: 2,
		Info:         50,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   1,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   2,
		Keyword_id: 2,
	}}
	name = []Name{Name{
		ID:     1,
		Name:   "Mike",
		Gender: "m",
	}, Name{
		ID:     2,
		Name:   "Sue",
		Gender: "f",
	}}
	title = []Title{Title{
		ID:    1,
		Title: "Scary Movie",
	}, Title{
		ID:    2,
		Title: "Funny Movie",
	}}
	allowed_notes = []string{
		"(writer)",
		"(head writer)",
		"(written by)",
		"(story)",
		"(story editor)",
	}
	allowed_keywords = []string{
		"murder",
		"blood",
		"gore",
		"death",
		"female-nudity",
	}
	matches = func() []Matche {
		results := []Matche{}
		for _, ciRaw := range cast_info {
			ci := ciRaw.(Cast_info)
			for _, it1 := range info_type {
				for _, it2 := range info_type {
					for _, k := range keyword {
						for _, mi := range movie_info {
							for _, mi_idx := range movie_info_idx {
								for _, mk := range movie_keyword {
									for _, n := range name {
										for _, t := range title {
											if (((((((((((((((((((slices.Contains(allowed_notes, ci.Note)) && (it1.Info == "genres")) && (it2.Info == "votes")) && (slices.Contains(allowed_keywords, k.Keyword))) && (mi.Info == "Horror")) && (n.Gender == "m")) && (t.ID == mi.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (t.ID == ci.Movie_id)) && (t.ID == mk.Movie_id)) && (ci.Movie_id == mi.Movie_id)) && (ci.Movie_id == mi_idx.Movie_id)) && (ci.Movie_id == mk.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mk.Movie_id)) && (mi_idx.Movie_id == mk.Movie_id)) && (n.ID == ci.Person_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id)) && (k.ID == mk.Keyword_id) {
												if (((((((((((((((((((slices.Contains(allowed_notes, ci.Note)) && (it1.Info == "genres")) && (it2.Info == "votes")) && (slices.Contains(allowed_keywords, k.Keyword))) && (mi.Info == "Horror")) && (n.Gender == "m")) && (t.ID == mi.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (t.ID == ci.Movie_id)) && (t.ID == mk.Movie_id)) && (ci.Movie_id == mi.Movie_id)) && (ci.Movie_id == mi_idx.Movie_id)) && (ci.Movie_id == mk.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mk.Movie_id)) && (mi_idx.Movie_id == mk.Movie_id)) && (n.ID == ci.Person_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id)) && (k.ID == mk.Keyword_id) {
													results = append(results, Matche{
														Budget: mi.Info,
														Votes:  mi_idx.Info,
														Writer: n.Name,
														Title:  t.Title,
													})
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Movie_budget: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Budget)
			}
			return results
		}()),
		Movie_votes: _minOrdered[int](func() []int {
			results := []int{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Votes)
			}
			return results
		}()),
		Male_writer: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Writer)
			}
			return results
		}()),
		Violent_movie_title: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Title)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q25_finds_male_horror_writer_with_violent_keywords()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
