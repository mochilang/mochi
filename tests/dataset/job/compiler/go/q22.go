//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Company_name struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Movie_companie struct {
	Movie_id        int    `json:"movie_id"`
	Company_id      int    `json:"company_id"`
	Company_type_id int    `json:"company_type_id"`
	Note            string `json:"note"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int     `json:"movie_id"`
	Info_type_id int     `json:"info_type_id"`
	Info         float64 `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Result struct {
	Movie_company         string  `json:"movie_company"`
	Rating                float64 `json:"rating"`
	Western_violent_movie string  `json:"western_violent_movie"`
}

type Row struct {
	Company string  `json:"company"`
	Rating  float64 `json:"rating"`
	Title   string  `json:"title"`
}

type Title struct {
	ID              int    `json:"id"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q22_finds_western_violent_movie_with_low_rating() {
	expect(_equal(result, []v{v{
		Movie_company:         "Euro Films",
		Rating:                6.5,
		Western_violent_movie: "Violent Western",
	}}))
}

var company_name []Company_name
var company_type []Company_type
var info_type []Info_type
var keyword []Keyword
var kind_type []Kind_type
var movie_companies []Movie_companie
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var movie_keyword []Movie_keyword
var title []Title
var rows []Row
var result []Result

func main() {
	company_name = []Company_name{Company_name{
		ID:           1,
		Name:         "Euro Films",
		Country_code: "[de]",
	}, Company_name{
		ID:           2,
		Name:         "US Films",
		Country_code: "[us]",
	}}
	company_type = []Company_type{Company_type{
		ID:   1,
		Kind: "production",
	}}
	info_type = []Info_type{Info_type{
		ID:   10,
		Info: "countries",
	}, Info_type{
		ID:   20,
		Info: "rating",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "murder",
	}, Keyword{
		ID:      2,
		Keyword: "comedy",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   100,
		Kind: "movie",
	}, Kind_type{
		ID:   200,
		Kind: "episode",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        10,
		Company_id:      1,
		Company_type_id: 1,
		Note:            "release (2009) (worldwide)",
	}, Movie_companie{
		Movie_id:        20,
		Company_id:      2,
		Company_type_id: 1,
		Note:            "release (2007) (USA)",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     10,
		Info_type_id: 10,
		Info:         "Germany",
	}, Movie_info{
		Movie_id:     20,
		Info_type_id: 10,
		Info:         "USA",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     10,
		Info_type_id: 20,
		Info:         6.5,
	}, Movie_info_idx{
		Movie_id:     20,
		Info_type_id: 20,
		Info:         7.8,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   10,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   20,
		Keyword_id: 2,
	}}
	title = []Title{Title{
		ID:              10,
		Kind_id:         100,
		Production_year: 2009,
		Title:           "Violent Western",
	}, Title{
		ID:              20,
		Kind_id:         100,
		Production_year: 2007,
		Title:           "Old Western",
	}}
	rows = func() []Row {
		results := []Row{}
		for _, cnRaw := range company_name {
			cn := cnRaw.(Company_name)
			for _, mc := range movie_companies {
				if !(cn.ID == mc.Company_id) {
					continue
				}
				for _, ct := range company_type {
					if !(ct.ID == mc.Company_type_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == mc.Movie_id) {
							continue
						}
						for _, mk := range movie_keyword {
							if !(mk.Movie_id == t.ID) {
								continue
							}
							for _, k := range keyword {
								if !(k.ID == mk.Keyword_id) {
									continue
								}
								for _, mi := range movie_info {
									if !(mi.Movie_id == t.ID) {
										continue
									}
									for _, it1 := range info_type {
										if !(it1.ID == mi.Info_type_id) {
											continue
										}
										for _, mi_idx := range movie_info_idx {
											if !(mi_idx.Movie_id == t.ID) {
												continue
											}
											for _, it2 := range info_type {
												if !(it2.ID == mi_idx.Info_type_id) {
													continue
												}
												for _, kt := range kind_type {
													if !(kt.ID == t.Kind_id) {
														continue
													}
													if (((((((((((((((((((((((((cn.Country_code != "[us]") && (it1.Info == "countries")) && (it2.Info == "rating")) && ((((k.Keyword == "murder") || (k.Keyword == "murder-in-title")) || (k.Keyword == "blood")) || (k.Keyword == "violence"))) && ((kt.Kind == "movie") || (kt.Kind == "episode"))) && (strings.Contains(mc.Note, "(USA)") == false)) && strings.Contains(mc.Note, "(200")) && ((((mi.Info == "Germany") || (mi.Info == "German")) || (mi.Info == "USA")) || (mi.Info == "American"))) && (mi_idx.Info < 7.0)) && (t.Production_year > 2008)) && (kt.ID == t.Kind_id)) && (t.ID == mi.Movie_id)) && (t.ID == mk.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (t.ID == mc.Movie_id)) && (mk.Movie_id == mi.Movie_id)) && (mk.Movie_id == mi_idx.Movie_id)) && (mk.Movie_id == mc.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mc.Movie_id)) && (mc.Movie_id == mi_idx.Movie_id)) && (k.ID == mk.Keyword_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id)) && (ct.ID == mc.Company_type_id)) && (cn.ID == mc.Company_id) {
														if (((((((((((((((((((((((((cn.Country_code != "[us]") && (it1.Info == "countries")) && (it2.Info == "rating")) && ((((k.Keyword == "murder") || (k.Keyword == "murder-in-title")) || (k.Keyword == "blood")) || (k.Keyword == "violence"))) && ((kt.Kind == "movie") || (kt.Kind == "episode"))) && (strings.Contains(mc.Note, "(USA)") == false)) && strings.Contains(mc.Note, "(200")) && ((((mi.Info == "Germany") || (mi.Info == "German")) || (mi.Info == "USA")) || (mi.Info == "American"))) && (mi_idx.Info < 7.0)) && (t.Production_year > 2008)) && (kt.ID == t.Kind_id)) && (t.ID == mi.Movie_id)) && (t.ID == mk.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (t.ID == mc.Movie_id)) && (mk.Movie_id == mi.Movie_id)) && (mk.Movie_id == mi_idx.Movie_id)) && (mk.Movie_id == mc.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mc.Movie_id)) && (mc.Movie_id == mi_idx.Movie_id)) && (k.ID == mk.Keyword_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id)) && (ct.ID == mc.Company_type_id)) && (cn.ID == mc.Company_id) {
															results = append(results, Row{
																Company: cn.Name,
																Rating:  mi_idx.Info,
																Title:   t.Title,
															})
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Movie_company: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Company)
			}
			return results
		}()),
		Rating: _minOrdered[float64](func() []float64 {
			results := []float64{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Rating)
			}
			return results
		}()),
		Western_violent_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Title)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q22_finds_western_violent_movie_with_low_rating()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
