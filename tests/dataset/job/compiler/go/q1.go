//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:44Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Company_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Filtered struct {
	Note  string `json:"note"`
	Title string `json:"title"`
	Year  int    `json:"year"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Movie_companie struct {
	Movie_id        int    `json:"movie_id"`
	Company_type_id int    `json:"company_type_id"`
	Note            string `json:"note"`
}

type Movie_info_idx struct {
	Movie_id     int `json:"movie_id"`
	Info_type_id int `json:"info_type_id"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() {
	expect(_equal(result, v{
		Production_note: "ACME (co-production)",
		Movie_title:     "Good Movie",
		Movie_year:      1995,
	}))
}

var company_type []Company_type
var info_type []Info_type
var title []Title
var movie_companies []Movie_companie
var movie_info_idx []Movie_info_idx
var filtered []Filtered
var result v

func main() {
	company_type = []Company_type{Company_type{
		ID:   1,
		Kind: "production companies",
	}, Company_type{
		ID:   2,
		Kind: "distributors",
	}}
	info_type = []Info_type{Info_type{
		ID:   10,
		Info: "top 250 rank",
	}, Info_type{
		ID:   20,
		Info: "bottom 10 rank",
	}}
	title = []Title{Title{
		ID:              100,
		Title:           "Good Movie",
		Production_year: 1995,
	}, Title{
		ID:              200,
		Title:           "Bad Movie",
		Production_year: 2000,
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        100,
		Company_type_id: 1,
		Note:            "ACME (co-production)",
	}, Movie_companie{
		Movie_id:        200,
		Company_type_id: 1,
		Note:            "MGM (as Metro-Goldwyn-Mayer Pictures)",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     100,
		Info_type_id: 10,
	}, Movie_info_idx{
		Movie_id:     200,
		Info_type_id: 20,
	}}
	filtered = func() []Filtered {
		results := []Filtered{}
		for _, ctRaw := range company_type {
			ct := ctRaw.(Company_type)
			for _, mc := range movie_companies {
				if !(ct.ID == mc.Company_type_id) {
					continue
				}
				for _, t := range title {
					if !(t.ID == mc.Movie_id) {
						continue
					}
					for _, mi := range movie_info_idx {
						if !(mi.Movie_id == t.ID) {
							continue
						}
						for _, it := range info_type {
							if !(it.ID == mi.Info_type_id) {
								continue
							}
							if (((ct.Kind == "production companies") && (it.Info == "top 250 rank")) && (!strings.Contains(mc.Note, "(as Metro-Goldwyn-Mayer Pictures)"))) && (strings.Contains(mc.Note, "(co-production)") || strings.Contains(mc.Note, "(presents)")) {
								if (((ct.Kind == "production companies") && (it.Info == "top 250 rank")) && (!strings.Contains(mc.Note, "(as Metro-Goldwyn-Mayer Pictures)"))) && (strings.Contains(mc.Note, "(co-production)") || strings.Contains(mc.Note, "(presents)")) {
									results = append(results, Filtered{
										Note:  mc.Note,
										Title: t.Title,
										Year:  t.Production_year,
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = v{
		Production_note: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range filtered {
				r := rRaw.(Filtered)
				results = append(results, r.Note)
			}
			return results
		}()),
		Movie_title: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range filtered {
				r := rRaw.(Filtered)
				results = append(results, r.Title)
			}
			return results
		}()),
		Movie_year: _minOrdered[int](func() []int {
			results := []int{}
			for _, rRaw := range filtered {
				r := rRaw.(Filtered)
				results = append(results, r.Year)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal([]v{result}); fmt.Println(string(b)) }()
	test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
