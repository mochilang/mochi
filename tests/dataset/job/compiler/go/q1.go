//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:11:50Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() {
	expect(_equal(result, v{
		Production_note: "ACME (co-production)",
		Movie_title:     "Good Movie",
		Movie_year:      1995,
	}))
}

var company_type []Company_typeItem
var info_type []Info_typeItem
var title []TitleItem
var movie_companies []Movie_companiesItem
var movie_info_idx []Movie_info_idxItem
var filtered []Filtered
var result v

func main() {
	company_type = _convSlice[v, Company_typeItem]([]Company_typeItem{Company_typeItem{
		1,
		"production companies",
	}, Company_typeItem{
		2,
		"distributors",
	}})
	info_type = _convSlice[v, Info_typeItem]([]Info_typeItem{Info_typeItem{
		10,
		"top 250 rank",
	}, Info_typeItem{
		20,
		"bottom 10 rank",
	}})
	title = _convSlice[v, TitleItem]([]TitleItem{TitleItem{
		100,
		"Good Movie",
		1995,
	}, TitleItem{
		200,
		"Bad Movie",
		2000,
	}})
	movie_companies = _convSlice[v, Movie_companiesItem]([]Movie_companiesItem{Movie_companiesItem{
		100,
		1,
		"ACME (co-production)",
	}, Movie_companiesItem{
		200,
		1,
		"MGM (as Metro-Goldwyn-Mayer Pictures)",
	}})
	movie_info_idx = _convSlice[v, Movie_info_idxItem]([]Movie_info_idxItem{Movie_info_idxItem{
		100,
		10,
	}, Movie_info_idxItem{
		200,
		20,
	}})
	filtered = _convSlice[v, Filtered](func() []Filtered {
		results := []Filtered{}
		for _, ct := range company_type {
			for _, mc := range movie_companies {
				if !(ct.Id == mc.Company_type_id) {
					continue
				}
				for _, t := range title {
					if !(t.Id == mc.Movie_id) {
						continue
					}
					for _, mi := range movie_info_idx {
						if !(mi.Movie_id == t.Id) {
							continue
						}
						for _, it := range info_type {
							if !(it.Id == mi.Info_type_id) {
								continue
							}
							if (((ct.Kind == "production companies") && (it.Info == "top 250 rank")) && (!strings.Contains(mc.Note, "(as Metro-Goldwyn-Mayer Pictures)"))) && (strings.Contains(mc.Note, "(co-production)") || strings.Contains(mc.Note, "(presents)")) {
								if (((ct.Kind == "production companies") && (it.Info == "top 250 rank")) && (!strings.Contains(mc.Note, "(as Metro-Goldwyn-Mayer Pictures)"))) && (strings.Contains(mc.Note, "(co-production)") || strings.Contains(mc.Note, "(presents)")) {
									results = append(results, Filtered{
										mc.Note,
										t.Title,
										t.Production_year,
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}())
	result = v{
		_min(func() []any {
			results := []any{}
			for _, r := range filtered {
				results = append(results, r.Note)
			}
			return results
		}()),
		_min(func() []any {
			results := []any{}
			for _, r := range filtered {
				results = append(results, r.Title)
			}
			return results
		}()),
		_min(func() []any {
			results := []any{}
			for _, r := range filtered {
				results = append(results, r.Year)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal([]v{result}); fmt.Println(string(b)) }()
	test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _min(v any) any {
	if g, ok := v.(*data.Group); ok {
		v = g.Items
	}
	switch s := v.(type) {
	case []int:
		if len(s) == 0 {
			return 0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []float64:
		if len(s) == 0 {
			return 0.0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []string:
		if len(s) == 0 {
			return ""
		}
		m := s[0]
		for _, n := range s[1:] {
			if n < m {
				m = n
			}
		}
		return m
	case []any:
		if len(s) == 0 {
			return 0
		}
		switch s[0].(type) {
		case string:
			m := s[0].(string)
			for _, it := range s[1:] {
				v := it.(string)
				if v < m {
					m = v
				}
			}
			return m
		case int, int64, float64:
			var m float64
			var isFloat bool
			switch n := s[0].(type) {
			case int:
				m = float64(n)
			case int64:
				m = float64(n)
			case float64:
				m = n
				isFloat = true
			}
			for _, it := range s[1:] {
				switch v := it.(type) {
				case int:
					if float64(v) < m {
						m = float64(v)
					}
				case int64:
					if float64(v) < m {
						m = float64(v)
					}
				case float64:
					if v < m {
						m = v
					}
					isFloat = true
				}
			}
			if isFloat {
				return m
			}
			return int(m)
		default:
			panic("min() expects numbers or strings")
		}
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Slice {
			if rv.Len() == 0 {
				return 0
			}
			m := rv.Index(0).Interface()
			switch m.(type) {
			case int, int64, float64:
				items := make([]any, rv.Len())
				for i := 0; i < rv.Len(); i++ {
					items[i] = rv.Index(i).Interface()
				}
				return _min(items)
			}
		}
		panic("min() expects list or group")
	}
}
