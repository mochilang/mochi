//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Company_name struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Link_type struct {
	ID   int    `json:"id"`
	Link string `json:"link"`
}

type Movie_companie struct {
	Movie_id        int `json:"movie_id"`
	Company_id      int `json:"company_id"`
	Company_type_id int `json:"company_type_id"`
	Note            any `json:"note"`
}

type Movie_info struct {
	Movie_id int    `json:"movie_id"`
	Info     string `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Movie_link struct {
	Movie_id     int `json:"movie_id"`
	Link_type_id int `json:"link_type_id"`
}

type Result struct {
	Company_name      string `json:"company_name"`
	Link_type         string `json:"link_type"`
	Western_follow_up string `json:"western_follow_up"`
}

type Row struct {
	Company_name      string `json:"company_name"`
	Link_type         string `json:"link_type"`
	Western_follow_up string `json:"western_follow_up"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q21_finds_western_follow_up_sequels() {
	expect(_equal(result, []v{v{
		Company_name:      "ACME Film Works",
		Link_type:         "is follow up",
		Western_follow_up: "Western Return",
	}}))
}

var company_name []Company_name
var company_type []Company_type
var keyword []Keyword
var link_type []Link_type
var title []Title
var movie_companies []Movie_companie
var movie_info []Movie_info
var movie_keyword []Movie_keyword
var movie_link []Movie_link
var allowed_countries []string
var rows []Row
var result []Result

func main() {
	company_name = []Company_name{Company_name{
		ID:           1,
		Name:         "ACME Film Works",
		Country_code: "[us]",
	}, Company_name{
		ID:           2,
		Name:         "Polish Warner",
		Country_code: "[pl]",
	}}
	company_type = []Company_type{Company_type{
		ID:   1,
		Kind: "production companies",
	}, Company_type{
		ID:   2,
		Kind: "other",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "sequel",
	}, Keyword{
		ID:      2,
		Keyword: "drama",
	}}
	link_type = []Link_type{Link_type{
		ID:   1,
		Link: "is follow up",
	}, Link_type{
		ID:   2,
		Link: "references",
	}}
	title = []Title{Title{
		ID:              10,
		Title:           "Western Return",
		Production_year: 1975,
	}, Title{
		ID:              20,
		Title:           "Other Movie",
		Production_year: 2015,
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        10,
		Company_id:      1,
		Company_type_id: 1,
		Note:            nil,
	}, Movie_companie{
		Movie_id:        20,
		Company_id:      2,
		Company_type_id: 1,
		Note:            nil,
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id: 10,
		Info:     "Sweden",
	}, Movie_info{
		Movie_id: 20,
		Info:     "USA",
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   10,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   20,
		Keyword_id: 2,
	}}
	movie_link = []Movie_link{Movie_link{
		Movie_id:     10,
		Link_type_id: 1,
	}, Movie_link{
		Movie_id:     20,
		Link_type_id: 2,
	}}
	allowed_countries = []string{
		"Sweden",
		"Norway",
		"Germany",
		"Denmark",
		"Swedish",
		"Denish",
		"Norwegian",
		"German",
	}
	rows = func() []Row {
		results := []Row{}
		for _, cnRaw := range company_name {
			cn := cnRaw.(Company_name)
			for _, mc := range movie_companies {
				if !(mc.Company_id == cn.ID) {
					continue
				}
				for _, ct := range company_type {
					if !(ct.ID == mc.Company_type_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == mc.Movie_id) {
							continue
						}
						for _, mk := range movie_keyword {
							if !(mk.Movie_id == t.ID) {
								continue
							}
							for _, k := range keyword {
								if !(k.ID == mk.Keyword_id) {
									continue
								}
								for _, ml := range movie_link {
									if !(ml.Movie_id == t.ID) {
										continue
									}
									for _, lt := range link_type {
										if !(lt.ID == ml.Link_type_id) {
											continue
										}
										for _, mi := range movie_info {
											if !(mi.Movie_id == t.ID) {
												continue
											}
											if ((((((((cn.Country_code != "[pl]") && (strings.Contains(cn.Name, "Film") || strings.Contains(cn.Name, "Warner"))) && (ct.Kind == "production companies")) && (k.Keyword == "sequel")) && strings.Contains(lt.Link, "follow")) && _equal(mc.Note, nil)) && (slices.Contains(allowed_countries, mi.Info))) && (t.Production_year >= 1950)) && (t.Production_year <= 2000) {
												if ((((((((cn.Country_code != "[pl]") && (strings.Contains(cn.Name, "Film") || strings.Contains(cn.Name, "Warner"))) && (ct.Kind == "production companies")) && (k.Keyword == "sequel")) && strings.Contains(lt.Link, "follow")) && _equal(mc.Note, nil)) && (slices.Contains(allowed_countries, mi.Info))) && (t.Production_year >= 1950)) && (t.Production_year <= 2000) {
													results = append(results, Row{
														Company_name:      cn.Name,
														Link_type:         lt.Link,
														Western_follow_up: t.Title,
													})
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Company_name: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Company_name)
			}
			return results
		}()),
		Link_type: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Link_type)
			}
			return results
		}()),
		Western_follow_up: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Western_follow_up)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q21_finds_western_follow_up_sequels()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
