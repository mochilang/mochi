//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Aka_name struct {
	Person_id int    `json:"person_id"`
	Name      string `json:"name"`
}

type Cast_info struct {
	Person_id int `json:"person_id"`
	Movie_id  int `json:"movie_id"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Country_code string `json:"country_code"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Movie_companie struct {
	Movie_id   int `json:"movie_id"`
	Company_id int `json:"company_id"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Name struct {
	ID int `json:"id"`
}

type Result struct {
	Cool_actor_pseudonym    string `json:"cool_actor_pseudonym"`
	Series_named_after_char string `json:"series_named_after_char"`
}

type Row struct {
	Pseudonym string `json:"pseudonym"`
	Series    string `json:"series"`
}

type Title struct {
	ID         int    `json:"id"`
	Title      string `json:"title"`
	Episode_nr int    `json:"episode_nr"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99() {
	expect(_equal(result, []v{v{
		Cool_actor_pseudonym:    "Alpha",
		Series_named_after_char: "Hero Bob",
	}}))
}

var aka_name []Aka_name
var cast_info []Cast_info
var company_name []Company_name
var keyword []Keyword
var movie_companies []Movie_companie
var movie_keyword []Movie_keyword
var name []Name
var title []Title
var rows []Row
var result []Result

func main() {
	aka_name = []Aka_name{Aka_name{
		Person_id: 1,
		Name:      "Alpha",
	}, Aka_name{
		Person_id: 2,
		Name:      "Beta",
	}}
	cast_info = []Cast_info{Cast_info{
		Person_id: 1,
		Movie_id:  101,
	}, Cast_info{
		Person_id: 2,
		Movie_id:  102,
	}}
	company_name = []Company_name{Company_name{
		ID:           1,
		Country_code: "[us]",
	}, Company_name{
		ID:           2,
		Country_code: "[de]",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "character-name-in-title",
	}, Keyword{
		ID:      2,
		Keyword: "other",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:   101,
		Company_id: 1,
	}, Movie_companie{
		Movie_id:   102,
		Company_id: 2,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   101,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   102,
		Keyword_id: 2,
	}}
	name = []Name{Name{ID: 1}, Name{ID: 2}}
	title = []Title{Title{
		ID:         101,
		Title:      "Hero Bob",
		Episode_nr: 60,
	}, Title{
		ID:         102,
		Title:      "Other Show",
		Episode_nr: 40,
	}}
	rows = func() []Row {
		results := []Row{}
		for _, anRaw := range aka_name {
			an := anRaw.(Aka_name)
			for _, n := range name {
				if !(n.ID == an.Person_id) {
					continue
				}
				for _, ci := range cast_info {
					if !(ci.Person_id == n.ID) {
						continue
					}
					for _, t := range title {
						if !(t.ID == ci.Movie_id) {
							continue
						}
						for _, mk := range movie_keyword {
							if !(mk.Movie_id == t.ID) {
								continue
							}
							for _, k := range keyword {
								if !(k.ID == mk.Keyword_id) {
									continue
								}
								for _, mc := range movie_companies {
									if !(mc.Movie_id == t.ID) {
										continue
									}
									for _, cn := range company_name {
										if !(cn.ID == mc.Company_id) {
											continue
										}
										if (((cn.Country_code == "[us]") && (k.Keyword == "character-name-in-title")) && (t.Episode_nr >= 50)) && (t.Episode_nr < 100) {
											if (((cn.Country_code == "[us]") && (k.Keyword == "character-name-in-title")) && (t.Episode_nr >= 50)) && (t.Episode_nr < 100) {
												results = append(results, Row{
													Pseudonym: an.Name,
													Series:    t.Title,
												})
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Cool_actor_pseudonym: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Pseudonym)
			}
			return results
		}()),
		Series_named_after_char: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Series)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
