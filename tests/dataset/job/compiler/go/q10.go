//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:45Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Cast_info struct {
	Movie_id       int    `json:"movie_id"`
	Person_role_id int    `json:"person_role_id"`
	Role_id        int    `json:"role_id"`
	Note           string `json:"note"`
}

type Char_name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID int `json:"id"`
}

type Matche struct {
	Character string `json:"character"`
	Movie     string `json:"movie"`
}

type Movie_companie struct {
	Movie_id        int `json:"movie_id"`
	Company_id      int `json:"company_id"`
	Company_type_id int `json:"company_type_id"`
}

type Result struct {
	Uncredited_voiced_character string `json:"uncredited_voiced_character"`
	Russian_movie               string `json:"russian_movie"`
}

type Role_type struct {
	ID   int    `json:"id"`
	Role string `json:"role"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q10_finds_uncredited_voice_actor_in_Russian_movie() {
	expect(_equal(result, []v{v{
		Uncredited_voiced_character: "Ivan",
		Russian_movie:               "Vodka Dreams",
	}}))
}

var char_name []Char_name
var cast_info []Cast_info
var company_name []Company_name
var company_type []Company_type
var movie_companies []Movie_companie
var role_type []Role_type
var title []Title
var matches []Matche
var result []Result

func main() {
	char_name = []Char_name{Char_name{
		ID:   1,
		Name: "Ivan",
	}, Char_name{
		ID:   2,
		Name: "Alex",
	}}
	cast_info = []Cast_info{Cast_info{
		Movie_id:       10,
		Person_role_id: 1,
		Role_id:        1,
		Note:           "Soldier (voice) (uncredited)",
	}, Cast_info{
		Movie_id:       11,
		Person_role_id: 2,
		Role_id:        1,
		Note:           "(voice)",
	}}
	company_name = []Company_name{Company_name{
		ID:           1,
		Country_code: "[ru]",
	}, Company_name{
		ID:           2,
		Country_code: "[us]",
	}}
	company_type = []Company_type{Company_type{ID: 1}, Company_type{ID: 2}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        10,
		Company_id:      1,
		Company_type_id: 1,
	}, Movie_companie{
		Movie_id:        11,
		Company_id:      2,
		Company_type_id: 1,
	}}
	role_type = []Role_type{Role_type{
		ID:   1,
		Role: "actor",
	}, Role_type{
		ID:   2,
		Role: "director",
	}}
	title = []Title{Title{
		ID:              10,
		Title:           "Vodka Dreams",
		Production_year: 2006,
	}, Title{
		ID:              11,
		Title:           "Other Film",
		Production_year: 2004,
	}}
	matches = func() []Matche {
		results := []Matche{}
		for _, chnRaw := range char_name {
			chn := chnRaw.(Char_name)
			for _, ci := range cast_info {
				if !(chn.ID == ci.Person_role_id) {
					continue
				}
				for _, rt := range role_type {
					if !(rt.ID == ci.Role_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == ci.Movie_id) {
							continue
						}
						for _, mc := range movie_companies {
							if !(mc.Movie_id == t.ID) {
								continue
							}
							for _, cn := range company_name {
								if !(cn.ID == mc.Company_id) {
									continue
								}
								if (((strings.Contains(ci.Note, "(voice)") && strings.Contains(ci.Note, "(uncredited)")) && (cn.Country_code == "[ru]")) && (rt.Role == "actor")) && (t.Production_year > 2005) {
									for _, ct := range company_type {
										if !(ct.ID == mc.Company_type_id) {
											continue
										}
										results = append(results, Matche{
											Character: chn.Name,
											Movie:     t.Title,
										})
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Uncredited_voiced_character: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Character)
			}
			return results
		}()),
		Russian_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Movie)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q10_finds_uncredited_voice_actor_in_Russian_movie()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
