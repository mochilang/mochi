//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Matche struct {
	Rating float64 `json:"rating"`
	Title  string  `json:"title"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int     `json:"movie_id"`
	Info_type_id int     `json:"info_type_id"`
	Info         float64 `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Title struct {
	ID              int    `json:"id"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q14_selects_minimal_rating_and_title_for_dark_movies() {
	expect(_equal(result, v{
		Rating:              7.0,
		Northern_dark_movie: "A Dark Movie",
	}))
}

var info_type []Info_type
var keyword []Keyword
var kind_type []Kind_type
var title []Title
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var movie_keyword []Movie_keyword
var allowed_keywords []string
var allowed_countries []string
var matches []Matche
var result v

func main() {
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "countries",
	}, Info_type{
		ID:   2,
		Info: "rating",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "murder",
	}, Keyword{
		ID:      2,
		Keyword: "blood",
	}, Keyword{
		ID:      3,
		Keyword: "romance",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "movie",
	}}
	title = []Title{Title{
		ID:              1,
		Kind_id:         1,
		Production_year: 2012,
		Title:           "A Dark Movie",
	}, Title{
		ID:              2,
		Kind_id:         1,
		Production_year: 2013,
		Title:           "Brutal Blood",
	}, Title{
		ID:              3,
		Kind_id:         1,
		Production_year: 2008,
		Title:           "Old Film",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     1,
		Info_type_id: 1,
		Info:         "Sweden",
	}, Movie_info{
		Movie_id:     2,
		Info_type_id: 1,
		Info:         "USA",
	}, Movie_info{
		Movie_id:     3,
		Info_type_id: 1,
		Info:         "USA",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     1,
		Info_type_id: 2,
		Info:         7.0,
	}, Movie_info_idx{
		Movie_id:     2,
		Info_type_id: 2,
		Info:         7.5,
	}, Movie_info_idx{
		Movie_id:     3,
		Info_type_id: 2,
		Info:         9.1,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   1,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   2,
		Keyword_id: 2,
	}, Movie_keyword{
		Movie_id:   3,
		Keyword_id: 3,
	}}
	allowed_keywords = []string{
		"murder",
		"murder-in-title",
		"blood",
		"violence",
	}
	allowed_countries = []string{
		"Sweden",
		"Norway",
		"Germany",
		"Denmark",
		"Swedish",
		"Denish",
		"Norwegian",
		"German",
		"USA",
		"American",
	}
	matches = func() []Matche {
		results := []Matche{}
		for _, it1Raw := range info_type {
			it1 := it1Raw.(Info_type)
			for _, it2 := range info_type {
				for _, k := range keyword {
					for _, kt := range kind_type {
						for _, mi := range movie_info {
							for _, mi_idx := range movie_info_idx {
								for _, mk := range movie_keyword {
									for _, t := range title {
										if ((((((((((((((((it1.Info == "countries") && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (kt.Kind == "movie")) && (slices.Contains(allowed_countries, mi.Info))) && (mi_idx.Info < 8.5)) && (t.Production_year > 2010)) && (kt.ID == t.Kind_id)) && (t.ID == mi.Movie_id)) && (t.ID == mk.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (mk.Movie_id == mi.Movie_id)) && (mk.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (k.ID == mk.Keyword_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id) {
											if ((((((((((((((((it1.Info == "countries") && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (kt.Kind == "movie")) && (slices.Contains(allowed_countries, mi.Info))) && (mi_idx.Info < 8.5)) && (t.Production_year > 2010)) && (kt.ID == t.Kind_id)) && (t.ID == mi.Movie_id)) && (t.ID == mk.Movie_id)) && (t.ID == mi_idx.Movie_id)) && (mk.Movie_id == mi.Movie_id)) && (mk.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id)) && (k.ID == mk.Keyword_id)) && (it1.ID == mi.Info_type_id)) && (it2.ID == mi_idx.Info_type_id) {
												results = append(results, Matche{
													Rating: mi_idx.Info,
													Title:  t.Title,
												})
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = v{
		Rating: _minOrdered[float64](func() []float64 {
			results := []float64{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Rating)
			}
			return results
		}()),
		Northern_dark_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Title)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q14_selects_minimal_rating_and_title_for_dark_movies()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
