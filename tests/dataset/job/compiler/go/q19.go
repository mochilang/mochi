//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Aka_name struct {
	Person_id int    `json:"person_id"`
	Name      string `json:"name"`
}

type Cast_info struct {
	Movie_id       int    `json:"movie_id"`
	Person_role_id int    `json:"person_role_id"`
	Person_id      int    `json:"person_id"`
	Role_id        int    `json:"role_id"`
	Note           string `json:"note"`
}

type Char_name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Country_code string `json:"country_code"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Matche struct {
	Actress string `json:"actress"`
	Movie   string `json:"movie"`
}

type Movie_companie struct {
	Movie_id   int    `json:"movie_id"`
	Company_id int    `json:"company_id"`
	Note       string `json:"note"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Name struct {
	ID     int    `json:"id"`
	Name   string `json:"name"`
	Gender string `json:"gender"`
}

type Result struct {
	Voicing_actress string `json:"voicing_actress"`
	Voiced_movie    string `json:"voiced_movie"`
}

type Role_type struct {
	ID   int    `json:"id"`
	Role string `json:"role"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009() {
	expect(_equal(result, []v{v{
		Voicing_actress: "Angela Stone",
		Voiced_movie:    "Voiced Movie",
	}}))
}

var aka_name []Aka_name
var char_name []Char_name
var cast_info []Cast_info
var company_name []Company_name
var info_type []Info_type
var movie_companies []Movie_companie
var movie_info []Movie_info
var name []Name
var role_type []Role_type
var title []Title
var matches []Matche
var result []Result

func main() {
	aka_name = []Aka_name{Aka_name{
		Person_id: 1,
		Name:      "A. Stone",
	}, Aka_name{
		Person_id: 2,
		Name:      "J. Doe",
	}}
	char_name = []Char_name{Char_name{
		ID:   1,
		Name: "Protagonist",
	}, Char_name{
		ID:   2,
		Name: "Extra",
	}}
	cast_info = []Cast_info{Cast_info{
		Movie_id:       1,
		Person_role_id: 1,
		Person_id:      1,
		Role_id:        1,
		Note:           "(voice)",
	}, Cast_info{
		Movie_id:       2,
		Person_role_id: 2,
		Person_id:      2,
		Role_id:        2,
		Note:           "Cameo",
	}}
	company_name = []Company_name{Company_name{
		ID:           10,
		Country_code: "[us]",
	}, Company_name{
		ID:           20,
		Country_code: "[gb]",
	}}
	info_type = []Info_type{Info_type{
		ID:   100,
		Info: "release dates",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:   1,
		Company_id: 10,
		Note:       "Studio (USA)",
	}, Movie_companie{
		Movie_id:   2,
		Company_id: 20,
		Note:       "Other (worldwide)",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     1,
		Info_type_id: 100,
		Info:         "USA: June 2006",
	}, Movie_info{
		Movie_id:     2,
		Info_type_id: 100,
		Info:         "UK: 1999",
	}}
	name = []Name{Name{
		ID:     1,
		Name:   "Angela Stone",
		Gender: "f",
	}, Name{
		ID:     2,
		Name:   "Bob Angstrom",
		Gender: "m",
	}}
	role_type = []Role_type{Role_type{
		ID:   1,
		Role: "actress",
	}, Role_type{
		ID:   2,
		Role: "actor",
	}}
	title = []Title{Title{
		ID:              1,
		Title:           "Voiced Movie",
		Production_year: 2006,
	}, Title{
		ID:              2,
		Title:           "Other Movie",
		Production_year: 2010,
	}}
	matches = func() []Matche {
		results := []Matche{}
		for _, anRaw := range aka_name {
			an := anRaw.(Aka_name)
			for _, n := range name {
				if !(n.ID == an.Person_id) {
					continue
				}
				for _, ci := range cast_info {
					if !(ci.Person_id == an.Person_id) {
						continue
					}
					for _, chn := range char_name {
						if !(chn.ID == ci.Person_role_id) {
							continue
						}
						for _, rt := range role_type {
							if !(rt.ID == ci.Role_id) {
								continue
							}
							for _, t := range title {
								if !(t.ID == ci.Movie_id) {
									continue
								}
								for _, mc := range movie_companies {
									if !(mc.Movie_id == t.ID) {
										continue
									}
									for _, cn := range company_name {
										if !(cn.ID == mc.Company_id) {
											continue
										}
										for _, mi := range movie_info {
											if !(mi.Movie_id == t.ID) {
												continue
											}
											for _, it := range info_type {
												if !(it.ID == mi.Info_type_id) {
													continue
												}
												if ((((((((((slices.Contains([]string{
													"(voice)",
													"(voice: Japanese version)",
													"(voice) (uncredited)",
													"(voice: English version)",
												}, ci.Note) && (cn.Country_code == "[us]")) && (it.Info == "release dates")) && !_equal(mc.Note, nil)) && (strings.Contains(mc.Note, "(USA)") || strings.Contains(mc.Note, "(worldwide)"))) && !_equal(mi.Info, nil)) && ((strings.Contains(mi.Info, "Japan:") && strings.Contains(mi.Info, "200")) || (strings.Contains(mi.Info, "USA:") && strings.Contains(mi.Info, "200")))) && (n.Gender == "f")) && strings.Contains(n.Name, "Ang")) && (rt.Role == "actress")) && (t.Production_year >= 2005)) && (t.Production_year <= 2009) {
													if ((((((((((slices.Contains([]string{
														"(voice)",
														"(voice: Japanese version)",
														"(voice) (uncredited)",
														"(voice: English version)",
													}, ci.Note) && (cn.Country_code == "[us]")) && (it.Info == "release dates")) && !_equal(mc.Note, nil)) && (strings.Contains(mc.Note, "(USA)") || strings.Contains(mc.Note, "(worldwide)"))) && !_equal(mi.Info, nil)) && ((strings.Contains(mi.Info, "Japan:") && strings.Contains(mi.Info, "200")) || (strings.Contains(mi.Info, "USA:") && strings.Contains(mi.Info, "200")))) && (n.Gender == "f")) && strings.Contains(n.Name, "Ang")) && (rt.Role == "actress")) && (t.Production_year >= 2005)) && (t.Production_year <= 2009) {
														results = append(results, Matche{
															Actress: n.Name,
															Movie:   t.Title,
														})
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Voicing_actress: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range matches {
				r := rRaw.(Matche)
				results = append(results, r.Actress)
			}
			return results
		}()),
		Voiced_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range matches {
				r := rRaw.(Matche)
				results = append(results, r.Movie)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
