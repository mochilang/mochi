//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Cast_info struct {
	Movie_id       int `json:"movie_id"`
	Person_role_id int `json:"person_role_id"`
	Person_id      int `json:"person_id"`
}

type Char_name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Comp_cast_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Complete_cast struct {
	Movie_id   int `json:"movie_id"`
	Subject_id int `json:"subject_id"`
	Status_id  int `json:"status_id"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Movie_info_idx struct {
	Movie_id     int     `json:"movie_id"`
	Info_type_id int     `json:"info_type_id"`
	Info         float64 `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Result struct {
	Character_name      string  `json:"character_name"`
	Rating              float64 `json:"rating"`
	Playing_actor       string  `json:"playing_actor"`
	Complete_hero_movie string  `json:"complete_hero_movie"`
}

type Row struct {
	Character string  `json:"character"`
	Rating    float64 `json:"rating"`
	Actor     string  `json:"actor"`
	Movie     string  `json:"movie"`
}

type Title struct {
	ID              int    `json:"id"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q26_finds_hero_movies_with_rating_above_7() {
	expect(_equal(result, []v{v{
		Character_name:      "Spider-Man",
		Rating:              8.5,
		Playing_actor:       "Actor One",
		Complete_hero_movie: "Hero Movie",
	}}))
}

var complete_cast []Complete_cast
var comp_cast_type []Comp_cast_type
var char_name []Char_name
var cast_info []Cast_info
var info_type []Info_type
var keyword []Keyword
var kind_type []Kind_type
var movie_info_idx []Movie_info_idx
var movie_keyword []Movie_keyword
var name []Name
var title []Title
var allowed_keywords []string
var rows []Row
var result []Result

func main() {
	complete_cast = []Complete_cast{Complete_cast{
		Movie_id:   1,
		Subject_id: 1,
		Status_id:  2,
	}, Complete_cast{
		Movie_id:   2,
		Subject_id: 1,
		Status_id:  2,
	}}
	comp_cast_type = []Comp_cast_type{Comp_cast_type{
		ID:   1,
		Kind: "cast",
	}, Comp_cast_type{
		ID:   2,
		Kind: "complete",
	}}
	char_name = []Char_name{Char_name{
		ID:   1,
		Name: "Spider-Man",
	}, Char_name{
		ID:   2,
		Name: "Villain",
	}}
	cast_info = []Cast_info{Cast_info{
		Movie_id:       1,
		Person_role_id: 1,
		Person_id:      1,
	}, Cast_info{
		Movie_id:       2,
		Person_role_id: 2,
		Person_id:      2,
	}}
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "rating",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "superhero",
	}, Keyword{
		ID:      2,
		Keyword: "comedy",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "movie",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     1,
		Info_type_id: 1,
		Info:         8.5,
	}, Movie_info_idx{
		Movie_id:     2,
		Info_type_id: 1,
		Info:         6.5,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   1,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   2,
		Keyword_id: 2,
	}}
	name = []Name{Name{
		ID:   1,
		Name: "Actor One",
	}, Name{
		ID:   2,
		Name: "Actor Two",
	}}
	title = []Title{Title{
		ID:              1,
		Kind_id:         1,
		Production_year: 2005,
		Title:           "Hero Movie",
	}, Title{
		ID:              2,
		Kind_id:         1,
		Production_year: 1999,
		Title:           "Old Film",
	}}
	allowed_keywords = []string{
		"superhero",
		"marvel-comics",
		"based-on-comic",
		"tv-special",
		"fight",
		"violence",
		"magnet",
		"web",
		"claw",
		"laser",
	}
	rows = func() []Row {
		results := []Row{}
		for _, ccRaw := range complete_cast {
			cc := ccRaw.(Complete_cast)
			for _, cct1 := range comp_cast_type {
				if !(cct1.ID == cc.Subject_id) {
					continue
				}
				for _, cct2 := range comp_cast_type {
					if !(cct2.ID == cc.Status_id) {
						continue
					}
					for _, ci := range cast_info {
						if !(ci.Movie_id == cc.Movie_id) {
							continue
						}
						for _, chn := range char_name {
							if !(chn.ID == ci.Person_role_id) {
								continue
							}
							for _, n := range name {
								if !(n.ID == ci.Person_id) {
									continue
								}
								for _, t := range title {
									if !(t.ID == ci.Movie_id) {
										continue
									}
									for _, kt := range kind_type {
										if !(kt.ID == t.Kind_id) {
											continue
										}
										for _, mk := range movie_keyword {
											if !(mk.Movie_id == t.ID) {
												continue
											}
											for _, k := range keyword {
												if !(k.ID == mk.Keyword_id) {
													continue
												}
												for _, mi_idx := range movie_info_idx {
													if !(mi_idx.Movie_id == t.ID) {
														continue
													}
													for _, it2 := range info_type {
														if !(it2.ID == mi_idx.Info_type_id) {
															continue
														}
														if ((((((((cct1.Kind == "cast") && strings.Contains(cct2.Kind, "complete")) && !_equal(chn.Name, nil)) && (strings.Contains(chn.Name, "man") || strings.Contains(chn.Name, "Man"))) && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (kt.Kind == "movie")) && (mi_idx.Info > 7.0)) && (t.Production_year > 2000) {
															if ((((((((cct1.Kind == "cast") && strings.Contains(cct2.Kind, "complete")) && !_equal(chn.Name, nil)) && (strings.Contains(chn.Name, "man") || strings.Contains(chn.Name, "Man"))) && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (kt.Kind == "movie")) && (mi_idx.Info > 7.0)) && (t.Production_year > 2000) {
																results = append(results, Row{
																	Character: chn.Name,
																	Rating:    mi_idx.Info,
																	Actor:     n.Name,
																	Movie:     t.Title,
																})
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Character_name: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Character)
			}
			return results
		}()),
		Rating: _minOrdered[float64](func() []float64 {
			results := []float64{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Rating)
			}
			return results
		}()),
		Playing_actor: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Actor)
			}
			return results
		}()),
		Complete_hero_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Movie)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q26_finds_hero_movies_with_rating_above_7()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
