//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:45Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"sort"
	"time"
)

type Candidate struct {
	Release_date string `json:"release_date"`
	Rating       string `json:"rating"`
	German_movie string `json:"german_movie"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Movie_companie struct {
	Movie_id        int `json:"movie_id"`
	Company_id      int `json:"company_id"`
	Company_type_id int `json:"company_type_id"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Title struct {
	ID      int    `json:"id"`
	Kind_id int    `json:"kind_id"`
	Title   string `json:"title"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q13_finds_earliest_German_movie_info() {
	expect(_equal(result, v{
		Release_date: "1997-05-10",
		Rating:       "6.0",
		German_movie: "Alpha",
	}))
}

var company_name []Company_name
var company_type []Company_type
var info_type []Info_type
var kind_type []Kind_type
var title []Title
var movie_companies []Movie_companie
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var candidates []Candidate
var result v

func main() {
	company_name = []Company_name{Company_name{
		ID:           1,
		Country_code: "[de]",
	}, Company_name{
		ID:           2,
		Country_code: "[us]",
	}}
	company_type = []Company_type{Company_type{
		ID:   1,
		Kind: "production companies",
	}, Company_type{
		ID:   2,
		Kind: "distributors",
	}}
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "rating",
	}, Info_type{
		ID:   2,
		Info: "release dates",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "movie",
	}, Kind_type{
		ID:   2,
		Kind: "video",
	}}
	title = []Title{Title{
		ID:      10,
		Kind_id: 1,
		Title:   "Alpha",
	}, Title{
		ID:      20,
		Kind_id: 1,
		Title:   "Beta",
	}, Title{
		ID:      30,
		Kind_id: 2,
		Title:   "Gamma",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        10,
		Company_id:      1,
		Company_type_id: 1,
	}, Movie_companie{
		Movie_id:        20,
		Company_id:      1,
		Company_type_id: 1,
	}, Movie_companie{
		Movie_id:        30,
		Company_id:      2,
		Company_type_id: 1,
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     10,
		Info_type_id: 2,
		Info:         "1997-05-10",
	}, Movie_info{
		Movie_id:     20,
		Info_type_id: 2,
		Info:         "1998-03-20",
	}, Movie_info{
		Movie_id:     30,
		Info_type_id: 2,
		Info:         "1999-07-30",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     10,
		Info_type_id: 1,
		Info:         "6.0",
	}, Movie_info_idx{
		Movie_id:     20,
		Info_type_id: 1,
		Info:         "7.5",
	}, Movie_info_idx{
		Movie_id:     30,
		Info_type_id: 1,
		Info:         "5.5",
	}}
	candidates = func() []Candidate {
		results := []Candidate{}
		for _, cnRaw := range company_name {
			cn := cnRaw.(Company_name)
			for _, mc := range movie_companies {
				if !(mc.Company_id == cn.ID) {
					continue
				}
				for _, ct := range company_type {
					if !(ct.ID == mc.Company_type_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == mc.Movie_id) {
							continue
						}
						for _, kt := range kind_type {
							if !(kt.ID == t.Kind_id) {
								continue
							}
							for _, mi := range movie_info {
								if !(mi.Movie_id == t.ID) {
									continue
								}
								for _, it2 := range info_type {
									if !(it2.ID == mi.Info_type_id) {
										continue
									}
									for _, miidx := range movie_info_idx {
										if !(miidx.Movie_id == t.ID) {
											continue
										}
										for _, it := range info_type {
											if !(it.ID == miidx.Info_type_id) {
												continue
											}
											if ((((cn.Country_code == "[de]") && (ct.Kind == "production companies")) && (it.Info == "rating")) && (it2.Info == "release dates")) && (kt.Kind == "movie") {
												if ((((cn.Country_code == "[de]") && (ct.Kind == "production companies")) && (it.Info == "rating")) && (it2.Info == "release dates")) && (kt.Kind == "movie") {
													results = append(results, Candidate{
														Release_date: mi.Info,
														Rating:       miidx.Info,
														German_movie: t.Title,
													})
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = Candidate{
		Release_date: (func() []string {
			src := _toAnySlice(candidates)
			resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.Release_date
			}, sortKey: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.Release_date
			}, skip: -1, take: -1})
			out := make([]string, len(resAny))
			for i, v := range resAny {
				out[i] = v.(string)
			}
			return out
		}())[0],
		Rating: (func() []string {
			src := _toAnySlice(candidates)
			resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.Rating
			}, sortKey: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.Rating
			}, skip: -1, take: -1})
			out := make([]string, len(resAny))
			for i, v := range resAny {
				out[i] = v.(string)
			}
			return out
		}())[0],
		German_movie: (func() []string {
			src := _toAnySlice(candidates)
			resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.German_movie
			}, sortKey: func(_a ...any) any {
				tmp0 := _a[0]
				var x Candidate
				if tmp0 != nil {
					x = tmp0.(Candidate)
				}
				_ = x
				return x.German_movie
			}, skip: -1, take: -1})
			out := make([]string, len(resAny))
			for i, v := range resAny {
				out[i] = v.(string)
			}
			return out
		}())[0],
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q13_finds_earliest_German_movie_info()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
