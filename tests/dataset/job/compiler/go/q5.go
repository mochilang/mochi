//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:44Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Company_type struct {
	Ct_id int    `json:"ct_id"`
	Kind  string `json:"kind"`
}

type Info_type struct {
	It_id int    `json:"it_id"`
	Info  string `json:"info"`
}

type Movie_companie struct {
	Movie_id        int    `json:"movie_id"`
	Company_type_id int    `json:"company_type_id"`
	Note            string `json:"note"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info         string `json:"info"`
	Info_type_id int    `json:"info_type_id"`
}

type Result struct {
	Typical_european_movie string `json:"typical_european_movie"`
}

type Title struct {
	T_id            int    `json:"t_id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q5_finds_the_lexicographically_first_qualifying_title() {
	expect(_equal(result, []v{v{Typical_european_movie: "A Film"}}))
}

var company_type []Company_type
var info_type []Info_type
var title []Title
var movie_companies []Movie_companie
var movie_info []Movie_info
var candidate_titles []string
var result []Result

func main() {
	company_type = []Company_type{Company_type{
		Ct_id: 1,
		Kind:  "production companies",
	}, Company_type{
		Ct_id: 2,
		Kind:  "other",
	}}
	info_type = []Info_type{Info_type{
		It_id: 10,
		Info:  "languages",
	}}
	title = []Title{Title{
		T_id:            100,
		Title:           "B Movie",
		Production_year: 2010,
	}, Title{
		T_id:            200,
		Title:           "A Film",
		Production_year: 2012,
	}, Title{
		T_id:            300,
		Title:           "Old Movie",
		Production_year: 2000,
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        100,
		Company_type_id: 1,
		Note:            "ACME (France) (theatrical)",
	}, Movie_companie{
		Movie_id:        200,
		Company_type_id: 1,
		Note:            "ACME (France) (theatrical)",
	}, Movie_companie{
		Movie_id:        300,
		Company_type_id: 1,
		Note:            "ACME (France) (theatrical)",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     100,
		Info:         "German",
		Info_type_id: 10,
	}, Movie_info{
		Movie_id:     200,
		Info:         "Swedish",
		Info_type_id: 10,
	}, Movie_info{
		Movie_id:     300,
		Info:         "German",
		Info_type_id: 10,
	}}
	candidate_titles = func() []string {
		results := []string{}
		for _, ctRaw := range company_type {
			ct := ctRaw.(Company_type)
			for _, mc := range movie_companies {
				if !(mc.Company_type_id == ct.Ct_id) {
					continue
				}
				for _, mi := range movie_info {
					if !(mi.Movie_id == mc.Movie_id) {
						continue
					}
					for _, it := range info_type {
						if !(it.It_id == mi.Info_type_id) {
							continue
						}
						for _, t := range title {
							if !(t.T_id == mc.Movie_id) {
								continue
							}
							if ((((ct.Kind == "production companies") && strings.Contains(mc.Note, "(theatrical)")) && strings.Contains(mc.Note, "(France)")) && (t.Production_year > 2005)) && (slices.Contains([]string{
								"Sweden",
								"Norway",
								"Germany",
								"Denmark",
								"Swedish",
								"Denish",
								"Norwegian",
								"German",
							}, mi.Info)) {
								if ((((ct.Kind == "production companies") && strings.Contains(mc.Note, "(theatrical)")) && strings.Contains(mc.Note, "(France)")) && (t.Production_year > 2005)) && (slices.Contains([]string{
									"Sweden",
									"Norway",
									"Germany",
									"Denmark",
									"Swedish",
									"Denish",
									"Norwegian",
									"German",
								}, mi.Info)) {
									results = append(results, t.Title)
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{Typical_european_movie: _minOrdered[string](candidate_titles)}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q5_finds_the_lexicographically_first_qualifying_title()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
