//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:47Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Joined struct {
	Link_type    string `json:"link_type"`
	First_movie  string `json:"first_movie"`
	Second_movie string `json:"second_movie"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Link_type struct {
	ID   int    `json:"id"`
	Link string `json:"link"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Movie_link struct {
	Movie_id        int `json:"movie_id"`
	Linked_movie_id int `json:"linked_movie_id"`
	Link_type_id    int `json:"link_type_id"`
}

type Title struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q32_finds_movie_link_for_10_000_mile_club() {
	expect(_equal(result, v{
		Link_type:    "sequel",
		First_movie:  "Movie A",
		Second_movie: "Movie C",
	}))
}

var keyword []Keyword
var link_type []Link_type
var movie_keyword []Movie_keyword
var movie_link []Movie_link
var title []Title
var joined []Joined
var result v

func main() {
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "10,000-mile-club",
	}, Keyword{
		ID:      2,
		Keyword: "character-name-in-title",
	}}
	link_type = []Link_type{Link_type{
		ID:   1,
		Link: "sequel",
	}, Link_type{
		ID:   2,
		Link: "remake",
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   100,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   200,
		Keyword_id: 2,
	}}
	movie_link = []Movie_link{Movie_link{
		Movie_id:        100,
		Linked_movie_id: 300,
		Link_type_id:    1,
	}, Movie_link{
		Movie_id:        200,
		Linked_movie_id: 400,
		Link_type_id:    2,
	}}
	title = []Title{
		Title{
			ID:    100,
			Title: "Movie A",
		},
		Title{
			ID:    200,
			Title: "Movie B",
		},
		Title{
			ID:    300,
			Title: "Movie C",
		},
		Title{
			ID:    400,
			Title: "Movie D",
		},
	}
	joined = func() []Joined {
		results := []Joined{}
		for _, kRaw := range keyword {
			k := kRaw.(Keyword)
			if k.Keyword == "10,000-mile-club" {
				for _, mk := range movie_keyword {
					if !(mk.Keyword_id == k.ID) {
						continue
					}
					for _, t1 := range title {
						if !(t1.ID == mk.Movie_id) {
							continue
						}
						for _, ml := range movie_link {
							if !(ml.Movie_id == t1.ID) {
								continue
							}
							for _, t2 := range title {
								if !(t2.ID == ml.Linked_movie_id) {
									continue
								}
								for _, lt := range link_type {
									if !(lt.ID == ml.Link_type_id) {
										continue
									}
									results = append(results, Joined{
										Link_type:    lt.Link,
										First_movie:  t1.Title,
										Second_movie: t2.Title,
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = Joined{
		Link_type: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range joined {
				r := rRaw.(Joined)
				results = append(results, r.Link_type)
			}
			return results
		}()),
		First_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range joined {
				r := rRaw.(Joined)
				results = append(results, r.First_movie)
			}
			return results
		}()),
		Second_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range joined {
				r := rRaw.(Joined)
				results = append(results, r.Second_movie)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal([]v{result}); fmt.Println(string(b)) }()
	test_Q32_finds_movie_link_for_10_000_mile_club()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
