//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:44Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Movie_info struct {
	Movie_id int    `json:"movie_id"`
	Info     string `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Result struct {
	Movie_title string `json:"movie_title"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q3_returns_lexicographically_smallest_sequel_title() {
	expect(_equal(result, []v{v{Movie_title: "Alpha"}}))
}

var keyword []Keyword
var movie_info []Movie_info
var movie_keyword []Movie_keyword
var title []Title
var allowed_infos []string
var candidate_titles []string
var result []Result

func main() {
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "amazing sequel",
	}, Keyword{
		ID:      2,
		Keyword: "prequel",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id: 10,
		Info:     "Germany",
	}, Movie_info{
		Movie_id: 30,
		Info:     "Sweden",
	}, Movie_info{
		Movie_id: 20,
		Info:     "France",
	}}
	movie_keyword = []Movie_keyword{
		Movie_keyword{
			Movie_id:   10,
			Keyword_id: 1,
		},
		Movie_keyword{
			Movie_id:   30,
			Keyword_id: 1,
		},
		Movie_keyword{
			Movie_id:   20,
			Keyword_id: 1,
		},
		Movie_keyword{
			Movie_id:   10,
			Keyword_id: 2,
		},
	}
	title = []Title{Title{
		ID:              10,
		Title:           "Alpha",
		Production_year: 2006,
	}, Title{
		ID:              30,
		Title:           "Beta",
		Production_year: 2008,
	}, Title{
		ID:              20,
		Title:           "Gamma",
		Production_year: 2009,
	}}
	allowed_infos = []string{
		"Sweden",
		"Norway",
		"Germany",
		"Denmark",
		"Swedish",
		"Denish",
		"Norwegian",
		"German",
	}
	candidate_titles = func() []string {
		results := []string{}
		for _, kRaw := range keyword {
			k := kRaw.(Keyword)
			for _, mk := range movie_keyword {
				if !(mk.Keyword_id == k.ID) {
					continue
				}
				for _, mi := range movie_info {
					if !(mi.Movie_id == mk.Movie_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == mi.Movie_id) {
							continue
						}
						if ((strings.Contains(k.Keyword, "sequel") && slices.Contains(allowed_infos, mi.Info)) && (t.Production_year > 2005)) && (mk.Movie_id == mi.Movie_id) {
							if ((strings.Contains(k.Keyword, "sequel") && slices.Contains(allowed_infos, mi.Info)) && (t.Production_year > 2005)) && (mk.Movie_id == mi.Movie_id) {
								results = append(results, t.Title)
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{Movie_title: _minOrdered[string](candidate_titles)}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q3_returns_lexicographically_smallest_sequel_title()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
