//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Cast_info struct {
	Movie_id  int    `json:"movie_id"`
	Person_id int    `json:"person_id"`
	Note      string `json:"note"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Movie_info struct {
	Movie_id     int `json:"movie_id"`
	Info_type_id int `json:"info_type_id"`
	Info         int `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int `json:"movie_id"`
	Info_type_id int `json:"info_type_id"`
	Info         int `json:"info"`
}

type Name struct {
	ID     int    `json:"id"`
	Name   string `json:"name"`
	Gender string `json:"gender"`
}

type Row struct {
	Budget int    `json:"budget"`
	Votes  int    `json:"votes"`
	Title  string `json:"title"`
}

type Title struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type v = Row

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions() {
	expect(_equal(result, v{
		Movie_budget: 90,
		Movie_votes:  400,
		Movie_title:  "Alpha",
	}))
}

var info_type []Info_type
var name []Name
var title []Title
var cast_info []Cast_info
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var rows []Row
var result v

func main() {
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "budget",
	}, Info_type{
		ID:   2,
		Info: "votes",
	}, Info_type{
		ID:   3,
		Info: "rating",
	}}
	name = []Name{Name{
		ID:     1,
		Name:   "Big Tim",
		Gender: "m",
	}, Name{
		ID:     2,
		Name:   "Slim Tim",
		Gender: "m",
	}, Name{
		ID:     3,
		Name:   "Alice",
		Gender: "f",
	}}
	title = []Title{Title{
		ID:    10,
		Title: "Alpha",
	}, Title{
		ID:    20,
		Title: "Beta",
	}, Title{
		ID:    30,
		Title: "Gamma",
	}}
	cast_info = []Cast_info{Cast_info{
		Movie_id:  10,
		Person_id: 1,
		Note:      "(producer)",
	}, Cast_info{
		Movie_id:  20,
		Person_id: 2,
		Note:      "(executive producer)",
	}, Cast_info{
		Movie_id:  30,
		Person_id: 3,
		Note:      "(producer)",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     10,
		Info_type_id: 1,
		Info:         90,
	}, Movie_info{
		Movie_id:     20,
		Info_type_id: 1,
		Info:         120,
	}, Movie_info{
		Movie_id:     30,
		Info_type_id: 1,
		Info:         110,
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     10,
		Info_type_id: 2,
		Info:         500,
	}, Movie_info_idx{
		Movie_id:     20,
		Info_type_id: 2,
		Info:         400,
	}, Movie_info_idx{
		Movie_id:     30,
		Info_type_id: 2,
		Info:         800,
	}}
	rows = func() []Row {
		results := []Row{}
		for _, ciRaw := range cast_info {
			ci := ciRaw.(Cast_info)
			for _, n := range name {
				if !(n.ID == ci.Person_id) {
					continue
				}
				for _, t := range title {
					if !(t.ID == ci.Movie_id) {
						continue
					}
					for _, mi := range movie_info {
						if !(mi.Movie_id == t.ID) {
							continue
						}
						for _, mi_idx := range movie_info_idx {
							if !(mi_idx.Movie_id == t.ID) {
								continue
							}
							for _, it1 := range info_type {
								if !(it1.ID == mi.Info_type_id) {
									continue
								}
								for _, it2 := range info_type {
									if !(it2.ID == mi_idx.Info_type_id) {
										continue
									}
									if (((((((slices.Contains([]string{"(producer)", "(executive producer)"}, ci.Note) && (it1.Info == "budget")) && (it2.Info == "votes")) && (n.Gender == "m")) && strings.Contains(n.Name, "Tim")) && (t.ID == ci.Movie_id)) && (ci.Movie_id == mi.Movie_id)) && (ci.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id) {
										if (((((((slices.Contains([]string{"(producer)", "(executive producer)"}, ci.Note) && (it1.Info == "budget")) && (it2.Info == "votes")) && (n.Gender == "m")) && strings.Contains(n.Name, "Tim")) && (t.ID == ci.Movie_id)) && (ci.Movie_id == mi.Movie_id)) && (ci.Movie_id == mi_idx.Movie_id)) && (mi.Movie_id == mi_idx.Movie_id) {
											results = append(results, Row{
												Budget: mi.Info,
												Votes:  mi_idx.Info,
												Title:  t.Title,
											})
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = v{
		Movie_budget: _minOrdered[int](func() []int {
			results := []int{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Budget)
			}
			return results
		}()),
		Movie_votes: _minOrdered[int](func() []int {
			results := []int{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Votes)
			}
			return results
		}()),
		Movie_title: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Title)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
