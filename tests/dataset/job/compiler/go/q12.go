//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:45Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"
)

type Company_name struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Movie_companie struct {
	Movie_id        int `json:"movie_id"`
	Company_id      int `json:"company_id"`
	Company_type_id int `json:"company_type_id"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int     `json:"movie_id"`
	Info_type_id int     `json:"info_type_id"`
	Info         float64 `json:"info"`
}

type Result struct {
	Movie_company      string  `json:"movie_company"`
	Rating             float64 `json:"rating"`
	Drama_horror_movie string  `json:"drama_horror_movie"`
}

type Title struct {
	ID              int    `json:"id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q12_finds_high_rated_US_drama_or_horror_with_company() {
	expect(_equal(result, []v{v{
		Movie_company:      "Best Pictures",
		Rating:             8.3,
		Drama_horror_movie: "Great Drama",
	}}))
}

var company_name []Company_name
var company_type []Company_type
var info_type []Info_type
var movie_companies []Movie_companie
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var title []Title
var result []Result

func main() {
	company_name = []Company_name{Company_name{
		ID:           1,
		Name:         "Best Pictures",
		Country_code: "[us]",
	}, Company_name{
		ID:           2,
		Name:         "Foreign Films",
		Country_code: "[uk]",
	}}
	company_type = []Company_type{Company_type{
		ID:   10,
		Kind: "production companies",
	}, Company_type{
		ID:   20,
		Kind: "distributors",
	}}
	info_type = []Info_type{Info_type{
		ID:   100,
		Info: "genres",
	}, Info_type{
		ID:   200,
		Info: "rating",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        1000,
		Company_id:      1,
		Company_type_id: 10,
	}, Movie_companie{
		Movie_id:        2000,
		Company_id:      2,
		Company_type_id: 10,
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     1000,
		Info_type_id: 100,
		Info:         "Drama",
	}, Movie_info{
		Movie_id:     2000,
		Info_type_id: 100,
		Info:         "Horror",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     1000,
		Info_type_id: 200,
		Info:         8.3,
	}, Movie_info_idx{
		Movie_id:     2000,
		Info_type_id: 200,
		Info:         7.5,
	}}
	title = []Title{Title{
		ID:              1000,
		Production_year: 2006,
		Title:           "Great Drama",
	}, Title{
		ID:              2000,
		Production_year: 2007,
		Title:           "Low Rated",
	}}
	result = func() []Result {
		results := []Result{}
		for _, cnRaw := range company_name {
			cn := cnRaw.(Company_name)
			for _, mc := range movie_companies {
				if !(mc.Company_id == cn.ID) {
					continue
				}
				for _, ct := range company_type {
					if !(ct.ID == mc.Company_type_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == mc.Movie_id) {
							continue
						}
						for _, mi := range movie_info {
							if !(mi.Movie_id == t.ID) {
								continue
							}
							for _, it1 := range info_type {
								if !(it1.ID == mi.Info_type_id) {
									continue
								}
								for _, mi_idx := range movie_info_idx {
									if !(mi_idx.Movie_id == t.ID) {
										continue
									}
									for _, it2 := range info_type {
										if !(it2.ID == mi_idx.Info_type_id) {
											continue
										}
										if (((((((cn.Country_code == "[us]") && (ct.Kind == "production companies")) && (it1.Info == "genres")) && (it2.Info == "rating")) && ((mi.Info == "Drama") || (mi.Info == "Horror"))) && (mi_idx.Info > 8.0)) && (t.Production_year >= 2005)) && (t.Production_year <= 2008) {
											if (((((((cn.Country_code == "[us]") && (ct.Kind == "production companies")) && (it1.Info == "genres")) && (it2.Info == "rating")) && ((mi.Info == "Drama") || (mi.Info == "Horror"))) && (mi_idx.Info > 8.0)) && (t.Production_year >= 2005)) && (t.Production_year <= 2008) {
												results = append(results, Result{
													Movie_company:      cn.Name,
													Rating:             mi_idx.Info,
													Drama_horror_movie: t.Title,
												})
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q12_finds_high_rated_US_drama_or_horror_with_company()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
