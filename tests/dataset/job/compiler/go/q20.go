//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:46Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Cast_info struct {
	Movie_id       int `json:"movie_id"`
	Person_role_id int `json:"person_role_id"`
	Person_id      int `json:"person_id"`
}

type Char_name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Comp_cast_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Complete_cast struct {
	Movie_id   int `json:"movie_id"`
	Subject_id int `json:"subject_id"`
	Status_id  int `json:"status_id"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Result struct {
	Complete_downey_ironman_movie string `json:"complete_downey_ironman_movie"`
}

type Title struct {
	ID              int    `json:"id"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q20_finds_complete_cast_Iron_Man_movie() {
	expect(_equal(result, []v{v{Complete_downey_ironman_movie: "Iron Man"}}))
}

var comp_cast_type []Comp_cast_type
var char_name []Char_name
var complete_cast []Complete_cast
var name []Name
var cast_info []Cast_info
var keyword []Keyword
var movie_keyword []Movie_keyword
var kind_type []Kind_type
var title []Title
var matches []string
var result []Result

func main() {
	comp_cast_type = []Comp_cast_type{Comp_cast_type{
		ID:   1,
		Kind: "cast",
	}, Comp_cast_type{
		ID:   2,
		Kind: "complete cast",
	}}
	char_name = []Char_name{Char_name{
		ID:   1,
		Name: "Tony Stark",
	}, Char_name{
		ID:   2,
		Name: "Sherlock Holmes",
	}}
	complete_cast = []Complete_cast{Complete_cast{
		Movie_id:   1,
		Subject_id: 1,
		Status_id:  2,
	}, Complete_cast{
		Movie_id:   2,
		Subject_id: 1,
		Status_id:  2,
	}}
	name = []Name{Name{
		ID:   1,
		Name: "Robert Downey Jr.",
	}, Name{
		ID:   2,
		Name: "Another Actor",
	}}
	cast_info = []Cast_info{Cast_info{
		Movie_id:       1,
		Person_role_id: 1,
		Person_id:      1,
	}, Cast_info{
		Movie_id:       2,
		Person_role_id: 2,
		Person_id:      2,
	}}
	keyword = []Keyword{Keyword{
		ID:      10,
		Keyword: "superhero",
	}, Keyword{
		ID:      20,
		Keyword: "romance",
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   1,
		Keyword_id: 10,
	}, Movie_keyword{
		Movie_id:   2,
		Keyword_id: 20,
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "movie",
	}}
	title = []Title{Title{
		ID:              1,
		Kind_id:         1,
		Production_year: 2008,
		Title:           "Iron Man",
	}, Title{
		ID:              2,
		Kind_id:         1,
		Production_year: 1940,
		Title:           "Old Hero",
	}}
	matches = func() []string {
		results := []string{}
		for _, ccRaw := range complete_cast {
			cc := ccRaw.(Complete_cast)
			for _, cct1 := range comp_cast_type {
				if !(cct1.ID == cc.Subject_id) {
					continue
				}
				for _, cct2 := range comp_cast_type {
					if !(cct2.ID == cc.Status_id) {
						continue
					}
					for _, ci := range cast_info {
						if !(ci.Movie_id == cc.Movie_id) {
							continue
						}
						for _, chn := range char_name {
							if !(chn.ID == ci.Person_role_id) {
								continue
							}
							for _, n := range name {
								if !(n.ID == ci.Person_id) {
									continue
								}
								for _, mk := range movie_keyword {
									if !(mk.Movie_id == cc.Movie_id) {
										continue
									}
									for _, k := range keyword {
										if !(k.ID == mk.Keyword_id) {
											continue
										}
										for _, t := range title {
											if !(t.ID == cc.Movie_id) {
												continue
											}
											for _, kt := range kind_type {
												if !(kt.ID == t.Kind_id) {
													continue
												}
												if ((((((cct1.Kind == "cast") && strings.Contains(cct2.Kind, "complete")) && (!strings.Contains(chn.Name, "Sherlock"))) && (strings.Contains(chn.Name, "Tony Stark") || strings.Contains(chn.Name, "Iron Man"))) && slices.Contains([]string{
													"superhero",
													"sequel",
													"second-part",
													"marvel-comics",
													"based-on-comic",
													"tv-special",
													"fight",
													"violence",
												}, k.Keyword)) && (kt.Kind == "movie")) && (t.Production_year > 1950) {
													if ((((((cct1.Kind == "cast") && strings.Contains(cct2.Kind, "complete")) && (!strings.Contains(chn.Name, "Sherlock"))) && (strings.Contains(chn.Name, "Tony Stark") || strings.Contains(chn.Name, "Iron Man"))) && slices.Contains([]string{
														"superhero",
														"sequel",
														"second-part",
														"marvel-comics",
														"based-on-comic",
														"tv-special",
														"fight",
														"violence",
													}, k.Keyword)) && (kt.Kind == "movie")) && (t.Production_year > 1950) {
														results = append(results, t.Title)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{Complete_downey_ironman_movie: _minOrdered[string](matches)}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q20_finds_complete_cast_Iron_Man_movie()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
