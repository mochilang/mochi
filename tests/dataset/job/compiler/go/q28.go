//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:47Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Comp_cast_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Country_code string `json:"country_code"`
}

type Company_type struct {
	ID int `json:"id"`
}

type Complete_cast struct {
	Movie_id   int `json:"movie_id"`
	Subject_id int `json:"subject_id"`
	Status_id  int `json:"status_id"`
}

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Kind_type struct {
	ID   int    `json:"id"`
	Kind string `json:"kind"`
}

type Matche struct {
	Company string  `json:"company"`
	Rating  float64 `json:"rating"`
	Title   string  `json:"title"`
}

type Movie_companie struct {
	Movie_id        int    `json:"movie_id"`
	Company_id      int    `json:"company_id"`
	Company_type_id int    `json:"company_type_id"`
	Note            string `json:"note"`
}

type Movie_info struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_info_idx struct {
	Movie_id     int     `json:"movie_id"`
	Info_type_id int     `json:"info_type_id"`
	Info         float64 `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Title struct {
	ID              int    `json:"id"`
	Kind_id         int    `json:"kind_id"`
	Production_year int    `json:"production_year"`
	Title           string `json:"title"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q28_finds_euro_dark_movie_with_minimal_values() {
	expect(_equal(result, v{
		Movie_company:            "Euro Films Ltd.",
		Rating:                   7.2,
		Complete_euro_dark_movie: "Dark Euro Film",
	}))
}

var comp_cast_type []Comp_cast_type
var complete_cast []Complete_cast
var company_name []Company_name
var company_type []Company_type
var movie_companies []Movie_companie
var info_type []Info_type
var keyword []Keyword
var kind_type []Kind_type
var movie_info []Movie_info
var movie_info_idx []Movie_info_idx
var movie_keyword []Movie_keyword
var title []Title
var allowed_keywords []string
var allowed_countries []string
var matches []Matche
var result v

func main() {
	comp_cast_type = []Comp_cast_type{Comp_cast_type{
		ID:   1,
		Kind: "crew",
	}, Comp_cast_type{
		ID:   2,
		Kind: "complete+verified",
	}, Comp_cast_type{
		ID:   3,
		Kind: "partial",
	}}
	complete_cast = []Complete_cast{Complete_cast{
		Movie_id:   1,
		Subject_id: 1,
		Status_id:  3,
	}, Complete_cast{
		Movie_id:   2,
		Subject_id: 1,
		Status_id:  2,
	}}
	company_name = []Company_name{Company_name{
		ID:           1,
		Name:         "Euro Films Ltd.",
		Country_code: "[gb]",
	}, Company_name{
		ID:           2,
		Name:         "US Studios",
		Country_code: "[us]",
	}}
	company_type = []Company_type{Company_type{ID: 1}, Company_type{ID: 2}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:        1,
		Company_id:      1,
		Company_type_id: 1,
		Note:            "production (2005) (UK)",
	}, Movie_companie{
		Movie_id:        2,
		Company_id:      2,
		Company_type_id: 1,
		Note:            "production (USA)",
	}}
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "countries",
	}, Info_type{
		ID:   2,
		Info: "rating",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "blood",
	}, Keyword{
		ID:      2,
		Keyword: "romance",
	}}
	kind_type = []Kind_type{Kind_type{
		ID:   1,
		Kind: "movie",
	}, Kind_type{
		ID:   2,
		Kind: "episode",
	}}
	movie_info = []Movie_info{Movie_info{
		Movie_id:     1,
		Info_type_id: 1,
		Info:         "Germany",
	}, Movie_info{
		Movie_id:     2,
		Info_type_id: 1,
		Info:         "USA",
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     1,
		Info_type_id: 2,
		Info:         7.2,
	}, Movie_info_idx{
		Movie_id:     2,
		Info_type_id: 2,
		Info:         9.0,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   1,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   2,
		Keyword_id: 2,
	}}
	title = []Title{Title{
		ID:              1,
		Kind_id:         1,
		Production_year: 2005,
		Title:           "Dark Euro Film",
	}, Title{
		ID:              2,
		Kind_id:         1,
		Production_year: 2005,
		Title:           "US Film",
	}}
	allowed_keywords = []string{
		"murder",
		"murder-in-title",
		"blood",
		"violence",
	}
	allowed_countries = []string{
		"Sweden",
		"Norway",
		"Germany",
		"Denmark",
		"Swedish",
		"Danish",
		"Norwegian",
		"German",
		"USA",
		"American",
	}
	matches = func() []Matche {
		results := []Matche{}
		for _, ccRaw := range complete_cast {
			cc := ccRaw.(Complete_cast)
			for _, cct1 := range comp_cast_type {
				if !(cct1.ID == cc.Subject_id) {
					continue
				}
				for _, cct2 := range comp_cast_type {
					if !(cct2.ID == cc.Status_id) {
						continue
					}
					for _, mc := range movie_companies {
						if !(mc.Movie_id == cc.Movie_id) {
							continue
						}
						for _, cn := range company_name {
							if !(cn.ID == mc.Company_id) {
								continue
							}
							for _, ct := range company_type {
								if !(ct.ID == mc.Company_type_id) {
									continue
								}
								for _, mk := range movie_keyword {
									if !(mk.Movie_id == cc.Movie_id) {
										continue
									}
									for _, k := range keyword {
										if !(k.ID == mk.Keyword_id) {
											continue
										}
										for _, mi := range movie_info {
											if !(mi.Movie_id == cc.Movie_id) {
												continue
											}
											for _, it1 := range info_type {
												if !(it1.ID == mi.Info_type_id) {
													continue
												}
												for _, mi_idx := range movie_info_idx {
													if !(mi_idx.Movie_id == cc.Movie_id) {
														continue
													}
													for _, it2 := range info_type {
														if !(it2.ID == mi_idx.Info_type_id) {
															continue
														}
														for _, t := range title {
															if !(t.ID == cc.Movie_id) {
																continue
															}
															for _, kt := range kind_type {
																if !(kt.ID == t.Kind_id) {
																	continue
																}
																if (((((((((((cct1.Kind == "crew") && (cct2.Kind != "complete+verified")) && (cn.Country_code != "[us]")) && (it1.Info == "countries")) && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (slices.Contains([]string{"movie", "episode"}, kt.Kind))) && (strings.Contains(mc.Note, "(USA)") == false)) && strings.Contains(mc.Note, "(200")) && (slices.Contains(allowed_countries, mi.Info))) && (mi_idx.Info < 8.5)) && (t.Production_year > 2000) {
																	if (((((((((((cct1.Kind == "crew") && (cct2.Kind != "complete+verified")) && (cn.Country_code != "[us]")) && (it1.Info == "countries")) && (it2.Info == "rating")) && (slices.Contains(allowed_keywords, k.Keyword))) && (slices.Contains([]string{"movie", "episode"}, kt.Kind))) && (strings.Contains(mc.Note, "(USA)") == false)) && strings.Contains(mc.Note, "(200")) && (slices.Contains(allowed_countries, mi.Info))) && (mi_idx.Info < 8.5)) && (t.Production_year > 2000) {
																		results = append(results, Matche{
																			Company: cn.Name,
																			Rating:  mi_idx.Info,
																			Title:   t.Title,
																		})
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = v{
		Movie_company: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Company)
			}
			return results
		}()),
		Rating: _minOrdered[float64](func() []float64 {
			results := []float64{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Rating)
			}
			return results
		}()),
		Complete_euro_dark_movie: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range matches {
				x := xRaw.(Matche)
				results = append(results, x.Title)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q28_finds_euro_dark_movie_with_minimal_values()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
