//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:44Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Info_type struct {
	ID   int    `json:"id"`
	Info string `json:"info"`
}

type Keyword struct {
	ID      int    `json:"id"`
	Keyword string `json:"keyword"`
}

type Movie_info_idx struct {
	Movie_id     int    `json:"movie_id"`
	Info_type_id int    `json:"info_type_id"`
	Info         string `json:"info"`
}

type Movie_keyword struct {
	Movie_id   int `json:"movie_id"`
	Keyword_id int `json:"keyword_id"`
}

type Result struct {
	Rating      string `json:"rating"`
	Movie_title string `json:"movie_title"`
}

type Row struct {
	Rating string `json:"rating"`
	Title  string `json:"title"`
}

type Title struct {
	ID              int    `json:"id"`
	Title           string `json:"title"`
	Production_year int    `json:"production_year"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q4_returns_minimum_rating_and_title_for_sequels() {
	expect(_equal(result, []v{v{
		Rating:      "6.2",
		Movie_title: "Alpha Movie",
	}}))
}

var info_type []Info_type
var keyword []Keyword
var title []Title
var movie_keyword []Movie_keyword
var movie_info_idx []Movie_info_idx
var rows []Row
var result []Result

func main() {
	info_type = []Info_type{Info_type{
		ID:   1,
		Info: "rating",
	}, Info_type{
		ID:   2,
		Info: "other",
	}}
	keyword = []Keyword{Keyword{
		ID:      1,
		Keyword: "great sequel",
	}, Keyword{
		ID:      2,
		Keyword: "prequel",
	}}
	title = []Title{Title{
		ID:              10,
		Title:           "Alpha Movie",
		Production_year: 2006,
	}, Title{
		ID:              20,
		Title:           "Beta Film",
		Production_year: 2007,
	}, Title{
		ID:              30,
		Title:           "Old Film",
		Production_year: 2004,
	}}
	movie_keyword = []Movie_keyword{Movie_keyword{
		Movie_id:   10,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   20,
		Keyword_id: 1,
	}, Movie_keyword{
		Movie_id:   30,
		Keyword_id: 1,
	}}
	movie_info_idx = []Movie_info_idx{Movie_info_idx{
		Movie_id:     10,
		Info_type_id: 1,
		Info:         "6.2",
	}, Movie_info_idx{
		Movie_id:     20,
		Info_type_id: 1,
		Info:         "7.8",
	}, Movie_info_idx{
		Movie_id:     30,
		Info_type_id: 1,
		Info:         "4.5",
	}}
	rows = func() []Row {
		results := []Row{}
		for _, itRaw := range info_type {
			it := itRaw.(Info_type)
			for _, mi := range movie_info_idx {
				if !(it.ID == mi.Info_type_id) {
					continue
				}
				for _, t := range title {
					if !(t.ID == mi.Movie_id) {
						continue
					}
					for _, mk := range movie_keyword {
						if !(mk.Movie_id == t.ID) {
							continue
						}
						for _, k := range keyword {
							if !(k.ID == mk.Keyword_id) {
								continue
							}
							if ((((it.Info == "rating") && strings.Contains(k.Keyword, "sequel")) && (mi.Info > "5.0")) && (t.Production_year > 2005)) && (mk.Movie_id == mi.Movie_id) {
								if ((((it.Info == "rating") && strings.Contains(k.Keyword, "sequel")) && (mi.Info > "5.0")) && (t.Production_year > 2005)) && (mk.Movie_id == mi.Movie_id) {
									results = append(results, Row{
										Rating: mi.Info,
										Title:  t.Title,
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Rating: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Rating)
			}
			return results
		}()),
		Movie_title: _minOrdered[string](func() []string {
			results := []string{}
			for _, rRaw := range rows {
				r := rRaw.(Row)
				results = append(results, r.Title)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q4_returns_minimum_rating_and_title_for_sequels()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
