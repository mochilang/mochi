//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:06:44Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Aka_name struct {
	Person_id int    `json:"person_id"`
	Name      string `json:"name"`
}

type Cast_info struct {
	Person_id int    `json:"person_id"`
	Movie_id  int    `json:"movie_id"`
	Note      string `json:"note"`
	Role_id   int    `json:"role_id"`
}

type Company_name struct {
	ID           int    `json:"id"`
	Country_code string `json:"country_code"`
}

type Eligible struct {
	Pseudonym   string `json:"pseudonym"`
	Movie_title string `json:"movie_title"`
}

type Movie_companie struct {
	Movie_id   int    `json:"movie_id"`
	Company_id int    `json:"company_id"`
	Note       string `json:"note"`
}

type Name struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Result struct {
	Actress_pseudonym     string `json:"actress_pseudonym"`
	Japanese_movie_dubbed string `json:"japanese_movie_dubbed"`
}

type Role_type struct {
	ID   int    `json:"id"`
	Role string `json:"role"`
}

type Title struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing() {
	expect(_equal(result, []v{v{
		Actress_pseudonym:     "Y. S.",
		Japanese_movie_dubbed: "Dubbed Film",
	}}))
}

var aka_name []Aka_name
var cast_info []Cast_info
var company_name []Company_name
var movie_companies []Movie_companie
var name []Name
var role_type []Role_type
var title []Title
var eligible []Eligible
var result []Result

func main() {
	aka_name = []Aka_name{Aka_name{
		Person_id: 1,
		Name:      "Y. S.",
	}}
	cast_info = []Cast_info{Cast_info{
		Person_id: 1,
		Movie_id:  10,
		Note:      "(voice: English version)",
		Role_id:   1000,
	}}
	company_name = []Company_name{Company_name{
		ID:           50,
		Country_code: "[jp]",
	}}
	movie_companies = []Movie_companie{Movie_companie{
		Movie_id:   10,
		Company_id: 50,
		Note:       "Studio (Japan)",
	}}
	name = []Name{Name{
		ID:   1,
		Name: "Yoko Ono",
	}, Name{
		ID:   2,
		Name: "Yuichi",
	}}
	role_type = []Role_type{Role_type{
		ID:   1000,
		Role: "actress",
	}}
	title = []Title{Title{
		ID:    10,
		Title: "Dubbed Film",
	}}
	eligible = func() []Eligible {
		results := []Eligible{}
		for _, an1Raw := range aka_name {
			an1 := an1Raw.(Aka_name)
			for _, n1 := range name {
				if !(n1.ID == an1.Person_id) {
					continue
				}
				for _, ci := range cast_info {
					if !(ci.Person_id == an1.Person_id) {
						continue
					}
					for _, t := range title {
						if !(t.ID == ci.Movie_id) {
							continue
						}
						for _, mc := range movie_companies {
							if !(mc.Movie_id == ci.Movie_id) {
								continue
							}
							for _, cn := range company_name {
								if !(cn.ID == mc.Company_id) {
									continue
								}
								for _, rt := range role_type {
									if !(rt.ID == ci.Role_id) {
										continue
									}
									if ((((((ci.Note == "(voice: English version)") && (cn.Country_code == "[jp]")) && strings.Contains(mc.Note, "(Japan)")) && (!strings.Contains(mc.Note, "(USA)"))) && strings.Contains(n1.Name, "Yo")) && (!strings.Contains(n1.Name, "Yu"))) && (rt.Role == "actress") {
										if ((((((ci.Note == "(voice: English version)") && (cn.Country_code == "[jp]")) && strings.Contains(mc.Note, "(Japan)")) && (!strings.Contains(mc.Note, "(USA)"))) && strings.Contains(n1.Name, "Yo")) && (!strings.Contains(n1.Name, "Yu"))) && (rt.Role == "actress") {
											results = append(results, Eligible{
												Pseudonym:   an1.Name,
												Movie_title: t.Title,
											})
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = []Result{Result{
		Actress_pseudonym: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range eligible {
				x := xRaw.(Eligible)
				results = append(results, x.Pseudonym)
			}
			return results
		}()),
		Japanese_movie_dubbed: _minOrdered[string](func() []string {
			results := []string{}
			for _, xRaw := range eligible {
				x := xRaw.(Eligible)
				results = append(results, x.Movie_title)
			}
			return results
		}()),
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _minOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v < m {
			m = v
		}
	}
	return m
}
