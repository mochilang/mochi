-- Generated by Mochi compiler v0.10.25 on 2025-07-13T11:45:19Z
function __contains(container, item)
    if type(container) == 'table' then
        if container[1] ~= nil or #container > 0 then
            for _, v in ipairs(container) do
                if v == item then return true end
            end
            return false
        else
            return container[item] ~= nil
        end
    elseif type(container) == 'string' then
        return string.find(container, item, 1, true) ~= nil
    else
        return false
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local ok, json = pcall(require, 'json')
    if not ok then ok, json = pcall(require, 'cjson') end
    if ok then
        print(json.encode(sort(v)))
        return
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __min(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('min() expects list or group')
    end
    if #items == 0 then return 0 end
    local m = items[1]
    if type(m) == 'string' then
        for i=2,#items do
            local it = items[i]
            if type(it) == 'string' and it < m then m = it end
        end
        return m
    else
        m = tonumber(m)
        for i=2,#items do
            local n = tonumber(items[i])
            if n < m then m = n end
        end
        return m
    end
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function test_Q14_selects_minimal_rating_and_title_for_dark_movies()
    if not (__eq(result, {["rating"]=7.0, ["northern_dark_movie"]="A Dark Movie"})) then error('expect failed') end
end

info_type = {{["id"]=1, ["info"]="countries"}, {["id"]=2, ["info"]="rating"}}
keyword = {{["id"]=1, ["keyword"]="murder"}, {["id"]=2, ["keyword"]="blood"}, {["id"]=3, ["keyword"]="romance"}}
kind_type = {{["id"]=1, ["kind"]="movie"}}
title = {{["id"]=1, ["kind_id"]=1, ["production_year"]=2012, ["title"]="A Dark Movie"}, {["id"]=2, ["kind_id"]=1, ["production_year"]=2013, ["title"]="Brutal Blood"}, {["id"]=3, ["kind_id"]=1, ["production_year"]=2008, ["title"]="Old Film"}}
movie_info = {{["movie_id"]=1, ["info_type_id"]=1, ["info"]="Sweden"}, {["movie_id"]=2, ["info_type_id"]=1, ["info"]="USA"}, {["movie_id"]=3, ["info_type_id"]=1, ["info"]="USA"}}
movie_info_idx = {{["movie_id"]=1, ["info_type_id"]=2, ["info"]=7.0}, {["movie_id"]=2, ["info_type_id"]=2, ["info"]=7.5}, {["movie_id"]=3, ["info_type_id"]=2, ["info"]=9.1}}
movie_keyword = {{["movie_id"]=1, ["keyword_id"]=1}, {["movie_id"]=2, ["keyword_id"]=2}, {["movie_id"]=3, ["keyword_id"]=3}}
allowed_keywords = {"murder", "murder-in-title", "blood", "violence"}
allowed_countries = {"Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German", "USA", "American"}
matches = (function()
    local _res = {}
    for _, it1 in ipairs(info_type) do
        for _, it2 in ipairs(info_type) do
            for _, k in ipairs(keyword) do
                for _, kt in ipairs(kind_type) do
                    for _, mi in ipairs(movie_info) do
                        for _, mi_idx in ipairs(movie_info_idx) do
                            for _, mk in ipairs(movie_keyword) do
                                for _, t in ipairs(title) do
                                    if (((((((((((((((((__eq(it1.info, "countries") and __eq(it2.info, "rating")) and (__contains(allowed_keywords, k.keyword))) and (kt.kind == "movie")) and (__contains(allowed_countries, mi.info))) and (mi_idx.info < 8.5)) and (t.production_year > 2010)) and __eq(kt.id, t.kind_id)) and __eq(t.id, mi.movie_id)) and __eq(t.id, mk.movie_id)) and __eq(t.id, mi_idx.movie_id)) and __eq(mk.movie_id, mi.movie_id)) and __eq(mk.movie_id, mi_idx.movie_id)) and __eq(mi.movie_id, mi_idx.movie_id)) and __eq(k.id, mk.keyword_id)) and __eq(it1.id, mi.info_type_id)) and __eq(it2.id, mi_idx.info_type_id))) then
                                        _res[#_res+1] = {["rating"]=mi_idx.info, ["title"]=t.title}
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return _res
end)()
result = {["rating"]=__min((function()
    local _res = {}
    for _, x in ipairs(matches) do
        _res[#_res+1] = x.rating
    end
    return _res
end)()), ["northern_dark_movie"]=__min((function()
    local _res = {}
    for _, x in ipairs(matches) do
        _res[#_res+1] = x.title
    end
    return _res
end)())}
__json(result)
local __tests = {
    {name="Q14 selects minimal rating and title for dark movies", fn=test_Q14_selects_minimal_rating_and_title_for_dark_movies},
}
