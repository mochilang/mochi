// Generated by Mochi compiler v0.10.25 on 2025-07-13T10:54:08Z
// q3.mochi
import java.util.*;

class IdKeyword {
    int id;
    String keyword;
    IdKeyword(int id, String keyword) {
        this.id = id;
        this.keyword = keyword;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdKeyword other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.keyword, other.keyword);
    }
    @Override public int hashCode() {
        return Objects.hash(id, keyword);
    }
    int size() { return 2; }
}
class MovieIdInfo {
    int movie_id;
    String info;
    MovieIdInfo(int movie_id, String info) {
        this.movie_id = movie_id;
        this.info = info;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MovieIdInfo other)) return false;
        return Objects.equals(this.movie_id, other.movie_id) && Objects.equals(this.info, other.info);
    }
    @Override public int hashCode() {
        return Objects.hash(movie_id, info);
    }
    int size() { return 2; }
}
class MovieIdKeywordId {
    int movie_id;
    int keyword_id;
    MovieIdKeywordId(int movie_id, int keyword_id) {
        this.movie_id = movie_id;
        this.keyword_id = keyword_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MovieIdKeywordId other)) return false;
        return Objects.equals(this.movie_id, other.movie_id) && Objects.equals(this.keyword_id, other.keyword_id);
    }
    @Override public int hashCode() {
        return Objects.hash(movie_id, keyword_id);
    }
    int size() { return 2; }
}
class IdTitleProductionYear {
    int id;
    String title;
    int production_year;
    IdTitleProductionYear(int id, String title, int production_year) {
        this.id = id;
        this.title = title;
        this.production_year = production_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdTitleProductionYear other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.title, other.title) && Objects.equals(this.production_year, other.production_year);
    }
    @Override public int hashCode() {
        return Objects.hash(id, title, production_year);
    }
    int size() { return 3; }
}
class MovieTitle {
    int movie_title;
    MovieTitle(int movie_title) {
        this.movie_title = movie_title;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MovieTitle other)) return false;
        return Objects.equals(this.movie_title, other.movie_title);
    }
    @Override public int hashCode() {
        return Objects.hash(movie_title);
    }
    int size() { return 1; }
}
public class Q3 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IdKeyword> keyword = new ArrayList<>(Arrays.asList(new IdKeyword(1, "amazing sequel"), new IdKeyword(2, "prequel")));
    List<MovieIdInfo> movie_info = new ArrayList<>(Arrays.asList(new MovieIdInfo(10, "Germany"), new MovieIdInfo(30, "Sweden"), new MovieIdInfo(20, "France")));
    List<MovieIdKeywordId> movie_keyword = new ArrayList<>(Arrays.asList(new MovieIdKeywordId(10, 1), new MovieIdKeywordId(30, 1), new MovieIdKeywordId(20, 1), new MovieIdKeywordId(10, 2)));
    List<IdTitleProductionYear> title = new ArrayList<>(Arrays.asList(new IdTitleProductionYear(10, "Alpha", 2006), new IdTitleProductionYear(30, "Beta", 2008), new IdTitleProductionYear(20, "Gamma", 2009)));
    List<String> allowed_infos = new ArrayList<>(Arrays.asList("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"));
    List<String> candidate_titles = (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res0 = new ArrayList<>();
    for (var k : keyword) {
        for (var mk : movie_keyword) {
            if (!(mk.keyword_id == k.id)) continue;
            for (var mi : movie_info) {
                if (!(mi.movie_id == mk.movie_id)) continue;
                for (var t : title) {
                    if (!(t.id == mi.movie_id)) continue;
                    if (!(k.keyword.contains("sequel") != null && allowed_infos.contains(mi.info) != null && t.production_year > 2005 && mk.movie_id == mi.movie_id)) continue;
                    res0.add(t.title);
                }
            }
        }
    }
    return res0;
}}).get();
    List<MovieTitle> result = new ArrayList<>(Arrays.asList(new MovieTitle(candidate_titles.stream().mapToInt(n -> ((Number)n).intValue()).min().orElse(Integer.MAX_VALUE))));
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new MovieTitle("Alpha"))))) throw new AssertionError("expect failed");
    }
}
