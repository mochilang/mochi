// Generated by Mochi compiler v0.10.25 on 2025-07-13T10:54:08Z
// q1.mochi
import java.util.*;

class IdKind {
    int id;
    String kind;
    IdKind(int id, String kind) {
        this.id = id;
        this.kind = kind;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdKind other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.kind, other.kind);
    }
    @Override public int hashCode() {
        return Objects.hash(id, kind);
    }
    int size() { return 2; }
}
class IdInfo {
    int id;
    String info;
    IdInfo(int id, String info) {
        this.id = id;
        this.info = info;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdInfo other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.info, other.info);
    }
    @Override public int hashCode() {
        return Objects.hash(id, info);
    }
    int size() { return 2; }
}
class IdTitleProductionYear {
    int id;
    String title;
    int production_year;
    IdTitleProductionYear(int id, String title, int production_year) {
        this.id = id;
        this.title = title;
        this.production_year = production_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdTitleProductionYear other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.title, other.title) && Objects.equals(this.production_year, other.production_year);
    }
    @Override public int hashCode() {
        return Objects.hash(id, title, production_year);
    }
    int size() { return 3; }
}
class MovieIdCompanyTypeIdNote {
    int movie_id;
    int company_type_id;
    String note;
    MovieIdCompanyTypeIdNote(int movie_id, int company_type_id, String note) {
        this.movie_id = movie_id;
        this.company_type_id = company_type_id;
        this.note = note;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MovieIdCompanyTypeIdNote other)) return false;
        return Objects.equals(this.movie_id, other.movie_id) && Objects.equals(this.company_type_id, other.company_type_id) && Objects.equals(this.note, other.note);
    }
    @Override public int hashCode() {
        return Objects.hash(movie_id, company_type_id, note);
    }
    int size() { return 3; }
}
class MovieIdInfoTypeId {
    int movie_id;
    int info_type_id;
    MovieIdInfoTypeId(int movie_id, int info_type_id) {
        this.movie_id = movie_id;
        this.info_type_id = info_type_id;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MovieIdInfoTypeId other)) return false;
        return Objects.equals(this.movie_id, other.movie_id) && Objects.equals(this.info_type_id, other.info_type_id);
    }
    @Override public int hashCode() {
        return Objects.hash(movie_id, info_type_id);
    }
    int size() { return 2; }
}
class NoteTitleYear {
    String note;
    String title;
    int year;
    NoteTitleYear(String note, String title, int year) {
        this.note = note;
        this.title = title;
        this.year = year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NoteTitleYear other)) return false;
        return Objects.equals(this.note, other.note) && Objects.equals(this.title, other.title) && Objects.equals(this.year, other.year);
    }
    @Override public int hashCode() {
        return Objects.hash(note, title, year);
    }
    int size() { return 3; }
}
class ProductionNoteMovieTitleMovieYear {
    int production_note;
    int movie_title;
    int movie_year;
    ProductionNoteMovieTitleMovieYear(int production_note, int movie_title, int movie_year) {
        this.production_note = production_note;
        this.movie_title = movie_title;
        this.movie_year = movie_year;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProductionNoteMovieTitleMovieYear other)) return false;
        return Objects.equals(this.production_note, other.production_note) && Objects.equals(this.movie_title, other.movie_title) && Objects.equals(this.movie_year, other.movie_year);
    }
    @Override public int hashCode() {
        return Objects.hash(production_note, movie_title, movie_year);
    }
    int size() { return 3; }
}
public class Q1 {
    static Map<String,Object> asMap(Object o) {
        if (o instanceof Map<?,?> mm) {
            LinkedHashMap<String,Object> m = new LinkedHashMap<>();
            for (Map.Entry<?,?> e : mm.entrySet()) m.put(String.valueOf(e.getKey()), e.getValue());
            return m;
        }
        LinkedHashMap<String,Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getDeclaredFields()) { try { f.setAccessible(true); m.put(f.getName(), f.get(o)); } catch (Exception e) { throw new RuntimeException(e); } }
        return m;
    }
    static void saveJsonl(List<?> list) {
        for (Object obj : list) {
            Map<String,Object> m = asMap(obj);
            List<String> parts = new ArrayList<>();
            for (Map.Entry<?,?> e : m.entrySet()) { parts.add("\"" + e.getKey() + "\":" + e.getValue()); }
            System.out.println("{" + String.join(",", parts) + "}");
        }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        } else if (o instanceof Number || o instanceof Boolean || o instanceof Character) {
            return String.valueOf(o);
        } else {
            Map<String,Object> m = asMap(o);
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<String,Object> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + toJson(e.getValue()));
            return j.toString();
        }
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<IdKind> company_type = new ArrayList<>(Arrays.asList(new IdKind(1, "production companies"), new IdKind(2, "distributors")));
    List<IdInfo> info_type = new ArrayList<>(Arrays.asList(new IdInfo(10, "top 250 rank"), new IdInfo(20, "bottom 10 rank")));
    List<IdTitleProductionYear> title = new ArrayList<>(Arrays.asList(new IdTitleProductionYear(100, "Good Movie", 1995), new IdTitleProductionYear(200, "Bad Movie", 2000)));
    List<MovieIdCompanyTypeIdNote> movie_companies = new ArrayList<>(Arrays.asList(new MovieIdCompanyTypeIdNote(100, 1, "ACME (co-production)"), new MovieIdCompanyTypeIdNote(200, 1, "MGM (as Metro-Goldwyn-Mayer Pictures)")));
    List<MovieIdInfoTypeId> movie_info_idx = new ArrayList<>(Arrays.asList(new MovieIdInfoTypeId(100, 10), new MovieIdInfoTypeId(200, 20)));
    List<NoteTitleYear> filtered = (new java.util.function.Supplier<List<NoteTitleYear>>(){public List<NoteTitleYear> get(){
    List<NoteTitleYear> res0 = new ArrayList<>();
    for (var ct : company_type) {
        for (var mc : movie_companies) {
            if (!(ct.id == mc.company_type_id)) continue;
            for (var t : title) {
                if (!(t.id == mc.movie_id)) continue;
                for (var mi : movie_info_idx) {
                    if (!(mi.movie_id == t.id)) continue;
                    for (var it : info_type) {
                        if (!(it.id == mi.info_type_id)) continue;
                        if (!(Objects.equals(ct.kind, "production companies") && Objects.equals(it.info, "top 250 rank") && (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) && (mc.note.contains("(co-production)") || mc.note.contains("(presents)") != null))) continue;
                        res0.add(new NoteTitleYear(mc.note, t.title, t.production_year));
                    }
                }
            }
        }
    }
    return res0;
}}).get();
    ProductionNoteMovieTitleMovieYear result = new ProductionNoteMovieTitleMovieYear((new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res1 = new ArrayList<>();
    for (var r : filtered) {
        res1.add(r.note);
    }
    return res1;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).min().orElse(Integer.MAX_VALUE), (new java.util.function.Supplier<List<String>>(){public List<String> get(){
    List<String> res2 = new ArrayList<>();
    for (var r : filtered) {
        res2.add(r.title);
    }
    return res2;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).min().orElse(Integer.MAX_VALUE), (new java.util.function.Supplier<List<Integer>>(){public List<Integer> get(){
    List<Integer> res3 = new ArrayList<>();
    for (var r : filtered) {
        res3.add(r.year);
    }
    return res3;
}}).get().stream().mapToInt(n -> ((Number)n).intValue()).min().orElse(Integer.MAX_VALUE));
    json(Arrays.asList(result));
    if (!(Objects.equals(result, new ProductionNoteMovieTitleMovieYear("ACME (co-production)", "Good Movie", 1995)))) throw new AssertionError("expect failed");
    }
}
