; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:01Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare company_name company_type keyword link_type title movie_companies movie_info movie_keyword movie_link allowed_countries rows result)

(defn test_Q21_finds_western_follow_up_sequels []
  (assert (_equal result [{:company_name "ACME Film Works" :link_type "is follow up" :western_follow_up "Western Return"}]) "expect failed")
)

(defn -main []
  (def company_name [{:id 1 :name "ACME Film Works" :country_code "[us]"} {:id 2 :name "Polish Warner" :country_code "[pl]"}]) ;; list of
  (def company_type [{:id 1 :kind "production companies"} {:id 2 :kind "other"}]) ;; list of
  (def keyword [{:id 1 :keyword "sequel"} {:id 2 :keyword "drama"}]) ;; list of
  (def link_type [{:id 1 :link "is follow up"} {:id 2 :link "references"}]) ;; list of
  (def title [{:id 10 :title "Western Return" :production_year 1975} {:id 20 :title "Other Movie" :production_year 2015}]) ;; list of
  (def movie_companies [{:movie_id 10 :company_id 1 :company_type_id 1 :note nil} {:movie_id 20 :company_id 2 :company_type_id 1 :note nil}]) ;; list of
  (def movie_info [{:movie_id 10 :info "Sweden"} {:movie_id 20 :info "USA"}]) ;; list of
  (def movie_keyword [{:movie_id 10 :keyword_id 1} {:movie_id 20 :keyword_id 2}]) ;; list of
  (def movie_link [{:movie_id 10 :link_type_id 1} {:movie_id 20 :link_type_id 2}]) ;; list of
  (def allowed_countries ["Sweden" "Norway" "Germany" "Denmark" "Swedish" "Denish" "Norwegian" "German"]) ;; list of string
  (def rows (vec (->> (for [cn company_name mc movie_companies :when (_equal (:company_id mc) (:id cn)) ct company_type :when (_equal (:id ct) (:company_type_id mc)) t title :when (_equal (:id t) (:movie_id mc)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) ml movie_link :when (_equal (:movie_id ml) (:id t)) lt link_type :when (_equal (:id lt) (:link_type_id ml)) mi movie_info :when (_equal (:movie_id mi) (:id t)) :when (and (and (and (and (and (and (and (and (not (_equal (:country_code cn) "[pl]")) (or (clojure.string/includes? (:name cn) "Film") (clojure.string/includes? (:name cn) "Warner"))) (_equal (:kind ct) "production companies")) (_equal (:keyword k) "sequel")) (clojure.string/includes? (:link lt) "follow")) (_equal (:note mc) nil)) (some #(= (:info mi) %) allowed_countries)) (>= (:production_year t) 1950)) (<= (:production_year t) 2000))] {:company_name (:name cn) :link_type (:link lt) :western_follow_up (:title t)})))) ;; list of
  (def result [{:company_name (_min (vec (->> (for [r rows] (:company_name r))))) :link_type (_min (vec (->> (for [r rows] (:link_type r))))) :western_follow_up (_min (vec (->> (for [r rows] (:western_follow_up r)))))}]) ;; list of
  (_json result)
  (test_Q21_finds_western_follow_up_sequels)
)

(-main)
