; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:09Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare complete_cast comp_cast_type char_name cast_info info_type keyword kind_type movie_info_idx movie_keyword name title allowed_keywords rows result)

(defn test_Q26_finds_hero_movies_with_rating_above_7 []
  (assert (_equal result [{:character_name "Spider-Man" :rating 8.5 :playing_actor "Actor One" :complete_hero_movie "Hero Movie"}]) "expect failed")
)

(defn -main []
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 2} {:movie_id 2 :subject_id 1 :status_id 2}]) ;; list of
  (def comp_cast_type [{:id 1 :kind "cast"} {:id 2 :kind "complete"}]) ;; list of
  (def char_name [{:id 1 :name "Spider-Man"} {:id 2 :name "Villain"}]) ;; list of
  (def cast_info [{:movie_id 1 :person_role_id 1 :person_id 1} {:movie_id 2 :person_role_id 2 :person_id 2}]) ;; list of
  (def info_type [{:id 1 :info "rating"}]) ;; list of
  (def keyword [{:id 1 :keyword "superhero"} {:id 2 :keyword "comedy"}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"}]) ;; list of
  (def movie_info_idx [{:movie_id 1 :info_type_id 1 :info 8.5} {:movie_id 2 :info_type_id 1 :info 6.5}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def name [{:id 1 :name "Actor One"} {:id 2 :name "Actor Two"}]) ;; list of
  (def title [{:id 1 :kind_id 1 :production_year 2005 :title "Hero Movie"} {:id 2 :kind_id 1 :production_year 1999 :title "Old Film"}]) ;; list of
  (def allowed_keywords ["superhero" "marvel-comics" "based-on-comic" "tv-special" "fight" "violence" "magnet" "web" "claw" "laser"]) ;; list of string
  (def rows (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:subject_id cc)) cct2 comp_cast_type :when (_equal (:id cct2) (:status_id cc)) ci cast_info :when (_equal (:movie_id ci) (:movie_id cc)) chn char_name :when (_equal (:id chn) (:person_role_id ci)) n name :when (_equal (:id n) (:person_id ci)) t title :when (_equal (:id t) (:movie_id ci)) kt kind_type :when (_equal (:id kt) (:kind_id t)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mi_idx movie_info_idx :when (_equal (:movie_id mi_idx) (:id t)) it2 info_type :when (_equal (:id it2) (:info_type_id mi_idx)) :when (and (and (and (and (and (and (and (and (_equal (:kind cct1) "cast") (clojure.string/includes? (:kind cct2) "complete")) (not (_equal (:name chn) nil))) (or (clojure.string/includes? (:name chn) "man") (clojure.string/includes? (:name chn) "Man"))) (_equal (:info it2) "rating")) (some #(= (:keyword k) %) allowed_keywords)) (_equal (:kind kt) "movie")) (> (:info mi_idx) 7.0)) (> (:production_year t) 2000))] {:character (:name chn) :rating (:info mi_idx) :actor (:name n) :movie (:title t)})))) ;; list of
  (def result [{:character_name (_min (vec (->> (for [r rows] (:character r))))) :rating (apply min (vec (->> (for [r rows] (:rating r))))) :playing_actor (_min (vec (->> (for [r rows] (:actor r))))) :complete_hero_movie (_min (vec (->> (for [r rows] (:movie r)))))}]) ;; list of
  (_json result)
  (test_Q26_finds_hero_movies_with_rating_above_7)
)

(-main)
