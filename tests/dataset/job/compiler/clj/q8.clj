; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:05:30Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name cast_info company_name movie_companies name role_type title eligible result)

(defn test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing []
  (assert (_equal result [{:actress_pseudonym "Y. S." :japanese_movie_dubbed "Dubbed Film"}]) "expect failed")
)

(defn -main []
  (def aka_name [{:person_id 1 :name "Y. S."}]) ;; list of
  (def cast_info [{:person_id 1 :movie_id 10 :note "(voice: English version)" :role_id 1000}]) ;; list of
  (def company_name [{:id 50 :country_code "[jp]"}]) ;; list of
  (def movie_companies [{:movie_id 10 :company_id 50 :note "Studio (Japan)"}]) ;; list of
  (def name [{:id 1 :name "Yoko Ono"} {:id 2 :name "Yuichi"}]) ;; list of
  (def role_type [{:id 1000 :role "actress"}]) ;; list of
  (def title [{:id 10 :title "Dubbed Film"}]) ;; list of
  (def eligible (vec (->> (for [an1 aka_name n1 name :when (_equal (:id n1) (:person_id an1)) ci cast_info :when (_equal (:person_id ci) (:person_id an1)) t title :when (_equal (:id t) (:movie_id ci)) mc movie_companies :when (_equal (:movie_id mc) (:movie_id ci)) cn company_name :when (_equal (:id cn) (:company_id mc)) rt role_type :when (_equal (:id rt) (:role_id ci)) :when (and (and (and (and (and (and (_equal (:note ci) "(voice: English version)") (_equal (:country_code cn) "[jp]")) (clojure.string/includes? (:note mc) "(Japan)")) (not (clojure.string/includes? (:note mc) "(USA)"))) (clojure.string/includes? (:name n1) "Yo")) (not (clojure.string/includes? (:name n1) "Yu"))) (_equal (:role rt) "actress"))] {:pseudonym (:name an1) :movie_title (:title t)})))) ;; list of
  (def result [{:actress_pseudonym (_min (vec (->> (for [x eligible] (:pseudonym x))))) :japanese_movie_dubbed (_min (vec (->> (for [x eligible] (:movie_title x)))))}]) ;; list of
  (_json result)
  (test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)
)

(-main)
