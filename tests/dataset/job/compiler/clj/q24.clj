; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:05Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name char_name cast_info company_name info_type keyword movie_companies movie_info movie_keyword name role_type title matches result)

(defn test_Q24_finds_voiced_action_movie_with_actress_named_An []
  (assert (_equal result [{:voiced_char_name "Hero Character" :voicing_actress_name "Ann Actress" :voiced_action_movie_jap_eng "Heroic Adventure"}]) "expect failed")
)

(defn -main []
  (def aka_name [{:person_id 1}]) ;; list of
  (def char_name [{:id 1 :name "Hero Character"}]) ;; list of
  (def cast_info [{:movie_id 1 :person_id 1 :person_role_id 1 :role_id 1 :note "(voice)"}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"}]) ;; list of
  (def info_type [{:id 1 :info "release dates"}]) ;; list of
  (def keyword [{:id 1 :keyword "hero"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :info "Japan: Feb 2015"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1}]) ;; list of
  (def name [{:id 1 :name "Ann Actress" :gender "f"}]) ;; list of
  (def role_type [{:id 1 :role "actress"}]) ;; list of
  (def title [{:id 1 :title "Heroic Adventure" :production_year 2015}]) ;; list of
  (def matches (vec (->> (for [an aka_name chn char_name ci cast_info cn company_name it info_type k keyword mc movie_companies mi movie_info mk movie_keyword n name rt role_type t title :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (some #(= (:note ci) %) ["(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)"]) (_equal (:country_code cn) "[us]")) (_equal (:info it) "release dates")) (some #(= (:keyword k) %) ["hero" "martial-arts" "hand-to-hand-combat"])) (not (_equal (:info mi) nil))) (or (and (clojure.string/starts-with? (:info mi) "Japan:") (clojure.string/includes? (:info mi) "201")) (and (clojure.string/starts-with? (:info mi) "USA:") (clojure.string/includes? (:info mi) "201")))) (_equal (:gender n) "f")) (clojure.string/includes? (:name n) "An")) (_equal (:role rt) "actress")) (> (:production_year t) 2010)) (_equal (:id t) (:movie_id mi))) (_equal (:id t) (:movie_id mc))) (_equal (:id t) (:movie_id ci))) (_equal (:id t) (:movie_id mk))) (_equal (:movie_id mc) (:movie_id ci))) (_equal (:movie_id mc) (:movie_id mi))) (_equal (:movie_id mc) (:movie_id mk))) (_equal (:movie_id mi) (:movie_id ci))) (_equal (:movie_id mi) (:movie_id mk))) (_equal (:movie_id ci) (:movie_id mk))) (_equal (:id cn) (:company_id mc))) (_equal (:id it) (:info_type_id mi))) (_equal (:id n) (:person_id ci))) (_equal (:id rt) (:role_id ci))) (_equal (:id n) (:person_id an))) (_equal (:person_id ci) (:person_id an))) (_equal (:id chn) (:person_role_id ci))) (_equal (:id k) (:keyword_id mk)))] {:voiced_char_name (:name chn) :voicing_actress_name (:name n) :voiced_action_movie_jap_eng (:title t)})))) ;; list of
  (def result [{:voiced_char_name (_min (vec (->> (for [x matches] (:voiced_char_name x))))) :voicing_actress_name (_min (vec (->> (for [x matches] (:voicing_actress_name x))))) :voiced_action_movie_jap_eng (_min (vec (->> (for [x matches] (:voiced_action_movie_jap_eng x)))))}]) ;; list of
  (_json result)
  (test_Q24_finds_voiced_action_movie_with_actress_named_An)
)

(-main)
