; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:16Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name char_name cast_info company_name info_type movie_companies movie_info name role_type title matches result)

(defn test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009 []
  (assert (_equal result [{:voicing_actress "Angela Stone" :voiced_movie "Voiced Movie"}]) "expect failed")
)

(defn -main []
  (def aka_name [{:person_id 1 :name "A. Stone"} {:person_id 2 :name "J. Doe"}]) ;; list of
  (def char_name [{:id 1 :name "Protagonist"} {:id 2 :name "Extra"}]) ;; list of
  (def cast_info [{:movie_id 1 :person_role_id 1 :person_id 1 :role_id 1 :note "(voice)"} {:movie_id 2 :person_role_id 2 :person_id 2 :role_id 2 :note "Cameo"}]) ;; list of
  (def company_name [{:id 10 :country_code "[us]"} {:id 20 :country_code "[gb]"}]) ;; list of
  (def info_type [{:id 100 :info "release dates"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 10 :note "Studio (USA)"} {:movie_id 2 :company_id 20 :note "Other (worldwide)"}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 100 :info "USA: June 2006"} {:movie_id 2 :info_type_id 100 :info "UK: 1999"}]) ;; list of
  (def name [{:id 1 :name "Angela Stone" :gender "f"} {:id 2 :name "Bob Angstrom" :gender "m"}]) ;; list of
  (def role_type [{:id 1 :role "actress"} {:id 2 :role "actor"}]) ;; list of
  (def title [{:id 1 :title "Voiced Movie" :production_year 2006} {:id 2 :title "Other Movie" :production_year 2010}]) ;; list of
  (def matches (vec (->> (for [an aka_name n name :when (_equal (:id n) (:person_id an)) ci cast_info :when (_equal (:person_id ci) (:person_id an)) chn char_name :when (_equal (:id chn) (:person_role_id ci)) rt role_type :when (_equal (:id rt) (:role_id ci)) t title :when (_equal (:id t) (:movie_id ci)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) cn company_name :when (_equal (:id cn) (:company_id mc)) mi movie_info :when (_equal (:movie_id mi) (:id t)) it info_type :when (_equal (:id it) (:info_type_id mi)) :when (and (and (and (and (and (and (and (and (and (and (and (some #(= (:note ci) %) ["(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)"]) (_equal (:country_code cn) "[us]")) (_equal (:info it) "release dates")) (not (_equal (:note mc) nil))) (or (clojure.string/includes? (:note mc) "(USA)") (clojure.string/includes? (:note mc) "(worldwide)"))) (not (_equal (:info mi) nil))) (or (and (clojure.string/includes? (:info mi) "Japan:") (clojure.string/includes? (:info mi) "200")) (and (clojure.string/includes? (:info mi) "USA:") (clojure.string/includes? (:info mi) "200")))) (_equal (:gender n) "f")) (clojure.string/includes? (:name n) "Ang")) (_equal (:role rt) "actress")) (>= (:production_year t) 2005)) (<= (:production_year t) 2009))] {:actress (:name n) :movie (:title t)})))) ;; list of
  (def result [{:voicing_actress (_min (vec (->> (for [r matches] (:actress r))))) :voiced_movie (_min (vec (->> (for [r matches] (:movie r)))))}]) ;; list of
  (_json result)
  (test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009)
)

(-main)
