; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:13Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name complete_cast comp_cast_type char_name cast_info company_name info_type keyword movie_companies movie_info movie_keyword name person_info role_type title matches result)

(defn test_Q29_finds_the_actress_voicing_the_Queen_in_Shrek_2 []
  (assert (_equal result [{:voiced_char "Queen" :voicing_actress "Angela Aniston" :voiced_animation "Shrek 2"}]) "expect failed")
)

(defn -main []
  (def aka_name [{:person_id 1} {:person_id 2}]) ;; list of
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 2} {:movie_id 2 :subject_id 1 :status_id 2}]) ;; list of
  (def comp_cast_type [{:id 1 :kind "cast"} {:id 2 :kind "complete+verified"} {:id 3 :kind "other"}]) ;; list of
  (def char_name [{:id 1 :name "Queen"} {:id 2 :name "Princess"}]) ;; list of
  (def cast_info [{:movie_id 1 :person_id 1 :role_id 1 :person_role_id 1 :note "(voice)"} {:movie_id 2 :person_id 2 :role_id 1 :person_role_id 2 :note "(voice)"}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"} {:id 2 :country_code "[uk]"}]) ;; list of
  (def info_type [{:id 1 :info "release dates"} {:id 2 :info "trivia"} {:id 3 :info "other"}]) ;; list of
  (def keyword [{:id 1 :keyword "computer-animation"} {:id 2 :keyword "action"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1} {:movie_id 2 :company_id 2}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :info "USA:2004"} {:movie_id 2 :info_type_id 1 :info "USA:1995"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def name [{:id 1 :name "Angela Aniston" :gender "f"} {:id 2 :name "Bob Brown" :gender "m"}]) ;; list of
  (def person_info [{:person_id 1 :info_type_id 2} {:person_id 2 :info_type_id 2}]) ;; list of
  (def role_type [{:id 1 :role "actress"} {:id 2 :role "actor"}]) ;; list of
  (def title [{:id 1 :title "Shrek 2" :production_year 2004} {:id 2 :title "Old Film" :production_year 1999}]) ;; list of
  (def matches (vec (->> (for [an aka_name cc complete_cast cct1 comp_cast_type cct2 comp_cast_type chn char_name ci cast_info cn company_name it info_type it3 info_type k keyword mc movie_companies mi movie_info mk movie_keyword n name pi person_info rt role_type t title :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (_equal (:kind cct1) "cast") (_equal (:kind cct2) "complete+verified")) (_equal (:name chn) "Queen")) (or (or (_equal (:note ci) "(voice)") (_equal (:note ci) "(voice) (uncredited)")) (_equal (:note ci) "(voice: English version)"))) (_equal (:country_code cn) "[us]")) (_equal (:info it) "release dates")) (_equal (:info it3) "trivia")) (_equal (:keyword k) "computer-animation")) (or (clojure.string/starts-with? (:info mi) "Japan:200") (clojure.string/starts-with? (:info mi) "USA:200"))) (_equal (:gender n) "f")) (clojure.string/includes? (:name n) "An")) (_equal (:role rt) "actress")) (_equal (:title t) "Shrek 2")) (>= (:production_year t) 2000)) (<= (:production_year t) 2010)) (_equal (:id t) (:movie_id mi))) (_equal (:id t) (:movie_id mc))) (_equal (:id t) (:movie_id ci))) (_equal (:id t) (:movie_id mk))) (_equal (:id t) (:movie_id cc))) (_equal (:movie_id mc) (:movie_id ci))) (_equal (:movie_id mc) (:movie_id mi))) (_equal (:movie_id mc) (:movie_id mk))) (_equal (:movie_id mc) (:movie_id cc))) (_equal (:movie_id mi) (:movie_id ci))) (_equal (:movie_id mi) (:movie_id mk))) (_equal (:movie_id mi) (:movie_id cc))) (_equal (:movie_id ci) (:movie_id mk))) (_equal (:movie_id ci) (:movie_id cc))) (_equal (:movie_id mk) (:movie_id cc))) (_equal (:id cn) (:company_id mc))) (_equal (:id it) (:info_type_id mi))) (_equal (:id n) (:person_id ci))) (_equal (:id rt) (:role_id ci))) (_equal (:id n) (:person_id an))) (_equal (:person_id ci) (:person_id an))) (_equal (:id chn) (:person_role_id ci))) (_equal (:id n) (:person_id pi))) (_equal (:person_id ci) (:person_id pi))) (_equal (:id it3) (:info_type_id pi))) (_equal (:id k) (:keyword_id mk))) (_equal (:id cct1) (:subject_id cc))) (_equal (:id cct2) (:status_id cc)))] {:voiced_char (:name chn) :voicing_actress (:name n) :voiced_animation (:title t)})))) ;; list of
  (def result [{:voiced_char (_min (vec (->> (for [x matches] (:voiced_char x))))) :voicing_actress (_min (vec (->> (for [x matches] (:voicing_actress x))))) :voiced_animation (_min (vec (->> (for [x matches] (:voiced_animation x)))))}]) ;; list of
  (_json result)
  (test_Q29_finds_the_actress_voicing_the_Queen_in_Shrek_2)
)

(-main)
