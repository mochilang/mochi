; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:10Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare comp_cast_type complete_cast company_name company_type keyword link_type movie_companies movie_info movie_keyword movie_link title matches result)

(defn test_Q27_selects_minimal_company__link_and_title []
  (assert (_equal result {:producing_company "Best Film" :link_type "follows" :complete_western_sequel "Western Sequel"}) "expect failed")
)

(defn -main []
  (def comp_cast_type [{:id 1 :kind "cast"} {:id 2 :kind "crew"} {:id 3 :kind "complete"}]) ;; list of
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 3} {:movie_id 2 :subject_id 2 :status_id 3}]) ;; list of
  (def company_name [{:id 1 :name "Best Film" :country_code "[se]"} {:id 2 :name "Polish Film" :country_code "[pl]"}]) ;; list of
  (def company_type [{:id 1 :kind "production companies"} {:id 2 :kind "other"}]) ;; list of
  (def keyword [{:id 1 :keyword "sequel"} {:id 2 :keyword "remake"}]) ;; list of
  (def link_type [{:id 1 :link "follows"} {:id 2 :link "related"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1 :company_type_id 1 :note nil} {:movie_id 2 :company_id 2 :company_type_id 1 :note "extra"}]) ;; list of
  (def movie_info [{:movie_id 1 :info "Sweden"} {:movie_id 2 :info "USA"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def movie_link [{:movie_id 1 :link_type_id 1} {:movie_id 2 :link_type_id 2}]) ;; list of
  (def title [{:id 1 :production_year 1980 :title "Western Sequel"} {:id 2 :production_year 1999 :title "Another Movie"}]) ;; list of
  (def matches (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:subject_id cc)) cct2 comp_cast_type :when (_equal (:id cct2) (:status_id cc)) t title :when (_equal (:id t) (:movie_id cc)) ml movie_link :when (_equal (:movie_id ml) (:id t)) lt link_type :when (_equal (:id lt) (:link_type_id ml)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) ct company_type :when (_equal (:id ct) (:company_type_id mc)) cn company_name :when (_equal (:id cn) (:company_id mc)) mi movie_info :when (_equal (:movie_id mi) (:id t)) :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (or (_equal (:kind cct1) "cast") (_equal (:kind cct1) "crew")) (_equal (:kind cct2) "complete")) (not (_equal (:country_code cn) "[pl]"))) (or (clojure.string/includes? (:name cn) "Film") (clojure.string/includes? (:name cn) "Warner"))) (_equal (:kind ct) "production companies")) (_equal (:keyword k) "sequel")) (clojure.string/includes? (:link lt) "follow")) (_equal (:note mc) nil)) (or (or (or (_equal (:info mi) "Sweden") (_equal (:info mi) "Germany")) (_equal (:info mi) "Swedish")) (_equal (:info mi) "German"))) (>= (:production_year t) 1950)) (<= (:production_year t) 2000)) (_equal (:movie_id ml) (:movie_id mk))) (_equal (:movie_id ml) (:movie_id mc))) (_equal (:movie_id mk) (:movie_id mc))) (_equal (:movie_id ml) (:movie_id mi))) (_equal (:movie_id mk) (:movie_id mi))) (_equal (:movie_id mc) (:movie_id mi))) (_equal (:movie_id ml) (:movie_id cc))) (_equal (:movie_id mk) (:movie_id cc))) (_equal (:movie_id mc) (:movie_id cc))) (_equal (:movie_id mi) (:movie_id cc)))] {:company (:name cn) :link (:link lt) :title (:title t)})))) ;; list of
  (def result {:producing_company (_min (vec (->> (for [x matches] (:company x))))) :link_type (_min (vec (->> (for [x matches] (:link x))))) :complete_western_sequel (_min (vec (->> (for [x matches] (:title x)))))}) ;;
  (_json result)
  (test_Q27_selects_minimal_company__link_and_title)
)

(-main)
