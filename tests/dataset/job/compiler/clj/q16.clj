; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:11Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name cast_info company_name keyword movie_companies movie_keyword name title rows result)

(defn test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99 []
  (assert (_equal result [{:cool_actor_pseudonym "Alpha" :series_named_after_char "Hero Bob"}]) "expect failed")
)

(defn -main []
  (def aka_name [{:person_id 1 :name "Alpha"} {:person_id 2 :name "Beta"}]) ;; list of
  (def cast_info [{:person_id 1 :movie_id 101} {:person_id 2 :movie_id 102}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"} {:id 2 :country_code "[de]"}]) ;; list of
  (def keyword [{:id 1 :keyword "character-name-in-title"} {:id 2 :keyword "other"}]) ;; list of
  (def movie_companies [{:movie_id 101 :company_id 1} {:movie_id 102 :company_id 2}]) ;; list of
  (def movie_keyword [{:movie_id 101 :keyword_id 1} {:movie_id 102 :keyword_id 2}]) ;; list of
  (def name [{:id 1} {:id 2}]) ;; list of
  (def title [{:id 101 :title "Hero Bob" :episode_nr 60} {:id 102 :title "Other Show" :episode_nr 40}]) ;; list of
  (def rows (vec (->> (for [an aka_name n name :when (_equal (:id n) (:person_id an)) ci cast_info :when (_equal (:person_id ci) (:id n)) t title :when (_equal (:id t) (:movie_id ci)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) cn company_name :when (_equal (:id cn) (:company_id mc)) :when (and (and (and (_equal (:country_code cn) "[us]") (_equal (:keyword k) "character-name-in-title")) (>= (:episode_nr t) 50)) (< (:episode_nr t) 100))] {:pseudonym (:name an) :series (:title t)})))) ;; list of
  (def result [{:cool_actor_pseudonym (_min (vec (->> (for [r rows] (:pseudonym r))))) :series_named_after_char (_min (vec (->> (for [r rows] (:series r)))))}]) ;; list of
  (_json result)
  (test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99)
)

(-main)
