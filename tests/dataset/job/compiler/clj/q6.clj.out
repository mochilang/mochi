(ns main)

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                                      (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare cast_info keyword movie_keyword name title result)

(defn test_Q6_finds_marvel_movie_with_Robert_Downey []
  (assert (= result [{:movie_keyword "marvel-cinematic-universe" :actor_name "Downey Robert Jr." :marvel_movie "Iron Man 3"}]) "expect failed"))

(defn -main []
  (def cast_info [{:movie_id 1 :person_id 101} {:movie_id 2 :person_id 102}])
  (def keyword [{:id 100 :keyword "marvel-cinematic-universe"} {:id 200 :keyword "other"}])
  (def movie_keyword [{:movie_id 1 :keyword_id 100} {:movie_id 2 :keyword_id 200}])
  (def name [{:id 101 :name "Downey Robert Jr."} {:id 102 :name "Chris Evans"}])
  (def title [{:id 1 :title "Iron Man 3" :production_year 2013} {:id 2 :title "Old Movie" :production_year 2000}])
  (def result (vec (->> (for [ci cast_info mk movie_keyword :when (= (:movie_id ci) (:movie_id mk)) k keyword :when (= (:keyword_id mk) (:id k)) n name :when (= (:person_id ci) (:id n)) t title :when (= (:movie_id ci) (:id t)) :when (and (and (and (= (:keyword k) "marvel-cinematic-universe") (clojure.string/includes? (:name n) "Downey")) (clojure.string/includes? (:name n) "Robert")) (> (:production_year t) 2010))] {:movie_keyword (:keyword k) :actor_name (:name n) :marvel_movie (:title t)}))))
  (_json result)
  (test_Q6_finds_marvel_movie_with_Robert_Downey))

(-main)
