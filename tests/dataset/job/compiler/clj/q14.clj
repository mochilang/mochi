; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:08Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare info_type keyword kind_type title movie_info movie_info_idx movie_keyword allowed_keywords allowed_countries matches result)

(defn test_Q14_selects_minimal_rating_and_title_for_dark_movies []
  (assert (_equal result {:rating 7.0 :northern_dark_movie "A Dark Movie"}) "expect failed")
)

(defn -main []
  (def info_type [{:id 1 :info "countries"} {:id 2 :info "rating"}]) ;; list of
  (def keyword [{:id 1 :keyword "murder"} {:id 2 :keyword "blood"} {:id 3 :keyword "romance"}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"}]) ;; list of
  (def title [{:id 1 :kind_id 1 :production_year 2012 :title "A Dark Movie"} {:id 2 :kind_id 1 :production_year 2013 :title "Brutal Blood"} {:id 3 :kind_id 1 :production_year 2008 :title "Old Film"}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :info "Sweden"} {:movie_id 2 :info_type_id 1 :info "USA"} {:movie_id 3 :info_type_id 1 :info "USA"}]) ;; list of
  (def movie_info_idx [{:movie_id 1 :info_type_id 2 :info 7.0} {:movie_id 2 :info_type_id 2 :info 7.5} {:movie_id 3 :info_type_id 2 :info 9.1}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2} {:movie_id 3 :keyword_id 3}]) ;; list of
  (def allowed_keywords ["murder" "murder-in-title" "blood" "violence"]) ;; list of string
  (def allowed_countries ["Sweden" "Norway" "Germany" "Denmark" "Swedish" "Denish" "Norwegian" "German" "USA" "American"]) ;; list of string
  (def matches (vec (->> (for [it1 info_type it2 info_type k keyword kt kind_type mi movie_info mi_idx movie_info_idx mk movie_keyword t title :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (_equal (:info it1) "countries") (_equal (:info it2) "rating")) (some #(= (:keyword k) %) allowed_keywords)) (_equal (:kind kt) "movie")) (some #(= (:info mi) %) allowed_countries)) (< (:info mi_idx) 8.5)) (> (:production_year t) 2010)) (_equal (:id kt) (:kind_id t))) (_equal (:id t) (:movie_id mi))) (_equal (:id t) (:movie_id mk))) (_equal (:id t) (:movie_id mi_idx))) (_equal (:movie_id mk) (:movie_id mi))) (_equal (:movie_id mk) (:movie_id mi_idx))) (_equal (:movie_id mi) (:movie_id mi_idx))) (_equal (:id k) (:keyword_id mk))) (_equal (:id it1) (:info_type_id mi))) (_equal (:id it2) (:info_type_id mi_idx)))] {:rating (:info mi_idx) :title (:title t)})))) ;; list of
  (def result {:rating (apply min (vec (->> (for [x matches] (:rating x))))) :northern_dark_movie (_min (vec (->> (for [x matches] (:title x)))))}) ;;
  (_json result)
  (test_Q14_selects_minimal_rating_and_title_for_dark_movies)
)

(-main)
