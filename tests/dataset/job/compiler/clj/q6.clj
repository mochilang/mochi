; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:05:13Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare cast_info keyword movie_keyword name title result)

(defn test_Q6_finds_marvel_movie_with_Robert_Downey []
  (assert (_equal result [{:movie_keyword "marvel-cinematic-universe" :actor_name "Downey Robert Jr." :marvel_movie "Iron Man 3"}]) "expect failed")
)

(defn -main []
  (def cast_info [{:movie_id 1 :person_id 101} {:movie_id 2 :person_id 102}]) ;; list of
  (def keyword [{:id 100 :keyword "marvel-cinematic-universe"} {:id 200 :keyword "other"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 100} {:movie_id 2 :keyword_id 200}]) ;; list of
  (def name [{:id 101 :name "Downey Robert Jr."} {:id 102 :name "Chris Evans"}]) ;; list of
  (def title [{:id 1 :title "Iron Man 3" :production_year 2013} {:id 2 :title "Old Movie" :production_year 2000}]) ;; list of
  (def result (vec (->> (for [ci cast_info mk movie_keyword :when (_equal (:movie_id ci) (:movie_id mk)) k keyword :when (_equal (:keyword_id mk) (:id k)) n name :when (_equal (:person_id ci) (:id n)) t title :when (_equal (:movie_id ci) (:id t)) :when (and (and (and (_equal (:keyword k) "marvel-cinematic-universe") (clojure.string/includes? (:name n) "Downey")) (clojure.string/includes? (:name n) "Robert")) (> (:production_year t) 2010))] {:movie_keyword (:keyword k) :actor_name (:name n) :marvel_movie (:title t)})))) ;; list of
  (_json result)
  (test_Q6_finds_marvel_movie_with_Robert_Downey)
)

(-main)
