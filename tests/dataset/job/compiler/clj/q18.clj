; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:14Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare info_type name title cast_info movie_info movie_info_idx rows result)

(defn test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions []
  (assert (_equal result {:movie_budget 90 :movie_votes 400 :movie_title "Alpha"}) "expect failed")
)

(defn -main []
  (def info_type [{:id 1 :info "budget"} {:id 2 :info "votes"} {:id 3 :info "rating"}]) ;; list of
  (def name [{:id 1 :name "Big Tim" :gender "m"} {:id 2 :name "Slim Tim" :gender "m"} {:id 3 :name "Alice" :gender "f"}]) ;; list of
  (def title [{:id 10 :title "Alpha"} {:id 20 :title "Beta"} {:id 30 :title "Gamma"}]) ;; list of
  (def cast_info [{:movie_id 10 :person_id 1 :note "(producer)"} {:movie_id 20 :person_id 2 :note "(executive producer)"} {:movie_id 30 :person_id 3 :note "(producer)"}]) ;; list of
  (def movie_info [{:movie_id 10 :info_type_id 1 :info 90} {:movie_id 20 :info_type_id 1 :info 120} {:movie_id 30 :info_type_id 1 :info 110}]) ;; list of
  (def movie_info_idx [{:movie_id 10 :info_type_id 2 :info 500} {:movie_id 20 :info_type_id 2 :info 400} {:movie_id 30 :info_type_id 2 :info 800}]) ;; list of
  (def rows (vec (->> (for [ci cast_info n name :when (_equal (:id n) (:person_id ci)) t title :when (_equal (:id t) (:movie_id ci)) mi movie_info :when (_equal (:movie_id mi) (:id t)) mi_idx movie_info_idx :when (_equal (:movie_id mi_idx) (:id t)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) it2 info_type :when (_equal (:id it2) (:info_type_id mi_idx)) :when (and (and (and (and (and (and (and (and (some #(= (:note ci) %) ["(producer)" "(executive producer)"]) (_equal (:info it1) "budget")) (_equal (:info it2) "votes")) (_equal (:gender n) "m")) (clojure.string/includes? (:name n) "Tim")) (_equal (:id t) (:movie_id ci))) (_equal (:movie_id ci) (:movie_id mi))) (_equal (:movie_id ci) (:movie_id mi_idx))) (_equal (:movie_id mi) (:movie_id mi_idx)))] {:budget (:info mi) :votes (:info mi_idx) :title (:title t)})))) ;; list of
  (def result {:movie_budget (apply min (vec (->> (for [r rows] (:budget r))))) :movie_votes (apply min (vec (->> (for [r rows] (:votes r))))) :movie_title (_min (vec (->> (for [r rows] (:title r)))))}) ;;
  (_json result)
  (test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions)
)

(-main)
