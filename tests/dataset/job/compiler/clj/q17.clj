; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:13Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare cast_info company_name keyword movie_companies movie_keyword name title matches result)

(defn test_Q17_finds_US_character_name_movie_with_actor_starting_with_B []
  (assert (_equal result [{:member_in_charnamed_american_movie "Bob Smith" :a1 "Bob Smith"}]) "expect failed")
)

(defn -main []
  (def cast_info [{:movie_id 1 :person_id 1} {:movie_id 2 :person_id 2}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"} {:id 2 :country_code "[ca]"}]) ;; list of
  (def keyword [{:id 10 :keyword "character-name-in-title"} {:id 20 :keyword "other"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1} {:movie_id 2 :company_id 2}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 10} {:movie_id 2 :keyword_id 20}]) ;; list of
  (def name [{:id 1 :name "Bob Smith"} {:id 2 :name "Alice Jones"}]) ;; list of
  (def title [{:id 1 :title "Bob's Journey"} {:id 2 :title "Foreign Film"}]) ;; list of
  (def matches (vec (->> (for [n name ci cast_info :when (_equal (:person_id ci) (:id n)) t title :when (_equal (:id t) (:movie_id ci)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) cn company_name :when (_equal (:id cn) (:company_id mc)) :when (and (and (and (and (and (_equal (:country_code cn) "[us]") (_equal (:keyword k) "character-name-in-title")) (clojure.string/starts-with? (:name n) "B")) (_equal (:movie_id ci) (:movie_id mk))) (_equal (:movie_id ci) (:movie_id mc))) (_equal (:movie_id mc) (:movie_id mk)))] (:name n))))) ;; list of string
  (def result [{:member_in_charnamed_american_movie (_min matches) :a1 (_min matches)}]) ;; list of
  (_json result)
  (test_Q17_finds_US_character_name_movie_with_actor_starting_with_B)
)

(-main)
