; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:17Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare comp_cast_type char_name complete_cast name cast_info keyword movie_keyword kind_type title matches result)

(defn test_Q20_finds_complete_cast_Iron_Man_movie []
  (assert (_equal result [{:complete_downey_ironman_movie "Iron Man"}]) "expect failed")
)

(defn -main []
  (def comp_cast_type [{:id 1 :kind "cast"} {:id 2 :kind "complete cast"}]) ;; list of
  (def char_name [{:id 1 :name "Tony Stark"} {:id 2 :name "Sherlock Holmes"}]) ;; list of
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 2} {:movie_id 2 :subject_id 1 :status_id 2}]) ;; list of
  (def name [{:id 1 :name "Robert Downey Jr."} {:id 2 :name "Another Actor"}]) ;; list of
  (def cast_info [{:movie_id 1 :person_role_id 1 :person_id 1} {:movie_id 2 :person_role_id 2 :person_id 2}]) ;; list of
  (def keyword [{:id 10 :keyword "superhero"} {:id 20 :keyword "romance"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 10} {:movie_id 2 :keyword_id 20}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"}]) ;; list of
  (def title [{:id 1 :kind_id 1 :production_year 2008 :title "Iron Man"} {:id 2 :kind_id 1 :production_year 1940 :title "Old Hero"}]) ;; list of
  (def matches (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:subject_id cc)) cct2 comp_cast_type :when (_equal (:id cct2) (:status_id cc)) ci cast_info :when (_equal (:movie_id ci) (:movie_id cc)) chn char_name :when (_equal (:id chn) (:person_role_id ci)) n name :when (_equal (:id n) (:person_id ci)) mk movie_keyword :when (_equal (:movie_id mk) (:movie_id cc)) k keyword :when (_equal (:id k) (:keyword_id mk)) t title :when (_equal (:id t) (:movie_id cc)) kt kind_type :when (_equal (:id kt) (:kind_id t)) :when (and (and (and (and (and (and (_equal (:kind cct1) "cast") (clojure.string/includes? (:kind cct2) "complete")) (not (clojure.string/includes? (:name chn) "Sherlock"))) (or (clojure.string/includes? (:name chn) "Tony Stark") (clojure.string/includes? (:name chn) "Iron Man"))) (some #(= (:keyword k) %) ["superhero" "sequel" "second-part" "marvel-comics" "based-on-comic" "tv-special" "fight" "violence"])) (_equal (:kind kt) "movie")) (> (:production_year t) 1950))] (:title t))))) ;; list of string
  (def result [{:complete_downey_ironman_movie (_min matches)}]) ;; list of
  (_json result)
  (test_Q20_finds_complete_cast_Iron_Man_movie)
)

(-main)
