; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:06Z
(ns main)

(defn _indexList [xs i]
  (let [idx (if (neg? i) (+ i (count xs)) i)]
    (if (or (< idx 0) (>= idx (count xs)))
      (throw (ex-info "index out of range" {}))
      (nth xs idx))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare company_name company_type info_type kind_type title movie_companies movie_info movie_info_idx candidates result)

(defn test_Q13_finds_earliest_German_movie_info []
  (assert (_equal result {:release_date "1997-05-10" :rating "6.0" :german_movie "Alpha"}) "expect failed")
)

(defn -main []
  (def company_name [{:id 1 :country_code "[de]"} {:id 2 :country_code "[us]"}]) ;; list of
  (def company_type [{:id 1 :kind "production companies"} {:id 2 :kind "distributors"}]) ;; list of
  (def info_type [{:id 1 :info "rating"} {:id 2 :info "release dates"}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"} {:id 2 :kind "video"}]) ;; list of
  (def title [{:id 10 :kind_id 1 :title "Alpha"} {:id 20 :kind_id 1 :title "Beta"} {:id 30 :kind_id 2 :title "Gamma"}]) ;; list of
  (def movie_companies [{:movie_id 10 :company_id 1 :company_type_id 1} {:movie_id 20 :company_id 1 :company_type_id 1} {:movie_id 30 :company_id 2 :company_type_id 1}]) ;; list of
  (def movie_info [{:movie_id 10 :info_type_id 2 :info "1997-05-10"} {:movie_id 20 :info_type_id 2 :info "1998-03-20"} {:movie_id 30 :info_type_id 2 :info "1999-07-30"}]) ;; list of
  (def movie_info_idx [{:movie_id 10 :info_type_id 1 :info "6.0"} {:movie_id 20 :info_type_id 1 :info "7.5"} {:movie_id 30 :info_type_id 1 :info "5.5"}]) ;; list of
  (def candidates (vec (->> (for [cn company_name mc movie_companies :when (_equal (:company_id mc) (:id cn)) ct company_type :when (_equal (:id ct) (:company_type_id mc)) t title :when (_equal (:id t) (:movie_id mc)) kt kind_type :when (_equal (:id kt) (:kind_id t)) mi movie_info :when (_equal (:movie_id mi) (:id t)) it2 info_type :when (_equal (:id it2) (:info_type_id mi)) miidx movie_info_idx :when (_equal (:movie_id miidx) (:id t)) it info_type :when (_equal (:id it) (:info_type_id miidx)) :when (and (and (and (and (_equal (:country_code cn) "[de]") (_equal (:kind ct) "production companies")) (_equal (:info it) "rating")) (_equal (:info it2) "release dates")) (_equal (:kind kt) "movie"))] {:release_date (:info mi) :rating (:info miidx) :german_movie (:title t)})))) ;; list of
  (def result {:release_date (_indexList (vec (->> (for [x candidates] (:release_date x)) (sort-by (fn [x] (_sort_key (:release_date x)))))) 0) :rating (_indexList (vec (->> (for [x candidates] (:rating x)) (sort-by (fn [x] (_sort_key (:rating x)))))) 0) :german_movie (_indexList (vec (->> (for [x candidates] (:german_movie x)) (sort-by (fn [x] (_sort_key (:german_movie x)))))) 0)}) ;;
  (_json result)
  (test_Q13_finds_earliest_German_movie_info)
)

(-main)
