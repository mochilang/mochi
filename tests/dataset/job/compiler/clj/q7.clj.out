(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                                      (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_name cast_info info_type link_type movie_link name person_info title rows result)

(defn test_Q7_finds_movie_features_biography_for_person []
  (assert (= result [{:of_person "Alan Brown" :biography_movie "Feature Film"}]) "expect failed"))

(defn -main []
  (def aka_name [{:person_id 1 :name "Anna Mae"} {:person_id 2 :name "Chris"}])
  (def cast_info [{:person_id 1 :movie_id 10} {:person_id 2 :movie_id 20}])
  (def info_type [{:id 1 :info "mini biography"} {:id 2 :info "trivia"}])
  (def link_type [{:id 1 :link "features"} {:id 2 :link "references"}])
  (def movie_link [{:linked_movie_id 10 :link_type_id 1} {:linked_movie_id 20 :link_type_id 2}])
  (def name [{:id 1 :name "Alan Brown" :name_pcode_cf "B" :gender "m"} {:id 2 :name "Zoe" :name_pcode_cf "Z" :gender "f"}])
  (def person_info [{:person_id 1 :info_type_id 1 :note "Volker Boehm"} {:person_id 2 :info_type_id 1 :note "Other"}])
  (def title [{:id 10 :title "Feature Film" :production_year 1990} {:id 20 :title "Late Film" :production_year 2000}])
  (def rows (vec (->> (for [an aka_name n name :when (= (:id n) (:person_id an)) pi person_info :when (= (:person_id pi) (:person_id an)) it info_type :when (= (:id it) (:info_type_id pi)) ci cast_info :when (= (:person_id ci) (:id n)) t title :when (= (:id t) (:movie_id ci)) ml movie_link :when (= (:linked_movie_id ml) (:id t)) lt link_type :when (= (:id lt) (:link_type_id ml)) :when (and (and (and (and (and (and (and (and (and (and (and (and (clojure.string/includes? (:name an) "a") (= (:info it) "mini biography")) (= (:link lt) "features")) (>= (compare (:name_pcode_cf n) "A") 0)) (<= (compare (:name_pcode_cf n) "F") 0)) (or (= (:gender n) "m") (and (= (:gender n) "f") (clojure.string/starts-with? (:name n) "B")))) (= (:note pi) "Volker Boehm")) (>= (:production_year t) 1980)) (<= (:production_year t) 1995)) (= (:person_id pi) (:person_id an))) (= (:person_id pi) (:person_id ci))) (= (:person_id an) (:person_id ci))) (= (:movie_id ci) (:linked_movie_id ml)))] {:person_name (:name n) :movie_title (:title t)}))))
  (def result [{:of_person (_min (vec (->> (for [r rows] (:person_name r))))) :biography_movie (_min (vec (->> (for [r rows] (:movie_title r)))))}])
  (_json result)
  (test_Q7_finds_movie_features_biography_for_person))

(-main)
