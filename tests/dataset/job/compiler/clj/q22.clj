; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:02Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare company_name company_type info_type keyword kind_type movie_companies movie_info movie_info_idx movie_keyword title rows result)

(defn test_Q22_finds_western_violent_movie_with_low_rating []
  (assert (_equal result [{:movie_company "Euro Films" :rating 6.5 :western_violent_movie "Violent Western"}]) "expect failed")
)

(defn -main []
  (def company_name [{:id 1 :name "Euro Films" :country_code "[de]"} {:id 2 :name "US Films" :country_code "[us]"}]) ;; list of
  (def company_type [{:id 1 :kind "production"}]) ;; list of
  (def info_type [{:id 10 :info "countries"} {:id 20 :info "rating"}]) ;; list of
  (def keyword [{:id 1 :keyword "murder"} {:id 2 :keyword "comedy"}]) ;; list of
  (def kind_type [{:id 100 :kind "movie"} {:id 200 :kind "episode"}]) ;; list of
  (def movie_companies [{:movie_id 10 :company_id 1 :company_type_id 1 :note "release (2009) (worldwide)"} {:movie_id 20 :company_id 2 :company_type_id 1 :note "release (2007) (USA)"}]) ;; list of
  (def movie_info [{:movie_id 10 :info_type_id 10 :info "Germany"} {:movie_id 20 :info_type_id 10 :info "USA"}]) ;; list of
  (def movie_info_idx [{:movie_id 10 :info_type_id 20 :info 6.5} {:movie_id 20 :info_type_id 20 :info 7.8}]) ;; list of
  (def movie_keyword [{:movie_id 10 :keyword_id 1} {:movie_id 20 :keyword_id 2}]) ;; list of
  (def title [{:id 10 :kind_id 100 :production_year 2009 :title "Violent Western"} {:id 20 :kind_id 100 :production_year 2007 :title "Old Western"}]) ;; list of
  (def rows (vec (->> (for [cn company_name mc movie_companies :when (_equal (:id cn) (:company_id mc)) ct company_type :when (_equal (:id ct) (:company_type_id mc)) t title :when (_equal (:id t) (:movie_id mc)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mi movie_info :when (_equal (:movie_id mi) (:id t)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) mi_idx movie_info_idx :when (_equal (:movie_id mi_idx) (:id t)) it2 info_type :when (_equal (:id it2) (:info_type_id mi_idx)) kt kind_type :when (_equal (:id kt) (:kind_id t)) :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (_equal (:country_code cn) "[us]")) (_equal (:info it1) "countries")) (_equal (:info it2) "rating")) (or (or (or (_equal (:keyword k) "murder") (_equal (:keyword k) "murder-in-title")) (_equal (:keyword k) "blood")) (_equal (:keyword k) "violence"))) (or (_equal (:kind kt) "movie") (_equal (:kind kt) "episode"))) (_equal (clojure.string/includes? (:note mc) "(USA)") false)) (clojure.string/includes? (:note mc) "(200")) (or (or (or (_equal (:info mi) "Germany") (_equal (:info mi) "German")) (_equal (:info mi) "USA")) (_equal (:info mi) "American"))) (< (:info mi_idx) 7.0)) (> (:production_year t) 2008)) (_equal (:id kt) (:kind_id t))) (_equal (:id t) (:movie_id mi))) (_equal (:id t) (:movie_id mk))) (_equal (:id t) (:movie_id mi_idx))) (_equal (:id t) (:movie_id mc))) (_equal (:movie_id mk) (:movie_id mi))) (_equal (:movie_id mk) (:movie_id mi_idx))) (_equal (:movie_id mk) (:movie_id mc))) (_equal (:movie_id mi) (:movie_id mi_idx))) (_equal (:movie_id mi) (:movie_id mc))) (_equal (:movie_id mc) (:movie_id mi_idx))) (_equal (:id k) (:keyword_id mk))) (_equal (:id it1) (:info_type_id mi))) (_equal (:id it2) (:info_type_id mi_idx))) (_equal (:id ct) (:company_type_id mc))) (_equal (:id cn) (:company_id mc)))] {:company (:name cn) :rating (:info mi_idx) :title (:title t)})))) ;; list of
  (def result [{:movie_company (_min (vec (->> (for [r rows] (:company r))))) :rating (apply min (vec (->> (for [r rows] (:rating r))))) :western_violent_movie (_min (vec (->> (for [r rows] (:title r)))))}]) ;; list of
  (_json result)
  (test_Q22_finds_western_violent_movie_with_low_rating)
)

(-main)
