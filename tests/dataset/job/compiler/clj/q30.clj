; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:16Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare comp_cast_type complete_cast cast_info info_type keyword movie_info movie_info_idx movie_keyword name title violent_keywords writer_notes matches result)

(defn test_Q30_finds_violent_horror_thriller_movies_with_male_writer []
  (assert (_equal result [{:movie_budget "Horror" :movie_votes 2000 :writer "John Writer" :complete_violent_movie "Violent Horror"}]) "expect failed")
)

(defn -main []
  (def comp_cast_type [{:id 1 :kind "cast"} {:id 2 :kind "complete+verified"} {:id 3 :kind "crew"}]) ;; list of
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 2} {:movie_id 2 :subject_id 3 :status_id 2}]) ;; list of
  (def cast_info [{:movie_id 1 :person_id 10 :note "(writer)"} {:movie_id 2 :person_id 11 :note "(actor)"}]) ;; list of
  (def info_type [{:id 1 :info "genres"} {:id 2 :info "votes"}]) ;; list of
  (def keyword [{:id 1 :keyword "murder"} {:id 2 :keyword "comedy"}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :info "Horror"} {:movie_id 2 :info_type_id 1 :info "Comedy"}]) ;; list of
  (def movie_info_idx [{:movie_id 1 :info_type_id 2 :info 2000} {:movie_id 2 :info_type_id 2 :info 150}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def name [{:id 10 :name "John Writer" :gender "m"} {:id 11 :name "Jane Actor" :gender "f"}]) ;; list of
  (def title [{:id 1 :title "Violent Horror" :production_year 2005} {:id 2 :title "Old Comedy" :production_year 1995}]) ;; list of
  (def violent_keywords ["murder" "violence" "blood" "gore" "death" "female-nudity" "hospital"]) ;; list of string
  (def writer_notes ["(writer)" "(head writer)" "(written by)" "(story)" "(story editor)"]) ;; list of string
  (def matches (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:subject_id cc)) cct2 comp_cast_type :when (_equal (:id cct2) (:status_id cc)) ci cast_info :when (_equal (:movie_id ci) (:movie_id cc)) mi movie_info :when (_equal (:movie_id mi) (:movie_id cc)) mi_idx movie_info_idx :when (_equal (:movie_id mi_idx) (:movie_id cc)) mk movie_keyword :when (_equal (:movie_id mk) (:movie_id cc)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) it2 info_type :when (_equal (:id it2) (:info_type_id mi_idx)) k keyword :when (_equal (:id k) (:keyword_id mk)) n name :when (_equal (:id n) (:person_id ci)) t title :when (_equal (:id t) (:movie_id cc)) :when (and (and (and (and (and (and (and (and (some #(= (:kind cct1) %) ["cast" "crew"]) (_equal (:kind cct2) "complete+verified")) (some #(= (:note ci) %) writer_notes)) (_equal (:info it1) "genres")) (_equal (:info it2) "votes")) (some #(= (:keyword k) %) violent_keywords)) (some #(= (:info mi) %) ["Horror" "Thriller"])) (_equal (:gender n) "m")) (> (:production_year t) 2000))] {:budget (:info mi) :votes (:info mi_idx) :writer (:name n) :movie (:title t)})))) ;; list of
  (def result [{:movie_budget (_min (vec (->> (for [x matches] (:budget x))))) :movie_votes (apply min (vec (->> (for [x matches] (:votes x))))) :writer (_min (vec (->> (for [x matches] (:writer x))))) :complete_violent_movie (_min (vec (->> (for [x matches] (:movie x)))))}]) ;; list of
  (_json result)
  (test_Q30_finds_violent_horror_thriller_movies_with_male_writer)
)

(-main)
