; Generated by Mochi compiler v0.10.25 on 2025-07-13T11:49:09Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare aka_title company_name company_type info_type keyword movie_companies movie_info movie_keyword title rows result)

(defn test_Q15_finds_the_earliest_US_internet_movie_release_after_2000 []
  (assert (_equal result [{:release_date "USA: March 2005" :internet_movie "Example Movie"}]) "expect failed")
)

(defn -main []
  (def aka_title [{:movie_id 1} {:movie_id 2}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"} {:id 2 :country_code "[gb]"}]) ;; list of
  (def company_type [{:id 10} {:id 20}]) ;; list of
  (def info_type [{:id 5 :info "release dates"} {:id 6 :info "other"}]) ;; list of
  (def keyword [{:id 100} {:id 200}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1 :company_type_id 10 :note "release (2005) (worldwide)"} {:movie_id 2 :company_id 2 :company_type_id 20 :note "release (1999) (worldwide)"}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 5 :note "internet" :info "USA: March 2005"} {:movie_id 2 :info_type_id 5 :note "theater" :info "USA: May 1999"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 100} {:movie_id 2 :keyword_id 200}]) ;; list of
  (def title [{:id 1 :title "Example Movie" :production_year 2005} {:id 2 :title "Old Movie" :production_year 1999}]) ;; list of
  (def rows (vec (->> (for [t title at aka_title :when (_equal (:movie_id at) (:id t)) mi movie_info :when (_equal (:movie_id mi) (:id t)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) cn company_name :when (_equal (:id cn) (:company_id mc)) :when (and (and (and (and (and (and (and (_equal (:country_code cn) "[us]") (_equal (:info it1) "release dates")) (clojure.string/includes? (:note mc) "200")) (clojure.string/includes? (:note mc) "worldwide")) (clojure.string/includes? (:note mi) "internet")) (clojure.string/includes? (:info mi) "USA:")) (clojure.string/includes? (:info mi) "200")) (> (:production_year t) 2000)) ct company_type :when (_equal (:id ct) (:company_type_id mc))] {:release_date (:info mi) :internet_movie (:title t)})))) ;; list of
  (def result [{:release_date (_min (vec (->> (for [r rows] (:release_date r))))) :internet_movie (_min (vec (->> (for [r rows] (:internet_movie r)))))}]) ;; list of
  (_json result)
  (test_Q15_finds_the_earliest_US_internet_movie_release_after_2000)
)

(-main)
