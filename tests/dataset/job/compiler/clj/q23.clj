; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:04Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare complete_cast comp_cast_type company_name company_type info_type keyword kind_type movie_companies movie_info movie_keyword title matches result)

(defn test_Q23_finds_US_internet_movie_with_verified_cast []
  (assert (_equal result [{:movie_kind "movie" :complete_us_internet_movie "Web Movie"}]) "expect failed")
)

(defn -main []
  (def complete_cast [{:movie_id 1 :status_id 1} {:movie_id 2 :status_id 2}]) ;; list of
  (def comp_cast_type [{:id 1 :kind "complete+verified"} {:id 2 :kind "partial"}]) ;; list of
  (def company_name [{:id 1 :country_code "[us]"} {:id 2 :country_code "[gb]"}]) ;; list of
  (def company_type [{:id 1} {:id 2}]) ;; list of
  (def info_type [{:id 1 :info "release dates"} {:id 2 :info "other"}]) ;; list of
  (def keyword [{:id 1 :keyword "internet"} {:id 2 :keyword "other"}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"} {:id 2 :kind "series"}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1 :company_type_id 1} {:movie_id 2 :company_id 2 :company_type_id 2}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :note "internet release" :info "USA: May 2005"} {:movie_id 2 :info_type_id 1 :note "theater" :info "USA: April 1998"}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def title [{:id 1 :kind_id 1 :production_year 2005 :title "Web Movie"} {:id 2 :kind_id 1 :production_year 1998 :title "Old Movie"}]) ;; list of
  (def matches (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:status_id cc)) t title :when (_equal (:id t) (:movie_id cc)) kt kind_type :when (_equal (:id kt) (:kind_id t)) mi movie_info :when (_equal (:movie_id mi) (:id t)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) mk movie_keyword :when (_equal (:movie_id mk) (:id t)) k keyword :when (_equal (:id k) (:keyword_id mk)) mc movie_companies :when (_equal (:movie_id mc) (:id t)) cn company_name :when (_equal (:id cn) (:company_id mc)) :when (and (and (and (and (and (and (_equal (:kind cct1) "complete+verified") (_equal (:country_code cn) "[us]")) (_equal (:info it1) "release dates")) (_equal (:kind kt) "movie")) (clojure.string/includes? (:note mi) "internet")) (and (clojure.string/includes? (:info mi) "USA:") (or (clojure.string/includes? (:info mi) "199") (clojure.string/includes? (:info mi) "200")))) (> (:production_year t) 2000)) ct company_type :when (_equal (:id ct) (:company_type_id mc))] {:movie_kind (:kind kt) :complete_us_internet_movie (:title t)})))) ;; list of
  (def result [{:movie_kind (_min (vec (->> (for [r matches] (:movie_kind r))))) :complete_us_internet_movie (_min (vec (->> (for [r matches] (:complete_us_internet_movie r)))))}]) ;; list of
  (_json result)
  (test_Q23_finds_US_internet_movie_with_verified_cast)
)

(-main)
