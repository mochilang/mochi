; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:19Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare keyword link_type movie_keyword movie_link title joined result)

(defn test_Q32_finds_movie_link_for_10_000_mile_club []
  (assert (_equal result {:link_type "sequel" :first_movie "Movie A" :second_movie "Movie C"}) "expect failed")
)

(defn -main []
  (def keyword [{:id 1 :keyword "10,000-mile-club"} {:id 2 :keyword "character-name-in-title"}]) ;; list of
  (def link_type [{:id 1 :link "sequel"} {:id 2 :link "remake"}]) ;; list of
  (def movie_keyword [{:movie_id 100 :keyword_id 1} {:movie_id 200 :keyword_id 2}]) ;; list of
  (def movie_link [{:movie_id 100 :linked_movie_id 300 :link_type_id 1} {:movie_id 200 :linked_movie_id 400 :link_type_id 2}]) ;; list of
  (def title [{:id 100 :title "Movie A"} {:id 200 :title "Movie B"} {:id 300 :title "Movie C"} {:id 400 :title "Movie D"}]) ;; list of
  (def joined (vec (->> (for [k keyword :when (_equal (:keyword k) "10,000-mile-club") mk movie_keyword :when (_equal (:keyword_id mk) (:id k)) t1 title :when (_equal (:id t1) (:movie_id mk)) ml movie_link :when (_equal (:movie_id ml) (:id t1)) t2 title :when (_equal (:id t2) (:linked_movie_id ml)) lt link_type :when (_equal (:id lt) (:link_type_id ml))] {:link_type (:link lt) :first_movie (:title t1) :second_movie (:title t2)})))) ;; list of
  (def result {:link_type (_min (vec (->> (for [r joined] (:link_type r))))) :first_movie (_min (vec (->> (for [r joined] (:first_movie r))))) :second_movie (_min (vec (->> (for [r joined] (:second_movie r)))))}) ;;
  (_json [result])
  (test_Q32_finds_movie_link_for_10_000_mile_club)
)

(-main)
