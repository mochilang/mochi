; Generated by Mochi compiler v0.10.25 on 2025-07-13T12:23:12Z
(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare comp_cast_type complete_cast company_name company_type movie_companies info_type keyword kind_type movie_info movie_info_idx movie_keyword title allowed_keywords allowed_countries matches result)

(defn test_Q28_finds_euro_dark_movie_with_minimal_values []
  (assert (_equal result {:movie_company "Euro Films Ltd." :rating 7.2 :complete_euro_dark_movie "Dark Euro Film"}) "expect failed")
)

(defn -main []
  (def comp_cast_type [{:id 1 :kind "crew"} {:id 2 :kind "complete+verified"} {:id 3 :kind "partial"}]) ;; list of
  (def complete_cast [{:movie_id 1 :subject_id 1 :status_id 3} {:movie_id 2 :subject_id 1 :status_id 2}]) ;; list of
  (def company_name [{:id 1 :name "Euro Films Ltd." :country_code "[gb]"} {:id 2 :name "US Studios" :country_code "[us]"}]) ;; list of
  (def company_type [{:id 1} {:id 2}]) ;; list of
  (def movie_companies [{:movie_id 1 :company_id 1 :company_type_id 1 :note "production (2005) (UK)"} {:movie_id 2 :company_id 2 :company_type_id 1 :note "production (USA)"}]) ;; list of
  (def info_type [{:id 1 :info "countries"} {:id 2 :info "rating"}]) ;; list of
  (def keyword [{:id 1 :keyword "blood"} {:id 2 :keyword "romance"}]) ;; list of
  (def kind_type [{:id 1 :kind "movie"} {:id 2 :kind "episode"}]) ;; list of
  (def movie_info [{:movie_id 1 :info_type_id 1 :info "Germany"} {:movie_id 2 :info_type_id 1 :info "USA"}]) ;; list of
  (def movie_info_idx [{:movie_id 1 :info_type_id 2 :info 7.2} {:movie_id 2 :info_type_id 2 :info 9.0}]) ;; list of
  (def movie_keyword [{:movie_id 1 :keyword_id 1} {:movie_id 2 :keyword_id 2}]) ;; list of
  (def title [{:id 1 :kind_id 1 :production_year 2005 :title "Dark Euro Film"} {:id 2 :kind_id 1 :production_year 2005 :title "US Film"}]) ;; list of
  (def allowed_keywords ["murder" "murder-in-title" "blood" "violence"]) ;; list of string
  (def allowed_countries ["Sweden" "Norway" "Germany" "Denmark" "Swedish" "Danish" "Norwegian" "German" "USA" "American"]) ;; list of string
  (def matches (vec (->> (for [cc complete_cast cct1 comp_cast_type :when (_equal (:id cct1) (:subject_id cc)) cct2 comp_cast_type :when (_equal (:id cct2) (:status_id cc)) mc movie_companies :when (_equal (:movie_id mc) (:movie_id cc)) cn company_name :when (_equal (:id cn) (:company_id mc)) ct company_type :when (_equal (:id ct) (:company_type_id mc)) mk movie_keyword :when (_equal (:movie_id mk) (:movie_id cc)) k keyword :when (_equal (:id k) (:keyword_id mk)) mi movie_info :when (_equal (:movie_id mi) (:movie_id cc)) it1 info_type :when (_equal (:id it1) (:info_type_id mi)) mi_idx movie_info_idx :when (_equal (:movie_id mi_idx) (:movie_id cc)) it2 info_type :when (_equal (:id it2) (:info_type_id mi_idx)) t title :when (_equal (:id t) (:movie_id cc)) kt kind_type :when (_equal (:id kt) (:kind_id t)) :when (and (and (and (and (and (and (and (and (and (and (and (_equal (:kind cct1) "crew") (not (_equal (:kind cct2) "complete+verified"))) (not (_equal (:country_code cn) "[us]"))) (_equal (:info it1) "countries")) (_equal (:info it2) "rating")) (some #(= (:keyword k) %) allowed_keywords)) (some #(= (:kind kt) %) ["movie" "episode"])) (_equal (clojure.string/includes? (:note mc) "(USA)") false)) (clojure.string/includes? (:note mc) "(200")) (some #(= (:info mi) %) allowed_countries)) (< (:info mi_idx) 8.5)) (> (:production_year t) 2000))] {:company (:name cn) :rating (:info mi_idx) :title (:title t)})))) ;; list of
  (def result {:movie_company (_min (vec (->> (for [x matches] (:company x))))) :rating (apply min (vec (->> (for [x matches] (:rating x))))) :complete_euro_dark_movie (_min (vec (->> (for [x matches] (:title x)))))}) ;;
  (_json result)
  (test_Q28_finds_euro_dark_movie_with_minimal_values)
)

(-main)
