(ns main)

(defn _min [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "min() expects list or group" {})))]
    (if (empty? lst)
      0
      (reduce (fn [a b] (if (neg? (compare a b)) a b)) lst))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                                      (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare char_name cast_info company_name company_type movie_companies role_type title matches result)

(defn test_Q10_finds_uncredited_voice_actor_in_Russian_movie []
  (assert (= result [{:uncredited_voiced_character "Ivan" :russian_movie "Vodka Dreams"}]) "expect failed"))

(defn -main []
  (def char_name [{:id 1 :name "Ivan"} {:id 2 :name "Alex"}])
  (def cast_info [{:movie_id 10 :person_role_id 1 :role_id 1 :note "Soldier (voice) (uncredited)"} {:movie_id 11 :person_role_id 2 :role_id 1 :note "(voice)"}])
  (def company_name [{:id 1 :country_code "[ru]"} {:id 2 :country_code "[us]"}])
  (def company_type [{:id 1} {:id 2}])
  (def movie_companies [{:movie_id 10 :company_id 1 :company_type_id 1} {:movie_id 11 :company_id 2 :company_type_id 1}])
  (def role_type [{:id 1 :role "actor"} {:id 2 :role "director"}])
  (def title [{:id 10 :title "Vodka Dreams" :production_year 2006} {:id 11 :title "Other Film" :production_year 2004}])
  (def matches (vec (->> (for [chn char_name ci cast_info :when (= (:id chn) (:person_role_id ci)) rt role_type :when (= (:id rt) (:role_id ci)) t title :when (= (:id t) (:movie_id ci)) mc movie_companies :when (= (:movie_id mc) (:id t)) cn company_name :when (= (:id cn) (:company_id mc)) :when (and (and (and (and (clojure.string/includes? (:note ci) "(voice)") (clojure.string/includes? (:note ci) "(uncredited)")) (= (:country_code cn) "[ru]")) (= (:role rt) "actor")) (> (:production_year t) 2005)) ct company_type :when (= (:id ct) (:company_type_id mc))] {:character (:name chn) :movie (:title t)}))))
  (def result [{:uncredited_voiced_character (_min (vec (->> (for [x matches] (:character x))))) :russian_movie (_min (vec (->> (for [x matches] (:movie x)))))}])
  (_json result)
  (test_Q10_finds_uncredited_voice_actor_in_Russian_movie))

(-main)
