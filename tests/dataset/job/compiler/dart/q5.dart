// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:22:56Z
import 'dart:io';
import 'dart:convert';

void test_Q5_finds_the_lexicographically_first_qualifying_title() {
  if (!(_equal(result, [{"typical_european_movie": "A Film"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> company_type = [{"ct_id": 1, "kind": "production companies"}, {"ct_id": 2, "kind": "other"}];
  List<Map<String, dynamic>> info_type = [{"it_id": 10, "info": "languages"}];
  List<Map<String, dynamic>> title = [{"t_id": 100, "title": "B Movie", "production_year": 2010}, {"t_id": 200, "title": "A Film", "production_year": 2012}, {"t_id": 300, "title": "Old Movie", "production_year": 2000}];
  List<Map<String, dynamic>> movie_companies = [{"movie_id": 100, "company_type_id": 1, "note": "ACME (France) (theatrical)"}, {"movie_id": 200, "company_type_id": 1, "note": "ACME (France) (theatrical)"}, {"movie_id": 300, "company_type_id": 1, "note": "ACME (France) (theatrical)"}];
  List<Map<String, dynamic>> movie_info = [{"movie_id": 100, "info": "German", "info_type_id": 10}, {"movie_id": 200, "info": "Swedish", "info_type_id": 10}, {"movie_id": 300, "info": "German", "info_type_id": 10}];
  List candidate_titles = (() {
  var _res = [];
  for (var ct in company_type) {
    for (var mc in movie_companies) {
      if (!(_equal(mc.company_type_id, ct.ct_id))) {
        continue;
      }
      for (var mi in movie_info) {
        if (!(_equal(mi.movie_id, mc.movie_id))) {
          continue;
        }
        for (var it in info_type) {
          if (!(_equal(it.it_id, mi.info_type_id))) {
            continue;
          }
          for (var t in title) {
            if (!(_equal(t.t_id, mc.movie_id))) {
              continue;
            }
            if (!(((((_equal(ct.kind, "production companies") && (mc.note.contains("(theatrical)"))) && (mc.note.contains("(France)"))) && (t.production_year > 2005)) && ((["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"].contains(mi.info)))))) {
              continue;
            }
            _res.add(t.title);
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = [{"typical_european_movie": _min(candidate_titles)}];
  _json(result);
  if (!_runTest("Q5 finds the lexicographically first qualifying title", test_Q5_finds_the_lexicographically_first_qualifying_title)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


