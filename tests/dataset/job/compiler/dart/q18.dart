// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:05Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var info_type = [{'id': 1, 'info': 'budget'}, {'id': 2, 'info': 'votes'}, {'id': 3, 'info': 'rating'}];

var name = [{'id': 1, 'name': 'Big Tim', 'gender': 'm'}, {'id': 2, 'name': 'Slim Tim', 'gender': 'm'}, {'id': 3, 'name': 'Alice', 'gender': 'f'}];

var title = [{'id': 10, 'title': 'Alpha'}, {'id': 20, 'title': 'Beta'}, {'id': 30, 'title': 'Gamma'}];

var cast_info = [{'movie_id': 10, 'person_id': 1, 'note': '(producer)'}, {'movie_id': 20, 'person_id': 2, 'note': '(executive producer)'}, {'movie_id': 30, 'person_id': 3, 'note': '(producer)'}];

var movie_info = [{'movie_id': 10, 'info_type_id': 1, 'info': 90}, {'movie_id': 20, 'info_type_id': 1, 'info': 120}, {'movie_id': 30, 'info_type_id': 1, 'info': 110}];

var movie_info_idx = [{'movie_id': 10, 'info_type_id': 2, 'info': 500}, {'movie_id': 20, 'info_type_id': 2, 'info': 400}, {'movie_id': 30, 'info_type_id': 2, 'info': 800}];

var rows = (() {
  var _q0 = <dynamic>[];
  for (var ci in cast_info) {
    for (var n in name) {
      if (!(n['id'] == ci['person_id'])) continue;
      for (var t in title) {
        if (!(t['id'] == ci['movie_id'])) continue;
        for (var mi in movie_info) {
          if (!(mi['movie_id'] == t['id'])) continue;
          for (var mi_idx in movie_info_idx) {
            if (!(mi_idx['movie_id'] == t['id'])) continue;
            for (var it1 in info_type) {
              if (!(it1['id'] == mi['info_type_id'])) continue;
              for (var it2 in info_type) {
                if (!(it2['id'] == mi_idx['info_type_id'])) continue;
                if (!(((_in(ci['note'], ['(producer)', '(executive producer)']) && it1['info'] == 'budget' && it2['info'] == 'votes' && n['gender'] == 'm' && (n['name'] as dynamic).contains('Tim') && t['id'] == ci['movie_id'] && ci['movie_id'] == mi['movie_id'] && ci['movie_id'] == mi_idx['movie_id'] && mi['movie_id'] == mi_idx['movie_id'])) ?? false)) continue;
                _q0.add({'budget': mi['info'], 'votes': mi_idx['info'], 'title': t['title']});
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = {'movie_budget': (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var r in rows) {
    _q1.add(r['budget']);
  }
  return _q1;
})(); return _min(_t2); })(), 'movie_votes': (() { var _t4 = (() {
  var _q3 = <dynamic>[];
  for (var r in rows) {
    _q3.add(r['votes']);
  }
  return _q3;
})(); return _min(_t4); })(), 'movie_title': (() { var _t6 = (() {
  var _q5 = <dynamic>[];
  for (var r in rows) {
    _q5.add(r['title']);
  }
  return _q5;
})(); return _min(_t6); })()};

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
