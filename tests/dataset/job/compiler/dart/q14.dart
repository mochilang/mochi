// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:03Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var info_type = [{'id': 1, 'info': 'countries'}, {'id': 2, 'info': 'rating'}];

var keyword = [{'id': 1, 'keyword': 'murder'}, {'id': 2, 'keyword': 'blood'}, {'id': 3, 'keyword': 'romance'}];

var kind_type = [{'id': 1, 'kind': 'movie'}];

var title = [{'id': 1, 'kind_id': 1, 'production_year': 2012, 'title': 'A Dark Movie'}, {'id': 2, 'kind_id': 1, 'production_year': 2013, 'title': 'Brutal Blood'}, {'id': 3, 'kind_id': 1, 'production_year': 2008, 'title': 'Old Film'}];

var movie_info = [{'movie_id': 1, 'info_type_id': 1, 'info': 'Sweden'}, {'movie_id': 2, 'info_type_id': 1, 'info': 'USA'}, {'movie_id': 3, 'info_type_id': 1, 'info': 'USA'}];

var movie_info_idx = [{'movie_id': 1, 'info_type_id': 2, 'info': 7}, {'movie_id': 2, 'info_type_id': 2, 'info': 7.5}, {'movie_id': 3, 'info_type_id': 2, 'info': 9.1}];

var movie_keyword = [{'movie_id': 1, 'keyword_id': 1}, {'movie_id': 2, 'keyword_id': 2}, {'movie_id': 3, 'keyword_id': 3}];

var allowed_keywords = ['murder', 'murder-in-title', 'blood', 'violence'];

var allowed_countries = ['Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American'];

var matches = (() {
  var _q0 = <dynamic>[];
  for (var it1 in info_type) {
    for (var it2 in info_type) {
      for (var k in keyword) {
        for (var kt in kind_type) {
          for (var mi in movie_info) {
            for (var mi_idx in movie_info_idx) {
              for (var mk in movie_keyword) {
                for (var t in title) {
                  if (!((it1['info'] == 'countries' && it2['info'] == 'rating' && (_in(k['keyword'], allowed_keywords)) && kt['kind'] == 'movie' && (_in(mi['info'], allowed_countries)) && mi_idx['info'].toString().compareTo(8.5.toString()) < 0 && t['production_year'].toString().compareTo(2010.toString()) > 0 && kt['id'] == t['kind_id'] && t['id'] == mi['movie_id'] && t['id'] == mk['movie_id'] && t['id'] == mi_idx['movie_id'] && mk['movie_id'] == mi['movie_id'] && mk['movie_id'] == mi_idx['movie_id'] && mi['movie_id'] == mi_idx['movie_id'] && k['id'] == mk['keyword_id'] && it1['id'] == mi['info_type_id'] && it2['id'] == mi_idx['info_type_id']))) continue;
                  _q0.add({'rating': mi_idx['info'], 'title': t['title']});
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = {'rating': (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var x in matches) {
    _q1.add(x['rating']);
  }
  return _q1;
})(); return _min(_t2); })(), 'northern_dark_movie': (() { var _t4 = (() {
  var _q3 = <dynamic>[];
  for (var x in matches) {
    _q3.add(x['title']);
  }
  return _q3;
})(); return _min(_t4); })()};

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
