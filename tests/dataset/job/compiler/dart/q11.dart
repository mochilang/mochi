// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:01Z
import 'dart:io';
import 'dart:convert';

var company_name = [{'id': 1, 'name': 'Best Film Co', 'country_code': '[us]'}, {'id': 2, 'name': 'Warner Studios', 'country_code': '[de]'}, {'id': 3, 'name': 'Polish Films', 'country_code': '[pl]'}];

var company_type = [{'id': 1, 'kind': 'production companies'}, {'id': 2, 'kind': 'distributors'}];

var keyword = [{'id': 1, 'keyword': 'sequel'}, {'id': 2, 'keyword': 'thriller'}];

var link_type = [{'id': 1, 'link': 'follow-up'}, {'id': 2, 'link': 'follows from'}, {'id': 3, 'link': 'remake'}];

var movie_companies = [{'movie_id': 10, 'company_id': 1, 'company_type_id': 1, 'note': null}, {'movie_id': 20, 'company_id': 2, 'company_type_id': 1, 'note': null}, {'movie_id': 30, 'company_id': 3, 'company_type_id': 1, 'note': null}];

var movie_keyword = [{'movie_id': 10, 'keyword_id': 1}, {'movie_id': 20, 'keyword_id': 1}, {'movie_id': 20, 'keyword_id': 2}, {'movie_id': 30, 'keyword_id': 1}];

var movie_link = [{'movie_id': 10, 'link_type_id': 1}, {'movie_id': 20, 'link_type_id': 2}, {'movie_id': 30, 'link_type_id': 3}];

var title = [{'id': 10, 'production_year': 1960, 'title': 'Alpha'}, {'id': 20, 'production_year': 1970, 'title': 'Beta'}, {'id': 30, 'production_year': 1985, 'title': 'Polish Movie'}];

var matches = (() {
  var _q0 = <dynamic>[];
  for (var cn in company_name) {
    for (var mc in movie_companies) {
      if (!(mc['company_id'] == cn['id'])) continue;
      for (var ct in company_type) {
        if (!(ct['id'] == mc['company_type_id'])) continue;
        for (var t in title) {
          if (!(t['id'] == mc['movie_id'])) continue;
          for (var mk in movie_keyword) {
            if (!(mk['movie_id'] == t['id'])) continue;
            for (var k in keyword) {
              if (!(k['id'] == mk['keyword_id'])) continue;
              for (var ml in movie_link) {
                if (!(ml['movie_id'] == t['id'])) continue;
                for (var lt in link_type) {
                  if (!(lt['id'] == ml['link_type_id'])) continue;
                  if (!((cn['country_code'] != '[pl]' && ((cn['name'] as dynamic).contains('Film') || (cn['name'] as dynamic).contains('Warner')) && ct['kind'] == 'production companies' && k['keyword'] == 'sequel' && (lt['link'] as dynamic).contains('follow') && mc['note'] == null && t['production_year'].toString().compareTo(1950.toString()) >= 0 && t['production_year'].toString().compareTo(2000.toString()) <= 0 && ml['movie_id'] == mk['movie_id'] && ml['movie_id'] == mc['movie_id'] && mk['movie_id'] == mc['movie_id']) ?? false)) continue;
                  _q0.add({'company': cn['name'], 'link': lt['link'], 'title': t['title']});
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = [{'from_company': (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var x in matches) {
    _q1.add(x['company']);
  }
  return _q1;
})(); return _min(_t2); })(), 'movie_link_type': (() { var _t4 = (() {
  var _q3 = <dynamic>[];
  for (var x in matches) {
    _q3.add(x['link']);
  }
  return _q3;
})(); return _min(_t4); })(), 'non_polish_sequel_movie': (() { var _t6 = (() {
  var _q5 = <dynamic>[];
  for (var x in matches) {
    _q5.add(x['title']);
  }
  return _q5;
})(); return _min(_t6); })()}];

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
