// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:05Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var comp_cast_type = [{'id': 1, 'kind': 'cast'}, {'id': 2, 'kind': 'complete cast'}];

var char_name = [{'id': 1, 'name': 'Tony Stark'}, {'id': 2, 'name': 'Sherlock Holmes'}];

var complete_cast = [{'movie_id': 1, 'subject_id': 1, 'status_id': 2}, {'movie_id': 2, 'subject_id': 1, 'status_id': 2}];

var name = [{'id': 1, 'name': 'Robert Downey Jr.'}, {'id': 2, 'name': 'Another Actor'}];

var cast_info = [{'movie_id': 1, 'person_role_id': 1, 'person_id': 1}, {'movie_id': 2, 'person_role_id': 2, 'person_id': 2}];

var keyword = [{'id': 10, 'keyword': 'superhero'}, {'id': 20, 'keyword': 'romance'}];

var movie_keyword = [{'movie_id': 1, 'keyword_id': 10}, {'movie_id': 2, 'keyword_id': 20}];

var kind_type = [{'id': 1, 'kind': 'movie'}];

var title = [{'id': 1, 'kind_id': 1, 'production_year': 2008, 'title': 'Iron Man'}, {'id': 2, 'kind_id': 1, 'production_year': 1940, 'title': 'Old Hero'}];

var matches = (() {
  var _q0 = <dynamic>[];
  for (var cc in complete_cast) {
    for (var cct1 in comp_cast_type) {
      if (!(cct1['id'] == cc['subject_id'])) continue;
      for (var cct2 in comp_cast_type) {
        if (!(cct2['id'] == cc['status_id'])) continue;
        for (var ci in cast_info) {
          if (!(ci['movie_id'] == cc['movie_id'])) continue;
          for (var chn in char_name) {
            if (!(chn['id'] == ci['person_role_id'])) continue;
            for (var n in name) {
              if (!(n['id'] == ci['person_id'])) continue;
              for (var mk in movie_keyword) {
                if (!(mk['movie_id'] == cc['movie_id'])) continue;
                for (var k in keyword) {
                  if (!(k['id'] == mk['keyword_id'])) continue;
                  for (var t in title) {
                    if (!(t['id'] == cc['movie_id'])) continue;
                    for (var kt in kind_type) {
                      if (!(kt['id'] == t['kind_id'])) continue;
                      if (!((cct1['kind'] == 'cast' && (cct2['kind'] as dynamic).contains('complete') && (!(chn['name'] as dynamic).contains('Sherlock')) && ((chn['name'] as dynamic).contains('Tony Stark') || (chn['name'] as dynamic).contains('Iron Man')) && _in(k['keyword'], ['superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence']) && kt['kind'] == 'movie' && t['production_year'].toString().compareTo(1950.toString()) > 0) ?? false)) continue;
                      _q0.add(t['title']);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = [{'complete_downey_ironman_movie': _min(matches)}];

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
