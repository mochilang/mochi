// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:22:56Z
import 'dart:io';
import 'dart:convert';

void test_Q6_finds_marvel_movie_with_Robert_Downey() {
  if (!(_equal(result, [{"movie_keyword": "marvel-cinematic-universe", "actor_name": "Downey Robert Jr.", "marvel_movie": "Iron Man 3"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, int>> cast_info = [{"movie_id": 1, "person_id": 101}, {"movie_id": 2, "person_id": 102}];
  List<Map<String, dynamic>> keyword = [{"id": 100, "keyword": "marvel-cinematic-universe"}, {"id": 200, "keyword": "other"}];
  List<Map<String, int>> movie_keyword = [{"movie_id": 1, "keyword_id": 100}, {"movie_id": 2, "keyword_id": 200}];
  List<Map<String, dynamic>> name = [{"id": 101, "name": "Downey Robert Jr."}, {"id": 102, "name": "Chris Evans"}];
  List<Map<String, dynamic>> title = [{"id": 1, "title": "Iron Man 3", "production_year": 2013}, {"id": 2, "title": "Old Movie", "production_year": 2000}];
  List<Map<String, dynamic>> result = (() {
  var _res = [];
  for (var ci in cast_info) {
    for (var mk in movie_keyword) {
      if (!(_equal(ci.movie_id, mk.movie_id))) {
        continue;
      }
      for (var k in keyword) {
        if (!(_equal(mk.keyword_id, k.id))) {
          continue;
        }
        for (var n in name) {
          if (!(_equal(ci.person_id, n.id))) {
            continue;
          }
          for (var t in title) {
            if (!(_equal(ci.movie_id, t.id))) {
              continue;
            }
            if (!((((_equal(k.keyword, "marvel-cinematic-universe") && n.name.contains("Downey")) && n.name.contains("Robert")) && (t.production_year > 2010)))) {
              continue;
            }
            _res.add({"movie_keyword": k.keyword, "actor_name": n.name, "marvel_movie": t.title});
          }
        }
      }
    }
  }
  return _res;
})();
  _json(result);
  if (!_runTest("Q6 finds marvel movie with Robert Downey", test_Q6_finds_marvel_movie_with_Robert_Downey)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


