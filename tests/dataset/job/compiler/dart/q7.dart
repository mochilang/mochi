// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:22:56Z
import 'dart:io';
import 'dart:convert';

void test_Q7_finds_movie_features_biography_for_person() {
  if (!(_equal(result, [{"of_person": "Alan Brown", "biography_movie": "Feature Film"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> aka_name = [{"person_id": 1, "name": "Anna Mae"}, {"person_id": 2, "name": "Chris"}];
  List<Map<String, int>> cast_info = [{"person_id": 1, "movie_id": 10}, {"person_id": 2, "movie_id": 20}];
  List<Map<String, dynamic>> info_type = [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}];
  List<Map<String, dynamic>> link_type = [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}];
  List<Map<String, int>> movie_link = [{"linked_movie_id": 10, "link_type_id": 1}, {"linked_movie_id": 20, "link_type_id": 2}];
  List<Map<String, dynamic>> name = [{"id": 1, "name": "Alan Brown", "name_pcode_cf": "B", "gender": "m"}, {"id": 2, "name": "Zoe", "name_pcode_cf": "Z", "gender": "f"}];
  List<Map<String, dynamic>> person_info = [{"person_id": 1, "info_type_id": 1, "note": "Volker Boehm"}, {"person_id": 2, "info_type_id": 1, "note": "Other"}];
  List<Map<String, dynamic>> title = [{"id": 10, "title": "Feature Film", "production_year": 1990}, {"id": 20, "title": "Late Film", "production_year": 2000}];
  List<Map<String, dynamic>> rows = (() {
  var _res = [];
  for (var an in aka_name) {
    for (var n in name) {
      if (!(_equal(n.id, an.person_id))) {
        continue;
      }
      for (var pi in person_info) {
        if (!(_equal(pi.person_id, an.person_id))) {
          continue;
        }
        for (var it in info_type) {
          if (!(_equal(it.id, pi.info_type_id))) {
            continue;
          }
          for (var ci in cast_info) {
            if (!(_equal(ci.person_id, n.id))) {
              continue;
            }
            for (var t in title) {
              if (!(_equal(t.id, ci.movie_id))) {
                continue;
              }
              for (var ml in movie_link) {
                if (!(_equal(ml.linked_movie_id, t.id))) {
                  continue;
                }
                for (var lt in link_type) {
                  if (!(_equal(lt.id, ml.link_type_id))) {
                    continue;
                  }
                  if (!((((((((((((((an.name.contains("a") && _equal(it.info, "mini biography")) && _equal(lt.link, "features")) && (n.name_pcode_cf.compareTo("A") >= 0)) && (n.name_pcode_cf.compareTo("F") <= 0)) && ((_equal(n.gender, "m") || ((_equal(n.gender, "f") && n.name.starts_with("B")))))) && _equal(pi.note, "Volker Boehm")) && (t.production_year >= 1980)) && (t.production_year <= 1995)) && _equal(pi.person_id, an.person_id)) && _equal(pi.person_id, ci.person_id)) && _equal(an.person_id, ci.person_id)) && _equal(ci.movie_id, ml.linked_movie_id))))) {
                    continue;
                  }
                  _res.add({"person_name": n.name, "movie_title": t.title});
                }
              }
            }
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = [{"of_person": _min((() {
  var _res = [];
  for (var r in rows) {
    _res.add(r.person_name);
  }
  return _res;
})()), "biography_movie": _min((() {
  var _res = [];
  for (var r in rows) {
    _res.add(r.movie_title);
  }
  return _res;
})())}];
  _json(result);
  if (!_runTest("Q7 finds movie features biography for person", test_Q7_finds_movie_features_biography_for_person)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


