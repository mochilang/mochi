// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:22:56Z
import 'dart:convert';
import 'dart:io';

void test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing() {
  if (!(_equal(result, [{"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> aka_name = [{"person_id": 1, "name": "Y. S."}];
  List<Map<String, dynamic>> cast_info = [{"person_id": 1, "movie_id": 10, "note": "(voice: English version)", "role_id": 1000}];
  List<Map<String, dynamic>> company_name = [{"id": 50, "country_code": "[jp]"}];
  List<Map<String, dynamic>> movie_companies = [{"movie_id": 10, "company_id": 50, "note": "Studio (Japan)"}];
  List<Map<String, dynamic>> name = [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}];
  List<Map<String, dynamic>> role_type = [{"id": 1000, "role": "actress"}];
  List<Map<String, dynamic>> title = [{"id": 10, "title": "Dubbed Film"}];
  List<Map<String, dynamic>> eligible = (() {
  var _res = [];
  for (var an1 in aka_name) {
    for (var n1 in name) {
      if (!(_equal(n1.id, an1.person_id))) {
        continue;
      }
      for (var ci in cast_info) {
        if (!(_equal(ci.person_id, an1.person_id))) {
          continue;
        }
        for (var t in title) {
          if (!(_equal(t.id, ci.movie_id))) {
            continue;
          }
          for (var mc in movie_companies) {
            if (!(_equal(mc.movie_id, ci.movie_id))) {
              continue;
            }
            for (var cn in company_name) {
              if (!(_equal(cn.id, mc.company_id))) {
                continue;
              }
              for (var rt in role_type) {
                if (!(_equal(rt.id, ci.role_id))) {
                  continue;
                }
                if (!(((((((_equal(ci.note, "(voice: English version)") && _equal(cn.country_code, "[jp]")) && mc.note.contains("(Japan)")) && (!mc.note.contains("(USA)"))) && n1.name.contains("Yo")) && (!n1.name.contains("Yu"))) && _equal(rt.role, "actress")))) {
                  continue;
                }
                _res.add({"pseudonym": an1.name, "movie_title": t.title});
              }
            }
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = [{"actress_pseudonym": _min((() {
  var _res = [];
  for (var x in eligible) {
    _res.add(x.pseudonym);
  }
  return _res;
})()), "japanese_movie_dubbed": _min((() {
  var _res = [];
  for (var x in eligible) {
    _res.add(x.movie_title);
  }
  return _res;
})())}];
  _json(result);
  if (!_runTest("Q8 returns the pseudonym and movie title for Japanese dubbing", test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


