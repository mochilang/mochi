// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:03Z
import 'dart:io';
import 'dart:convert';

var company_name = [{'id': 1, 'country_code': '[de]'}, {'id': 2, 'country_code': '[us]'}];

var company_type = [{'id': 1, 'kind': 'production companies'}, {'id': 2, 'kind': 'distributors'}];

var info_type = [{'id': 1, 'info': 'rating'}, {'id': 2, 'info': 'release dates'}];

var kind_type = [{'id': 1, 'kind': 'movie'}, {'id': 2, 'kind': 'video'}];

var title = [{'id': 10, 'kind_id': 1, 'title': 'Alpha'}, {'id': 20, 'kind_id': 1, 'title': 'Beta'}, {'id': 30, 'kind_id': 2, 'title': 'Gamma'}];

var movie_companies = [{'movie_id': 10, 'company_id': 1, 'company_type_id': 1}, {'movie_id': 20, 'company_id': 1, 'company_type_id': 1}, {'movie_id': 30, 'company_id': 2, 'company_type_id': 1}];

var movie_info = [{'movie_id': 10, 'info_type_id': 2, 'info': '1997-05-10'}, {'movie_id': 20, 'info_type_id': 2, 'info': '1998-03-20'}, {'movie_id': 30, 'info_type_id': 2, 'info': '1999-07-30'}];

var movie_info_idx = [{'movie_id': 10, 'info_type_id': 1, 'info': '6.0'}, {'movie_id': 20, 'info_type_id': 1, 'info': '7.5'}, {'movie_id': 30, 'info_type_id': 1, 'info': '5.5'}];

var candidates = (() {
  var _q0 = <dynamic>[];
  for (var cn in company_name) {
    for (var mc in movie_companies) {
      if (!(mc['company_id'] == cn['id'])) continue;
      for (var ct in company_type) {
        if (!(ct['id'] == mc['company_type_id'])) continue;
        for (var t in title) {
          if (!(t['id'] == mc['movie_id'])) continue;
          for (var kt in kind_type) {
            if (!(kt['id'] == t['kind_id'])) continue;
            for (var mi in movie_info) {
              if (!(mi['movie_id'] == t['id'])) continue;
              for (var it2 in info_type) {
                if (!(it2['id'] == mi['info_type_id'])) continue;
                for (var miidx in movie_info_idx) {
                  if (!(miidx['movie_id'] == t['id'])) continue;
                  for (var it in info_type) {
                    if (!(it['id'] == miidx['info_type_id'])) continue;
                    if (!(cn['country_code'] == '[de]' && ct['kind'] == 'production companies' && it['info'] == 'rating' && it2['info'] == 'release dates' && kt['kind'] == 'movie')) continue;
                    _q0.add({'release_date': mi['info'], 'rating': miidx['info'], 'german_movie': t['title']});
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = {'release_date': ((() {
  var _q1 = <dynamic>[];
  for (var x in candidates) {
    _q1.add([x['release_date'], x['release_date']]);
  }
  _q1.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q1 = [for (var x in _q1) x[1]];
  return _q1;
})())[0], 'rating': ((() {
  var _q2 = <dynamic>[];
  for (var x in candidates) {
    _q2.add([x['rating'], x['rating']]);
  }
  _q2.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q2 = [for (var x in _q2) x[1]];
  return _q2;
})())[0], 'german_movie': ((() {
  var _q3 = <dynamic>[];
  for (var x in candidates) {
    _q3.add([x['german_movie'], x['german_movie']]);
  }
  _q3.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})())[0]};

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
