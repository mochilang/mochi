// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:10:05Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var aka_name = [{'person_id': 1, 'name': 'A. Stone'}, {'person_id': 2, 'name': 'J. Doe'}];

var char_name = [{'id': 1, 'name': 'Protagonist'}, {'id': 2, 'name': 'Extra'}];

var cast_info = [{'movie_id': 1, 'person_role_id': 1, 'person_id': 1, 'role_id': 1, 'note': '(voice)'}, {'movie_id': 2, 'person_role_id': 2, 'person_id': 2, 'role_id': 2, 'note': 'Cameo'}];

var company_name = [{'id': 10, 'country_code': '[us]'}, {'id': 20, 'country_code': '[gb]'}];

var info_type = [{'id': 100, 'info': 'release dates'}];

var movie_companies = [{'movie_id': 1, 'company_id': 10, 'note': 'Studio (USA)'}, {'movie_id': 2, 'company_id': 20, 'note': 'Other (worldwide)'}];

var movie_info = [{'movie_id': 1, 'info_type_id': 100, 'info': 'USA: June 2006'}, {'movie_id': 2, 'info_type_id': 100, 'info': 'UK: 1999'}];

var name = [{'id': 1, 'name': 'Angela Stone', 'gender': 'f'}, {'id': 2, 'name': 'Bob Angstrom', 'gender': 'm'}];

var role_type = [{'id': 1, 'role': 'actress'}, {'id': 2, 'role': 'actor'}];

var title = [{'id': 1, 'title': 'Voiced Movie', 'production_year': 2006}, {'id': 2, 'title': 'Other Movie', 'production_year': 2010}];

var matches = (() {
  var _q0 = <dynamic>[];
  for (var an in aka_name) {
    for (var n in name) {
      if (!(n['id'] == an['person_id'])) continue;
      for (var ci in cast_info) {
        if (!(ci['person_id'] == an['person_id'])) continue;
        for (var chn in char_name) {
          if (!(chn['id'] == ci['person_role_id'])) continue;
          for (var rt in role_type) {
            if (!(rt['id'] == ci['role_id'])) continue;
            for (var t in title) {
              if (!(t['id'] == ci['movie_id'])) continue;
              for (var mc in movie_companies) {
                if (!(mc['movie_id'] == t['id'])) continue;
                for (var cn in company_name) {
                  if (!(cn['id'] == mc['company_id'])) continue;
                  for (var mi in movie_info) {
                    if (!(mi['movie_id'] == t['id'])) continue;
                    for (var it in info_type) {
                      if (!(it['id'] == mi['info_type_id'])) continue;
                      if (!((_in(ci['note'], ['(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)']) && cn['country_code'] == '[us]' && it['info'] == 'release dates' && mc['note'] != null && ((mc['note'] as dynamic).contains('(USA)') || (mc['note'] as dynamic).contains('(worldwide)')) && mi['info'] != null && (((mi['info'] as dynamic).contains('Japan:') && (mi['info'] as dynamic).contains('200')) || ((mi['info'] as dynamic).contains('USA:') && (mi['info'] as dynamic).contains('200'))) && n['gender'] == 'f' && (n['name'] as dynamic).contains('Ang') && rt['role'] == 'actress' && t['production_year'].toString().compareTo(2005.toString()) >= 0 && t['production_year'].toString().compareTo(2009.toString()) <= 0) ?? false)) continue;
                      _q0.add({'actress': n['name'], 'movie': t['title']});
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = [{'voicing_actress': (() { var _t2 = (() {
  var _q1 = <dynamic>[];
  for (var r in matches) {
    _q1.add(r['actress']);
  }
  return _q1;
})(); return _min(_t2); })(), 'voiced_movie': (() { var _t4 = (() {
  var _q3 = <dynamic>[];
  for (var r in matches) {
    _q3.add(r['movie']);
  }
  return _q3;
})(); return _min(_t4); })()}];

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
