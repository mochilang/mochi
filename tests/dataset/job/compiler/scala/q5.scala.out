object Main {
    def test_Q5_finds_the_lexicographically_first_qualifying_title(): Unit = {
        expect((result == scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("typical_european_movie" -> "A Film"))))
    }
    
    def main(args: Array[String]): Unit = {
        val company_type: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("ct_id" -> 1, "kind" -> "production companies"), scala.collection.mutable.Map("ct_id" -> 2, "kind" -> "other"))
        val info_type: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("it_id" -> 10, "info" -> "languages"))
        val title: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("t_id" -> 100, "title" -> "B Movie", "production_year" -> 2010), scala.collection.mutable.Map("t_id" -> 200, "title" -> "A Film", "production_year" -> 2012), scala.collection.mutable.Map("t_id" -> 300, "title" -> "Old Movie", "production_year" -> 2000))
        val movie_companies: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("movie_id" -> 100, "company_type_id" -> 1, "note" -> "ACME (France) (theatrical)"), scala.collection.mutable.Map("movie_id" -> 200, "company_type_id" -> 1, "note" -> "ACME (France) (theatrical)"), scala.collection.mutable.Map("movie_id" -> 300, "company_type_id" -> 1, "note" -> "ACME (France) (theatrical)"))
        val movie_info: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("movie_id" -> 100, "info" -> "German", "info_type_id" -> 10), scala.collection.mutable.Map("movie_id" -> 200, "info" -> "Swedish", "info_type_id" -> 10), scala.collection.mutable.Map("movie_id" -> 300, "info" -> "German", "info_type_id" -> 10))
        val candidate_titles: scala.collection.mutable.ArrayBuffer[Any] = (() => {
    val src = company_type
    val res = _query(src, Seq(
        Map("items" -> movie_companies, "on" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    (mc.company_type_id == ct.ct_id)
})),
        Map("items" -> movie_info, "on" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    val mi = args(2)
    (mi.movie_id == mc.movie_id)
})),
        Map("items" -> info_type, "on" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    val mi = args(2)
    val it = args(3)
    (it.it_id == mi.info_type_id)
})),
        Map("items" -> title, "on" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    val mi = args(2)
    val it = args(3)
    val t = args(4)
    (t.t_id == mc.movie_id)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    val mi = args(2)
    val it = args(3)
    val t = args(4)
    t.title
}), "where" -> ((args: Seq[Any]) => {
    val ct = args(0)
    val mc = args(1)
    val mi = args(2)
    val it = args(3)
    val t = args(4)
    (((((ct.kind == "production companies") && mc.note.contains("(theatrical)")) && mc.note.contains("(France)")) && (t.production_year > 2005)) && (scala.collection.mutable.ArrayBuffer("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German").contains(mi.info)))
})))
    res
})()
        val result: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("typical_european_movie" -> min(candidate_titles)))
        _json(result)
        test_Q5_finds_the_lexicographically_first_qualifying_title()
    }
    def expect(cond: Boolean): Unit = {
            if (!cond) throw new RuntimeException("expect failed")
    }
    
    def _json(v: Any): Unit = println(_to_json(v))
    
    def _query(src: Seq[Any], joins: Seq[Map[String,Any]], opts: Map[String,Any]): Seq[Any] = {
            var items = src.map(v => Seq[Any](v))
            for (j <- joins) {
                    val joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
                    val jitems = j("items").asInstanceOf[Seq[Any]]
                    val on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
                    val left = j.get("left").exists(_.asInstanceOf[Boolean])
                    val right = j.get("right").exists(_.asInstanceOf[Boolean])
                    if (left && right) {
                            val matched = Array.fill(jitems.length)(false)
                            for (leftRow <- items) {
                                    var m = false
                                    for ((rightRow, ri) <- jitems.zipWithIndex) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; matched(ri) = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) joined.append(leftRow :+ null)
                            }
                            for ((rightRow, ri) <- jitems.zipWithIndex) {
                                    if (!matched(ri)) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else if (right) {
                            for (rightRow <- jitems) {
                                    var m = false
                                    for (leftRow <- items) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else {
                            for (leftRow <- items) {
                                    var m = false
                                    for (rightRow <- jitems) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (left && !m) joined.append(leftRow :+ null)
                            }
                    }
                    items = joined.toSeq
            }
            var it = items
            opts.get("where").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Boolean]
                    it = it.filter(r => fn(r))
            }
            opts.get("sortKey").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Any]
                    it = it.sortBy(r => fn(r))(_anyOrdering)
            }
            opts.get("skip").foreach { n => it = it.drop(n.asInstanceOf[Int]) }
            opts.get("take").foreach { n => it = it.take(n.asInstanceOf[Int]) }
            val sel = opts("select").asInstanceOf[Seq[Any] => Any]
            it.map(r => sel(r))
    }
    
    def _to_json(v: Any): String = v match {
            case null => "null"
            case s: String => "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
            case b: Boolean => b.toString
            case i: Int => i.toString
            case l: Long => l.toString
            case d: Double => d.toString
            case m: scala.collection.Map[_, _] =>
                    m.map{ case (k, v2) => "\"" + k.toString.replace("\"", "\\\"") + "\":" + _to_json(v2) }.mkString("{", ",", "}")
            case seq: Iterable[_] => seq.map(_to_json).mkString("[", ",", "]")
            case other => "\"" + other.toString.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
    }
    
}
