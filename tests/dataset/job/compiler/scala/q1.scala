// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:27Z
object q1 {
  case class CompanyType(id: Int, kind: String)
  case class Filtered(note: String, title: String, year: Int)
  case class InfoType(id: Int, info: String)
  case class MovieCompanie(movie_id: Int, company_type_id: Int, note: String)
  case class MovieInfoIdx(movie_id: Int, info_type_id: Int)
  case class Result(production_note: String, movie_title: String, movie_year: Int)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val company_type = List(CompanyType(id = 1, kind = "production companies"), CompanyType(id = 2, kind = "distributors"))
    val info_type = List(InfoType(id = 10, info = "top 250 rank"), InfoType(id = 20, info = "bottom 10 rank"))
    val title = List(Title(id = 100, title = "Good Movie", production_year = 1995), Title(id = 200, title = "Bad Movie", production_year = 2000))
    val movie_companies = List(MovieCompanie(movie_id = 100, company_type_id = 1, note = "ACME (co-production)"), MovieCompanie(movie_id = 200, company_type_id = 1, note = "MGM (as Metro-Goldwyn-Mayer Pictures)"))
    val movie_info_idx = List(MovieInfoIdx(movie_id = 100, info_type_id = 10), MovieInfoIdx(movie_id = 200, info_type_id = 20))
    val filtered = for { ct <- company_type; mc <- movie_companies; if ct.id == (mc.company_type_id).asInstanceOf[Int]; t <- title; if (t.id).asInstanceOf[Int] == mc.movie_id; mi <- movie_info_idx; if (mi.movie_id).asInstanceOf[Int] == t.id; it <- info_type; if (it.id).asInstanceOf[Int] == mi.info_type_id; if ct.kind == "production companies" && it.info == "top 250 rank" && (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) && (mc.note.contains("(co-production)") || mc.note.contains("(presents)")) } yield Filtered(note = mc.note, title = t.title, year = t.production_year)
    val result = Result(production_note = (for { r <- filtered } yield r.note).min, movie_title = (for { r <- filtered } yield r.title).min, movie_year = (for { r <- filtered } yield r.year).min)
    println(scala.util.parsing.json.JSONArray(List(result).asInstanceOf[List[Any]]).toString())
    assert(result == Result(production_note = "ACME (co-production)", movie_title = "Good Movie", movie_year = 1995))
  }
}
