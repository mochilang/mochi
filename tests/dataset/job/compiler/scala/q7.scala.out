object Main {
    def test_Q7_finds_movie_features_biography_for_person(): Unit = {
        expect((result == scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("of_person" -> "Alan Brown", "biography_movie" -> "Feature Film"))))
    }
    
    def main(args: Array[String]): Unit = {
        val aka_name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("person_id" -> 1, "name" -> "Anna Mae"), scala.collection.mutable.Map("person_id" -> 2, "name" -> "Chris"))
        val cast_info: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Int]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("person_id" -> 1, "movie_id" -> 10), scala.collection.mutable.Map("person_id" -> 2, "movie_id" -> 20))
        val info_type: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 1, "info" -> "mini biography"), scala.collection.mutable.Map("id" -> 2, "info" -> "trivia"))
        val link_type: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 1, "link" -> "features"), scala.collection.mutable.Map("id" -> 2, "link" -> "references"))
        val movie_link: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Int]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("linked_movie_id" -> 10, "link_type_id" -> 1), scala.collection.mutable.Map("linked_movie_id" -> 20, "link_type_id" -> 2))
        val name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 1, "name" -> "Alan Brown", "name_pcode_cf" -> "B", "gender" -> "m"), scala.collection.mutable.Map("id" -> 2, "name" -> "Zoe", "name_pcode_cf" -> "Z", "gender" -> "f"))
        val person_info: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("person_id" -> 1, "info_type_id" -> 1, "note" -> "Volker Boehm"), scala.collection.mutable.Map("person_id" -> 2, "info_type_id" -> 1, "note" -> "Other"))
        val title: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 10, "title" -> "Feature Film", "production_year" -> 1990), scala.collection.mutable.Map("id" -> 20, "title" -> "Late Film", "production_year" -> 2000))
        val rows: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = aka_name
    val res = _query(src, Seq(
        Map("items" -> name, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    (n.id == an.person_id)
})),
        Map("items" -> person_info, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    (pi.person_id == an.person_id)
})),
        Map("items" -> info_type, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    (it.id == pi.info_type_id)
})),
        Map("items" -> cast_info, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    (ci.person_id == n.id)
})),
        Map("items" -> title, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    val t = args(5)
    (t.id == ci.movie_id)
})),
        Map("items" -> movie_link, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    val t = args(5)
    val ml = args(6)
    (ml.linked_movie_id == t.id)
})),
        Map("items" -> link_type, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    val t = args(5)
    val ml = args(6)
    val lt = args(7)
    (lt.id == ml.link_type_id)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    val t = args(5)
    val ml = args(6)
    val lt = args(7)
    scala.collection.mutable.Map("person_name" -> n.name, "movie_title" -> t.title)
}), "where" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val pi = args(2)
    val it = args(3)
    val ci = args(4)
    val t = args(5)
    val ml = args(6)
    val lt = args(7)
    (((((((((((((an.name.contains("a") && (it.info == "mini biography")) && (lt.link == "features")) && (n.name_pcode_cf >= "A")) && (n.name_pcode_cf <= "F")) && (((n.gender == "m") || (((n.gender == "f") && n.name.starts_with("B")))))) && (pi.note == "Volker Boehm")) && (t.production_year >= 1980)) && (t.production_year <= 1995)) && (pi.person_id == an.person_id)) && (pi.person_id == ci.person_id)) && (an.person_id == ci.person_id)) && (ci.movie_id == ml.linked_movie_id)))
})))
    res
})()
        val result: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("of_person" -> min((() => {
    val src = rows
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val r = args(0)
    r.person_name
})))
    res
})()), "biography_movie" -> min((() => {
    val src = rows
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val r = args(0)
    r.movie_title
})))
    res
})())))
        _json(result)
        test_Q7_finds_movie_features_biography_for_person()
    }
    def expect(cond: Boolean): Unit = {
            if (!cond) throw new RuntimeException("expect failed")
    }
    
    def _json(v: Any): Unit = println(_to_json(v))
    
    def _query(src: Seq[Any], joins: Seq[Map[String,Any]], opts: Map[String,Any]): Seq[Any] = {
            var items = src.map(v => Seq[Any](v))
            for (j <- joins) {
                    val joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
                    val jitems = j("items").asInstanceOf[Seq[Any]]
                    val on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
                    val left = j.get("left").exists(_.asInstanceOf[Boolean])
                    val right = j.get("right").exists(_.asInstanceOf[Boolean])
                    if (left && right) {
                            val matched = Array.fill(jitems.length)(false)
                            for (leftRow <- items) {
                                    var m = false
                                    for ((rightRow, ri) <- jitems.zipWithIndex) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; matched(ri) = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) joined.append(leftRow :+ null)
                            }
                            for ((rightRow, ri) <- jitems.zipWithIndex) {
                                    if (!matched(ri)) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else if (right) {
                            for (rightRow <- jitems) {
                                    var m = false
                                    for (leftRow <- items) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else {
                            for (leftRow <- items) {
                                    var m = false
                                    for (rightRow <- jitems) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (left && !m) joined.append(leftRow :+ null)
                            }
                    }
                    items = joined.toSeq
            }
            var it = items
            opts.get("where").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Boolean]
                    it = it.filter(r => fn(r))
            }
            opts.get("sortKey").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Any]
                    it = it.sortBy(r => fn(r))(_anyOrdering)
            }
            opts.get("skip").foreach { n => it = it.drop(n.asInstanceOf[Int]) }
            opts.get("take").foreach { n => it = it.take(n.asInstanceOf[Int]) }
            val sel = opts("select").asInstanceOf[Seq[Any] => Any]
            it.map(r => sel(r))
    }
    
    def _to_json(v: Any): String = v match {
            case null => "null"
            case s: String => "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
            case b: Boolean => b.toString
            case i: Int => i.toString
            case l: Long => l.toString
            case d: Double => d.toString
            case m: scala.collection.Map[_, _] =>
                    m.map{ case (k, v2) => "\"" + k.toString.replace("\"", "\\\"") + "\":" + _to_json(v2) }.mkString("{", ",", "}")
            case seq: Iterable[_] => seq.map(_to_json).mkString("[", ",", "]")
            case other => "\"" + other.toString.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
    }
    
}
