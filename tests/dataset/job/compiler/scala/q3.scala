// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:32Z
object q3 {
  case class Keyword(id: Int, keyword: String)
  case class MovieInfo(movie_id: Int, info: String)
  case class MovieKeyword(movie_id: Int, keyword_id: Int)
  case class Result(movie_title: String)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val keyword = List(Keyword(id = 1, keyword = "amazing sequel"), Keyword(id = 2, keyword = "prequel"))
    val movie_info = List(MovieInfo(movie_id = 10, info = "Germany"), MovieInfo(movie_id = 30, info = "Sweden"), MovieInfo(movie_id = 20, info = "France"))
    val movie_keyword = List(MovieKeyword(movie_id = 10, keyword_id = 1), MovieKeyword(movie_id = 30, keyword_id = 1), MovieKeyword(movie_id = 20, keyword_id = 1), MovieKeyword(movie_id = 10, keyword_id = 2))
    val title = List(Title(id = 10, title = "Alpha", production_year = 2006), Title(id = 30, title = "Beta", production_year = 2008), Title(id = 20, title = "Gamma", production_year = 2009))
    val allowed_infos = List("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German")
    val candidate_titles = for { k <- keyword; mk <- movie_keyword; if (mk.keyword_id).asInstanceOf[Int] == k.id; mi <- movie_info; if (mi.movie_id).asInstanceOf[Int] == mk.movie_id; t <- title; if (t.id).asInstanceOf[Int] == mi.movie_id; if allowed_infos.contains(k.keyword.contains("sequel") && mi.info) && t.production_year > 2005 && mk.movie_id == mi.movie_id } yield t.title
    val result = List(Map("movie_title" -> candidate_titles.min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(movie_title = "Alpha")))
  }
}
