// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:32Z
object q6 {
  case class CastInfo(movie_id: Int, person_id: Int)
  case class Keyword(id: Int, keyword: String)
  case class MovieKeyword(movie_id: Int, keyword_id: Int)
  case class Name(id: Int, name: String)
  case class Result(movie_keyword: String, actor_name: String, marvel_movie: String)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val cast_info = List(CastInfo(movie_id = 1, person_id = 101), CastInfo(movie_id = 2, person_id = 102))
    val keyword = List(Keyword(id = 100, keyword = "marvel-cinematic-universe"), Keyword(id = 200, keyword = "other"))
    val movie_keyword = List(MovieKeyword(movie_id = 1, keyword_id = 100), MovieKeyword(movie_id = 2, keyword_id = 200))
    val name = List(Name(id = 101, name = "Downey Robert Jr."), Name(id = 102, name = "Chris Evans"))
    val title = List(Title(id = 1, title = "Iron Man 3", production_year = 2013), Title(id = 2, title = "Old Movie", production_year = 2000))
    val result = for { ci <- cast_info; mk <- movie_keyword; if ci.movie_id == (mk.movie_id).asInstanceOf[Int]; k <- keyword; if mk.keyword_id == (k.id).asInstanceOf[Int]; n <- name; if ci.person_id == (n.id).asInstanceOf[Int]; t <- title; if ci.movie_id == (t.id).asInstanceOf[Int]; if k.keyword == "marvel-cinematic-universe" && n.name.contains("Downey") && n.name.contains("Robert") && t.production_year > 2010 } yield Map("movie_keyword" -> k.keyword, "actor_name" -> n.name, "marvel_movie" -> t.title)
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(movie_keyword = "marvel-cinematic-universe", actor_name = "Downey Robert Jr.", marvel_movie = "Iron Man 3")))
  }
}
