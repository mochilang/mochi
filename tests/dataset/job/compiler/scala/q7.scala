// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:32Z
object q7 {
  case class AkaName(person_id: Int, name: String)
  case class CastInfo(person_id: Int, movie_id: Int)
  case class InfoType(id: Int, info: String)
  case class LinkType(id: Int, link: String)
  case class MovieLink(linked_movie_id: Int, link_type_id: Int)
  case class Name(id: Int, name: String, name_pcode_cf: String, gender: String)
  case class PersonInfo(person_id: Int, info_type_id: Int, note: String)
  case class Result(of_person: String, biography_movie: String)
  case class Row(person_name: String, movie_title: String)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val aka_name = List(AkaName(person_id = 1, name = "Anna Mae"), AkaName(person_id = 2, name = "Chris"))
    val cast_info = List(CastInfo(person_id = 1, movie_id = 10), CastInfo(person_id = 2, movie_id = 20))
    val info_type = List(InfoType(id = 1, info = "mini biography"), InfoType(id = 2, info = "trivia"))
    val link_type = List(LinkType(id = 1, link = "features"), LinkType(id = 2, link = "references"))
    val movie_link = List(MovieLink(linked_movie_id = 10, link_type_id = 1), MovieLink(linked_movie_id = 20, link_type_id = 2))
    val name = List(Name(id = 1, name = "Alan Brown", name_pcode_cf = "B", gender = "m"), Name(id = 2, name = "Zoe", name_pcode_cf = "Z", gender = "f"))
    val person_info = List(PersonInfo(person_id = 1, info_type_id = 1, note = "Volker Boehm"), PersonInfo(person_id = 2, info_type_id = 1, note = "Other"))
    val title = List(Title(id = 10, title = "Feature Film", production_year = 1990), Title(id = 20, title = "Late Film", production_year = 2000))
    val rows = for { an <- aka_name; n <- name; if (n.id).asInstanceOf[Int] == an.person_id; pi <- person_info; if (pi.person_id).asInstanceOf[Int] == an.person_id; it <- info_type; if (it.id).asInstanceOf[Int] == pi.info_type_id; ci <- cast_info; if (ci.person_id).asInstanceOf[Int] == n.id; t <- title; if (t.id).asInstanceOf[Int] == ci.movie_id; ml <- movie_link; if (ml.linked_movie_id).asInstanceOf[Int] == t.id; lt <- link_type; if (lt.id).asInstanceOf[Int] == ml.link_type_id; if (an.name.contains("a") && it.info == "mini biography" && lt.link == "features" && n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" && ((n.gender == "m" || ((n.gender == "f" && (n.name.starts_with("B")).asInstanceOf[Int])).asInstanceOf[Int])).asInstanceOf[Int] && pi.note == "Volker Boehm" && t.production_year >= 1980 && t.production_year <= 1995 && pi.person_id == an.person_id && pi.person_id == ci.person_id && an.person_id == ci.person_id && ci.movie_id == ml.linked_movie_id) != null } yield Row(person_name = n.name, movie_title = t.title)
    val result = List(Map("of_person" -> (for { r <- rows } yield r.person_name).min, "biography_movie" -> (for { r <- rows } yield r.movie_title).min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(of_person = "Alan Brown", biography_movie = "Feature Film")))
  }
}
