// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:33Z
object q8 {
  case class AkaName(person_id: Int, name: String)
  case class CastInfo(person_id: Int, movie_id: Int, note: String, role_id: Int)
  case class CompanyName(id: Int, country_code: String)
  case class Eligible(pseudonym: String, movie_title: String)
  case class MovieCompanie(movie_id: Int, company_id: Int, note: String)
  case class Name(id: Int, name: String)
  case class Result(actress_pseudonym: String, japanese_movie_dubbed: String)
  case class RoleType(id: Int, role: String)
  case class Title(id: Int, title: String)

  def main(args: Array[String]): Unit = {
    val aka_name = List(AkaName(person_id = 1, name = "Y. S."))
    val cast_info = List(CastInfo(person_id = 1, movie_id = 10, note = "(voice: English version)", role_id = 1000))
    val company_name = List(CompanyName(id = 50, country_code = "[jp]"))
    val movie_companies = List(MovieCompanie(movie_id = 10, company_id = 50, note = "Studio (Japan)"))
    val name = List(Name(id = 1, name = "Yoko Ono"), Name(id = 2, name = "Yuichi"))
    val role_type = List(RoleType(id = 1000, role = "actress"))
    val title = List(Title(id = 10, title = "Dubbed Film"))
    val eligible = for { an1 <- aka_name; n1 <- name; if (n1.id).asInstanceOf[Int] == an1.person_id; ci <- cast_info; if (ci.person_id).asInstanceOf[Int] == an1.person_id; t <- title; if (t.id).asInstanceOf[Int] == ci.movie_id; mc <- movie_companies; if (mc.movie_id).asInstanceOf[Int] == ci.movie_id; cn <- company_name; if (cn.id).asInstanceOf[Int] == mc.company_id; rt <- role_type; if (rt.id).asInstanceOf[Int] == ci.role_id; if ci.note == "(voice: English version)" && cn.country_code == "[jp]" && mc.note.contains("(Japan)") && (!mc.note.contains("(USA)")) && n1.name.contains("Yo") && (!n1.name.contains("Yu")) && rt.role == "actress" } yield Eligible(pseudonym = an1.name, movie_title = t.title)
    val result = List(Map("actress_pseudonym" -> (for { x <- eligible } yield x.pseudonym).min, "japanese_movie_dubbed" -> (for { x <- eligible } yield x.movie_title).min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(actress_pseudonym = "Y. S.", japanese_movie_dubbed = "Dubbed Film")))
  }
}
