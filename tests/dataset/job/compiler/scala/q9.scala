// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:33Z
object q9 {
  case class AkaName(person_id: Int, name: String)
  case class CastInfo(person_id: Int, person_role_id: Int, movie_id: Int, role_id: Int, note: String)
  case class CharName(id: Int, name: String)
  case class CompanyName(id: Int, country_code: String)
  case class Matche(alt: String, character: String, movie: String)
  case class MovieCompanie(movie_id: Int, company_id: Int, note: String)
  case class Name(id: Int, name: String, gender: String)
  case class Result(alternative_name: String, character_name: String, movie: String)
  case class RoleType(id: Int, role: String)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val aka_name = List(AkaName(person_id = 1, name = "A. N. G."), AkaName(person_id = 2, name = "J. D."))
    val char_name = List(CharName(id = 10, name = "Angel"), CharName(id = 20, name = "Devil"))
    val cast_info = List(CastInfo(person_id = 1, person_role_id = 10, movie_id = 100, role_id = 1000, note = "(voice)"), CastInfo(person_id = 2, person_role_id = 20, movie_id = 200, role_id = 1000, note = "(voice)"))
    val company_name = List(CompanyName(id = 100, country_code = "[us]"), CompanyName(id = 200, country_code = "[gb]"))
    val movie_companies = List(MovieCompanie(movie_id = 100, company_id = 100, note = "ACME Studios (USA)"), MovieCompanie(movie_id = 200, company_id = 200, note = "Maple Films"))
    val name = List(Name(id = 1, name = "Angela Smith", gender = "f"), Name(id = 2, name = "John Doe", gender = "m"))
    val role_type = List(RoleType(id = 1000, role = "actress"), RoleType(id = 2000, role = "actor"))
    val title = List(Title(id = 100, title = "Famous Film", production_year = 2010), Title(id = 200, title = "Old Movie", production_year = 1999))
    val matches = for { an <- aka_name; n <- name; if an.person_id == (n.id).asInstanceOf[Int]; ci <- cast_info; if (ci.person_id).asInstanceOf[Int] == n.id; chn <- char_name; if (chn.id).asInstanceOf[Int] == ci.person_role_id; t <- title; if (t.id).asInstanceOf[Int] == ci.movie_id; mc <- movie_companies; if (mc.movie_id).asInstanceOf[Int] == t.id; cn <- company_name; if (cn.id).asInstanceOf[Int] == mc.company_id; rt <- role_type; if (rt.id).asInstanceOf[Int] == ci.role_id; if (List("(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)").contains(ci.note)) && cn.country_code == "[us]" && (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) && n.gender == "f" && n.name.contains("Ang") && rt.role == "actress" && t.production_year >= 2005 && t.production_year <= 2015 } yield Matche(alt = an.name, character = chn.name, movie = t.title)
    val result = List(Map("alternative_name" -> (for { x <- matches } yield x.alt).min, "character_name" -> (for { x <- matches } yield x.character).min, "movie" -> (for { x <- matches } yield x.movie).min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(alternative_name = "A. N. G.", character_name = "Angel", movie = "Famous Film")))
  }
}
