// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:33Z
object q10 {
  case class CastInfo(movie_id: Int, person_role_id: Int, role_id: Int, note: String)
  case class CharName(id: Int, name: String)
  case class CompanyName(id: Int, country_code: String)
  case class CompanyType(id: Int)
  case class Matche(character: String, movie: String)
  case class MovieCompanie(movie_id: Int, company_id: Int, company_type_id: Int)
  case class Result(uncredited_voiced_character: String, russian_movie: String)
  case class RoleType(id: Int, role: String)
  case class Title(id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val char_name = List(CharName(id = 1, name = "Ivan"), CharName(id = 2, name = "Alex"))
    val cast_info = List(CastInfo(movie_id = 10, person_role_id = 1, role_id = 1, note = "Soldier (voice) (uncredited)"), CastInfo(movie_id = 11, person_role_id = 2, role_id = 1, note = "(voice)"))
    val company_name = List(CompanyName(id = 1, country_code = "[ru]"), CompanyName(id = 2, country_code = "[us]"))
    val company_type = List(CompanyType(id = 1), CompanyType(id = 2))
    val movie_companies = List(MovieCompanie(movie_id = 10, company_id = 1, company_type_id = 1), MovieCompanie(movie_id = 11, company_id = 2, company_type_id = 1))
    val role_type = List(RoleType(id = 1, role = "actor"), RoleType(id = 2, role = "director"))
    val title = List(Title(id = 10, title = "Vodka Dreams", production_year = 2006), Title(id = 11, title = "Other Film", production_year = 2004))
    val matches = for { chn <- char_name; ci <- cast_info; if chn.id == (ci.person_role_id).asInstanceOf[Int]; rt <- role_type; if (rt.id).asInstanceOf[Int] == ci.role_id; t <- title; if (t.id).asInstanceOf[Int] == ci.movie_id; mc <- movie_companies; if (mc.movie_id).asInstanceOf[Int] == t.id; cn <- company_name; if (cn.id).asInstanceOf[Int] == mc.company_id; ct <- company_type; if (ct.id).asInstanceOf[Int] == mc.company_type_id; if ci.note.contains("(voice)") && ci.note.contains("(uncredited)") && cn.country_code == "[ru]" && rt.role == "actor" && t.production_year > 2005 } yield Matche(character = chn.name, movie = t.title)
    val result = List(Map("uncredited_voiced_character" -> (for { x <- matches } yield x.character).min, "russian_movie" -> (for { x <- matches } yield x.movie).min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(uncredited_voiced_character = "Ivan", russian_movie = "Vodka Dreams")))
  }
}
