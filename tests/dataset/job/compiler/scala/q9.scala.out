object Main {
    def test_Q9_selects_minimal_alternative_name__character_and_movie(): Unit = {
        expect((result == scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("alternative_name" -> "A. N. G.", "character_name" -> "Angel", "movie" -> "Famous Film"))))
    }
    
    def main(args: Array[String]): Unit = {
        val aka_name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("person_id" -> 1, "name" -> "A. N. G."), scala.collection.mutable.Map("person_id" -> 2, "name" -> "J. D."))
        val char_name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 10, "name" -> "Angel"), scala.collection.mutable.Map("id" -> 20, "name" -> "Devil"))
        val cast_info: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("person_id" -> 1, "person_role_id" -> 10, "movie_id" -> 100, "role_id" -> 1000, "note" -> "(voice)"), scala.collection.mutable.Map("person_id" -> 2, "person_role_id" -> 20, "movie_id" -> 200, "role_id" -> 1000, "note" -> "(voice)"))
        val company_name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 100, "country_code" -> "[us]"), scala.collection.mutable.Map("id" -> 200, "country_code" -> "[gb]"))
        val movie_companies: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("movie_id" -> 100, "company_id" -> 100, "note" -> "ACME Studios (USA)"), scala.collection.mutable.Map("movie_id" -> 200, "company_id" -> 200, "note" -> "Maple Films"))
        val name: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 1, "name" -> "Angela Smith", "gender" -> "f"), scala.collection.mutable.Map("id" -> 2, "name" -> "John Doe", "gender" -> "m"))
        val role_type: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 1000, "role" -> "actress"), scala.collection.mutable.Map("id" -> 2000, "role" -> "actor"))
        val title: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("id" -> 100, "title" -> "Famous Film", "production_year" -> 2010), scala.collection.mutable.Map("id" -> 200, "title" -> "Old Movie", "production_year" -> 1999))
        val matches: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
    val src = aka_name
    val res = _query(src, Seq(
        Map("items" -> name, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    (an.person_id == n.id)
})),
        Map("items" -> cast_info, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    (ci.person_id == n.id)
})),
        Map("items" -> char_name, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    (chn.id == ci.person_role_id)
})),
        Map("items" -> title, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    (t.id == ci.movie_id)
})),
        Map("items" -> movie_companies, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    val mc = args(5)
    (mc.movie_id == t.id)
})),
        Map("items" -> company_name, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    val mc = args(5)
    val cn = args(6)
    (cn.id == mc.company_id)
})),
        Map("items" -> role_type, "on" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    val mc = args(5)
    val cn = args(6)
    val rt = args(7)
    (rt.id == ci.role_id)
}))
    ), Map("select" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    val mc = args(5)
    val cn = args(6)
    val rt = args(7)
    scala.collection.mutable.Map("alt" -> an.name, "character" -> chn.name, "movie" -> t.title)
}), "where" -> ((args: Seq[Any]) => {
    val an = args(0)
    val n = args(1)
    val ci = args(2)
    val chn = args(3)
    val t = args(4)
    val mc = args(5)
    val cn = args(6)
    val rt = args(7)
    ((((((((scala.collection.mutable.ArrayBuffer("(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)").contains(ci.note)) && (cn.country_code == "[us]")) && ((mc.note.contains("(USA)") || mc.note.contains("(worldwide)")))) && (n.gender == "f")) && n.name.contains("Ang")) && (rt.role == "actress")) && (t.production_year >= 2005)) && (t.production_year <= 2015))
})))
    res
})()
        val result: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map("alternative_name" -> min((() => {
    val src = matches
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val x = args(0)
    x.alt
})))
    res
})()), "character_name" -> min((() => {
    val src = matches
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val x = args(0)
    x.character
})))
    res
})()), "movie" -> min((() => {
    val src = matches
    val res = _query(src, Seq(
    ), Map("select" -> ((args: Seq[Any]) => {
    val x = args(0)
    x.movie
})))
    res
})())))
        _json(result)
        test_Q9_selects_minimal_alternative_name__character_and_movie()
    }
    def expect(cond: Boolean): Unit = {
            if (!cond) throw new RuntimeException("expect failed")
    }
    
    def _json(v: Any): Unit = println(_to_json(v))
    
    def _query(src: Seq[Any], joins: Seq[Map[String,Any]], opts: Map[String,Any]): Seq[Any] = {
            var items = src.map(v => Seq[Any](v))
            for (j <- joins) {
                    val joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
                    val jitems = j("items").asInstanceOf[Seq[Any]]
                    val on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
                    val left = j.get("left").exists(_.asInstanceOf[Boolean])
                    val right = j.get("right").exists(_.asInstanceOf[Boolean])
                    if (left && right) {
                            val matched = Array.fill(jitems.length)(false)
                            for (leftRow <- items) {
                                    var m = false
                                    for ((rightRow, ri) <- jitems.zipWithIndex) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; matched(ri) = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) joined.append(leftRow :+ null)
                            }
                            for ((rightRow, ri) <- jitems.zipWithIndex) {
                                    if (!matched(ri)) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else if (right) {
                            for (rightRow <- jitems) {
                                    var m = false
                                    for (leftRow <- items) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (!m) {
                                            val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                            joined.append(undef :+ rightRow)
                                    }
                            }
                    } else {
                            for (leftRow <- items) {
                                    var m = false
                                    for (rightRow <- jitems) {
                                            var keep = true
                                            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                            if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                    }
                                    if (left && !m) joined.append(leftRow :+ null)
                            }
                    }
                    items = joined.toSeq
            }
            var it = items
            opts.get("where").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Boolean]
                    it = it.filter(r => fn(r))
            }
            opts.get("sortKey").foreach { f =>
                    val fn = f.asInstanceOf[Seq[Any] => Any]
                    it = it.sortBy(r => fn(r))(_anyOrdering)
            }
            opts.get("skip").foreach { n => it = it.drop(n.asInstanceOf[Int]) }
            opts.get("take").foreach { n => it = it.take(n.asInstanceOf[Int]) }
            val sel = opts("select").asInstanceOf[Seq[Any] => Any]
            it.map(r => sel(r))
    }
    
    def _to_json(v: Any): String = v match {
            case null => "null"
            case s: String => "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
            case b: Boolean => b.toString
            case i: Int => i.toString
            case l: Long => l.toString
            case d: Double => d.toString
            case m: scala.collection.Map[_, _] =>
                    m.map{ case (k, v2) => "\"" + k.toString.replace("\"", "\\\"") + "\":" + _to_json(v2) }.mkString("{", ",", "}")
            case seq: Iterable[_] => seq.map(_to_json).mkString("[", ",", "]")
            case other => "\"" + other.toString.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
    }
    
}
