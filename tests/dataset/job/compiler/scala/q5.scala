// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:24:32Z
object q5 {
  case class CompanyType(ct_id: Int, kind: String)
  case class InfoType(it_id: Int, info: String)
  case class MovieCompanie(movie_id: Int, company_type_id: Int, note: String)
  case class MovieInfo(movie_id: Int, info: String, info_type_id: Int)
  case class Result(typical_european_movie: String)
  case class Title(t_id: Int, title: String, production_year: Int)

  def main(args: Array[String]): Unit = {
    val company_type = List(CompanyType(ct_id = 1, kind = "production companies"), CompanyType(ct_id = 2, kind = "other"))
    val info_type = List(InfoType(it_id = 10, info = "languages"))
    val title = List(Title(t_id = 100, title = "B Movie", production_year = 2010), Title(t_id = 200, title = "A Film", production_year = 2012), Title(t_id = 300, title = "Old Movie", production_year = 2000))
    val movie_companies = List(MovieCompanie(movie_id = 100, company_type_id = 1, note = "ACME (France) (theatrical)"), MovieCompanie(movie_id = 200, company_type_id = 1, note = "ACME (France) (theatrical)"), MovieCompanie(movie_id = 300, company_type_id = 1, note = "ACME (France) (theatrical)"))
    val movie_info = List(MovieInfo(movie_id = 100, info = "German", info_type_id = 10), MovieInfo(movie_id = 200, info = "Swedish", info_type_id = 10), MovieInfo(movie_id = 300, info = "German", info_type_id = 10))
    val candidate_titles = for { ct <- company_type; mc <- movie_companies; if (mc.company_type_id).asInstanceOf[Int] == ct.ct_id; mi <- movie_info; if (mi.movie_id).asInstanceOf[Int] == mc.movie_id; it <- info_type; if (it.it_id).asInstanceOf[Int] == mi.info_type_id; t <- title; if (t.t_id).asInstanceOf[Int] == mc.movie_id; if mc.note.contains(mc.note.contains(ct.kind == "production companies" && "(theatrical)") && "(France)") && t.production_year > 2005 && (List("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German").contains(mi.info)) } yield t.title
    val result = List(Map("typical_european_movie" -> candidate_titles.min))
    println(scala.util.parsing.json.JSONArray(result.asInstanceOf[List[Any]]).toString())
    assert(result == List(Result(typical_european_movie = "A Film")))
  }
}
