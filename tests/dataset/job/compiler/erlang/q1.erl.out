#!/usr/bin/env escript
-module(main).
-export([main/1, test_q1_returns_min_note__title_and_year_for_top_ranked_co_production/0]).

test_q1_returns_min_note__title_and_year_for_top_ranked_co_production() ->
    mochi_expect((Result == #{production_note => "ACME (co-production)", movie_title => "Good Movie", movie_year => 1995})).

main(_) ->
    Company_type = [#{id => 1, kind => "production companies"}, #{id => 2, kind => "distributors"}],
    Info_type = [#{id => 10, info => "top 250 rank"}, #{id => 20, info => "bottom 10 rank"}],
    Title = [#{id => 100, title => "Good Movie", production_year => 1995}, #{id => 200, title => "Bad Movie", production_year => 2000}],
    Movie_companies = [#{movie_id => 100, company_type_id => 1, note => "ACME (co-production)"}, #{movie_id => 200, company_type_id => 1, note => "MGM (as Metro-Goldwyn-Mayer Pictures)"}],
    Movie_info_idx = [#{movie_id => 100, info_type_id => 10}, #{movie_id => 200, info_type_id => 20}],
    Filtered = [#{note => maps:get(note, Mc), title => maps:get(title, T), year => maps:get(production_year, T)} || Ct <- Company_type, Mc <- Movie_companies, T <- Title, Mi <- Movie_info_idx, It <- Info_type, (maps:get(id, Ct) == maps:get(company_type_id, Mc)), (maps:get(id, T) == maps:get(movie_id, Mc)), (maps:get(movie_id, Mi) == maps:get(id, T)), (maps:get(id, It) == maps:get(info_type_id, Mi)), ((((maps:get(kind, Ct) == "production companies") and (maps:get(info, It) == "top 250 rank")) and not lists:member("(as Metro-Goldwyn-Mayer Pictures)", maps:get(note, Mc))) and (lists:member("(co-production)", maps:get(note, Mc)) or lists:member("(presents)", maps:get(note, Mc))))],
    Result = #{production_note => min([maps:get(note, R) || R <- Filtered]), movie_title => min([maps:get(title, R) || R <- Filtered]), movie_year => min([maps:get(year, R) || R <- Filtered])},
    mochi_json([Result])
,
    mochi_run_test("Q1 returns min note, title and year for top ranked co-production", fun test_q1_returns_min_note__title_and_year_for_top_ranked_co_production/0).


mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\\ -> "\\\\";
        $" -> "\\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s~n", [mochi_to_json(V)]).

mochi_expect(true) -> ok;
mochi_expect(_) -> erlang:error(expect_failed).

mochi_test_start(Name) -> io:format("   test ~s ...", [Name]).
mochi_test_pass(Dur) -> io:format(" ok (~p)~n", [Dur]).
mochi_test_fail(Err, Dur) -> io:format(" fail ~p (~p)~n", [Err, Dur]).

mochi_run_test(Name, Fun) ->
    mochi_test_start(Name),
    Start = erlang:monotonic_time(millisecond),
    try Fun() of _ ->
        Duration = erlang:monotonic_time(millisecond) - Start,
        mochi_test_pass(Duration)
    catch C:R ->
        Duration = erlang:monotonic_time(millisecond) - Start,
        mochi_test_fail({C,R}, Duration)
    end.
