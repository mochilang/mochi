#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:39Z
% q9.erl - generated from q9.mochi

main(_) ->
    Aka_name = [#{person_id => 1, name => "A. N. G."}, #{person_id => 2, name => "J. D."}],
    Char_name = [#{id => 10, name => "Angel"}, #{id => 20, name => "Devil"}],
    Cast_info = [#{person_id => 1, person_role_id => 10, movie_id => 100, role_id => 1000, note => "(voice)"}, #{person_id => 2, person_role_id => 20, movie_id => 200, role_id => 1000, note => "(voice)"}],
    Company_name = [#{id => 100, country_code => "[us]"}, #{id => 200, country_code => "[gb]"}],
    Movie_companies = [#{movie_id => 100, company_id => 100, note => "ACME Studios (USA)"}, #{movie_id => 200, company_id => 200, note => "Maple Films"}],
    Name = [#{id => 1, name => "Angela Smith", gender => "f"}, #{id => 2, name => "John Doe", gender => "m"}],
    Role_type = [#{id => 1000, role => "actress"}, #{id => 2000, role => "actor"}],
    Title = [#{id => 100, title => "Famous Film", production_year => 2010}, #{id => 200, title => "Old Movie", production_year => 1999}],
    Matches = [#{alt => maps:get(name, An), character => maps:get(name, Chn), movie => maps:get(title, T)} || An <- Aka_name, N <- Name, Ci <- Cast_info, Chn <- Char_name, T <- Title, Mc <- Movie_companies, Cn <- Company_name, Rt <- Role_type, (maps:get(person_id, An) == maps:get(id, N)), (maps:get(person_id, Ci) == maps:get(id, N)), (maps:get(id, Chn) == maps:get(person_role_id, Ci)), (maps:get(id, T) == maps:get(movie_id, Ci)), (maps:get(movie_id, Mc) == maps:get(id, T)), (maps:get(id, Cn) == maps:get(company_id, Mc)), (maps:get(id, Rt) == maps:get(role_id, Ci)), ((((((((lists:member(maps:get(note, Ci), ["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"])) andalso (maps:get(country_code, Cn) == "[us]")) andalso (((string:str(maps:get(note, Mc), "(USA)") > 0) orelse (string:str(maps:get(note, Mc), "(worldwide)") > 0)))) andalso (maps:get(gender, N) == "f")) andalso (string:str(maps:get(name, N), "Ang") > 0)) andalso (maps:get(role, Rt) == "actress")) andalso (maps:get(production_year, T) >= 2005)) andalso (maps:get(production_year, T) =< 2015))],
    Result = [#{alternative_name => lists:min([maps:get(alt, X) || X <- Matches]), character_name => lists:min([maps:get(character, X) || X <- Matches]), movie => lists:min([maps:get(movie, X) || X <- Matches])}],
    mochi_json(Result),
    (case (Result == [#{alternative_name => "A. N. G.", character_name => "Angel", movie => "Famous Film"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
