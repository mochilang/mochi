#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:38Z
% q6.erl - generated from q6.mochi

main(_) ->
    Cast_info = [#{movie_id => 1, person_id => 101}, #{movie_id => 2, person_id => 102}],
    Keyword = [#{id => 100, keyword => "marvel-cinematic-universe"}, #{id => 200, keyword => "other"}],
    Movie_keyword = [#{movie_id => 1, keyword_id => 100}, #{movie_id => 2, keyword_id => 200}],
    Name = [#{id => 101, name => "Downey Robert Jr."}, #{id => 102, name => "Chris Evans"}],
    Title = [#{id => 1, title => "Iron Man 3", production_year => 2013}, #{id => 2, title => "Old Movie", production_year => 2000}],
    Result = [#{movie_keyword => maps:get(keyword, K), actor_name => maps:get(name, N), marvel_movie => maps:get(title, T)} || Ci <- Cast_info, Mk <- Movie_keyword, K <- Keyword, N <- Name, T <- Title, (maps:get(movie_id, Ci) == maps:get(movie_id, Mk)), (maps:get(keyword_id, Mk) == maps:get(id, K)), (maps:get(person_id, Ci) == maps:get(id, N)), (maps:get(movie_id, Ci) == maps:get(id, T)), ((((maps:get(keyword, K) == "marvel-cinematic-universe") andalso (string:str(maps:get(name, N), "Downey") > 0)) andalso (string:str(maps:get(name, N), "Robert") > 0)) andalso (maps:get(production_year, T) > 2010))],
    mochi_json(Result),
    (case (Result == [#{movie_keyword => "marvel-cinematic-universe", actor_name => "Downey Robert Jr.", marvel_movie => "Iron Man 3"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
