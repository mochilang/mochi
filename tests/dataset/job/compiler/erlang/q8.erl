#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:39Z
% q8.erl - generated from q8.mochi

main(_) ->
    Aka_name = [#{person_id => 1, name => "Y. S."}],
    Cast_info = [#{person_id => 1, movie_id => 10, note => "(voice: English version)", role_id => 1000}],
    Company_name = [#{id => 50, country_code => "[jp]"}],
    Movie_companies = [#{movie_id => 10, company_id => 50, note => "Studio (Japan)"}],
    Name = [#{id => 1, name => "Yoko Ono"}, #{id => 2, name => "Yuichi"}],
    Role_type = [#{id => 1000, role => "actress"}],
    Title = [#{id => 10, title => "Dubbed Film"}],
    Eligible = [#{pseudonym => maps:get(name, An1), movie_title => maps:get(title, T)} || An1 <- Aka_name, N1 <- Name, Ci <- Cast_info, T <- Title, Mc <- Movie_companies, Cn <- Company_name, Rt <- Role_type, (maps:get(id, N1) == maps:get(person_id, An1)), (maps:get(person_id, Ci) == maps:get(person_id, An1)), (maps:get(id, T) == maps:get(movie_id, Ci)), (maps:get(movie_id, Mc) == maps:get(movie_id, Ci)), (maps:get(id, Cn) == maps:get(company_id, Mc)), (maps:get(id, Rt) == maps:get(role_id, Ci)), (((((((maps:get(note, Ci) == "(voice: English version)") andalso (maps:get(country_code, Cn) == "[jp]")) andalso (string:str(maps:get(note, Mc), "(Japan)") > 0)) andalso (not (string:str(maps:get(note, Mc), "(USA)") > 0))) andalso (string:str(maps:get(name, N1), "Yo") > 0)) andalso (not (string:str(maps:get(name, N1), "Yu") > 0))) andalso (maps:get(role, Rt) == "actress"))],
    Result = [#{actress_pseudonym => lists:min([maps:get(pseudonym, X) || X <- Eligible]), japanese_movie_dubbed => lists:min([maps:get(movie_title, X) || X <- Eligible])}],
    mochi_json(Result),
    (case (Result == [#{actress_pseudonym => "Y. S.", japanese_movie_dubbed => "Dubbed Film"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
