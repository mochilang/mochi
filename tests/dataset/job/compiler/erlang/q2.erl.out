#!/usr/bin/env escript
-module(main).
-export([main/1, test_q2_finds_earliest_title_for_german_companies_with_character_keyword/0]).

test_q2_finds_earliest_title_for_german_companies_with_character_keyword() ->
    mochi_expect((Result == "Der Film")).

main(_) ->
    Company_name = [#{id => 1, country_code => "[de]"}, #{id => 2, country_code => "[us]"}],
    Keyword = [#{id => 1, keyword => "character-name-in-title"}, #{id => 2, keyword => "other"}],
    Movie_companies = [#{movie_id => 100, company_id => 1}, #{movie_id => 200, company_id => 2}],
    Movie_keyword = [#{movie_id => 100, keyword_id => 1}, #{movie_id => 200, keyword_id => 2}],
    Title = [#{id => 100, title => "Der Film"}, #{id => 200, title => "Other Movie"}],
    Titles = [maps:get(title, T) || Cn <- Company_name, Mc <- Movie_companies, T <- Title, Mk <- Movie_keyword, K <- Keyword, (maps:get(company_id, Mc) == maps:get(id, Cn)), (maps:get(movie_id, Mc) == maps:get(id, T)), (maps:get(movie_id, Mk) == maps:get(id, T)), (maps:get(keyword_id, Mk) == maps:get(id, K)), (((maps:get(country_code, Cn) == "[de]") and (maps:get(keyword, K) == "character-name-in-title")) and (maps:get(movie_id, Mc) == maps:get(movie_id, Mk)))],
    Result = mochi_min(Titles),
    mochi_json(Result)
,
    mochi_run_test("Q2 finds earliest title for German companies with character keyword", fun test_q2_finds_earliest_title_for_german_companies_with_character_keyword/0).

mochi_min([]) -> 0;
mochi_min(M) when is_map(M) ->
    case maps:find('Items', M) of
        {ok, Items} -> mochi_min(Items);
        error -> erlang:error(badarg)
    end;
mochi_min(L) when is_list(L) -> lists:min(L);
mochi_min(_) -> erlang:error(badarg).


mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\\ -> "\\\\";
        $" -> "\\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s~n", [mochi_to_json(V)]).

mochi_expect(true) -> ok;
mochi_expect(_) -> erlang:error(expect_failed).

mochi_test_start(Name) -> io:format("   test ~s ...", [Name]).
mochi_test_pass(Dur) -> io:format(" ok (~p)~n", [Dur]).
mochi_test_fail(Err, Dur) -> io:format(" fail ~p (~p)~n", [Err, Dur]).

mochi_run_test(Name, Fun) ->
    mochi_test_start(Name),
    Start = erlang:monotonic_time(millisecond),
    try Fun() of _ ->
        Duration = erlang:monotonic_time(millisecond) - Start,
        mochi_test_pass(Duration)
    catch C:R ->
        Duration = erlang:monotonic_time(millisecond) - Start,
        mochi_test_fail({C,R}, Duration)
    end.
