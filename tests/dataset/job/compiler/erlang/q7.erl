#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:38Z
% q7.erl - generated from q7.mochi

main(_) ->
    Aka_name = [#{person_id => 1, name => "Anna Mae"}, #{person_id => 2, name => "Chris"}],
    Cast_info = [#{person_id => 1, movie_id => 10}, #{person_id => 2, movie_id => 20}],
    Info_type = [#{id => 1, info => "mini biography"}, #{id => 2, info => "trivia"}],
    Link_type = [#{id => 1, link => "features"}, #{id => 2, link => "references"}],
    Movie_link = [#{linked_movie_id => 10, link_type_id => 1}, #{linked_movie_id => 20, link_type_id => 2}],
    Name = [#{id => 1, name => "Alan Brown", name_pcode_cf => "B", gender => "m"}, #{id => 2, name => "Zoe", name_pcode_cf => "Z", gender => "f"}],
    Person_info = [#{person_id => 1, info_type_id => 1, note => "Volker Boehm"}, #{person_id => 2, info_type_id => 1, note => "Other"}],
    Title = [#{id => 10, title => "Feature Film", production_year => 1990}, #{id => 20, title => "Late Film", production_year => 2000}],
    Rows = [#{person_name => maps:get(name, N), movie_title => maps:get(title, T)} || An <- Aka_name, N <- Name, Pi <- Person_info, It <- Info_type, Ci <- Cast_info, T <- Title, Ml <- Movie_link, Lt <- Link_type, (maps:get(id, N) == maps:get(person_id, An)), (maps:get(person_id, Pi) == maps:get(person_id, An)), (maps:get(id, It) == maps:get(info_type_id, Pi)), (maps:get(person_id, Ci) == maps:get(id, N)), (maps:get(id, T) == maps:get(movie_id, Ci)), (maps:get(linked_movie_id, Ml) == maps:get(id, T)), (maps:get(id, Lt) == maps:get(link_type_id, Ml)), (case ((((((((((((((string:str(maps:get(name, An), "a") > 0) andalso (maps:get(info, It) == "mini biography")) andalso (maps:get(link, Lt) == "features")) andalso (maps:get(name_pcode_cf, N) >= "A")) andalso (maps:get(name_pcode_cf, N) =< "F")) andalso (((maps:get(gender, N) == "m") orelse (((maps:get(gender, N) == "f") andalso (string:prefix(maps:get(name, N), "B") /= nomatch)))))) andalso (maps:get(note, Pi) == "Volker Boehm")) andalso (maps:get(production_year, T) >= 1980)) andalso (maps:get(production_year, T) =< 1995)) andalso (maps:get(person_id, Pi) == maps:get(person_id, An))) andalso (maps:get(person_id, Pi) == maps:get(person_id, Ci))) andalso (maps:get(person_id, An) == maps:get(person_id, Ci))) andalso (maps:get(movie_id, Ci) == maps:get(linked_movie_id, Ml)))) of undefined -> false; false -> false; _ -> true end)],
    Result = [#{of_person => lists:min([maps:get(person_name, R) || R <- Rows]), biography_movie => lists:min([maps:get(movie_title, R) || R <- Rows])}],
    mochi_json(Result),
    (case (Result == [#{of_person => "Alan Brown", biography_movie => "Feature Film"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
