#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:36Z
% q3.erl - generated from q3.mochi

main(_) ->
    Keyword = [#{id => 1, keyword => "amazing sequel"}, #{id => 2, keyword => "prequel"}],
    Movie_info = [#{movie_id => 10, info => "Germany"}, #{movie_id => 30, info => "Sweden"}, #{movie_id => 20, info => "France"}],
    Movie_keyword = [#{movie_id => 10, keyword_id => 1}, #{movie_id => 30, keyword_id => 1}, #{movie_id => 20, keyword_id => 1}, #{movie_id => 10, keyword_id => 2}],
    Title = [#{id => 10, title => "Alpha", production_year => 2006}, #{id => 30, title => "Beta", production_year => 2008}, #{id => 20, title => "Gamma", production_year => 2009}],
    Allowed_infos = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"],
    Candidate_titles = [maps:get(title, T) || K <- Keyword, Mk <- Movie_keyword, Mi <- Movie_info, T <- Title, (maps:get(keyword_id, Mk) == maps:get(id, K)), (maps:get(movie_id, Mi) == maps:get(movie_id, Mk)), (maps:get(id, T) == maps:get(movie_id, Mi)), ((((string:str(maps:get(keyword, K), "sequel") > 0) andalso lists:member(maps:get(info, Mi), Allowed_infos)) andalso (maps:get(production_year, T) > 2005)) andalso (maps:get(movie_id, Mk) == maps:get(movie_id, Mi)))],
    Result = [#{movie_title => lists:min(Candidate_titles)}],
    mochi_json(Result),
    (case (Result == [#{movie_title => "Alpha"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
