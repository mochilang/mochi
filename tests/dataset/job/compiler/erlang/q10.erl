#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:40Z
% q10.erl - generated from q10.mochi

main(_) ->
    Char_name = [#{id => 1, name => "Ivan"}, #{id => 2, name => "Alex"}],
    Cast_info = [#{movie_id => 10, person_role_id => 1, role_id => 1, note => "Soldier (voice) (uncredited)"}, #{movie_id => 11, person_role_id => 2, role_id => 1, note => "(voice)"}],
    Company_name = [#{id => 1, country_code => "[ru]"}, #{id => 2, country_code => "[us]"}],
    Company_type = [#{id => 1}, #{id => 2}],
    Movie_companies = [#{movie_id => 10, company_id => 1, company_type_id => 1}, #{movie_id => 11, company_id => 2, company_type_id => 1}],
    Role_type = [#{id => 1, role => "actor"}, #{id => 2, role => "director"}],
    Title = [#{id => 10, title => "Vodka Dreams", production_year => 2006}, #{id => 11, title => "Other Film", production_year => 2004}],
    Matches = [#{character => maps:get(name, Chn), movie => maps:get(title, T)} || Chn <- Char_name, Ci <- Cast_info, Rt <- Role_type, T <- Title, Mc <- Movie_companies, Cn <- Company_name, Ct <- Company_type, (maps:get(id, Chn) == maps:get(person_role_id, Ci)), (maps:get(id, Rt) == maps:get(role_id, Ci)), (maps:get(id, T) == maps:get(movie_id, Ci)), (maps:get(movie_id, Mc) == maps:get(id, T)), (maps:get(id, Cn) == maps:get(company_id, Mc)), (maps:get(id, Ct) == maps:get(company_type_id, Mc)), (((((string:str(maps:get(note, Ci), "(voice)") > 0) andalso (string:str(maps:get(note, Ci), "(uncredited)") > 0)) andalso (maps:get(country_code, Cn) == "[ru]")) andalso (maps:get(role, Rt) == "actor")) andalso (maps:get(production_year, T) > 2005))],
    Result = [#{uncredited_voiced_character => lists:min([maps:get(character, X) || X <- Matches]), russian_movie => lists:min([maps:get(movie, X) || X <- Matches])}],
    mochi_json(Result),
    (case (Result == [#{uncredited_voiced_character => "Ivan", russian_movie => "Vodka Dreams"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
