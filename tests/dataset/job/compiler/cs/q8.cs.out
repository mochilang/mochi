// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "actress_pseudonym", "Y. S." }, { "japanese_movie_dubbed", "Dubbed Film" } } }));
    }

    public static void Main()
    {
        var aka_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "name", "Y. S." } } };
        var cast_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "movie_id", 10L }, { "note", "(voice: English version)" }, { "role_id", 1000L } } };
        var company_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 50L }, { "country_code", "[jp]" } } };
        var movie_companies = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 10L }, { "company_id", 50L }, { "note", "Studio (Japan)" } } };
        var name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "name", "Yoko Ono" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "name", "Yuichi" } } };
        var role_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1000L }, { "role", "actress" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "title", "Dubbed Film" } } };
        var eligible = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var an1 in aka_name)
            {
                foreach (var n1 in name)
                {
                    if (!((n1.id == an1.person_id))) continue;
                    if (!(Convert.ToString(n1.name).Contains("Yo"))) continue;
                    if (!(((!Convert.ToString(n1.name).Contains("Yu"))))) continue;
                    foreach (var ci in cast_info)
                    {
                        if (!((ci.person_id == an1.person_id))) continue;
                        if (!((ci.note == "(voice: English version)"))) continue;
                        foreach (var t in title)
                        {
                            if (!((t.id == ci.movie_id))) continue;
                            foreach (var mc in movie_companies)
                            {
                                if (!((mc.movie_id == ci.movie_id))) continue;
                                if (!(Convert.ToString(mc.note).Contains("(Japan)"))) continue;
                                if (!(((!Convert.ToString(mc.note).Contains("(USA)"))))) continue;
                                foreach (var cn in company_name)
                                {
                                    if (!((cn.id == mc.company_id))) continue;
                                    if (!((cn.country_code == "[jp]"))) continue;
                                    foreach (var rt in role_type)
                                    {
                                        if (!((rt.id == ci.role_id))) continue;
                                        if (!((rt.role == "actress"))) continue;
                                        _res.Add(new Dictionary<string, dynamic> { { "pseudonym", an1.name }, { "movie_title", t.title } });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "actress_pseudonym", _min(new List<dynamic>(eligible.Select(x => x.pseudonym))) }, { "japanese_movie_dubbed", _min(new List<dynamic>(eligible.Select(x => x.movie_title))) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing();
    }
    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
