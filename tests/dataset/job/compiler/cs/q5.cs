// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:21Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q5_finds_the_lexicographically_first_qualifying_title(dynamic result)
    {
        expect(_equal(result, new List<Item> { new Item { typical_european_movie = "A Film" } }));
    }

    static void Main()
    {
        var company_type = new List<CompanyType> { new CompanyType { ct_id = 1, kind = "production companies" }, new CompanyType { ct_id = 2, kind = "other" } };
        var info_type = new List<InfoType> { new InfoType { it_id = 10, info = "languages" } };
        var title = new List<Title> { new Title { t_id = 100, title = "B Movie", production_year = 2010 }, new Title { t_id = 200, title = "A Film", production_year = 2012 }, new Title { t_id = 300, title = "Old Movie", production_year = 2000 } };
        var movie_companies = new List<MovieCompanie> { new MovieCompanie { movie_id = 100, company_type_id = 1, note = "ACME (France) (theatrical)" }, new MovieCompanie { movie_id = 200, company_type_id = 1, note = "ACME (France) (theatrical)" }, new MovieCompanie { movie_id = 300, company_type_id = 1, note = "ACME (France) (theatrical)" } };
        var movie_info = new List<MovieInfo> { new MovieInfo { movie_id = 100, info = "German", info_type_id = 10 }, new MovieInfo { movie_id = 200, info = "Swedish", info_type_id = 10 }, new MovieInfo { movie_id = 300, info = "German", info_type_id = 10 } };
        var candidate_titles = (
    from ct in company_type
    join mc in movie_companies on mc["company_type_id"] equals ct["ct_id"]
    join mi in movie_info on mi["movie_id"] equals mc["movie_id"]
    join it in info_type on it["it_id"] equals mi["info_type_id"]
    join t in title on t["t_id"] equals mc["movie_id"]
    where (ct["kind"] == "production companies")
    select t["title"]
).ToList();
        var result = new List<Result> { new Result { typical_european_movie = Enumerable.Min(candidate_titles) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q5_finds_the_lexicographically_first_qualifying_title(result);
    }
    public class Item
    {
        public string typical_european_movie;
    }



    public class CompanyType
    {
        public int ct_id;
        public string kind;
    }




    public class InfoType
    {
        public int it_id;
        public string info;
    }



    public class Title
    {
        public int t_id;
        public string title;
        public int production_year;
    }





    public class MovieCompanie
    {
        public int movie_id;
        public int company_type_id;
        public string note;
    }





    public class MovieInfo
    {
        public int movie_id;
        public string info;
        public int info_type_id;
    }





    public class Result
    {
        public dynamic typical_european_movie;
    }



    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

}
