// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:27Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q6_finds_marvel_movie_with_Robert_Downey(dynamic result)
    {
        expect(_equal(result, new List<Item> { new Item { movie_keyword = "marvel-cinematic-universe", actor_name = "Downey Robert Jr.", marvel_movie = "Iron Man 3" } }));
    }

    static void Main()
    {
        List<Dictionary<string, int>> cast_info = new List<CastInfo> { new CastInfo { movie_id = 1, person_id = 101 }, new CastInfo { movie_id = 2, person_id = 102 } };
        var keyword = new List<Keyword> { new Keyword { id = 100, keyword = "marvel-cinematic-universe" }, new Keyword { id = 200, keyword = "other" } };
        List<Dictionary<string, int>> movie_keyword = new List<MovieKeyword> { new MovieKeyword { movie_id = 1, keyword_id = 100 }, new MovieKeyword { movie_id = 2, keyword_id = 200 } };
        var name = new List<Name> { new Name { id = 101, name = "Downey Robert Jr." }, new Name { id = 102, name = "Chris Evans" } };
        var title = new List<Title> { new Title { id = 1, title = "Iron Man 3", production_year = 2013 }, new Title { id = 2, title = "Old Movie", production_year = 2000 } };
        var result = (
    from ci in cast_info
    join mk in movie_keyword on ci["movie_id"] equals mk["movie_id"]
    join k in keyword on mk["keyword_id"] equals k["id"]
    join n in name on ci["person_id"] equals n["id"]
    join t in title on ci["movie_id"] equals t["id"]
    select new Result { movie_keyword = k["keyword"], actor_name = n["name"], marvel_movie = t["title"] }
).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q6_finds_marvel_movie_with_Robert_Downey(result);
    }
    public class Item
    {
        public string movie_keyword;
        public string actor_name;
        public string marvel_movie;
    }



    public class CastInfo
    {
        public int movie_id;
        public int person_id;
    }




    public class Keyword
    {
        public int id;
        public string keyword;
    }




    public class MovieKeyword
    {
        public int movie_id;
        public int keyword_id;
    }




    public class Name
    {
        public int id;
        public string name;
    }




    public class Title
    {
        public int id;
        public string title;
        public int production_year;
    }




    public class Result
    {
        public dynamic movie_keyword;
        public dynamic actor_name;
        public dynamic marvel_movie;
    }



    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
