// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q9_selects_minimal_alternative_name__character_and_movie()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "alternative_name", "A. N. G." }, { "character_name", "Angel" }, { "movie", "Famous Film" } } }));
    }

    public static void Main()
    {
        var aka_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "name", "A. N. G." } }, new Dictionary<string, dynamic> { { "person_id", 2L }, { "name", "J. D." } } };
        var char_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "name", "Angel" } }, new Dictionary<string, dynamic> { { "id", 20L }, { "name", "Devil" } } };
        var cast_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "person_role_id", 10L }, { "movie_id", 100L }, { "role_id", 1000L }, { "note", "(voice)" } }, new Dictionary<string, dynamic> { { "person_id", 2L }, { "person_role_id", 20L }, { "movie_id", 200L }, { "role_id", 1000L }, { "note", "(voice)" } } };
        var company_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 100L }, { "country_code", "[us]" } }, new Dictionary<string, dynamic> { { "id", 200L }, { "country_code", "[gb]" } } };
        var movie_companies = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 100L }, { "company_id", 100L }, { "note", "ACME Studios (USA)" } }, new Dictionary<string, dynamic> { { "movie_id", 200L }, { "company_id", 200L }, { "note", "Maple Films" } } };
        var name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "name", "Angela Smith" }, { "gender", "f" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "name", "John Doe" }, { "gender", "m" } } };
        var role_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1000L }, { "role", "actress" } }, new Dictionary<string, dynamic> { { "id", 2000L }, { "role", "actor" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 100L }, { "title", "Famous Film" }, { "production_year", 2010L } }, new Dictionary<string, dynamic> { { "id", 200L }, { "title", "Old Movie" }, { "production_year", 1999L } } };
        var matches = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var an in aka_name)
            {
                foreach (var n in name)
                {
                    if (!((an.person_id == n.id))) continue;
                    if (!((n.gender == "f"))) continue;
                    if (!(Convert.ToString(n.name).Contains("Ang"))) continue;
                    foreach (var ci in cast_info)
                    {
                        if (!((ci.person_id == n.id))) continue;
                        if (!((_in(ci.note, new string[] { "(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)" })))) continue;
                        foreach (var chn in char_name)
                        {
                            if (!((chn.id == ci.person_role_id))) continue;
                            foreach (var t in title)
                            {
                                if (!((t.id == ci.movie_id))) continue;
                                if (!((t.production_year >= 2005L))) continue;
                                if (!((t.production_year <= 2015L))) continue;
                                foreach (var mc in movie_companies)
                                {
                                    if (!((mc.movie_id == t.id))) continue;
                                    if (!(((Convert.ToString(mc.note).Contains("(USA)") || Convert.ToString(mc.note).Contains("(worldwide)"))))) continue;
                                    foreach (var cn in company_name)
                                    {
                                        if (!((cn.id == mc.company_id))) continue;
                                        if (!((cn.country_code == "[us]"))) continue;
                                        foreach (var rt in role_type)
                                        {
                                            if (!((rt.id == ci.role_id))) continue;
                                            if (!((rt.role == "actress"))) continue;
                                            _res.Add(new Dictionary<string, dynamic> { { "alt", an.name }, { "character", chn.name }, { "movie", t.title } });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "alternative_name", _min(new List<dynamic>(matches.Select(x => x.alt))) }, { "character_name", _min(new List<dynamic>(matches.Select(x => x.character))) }, { "movie", _min(new List<dynamic>(matches.Select(x => x.movie))) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q9_selects_minimal_alternative_name__character_and_movie();
    }
    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
