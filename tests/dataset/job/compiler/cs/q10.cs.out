// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q10_finds_uncredited_voice_actor_in_Russian_movie()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "uncredited_voiced_character", "Ivan" }, { "russian_movie", "Vodka Dreams" } } }));
    }

    public static void Main()
    {
        var char_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "name", "Ivan" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "name", "Alex" } } };
        var cast_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 10L }, { "person_role_id", 1L }, { "role_id", 1L }, { "note", "Soldier (voice) (uncredited)" } }, new Dictionary<string, dynamic> { { "movie_id", 11L }, { "person_role_id", 2L }, { "role_id", 1L }, { "note", "(voice)" } } };
        var company_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "country_code", "[ru]" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "country_code", "[us]" } } };
        Dictionary<string, long>[] company_type = new Dictionary<string, long>[] { new Dictionary<string, long> { { "id", 1L } }, new Dictionary<string, long> { { "id", 2L } } };
        Dictionary<string, long>[] movie_companies = new Dictionary<string, long>[] { new Dictionary<string, long> { { "movie_id", 10L }, { "company_id", 1L }, { "company_type_id", 1L } }, new Dictionary<string, long> { { "movie_id", 11L }, { "company_id", 2L }, { "company_type_id", 1L } } };
        var role_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "role", "actor" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "role", "director" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "title", "Vodka Dreams" }, { "production_year", 2006L } }, new Dictionary<string, dynamic> { { "id", 11L }, { "title", "Other Film" }, { "production_year", 2004L } } };
        var matches = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var chn in char_name)
            {
                foreach (var ci in cast_info)
                {
                    if (!((chn.id == ci.person_role_id))) continue;
                    if (!(Convert.ToString(ci.note).Contains("(voice)"))) continue;
                    if (!(Convert.ToString(ci.note).Contains("(uncredited)"))) continue;
                    foreach (var rt in role_type)
                    {
                        if (!((rt.id == ci.role_id))) continue;
                        if (!((rt.role == "actor"))) continue;
                        foreach (var t in title)
                        {
                            if (!((t.id == ci.movie_id))) continue;
                            if (!((t.production_year > 2005L))) continue;
                            foreach (var mc in movie_companies)
                            {
                                if (!((mc.movie_id == t.id))) continue;
                                foreach (var cn in company_name)
                                {
                                    if (!((cn.id == mc.company_id))) continue;
                                    if (!((cn.country_code == "[ru]"))) continue;
                                    foreach (var ct in company_type)
                                    {
                                        if (!((ct.id == mc.company_type_id))) continue;
                                        _res.Add(new Dictionary<string, dynamic> { { "character", chn.name }, { "movie", t.title } });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "uncredited_voiced_character", _min(new List<dynamic>(matches.Select(x => x.character))) }, { "russian_movie", _min(new List<dynamic>(matches.Select(x => x.movie))) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q10_finds_uncredited_voice_actor_in_Russian_movie();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

}
