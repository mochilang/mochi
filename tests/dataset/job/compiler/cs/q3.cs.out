// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q3_returns_lexicographically_smallest_sequel_title()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "movie_title", "Alpha" } } }));
    }

    public static void Main()
    {
        var keyword = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "keyword", "amazing sequel" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "keyword", "prequel" } } };
        var movie_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 10L }, { "info", "Germany" } }, new Dictionary<string, dynamic> { { "movie_id", 30L }, { "info", "Sweden" } }, new Dictionary<string, dynamic> { { "movie_id", 20L }, { "info", "France" } } };
        Dictionary<string, long>[] movie_keyword = new Dictionary<string, long>[] { new Dictionary<string, long> { { "movie_id", 10L }, { "keyword_id", 1L } }, new Dictionary<string, long> { { "movie_id", 30L }, { "keyword_id", 1L } }, new Dictionary<string, long> { { "movie_id", 20L }, { "keyword_id", 1L } }, new Dictionary<string, long> { { "movie_id", 10L }, { "keyword_id", 2L } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "title", "Alpha" }, { "production_year", 2006L } }, new Dictionary<string, dynamic> { { "id", 30L }, { "title", "Beta" }, { "production_year", 2008L } }, new Dictionary<string, dynamic> { { "id", 20L }, { "title", "Gamma" }, { "production_year", 2009L } } };
        string[] allowed_infos = new string[] { "Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German" };
        var candidate_titles = new Func<List<dynamic>>(() =>
        {
            var _res = new List<dynamic>();
            foreach (var k in keyword)
            {
                if (!(Convert.ToString(k.keyword).Contains("sequel"))) continue;
                foreach (var mk in movie_keyword)
                {
                    if (!((mk.keyword_id == k.id))) continue;
                    foreach (var mi in movie_info)
                    {
                        if (!((mi.movie_id == mk.movie_id))) continue;
                        foreach (var t in title)
                        {
                            if (!((t.id == mi.movie_id))) continue;
                            if (!((t.production_year > 2005L))) continue;
                            if (_in(mi.info, allowed_infos) && (mk.movie_id == mi.movie_id))
                            {
                                _res.Add(t.title);
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_title", _min(candidate_titles) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q3_returns_lexicographically_smallest_sequel_title();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

}
