// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q7_finds_movie_features_biography_for_person()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "of_person", "Alan Brown" }, { "biography_movie", "Feature Film" } } }));
    }

    public static void Main()
    {
        var aka_name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "name", "Anna Mae" } }, new Dictionary<string, dynamic> { { "person_id", 2L }, { "name", "Chris" } } };
        Dictionary<string, long>[] cast_info = new Dictionary<string, long>[] { new Dictionary<string, long> { { "person_id", 1L }, { "movie_id", 10L } }, new Dictionary<string, long> { { "person_id", 2L }, { "movie_id", 20L } } };
        var info_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "info", "mini biography" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "info", "trivia" } } };
        var link_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "link", "features" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "link", "references" } } };
        Dictionary<string, long>[] movie_link = new Dictionary<string, long>[] { new Dictionary<string, long> { { "linked_movie_id", 10L }, { "link_type_id", 1L } }, new Dictionary<string, long> { { "linked_movie_id", 20L }, { "link_type_id", 2L } } };
        var name = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "name", "Alan Brown" }, { "name_pcode_cf", "B" }, { "gender", "m" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "name", "Zoe" }, { "name_pcode_cf", "Z" }, { "gender", "f" } } };
        var person_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "person_id", 1L }, { "info_type_id", 1L }, { "note", "Volker Boehm" } }, new Dictionary<string, dynamic> { { "person_id", 2L }, { "info_type_id", 1L }, { "note", "Other" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "title", "Feature Film" }, { "production_year", 1990L } }, new Dictionary<string, dynamic> { { "id", 20L }, { "title", "Late Film" }, { "production_year", 2000L } } };
        var rows = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var an in aka_name)
            {
                foreach (var n in name)
                {
                    if (!((n.id == an.person_id))) continue;
                    foreach (var pi in person_info)
                    {
                        if (!((pi.person_id == an.person_id))) continue;
                        foreach (var it in info_type)
                        {
                            if (!((it.id == pi.info_type_id))) continue;
                            foreach (var ci in cast_info)
                            {
                                if (!((ci.person_id == n.id))) continue;
                                foreach (var t in title)
                                {
                                    if (!((t.id == ci.movie_id))) continue;
                                    foreach (var ml in movie_link)
                                    {
                                        if (!((ml.linked_movie_id == t.id))) continue;
                                        foreach (var lt in link_type)
                                        {
                                            if (!((lt.id == ml.link_type_id))) continue;
                                            if ((((((((((((((Convert.ToString(an.name).Contains("a") && (it.info == "mini biography")) && (lt.link == "features")) && (n.name_pcode_cf >= "A")) && (n.name_pcode_cf <= "F")) && (((n.gender == "m") || (((n.gender == "f") && n.name.starts_with("B")))))) && (pi.note == "Volker Boehm")) && (t.production_year >= 1980L)) && (t.production_year <= 1995L)) && (pi.person_id == an.person_id)) && (pi.person_id == ci.person_id)) && (an.person_id == ci.person_id)) && (ci.movie_id == ml.linked_movie_id))))
                                            {
                                                _res.Add(new Dictionary<string, dynamic> { { "person_name", n.name }, { "movie_title", t.title } });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "of_person", _min(new List<dynamic>(rows.Select(r => r.person_name))) }, { "biography_movie", _min(new List<dynamic>(rows.Select(r => r.movie_title))) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q7_finds_movie_features_biography_for_person();
    }
    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
