// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:39Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing(dynamic result)
    {
        expect(_equal(result, new List<Item> { new Item { actress_pseudonym = "Y. S.", japanese_movie_dubbed = "Dubbed Film" } }));
    }

    static void Main()
    {
        var aka_name = new List<AkaName> { new AkaName { person_id = 1, name = "Y. S." } };
        var cast_info = new List<CastInfo> { new CastInfo { person_id = 1, movie_id = 10, note = "(voice: English version)", role_id = 1000 } };
        var company_name = new List<CompanyName> { new CompanyName { id = 50, country_code = "[jp]" } };
        var movie_companies = new List<MovieCompanie> { new MovieCompanie { movie_id = 10, company_id = 50, note = "Studio (Japan)" } };
        var name = new List<Name> { new Name { id = 1, name = "Yoko Ono" }, new Name { id = 2, name = "Yuichi" } };
        var role_type = new List<RoleType> { new RoleType { id = 1000, role = "actress" } };
        var title = new List<Title> { new Title { id = 10, title = "Dubbed Film" } };
        var eligible = (
    from an1 in aka_name
    join n1 in name on n1["id"] equals an1["person_id"]
    join ci in cast_info on ci["person_id"] equals an1["person_id"]
    join t in title on t["id"] equals ci["movie_id"]
    join mc in movie_companies on mc["movie_id"] equals ci["movie_id"]
    join cn in company_name on cn["id"] equals mc["company_id"]
    join rt in role_type on rt["id"] equals ci["role_id"]
    select new Eligible { pseudonym = an1["name"], movie_title = t["title"] }
).ToList();
        var result = new List<Result> { new Result { actress_pseudonym = Enumerable.Min(eligible.Select(x => x["pseudonym"]).ToList()), japanese_movie_dubbed = Enumerable.Min(eligible.Select(x => x["movie_title"]).ToList()) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing(result);
    }
    public class Item
    {
        public string actress_pseudonym;
        public string japanese_movie_dubbed;
    }



    public class AkaName
    {
        public int person_id;
        public string name;
    }



    public class CastInfo
    {
        public int person_id;
        public int movie_id;
        public string note;
        public int role_id;
    }



    public class CompanyName
    {
        public int id;
        public string country_code;
    }



    public class MovieCompanie
    {
        public int movie_id;
        public int company_id;
        public string note;
    }



    public class Name
    {
        public int id;
        public string name;
    }




    public class RoleType
    {
        public int id;
        public string role;
    }



    public class Title
    {
        public int id;
        public string title;
    }



    public class Eligible
    {
        public dynamic pseudonym;
        public dynamic movie_title;
    }



    public class Result
    {
        public dynamic actress_pseudonym;
        public dynamic japanese_movie_dubbed;
    }



    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
