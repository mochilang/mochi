// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:04Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q2_finds_earliest_title_for_German_companies_with_character_keyword(dynamic result)
    {
        expect(_equal(result, "Der Film"));
    }

    static void Main()
    {
        var company_name = new List<CompanyName> { new CompanyName { id = 1, country_code = "[de]" }, new CompanyName { id = 2, country_code = "[us]" } };
        var keyword = new List<Keyword> { new Keyword { id = 1, keyword = "character-name-in-title" }, new Keyword { id = 2, keyword = "other" } };
        List<Dictionary<string, int>> movie_companies = new List<MovieCompanie> { new MovieCompanie { movie_id = 100, company_id = 1 }, new MovieCompanie { movie_id = 200, company_id = 2 } };
        List<Dictionary<string, int>> movie_keyword = new List<MovieKeyword> { new MovieKeyword { movie_id = 100, keyword_id = 1 }, new MovieKeyword { movie_id = 200, keyword_id = 2 } };
        var title = new List<Title> { new Title { id = 100, title = "Der Film" }, new Title { id = 200, title = "Other Movie" } };
        var titles = (
    from cn in company_name
    join mc in movie_companies on mc["company_id"] equals cn["id"]
    join t in title on mc["movie_id"] equals t["id"]
    join mk in movie_keyword on mk["movie_id"] equals t["id"]
    join k in keyword on mk["keyword_id"] equals k["id"]
    where (mc["movie_id"] == mk["movie_id"])
    select t["title"]
).ToList();
        var result = Enumerable.Min(titles);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q2_finds_earliest_title_for_German_companies_with_character_keyword(result);
    }
    public class CompanyName
    {
        public int id;
        public string country_code;
    }




    public class Keyword
    {
        public int id;
        public string keyword;
    }




    public class MovieCompanie
    {
        public int movie_id;
        public int company_id;
    }




    public class MovieKeyword
    {
        public int movie_id;
        public int keyword_id;
    }




    public class Title
    {
        public int id;
        public string title;
    }




    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
