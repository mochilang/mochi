// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:58Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production(dynamic result)
    {
        expect(_equal(result, new Item { production_note = "ACME (co-production)", movie_title = "Good Movie", movie_year = 1995 }));
    }

    static void Main()
    {
        var company_type = new List<CompanyType> { new CompanyType { id = 1, kind = "production companies" }, new CompanyType { id = 2, kind = "distributors" } };
        var info_type = new List<InfoType> { new InfoType { id = 10, info = "top 250 rank" }, new InfoType { id = 20, info = "bottom 10 rank" } };
        var title = new List<Title> { new Title { id = 100, title = "Good Movie", production_year = 1995 }, new Title { id = 200, title = "Bad Movie", production_year = 2000 } };
        var movie_companies = new List<MovieCompanie> { new MovieCompanie { movie_id = 100, company_type_id = 1, note = "ACME (co-production)" }, new MovieCompanie { movie_id = 200, company_type_id = 1, note = "MGM (as Metro-Goldwyn-Mayer Pictures)" } };
        List<Dictionary<string, int>> movie_info_idx = new List<MovieInfoIdx> { new MovieInfoIdx { movie_id = 100, info_type_id = 10 }, new MovieInfoIdx { movie_id = 200, info_type_id = 20 } };
        var filtered = (
    from ct in company_type
    join mc in movie_companies on ct["id"] equals mc["company_type_id"]
    join t in title on t["id"] equals mc["movie_id"]
    join mi in movie_info_idx on mi["movie_id"] equals t["id"]
    join it in info_type on it["id"] equals mi["info_type_id"]
    where (ct["kind"] == "production companies")
    select new Filtered { note = mc["note"], title = t["title"], year = t["production_year"] }
).ToList();
        var result = new Result { production_note = Enumerable.Min(filtered.Select(r => r["note"]).ToList()), movie_title = Enumerable.Min(filtered.Select(r => r["title"]).ToList()), movie_year = Enumerable.Min(filtered.Select(r => r["year"]).ToList()) };
        Console.WriteLine(JsonSerializer.Serialize(new List<Dictionary<string, dynamic>> { result }));
        test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production(result);
    }
    public class Item
    {
        public string production_note;
        public string movie_title;
        public int movie_year;
    }


    public class CompanyType
    {
        public int id;
        public string kind;
    }




    public class InfoType
    {
        public int id;
        public string info;
    }




    public class Title
    {
        public int id;
        public string title;
        public int production_year;
    }




    public class MovieCompanie
    {
        public int movie_id;
        public int company_type_id;
        public string note;
    }




    public class MovieInfoIdx
    {
        public int movie_id;
        public int info_type_id;
    }




    public class Filtered
    {
        public dynamic note;
        public dynamic title;
        public dynamic year;
    }



    public class Result
    {
        public dynamic production_note;
        public dynamic movie_title;
        public dynamic movie_year;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

}
