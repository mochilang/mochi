// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q4_returns_minimum_rating_and_title_for_sequels()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "rating", "6.2" }, { "movie_title", "Alpha Movie" } } }));
    }

    public static void Main()
    {
        var info_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "info", "rating" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "info", "other" } } };
        var keyword = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "keyword", "great sequel" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "keyword", "prequel" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "title", "Alpha Movie" }, { "production_year", 2006L } }, new Dictionary<string, dynamic> { { "id", 20L }, { "title", "Beta Film" }, { "production_year", 2007L } }, new Dictionary<string, dynamic> { { "id", 30L }, { "title", "Old Film" }, { "production_year", 2004L } } };
        Dictionary<string, long>[] movie_keyword = new Dictionary<string, long>[] { new Dictionary<string, long> { { "movie_id", 10L }, { "keyword_id", 1L } }, new Dictionary<string, long> { { "movie_id", 20L }, { "keyword_id", 1L } }, new Dictionary<string, long> { { "movie_id", 30L }, { "keyword_id", 1L } } };
        var movie_info_idx = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 10L }, { "info_type_id", 1L }, { "info", "6.2" } }, new Dictionary<string, dynamic> { { "movie_id", 20L }, { "info_type_id", 1L }, { "info", "7.8" } }, new Dictionary<string, dynamic> { { "movie_id", 30L }, { "info_type_id", 1L }, { "info", "4.5" } } };
        var rows = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var it in info_type)
            {
                if (!((it.info == "rating"))) continue;
                foreach (var mi in movie_info_idx)
                {
                    if (!((it.id == mi.info_type_id))) continue;
                    if (!((mi.info > "5.0"))) continue;
                    foreach (var t in title)
                    {
                        if (!((t.id == mi.movie_id))) continue;
                        if (!((t.production_year > 2005L))) continue;
                        foreach (var mk in movie_keyword)
                        {
                            if (!((mk.movie_id == t.id))) continue;
                            foreach (var k in keyword)
                            {
                                if (!((k.id == mk.keyword_id))) continue;
                                if (!(Convert.ToString(k.keyword).Contains("sequel"))) continue;
                                if ((mk.movie_id == mi.movie_id))
                                {
                                    _res.Add(new Dictionary<string, dynamic> { { "rating", mi.info }, { "title", t.title } });
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "rating", _min(new List<dynamic>(rows.Select(r => r.rating))) }, { "movie_title", _min(new List<dynamic>(rows.Select(r => r.title))) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q4_returns_minimum_rating_and_title_for_sequels();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

}
