// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q5_finds_the_lexicographically_first_qualifying_title()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "typical_european_movie", "A Film" } } }));
    }

    public static void Main()
    {
        var company_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ct_id", 1L }, { "kind", "production companies" } }, new Dictionary<string, dynamic> { { "ct_id", 2L }, { "kind", "other" } } };
        var info_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "it_id", 10L }, { "info", "languages" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "t_id", 100L }, { "title", "B Movie" }, { "production_year", 2010L } }, new Dictionary<string, dynamic> { { "t_id", 200L }, { "title", "A Film" }, { "production_year", 2012L } }, new Dictionary<string, dynamic> { { "t_id", 300L }, { "title", "Old Movie" }, { "production_year", 2000L } } };
        var movie_companies = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 100L }, { "company_type_id", 1L }, { "note", "ACME (France) (theatrical)" } }, new Dictionary<string, dynamic> { { "movie_id", 200L }, { "company_type_id", 1L }, { "note", "ACME (France) (theatrical)" } }, new Dictionary<string, dynamic> { { "movie_id", 300L }, { "company_type_id", 1L }, { "note", "ACME (France) (theatrical)" } } };
        var movie_info = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 100L }, { "info", "German" }, { "info_type_id", 10L } }, new Dictionary<string, dynamic> { { "movie_id", 200L }, { "info", "Swedish" }, { "info_type_id", 10L } }, new Dictionary<string, dynamic> { { "movie_id", 300L }, { "info", "German" }, { "info_type_id", 10L } } };
        var candidate_titles = new Func<List<dynamic>>(() =>
        {
            var _res = new List<dynamic>();
            foreach (var ct in company_type)
            {
                if (!((ct.kind == "production companies"))) continue;
                foreach (var mc in movie_companies)
                {
                    if (!((mc.company_type_id == ct.ct_id))) continue;
                    if (!(_in("(theatrical)", mc.note))) continue;
                    if (!(_in("(France)", mc.note))) continue;
                    foreach (var mi in movie_info)
                    {
                        if (!((mi.movie_id == mc.movie_id))) continue;
                        if (!((_in(mi.info, new string[] { "Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German" })))) continue;
                        foreach (var it in info_type)
                        {
                            if (!((it.it_id == mi.info_type_id))) continue;
                            foreach (var t in title)
                            {
                                if (!((t.t_id == mc.movie_id))) continue;
                                if (!((t.production_year > 2005L))) continue;
                                _res.Add(t.title);
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "typical_european_movie", _min(candidate_titles) } } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q5_finds_the_lexicographically_first_qualifying_title();
    }
    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
