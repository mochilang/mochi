// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:33Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_Q7_finds_movie_features_biography_for_person(dynamic result)
    {
        expect(_equal(result, new List<Item> { new Item { of_person = "Alan Brown", biography_movie = "Feature Film" } }));
    }

    static void Main()
    {
        var aka_name = new List<AkaName> { new AkaName { person_id = 1, name = "Anna Mae" }, new AkaName { person_id = 2, name = "Chris" } };
        List<Dictionary<string, int>> cast_info = new List<CastInfo> { new CastInfo { person_id = 1, movie_id = 10 }, new CastInfo { person_id = 2, movie_id = 20 } };
        var info_type = new List<InfoType> { new InfoType { id = 1, info = "mini biography" }, new InfoType { id = 2, info = "trivia" } };
        var link_type = new List<LinkType> { new LinkType { id = 1, link = "features" }, new LinkType { id = 2, link = "references" } };
        List<Dictionary<string, int>> movie_link = new List<MovieLink> { new MovieLink { linked_movie_id = 10, link_type_id = 1 }, new MovieLink { linked_movie_id = 20, link_type_id = 2 } };
        var name = new List<Name> { new Name { id = 1, name = "Alan Brown", name_pcode_cf = "B", gender = "m" }, new Name { id = 2, name = "Zoe", name_pcode_cf = "Z", gender = "f" } };
        var person_info = new List<PersonInfo> { new PersonInfo { person_id = 1, info_type_id = 1, note = "Volker Boehm" }, new PersonInfo { person_id = 2, info_type_id = 1, note = "Other" } };
        var title = new List<Title> { new Title { id = 10, title = "Feature Film", production_year = 1990 }, new Title { id = 20, title = "Late Film", production_year = 2000 } };
        var rows = (
    from an in aka_name
    join n in name on n["id"] equals an["person_id"]
    join pi in person_info on pi["person_id"] equals an["person_id"]
    join it in info_type on it["id"] equals pi["info_type_id"]
    join ci in cast_info on ci["person_id"] equals n["id"]
    join t in title on t["id"] equals ci["movie_id"]
    join ml in movie_link on ml["linked_movie_id"] equals t["id"]
    join lt in link_type on lt["id"] equals ml["link_type_id"]
    where (((((((((((((Convert.ToString(an["name"]).Contains("a") && (it["info"] == "mini biography")) && (lt["link"] == "features")) && (n["name_pcode_cf"] >= "A")) && (n["name_pcode_cf"] <= "F")) && (((n["gender"] == "m") || (((n["gender"] == "f") && n["name"].starts_with("B")))))) && (pi["note"] == "Volker Boehm")) && (t["production_year"] >= 1980)) && (t["production_year"] <= 1995)) && (pi["person_id"] == an["person_id"])) && (pi["person_id"] == ci["person_id"])) && (an["person_id"] == ci["person_id"])) && (ci["movie_id"] == ml["linked_movie_id"])))
    select new Row { person_name = n["name"], movie_title = t["title"] }
).ToList();
        var result = new List<Result> { new Result { of_person = Enumerable.Min(rows.Select(r => r["person_name"]).ToList()), biography_movie = Enumerable.Min(rows.Select(r => r["movie_title"]).ToList()) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_Q7_finds_movie_features_biography_for_person(result);
    }
    public class Item
    {
        public string of_person;
        public string biography_movie;
    }



    public class AkaName
    {
        public int person_id;
        public string name;
    }




    public class CastInfo
    {
        public int person_id;
        public int movie_id;
    }




    public class InfoType
    {
        public int id;
        public string info;
    }




    public class LinkType
    {
        public int id;
        public string link;
    }




    public class MovieLink
    {
        public int linked_movie_id;
        public int link_type_id;
    }




    public class Name
    {
        public int id;
        public string name;
        public string name_pcode_cf;
        public string gender;
    }




    public class PersonInfo
    {
        public int person_id;
        public int info_type_id;
        public string note;
    }




    public class Title
    {
        public int id;
        public string title;
        public int production_year;
    }




    public class Row
    {
        public dynamic person_name;
        public dynamic movie_title;
    }



    public class Result
    {
        public dynamic of_person;
        public dynamic biography_movie;
    }



    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
