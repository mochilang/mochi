// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()
    {
        expect((result == new Dictionary<string, dynamic> { { "production_note", "ACME (co-production)" }, { "movie_title", "Good Movie" }, { "movie_year", 1995L } }));
    }

    public static void Main()
    {
        var company_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "kind", "production companies" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "kind", "distributors" } } };
        var info_type = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 10L }, { "info", "top 250 rank" } }, new Dictionary<string, dynamic> { { "id", 20L }, { "info", "bottom 10 rank" } } };
        var title = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 100L }, { "title", "Good Movie" }, { "production_year", 1995L } }, new Dictionary<string, dynamic> { { "id", 200L }, { "title", "Bad Movie" }, { "production_year", 2000L } } };
        var movie_companies = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "movie_id", 100L }, { "company_type_id", 1L }, { "note", "ACME (co-production)" } }, new Dictionary<string, dynamic> { { "movie_id", 200L }, { "company_type_id", 1L }, { "note", "MGM (as Metro-Goldwyn-Mayer Pictures)" } } };
        Dictionary<string, long>[] movie_info_idx = new Dictionary<string, long>[] { new Dictionary<string, long> { { "movie_id", 100L }, { "info_type_id", 10L } }, new Dictionary<string, long> { { "movie_id", 200L }, { "info_type_id", 20L } } };
        var filtered = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var ct in company_type)
            {
                if (!((ct.kind == "production companies"))) continue;
                foreach (var mc in movie_companies)
                {
                    if (!((ct.id == mc.company_type_id))) continue;
                    if (!(((!Convert.ToString(mc.note).Contains("(as Metro-Goldwyn-Mayer Pictures)"))))) continue;
                    if (!(((Convert.ToString(mc.note).Contains("(co-production)") || Convert.ToString(mc.note).Contains("(presents)"))))) continue;
                    foreach (var t in title)
                    {
                        if (!((t.id == mc.movie_id))) continue;
                        foreach (var mi in movie_info_idx)
                        {
                            if (!((mi.movie_id == t.id))) continue;
                            foreach (var it in info_type)
                            {
                                if (!((it.id == mi.info_type_id))) continue;
                                if (!((it.info == "top 250 rank"))) continue;
                                _res.Add(new Dictionary<string, dynamic> { { "note", mc.note }, { "title", t.title }, { "year", t.production_year } });
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = new Dictionary<string, dynamic> { { "production_note", _min(new List<dynamic>(filtered.Select(r => r.note))) }, { "movie_title", _min(new List<dynamic>(filtered.Select(r => r.title))) }, { "movie_year", _min(new List<dynamic>(filtered.Select(r => r.year))) } };
        Console.WriteLine(JsonSerializer.Serialize(new Dictionary<string, dynamic>[] { result }));
        test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production();
    }
    static dynamic _min(dynamic v)
    {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext())
        {
            dynamic x = it.Current; if (cmp.Compare(x, m) < 0) m = x;
        }
        return m;
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
