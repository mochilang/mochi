(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q5_finds_the_lexicographically_first_qualifying_title)
  (when (not (equal? result (list (list (cons "typical_european_movie" "A Film"))))) (error "expect failed"))
)

(define company_type (list (list (cons "ct_id" 1) (cons "kind" "production companies")) (list (cons "ct_id" 2) (cons "kind" "other"))))
(define info_type (list (list (cons "it_id" 10) (cons "info" "languages"))))
(define title (list (list (cons "t_id" 100) (cons "title" "B Movie") (cons "production_year" 2010)) (list (cons "t_id" 200) (cons "title" "A Film") (cons "production_year" 2012)) (list (cons "t_id" 300) (cons "title" "Old Movie") (cons "production_year" 2000))))
(define movie_companies (list (list (cons "movie_id" 100) (cons "company_type_id" 1) (cons "note" "ACME (France) (theatrical)")) (list (cons "movie_id" 200) (cons "company_type_id" 1) (cons "note" "ACME (France) (theatrical)")) (list (cons "movie_id" 300) (cons "company_type_id" 1) (cons "note" "ACME (France) (theatrical)"))))
(define movie_info (list (list (cons "movie_id" 100) (cons "info" "German") (cons "info_type_id" 10)) (list (cons "movie_id" 200) (cons "info" "Swedish") (cons "info_type_id" 10)) (list (cons "movie_id" 300) (cons "info" "German") (cons "info_type_id" 10))))
(define candidate_titles (let ((_res '()))
  (for-each (lambda (ct)
    (for-each (lambda (mc)
      (when (equal? (map-get mc "company_type_id") (map-get ct "ct_id"))
        (for-each (lambda (mi)
          (when (equal? (map-get mi "movie_id") (map-get mc "movie_id"))
            (for-each (lambda (it)
              (when (equal? (map-get it "it_id") (map-get mi "info_type_id"))
                (for-each (lambda (t)
                  (when (equal? (map-get t "t_id") (map-get mc "movie_id"))
                    (when (and (> (and (if (member (and (if (member (and (equal? (map-get ct "kind") "production companies") "(theatrical)") (map-get mc "note")) #t #f) "(France)") (map-get mc "note")) #t #f) (map-get t "production_year")) 2005) (if (member (map-get mi "info") (list "Sweden" "Norway" "Germany" "Denmark" "Swedish" "Denish" "Norwegian" "German")) #t #f))
                      (set! _res (append _res (list (map-get t "title"))))
                    )
                  )) (if (string? title) (string->list title) title))
              )) (if (string? info_type) (string->list info_type) info_type))
          )) (if (string? movie_info) (string->list movie_info) movie_info))
      )) (if (string? movie_companies) (string->list movie_companies) movie_companies))
  ) (if (string? company_type) (string->list company_type) company_type))
  _res))
(define result (list (list (cons "typical_european_movie" (min candidate_titles)))))
(_json result)
(run-test "Q5 finds the lexicographically first qualifying title" test_Q5_finds_the_lexicographically_first_qualifying_title)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
