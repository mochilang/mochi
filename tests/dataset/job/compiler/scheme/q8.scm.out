(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)
  (when (not (equal? result (list (list (cons "actress_pseudonym" "Y. S.") (cons "japanese_movie_dubbed" "Dubbed Film"))))) (error "expect failed"))
)

(define aka_name (list (list (cons "person_id" 1) (cons "name" "Y. S."))))
(define cast_info (list (list (cons "person_id" 1) (cons "movie_id" 10) (cons "note" "(voice: English version)") (cons "role_id" 1000))))
(define company_name (list (list (cons "id" 50) (cons "country_code" "[jp]"))))
(define movie_companies (list (list (cons "movie_id" 10) (cons "company_id" 50) (cons "note" "Studio (Japan)"))))
(define name (list (list (cons "id" 1) (cons "name" "Yoko Ono")) (list (cons "id" 2) (cons "name" "Yuichi"))))
(define role_type (list (list (cons "id" 1000) (cons "role" "actress"))))
(define title (list (list (cons "id" 10) (cons "title" "Dubbed Film"))))
(define eligible (let ((_res '()))
  (for-each (lambda (an1)
    (for-each (lambda (n1)
      (when (equal? (map-get n1 "id") (map-get an1 "person_id"))
        (for-each (lambda (ci)
          (when (equal? (map-get ci "person_id") (map-get an1 "person_id"))
            (for-each (lambda (t)
              (when (equal? (map-get t "id") (map-get ci "movie_id"))
                (for-each (lambda (mc)
                  (when (equal? (map-get mc "movie_id") (map-get ci "movie_id"))
                    (for-each (lambda (cn)
                      (when (equal? (map-get cn "id") (map-get mc "company_id"))
                        (for-each (lambda (rt)
                          (when (equal? (map-get rt "id") (map-get ci "role_id"))
                            (when (equal? (and (and (and (and (and (equal? (and (equal? (map-get ci "note") "(voice: English version)") (map-get cn "country_code")) "[jp]") (if (string-contains (map-get mc "note") "(Japan)") #t #f)) (not (if (string-contains (map-get mc "note") "(USA)") #t #f))) (if (string-contains (map-get n1 "name") "Yo") #t #f)) (not (if (string-contains (map-get n1 "name") "Yu") #t #f))) (map-get rt "role")) "actress")
                              (set! _res (append _res (list (list (cons "pseudonym" (map-get an1 "name")) (cons "movie_title" (map-get t "title"))))))
                            )
                          )) (if (string? role_type) (string->list role_type) role_type))
                      )) (if (string? company_name) (string->list company_name) company_name))
                  )) (if (string? movie_companies) (string->list movie_companies) movie_companies))
              )) (if (string? title) (string->list title) title))
          )) (if (string? cast_info) (string->list cast_info) cast_info))
      )) (if (string? name) (string->list name) name))
  ) (if (string? aka_name) (string->list aka_name) aka_name))
  _res))
(define result (list (list (cons "actress_pseudonym" (min (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "pseudonym"))))
  ) (if (string? eligible) (string->list eligible) eligible))
  _res))) (cons "japanese_movie_dubbed" (min (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "movie_title"))))
  ) (if (string? eligible) (string->list eligible) eligible))
  _res))))))
(_json result)
(run-test "Q8 returns the pseudonym and movie title for Japanese dubbing" test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
