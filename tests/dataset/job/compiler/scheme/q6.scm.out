(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q6_finds_marvel_movie_with_Robert_Downey)
  (when (not (equal? result (list (list (cons "movie_keyword" "marvel-cinematic-universe") (cons "actor_name" "Downey Robert Jr.") (cons "marvel_movie" "Iron Man 3"))))) (error "expect failed"))
)

(define cast_info (list (list (cons "movie_id" 1) (cons "person_id" 101)) (list (cons "movie_id" 2) (cons "person_id" 102))))
(define keyword (list (list (cons "id" 100) (cons "keyword" "marvel-cinematic-universe")) (list (cons "id" 200) (cons "keyword" "other"))))
(define movie_keyword (list (list (cons "movie_id" 1) (cons "keyword_id" 100)) (list (cons "movie_id" 2) (cons "keyword_id" 200))))
(define name (list (list (cons "id" 101) (cons "name" "Downey Robert Jr.")) (list (cons "id" 102) (cons "name" "Chris Evans"))))
(define title (list (list (cons "id" 1) (cons "title" "Iron Man 3") (cons "production_year" 2013)) (list (cons "id" 2) (cons "title" "Old Movie") (cons "production_year" 2000))))
(define result (let ((_res '()))
  (for-each (lambda (ci)
    (for-each (lambda (mk)
      (when (equal? (map-get ci "movie_id") (map-get mk "movie_id"))
        (for-each (lambda (k)
          (when (equal? (map-get mk "keyword_id") (map-get k "id"))
            (for-each (lambda (n)
              (when (equal? (map-get ci "person_id") (map-get n "id"))
                (for-each (lambda (t)
                  (when (equal? (map-get ci "movie_id") (map-get t "id"))
                    (when (> (and (and (and (equal? (map-get k "keyword") "marvel-cinematic-universe") (if (string-contains (map-get n "name") "Downey") #t #f)) (if (string-contains (map-get n "name") "Robert") #t #f)) (map-get t "production_year")) 2010)
                      (set! _res (append _res (list (list (cons "movie_keyword" (map-get k "keyword")) (cons "actor_name" (map-get n "name")) (cons "marvel_movie" (map-get t "title"))))))
                    )
                  )) (if (string? title) (string->list title) title))
              )) (if (string? name) (string->list name) name))
          )) (if (string? keyword) (string->list keyword) keyword))
      )) (if (string? movie_keyword) (string->list movie_keyword) movie_keyword))
  ) (if (string? cast_info) (string->list cast_info) cast_info))
  _res))
(_json result)
(run-test "Q6 finds marvel movie with Robert Downey" test_Q6_finds_marvel_movie_with_Robert_Downey)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
