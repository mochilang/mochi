; Generated by Mochi compiler v0.10.25 on 2025-07-13T13:08:15Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))
(import (chibi string))
(define (_json v)
  (cond
    ;; list of objects
    ((and (list? v) (pair? v) (pair? (car v)) (pair? (caar v)))
     (display "[")
     (let loop ((xs v) (first #t))
       (unless (null? xs)
         (unless first (display ","))
         (display (json->string (car xs)))
         (loop (cdr xs) #f)))
     (display "]"))
    ;; single object or other value
    (else
     (display (json->string v))))
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q6_finds_marvel_movie_with_Robert_Downey)
  (when (not (equal? result (list (list (cons 'movie_keyword "marvel-cinematic-universe") (cons 'actor_name "Downey Robert Jr.") (cons 'marvel_movie "Iron Man 3"))))) (error "expect failed"))
)

(define cast_info (list (list (cons 'movie_id 1) (cons 'person_id 101)) (list (cons 'movie_id 2) (cons 'person_id 102))))
(define keyword (list (list (cons 'id 100) (cons 'keyword "marvel-cinematic-universe")) (list (cons 'id 200) (cons 'keyword "other"))))
(define movie_keyword (list (list (cons 'movie_id 1) (cons 'keyword_id 100)) (list (cons 'movie_id 2) (cons 'keyword_id 200))))
(define name (list (list (cons 'id 101) (cons 'name "Downey Robert Jr.")) (list (cons 'id 102) (cons 'name "Chris Evans"))))
(define title (list (list (cons 'id 1) (cons 'title "Iron Man 3") (cons 'production_year 2013)) (list (cons 'id 2) (cons 'title "Old Movie") (cons 'production_year 2000))))
(define result (let ((_res '()))
  (for-each (lambda (ci)
    (for-each (lambda (mk)
      (when (equal? (map-get ci 'movie_id) (map-get mk 'movie_id))
        (for-each (lambda (k)
          (when (equal? (map-get mk 'keyword_id) (map-get k 'id))
            (for-each (lambda (n)
              (when (equal? (map-get ci 'person_id) (map-get n 'id))
                (for-each (lambda (t)
                  (when (equal? (map-get ci 'movie_id) (map-get t 'id))
                    (when (and (and (and (equal? (map-get k 'keyword) "marvel-cinematic-universe") (if (string-contains (map-get n 'name) "Downey") #t #f)) (if (string-contains (map-get n 'name) "Robert") #t #f)) (_gt (map-get t 'production_year) 2010))
                      (set! _res (append _res (list (list (cons 'movie_keyword (map-get k 'keyword)) (cons 'actor_name (map-get n 'name)) (cons 'marvel_movie (map-get t 'title))))))
                    )
                  )) (if (string? title) (string->list title) title))
              )) (if (string? name) (string->list name) name))
          )) (if (string? keyword) (string->list keyword) keyword))
      )) (if (string? movie_keyword) (string->list movie_keyword) movie_keyword))
  ) (if (string? cast_info) (string->list cast_info) cast_info))
  _res))
(_json result)
(run-test "Q6 finds marvel movie with Robert Downey" test_Q6_finds_marvel_movie_with_Robert_Downey)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
