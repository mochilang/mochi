(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q2_finds_earliest_title_for_German_companies_with_character_keyword)
  (when (not (equal? result "Der Film")) (error "expect failed"))
)

(define company_name (list (list (cons "id" 1) (cons "country_code" "[de]")) (list (cons "id" 2) (cons "country_code" "[us]"))))
(define keyword (list (list (cons "id" 1) (cons "keyword" "character-name-in-title")) (list (cons "id" 2) (cons "keyword" "other"))))
(define movie_companies (list (list (cons "movie_id" 100) (cons "company_id" 1)) (list (cons "movie_id" 200) (cons "company_id" 2))))
(define movie_keyword (list (list (cons "movie_id" 100) (cons "keyword_id" 1)) (list (cons "movie_id" 200) (cons "keyword_id" 2))))
(define title (list (list (cons "id" 100) (cons "title" "Der Film")) (list (cons "id" 200) (cons "title" "Other Movie"))))
(define titles (let ((_res '()))
  (for-each (lambda (cn)
    (for-each (lambda (mc)
      (when (equal? (map-get mc "company_id") (map-get cn "id"))
        (for-each (lambda (t)
          (when (equal? (map-get mc "movie_id") (map-get t "id"))
            (for-each (lambda (mk)
              (when (equal? (map-get mk "movie_id") (map-get t "id"))
                (for-each (lambda (k)
                  (when (equal? (map-get mk "keyword_id") (map-get k "id"))
                    (when (equal? (and (equal? (and (equal? (map-get cn "country_code") "[de]") (map-get k "keyword")) "character-name-in-title") (map-get mc "movie_id")) (map-get mk "movie_id"))
                      (set! _res (append _res (list (map-get t "title"))))
                    )
                  )) (if (string? keyword) (string->list keyword) keyword))
              )) (if (string? movie_keyword) (string->list movie_keyword) movie_keyword))
          )) (if (string? title) (string->list title) title))
      )) (if (string? movie_companies) (string->list movie_companies) movie_companies))
  ) (if (string? company_name) (string->list company_name) company_name))
  _res))
(define result (min titles))
(_json result)
(run-test "Q2 finds earliest title for German companies with character keyword" test_Q2_finds_earliest_title_for_German_companies_with_character_keyword)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
