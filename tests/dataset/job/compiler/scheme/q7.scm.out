(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q7_finds_movie_features_biography_for_person)
  (when (not (equal? result (list (list (cons "of_person" "Alan Brown") (cons "biography_movie" "Feature Film"))))) (error "expect failed"))
)

(define aka_name (list (list (cons "person_id" 1) (cons "name" "Anna Mae")) (list (cons "person_id" 2) (cons "name" "Chris"))))
(define cast_info (list (list (cons "person_id" 1) (cons "movie_id" 10)) (list (cons "person_id" 2) (cons "movie_id" 20))))
(define info_type (list (list (cons "id" 1) (cons "info" "mini biography")) (list (cons "id" 2) (cons "info" "trivia"))))
(define link_type (list (list (cons "id" 1) (cons "link" "features")) (list (cons "id" 2) (cons "link" "references"))))
(define movie_link (list (list (cons "linked_movie_id" 10) (cons "link_type_id" 1)) (list (cons "linked_movie_id" 20) (cons "link_type_id" 2))))
(define name (list (list (cons "id" 1) (cons "name" "Alan Brown") (cons "name_pcode_cf" "B") (cons "gender" "m")) (list (cons "id" 2) (cons "name" "Zoe") (cons "name_pcode_cf" "Z") (cons "gender" "f"))))
(define person_info (list (list (cons "person_id" 1) (cons "info_type_id" 1) (cons "note" "Volker Boehm")) (list (cons "person_id" 2) (cons "info_type_id" 1) (cons "note" "Other"))))
(define title (list (list (cons "id" 10) (cons "title" "Feature Film") (cons "production_year" 1990)) (list (cons "id" 20) (cons "title" "Late Film") (cons "production_year" 2000))))
(define rows (let ((_res '()))
  (for-each (lambda (an)
    (for-each (lambda (n)
      (when (equal? (map-get n "id") (map-get an "person_id"))
        (for-each (lambda (pi)
          (when (equal? (map-get pi "person_id") (map-get an "person_id"))
            (for-each (lambda (it)
              (when (equal? (map-get it "id") (map-get pi "info_type_id"))
                (for-each (lambda (ci)
                  (when (equal? (map-get ci "person_id") (map-get n "id"))
                    (for-each (lambda (t)
                      (when (equal? (map-get t "id") (map-get ci "movie_id"))
                        (for-each (lambda (ml)
                          (when (equal? (map-get ml "linked_movie_id") (map-get t "id"))
                            (for-each (lambda (lt)
                              (when (equal? (map-get lt "id") (map-get ml "link_type_id"))
                                (when (equal? (and (equal? (and (equal? (and (equal? (and (<= (and (>= (and (equal? (and (and (<= (and (>= (and (equal? (and (equal? (and (if (string-contains (map-get an "name") "a") #t #f) (map-get it "info")) "mini biography") (map-get lt "link")) "features") (map-get n "name_pcode_cf")) "A") (map-get n "name_pcode_cf")) "F") (or (equal? (map-get n "gender") "m") (and (equal? (map-get n "gender") "f") ((map-get (map-get n "name") "starts_with") "B")))) (map-get pi "note")) "Volker Boehm") (map-get t "production_year")) 1980) (map-get t "production_year")) 1995) (map-get pi "person_id")) (map-get an "person_id")) (map-get pi "person_id")) (map-get ci "person_id")) (map-get an "person_id")) (map-get ci "person_id")) (map-get ci "movie_id")) (map-get ml "linked_movie_id"))
                                  (set! _res (append _res (list (list (cons "person_name" (map-get n "name")) (cons "movie_title" (map-get t "title"))))))
                                )
                              )) (if (string? link_type) (string->list link_type) link_type))
                          )) (if (string? movie_link) (string->list movie_link) movie_link))
                      )) (if (string? title) (string->list title) title))
                  )) (if (string? cast_info) (string->list cast_info) cast_info))
              )) (if (string? info_type) (string->list info_type) info_type))
          )) (if (string? person_info) (string->list person_info) person_info))
      )) (if (string? name) (string->list name) name))
  ) (if (string? aka_name) (string->list aka_name) aka_name))
  _res))
(define result (list (list (cons "of_person" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "person_name"))))
  ) (if (string? rows) (string->list rows) rows))
  _res))) (cons "biography_movie" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "movie_title"))))
  ) (if (string? rows) (string->list rows) rows))
  _res))))))
(_json result)
(run-test "Q7 finds movie features biography for person" test_Q7_finds_movie_features_biography_for_person)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
