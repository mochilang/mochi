(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q4_returns_minimum_rating_and_title_for_sequels)
  (when (not (equal? result (list (list (cons "rating" "6.2") (cons "movie_title" "Alpha Movie"))))) (error "expect failed"))
)

(define info_type (list (list (cons "id" 1) (cons "info" "rating")) (list (cons "id" 2) (cons "info" "other"))))
(define keyword (list (list (cons "id" 1) (cons "keyword" "great sequel")) (list (cons "id" 2) (cons "keyword" "prequel"))))
(define title (list (list (cons "id" 10) (cons "title" "Alpha Movie") (cons "production_year" 2006)) (list (cons "id" 20) (cons "title" "Beta Film") (cons "production_year" 2007)) (list (cons "id" 30) (cons "title" "Old Film") (cons "production_year" 2004))))
(define movie_keyword (list (list (cons "movie_id" 10) (cons "keyword_id" 1)) (list (cons "movie_id" 20) (cons "keyword_id" 1)) (list (cons "movie_id" 30) (cons "keyword_id" 1))))
(define movie_info_idx (list (list (cons "movie_id" 10) (cons "info_type_id" 1) (cons "info" "6.2")) (list (cons "movie_id" 20) (cons "info_type_id" 1) (cons "info" "7.8")) (list (cons "movie_id" 30) (cons "info_type_id" 1) (cons "info" "4.5"))))
(define rows (let ((_res '()))
  (for-each (lambda (it)
    (for-each (lambda (mi)
      (when (equal? (map-get it "id") (map-get mi "info_type_id"))
        (for-each (lambda (t)
          (when (equal? (map-get t "id") (map-get mi "movie_id"))
            (for-each (lambda (mk)
              (when (equal? (map-get mk "movie_id") (map-get t "id"))
                (for-each (lambda (k)
                  (when (equal? (map-get k "id") (map-get mk "keyword_id"))
                    (when (equal? (and (> (and (> (and (and (equal? (map-get it "info") "rating") (if (string-contains (map-get k "keyword") "sequel") #t #f)) (map-get mi "info")) "5.0") (map-get t "production_year")) 2005) (map-get mk "movie_id")) (map-get mi "movie_id"))
                      (set! _res (append _res (list (list (cons "rating" (map-get mi "info")) (cons "title" (map-get t "title"))))))
                    )
                  )) (if (string? keyword) (string->list keyword) keyword))
              )) (if (string? movie_keyword) (string->list movie_keyword) movie_keyword))
          )) (if (string? title) (string->list title) title))
      )) (if (string? movie_info_idx) (string->list movie_info_idx) movie_info_idx))
  ) (if (string? info_type) (string->list info_type) info_type))
  _res))
(define result (list (list (cons "rating" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "rating"))))
  ) (if (string? rows) (string->list rows) rows))
  _res))) (cons "movie_title" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "title"))))
  ) (if (string? rows) (string->list rows) rows))
  _res))))))
(_json result)
(run-test "Q4 returns minimum rating and title for sequels" test_Q4_returns_minimum_rating_and_title_for_sequels)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
