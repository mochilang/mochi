(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q9_selects_minimal_alternative_name__character_and_movie)
  (when (not (equal? result (list (list (cons "alternative_name" "A. N. G.") (cons "character_name" "Angel") (cons "movie" "Famous Film"))))) (error "expect failed"))
)

(define aka_name (list (list (cons "person_id" 1) (cons "name" "A. N. G.")) (list (cons "person_id" 2) (cons "name" "J. D."))))
(define char_name (list (list (cons "id" 10) (cons "name" "Angel")) (list (cons "id" 20) (cons "name" "Devil"))))
(define cast_info (list (list (cons "person_id" 1) (cons "person_role_id" 10) (cons "movie_id" 100) (cons "role_id" 1000) (cons "note" "(voice)")) (list (cons "person_id" 2) (cons "person_role_id" 20) (cons "movie_id" 200) (cons "role_id" 1000) (cons "note" "(voice)"))))
(define company_name (list (list (cons "id" 100) (cons "country_code" "[us]")) (list (cons "id" 200) (cons "country_code" "[gb]"))))
(define movie_companies (list (list (cons "movie_id" 100) (cons "company_id" 100) (cons "note" "ACME Studios (USA)")) (list (cons "movie_id" 200) (cons "company_id" 200) (cons "note" "Maple Films"))))
(define name (list (list (cons "id" 1) (cons "name" "Angela Smith") (cons "gender" "f")) (list (cons "id" 2) (cons "name" "John Doe") (cons "gender" "m"))))
(define role_type (list (list (cons "id" 1000) (cons "role" "actress")) (list (cons "id" 2000) (cons "role" "actor"))))
(define title (list (list (cons "id" 100) (cons "title" "Famous Film") (cons "production_year" 2010)) (list (cons "id" 200) (cons "title" "Old Movie") (cons "production_year" 1999))))
(define matches (let ((_res '()))
  (for-each (lambda (an)
    (for-each (lambda (n)
      (when (equal? (map-get an "person_id") (map-get n "id"))
        (for-each (lambda (ci)
          (when (equal? (map-get ci "person_id") (map-get n "id"))
            (for-each (lambda (chn)
              (when (equal? (map-get chn "id") (map-get ci "person_role_id"))
                (for-each (lambda (t)
                  (when (equal? (map-get t "id") (map-get ci "movie_id"))
                    (for-each (lambda (mc)
                      (when (equal? (map-get mc "movie_id") (map-get t "id"))
                        (for-each (lambda (cn)
                          (when (equal? (map-get cn "id") (map-get mc "company_id"))
                            (for-each (lambda (rt)
                              (when (equal? (map-get rt "id") (map-get ci "role_id"))
                                (when (<= (and (>= (and (equal? (and (and (equal? (and (and (equal? (and (if (member (map-get ci "note") (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)")) #t #f) (map-get cn "country_code")) "[us]") (or (if (string-contains (map-get mc "note") "(USA)") #t #f) (if (string-contains (map-get mc "note") "(worldwide)") #t #f))) (map-get n "gender")) "f") (if (string-contains (map-get n "name") "Ang") #t #f)) (map-get rt "role")) "actress") (map-get t "production_year")) 2005) (map-get t "production_year")) 2015)
                                  (set! _res (append _res (list (list (cons "alt" (map-get an "name")) (cons "character" (map-get chn "name")) (cons "movie" (map-get t "title"))))))
                                )
                              )) (if (string? role_type) (string->list role_type) role_type))
                          )) (if (string? company_name) (string->list company_name) company_name))
                      )) (if (string? movie_companies) (string->list movie_companies) movie_companies))
                  )) (if (string? title) (string->list title) title))
              )) (if (string? char_name) (string->list char_name) char_name))
          )) (if (string? cast_info) (string->list cast_info) cast_info))
      )) (if (string? name) (string->list name) name))
  ) (if (string? aka_name) (string->list aka_name) aka_name))
  _res))
(define result (list (list (cons "alternative_name" (min (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "alt"))))
  ) (if (string? matches) (string->list matches) matches))
  _res))) (cons "character_name" (min (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "character"))))
  ) (if (string? matches) (string->list matches) matches))
  _res))) (cons "movie" (min (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "movie"))))
  ) (if (string? matches) (string->list matches) matches))
  _res))))))
(_json result)
(run-test "Q9 selects minimal alternative name, character and movie" test_Q9_selects_minimal_alternative_name__character_and_movie)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
