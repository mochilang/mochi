(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production)
  (when (not (equal? result (list (cons "production_note" "ACME (co-production)") (cons "movie_title" "Good Movie") (cons "movie_year" 1995)))) (error "expect failed"))
)

(define company_type (list (list (cons "id" 1) (cons "kind" "production companies")) (list (cons "id" 2) (cons "kind" "distributors"))))
(define info_type (list (list (cons "id" 10) (cons "info" "top 250 rank")) (list (cons "id" 20) (cons "info" "bottom 10 rank"))))
(define title (list (list (cons "id" 100) (cons "title" "Good Movie") (cons "production_year" 1995)) (list (cons "id" 200) (cons "title" "Bad Movie") (cons "production_year" 2000))))
(define movie_companies (list (list (cons "movie_id" 100) (cons "company_type_id" 1) (cons "note" "ACME (co-production)")) (list (cons "movie_id" 200) (cons "company_type_id" 1) (cons "note" "MGM (as Metro-Goldwyn-Mayer Pictures)"))))
(define movie_info_idx (list (list (cons "movie_id" 100) (cons "info_type_id" 10)) (list (cons "movie_id" 200) (cons "info_type_id" 20))))
(define filtered (let ((_res '()))
  (for-each (lambda (ct)
    (for-each (lambda (mc)
      (when (equal? (map-get ct "id") (map-get mc "company_type_id"))
        (for-each (lambda (t)
          (when (equal? (map-get t "id") (map-get mc "movie_id"))
            (for-each (lambda (mi)
              (when (equal? (map-get mi "movie_id") (map-get t "id"))
                (for-each (lambda (it)
                  (when (equal? (map-get it "id") (map-get mi "info_type_id"))
                    (when (and (and (equal? (and (equal? (map-get ct "kind") "production companies") (map-get it "info")) "top 250 rank") (not (if (string-contains (map-get mc "note") "(as Metro-Goldwyn-Mayer Pictures)") #t #f))) (or (if (string-contains (map-get mc "note") "(co-production)") #t #f) (if (string-contains (map-get mc "note") "(presents)") #t #f)))
                      (set! _res (append _res (list (list (cons "note" (map-get mc "note")) (cons "title" (map-get t "title")) (cons "year" (map-get t "production_year"))))))
                    )
                  )) (if (string? info_type) (string->list info_type) info_type))
              )) (if (string? movie_info_idx) (string->list movie_info_idx) movie_info_idx))
          )) (if (string? title) (string->list title) title))
      )) (if (string? movie_companies) (string->list movie_companies) movie_companies))
  ) (if (string? company_type) (string->list company_type) company_type))
  _res))
(define result (list (cons "production_note" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "note"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res))) (cons "movie_title" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "title"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res))) (cons "movie_year" (min (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "year"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res)))))
(_json (list result))
(run-test "Q1 returns min note, title and year for top ranked co-production" test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
