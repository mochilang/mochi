(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (chibi string))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_Q3_returns_lexicographically_smallest_sequel_title)
  (when (not (equal? result (list (list (cons "movie_title" "Alpha"))))) (error "expect failed"))
)

(define keyword (list (list (cons "id" 1) (cons "keyword" "amazing sequel")) (list (cons "id" 2) (cons "keyword" "prequel"))))
(define movie_info (list (list (cons "movie_id" 10) (cons "info" "Germany")) (list (cons "movie_id" 30) (cons "info" "Sweden")) (list (cons "movie_id" 20) (cons "info" "France"))))
(define movie_keyword (list (list (cons "movie_id" 10) (cons "keyword_id" 1)) (list (cons "movie_id" 30) (cons "keyword_id" 1)) (list (cons "movie_id" 20) (cons "keyword_id" 1)) (list (cons "movie_id" 10) (cons "keyword_id" 2))))
(define title (list (list (cons "id" 10) (cons "title" "Alpha") (cons "production_year" 2006)) (list (cons "id" 30) (cons "title" "Beta") (cons "production_year" 2008)) (list (cons "id" 20) (cons "title" "Gamma") (cons "production_year" 2009))))
(define allowed_infos (list "Sweden" "Norway" "Germany" "Denmark" "Swedish" "Denish" "Norwegian" "German"))
(define candidate_titles (let ((_res '()))
  (for-each (lambda (k)
    (for-each (lambda (mk)
      (when (equal? (map-get mk "keyword_id") (map-get k "id"))
        (for-each (lambda (mi)
          (when (equal? (map-get mi "movie_id") (map-get mk "movie_id"))
            (for-each (lambda (t)
              (when (equal? (map-get t "id") (map-get mi "movie_id"))
                (when (equal? (and (> (and (if (member (and (if (string-contains (map-get k "keyword") "sequel") #t #f) (map-get mi "info")) allowed_infos) #t #f) (map-get t "production_year")) 2005) (map-get mk "movie_id")) (map-get mi "movie_id"))
                  (set! _res (append _res (list (map-get t "title"))))
                )
              )) (if (string? title) (string->list title) title))
          )) (if (string? movie_info) (string->list movie_info) movie_info))
      )) (if (string? movie_keyword) (string->list movie_keyword) movie_keyword))
  ) (if (string? keyword) (string->list keyword) keyword))
  _res))
(define result (list (list (cons "movie_title" (min candidate_titles)))))
(_json result)
(run-test "Q3 returns lexicographically smallest sequel title" test_Q3_returns_lexicographically_smallest_sequel_title)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
