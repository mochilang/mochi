// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:41Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q5.mochi

data class Company_type(var ct_id: Int, var kind: String)

data class Info_type(var it_id: Int, var info: String)

data class Movie_companie(var movie_id: Int, var company_type_id: Int, var note: String)

data class Movie_info(var movie_id: Int, var info: String, var info_type_id: Int)

data class Result(var typical_european_movie: Any?)

data class Title(var t_id: Int, var title: String, var production_year: Int)

val company_type = mutableListOf(Company_type(ct_id = 1, kind = "production companies"), Company_type(ct_id = 2, kind = "other"))

val info_type = mutableListOf(Info_type(it_id = 10, info = "languages"))

val title = mutableListOf(Title(t_id = 100, title = "B Movie", production_year = 2010), Title(t_id = 200, title = "A Film", production_year = 2012), Title(t_id = 300, title = "Old Movie", production_year = 2000))

val movie_companies = mutableListOf(Movie_companie(movie_id = 100, company_type_id = 1, note = "ACME (France) (theatrical)"), Movie_companie(movie_id = 200, company_type_id = 1, note = "ACME (France) (theatrical)"), Movie_companie(movie_id = 300, company_type_id = 1, note = "ACME (France) (theatrical)"))

val movie_info = mutableListOf(Movie_info(movie_id = 100, info = "German", info_type_id = 10), Movie_info(movie_id = 200, info = "Swedish", info_type_id = 10), Movie_info(movie_id = 300, info = "German", info_type_id = 10))

val candidate_titles = run {
    val __res = mutableListOf<String>()
    for (ct in company_type) {
        for (mc in movie_companies) {
            if (mc.company_type_id == ct.ct_id) {
                for (mi in movie_info) {
                    if (mi.movie_id == mc.movie_id) {
                        for (it in info_type) {
                            if (it.it_id == mi.info_type_id) {
                                for (t in title) {
                                    if (t.t_id == mc.movie_id) {
                                        if (ct.kind == "production companies" && "(theatrical)" in mc.note && "(France)" in mc.note && t.production_year > 2005 && (mi.info in mutableListOf("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"))) {
                                            __res.add(t.title)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableListOf(Result(typical_european_movie = min(candidate_titles)))

fun main() {
    json(result)
    check(result == mutableListOf(Result(typical_european_movie = "A Film")))
}
