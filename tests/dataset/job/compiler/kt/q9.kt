// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:54Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q9.mochi

data class Aka_name(var person_id: Int, var name: String)

data class Cast_info(var person_id: Int, var person_role_id: Int, var movie_id: Int, var role_id: Int, var note: String)

data class Char_name(var id: Int, var name: String)

data class Company_name(var id: Int, var country_code: String)

data class Movie_companie(var movie_id: Int, var company_id: Int, var note: String)

data class Name(var id: Int, var name: String, var gender: String)

data class Result(var alternative_name: Any?, var character_name: Any?, var movie: Any?)

data class Role_type(var id: Int, var role: String)

data class Title(var id: Int, var title: String, var production_year: Int)

val aka_name = mutableListOf(Aka_name(person_id = 1, name = "A. N. G."), Aka_name(person_id = 2, name = "J. D."))

val char_name = mutableListOf(Char_name(id = 10, name = "Angel"), Char_name(id = 20, name = "Devil"))

val cast_info = mutableListOf(Cast_info(person_id = 1, person_role_id = 10, movie_id = 100, role_id = 1000, note = "(voice)"), Cast_info(person_id = 2, person_role_id = 20, movie_id = 200, role_id = 1000, note = "(voice)"))

val company_name = mutableListOf(Company_name(id = 100, country_code = "[us]"), Company_name(id = 200, country_code = "[gb]"))

val movie_companies = mutableListOf(Movie_companie(movie_id = 100, company_id = 100, note = "ACME Studios (USA)"), Movie_companie(movie_id = 200, company_id = 200, note = "Maple Films"))

val name = mutableListOf(Name(id = 1, name = "Angela Smith", gender = "f"), Name(id = 2, name = "John Doe", gender = "m"))

val role_type = mutableListOf(Role_type(id = 1000, role = "actress"), Role_type(id = 2000, role = "actor"))

val title = mutableListOf(Title(id = 100, title = "Famous Film", production_year = 2010), Title(id = 200, title = "Old Movie", production_year = 1999))

val matches = run {
    val __res = mutableListOf<Any?>()
    for (an in aka_name) {
        for (n in name) {
            if (an.person_id == n.id) {
                for (ci in cast_info) {
                    if (ci.person_id == n.id) {
                        for (chn in char_name) {
                            if (chn.id == ci.person_role_id) {
                                for (t in title) {
                                    if (t.id == ci.movie_id) {
                                        for (mc in movie_companies) {
                                            if (mc.movie_id == t.id) {
                                                for (cn in company_name) {
                                                    if (cn.id == mc.company_id) {
                                                        for (rt in role_type) {
                                                            if (rt.id == ci.role_id) {
                                                                if ((ci.note in mutableListOf("(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)")) && cn.country_code == "[us]" && (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) && n.gender == "f" && n.name.contains("Ang") && rt.role == "actress" && t.production_year >= 2005 && t.production_year <= 2015) {
                                                                    __res.add(mutableMapOf("alt" to an.name, "character" to chn.name, "movie" to t.title))
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableListOf(Result(alternative_name = min(run {
    val __res = mutableListOf<Any?>()
    for (x in matches) {
        __res.add((x as MutableMap<String, Any?>)["alt"])
    }
    __res
}), character_name = min(run {
    val __res = mutableListOf<Any?>()
    for (x in matches) {
        __res.add((x as MutableMap<String, Any?>)["character"])
    }
    __res
}), movie = min(run {
    val __res = mutableListOf<Any?>()
    for (x in matches) {
        __res.add((x as MutableMap<String, Any?>)["movie"])
    }
    __res
})))

fun main() {
    json(result)
    check(result == mutableListOf(Result(alternative_name = "A. N. G.", character_name = "Angel", movie = "Famous Film")))
}
