// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:58:07Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q1.mochi

data class Company_type(var id: Int, var kind: String)

data class Info_type(var id: Int, var info: String)

data class Title(var id: Int, var title: String, var production_year: Int)

data class Movie_companie(var movie_id: Int, var company_type_id: Int, var note: String)

data class Movie_info_idx(var movie_id: Int, var info_type_id: Int)

val company_type = mutableListOf(Company_type(id = 1, kind = "production companies"), Company_type(id = 2, kind = "distributors"))

val info_type = mutableListOf(Info_type(id = 10, info = "top 250 rank"), Info_type(id = 20, info = "bottom 10 rank"))

val title = mutableListOf(Title(id = 100, title = "Good Movie", production_year = 1995), Title(id = 200, title = "Bad Movie", production_year = 2000))

val movie_companies = mutableListOf(Movie_companie(movie_id = 100, company_type_id = 1, note = "ACME (co-production)"), Movie_companie(movie_id = 200, company_type_id = 1, note = "MGM (as Metro-Goldwyn-Mayer Pictures)"))

val movie_info_idx = mutableListOf(Movie_info_idx(movie_id = 100, info_type_id = 10), Movie_info_idx(movie_id = 200, info_type_id = 20))

val filtered = run {
    val __res = mutableListOf<Any?>()
    for (ct in company_type) {
        for (mc in movie_companies) {
            if (ct.id == mc.company_type_id) {
                for (t in title) {
                    if (t.id == mc.movie_id) {
                        for (mi in movie_info_idx) {
                            if (mi.movie_id == t.id) {
                                for (it in info_type) {
                                    if (it.id == mi.info_type_id) {
                                        if (ct.kind == "production companies" && it.info == "top 250 rank" && (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) && (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))) {
                                            __res.add(mutableMapOf("note" to mc.note, "title" to t.title, "year" to t.production_year))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableMapOf("production_note" to min(run {
    val __res = mutableListOf<Any?>()
    for (r in filtered) {
        __res.add((r as MutableMap<String, Any?>)["note"])
    }
    __res
}), "movie_title" to min(run {
    val __res = mutableListOf<Any?>()
    for (r in filtered) {
        __res.add((r as MutableMap<String, Any?>)["title"])
    }
    __res
}), "movie_year" to min(run {
    val __res = mutableListOf<Any?>()
    for (r in filtered) {
        __res.add((r as MutableMap<String, Any?>)["year"])
    }
    __res
}))

fun main() {
    json(mutableListOf(result))
    check(result == mutableMapOf("production_note" to "ACME (co-production)", "movie_title" to "Good Movie", "movie_year" to 1995))
}
