fun test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() {
    check((result == mutableMapOf("production_note" to "ACME (co-production)", "movie_title" to "Good Movie", "movie_year" to 1995)))
}

fun main() {
    val company_type = listOf(mutableMapOf("id" to 1, "kind" to "production companies"), mutableMapOf("id" to 2, "kind" to "distributors"))
    val info_type = listOf(mutableMapOf("id" to 10, "info" to "top 250 rank"), mutableMapOf("id" to 20, "info" to "bottom 10 rank"))
    val title = listOf(mutableMapOf("id" to 100, "title" to "Good Movie", "production_year" to 1995), mutableMapOf("id" to 200, "title" to "Bad Movie", "production_year" to 2000))
    val movie_companies = listOf(mutableMapOf("movie_id" to 100, "company_type_id" to 1, "note" to "ACME (co-production)"), mutableMapOf("movie_id" to 200, "company_type_id" to 1, "note" to "MGM (as Metro-Goldwyn-Mayer Pictures)"))
    val movie_info_idx = listOf(mutableMapOf("movie_id" to 100, "info_type_id" to 10), mutableMapOf("movie_id" to 200, "info_type_id" to 20))
    val filtered = run {
        val _src = company_type
        val _rows = _query(_src, listOf(
        _JoinSpec(items = movie_companies, on = { args ->
        val ct = args[0]
        val mc = args[1]
        (ct["id"] == mc["company_type_id"])
    })),
    _JoinSpec(items = title, on = { args ->
    val ct = args[0]
    val mc = args[1]
    val t = args[2]
    (t["id"] == mc["movie_id"])
})),
_JoinSpec(items = movie_info_idx, on = { args ->
val ct = args[0]
val mc = args[1]
val t = args[2]
val mi = args[3]
(mi["movie_id"] == t["id"])
})),
_JoinSpec(items = info_type, on = { args ->
val ct = args[0]
val mc = args[1]
val t = args[2]
val mi = args[3]
val it = args[4]
(it["id"] == mi["info_type_id"])
}))
), _QueryOpts(selectFn = { args ->
val ct = args[0]
val mc = args[1]
val t = args[2]
val mi = args[3]
val it = args[4]
mutableMapOf("note" to mc["note"], "title" to t["title"], "year" to t["production_year"])
}, where = { args ->
val ct = args[0]
val mc = args[1]
val t = args[2]
val mi = args[3]
val it = args[4]
((((ct["kind"] == "production companies") && (it["info"] == "top 250 rank")) && (!mc["note"].contains("(as Metro-Goldwyn-Mayer Pictures)"))) && ((mc["note"].contains("(co-production)") || mc["note"].contains("(presents)"))))
}) )
_rows
}
val result = mutableMapOf("production_note" to _min(run {
    var res = filtered
    res = res.map { r -> r["note"] }
    res
}), "movie_title" to _min(run {
    var res = filtered
    res = res.map { r -> r["title"] }
    res
}), "movie_year" to _min(run {
    var res = filtered
    res = res.map { r -> r["year"] }
    res
}))
_json(listOf(result))
test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()
}

fun _arrConcat(a: Array<Any?>, b: Array<Any?>): Array<Any?> {
    return a + b
}
fun _json(v: Any?) {
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e ->
        "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value)
    }
    else -> \"""${x.toString().replace("\"", "\\\"")}\"""
}
println(encode(v))
}
fun _min(v: Any?): Any? {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0
    var m = list[0]
    for (n in list!!) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}
data class _JoinSpec(
val items: List<Any?>,
val on: ((Array<Any?>) -> Boolean)? = null,
val left: Boolean = false,
val right: Boolean = false,
)

data class _QueryOpts(
val selectFn: (Array<Any?>) -> Any?,
val where: ((Array<Any?>) -> Boolean)? = null,
val sortKey: ((Array<Any?>) -> Any?)? = null,
val skip: Int = -1,
val take: Int = -1,
)

fun _query(src: List<Any?>, joins: List<_JoinSpec>, opts: _QueryOpts): List<Any?> {
    var items = src.map { arrayOf(it) }.toMutableList()
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    for (j in joins) {
        val joined = mutableListOf<Array<Any?>>()
        if (j.right && j.left) {
            val matched = BooleanArray(j.items.size)
            for (left in items) {
                var m = false
                for ((ri, right) in j.items.withIndex()) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    matched[ri] = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
            for ((ri, right) in j.items.withIndex()) {
                if (!matched[ri]) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else if (j.right) {
            for (right in j.items) {
                var m = false
                for (left in items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else {
            for (left in items) {
                var m = false
                for (right in j.items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (j.left && !m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
        }
        items = joined
        if (opts.where != null) {
            items = items.filter { opts.where.invoke(it) }.toMutableList()
        }
    }
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    if (opts.sortKey != null) {
        val pairs = items.map { it to opts.sortKey.invoke(it) }.toMutableList()
        pairs.sortWith(java.util.Comparator { a, b ->
        val av = a.second
        val bv = b.second
        when (av) {
            is Int -> when (bv) {
                is Int -> av.compareTo(bv)
                is Double -> av.toDouble().compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is Double -> when (bv) {
                is Int -> av.compareTo(bv.toDouble())
                is Double -> av.compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is String -> av.compareTo(bv.toString())
            else -> av.toString().compareTo(bv.toString())
        }
    })
    items = pairs.map { it.first }.toMutableList()
}
if (opts.skip >= 0) {
    items = if (opts.skip < items.size) items.drop(opts.skip).toMutableList() else mutableListOf()
}
if (opts.take >= 0) {
    if (opts.take < items.size) items = items.take(opts.take).toMutableList()
}
val res = mutableListOf<Any?>()
for (r in items) {
    res.add(opts.selectFn.invoke(r))
}
return res
}


