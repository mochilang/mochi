// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:34Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q3.mochi

data class Keyword(var id: Int, var keyword: String)

data class Movie_info(var movie_id: Int, var info: String)

data class Movie_keyword(var movie_id: Int, var keyword_id: Int)

data class Result(var movie_title: Any?)

data class Title(var id: Int, var title: String, var production_year: Int)

val keyword = mutableListOf(Keyword(id = 1, keyword = "amazing sequel"), Keyword(id = 2, keyword = "prequel"))

val movie_info = mutableListOf(Movie_info(movie_id = 10, info = "Germany"), Movie_info(movie_id = 30, info = "Sweden"), Movie_info(movie_id = 20, info = "France"))

val movie_keyword = mutableListOf(Movie_keyword(movie_id = 10, keyword_id = 1), Movie_keyword(movie_id = 30, keyword_id = 1), Movie_keyword(movie_id = 20, keyword_id = 1), Movie_keyword(movie_id = 10, keyword_id = 2))

val title = mutableListOf(Title(id = 10, title = "Alpha", production_year = 2006), Title(id = 30, title = "Beta", production_year = 2008), Title(id = 20, title = "Gamma", production_year = 2009))

val allowed_infos = mutableListOf("Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German")

val candidate_titles = run {
    val __res = mutableListOf<String>()
    for (k in keyword) {
        for (mk in movie_keyword) {
            if (mk.keyword_id == k.id) {
                for (mi in movie_info) {
                    if (mi.movie_id == mk.movie_id) {
                        for (t in title) {
                            if (t.id == mi.movie_id) {
                                if (k.keyword.contains("sequel") && mi.info in allowed_infos && t.production_year > 2005 && mk.movie_id == mi.movie_id) {
                                    __res.add(t.title)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableListOf(Result(movie_title = min(candidate_titles)))

fun main() {
    json(result)
    check(result == mutableListOf(Result(movie_title = "Alpha")))
}
