// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:58Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q10.mochi

data class Cast_info(var movie_id: Int, var person_role_id: Int, var role_id: Int, var note: String)

data class Char_name(var id: Int, var name: String)

data class Company_name(var id: Int, var country_code: String)

data class Company_type(var id: Int)

data class Movie_companie(var movie_id: Int, var company_id: Int, var company_type_id: Int)

data class Result(var uncredited_voiced_character: Any?, var russian_movie: Any?)

data class Role_type(var id: Int, var role: String)

data class Title(var id: Int, var title: String, var production_year: Int)

val char_name = mutableListOf(Char_name(id = 1, name = "Ivan"), Char_name(id = 2, name = "Alex"))

val cast_info = mutableListOf(Cast_info(movie_id = 10, person_role_id = 1, role_id = 1, note = "Soldier (voice) (uncredited)"), Cast_info(movie_id = 11, person_role_id = 2, role_id = 1, note = "(voice)"))

val company_name = mutableListOf(Company_name(id = 1, country_code = "[ru]"), Company_name(id = 2, country_code = "[us]"))

val company_type = mutableListOf(Company_type(id = 1), Company_type(id = 2))

val movie_companies = mutableListOf(Movie_companie(movie_id = 10, company_id = 1, company_type_id = 1), Movie_companie(movie_id = 11, company_id = 2, company_type_id = 1))

val role_type = mutableListOf(Role_type(id = 1, role = "actor"), Role_type(id = 2, role = "director"))

val title = mutableListOf(Title(id = 10, title = "Vodka Dreams", production_year = 2006), Title(id = 11, title = "Other Film", production_year = 2004))

val matches = run {
    val __res = mutableListOf<Any?>()
    for (chn in char_name) {
        for (ci in cast_info) {
            if (chn.id == ci.person_role_id) {
                for (rt in role_type) {
                    if (rt.id == ci.role_id) {
                        for (t in title) {
                            if (t.id == ci.movie_id) {
                                for (mc in movie_companies) {
                                    if (mc.movie_id == t.id) {
                                        for (cn in company_name) {
                                            if (cn.id == mc.company_id) {
                                                for (ct in company_type) {
                                                    if (ct.id == mc.company_type_id) {
                                                        if (ci.note.contains("(voice)") && ci.note.contains("(uncredited)") && cn.country_code == "[ru]" && rt.role == "actor" && t.production_year > 2005) {
                                                            __res.add(mutableMapOf("character" to chn.name, "movie" to t.title))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableListOf(Result(uncredited_voiced_character = min(run {
    val __res = mutableListOf<Any?>()
    for (x in matches) {
        __res.add((x as MutableMap<String, Any?>)["character"])
    }
    __res
}), russian_movie = min(run {
    val __res = mutableListOf<Any?>()
    for (x in matches) {
        __res.add((x as MutableMap<String, Any?>)["movie"])
    }
    __res
})))

fun main() {
    json(result)
    check(result == mutableListOf(Result(uncredited_voiced_character = "Ivan", russian_movie = "Vodka Dreams")))
}
