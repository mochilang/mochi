// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:51Z
fun min(list: List<Any?>): Any? {
    if (list.isEmpty()) return 0
    var m = list[0]
    for (n in list) {
        if ((n as Comparable<Any?>) < (m as Comparable<Any?>)) m = n
    }
    return m
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun json(v: Any?) {
    println(toJson(v))
}

fun toJson(v: Any?): String = when (v) {
    null -> "null"
    is String -> "\"" + v.replace("\"", "\\\"") + "\""
    is Boolean, is Number -> v.toString()
    is Map<*, *> -> v.entries.joinToString(prefix = "{", postfix = "}") { toJson(it.key.toString()) + ":" + toJson(it.value) }
    is Iterable<*> -> v.joinToString(prefix = "[", postfix = "]") { toJson(it) }
    else -> toJson(v.toString())
}
// Code generated from q8.mochi

data class Aka_name(var person_id: Int, var name: String)

data class Cast_info(var person_id: Int, var movie_id: Int, var note: String, var role_id: Int)

data class Company_name(var id: Int, var country_code: String)

data class Movie_companie(var movie_id: Int, var company_id: Int, var note: String)

data class Name(var id: Int, var name: String)

data class Result(var actress_pseudonym: Any?, var japanese_movie_dubbed: Any?)

data class Role_type(var id: Int, var role: String)

data class Title(var id: Int, var title: String)

val aka_name = mutableListOf(Aka_name(person_id = 1, name = "Y. S."))

val cast_info = mutableListOf(Cast_info(person_id = 1, movie_id = 10, note = "(voice: English version)", role_id = 1000))

val company_name = mutableListOf(Company_name(id = 50, country_code = "[jp]"))

val movie_companies = mutableListOf(Movie_companie(movie_id = 10, company_id = 50, note = "Studio (Japan)"))

val name = mutableListOf(Name(id = 1, name = "Yoko Ono"), Name(id = 2, name = "Yuichi"))

val role_type = mutableListOf(Role_type(id = 1000, role = "actress"))

val title = mutableListOf(Title(id = 10, title = "Dubbed Film"))

val eligible = run {
    val __res = mutableListOf<Any?>()
    for (an1 in aka_name) {
        for (n1 in name) {
            if (n1.id == an1.person_id) {
                for (ci in cast_info) {
                    if (ci.person_id == an1.person_id) {
                        for (t in title) {
                            if (t.id == ci.movie_id) {
                                for (mc in movie_companies) {
                                    if (mc.movie_id == ci.movie_id) {
                                        for (cn in company_name) {
                                            if (cn.id == mc.company_id) {
                                                for (rt in role_type) {
                                                    if (rt.id == ci.role_id) {
                                                        if (ci.note == "(voice: English version)" && cn.country_code == "[jp]" && mc.note.contains("(Japan)") && (!mc.note.contains("(USA)")) && n1.name.contains("Yo") && (!n1.name.contains("Yu")) && rt.role == "actress") {
                                                            __res.add(mutableMapOf("pseudonym" to an1.name, "movie_title" to t.title))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __res
}

val result = mutableListOf(Result(actress_pseudonym = min(run {
    val __res = mutableListOf<Any?>()
    for (x in eligible) {
        __res.add((x as MutableMap<String, Any?>)["pseudonym"])
    }
    __res
}), japanese_movie_dubbed = min(run {
    val __res = mutableListOf<Any?>()
    for (x in eligible) {
        __res.add((x as MutableMap<String, Any?>)["movie_title"])
    }
    __res
})))

fun main() {
    json(result)
    check(result == mutableListOf(Result(actress_pseudonym = "Y. S.", japanese_movie_dubbed = "Dubbed Film")))
}
