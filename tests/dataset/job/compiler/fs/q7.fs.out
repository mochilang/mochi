open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let aka_name = [|Map.ofList [(person_id, 1); (name, "Anna Mae")]; Map.ofList [(person_id, 2); (name, "Chris")]|]
let cast_info = [|Map.ofList [(person_id, 1); (movie_id, 10)]; Map.ofList [(person_id, 2); (movie_id, 20)]|]
let info_type = [|Map.ofList [(id, 1); (info, "mini biography")]; Map.ofList [(id, 2); (info, "trivia")]|]
let link_type = [|Map.ofList [(id, 1); (link, "features")]; Map.ofList [(id, 2); (link, "references")]|]
let movie_link = [|Map.ofList [(linked_movie_id, 10); (link_type_id, 1)]; Map.ofList [(linked_movie_id, 20); (link_type_id, 2)]|]
let name = [|Map.ofList [(id, 1); (name, "Alan Brown"); (name_pcode_cf, "B"); (gender, "m")]; Map.ofList [(id, 2); (name, "Zoe"); (name_pcode_cf, "Z"); (gender, "f")]|]
let person_info = [|Map.ofList [(person_id, 1); (info_type_id, 1); (note, "Volker Boehm")]; Map.ofList [(person_id, 2); (info_type_id, 1); (note, "Other")]|]
let title = [|Map.ofList [(id, 10); (title, "Feature Film"); (production_year, 1990)]; Map.ofList [(id, 20); (title, "Late Film"); (production_year, 2000)]|]
let rows = [|
    for an in aka_name do
        for n in name do
            if (n.id = an.person_id) then
                for pi in person_info do
                    if (pi.person_id = an.person_id) then
                        for it in info_type do
                            if (it.id = pi.info_type_id) then
                                for ci in cast_info do
                                    if (ci.person_id = n.id) then
                                        for t in title do
                                            if (t.id = ci.movie_id) then
                                                for ml in movie_link do
                                                    if (ml.linked_movie_id = t.id) then
                                                        for lt in link_type do
                                                            if (lt.id = ml.link_type_id) then
                                                                if (((((((((((((an.name.contains "a" && (it.info = "mini biography")) && (lt.link = "features")) && (n.name_pcode_cf >= "A")) && (n.name_pcode_cf <= "F")) && (((n.gender = "m") || (((n.gender = "f") && n.name.starts_with "B"))))) && (pi.note = "Volker Boehm")) && (t.production_year >= 1980)) && (t.production_year <= 1995)) && (pi.person_id = an.person_id)) && (pi.person_id = ci.person_id)) && (an.person_id = ci.person_id)) && (ci.movie_id = ml.linked_movie_id))) then
                                                                    yield Map.ofList [(person_name, n.name); (movie_title, t.title)]
|]
let result = [|Map.ofList [(of_person, _min [|
    for r in rows do
        yield r.person_name
|]); (biography_movie, _min [|
    for r in rows do
        yield r.movie_title
|])]|]
ignore (_json result)
let test_Q7_finds_movie_features_biography_for_person() =
    if not ((result = [|Map.ofList [(of_person, "Alan Brown"); (biography_movie, "Feature Film")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q7 finds movie features biography for person" test_Q7_finds_movie_features_biography_for_person) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
