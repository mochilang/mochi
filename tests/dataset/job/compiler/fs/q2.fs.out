open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let company_name = [|Map.ofList [(id, 1); (country_code, "[de]")]; Map.ofList [(id, 2); (country_code, "[us]")]|]
let keyword = [|Map.ofList [(id, 1); (keyword, "character-name-in-title")]; Map.ofList [(id, 2); (keyword, "other")]|]
let movie_companies = [|Map.ofList [(movie_id, 100); (company_id, 1)]; Map.ofList [(movie_id, 200); (company_id, 2)]|]
let movie_keyword = [|Map.ofList [(movie_id, 100); (keyword_id, 1)]; Map.ofList [(movie_id, 200); (keyword_id, 2)]|]
let title = [|Map.ofList [(id, 100); (title, "Der Film")]; Map.ofList [(id, 200); (title, "Other Movie")]|]
let titles = [|
    for cn in company_name do
        for mc in movie_companies do
            if (mc.company_id = cn.id) then
                for t in title do
                    if (mc.movie_id = t.id) then
                        for mk in movie_keyword do
                            if (mk.movie_id = t.id) then
                                for k in keyword do
                                    if (mk.keyword_id = k.id) then
                                        if (((cn.country_code = "[de]") && (k.keyword = "character-name-in-title")) && (mc.movie_id = mk.movie_id)) then
                                            yield t.title
|]
let result = _min titles
ignore (_json result)
let test_Q2_finds_earliest_title_for_German_companies_with_character_keyword() =
    if not ((result = "Der Film")) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q2 finds earliest title for German companies with character keyword" test_Q2_finds_earliest_title_for_German_companies_with_character_keyword) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
