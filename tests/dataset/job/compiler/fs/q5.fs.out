open System

let ct_id = "ct_id"
let kind = "kind"
let it_id = "it_id"
let info = "info"
let t_id = "t_id"
let title = "title"
let production_year = "production_year"
let movie_id = "movie_id"
let company_type_id = "company_type_id"
let note = "note"
let info_type_id = "info_type_id"
let typical_european_movie = "typical_european_movie"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let company_type = [|Map.ofList [(ct_id, 1); (kind, "production companies")]; Map.ofList [(ct_id, 2); (kind, "other")]|]
let info_type = [|Map.ofList [(it_id, 10); (info, "languages")]|]
let title = [|Map.ofList [(t_id, 100); (title, "B Movie"); (production_year, 2010)]; Map.ofList [(t_id, 200); (title, "A Film"); (production_year, 2012)]; Map.ofList [(t_id, 300); (title, "Old Movie"); (production_year, 2000)]|]
let movie_companies = [|Map.ofList [(movie_id, 100); (company_type_id, 1); (note, "ACME (France) (theatrical)")]; Map.ofList [(movie_id, 200); (company_type_id, 1); (note, "ACME (France) (theatrical)")]; Map.ofList [(movie_id, 300); (company_type_id, 1); (note, "ACME (France) (theatrical)")]|]
let movie_info = [|Map.ofList [(movie_id, 100); (info, "German"); (info_type_id, 10)]; Map.ofList [(movie_id, 200); (info, "Swedish"); (info_type_id, 10)]; Map.ofList [(movie_id, 300); (info, "German"); (info_type_id, 10)]|]
let candidate_titles = [|
    for ct in company_type do
        for mc in movie_companies do
            if (mc.company_type_id = ct.ct_id) then
                for mi in movie_info do
                    if (mi.movie_id = mc.movie_id) then
                        for it in info_type do
                            if (it.it_id = mi.info_type_id) then
                                for t in title do
                                    if (t.t_id = mc.movie_id) then
                                        if (((((ct.kind = "production companies") && Array.contains "(theatrical)" mc.note) && Array.contains "(France)" mc.note) && (t.production_year > 2005)) && (Array.contains mi.info [|"Sweden"; "Norway"; "Germany"; "Denmark"; "Swedish"; "Denish"; "Norwegian"; "German"|])) then
                                            yield t.title
|]
let result = [|Map.ofList [(typical_european_movie, _min candidate_titles)]|]
ignore (_json result)
let test_Q5_finds_the_lexicographically_first_qualifying_title() =
    if not ((result = [|Map.ofList [(typical_european_movie, "A Film")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q5 finds the lexicographically first qualifying title" test_Q5_finds_the_lexicographically_first_qualifying_title) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
