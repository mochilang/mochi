open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let cast_info = [|Map.ofList [(movie_id, 1); (person_id, 101)]; Map.ofList [(movie_id, 2); (person_id, 102)]|]
let keyword = [|Map.ofList [(id, 100); (keyword, "marvel-cinematic-universe")]; Map.ofList [(id, 200); (keyword, "other")]|]
let movie_keyword = [|Map.ofList [(movie_id, 1); (keyword_id, 100)]; Map.ofList [(movie_id, 2); (keyword_id, 200)]|]
let name = [|Map.ofList [(id, 101); (name, "Downey Robert Jr.")]; Map.ofList [(id, 102); (name, "Chris Evans")]|]
let title = [|Map.ofList [(id, 1); (title, "Iron Man 3"); (production_year, 2013)]; Map.ofList [(id, 2); (title, "Old Movie"); (production_year, 2000)]|]
let result = [|
    for ci in cast_info do
        for mk in movie_keyword do
            if (ci.movie_id = mk.movie_id) then
                for k in keyword do
                    if (mk.keyword_id = k.id) then
                        for n in name do
                            if (ci.person_id = n.id) then
                                for t in title do
                                    if (ci.movie_id = t.id) then
                                        if ((((k.keyword = "marvel-cinematic-universe") && n.name.contains "Downey") && n.name.contains "Robert") && (t.production_year > 2010)) then
                                            yield Map.ofList [(movie_keyword, k.keyword); (actor_name, n.name); (marvel_movie, t.title)]
|]
ignore (_json result)
let test_Q6_finds_marvel_movie_with_Robert_Downey() =
    if not ((result = [|Map.ofList [(movie_keyword, "marvel-cinematic-universe"); (actor_name, "Downey Robert Jr."); (marvel_movie, "Iron Man 3")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q6 finds marvel movie with Robert Downey" test_Q6_finds_marvel_movie_with_Robert_Downey) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
