open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let char_name = [|Map.ofList [(id, 1); (name, "Ivan")]; Map.ofList [(id, 2); (name, "Alex")]|]
let cast_info = [|Map.ofList [(movie_id, 10); (person_role_id, 1); (role_id, 1); (note, "Soldier (voice) (uncredited)")]; Map.ofList [(movie_id, 11); (person_role_id, 2); (role_id, 1); (note, "(voice)")]|]
let company_name = [|Map.ofList [(id, 1); (country_code, "[ru]")]; Map.ofList [(id, 2); (country_code, "[us]")]|]
let company_type = [|Map.ofList [(id, 1)]; Map.ofList [(id, 2)]|]
let movie_companies = [|Map.ofList [(movie_id, 10); (company_id, 1); (company_type_id, 1)]; Map.ofList [(movie_id, 11); (company_id, 2); (company_type_id, 1)]|]
let role_type = [|Map.ofList [(id, 1); (role, "actor")]; Map.ofList [(id, 2); (role, "director")]|]
let title = [|Map.ofList [(id, 10); (title, "Vodka Dreams"); (production_year, 2006)]; Map.ofList [(id, 11); (title, "Other Film"); (production_year, 2004)]|]
let matches = [|
    for chn in char_name do
        for ci in cast_info do
            if (chn.id = ci.person_role_id) then
                for rt in role_type do
                    if (rt.id = ci.role_id) then
                        for t in title do
                            if (t.id = ci.movie_id) then
                                for mc in movie_companies do
                                    if (mc.movie_id = t.id) then
                                        for cn in company_name do
                                            if (cn.id = mc.company_id) then
                                                for ct in company_type do
                                                    if (ct.id = mc.company_type_id) then
                                                        if ((((ci.note.contains "(voice)" && ci.note.contains "(uncredited)") && (cn.country_code = "[ru]")) && (rt.role = "actor")) && (t.production_year > 2005)) then
                                                            yield Map.ofList [(character, chn.name); (movie, t.title)]
|]
let result = [|Map.ofList [(uncredited_voiced_character, _min [|
    for x in matches do
        yield x.character
|]); (russian_movie, _min [|
    for x in matches do
        yield x.movie
|])]|]
ignore (_json result)
let test_Q10_finds_uncredited_voice_actor_in_Russian_movie() =
    if not ((result = [|Map.ofList [(uncredited_voiced_character, "Ivan"); (russian_movie, "Vodka Dreams")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q10 finds uncredited voice actor in Russian movie" test_Q10_finds_uncredited_voice_actor_in_Russian_movie) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
