open System

let person_id = "person_id"
let name = "name"
let movie_id = "movie_id"
let note = "note"
let role_id = "role_id"
let id = "id"
let country_code = "country_code"
let company_id = "company_id"
let role = "role"
let title = "title"
let pseudonym = "pseudonym"
let movie_title = "movie_title"
let actress_pseudonym = "actress_pseudonym"
let japanese_movie_dubbed = "japanese_movie_dubbed"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let aka_name = [|Map.ofList [(person_id, 1); (name, "Y. S.")]|]
let cast_info = [|Map.ofList [(person_id, 1); (movie_id, 10); (note, "(voice: English version)"); (role_id, 1000)]|]
let company_name = [|Map.ofList [(id, 50); (country_code, "[jp]")]|]
let movie_companies = [|Map.ofList [(movie_id, 10); (company_id, 50); (note, "Studio (Japan)")]|]
let name = [|Map.ofList [(id, 1); (name, "Yoko Ono")]; Map.ofList [(id, 2); (name, "Yuichi")]|]
let role_type = [|Map.ofList [(id, 1000); (role, "actress")]|]
let title = [|Map.ofList [(id, 10); (title, "Dubbed Film")]|]
let eligible = [|
    for an1 in aka_name do
        for n1 in name do
            if (n1.id = an1.person_id) then
                for ci in cast_info do
                    if (ci.person_id = an1.person_id) then
                        for t in title do
                            if (t.id = ci.movie_id) then
                                for mc in movie_companies do
                                    if (mc.movie_id = ci.movie_id) then
                                        for cn in company_name do
                                            if (cn.id = mc.company_id) then
                                                for rt in role_type do
                                                    if (rt.id = ci.role_id) then
                                                        if (((((((ci.note = "(voice: English version)") && (cn.country_code = "[jp]")) && mc.note.contains "(Japan)") && ((not mc.note.contains "(USA)"))) && n1.name.contains "Yo") && ((not n1.name.contains "Yu"))) && (rt.role = "actress")) then
                                                            yield Map.ofList [(pseudonym, an1.name); (movie_title, t.title)]
|]
let result = [|Map.ofList [(actress_pseudonym, _min [|
    for x in eligible do
        yield x.pseudonym
|]); (japanese_movie_dubbed, _min [|
    for x in eligible do
        yield x.movie_title
|])]|]
ignore (_json result)
let test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing() =
    if not ((result = [|Map.ofList [(actress_pseudonym, "Y. S."); (japanese_movie_dubbed, "Dubbed Film")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q8 returns the pseudonym and movie title for Japanese dubbing" test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
