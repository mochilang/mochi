open System

let person_id = "person_id"
let name = "name"
let id = "id"
let person_role_id = "person_role_id"
let movie_id = "movie_id"
let role_id = "role_id"
let note = "note"
let country_code = "country_code"
let company_id = "company_id"
let gender = "gender"
let role = "role"
let title = "title"
let production_year = "production_year"
let alt = "alt"
let character = "character"
let movie = "movie"
let alternative_name = "alternative_name"
let character_name = "character_name"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let aka_name = [|Map.ofList [(person_id, 1); (name, "A. N. G.")]; Map.ofList [(person_id, 2); (name, "J. D.")]|]
let char_name = [|Map.ofList [(id, 10); (name, "Angel")]; Map.ofList [(id, 20); (name, "Devil")]|]
let cast_info = [|Map.ofList [(person_id, 1); (person_role_id, 10); (movie_id, 100); (role_id, 1000); (note, "(voice)")]; Map.ofList [(person_id, 2); (person_role_id, 20); (movie_id, 200); (role_id, 1000); (note, "(voice)")]|]
let company_name = [|Map.ofList [(id, 100); (country_code, "[us]")]; Map.ofList [(id, 200); (country_code, "[gb]")]|]
let movie_companies = [|Map.ofList [(movie_id, 100); (company_id, 100); (note, "ACME Studios (USA)")]; Map.ofList [(movie_id, 200); (company_id, 200); (note, "Maple Films")]|]
let name = [|Map.ofList [(id, 1); (name, "Angela Smith"); (gender, "f")]; Map.ofList [(id, 2); (name, "John Doe"); (gender, "m")]|]
let role_type = [|Map.ofList [(id, 1000); (role, "actress")]; Map.ofList [(id, 2000); (role, "actor")]|]
let title = [|Map.ofList [(id, 100); (title, "Famous Film"); (production_year, 2010)]; Map.ofList [(id, 200); (title, "Old Movie"); (production_year, 1999)]|]
let matches = [|
    for an in aka_name do
        for n in name do
            if (an.person_id = n.id) then
                for ci in cast_info do
                    if (ci.person_id = n.id) then
                        for chn in char_name do
                            if (chn.id = ci.person_role_id) then
                                for t in title do
                                    if (t.id = ci.movie_id) then
                                        for mc in movie_companies do
                                            if (mc.movie_id = t.id) then
                                                for cn in company_name do
                                                    if (cn.id = mc.company_id) then
                                                        for rt in role_type do
                                                            if (rt.id = ci.role_id) then
                                                                if ((((((((Array.contains ci.note [|"(voice)"; "(voice: Japanese version)"; "(voice) (uncredited)"; "(voice: English version)"|]) && (cn.country_code = "[us]")) && ((mc.note.contains "(USA)" || mc.note.contains "(worldwide)"))) && (n.gender = "f")) && n.name.contains "Ang") && (rt.role = "actress")) && (t.production_year >= 2005)) && (t.production_year <= 2015)) then
                                                                    yield Map.ofList [(alt, an.name); (character, chn.name); (movie, t.title)]
|]
let result = [|Map.ofList [(alternative_name, _min [|
    for x in matches do
        yield x.alt
|]); (character_name, _min [|
    for x in matches do
        yield x.character
|]); (movie, _min [|
    for x in matches do
        yield x.movie
|])]|]
ignore (_json result)
let test_Q9_selects_minimal_alternative_name__character_and_movie() =
    if not ((result = [|Map.ofList [(alternative_name, "A. N. G."); (character_name, "Angel"); (movie, "Famous Film")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q9 selects minimal alternative name, character and movie" test_Q9_selects_minimal_alternative_name__character_and_movie) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
