open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let info_type = [|Map.ofList [(id, 1); (info, "rating")]; Map.ofList [(id, 2); (info, "other")]|]
let keyword = [|Map.ofList [(id, 1); (keyword, "great sequel")]; Map.ofList [(id, 2); (keyword, "prequel")]|]
let title = [|Map.ofList [(id, 10); (title, "Alpha Movie"); (production_year, 2006)]; Map.ofList [(id, 20); (title, "Beta Film"); (production_year, 2007)]; Map.ofList [(id, 30); (title, "Old Film"); (production_year, 2004)]|]
let movie_keyword = [|Map.ofList [(movie_id, 10); (keyword_id, 1)]; Map.ofList [(movie_id, 20); (keyword_id, 1)]; Map.ofList [(movie_id, 30); (keyword_id, 1)]|]
let movie_info_idx = [|Map.ofList [(movie_id, 10); (info_type_id, 1); (info, "6.2")]; Map.ofList [(movie_id, 20); (info_type_id, 1); (info, "7.8")]; Map.ofList [(movie_id, 30); (info_type_id, 1); (info, "4.5")]|]
let rows = [|
    for it in info_type do
        for mi in movie_info_idx do
            if (it.id = mi.info_type_id) then
                for t in title do
                    if (t.id = mi.movie_id) then
                        for mk in movie_keyword do
                            if (mk.movie_id = t.id) then
                                for k in keyword do
                                    if (k.id = mk.keyword_id) then
                                        if (((((it.info = "rating") && k.keyword.contains "sequel") && (mi.info > "5.0")) && (t.production_year > 2005)) && (mk.movie_id = mi.movie_id)) then
                                            yield Map.ofList [(rating, mi.info); (title, t.title)]
|]
let result = [|Map.ofList [(rating, _min [|
    for r in rows do
        yield r.rating
|]); (movie_title, _min [|
    for r in rows do
        yield r.title
|])]|]
ignore (_json result)
let test_Q4_returns_minimum_rating_and_title_for_sequels() =
    if not ((result = [|Map.ofList [(rating, "6.2"); (movie_title, "Alpha Movie")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q4 returns minimum rating and title for sequels" test_Q4_returns_minimum_rating_and_title_for_sequels) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
