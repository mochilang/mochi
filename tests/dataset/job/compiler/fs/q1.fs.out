open System

let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let company_type = [|Map.ofList [(id, 1); (kind, "production companies")]; Map.ofList [(id, 2); (kind, "distributors")]|]
let info_type = [|Map.ofList [(id, 10); (info, "top 250 rank")]; Map.ofList [(id, 20); (info, "bottom 10 rank")]|]
let title = [|Map.ofList [(id, 100); (title, "Good Movie"); (production_year, 1995)]; Map.ofList [(id, 200); (title, "Bad Movie"); (production_year, 2000)]|]
let movie_companies = [|Map.ofList [(movie_id, 100); (company_type_id, 1); (note, "ACME (co-production)")]; Map.ofList [(movie_id, 200); (company_type_id, 1); (note, "MGM (as Metro-Goldwyn-Mayer Pictures)")]|]
let movie_info_idx = [|Map.ofList [(movie_id, 100); (info_type_id, 10)]; Map.ofList [(movie_id, 200); (info_type_id, 20)]|]
let filtered = [|
    for ct in company_type do
        for mc in movie_companies do
            if (ct.id = mc.company_type_id) then
                for t in title do
                    if (t.id = mc.movie_id) then
                        for mi in movie_info_idx do
                            if (mi.movie_id = t.id) then
                                for it in info_type do
                                    if (it.id = mi.info_type_id) then
                                        if ((((ct.kind = "production companies") && (it.info = "top 250 rank")) && ((not mc.note.contains "(as Metro-Goldwyn-Mayer Pictures)"))) && ((mc.note.contains "(co-production)" || mc.note.contains "(presents)"))) then
                                            yield Map.ofList [(note, mc.note); (title, t.title); (year, t.production_year)]
|]
let result = Map.ofList [(production_note, _min [|
    for r in filtered do
        yield r.note
|]); (movie_title, _min [|
    for r in filtered do
        yield r.title
|]); (movie_year, _min [|
    for r in filtered do
        yield r.year
|])]
ignore (_json [|result|])
let test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() =
    if not ((result = Map.ofList [(production_note, "ACME (co-production)"); (movie_title, "Good Movie"); (movie_year, 1995)])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "Q1 returns min note, title and year for top ranked co-production" test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
