# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:52:38Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$aka_name = [OpenStruct.new(person_id: 1, name: "A. Stone"), OpenStruct.new(person_id: 2, name: "J. Doe")]
$char_name = [OpenStruct.new(id: 1, name: "Protagonist"), OpenStruct.new(id: 2, name: "Extra")]
$cast_info = [OpenStruct.new(movie_id: 1, person_role_id: 1, person_id: 1, role_id: 1, note: "(voice)"), OpenStruct.new(movie_id: 2, person_role_id: 2, person_id: 2, role_id: 2, note: "Cameo")]
$company_name = [OpenStruct.new(id: 10, country_code: "[us]"), OpenStruct.new(id: 20, country_code: "[gb]")]
$info_type = [OpenStruct.new(id: 100, info: "release dates")]
$movie_companies = [OpenStruct.new(movie_id: 1, company_id: 10, note: "Studio (USA)"), OpenStruct.new(movie_id: 2, company_id: 20, note: "Other (worldwide)")]
$movie_info = [OpenStruct.new(movie_id: 1, info_type_id: 100, info: "USA: June 2006"), OpenStruct.new(movie_id: 2, info_type_id: 100, info: "UK: 1999")]
$name = [OpenStruct.new(id: 1, name: "Angela Stone", gender: "f"), OpenStruct.new(id: 2, name: "Bob Angstrom", gender: "m")]
$role_type = [OpenStruct.new(id: 1, role: "actress"), OpenStruct.new(id: 2, role: "actor")]
$title = [OpenStruct.new(id: 1, title: "Voiced Movie", production_year: 2006), OpenStruct.new(id: 2, title: "Other Movie", production_year: 2010)]
$matches = (begin
	_res = []
	for an in $aka_name
		for n in $name
			if (n.id == an.person_id)
				for ci in $cast_info
					if (ci.person_id == an.person_id)
						for chn in $char_name
							if (chn.id == ci.person_role_id)
								for rt in $role_type
									if (rt.id == ci.role_id)
										for t in $title
											if (t.id == ci.movie_id)
												for mc in $movie_companies
													if (mc.movie_id == t.id)
														for cn in $company_name
															if (cn.id == mc.company_id)
																for mi in $movie_info
																	if (mi.movie_id == t.id)
																		for it in $info_type
																			if (it.id == mi.info_type_id)
																				if ((((((((((((["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"].include?(ci.note)) && (cn.country_code == "[us]")) && (it.info == "release dates")) && (mc.note != nil)) && (((mc.note.include?("(USA)")) || (mc.note.include?("(worldwide)"))))) && (mi.info != nil)) && (((((mi.info.include?("Japan:")) && (mi.info.include?("200")))) || (((mi.info.include?("USA:")) && (mi.info.include?("200"))))))) && (n.gender == "f")) && (n.name.include?("Ang"))) && (rt.role == "actress")) && (t.production_year >= 2005)) && (t.production_year <= 2009))
																					_res << OpenStruct.new(actress: n.name, movie: t.title)
																				end
																			end
																		end
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = [OpenStruct.new(voicing_actress: _min((($matches)).map { |r| r.actress }), voiced_movie: _min((($matches)).map { |r| r.movie }))]
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(voicing_actress: "Angela Stone", voiced_movie: "Voiced Movie")])
