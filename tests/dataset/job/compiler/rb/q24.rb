# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:07:07Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$aka_name = [OpenStruct.new(person_id: 1)]
$char_name = [OpenStruct.new(id: 1, name: "Hero Character")]
$cast_info = [OpenStruct.new(movie_id: 1, person_id: 1, person_role_id: 1, role_id: 1, note: "(voice)")]
$company_name = [OpenStruct.new(id: 1, country_code: "[us]")]
$info_type = [OpenStruct.new(id: 1, info: "release dates")]
$keyword = [OpenStruct.new(id: 1, keyword: "hero")]
$movie_companies = [OpenStruct.new(movie_id: 1, company_id: 1)]
$movie_info = [OpenStruct.new(movie_id: 1, info_type_id: 1, info: "Japan: Feb 2015")]
$movie_keyword = [OpenStruct.new(movie_id: 1, keyword_id: 1)]
$name = [OpenStruct.new(id: 1, name: "Ann Actress", gender: "f")]
$role_type = [OpenStruct.new(id: 1, role: "actress")]
$title = [OpenStruct.new(id: 1, title: "Heroic Adventure", production_year: 2015)]
$matches = (begin
	_res = []
	for an in $aka_name
		for chn in $char_name
			for ci in $cast_info
				for cn in $company_name
					for it in $info_type
						for k in $keyword
							for mc in $movie_companies
								for mi in $movie_info
									for mk in $movie_keyword
										for n in $name
											for rt in $role_type
												for t in $title
													if (((((((((((((((((((((((((((((["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"].include?(ci.note)) && (cn.country_code == "[us]")) && (it.info == "release dates")) && (["hero", "martial-arts", "hand-to-hand-combat"].include?(k.keyword))) && (mi.info != nil)) && ((((mi.info.start_with?("Japan:")) && (mi.info.include?("201"))) || ((mi.info.start_with?("USA:")) && (mi.info.include?("201")))))) && (n.gender == "f")) && (n.name.include?("An"))) && (rt.role == "actress")) && (t.production_year > 2010)) && (t.id == mi.movie_id)) && (t.id == mc.movie_id)) && (t.id == ci.movie_id)) && (t.id == mk.movie_id)) && (mc.movie_id == ci.movie_id)) && (mc.movie_id == mi.movie_id)) && (mc.movie_id == mk.movie_id)) && (mi.movie_id == ci.movie_id)) && (mi.movie_id == mk.movie_id)) && (ci.movie_id == mk.movie_id)) && (cn.id == mc.company_id)) && (it.id == mi.info_type_id)) && (n.id == ci.person_id)) && (rt.id == ci.role_id)) && (n.id == an.person_id)) && (ci.person_id == an.person_id)) && (chn.id == ci.person_role_id)) && (k.id == mk.keyword_id)))
														_res << OpenStruct.new(voiced_char_name: chn.name, voicing_actress_name: n.name, voiced_action_movie_jap_eng: t.title)
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = [OpenStruct.new(voiced_char_name: _min((($matches)).map { |x| x.voiced_char_name }), voicing_actress_name: _min((($matches)).map { |x| x.voicing_actress_name }), voiced_action_movie_jap_eng: _min((($matches)).map { |x| x.voiced_action_movie_jap_eng }))]
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(voiced_char_name: "Hero Character", voicing_actress_name: "Ann Actress", voiced_action_movie_jap_eng: "Heroic Adventure")])
