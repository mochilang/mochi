# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:07:09Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$cast_info = [OpenStruct.new(movie_id: 1, person_id: 1, note: "(writer)"), OpenStruct.new(movie_id: 2, person_id: 2, note: "(story)"), OpenStruct.new(movie_id: 3, person_id: 3, note: "(writer)")]
$company_name = [OpenStruct.new(id: 1, name: "Lionsgate Pictures"), OpenStruct.new(id: 2, name: "Other Studio")]
$info_type = [OpenStruct.new(id: 10, info: "genres"), OpenStruct.new(id: 20, info: "votes")]
$keyword = [OpenStruct.new(id: 100, keyword: "murder"), OpenStruct.new(id: 200, keyword: "comedy")]
$movie_companies = [OpenStruct.new(movie_id: 1, company_id: 1), OpenStruct.new(movie_id: 2, company_id: 1), OpenStruct.new(movie_id: 3, company_id: 2)]
$movie_info = [OpenStruct.new(movie_id: 1, info_type_id: 10, info: "Horror"), OpenStruct.new(movie_id: 2, info_type_id: 10, info: "Thriller"), OpenStruct.new(movie_id: 3, info_type_id: 10, info: "Comedy")]
$movie_info_idx = [OpenStruct.new(movie_id: 1, info_type_id: 20, info: 1000), OpenStruct.new(movie_id: 2, info_type_id: 20, info: 800), OpenStruct.new(movie_id: 3, info_type_id: 20, info: 500)]
$movie_keyword = [OpenStruct.new(movie_id: 1, keyword_id: 100), OpenStruct.new(movie_id: 2, keyword_id: 100), OpenStruct.new(movie_id: 3, keyword_id: 200)]
$name = [OpenStruct.new(id: 1, name: "Arthur", gender: "m"), OpenStruct.new(id: 2, name: "Bob", gender: "m"), OpenStruct.new(id: 3, name: "Carla", gender: "f")]
$title = [OpenStruct.new(id: 1, title: "Alpha Horror"), OpenStruct.new(id: 2, title: "Beta Blood"), OpenStruct.new(id: 3, title: "Gamma Comedy")]
$matches = (begin
	_res = []
	for ci in $cast_info
		for n in $name
			if (n.id == ci.person_id)
				for t in $title
					if (t.id == ci.movie_id)
						for mi in $movie_info
							if (mi.movie_id == t.id)
								for mi_idx in $movie_info_idx
									if (mi_idx.movie_id == t.id)
										for mk in $movie_keyword
											if (mk.movie_id == t.id)
												for k in $keyword
													if (k.id == mk.keyword_id)
														for mc in $movie_companies
															if (mc.movie_id == t.id)
																for cn in $company_name
																	if (cn.id == mc.company_id)
																		for it1 in $info_type
																			if (it1.id == mi.info_type_id)
																				for it2 in $info_type
																					if (it2.id == mi_idx.info_type_id)
																						if (((((((["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"].include?(ci.note)) && (cn.name.start_with?("Lionsgate"))) && (it1.info == "genres")) && (it2.info == "votes")) && (["murder", "violence", "blood", "gore", "death", "female-nudity", "hospital"].include?(k.keyword))) && (["Horror", "Thriller"].include?(mi.info))) && (n.gender == "m"))
																							_res << OpenStruct.new(movie_budget: mi.info, movie_votes: mi_idx.info, writer: n.name, violent_liongate_movie: t.title)
																						end
																					end
																				end
																			end
																		end
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = [OpenStruct.new(movie_budget: _min((($matches)).map { |r| r.movie_budget }), movie_votes: _min((($matches)).map { |r| r.movie_votes }), writer: _min((($matches)).map { |r| r.writer }), violent_liongate_movie: _min((($matches)).map { |r| r.violent_liongate_movie }))]
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(movie_budget: "Horror", movie_votes: 800, writer: "Arthur", violent_liongate_movie: "Alpha Horror")])
