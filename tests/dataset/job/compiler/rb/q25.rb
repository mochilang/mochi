# Generated by Mochi compiler v0.10.25 on 2025-07-13T13:07:07Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$cast_info = [OpenStruct.new(movie_id: 1, person_id: 1, note: "(writer)"), OpenStruct.new(movie_id: 2, person_id: 2, note: "(writer)")]
$info_type = [OpenStruct.new(id: 1, info: "genres"), OpenStruct.new(id: 2, info: "votes")]
$keyword = [OpenStruct.new(id: 1, keyword: "murder"), OpenStruct.new(id: 2, keyword: "romance")]
$movie_info = [OpenStruct.new(movie_id: 1, info_type_id: 1, info: "Horror"), OpenStruct.new(movie_id: 2, info_type_id: 1, info: "Comedy")]
$movie_info_idx = [OpenStruct.new(movie_id: 1, info_type_id: 2, info: 100), OpenStruct.new(movie_id: 2, info_type_id: 2, info: 50)]
$movie_keyword = [OpenStruct.new(movie_id: 1, keyword_id: 1), OpenStruct.new(movie_id: 2, keyword_id: 2)]
$name = [OpenStruct.new(id: 1, name: "Mike", gender: "m"), OpenStruct.new(id: 2, name: "Sue", gender: "f")]
$title = [OpenStruct.new(id: 1, title: "Scary Movie"), OpenStruct.new(id: 2, title: "Funny Movie")]
$allowed_notes = ["(writer)", "(head writer)", "(written by)", "(story)", "(story editor)"]
$allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
$matches = (begin
	_res = []
	for ci in $cast_info
		for it1 in $info_type
			for it2 in $info_type
				for k in $keyword
					for mi in $movie_info
						for mi_idx in $movie_info_idx
							for mk in $movie_keyword
								for n in $name
									for t in $title
										if (((((((((((((((((((((($allowed_notes.include?(ci.note))) && (it1.info == "genres")) && (it2.info == "votes")) && (($allowed_keywords.include?(k.keyword)))) && (mi.info == "Horror")) && (n.gender == "m")) && (t.id == mi.movie_id)) && (t.id == mi_idx.movie_id)) && (t.id == ci.movie_id)) && (t.id == mk.movie_id)) && (ci.movie_id == mi.movie_id)) && (ci.movie_id == mi_idx.movie_id)) && (ci.movie_id == mk.movie_id)) && (mi.movie_id == mi_idx.movie_id)) && (mi.movie_id == mk.movie_id)) && (mi_idx.movie_id == mk.movie_id)) && (n.id == ci.person_id)) && (it1.id == mi.info_type_id)) && (it2.id == mi_idx.info_type_id)) && (k.id == mk.keyword_id)))
											_res << OpenStruct.new(budget: mi.info, votes: mi_idx.info, writer: n.name, title: t.title)
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = [OpenStruct.new(movie_budget: _min((($matches)).map { |x| x.budget }), movie_votes: _min((($matches)).map { |x| x.votes }), male_writer: _min((($matches)).map { |x| x.writer }), violent_movie_title: _min((($matches)).map { |x| x.title }))]
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(movie_budget: "Horror", movie_votes: 100, male_writer: "Mike", violent_movie_title: "Scary Movie")])
