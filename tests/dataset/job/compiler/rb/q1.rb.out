require "ostruct"

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

company_type = [OpenStruct.new(id: 1, kind: "production companies"), OpenStruct.new(id: 2, kind: "distributors")]
info_type = [OpenStruct.new(id: 10, info: "top 250 rank"), OpenStruct.new(id: 20, info: "bottom 10 rank")]
title = [OpenStruct.new(id: 100, title: "Good Movie", production_year: 1995), OpenStruct.new(id: 200, title: "Bad Movie", production_year: 2000)]
movie_companies = [OpenStruct.new(movie_id: 100, company_type_id: 1, note: "ACME (co-production)"), OpenStruct.new(movie_id: 200, company_type_id: 1, note: "MGM (as Metro-Goldwyn-Mayer Pictures)")]
movie_info_idx = [OpenStruct.new(movie_id: 100, info_type_id: 10), OpenStruct.new(movie_id: 200, info_type_id: 20)]
filtered = (begin
  _res = []
  for ct in company_type
    for mc in movie_companies
      if ct.id == mc.company_type_id
        for t in title
          if t.id == mc.movie_id
            for mi in movie_info_idx
              if mi.movie_id == t.id
                for it in info_type
                  if it.id == mi.info_type_id
                    if (ct.kind == "production companies") && (it.info == "top 250 rank") && !mc.note.include?("(as Metro-Goldwyn-Mayer Pictures)") && (mc.note.include?("(co-production)") || mc.note.include?("(presents)"))
                      _res << OpenStruct.new(note: mc.note, title: t.title, year: t.production_year)
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  _res
end)
result = OpenStruct.new(production_note: _min(filtered.map { |r| r.note }), movie_title: _min(filtered.map { |r| r.title }), movie_year: _min(filtered.map { |r| r.year }))
_json([result])
raise "expect failed" unless result == OpenStruct.new(production_note: "ACME (co-production)", movie_title: "Good Movie", movie_year: 1995)
