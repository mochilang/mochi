# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:53:32Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$aka_name = [OpenStruct.new(person_id: 1, name: "Anna Mae"), OpenStruct.new(person_id: 2, name: "Chris")]
$cast_info = [OpenStruct.new(person_id: 1, movie_id: 10), OpenStruct.new(person_id: 2, movie_id: 20)]
$info_type = [OpenStruct.new(id: 1, info: "mini biography"), OpenStruct.new(id: 2, info: "trivia")]
$link_type = [OpenStruct.new(id: 1, link: "features"), OpenStruct.new(id: 2, link: "references")]
$movie_link = [OpenStruct.new(linked_movie_id: 10, link_type_id: 1), OpenStruct.new(linked_movie_id: 20, link_type_id: 2)]
$name = [OpenStruct.new(id: 1, name: "Alan Brown", name_pcode_cf: "B", gender: "m"), OpenStruct.new(id: 2, name: "Zoe", name_pcode_cf: "Z", gender: "f")]
$person_info = [OpenStruct.new(person_id: 1, info_type_id: 1, note: "Volker Boehm"), OpenStruct.new(person_id: 2, info_type_id: 1, note: "Other")]
$title = [OpenStruct.new(id: 10, title: "Feature Film", production_year: 1990), OpenStruct.new(id: 20, title: "Late Film", production_year: 2000)]
$rows = (begin
	_res = []
	for an in $aka_name
		for n in $name
			if (n.id == an.person_id)
				for pi in $person_info
					if (pi.person_id == an.person_id)
						for it in $info_type
							if (it.id == pi.info_type_id)
								for ci in $cast_info
									if (ci.person_id == n.id)
										for t in $title
											if (t.id == ci.movie_id)
												for ml in $movie_link
													if (ml.linked_movie_id == t.id)
														for lt in $link_type
															if (lt.id == ml.link_type_id)
																if ((((((((((((((an.name.include?("a")) && (it.info == "mini biography")) && (lt.link == "features")) && (n.name_pcode_cf >= "A")) && (n.name_pcode_cf <= "F")) && (((n.gender == "m") || (((n.gender == "f") && (n.name.start_with?("B"))))))) && (pi.note == "Volker Boehm")) && (t.production_year >= 1980)) && (t.production_year <= 1995)) && (pi.person_id == an.person_id)) && (pi.person_id == ci.person_id)) && (an.person_id == ci.person_id)) && (ci.movie_id == ml.linked_movie_id)))
																	_res << OpenStruct.new(person_name: n.name, movie_title: t.title)
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = [OpenStruct.new(of_person: _min((($rows)).map { |r| r.person_name }), biography_movie: _min((($rows)).map { |r| r.movie_title }))]
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(of_person: "Alan Brown", biography_movie: "Feature Film")])
