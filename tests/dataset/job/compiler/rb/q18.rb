# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:52:38Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _min(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.min
end

$info_type = [OpenStruct.new(id: 1, info: "budget"), OpenStruct.new(id: 2, info: "votes"), OpenStruct.new(id: 3, info: "rating")]
$name = [OpenStruct.new(id: 1, name: "Big Tim", gender: "m"), OpenStruct.new(id: 2, name: "Slim Tim", gender: "m"), OpenStruct.new(id: 3, name: "Alice", gender: "f")]
$title = [OpenStruct.new(id: 10, title: "Alpha"), OpenStruct.new(id: 20, title: "Beta"), OpenStruct.new(id: 30, title: "Gamma")]
$cast_info = [OpenStruct.new(movie_id: 10, person_id: 1, note: "(producer)"), OpenStruct.new(movie_id: 20, person_id: 2, note: "(executive producer)"), OpenStruct.new(movie_id: 30, person_id: 3, note: "(producer)")]
$movie_info = [OpenStruct.new(movie_id: 10, info_type_id: 1, info: 90), OpenStruct.new(movie_id: 20, info_type_id: 1, info: 120), OpenStruct.new(movie_id: 30, info_type_id: 1, info: 110)]
$movie_info_idx = [OpenStruct.new(movie_id: 10, info_type_id: 2, info: 500), OpenStruct.new(movie_id: 20, info_type_id: 2, info: 400), OpenStruct.new(movie_id: 30, info_type_id: 2, info: 800)]
$rows = (begin
	_res = []
	for ci in $cast_info
		for n in $name
			if (n.id == ci.person_id)
				for t in $title
					if (t.id == ci.movie_id)
						for mi in $movie_info
							if (mi.movie_id == t.id)
								for mi_idx in $movie_info_idx
									if (mi_idx.movie_id == t.id)
										for it1 in $info_type
											if (it1.id == mi.info_type_id)
												for it2 in $info_type
													if (it2.id == mi_idx.info_type_id)
														if ((((((((((["(producer)", "(executive producer)"].include?(ci.note)) && (it1.info == "budget")) && (it2.info == "votes")) && (n.gender == "m")) && (n.name.include?("Tim"))) && (t.id == ci.movie_id)) && (ci.movie_id == mi.movie_id)) && (ci.movie_id == mi_idx.movie_id)) && (mi.movie_id == mi_idx.movie_id)))
															_res << OpenStruct.new(budget: mi.info, votes: mi_idx.info, title: t.title)
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = OpenStruct.new(movie_budget: _min((($rows)).map { |r| r.budget }), movie_votes: _min((($rows)).map { |r| r.votes }), movie_title: _min((($rows)).map { |r| r.title }))
_json($result)
raise "expect failed" unless ($result == OpenStruct.new(movie_budget: 90, movie_votes: 400, movie_title: "Alpha"))
