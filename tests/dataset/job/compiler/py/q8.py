# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:56:46Z
from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing():
    assert result == [
        {"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}
    ]


aka_name = [{"person_id": 1, "name": "Y. S."}]
cast_info = [
    {
        "person_id": 1,
        "movie_id": 10,
        "note": "(voice: English version)",
        "role_id": 1000,
    }
]
company_name = [{"id": 50, "country_code": "[jp]"}]
movie_companies = [{"movie_id": 10, "company_id": 50, "note": "Studio (Japan)"}]
name = [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
role_type = [{"id": 1000, "role": "actress"}]
title = [{"id": 10, "title": "Dubbed Film"}]
eligible = _query(
    aka_name,
    [
        {"items": name, "on": lambda an1, n1: n1["id"] == an1["person_id"]},
        {
            "items": cast_info,
            "on": lambda an1, n1, ci: ci["person_id"] == an1["person_id"],
        },
        {"items": title, "on": lambda an1, n1, ci, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_companies,
            "on": lambda an1, n1, ci, t, mc: mc["movie_id"] == ci["movie_id"],
        },
        {
            "items": company_name,
            "on": lambda an1, n1, ci, t, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": role_type,
            "on": lambda an1, n1, ci, t, mc, cn, rt: rt["id"] == ci["role_id"],
        },
    ],
    {
        "select": lambda an1, n1, ci, t, mc, cn, rt: {
            "pseudonym": an1["name"],
            "movie_title": t["title"],
        },
        "where": lambda an1, n1, ci, t, mc, cn, rt: (
            (
                (
                    (
                        (
                            ci["note"] == "(voice: English version)"
                            and cn["country_code"] == "[jp]"
                        )
                        and "(Japan)" in mc["note"]
                    )
                    and (not "(USA)" in mc["note"])
                )
                and "Yo" in n1["name"]
            )
            and (not "Yu" in n1["name"])
        )
        and rt["role"] == "actress",
    },
)
result = [
    {
        "actress_pseudonym": _min([x["pseudonym"] for x in eligible]),
        "japanese_movie_dubbed": _min([x["movie_title"] for x in eligible]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing()
