# Generated by Mochi Python compiler
from __future__ import annotations

import json

company_type = None
info_type = None
title = None
movie_companies = None
movie_info = None
candidate_titles = None
result = None


def test_Q5_finds_the_lexicographically_first_qualifying_title():
    assert result == [{"typical_european_movie": "A Film"}]


def main():
    global company_type
    company_type = [
        {"ct_id": 1, "kind": "production companies"},
        {"ct_id": 2, "kind": "other"},
    ]
    global info_type
    info_type = [{"it_id": 10, "info": "languages"}]
    global title
    title = [
        {"t_id": 100, "title": "B Movie", "production_year": 2010},
        {"t_id": 200, "title": "A Film", "production_year": 2012},
        {"t_id": 300, "title": "Old Movie", "production_year": 2000},
    ]
    global movie_companies
    movie_companies = [
        {"movie_id": 100, "company_type_id": 1, "note": "ACME (France) (theatrical)"},
        {"movie_id": 200, "company_type_id": 1, "note": "ACME (France) (theatrical)"},
        {"movie_id": 300, "company_type_id": 1, "note": "ACME (France) (theatrical)"},
    ]
    global movie_info
    movie_info = [
        {"movie_id": 100, "info": "German", "info_type_id": 10},
        {"movie_id": 200, "info": "Swedish", "info_type_id": 10},
        {"movie_id": 300, "info": "German", "info_type_id": 10},
    ]
    global candidate_titles
    candidate_titles = _query(
        company_type,
        [
            {
                "items": movie_companies,
                "on": lambda ct, mc: ((mc["company_type_id"] == ct["ct_id"])),
            },
            {
                "items": movie_info,
                "on": lambda ct, mc, mi: ((mi["movie_id"] == mc["movie_id"])),
            },
            {
                "items": info_type,
                "on": lambda ct, mc, mi, it: ((it["it_id"] == mi["info_type_id"])),
            },
            {
                "items": title,
                "on": lambda ct, mc, mi, it, t: ((t["t_id"] == mc["movie_id"])),
            },
        ],
        {
            "select": lambda ct, mc, mi, it, t: t["title"],
            "where": lambda ct, mc, mi, it, t: (
                (
                    (
                        (
                            (
                                (ct["kind"] == "production companies")
                                and ("(theatrical)" in mc["note"])
                            )
                            and ("(France)" in mc["note"])
                        )
                        and (t["production_year"] > 2005)
                    )
                    and (
                        (
                            mi["info"]
                            in [
                                "Sweden",
                                "Norway",
                                "Germany",
                                "Denmark",
                                "Swedish",
                                "Denish",
                                "Norwegian",
                                "German",
                            ]
                        )
                    )
                )
            ),
        },
    )
    global result
    result = [{"typical_european_movie": _min(candidate_titles)}]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_Q5_finds_the_lexicographically_first_qualifying_title()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
