from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    first_company: str
    second_company: str
    first_rating: str
    second_rating: str
    first_movie: str
    second_movie: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    name: str
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    link: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    company_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    linked_movie_id: int
    link_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto9:
    id: int
    title: str
    kind_id: int
    production_year: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q33_finds_linked_TV_series_with_low_rated_sequel():
    assert result == [
        Auto1(
            first_company="US Studio",
            second_company="GB Studio",
            first_rating="7.0",
            second_rating="2.5",
            first_movie="Series A",
            second_movie="Series B",
        )
    ]


company_name = [
    Auto2(id=1, name="US Studio", country_code="[us]"),
    Auto2(id=2, name="GB Studio", country_code="[gb]"),
]
info_type = [Auto3(id=1, info="rating"), Auto3(id=2, info="other")]
kind_type = [Auto4(id=1, kind="tv series"), Auto4(id=2, kind="movie")]
link_type = [Auto5(id=1, link="follows"), Auto5(id=2, link="remake of")]
movie_companies = [Auto6(movie_id=10, company_id=1), Auto6(movie_id=20, company_id=2)]
movie_info_idx = [
    Auto7(movie_id=10, info_type_id=1, info="7.0"),
    Auto7(movie_id=20, info_type_id=1, info="2.5"),
]
movie_link = [Auto8(movie_id=10, linked_movie_id=20, link_type_id=1)]
title = [
    Auto9(id=10, title="Series A", kind_id=1, production_year=2004),
    Auto9(id=20, title="Series B", kind_id=1, production_year=2006),
]
rows = _query(
    company_name,
    [
        {
            "items": movie_companies,
            "on": lambda cn1, mc1: cn1["id"] == mc1["company_id"],
        },
        {"items": title, "on": lambda cn1, mc1, t1: t1["id"] == mc1["movie_id"]},
        {
            "items": movie_info_idx,
            "on": lambda cn1, mc1, t1, mi_idx1: mi_idx1["movie_id"] == t1["id"],
        },
        {
            "items": info_type,
            "on": lambda cn1, mc1, t1, mi_idx1, it1: it1["id"]
            == mi_idx1["info_type_id"],
        },
        {
            "items": kind_type,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1: kt1["id"] == t1["kind_id"],
        },
        {
            "items": movie_link,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml: ml["movie_id"]
            == t1["id"],
        },
        {
            "items": title,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2: t2["id"]
            == ml["linked_movie_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2: mi_idx2[
                "movie_id"
            ]
            == t2["id"],
        },
        {
            "items": info_type,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2: it2[
                "id"
            ]
            == mi_idx2["info_type_id"],
        },
        {
            "items": kind_type,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2: kt2[
                "id"
            ]
            == t2["kind_id"],
        },
        {
            "items": movie_companies,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2, mc2: mc2[
                "movie_id"
            ]
            == t2["id"],
        },
        {
            "items": company_name,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2, mc2, cn2: cn2[
                "id"
            ]
            == mc2["company_id"],
        },
        {
            "items": link_type,
            "on": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2, mc2, cn2, lt: lt[
                "id"
            ]
            == ml["link_type_id"],
        },
    ],
    {
        "select": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2, mc2, cn2, lt: Auto1(
            first_company=cn1["name"],
            second_company=cn2["name"],
            first_rating=mi_idx1["info"],
            second_rating=mi_idx2["info"],
            first_movie=t1["title"],
            second_movie=t2["title"],
        ),
        "where": lambda cn1, mc1, t1, mi_idx1, it1, kt1, ml, t2, mi_idx2, it2, kt2, mc2, cn2, lt: (
            (
                (
                    (
                        (
                            (
                                (
                                    cn1["country_code"] == "[us]"
                                    and it1["info"] == "rating"
                                )
                                and it2["info"] == "rating"
                            )
                            and kt1["kind"] == "tv series"
                        )
                        and kt2["kind"] == "tv series"
                    )
                    and (
                        (lt["link"] == "sequel" or lt["link"] == "follows")
                        or lt["link"] == "followed by"
                    )
                )
                and mi_idx2["info"] < "3.0"
            )
            and t2["production_year"] >= 2005
        )
        and t2["production_year"] <= 2008,
    },
)
result = [
    Auto1(
        first_company=_min([r.first_company for r in rows]),
        second_company=_min([r.second_company for r in rows]),
        first_rating=_min([r.first_rating for r in rows]),
        second_rating=_min([r.second_rating for r in rows]),
        first_movie=_min([r.first_movie for r in rows]),
        second_movie=_min([r.second_movie for r in rows]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q33_finds_linked_TV_series_with_low_rated_sequel()