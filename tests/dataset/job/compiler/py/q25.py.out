from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_budget: str
    movie_votes: int
    male_writer: str
    violent_movie_title: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    movie_id: int
    person_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto5:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto7:
    id: int
    name: str
    gender: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto8:
    id: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto9:
    budget: object
    votes: int
    writer: object
    title: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def test_Q25_finds_male_horror_writer_with_violent_keywords():
    assert result == [
        Auto1(
            movie_budget="Horror",
            movie_votes=100,
            male_writer="Mike",
            violent_movie_title="Scary Movie",
        )
    ]


cast_info = [
    Auto2(movie_id=1, person_id=1, note="(writer)"),
    Auto2(movie_id=2, person_id=2, note="(writer)"),
]
info_type = [Auto3(id=1, info="genres"), Auto3(id=2, info="votes")]
keyword = [Auto4(id=1, keyword="murder"), Auto4(id=2, keyword="romance")]
movie_info = [
    Auto5(movie_id=1, info_type_id=1, info="Horror"),
    Auto5(movie_id=2, info_type_id=1, info="Comedy"),
]
movie_info_idx = [
    Auto5(movie_id=1, info_type_id=2, info=100),
    Auto5(movie_id=2, info_type_id=2, info=50),
]
movie_keyword = [Auto6(movie_id=1, keyword_id=1), Auto6(movie_id=2, keyword_id=2)]
name = [Auto7(id=1, name="Mike", gender="m"), Auto7(id=2, name="Sue", gender="f")]
title = [Auto8(id=1, title="Scary Movie"), Auto8(id=2, title="Funny Movie")]
allowed_notes = [
    "(writer)",
    "(head writer)",
    "(written by)",
    "(story)",
    "(story editor)",
]
allowed_keywords = ["murder", "blood", "gore", "death", "female-nudity"]
matches = [
    Auto9(budget=mi["info"], votes=mi_idx["info"], writer=n["name"], title=t["title"])
    for ci in cast_info
    for it1 in info_type
    for it2 in info_type
    for k in keyword
    for mi in movie_info
    for mi_idx in movie_info_idx
    for mk in movie_keyword
    for n in name
    for t in title
    if (
        (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            ci["note"]
                                                                            in allowed_notes
                                                                            and it1[
                                                                                "info"
                                                                            ]
                                                                            == "genres"
                                                                        )
                                                                        and it2["info"]
                                                                        == "votes"
                                                                    )
                                                                    and k["keyword"]
                                                                    in allowed_keywords
                                                                )
                                                                and mi["info"]
                                                                == "Horror"
                                                            )
                                                            and n["gender"] == "m"
                                                        )
                                                        and t["id"] == mi["movie_id"]
                                                    )
                                                    and t["id"] == mi_idx["movie_id"]
                                                )
                                                and t["id"] == ci["movie_id"]
                                            )
                                            and t["id"] == mk["movie_id"]
                                        )
                                        and ci["movie_id"] == mi["movie_id"]
                                    )
                                    and ci["movie_id"] == mi_idx["movie_id"]
                                )
                                and ci["movie_id"] == mk["movie_id"]
                            )
                            and mi["movie_id"] == mi_idx["movie_id"]
                        )
                        and mi["movie_id"] == mk["movie_id"]
                    )
                    and mi_idx["movie_id"] == mk["movie_id"]
                )
                and n["id"] == ci["person_id"]
            )
            and it1["id"] == mi["info_type_id"]
        )
        and it2["id"] == mi_idx["info_type_id"]
    )
    and k["id"] == mk["keyword_id"]
]
result = [
    Auto1(
        movie_budget=_min([x.budget for x in matches]),
        movie_votes=(
            min([it for it in [x.votes for x in matches] if it is not None])
            if [x.votes for x in matches]
            else 0
        ),
        male_writer=_min([x.writer for x in matches]),
        violent_movie_title=_min([x.title for x in matches]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q25_finds_male_horror_writer_with_violent_keywords()