# Generated by Mochi Python compiler
from __future__ import annotations

import json

keyword = None
movie_info = None
movie_keyword = None
title = None
allowed_infos = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Denish",
    "Norwegian",
    "German",
]
candidate_titles = None
result = None


def test_Q3_returns_lexicographically_smallest_sequel_title():
    assert result == [{"movie_title": "Alpha"}]


def main():
    global keyword
    keyword = [{"id": 1, "keyword": "amazing sequel"}, {"id": 2, "keyword": "prequel"}]
    global movie_info
    movie_info = [
        {"movie_id": 10, "info": "Germany"},
        {"movie_id": 30, "info": "Sweden"},
        {"movie_id": 20, "info": "France"},
    ]
    global movie_keyword
    movie_keyword = [
        {"movie_id": 10, "keyword_id": 1},
        {"movie_id": 30, "keyword_id": 1},
        {"movie_id": 20, "keyword_id": 1},
        {"movie_id": 10, "keyword_id": 2},
    ]
    global title
    title = [
        {"id": 10, "title": "Alpha", "production_year": 2006},
        {"id": 30, "title": "Beta", "production_year": 2008},
        {"id": 20, "title": "Gamma", "production_year": 2009},
    ]
    global allowed_infos
    allowed_infos = [
        "Sweden",
        "Norway",
        "Germany",
        "Denmark",
        "Swedish",
        "Denish",
        "Norwegian",
        "German",
    ]
    global candidate_titles
    candidate_titles = _query(
        keyword,
        [
            {
                "items": movie_keyword,
                "on": lambda k, mk: ((mk["keyword_id"] == k["id"])),
            },
            {
                "items": movie_info,
                "on": lambda k, mk, mi: ((mi["movie_id"] == mk["movie_id"])),
            },
            {"items": title, "on": lambda k, mk, mi, t: ((t["id"] == mi["movie_id"]))},
        ],
        {
            "select": lambda k, mk, mi, t: t["title"],
            "where": lambda k, mk, mi, t: (
                (
                    (
                        (("sequel" in k["keyword"]) and (mi["info"] in allowed_infos))
                        and (t["production_year"] > 2005)
                    )
                    and (mk["movie_id"] == mi["movie_id"])
                )
            ),
        },
    )
    global result
    result = [{"movie_title": _min(candidate_titles)}]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_Q3_returns_lexicographically_smallest_sequel_title()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
