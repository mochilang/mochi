# Generated by Mochi Python compiler
from __future__ import annotations

import json

aka_name = None
cast_info = None
info_type = None
link_type = None
movie_link = None
name = None
person_info = None
title = None
rows = None
result = None


def test_Q7_finds_movie_features_biography_for_person():
    assert result == [{"of_person": "Alan Brown", "biography_movie": "Feature Film"}]


def main():
    global aka_name
    aka_name = [{"person_id": 1, "name": "Anna Mae"}, {"person_id": 2, "name": "Chris"}]
    global cast_info
    cast_info = [{"person_id": 1, "movie_id": 10}, {"person_id": 2, "movie_id": 20}]
    global info_type
    info_type = [{"id": 1, "info": "mini biography"}, {"id": 2, "info": "trivia"}]
    global link_type
    link_type = [{"id": 1, "link": "features"}, {"id": 2, "link": "references"}]
    global movie_link
    movie_link = [
        {"linked_movie_id": 10, "link_type_id": 1},
        {"linked_movie_id": 20, "link_type_id": 2},
    ]
    global name
    name = [
        {"id": 1, "name": "Alan Brown", "name_pcode_cf": "B", "gender": "m"},
        {"id": 2, "name": "Zoe", "name_pcode_cf": "Z", "gender": "f"},
    ]
    global person_info
    person_info = [
        {"person_id": 1, "info_type_id": 1, "note": "Volker Boehm"},
        {"person_id": 2, "info_type_id": 1, "note": "Other"},
    ]
    global title
    title = [
        {"id": 10, "title": "Feature Film", "production_year": 1990},
        {"id": 20, "title": "Late Film", "production_year": 2000},
    ]
    global rows
    rows = _query(
        aka_name,
        [
            {"items": name, "on": lambda an, n: ((n["id"] == an["person_id"]))},
            {
                "items": person_info,
                "on": lambda an, n, pi: ((pi["person_id"] == an["person_id"])),
            },
            {
                "items": info_type,
                "on": lambda an, n, pi, it: ((it["id"] == pi["info_type_id"])),
            },
            {
                "items": cast_info,
                "on": lambda an, n, pi, it, ci: ((ci["person_id"] == n["id"])),
            },
            {
                "items": title,
                "on": lambda an, n, pi, it, ci, t: ((t["id"] == ci["movie_id"])),
            },
            {
                "items": movie_link,
                "on": lambda an, n, pi, it, ci, t, ml: (
                    (ml["linked_movie_id"] == t["id"])
                ),
            },
            {
                "items": link_type,
                "on": lambda an, n, pi, it, ci, t, ml, lt: (
                    (lt["id"] == ml["link_type_id"])
                ),
            },
        ],
        {
            "select": lambda an, n, pi, it, ci, t, ml, lt: {
                "person_name": n["name"],
                "movie_title": t["title"],
            },
            "where": lambda an, n, pi, it, ci, t, ml, lt: (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    ("a" in an["name"])
                                                                    and (
                                                                        it["info"]
                                                                        == "mini biography"
                                                                    )
                                                                )
                                                                and (
                                                                    lt["link"]
                                                                    == "features"
                                                                )
                                                            )
                                                            and (
                                                                n["name_pcode_cf"]
                                                                >= "A"
                                                            )
                                                        )
                                                        and (n["name_pcode_cf"] <= "F")
                                                    )
                                                    and (
                                                        (
                                                            (n["gender"] == "m")
                                                            or (
                                                                (
                                                                    (n["gender"] == "f")
                                                                    and n[
                                                                        "name"
                                                                    ].starts_with("B")
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                and (pi["note"] == "Volker Boehm")
                                            )
                                            and (t["production_year"] >= 1980)
                                        )
                                        and (t["production_year"] <= 1995)
                                    )
                                    and (pi["person_id"] == an["person_id"])
                                )
                                and (pi["person_id"] == ci["person_id"])
                            )
                            and (an["person_id"] == ci["person_id"])
                        )
                        and (ci["movie_id"] == ml["linked_movie_id"])
                    )
                )
            ),
        },
    )
    global result
    result = [
        {
            "of_person": _min([r["person_name"] for r in rows]),
            "biography_movie": _min([r["movie_title"] for r in rows]),
        }
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_Q7_finds_movie_features_biography_for_person()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
