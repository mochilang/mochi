# Generated by Mochi Python compiler
from __future__ import annotations

aka_name = None
cast_info = None
company_name = None
movie_companies = None
name = None
role_type = None
title = None
eligible = None
result = None


def test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing():
    assert result == [
        {"actress_pseudonym": "Y. S.", "japanese_movie_dubbed": "Dubbed Film"}
    ]


def main():
    global aka_name
    aka_name = [{"person_id": 1, "name": "Y. S."}]
    global cast_info
    cast_info = [
        {
            "person_id": 1,
            "movie_id": 10,
            "note": "(voice: English version)",
            "role_id": 1000,
        }
    ]
    global company_name
    company_name = [{"id": 50, "country_code": "[jp]"}]
    global movie_companies
    movie_companies = [{"movie_id": 10, "company_id": 50, "note": "Studio (Japan)"}]
    global name
    name = [{"id": 1, "name": "Yoko Ono"}, {"id": 2, "name": "Yuichi"}]
    global role_type
    role_type = [{"id": 1000, "role": "actress"}]
    global title
    title = [{"id": 10, "title": "Dubbed Film"}]
    global eligible
    eligible = _query(
        aka_name,
        [
            {"items": name, "on": lambda an1, n1: ((n1["id"] == an1["person_id"]))},
            {
                "items": cast_info,
                "on": lambda an1, n1, ci: ((ci["person_id"] == an1["person_id"])),
            },
            {
                "items": title,
                "on": lambda an1, n1, ci, t: ((t["id"] == ci["movie_id"])),
            },
            {
                "items": movie_companies,
                "on": lambda an1, n1, ci, t, mc: ((mc["movie_id"] == ci["movie_id"])),
            },
            {
                "items": company_name,
                "on": lambda an1, n1, ci, t, mc, cn: ((cn["id"] == mc["company_id"])),
            },
            {
                "items": role_type,
                "on": lambda an1, n1, ci, t, mc, cn, rt: ((rt["id"] == ci["role_id"])),
            },
        ],
        {
            "select": lambda an1, n1, ci, t, mc, cn, rt: {
                "pseudonym": an1["name"],
                "movie_title": t["title"],
            },
            "where": lambda an1, n1, ci, t, mc, cn, rt: (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (ci["note"] == "(voice: English version)")
                                        and (cn["country_code"] == "[jp]")
                                    )
                                    and ("(Japan)" in mc["note"])
                                )
                                and ((not ("(USA)" in mc["note"])))
                            )
                            and ("Yo" in n1["name"])
                        )
                        and ((not ("Yu" in n1["name"])))
                    )
                    and (rt["role"] == "actress")
                )
            ),
        },
    )
    global result
    result = [
        {
            "actress_pseudonym": _min([x["pseudonym"] for x in eligible]),
            "japanese_movie_dubbed": _min([x["movie_title"] for x in eligible]),
        }
    ]
    print(*result)
    test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
