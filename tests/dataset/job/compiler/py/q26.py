# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:32Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    character_name: str
    rating: float
    playing_actor: str
    complete_hero_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    id: int
    kind_id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto11:
    character: object
    rating: object
    actor: object
    movie: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    movie_id: int
    subject_id: int
    status_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    movie_id: int
    person_role_id: int
    person_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    info_type_id: int
    info: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q26_finds_hero_movies_with_rating_above_7():
    assert result == [
        Auto1(
            character_name="Spider-Man",
            rating=8.5,
            playing_actor="Actor One",
            complete_hero_movie="Hero Movie",
        )
    ]


complete_cast = [
    Auto2(movie_id=1, subject_id=1, status_id=2),
    Auto2(movie_id=2, subject_id=1, status_id=2),
]
comp_cast_type = [Auto3(id=1, kind="cast"), Auto3(id=2, kind="complete")]
char_name = [Auto4(id=1, name="Spider-Man"), Auto4(id=2, name="Villain")]
cast_info = [
    Auto5(movie_id=1, person_role_id=1, person_id=1),
    Auto5(movie_id=2, person_role_id=2, person_id=2),
]
info_type = [Auto6(id=1, info="rating")]
keyword = [Auto7(id=1, keyword="superhero"), Auto7(id=2, keyword="comedy")]
kind_type = [Auto3(id=1, kind="movie")]
movie_info_idx = [
    Auto8(movie_id=1, info_type_id=1, info=8.5),
    Auto8(movie_id=2, info_type_id=1, info=6.5),
]
movie_keyword = [Auto9(movie_id=1, keyword_id=1), Auto9(movie_id=2, keyword_id=2)]
name = [Auto4(id=1, name="Actor One"), Auto4(id=2, name="Actor Two")]
title = [
    Auto10(id=1, kind_id=1, production_year=2005, title="Hero Movie"),
    Auto10(id=2, kind_id=1, production_year=1999, title="Old Film"),
]
allowed_keywords = [
    "superhero",
    "marvel-comics",
    "based-on-comic",
    "tv-special",
    "fight",
    "violence",
    "magnet",
    "web",
    "claw",
    "laser",
]
rows = _query(
    complete_cast,
    [
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1: cct1["id"] == cc["subject_id"],
        },
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1, cct2: cct2["id"] == cc["status_id"],
        },
        {
            "items": cast_info,
            "on": lambda cc, cct1, cct2, ci: ci["movie_id"] == cc["movie_id"],
        },
        {
            "items": char_name,
            "on": lambda cc, cct1, cct2, ci, chn: chn["id"] == ci["person_role_id"],
        },
        {
            "items": name,
            "on": lambda cc, cct1, cct2, ci, chn, n: n["id"] == ci["person_id"],
        },
        {
            "items": title,
            "on": lambda cc, cct1, cct2, ci, chn, n, t: t["id"] == ci["movie_id"],
        },
        {
            "items": kind_type,
            "on": lambda cc, cct1, cct2, ci, chn, n, t, kt: kt["id"] == t["kind_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk: mk["movie_id"]
            == t["id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk, k: k["id"]
            == mk["keyword_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk, k, mi_idx: mi_idx[
                "movie_id"
            ]
            == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk, k, mi_idx, it2: it2[
                "id"
            ]
            == mi_idx["info_type_id"],
        },
    ],
    {
        "select": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk, k, mi_idx, it2: Auto11(
            character=chn["name"],
            rating=mi_idx["info"],
            actor=n["name"],
            movie=t["title"],
        ),
        "where": lambda cc, cct1, cct2, ci, chn, n, t, kt, mk, k, mi_idx, it2: (
            (
                (
                    (
                        (
                            (
                                (cct1["kind"] == "cast" and "complete" in cct2["kind"])
                                and chn["name"] != None
                            )
                            and ("man" in chn["name"] or "Man" in chn["name"])
                        )
                        and it2["info"] == "rating"
                    )
                    and k["keyword"] in allowed_keywords
                )
                and kt["kind"] == "movie"
            )
            and mi_idx["info"] > 7.0
        )
        and t["production_year"] > 2000,
    },
)
result = [
    Auto1(
        character_name=_min([r.character for r in rows]),
        rating=_min([r.rating for r in rows]),
        playing_actor=_min([r.actor for r in rows]),
        complete_hero_movie=_min([r.movie for r in rows]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q26_finds_hero_movies_with_rating_above_7()
