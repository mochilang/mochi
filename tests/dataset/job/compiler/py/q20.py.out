from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q20_finds_complete_cast_Iron_Man_movie():
    assert result == [{"complete_downey_ironman_movie": "Iron Man"}]


comp_cast_type = [{"id": 1, "kind": "cast"}, {"id": 2, "kind": "complete cast"}]
char_name = [{"id": 1, "name": "Tony Stark"}, {"id": 2, "name": "Sherlock Holmes"}]
complete_cast = [
    {"movie_id": 1, "subject_id": 1, "status_id": 2},
    {"movie_id": 2, "subject_id": 1, "status_id": 2},
]
name = [{"id": 1, "name": "Robert Downey Jr."}, {"id": 2, "name": "Another Actor"}]
cast_info = [
    {"movie_id": 1, "person_role_id": 1, "person_id": 1},
    {"movie_id": 2, "person_role_id": 2, "person_id": 2},
]
keyword = [{"id": 10, "keyword": "superhero"}, {"id": 20, "keyword": "romance"}]
movie_keyword = [{"movie_id": 1, "keyword_id": 10}, {"movie_id": 2, "keyword_id": 20}]
kind_type = [{"id": 1, "kind": "movie"}]
title = [
    {"id": 1, "kind_id": 1, "production_year": 2008, "title": "Iron Man"},
    {"id": 2, "kind_id": 1, "production_year": 1940, "title": "Old Hero"},
]
matches = _query(
    complete_cast,
    [
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1: cct1["id"] == cc["subject_id"],
        },
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1, cct2: cct2["id"] == cc["status_id"],
        },
        {
            "items": cast_info,
            "on": lambda cc, cct1, cct2, ci: ci["movie_id"] == cc["movie_id"],
        },
        {
            "items": char_name,
            "on": lambda cc, cct1, cct2, ci, chn: chn["id"] == ci["person_role_id"],
        },
        {
            "items": name,
            "on": lambda cc, cct1, cct2, ci, chn, n: n["id"] == ci["person_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, cct2, ci, chn, n, mk: mk["movie_id"]
            == cc["movie_id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, cct2, ci, chn, n, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": title,
            "on": lambda cc, cct1, cct2, ci, chn, n, mk, k, t: t["id"]
            == cc["movie_id"],
        },
        {
            "items": kind_type,
            "on": lambda cc, cct1, cct2, ci, chn, n, mk, k, t, kt: kt["id"]
            == t["kind_id"],
        },
    ],
    {
        "select": lambda cc, cct1, cct2, ci, chn, n, mk, k, t, kt: t["title"],
        "where": lambda cc, cct1, cct2, ci, chn, n, mk, k, t, kt: (
            (
                (
                    (
                        (cct1["kind"] == "cast" and "complete" in cct2["kind"])
                        and (not "Sherlock" in chn["name"])
                    )
                    and ("Tony Stark" in chn["name"] or "Iron Man" in chn["name"])
                )
                and k["keyword"]
                in [
                    "superhero",
                    "sequel",
                    "second-part",
                    "marvel-comics",
                    "based-on-comic",
                    "tv-special",
                    "fight",
                    "violence",
                ]
            )
            and kt["kind"] == "movie"
        )
        and t["production_year"] > 1950,
    },
)
result = [{"complete_downey_ironman_movie": _min(matches)}]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q20_finds_complete_cast_Iron_Man_movie()