from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_budget: str
    movie_votes: int
    writer: str
    complete_violent_movie: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto10:
    id: int
    title: str
    production_year: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto11:
    budget: object
    votes: int
    writer: object
    movie: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    movie_id: int
    subject_id: int
    status_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto4:
    movie_id: int
    person_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto9:
    id: int
    name: str
    gender: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q30_finds_violent_horror_thriller_movies_with_male_writer():
    assert result == [
        Auto1(
            movie_budget="Horror",
            movie_votes=2000,
            writer="John Writer",
            complete_violent_movie="Violent Horror",
        )
    ]


comp_cast_type = [
    Auto2(id=1, kind="cast"),
    Auto2(id=2, kind="complete+verified"),
    Auto2(id=3, kind="crew"),
]
complete_cast = [
    Auto3(movie_id=1, subject_id=1, status_id=2),
    Auto3(movie_id=2, subject_id=3, status_id=2),
]
cast_info = [
    Auto4(movie_id=1, person_id=10, note="(writer)"),
    Auto4(movie_id=2, person_id=11, note="(actor)"),
]
info_type = [Auto5(id=1, info="genres"), Auto5(id=2, info="votes")]
keyword = [Auto6(id=1, keyword="murder"), Auto6(id=2, keyword="comedy")]
movie_info = [
    Auto7(movie_id=1, info_type_id=1, info="Horror"),
    Auto7(movie_id=2, info_type_id=1, info="Comedy"),
]
movie_info_idx = [
    Auto7(movie_id=1, info_type_id=2, info=2000),
    Auto7(movie_id=2, info_type_id=2, info=150),
]
movie_keyword = [Auto8(movie_id=1, keyword_id=1), Auto8(movie_id=2, keyword_id=2)]
name = [
    Auto9(id=10, name="John Writer", gender="m"),
    Auto9(id=11, name="Jane Actor", gender="f"),
]
title = [
    Auto10(id=1, title="Violent Horror", production_year=2005),
    Auto10(id=2, title="Old Comedy", production_year=1995),
]
violent_keywords = [
    "murder",
    "violence",
    "blood",
    "gore",
    "death",
    "female-nudity",
    "hospital",
]
writer_notes = [
    "(writer)",
    "(head writer)",
    "(written by)",
    "(story)",
    "(story editor)",
]
matches = _query(
    complete_cast,
    [
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1: cct1["id"] == cc["subject_id"],
        },
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1, cct2: cct2["id"] == cc["status_id"],
        },
        {
            "items": cast_info,
            "on": lambda cc, cct1, cct2, ci: ci["movie_id"] == cc["movie_id"],
        },
        {
            "items": movie_info,
            "on": lambda cc, cct1, cct2, ci, mi: mi["movie_id"] == cc["movie_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx: mi_idx["movie_id"]
            == cc["movie_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk: mk["movie_id"]
            == cc["movie_id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1: it1["id"]
            == mi["info_type_id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2, k: k["id"]
            == mk["keyword_id"],
        },
        {
            "items": name,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2, k, n: n["id"]
            == ci["person_id"],
        },
        {
            "items": title,
            "on": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2, k, n, t: t["id"]
            == cc["movie_id"],
        },
    ],
    {
        "select": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2, k, n, t: Auto11(
            budget=mi["info"], votes=mi_idx["info"], writer=n["name"], movie=t["title"]
        ),
        "where": lambda cc, cct1, cct2, ci, mi, mi_idx, mk, it1, it2, k, n, t: (
            (
                (
                    (
                        (
                            (
                                (
                                    cct1["kind"] in ["cast", "crew"]
                                    and cct2["kind"] == "complete+verified"
                                )
                                and ci["note"] in writer_notes
                            )
                            and it1["info"] == "genres"
                        )
                        and it2["info"] == "votes"
                    )
                    and k["keyword"] in violent_keywords
                )
                and mi["info"] in ["Horror", "Thriller"]
            )
            and n["gender"] == "m"
        )
        and t["production_year"] > 2000,
    },
)
result = [
    Auto1(
        movie_budget=_min([x.budget for x in matches]),
        movie_votes=(
            min([it for it in [x.votes for x in matches] if it is not None])
            if [x.votes for x in matches]
            else 0
        ),
        writer=_min([x.writer for x in matches]),
        complete_violent_movie=_min([x.movie for x in matches]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q30_finds_violent_horror_thriller_movies_with_male_writer()