from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def test_Q13_finds_earliest_German_movie_info():
    assert result == {
        "release_date": "1997-05-10",
        "rating": "6.0",
        "german_movie": "Alpha",
    }


company_name = [{"id": 1, "country_code": "[de]"}, {"id": 2, "country_code": "[us]"}]
company_type = [
    {"id": 1, "kind": "production companies"},
    {"id": 2, "kind": "distributors"},
]
info_type = [{"id": 1, "info": "rating"}, {"id": 2, "info": "release dates"}]
kind_type = [{"id": 1, "kind": "movie"}, {"id": 2, "kind": "video"}]
title = [
    {"id": 10, "kind_id": 1, "title": "Alpha"},
    {"id": 20, "kind_id": 1, "title": "Beta"},
    {"id": 30, "kind_id": 2, "title": "Gamma"},
]
movie_companies = [
    {"movie_id": 10, "company_id": 1, "company_type_id": 1},
    {"movie_id": 20, "company_id": 1, "company_type_id": 1},
    {"movie_id": 30, "company_id": 2, "company_type_id": 1},
]
movie_info = [
    {"movie_id": 10, "info_type_id": 2, "info": "1997-05-10"},
    {"movie_id": 20, "info_type_id": 2, "info": "1998-03-20"},
    {"movie_id": 30, "info_type_id": 2, "info": "1999-07-30"},
]
movie_info_idx = [
    {"movie_id": 10, "info_type_id": 1, "info": "6.0"},
    {"movie_id": 20, "info_type_id": 1, "info": "7.5"},
    {"movie_id": 30, "info_type_id": 1, "info": "5.5"},
]
candidates = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: mc["company_id"] == cn["id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {"items": kind_type, "on": lambda cn, mc, ct, t, kt: kt["id"] == t["kind_id"]},
        {
            "items": movie_info,
            "on": lambda cn, mc, ct, t, kt, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, kt, mi, it2: it2["id"] == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn, mc, ct, t, kt, mi, it2, miidx: miidx["movie_id"]
            == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: it["id"]
            == miidx["info_type_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: {
            "release_date": mi["info"],
            "rating": miidx["info"],
            "german_movie": t["title"],
        },
        "where": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: (
            (
                (cn["country_code"] == "[de]" and ct["kind"] == "production companies")
                and it["info"] == "rating"
            )
            and it2["info"] == "release dates"
        )
        and kt["kind"] == "movie",
    },
)
result = {
    "release_date": [
        x["release_date"]
        for x in sorted(
            [x for x in candidates], key=lambda x: _sort_key(x["release_date"])
        )
    ][0],
    "rating": [
        x["rating"]
        for x in sorted([x for x in candidates], key=lambda x: _sort_key(x["rating"]))
    ][0],
    "german_movie": [
        x["german_movie"]
        for x in sorted(
            [x for x in candidates], key=lambda x: _sort_key(x["german_movie"])
        )
    ][0],
}
print(json.dumps(result, default=lambda o: vars(o)))
test_Q13_finds_earliest_German_movie_info()