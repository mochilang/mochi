# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:37Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    link_type: str
    first_movie: str
    second_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    link: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    movie_id: int
    linked_movie_id: int
    link_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q32_finds_movie_link_for_10_000_mile_club():
    assert result == Auto1(
        link_type="sequel", first_movie="Movie A", second_movie="Movie C"
    )


keyword = [
    Auto2(id=1, keyword="10,000-mile-club"),
    Auto2(id=2, keyword="character-name-in-title"),
]
link_type = [Auto3(id=1, link="sequel"), Auto3(id=2, link="remake")]
movie_keyword = [Auto4(movie_id=100, keyword_id=1), Auto4(movie_id=200, keyword_id=2)]
movie_link = [
    Auto5(movie_id=100, linked_movie_id=300, link_type_id=1),
    Auto5(movie_id=200, linked_movie_id=400, link_type_id=2),
]
title = [
    Auto6(id=100, title="Movie A"),
    Auto6(id=200, title="Movie B"),
    Auto6(id=300, title="Movie C"),
    Auto6(id=400, title="Movie D"),
]
joined = _query(
    keyword,
    [
        {"items": movie_keyword, "on": lambda k, mk: mk["keyword_id"] == k["id"]},
        {"items": title, "on": lambda k, mk, t1: t1["id"] == mk["movie_id"]},
        {"items": movie_link, "on": lambda k, mk, t1, ml: ml["movie_id"] == t1["id"]},
        {
            "items": title,
            "on": lambda k, mk, t1, ml, t2: t2["id"] == ml["linked_movie_id"],
        },
        {
            "items": link_type,
            "on": lambda k, mk, t1, ml, t2, lt: lt["id"] == ml["link_type_id"],
        },
    ],
    {
        "select": lambda k, mk, t1, ml, t2, lt: Auto1(
            link_type=lt["link"], first_movie=t1["title"], second_movie=t2["title"]
        ),
        "where": lambda k, mk, t1, ml, t2, lt: k["keyword"] == "10,000-mile-club",
    },
)
result = Auto1(
    link_type=_min([r.link_type for r in joined]),
    first_movie=_min([r.first_movie for r in joined]),
    second_movie=_min([r.second_movie for r in joined]),
)
print(json.dumps([result], separators=(",", ":"), default=lambda o: vars(o)))
test_Q32_finds_movie_link_for_10_000_mile_club()
