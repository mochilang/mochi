from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009():
    assert result == [
        {"voicing_actress": "Angela Stone", "voiced_movie": "Voiced Movie"}
    ]


aka_name = [{"person_id": 1, "name": "A. Stone"}, {"person_id": 2, "name": "J. Doe"}]
char_name = [{"id": 1, "name": "Protagonist"}, {"id": 2, "name": "Extra"}]
cast_info = [
    {
        "movie_id": 1,
        "person_role_id": 1,
        "person_id": 1,
        "role_id": 1,
        "note": "(voice)",
    },
    {"movie_id": 2, "person_role_id": 2, "person_id": 2, "role_id": 2, "note": "Cameo"},
]
company_name = [{"id": 10, "country_code": "[us]"}, {"id": 20, "country_code": "[gb]"}]
info_type = [{"id": 100, "info": "release dates"}]
movie_companies = [
    {"movie_id": 1, "company_id": 10, "note": "Studio (USA)"},
    {"movie_id": 2, "company_id": 20, "note": "Other (worldwide)"},
]
movie_info = [
    {"movie_id": 1, "info_type_id": 100, "info": "USA: June 2006"},
    {"movie_id": 2, "info_type_id": 100, "info": "UK: 1999"},
]
name = [
    {"id": 1, "name": "Angela Stone", "gender": "f"},
    {"id": 2, "name": "Bob Angstrom", "gender": "m"},
]
role_type = [{"id": 1, "role": "actress"}, {"id": 2, "role": "actor"}]
title = [
    {"id": 1, "title": "Voiced Movie", "production_year": 2006},
    {"id": 2, "title": "Other Movie", "production_year": 2010},
]
matches = _query(
    aka_name,
    [
        {"items": name, "on": lambda an, n: n["id"] == an["person_id"]},
        {
            "items": cast_info,
            "on": lambda an, n, ci: ci["person_id"] == an["person_id"],
        },
        {
            "items": char_name,
            "on": lambda an, n, ci, chn: chn["id"] == ci["person_role_id"],
        },
        {
            "items": role_type,
            "on": lambda an, n, ci, chn, rt: rt["id"] == ci["role_id"],
        },
        {"items": title, "on": lambda an, n, ci, chn, rt, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_companies,
            "on": lambda an, n, ci, chn, rt, t, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda an, n, ci, chn, rt, t, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": movie_info,
            "on": lambda an, n, ci, chn, rt, t, mc, cn, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: it["id"]
            == mi["info_type_id"],
        },
    ],
    {
        "select": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: {
            "actress": n["name"],
            "movie": t["title"],
        },
        "where": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                ci["note"]
                                                in [
                                                    "(voice)",
                                                    "(voice: Japanese version)",
                                                    "(voice) (uncredited)",
                                                    "(voice: English version)",
                                                ]
                                                and cn["country_code"] == "[us]"
                                            )
                                            and it["info"] == "release dates"
                                        )
                                        and mc["note"] != None
                                    )
                                    and (
                                        "(USA)" in mc["note"]
                                        or "(worldwide)" in mc["note"]
                                    )
                                )
                                and mi["info"] != None
                            )
                            and (
                                "Japan:" in mi["info"]
                                and "200" in mi["info"]
                                or ("USA:" in mi["info"] and "200" in mi["info"])
                            )
                        )
                        and n["gender"] == "f"
                    )
                    and "Ang" in n["name"]
                )
                and rt["role"] == "actress"
            )
            and t["production_year"] >= 2005
        )
        and t["production_year"] <= 2009,
    },
)
result = [
    {
        "voicing_actress": _min([r["actress"] for r in matches]),
        "voiced_movie": _min([r["movie"] for r in matches]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009()