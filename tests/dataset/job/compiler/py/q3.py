# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:12Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    movie_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    title: str
    production_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q3_returns_lexicographically_smallest_sequel_title():
    assert result == [Auto1(movie_title="Alpha")]


keyword = [Auto2(id=1, keyword="amazing sequel"), Auto2(id=2, keyword="prequel")]
movie_info = [
    Auto3(movie_id=10, info="Germany"),
    Auto3(movie_id=30, info="Sweden"),
    Auto3(movie_id=20, info="France"),
]
movie_keyword = [
    Auto4(movie_id=10, keyword_id=1),
    Auto4(movie_id=30, keyword_id=1),
    Auto4(movie_id=20, keyword_id=1),
    Auto4(movie_id=10, keyword_id=2),
]
title = [
    Auto5(id=10, title="Alpha", production_year=2006),
    Auto5(id=30, title="Beta", production_year=2008),
    Auto5(id=20, title="Gamma", production_year=2009),
]
allowed_infos = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Denish",
    "Norwegian",
    "German",
]
candidate_titles = _query(
    keyword,
    [
        {"items": movie_keyword, "on": lambda k, mk: mk["keyword_id"] == k["id"]},
        {"items": movie_info, "on": lambda k, mk, mi: mi["movie_id"] == mk["movie_id"]},
        {"items": title, "on": lambda k, mk, mi, t: t["id"] == mi["movie_id"]},
    ],
    {
        "select": lambda k, mk, mi, t: t["title"],
        "where": lambda k, mk, mi, t: (
            ("sequel" in k["keyword"] and mi["info"] in allowed_infos)
            and t["production_year"] > 2005
        )
        and mk["movie_id"] == mi["movie_id"],
    },
)
result = [Auto1(movie_title=_min(candidate_titles))]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q3_returns_lexicographically_smallest_sequel_title()
