# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:28Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_company: str
    rating: float
    western_violent_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    company: object
    rating: object
    title: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    name: str
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    company_id: int
    company_type_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    id: int
    kind_id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q22_finds_western_violent_movie_with_low_rating():
    assert result == [
        Auto1(
            movie_company="Euro Films",
            rating=6.5,
            western_violent_movie="Violent Western",
        )
    ]


company_name = [
    Auto2(id=1, name="Euro Films", country_code="[de]"),
    Auto2(id=2, name="US Films", country_code="[us]"),
]
company_type = [Auto3(id=1, kind="production")]
info_type = [Auto4(id=10, info="countries"), Auto4(id=20, info="rating")]
keyword = [Auto5(id=1, keyword="murder"), Auto5(id=2, keyword="comedy")]
kind_type = [Auto3(id=100, kind="movie"), Auto3(id=200, kind="episode")]
movie_companies = [
    Auto6(
        movie_id=10, company_id=1, company_type_id=1, note="release (2009) (worldwide)"
    ),
    Auto6(movie_id=20, company_id=2, company_type_id=1, note="release (2007) (USA)"),
]
movie_info = [
    Auto7(movie_id=10, info_type_id=10, info="Germany"),
    Auto7(movie_id=20, info_type_id=10, info="USA"),
]
movie_info_idx = [
    Auto7(movie_id=10, info_type_id=20, info=6.5),
    Auto7(movie_id=20, info_type_id=20, info=7.8),
]
movie_keyword = [Auto8(movie_id=10, keyword_id=1), Auto8(movie_id=20, keyword_id=2)]
title = [
    Auto9(id=10, kind_id=100, production_year=2009, title="Violent Western"),
    Auto9(id=20, kind_id=100, production_year=2007, title="Old Western"),
]
rows = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: cn["id"] == mc["company_id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {
            "items": movie_keyword,
            "on": lambda cn, mc, ct, t, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda cn, mc, ct, t, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_info,
            "on": lambda cn, mc, ct, t, mk, k, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mk, k, mi, it1: it1["id"] == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn, mc, ct, t, mk, k, mi, it1, mi_idx: mi_idx["movie_id"]
            == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mk, k, mi, it1, mi_idx, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
        {
            "items": kind_type,
            "on": lambda cn, mc, ct, t, mk, k, mi, it1, mi_idx, it2, kt: kt["id"]
            == t["kind_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, mk, k, mi, it1, mi_idx, it2, kt: Auto10(
            company=cn["name"], rating=mi_idx["info"], title=t["title"]
        ),
        "where": lambda cn, mc, ct, t, mk, k, mi, it1, mi_idx, it2, kt: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            (
                                                                                (
                                                                                    (
                                                                                        (
                                                                                            (
                                                                                                (
                                                                                                    (
                                                                                                        cn[
                                                                                                            "country_code"
                                                                                                        ]
                                                                                                        != "[us]"
                                                                                                        and it1[
                                                                                                            "info"
                                                                                                        ]
                                                                                                        == "countries"
                                                                                                    )
                                                                                                    and it2[
                                                                                                        "info"
                                                                                                    ]
                                                                                                    == "rating"
                                                                                                )
                                                                                                and (
                                                                                                    (
                                                                                                        (
                                                                                                            k[
                                                                                                                "keyword"
                                                                                                            ]
                                                                                                            == "murder"
                                                                                                            or k[
                                                                                                                "keyword"
                                                                                                            ]
                                                                                                            == "murder-in-title"
                                                                                                        )
                                                                                                        or k[
                                                                                                            "keyword"
                                                                                                        ]
                                                                                                        == "blood"
                                                                                                    )
                                                                                                    or k[
                                                                                                        "keyword"
                                                                                                    ]
                                                                                                    == "violence"
                                                                                                )
                                                                                            )
                                                                                            and (
                                                                                                kt[
                                                                                                    "kind"
                                                                                                ]
                                                                                                == "movie"
                                                                                                or kt[
                                                                                                    "kind"
                                                                                                ]
                                                                                                == "episode"
                                                                                            )
                                                                                        )
                                                                                        and (
                                                                                            "(USA)"
                                                                                            in mc[
                                                                                                "note"
                                                                                            ]
                                                                                        )
                                                                                        == False
                                                                                    )
                                                                                    and "(200"
                                                                                    in mc[
                                                                                        "note"
                                                                                    ]
                                                                                )
                                                                                and (
                                                                                    (
                                                                                        (
                                                                                            mi[
                                                                                                "info"
                                                                                            ]
                                                                                            == "Germany"
                                                                                            or mi[
                                                                                                "info"
                                                                                            ]
                                                                                            == "German"
                                                                                        )
                                                                                        or mi[
                                                                                            "info"
                                                                                        ]
                                                                                        == "USA"
                                                                                    )
                                                                                    or mi[
                                                                                        "info"
                                                                                    ]
                                                                                    == "American"
                                                                                )
                                                                            )
                                                                            and mi_idx[
                                                                                "info"
                                                                            ]
                                                                            < 7.0
                                                                        )
                                                                        and t[
                                                                            "production_year"
                                                                        ]
                                                                        > 2008
                                                                    )
                                                                    and kt["id"]
                                                                    == t["kind_id"]
                                                                )
                                                                and t["id"]
                                                                == mi["movie_id"]
                                                            )
                                                            and t["id"]
                                                            == mk["movie_id"]
                                                        )
                                                        and t["id"]
                                                        == mi_idx["movie_id"]
                                                    )
                                                    and t["id"] == mc["movie_id"]
                                                )
                                                and mk["movie_id"] == mi["movie_id"]
                                            )
                                            and mk["movie_id"] == mi_idx["movie_id"]
                                        )
                                        and mk["movie_id"] == mc["movie_id"]
                                    )
                                    and mi["movie_id"] == mi_idx["movie_id"]
                                )
                                and mi["movie_id"] == mc["movie_id"]
                            )
                            and mc["movie_id"] == mi_idx["movie_id"]
                        )
                        and k["id"] == mk["keyword_id"]
                    )
                    and it1["id"] == mi["info_type_id"]
                )
                and it2["id"] == mi_idx["info_type_id"]
            )
            and ct["id"] == mc["company_type_id"]
        )
        and cn["id"] == mc["company_id"],
    },
)
result = [
    Auto1(
        movie_company=_min([r.company for r in rows]),
        rating=_min([r.rating for r in rows]),
        western_violent_movie=_min([r.title for r in rows]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q22_finds_western_violent_movie_with_low_rating()
