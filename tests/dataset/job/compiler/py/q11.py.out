from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q11_returns_min_company__link_type_and_title():
    assert result == [
        {
            "from_company": "Best Film Co",
            "movie_link_type": "follow-up",
            "non_polish_sequel_movie": "Alpha",
        }
    ]


company_name = [
    {"id": 1, "name": "Best Film Co", "country_code": "[us]"},
    {"id": 2, "name": "Warner Studios", "country_code": "[de]"},
    {"id": 3, "name": "Polish Films", "country_code": "[pl]"},
]
company_type = [
    {"id": 1, "kind": "production companies"},
    {"id": 2, "kind": "distributors"},
]
keyword = [{"id": 1, "keyword": "sequel"}, {"id": 2, "keyword": "thriller"}]
link_type = [
    {"id": 1, "link": "follow-up"},
    {"id": 2, "link": "follows from"},
    {"id": 3, "link": "remake"},
]
movie_companies = [
    {"movie_id": 10, "company_id": 1, "company_type_id": 1, "note": None},
    {"movie_id": 20, "company_id": 2, "company_type_id": 1, "note": None},
    {"movie_id": 30, "company_id": 3, "company_type_id": 1, "note": None},
]
movie_keyword = [
    {"movie_id": 10, "keyword_id": 1},
    {"movie_id": 20, "keyword_id": 1},
    {"movie_id": 20, "keyword_id": 2},
    {"movie_id": 30, "keyword_id": 1},
]
movie_link = [
    {"movie_id": 10, "link_type_id": 1},
    {"movie_id": 20, "link_type_id": 2},
    {"movie_id": 30, "link_type_id": 3},
]
title = [
    {"id": 10, "production_year": 1960, "title": "Alpha"},
    {"id": 20, "production_year": 1970, "title": "Beta"},
    {"id": 30, "production_year": 1985, "title": "Polish Movie"},
]
matches = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: mc["company_id"] == cn["id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {
            "items": movie_keyword,
            "on": lambda cn, mc, ct, t, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda cn, mc, ct, t, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_link,
            "on": lambda cn, mc, ct, t, mk, k, ml: ml["movie_id"] == t["id"],
        },
        {
            "items": link_type,
            "on": lambda cn, mc, ct, t, mk, k, ml, lt: lt["id"] == ml["link_type_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, mk, k, ml, lt: {
            "company": cn["name"],
            "link": lt["link"],
            "title": t["title"],
        },
        "where": lambda cn, mc, ct, t, mk, k, ml, lt: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            cn["country_code"] != "[pl]"
                                            and (
                                                "Film" in cn["name"]
                                                or "Warner" in cn["name"]
                                            )
                                        )
                                        and ct["kind"] == "production companies"
                                    )
                                    and k["keyword"] == "sequel"
                                )
                                and "follow" in lt["link"]
                            )
                            and mc["note"] == None
                        )
                        and t["production_year"] >= 1950
                    )
                    and t["production_year"] <= 2000
                )
                and ml["movie_id"] == mk["movie_id"]
            )
            and ml["movie_id"] == mc["movie_id"]
        )
        and mk["movie_id"] == mc["movie_id"],
    },
)
result = [
    {
        "from_company": _min([x["company"] for x in matches]),
        "movie_link_type": _min([x["link"] for x in matches]),
        "non_polish_sequel_movie": _min([x["title"] for x in matches]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q11_returns_min_company__link_type_and_title()