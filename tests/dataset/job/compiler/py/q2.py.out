# Generated by Mochi Python compiler
from __future__ import annotations

import json

company_name = None
keyword = None
movie_companies = None
movie_keyword = None
title = None
titles = None
result = None


def test_Q2_finds_earliest_title_for_German_companies_with_character_keyword():
    assert result == "Der Film"


def main():
    global company_name
    company_name = [
        {"id": 1, "country_code": "[de]"},
        {"id": 2, "country_code": "[us]"},
    ]
    global keyword
    keyword = [
        {"id": 1, "keyword": "character-name-in-title"},
        {"id": 2, "keyword": "other"},
    ]
    global movie_companies
    movie_companies = [
        {"movie_id": 100, "company_id": 1},
        {"movie_id": 200, "company_id": 2},
    ]
    global movie_keyword
    movie_keyword = [
        {"movie_id": 100, "keyword_id": 1},
        {"movie_id": 200, "keyword_id": 2},
    ]
    global title
    title = [{"id": 100, "title": "Der Film"}, {"id": 200, "title": "Other Movie"}]
    global titles
    titles = _query(
        company_name,
        [
            {
                "items": movie_companies,
                "on": lambda cn, mc: ((mc["company_id"] == cn["id"])),
            },
            {"items": title, "on": lambda cn, mc, t: ((mc["movie_id"] == t["id"]))},
            {
                "items": movie_keyword,
                "on": lambda cn, mc, t, mk: ((mk["movie_id"] == t["id"])),
            },
            {
                "items": keyword,
                "on": lambda cn, mc, t, mk, k: ((mk["keyword_id"] == k["id"])),
            },
        ],
        {
            "select": lambda cn, mc, t, mk, k: t["title"],
            "where": lambda cn, mc, t, mk, k: (
                (
                    (
                        (cn["country_code"] == "[de]")
                        and (k["keyword"] == "character-name-in-title")
                    )
                    and (mc["movie_id"] == mk["movie_id"])
                )
            ),
        },
    )
    global result
    result = _min(titles)
    print(json.dumps(result, default=lambda o: vars(o)))
    test_Q2_finds_earliest_title_for_German_companies_with_character_keyword()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
