from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q12_finds_high_rated_US_drama_or_horror_with_company():
    assert result == [
        {
            "movie_company": "Best Pictures",
            "rating": 8.3,
            "drama_horror_movie": "Great Drama",
        }
    ]


company_name = [
    {"id": 1, "name": "Best Pictures", "country_code": "[us]"},
    {"id": 2, "name": "Foreign Films", "country_code": "[uk]"},
]
company_type = [
    {"id": 10, "kind": "production companies"},
    {"id": 20, "kind": "distributors"},
]
info_type = [{"id": 100, "info": "genres"}, {"id": 200, "info": "rating"}]
movie_companies = [
    {"movie_id": 1000, "company_id": 1, "company_type_id": 10},
    {"movie_id": 2000, "company_id": 2, "company_type_id": 10},
]
movie_info = [
    {"movie_id": 1000, "info_type_id": 100, "info": "Drama"},
    {"movie_id": 2000, "info_type_id": 100, "info": "Horror"},
]
movie_info_idx = [
    {"movie_id": 1000, "info_type_id": 200, "info": 8.3},
    {"movie_id": 2000, "info_type_id": 200, "info": 7.5},
]
title = [
    {"id": 1000, "production_year": 2006, "title": "Great Drama"},
    {"id": 2000, "production_year": 2007, "title": "Low Rated"},
]
result = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: mc["company_id"] == cn["id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {
            "items": movie_info,
            "on": lambda cn, mc, ct, t, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mi, it1: it1["id"] == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn, mc, ct, t, mi, it1, mi_idx: mi_idx["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: {
            "movie_company": cn["name"],
            "rating": mi_idx["info"],
            "drama_horror_movie": t["title"],
        },
        "where": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: (
            (
                (
                    (
                        (
                            (
                                cn["country_code"] == "[us]"
                                and ct["kind"] == "production companies"
                            )
                            and it1["info"] == "genres"
                        )
                        and it2["info"] == "rating"
                    )
                    and (mi["info"] == "Drama" or mi["info"] == "Horror")
                )
                and mi_idx["info"] > 8.0
            )
            and t["production_year"] >= 2005
        )
        and t["production_year"] <= 2008,
    },
)
print(json.dumps(result, default=lambda o: vars(o)))
test_Q12_finds_high_rated_US_drama_or_horror_with_company()