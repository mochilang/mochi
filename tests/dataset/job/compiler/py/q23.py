# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:29Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_kind: str
    complete_us_internet_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto11:
    id: int
    kind_id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    movie_id: int
    status_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    company_id: int
    company_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    movie_id: int
    info_type_id: int
    note: str
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q23_finds_US_internet_movie_with_verified_cast():
    assert result == [Auto1(movie_kind="movie", complete_us_internet_movie="Web Movie")]


complete_cast = [Auto2(movie_id=1, status_id=1), Auto2(movie_id=2, status_id=2)]
comp_cast_type = [Auto3(id=1, kind="complete+verified"), Auto3(id=2, kind="partial")]
company_name = [Auto4(id=1, country_code="[us]"), Auto4(id=2, country_code="[gb]")]
company_type = [Auto5(id=1), Auto5(id=2)]
info_type = [Auto6(id=1, info="release dates"), Auto6(id=2, info="other")]
keyword = [Auto7(id=1, keyword="internet"), Auto7(id=2, keyword="other")]
kind_type = [Auto3(id=1, kind="movie"), Auto3(id=2, kind="series")]
movie_companies = [
    Auto8(movie_id=1, company_id=1, company_type_id=1),
    Auto8(movie_id=2, company_id=2, company_type_id=2),
]
movie_info = [
    Auto9(movie_id=1, info_type_id=1, note="internet release", info="USA: May 2005"),
    Auto9(movie_id=2, info_type_id=1, note="theater", info="USA: April 1998"),
]
movie_keyword = [Auto10(movie_id=1, keyword_id=1), Auto10(movie_id=2, keyword_id=2)]
title = [
    Auto11(id=1, kind_id=1, production_year=2005, title="Web Movie"),
    Auto11(id=2, kind_id=1, production_year=1998, title="Old Movie"),
]
matches = _query(
    complete_cast,
    [
        {"items": comp_cast_type, "on": lambda cc, cct1: cct1["id"] == cc["status_id"]},
        {"items": title, "on": lambda cc, cct1, t: t["id"] == cc["movie_id"]},
        {"items": kind_type, "on": lambda cc, cct1, t, kt: kt["id"] == t["kind_id"]},
        {
            "items": movie_info,
            "on": lambda cc, cct1, t, kt, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, t, kt, mi, it1: it1["id"] == mi["info_type_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, t, kt, mi, it1, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, t, kt, mi, it1, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_companies,
            "on": lambda cc, cct1, t, kt, mi, it1, mk, k, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda cc, cct1, t, kt, mi, it1, mk, k, mc, cn: cn["id"]
            == mc["company_id"],
        },
        {
            "items": company_type,
            "on": lambda cc, cct1, t, kt, mi, it1, mk, k, mc, cn, ct: ct["id"]
            == mc["company_type_id"],
        },
    ],
    {
        "select": lambda cc, cct1, t, kt, mi, it1, mk, k, mc, cn, ct: Auto1(
            movie_kind=kt["kind"], complete_us_internet_movie=t["title"]
        ),
        "where": lambda cc, cct1, t, kt, mi, it1, mk, k, mc, cn, ct: (
            (
                (
                    (
                        (
                            cct1["kind"] == "complete+verified"
                            and cn["country_code"] == "[us]"
                        )
                        and it1["info"] == "release dates"
                    )
                    and kt["kind"] == "movie"
                )
                and "internet" in mi["note"]
            )
            and ("USA:" in mi["info"] and ("199" in mi["info"] or "200" in mi["info"]))
        )
        and t["production_year"] > 2000,
    },
)
result = [
    Auto1(
        movie_kind=_min([r.movie_kind for r in matches]),
        complete_us_internet_movie=_min(
            [r.complete_us_internet_movie for r in matches]
        ),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q23_finds_US_internet_movie_with_verified_cast()
