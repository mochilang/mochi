from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99():
    assert result == [
        {"cool_actor_pseudonym": "Alpha", "series_named_after_char": "Hero Bob"}
    ]


aka_name = [{"person_id": 1, "name": "Alpha"}, {"person_id": 2, "name": "Beta"}]
cast_info = [{"person_id": 1, "movie_id": 101}, {"person_id": 2, "movie_id": 102}]
company_name = [{"id": 1, "country_code": "[us]"}, {"id": 2, "country_code": "[de]"}]
keyword = [
    {"id": 1, "keyword": "character-name-in-title"},
    {"id": 2, "keyword": "other"},
]
movie_companies = [
    {"movie_id": 101, "company_id": 1},
    {"movie_id": 102, "company_id": 2},
]
movie_keyword = [{"movie_id": 101, "keyword_id": 1}, {"movie_id": 102, "keyword_id": 2}]
name = [{"id": 1}, {"id": 2}]
title = [
    {"id": 101, "title": "Hero Bob", "episode_nr": 60},
    {"id": 102, "title": "Other Show", "episode_nr": 40},
]
rows = _query(
    aka_name,
    [
        {"items": name, "on": lambda an, n: n["id"] == an["person_id"]},
        {"items": cast_info, "on": lambda an, n, ci: ci["person_id"] == n["id"]},
        {"items": title, "on": lambda an, n, ci, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_keyword,
            "on": lambda an, n, ci, t, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda an, n, ci, t, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_companies,
            "on": lambda an, n, ci, t, mk, k, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda an, n, ci, t, mk, k, mc, cn: cn["id"] == mc["company_id"],
        },
    ],
    {
        "select": lambda an, n, ci, t, mk, k, mc, cn: {
            "pseudonym": an["name"],
            "series": t["title"],
        },
        "where": lambda an, n, ci, t, mk, k, mc, cn: (
            (cn["country_code"] == "[us]" and k["keyword"] == "character-name-in-title")
            and t["episode_nr"] >= 50
        )
        and t["episode_nr"] < 100,
    },
)
result = [
    {
        "cool_actor_pseudonym": _min([r["pseudonym"] for r in rows]),
        "series_named_after_char": _min([r["series"] for r in rows]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99()