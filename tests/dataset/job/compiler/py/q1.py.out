# Generated by Mochi Python compiler
from __future__ import annotations

import json

company_type = None
info_type = None
title = None
movie_companies = None
movie_info_idx = None
filtered = None
result = None


def test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production():
    assert result == {
        "production_note": "ACME (co-production)",
        "movie_title": "Good Movie",
        "movie_year": 1995,
    }


def main():
    global company_type
    company_type = [
        {"id": 1, "kind": "production companies"},
        {"id": 2, "kind": "distributors"},
    ]
    global info_type
    info_type = [
        {"id": 10, "info": "top 250 rank"},
        {"id": 20, "info": "bottom 10 rank"},
    ]
    global title
    title = [
        {"id": 100, "title": "Good Movie", "production_year": 1995},
        {"id": 200, "title": "Bad Movie", "production_year": 2000},
    ]
    global movie_companies
    movie_companies = [
        {"movie_id": 100, "company_type_id": 1, "note": "ACME (co-production)"},
        {
            "movie_id": 200,
            "company_type_id": 1,
            "note": "MGM (as Metro-Goldwyn-Mayer Pictures)",
        },
    ]
    global movie_info_idx
    movie_info_idx = [
        {"movie_id": 100, "info_type_id": 10},
        {"movie_id": 200, "info_type_id": 20},
    ]
    global filtered
    filtered = _query(
        company_type,
        [
            {
                "items": movie_companies,
                "on": lambda ct, mc: ((ct["id"] == mc["company_type_id"])),
            },
            {"items": title, "on": lambda ct, mc, t: ((t["id"] == mc["movie_id"]))},
            {
                "items": movie_info_idx,
                "on": lambda ct, mc, t, mi: ((mi["movie_id"] == t["id"])),
            },
            {
                "items": info_type,
                "on": lambda ct, mc, t, mi, it: ((it["id"] == mi["info_type_id"])),
            },
        ],
        {
            "select": lambda ct, mc, t, mi, it: {
                "note": mc["note"],
                "title": t["title"],
                "year": t["production_year"],
            },
            "where": lambda ct, mc, t, mi, it: (
                (
                    (
                        (
                            (ct["kind"] == "production companies")
                            and (it["info"] == "top 250 rank")
                        )
                        and ((not ("(as Metro-Goldwyn-Mayer Pictures)" in mc["note"])))
                    )
                    and (
                        (
                            ("(co-production)" in mc["note"])
                            or ("(presents)" in mc["note"])
                        )
                    )
                )
            ),
        },
    )
    global result
    result = {
        "production_note": _min([r["note"] for r in filtered]),
        "movie_title": _min([r["title"] for r in filtered]),
        "movie_year": _min([r["year"] for r in filtered]),
    }
    print(json.dumps([result], default=lambda o: vars(o)))
    test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    if not v:
        return 0
    return min(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
