# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:20Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_company: str
    rating: float
    drama_horror_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    name: str
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    movie_id: int
    company_id: int
    company_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q12_finds_high_rated_US_drama_or_horror_with_company():
    assert result == [
        Auto1(
            movie_company="Best Pictures", rating=8.3, drama_horror_movie="Great Drama"
        )
    ]


company_name = [
    Auto2(id=1, name="Best Pictures", country_code="[us]"),
    Auto2(id=2, name="Foreign Films", country_code="[uk]"),
]
company_type = [
    Auto3(id=10, kind="production companies"),
    Auto3(id=20, kind="distributors"),
]
info_type = [Auto4(id=100, info="genres"), Auto4(id=200, info="rating")]
movie_companies = [
    Auto5(movie_id=1000, company_id=1, company_type_id=10),
    Auto5(movie_id=2000, company_id=2, company_type_id=10),
]
movie_info = [
    Auto6(movie_id=1000, info_type_id=100, info="Drama"),
    Auto6(movie_id=2000, info_type_id=100, info="Horror"),
]
movie_info_idx = [
    Auto6(movie_id=1000, info_type_id=200, info=8.3),
    Auto6(movie_id=2000, info_type_id=200, info=7.5),
]
title = [
    Auto7(id=1000, production_year=2006, title="Great Drama"),
    Auto7(id=2000, production_year=2007, title="Low Rated"),
]
result = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: mc["company_id"] == cn["id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {
            "items": movie_info,
            "on": lambda cn, mc, ct, t, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mi, it1: it1["id"] == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn, mc, ct, t, mi, it1, mi_idx: mi_idx["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: Auto1(
            movie_company=cn["name"],
            rating=mi_idx["info"],
            drama_horror_movie=t["title"],
        ),
        "where": lambda cn, mc, ct, t, mi, it1, mi_idx, it2: (
            (
                (
                    (
                        (
                            (
                                cn["country_code"] == "[us]"
                                and ct["kind"] == "production companies"
                            )
                            and it1["info"] == "genres"
                        )
                        and it2["info"] == "rating"
                    )
                    and (mi["info"] == "Drama" or mi["info"] == "Horror")
                )
                and mi_idx["info"] > 8.0
            )
            and t["production_year"] >= 2005
        )
        and t["production_year"] <= 2008,
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q12_finds_high_rated_US_drama_or_horror_with_company()
