# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:56:48Z
from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q10_finds_uncredited_voice_actor_in_Russian_movie():
    assert result == [
        {"uncredited_voiced_character": "Ivan", "russian_movie": "Vodka Dreams"}
    ]


char_name = [{"id": 1, "name": "Ivan"}, {"id": 2, "name": "Alex"}]
cast_info = [
    {
        "movie_id": 10,
        "person_role_id": 1,
        "role_id": 1,
        "note": "Soldier (voice) (uncredited)",
    },
    {"movie_id": 11, "person_role_id": 2, "role_id": 1, "note": "(voice)"},
]
company_name = [{"id": 1, "country_code": "[ru]"}, {"id": 2, "country_code": "[us]"}]
company_type = [{"id": 1}, {"id": 2}]
movie_companies = [
    {"movie_id": 10, "company_id": 1, "company_type_id": 1},
    {"movie_id": 11, "company_id": 2, "company_type_id": 1},
]
role_type = [{"id": 1, "role": "actor"}, {"id": 2, "role": "director"}]
title = [
    {"id": 10, "title": "Vodka Dreams", "production_year": 2006},
    {"id": 11, "title": "Other Film", "production_year": 2004},
]
matches = _query(
    char_name,
    [
        {"items": cast_info, "on": lambda chn, ci: chn["id"] == ci["person_role_id"]},
        {"items": role_type, "on": lambda chn, ci, rt: rt["id"] == ci["role_id"]},
        {"items": title, "on": lambda chn, ci, rt, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_companies,
            "on": lambda chn, ci, rt, t, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda chn, ci, rt, t, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": company_type,
            "on": lambda chn, ci, rt, t, mc, cn, ct: ct["id"] == mc["company_type_id"],
        },
    ],
    {
        "select": lambda chn, ci, rt, t, mc, cn, ct: {
            "character": chn["name"],
            "movie": t["title"],
        },
        "where": lambda chn, ci, rt, t, mc, cn, ct: (
            (
                ("(voice)" in ci["note"] and "(uncredited)" in ci["note"])
                and cn["country_code"] == "[ru]"
            )
            and rt["role"] == "actor"
        )
        and t["production_year"] > 2005,
    },
)
result = [
    {
        "uncredited_voiced_character": _min([x["character"] for x in matches]),
        "russian_movie": _min([x["movie"] for x in matches]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q10_finds_uncredited_voice_actor_in_Russian_movie()
