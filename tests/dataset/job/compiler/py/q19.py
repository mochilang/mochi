# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:25Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    voicing_actress: str
    voiced_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    id: int
    role: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto11:
    id: int
    title: str
    production_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto12:
    actress: object
    movie: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    person_id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    movie_id: int
    person_role_id: int
    person_id: int
    role_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    company_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    id: int
    name: str
    gender: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009():
    assert result == [
        Auto1(voicing_actress="Angela Stone", voiced_movie="Voiced Movie")
    ]


aka_name = [Auto2(person_id=1, name="A. Stone"), Auto2(person_id=2, name="J. Doe")]
char_name = [Auto3(id=1, name="Protagonist"), Auto3(id=2, name="Extra")]
cast_info = [
    Auto4(movie_id=1, person_role_id=1, person_id=1, role_id=1, note="(voice)"),
    Auto4(movie_id=2, person_role_id=2, person_id=2, role_id=2, note="Cameo"),
]
company_name = [Auto5(id=10, country_code="[us]"), Auto5(id=20, country_code="[gb]")]
info_type = [Auto6(id=100, info="release dates")]
movie_companies = [
    Auto7(movie_id=1, company_id=10, note="Studio (USA)"),
    Auto7(movie_id=2, company_id=20, note="Other (worldwide)"),
]
movie_info = [
    Auto8(movie_id=1, info_type_id=100, info="USA: June 2006"),
    Auto8(movie_id=2, info_type_id=100, info="UK: 1999"),
]
name = [
    Auto9(id=1, name="Angela Stone", gender="f"),
    Auto9(id=2, name="Bob Angstrom", gender="m"),
]
role_type = [Auto10(id=1, role="actress"), Auto10(id=2, role="actor")]
title = [
    Auto11(id=1, title="Voiced Movie", production_year=2006),
    Auto11(id=2, title="Other Movie", production_year=2010),
]
matches = _query(
    aka_name,
    [
        {"items": name, "on": lambda an, n: n["id"] == an["person_id"]},
        {
            "items": cast_info,
            "on": lambda an, n, ci: ci["person_id"] == an["person_id"],
        },
        {
            "items": char_name,
            "on": lambda an, n, ci, chn: chn["id"] == ci["person_role_id"],
        },
        {
            "items": role_type,
            "on": lambda an, n, ci, chn, rt: rt["id"] == ci["role_id"],
        },
        {"items": title, "on": lambda an, n, ci, chn, rt, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_companies,
            "on": lambda an, n, ci, chn, rt, t, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda an, n, ci, chn, rt, t, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": movie_info,
            "on": lambda an, n, ci, chn, rt, t, mc, cn, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: it["id"]
            == mi["info_type_id"],
        },
    ],
    {
        "select": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: Auto12(
            actress=n["name"], movie=t["title"]
        ),
        "where": lambda an, n, ci, chn, rt, t, mc, cn, mi, it: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                ci["note"]
                                                in [
                                                    "(voice)",
                                                    "(voice: Japanese version)",
                                                    "(voice) (uncredited)",
                                                    "(voice: English version)",
                                                ]
                                                and cn["country_code"] == "[us]"
                                            )
                                            and it["info"] == "release dates"
                                        )
                                        and mc["note"] != None
                                    )
                                    and (
                                        "(USA)" in mc["note"]
                                        or "(worldwide)" in mc["note"]
                                    )
                                )
                                and mi["info"] != None
                            )
                            and (
                                "Japan:" in mi["info"]
                                and "200" in mi["info"]
                                or ("USA:" in mi["info"] and "200" in mi["info"])
                            )
                        )
                        and n["gender"] == "f"
                    )
                    and "Ang" in n["name"]
                )
                and rt["role"] == "actress"
            )
            and t["production_year"] >= 2005
        )
        and t["production_year"] <= 2009,
    },
)
result = [
    Auto1(
        voicing_actress=_min([r.actress for r in matches]),
        voiced_movie=_min([r.movie for r in matches]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q19_finds_female_voice_actress_in_US_Japan_release_between_2005_and_2009()
