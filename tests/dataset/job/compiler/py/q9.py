# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:56:47Z
from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q9_selects_minimal_alternative_name__character_and_movie():
    assert result == [
        {
            "alternative_name": "A. N. G.",
            "character_name": "Angel",
            "movie": "Famous Film",
        }
    ]


aka_name = [{"person_id": 1, "name": "A. N. G."}, {"person_id": 2, "name": "J. D."}]
char_name = [{"id": 10, "name": "Angel"}, {"id": 20, "name": "Devil"}]
cast_info = [
    {
        "person_id": 1,
        "person_role_id": 10,
        "movie_id": 100,
        "role_id": 1000,
        "note": "(voice)",
    },
    {
        "person_id": 2,
        "person_role_id": 20,
        "movie_id": 200,
        "role_id": 1000,
        "note": "(voice)",
    },
]
company_name = [
    {"id": 100, "country_code": "[us]"},
    {"id": 200, "country_code": "[gb]"},
]
movie_companies = [
    {"movie_id": 100, "company_id": 100, "note": "ACME Studios (USA)"},
    {"movie_id": 200, "company_id": 200, "note": "Maple Films"},
]
name = [
    {"id": 1, "name": "Angela Smith", "gender": "f"},
    {"id": 2, "name": "John Doe", "gender": "m"},
]
role_type = [{"id": 1000, "role": "actress"}, {"id": 2000, "role": "actor"}]
title = [
    {"id": 100, "title": "Famous Film", "production_year": 2010},
    {"id": 200, "title": "Old Movie", "production_year": 1999},
]
matches = _query(
    aka_name,
    [
        {"items": name, "on": lambda an, n: an["person_id"] == n["id"]},
        {"items": cast_info, "on": lambda an, n, ci: ci["person_id"] == n["id"]},
        {
            "items": char_name,
            "on": lambda an, n, ci, chn: chn["id"] == ci["person_role_id"],
        },
        {"items": title, "on": lambda an, n, ci, chn, t: t["id"] == ci["movie_id"]},
        {
            "items": movie_companies,
            "on": lambda an, n, ci, chn, t, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda an, n, ci, chn, t, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": role_type,
            "on": lambda an, n, ci, chn, t, mc, cn, rt: rt["id"] == ci["role_id"],
        },
    ],
    {
        "select": lambda an, n, ci, chn, t, mc, cn, rt: {
            "alt": an["name"],
            "character": chn["name"],
            "movie": t["title"],
        },
        "where": lambda an, n, ci, chn, t, mc, cn, rt: (
            (
                (
                    (
                        (
                            (
                                ci["note"]
                                in [
                                    "(voice)",
                                    "(voice: Japanese version)",
                                    "(voice) (uncredited)",
                                    "(voice: English version)",
                                ]
                                and cn["country_code"] == "[us]"
                            )
                            and ("(USA)" in mc["note"] or "(worldwide)" in mc["note"])
                        )
                        and n["gender"] == "f"
                    )
                    and "Ang" in n["name"]
                )
                and rt["role"] == "actress"
            )
            and t["production_year"] >= 2005
        )
        and t["production_year"] <= 2015,
    },
)
result = [
    {
        "alternative_name": _min([x["alt"] for x in matches]),
        "character_name": _min([x["character"] for x in matches]),
        "movie": _min([x["movie"] for x in matches]),
    }
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q9_selects_minimal_alternative_name__character_and_movie()
