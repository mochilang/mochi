# Generated by Mochi Python compiler
from __future__ import annotations

import json

cast_info = None
keyword = None
movie_keyword = None
name = None
title = None
result = None


def test_Q6_finds_marvel_movie_with_Robert_Downey():
    assert result == [
        {
            "movie_keyword": "marvel-cinematic-universe",
            "actor_name": "Downey Robert Jr.",
            "marvel_movie": "Iron Man 3",
        }
    ]


def main():
    global cast_info
    cast_info = [{"movie_id": 1, "person_id": 101}, {"movie_id": 2, "person_id": 102}]
    global keyword
    keyword = [
        {"id": 100, "keyword": "marvel-cinematic-universe"},
        {"id": 200, "keyword": "other"},
    ]
    global movie_keyword
    movie_keyword = [
        {"movie_id": 1, "keyword_id": 100},
        {"movie_id": 2, "keyword_id": 200},
    ]
    global name
    name = [
        {"id": 101, "name": "Downey Robert Jr."},
        {"id": 102, "name": "Chris Evans"},
    ]
    global title
    title = [
        {"id": 1, "title": "Iron Man 3", "production_year": 2013},
        {"id": 2, "title": "Old Movie", "production_year": 2000},
    ]
    global result
    result = _query(
        cast_info,
        [
            {
                "items": movie_keyword,
                "on": lambda ci, mk: ((ci["movie_id"] == mk["movie_id"])),
            },
            {"items": keyword, "on": lambda ci, mk, k: ((mk["keyword_id"] == k["id"]))},
            {"items": name, "on": lambda ci, mk, k, n: ((ci["person_id"] == n["id"]))},
            {
                "items": title,
                "on": lambda ci, mk, k, n, t: ((ci["movie_id"] == t["id"])),
            },
        ],
        {
            "select": lambda ci, mk, k, n, t: {
                "movie_keyword": k["keyword"],
                "actor_name": n["name"],
                "marvel_movie": t["title"],
            },
            "where": lambda ci, mk, k, n, t: (
                (
                    (
                        (
                            (k["keyword"] == "marvel-cinematic-universe")
                            and ("Downey" in n["name"])
                        )
                        and ("Robert" in n["name"])
                    )
                    and (t["production_year"] > 2010)
                )
            ),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_Q6_finds_marvel_movie_with_Robert_Downey()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
