from __future__ import annotations
import json
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions():
    assert result == {"movie_budget": 90, "movie_votes": 400, "movie_title": "Alpha"}


info_type = [
    {"id": 1, "info": "budget"},
    {"id": 2, "info": "votes"},
    {"id": 3, "info": "rating"},
]
name = [
    {"id": 1, "name": "Big Tim", "gender": "m"},
    {"id": 2, "name": "Slim Tim", "gender": "m"},
    {"id": 3, "name": "Alice", "gender": "f"},
]
title = [
    {"id": 10, "title": "Alpha"},
    {"id": 20, "title": "Beta"},
    {"id": 30, "title": "Gamma"},
]
cast_info = [
    {"movie_id": 10, "person_id": 1, "note": "(producer)"},
    {"movie_id": 20, "person_id": 2, "note": "(executive producer)"},
    {"movie_id": 30, "person_id": 3, "note": "(producer)"},
]
movie_info = [
    {"movie_id": 10, "info_type_id": 1, "info": 90},
    {"movie_id": 20, "info_type_id": 1, "info": 120},
    {"movie_id": 30, "info_type_id": 1, "info": 110},
]
movie_info_idx = [
    {"movie_id": 10, "info_type_id": 2, "info": 500},
    {"movie_id": 20, "info_type_id": 2, "info": 400},
    {"movie_id": 30, "info_type_id": 2, "info": 800},
]
rows = _query(
    cast_info,
    [
        {"items": name, "on": lambda ci, n: n["id"] == ci["person_id"]},
        {"items": title, "on": lambda ci, n, t: t["id"] == ci["movie_id"]},
        {"items": movie_info, "on": lambda ci, n, t, mi: mi["movie_id"] == t["id"]},
        {
            "items": movie_info_idx,
            "on": lambda ci, n, t, mi, mi_idx: mi_idx["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda ci, n, t, mi, mi_idx, it1: it1["id"] == mi["info_type_id"],
        },
        {
            "items": info_type,
            "on": lambda ci, n, t, mi, mi_idx, it1, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
    ],
    {
        "select": lambda ci, n, t, mi, mi_idx, it1, it2: {
            "budget": mi["info"],
            "votes": mi_idx["info"],
            "title": t["title"],
        },
        "where": lambda ci, n, t, mi, mi_idx, it1, it2: (
            (
                (
                    (
                        (
                            (
                                (
                                    ci["note"] in ["(producer)", "(executive producer)"]
                                    and it1["info"] == "budget"
                                )
                                and it2["info"] == "votes"
                            )
                            and n["gender"] == "m"
                        )
                        and "Tim" in n["name"]
                    )
                    and t["id"] == ci["movie_id"]
                )
                and ci["movie_id"] == mi["movie_id"]
            )
            and ci["movie_id"] == mi_idx["movie_id"]
        )
        and mi["movie_id"] == mi_idx["movie_id"],
    },
)
result = {
    "movie_budget": (
        min([it for it in [r["budget"] for r in rows] if it is not None])
        if [r["budget"] for r in rows]
        else 0
    ),
    "movie_votes": (
        min([it for it in [r["votes"] for r in rows] if it is not None])
        if [r["votes"] for r in rows]
        else 0
    ),
    "movie_title": (
        min([it for it in [r["title"] for r in rows] if it is not None])
        if [r["title"] for r in rows]
        else 0
    ),
}
print(json.dumps(result, default=lambda o: vars(o)))
test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions()