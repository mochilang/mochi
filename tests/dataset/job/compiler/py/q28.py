# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:33Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_company: str
    rating: float
    complete_euro_dark_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto11:
    id: int
    kind_id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto12:
    company: object
    rating: object
    title: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    movie_id: int
    subject_id: int
    status_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    name: str
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    company_id: int
    company_type_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q28_finds_euro_dark_movie_with_minimal_values():
    assert result == Auto1(
        movie_company="Euro Films Ltd.",
        rating=7.2,
        complete_euro_dark_movie="Dark Euro Film",
    )


comp_cast_type = [
    Auto2(id=1, kind="crew"),
    Auto2(id=2, kind="complete+verified"),
    Auto2(id=3, kind="partial"),
]
complete_cast = [
    Auto3(movie_id=1, subject_id=1, status_id=3),
    Auto3(movie_id=2, subject_id=1, status_id=2),
]
company_name = [
    Auto4(id=1, name="Euro Films Ltd.", country_code="[gb]"),
    Auto4(id=2, name="US Studios", country_code="[us]"),
]
company_type = [Auto5(id=1), Auto5(id=2)]
movie_companies = [
    Auto6(movie_id=1, company_id=1, company_type_id=1, note="production (2005) (UK)"),
    Auto6(movie_id=2, company_id=2, company_type_id=1, note="production (USA)"),
]
info_type = [Auto7(id=1, info="countries"), Auto7(id=2, info="rating")]
keyword = [Auto8(id=1, keyword="blood"), Auto8(id=2, keyword="romance")]
kind_type = [Auto2(id=1, kind="movie"), Auto2(id=2, kind="episode")]
movie_info = [
    Auto9(movie_id=1, info_type_id=1, info="Germany"),
    Auto9(movie_id=2, info_type_id=1, info="USA"),
]
movie_info_idx = [
    Auto9(movie_id=1, info_type_id=2, info=7.2),
    Auto9(movie_id=2, info_type_id=2, info=9.0),
]
movie_keyword = [Auto10(movie_id=1, keyword_id=1), Auto10(movie_id=2, keyword_id=2)]
title = [
    Auto11(id=1, kind_id=1, production_year=2005, title="Dark Euro Film"),
    Auto11(id=2, kind_id=1, production_year=2005, title="US Film"),
]
allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
allowed_countries = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Danish",
    "Norwegian",
    "German",
    "USA",
    "American",
]
matches = _query(
    complete_cast,
    [
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1: cct1["id"] == cc["subject_id"],
        },
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1, cct2: cct2["id"] == cc["status_id"],
        },
        {
            "items": movie_companies,
            "on": lambda cc, cct1, cct2, mc: mc["movie_id"] == cc["movie_id"],
        },
        {
            "items": company_name,
            "on": lambda cc, cct1, cct2, mc, cn: cn["id"] == mc["company_id"],
        },
        {
            "items": company_type,
            "on": lambda cc, cct1, cct2, mc, cn, ct: ct["id"] == mc["company_type_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk: mk["movie_id"]
            == cc["movie_id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_info,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi: mi["movie_id"]
            == cc["movie_id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1: it1["id"]
            == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx: mi_idx[
                "movie_id"
            ]
            == cc["movie_id"],
        },
        {
            "items": info_type,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx, it2: it2[
                "id"
            ]
            == mi_idx["info_type_id"],
        },
        {
            "items": title,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx, it2, t: t[
                "id"
            ]
            == cc["movie_id"],
        },
        {
            "items": kind_type,
            "on": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx, it2, t, kt: kt[
                "id"
            ]
            == t["kind_id"],
        },
    ],
    {
        "select": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx, it2, t, kt: Auto12(
            company=cn["name"], rating=mi_idx["info"], title=t["title"]
        ),
        "where": lambda cc, cct1, cct2, mc, cn, ct, mk, k, mi, it1, mi_idx, it2, t, kt: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                cct1["kind"] == "crew"
                                                and cct2["kind"] != "complete+verified"
                                            )
                                            and cn["country_code"] != "[us]"
                                        )
                                        and it1["info"] == "countries"
                                    )
                                    and it2["info"] == "rating"
                                )
                                and k["keyword"] in allowed_keywords
                            )
                            and kt["kind"] in ["movie", "episode"]
                        )
                        and ("(USA)" in mc["note"]) == False
                    )
                    and "(200" in mc["note"]
                )
                and mi["info"] in allowed_countries
            )
            and mi_idx["info"] < 8.5
        )
        and t["production_year"] > 2000,
    },
)
result = Auto1(
    movie_company=_min([x.company for x in matches]),
    rating=_min([x.rating for x in matches]),
    complete_euro_dark_movie=_min([x.title for x in matches]),
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q28_finds_euro_dark_movie_with_minimal_values()
