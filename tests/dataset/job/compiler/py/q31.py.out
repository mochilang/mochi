from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_budget: str
    movie_votes: int
    writer: str
    violent_liongate_movie: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto10:
    id: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    movie_id: int
    person_id: int
    note: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    company_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto9:
    id: int
    name: str
    gender: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q31_finds_minimal_budget__votes__writer_and_title():
    assert result == [
        Auto1(
            movie_budget="Horror",
            movie_votes=800,
            writer="Arthur",
            violent_liongate_movie="Alpha Horror",
        )
    ]


cast_info = [
    Auto2(movie_id=1, person_id=1, note="(writer)"),
    Auto2(movie_id=2, person_id=2, note="(story)"),
    Auto2(movie_id=3, person_id=3, note="(writer)"),
]
company_name = [
    Auto3(id=1, name="Lionsgate Pictures"),
    Auto3(id=2, name="Other Studio"),
]
info_type = [Auto4(id=10, info="genres"), Auto4(id=20, info="votes")]
keyword = [Auto5(id=100, keyword="murder"), Auto5(id=200, keyword="comedy")]
movie_companies = [
    Auto6(movie_id=1, company_id=1),
    Auto6(movie_id=2, company_id=1),
    Auto6(movie_id=3, company_id=2),
]
movie_info = [
    Auto7(movie_id=1, info_type_id=10, info="Horror"),
    Auto7(movie_id=2, info_type_id=10, info="Thriller"),
    Auto7(movie_id=3, info_type_id=10, info="Comedy"),
]
movie_info_idx = [
    Auto7(movie_id=1, info_type_id=20, info=1000),
    Auto7(movie_id=2, info_type_id=20, info=800),
    Auto7(movie_id=3, info_type_id=20, info=500),
]
movie_keyword = [
    Auto8(movie_id=1, keyword_id=100),
    Auto8(movie_id=2, keyword_id=100),
    Auto8(movie_id=3, keyword_id=200),
]
name = [
    Auto9(id=1, name="Arthur", gender="m"),
    Auto9(id=2, name="Bob", gender="m"),
    Auto9(id=3, name="Carla", gender="f"),
]
title = [
    Auto10(id=1, title="Alpha Horror"),
    Auto10(id=2, title="Beta Blood"),
    Auto10(id=3, title="Gamma Comedy"),
]
matches = _query(
    cast_info,
    [
        {"items": name, "on": lambda ci, n: n["id"] == ci["person_id"]},
        {"items": title, "on": lambda ci, n, t: t["id"] == ci["movie_id"]},
        {"items": movie_info, "on": lambda ci, n, t, mi: mi["movie_id"] == t["id"]},
        {
            "items": movie_info_idx,
            "on": lambda ci, n, t, mi, mi_idx: mi_idx["movie_id"] == t["id"],
        },
        {
            "items": movie_keyword,
            "on": lambda ci, n, t, mi, mi_idx, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda ci, n, t, mi, mi_idx, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_companies,
            "on": lambda ci, n, t, mi, mi_idx, mk, k, mc: mc["movie_id"] == t["id"],
        },
        {
            "items": company_name,
            "on": lambda ci, n, t, mi, mi_idx, mk, k, mc, cn: cn["id"]
            == mc["company_id"],
        },
        {
            "items": info_type,
            "on": lambda ci, n, t, mi, mi_idx, mk, k, mc, cn, it1: it1["id"]
            == mi["info_type_id"],
        },
        {
            "items": info_type,
            "on": lambda ci, n, t, mi, mi_idx, mk, k, mc, cn, it1, it2: it2["id"]
            == mi_idx["info_type_id"],
        },
    ],
    {
        "select": lambda ci, n, t, mi, mi_idx, mk, k, mc, cn, it1, it2: Auto1(
            movie_budget=mi["info"],
            movie_votes=mi_idx["info"],
            writer=n["name"],
            violent_liongate_movie=t["title"],
        ),
        "where": lambda ci, n, t, mi, mi_idx, mk, k, mc, cn, it1, it2: (
            (
                (
                    (
                        (
                            ci["note"]
                            in [
                                "(writer)",
                                "(head writer)",
                                "(written by)",
                                "(story)",
                                "(story editor)",
                            ]
                            and str(cn["name"]).startswith("Lionsgate")
                        )
                        and it1["info"] == "genres"
                    )
                    and it2["info"] == "votes"
                )
                and k["keyword"]
                in [
                    "murder",
                    "violence",
                    "blood",
                    "gore",
                    "death",
                    "female-nudity",
                    "hospital",
                ]
            )
            and mi["info"] in ["Horror", "Thriller"]
        )
        and n["gender"] == "m",
    },
)
result = [
    Auto1(
        movie_budget=_min([r.movie_budget for r in matches]),
        movie_votes=(
            min([it for it in [r.movie_votes for r in matches] if it is not None])
            if [r.movie_votes for r in matches]
            else 0
        ),
        writer=_min([r.writer for r in matches]),
        violent_liongate_movie=_min([r.violent_liongate_movie for r in matches]),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_Q31_finds_minimal_budget__votes__writer_and_title()