# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:21Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    release_date: str
    rating: str
    german_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    kind_id: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    movie_id: int
    company_id: int
    company_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    info_type_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_Q13_finds_earliest_German_movie_info():
    assert result == Auto1(
        release_date="1997-05-10", rating="6.0", german_movie="Alpha"
    )


company_name = [Auto2(id=1, country_code="[de]"), Auto2(id=2, country_code="[us]")]
company_type = [
    Auto3(id=1, kind="production companies"),
    Auto3(id=2, kind="distributors"),
]
info_type = [Auto4(id=1, info="rating"), Auto4(id=2, info="release dates")]
kind_type = [Auto3(id=1, kind="movie"), Auto3(id=2, kind="video")]
title = [
    Auto5(id=10, kind_id=1, title="Alpha"),
    Auto5(id=20, kind_id=1, title="Beta"),
    Auto5(id=30, kind_id=2, title="Gamma"),
]
movie_companies = [
    Auto6(movie_id=10, company_id=1, company_type_id=1),
    Auto6(movie_id=20, company_id=1, company_type_id=1),
    Auto6(movie_id=30, company_id=2, company_type_id=1),
]
movie_info = [
    Auto7(movie_id=10, info_type_id=2, info="1997-05-10"),
    Auto7(movie_id=20, info_type_id=2, info="1998-03-20"),
    Auto7(movie_id=30, info_type_id=2, info="1999-07-30"),
]
movie_info_idx = [
    Auto7(movie_id=10, info_type_id=1, info="6.0"),
    Auto7(movie_id=20, info_type_id=1, info="7.5"),
    Auto7(movie_id=30, info_type_id=1, info="5.5"),
]
candidates = _query(
    company_name,
    [
        {"items": movie_companies, "on": lambda cn, mc: mc["company_id"] == cn["id"]},
        {
            "items": company_type,
            "on": lambda cn, mc, ct: ct["id"] == mc["company_type_id"],
        },
        {"items": title, "on": lambda cn, mc, ct, t: t["id"] == mc["movie_id"]},
        {"items": kind_type, "on": lambda cn, mc, ct, t, kt: kt["id"] == t["kind_id"]},
        {
            "items": movie_info,
            "on": lambda cn, mc, ct, t, kt, mi: mi["movie_id"] == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, kt, mi, it2: it2["id"] == mi["info_type_id"],
        },
        {
            "items": movie_info_idx,
            "on": lambda cn, mc, ct, t, kt, mi, it2, miidx: miidx["movie_id"]
            == t["id"],
        },
        {
            "items": info_type,
            "on": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: it["id"]
            == miidx["info_type_id"],
        },
    ],
    {
        "select": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: Auto1(
            release_date=mi["info"], rating=miidx["info"], german_movie=t["title"]
        ),
        "where": lambda cn, mc, ct, t, kt, mi, it2, miidx, it: (
            (
                (cn["country_code"] == "[de]" and ct["kind"] == "production companies")
                and it["info"] == "rating"
            )
            and it2["info"] == "release dates"
        )
        and kt["kind"] == "movie",
    },
)
result = Auto1(
    release_date=[
        x.release_date
        for x in sorted(
            [x for x in candidates], key=lambda x: _sort_key(x.release_date)
        )
    ][0],
    rating=[
        x.rating
        for x in sorted([x for x in candidates], key=lambda x: _sort_key(x.rating))
    ][0],
    german_movie=[
        x.german_movie
        for x in sorted(
            [x for x in candidates], key=lambda x: _sort_key(x.german_movie)
        )
    ][0],
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q13_finds_earliest_German_movie_info()
