# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:32Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    producing_company: str
    link_type: str
    complete_western_sequel: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto10:
    movie_id: int
    link_type_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto11:
    id: int
    production_year: int
    title: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto12:
    company: object
    link: object
    title: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: int
    kind: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    movie_id: int
    subject_id: int
    status_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    id: int
    name: str
    country_code: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    link: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    movie_id: int
    company_id: int
    company_type_id: int
    note: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    movie_id: int
    info: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto9:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _min(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("min() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return min(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q27_selects_minimal_company__link_and_title():
    assert result == Auto1(
        producing_company="Best Film",
        link_type="follows",
        complete_western_sequel="Western Sequel",
    )


comp_cast_type = [
    Auto2(id=1, kind="cast"),
    Auto2(id=2, kind="crew"),
    Auto2(id=3, kind="complete"),
]
complete_cast = [
    Auto3(movie_id=1, subject_id=1, status_id=3),
    Auto3(movie_id=2, subject_id=2, status_id=3),
]
company_name = [
    Auto4(id=1, name="Best Film", country_code="[se]"),
    Auto4(id=2, name="Polish Film", country_code="[pl]"),
]
company_type = [Auto2(id=1, kind="production companies"), Auto2(id=2, kind="other")]
keyword = [Auto5(id=1, keyword="sequel"), Auto5(id=2, keyword="remake")]
link_type = [Auto6(id=1, link="follows"), Auto6(id=2, link="related")]
movie_companies = [
    Auto7(movie_id=1, company_id=1, company_type_id=1, note=None),
    Auto7(movie_id=2, company_id=2, company_type_id=1, note="extra"),
]
movie_info = [Auto8(movie_id=1, info="Sweden"), Auto8(movie_id=2, info="USA")]
movie_keyword = [Auto9(movie_id=1, keyword_id=1), Auto9(movie_id=2, keyword_id=2)]
movie_link = [Auto10(movie_id=1, link_type_id=1), Auto10(movie_id=2, link_type_id=2)]
title = [
    Auto11(id=1, production_year=1980, title="Western Sequel"),
    Auto11(id=2, production_year=1999, title="Another Movie"),
]
matches = _query(
    complete_cast,
    [
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1: cct1["id"] == cc["subject_id"],
        },
        {
            "items": comp_cast_type,
            "on": lambda cc, cct1, cct2: cct2["id"] == cc["status_id"],
        },
        {"items": title, "on": lambda cc, cct1, cct2, t: t["id"] == cc["movie_id"]},
        {
            "items": movie_link,
            "on": lambda cc, cct1, cct2, t, ml: ml["movie_id"] == t["id"],
        },
        {
            "items": link_type,
            "on": lambda cc, cct1, cct2, t, ml, lt: lt["id"] == ml["link_type_id"],
        },
        {
            "items": movie_keyword,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk: mk["movie_id"] == t["id"],
        },
        {
            "items": keyword,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk, k: k["id"] == mk["keyword_id"],
        },
        {
            "items": movie_companies,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc: mc["movie_id"]
            == t["id"],
        },
        {
            "items": company_type,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc, ct: ct["id"]
            == mc["company_type_id"],
        },
        {
            "items": company_name,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc, ct, cn: cn["id"]
            == mc["company_id"],
        },
        {
            "items": movie_info,
            "on": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc, ct, cn, mi: mi[
                "movie_id"
            ]
            == t["id"],
        },
    ],
    {
        "select": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc, ct, cn, mi: Auto12(
            company=cn["name"], link=lt["link"], title=t["title"]
        ),
        "where": lambda cc, cct1, cct2, t, ml, lt, mk, k, mc, ct, cn, mi: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            (
                                                                                (
                                                                                    (
                                                                                        cct1[
                                                                                            "kind"
                                                                                        ]
                                                                                        == "cast"
                                                                                        or cct1[
                                                                                            "kind"
                                                                                        ]
                                                                                        == "crew"
                                                                                    )
                                                                                    and cct2[
                                                                                        "kind"
                                                                                    ]
                                                                                    == "complete"
                                                                                )
                                                                                and cn[
                                                                                    "country_code"
                                                                                ]
                                                                                != "[pl]"
                                                                            )
                                                                            and (
                                                                                "Film"
                                                                                in cn[
                                                                                    "name"
                                                                                ]
                                                                                or "Warner"
                                                                                in cn[
                                                                                    "name"
                                                                                ]
                                                                            )
                                                                        )
                                                                        and ct["kind"]
                                                                        == "production companies"
                                                                    )
                                                                    and k["keyword"]
                                                                    == "sequel"
                                                                )
                                                                and "follow"
                                                                in lt["link"]
                                                            )
                                                            and mc["note"] == None
                                                        )
                                                        and (
                                                            (
                                                                (
                                                                    mi["info"]
                                                                    == "Sweden"
                                                                    or mi["info"]
                                                                    == "Germany"
                                                                )
                                                                or mi["info"]
                                                                == "Swedish"
                                                            )
                                                            or mi["info"] == "German"
                                                        )
                                                    )
                                                    and t["production_year"] >= 1950
                                                )
                                                and t["production_year"] <= 2000
                                            )
                                            and ml["movie_id"] == mk["movie_id"]
                                        )
                                        and ml["movie_id"] == mc["movie_id"]
                                    )
                                    and mk["movie_id"] == mc["movie_id"]
                                )
                                and ml["movie_id"] == mi["movie_id"]
                            )
                            and mk["movie_id"] == mi["movie_id"]
                        )
                        and mc["movie_id"] == mi["movie_id"]
                    )
                    and ml["movie_id"] == cc["movie_id"]
                )
                and mk["movie_id"] == cc["movie_id"]
            )
            and mc["movie_id"] == cc["movie_id"]
        )
        and mi["movie_id"] == cc["movie_id"],
    },
)
result = Auto1(
    producing_company=_min([x.company for x in matches]),
    link_type=_min([x.link for x in matches]),
    complete_western_sequel=_min([x.title for x in matches]),
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q27_selects_minimal_company__link_and_title()
