# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:45:15Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    movie_keyword: str
    actor_name: str
    marvel_movie: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    movie_id: int
    person_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    keyword: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    movie_id: int
    keyword_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    id: int
    title: str
    production_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_Q6_finds_marvel_movie_with_Robert_Downey():
    assert result == [
        Auto1(
            movie_keyword="marvel-cinematic-universe",
            actor_name="Downey Robert Jr.",
            marvel_movie="Iron Man 3",
        )
    ]


cast_info = [Auto2(movie_id=1, person_id=101), Auto2(movie_id=2, person_id=102)]
keyword = [
    Auto3(id=100, keyword="marvel-cinematic-universe"),
    Auto3(id=200, keyword="other"),
]
movie_keyword = [Auto4(movie_id=1, keyword_id=100), Auto4(movie_id=2, keyword_id=200)]
name = [Auto5(id=101, name="Downey Robert Jr."), Auto5(id=102, name="Chris Evans")]
title = [
    Auto6(id=1, title="Iron Man 3", production_year=2013),
    Auto6(id=2, title="Old Movie", production_year=2000),
]
result = _query(
    cast_info,
    [
        {"items": movie_keyword, "on": lambda ci, mk: ci["movie_id"] == mk["movie_id"]},
        {"items": keyword, "on": lambda ci, mk, k: mk["keyword_id"] == k["id"]},
        {"items": name, "on": lambda ci, mk, k, n: ci["person_id"] == n["id"]},
        {"items": title, "on": lambda ci, mk, k, n, t: ci["movie_id"] == t["id"]},
    ],
    {
        "select": lambda ci, mk, k, n, t: Auto1(
            movie_keyword=k["keyword"], actor_name=n["name"], marvel_movie=t["title"]
        ),
        "where": lambda ci, mk, k, n, t: (
            (k["keyword"] == "marvel-cinematic-universe" and "Downey" in n["name"])
            and "Robert" in n["name"]
        )
        and t["production_year"] > 2010,
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q6_finds_marvel_movie_with_Robert_Downey()
