-- Generated by Mochi compiler v0.10.25 on 2025-07-13T13:02:36Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import qualified Data.Aeson as Aeson
import qualified Data.ByteString.Lazy.Char8 as BSL
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)

forLoop :: Int -> Int -> (Int -> Maybe a) -> Maybe a
forLoop start end f = go start
  where
    go i
      | i < end =
          case f i of
            Just v -> Just v
            Nothing -> go (i + 1)
      | otherwise = Nothing

whileLoop :: (() -> Bool) -> (() -> Maybe a) -> Maybe a
whileLoop cond body = go ()
  where
    go _
      | cond () =
          case body () of
            Just v -> Just v
            Nothing -> go ()
      | otherwise = Nothing

avg :: (Integral a) => [a] -> a
avg xs
  | null xs = 0
  | otherwise = div (sum xs) (fromIntegral (length xs))

data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)

_group_by :: (Ord k) => [a] -> (a -> k) -> [MGroup k a]
_group_by src keyfn =
  let go [] m order = (m, order)
      go (x : xs) m order =
        let k = keyfn x
         in case Map.lookup k m of
              Just is -> go xs (Map.insert k (is ++ [x]) m) order
              Nothing -> go xs (Map.insert k [x] m) (order ++ [k])
      (m, order) = go src Map.empty []
   in [MGroup k (fromMaybe [] (Map.lookup k m)) | k <- order]

_indexString :: String -> Int -> String
_indexString s i =
  let idx = if i < 0 then i + length s else i
   in if idx < 0 || idx >= length s
        then error "index out of range"
        else [s !! idx]

_append :: [a] -> a -> [a]
_append xs x = xs ++ [x]

_input :: IO String
_input = getLine

_readInput :: Maybe String -> IO String
_readInput Nothing = getContents
_readInput (Just p)
  | null p || p == "-" = getContents
  | otherwise = readFile p

_writeOutput :: Maybe String -> String -> IO ()
_writeOutput mp text = case mp of
  Nothing -> putStr text
  Just p
    | null p || p == "-" -> putStr text
    | otherwise -> writeFile p text

_split :: Char -> String -> [String]
_split _ "" = [""]
_split d s =
  let (h, t) = break (== d) s
   in h : case t of
        [] -> []
        (_ : rest) -> _split d rest

_parseCSV :: String -> Bool -> Char -> [Map.Map String String]
_parseCSV text header delim =
  let ls = filter (not . null) (lines text)
   in if null ls
        then []
        else
          let heads =
                if header
                  then _split delim (head ls)
                  else ["c" ++ show i | i <- [0 .. length (_split delim (head ls)) - 1]]
              start = if header then 1 else 0
              row line =
                let parts = _split delim line
                 in Map.fromList
                      [ (heads !! j, if j < length parts then parts !! j else "")
                        | j <- [0 .. length heads - 1]
                      ]
           in map row (drop start ls)

_json :: (Aeson.ToJSON a) => a -> IO ()
_json v = BSL.putStrLn (Aeson.encode v)

expect :: Bool -> IO ()
expect True = pure ()
expect False = error "expect failed"

keyword = [Map.fromList [("id", (1 :: Int)), ("keyword", "amazing sequel")], Map.fromList [("id", (2 :: Int)), ("keyword", "prequel")]]

movie_info = [Map.fromList [("movie_id", (10 :: Int)), ("info", "Germany")], Map.fromList [("movie_id", (30 :: Int)), ("info", "Sweden")], Map.fromList [("movie_id", (20 :: Int)), ("info", "France")]]

movie_keyword = [Map.fromList [("movie_id", (10 :: Int)), ("keyword_id", (1 :: Int))], Map.fromList [("movie_id", (30 :: Int)), ("keyword_id", (1 :: Int))], Map.fromList [("movie_id", (20 :: Int)), ("keyword_id", (1 :: Int))], Map.fromList [("movie_id", (10 :: Int)), ("keyword_id", (2 :: Int))]]

title = [Map.fromList [("id", (10 :: Int)), ("title", "Alpha"), ("production_year", (2006 :: Int))], Map.fromList [("id", (30 :: Int)), ("title", "Beta"), ("production_year", (2008 :: Int))], Map.fromList [("id", (20 :: Int)), ("title", "Gamma"), ("production_year", (2009 :: Int))]]

allowed_infos = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]

candidate_titles = [fromMaybe (error "missing") (Map.lookup "title" t) | k <- keyword, mk <- movie_keyword, mi <- movie_info, t <- title, (fromMaybe (error "missing") (Map.lookup "keyword_id" (mk)) == fromMaybe (error "missing") (Map.lookup "id" (k))), (fromMaybe (error "missing") (Map.lookup "movie_id" (mi)) == fromMaybe (error "missing") (Map.lookup "movie_id" (mk))), (fromMaybe (error "missing") (Map.lookup "id" (t)) == fromMaybe (error "missing") (Map.lookup "movie_id" (mi))), ((((elem (fromMaybe (error "missing") (Map.lookup "contains" (fromMaybe (error "missing") (Map.lookup "keyword" k))) "sequel" && fromMaybe (error "missing") (Map.lookup "info" mi)) allowed_infos && fromMaybe (error "missing") (Map.lookup "production_year" t)) > 2005) && fromMaybe (error "missing") (Map.lookup "movie_id" mk)) == fromMaybe (error "missing") (Map.lookup "movie_id" mi))]

result = [Map.fromList [("movie_title", minimum candidate_titles)]]

test_Q3_returns_lexicographically_smallest_sequel_title :: IO ()
test_Q3_returns_lexicographically_smallest_sequel_title = do
  expect ((result == [Map.fromList [("movie_title", "Alpha")]]))

main :: IO ()
main = do
  _json result
  test_Q3_returns_lexicographically_smallest_sequel_title
