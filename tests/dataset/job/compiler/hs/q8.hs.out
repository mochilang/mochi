{-# LANGUAGE DeriveGeneric #-}

module Main where

import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Key as Key
import qualified Data.Aeson.KeyMap as KeyMap
import qualified Data.ByteString.Lazy.Char8 as BSL
import Data.List (intercalate, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import qualified Data.Text as T
import Data.Time.Clock.POSIX (getPOSIXTime)
import qualified Data.Vector as V

data AnyValue = VInt Int | VDouble Double | VString String | VBool Bool deriving (Show)

instance Aeson.ToJSON AnyValue where
  toJSON (VInt n) = Aeson.toJSON n
  toJSON (VDouble d) = Aeson.toJSON d
  toJSON (VString s) = Aeson.toJSON s
  toJSON (VBool b) = Aeson.toJSON b

_asInt :: AnyValue -> Int
_asInt (VInt n) = n
_asInt v = error ("expected int, got " ++ show v)

_asDouble :: AnyValue -> Double
_asDouble (VDouble d) = d
_asDouble v = error ("expected double, got " ++ show v)

_asString :: AnyValue -> String
_asString (VString s) = s
_asString v = error ("expected string, got " ++ show v)

_asBool :: AnyValue -> Bool
_asBool (VBool b) = b
_asBool v = error ("expected bool, got " ++ show v)

_parseJSON :: String -> [Map.Map String String]
_parseJSON text =
  case Aeson.decode (BSL.pack text) of
    Just (Aeson.Array arr) -> map _valueToMap (V.toList arr)
    Just v -> [_valueToMap v]
    Nothing -> []

_valueToMap :: Aeson.Value -> Map.Map String String
_valueToMap (Aeson.Object o) =
  Map.fromList [(T.unpack (Key.toText k), _valueToString v) | (k, v) <- KeyMap.toList o]
_valueToMap _ = Map.empty

_valueToString :: Aeson.Value -> String
_valueToString (Aeson.String s) = T.unpack s
_valueToString (Aeson.Number n) = show n
_valueToString (Aeson.Bool b) = if b then "true" else "false"
_valueToString _ = ""

_mapToValue :: Map.Map String String -> Aeson.Value
_mapToValue m =
  Aeson.Object $ KeyMap.fromList [(Key.fromString k, Aeson.String (T.pack v)) | (k, v) <- Map.toList m]

_load :: Maybe String -> Maybe (Map.Map String String) -> IO [Map.Map String String]
_load path opts = do
  txt <- _readInput path
  let fmt = fromMaybe "csv" (opts >>= Map.lookup "format")
  pure $ case fmt of
    "json" -> _parseJSON txt
    _ -> _parseCSV txt True ','

_save :: [Map.Map String String] -> Maybe String -> Maybe (Map.Map String String) -> IO ()
_save rows path opts =
  let fmt = fromMaybe "csv" (opts >>= Map.lookup "format")
   in case fmt of
        "json" ->
          let objs = map _mapToValue rows
              val = if length objs == 1 then head objs else Aeson.Array (V.fromList objs)
           in _writeOutput path (BSL.unpack (Aeson.encode val))
        _ ->
          let headers = if null rows then [] else Map.keys (head rows)
              toLine m = intercalate "," [Map.findWithDefault "" h m | h <- headers]
              text = unlines (if null headers then [] else intercalate "," headers : map toLine rows)
           in _writeOutput path text

expect :: Bool -> IO ()
expect True = pure ()
expect False = error "expect failed"

aka_name = [Map.fromList [("person_id", VInt (1)), ("name", VString ("Y. S."))]]

cast_info = [Map.fromList [("person_id", VInt (1)), ("movie_id", VInt (10)), ("note", VString ("(voice: English version)")), ("role_id", VInt (1000))]]

company_name = [Map.fromList [("id", VInt (50)), ("country_code", VString ("[jp]"))]]

movie_companies = [Map.fromList [("movie_id", VInt (10)), ("company_id", VInt (50)), ("note", VString ("Studio (Japan)"))]]

name = [Map.fromList [("id", VInt (1)), ("name", VString ("Yoko Ono"))], Map.fromList [("id", VInt (2)), ("name", VString ("Yuichi"))]]

role_type = [Map.fromList [("id", VInt (1000)), ("role", VString ("actress"))]]

title = [Map.fromList [("id", VInt (10)), ("title", VString ("Dubbed Film"))]]

eligible = [Map.fromList [("pseudonym", VString (fromMaybe (error "missing") (Map.lookup "name" an1))), ("movie_title", VString (fromMaybe (error "missing") (Map.lookup "title" t)))] | an1 <- aka_name, n1 <- name, ci <- cast_info, t <- title, mc <- movie_companies, cn <- company_name, rt <- role_type, (fromMaybe (error "missing") (Map.lookup "id" (n1)) == fromMaybe (error "missing") (Map.lookup "person_id" (an1))), (fromMaybe (error "missing") (Map.lookup "person_id" (ci)) == fromMaybe (error "missing") (Map.lookup "person_id" (an1))), (fromMaybe (error "missing") (Map.lookup "id" (t)) == fromMaybe (error "missing") (Map.lookup "movie_id" (ci))), (fromMaybe (error "missing") (Map.lookup "movie_id" (mc)) == fromMaybe (error "missing") (Map.lookup "movie_id" (ci))), (fromMaybe (error "missing") (Map.lookup "id" (cn)) == fromMaybe (error "missing") (Map.lookup "company_id" (mc))), (fromMaybe (error "missing") (Map.lookup "id" (rt)) == fromMaybe (error "missing") (Map.lookup "role_id" (ci))), (((((((((fromMaybe (error "missing") (Map.lookup "note" ci) == "(voice: English version)") && fromMaybe (error "missing") (Map.lookup "country_code" cn)) == "[jp]") && fromMaybe (error "missing") (Map.lookup "contains" (fromMaybe (error "missing") (Map.lookup "note" mc))) "(Japan)") && (not fromMaybe (error "missing") (Map.lookup "contains" (fromMaybe (error "missing") (Map.lookup "note" mc))) "(USA)")) && fromMaybe (error "missing") (Map.lookup "contains" (fromMaybe (error "missing") (Map.lookup "name" n1))) "Yo") && (not fromMaybe (error "missing") (Map.lookup "contains" (fromMaybe (error "missing") (Map.lookup "name" n1))) "Yu")) && fromMaybe (error "missing") (Map.lookup "role" rt)) == "actress")]

result = [Map.fromList [("actress_pseudonym", VString (min [fromMaybe (error "missing") (Map.lookup "pseudonym" x) | x <- eligible])), ("japanese_movie_dubbed", VString (min [fromMaybe (error "missing") (Map.lookup "movie_title" x) | x <- eligible]))]]

test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing :: IO ()
test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing = do
  expect ((result == [Map.fromList [("actress_pseudonym", "Y. S."), ("japanese_movie_dubbed", "Dubbed Film")]]))

main :: IO ()
main = do
  print (result)
  test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing
