fn test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() {
    expect(result == std::collections::HashMap::from([("production_note".to_string(), "ACME (co-production)"), ("movie_title".to_string(), "Good Movie"), ("movie_year".to_string(), 1995)]));
}

fn main() {
    let mut company_type = vec![std::collections::HashMap::from([("id".to_string(), 1), ("kind".to_string(), "production companies")]), std::collections::HashMap::from([("id".to_string(), 2), ("kind".to_string(), "distributors")])];
    let mut info_type = vec![std::collections::HashMap::from([("id".to_string(), 10), ("info".to_string(), "top 250 rank")]), std::collections::HashMap::from([("id".to_string(), 20), ("info".to_string(), "bottom 10 rank")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 100), ("title".to_string(), "Good Movie"), ("production_year".to_string(), 1995)]), std::collections::HashMap::from([("id".to_string(), 200), ("title".to_string(), "Bad Movie"), ("production_year".to_string(), 2000)])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("company_type_id".to_string(), 1), ("note".to_string(), "ACME (co-production)")]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("company_type_id".to_string(), 1), ("note".to_string(), "MGM (as Metro-Goldwyn-Mayer Pictures)")])];
    let mut movie_info_idx = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("info_type_id".to_string(), 10)]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("info_type_id".to_string(), 20)])];
    let mut filtered = {
    let mut _res = Vec::new();
    for ct in company_type.clone() {
        for mc in movie_companies.clone() {
            if !(_map_get(&ct, &"id".to_string()) == _map_get(&mc, &"company_type_id".to_string())) { continue; }
            for t in title.clone() {
                if !(_map_get(&t, &"id".to_string()) == _map_get(&mc, &"movie_id".to_string())) { continue; }
                for mi in movie_info_idx.clone() {
                    if !(_map_get(&mi, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                    for it in info_type.clone() {
                        if !(_map_get(&it, &"id".to_string()) == _map_get(&mi, &"info_type_id".to_string())) { continue; }
                        if _map_get(&ct, &"id".to_string()) == _map_get(&mc, &"company_type_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&mc, &"movie_id".to_string()) && _map_get(&mi, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&it, &"id".to_string()) == _map_get(&mi, &"info_type_id".to_string()) && _map_get(&ct, &"kind".to_string()) == "production companies" && _map_get(&it, &"info".to_string()) == "top 250 rank" && (!_map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(as Metro-Goldwyn-Mayer Pictures)")) && (_map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(co-production)") || _map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(presents)")) {
                            _res.push(std::collections::HashMap::from([("note".to_string(), _map_get(&mc, &"note".to_string())), ("title".to_string(), _map_get(&t, &"title".to_string())), ("year".to_string(), _map_get(&t, &"production_year".to_string()))]));
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = std::collections::HashMap::from([("production_note".to_string(), min({
    let mut _res = Vec::new();
    for r in filtered {
        _res.push(_map_get(&r, &"note".to_string()));
    }
    _res
})), ("movie_title".to_string(), min({
    let mut _res = Vec::new();
    for r in filtered {
        _res.push(_map_get(&r, &"title".to_string()));
    }
    _res
})), ("movie_year".to_string(), min({
    let mut _res = Vec::new();
    for r in filtered {
        _res.push(_map_get(&r, &"year".to_string()));
    }
    _res
}))]);
    json(vec![result]);
    test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
