// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:13:24Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Aka_name {
    person_id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Char_name {
    id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Cast_info {
    movie_id: i32,
    person_role_id: i32,
    person_id: i32,
    role_id: i32,
    note: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
    note: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info_type_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Name {
    id: i32,
    name: &'static str,
    gender: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Role_type {
    id: i32,
    role: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
    production_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    actress: &'static str,
    movie: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    voicing_actress: &'static str,
    voiced_movie: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let aka_name = vec![Aka_name { person_id: 1, name: "A. Stone" }, Aka_name { person_id: 2, name: "J. Doe" }];
    let char_name = vec![Char_name { id: 1, name: "Protagonist" }, Char_name { id: 2, name: "Extra" }];
    let cast_info = vec![Cast_info { movie_id: 1, person_role_id: 1, person_id: 1, role_id: 1, note: "(voice)" }, Cast_info { movie_id: 2, person_role_id: 2, person_id: 2, role_id: 2, note: "Cameo" }];
    let company_name = vec![Company_name { id: 10, country_code: "[us]" }, Company_name { id: 20, country_code: "[gb]" }];
    let info_type = vec![Info_type { id: 100, info: "release dates" }];
    let movie_companies = vec![Movie_companie { movie_id: 1, company_id: 10, note: "Studio (USA)" }, Movie_companie { movie_id: 2, company_id: 20, note: "Other (worldwide)" }];
    let movie_info = vec![Movie_info { movie_id: 1, info_type_id: 100, info: "USA: June 2006" }, Movie_info { movie_id: 2, info_type_id: 100, info: "UK: 1999" }];
    let name = vec![Name { id: 1, name: "Angela Stone", gender: "f" }, Name { id: 2, name: "Bob Angstrom", gender: "m" }];
    let role_type = vec![Role_type { id: 1, role: "actress" }, Role_type { id: 2, role: "actor" }];
    let title = vec![Title { id: 1, title: "Voiced Movie", production_year: 2006 }, Title { id: 2, title: "Other Movie", production_year: 2010 }];
    let matches = { let mut tmp1 = Vec::new();for an in &aka_name { for n in &name { if !(n.id == an.person_id) { continue; } for ci in &cast_info { if !(ci.person_id == an.person_id) { continue; } for chn in &char_name { if !(chn.id == ci.person_role_id) { continue; } for rt in &role_type { if !(rt.id == ci.role_id) { continue; } for t in &title { if !(t.id == ci.movie_id) { continue; } for mc in &movie_companies { if !(mc.movie_id == t.id) { continue; } for cn in &company_name { if !(cn.id == mc.company_id) { continue; } for mi in &movie_info { if !(mi.movie_id == t.id) { continue; } for it in &info_type { if !(it.id == mi.info_type_id) { continue; } if !(vec!["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"].contains(&ci.note) && cn.country_code == "[us]" && it.info == "release dates" && mc.note != () && (mc.note.contains("(USA)") || mc.note.contains("(worldwide)")) && mi.info != () && ((mi.info.contains("Japan:") && mi.info.contains("200")) || (mi.info.contains("USA:") && mi.info.contains("200"))) && n.gender == "f" && n.name.contains("Ang") && rt.role == "actress" && t.production_year >= 2005 && t.production_year <= 2009) { continue; } tmp1.push(Result { actress: n.name, movie: t.title }); } } } } } } } } } } tmp1 };
    let result = vec![Result1 { voicing_actress: min(&{ let mut tmp2 = Vec::new();for r in &matches { tmp2.push(r.actress); } tmp2 }), voiced_movie: min(&{ let mut tmp3 = Vec::new();for r in &matches { tmp3.push(r.movie); } tmp3 }) }];
    _json(&result);
    assert!(result == vec![Result1 { voicing_actress: "Angela Stone", voiced_movie: "Voiced Movie" }]);
}
