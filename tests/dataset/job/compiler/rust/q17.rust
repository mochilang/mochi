// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:18:40Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Cast_info {
    movie_id: i32,
    person_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Name {
    id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    member_in_charnamed_american_movie: &'static str,
    a1: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let cast_info = vec![Cast_info { movie_id: 1, person_id: 1 }, Cast_info { movie_id: 2, person_id: 2 }];
    let company_name = vec![Company_name { id: 1, country_code: "[us]" }, Company_name { id: 2, country_code: "[ca]" }];
    let keyword = vec![Keyword { id: 10, keyword: "character-name-in-title" }, Keyword { id: 20, keyword: "other" }];
    let movie_companies = vec![Movie_companie { movie_id: 1, company_id: 1 }, Movie_companie { movie_id: 2, company_id: 2 }];
    let movie_keyword = vec![Movie_keyword { movie_id: 1, keyword_id: 10 }, Movie_keyword { movie_id: 2, keyword_id: 20 }];
    let name = vec![Name { id: 1, name: "Bob Smith" }, Name { id: 2, name: "Alice Jones" }];
    let title = vec![Title { id: 1, title: "Bob's Journey" }, Title { id: 2, title: "Foreign Film" }];
    let matches = { let mut tmp1 = Vec::new();for n in &name { for ci in &cast_info { if !(ci.person_id == n.id) { continue; } for t in &title { if !(t.id == ci.movie_id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } for mc in &movie_companies { if !(mc.movie_id == t.id) { continue; } for cn in &company_name { if !(cn.id == mc.company_id) { continue; } if !(cn.country_code == "[us]" && k.keyword == "character-name-in-title" && n.name.starts_with("B") && ci.movie_id == mk.movie_id && ci.movie_id == mc.movie_id && mc.movie_id == mk.movie_id != Default::default()) { continue; } tmp1.push(n.name); } } } } } } } tmp1 };
    let result = vec![Result { member_in_charnamed_american_movie: min(&matches), a1: min(&matches) }];
    _json(&result);
    assert!(result == vec![Result { member_in_charnamed_american_movie: "Bob Smith", a1: "Bob Smith" }]);
}
