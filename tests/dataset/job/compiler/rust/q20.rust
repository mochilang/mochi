// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:18:41Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Comp_cast_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Char_name {
    id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Complete_cast {
    movie_id: i32,
    subject_id: i32,
    status_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Name {
    id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Cast_info {
    movie_id: i32,
    person_role_id: i32,
    person_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Kind_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    kind_id: i32,
    production_year: i32,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    complete_downey_ironman_movie: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let comp_cast_type = vec![Comp_cast_type { id: 1, kind: "cast" }, Comp_cast_type { id: 2, kind: "complete cast" }];
    let char_name = vec![Char_name { id: 1, name: "Tony Stark" }, Char_name { id: 2, name: "Sherlock Holmes" }];
    let complete_cast = vec![Complete_cast { movie_id: 1, subject_id: 1, status_id: 2 }, Complete_cast { movie_id: 2, subject_id: 1, status_id: 2 }];
    let name = vec![Name { id: 1, name: "Robert Downey Jr." }, Name { id: 2, name: "Another Actor" }];
    let cast_info = vec![Cast_info { movie_id: 1, person_role_id: 1, person_id: 1 }, Cast_info { movie_id: 2, person_role_id: 2, person_id: 2 }];
    let keyword = vec![Keyword { id: 10, keyword: "superhero" }, Keyword { id: 20, keyword: "romance" }];
    let movie_keyword = vec![Movie_keyword { movie_id: 1, keyword_id: 10 }, Movie_keyword { movie_id: 2, keyword_id: 20 }];
    let kind_type = vec![Kind_type { id: 1, kind: "movie" }];
    let title = vec![Title { id: 1, kind_id: 1, production_year: 2008, title: "Iron Man" }, Title { id: 2, kind_id: 1, production_year: 1940, title: "Old Hero" }];
    let matches = { let mut tmp1 = Vec::new();for cc in &complete_cast { for cct1 in &comp_cast_type { if !(cct1.id == cc.subject_id) { continue; } for cct2 in &comp_cast_type { if !(cct2.id == cc.status_id) { continue; } for ci in &cast_info { if !(ci.movie_id == cc.movie_id) { continue; } for chn in &char_name { if !(chn.id == ci.person_role_id) { continue; } for n in &name { if !(n.id == ci.person_id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == cc.movie_id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } for t in &title { if !(t.id == cc.movie_id) { continue; } for kt in &kind_type { if !(kt.id == t.kind_id) { continue; } if !(vec!["superhero", "sequel", "second-part", "marvel-comics", "based-on-comic", "tv-special", "fight", "violence"].contains(&cct1.kind == "cast" && cct2.kind.contains("complete") && (!chn.name.contains("Sherlock")) && (chn.name.contains("Tony Stark") || chn.name.contains("Iron Man")) && k.keyword) && kt.kind == "movie" && t.production_year > 1950) { continue; } tmp1.push(t.title); } } } } } } } } } } tmp1 };
    let result = vec![Result { complete_downey_ironman_movie: min(&matches) }];
    _json(&result);
    assert!(result == vec![Result { complete_downey_ironman_movie: "Iron Man" }]);
}
