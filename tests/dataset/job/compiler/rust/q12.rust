// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:13:22Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    name: &'static str,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info_type_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Movie_info_idx {
    movie_id: i32,
    info_type_id: i32,
    info: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    production_year: i32,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    movie_company: &'static str,
    rating: f64,
    drama_horror_movie: &'static str,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let company_name = vec![Company_name { id: 1, name: "Best Pictures", country_code: "[us]" }, Company_name { id: 2, name: "Foreign Films", country_code: "[uk]" }];
    let company_type = vec![Company_type { id: 10, kind: "production companies" }, Company_type { id: 20, kind: "distributors" }];
    let info_type = vec![Info_type { id: 100, info: "genres" }, Info_type { id: 200, info: "rating" }];
    let movie_companies = vec![Movie_companie { movie_id: 1000, company_id: 1, company_type_id: 10 }, Movie_companie { movie_id: 2000, company_id: 2, company_type_id: 10 }];
    let movie_info = vec![Movie_info { movie_id: 1000, info_type_id: 100, info: "Drama" }, Movie_info { movie_id: 2000, info_type_id: 100, info: "Horror" }];
    let movie_info_idx = vec![Movie_info_idx { movie_id: 1000, info_type_id: 200, info: 8.3 }, Movie_info_idx { movie_id: 2000, info_type_id: 200, info: 7.5 }];
    let title = vec![Title { id: 1000, production_year: 2006, title: "Great Drama" }, Title { id: 2000, production_year: 2007, title: "Low Rated" }];
    let result = { let mut tmp1 = Vec::new();for cn in &company_name { for mc in &movie_companies { if !(mc.company_id == cn.id) { continue; } for ct in &company_type { if !(ct.id == mc.company_type_id) { continue; } for t in &title { if !(t.id == mc.movie_id) { continue; } for mi in &movie_info { if !(mi.movie_id == t.id) { continue; } for it1 in &info_type { if !(it1.id == mi.info_type_id) { continue; } for mi_idx in &movie_info_idx { if !(mi_idx.movie_id == t.id) { continue; } for it2 in &info_type { if !(it2.id == mi_idx.info_type_id) { continue; } if !(cn.country_code == "[us]" && ct.kind == "production companies" && it1.info == "genres" && it2.info == "rating" && (mi.info == "Drama" || mi.info == "Horror") && mi_idx.info > 8.0 && t.production_year >= 2005 && t.production_year <= 2008) { continue; } tmp1.push(Result { movie_company: cn.name, rating: mi_idx.info, drama_horror_movie: t.title }); } } } } } } } } tmp1 };
    _json(&result);
    assert!(result == vec![Result { movie_company: "Best Pictures", rating: 8.3, drama_horror_movie: "Great Drama" }]);
}
