fn test_Q10_finds_uncredited_voice_actor_in_Russian_movie() {
    expect(result == vec![std::collections::HashMap::from([("uncredited_voiced_character".to_string(), "Ivan"), ("russian_movie".to_string(), "Vodka Dreams")])]);
}

fn main() {
    let mut char_name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("name".to_string(), "Ivan")]), std::collections::HashMap::from([("id".to_string(), 2), ("name".to_string(), "Alex")])];
    let mut cast_info = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("person_role_id".to_string(), 1), ("role_id".to_string(), 1), ("note".to_string(), "Soldier (voice) (uncredited)")]), std::collections::HashMap::from([("movie_id".to_string(), 11), ("person_role_id".to_string(), 2), ("role_id".to_string(), 1), ("note".to_string(), "(voice)")])];
    let mut company_name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("country_code".to_string(), "[ru]")]), std::collections::HashMap::from([("id".to_string(), 2), ("country_code".to_string(), "[us]")])];
    let mut company_type = vec![std::collections::HashMap::from([("id".to_string(), 1)]), std::collections::HashMap::from([("id".to_string(), 2)])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("company_id".to_string(), 1), ("company_type_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 11), ("company_id".to_string(), 2), ("company_type_id".to_string(), 1)])];
    let mut role_type = vec![std::collections::HashMap::from([("id".to_string(), 1), ("role".to_string(), "actor")]), std::collections::HashMap::from([("id".to_string(), 2), ("role".to_string(), "director")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 10), ("title".to_string(), "Vodka Dreams"), ("production_year".to_string(), 2006)]), std::collections::HashMap::from([("id".to_string(), 11), ("title".to_string(), "Other Film"), ("production_year".to_string(), 2004)])];
    let mut matches = {
    let mut _res = Vec::new();
    for chn in char_name.clone() {
        for ci in cast_info.clone() {
            if !(_map_get(&chn, &"id".to_string()) == _map_get(&ci, &"person_role_id".to_string())) { continue; }
            for rt in role_type.clone() {
                if !(_map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string())) { continue; }
                for t in title.clone() {
                    if !(_map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string())) { continue; }
                    for mc in movie_companies.clone() {
                        if !(_map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                        for cn in company_name.clone() {
                            if !(_map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string())) { continue; }
                            for ct in company_type.clone() {
                                if !(_map_get(&ct, &"id".to_string()) == _map_get(&mc, &"company_type_id".to_string())) { continue; }
                                if _map_get(&chn, &"id".to_string()) == _map_get(&ci, &"person_role_id".to_string()) && _map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string()) && _map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string()) && _map_get(&ct, &"id".to_string()) == _map_get(&mc, &"company_type_id".to_string()) && _map_get(&_map_get(&ci, &"note".to_string()), &"contains".to_string())("(voice)") && _map_get(&_map_get(&ci, &"note".to_string()), &"contains".to_string())("(uncredited)") && _map_get(&cn, &"country_code".to_string()) == "[ru]" && _map_get(&rt, &"role".to_string()) == "actor" && _map_get(&t, &"production_year".to_string()) > 2005 {
                                    _res.push(std::collections::HashMap::from([("character".to_string(), _map_get(&chn, &"name".to_string())), ("movie".to_string(), _map_get(&t, &"title".to_string()))]));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("uncredited_voiced_character".to_string(), min({
    let mut _res = Vec::new();
    for x in matches {
        _res.push(_map_get(&x, &"character".to_string()));
    }
    _res
})), ("russian_movie".to_string(), min({
    let mut _res = Vec::new();
    for x in matches {
        _res.push(_map_get(&x, &"movie".to_string()));
    }
    _res
}))])];
    json(result);
    test_Q10_finds_uncredited_voice_actor_in_Russian_movie();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
