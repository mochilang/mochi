fn test_Q4_returns_minimum_rating_and_title_for_sequels() {
    expect(result == vec![std::collections::HashMap::from([("rating".to_string(), "6.2"), ("movie_title".to_string(), "Alpha Movie")])]);
}

fn main() {
    let mut info_type = vec![std::collections::HashMap::from([("id".to_string(), 1), ("info".to_string(), "rating")]), std::collections::HashMap::from([("id".to_string(), 2), ("info".to_string(), "other")])];
    let mut keyword = vec![std::collections::HashMap::from([("id".to_string(), 1), ("keyword".to_string(), "great sequel")]), std::collections::HashMap::from([("id".to_string(), 2), ("keyword".to_string(), "prequel")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 10), ("title".to_string(), "Alpha Movie"), ("production_year".to_string(), 2006)]), std::collections::HashMap::from([("id".to_string(), 20), ("title".to_string(), "Beta Film"), ("production_year".to_string(), 2007)]), std::collections::HashMap::from([("id".to_string(), 30), ("title".to_string(), "Old Film"), ("production_year".to_string(), 2004)])];
    let mut movie_keyword = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 20), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 30), ("keyword_id".to_string(), 1)])];
    let mut movie_info_idx = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("info_type_id".to_string(), 1), ("info".to_string(), "6.2")]), std::collections::HashMap::from([("movie_id".to_string(), 20), ("info_type_id".to_string(), 1), ("info".to_string(), "7.8")]), std::collections::HashMap::from([("movie_id".to_string(), 30), ("info_type_id".to_string(), 1), ("info".to_string(), "4.5")])];
    let mut rows = {
    let mut _res = Vec::new();
    for it in info_type.clone() {
        for mi in movie_info_idx.clone() {
            if !(_map_get(&it, &"id".to_string()) == _map_get(&mi, &"info_type_id".to_string())) { continue; }
            for t in title.clone() {
                if !(_map_get(&t, &"id".to_string()) == _map_get(&mi, &"movie_id".to_string())) { continue; }
                for mk in movie_keyword.clone() {
                    if !(_map_get(&mk, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                    for k in keyword.clone() {
                        if !(_map_get(&k, &"id".to_string()) == _map_get(&mk, &"keyword_id".to_string())) { continue; }
                        if _map_get(&it, &"id".to_string()) == _map_get(&mi, &"info_type_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&mi, &"movie_id".to_string()) && _map_get(&mk, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&k, &"id".to_string()) == _map_get(&mk, &"keyword_id".to_string()) && _map_get(&it, &"info".to_string()) == "rating" && _map_get(&_map_get(&k, &"keyword".to_string()), &"contains".to_string())("sequel") && _map_get(&mi, &"info".to_string()) > "5.0" && _map_get(&t, &"production_year".to_string()) > 2005 && _map_get(&mk, &"movie_id".to_string()) == _map_get(&mi, &"movie_id".to_string()) {
                            _res.push(std::collections::HashMap::from([("rating".to_string(), _map_get(&mi, &"info".to_string())), ("title".to_string(), _map_get(&t, &"title".to_string()))]));
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("rating".to_string(), min({
    let mut _res = Vec::new();
    for r in rows {
        _res.push(_map_get(&r, &"rating".to_string()));
    }
    _res
})), ("movie_title".to_string(), min({
    let mut _res = Vec::new();
    for r in rows {
        _res.push(_map_get(&r, &"title".to_string()));
    }
    _res
}))])];
    json(result);
    test_Q4_returns_minimum_rating_and_title_for_sequels();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
