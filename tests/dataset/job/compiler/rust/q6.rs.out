fn test_Q6_finds_marvel_movie_with_Robert_Downey() {
    expect(result == vec![std::collections::HashMap::from([("movie_keyword".to_string(), "marvel-cinematic-universe"), ("actor_name".to_string(), "Downey Robert Jr."), ("marvel_movie".to_string(), "Iron Man 3")])]);
}

fn main() {
    let mut cast_info = vec![std::collections::HashMap::from([("movie_id".to_string(), 1), ("person_id".to_string(), 101)]), std::collections::HashMap::from([("movie_id".to_string(), 2), ("person_id".to_string(), 102)])];
    let mut keyword = vec![std::collections::HashMap::from([("id".to_string(), 100), ("keyword".to_string(), "marvel-cinematic-universe")]), std::collections::HashMap::from([("id".to_string(), 200), ("keyword".to_string(), "other")])];
    let mut movie_keyword = vec![std::collections::HashMap::from([("movie_id".to_string(), 1), ("keyword_id".to_string(), 100)]), std::collections::HashMap::from([("movie_id".to_string(), 2), ("keyword_id".to_string(), 200)])];
    let mut name = vec![std::collections::HashMap::from([("id".to_string(), 101), ("name".to_string(), "Downey Robert Jr.")]), std::collections::HashMap::from([("id".to_string(), 102), ("name".to_string(), "Chris Evans")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 1), ("title".to_string(), "Iron Man 3"), ("production_year".to_string(), 2013)]), std::collections::HashMap::from([("id".to_string(), 2), ("title".to_string(), "Old Movie"), ("production_year".to_string(), 2000)])];
    let mut result = {
    let mut _res = Vec::new();
    for ci in cast_info.clone() {
        for mk in movie_keyword.clone() {
            if !(_map_get(&ci, &"movie_id".to_string()) == _map_get(&mk, &"movie_id".to_string())) { continue; }
            for k in keyword.clone() {
                if !(_map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string())) { continue; }
                for n in name.clone() {
                    if !(_map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string())) { continue; }
                    for t in title.clone() {
                        if !(_map_get(&ci, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                        if _map_get(&ci, &"movie_id".to_string()) == _map_get(&mk, &"movie_id".to_string()) && _map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string()) && _map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string()) && _map_get(&ci, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&k, &"keyword".to_string()) == "marvel-cinematic-universe" && _map_get(&_map_get(&n, &"name".to_string()), &"contains".to_string())("Downey") && _map_get(&_map_get(&n, &"name".to_string()), &"contains".to_string())("Robert") && _map_get(&t, &"production_year".to_string()) > 2010 {
                            _res.push(std::collections::HashMap::from([("movie_keyword".to_string(), _map_get(&k, &"keyword".to_string())), ("actor_name".to_string(), _map_get(&n, &"name".to_string())), ("marvel_movie".to_string(), _map_get(&t, &"title".to_string()))]));
                        }
                    }
                }
            }
        }
    }
    _res
};
    json(result);
    test_Q6_finds_marvel_movie_with_Robert_Downey();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
