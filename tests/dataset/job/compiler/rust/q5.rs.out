fn test_Q5_finds_the_lexicographically_first_qualifying_title() {
    expect(result == vec![std::collections::HashMap::from([("typical_european_movie".to_string(), "A Film")])]);
}

fn main() {
    let mut company_type = vec![std::collections::HashMap::from([("ct_id".to_string(), 1), ("kind".to_string(), "production companies")]), std::collections::HashMap::from([("ct_id".to_string(), 2), ("kind".to_string(), "other")])];
    let mut info_type = vec![std::collections::HashMap::from([("it_id".to_string(), 10), ("info".to_string(), "languages")])];
    let mut title = vec![std::collections::HashMap::from([("t_id".to_string(), 100), ("title".to_string(), "B Movie"), ("production_year".to_string(), 2010)]), std::collections::HashMap::from([("t_id".to_string(), 200), ("title".to_string(), "A Film"), ("production_year".to_string(), 2012)]), std::collections::HashMap::from([("t_id".to_string(), 300), ("title".to_string(), "Old Movie"), ("production_year".to_string(), 2000)])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("company_type_id".to_string(), 1), ("note".to_string(), "ACME (France) (theatrical)")]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("company_type_id".to_string(), 1), ("note".to_string(), "ACME (France) (theatrical)")]), std::collections::HashMap::from([("movie_id".to_string(), 300), ("company_type_id".to_string(), 1), ("note".to_string(), "ACME (France) (theatrical)")])];
    let mut movie_info = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("info".to_string(), "German"), ("info_type_id".to_string(), 10)]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("info".to_string(), "Swedish"), ("info_type_id".to_string(), 10)]), std::collections::HashMap::from([("movie_id".to_string(), 300), ("info".to_string(), "German"), ("info_type_id".to_string(), 10)])];
    let mut candidate_titles = {
    let mut _res = Vec::new();
    for ct in company_type.clone() {
        for mc in movie_companies.clone() {
            if !(_map_get(&mc, &"company_type_id".to_string()) == _map_get(&ct, &"ct_id".to_string())) { continue; }
            for mi in movie_info.clone() {
                if !(_map_get(&mi, &"movie_id".to_string()) == _map_get(&mc, &"movie_id".to_string())) { continue; }
                for it in info_type.clone() {
                    if !(_map_get(&it, &"it_id".to_string()) == _map_get(&mi, &"info_type_id".to_string())) { continue; }
                    for t in title.clone() {
                        if !(_map_get(&t, &"t_id".to_string()) == _map_get(&mc, &"movie_id".to_string())) { continue; }
                        if _map_get(&mc, &"company_type_id".to_string()) == _map_get(&ct, &"ct_id".to_string()) && _map_get(&mi, &"movie_id".to_string()) == _map_get(&mc, &"movie_id".to_string()) && _map_get(&it, &"it_id".to_string()) == _map_get(&mi, &"info_type_id".to_string()) && _map_get(&t, &"t_id".to_string()) == _map_get(&mc, &"movie_id".to_string()) && _map_get(&mc, &"note".to_string()).contains(&_map_get(&mc, &"note".to_string()).contains(&_map_get(&ct, &"kind".to_string()) == "production companies" && "(theatrical)") && "(France)") && _map_get(&t, &"production_year".to_string()) > 2005 && (vec!["Sweden".to_string(), "Norway".to_string(), "Germany".to_string(), "Denmark".to_string(), "Swedish".to_string(), "Denish".to_string(), "Norwegian".to_string(), "German".to_string()].contains(&_map_get(&mi, &"info".to_string()))) {
                            _res.push(_map_get(&t, &"title".to_string()));
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("typical_european_movie".to_string(), min(candidate_titles))])];
    json(result);
    test_Q5_finds_the_lexicographically_first_qualifying_title();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
