// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:13:23Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Kind_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    kind_id: i32,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info_type_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info_idx {
    movie_id: i32,
    info_type_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    release_date: &'static str,
    rating: &'static str,
    german_movie: &'static str,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let company_name = vec![Company_name { id: 1, country_code: "[de]" }, Company_name { id: 2, country_code: "[us]" }];
    let company_type = vec![Company_type { id: 1, kind: "production companies" }, Company_type { id: 2, kind: "distributors" }];
    let info_type = vec![Info_type { id: 1, info: "rating" }, Info_type { id: 2, info: "release dates" }];
    let kind_type = vec![Kind_type { id: 1, kind: "movie" }, Kind_type { id: 2, kind: "video" }];
    let title = vec![Title { id: 10, kind_id: 1, title: "Alpha" }, Title { id: 20, kind_id: 1, title: "Beta" }, Title { id: 30, kind_id: 2, title: "Gamma" }];
    let movie_companies = vec![Movie_companie { movie_id: 10, company_id: 1, company_type_id: 1 }, Movie_companie { movie_id: 20, company_id: 1, company_type_id: 1 }, Movie_companie { movie_id: 30, company_id: 2, company_type_id: 1 }];
    let movie_info = vec![Movie_info { movie_id: 10, info_type_id: 2, info: "1997-05-10" }, Movie_info { movie_id: 20, info_type_id: 2, info: "1998-03-20" }, Movie_info { movie_id: 30, info_type_id: 2, info: "1999-07-30" }];
    let movie_info_idx = vec![Movie_info_idx { movie_id: 10, info_type_id: 1, info: "6.0" }, Movie_info_idx { movie_id: 20, info_type_id: 1, info: "7.5" }, Movie_info_idx { movie_id: 30, info_type_id: 1, info: "5.5" }];
    let candidates = { let mut tmp1 = Vec::new();for cn in &company_name { for mc in &movie_companies { if !(mc.company_id == cn.id) { continue; } for ct in &company_type { if !(ct.id == mc.company_type_id) { continue; } for t in &title { if !(t.id == mc.movie_id) { continue; } for kt in &kind_type { if !(kt.id == t.kind_id) { continue; } for mi in &movie_info { if !(mi.movie_id == t.id) { continue; } for it2 in &info_type { if !(it2.id == mi.info_type_id) { continue; } for miidx in &movie_info_idx { if !(miidx.movie_id == t.id) { continue; } for it in &info_type { if !(it.id == miidx.info_type_id) { continue; } if !(cn.country_code == "[de]" && ct.kind == "production companies" && it.info == "rating" && it2.info == "release dates" && kt.kind == "movie") { continue; } tmp1.push(Result { release_date: mi.info, rating: miidx.info, german_movie: t.title }); } } } } } } } } } tmp1 };
    let result = Result { release_date: ({ let mut tmp2 = Vec::new();for x in &candidates { let tmp3 = x.release_date; let tmp4 = x.release_date; tmp2.push((tmp4, tmp3)); } tmp2.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp5 = Vec::new(); for p in tmp2 { tmp5.push(p.1); } tmp5 })[0], rating: ({ let mut tmp6 = Vec::new();for x in &candidates { let tmp7 = x.rating; let tmp8 = x.rating; tmp6.push((tmp8, tmp7)); } tmp6.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp9 = Vec::new(); for p in tmp6 { tmp9.push(p.1); } tmp9 })[0], german_movie: ({ let mut tmp10 = Vec::new();for x in &candidates { let tmp11 = x.german_movie; let tmp12 = x.german_movie; tmp10.push((tmp12, tmp11)); } tmp10.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp13 = Vec::new(); for p in tmp10 { tmp13.push(p.1); } tmp13 })[0] };
    _json(&result.clone());
    assert!(result.clone() == Result { release_date: "1997-05-10", rating: "6.0", german_movie: "Alpha" });
}
