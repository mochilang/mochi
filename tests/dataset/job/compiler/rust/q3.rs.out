fn test_Q3_returns_lexicographically_smallest_sequel_title() {
    expect(result == vec![std::collections::HashMap::from([("movie_title".to_string(), "Alpha")])]);
}

fn main() {
    let mut keyword = vec![std::collections::HashMap::from([("id".to_string(), 1), ("keyword".to_string(), "amazing sequel")]), std::collections::HashMap::from([("id".to_string(), 2), ("keyword".to_string(), "prequel")])];
    let mut movie_info = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("info".to_string(), "Germany")]), std::collections::HashMap::from([("movie_id".to_string(), 30), ("info".to_string(), "Sweden")]), std::collections::HashMap::from([("movie_id".to_string(), 20), ("info".to_string(), "France")])];
    let mut movie_keyword = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 30), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 20), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 10), ("keyword_id".to_string(), 2)])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 10), ("title".to_string(), "Alpha"), ("production_year".to_string(), 2006)]), std::collections::HashMap::from([("id".to_string(), 30), ("title".to_string(), "Beta"), ("production_year".to_string(), 2008)]), std::collections::HashMap::from([("id".to_string(), 20), ("title".to_string(), "Gamma"), ("production_year".to_string(), 2009)])];
    let mut allowed_infos = vec!["Sweden".to_string(), "Norway".to_string(), "Germany".to_string(), "Denmark".to_string(), "Swedish".to_string(), "Denish".to_string(), "Norwegian".to_string(), "German".to_string()];
    let mut candidate_titles = {
    let mut _res = Vec::new();
    for k in keyword.clone() {
        for mk in movie_keyword.clone() {
            if !(_map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string())) { continue; }
            for mi in movie_info.clone() {
                if !(_map_get(&mi, &"movie_id".to_string()) == _map_get(&mk, &"movie_id".to_string())) { continue; }
                for t in title.clone() {
                    if !(_map_get(&t, &"id".to_string()) == _map_get(&mi, &"movie_id".to_string())) { continue; }
                    if _map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string()) && _map_get(&mi, &"movie_id".to_string()) == _map_get(&mk, &"movie_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&mi, &"movie_id".to_string()) && allowed_infos.contains(&_map_get(&_map_get(&k, &"keyword".to_string()), &"contains".to_string())("sequel") && _map_get(&mi, &"info".to_string())) && _map_get(&t, &"production_year".to_string()) > 2005 && _map_get(&mk, &"movie_id".to_string()) == _map_get(&mi, &"movie_id".to_string()) {
                        _res.push(_map_get(&t, &"title".to_string()));
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("movie_title".to_string(), min(candidate_titles))])];
    json(result);
    test_Q3_returns_lexicographically_smallest_sequel_title();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
