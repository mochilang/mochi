fn test_Q7_finds_movie_features_biography_for_person() {
    expect(result == vec![std::collections::HashMap::from([("of_person".to_string(), "Alan Brown"), ("biography_movie".to_string(), "Feature Film")])]);
}

fn main() {
    let mut aka_name = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("name".to_string(), "Anna Mae")]), std::collections::HashMap::from([("person_id".to_string(), 2), ("name".to_string(), "Chris")])];
    let mut cast_info = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("movie_id".to_string(), 10)]), std::collections::HashMap::from([("person_id".to_string(), 2), ("movie_id".to_string(), 20)])];
    let mut info_type = vec![std::collections::HashMap::from([("id".to_string(), 1), ("info".to_string(), "mini biography")]), std::collections::HashMap::from([("id".to_string(), 2), ("info".to_string(), "trivia")])];
    let mut link_type = vec![std::collections::HashMap::from([("id".to_string(), 1), ("link".to_string(), "features")]), std::collections::HashMap::from([("id".to_string(), 2), ("link".to_string(), "references")])];
    let mut movie_link = vec![std::collections::HashMap::from([("linked_movie_id".to_string(), 10), ("link_type_id".to_string(), 1)]), std::collections::HashMap::from([("linked_movie_id".to_string(), 20), ("link_type_id".to_string(), 2)])];
    let mut name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("name".to_string(), "Alan Brown"), ("name_pcode_cf".to_string(), "B"), ("gender".to_string(), "m")]), std::collections::HashMap::from([("id".to_string(), 2), ("name".to_string(), "Zoe"), ("name_pcode_cf".to_string(), "Z"), ("gender".to_string(), "f")])];
    let mut person_info = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("info_type_id".to_string(), 1), ("note".to_string(), "Volker Boehm")]), std::collections::HashMap::from([("person_id".to_string(), 2), ("info_type_id".to_string(), 1), ("note".to_string(), "Other")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 10), ("title".to_string(), "Feature Film"), ("production_year".to_string(), 1990)]), std::collections::HashMap::from([("id".to_string(), 20), ("title".to_string(), "Late Film"), ("production_year".to_string(), 2000)])];
    let mut rows = {
    let mut _res = Vec::new();
    for an in aka_name.clone() {
        for n in name.clone() {
            if !(_map_get(&n, &"id".to_string()) == _map_get(&an, &"person_id".to_string())) { continue; }
            for pi in person_info.clone() {
                if !(_map_get(&pi, &"person_id".to_string()) == _map_get(&an, &"person_id".to_string())) { continue; }
                for it in info_type.clone() {
                    if !(_map_get(&it, &"id".to_string()) == _map_get(&pi, &"info_type_id".to_string())) { continue; }
                    for ci in cast_info.clone() {
                        if !(_map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string())) { continue; }
                        for t in title.clone() {
                            if !(_map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string())) { continue; }
                            for ml in movie_link.clone() {
                                if !(_map_get(&ml, &"linked_movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                                for lt in link_type.clone() {
                                    if !(_map_get(&lt, &"id".to_string()) == _map_get(&ml, &"link_type_id".to_string())) { continue; }
                                    if _map_get(&n, &"id".to_string()) == _map_get(&an, &"person_id".to_string()) && _map_get(&pi, &"person_id".to_string()) == _map_get(&an, &"person_id".to_string()) && _map_get(&it, &"id".to_string()) == _map_get(&pi, &"info_type_id".to_string()) && _map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string()) && _map_get(&ml, &"linked_movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&lt, &"id".to_string()) == _map_get(&ml, &"link_type_id".to_string()) && (_map_get(&_map_get(&an, &"name".to_string()), &"contains".to_string())("a") && _map_get(&it, &"info".to_string()) == "mini biography" && _map_get(&lt, &"link".to_string()) == "features" && _map_get(&n, &"name_pcode_cf".to_string()) >= "A" && _map_get(&n, &"name_pcode_cf".to_string()) <= "F" && (_map_get(&n, &"gender".to_string()) == "m" || (_map_get(&n, &"gender".to_string()) == "f" && _map_get(&_map_get(&n, &"name".to_string()), &"starts_with".to_string())("B"))) && _map_get(&pi, &"note".to_string()) == "Volker Boehm" && _map_get(&t, &"production_year".to_string()) >= 1980 && _map_get(&t, &"production_year".to_string()) <= 1995 && _map_get(&pi, &"person_id".to_string()) == _map_get(&an, &"person_id".to_string()) && _map_get(&pi, &"person_id".to_string()) == _map_get(&ci, &"person_id".to_string()) && _map_get(&an, &"person_id".to_string()) == _map_get(&ci, &"person_id".to_string()) && _map_get(&ci, &"movie_id".to_string()) == _map_get(&ml, &"linked_movie_id".to_string())) {
                                        _res.push(std::collections::HashMap::from([("person_name".to_string(), _map_get(&n, &"name".to_string())), ("movie_title".to_string(), _map_get(&t, &"title".to_string()))]));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("of_person".to_string(), min({
    let mut _res = Vec::new();
    for r in rows {
        _res.push(_map_get(&r, &"person_name".to_string()));
    }
    _res
})), ("biography_movie".to_string(), min({
    let mut _res = Vec::new();
    for r in rows {
        _res.push(_map_get(&r, &"movie_title".to_string()));
    }
    _res
}))])];
    json(result);
    test_Q7_finds_movie_features_biography_for_person();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
