// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:13:23Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Aka_name {
    person_id: i32,
    name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Cast_info {
    person_id: i32,
    movie_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Name {
    id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
    episode_nr: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    pseudonym: &'static str,
    series: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    cool_actor_pseudonym: &'static str,
    series_named_after_char: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let aka_name = vec![Aka_name { person_id: 1, name: "Alpha" }, Aka_name { person_id: 2, name: "Beta" }];
    let cast_info = vec![Cast_info { person_id: 1, movie_id: 101 }, Cast_info { person_id: 2, movie_id: 102 }];
    let company_name = vec![Company_name { id: 1, country_code: "[us]" }, Company_name { id: 2, country_code: "[de]" }];
    let keyword = vec![Keyword { id: 1, keyword: "character-name-in-title" }, Keyword { id: 2, keyword: "other" }];
    let movie_companies = vec![Movie_companie { movie_id: 101, company_id: 1 }, Movie_companie { movie_id: 102, company_id: 2 }];
    let movie_keyword = vec![Movie_keyword { movie_id: 101, keyword_id: 1 }, Movie_keyword { movie_id: 102, keyword_id: 2 }];
    let name = vec![Name { id: 1 }, Name { id: 2 }];
    let title = vec![Title { id: 101, title: "Hero Bob", episode_nr: 60 }, Title { id: 102, title: "Other Show", episode_nr: 40 }];
    let rows = { let mut tmp1 = Vec::new();for an in &aka_name { for n in &name { if !(n.id == an.person_id) { continue; } for ci in &cast_info { if !(ci.person_id == n.id) { continue; } for t in &title { if !(t.id == ci.movie_id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } for mc in &movie_companies { if !(mc.movie_id == t.id) { continue; } for cn in &company_name { if !(cn.id == mc.company_id) { continue; } if !(cn.country_code == "[us]" && k.keyword == "character-name-in-title" && t.episode_nr >= 50 && t.episode_nr < 100) { continue; } tmp1.push(Result { pseudonym: an.name, series: t.title }); } } } } } } } } tmp1 };
    let result = vec![Result1 { cool_actor_pseudonym: min(&{ let mut tmp2 = Vec::new();for r in &rows { tmp2.push(r.pseudonym); } tmp2 }), series_named_after_char: min(&{ let mut tmp3 = Vec::new();for r in &rows { tmp3.push(r.series); } tmp3 }) }];
    _json(&result);
    assert!(result == vec![Result1 { cool_actor_pseudonym: "Alpha", series_named_after_char: "Hero Bob" }]);
}
