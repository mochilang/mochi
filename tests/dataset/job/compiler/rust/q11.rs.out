// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:53:26Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    name: &'static str,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_type {
    id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Link_type {
    id: i32,
    link: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
    note: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_link {
    movie_id: i32,
    link_type_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    production_year: i32,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    company: &'static str,
    link: &'static str,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    from_company: i32,
    movie_link_type: i32,
    non_polish_sequel_movie: i32,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let company_name = vec![Company_name { id: 1, name: "Best Film Co", country_code: "[us]" }, Company_name { id: 2, name: "Warner Studios", country_code: "[de]" }, Company_name { id: 3, name: "Polish Films", country_code: "[pl]" }];
    let company_type = vec![Company_type { id: 1, kind: "production companies" }, Company_type { id: 2, kind: "distributors" }];
    let keyword = vec![Keyword { id: 1, keyword: "sequel" }, Keyword { id: 2, keyword: "thriller" }];
    let link_type = vec![Link_type { id: 1, link: "follow-up" }, Link_type { id: 2, link: "follows from" }, Link_type { id: 3, link: "remake" }];
    let movie_companies = vec![Movie_companie { movie_id: 10, company_id: 1, company_type_id: 1, note: () }, Movie_companie { movie_id: 20, company_id: 2, company_type_id: 1, note: () }, Movie_companie { movie_id: 30, company_id: 3, company_type_id: 1, note: () }];
    let movie_keyword = vec![Movie_keyword { movie_id: 10, keyword_id: 1 }, Movie_keyword { movie_id: 20, keyword_id: 1 }, Movie_keyword { movie_id: 20, keyword_id: 2 }, Movie_keyword { movie_id: 30, keyword_id: 1 }];
    let movie_link = vec![Movie_link { movie_id: 10, link_type_id: 1 }, Movie_link { movie_id: 20, link_type_id: 2 }, Movie_link { movie_id: 30, link_type_id: 3 }];
    let title = vec![Title { id: 10, production_year: 1960, title: "Alpha" }, Title { id: 20, production_year: 1970, title: "Beta" }, Title { id: 30, production_year: 1985, title: "Polish Movie" }];
    let matches = { let mut tmp1 = Vec::new();for cn in &company_name { for mc in &movie_companies { if !(mc.company_id == cn.id) { continue; } for ct in &company_type { if !(ct.id == mc.company_type_id) { continue; } for t in &title { if !(t.id == mc.movie_id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } for ml in &movie_link { if !(ml.movie_id == t.id) { continue; } for lt in &link_type { if !(lt.id == ml.link_type_id) { continue; } if !(cn.country_code != "[pl]" && (cn.name.contains("Film") || cn.name.contains("Warner")) && ct.kind == "production companies" && k.keyword == "sequel" && lt.link.contains("follow") && mc.note == () && t.production_year >= 1950 && t.production_year <= 2000 && ml.movie_id == mk.movie_id && ml.movie_id == mc.movie_id && mk.movie_id == mc.movie_id) { continue; } tmp1.push(Result { company: cn.name, link: lt.link, title: t.title }); } } } } } } } } tmp1 };
    let result = vec![Result1 { from_company: min(&{ let mut tmp2 = Vec::new();for x in &matches { tmp2.push(x.company); } tmp2 }), movie_link_type: min(&{ let mut tmp3 = Vec::new();for x in &matches { tmp3.push(x.link); } tmp3 }), non_polish_sequel_movie: min(&{ let mut tmp4 = Vec::new();for x in &matches { tmp4.push(x.title); } tmp4 }) }];
    _json(&result);
    assert!(result == vec![Result1 { from_company: "Best Film Co", movie_link_type: "follow-up", non_polish_sequel_movie: "Alpha" }]);
}
