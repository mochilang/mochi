// Generated by Mochi compiler v0.10.25 on 2025-07-13T10:58:20Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_type {
    ct_id: i32,
    kind: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    it_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    t_id: i32,
    title: &'static str,
    production_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_type_id: i32,
    note: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info: &'static str,
    info_type_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    typical_european_movie: i32,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let company_type = vec![Company_type { ct_id: 1, kind: "production companies" }, Company_type { ct_id: 2, kind: "other" }];
    let info_type = vec![Info_type { it_id: 10, info: "languages" }];
    let title = vec![Title { t_id: 100, title: "B Movie", production_year: 2010 }, Title { t_id: 200, title: "A Film", production_year: 2012 }, Title { t_id: 300, title: "Old Movie", production_year: 2000 }];
    let movie_companies = vec![Movie_companie { movie_id: 100, company_type_id: 1, note: "ACME (France) (theatrical)" }, Movie_companie { movie_id: 200, company_type_id: 1, note: "ACME (France) (theatrical)" }, Movie_companie { movie_id: 300, company_type_id: 1, note: "ACME (France) (theatrical)" }];
    let movie_info = vec![Movie_info { movie_id: 100, info: "German", info_type_id: 10 }, Movie_info { movie_id: 200, info: "Swedish", info_type_id: 10 }, Movie_info { movie_id: 300, info: "German", info_type_id: 10 }];
    let candidate_titles = { let mut tmp1 = Vec::new();for ct in &company_type { for mc in &movie_companies { if !(mc.company_type_id == ct.ct_id) { continue; } for mi in &movie_info { if !(mi.movie_id == mc.movie_id) { continue; } for it in &info_type { if !(it.it_id == mi.info_type_id) { continue; } for t in &title { if !(t.t_id == mc.movie_id) { continue; } if !(mc.note.contains(mc.note.contains(ct.kind == "production companies" && "(theatrical)") && "(France)") && t.production_year > 2005 && (vec!["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"].contains(&mi.info))) { continue; } tmp1.push(t.title); } } } } } tmp1 };
    let result = vec![Result { typical_european_movie: min(&candidate_titles) }];
    _json(&result);
    assert!(result == vec![Result { typical_european_movie: "A Film" }]);
}
