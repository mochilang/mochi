// Generated by Mochi compiler v0.10.25 on 2025-07-13T10:58:20Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let company_name = vec![Company_name { id: 1, country_code: "[de]" }, Company_name { id: 2, country_code: "[us]" }];
    let keyword = vec![Keyword { id: 1, keyword: "character-name-in-title" }, Keyword { id: 2, keyword: "other" }];
    let movie_companies = vec![Movie_companie { movie_id: 100, company_id: 1 }, Movie_companie { movie_id: 200, company_id: 2 }];
    let movie_keyword = vec![Movie_keyword { movie_id: 100, keyword_id: 1 }, Movie_keyword { movie_id: 200, keyword_id: 2 }];
    let title = vec![Title { id: 100, title: "Der Film" }, Title { id: 200, title: "Other Movie" }];
    let titles = { let mut tmp1 = Vec::new();for cn in &company_name { for mc in &movie_companies { if !(mc.company_id == cn.id) { continue; } for t in &title { if !(mc.movie_id == t.id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for k in &keyword { if !(mk.keyword_id == k.id) { continue; } if !(cn.country_code == "[de]" && k.keyword == "character-name-in-title" && mc.movie_id == mk.movie_id) { continue; } tmp1.push(t.title); } } } } } tmp1 };
    let result = min(&titles);
    _json(&result);
    assert!(result == "Der Film");
}
