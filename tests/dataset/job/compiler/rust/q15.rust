// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:18:40Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Aka_title {
    movie_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_name {
    id: i32,
    country_code: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Company_type {
    id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_companie {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
    note: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info_type_id: i32,
    note: &'static str,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
    production_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    release_date: &'static str,
    internet_movie: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    release_date: &'static str,
    internet_movie: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let aka_title = vec![Aka_title { movie_id: 1 }, Aka_title { movie_id: 2 }];
    let company_name = vec![Company_name { id: 1, country_code: "[us]" }, Company_name { id: 2, country_code: "[gb]" }];
    let company_type = vec![Company_type { id: 10 }, Company_type { id: 20 }];
    let info_type = vec![Info_type { id: 5, info: "release dates" }, Info_type { id: 6, info: "other" }];
    let keyword = vec![Keyword { id: 100 }, Keyword { id: 200 }];
    let movie_companies = vec![Movie_companie { movie_id: 1, company_id: 1, company_type_id: 10, note: "release (2005) (worldwide)" }, Movie_companie { movie_id: 2, company_id: 2, company_type_id: 20, note: "release (1999) (worldwide)" }];
    let movie_info = vec![Movie_info { movie_id: 1, info_type_id: 5, note: "internet", info: "USA: March 2005" }, Movie_info { movie_id: 2, info_type_id: 5, note: "theater", info: "USA: May 1999" }];
    let movie_keyword = vec![Movie_keyword { movie_id: 1, keyword_id: 100 }, Movie_keyword { movie_id: 2, keyword_id: 200 }];
    let title = vec![Title { id: 1, title: "Example Movie", production_year: 2005 }, Title { id: 2, title: "Old Movie", production_year: 1999 }];
    let rows = { let mut tmp1 = Vec::new();for t in &title { for at in &aka_title { if !(at.movie_id == t.id) { continue; } for mi in &movie_info { if !(mi.movie_id == t.id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for mc in &movie_companies { if !(mc.movie_id == t.id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } for it1 in &info_type { if !(it1.id == mi.info_type_id) { continue; } for cn in &company_name { if !(cn.id == mc.company_id) { continue; } for ct in &company_type { if !(ct.id == mc.company_type_id) { continue; } if !(cn.country_code == "[us]" && it1.info == "release dates" && mc.note.contains("200") && mc.note.contains("worldwide") && mi.note.contains("internet") && mi.info.contains("USA:") && mi.info.contains("200") && t.production_year > 2000) { continue; } tmp1.push(Result { release_date: mi.info, internet_movie: t.title }); } } } } } } } } } tmp1 };
    let result = vec![Result1 { release_date: min(&{ let mut tmp2 = Vec::new();for r in &rows { tmp2.push(r.release_date); } tmp2 }), internet_movie: min(&{ let mut tmp3 = Vec::new();for r in &rows { tmp3.push(r.internet_movie); } tmp3 }) }];
    _json(&result);
    assert!(result == vec![Result { release_date: "USA: March 2005", internet_movie: "Example Movie" }]);
}
