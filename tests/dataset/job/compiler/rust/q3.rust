// Generated by Mochi compiler v0.10.25 on 2025-07-13T14:18:37Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info {
    movie_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
    production_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    movie_title: &'static str,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let keyword = vec![Keyword { id: 1, keyword: "amazing sequel" }, Keyword { id: 2, keyword: "prequel" }];
    let movie_info = vec![Movie_info { movie_id: 10, info: "Germany" }, Movie_info { movie_id: 30, info: "Sweden" }, Movie_info { movie_id: 20, info: "France" }];
    let movie_keyword = vec![Movie_keyword { movie_id: 10, keyword_id: 1 }, Movie_keyword { movie_id: 30, keyword_id: 1 }, Movie_keyword { movie_id: 20, keyword_id: 1 }, Movie_keyword { movie_id: 10, keyword_id: 2 }];
    let title = vec![Title { id: 10, title: "Alpha", production_year: 2006 }, Title { id: 30, title: "Beta", production_year: 2008 }, Title { id: 20, title: "Gamma", production_year: 2009 }];
    let allowed_infos = vec!["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"];
    let candidate_titles = { let mut tmp1 = Vec::new();for k in &keyword { for mk in &movie_keyword { if !(mk.keyword_id == k.id) { continue; } for mi in &movie_info { if !(mi.movie_id == mk.movie_id) { continue; } for t in &title { if !(t.id == mi.movie_id) { continue; } if !(allowed_infos.contains(&k.keyword.contains("sequel") && mi.info) && t.production_year > 2005 && mk.movie_id == mi.movie_id) { continue; } tmp1.push(t.title); } } } } tmp1 };
    let result = vec![Result { movie_title: min(&candidate_titles) }];
    _json(&result);
    assert!(result == vec![Result { movie_title: "Alpha" }]);
}
