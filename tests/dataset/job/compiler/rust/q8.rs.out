fn test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing() {
    expect(result == vec![std::collections::HashMap::from([("actress_pseudonym".to_string(), "Y. S."), ("japanese_movie_dubbed".to_string(), "Dubbed Film")])]);
}

fn main() {
    let mut aka_name = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("name".to_string(), "Y. S.")])];
    let mut cast_info = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("movie_id".to_string(), 10), ("note".to_string(), "(voice: English version)"), ("role_id".to_string(), 1000)])];
    let mut company_name = vec![std::collections::HashMap::from([("id".to_string(), 50), ("country_code".to_string(), "[jp]")])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 10), ("company_id".to_string(), 50), ("note".to_string(), "Studio (Japan)")])];
    let mut name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("name".to_string(), "Yoko Ono")]), std::collections::HashMap::from([("id".to_string(), 2), ("name".to_string(), "Yuichi")])];
    let mut role_type = vec![std::collections::HashMap::from([("id".to_string(), 1000), ("role".to_string(), "actress")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 10), ("title".to_string(), "Dubbed Film")])];
    let mut eligible = {
    let mut _res = Vec::new();
    for an1 in aka_name.clone() {
        for n1 in name.clone() {
            if !(_map_get(&n1, &"id".to_string()) == _map_get(&an1, &"person_id".to_string())) { continue; }
            for ci in cast_info.clone() {
                if !(_map_get(&ci, &"person_id".to_string()) == _map_get(&an1, &"person_id".to_string())) { continue; }
                for t in title.clone() {
                    if !(_map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string())) { continue; }
                    for mc in movie_companies.clone() {
                        if !(_map_get(&mc, &"movie_id".to_string()) == _map_get(&ci, &"movie_id".to_string())) { continue; }
                        for cn in company_name.clone() {
                            if !(_map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string())) { continue; }
                            for rt in role_type.clone() {
                                if !(_map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string())) { continue; }
                                if _map_get(&n1, &"id".to_string()) == _map_get(&an1, &"person_id".to_string()) && _map_get(&ci, &"person_id".to_string()) == _map_get(&an1, &"person_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string()) && _map_get(&mc, &"movie_id".to_string()) == _map_get(&ci, &"movie_id".to_string()) && _map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string()) && _map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string()) && _map_get(&ci, &"note".to_string()) == "(voice: English version)" && _map_get(&cn, &"country_code".to_string()) == "[jp]" && _map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(Japan)") && (!_map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(USA)")) && _map_get(&_map_get(&n1, &"name".to_string()), &"contains".to_string())("Yo") && (!_map_get(&_map_get(&n1, &"name".to_string()), &"contains".to_string())("Yu")) && _map_get(&rt, &"role".to_string()) == "actress" {
                                    _res.push(std::collections::HashMap::from([("pseudonym".to_string(), _map_get(&an1, &"name".to_string())), ("movie_title".to_string(), _map_get(&t, &"title".to_string()))]));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("actress_pseudonym".to_string(), min({
    let mut _res = Vec::new();
    for x in eligible {
        _res.push(_map_get(&x, &"pseudonym".to_string()));
    }
    _res
})), ("japanese_movie_dubbed".to_string(), min({
    let mut _res = Vec::new();
    for x in eligible {
        _res.push(_map_get(&x, &"movie_title".to_string()));
    }
    _res
}))])];
    json(result);
    test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
