fn test_Q9_selects_minimal_alternative_name__character_and_movie() {
    expect(result == vec![std::collections::HashMap::from([("alternative_name".to_string(), "A. N. G."), ("character_name".to_string(), "Angel"), ("movie".to_string(), "Famous Film")])]);
}

fn main() {
    let mut aka_name = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("name".to_string(), "A. N. G.")]), std::collections::HashMap::from([("person_id".to_string(), 2), ("name".to_string(), "J. D.")])];
    let mut char_name = vec![std::collections::HashMap::from([("id".to_string(), 10), ("name".to_string(), "Angel")]), std::collections::HashMap::from([("id".to_string(), 20), ("name".to_string(), "Devil")])];
    let mut cast_info = vec![std::collections::HashMap::from([("person_id".to_string(), 1), ("person_role_id".to_string(), 10), ("movie_id".to_string(), 100), ("role_id".to_string(), 1000), ("note".to_string(), "(voice)")]), std::collections::HashMap::from([("person_id".to_string(), 2), ("person_role_id".to_string(), 20), ("movie_id".to_string(), 200), ("role_id".to_string(), 1000), ("note".to_string(), "(voice)")])];
    let mut company_name = vec![std::collections::HashMap::from([("id".to_string(), 100), ("country_code".to_string(), "[us]")]), std::collections::HashMap::from([("id".to_string(), 200), ("country_code".to_string(), "[gb]")])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("company_id".to_string(), 100), ("note".to_string(), "ACME Studios (USA)")]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("company_id".to_string(), 200), ("note".to_string(), "Maple Films")])];
    let mut name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("name".to_string(), "Angela Smith"), ("gender".to_string(), "f")]), std::collections::HashMap::from([("id".to_string(), 2), ("name".to_string(), "John Doe"), ("gender".to_string(), "m")])];
    let mut role_type = vec![std::collections::HashMap::from([("id".to_string(), 1000), ("role".to_string(), "actress")]), std::collections::HashMap::from([("id".to_string(), 2000), ("role".to_string(), "actor")])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 100), ("title".to_string(), "Famous Film"), ("production_year".to_string(), 2010)]), std::collections::HashMap::from([("id".to_string(), 200), ("title".to_string(), "Old Movie"), ("production_year".to_string(), 1999)])];
    let mut matches = {
    let mut _res = Vec::new();
    for an in aka_name.clone() {
        for n in name.clone() {
            if !(_map_get(&an, &"person_id".to_string()) == _map_get(&n, &"id".to_string())) { continue; }
            for ci in cast_info.clone() {
                if !(_map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string())) { continue; }
                for chn in char_name.clone() {
                    if !(_map_get(&chn, &"id".to_string()) == _map_get(&ci, &"person_role_id".to_string())) { continue; }
                    for t in title.clone() {
                        if !(_map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string())) { continue; }
                        for mc in movie_companies.clone() {
                            if !(_map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                            for cn in company_name.clone() {
                                if !(_map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string())) { continue; }
                                for rt in role_type.clone() {
                                    if !(_map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string())) { continue; }
                                    if _map_get(&an, &"person_id".to_string()) == _map_get(&n, &"id".to_string()) && _map_get(&ci, &"person_id".to_string()) == _map_get(&n, &"id".to_string()) && _map_get(&chn, &"id".to_string()) == _map_get(&ci, &"person_role_id".to_string()) && _map_get(&t, &"id".to_string()) == _map_get(&ci, &"movie_id".to_string()) && _map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&cn, &"id".to_string()) == _map_get(&mc, &"company_id".to_string()) && _map_get(&rt, &"id".to_string()) == _map_get(&ci, &"role_id".to_string()) && (vec!["(voice)".to_string(), "(voice: Japanese version)".to_string(), "(voice) (uncredited)".to_string(), "(voice: English version)".to_string()].contains(&_map_get(&ci, &"note".to_string()))) && _map_get(&cn, &"country_code".to_string()) == "[us]" && (_map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(USA)") || _map_get(&_map_get(&mc, &"note".to_string()), &"contains".to_string())("(worldwide)")) && _map_get(&n, &"gender".to_string()) == "f" && _map_get(&_map_get(&n, &"name".to_string()), &"contains".to_string())("Ang") && _map_get(&rt, &"role".to_string()) == "actress" && _map_get(&t, &"production_year".to_string()) >= 2005 && _map_get(&t, &"production_year".to_string()) <= 2015 {
                                        _res.push(std::collections::HashMap::from([("alt".to_string(), _map_get(&an, &"name".to_string())), ("character".to_string(), _map_get(&chn, &"name".to_string())), ("movie".to_string(), _map_get(&t, &"title".to_string()))]));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = vec![std::collections::HashMap::from([("alternative_name".to_string(), min({
    let mut _res = Vec::new();
    for x in matches {
        _res.push(_map_get(&x, &"alt".to_string()));
    }
    _res
})), ("character_name".to_string(), min({
    let mut _res = Vec::new();
    for x in matches {
        _res.push(_map_get(&x, &"character".to_string()));
    }
    _res
})), ("movie".to_string(), min({
    let mut _res = Vec::new();
    for x in matches {
        _res.push(_map_get(&x, &"movie".to_string()));
    }
    _res
}))])];
    json(result);
    test_Q9_selects_minimal_alternative_name__character_and_movie();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
