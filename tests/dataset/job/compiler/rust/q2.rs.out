fn test_Q2_finds_earliest_title_for_German_companies_with_character_keyword() {
    expect(result == "Der Film");
}

fn main() {
    let mut company_name = vec![std::collections::HashMap::from([("id".to_string(), 1), ("country_code".to_string(), "[de]")]), std::collections::HashMap::from([("id".to_string(), 2), ("country_code".to_string(), "[us]")])];
    let mut keyword = vec![std::collections::HashMap::from([("id".to_string(), 1), ("keyword".to_string(), "character-name-in-title")]), std::collections::HashMap::from([("id".to_string(), 2), ("keyword".to_string(), "other")])];
    let mut movie_companies = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("company_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("company_id".to_string(), 2)])];
    let mut movie_keyword = vec![std::collections::HashMap::from([("movie_id".to_string(), 100), ("keyword_id".to_string(), 1)]), std::collections::HashMap::from([("movie_id".to_string(), 200), ("keyword_id".to_string(), 2)])];
    let mut title = vec![std::collections::HashMap::from([("id".to_string(), 100), ("title".to_string(), "Der Film")]), std::collections::HashMap::from([("id".to_string(), 200), ("title".to_string(), "Other Movie")])];
    let mut titles = {
    let mut _res = Vec::new();
    for cn in company_name.clone() {
        for mc in movie_companies.clone() {
            if !(_map_get(&mc, &"company_id".to_string()) == _map_get(&cn, &"id".to_string())) { continue; }
            for t in title.clone() {
                if !(_map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                for mk in movie_keyword.clone() {
                    if !(_map_get(&mk, &"movie_id".to_string()) == _map_get(&t, &"id".to_string())) { continue; }
                    for k in keyword.clone() {
                        if !(_map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string())) { continue; }
                        if _map_get(&mc, &"company_id".to_string()) == _map_get(&cn, &"id".to_string()) && _map_get(&mc, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&mk, &"movie_id".to_string()) == _map_get(&t, &"id".to_string()) && _map_get(&mk, &"keyword_id".to_string()) == _map_get(&k, &"id".to_string()) && _map_get(&cn, &"country_code".to_string()) == "[de]" && _map_get(&k, &"keyword".to_string()) == "character-name-in-title" && _map_get(&mc, &"movie_id".to_string()) == _map_get(&mk, &"movie_id".to_string()) {
                            _res.push(_map_get(&t, &"title".to_string()));
                        }
                    }
                }
            }
        }
    }
    _res
};
    let mut result = min(titles);
    json(result);
    test_Q2_finds_earliest_title_for_German_companies_with_character_keyword();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
