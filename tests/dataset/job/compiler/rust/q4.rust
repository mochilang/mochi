// Generated by Mochi compiler v0.10.25 on 2025-07-13T10:58:20Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Info_type {
    id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Keyword {
    id: i32,
    keyword: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Title {
    id: i32,
    title: &'static str,
    production_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_keyword {
    movie_id: i32,
    keyword_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Movie_info_idx {
    movie_id: i32,
    info_type_id: i32,
    info: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    rating: &'static str,
    title: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    rating: i32,
    movie_title: i32,
}

fn min<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().min_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let info_type = vec![Info_type { id: 1, info: "rating" }, Info_type { id: 2, info: "other" }];
    let keyword = vec![Keyword { id: 1, keyword: "great sequel" }, Keyword { id: 2, keyword: "prequel" }];
    let title = vec![Title { id: 10, title: "Alpha Movie", production_year: 2006 }, Title { id: 20, title: "Beta Film", production_year: 2007 }, Title { id: 30, title: "Old Film", production_year: 2004 }];
    let movie_keyword = vec![Movie_keyword { movie_id: 10, keyword_id: 1 }, Movie_keyword { movie_id: 20, keyword_id: 1 }, Movie_keyword { movie_id: 30, keyword_id: 1 }];
    let movie_info_idx = vec![Movie_info_idx { movie_id: 10, info_type_id: 1, info: "6.2" }, Movie_info_idx { movie_id: 20, info_type_id: 1, info: "7.8" }, Movie_info_idx { movie_id: 30, info_type_id: 1, info: "4.5" }];
    let rows = { let mut tmp1 = Vec::new();for it in &info_type { for mi in &movie_info_idx { if !(it.id == mi.info_type_id) { continue; } for t in &title { if !(t.id == mi.movie_id) { continue; } for mk in &movie_keyword { if !(mk.movie_id == t.id) { continue; } for k in &keyword { if !(k.id == mk.keyword_id) { continue; } if !(it.info == "rating" && k.keyword.contains("sequel") && mi.info > "5.0" && t.production_year > 2005 && mk.movie_id == mi.movie_id) { continue; } tmp1.push(Result { rating: mi.info, title: t.title }); } } } } } tmp1 };
    let result = vec![Result1 { rating: min(&{ let mut tmp2 = Vec::new();for r in &rows { tmp2.push(r.rating); } tmp2 }), movie_title: min(&{ let mut tmp3 = Vec::new();for r in &rows { tmp3.push(r.title); } tmp3 }) }];
    _json(&result);
    assert!(result == vec![Result1 { rating: "6.2", movie_title: "Alpha Movie" }]);
}
