#lang racket
(require racket/list)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)
  (unless (equal? result (list (hash "actress_pseudonym" "Y. S." "japanese_movie_dubbed" "Dubbed Film"))) (error "expect failed"))
)

(define aka_name (list (hash "person_id" 1 "name" "Y. S.")))
(define cast_info (list (hash "person_id" 1 "movie_id" 10 "note" "(voice: English version)" "role_id" 1000)))
(define company_name (list (hash "id" 50 "country_code" "[jp]")))
(define movie_companies (list (hash "movie_id" 10 "company_id" 50 "note" "Studio (Japan)")))
(define name (list (hash "id" 1 "name" "Yoko Ono") (hash "id" 2 "name" "Yuichi")))
(define role_type (list (hash "id" 1000 "role" "actress")))
(define title (list (hash "id" 10 "title" "Dubbed Film")))
(define eligible (let ([_res '()])
  (for ([an1 aka_name])
    (for ([n1 name])
      (when (equal? (hash-ref n1 "id") (hash-ref an1 "person_id"))
        (for ([ci cast_info])
          (when (equal? (hash-ref ci "person_id") (hash-ref an1 "person_id"))
            (for ([t title])
              (when (equal? (hash-ref t "id") (hash-ref ci "movie_id"))
                (for ([mc movie_companies])
                  (when (equal? (hash-ref mc "movie_id") (hash-ref ci "movie_id"))
                    (for ([cn company_name])
                      (when (equal? (hash-ref cn "id") (hash-ref mc "company_id"))
                        (for ([rt role_type])
                          (when (equal? (hash-ref rt "id") (hash-ref ci "role_id"))
                            (when (and (and (and (and (and (and (equal? (hash-ref ci "note") "(voice: English version)") (equal? (hash-ref cn "country_code") "[jp]")) (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(Japan)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(Japan)"))))] [else (not (false? (member "(Japan)" (hash-ref mc "note"))))])) (not (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(USA)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(USA)"))))] [else (not (false? (member "(USA)" (hash-ref mc "note"))))]))) (cond [(hash? (hash-ref n1 "name")) (hash-has-key? (hash-ref n1 "name") "Yo")] [(string? (hash-ref n1 "name")) (not (false? (string-contains? (hash-ref n1 "name") (format "~a" "Yo"))))] [else (not (false? (member "Yo" (hash-ref n1 "name"))))])) (not (cond [(hash? (hash-ref n1 "name")) (hash-has-key? (hash-ref n1 "name") "Yu")] [(string? (hash-ref n1 "name")) (not (false? (string-contains? (hash-ref n1 "name") (format "~a" "Yu"))))] [else (not (false? (member "Yu" (hash-ref n1 "name"))))]))) (equal? (hash-ref rt "role") "actress"))
                              (set! _res (append _res (list (hash "pseudonym" (hash-ref an1 "name") "movie_title" (hash-ref t "title")))))
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (list (hash "actress_pseudonym" (min-list (let ([_res '()])
  (for ([x eligible])
    (set! _res (append _res (list (hash-ref x "pseudonym"))))
  )
  _res)) "japanese_movie_dubbed" (min-list (let ([_res '()])
  (for ([x eligible])
    (set! _res (append _res (list (hash-ref x "movie_title"))))
  )
  _res)))))
(displayln result)
(test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing)
