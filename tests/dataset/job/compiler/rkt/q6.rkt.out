#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q6_finds_marvel_movie_with_Robert_Downey)
  (unless (equal? result (list (hash "movie_keyword" "marvel-cinematic-universe" "actor_name" "Downey Robert Jr." "marvel_movie" "Iron Man 3"))) (error "expect failed"))
)

(define cast_info (list (hash "movie_id" 1 "person_id" 101) (hash "movie_id" 2 "person_id" 102)))
(define keyword (list (hash "id" 100 "keyword" "marvel-cinematic-universe") (hash "id" 200 "keyword" "other")))
(define movie_keyword (list (hash "movie_id" 1 "keyword_id" 100) (hash "movie_id" 2 "keyword_id" 200)))
(define name (list (hash "id" 101 "name" "Downey Robert Jr.") (hash "id" 102 "name" "Chris Evans")))
(define title (list (hash "id" 1 "title" "Iron Man 3" "production_year" 2013) (hash "id" 2 "title" "Old Movie" "production_year" 2000)))
(define result (let ([_res '()])
  (for ([ci cast_info])
    (for ([mk movie_keyword])
      (when (equal? (hash-ref ci "movie_id") (hash-ref mk "movie_id"))
        (for ([k keyword])
          (when (equal? (hash-ref mk "keyword_id") (hash-ref k "id"))
            (for ([n name])
              (when (equal? (hash-ref ci "person_id") (hash-ref n "id"))
                (for ([t title])
                  (when (equal? (hash-ref ci "movie_id") (hash-ref t "id"))
                    (when (and (and (and (equal? (hash-ref k "keyword") "marvel-cinematic-universe") (cond [(hash? (hash-ref n "name")) (hash-has-key? (hash-ref n "name") "Downey")] [(string? (hash-ref n "name")) (not (false? (string-contains? (hash-ref n "name") (format "~a" "Downey"))))] [else (not (false? (member "Downey" (hash-ref n "name"))))])) (cond [(hash? (hash-ref n "name")) (hash-has-key? (hash-ref n "name") "Robert")] [(string? (hash-ref n "name")) (not (false? (string-contains? (hash-ref n "name") (format "~a" "Robert"))))] [else (not (false? (member "Robert" (hash-ref n "name"))))])) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 2010) (string->number 2010))]) (if (and la lb) (> la lb) (string>? (format "~a" (hash-ref t "production_year")) (format "~a" 2010)))))
                      (set! _res (append _res (list (hash "movie_keyword" (hash-ref k "keyword") "actor_name" (hash-ref n "name") "marvel_movie" (hash-ref t "title")))))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q6_finds_marvel_movie_with_Robert_Downey)
