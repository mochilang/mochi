#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q4_returns_minimum_rating_and_title_for_sequels)
  (unless (equal? result (list (hash "rating" "6.2" "movie_title" "Alpha Movie"))) (error "expect failed"))
)

(define info_type (list (hash "id" 1 "info" "rating") (hash "id" 2 "info" "other")))
(define keyword (list (hash "id" 1 "keyword" "great sequel") (hash "id" 2 "keyword" "prequel")))
(define title (list (hash "id" 10 "title" "Alpha Movie" "production_year" 2006) (hash "id" 20 "title" "Beta Film" "production_year" 2007) (hash "id" 30 "title" "Old Film" "production_year" 2004)))
(define movie_keyword (list (hash "movie_id" 10 "keyword_id" 1) (hash "movie_id" 20 "keyword_id" 1) (hash "movie_id" 30 "keyword_id" 1)))
(define movie_info_idx (list (hash "movie_id" 10 "info_type_id" 1 "info" "6.2") (hash "movie_id" 20 "info_type_id" 1 "info" "7.8") (hash "movie_id" 30 "info_type_id" 1 "info" "4.5")))
(define rows (let ([_res '()])
  (for ([it info_type])
    (for ([mi movie_info_idx])
      (when (equal? (hash-ref it "id") (hash-ref mi "info_type_id"))
        (for ([t title])
          (when (equal? (hash-ref t "id") (hash-ref mi "movie_id"))
            (for ([mk movie_keyword])
              (when (equal? (hash-ref mk "movie_id") (hash-ref t "id"))
                (for ([k keyword])
                  (when (equal? (hash-ref k "id") (hash-ref mk "keyword_id"))
                    (when (and (and (and (and (equal? (hash-ref it "info") "rating") (cond [(hash? (hash-ref k "keyword")) (hash-has-key? (hash-ref k "keyword") "sequel")] [(string? (hash-ref k "keyword")) (not (false? (string-contains? (hash-ref k "keyword") (format "~a" "sequel"))))] [else (not (false? (member "sequel" (hash-ref k "keyword"))))])) (let ([la (and (string? (hash-ref mi "info")) (string->number (hash-ref mi "info")))] [lb (and (string? "5.0") (string->number "5.0"))]) (if (and la lb) (> la lb) (string>? (format "~a" (hash-ref mi "info")) (format "~a" "5.0"))))) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 2005) (string->number 2005))]) (if (and la lb) (> la lb) (string>? (format "~a" (hash-ref t "production_year")) (format "~a" 2005))))) (equal? (hash-ref mk "movie_id") (hash-ref mi "movie_id")))
                      (set! _res (append _res (list (hash "rating" (hash-ref mi "info") "title" (hash-ref t "title")))))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (list (hash "rating" (min-list (let ([_res '()])
  (for ([r rows])
    (set! _res (append _res (list (hash-ref r "rating"))))
  )
  _res)) "movie_title" (min-list (let ([_res '()])
  (for ([r rows])
    (set! _res (append _res (list (hash-ref r "title"))))
  )
  _res)))))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q4_returns_minimum_rating_and_title_for_sequels)
