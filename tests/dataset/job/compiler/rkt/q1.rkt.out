#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production)
  (unless (equal? result (hash "production_note" "ACME (co-production)" "movie_title" "Good Movie" "movie_year" 1995)) (error "expect failed"))
)

(define company_type (list (hash "id" 1 "kind" "production companies") (hash "id" 2 "kind" "distributors")))
(define info_type (list (hash "id" 10 "info" "top 250 rank") (hash "id" 20 "info" "bottom 10 rank")))
(define title (list (hash "id" 100 "title" "Good Movie" "production_year" 1995) (hash "id" 200 "title" "Bad Movie" "production_year" 2000)))
(define movie_companies (list (hash "movie_id" 100 "company_type_id" 1 "note" "ACME (co-production)") (hash "movie_id" 200 "company_type_id" 1 "note" "MGM (as Metro-Goldwyn-Mayer Pictures)")))
(define movie_info_idx (list (hash "movie_id" 100 "info_type_id" 10) (hash "movie_id" 200 "info_type_id" 20)))
(define filtered (let ([_res '()])
  (for ([ct company_type])
    (for ([mc movie_companies])
      (when (equal? (hash-ref ct "id") (hash-ref mc "company_type_id"))
        (for ([t title])
          (when (equal? (hash-ref t "id") (hash-ref mc "movie_id"))
            (for ([mi movie_info_idx])
              (when (equal? (hash-ref mi "movie_id") (hash-ref t "id"))
                (for ([it info_type])
                  (when (equal? (hash-ref it "id") (hash-ref mi "info_type_id"))
                    (when (and (and (and (equal? (hash-ref ct "kind") "production companies") (equal? (hash-ref it "info") "top 250 rank")) (not (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(as Metro-Goldwyn-Mayer Pictures)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(as Metro-Goldwyn-Mayer Pictures)"))))] [else (not (false? (member "(as Metro-Goldwyn-Mayer Pictures)" (hash-ref mc "note"))))]))) (or (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(co-production)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(co-production)"))))] [else (not (false? (member "(co-production)" (hash-ref mc "note"))))]) (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(presents)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(presents)"))))] [else (not (false? (member "(presents)" (hash-ref mc "note"))))])))
                      (set! _res (append _res (list (hash "note" (hash-ref mc "note") "title" (hash-ref t "title") "year" (hash-ref t "production_year")))))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (hash "production_note" (min-list (let ([_res '()])
  (for ([r filtered])
    (set! _res (append _res (list (hash-ref r "note"))))
  )
  _res)) "movie_title" (min-list (let ([_res '()])
  (for ([r filtered])
    (set! _res (append _res (list (hash-ref r "title"))))
  )
  _res)) "movie_year" (min-list (let ([_res '()])
  (for ([r filtered])
    (set! _res (append _res (list (hash-ref r "year"))))
  )
  _res))))
(displayln (jsexpr->string (to-jsexpr (list result))))
(test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production)
