#lang racket
(require json)
(define aka_name (list (hash 'person_id 1 'name "Anna Mae") (hash 'person_id 2 'name "Chris")))
(define cast_info (list (hash 'person_id 1 'movie_id 10) (hash 'person_id 2 'movie_id 20)))
(define info_type (list (hash 'id 1 'info "mini biography") (hash 'id 2 'info "trivia")))
(define link_type (list (hash 'id 1 'link "features") (hash 'id 2 'link "references")))
(define movie_link (list (hash 'linked_movie_id 10 'link_type_id 1) (hash 'linked_movie_id 20 'link_type_id 2)))
(define name (list (hash 'id 1 'name "Alan Brown" 'name_pcode_cf "B" 'gender "m") (hash 'id 2 'name "Zoe" 'name_pcode_cf "Z" 'gender "f")))
(define person_info (list (hash 'person_id 1 'info_type_id 1 'note "Volker Boehm") (hash 'person_id 2 'info_type_id 1 'note "Other")))
(define title (list (hash 'id 10 'title "Feature Film" 'production_year 1990) (hash 'id 20 'title "Late Film" 'production_year 2000)))
(define rows (for*/list ([an aka_name] [n name] [pi person_info] [it info_type] [ci cast_info] [t title] [ml movie_link] [lt link_type] #:when (and (equal? (hash-ref n 'id) (hash-ref an 'person_id)) (equal? (hash-ref pi 'person_id) (hash-ref an 'person_id)) (equal? (hash-ref it 'id) (hash-ref pi 'info_type_id)) (equal? (hash-ref ci 'person_id) (hash-ref n 'id)) (equal? (hash-ref t 'id) (hash-ref ci 'movie_id)) (equal? (hash-ref ml 'linked_movie_id) (hash-ref t 'id)) (equal? (hash-ref lt 'id) (hash-ref ml 'link_type_id)) (and (and (and (and (and (and (and (and (and (and (and (and (regexp-match? (regexp "a") (hash-ref an 'name)) (string=? (hash-ref it 'info) "mini biography")) (string=? (hash-ref lt 'link) "features")) (string>=? (hash-ref n 'name_pcode_cf) "A")) (string<=? (hash-ref n 'name_pcode_cf) "F")) (or (string=? (hash-ref n 'gender) "m") (and (string=? (hash-ref n 'gender) "f") ((hash-ref (hash-ref n 'name) 'starts_with) "B")))) (string=? (hash-ref pi 'note) "Volker Boehm")) (>= (hash-ref t 'production_year) 1980)) (<= (hash-ref t 'production_year) 1995)) (equal? (hash-ref pi 'person_id) (hash-ref an 'person_id))) (equal? (hash-ref pi 'person_id) (hash-ref ci 'person_id))) (equal? (hash-ref an 'person_id) (hash-ref ci 'person_id))) (equal? (hash-ref ci 'movie_id) (hash-ref ml 'linked_movie_id))))) (hash 'person_name (hash-ref n 'name) 'movie_title (hash-ref t 'title))))
(define result (list (hash 'of_person (apply min (for*/list ([r rows]) (hash-ref r 'person_name))) 'biography_movie (apply min (for*/list ([r rows]) (hash-ref r 'movie_title))))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'of_person "Alan Brown" 'biography_movie "Feature Film"))) (displayln "ok"))
