#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q2_finds_earliest_title_for_German_companies_with_character_keyword)
  (unless (equal? result "Der Film") (error "expect failed"))
)

(define company_name (list (hash "id" 1 "country_code" "[de]") (hash "id" 2 "country_code" "[us]")))
(define keyword (list (hash "id" 1 "keyword" "character-name-in-title") (hash "id" 2 "keyword" "other")))
(define movie_companies (list (hash "movie_id" 100 "company_id" 1) (hash "movie_id" 200 "company_id" 2)))
(define movie_keyword (list (hash "movie_id" 100 "keyword_id" 1) (hash "movie_id" 200 "keyword_id" 2)))
(define title (list (hash "id" 100 "title" "Der Film") (hash "id" 200 "title" "Other Movie")))
(define titles (let ([_res '()])
  (for ([cn company_name])
    (for ([mc movie_companies])
      (when (equal? (hash-ref mc "company_id") (hash-ref cn "id"))
        (for ([t title])
          (when (equal? (hash-ref mc "movie_id") (hash-ref t "id"))
            (for ([mk movie_keyword])
              (when (equal? (hash-ref mk "movie_id") (hash-ref t "id"))
                (for ([k keyword])
                  (when (equal? (hash-ref mk "keyword_id") (hash-ref k "id"))
                    (when (and (and (equal? (hash-ref cn "country_code") "[de]") (equal? (hash-ref k "keyword") "character-name-in-title")) (equal? (hash-ref mc "movie_id") (hash-ref mk "movie_id")))
                      (set! _res (append _res (list (hash-ref t "title"))))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (min-list titles))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q2_finds_earliest_title_for_German_companies_with_character_keyword)
