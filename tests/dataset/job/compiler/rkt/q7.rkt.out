#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q7_finds_movie_features_biography_for_person)
  (unless (equal? result (list (hash "of_person" "Alan Brown" "biography_movie" "Feature Film"))) (error "expect failed"))
)

(define aka_name (list (hash "person_id" 1 "name" "Anna Mae") (hash "person_id" 2 "name" "Chris")))
(define cast_info (list (hash "person_id" 1 "movie_id" 10) (hash "person_id" 2 "movie_id" 20)))
(define info_type (list (hash "id" 1 "info" "mini biography") (hash "id" 2 "info" "trivia")))
(define link_type (list (hash "id" 1 "link" "features") (hash "id" 2 "link" "references")))
(define movie_link (list (hash "linked_movie_id" 10 "link_type_id" 1) (hash "linked_movie_id" 20 "link_type_id" 2)))
(define name (list (hash "id" 1 "name" "Alan Brown" "name_pcode_cf" "B" "gender" "m") (hash "id" 2 "name" "Zoe" "name_pcode_cf" "Z" "gender" "f")))
(define person_info (list (hash "person_id" 1 "info_type_id" 1 "note" "Volker Boehm") (hash "person_id" 2 "info_type_id" 1 "note" "Other")))
(define title (list (hash "id" 10 "title" "Feature Film" "production_year" 1990) (hash "id" 20 "title" "Late Film" "production_year" 2000)))
(define rows (let ([_res '()])
  (for ([an aka_name])
    (for ([n name])
      (when (equal? (hash-ref n "id") (hash-ref an "person_id"))
        (for ([pi person_info])
          (when (equal? (hash-ref pi "person_id") (hash-ref an "person_id"))
            (for ([it info_type])
              (when (equal? (hash-ref it "id") (hash-ref pi "info_type_id"))
                (for ([ci cast_info])
                  (when (equal? (hash-ref ci "person_id") (hash-ref n "id"))
                    (for ([t title])
                      (when (equal? (hash-ref t "id") (hash-ref ci "movie_id"))
                        (for ([ml movie_link])
                          (when (equal? (hash-ref ml "linked_movie_id") (hash-ref t "id"))
                            (for ([lt link_type])
                              (when (equal? (hash-ref lt "id") (hash-ref ml "link_type_id"))
                                (when (and (and (and (and (and (and (and (and (and (and (and (and (cond [(hash? (hash-ref an "name")) (hash-has-key? (hash-ref an "name") "a")] [(string? (hash-ref an "name")) (not (false? (string-contains? (hash-ref an "name") (format "~a" "a"))))] [else (not (false? (member "a" (hash-ref an "name"))))]) (equal? (hash-ref it "info") "mini biography")) (equal? (hash-ref lt "link") "features")) (let ([la (and (string? (hash-ref n "name_pcode_cf")) (string->number (hash-ref n "name_pcode_cf")))] [lb (and (string? "A") (string->number "A"))]) (if (and la lb) (>= la lb) (string>=? (format "~a" (hash-ref n "name_pcode_cf")) (format "~a" "A"))))) (let ([la (and (string? (hash-ref n "name_pcode_cf")) (string->number (hash-ref n "name_pcode_cf")))] [lb (and (string? "F") (string->number "F"))]) (if (and la lb) (<= la lb) (string<=? (format "~a" (hash-ref n "name_pcode_cf")) (format "~a" "F"))))) (or (equal? (hash-ref n "gender") "m") (and (equal? (hash-ref n "gender") "f") ((hash-ref (hash-ref n "name") "starts_with") "B")))) (equal? (hash-ref pi "note") "Volker Boehm")) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 1980) (string->number 1980))]) (if (and la lb) (>= la lb) (string>=? (format "~a" (hash-ref t "production_year")) (format "~a" 1980))))) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 1995) (string->number 1995))]) (if (and la lb) (<= la lb) (string<=? (format "~a" (hash-ref t "production_year")) (format "~a" 1995))))) (equal? (hash-ref pi "person_id") (hash-ref an "person_id"))) (equal? (hash-ref pi "person_id") (hash-ref ci "person_id"))) (equal? (hash-ref an "person_id") (hash-ref ci "person_id"))) (equal? (hash-ref ci "movie_id") (hash-ref ml "linked_movie_id")))
                                  (set! _res (append _res (list (hash "person_name" (hash-ref n "name") "movie_title" (hash-ref t "title")))))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (list (hash "of_person" (min-list (let ([_res '()])
  (for ([r rows])
    (set! _res (append _res (list (hash-ref r "person_name"))))
  )
  _res)) "biography_movie" (min-list (let ([_res '()])
  (for ([r rows])
    (set! _res (append _res (list (hash-ref r "movie_title"))))
  )
  _res)))))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q7_finds_movie_features_biography_for_person)
