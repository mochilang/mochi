#lang racket
(require json)
(define info_type (list (hash 'id 1 'info "rating") (hash 'id 2 'info "other")))
(define keyword (list (hash 'id 1 'keyword "great sequel") (hash 'id 2 'keyword "prequel")))
(define title (list (hash 'id 10 'title "Alpha Movie" 'production_year 2006) (hash 'id 20 'title "Beta Film" 'production_year 2007) (hash 'id 30 'title "Old Film" 'production_year 2004)))
(define movie_keyword (list (hash 'movie_id 10 'keyword_id 1) (hash 'movie_id 20 'keyword_id 1) (hash 'movie_id 30 'keyword_id 1)))
(define movie_info_idx (list (hash 'movie_id 10 'info_type_id 1 'info "6.2") (hash 'movie_id 20 'info_type_id 1 'info "7.8") (hash 'movie_id 30 'info_type_id 1 'info "4.5")))
(define rows (for*/list ([it info_type] [mi movie_info_idx] [t title] [mk movie_keyword] [k keyword] #:when (and (equal? (hash-ref it 'id) (hash-ref mi 'info_type_id)) (equal? (hash-ref t 'id) (hash-ref mi 'movie_id)) (equal? (hash-ref mk 'movie_id) (hash-ref t 'id)) (equal? (hash-ref k 'id) (hash-ref mk 'keyword_id)) (and (and (and (and (string=? (hash-ref it 'info) "rating") (regexp-match? (regexp "sequel") (hash-ref k 'keyword))) (string>? (hash-ref mi 'info) "5.0")) (> (hash-ref t 'production_year) 2005)) (equal? (hash-ref mk 'movie_id) (hash-ref mi 'movie_id))))) (hash 'rating (hash-ref mi 'info) 'title (hash-ref t 'title))))
(define result (list (hash 'rating (apply min (for*/list ([r rows]) (hash-ref r 'rating))) 'movie_title (apply min (for*/list ([r rows]) (hash-ref r 'title))))))
(displayln (jsexpr->string result))
(when (equal? result (list (hash 'rating "6.2" 'movie_title "Alpha Movie"))) (displayln "ok"))
