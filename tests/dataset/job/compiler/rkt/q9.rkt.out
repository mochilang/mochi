#lang racket
(require racket/list json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_Q9_selects_minimal_alternative_name__character_and_movie)
  (unless (equal? result (list (hash "alternative_name" "A. N. G." "character_name" "Angel" "movie" "Famous Film"))) (error "expect failed"))
)

(define aka_name (list (hash "person_id" 1 "name" "A. N. G.") (hash "person_id" 2 "name" "J. D.")))
(define char_name (list (hash "id" 10 "name" "Angel") (hash "id" 20 "name" "Devil")))
(define cast_info (list (hash "person_id" 1 "person_role_id" 10 "movie_id" 100 "role_id" 1000 "note" "(voice)") (hash "person_id" 2 "person_role_id" 20 "movie_id" 200 "role_id" 1000 "note" "(voice)")))
(define company_name (list (hash "id" 100 "country_code" "[us]") (hash "id" 200 "country_code" "[gb]")))
(define movie_companies (list (hash "movie_id" 100 "company_id" 100 "note" "ACME Studios (USA)") (hash "movie_id" 200 "company_id" 200 "note" "Maple Films")))
(define name (list (hash "id" 1 "name" "Angela Smith" "gender" "f") (hash "id" 2 "name" "John Doe" "gender" "m")))
(define role_type (list (hash "id" 1000 "role" "actress") (hash "id" 2000 "role" "actor")))
(define title (list (hash "id" 100 "title" "Famous Film" "production_year" 2010) (hash "id" 200 "title" "Old Movie" "production_year" 1999)))
(define matches (let ([_res '()])
  (for ([an aka_name])
    (for ([n name])
      (when (equal? (hash-ref an "person_id") (hash-ref n "id"))
        (for ([ci cast_info])
          (when (equal? (hash-ref ci "person_id") (hash-ref n "id"))
            (for ([chn char_name])
              (when (equal? (hash-ref chn "id") (hash-ref ci "person_role_id"))
                (for ([t title])
                  (when (equal? (hash-ref t "id") (hash-ref ci "movie_id"))
                    (for ([mc movie_companies])
                      (when (equal? (hash-ref mc "movie_id") (hash-ref t "id"))
                        (for ([cn company_name])
                          (when (equal? (hash-ref cn "id") (hash-ref mc "company_id"))
                            (for ([rt role_type])
                              (when (equal? (hash-ref rt "id") (hash-ref ci "role_id"))
                                (when (and (and (and (and (and (and (and (cond [(hash? (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)")) (hash-has-key? (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)") (hash-ref ci "note"))] [(string? (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)")) (not (false? (string-contains? (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)") (format "~a" (hash-ref ci "note")))))] [else (not (false? (member (hash-ref ci "note") (list "(voice)" "(voice: Japanese version)" "(voice) (uncredited)" "(voice: English version)"))))]) (equal? (hash-ref cn "country_code") "[us]")) (or (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(USA)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(USA)"))))] [else (not (false? (member "(USA)" (hash-ref mc "note"))))]) (cond [(hash? (hash-ref mc "note")) (hash-has-key? (hash-ref mc "note") "(worldwide)")] [(string? (hash-ref mc "note")) (not (false? (string-contains? (hash-ref mc "note") (format "~a" "(worldwide)"))))] [else (not (false? (member "(worldwide)" (hash-ref mc "note"))))]))) (equal? (hash-ref n "gender") "f")) (cond [(hash? (hash-ref n "name")) (hash-has-key? (hash-ref n "name") "Ang")] [(string? (hash-ref n "name")) (not (false? (string-contains? (hash-ref n "name") (format "~a" "Ang"))))] [else (not (false? (member "Ang" (hash-ref n "name"))))])) (equal? (hash-ref rt "role") "actress")) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 2005) (string->number 2005))]) (if (and la lb) (>= la lb) (string>=? (format "~a" (hash-ref t "production_year")) (format "~a" 2005))))) (let ([la (and (string? (hash-ref t "production_year")) (string->number (hash-ref t "production_year")))] [lb (and (string? 2015) (string->number 2015))]) (if (and la lb) (<= la lb) (string<=? (format "~a" (hash-ref t "production_year")) (format "~a" 2015)))))
                                  (set! _res (append _res (list (hash "alt" (hash-ref an "name") "character" (hash-ref chn "name") "movie" (hash-ref t "title")))))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  _res))
(define result (list (hash "alternative_name" (min-list (let ([_res '()])
  (for ([x matches])
    (set! _res (append _res (list (hash-ref x "alt"))))
  )
  _res)) "character_name" (min-list (let ([_res '()])
  (for ([x matches])
    (set! _res (append _res (list (hash-ref x "character"))))
  )
  _res)) "movie" (min-list (let ([_res '()])
  (for ([x matches])
    (set! _res (append _res (list (hash-ref x "movie"))))
  )
  _res)))))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q9_selects_minimal_alternative_name__character_and_movie)
