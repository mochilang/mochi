% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:59:23Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

    test_q3_returns_lexicographically_smallest_sequel_title :-
        dict_create(_V0, map, [movie_title-"Alpha"]),
        expect((Result == [_V0])),
        true.
    
:- initialization(main, main).
main :-
    dict_create(_V0, map, [id-1, keyword-"amazing sequel"]),
    dict_create(_V1, map, [id-2, keyword-"prequel"]),
    Keyword = [_V0, _V1],
    dict_create(_V2, map, [movie_id-10, info-"Germany"]),
    dict_create(_V3, map, [movie_id-30, info-"Sweden"]),
    dict_create(_V4, map, [movie_id-20, info-"France"]),
    Movie_info = [_V2, _V3, _V4],
    dict_create(_V5, map, [movie_id-10, keyword_id-1]),
    dict_create(_V6, map, [movie_id-30, keyword_id-1]),
    dict_create(_V7, map, [movie_id-20, keyword_id-1]),
    dict_create(_V8, map, [movie_id-10, keyword_id-2]),
    Movie_keyword = [_V5, _V6, _V7, _V8],
    dict_create(_V9, map, [id-10, title-"Alpha", production_year-2006]),
    dict_create(_V10, map, [id-30, title-"Beta", production_year-2008]),
    dict_create(_V11, map, [id-20, title-"Gamma", production_year-2009]),
    Title = [_V9, _V10, _V11],
    Allowed_infos = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"],
    findall(_V26, (member(K, Keyword), member(Mk, Movie_keyword), get_item(Mk, 'keyword_id', _V12), get_item(K, 'id', _V13), (_V12 == _V13), member(Mi, Movie_info), get_item(Mi, 'movie_id', _V14), get_item(Mk, 'movie_id', _V15), (_V14 == _V15), member(T, Title), get_item(T, 'id', _V16), get_item(Mi, 'movie_id', _V17), (_V16 == _V17), get_item(K, 'keyword', _V18), contains(_V18, "sequel", _V19), get_item(Mi, 'info', _V20), contains(Allowed_infos, (_V19, _V20), _V21), get_item(T, 'production_year', _V22), get_item(Mk, 'movie_id', _V23), get_item(Mi, 'movie_id', _V24), ((((_V21, _V22) @> 2005), _V23) == _V24), get_item(T, 'title', _V25), _V26 = _V25), _V27),
    Candidate_titles = _V27,
    min_list(Candidate_titles, _V28),
    dict_create(_V29, map, [movie_title-_V28]),
    Result = [_V29],
    json_write_dict(current_output, Result), nl,
    true,
    test_q3_returns_lexicographically_smallest_sequel_title,
    true.
