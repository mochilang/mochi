:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


contains(Container, Item, Res) :-
    is_dict(Container), !, (get_dict(Item, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, string_chars(List, Chars), (member(Item, Chars) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


test_p_q1_returns_min_note__title_and_year_for_top_ranked_co_production :-
    dict_create(_V0, map, [production_note-"ACME (co-production)", movie_title-"Good Movie", movie_year-1995]),
    expect(Result = _V0)    ,
    true.

    main :-
    dict_create(_V1, map, [id-1, kind-"production companies"]),
    dict_create(_V2, map, [id-2, kind-"distributors"]),
    Company_type = [_V1, _V2],
    dict_create(_V3, map, [id-10, info-"top 250 rank"]),
    dict_create(_V4, map, [id-20, info-"bottom 10 rank"]),
    Info_type = [_V3, _V4],
    dict_create(_V5, map, [id-100, title-"Good Movie", production_year-1995]),
    dict_create(_V6, map, [id-200, title-"Bad Movie", production_year-2000]),
    Title = [_V5, _V6],
    dict_create(_V7, map, [movie_id-100, company_type_id-1, note-"ACME (co-production)"]),
    dict_create(_V8, map, [movie_id-200, company_type_id-1, note-"MGM (as Metro-Goldwyn-Mayer Pictures)"]),
    Movie_companies = [_V7, _V8],
    dict_create(_V9, map, [movie_id-100, info_type_id-10]),
    dict_create(_V10, map, [movie_id-200, info_type_id-20]),
    Movie_info_idx = [_V9, _V10],
    to_list(Company_type, _V24),
    to_list(Movie_companies, _V27),
    to_list(Title, _V30),
    to_list(Movie_info_idx, _V33),
    to_list(Info_type, _V36),
    findall(_V37, (member(Ct, _V24), member(Mc, _V27), get_dict(id, Ct, _V25), get_dict(company_type_id, Mc, _V26), _V25 = _V26, member(T, _V30), get_dict(id, T, _V28), get_dict(movie_id, Mc, _V29), _V28 = _V29, member(Mi, _V33), get_dict(movie_id, Mi, _V31), get_dict(id, T, _V32), _V31 = _V32, member(It, _V36), get_dict(id, It, _V34), get_dict(info_type_id, Mi, _V35), _V34 = _V35, get_dict(kind, Ct, _V15), get_dict(info, It, _V16), get_dict(note, Mc, _V17), contains(_V17, "(as Metro-Goldwyn-Mayer Pictures)", _V18), (\+ _V18 -> _V19 = true ; _V19 = false), get_dict(note, Mc, _V20), contains(_V20, "(co-production)", _V21), get_dict(note, Mc, _V22), contains(_V22, "(presents)", _V23), (((_V15 = "production companies", _V16 = "top 250 rank"), _V19), (_V21 ; _V23)), get_dict(note, Mc, _V11), get_dict(title, T, _V12), get_dict(production_year, T, _V13), dict_create(_V14, map, [note-_V11, title-_V12, year-_V13]), _V37 = _V14), _V38),
    Filtered = _V38,
    to_list(Filtered, _V40),
    findall(_V41, (member(R, _V40), get_dict(note, R, _V39), _V41 = _V39), _V42),
    min(_V42, _V43),
    to_list(Filtered, _V45),
    findall(_V46, (member(R, _V45), get_dict(title, R, _V44), _V46 = _V44), _V47),
    min(_V47, _V48),
    to_list(Filtered, _V50),
    findall(_V51, (member(R, _V50), get_dict(year, R, _V49), _V51 = _V49), _V52),
    min(_V52, _V53),
    dict_create(_V54, map, [production_note-_V43, movie_title-_V48, movie_year-_V53]),
    Result = _V54,
    json([Result]),
    test_p_q1_returns_min_note__title_and_year_for_top_ranked_co_production
    .
:- initialization(main, main).
