:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


contains(Container, Item, Res) :-
    is_dict(Container), !, (get_dict(Item, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, string_chars(List, Chars), (member(Item, Chars) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


test_p_q3_returns_lexicographically_smallest_sequel_title :-
    dict_create(_V0, map, [movie_title-"Alpha"]),
    expect(Result = [_V0])    ,
    true.

    main :-
    dict_create(_V1, map, [id-1, keyword-"amazing sequel"]),
    dict_create(_V2, map, [id-2, keyword-"prequel"]),
    Keyword = [_V1, _V2],
    dict_create(_V3, map, [movie_id-10, info-"Germany"]),
    dict_create(_V4, map, [movie_id-30, info-"Sweden"]),
    dict_create(_V5, map, [movie_id-20, info-"France"]),
    Movie_info = [_V3, _V4, _V5],
    dict_create(_V6, map, [movie_id-10, keyword_id-1]),
    dict_create(_V7, map, [movie_id-30, keyword_id-1]),
    dict_create(_V8, map, [movie_id-20, keyword_id-1]),
    dict_create(_V9, map, [movie_id-10, keyword_id-2]),
    Movie_keyword = [_V6, _V7, _V8, _V9],
    dict_create(_V10, map, [id-10, title-"Alpha", production_year-2006]),
    dict_create(_V11, map, [id-30, title-"Beta", production_year-2008]),
    dict_create(_V12, map, [id-20, title-"Gamma", production_year-2009]),
    Title = [_V10, _V11, _V12],
    Allowed_infos = ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"],
    to_list(Keyword, _V21),
    to_list(Movie_keyword, _V24),
    to_list(Movie_info, _V27),
    to_list(Title, _V30),
    findall(_V31, (member(K, _V21), member(Mk, _V24), get_dict(keyword_id, Mk, _V22), get_dict(id, K, _V23), _V22 = _V23, member(Mi, _V27), get_dict(movie_id, Mi, _V25), get_dict(movie_id, Mk, _V26), _V25 = _V26, member(T, _V30), get_dict(id, T, _V28), get_dict(movie_id, Mi, _V29), _V28 = _V29, get_dict(keyword, K, _V14), contains(_V14, "sequel", _V15), get_dict(info, Mi, _V16), contains(Allowed_infos, _V16, _V20), get_dict(production_year, T, _V17), get_dict(movie_id, Mk, _V18), get_dict(movie_id, Mi, _V19), (((_V15, _V20), _V17 > 2005), _V18 = _V19), get_dict(title, T, _V13), _V31 = _V13), _V32),
    Candidate_titles = _V32,
    min(Candidate_titles, _V33),
    dict_create(_V34, map, [movie_title-_V33]),
    Result = [_V34],
    json(Result),
    test_p_q3_returns_lexicographically_smallest_sequel_title
    .
:- initialization(main, main).
