% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:59:23Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

    test_q2_finds_earliest_title_for_german_companies_with_character_keyword :-
        expect((Result == "Der Film")),
        true.
    
:- initialization(main, main).
main :-
    dict_create(_V0, map, [id-1, country_code-"[de]"]),
    dict_create(_V1, map, [id-2, country_code-"[us]"]),
    Company_name = [_V0, _V1],
    dict_create(_V2, map, [id-1, keyword-"character-name-in-title"]),
    dict_create(_V3, map, [id-2, keyword-"other"]),
    Keyword = [_V2, _V3],
    dict_create(_V4, map, [movie_id-100, company_id-1]),
    dict_create(_V5, map, [movie_id-200, company_id-2]),
    Movie_companies = [_V4, _V5],
    dict_create(_V6, map, [movie_id-100, keyword_id-1]),
    dict_create(_V7, map, [movie_id-200, keyword_id-2]),
    Movie_keyword = [_V6, _V7],
    dict_create(_V8, map, [id-100, title-"Der Film"]),
    dict_create(_V9, map, [id-200, title-"Other Movie"]),
    Title = [_V8, _V9],
    findall(_V23, (member(Cn, Company_name), member(Mc, Movie_companies), get_item(Mc, 'company_id', _V10), get_item(Cn, 'id', _V11), (_V10 == _V11), member(T, Title), get_item(Mc, 'movie_id', _V12), get_item(T, 'id', _V13), (_V12 == _V13), member(Mk, Movie_keyword), get_item(Mk, 'movie_id', _V14), get_item(T, 'id', _V15), (_V14 == _V15), member(K, Keyword), get_item(Mk, 'keyword_id', _V16), get_item(K, 'id', _V17), (_V16 == _V17), get_item(Cn, 'country_code', _V18), get_item(K, 'keyword', _V19), get_item(Mc, 'movie_id', _V20), get_item(Mk, 'movie_id', _V21), (((((_V18 == "[de]"), _V19) == "character-name-in-title"), _V20) == _V21), get_item(T, 'title', _V22), _V23 = _V22), _V24),
    Titles = _V24,
    min_list(Titles, _V25),
    Result is _V25,
    json_write_dict(current_output, Result), nl,
    true,
    test_q2_finds_earliest_title_for_german_companies_with_character_keyword,
    true.
