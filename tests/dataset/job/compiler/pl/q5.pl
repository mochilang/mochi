% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:59:23Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

    test_q5_finds_the_lexicographically_first_qualifying_title :-
        dict_create(_V0, map, [typical_european_movie-"A Film"]),
        expect((Result == [_V0])),
        true.
    
:- initialization(main, main).
main :-
    dict_create(_V0, map, [ct_id-1, kind-"production companies"]),
    dict_create(_V1, map, [ct_id-2, kind-"other"]),
    Company_type = [_V0, _V1],
    dict_create(_V2, map, [it_id-10, info-"languages"]),
    Info_type = [_V2],
    dict_create(_V3, map, [t_id-100, title-"B Movie", production_year-2010]),
    dict_create(_V4, map, [t_id-200, title-"A Film", production_year-2012]),
    dict_create(_V5, map, [t_id-300, title-"Old Movie", production_year-2000]),
    Title = [_V3, _V4, _V5],
    dict_create(_V6, map, [movie_id-100, company_type_id-1, note-"ACME (France) (theatrical)"]),
    dict_create(_V7, map, [movie_id-200, company_type_id-1, note-"ACME (France) (theatrical)"]),
    dict_create(_V8, map, [movie_id-300, company_type_id-1, note-"ACME (France) (theatrical)"]),
    Movie_companies = [_V6, _V7, _V8],
    dict_create(_V9, map, [movie_id-100, info-"German", info_type_id-10]),
    dict_create(_V10, map, [movie_id-200, info-"Swedish", info_type_id-10]),
    dict_create(_V11, map, [movie_id-300, info-"German", info_type_id-10]),
    Movie_info = [_V9, _V10, _V11],
    findall(_V29, (member(Ct, Company_type), member(Mc, Movie_companies), get_item(Mc, 'company_type_id', _V12), get_item(Ct, 'ct_id', _V13), (_V12 == _V13), member(Mi, Movie_info), get_item(Mi, 'movie_id', _V14), get_item(Mc, 'movie_id', _V15), (_V14 == _V15), member(It, Info_type), get_item(It, 'it_id', _V16), get_item(Mi, 'info_type_id', _V17), (_V16 == _V17), member(T, Title), get_item(T, 't_id', _V18), get_item(Mc, 'movie_id', _V19), (_V18 == _V19), get_item(Ct, 'kind', _V20), get_item(Mc, 'note', _V21), contains(_V21, ((_V20 == "production companies"), "(theatrical)"), _V22), get_item(Mc, 'note', _V23), contains(_V23, (_V22, "(France)"), _V24), get_item(T, 'production_year', _V25), get_item(Mi, 'info', _V26), contains(["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"], _V26, _V27), (((_V24, _V25) @> 2005), _V27), get_item(T, 'title', _V28), _V29 = _V28), _V30),
    Candidate_titles = _V30,
    min_list(Candidate_titles, _V31),
    dict_create(_V32, map, [typical_european_movie-_V31]),
    Result = [_V32],
    json_write_dict(current_output, Result), nl,
    true,
    test_q5_finds_the_lexicographically_first_qualifying_title,
    true.
