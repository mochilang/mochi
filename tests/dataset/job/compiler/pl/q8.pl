% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:58:55Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [person_id-1, name-"Y. S."]),
    Aka_name = [_V0],
    dict_create(_V1, map, [person_id-1, movie_id-10, note-"(voice: English version)", role_id-1000]),
    Cast_info = [_V1],
    dict_create(_V2, map, [id-50, country_code-"[jp]"]),
    Company_name = [_V2],
    dict_create(_V3, map, [movie_id-10, company_id-50, note-"Studio (Japan)"]),
    Movie_companies = [_V3],
    dict_create(_V4, map, [id-1, name-"Yoko Ono"]),
    dict_create(_V5, map, [id-2, name-"Yuichi"]),
    Name = [_V4, _V5],
    dict_create(_V6, map, [id-1000, role-"actress"]),
    Role_type = [_V6],
    dict_create(_V7, map, [id-10, title-"Dubbed Film"]),
    Title = [_V7],
    findall(_V36, (member(An1, Aka_name), member(N1, Name), get_item(N1, 'id', _V8), get_item(An1, 'person_id', _V9), (_V8 == _V9), member(Ci, Cast_info), get_item(Ci, 'person_id', _V10), get_item(An1, 'person_id', _V11), (_V10 == _V11), member(T, Title), get_item(T, 'id', _V12), get_item(Ci, 'movie_id', _V13), (_V12 == _V13), member(Mc, Movie_companies), get_item(Mc, 'movie_id', _V14), get_item(Ci, 'movie_id', _V15), (_V14 == _V15), member(Cn, Company_name), get_item(Cn, 'id', _V16), get_item(Mc, 'company_id', _V17), (_V16 == _V17), member(Rt, Role_type), get_item(Rt, 'id', _V18), get_item(Ci, 'role_id', _V19), (_V18 == _V19), get_item(Ci, 'note', _V20), get_item(Cn, 'country_code', _V21), get_item(Mc, 'note', _V22), contains(_V22, "(Japan)", _V23), get_item(Mc, 'note', _V24), contains(_V24, "(USA)", _V25), (_V25 -> _V26 = false ; _V26 = true), get_item(N1, 'name', _V27), contains(_V27, "Yo", _V28), get_item(N1, 'name', _V29), contains(_V29, "Yu", _V30), (_V30 -> _V31 = false ; _V31 = true), get_item(Rt, 'role', _V32), (((((((_V20 == "(voice: English version)"), (_V21 == "[jp]")), _V23), _V26), _V28), _V31), (_V32 == "actress")), get_item(An1, 'name', _V33), get_item(T, 'title', _V34), dict_create(_V35, map, [pseudonym-_V33, movie_title-_V34]), _V36 = _V35), _V37),
    Eligible = _V37,
    findall(_V39, (member(X, Eligible), true, get_item(X, 'pseudonym', _V38), _V39 = _V38), _V40),
    min_list(_V40, _V41),
    findall(_V43, (member(X, Eligible), true, get_item(X, 'movie_title', _V42), _V43 = _V42), _V44),
    min_list(_V44, _V45),
    dict_create(_V46, map, [actress_pseudonym-_V41, japanese_movie_dubbed-_V45]),
    Result = [_V46],
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V47, map, [actress_pseudonym-"Y. S.", japanese_movie_dubbed-"Dubbed Film"]),
    expect((Result == [_V47])),
    true.
