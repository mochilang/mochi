:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


contains(Container, Item, Res) :-
    is_dict(Container), !, (get_dict(Item, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, string_chars(List, Chars), (member(Item, Chars) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


test_p_q5_finds_the_lexicographically_first_qualifying_title :-
    dict_create(_V0, map, [typical_european_movie-"A Film"]),
    expect(Result = [_V0])    ,
    true.

    main :-
    dict_create(_V1, map, [ct_id-1, kind-"production companies"]),
    dict_create(_V2, map, [ct_id-2, kind-"other"]),
    Company_type = [_V1, _V2],
    dict_create(_V3, map, [it_id-10, info-"languages"]),
    Info_type = [_V3],
    dict_create(_V4, map, [t_id-100, title-"B Movie", production_year-2010]),
    dict_create(_V5, map, [t_id-200, title-"A Film", production_year-2012]),
    dict_create(_V6, map, [t_id-300, title-"Old Movie", production_year-2000]),
    Title = [_V4, _V5, _V6],
    dict_create(_V7, map, [movie_id-100, company_type_id-1, note-"ACME (France) (theatrical)"]),
    dict_create(_V8, map, [movie_id-200, company_type_id-1, note-"ACME (France) (theatrical)"]),
    dict_create(_V9, map, [movie_id-300, company_type_id-1, note-"ACME (France) (theatrical)"]),
    Movie_companies = [_V7, _V8, _V9],
    dict_create(_V10, map, [movie_id-100, info-"German", info_type_id-10]),
    dict_create(_V11, map, [movie_id-200, info-"Swedish", info_type_id-10]),
    dict_create(_V12, map, [movie_id-300, info-"German", info_type_id-10]),
    Movie_info = [_V10, _V11, _V12],
    to_list(Company_type, _V22),
    to_list(Movie_companies, _V25),
    to_list(Movie_info, _V28),
    to_list(Info_type, _V31),
    to_list(Title, _V34),
    findall(_V35, (member(Ct, _V22), member(Mc, _V25), get_dict(company_type_id, Mc, _V23), get_dict(ct_id, Ct, _V24), _V23 = _V24, member(Mi, _V28), get_dict(movie_id, Mi, _V26), get_dict(movie_id, Mc, _V27), _V26 = _V27, member(It, _V31), get_dict(it_id, It, _V29), get_dict(info_type_id, Mi, _V30), _V29 = _V30, member(T, _V34), get_dict(t_id, T, _V32), get_dict(movie_id, Mc, _V33), _V32 = _V33, get_dict(kind, Ct, _V14), get_dict(note, Mc, _V15), contains(_V15, "(theatrical)", _V20), get_dict(note, Mc, _V16), contains(_V16, "(France)", _V21), get_dict(production_year, T, _V17), get_dict(info, Mi, _V18), contains(["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"], _V18, _V19), ((((_V14 = "production companies", _V20), _V21), _V17 > 2005), _V19), get_dict(title, T, _V13), _V35 = _V13), _V36),
    Candidate_titles = _V36,
    min(Candidate_titles, _V37),
    dict_create(_V38, map, [typical_european_movie-_V37]),
    Result = [_V38],
    json(Result),
    test_p_q5_finds_the_lexicographically_first_qualifying_title
    .
:- initialization(main, main).
