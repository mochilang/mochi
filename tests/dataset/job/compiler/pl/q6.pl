% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:15:30Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [movie_id-1, person_id-101]),
    dict_create(_V1, map, [movie_id-2, person_id-102]),
    Cast_info = [_V0, _V1],
    dict_create(_V2, map, [id-100, keyword-"marvel-cinematic-universe"]),
    dict_create(_V3, map, [id-200, keyword-"other"]),
    Keyword = [_V2, _V3],
    dict_create(_V4, map, [movie_id-1, keyword_id-100]),
    dict_create(_V5, map, [movie_id-2, keyword_id-200]),
    Movie_keyword = [_V4, _V5],
    dict_create(_V6, map, [id-101, name-"Downey Robert Jr."]),
    dict_create(_V7, map, [id-102, name-"Chris Evans"]),
    Name = [_V6, _V7],
    dict_create(_V8, map, [id-1, title-"Iron Man 3", production_year-2013]),
    dict_create(_V9, map, [id-2, title-"Old Movie", production_year-2000]),
    Title = [_V8, _V9],
    findall(_V28, (member(Ci, Cast_info), member(Mk, Movie_keyword), get_item(Ci, 'movie_id', _V10), get_item(Mk, 'movie_id', _V11), (_V10 == _V11), member(K, Keyword), get_item(Mk, 'keyword_id', _V12), get_item(K, 'id', _V13), (_V12 == _V13), member(N, Name), get_item(Ci, 'person_id', _V14), get_item(N, 'id', _V15), (_V14 == _V15), member(T, Title), get_item(Ci, 'movie_id', _V16), get_item(T, 'id', _V17), (_V16 == _V17), get_item(K, 'keyword', _V18), get_item(N, 'name', _V19), contains(_V19, "Downey", _V20), get_item(N, 'name', _V21), contains(_V21, "Robert", _V22), get_item(T, 'production_year', _V23), ((((_V18 == "marvel-cinematic-universe"), _V20), _V22), (_V23 > 2010)), get_item(K, 'keyword', _V24), get_item(N, 'name', _V25), get_item(T, 'title', _V26), dict_create(_V27, map, [movie_keyword-_V24, actor_name-_V25, marvel_movie-_V26]), _V28 = _V27), _V29),
    Result = _V29,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V30, map, [movie_keyword-"marvel-cinematic-universe", actor_name-"Downey Robert Jr.", marvel_movie-"Iron Man 3"]),
    expect((Result == [_V30])),
    true.
