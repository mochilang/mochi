% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:59:23Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

    test_q4_returns_minimum_rating_and_title_for_sequels :-
        dict_create(_V0, map, [rating-"6.2", movie_title-"Alpha Movie"]),
        expect((Result == [_V0])),
        true.
    
:- initialization(main, main).
main :-
    dict_create(_V0, map, [id-1, info-"rating"]),
    dict_create(_V1, map, [id-2, info-"other"]),
    Info_type = [_V0, _V1],
    dict_create(_V2, map, [id-1, keyword-"great sequel"]),
    dict_create(_V3, map, [id-2, keyword-"prequel"]),
    Keyword = [_V2, _V3],
    dict_create(_V4, map, [id-10, title-"Alpha Movie", production_year-2006]),
    dict_create(_V5, map, [id-20, title-"Beta Film", production_year-2007]),
    dict_create(_V6, map, [id-30, title-"Old Film", production_year-2004]),
    Title = [_V4, _V5, _V6],
    dict_create(_V7, map, [movie_id-10, keyword_id-1]),
    dict_create(_V8, map, [movie_id-20, keyword_id-1]),
    dict_create(_V9, map, [movie_id-30, keyword_id-1]),
    Movie_keyword = [_V7, _V8, _V9],
    dict_create(_V10, map, [movie_id-10, info_type_id-1, info-"6.2"]),
    dict_create(_V11, map, [movie_id-20, info_type_id-1, info-"7.8"]),
    dict_create(_V12, map, [movie_id-30, info_type_id-1, info-"4.5"]),
    Movie_info_idx = [_V10, _V11, _V12],
    findall(_V31, (member(It, Info_type), member(Mi, Movie_info_idx), get_item(It, 'id', _V13), get_item(Mi, 'info_type_id', _V14), (_V13 == _V14), member(T, Title), get_item(T, 'id', _V15), get_item(Mi, 'movie_id', _V16), (_V15 == _V16), member(Mk, Movie_keyword), get_item(Mk, 'movie_id', _V17), get_item(T, 'id', _V18), (_V17 == _V18), member(K, Keyword), get_item(K, 'id', _V19), get_item(Mk, 'keyword_id', _V20), (_V19 == _V20), get_item(It, 'info', _V21), get_item(K, 'keyword', _V22), contains(_V22, "sequel", _V23), get_item(Mi, 'info', _V24), get_item(T, 'production_year', _V25), get_item(Mk, 'movie_id', _V26), get_item(Mi, 'movie_id', _V27), ((((((((_V21 == "rating"), _V23), _V24) @> "5.0"), _V25) @> 2005), _V26) == _V27), get_item(Mi, 'info', _V28), get_item(T, 'title', _V29), dict_create(_V30, map, [rating-_V28, title-_V29]), _V31 = _V30), _V32),
    Rows = _V32,
    findall(_V34, (member(R, Rows), true, get_item(R, 'rating', _V33), _V34 = _V33), _V35),
    min_list(_V35, _V36),
    findall(_V38, (member(R, Rows), true, get_item(R, 'title', _V37), _V38 = _V37), _V39),
    min_list(_V39, _V40),
    dict_create(_V41, map, [rating-_V36, movie_title-_V40]),
    Result = [_V41],
    json_write_dict(current_output, Result), nl,
    true,
    test_q4_returns_minimum_rating_and_title_for_sequels,
    true.
