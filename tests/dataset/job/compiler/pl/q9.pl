% Generated by Mochi compiler v0.10.25 on 2025-07-13T12:59:11Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [person_id-1, name-"A. N. G."]),
    dict_create(_V1, map, [person_id-2, name-"J. D."]),
    Aka_name = [_V0, _V1],
    dict_create(_V2, map, [id-10, name-"Angel"]),
    dict_create(_V3, map, [id-20, name-"Devil"]),
    Char_name = [_V2, _V3],
    dict_create(_V4, map, [person_id-1, person_role_id-10, movie_id-100, role_id-1000, note-"(voice)"]),
    dict_create(_V5, map, [person_id-2, person_role_id-20, movie_id-200, role_id-1000, note-"(voice)"]),
    Cast_info = [_V4, _V5],
    dict_create(_V6, map, [id-100, country_code-"[us]"]),
    dict_create(_V7, map, [id-200, country_code-"[gb]"]),
    Company_name = [_V6, _V7],
    dict_create(_V8, map, [movie_id-100, company_id-100, note-"ACME Studios (USA)"]),
    dict_create(_V9, map, [movie_id-200, company_id-200, note-"Maple Films"]),
    Movie_companies = [_V8, _V9],
    dict_create(_V10, map, [id-1, name-"Angela Smith", gender-"f"]),
    dict_create(_V11, map, [id-2, name-"John Doe", gender-"m"]),
    Name = [_V10, _V11],
    dict_create(_V12, map, [id-1000, role-"actress"]),
    dict_create(_V13, map, [id-2000, role-"actor"]),
    Role_type = [_V12, _V13],
    dict_create(_V14, map, [id-100, title-"Famous Film", production_year-2010]),
    dict_create(_V15, map, [id-200, title-"Old Movie", production_year-1999]),
    Title = [_V14, _V15],
    findall(_V47, (member(An, Aka_name), member(N, Name), get_item(An, 'person_id', _V16), get_item(N, 'id', _V17), (_V16 == _V17), member(Ci, Cast_info), get_item(Ci, 'person_id', _V18), get_item(N, 'id', _V19), (_V18 == _V19), member(Chn, Char_name), get_item(Chn, 'id', _V20), get_item(Ci, 'person_role_id', _V21), (_V20 == _V21), member(T, Title), get_item(T, 'id', _V22), get_item(Ci, 'movie_id', _V23), (_V22 == _V23), member(Mc, Movie_companies), get_item(Mc, 'movie_id', _V24), get_item(T, 'id', _V25), (_V24 == _V25), member(Cn, Company_name), get_item(Cn, 'id', _V26), get_item(Mc, 'company_id', _V27), (_V26 == _V27), member(Rt, Role_type), get_item(Rt, 'id', _V28), get_item(Ci, 'role_id', _V29), (_V28 == _V29), get_item(Ci, 'note', _V30), contains(["(voice)", "(voice: Japanese version)", "(voice) (uncredited)", "(voice: English version)"], _V30, _V31), get_item(Cn, 'country_code', _V32), get_item(Mc, 'note', _V33), contains(_V33, "(USA)", _V34), get_item(Mc, 'note', _V35), contains(_V35, "(worldwide)", _V36), get_item(N, 'gender', _V37), get_item(N, 'name', _V38), contains(_V38, "Ang", _V39), get_item(Rt, 'role', _V40), get_item(T, 'production_year', _V41), get_item(T, 'production_year', _V42), (((((((_V31, (_V32 == "[us]")), (_V34 ; _V36)), (_V37 == "f")), _V39), (_V40 == "actress")), (_V41 >= 2005)), (_V42 =< 2015)), get_item(An, 'name', _V43), get_item(Chn, 'name', _V44), get_item(T, 'title', _V45), dict_create(_V46, map, [alt-_V43, character-_V44, movie-_V45]), _V47 = _V46), _V48),
    Matches = _V48,
    findall(_V50, (member(X, Matches), true, get_item(X, 'alt', _V49), _V50 = _V49), _V51),
    min_list(_V51, _V52),
    findall(_V54, (member(X, Matches), true, get_item(X, 'character', _V53), _V54 = _V53), _V55),
    min_list(_V55, _V56),
    findall(_V58, (member(X, Matches), true, get_item(X, 'movie', _V57), _V58 = _V57), _V59),
    min_list(_V59, _V60),
    dict_create(_V61, map, [alternative_name-_V52, character_name-_V56, movie-_V60]),
    Result = [_V61],
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V62, map, [alternative_name-"A. N. G.", character_name-"Angel", movie-"Famous Film"]),
    expect((Result == [_V62])),
    true.
