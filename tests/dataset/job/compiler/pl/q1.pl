% Generated by Mochi compiler v0.10.25 on 2025-07-13T10:59:23Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

    test_q1_returns_min_note_title_and_year_for_top_ranked_co_production :-
        dict_create(_V0, map, [production_note-"ACME (co-production)", movie_title-"Good Movie", movie_year-1995]),
        expect((Result == _V0)),
        true.
    
:- initialization(main, main).
main :-
    dict_create(_V0, map, [id-1, kind-"production companies"]),
    dict_create(_V1, map, [id-2, kind-"distributors"]),
    Company_type = [_V0, _V1],
    dict_create(_V2, map, [id-10, info-"top 250 rank"]),
    dict_create(_V3, map, [id-20, info-"bottom 10 rank"]),
    Info_type = [_V2, _V3],
    dict_create(_V4, map, [id-100, title-"Good Movie", production_year-1995]),
    dict_create(_V5, map, [id-200, title-"Bad Movie", production_year-2000]),
    Title = [_V4, _V5],
    dict_create(_V6, map, [movie_id-100, company_type_id-1, note-"ACME (co-production)"]),
    dict_create(_V7, map, [movie_id-200, company_type_id-1, note-"MGM (as Metro-Goldwyn-Mayer Pictures)"]),
    Movie_companies = [_V6, _V7],
    dict_create(_V8, map, [movie_id-100, info_type_id-10]),
    dict_create(_V9, map, [movie_id-200, info_type_id-20]),
    Movie_info_idx = [_V8, _V9],
    findall(_V31, (member(Ct, Company_type), member(Mc, Movie_companies), get_item(Ct, 'id', _V10), get_item(Mc, 'company_type_id', _V11), (_V10 == _V11), member(T, Title), get_item(T, 'id', _V12), get_item(Mc, 'movie_id', _V13), (_V12 == _V13), member(Mi, Movie_info_idx), get_item(Mi, 'movie_id', _V14), get_item(T, 'id', _V15), (_V14 == _V15), member(It, Info_type), get_item(It, 'id', _V16), get_item(Mi, 'info_type_id', _V17), (_V16 == _V17), get_item(Ct, 'kind', _V18), get_item(It, 'info', _V19), get_item(Mc, 'note', _V20), contains(_V20, "(as Metro-Goldwyn-Mayer Pictures)", _V21), (_V21 -> _V22 = false ; _V22 = true), get_item(Mc, 'note', _V23), contains(_V23, "(co-production)", _V24), get_item(Mc, 'note', _V25), contains(_V25, "(presents)", _V26), (((((_V18 == "production companies"), _V19) == "top 250 rank"), _V22), (_V24 ; _V26)), get_item(Mc, 'note', _V27), get_item(T, 'title', _V28), get_item(T, 'production_year', _V29), dict_create(_V30, map, [note-_V27, title-_V28, year-_V29]), _V31 = _V30), _V32),
    Filtered = _V32,
    findall(_V34, (member(R, Filtered), true, get_item(R, 'note', _V33), _V34 = _V33), _V35),
    min_list(_V35, _V36),
    findall(_V38, (member(R, Filtered), true, get_item(R, 'title', _V37), _V38 = _V37), _V39),
    min_list(_V39, _V40),
    findall(_V42, (member(R, Filtered), true, get_item(R, 'year', _V41), _V42 = _V41), _V43),
    min_list(_V43, _V44),
    dict_create(_V45, map, [production_note-_V36, movie_title-_V40, movie_year-_V44]),
    Result = _V45,
    json_write_dict(current_output, [Result]), nl,
    true,
    test_q1_returns_min_note_title_and_year_for_top_ranked_co_production,
    true.
