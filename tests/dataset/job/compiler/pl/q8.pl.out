:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


contains(Container, Item, Res) :-
    is_dict(Container), !, (get_dict(Item, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, string_chars(List, Chars), (member(Item, Chars) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


test_p_q8_returns_the_pseudonym_and_movie_title_for_japanese_dubbing :-
    dict_create(_V0, map, [actress_pseudonym-"Y. S.", japanese_movie_dubbed-"Dubbed Film"]),
    expect(Result = [_V0])    ,
    true.

    main :-
    dict_create(_V1, map, [person_id-1, name-"Y. S."]),
    Aka_name = [_V1],
    dict_create(_V2, map, [person_id-1, movie_id-10, note-"(voice: English version)", role_id-1000]),
    Cast_info = [_V2],
    dict_create(_V3, map, [id-50, country_code-"[jp]"]),
    Company_name = [_V3],
    dict_create(_V4, map, [movie_id-10, company_id-50, note-"Studio (Japan)"]),
    Movie_companies = [_V4],
    dict_create(_V5, map, [id-1, name-"Yoko Ono"]),
    dict_create(_V6, map, [id-2, name-"Yuichi"]),
    Name = [_V5, _V6],
    dict_create(_V7, map, [id-1000, role-"actress"]),
    Role_type = [_V7],
    dict_create(_V8, map, [id-10, title-"Dubbed Film"]),
    Title = [_V8],
    to_list(Aka_name, _V25),
    to_list(Name, _V28),
    to_list(Cast_info, _V31),
    to_list(Title, _V34),
    to_list(Movie_companies, _V37),
    to_list(Company_name, _V40),
    to_list(Role_type, _V43),
    findall(_V44, (member(An1, _V25), member(N1, _V28), get_dict(id, N1, _V26), get_dict(person_id, An1, _V27), _V26 = _V27, member(Ci, _V31), get_dict(person_id, Ci, _V29), get_dict(person_id, An1, _V30), _V29 = _V30, member(T, _V34), get_dict(id, T, _V32), get_dict(movie_id, Ci, _V33), _V32 = _V33, member(Mc, _V37), get_dict(movie_id, Mc, _V35), get_dict(movie_id, Ci, _V36), _V35 = _V36, member(Cn, _V40), get_dict(id, Cn, _V38), get_dict(company_id, Mc, _V39), _V38 = _V39, member(Rt, _V43), get_dict(id, Rt, _V41), get_dict(role_id, Ci, _V42), _V41 = _V42, get_dict(note, Ci, _V12), get_dict(country_code, Cn, _V13), get_dict(note, Mc, _V14), contains(_V14, "(Japan)", _V15), get_dict(note, Mc, _V16), contains(_V16, "(USA)", _V17), (\+ _V17 -> _V18 = true ; _V18 = false), get_dict(name, N1, _V19), contains(_V19, "Yo", _V20), get_dict(name, N1, _V21), contains(_V21, "Yu", _V22), (\+ _V22 -> _V23 = true ; _V23 = false), get_dict(role, Rt, _V24), ((((((_V12 = "(voice: English version)", _V13 = "[jp]"), _V15), _V18), _V20), _V23), _V24 = "actress"), get_dict(name, An1, _V9), get_dict(title, T, _V10), dict_create(_V11, map, [pseudonym-_V9, movie_title-_V10]), _V44 = _V11), _V45),
    Eligible = _V45,
    to_list(Eligible, _V47),
    findall(_V48, (member(X, _V47), get_dict(pseudonym, X, _V46), _V48 = _V46), _V49),
    min(_V49, _V50),
    to_list(Eligible, _V52),
    findall(_V53, (member(X, _V52), get_dict(movie_title, X, _V51), _V53 = _V51), _V54),
    min(_V54, _V55),
    dict_create(_V56, map, [actress_pseudonym-_V50, japanese_movie_dubbed-_V55]),
    Result = [_V56],
    write(Result),
    nl,
    test_p_q8_returns_the_pseudonym_and_movie_title_for_japanese_dubbing
    .
:- initialization(main, main).
