:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


contains(Container, Item, Res) :-
    is_dict(Container), !, (get_dict(Item, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, string_chars(List, Chars), (member(Item, Chars) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


test_p_q4_returns_minimum_rating_and_title_for_sequels :-
    dict_create(_V0, map, [rating-"6.2", movie_title-"Alpha Movie"]),
    expect(Result = [_V0])    ,
    true.

    main :-
    dict_create(_V1, map, [id-1, info-"rating"]),
    dict_create(_V2, map, [id-2, info-"other"]),
    Info_type = [_V1, _V2],
    dict_create(_V3, map, [id-1, keyword-"great sequel"]),
    dict_create(_V4, map, [id-2, keyword-"prequel"]),
    Keyword = [_V3, _V4],
    dict_create(_V5, map, [id-10, title-"Alpha Movie", production_year-2006]),
    dict_create(_V6, map, [id-20, title-"Beta Film", production_year-2007]),
    dict_create(_V7, map, [id-30, title-"Old Film", production_year-2004]),
    Title = [_V5, _V6, _V7],
    dict_create(_V8, map, [movie_id-10, keyword_id-1]),
    dict_create(_V9, map, [movie_id-20, keyword_id-1]),
    dict_create(_V10, map, [movie_id-30, keyword_id-1]),
    Movie_keyword = [_V8, _V9, _V10],
    dict_create(_V11, map, [movie_id-10, info_type_id-1, info-"6.2"]),
    dict_create(_V12, map, [movie_id-20, info_type_id-1, info-"7.8"]),
    dict_create(_V13, map, [movie_id-30, info_type_id-1, info-"4.5"]),
    Movie_info_idx = [_V11, _V12, _V13],
    to_list(Info_type, _V24),
    to_list(Movie_info_idx, _V27),
    to_list(Title, _V30),
    to_list(Movie_keyword, _V33),
    to_list(Keyword, _V36),
    findall(_V37, (member(It, _V24), member(Mi, _V27), get_dict(id, It, _V25), get_dict(info_type_id, Mi, _V26), _V25 = _V26, member(T, _V30), get_dict(id, T, _V28), get_dict(movie_id, Mi, _V29), _V28 = _V29, member(Mk, _V33), get_dict(movie_id, Mk, _V31), get_dict(id, T, _V32), _V31 = _V32, member(K, _V36), get_dict(id, K, _V34), get_dict(keyword_id, Mk, _V35), _V34 = _V35, get_dict(info, It, _V17), get_dict(keyword, K, _V18), contains(_V18, "sequel", _V19), get_dict(info, Mi, _V20), get_dict(production_year, T, _V21), get_dict(movie_id, Mk, _V22), get_dict(movie_id, Mi, _V23), ((((_V17 = "rating", _V19), _V20 > "5.0"), _V21 > 2005), _V22 = _V23), get_dict(info, Mi, _V14), get_dict(title, T, _V15), dict_create(_V16, map, [rating-_V14, title-_V15]), _V37 = _V16), _V38),
    Rows = _V38,
    to_list(Rows, _V40),
    findall(_V41, (member(R, _V40), get_dict(rating, R, _V39), _V41 = _V39), _V42),
    min(_V42, _V43),
    to_list(Rows, _V45),
    findall(_V46, (member(R, _V45), get_dict(title, R, _V44), _V46 = _V44), _V47),
    min(_V47, _V48),
    dict_create(_V49, map, [rating-_V43, movie_title-_V48]),
    Result = [_V49],
    json(Result),
    test_p_q4_returns_minimum_rating_and_title_for_sequels
    .
:- initialization(main, main).
