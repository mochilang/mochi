:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


min(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), min_list(Items, R).
min(V, R) :-
    is_list(V), !, min_list(V, R).
min(_, _) :- throw(error('min expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


test_p_q2_finds_earliest_title_for_german_companies_with_character_keyword :-
    expect(Result = "Der Film")    ,
    true.

    main :-
    dict_create(_V0, map, [id-1, country_code-"[de]"]),
    dict_create(_V1, map, [id-2, country_code-"[us]"]),
    Company_name = [_V0, _V1],
    dict_create(_V2, map, [id-1, keyword-"character-name-in-title"]),
    dict_create(_V3, map, [id-2, keyword-"other"]),
    Keyword = [_V2, _V3],
    dict_create(_V4, map, [movie_id-100, company_id-1]),
    dict_create(_V5, map, [movie_id-200, company_id-2]),
    Movie_companies = [_V4, _V5],
    dict_create(_V6, map, [movie_id-100, keyword_id-1]),
    dict_create(_V7, map, [movie_id-200, keyword_id-2]),
    Movie_keyword = [_V6, _V7],
    dict_create(_V8, map, [id-100, title-"Der Film"]),
    dict_create(_V9, map, [id-200, title-"Other Movie"]),
    Title = [_V8, _V9],
    to_list(Company_name, _V15),
    to_list(Movie_companies, _V18),
    to_list(Title, _V21),
    to_list(Movie_keyword, _V24),
    to_list(Keyword, _V27),
    findall(_V28, (member(Cn, _V15), member(Mc, _V18), get_dict(company_id, Mc, _V16), get_dict(id, Cn, _V17), _V16 = _V17, member(T, _V21), get_dict(movie_id, Mc, _V19), get_dict(id, T, _V20), _V19 = _V20, member(Mk, _V24), get_dict(movie_id, Mk, _V22), get_dict(id, T, _V23), _V22 = _V23, member(K, _V27), get_dict(keyword_id, Mk, _V25), get_dict(id, K, _V26), _V25 = _V26, get_dict(country_code, Cn, _V11), get_dict(keyword, K, _V12), get_dict(movie_id, Mc, _V13), get_dict(movie_id, Mk, _V14), ((_V11 = "[de]", _V12 = "character-name-in-title"), _V13 = _V14), get_dict(title, T, _V10), _V28 = _V10), _V29),
    Titles = _V29,
    min(Titles, _V30),
    Result = _V30,
    json(Result),
    test_p_q2_finds_earliest_title_for_german_companies_with_character_keyword
    .
:- initialization(main, main).
