// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _min(_ v: Any) -> Any {
    var list: [Any]? = nil
    if let g = v as? _Group { list = g.Items }
    else if let arr = v as? [Any] { list = arr }
    else if let arr = v as? [Int] { return arr.min() ?? 0 }
    else if let arr = v as? [Double] { return arr.min() ?? 0.0 }
    else if let arr = v as? [String] { return arr.min() ?? "" }
    guard let items = list else { fatalError("min() expects list or group") }
    if items.isEmpty { return 0 }
    if let s = items[0] as? String {
        var m = s
        for it in items.dropFirst() {
            if let v = it as? String, v < m { m = v }
        }
        return m
    }
    func toDouble(_ v: Any) -> Double {
        if let i = v as? Int { return Double(i) }
        if let d = v as? Double { return d }
        if let f = v as? Float { return Double(f) }
        if let i = v as? Int64 { return Double(i) }
        return 0
    }
    var m = toDouble(items[0])
    var isFloat = items[0] is Double || items[0] is Float
    for it in items.dropFirst() {
        if it is Double || it is Float { isFloat = true }
        let d = toDouble(it)
        if d < m { m = d }
    }
    return isFloat ? m : Int(m)
}
struct CastInfo: Equatable {
    var movie_id: Int
    var note: String
    var person_id: Int
}

struct InfoType: Equatable {
    var id: Int
    var info: String
}

struct MovieInfo: Equatable {
    var info: Int
    var info_type_id: Int
    var movie_id: Int
}

struct Name: Equatable {
    var gender: String
    var id: Int
    var name: String
}

struct Row: Equatable {
    var budget: Int
    var title: String
    var votes: Int
}

struct Title: Equatable {
    var id: Int
    var title: String
}

var info_type = [InfoType(id: 1, info: "budget"), InfoType(id: 2, info: "votes"), InfoType(id: 3, info: "rating")]
var name = [Name(gender: "m", id: 1, name: "Big Tim"), Name(gender: "m", id: 2, name: "Slim Tim"), Name(gender: "f", id: 3, name: "Alice")]
var title = [Title(id: 10, title: "Alpha"), Title(id: 20, title: "Beta"), Title(id: 30, title: "Gamma")]
var cast_info = [CastInfo(movie_id: 10, note: "(producer)", person_id: 1), CastInfo(movie_id: 20, note: "(executive producer)", person_id: 2), CastInfo(movie_id: 30, note: "(producer)", person_id: 3)]
var movie_info = [MovieInfo(info: 90, info_type_id: 1, movie_id: 10), MovieInfo(info: 120, info_type_id: 1, movie_id: 20), MovieInfo(info: 110, info_type_id: 1, movie_id: 30)]
var movie_info_idx = [MovieInfo(info: 500, info_type_id: 2, movie_id: 10), MovieInfo(info: 400, info_type_id: 2, movie_id: 20), MovieInfo(info: 800, info_type_id: 2, movie_id: 30)]
var rows = ({
	var _res: [(budget: Int, title: String, votes: Int)] = []
	for ci in cast_info {
		for n in name {
			if !(n.id == ci.person_id) { continue }
			for t in title {
				if !(t.id == ci.movie_id) { continue }
				for mi in movie_info {
					if !(mi.movie_id == t.id) { continue }
					for mi_idx in movie_info_idx {
						if !(mi_idx.movie_id == t.id) { continue }
						for it1 in info_type {
							if !(it1.id == mi.info_type_id) { continue }
							for it2 in info_type {
								if !(it2.id == mi_idx.info_type_id) { continue }
								if !((["(producer)", "(executive producer)"].contains(ci.note) && it1.info == "budget" && it2.info == "votes" && n.gender == "m" && n.name.contains("Tim") && t.id == ci.movie_id && ci.movie_id == mi.movie_id && ci.movie_id == mi_idx.movie_id && mi.movie_id == mi_idx.movie_id) != nil) { continue }
								_res.append(["budget": mi.info, "votes": mi_idx.info, "title": t.title])
							}
						}
					}
				}
			}
		}
	}
	return _res
}())
let result = ["movie_budget": _min(rows.map { r in r.budget }), "movie_votes": _min(rows.map { r in r.votes }), "movie_title": _min(rows.map { r in r.title })]
_json(result)
expect(_equal(result, ["movie_budget": 90, "movie_votes": 400, "movie_title": "Alpha"]))
