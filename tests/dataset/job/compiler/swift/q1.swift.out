import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _min(_ v: Any) -> Any {
  var list: [Any]? = nil
  if let g = v as? _Group {
    list = g.Items
  } else if let arr = v as? [Any] {
    list = arr
  } else if let arr = v as? [Int] {
    return arr.min() ?? 0
  } else if let arr = v as? [Double] {
    return arr.min() ?? 0.0
  } else if let arr = v as? [String] {
    return arr.min() ?? ""
  }
  guard let items = list else { fatalError("min() expects list or group") }
  if items.isEmpty { return 0 }
  if let s = items[0] as? String {
    var m = s
    for it in items.dropFirst() {
      if let v = it as? String, v < m { m = v }
    }
    return m
  }
  func toDouble(_ v: Any) -> Double {
    if let i = v as? Int { return Double(i) }
    if let d = v as? Double { return d }
    if let f = v as? Float { return Double(f) }
    if let i = v as? Int64 { return Double(i) }
    return 0
  }
  var m = toDouble(items[0])
  var isFloat = items[0] is Double || items[0] is Float
  for it in items.dropFirst() {
    if it is Double || it is Float { isFloat = true }
    let d = toDouble(it)
    if d < m { m = d }
  }
  return isFloat ? m : Int(m)
}

func test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production() {
  expect(
    result == [
      "production_note": "ACME (co-production)", "movie_title": "Good Movie", "movie_year": 1995,
    ])
}

let company_type = [["id": 1, "kind": "production companies"], ["id": 2, "kind": "distributors"]]
let info_type = [["id": 10, "info": "top 250 rank"], ["id": 20, "info": "bottom 10 rank"]]
let title = [
  ["id": 100, "title": "Good Movie", "production_year": 1995],
  ["id": 200, "title": "Bad Movie", "production_year": 2000],
]
let movie_companies = [
  ["movie_id": 100, "company_type_id": 1, "note": "ACME (co-production)"],
  ["movie_id": 200, "company_type_id": 1, "note": "MGM (as Metro-Goldwyn-Mayer Pictures)"],
]
let movie_info_idx: [[String: Int]] = [
  ["movie_id": 100, "info_type_id": 10], ["movie_id": 200, "info_type_id": 20],
]
let filtered =
  ({
    var _res: [[String: Any]] = []
    for ct in company_type {
      for mc in movie_companies {
        if !(ct["id"]! == mc["company_type_id"]!) { continue }
        for t in title {
          if !(t["id"]! == mc["movie_id"]!) { continue }
          for mi in movie_info_idx {
            if !(mi["movie_id"]! == t["id"]!) { continue }
            for it in info_type {
              if !(it["id"]! == mi["info_type_id"]!) { continue }
              if !(ct["kind"]! == "production companies" && it["info"]! == "top 250 rank"
                && (!mc["note"]!["contains"]!("(as Metro-Goldwyn-Mayer Pictures)"))
                && (mc["note"]!["contains"]!("(co-production)")
                  || mc["note"]!["contains"]!("(presents)")))
              {
                continue
              }
              _res.append([
                "note": mc["note"]!, "title": t["title"]!, "year": t["production_year"]!,
              ])
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = [
  "production_note": _min(
    ({
      var _res: [Any] = []
      for r in filtered {
        _res.append(r["note"]!)
      }
      var _items = _res
      return _items
    }())),
  "movie_title": _min(
    ({
      var _res: [Any] = []
      for r in filtered {
        _res.append(r["title"]!)
      }
      var _items = _res
      return _items
    }())),
  "movie_year": _min(
    ({
      var _res: [Any] = []
      for r in filtered {
        _res.append(r["year"]!)
      }
      var _items = _res
      return _items
    }())),
]
func main() {
  _json([result])
  test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production()
}
main()
