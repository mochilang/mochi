// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:31:27Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    if let obj = _sort(v) as? Any,
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}

func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _min(_ v: Any) -> Any {
    var list: [Any]? = nil
    if let g = v as? _Group { list = g.Items }
    else if let arr = v as? [Any] { list = arr }
    else if let arr = v as? [Int] { return arr.min() ?? 0 }
    else if let arr = v as? [Double] { return arr.min() ?? 0.0 }
    else if let arr = v as? [String] { return arr.min() ?? "" }
    guard let items = list else { fatalError("min() expects list or group") }
    if items.isEmpty { return 0 }
    if let s = items[0] as? String {
        var m = s
        for it in items.dropFirst() {
            if let v = it as? String, v < m { m = v }
        }
        return m
    }
    func toDouble(_ v: Any) -> Double {
        if let i = v as? Int { return Double(i) }
        if let d = v as? Double { return d }
        if let f = v as? Float { return Double(f) }
        if let i = v as? Int64 { return Double(i) }
        return 0
    }
    var m = toDouble(items[0])
    var isFloat = items[0] is Double || items[0] is Float
    for it in items.dropFirst() {
        if it is Double || it is Float { isFloat = true }
        let d = toDouble(it)
        if d < m { m = d }
    }
    return isFloat ? m : Int(m)
}
struct Auto1: Equatable {
    var id: Int
    var kind: String
}

struct Auto2: Equatable {
    var id: Int
    var info: String
}

struct Auto3: Equatable {
    var id: Int
    var production_year: Int
    var title: String
}

struct Auto4: Equatable {
    var company_type_id: Int
    var movie_id: Int
    var note: String
}

struct Auto5: Equatable {
    var info_type_id: Int
    var movie_id: Int
}

var company_type = [Auto1(id: 1, kind: "production companies"), Auto1(id: 2, kind: "distributors")]
var info_type = [Auto2(id: 10, info: "top 250 rank"), Auto2(id: 20, info: "bottom 10 rank")]
var title = [Auto3(id: 100, production_year: 1995, title: "Good Movie"), Auto3(id: 200, production_year: 2000, title: "Bad Movie")]
var movie_companies = [Auto4(company_type_id: 1, movie_id: 100, note: "ACME (co-production)"), Auto4(company_type_id: 1, movie_id: 200, note: "MGM (as Metro-Goldwyn-Mayer Pictures)")]
var movie_info_idx = [Auto5(info_type_id: 10, movie_id: 100), Auto5(info_type_id: 20, movie_id: 200)]
var filtered = ({
	var _res: [[String:Any]] = []
	for ct in company_type {
		for mc in movie_companies {
			if !(ct.id == mc.company_type_id) { continue }
			for t in title {
				if !(t.id == mc.movie_id) { continue }
				for mi in movie_info_idx {
					if !(mi.movie_id == t.id) { continue }
					for it in info_type {
						if !(it.id == mi.info_type_id) { continue }
						if !(ct.kind == "production companies" && it.info == "top 250 rank" && (!mc.note.contains("(as Metro-Goldwyn-Mayer Pictures)")) && (mc.note.contains("(co-production)") || mc.note.contains("(presents)"))) { continue }
						_res.append(["note": mc.note, "title": t.title, "year": t.production_year])
					}
				}
			}
		}
	}
	return _res
}())
let result = ["production_note": _min(filtered.map { r in r["note"]! }), "movie_title": _min(filtered.map { r in r["title"]! }), "movie_year": _min(filtered.map { r in r["year"]! })]
_json([result])
expect(_equal(result, ["production_note": "ACME (co-production)", "movie_title": "Good Movie", "movie_year": 1995]))
