<?php
function mochi_test_Q5_finds_the_lexicographically_first_qualifying_title() {
	global $result, $typical_european_movie;
	if (!(($result == [["typical_european_movie" => "A Film"]]))) { throw new Exception('expect failed'); }
}

$company_type = [["ct_id" => 1, "kind" => "production companies"], ["ct_id" => 2, "kind" => "other"]];
$info_type = [["it_id" => 10, "info" => "languages"]];
$title = [["t_id" => 100, "title" => "B Movie", "production_year" => 2010], ["t_id" => 200, "title" => "A Film", "production_year" => 2012], ["t_id" => 300, "title" => "Old Movie", "production_year" => 2000]];
$movie_companies = [["movie_id" => 100, "company_type_id" => 1, "note" => "ACME (France) (theatrical)"], ["movie_id" => 200, "company_type_id" => 1, "note" => "ACME (France) (theatrical)"], ["movie_id" => 300, "company_type_id" => 1, "note" => "ACME (France) (theatrical)"]];
$movie_info = [["movie_id" => 100, "info" => "German", "info_type_id" => 10], ["movie_id" => 200, "info" => "Swedish", "info_type_id" => 10], ["movie_id" => 300, "info" => "German", "info_type_id" => 10]];
$candidate_titles = (function() use ($company_type, $info_type, $movie_companies, $movie_info, $title) {
	$_src = $company_type;
	return _query($_src, [
		[ 'items' => $movie_companies, 'on' => function($ct, $mc) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return ($mc['company_type_id'] == $ct['ct_id']); } ],
		[ 'items' => $movie_info, 'on' => function($ct, $mc, $mi) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return ($mi['movie_id'] == $mc['movie_id']); } ],
		[ 'items' => $info_type, 'on' => function($ct, $mc, $mi, $it) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return ($it['it_id'] == $mi['info_type_id']); } ],
		[ 'items' => $title, 'on' => function($ct, $mc, $mi, $it, $t) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return ($t['t_id'] == $mc['movie_id']); } ]
	], [ 'select' => function($ct, $mc, $mi, $it, $t) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return $t['title']; }, 'where' => function($ct, $mc, $mi, $it, $t) use ($company_type, $info_type, $movie_companies, $movie_info, $title) { return (((((($ct['kind'] == "production companies") && (is_array($mc['note']) ? (array_key_exists("(theatrical)", $mc['note']) || in_array("(theatrical)", $mc['note'], true)) : (is_string($mc['note']) ? strpos($mc['note'], strval("(theatrical)")) !== false : false))) && (is_array($mc['note']) ? (array_key_exists("(France)", $mc['note']) || in_array("(France)", $mc['note'], true)) : (is_string($mc['note']) ? strpos($mc['note'], strval("(France)")) !== false : false))) && ($t['production_year'] > 2005)) && ((is_array(["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]) ? (array_key_exists($mi['info'], ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]) || in_array($mi['info'], ["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"], true)) : (is_string(["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"]) ? strpos(["Sweden", "Norway", "Germany", "Denmark", "Swedish", "Denish", "Norwegian", "German"], strval($mi['info'])) !== false : false))))); } ]);
})();
$result = [["typical_european_movie" => min($candidate_titles)]];
echo json_encode($result), PHP_EOL;
mochi_test_Q5_finds_the_lexicographically_first_qualifying_title();

function _query($src, $joins, $opts) {
    $items = array_map(fn($v) => [$v], $src);
    foreach ($joins as $j) {
        $joined = [];
        if (!empty($j['right']) && !empty($j['left'])) {
            $matched = array_fill(0, count($j['items']), false);
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $ri => $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $matched[$ri] = true;
                    $joined[] = array_merge($left, [$right]);
                }
                if (!$m) { $joined[] = array_merge($left, [null]); }
            }
            foreach ($j['items'] as $ri => $right) {
                if (!$matched[$ri]) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } elseif (!empty($j['right'])) {
            foreach ($j['items'] as $right) {
                $m = false;
                foreach ($items as $left) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!$m) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } else {
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!empty($j['left']) && !$m) { $joined[] = array_merge($left, [null]); }
            }
        }
        $items = $joined;
    }
    if (isset($opts['where'])) {
        $filtered = [];
        foreach ($items as $r) { if ($opts['where'](...$r)) $filtered[] = $r; }
        $items = $filtered;
    }
    if (isset($opts['sortKey'])) {
        $pairs = [];
        foreach ($items as $it) { $pairs[] = ['item' => $it, 'key' => $opts['sortKey'](...$it)]; }
        usort($pairs, function($a, $b) {
            $ak = $a['key']; $bk = $b['key'];
            if (is_int($ak) && is_int($bk)) return $ak <=> $bk;
            if (is_string($ak) && is_string($bk)) return $ak <=> $bk;
            return strcmp(strval($ak), strval($bk));
        });
        $items = array_map(fn($p) => $p['item'], $pairs);
    }
    if (array_key_exists('skip', $opts)) {
        $n = $opts['skip'];
        $items = $n < count($items) ? array_slice($items, $n) : [];
    }
    if (array_key_exists('take', $opts)) {
        $n = $opts['take'];
        if ($n < count($items)) $items = array_slice($items, 0, $n);
    }
    $res = [];
    foreach ($items as $r) { $res[] = $opts['select'](...$r); }
    return $res;
}
