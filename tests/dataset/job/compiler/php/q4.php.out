<?php
function mochi_test_Q4_returns_minimum_rating_and_title_for_sequels() {
	global $movie_title, $rating, $result;
	if (!(($result == [["rating" => "6.2", "movie_title" => "Alpha Movie"]]))) { throw new Exception('expect failed'); }
}

$info_type = [["id" => 1, "info" => "rating"], ["id" => 2, "info" => "other"]];
$keyword = [["id" => 1, "keyword" => "great sequel"], ["id" => 2, "keyword" => "prequel"]];
$title = [["id" => 10, "title" => "Alpha Movie", "production_year" => 2006], ["id" => 20, "title" => "Beta Film", "production_year" => 2007], ["id" => 30, "title" => "Old Film", "production_year" => 2004]];
$movie_keyword = [["movie_id" => 10, "keyword_id" => 1], ["movie_id" => 20, "keyword_id" => 1], ["movie_id" => 30, "keyword_id" => 1]];
$movie_info_idx = [["movie_id" => 10, "info_type_id" => 1, "info" => "6.2"], ["movie_id" => 20, "info_type_id" => 1, "info" => "7.8"], ["movie_id" => 30, "info_type_id" => 1, "info" => "4.5"]];
$rows = (function() use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) {
	$_src = $info_type;
	return _query($_src, [
		[ 'items' => $movie_info_idx, 'on' => function($it, $mi) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return ($it['id'] == $mi['info_type_id']); } ],
		[ 'items' => $title, 'on' => function($it, $mi, $t) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return ($t['id'] == $mi['movie_id']); } ],
		[ 'items' => $movie_keyword, 'on' => function($it, $mi, $t, $mk) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return ($mk['movie_id'] == $t['id']); } ],
		[ 'items' => $keyword, 'on' => function($it, $mi, $t, $mk, $k) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return ($k['id'] == $mk['keyword_id']); } ]
	], [ 'select' => function($it, $mi, $t, $mk, $k) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return ["rating" => $mi['info'], "title" => $t['title']]; }, 'where' => function($it, $mi, $t, $mk, $k) use ($info_type, $keyword, $movie_info_idx, $movie_keyword, $title) { return (((((($it['info'] == "rating") && (is_array($k['keyword']) ? (array_key_exists("sequel", $k['keyword']) || in_array("sequel", $k['keyword'], true)) : (is_string($k['keyword']) ? strpos($k['keyword'], strval("sequel")) !== false : false))) && ($mi['info'] > "5.0")) && ($t['production_year'] > 2005)) && ($mk['movie_id'] == $mi['movie_id']))); } ]);
})();
$result = [["rating" => min((function() use ($rows) {
	$res = [];
	foreach ((is_string($rows) ? str_split($rows) : $rows) as $r) {
		$res[] = $r['rating'];
	}
	return $res;
})()), "movie_title" => min((function() use ($rows) {
	$res = [];
	foreach ((is_string($rows) ? str_split($rows) : $rows) as $r) {
		$res[] = $r['title'];
	}
	return $res;
})())]];
echo json_encode($result), PHP_EOL;
mochi_test_Q4_returns_minimum_rating_and_title_for_sequels();

function _query($src, $joins, $opts) {
    $items = array_map(fn($v) => [$v], $src);
    foreach ($joins as $j) {
        $joined = [];
        if (!empty($j['right']) && !empty($j['left'])) {
            $matched = array_fill(0, count($j['items']), false);
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $ri => $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $matched[$ri] = true;
                    $joined[] = array_merge($left, [$right]);
                }
                if (!$m) { $joined[] = array_merge($left, [null]); }
            }
            foreach ($j['items'] as $ri => $right) {
                if (!$matched[$ri]) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } elseif (!empty($j['right'])) {
            foreach ($j['items'] as $right) {
                $m = false;
                foreach ($items as $left) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!$m) {
                    $undef = count($items) > 0 ? array_fill(0, count($items[0]), null) : [];
                    $joined[] = array_merge($undef, [$right]);
                }
            }
        } else {
            foreach ($items as $left) {
                $m = false;
                foreach ($j['items'] as $right) {
                    $keep = true;
                    if (isset($j['on'])) { $args = array_merge($left, [$right]); $keep = $j['on'](...$args); }
                    if (!$keep) continue;
                    $m = true; $joined[] = array_merge($left, [$right]);
                }
                if (!empty($j['left']) && !$m) { $joined[] = array_merge($left, [null]); }
            }
        }
        $items = $joined;
    }
    if (isset($opts['where'])) {
        $filtered = [];
        foreach ($items as $r) { if ($opts['where'](...$r)) $filtered[] = $r; }
        $items = $filtered;
    }
    if (isset($opts['sortKey'])) {
        $pairs = [];
        foreach ($items as $it) { $pairs[] = ['item' => $it, 'key' => $opts['sortKey'](...$it)]; }
        usort($pairs, function($a, $b) {
            $ak = $a['key']; $bk = $b['key'];
            if (is_int($ak) && is_int($bk)) return $ak <=> $bk;
            if (is_string($ak) && is_string($bk)) return $ak <=> $bk;
            return strcmp(strval($ak), strval($bk));
        });
        $items = array_map(fn($p) => $p['item'], $pairs);
    }
    if (array_key_exists('skip', $opts)) {
        $n = $opts['skip'];
        $items = $n < count($items) ? array_slice($items, $n) : [];
    }
    if (array_key_exists('take', $opts)) {
        $n = $opts['take'];
        if ($n < count($items)) $items = array_slice($items, 0, $n);
    }
    $res = [];
    foreach ($items as $r) { $res[] = $opts['select'](...$r); }
    return $res;
}
