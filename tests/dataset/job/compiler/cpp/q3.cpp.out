// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _min(const T &v) -> decltype(*std::begin(v)) {
  if (v.size() == 0)
    return {};
  auto it = std::begin(v);
  auto m = *it;
  ++it;
  for (; it != std::end(v); ++it)
    if (*it < m)
      m = *it;
  return m;
}
template <typename T>
auto _min(const T &v)
    -> decltype(v.Items, typename decltype(v.Items)::value_type{}) {
  return _min(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> keyword =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(1)},
              {string("keyword"), any(string("amazing sequel"))}},
          unordered_map<string, any>{
              {string("id"), any(2)},
              {string("keyword"), any(string("prequel"))}}};
  vector<unordered_map<string, any>> movie_info =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("movie_id"), any(10)},
                                     {string("info"), any(string("Germany"))}},
          unordered_map<string, any>{{string("movie_id"), any(30)},
                                     {string("info"), any(string("Sweden"))}},
          unordered_map<string, any>{{string("movie_id"), any(20)},
                                     {string("info"), any(string("France"))}}};
  vector<unordered_map<string, int>> movie_keyword =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("movie_id"), 10},
                                     {string("keyword_id"), 1}},
          unordered_map<string, int>{{string("movie_id"), 30},
                                     {string("keyword_id"), 1}},
          unordered_map<string, int>{{string("movie_id"), 20},
                                     {string("keyword_id"), 1}},
          unordered_map<string, int>{{string("movie_id"), 10},
                                     {string("keyword_id"), 2}}};
  vector<unordered_map<string, any>> title = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(10)},
                                 {string("title"), any(string("Alpha"))},
                                 {string("production_year"), any(2006)}},
      unordered_map<string, any>{{string("id"), any(30)},
                                 {string("title"), any(string("Beta"))},
                                 {string("production_year"), any(2008)}},
      unordered_map<string, any>{{string("id"), any(20)},
                                 {string("title"), any(string("Gamma"))},
                                 {string("production_year"), any(2009)}}};
  vector<string> allowed_infos =
      vector<string>{string("Sweden"),    string("Norway"),  string("Germany"),
                     string("Denmark"),   string("Swedish"), string("Denish"),
                     string("Norwegian"), string("German")};
  auto candidate_titles = ([&]() -> vector<any> {
    vector<any> _res;
    for (auto &k : keyword) {
      for (auto &mk : movie_keyword) {
        if (!(mk.keyword_id == k.id))
          continue;
        for (auto &mi : movie_info) {
          if (!(mi.movie_id == mk.movie_id))
            continue;
          for (auto &t : title) {
            if (!(t.id == mi.movie_id))
              continue;
            if ((find(allowed_infos.begin(), allowed_infos.end(),
                      k.keyword.contains(string("sequel")) && mi.info) !=
                 allowed_infos.end()) &&
                t.production_year > 2005 && mk.movie_id == mi.movie_id) {
              _res.push_back(any(t.title));
            }
          }
        }
      }
    }
    return _res;
  })();
  vector<unordered_map<string, any>> result =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("movie_title"), any(_min(candidate_titles))}}};
  _json(result);
  auto test_Q3_returns_lexicographically_smallest_sequel_title = [&]() {
    if (!(result ==
          vector<unordered_map<string, string>>{unordered_map<string, string>{
              {string("movie_title"), string("Alpha")}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_Q3_returns_lexicographically_smallest_sequel_title();
  return 0;
}
