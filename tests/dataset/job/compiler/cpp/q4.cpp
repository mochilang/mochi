// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:37Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct InfoType {
  decltype(1) id;
  decltype(std::string("rating")) info;
};
struct Keyword {
  decltype(1) id;
  decltype(std::string("great sequel")) keyword;
};
struct Title {
  decltype(10) id;
  decltype(std::string("Alpha Movie")) title;
  decltype(2006) production_year;
};
struct MovieKeyword {
  decltype(10) movie_id;
  decltype(1) keyword_id;
};
struct MovieInfoIdx {
  decltype(10) movie_id;
  decltype(1) info_type_id;
  decltype(std::string("6.2")) info;
};
struct Row {
  decltype(mi.info) rating;
  decltype(t.title) title;
};
struct Result {
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Row>().rating)> __items;
        for (auto r : rows) {
          __items.push_back(r.rating);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Row>().rating)> __items;
        for (auto r : rows) {
          __items.push_back(r.rating);
        }
        return __items;
      })()
          .end()))) rating;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Row>().title)> __items;
        for (auto r : rows) {
          __items.push_back(r.title);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Row>().title)> __items;
        for (auto r : rows) {
          __items.push_back(r.title);
        }
        return __items;
      })()
          .end()))) movie_title;
};
inline void __json(const InfoType &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info\":";
  __json(v.info);
  std::cout << "}";
}
inline void __json(const Keyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword\":";
  __json(v.keyword);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_year\":";
  __json(v.production_year);
  std::cout << "}";
}
inline void __json(const MovieInfoIdx &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info_type_id\":";
  __json(v.info_type_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info\":";
  __json(v.info);
  std::cout << "}";
}
inline void __json(const MovieKeyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword_id\":";
  __json(v.keyword_id);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"rating\":";
  __json(v.rating);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_title\":";
  __json(v.movie_title);
  std::cout << "}";
}
inline void __json(const Row &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"rating\":";
  __json(v.rating);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  std::cout << "}";
}
int main() {
  std::vector<InfoType> info_type = {InfoType{1, std::string("rating")},
                                     InfoType{2, std::string("other")}};
  std::vector<Keyword> keyword = {Keyword{1, std::string("great sequel")},
                                  Keyword{2, std::string("prequel")}};
  std::vector<Title> title = {Title{10, std::string("Alpha Movie"), 2006},
                              Title{20, std::string("Beta Film"), 2007},
                              Title{30, std::string("Old Film"), 2004}};
  std::vector<MovieKeyword> movie_keyword = {
      MovieKeyword{10, 1}, MovieKeyword{20, 1}, MovieKeyword{30, 1}};
  std::vector<MovieInfoIdx> movie_info_idx = {
      MovieInfoIdx{10, 1, std::string("6.2")},
      MovieInfoIdx{20, 1, std::string("7.8")},
      MovieInfoIdx{30, 1, std::string("4.5")}};
  std::vector<Row> rows = ([&]() {
    std::vector<Row> __items;
    for (auto it : info_type) {
      for (auto mi : movie_info_idx) {
        if (!((it.id == mi.info_type_id)))
          continue;
        for (auto t : title) {
          if (!((t.id == mi.movie_id)))
            continue;
          for (auto mk : movie_keyword) {
            if (!((mk.movie_id == t.id)))
              continue;
            for (auto k : keyword) {
              if (!((k.id == mk.keyword_id)))
                continue;
              if (!((((((it.info == std::string("rating")) &&
                        (k.keyword.find(std::string("sequel")) !=
                         std::string::npos)) &&
                       (mi.info > std::string("5.0"))) &&
                      (t.production_year > 2005)) &&
                     (mk.movie_id == mi.movie_id))))
                continue;
              __items.push_back(Row{mi.info, t.title});
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = {
      Result{(*std::min_element(
                 ([&]() {
                   std::vector<decltype(std::declval<Row>().rating)> __items;
                   for (auto r : rows) {
                     __items.push_back(r.rating);
                   }
                   return __items;
                 })()
                     .begin(),
                 ([&]() {
                   std::vector<decltype(std::declval<Row>().rating)> __items;
                   for (auto r : rows) {
                     __items.push_back(r.rating);
                   }
                   return __items;
                 })()
                     .end())),
             (*std::min_element(
                 ([&]() {
                   std::vector<decltype(std::declval<Row>().title)> __items;
                   for (auto r : rows) {
                     __items.push_back(r.title);
                   }
                   return __items;
                 })()
                     .begin(),
                 ([&]() {
                   std::vector<decltype(std::declval<Row>().title)> __items;
                   for (auto r : rows) {
                     __items.push_back(r.title);
                   }
                   return __items;
                 })()
                     .end()))}};
  (__json(result));
  // test Q4 returns minimum rating and title for sequels
  return 0;
}
