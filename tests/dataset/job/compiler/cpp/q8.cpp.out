// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> string _fmtVec(const vector<T> &v) {
  stringstream ss;
  ss << '[';
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      ss << ' ';
    ss << v[i];
  }
  ss << ']';
  return ss.str();
}

template <typename T> auto _min(const T &v) -> decltype(*std::begin(v)) {
  if (v.size() == 0)
    return {};
  auto it = std::begin(v);
  auto m = *it;
  ++it;
  for (; it != std::end(v); ++it)
    if (*it < m)
      m = *it;
  return m;
}
template <typename T>
auto _min(const T &v)
    -> decltype(v.Items, typename decltype(v.Items)::value_type{}) {
  return _min(v.Items);
}

int main() {
  vector<unordered_map<string, any>> aka_name =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("person_id"), any(1)},
                                     {string("name"), any(string("Y. S."))}}};
  vector<unordered_map<string, any>> cast_info =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("person_id"), any(1)},
          {string("movie_id"), any(10)},
          {string("note"), any(string("(voice: English version)"))},
          {string("role_id"), any(1000)}}};
  vector<unordered_map<string, any>> company_name =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("id"), any(50)},
          {string("country_code"), any(string("[jp]"))}}};
  vector<unordered_map<string, any>> movie_companies =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("movie_id"), any(10)},
          {string("company_id"), any(50)},
          {string("note"), any(string("Studio (Japan)"))}}};
  vector<unordered_map<string, any>> name = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(1)},
                                 {string("name"), any(string("Yoko Ono"))}},
      unordered_map<string, any>{{string("id"), any(2)},
                                 {string("name"), any(string("Yuichi"))}}};
  vector<unordered_map<string, any>> role_type =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("id"), any(1000)}, {string("role"), any(string("actress"))}}};
  vector<unordered_map<string, any>> title =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("id"), any(10)},
          {string("title"), any(string("Dubbed Film"))}}};
  auto eligible = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &an1 : aka_name) {
      for (auto &n1 : name) {
        if (!(n1.id == an1.person_id))
          continue;
        for (auto &ci : cast_info) {
          if (!(ci.person_id == an1.person_id))
            continue;
          for (auto &t : title) {
            if (!(t.id == ci.movie_id))
              continue;
            for (auto &mc : movie_companies) {
              if (!(mc.movie_id == ci.movie_id))
                continue;
              for (auto &cn : company_name) {
                if (!(cn.id == mc.company_id))
                  continue;
                for (auto &rt : role_type) {
                  if (!(rt.id == ci.role_id))
                    continue;
                  if (ci.note == string("(voice: English version)") &&
                      cn.country_code == string("[jp]") &&
                      mc.note.contains(string("(Japan)")) &&
                      (!mc.note.contains(string("(USA)"))) &&
                      n1.name.contains(string("Yo")) &&
                      (!n1.name.contains(string("Yu"))) &&
                      rt.role == string("actress")) {
                    _res.push_back(unordered_map<string, any>{
                        {string("pseudonym"), any(an1.name)},
                        {string("movie_title"), any(t.title)}});
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  vector<unordered_map<string, any>> result =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("actress_pseudonym"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : eligible) {
               _res.push_back(any(x.pseudonym));
             }
             return _res;
           })()))},
          {string("japanese_movie_dubbed"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : eligible) {
               _res.push_back(any(x.movie_title));
             }
             return _res;
           })()))}}};
  std::cout << (_fmtVec(result)) << std::endl;
  auto test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing =
      [&]() {
        if (!(result == vector<unordered_map<string, string>>{
                            unordered_map<string, string>{
                                {string("actress_pseudonym"), string("Y. S.")},
                                {string("japanese_movie_dubbed"),
                                 string("Dubbed Film")}}})) {
          std::cerr << "expect failed\n";
          exit(1);
        }
      };
  test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing();
  return 0;
}
