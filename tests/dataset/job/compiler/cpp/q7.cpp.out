// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _min(const T &v) -> decltype(*std::begin(v)) {
  if (v.size() == 0)
    return {};
  auto it = std::begin(v);
  auto m = *it;
  ++it;
  for (; it != std::end(v); ++it)
    if (*it < m)
      m = *it;
  return m;
}
template <typename T>
auto _min(const T &v)
    -> decltype(v.Items, typename decltype(v.Items)::value_type{}) {
  return _min(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> aka_name =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("person_id"), any(1)},
                                     {string("name"), any(string("Anna Mae"))}},
          unordered_map<string, any>{{string("person_id"), any(2)},
                                     {string("name"), any(string("Chris"))}}};
  vector<unordered_map<string, int>> cast_info =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("person_id"), 1},
                                     {string("movie_id"), 10}},
          unordered_map<string, int>{{string("person_id"), 2},
                                     {string("movie_id"), 20}}};
  vector<unordered_map<string, any>> info_type =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(1)},
              {string("info"), any(string("mini biography"))}},
          unordered_map<string, any>{{string("id"), any(2)},
                                     {string("info"), any(string("trivia"))}}};
  vector<unordered_map<string, any>> link_type =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("id"), any(1)},
                                     {string("link"), any(string("features"))}},
          unordered_map<string, any>{
              {string("id"), any(2)},
              {string("link"), any(string("references"))}}};
  vector<unordered_map<string, int>> movie_link =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("linked_movie_id"), 10},
                                     {string("link_type_id"), 1}},
          unordered_map<string, int>{{string("linked_movie_id"), 20},
                                     {string("link_type_id"), 2}}};
  vector<unordered_map<string, any>> name = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(1)},
                                 {string("name"), any(string("Alan Brown"))},
                                 {string("name_pcode_cf"), any(string("B"))},
                                 {string("gender"), any(string("m"))}},
      unordered_map<string, any>{{string("id"), any(2)},
                                 {string("name"), any(string("Zoe"))},
                                 {string("name_pcode_cf"), any(string("Z"))},
                                 {string("gender"), any(string("f"))}}};
  vector<unordered_map<string, any>> person_info =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("person_id"), any(1)},
              {string("info_type_id"), any(1)},
              {string("note"), any(string("Volker Boehm"))}},
          unordered_map<string, any>{{string("person_id"), any(2)},
                                     {string("info_type_id"), any(1)},
                                     {string("note"), any(string("Other"))}}};
  vector<unordered_map<string, any>> title = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(10)},
                                 {string("title"), any(string("Feature Film"))},
                                 {string("production_year"), any(1990)}},
      unordered_map<string, any>{{string("id"), any(20)},
                                 {string("title"), any(string("Late Film"))},
                                 {string("production_year"), any(2000)}}};
  auto rows = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &an : aka_name) {
      for (auto &n : name) {
        if (!(n.id == an.person_id))
          continue;
        for (auto &pi : person_info) {
          if (!(pi.person_id == an.person_id))
            continue;
          for (auto &it : info_type) {
            if (!(it.id == pi.info_type_id))
              continue;
            for (auto &ci : cast_info) {
              if (!(ci.person_id == n.id))
                continue;
              for (auto &t : title) {
                if (!(t.id == ci.movie_id))
                  continue;
                for (auto &ml : movie_link) {
                  if (!(ml.linked_movie_id == t.id))
                    continue;
                  for (auto &lt : link_type) {
                    if (!(lt.id == ml.link_type_id))
                      continue;
                    if ((an.name.contains(string("a")) &&
                         it.info == string("mini biography") &&
                         lt.link == string("features") &&
                         n.name_pcode_cf >= string("A") &&
                         n.name_pcode_cf <= string("F") &&
                         (n.gender == string("m") ||
                          (n.gender == string("f") &&
                           n.name.starts_with(string("B")))) &&
                         pi.note == string("Volker Boehm") &&
                         t.production_year >= 1980 &&
                         t.production_year <= 1995 &&
                         pi.person_id == an.person_id &&
                         pi.person_id == ci.person_id &&
                         an.person_id == ci.person_id &&
                         ci.movie_id == ml.linked_movie_id)) {
                      _res.push_back(unordered_map<string, any>{
                          {string("person_name"), any(n.name)},
                          {string("movie_title"), any(t.title)}});
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  vector<unordered_map<string, any>> result =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("of_person"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &r : rows) {
               _res.push_back(any(r.person_name));
             }
             return _res;
           })()))},
          {string("biography_movie"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &r : rows) {
               _res.push_back(any(r.movie_title));
             }
             return _res;
           })()))}}};
  _json(result);
  auto test_Q7_finds_movie_features_biography_for_person = [&]() {
    if (!(result ==
          vector<unordered_map<string, string>>{unordered_map<string, string>{
              {string("of_person"), string("Alan Brown")},
              {string("biography_movie"), string("Feature Film")}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_Q7_finds_movie_features_biography_for_person();
  return 0;
}
