// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:42Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct AkaName {
  decltype(1) person_id;
  decltype(std::string("A. N. G.")) name;
};
struct CharName {
  decltype(10) id;
  decltype(std::string("Angel")) name;
};
struct CastInfo {
  decltype(1) person_id;
  decltype(10) person_role_id;
  decltype(100) movie_id;
  decltype(1000) role_id;
  decltype(std::string("(voice)")) note;
};
struct CompanyName {
  decltype(100) id;
  decltype(std::string("[us]")) country_code;
};
struct MovieCompany {
  decltype(100) movie_id;
  decltype(100) company_id;
  decltype(std::string("ACME Studios (USA)")) note;
};
struct Name {
  decltype(1) id;
  decltype(std::string("Angela Smith")) name;
  decltype(std::string("f")) gender;
};
struct RoleType {
  decltype(1000) id;
  decltype(std::string("actress")) role;
};
struct Title {
  decltype(100) id;
  decltype(std::string("Famous Film")) title;
  decltype(2010) production_year;
};
struct Matche {
  decltype(an.name) alt;
  decltype(chn.name) character;
  decltype(t.title) movie;
};
struct Result {
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Matche>().alt)> __items;
        for (auto x : matches) {
          __items.push_back(x.alt);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Matche>().alt)> __items;
        for (auto x : matches) {
          __items.push_back(x.alt);
        }
        return __items;
      })()
          .end()))) alternative_name;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Matche>().character)> __items;
        for (auto x : matches) {
          __items.push_back(x.character);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Matche>().character)> __items;
        for (auto x : matches) {
          __items.push_back(x.character);
        }
        return __items;
      })()
          .end()))) character_name;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Matche>().movie)> __items;
        for (auto x : matches) {
          __items.push_back(x.movie);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Matche>().movie)> __items;
        for (auto x : matches) {
          __items.push_back(x.movie);
        }
        return __items;
      })()
          .end()))) movie;
};
inline void __json(const Matche &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"alt\":";
  __json(v.alt);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"character\":";
  __json(v.character);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie\":";
  __json(v.movie);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"alternative_name\":";
  __json(v.alternative_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"character_name\":";
  __json(v.character_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie\":";
  __json(v.movie);
  std::cout << "}";
}
inline void __json(const CompanyName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"country_code\":";
  __json(v.country_code);
  std::cout << "}";
}
inline void __json(const CharName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  std::cout << "}";
}
inline void __json(const Name &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"gender\":";
  __json(v.gender);
  std::cout << "}";
}
inline void __json(const RoleType &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"role\":";
  __json(v.role);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_year\":";
  __json(v.production_year);
  std::cout << "}";
}
inline void __json(const MovieCompany &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"company_id\":";
  __json(v.company_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"note\":";
  __json(v.note);
  std::cout << "}";
}
inline void __json(const AkaName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"person_id\":";
  __json(v.person_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  std::cout << "}";
}
inline void __json(const CastInfo &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"person_id\":";
  __json(v.person_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"person_role_id\":";
  __json(v.person_role_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"role_id\":";
  __json(v.role_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"note\":";
  __json(v.note);
  std::cout << "}";
}
int main() {
  std::vector<AkaName> aka_name = {AkaName{1, std::string("A. N. G.")},
                                   AkaName{2, std::string("J. D.")}};
  std::vector<CharName> char_name = {CharName{10, std::string("Angel")},
                                     CharName{20, std::string("Devil")}};
  std::vector<CastInfo> cast_info = {
      CastInfo{1, 10, 100, 1000, std::string("(voice)")},
      CastInfo{2, 20, 200, 1000, std::string("(voice)")}};
  std::vector<CompanyName> company_name = {
      CompanyName{100, std::string("[us]")},
      CompanyName{200, std::string("[gb]")}};
  std::vector<MovieCompany> movie_companies = {
      MovieCompany{100, 100, std::string("ACME Studios (USA)")},
      MovieCompany{200, 200, std::string("Maple Films")}};
  std::vector<Name> name = {
      Name{1, std::string("Angela Smith"), std::string("f")},
      Name{2, std::string("John Doe"), std::string("m")}};
  std::vector<RoleType> role_type = {RoleType{1000, std::string("actress")},
                                     RoleType{2000, std::string("actor")}};
  std::vector<Title> title = {Title{100, std::string("Famous Film"), 2010},
                              Title{200, std::string("Old Movie"), 1999}};
  std::vector<Matche> matches = ([&]() {
    std::vector<Matche> __items;
    for (auto an : aka_name) {
      for (auto n : name) {
        if (!((an.person_id == n.id)))
          continue;
        for (auto ci : cast_info) {
          if (!((ci.person_id == n.id)))
            continue;
          for (auto chn : char_name) {
            if (!((chn.id == ci.person_role_id)))
              continue;
            for (auto t : title) {
              if (!((t.id == ci.movie_id)))
                continue;
              for (auto mc : movie_companies) {
                if (!((mc.movie_id == t.id)))
                  continue;
                for (auto cn : company_name) {
                  if (!((cn.id == mc.company_id)))
                    continue;
                  for (auto rt : role_type) {
                    if (!((rt.id == ci.role_id)))
                      continue;
                    if (!((((((((((std::find(
                                       std::vector<std::string>{
                                           std::string("(voice)"),
                                           std::string(
                                               "(voice: Japanese version)"),
                                           std::string("(voice) (uncredited)"),
                                           std::string(
                                               "(voice: English version)")}
                                           .begin(),
                                       std::vector<std::string>{
                                           std::string("(voice)"),
                                           std::string(
                                               "(voice: Japanese version)"),
                                           std::string("(voice) (uncredited)"),
                                           std::string(
                                               "(voice: English version)")}
                                           .end(),
                                       ci.note) !=
                                   std::vector<std::string>{
                                       std::string("(voice)"),
                                       std::string("(voice: Japanese version)"),
                                       std::string("(voice) (uncredited)"),
                                       std::string("(voice: English version)")}
                                       .end())) &&
                                 (cn.country_code == std::string("[us]"))) &&
                                (((mc.note.find(std::string("(USA)")) !=
                                   std::string::npos) ||
                                  (mc.note.find(std::string("(worldwide)")) !=
                                   std::string::npos)))) &&
                               (n.gender == std::string("f"))) &&
                              (n.name.find(std::string("Ang")) !=
                               std::string::npos)) &&
                             (rt.role == std::string("actress"))) &&
                            (t.production_year >= 2005)) &&
                           (t.production_year <= 2015))))
                      continue;
                    __items.push_back(Matche{an.name, chn.name, t.title});
                  }
                }
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = {Result{
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Matche>().alt)> __items;
            for (auto x : matches) {
              __items.push_back(x.alt);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Matche>().alt)> __items;
            for (auto x : matches) {
              __items.push_back(x.alt);
            }
            return __items;
          })()
              .end())),
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Matche>().character)> __items;
            for (auto x : matches) {
              __items.push_back(x.character);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Matche>().character)> __items;
            for (auto x : matches) {
              __items.push_back(x.character);
            }
            return __items;
          })()
              .end())),
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Matche>().movie)> __items;
            for (auto x : matches) {
              __items.push_back(x.movie);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Matche>().movie)> __items;
            for (auto x : matches) {
              __items.push_back(x.movie);
            }
            return __items;
          })()
              .end()))}};
  (__json(result));
  // test Q9 selects minimal alternative name, character and movie
  return 0;
}
