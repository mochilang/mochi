// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _min(const T &v) -> decltype(*std::begin(v)) {
  if (v.size() == 0)
    return {};
  auto it = std::begin(v);
  auto m = *it;
  ++it;
  for (; it != std::end(v); ++it)
    if (*it < m)
      m = *it;
  return m;
}
template <typename T>
auto _min(const T &v)
    -> decltype(v.Items, typename decltype(v.Items)::value_type{}) {
  return _min(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> aka_name =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("person_id"), any(1)},
                                     {string("name"), any(string("A. N. G."))}},
          unordered_map<string, any>{{string("person_id"), any(2)},
                                     {string("name"), any(string("J. D."))}}};
  vector<unordered_map<string, any>> char_name =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("id"), any(10)},
                                     {string("name"), any(string("Angel"))}},
          unordered_map<string, any>{{string("id"), any(20)},
                                     {string("name"), any(string("Devil"))}}};
  vector<unordered_map<string, any>> cast_info =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("person_id"), any(1)},
                                     {string("person_role_id"), any(10)},
                                     {string("movie_id"), any(100)},
                                     {string("role_id"), any(1000)},
                                     {string("note"), any(string("(voice)"))}},
          unordered_map<string, any>{{string("person_id"), any(2)},
                                     {string("person_role_id"), any(20)},
                                     {string("movie_id"), any(200)},
                                     {string("role_id"), any(1000)},
                                     {string("note"), any(string("(voice)"))}}};
  vector<unordered_map<string, any>> company_name =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(100)},
              {string("country_code"), any(string("[us]"))}},
          unordered_map<string, any>{
              {string("id"), any(200)},
              {string("country_code"), any(string("[gb]"))}}};
  vector<unordered_map<string, any>> movie_companies =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("movie_id"), any(100)},
              {string("company_id"), any(100)},
              {string("note"), any(string("ACME Studios (USA)"))}},
          unordered_map<string, any>{
              {string("movie_id"), any(200)},
              {string("company_id"), any(200)},
              {string("note"), any(string("Maple Films"))}}};
  vector<unordered_map<string, any>> name = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(1)},
                                 {string("name"), any(string("Angela Smith"))},
                                 {string("gender"), any(string("f"))}},
      unordered_map<string, any>{{string("id"), any(2)},
                                 {string("name"), any(string("John Doe"))},
                                 {string("gender"), any(string("m"))}}};
  vector<unordered_map<string, any>> role_type =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{{string("id"), any(1000)},
                                     {string("role"), any(string("actress"))}},
          unordered_map<string, any>{{string("id"), any(2000)},
                                     {string("role"), any(string("actor"))}}};
  vector<unordered_map<string, any>> title = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(100)},
                                 {string("title"), any(string("Famous Film"))},
                                 {string("production_year"), any(2010)}},
      unordered_map<string, any>{{string("id"), any(200)},
                                 {string("title"), any(string("Old Movie"))},
                                 {string("production_year"), any(1999)}}};
  auto matches = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &an : aka_name) {
      for (auto &n : name) {
        if (!(an.person_id == n.id))
          continue;
        for (auto &ci : cast_info) {
          if (!(ci.person_id == n.id))
            continue;
          for (auto &chn : char_name) {
            if (!(chn.id == ci.person_role_id))
              continue;
            for (auto &t : title) {
              if (!(t.id == ci.movie_id))
                continue;
              for (auto &mc : movie_companies) {
                if (!(mc.movie_id == t.id))
                  continue;
                for (auto &cn : company_name) {
                  if (!(cn.id == mc.company_id))
                    continue;
                  for (auto &rt : role_type) {
                    if (!(rt.id == ci.role_id))
                      continue;
                    if (((find(
                              vector<string>{
                                  string("(voice)"),
                                  string("(voice: Japanese version)"),
                                  string("(voice) (uncredited)"),
                                  string("(voice: English version)")}
                                  .begin(),
                              vector<string>{
                                  string("(voice)"),
                                  string("(voice: Japanese version)"),
                                  string("(voice) (uncredited)"),
                                  string("(voice: English version)")}
                                  .end(),
                              ci.note) !=
                          vector<string>{string("(voice)"),
                                         string("(voice: Japanese version)"),
                                         string("(voice) (uncredited)"),
                                         string("(voice: English version)")}
                              .end())) &&
                        cn.country_code == string("[us]") &&
                        (mc.note.contains(string("(USA)")) ||
                         mc.note.contains(string("(worldwide)"))) &&
                        n.gender == string("f") &&
                        n.name.contains(string("Ang")) &&
                        rt.role == string("actress") &&
                        t.production_year >= 2005 &&
                        t.production_year <= 2015) {
                      _res.push_back(unordered_map<string, any>{
                          {string("alt"), any(an.name)},
                          {string("character"), any(chn.name)},
                          {string("movie"), any(t.title)}});
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  vector<unordered_map<string, any>> result =
      vector<unordered_map<string, any>>{unordered_map<string, any>{
          {string("alternative_name"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : matches) {
               _res.push_back(any(x.alt));
             }
             return _res;
           })()))},
          {string("character_name"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : matches) {
               _res.push_back(any(x.character));
             }
             return _res;
           })()))},
          {string("movie"), any(_min(([&]() -> vector<any> {
             vector<any> _res;
             for (auto &x : matches) {
               _res.push_back(any(x.movie));
             }
             return _res;
           })()))}}};
  _json(result);
  auto test_Q9_selects_minimal_alternative_name__character_and_movie = [&]() {
    if (!(result ==
          vector<unordered_map<string, string>>{unordered_map<string, string>{
              {string("alternative_name"), string("A. N. G.")},
              {string("character_name"), string("Angel")},
              {string("movie"), string("Famous Film")}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_Q9_selects_minimal_alternative_name__character_and_movie();
  return 0;
}
