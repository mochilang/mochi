// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, int>> cast_info =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("movie_id"), 1},
                                     {string("person_id"), 101}},
          unordered_map<string, int>{{string("movie_id"), 2},
                                     {string("person_id"), 102}}};
  vector<unordered_map<string, any>> keyword =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(100)},
              {string("keyword"), any(string("marvel-cinematic-universe"))}},
          unordered_map<string, any>{
              {string("id"), any(200)},
              {string("keyword"), any(string("other"))}}};
  vector<unordered_map<string, int>> movie_keyword =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("movie_id"), 1},
                                     {string("keyword_id"), 100}},
          unordered_map<string, int>{{string("movie_id"), 2},
                                     {string("keyword_id"), 200}}};
  vector<unordered_map<string, any>> name = vector<unordered_map<string, any>>{
      unordered_map<string, any>{
          {string("id"), any(101)},
          {string("name"), any(string("Downey Robert Jr."))}},
      unordered_map<string, any>{{string("id"), any(102)},
                                 {string("name"), any(string("Chris Evans"))}}};
  vector<unordered_map<string, any>> title = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(1)},
                                 {string("title"), any(string("Iron Man 3"))},
                                 {string("production_year"), any(2013)}},
      unordered_map<string, any>{{string("id"), any(2)},
                                 {string("title"), any(string("Old Movie"))},
                                 {string("production_year"), any(2000)}}};
  auto result =
      ([&]() -> vector<unordered_map<vector<unordered_map<string, int>>, any>> {
        vector<unordered_map<vector<unordered_map<string, int>>, any>> _res;
        for (auto &ci : cast_info) {
          for (auto &mk : movie_keyword) {
            if (!(ci.movie_id == mk.movie_id))
              continue;
            for (auto &k : keyword) {
              if (!(mk.keyword_id == k.id))
                continue;
              for (auto &n : name) {
                if (!(ci.person_id == n.id))
                  continue;
                for (auto &t : title) {
                  if (!(ci.movie_id == t.id))
                    continue;
                  if (k.keyword == string("marvel-cinematic-universe") &&
                      n.name.contains(string("Downey")) &&
                      n.name.contains(string("Robert")) &&
                      t.production_year > 2010) {
                    _res.push_back(
                        unordered_map<vector<unordered_map<string, int>>, any>{
                            {string("movie_keyword"), any(k.keyword)},
                            {string("actor_name"), any(n.name)},
                            {string("marvel_movie"), any(t.title)}});
                  }
                }
              }
            }
          }
        }
        return _res;
      })();
  _json(result);
  auto test_Q6_finds_marvel_movie_with_Robert_Downey = [&]() {
    if (!(result ==
          vector<unordered_map<vector<unordered_map<string, int>>, string>>{
              unordered_map<vector<unordered_map<string, int>>, string>{
                  {string("movie_keyword"),
                   string("marvel-cinematic-universe")},
                  {string("actor_name"), string("Downey Robert Jr.")},
                  {string("marvel_movie"), string("Iron Man 3")}}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_Q6_finds_marvel_movie_with_Robert_Downey();
  return 0;
}
