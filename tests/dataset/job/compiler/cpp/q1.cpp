// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:35Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CompanyType {
  decltype(1) id;
  decltype(std::string("production companies")) kind;
};
struct InfoType {
  decltype(10) id;
  decltype(std::string("top 250 rank")) info;
};
struct Title {
  decltype(100) id;
  decltype(std::string("Good Movie")) title;
  decltype(1995) production_year;
};
struct MovieCompany {
  decltype(100) movie_id;
  decltype(1) company_type_id;
  decltype(std::string("ACME (co-production)")) note;
};
struct MovieInfoIdx {
  decltype(100) movie_id;
  decltype(10) info_type_id;
};
struct Filtered {
  decltype(mc.note) note;
  decltype(t.title) title;
  decltype(t.production_year) year;
};
struct Result {
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().note)> __items;
        for (auto r : filtered) {
          __items.push_back(r.note);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().note)> __items;
        for (auto r : filtered) {
          __items.push_back(r.note);
        }
        return __items;
      })()
          .end()))) production_note;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().title)> __items;
        for (auto r : filtered) {
          __items.push_back(r.title);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().title)> __items;
        for (auto r : filtered) {
          __items.push_back(r.title);
        }
        return __items;
      })()
          .end()))) movie_title;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().year)> __items;
        for (auto r : filtered) {
          __items.push_back(r.year);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Filtered>().year)> __items;
        for (auto r : filtered) {
          __items.push_back(r.year);
        }
        return __items;
      })()
          .end()))) movie_year;
};
inline void __json(const InfoType &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info\":";
  __json(v.info);
  std::cout << "}";
}
inline void __json(const CompanyType &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"kind\":";
  __json(v.kind);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_year\":";
  __json(v.production_year);
  std::cout << "}";
}
inline void __json(const MovieCompany &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"company_type_id\":";
  __json(v.company_type_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"note\":";
  __json(v.note);
  std::cout << "}";
}
inline void __json(const MovieInfoIdx &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info_type_id\":";
  __json(v.info_type_id);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"note\":";
  __json(v.note);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"year\":";
  __json(v.year);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_note\":";
  __json(v.production_note);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_title\":";
  __json(v.movie_title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_year\":";
  __json(v.movie_year);
  std::cout << "}";
}
int main() {
  std::vector<CompanyType> company_type = {
      CompanyType{1, std::string("production companies")},
      CompanyType{2, std::string("distributors")}};
  std::vector<InfoType> info_type = {
      InfoType{10, std::string("top 250 rank")},
      InfoType{20, std::string("bottom 10 rank")}};
  std::vector<Title> title = {Title{100, std::string("Good Movie"), 1995},
                              Title{200, std::string("Bad Movie"), 2000}};
  std::vector<MovieCompany> movie_companies = {
      MovieCompany{100, 1, std::string("ACME (co-production)")},
      MovieCompany{200, 1,
                   std::string("MGM (as Metro-Goldwyn-Mayer Pictures)")}};
  std::vector<MovieInfoIdx> movie_info_idx = {MovieInfoIdx{100, 10},
                                              MovieInfoIdx{200, 20}};
  std::vector<Filtered> filtered = ([&]() {
    std::vector<Filtered> __items;
    for (auto ct : company_type) {
      for (auto mc : movie_companies) {
        if (!((ct.id == mc.company_type_id)))
          continue;
        for (auto t : title) {
          if (!((t.id == mc.movie_id)))
            continue;
          for (auto mi : movie_info_idx) {
            if (!((mi.movie_id == t.id)))
              continue;
            for (auto it : info_type) {
              if (!((it.id == mi.info_type_id)))
                continue;
              if (!(((((ct.kind == std::string("production companies")) &&
                       (it.info == std::string("top 250 rank"))) &&
                      ((!(mc.note.find(std::string(
                              "(as Metro-Goldwyn-Mayer Pictures)")) !=
                          std::string::npos)))) &&
                     (((mc.note.find(std::string("(co-production)")) !=
                        std::string::npos) ||
                       (mc.note.find(std::string("(presents)")) !=
                        std::string::npos))))))
                continue;
              __items.push_back(Filtered{mc.note, t.title, t.production_year});
            }
          }
        }
      }
    }
    return __items;
  })();
  auto result = Result{
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().note)> __items;
            for (auto r : filtered) {
              __items.push_back(r.note);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().note)> __items;
            for (auto r : filtered) {
              __items.push_back(r.note);
            }
            return __items;
          })()
              .end())),
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().title)> __items;
            for (auto r : filtered) {
              __items.push_back(r.title);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().title)> __items;
            for (auto r : filtered) {
              __items.push_back(r.title);
            }
            return __items;
          })()
              .end())),
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().year)> __items;
            for (auto r : filtered) {
              __items.push_back(r.year);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Filtered>().year)> __items;
            for (auto r : filtered) {
              __items.push_back(r.year);
            }
            return __items;
          })()
              .end()))};
  (__json(std::vector<decltype(result)>{result}));
  // test Q1 returns min note, title and year for top ranked co-production
  return 0;
}
