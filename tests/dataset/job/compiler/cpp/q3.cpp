// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:36Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Keyword {
  decltype(1) id;
  decltype(std::string("amazing sequel")) keyword;
};
struct MovieInfo {
  decltype(10) movie_id;
  decltype(std::string("Germany")) info;
};
struct MovieKeyword {
  decltype(10) movie_id;
  decltype(1) keyword_id;
};
struct Title {
  decltype(10) id;
  decltype(std::string("Alpha")) title;
  decltype(2006) production_year;
};
inline void __json(const Keyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword\":";
  __json(v.keyword);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_year\":";
  __json(v.production_year);
  std::cout << "}";
}
inline void __json(const MovieInfo &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"info\":";
  __json(v.info);
  std::cout << "}";
}
inline void __json(const MovieKeyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword_id\":";
  __json(v.keyword_id);
  std::cout << "}";
}
int main() {
  std::vector<Keyword> keyword = {Keyword{1, std::string("amazing sequel")},
                                  Keyword{2, std::string("prequel")}};
  std::vector<MovieInfo> movie_info = {MovieInfo{10, std::string("Germany")},
                                       MovieInfo{30, std::string("Sweden")},
                                       MovieInfo{20, std::string("France")}};
  std::vector<MovieKeyword> movie_keyword = {
      MovieKeyword{10, 1}, MovieKeyword{30, 1}, MovieKeyword{20, 1},
      MovieKeyword{10, 2}};
  std::vector<Title> title = {Title{10, std::string("Alpha"), 2006},
                              Title{30, std::string("Beta"), 2008},
                              Title{20, std::string("Gamma"), 2009}};
  std::vector<std::string> allowed_infos = {
      std::string("Sweden"),    std::string("Norway"),  std::string("Germany"),
      std::string("Denmark"),   std::string("Swedish"), std::string("Denish"),
      std::string("Norwegian"), std::string("German")};
  auto candidate_titles = ([&]() {
    std::vector<decltype(t.title)> __items;
    for (auto k : keyword) {
      for (auto mk : movie_keyword) {
        if (!((mk.keyword_id == k.id)))
          continue;
        for (auto mi : movie_info) {
          if (!((mi.movie_id == mk.movie_id)))
            continue;
          for (auto t : title) {
            if (!((t.id == mi.movie_id)))
              continue;
            if (!(((((k.keyword.find(std::string("sequel")) !=
                      std::string::npos) &&
                     (std::find(allowed_infos.begin(), allowed_infos.end(),
                                mi.info) != allowed_infos.end())) &&
                    (t.production_year > 2005)) &&
                   (mk.movie_id == mi.movie_id))))
              continue;
            __items.push_back(t.title);
          }
        }
      }
    }
    return __items;
  })();
  std::vector<std::string> result = std::vector<
      decltype(std::unordered_map<std::string, decltype((*std::min_element(
                                                   candidate_titles.begin(),
                                                   candidate_titles.end())))>{
          {std::string("movie_title"),
           (*std::min_element(candidate_titles.begin(),
                              candidate_titles.end()))}})>{
      std::unordered_map<std::string,
                         decltype((*std::min_element(candidate_titles.begin(),
                                                     candidate_titles.end())))>{
          {std::string("movie_title"),
           (*std::min_element(candidate_titles.begin(),
                              candidate_titles.end()))}}};
  (__json(result));
  // test Q3 returns lexicographically smallest sequel title
  return 0;
}
