// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:43Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CharName {
  decltype(1) id;
  decltype(std::string("Ivan")) name;
};
struct CastInfo {
  decltype(10) movie_id;
  decltype(1) person_role_id;
  decltype(1) role_id;
  decltype(std::string("Soldier (voice) (uncredited)")) note;
};
struct CompanyName {
  decltype(1) id;
  decltype(std::string("[ru]")) country_code;
};
struct MovieCompany {
  decltype(10) movie_id;
  decltype(1) company_id;
  decltype(1) company_type_id;
};
struct RoleType {
  decltype(1) id;
  decltype(std::string("actor")) role;
};
struct Title {
  decltype(10) id;
  decltype(std::string("Vodka Dreams")) title;
  decltype(2006) production_year;
};
struct Matche {
  decltype(chn.name) character;
  decltype(t.title) movie;
};
struct Result {
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Matche>().character)> __items;
        for (auto x : matches) {
          __items.push_back(x.character);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Matche>().character)> __items;
        for (auto x : matches) {
          __items.push_back(x.character);
        }
        return __items;
      })()
          .end()))) uncredited_voiced_character;
  decltype((*std::min_element(
      ([&]() {
        std::vector<decltype(std::declval<Matche>().movie)> __items;
        for (auto x : matches) {
          __items.push_back(x.movie);
        }
        return __items;
      })()
          .begin(),
      ([&]() {
        std::vector<decltype(std::declval<Matche>().movie)> __items;
        for (auto x : matches) {
          __items.push_back(x.movie);
        }
        return __items;
      })()
          .end()))) russian_movie;
};
inline void __json(const Matche &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"character\":";
  __json(v.character);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie\":";
  __json(v.movie);
  std::cout << "}";
}
inline void __json(const CompanyName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"country_code\":";
  __json(v.country_code);
  std::cout << "}";
}
inline void __json(const CharName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  std::cout << "}";
}
inline void __json(const RoleType &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"role\":";
  __json(v.role);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"production_year\":";
  __json(v.production_year);
  std::cout << "}";
}
inline void __json(const MovieCompany &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"company_id\":";
  __json(v.company_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"company_type_id\":";
  __json(v.company_type_id);
  std::cout << "}";
}
inline void __json(const CastInfo &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"person_role_id\":";
  __json(v.person_role_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"role_id\":";
  __json(v.role_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"note\":";
  __json(v.note);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"uncredited_voiced_character\":";
  __json(v.uncredited_voiced_character);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"russian_movie\":";
  __json(v.russian_movie);
  std::cout << "}";
}
int main() {
  std::vector<CharName> char_name = {CharName{1, std::string("Ivan")},
                                     CharName{2, std::string("Alex")}};
  std::vector<CastInfo> cast_info = {
      CastInfo{10, 1, 1, std::string("Soldier (voice) (uncredited)")},
      CastInfo{11, 2, 1, std::string("(voice)")}};
  std::vector<CompanyName> company_name = {CompanyName{1, std::string("[ru]")},
                                           CompanyName{2, std::string("[us]")}};
  std::vector<std::string> company_type =
      std::vector<decltype(std::unordered_map<std::string, decltype(1)>{
          {std::string("id"), 1}})>{
          std::unordered_map<std::string, decltype(1)>{{std::string("id"), 1}},
          std::unordered_map<std::string, decltype(2)>{{std::string("id"), 2}}};
  std::vector<MovieCompany> movie_companies = {MovieCompany{10, 1, 1},
                                               MovieCompany{11, 2, 1}};
  std::vector<RoleType> role_type = {RoleType{1, std::string("actor")},
                                     RoleType{2, std::string("director")}};
  std::vector<Title> title = {Title{10, std::string("Vodka Dreams"), 2006},
                              Title{11, std::string("Other Film"), 2004}};
  std::vector<Matche> matches = ([&]() {
    std::vector<Matche> __items;
    for (auto chn : char_name) {
      for (auto ci : cast_info) {
        if (!((chn.id == ci.person_role_id)))
          continue;
        for (auto rt : role_type) {
          if (!((rt.id == ci.role_id)))
            continue;
          for (auto t : title) {
            if (!((t.id == ci.movie_id)))
              continue;
            for (auto mc : movie_companies) {
              if (!((mc.movie_id == t.id)))
                continue;
              for (auto cn : company_name) {
                if (!((cn.id == mc.company_id)))
                  continue;
                for (auto ct : company_type) {
                  if (!((ct.id == mc.company_type_id)))
                    continue;
                  if (!((((((ci.note.find(std::string("(voice)")) !=
                             std::string::npos) &&
                            (ci.note.find(std::string("(uncredited)")) !=
                             std::string::npos)) &&
                           (cn.country_code == std::string("[ru]"))) &&
                          (rt.role == std::string("actor"))) &&
                         (t.production_year > 2005))))
                    continue;
                  __items.push_back(Matche{chn.name, t.title});
                }
              }
            }
          }
        }
      }
    }
    return __items;
  })();
  std::vector<Result> result = {Result{
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Matche>().character)> __items;
            for (auto x : matches) {
              __items.push_back(x.character);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Matche>().character)> __items;
            for (auto x : matches) {
              __items.push_back(x.character);
            }
            return __items;
          })()
              .end())),
      (*std::min_element(
          ([&]() {
            std::vector<decltype(std::declval<Matche>().movie)> __items;
            for (auto x : matches) {
              __items.push_back(x.movie);
            }
            return __items;
          })()
              .begin(),
          ([&]() {
            std::vector<decltype(std::declval<Matche>().movie)> __items;
            for (auto x : matches) {
              __items.push_back(x.movie);
            }
            return __items;
          })()
              .end()))}};
  (__json(result));
  // test Q10 finds uncredited voice actor in Russian movie
  return 0;
}
