// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> auto _min(const T &v) -> decltype(*std::begin(v)) {
  if (v.size() == 0)
    return {};
  auto it = std::begin(v);
  auto m = *it;
  ++it;
  for (; it != std::end(v); ++it)
    if (*it < m)
      m = *it;
  return m;
}
template <typename T>
auto _min(const T &v)
    -> decltype(v.Items, typename decltype(v.Items)::value_type{}) {
  return _min(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

int main() {
  vector<unordered_map<string, any>> company_type =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(1)},
              {string("kind"), any(string("production companies"))}},
          unordered_map<string, any>{
              {string("id"), any(2)},
              {string("kind"), any(string("distributors"))}}};
  vector<unordered_map<string, any>> info_type =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("id"), any(10)},
              {string("info"), any(string("top 250 rank"))}},
          unordered_map<string, any>{
              {string("id"), any(20)},
              {string("info"), any(string("bottom 10 rank"))}}};
  vector<unordered_map<string, any>> title = vector<unordered_map<string, any>>{
      unordered_map<string, any>{{string("id"), any(100)},
                                 {string("title"), any(string("Good Movie"))},
                                 {string("production_year"), any(1995)}},
      unordered_map<string, any>{{string("id"), any(200)},
                                 {string("title"), any(string("Bad Movie"))},
                                 {string("production_year"), any(2000)}}};
  vector<unordered_map<string, any>> movie_companies =
      vector<unordered_map<string, any>>{
          unordered_map<string, any>{
              {string("movie_id"), any(100)},
              {string("company_type_id"), any(1)},
              {string("note"), any(string("ACME (co-production)"))}},
          unordered_map<string, any>{
              {string("movie_id"), any(200)},
              {string("company_type_id"), any(1)},
              {string("note"),
               any(string("MGM (as Metro-Goldwyn-Mayer Pictures)"))}}};
  vector<unordered_map<string, int>> movie_info_idx =
      vector<unordered_map<string, int>>{
          unordered_map<string, int>{{string("movie_id"), 100},
                                     {string("info_type_id"), 10}},
          unordered_map<string, int>{{string("movie_id"), 200},
                                     {string("info_type_id"), 20}}};
  auto filtered = ([&]() -> vector<unordered_map<string, any>> {
    vector<unordered_map<string, any>> _res;
    for (auto &ct : company_type) {
      for (auto &mc : movie_companies) {
        if (!(ct.id == mc.company_type_id))
          continue;
        for (auto &t : title) {
          if (!(t.id == mc.movie_id))
            continue;
          for (auto &mi : movie_info_idx) {
            if (!(mi.movie_id == t.id))
              continue;
            for (auto &it : info_type) {
              if (!(it.id == mi.info_type_id))
                continue;
              if (ct.kind == string("production companies") &&
                  it.info == string("top 250 rank") &&
                  (!mc.note.contains(
                      string("(as Metro-Goldwyn-Mayer Pictures)"))) &&
                  (mc.note.contains(string("(co-production)")) ||
                   mc.note.contains(string("(presents)")))) {
                _res.push_back(unordered_map<string, any>{
                    {string("note"), any(mc.note)},
                    {string("title"), any(t.title)},
                    {string("year"), any(t.production_year)}});
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  unordered_map<string, any> result = unordered_map<string, any>{
      {string("production_note"), any(_min(([&]() -> vector<any> {
         vector<any> _res;
         for (auto &r : filtered) {
           _res.push_back(any(r.note));
         }
         return _res;
       })()))},
      {string("movie_title"), any(_min(([&]() -> vector<any> {
         vector<any> _res;
         for (auto &r : filtered) {
           _res.push_back(any(r.title));
         }
         return _res;
       })()))},
      {string("movie_year"), any(_min(([&]() -> vector<any> {
         vector<any> _res;
         for (auto &r : filtered) {
           _res.push_back(any(r.year));
         }
         return _res;
       })()))}};
  _json(vector<unordered_map<string, any>>{result});
  auto test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production =
      [&]() {
        if (!(result == unordered_map<string, any>{
                            {string("production_note"),
                             any(string("ACME (co-production)"))},
                            {string("movie_title"), any(string("Good Movie"))},
                            {string("movie_year"), any(1995)}})) {
          std::cerr << "expect failed\n";
          exit(1);
        }
      };
  test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production();
  return 0;
}
