// Generated by Mochi compiler v0.10.25 on 2025-07-13T13:01:36Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct CompanyName {
  decltype(1) id;
  decltype(std::string("[de]")) country_code;
};
struct Keyword {
  decltype(1) id;
  decltype(std::string("character-name-in-title")) keyword;
};
struct MovieCompany {
  decltype(100) movie_id;
  decltype(1) company_id;
};
struct MovieKeyword {
  decltype(100) movie_id;
  decltype(1) keyword_id;
};
struct Title {
  decltype(100) id;
  decltype(std::string("Der Film")) title;
};
inline void __json(const CompanyName &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"country_code\":";
  __json(v.country_code);
  std::cout << "}";
}
inline void __json(const Keyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword\":";
  __json(v.keyword);
  std::cout << "}";
}
inline void __json(const Title &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"title\":";
  __json(v.title);
  std::cout << "}";
}
inline void __json(const MovieCompany &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"company_id\":";
  __json(v.company_id);
  std::cout << "}";
}
inline void __json(const MovieKeyword &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"movie_id\":";
  __json(v.movie_id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"keyword_id\":";
  __json(v.keyword_id);
  std::cout << "}";
}
int main() {
  std::vector<CompanyName> company_name = {CompanyName{1, std::string("[de]")},
                                           CompanyName{2, std::string("[us]")}};
  std::vector<Keyword> keyword = {
      Keyword{1, std::string("character-name-in-title")},
      Keyword{2, std::string("other")}};
  std::vector<MovieCompany> movie_companies = {MovieCompany{100, 1},
                                               MovieCompany{200, 2}};
  std::vector<MovieKeyword> movie_keyword = {MovieKeyword{100, 1},
                                             MovieKeyword{200, 2}};
  std::vector<Title> title = {Title{100, std::string("Der Film")},
                              Title{200, std::string("Other Movie")}};
  auto titles = ([&]() {
    std::vector<decltype(t.title)> __items;
    for (auto cn : company_name) {
      for (auto mc : movie_companies) {
        if (!((mc.company_id == cn.id)))
          continue;
        for (auto t : title) {
          if (!((mc.movie_id == t.id)))
            continue;
          for (auto mk : movie_keyword) {
            if (!((mk.movie_id == t.id)))
              continue;
            for (auto k : keyword) {
              if (!((mk.keyword_id == k.id)))
                continue;
              if (!((((cn.country_code == std::string("[de]")) &&
                      (k.keyword == std::string("character-name-in-title"))) &&
                     (mc.movie_id == mk.movie_id))))
                continue;
              __items.push_back(t.title);
            }
          }
        }
      }
    }
    return __items;
  })();
  auto result = (*std::min_element(titles.begin(), titles.end()));
  (__json(result));
  // test Q2 finds earliest title for German companies with character keyword
  return 0;
}
