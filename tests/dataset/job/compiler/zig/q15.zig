// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:55:50Z
const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _min_int(v: []const i32) i32 {
    if (v.len == 0) return 0;
    var m: i32 = v[0];
    for (v[1..]) |it| { if (it < m) m = it; }
    return m;
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch |err| handleError(err);
    std.debug.print("{s}\n", .{buf.items});
}

const AkaTitleItem = struct { movie_id: i32, };
const aka_title = &[_]AkaTitleItem{
    AkaTitleItem{ .movie_id = 1 },
    AkaTitleItem{ .movie_id = 2 },
}; // []const AkaTitleItem
const CompanyNameItem = struct {
    id: i32,
    country_code: []const u8,
};
const company_name = &[_]CompanyNameItem{
    CompanyNameItem{
    .id = 1,
    .country_code = "[us]",
},
    CompanyNameItem{
    .id = 2,
    .country_code = "[gb]",
},
}; // []const CompanyNameItem
const CompanyTypeItem = struct { id: i32, };
const company_type = &[_]CompanyTypeItem{
    CompanyTypeItem{ .id = 10 },
    CompanyTypeItem{ .id = 20 },
}; // []const CompanyTypeItem
const InfoTypeItem = struct {
    id: i32,
    info: []const u8,
};
const info_type = &[_]InfoTypeItem{
    InfoTypeItem{
    .id = 5,
    .info = "release dates",
},
    InfoTypeItem{
    .id = 6,
    .info = "other",
},
}; // []const InfoTypeItem
const KeywordItem = struct { id: i32, };
const keyword = &[_]KeywordItem{
    KeywordItem{ .id = 100 },
    KeywordItem{ .id = 200 },
}; // []const CompanyTypeItem
const MovieCompaniesItem = struct {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
    note: []const u8,
};
const movie_companies = &[_]MovieCompaniesItem{
    MovieCompaniesItem{
    .movie_id = 1,
    .company_id = 1,
    .company_type_id = 10,
    .note = "release (2005) (worldwide)",
},
    MovieCompaniesItem{
    .movie_id = 2,
    .company_id = 2,
    .company_type_id = 20,
    .note = "release (1999) (worldwide)",
},
}; // []const MovieCompaniesItem
const MovieInfoItem = struct {
    movie_id: i32,
    info_type_id: i32,
    note: []const u8,
    info: []const u8,
};
const movie_info = &[_]MovieInfoItem{
    MovieInfoItem{
    .movie_id = 1,
    .info_type_id = 5,
    .note = "internet",
    .info = "USA: March 2005",
},
    MovieInfoItem{
    .movie_id = 2,
    .info_type_id = 5,
    .note = "theater",
    .info = "USA: May 1999",
},
}; // []const MovieInfoItem
const MovieKeywordItem = struct {
    movie_id: i32,
    keyword_id: i32,
};
const movie_keyword = &[_]MovieKeywordItem{
    MovieKeywordItem{
    .movie_id = 1,
    .keyword_id = 100,
},
    MovieKeywordItem{
    .movie_id = 2,
    .keyword_id = 200,
},
}; // []const MovieKeywordItem
const TitleItem = struct {
    id: i32,
    title: []const u8,
    production_year: i32,
};
const title = &[_]TitleItem{
    TitleItem{
    .id = 1,
    .title = "Example Movie",
    .production_year = 2005,
},
    TitleItem{
    .id = 2,
    .title = "Old Movie",
    .production_year = 1999,
},
}; // []const TitleItem
const ResultStruct0 = struct {
    release_date: []const u8,
    internet_movie: []const u8,
};
var rows: []const RowsItem = undefined; // []const RowsItem
const ResultItem = struct {
    release_date: i32,
    internet_movie: i32,
};
const result = &[_]ResultItem{ResultItem{
    .release_date = _min_int(blk1: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); for (rows) |r| { _tmp3.append(r.release_date) catch |err| handleError(err); } const _tmp4 = _tmp3.toOwnedSlice() catch |err| handleError(err); break :blk1 _tmp4; }),
    .internet_movie = _min_int(blk2: { var _tmp5 = std.ArrayList(i32).init(std.heap.page_allocator); for (rows) |r| { _tmp5.append(r.internet_movie) catch |err| handleError(err); } const _tmp6 = _tmp5.toOwnedSlice() catch |err| handleError(err); break :blk2 _tmp6; }),
}}; // []const RowsItem

fn test_Q15_finds_the_earliest_US_internet_movie_release_after_2000() void {
    expect((result == &[_]ResultItem{RowsItem{
    .release_date = "USA: March 2005",
    .internet_movie = "Example Movie",
}}));
}

pub fn main() void {
    rows = blk0: { var _tmp1 = std.ArrayList(ResultStruct0).init(std.heap.page_allocator); for (title) |t| { for (aka_title) |at| { if (!((at.movie_id == t.id))) continue; for (movie_info) |mi| { if (!((mi.movie_id == t.id))) continue; for (movie_keyword) |mk| { if (!((mk.movie_id == t.id))) continue; for (movie_companies) |mc| { if (!((mc.movie_id == t.id))) continue; for (keyword) |k| { if (!((k.id == mk.keyword_id))) continue; for (info_type) |it1| { if (!((it1.id == mi.info_type_id))) continue; for (company_name) |cn| { if (!((cn.id == mc.company_id))) continue; for (company_type) |ct| { if (!((ct.id == mc.company_type_id))) continue; if (!((((((((std.mem.eql(u8, cn.country_code, "[us]") and std.mem.eql(u8, it1.info, "release dates")) and mc.note.contains("200")) and mc.note.contains("worldwide")) and mi.note.contains("internet")) and mi.info.contains("USA:")) and mi.info.contains("200")) and (t.production_year > 2000)))) continue; _tmp1.append(ResultStruct0{
    .release_date = mi.info,
    .internet_movie = t.title,
}) catch |err| handleError(err); } } } } } } } } } const _tmp2 = _tmp1.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp2; };
    _json(result);
    test_Q15_finds_the_earliest_US_internet_movie_release_after_2000();
}
