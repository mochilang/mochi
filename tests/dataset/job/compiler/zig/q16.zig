// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:55:50Z
const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _min_int(v: []const i32) i32 {
    if (v.len == 0) return 0;
    var m: i32 = v[0];
    for (v[1..]) |it| { if (it < m) m = it; }
    return m;
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch |err| handleError(err);
    std.debug.print("{s}\n", .{buf.items});
}

const AkaNameItem = struct {
    person_id: i32,
    name: []const u8,
};
const aka_name = &[_]AkaNameItem{
    AkaNameItem{
    .person_id = 1,
    .name = "Alpha",
},
    AkaNameItem{
    .person_id = 2,
    .name = "Beta",
},
}; // []const AkaNameItem
const CastInfoItem = struct {
    person_id: i32,
    movie_id: i32,
};
const cast_info = &[_]CastInfoItem{
    CastInfoItem{
    .person_id = 1,
    .movie_id = 101,
},
    CastInfoItem{
    .person_id = 2,
    .movie_id = 102,
},
}; // []const CastInfoItem
const CompanyNameItem = struct {
    id: i32,
    country_code: []const u8,
};
const company_name = &[_]CompanyNameItem{
    CompanyNameItem{
    .id = 1,
    .country_code = "[us]",
},
    CompanyNameItem{
    .id = 2,
    .country_code = "[de]",
},
}; // []const CompanyNameItem
const KeywordItem = struct {
    id: i32,
    keyword: []const u8,
};
const keyword = &[_]KeywordItem{
    KeywordItem{
    .id = 1,
    .keyword = "character-name-in-title",
},
    KeywordItem{
    .id = 2,
    .keyword = "other",
},
}; // []const KeywordItem
const MovieCompaniesItem = struct {
    movie_id: i32,
    company_id: i32,
};
const movie_companies = &[_]MovieCompaniesItem{
    MovieCompaniesItem{
    .movie_id = 101,
    .company_id = 1,
},
    MovieCompaniesItem{
    .movie_id = 102,
    .company_id = 2,
},
}; // []const MovieCompaniesItem
const MovieKeywordItem = struct {
    movie_id: i32,
    keyword_id: i32,
};
const movie_keyword = &[_]MovieKeywordItem{
    MovieKeywordItem{
    .movie_id = 101,
    .keyword_id = 1,
},
    MovieKeywordItem{
    .movie_id = 102,
    .keyword_id = 2,
},
}; // []const MovieKeywordItem
const NameItem = struct { id: i32, };
const name = &[_]NameItem{
    NameItem{ .id = 1 },
    NameItem{ .id = 2 },
}; // []const NameItem
const TitleItem = struct {
    id: i32,
    title: []const u8,
    episode_nr: i32,
};
const title = &[_]TitleItem{
    TitleItem{
    .id = 101,
    .title = "Hero Bob",
    .episode_nr = 60,
},
    TitleItem{
    .id = 102,
    .title = "Other Show",
    .episode_nr = 40,
},
}; // []const TitleItem
const ResultStruct0 = struct {
    pseudonym: []const u8,
    series: []const u8,
};
var rows: []const RowsItem = undefined; // []const RowsItem
const ResultItem = struct {
    cool_actor_pseudonym: i32,
    series_named_after_char: i32,
};
const result = &[_]ResultItem{ResultItem{
    .cool_actor_pseudonym = _min_int(blk1: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); for (rows) |r| { _tmp3.append(r.pseudonym) catch |err| handleError(err); } const _tmp4 = _tmp3.toOwnedSlice() catch |err| handleError(err); break :blk1 _tmp4; }),
    .series_named_after_char = _min_int(blk2: { var _tmp5 = std.ArrayList(i32).init(std.heap.page_allocator); for (rows) |r| { _tmp5.append(r.series) catch |err| handleError(err); } const _tmp6 = _tmp5.toOwnedSlice() catch |err| handleError(err); break :blk2 _tmp6; }),
}}; // []const ResultItem

fn test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99() void {
    expect((result == &[_]ResultItem{ResultItem{
    .cool_actor_pseudonym = "Alpha",
    .series_named_after_char = "Hero Bob",
}}));
}

pub fn main() void {
    rows = blk0: { var _tmp1 = std.ArrayList(ResultStruct0).init(std.heap.page_allocator); for (aka_name) |an| { for (name) |n| { if (!((n.id == an.person_id))) continue; for (cast_info) |ci| { if (!((ci.person_id == n.id))) continue; for (title) |t| { if (!((t.id == ci.movie_id))) continue; for (movie_keyword) |mk| { if (!((mk.movie_id == t.id))) continue; for (keyword) |k| { if (!((k.id == mk.keyword_id))) continue; for (movie_companies) |mc| { if (!((mc.movie_id == t.id))) continue; for (company_name) |cn| { if (!((cn.id == mc.company_id))) continue; if (!((((std.mem.eql(u8, cn.country_code, "[us]") and std.mem.eql(u8, k.keyword, "character-name-in-title")) and (t.episode_nr >= 50)) and (t.episode_nr < 100)))) continue; _tmp1.append(ResultStruct0{
    .pseudonym = an.name,
    .series = t.title,
}) catch |err| handleError(err); } } } } } } } } const _tmp2 = _tmp1.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp2; };
    _json(result);
    test_Q16_finds_series_named_after_a_character_between_episodes_50_and_99();
}
