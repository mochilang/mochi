// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:55:49Z
const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch |err| handleError(err);
    std.debug.print("{s}\n", .{buf.items});
}

const CompanyNameItem = struct {
    id: i32,
    name: []const u8,
    country_code: []const u8,
};
const company_name = &[_]CompanyNameItem{
    CompanyNameItem{
    .id = 1,
    .name = "Best Pictures",
    .country_code = "[us]",
},
    CompanyNameItem{
    .id = 2,
    .name = "Foreign Films",
    .country_code = "[uk]",
},
}; // []const CompanyNameItem
const CompanyTypeItem = struct {
    id: i32,
    kind: []const u8,
};
const company_type = &[_]CompanyTypeItem{
    CompanyTypeItem{
    .id = 10,
    .kind = "production companies",
},
    CompanyTypeItem{
    .id = 20,
    .kind = "distributors",
},
}; // []const CompanyTypeItem
const InfoTypeItem = struct {
    id: i32,
    info: []const u8,
};
const info_type = &[_]InfoTypeItem{
    InfoTypeItem{
    .id = 100,
    .info = "genres",
},
    InfoTypeItem{
    .id = 200,
    .info = "rating",
},
}; // []const InfoTypeItem
const MovieCompaniesItem = struct {
    movie_id: i32,
    company_id: i32,
    company_type_id: i32,
};
const movie_companies = &[_]MovieCompaniesItem{
    MovieCompaniesItem{
    .movie_id = 1000,
    .company_id = 1,
    .company_type_id = 10,
},
    MovieCompaniesItem{
    .movie_id = 2000,
    .company_id = 2,
    .company_type_id = 10,
},
}; // []const MovieCompaniesItem
const MovieInfoItem = struct {
    movie_id: i32,
    info_type_id: i32,
    info: []const u8,
};
const movie_info = &[_]MovieInfoItem{
    MovieInfoItem{
    .movie_id = 1000,
    .info_type_id = 100,
    .info = "Drama",
},
    MovieInfoItem{
    .movie_id = 2000,
    .info_type_id = 100,
    .info = "Horror",
},
}; // []const MovieInfoItem
const MovieInfoIdxItem = struct {
    movie_id: i32,
    info_type_id: i32,
    info: f64,
};
const movie_info_idx = &[_]MovieInfoIdxItem{
    MovieInfoIdxItem{
    .movie_id = 1000,
    .info_type_id = 200,
    .info = 8.3,
},
    MovieInfoIdxItem{
    .movie_id = 2000,
    .info_type_id = 200,
    .info = 7.5,
},
}; // []const MovieInfoIdxItem
const TitleItem = struct {
    id: i32,
    production_year: i32,
    title: []const u8,
};
const title = &[_]TitleItem{
    TitleItem{
    .id = 1000,
    .production_year = 2006,
    .title = "Great Drama",
},
    TitleItem{
    .id = 2000,
    .production_year = 2007,
    .title = "Low Rated",
},
}; // []const TitleItem
const ResultStruct0 = struct {
    movie_company: []const u8,
    rating: f64,
    drama_horror_movie: []const u8,
};
var result: []const ResultItem = undefined; // []const ResultItem

fn test_Q12_finds_high_rated_US_drama_or_horror_with_company() void {
    expect((result == &[_]ResultItem{ResultItem{
    .movie_company = "Best Pictures",
    .rating = 8.3,
    .drama_horror_movie = "Great Drama",
}}));
}

pub fn main() void {
    result = blk0: { var _tmp1 = std.ArrayList(ResultStruct0).init(std.heap.page_allocator); for (company_name) |cn| { for (movie_companies) |mc| { if (!((mc.company_id == cn.id))) continue; for (company_type) |ct| { if (!((ct.id == mc.company_type_id))) continue; for (title) |t| { if (!((t.id == mc.movie_id))) continue; for (movie_info) |mi| { if (!((mi.movie_id == t.id))) continue; for (info_type) |it1| { if (!((it1.id == mi.info_type_id))) continue; for (movie_info_idx) |mi_idx| { if (!((mi_idx.movie_id == t.id))) continue; for (info_type) |it2| { if (!((it2.id == mi_idx.info_type_id))) continue; if (!((((((((std.mem.eql(u8, cn.country_code, "[us]") and std.mem.eql(u8, ct.kind, "production companies")) and std.mem.eql(u8, it1.info, "genres")) and std.mem.eql(u8, it2.info, "rating")) and ((std.mem.eql(u8, mi.info, "Drama") or std.mem.eql(u8, mi.info, "Horror")))) and (mi_idx.info > 8.0)) and (t.production_year >= 2005)) and (t.production_year <= 2008)))) continue; _tmp1.append(ResultStruct0{
    .movie_company = cn.name,
    .rating = mi_idx.info,
    .drama_horror_movie = t.title,
}) catch |err| handleError(err); } } } } } } } } const _tmp2 = _tmp1.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp2; };
    _json(result);
    test_Q12_finds_high_rated_US_drama_or_horror_with_company();
}
