// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:55:50Z
const std = @import("std");

fn expect(cond: bool) void {
    if (!cond) @panic("expect failed");
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _json(v: anytype) void {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    std.json.stringify(v, .{}, buf.writer()) catch |err| handleError(err);
    std.debug.print("{s}\n", .{buf.items});
}

const CastInfoItem = struct {
    movie_id: i32,
    person_id: i32,
};
const cast_info = &[_]CastInfoItem{
    CastInfoItem{
    .movie_id = 1,
    .person_id = 1,
},
    CastInfoItem{
    .movie_id = 2,
    .person_id = 2,
},
}; // []const CastInfoItem
const CompanyNameItem = struct {
    id: i32,
    country_code: []const u8,
};
const company_name = &[_]CompanyNameItem{
    CompanyNameItem{
    .id = 1,
    .country_code = "[us]",
},
    CompanyNameItem{
    .id = 2,
    .country_code = "[ca]",
},
}; // []const CompanyNameItem
const KeywordItem = struct {
    id: i32,
    keyword: []const u8,
};
const keyword = &[_]KeywordItem{
    KeywordItem{
    .id = 10,
    .keyword = "character-name-in-title",
},
    KeywordItem{
    .id = 20,
    .keyword = "other",
},
}; // []const KeywordItem
const MovieCompaniesItem = struct {
    movie_id: i32,
    company_id: i32,
};
const movie_companies = &[_]MovieCompaniesItem{
    MovieCompaniesItem{
    .movie_id = 1,
    .company_id = 1,
},
    MovieCompaniesItem{
    .movie_id = 2,
    .company_id = 2,
},
}; // []const MovieCompaniesItem
const MovieKeywordItem = struct {
    movie_id: i32,
    keyword_id: i32,
};
const movie_keyword = &[_]MovieKeywordItem{
    MovieKeywordItem{
    .movie_id = 1,
    .keyword_id = 10,
},
    MovieKeywordItem{
    .movie_id = 2,
    .keyword_id = 20,
},
}; // []const MovieKeywordItem
const NameItem = struct {
    id: i32,
    name: []const u8,
};
const name = &[_]NameItem{
    NameItem{
    .id = 1,
    .name = "Bob Smith",
},
    NameItem{
    .id = 2,
    .name = "Alice Jones",
},
}; // []const NameItem
const TitleItem = struct {
    id: i32,
    title: []const u8,
};
const title = &[_]TitleItem{
    TitleItem{
    .id = 1,
    .title = "Bob's Journey",
},
    TitleItem{
    .id = 2,
    .title = "Foreign Film",
},
}; // []const TitleItem
var matches: i32 = undefined; // i32
const ResultItem = struct {
    member_in_charnamed_american_movie: i32,
    a1: i32,
};
const result = &[_]ResultItem{ResultItem{
    .member_in_charnamed_american_movie = min(matches),
    .a1 = min(matches),
}}; // []const ResultItem

fn test_Q17_finds_US_character_name_movie_with_actor_starting_with_B() void {
    expect((result == &[_]ResultItem{ResultItem{
    .member_in_charnamed_american_movie = "Bob Smith",
    .a1 = "Bob Smith",
}}));
}

pub fn main() void {
    matches = blk0: { var _tmp0 = std.ArrayList(u8).init(std.heap.page_allocator); for (name) |n| { for (cast_info) |ci| { if (!((ci.person_id == n.id))) continue; for (title) |t| { if (!((t.id == ci.movie_id))) continue; for (movie_keyword) |mk| { if (!((mk.movie_id == t.id))) continue; for (keyword) |k| { if (!((k.id == mk.keyword_id))) continue; for (movie_companies) |mc| { if (!((mc.movie_id == t.id))) continue; for (company_name) |cn| { if (!((cn.id == mc.company_id))) continue; if (!((((((std.mem.eql(u8, cn.country_code, "[us]") and std.mem.eql(u8, k.keyword, "character-name-in-title")) and n.name.starts_with("B")) and (ci.movie_id == mk.movie_id)) and (ci.movie_id == mc.movie_id)) and (mc.movie_id == mk.movie_id)))) continue; _tmp0.append(n.name) catch |err| handleError(err); } } } } } } } const _tmp1 = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp1; };
    _json(result);
    test_Q17_finds_US_character_name_movie_with_actor_starting_with_B();
}
