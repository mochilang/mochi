# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:50:18Z
defmodule Main do
  def main do
    # cast_info :: list(map())
    cast_info = [%{movie_id: 1, person_id: 101}, %{movie_id: 2, person_id: 102}]
    # keyword :: list(map())
    keyword = [%{id: 100, keyword: "marvel-cinematic-universe"}, %{id: 200, keyword: "other"}]
    # movie_keyword :: list(map())
    movie_keyword = [%{movie_id: 1, keyword_id: 100}, %{movie_id: 2, keyword_id: 200}]
    # name :: list(map())
    name = [%{id: 101, name: "Downey Robert Jr."}, %{id: 102, name: "Chris Evans"}]
    # title :: list(map())
    title = [
      %{id: 1, title: "Iron Man 3", production_year: 2013},
      %{id: 2, title: "Old Movie", production_year: 2000}
    ]

    # result :: list(map())
    result =
      for ci <- cast_info,
          mk <- movie_keyword,
          k <- keyword,
          n <- name,
          t <- title,
          ci.movie_id == mk.movie_id && mk.keyword_id == k.id && ci.person_id == n.id &&
            ci.movie_id == t.id &&
            (k.keyword == "marvel-cinematic-universe" && String.contains?(n.name, "Downey") &&
               String.contains?(n.name, "Robert") && t.production_year > 2010),
          do: %{movie_keyword: k.keyword, actor_name: n.name, marvel_movie: t.title}

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
