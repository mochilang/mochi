# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:50:19Z
defmodule Main do
  def main do
    # aka_name :: list(map())
    aka_name = [%{person_id: 1, name: "Anna Mae"}, %{person_id: 2, name: "Chris"}]
    # cast_info :: list(map())
    cast_info = [%{person_id: 1, movie_id: 10}, %{person_id: 2, movie_id: 20}]
    # info_type :: list(map())
    info_type = [%{id: 1, info: "mini biography"}, %{id: 2, info: "trivia"}]
    # link_type :: list(map())
    link_type = [%{id: 1, link: "features"}, %{id: 2, link: "references"}]
    # movie_link :: list(map())
    movie_link = [
      %{linked_movie_id: 10, link_type_id: 1},
      %{linked_movie_id: 20, link_type_id: 2}
    ]

    # name :: list(map())
    name = [
      %{id: 1, name: "Alan Brown", name_pcode_cf: "B", gender: "m"},
      %{id: 2, name: "Zoe", name_pcode_cf: "Z", gender: "f"}
    ]

    # person_info :: list(map())
    person_info = [
      %{person_id: 1, info_type_id: 1, note: "Volker Boehm"},
      %{person_id: 2, info_type_id: 1, note: "Other"}
    ]

    # title :: list(map())
    title = [
      %{id: 10, title: "Feature Film", production_year: 1990},
      %{id: 20, title: "Late Film", production_year: 2000}
    ]

    # rows :: list(map())
    rows =
      for an <- aka_name,
          n <- name,
          pi <- person_info,
          it <- info_type,
          ci <- cast_info,
          t <- title,
          ml <- movie_link,
          lt <- link_type,
          n.id == an.person_id && pi.person_id == an.person_id && it.id == pi.info_type_id &&
            ci.person_id == n.id && t.id == ci.movie_id && ml.linked_movie_id == t.id &&
            lt.id == ml.link_type_id &&
            (String.contains?(an.name, "a") && it.info == "mini biography" &&
               lt.link == "features" && n.name_pcode_cf >= "A" && n.name_pcode_cf <= "F" &&
               (n.gender == "m" || (n.gender == "f" && n.name.starts_with("B"))) &&
               pi.note == "Volker Boehm" && t.production_year >= 1980 && t.production_year <= 1995 &&
               pi.person_id == an.person_id && pi.person_id == ci.person_id &&
               an.person_id == ci.person_id && ci.movie_id == ml.linked_movie_id),
          do: %{person_name: n.name, movie_title: t.title}

    # result :: list(map())
    result = [
      %{
        of_person: _min(for r <- rows, do: r.person_name),
        biography_movie: _min(for r <- rows, do: r.movie_title)
      }
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
