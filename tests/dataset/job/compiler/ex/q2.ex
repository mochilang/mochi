# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:50:12Z
defmodule Main do
  def main do
    # company_name :: list(map())
    company_name = [%{id: 1, country_code: "[de]"}, %{id: 2, country_code: "[us]"}]
    # keyword :: list(map())
    keyword = [%{id: 1, keyword: "character-name-in-title"}, %{id: 2, keyword: "other"}]
    # movie_companies :: list(map())
    movie_companies = [%{movie_id: 100, company_id: 1}, %{movie_id: 200, company_id: 2}]
    # movie_keyword :: list(map())
    movie_keyword = [%{movie_id: 100, keyword_id: 1}, %{movie_id: 200, keyword_id: 2}]
    # title :: list(map())
    title = [%{id: 100, title: "Der Film"}, %{id: 200, title: "Other Movie"}]
    # titles :: list(any())
    titles =
      for cn <- company_name,
          mc <- movie_companies,
          t <- title,
          mk <- movie_keyword,
          k <- keyword,
          mc.company_id == cn.id && mc.movie_id == t.id && mk.movie_id == t.id &&
            mk.keyword_id == k.id &&
            (cn.country_code == "[de]" && k.keyword == "character-name-in-title" &&
               mc.movie_id == mk.movie_id),
          do: t.title

    # result :: any()
    result = _min(titles)
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
