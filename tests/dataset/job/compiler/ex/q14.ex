# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:56:55Z
defmodule Main do
  @allowed_countries [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Denish",
    "Norwegian",
    "German",
    "USA",
    "American"
  ]
  def main do
    # info_type :: list(map())
    info_type = [%{id: 1, info: "countries"}, %{id: 2, info: "rating"}]
    # keyword :: list(map())
    keyword = [
      %{id: 1, keyword: "murder"},
      %{id: 2, keyword: "blood"},
      %{id: 3, keyword: "romance"}
    ]

    # kind_type :: list(map())
    kind_type = [%{id: 1, kind: "movie"}]
    # title :: list(map())
    title = [
      %{id: 1, kind_id: 1, production_year: 2012, title: "A Dark Movie"},
      %{id: 2, kind_id: 1, production_year: 2013, title: "Brutal Blood"},
      %{id: 3, kind_id: 1, production_year: 2008, title: "Old Film"}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 1, info_type_id: 1, info: "Sweden"},
      %{movie_id: 2, info_type_id: 1, info: "USA"},
      %{movie_id: 3, info_type_id: 1, info: "USA"}
    ]

    # movie_info_idx :: list(map())
    movie_info_idx = [
      %{movie_id: 1, info_type_id: 2, info: 7},
      %{movie_id: 2, info_type_id: 2, info: 7.5},
      %{movie_id: 3, info_type_id: 2, info: 9.1}
    ]

    # movie_keyword :: list(map())
    movie_keyword = [
      %{movie_id: 1, keyword_id: 1},
      %{movie_id: 2, keyword_id: 2},
      %{movie_id: 3, keyword_id: 3}
    ]

    # allowed_keywords :: list(String.t())
    allowed_keywords = ["murder", "murder-in-title", "blood", "violence"]
    # matches :: list(map())
    matches =
      for it1 <- info_type,
          it2 <- info_type,
          k <- keyword,
          kt <- kind_type,
          mi <- movie_info,
          mi_idx <- movie_info_idx,
          mk <- movie_keyword,
          t <- title,
          it1.info == "countries" && it2.info == "rating" &&
            if(is_map(allowed_keywords),
              do: Map.has_key?(allowed_keywords, k.keyword),
              else: Enum.member?(allowed_keywords, k.keyword)
            ) && kt.kind == "movie" &&
            if(is_map(@allowed_countries),
              do: Map.has_key?(@allowed_countries, mi.info),
              else: Enum.member?(@allowed_countries, mi.info)
            ) && mi_idx.info < 8.5 && t.production_year > 2010 && kt.id == t.kind_id &&
            t.id == mi.movie_id && t.id == mk.movie_id && t.id == mi_idx.movie_id &&
            mk.movie_id == mi.movie_id && mk.movie_id == mi_idx.movie_id &&
            mi.movie_id == mi_idx.movie_id && k.id == mk.keyword_id && it1.id == mi.info_type_id &&
            it2.id == mi_idx.info_type_id,
          do: %{rating: mi_idx.info, title: t.title}

    # result :: map()
    result = %{
      rating: _min(for x <- matches, do: x.rating),
      northern_dark_movie: _min(for x <- matches, do: x.title)
    }

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
