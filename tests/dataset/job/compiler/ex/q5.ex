# Generated by Mochi compiler v0.10.25 on 2025-07-13T11:50:16Z
defmodule Main do
  def main do
    # company_type :: list(map())
    company_type = [%{ct_id: 1, kind: "production companies"}, %{ct_id: 2, kind: "other"}]
    # info_type :: list(map())
    info_type = [%{it_id: 10, info: "languages"}]
    # title :: list(map())
    title = [
      %{t_id: 100, title: "B Movie", production_year: 2010},
      %{t_id: 200, title: "A Film", production_year: 2012},
      %{t_id: 300, title: "Old Movie", production_year: 2000}
    ]

    # movie_companies :: list(map())
    movie_companies = [
      %{movie_id: 100, company_type_id: 1, note: "ACME (France) (theatrical)"},
      %{movie_id: 200, company_type_id: 1, note: "ACME (France) (theatrical)"},
      %{movie_id: 300, company_type_id: 1, note: "ACME (France) (theatrical)"}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 100, info: "German", info_type_id: 10},
      %{movie_id: 200, info: "Swedish", info_type_id: 10},
      %{movie_id: 300, info: "German", info_type_id: 10}
    ]

    # candidate_titles :: list(any())
    candidate_titles =
      for ct <- company_type,
          mc <- movie_companies,
          mi <- movie_info,
          it <- info_type,
          t <- title,
          mc.company_type_id == ct.ct_id && mi.movie_id == mc.movie_id &&
            it.it_id == mi.info_type_id && t.t_id == mc.movie_id &&
            (ct.kind == "production companies" && String.contains?(mc.note, "(theatrical)") &&
               String.contains?(mc.note, "(France)") && t.production_year > 2005 &&
               if(
                 is_map([
                   "Sweden",
                   "Norway",
                   "Germany",
                   "Denmark",
                   "Swedish",
                   "Denish",
                   "Norwegian",
                   "German"
                 ]),
                 do:
                   Map.has_key?(
                     [
                       "Sweden",
                       "Norway",
                       "Germany",
                       "Denmark",
                       "Swedish",
                       "Denish",
                       "Norwegian",
                       "German"
                     ],
                     mi.info
                   ),
                 else:
                   Enum.member?(
                     [
                       "Sweden",
                       "Norway",
                       "Germany",
                       "Denmark",
                       "Swedish",
                       "Denish",
                       "Norwegian",
                       "German"
                     ],
                     mi.info
                   )
               )),
          do: t.title

    # result :: list(map())
    result = [%{typical_european_movie: _min(candidate_titles)}]
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
