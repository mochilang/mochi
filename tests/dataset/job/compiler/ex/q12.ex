# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:56:51Z
defmodule Main do
  def main do
    # company_name :: list(map())
    company_name = [
      %{id: 1, name: "Best Pictures", country_code: "[us]"},
      %{id: 2, name: "Foreign Films", country_code: "[uk]"}
    ]

    # company_type :: list(map())
    company_type = [%{id: 10, kind: "production companies"}, %{id: 20, kind: "distributors"}]
    # info_type :: list(map())
    info_type = [%{id: 100, info: "genres"}, %{id: 200, info: "rating"}]
    # movie_companies :: list(map())
    movie_companies = [
      %{movie_id: 1000, company_id: 1, company_type_id: 10},
      %{movie_id: 2000, company_id: 2, company_type_id: 10}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 1000, info_type_id: 100, info: "Drama"},
      %{movie_id: 2000, info_type_id: 100, info: "Horror"}
    ]

    # movie_info_idx :: list(map())
    movie_info_idx = [
      %{movie_id: 1000, info_type_id: 200, info: 8.3},
      %{movie_id: 2000, info_type_id: 200, info: 7.5}
    ]

    # title :: list(map())
    title = [
      %{id: 1000, production_year: 2006, title: "Great Drama"},
      %{id: 2000, production_year: 2007, title: "Low Rated"}
    ]

    # result :: list(map())
    result =
      for cn <- company_name,
          mc <- movie_companies,
          ct <- company_type,
          t <- title,
          mi <- movie_info,
          it1 <- info_type,
          mi_idx <- movie_info_idx,
          it2 <- info_type,
          mc.company_id == cn.id && ct.id == mc.company_type_id && t.id == mc.movie_id &&
            mi.movie_id == t.id && it1.id == mi.info_type_id && mi_idx.movie_id == t.id &&
            it2.id == mi_idx.info_type_id &&
            (cn.country_code == "[us]" && ct.kind == "production companies" &&
               it1.info == "genres" && it2.info == "rating" &&
               (mi.info == "Drama" || mi.info == "Horror") && mi_idx.info > 8 &&
               t.production_year >= 2005 && t.production_year <= 2008),
          do: %{movie_company: cn.name, rating: mi_idx.info, drama_horror_movie: t.title}

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
