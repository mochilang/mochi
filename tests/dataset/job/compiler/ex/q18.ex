# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:05Z
defmodule Main do
  def main do
    # info_type :: list(map())
    info_type = [%{id: 1, info: "budget"}, %{id: 2, info: "votes"}, %{id: 3, info: "rating"}]
    # name :: list(map())
    name = [
      %{id: 1, name: "Big Tim", gender: "m"},
      %{id: 2, name: "Slim Tim", gender: "m"},
      %{id: 3, name: "Alice", gender: "f"}
    ]

    # title :: list(map())
    title = [%{id: 10, title: "Alpha"}, %{id: 20, title: "Beta"}, %{id: 30, title: "Gamma"}]
    # cast_info :: list(map())
    cast_info = [
      %{movie_id: 10, person_id: 1, note: "(producer)"},
      %{movie_id: 20, person_id: 2, note: "(executive producer)"},
      %{movie_id: 30, person_id: 3, note: "(producer)"}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 10, info_type_id: 1, info: 90},
      %{movie_id: 20, info_type_id: 1, info: 120},
      %{movie_id: 30, info_type_id: 1, info: 110}
    ]

    # movie_info_idx :: list(map())
    movie_info_idx = [
      %{movie_id: 10, info_type_id: 2, info: 500},
      %{movie_id: 20, info_type_id: 2, info: 400},
      %{movie_id: 30, info_type_id: 2, info: 800}
    ]

    # rows :: list(map())
    rows =
      for ci <- cast_info,
          n <- name,
          t <- title,
          mi <- movie_info,
          mi_idx <- movie_info_idx,
          it1 <- info_type,
          it2 <- info_type,
          n.id == ci.person_id && t.id == ci.movie_id && mi.movie_id == t.id &&
            mi_idx.movie_id == t.id && it1.id == mi.info_type_id && it2.id == mi_idx.info_type_id &&
            (if(is_map(["(producer)", "(executive producer)"]),
               do: Map.has_key?(["(producer)", "(executive producer)"], ci.note),
               else: Enum.member?(["(producer)", "(executive producer)"], ci.note)
             ) && it1.info == "budget" && it2.info == "votes" && n.gender == "m" &&
               String.contains?(n.name, "Tim") && t.id == ci.movie_id &&
               ci.movie_id == mi.movie_id && ci.movie_id == mi_idx.movie_id &&
               mi.movie_id == mi_idx.movie_id),
          do: %{budget: mi.info, votes: mi_idx.info, title: t.title}

    # result :: map()
    result = %{
      movie_budget: _min(for r <- rows, do: r.budget),
      movie_votes: _min(for r <- rows, do: r.votes),
      movie_title: _min(for r <- rows, do: r.title)
    }

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
