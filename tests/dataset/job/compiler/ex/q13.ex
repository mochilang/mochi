# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:56:53Z
defmodule Main do
  def main do
    # company_name :: list(map())
    company_name = [%{id: 1, country_code: "[de]"}, %{id: 2, country_code: "[us]"}]
    # company_type :: list(map())
    company_type = [%{id: 1, kind: "production companies"}, %{id: 2, kind: "distributors"}]
    # info_type :: list(map())
    info_type = [%{id: 1, info: "rating"}, %{id: 2, info: "release dates"}]
    # kind_type :: list(map())
    kind_type = [%{id: 1, kind: "movie"}, %{id: 2, kind: "video"}]
    # title :: list(map())
    title = [
      %{id: 10, kind_id: 1, title: "Alpha"},
      %{id: 20, kind_id: 1, title: "Beta"},
      %{id: 30, kind_id: 2, title: "Gamma"}
    ]

    # movie_companies :: list(map())
    movie_companies = [
      %{movie_id: 10, company_id: 1, company_type_id: 1},
      %{movie_id: 20, company_id: 1, company_type_id: 1},
      %{movie_id: 30, company_id: 2, company_type_id: 1}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 10, info_type_id: 2, info: "1997-05-10"},
      %{movie_id: 20, info_type_id: 2, info: "1998-03-20"},
      %{movie_id: 30, info_type_id: 2, info: "1999-07-30"}
    ]

    # movie_info_idx :: list(map())
    movie_info_idx = [
      %{movie_id: 10, info_type_id: 1, info: "6.0"},
      %{movie_id: 20, info_type_id: 1, info: "7.5"},
      %{movie_id: 30, info_type_id: 1, info: "5.5"}
    ]

    # candidates :: list(map())
    candidates =
      for cn <- company_name,
          mc <- movie_companies,
          ct <- company_type,
          t <- title,
          kt <- kind_type,
          mi <- movie_info,
          it2 <- info_type,
          miidx <- movie_info_idx,
          it <- info_type,
          mc.company_id == cn.id && ct.id == mc.company_type_id && t.id == mc.movie_id &&
            kt.id == t.kind_id && mi.movie_id == t.id && it2.id == mi.info_type_id &&
            miidx.movie_id == t.id && it.id == miidx.info_type_id &&
            (cn.country_code == "[de]" && ct.kind == "production companies" && it.info == "rating" &&
               it2.info == "release dates" && kt.kind == "movie"),
          do: %{release_date: mi.info, rating: miidx.info, german_movie: t.title}

    # result :: map()
    result = %{
      release_date:
        Enum.at(
          for(x <- Enum.sort_by(candidates, fn x -> x.release_date end), do: x.release_date),
          0
        ),
      rating: Enum.at(for(x <- Enum.sort_by(candidates, fn x -> x.rating end), do: x.rating), 0),
      german_movie:
        Enum.at(
          for(x <- Enum.sort_by(candidates, fn x -> x.german_movie end), do: x.german_movie),
          0
        )
    }

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))
end

Main.main()
