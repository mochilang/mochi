# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    company_type = [%{id: 1, kind: "production companies"}, %{id: 2, kind: "distributors"}]
    info_type = [%{id: 10, info: "top 250 rank"}, %{id: 20, info: "bottom 10 rank"}]

    title = [
      %{id: 100, title: "Good Movie", production_year: 1995},
      %{id: 200, title: "Bad Movie", production_year: 2000}
    ]

    movie_companies = [
      %{movie_id: 100, company_type_id: 1, note: "ACME (co-production)"},
      %{movie_id: 200, company_type_id: 1, note: "MGM (as Metro-Goldwyn-Mayer Pictures)"}
    ]

    movie_info_idx = [%{movie_id: 100, info_type_id: 10}, %{movie_id: 200, info_type_id: 20}]

    filtered =
      for ct <- company_type,
          mc <- movie_companies,
          t <- title,
          mi <- movie_info_idx,
          it <- info_type,
          ct.id == mc.company_type_id && t.id == mc.movie_id && mi.movie_id == t.id &&
            it.id == mi.info_type_id &&
            (ct.kind == "production companies" && it.info == "top 250 rank" &&
               !String.contains?(mc.note, "(as Metro-Goldwyn-Mayer Pictures)") &&
               (String.contains?(mc.note, "(co-production)") ||
                  String.contains?(mc.note, "(presents)"))),
          do: %{note: mc.note, title: t.title, year: t.production_year}

    result = %{
      production_note: _min(for r <- filtered, do: r.note),
      movie_title: _min(for r <- filtered, do: r.title),
      movie_year: _min(for r <- filtered, do: r.year)
    }

    IO.puts(_json([result]))
  end

  defp _json(v) do
    cond do
      is_list(v) ->
        "[" <> Enum.map_join(v, ",", &_json/1) <> "]"

      is_map(v) ->
        "{" <>
          Enum.map_join(v, ",", fn {k, v} -> _json(to_string(k)) <> ":" <> _json(v) end) <> "}"

      is_binary(v) ->
        "\"" <> String.replace(v, "\"", "\\\"") <> "\""

      true ->
        to_string(v)
    end
  end

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      Enum.min(list)
    end
  end
end

Main.main()
