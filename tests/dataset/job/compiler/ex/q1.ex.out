# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    company_type = [%{id: 1, kind: "production companies"}, %{id: 2, kind: "distributors"}]
    info_type = [%{id: 10, info: "top 250 rank"}, %{id: 20, info: "bottom 10 rank"}]

    title = [
      %{id: 100, title: "Good Movie", production_year: 1995},
      %{id: 200, title: "Bad Movie", production_year: 2000}
    ]

    movie_companies = [
      %{movie_id: 100, company_type_id: 1, note: "ACME (co-production)"},
      %{movie_id: 200, company_type_id: 1, note: "MGM (as Metro-Goldwyn-Mayer Pictures)"}
    ]

    movie_info_idx = [%{movie_id: 100, info_type_id: 10}, %{movie_id: 200, info_type_id: 20}]

    filtered =
      for ct <- company_type,
          mc <- movie_companies,
          t <- title,
          mi <- movie_info_idx,
          it <- info_type,
          ct.id == mc.company_type_id && t.id == mc.movie_id && mi.movie_id == t.id &&
            it.id == mi.info_type_id &&
            (ct.kind == "production companies" && it.info == "top 250 rank" &&
               !String.contains?(mc.note, "(as Metro-Goldwyn-Mayer Pictures)") &&
               (String.contains?(mc.note, "(co-production)") ||
                  String.contains?(mc.note, "(presents)"))),
          do: %{note: mc.note, title: t.title, year: t.production_year}

    result = %{
      production_note: _min(for r <- filtered, do: r.note),
      movie_title: _min(for r <- filtered, do: r.title),
      movie_year: _min(for r <- filtered, do: r.year)
    }

    _json([result])
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
