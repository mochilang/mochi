# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    aka_name = [%{person_id: 1, name: "Y. S."}]
    cast_info = [%{person_id: 1, movie_id: 10, note: "(voice: English version)", role_id: 1000}]
    company_name = [%{id: 50, country_code: "[jp]"}]
    movie_companies = [%{movie_id: 10, company_id: 50, note: "Studio (Japan)"}]
    name = [%{id: 1, name: "Yoko Ono"}, %{id: 2, name: "Yuichi"}]
    role_type = [%{id: 1000, role: "actress"}]
    title = [%{id: 10, title: "Dubbed Film"}]

    eligible =
      for an1 <- aka_name,
          n1 <- name,
          ci <- cast_info,
          t <- title,
          mc <- movie_companies,
          cn <- company_name,
          rt <- role_type,
          n1.id == an1.person_id && ci.person_id == an1.person_id && t.id == ci.movie_id &&
            mc.movie_id == ci.movie_id && cn.id == mc.company_id && rt.id == ci.role_id &&
            (ci.note == "(voice: English version)" && cn.country_code == "[jp]" &&
               String.contains?(mc.note, "(Japan)") && !String.contains?(mc.note, "(USA)") &&
               String.contains?(n1.name, "Yo") && !String.contains?(n1.name, "Yu") &&
               rt.role == "actress"),
          do: %{pseudonym: an1.name, movie_title: t.title}

    result = [
      %{
        actress_pseudonym: _min(for x <- eligible, do: x.pseudonym),
        japanese_movie_dubbed: _min(for x <- eligible, do: x.movie_title)
      }
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
