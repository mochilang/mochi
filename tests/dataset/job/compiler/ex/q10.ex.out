# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    char_name = [%{id: 1, name: "Ivan"}, %{id: 2, name: "Alex"}]

    cast_info = [
      %{movie_id: 10, person_role_id: 1, role_id: 1, note: "Soldier (voice) (uncredited)"},
      %{movie_id: 11, person_role_id: 2, role_id: 1, note: "(voice)"}
    ]

    company_name = [%{id: 1, country_code: "[ru]"}, %{id: 2, country_code: "[us]"}]
    company_type = [%{id: 1}, %{id: 2}]

    movie_companies = [
      %{movie_id: 10, company_id: 1, company_type_id: 1},
      %{movie_id: 11, company_id: 2, company_type_id: 1}
    ]

    role_type = [%{id: 1, role: "actor"}, %{id: 2, role: "director"}]

    title = [
      %{id: 10, title: "Vodka Dreams", production_year: 2006},
      %{id: 11, title: "Other Film", production_year: 2004}
    ]

    matches =
      for chn <- char_name,
          ci <- cast_info,
          rt <- role_type,
          t <- title,
          mc <- movie_companies,
          cn <- company_name,
          ct <- company_type,
          chn.id == ci.person_role_id && rt.id == ci.role_id && t.id == ci.movie_id &&
            mc.movie_id == t.id && cn.id == mc.company_id && ct.id == mc.company_type_id &&
            (String.contains?(ci.note, "(voice)") && String.contains?(ci.note, "(uncredited)") &&
               cn.country_code == "[ru]" && rt.role == "actor" && t.production_year > 2005),
          do: %{character: chn.name, movie: t.title}

    result = [
      %{
        uncredited_voiced_character: _min(for x <- matches, do: x.character),
        russian_movie: _min(for x <- matches, do: x.movie)
      }
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
