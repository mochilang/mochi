# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:10Z
defmodule Main do
  def main do
    # comp_cast_type :: list(map())
    comp_cast_type = [%{id: 1, kind: "cast"}, %{id: 2, kind: "complete cast"}]
    # char_name :: list(map())
    char_name = [%{id: 1, name: "Tony Stark"}, %{id: 2, name: "Sherlock Holmes"}]
    # complete_cast :: list(map())
    complete_cast = [
      %{movie_id: 1, subject_id: 1, status_id: 2},
      %{movie_id: 2, subject_id: 1, status_id: 2}
    ]

    # name :: list(map())
    name = [%{id: 1, name: "Robert Downey Jr."}, %{id: 2, name: "Another Actor"}]
    # cast_info :: list(map())
    cast_info = [
      %{movie_id: 1, person_role_id: 1, person_id: 1},
      %{movie_id: 2, person_role_id: 2, person_id: 2}
    ]

    # keyword :: list(map())
    keyword = [%{id: 10, keyword: "superhero"}, %{id: 20, keyword: "romance"}]
    # movie_keyword :: list(map())
    movie_keyword = [%{movie_id: 1, keyword_id: 10}, %{movie_id: 2, keyword_id: 20}]
    # kind_type :: list(map())
    kind_type = [%{id: 1, kind: "movie"}]
    # title :: list(map())
    title = [
      %{id: 1, kind_id: 1, production_year: 2008, title: "Iron Man"},
      %{id: 2, kind_id: 1, production_year: 1940, title: "Old Hero"}
    ]

    # matches :: list(any())
    matches =
      for cc <- complete_cast,
          cct1 <- comp_cast_type,
          cct2 <- comp_cast_type,
          ci <- cast_info,
          chn <- char_name,
          n <- name,
          mk <- movie_keyword,
          k <- keyword,
          t <- title,
          kt <- kind_type,
          cct1.id == cc.subject_id && cct2.id == cc.status_id && ci.movie_id == cc.movie_id &&
            chn.id == ci.person_role_id && n.id == ci.person_id && mk.movie_id == cc.movie_id &&
            k.id == mk.keyword_id && t.id == cc.movie_id && kt.id == t.kind_id &&
            (cct1.kind == "cast" && String.contains?(cct2.kind, "complete") &&
               !String.contains?(chn.name, "Sherlock") &&
               (String.contains?(chn.name, "Tony Stark") || String.contains?(chn.name, "Iron Man")) &&
               if(
                 is_map([
                   "superhero",
                   "sequel",
                   "second-part",
                   "marvel-comics",
                   "based-on-comic",
                   "tv-special",
                   "fight",
                   "violence"
                 ]),
                 do:
                   Map.has_key?(
                     [
                       "superhero",
                       "sequel",
                       "second-part",
                       "marvel-comics",
                       "based-on-comic",
                       "tv-special",
                       "fight",
                       "violence"
                     ],
                     k.keyword
                   ),
                 else:
                   Enum.member?(
                     [
                       "superhero",
                       "sequel",
                       "second-part",
                       "marvel-comics",
                       "based-on-comic",
                       "tv-special",
                       "fight",
                       "violence"
                     ],
                     k.keyword
                   )
               ) && kt.kind == "movie" && t.production_year > 1950),
          do: t.title

    # result :: list(map())
    result = [%{complete_downey_ironman_movie: _min(matches)}]
    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
