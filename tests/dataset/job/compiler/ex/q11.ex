# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:56:48Z
defmodule Main do
  def main do
    # company_name :: list(map())
    company_name = [
      %{id: 1, name: "Best Film Co", country_code: "[us]"},
      %{id: 2, name: "Warner Studios", country_code: "[de]"},
      %{id: 3, name: "Polish Films", country_code: "[pl]"}
    ]

    # company_type :: list(map())
    company_type = [%{id: 1, kind: "production companies"}, %{id: 2, kind: "distributors"}]
    # keyword :: list(map())
    keyword = [%{id: 1, keyword: "sequel"}, %{id: 2, keyword: "thriller"}]
    # link_type :: list(map())
    link_type = [
      %{id: 1, link: "follow-up"},
      %{id: 2, link: "follows from"},
      %{id: 3, link: "remake"}
    ]

    # movie_companies :: list(map())
    movie_companies = [
      %{movie_id: 10, company_id: 1, company_type_id: 1, note: nil},
      %{movie_id: 20, company_id: 2, company_type_id: 1, note: nil},
      %{movie_id: 30, company_id: 3, company_type_id: 1, note: nil}
    ]

    # movie_keyword :: list(map())
    movie_keyword = [
      %{movie_id: 10, keyword_id: 1},
      %{movie_id: 20, keyword_id: 1},
      %{movie_id: 20, keyword_id: 2},
      %{movie_id: 30, keyword_id: 1}
    ]

    # movie_link :: list(map())
    movie_link = [
      %{movie_id: 10, link_type_id: 1},
      %{movie_id: 20, link_type_id: 2},
      %{movie_id: 30, link_type_id: 3}
    ]

    # title :: list(map())
    title = [
      %{id: 10, production_year: 1960, title: "Alpha"},
      %{id: 20, production_year: 1970, title: "Beta"},
      %{id: 30, production_year: 1985, title: "Polish Movie"}
    ]

    # matches :: list(map())
    matches =
      for cn <- company_name,
          mc <- movie_companies,
          ct <- company_type,
          t <- title,
          mk <- movie_keyword,
          k <- keyword,
          ml <- movie_link,
          lt <- link_type,
          mc.company_id == cn.id && ct.id == mc.company_type_id && t.id == mc.movie_id &&
            mk.movie_id == t.id && k.id == mk.keyword_id && ml.movie_id == t.id &&
            lt.id == ml.link_type_id &&
            (cn.country_code != "[pl]" &&
               (String.contains?(cn.name, "Film") || String.contains?(cn.name, "Warner")) &&
               ct.kind == "production companies" && k.keyword == "sequel" &&
               String.contains?(lt.link, "follow") && mc.note == nil && t.production_year >= 1950 &&
               t.production_year <= 2000 && ml.movie_id == mk.movie_id &&
               ml.movie_id == mc.movie_id && mk.movie_id == mc.movie_id),
          do: %{company: cn.name, link: lt.link, title: t.title}

    # result :: list(map())
    result = [
      %{
        from_company: _min(for x <- matches, do: x.company),
        movie_link_type: _min(for x <- matches, do: x.link),
        non_polish_sequel_movie: _min(for x <- matches, do: x.title)
      }
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
