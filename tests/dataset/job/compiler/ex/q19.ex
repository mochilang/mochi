# Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:08Z
defmodule Main do
  def main do
    # aka_name :: list(map())
    aka_name = [%{person_id: 1, name: "A. Stone"}, %{person_id: 2, name: "J. Doe"}]
    # char_name :: list(map())
    char_name = [%{id: 1, name: "Protagonist"}, %{id: 2, name: "Extra"}]
    # cast_info :: list(map())
    cast_info = [
      %{movie_id: 1, person_role_id: 1, person_id: 1, role_id: 1, note: "(voice)"},
      %{movie_id: 2, person_role_id: 2, person_id: 2, role_id: 2, note: "Cameo"}
    ]

    # company_name :: list(map())
    company_name = [%{id: 10, country_code: "[us]"}, %{id: 20, country_code: "[gb]"}]
    # info_type :: list(map())
    info_type = [%{id: 100, info: "release dates"}]
    # movie_companies :: list(map())
    movie_companies = [
      %{movie_id: 1, company_id: 10, note: "Studio (USA)"},
      %{movie_id: 2, company_id: 20, note: "Other (worldwide)"}
    ]

    # movie_info :: list(map())
    movie_info = [
      %{movie_id: 1, info_type_id: 100, info: "USA: June 2006"},
      %{movie_id: 2, info_type_id: 100, info: "UK: 1999"}
    ]

    # name :: list(map())
    name = [
      %{id: 1, name: "Angela Stone", gender: "f"},
      %{id: 2, name: "Bob Angstrom", gender: "m"}
    ]

    # role_type :: list(map())
    role_type = [%{id: 1, role: "actress"}, %{id: 2, role: "actor"}]
    # title :: list(map())
    title = [
      %{id: 1, title: "Voiced Movie", production_year: 2006},
      %{id: 2, title: "Other Movie", production_year: 2010}
    ]

    # matches :: list(map())
    matches =
      for an <- aka_name,
          n <- name,
          ci <- cast_info,
          chn <- char_name,
          rt <- role_type,
          t <- title,
          mc <- movie_companies,
          cn <- company_name,
          mi <- movie_info,
          it <- info_type,
          n.id == an.person_id && ci.person_id == an.person_id && chn.id == ci.person_role_id &&
            rt.id == ci.role_id && t.id == ci.movie_id && mc.movie_id == t.id &&
            cn.id == mc.company_id && mi.movie_id == t.id && it.id == mi.info_type_id &&
            (if(
               is_map([
                 "(voice)",
                 "(voice: Japanese version)",
                 "(voice) (uncredited)",
                 "(voice: English version)"
               ]),
               do:
                 Map.has_key?(
                   [
                     "(voice)",
                     "(voice: Japanese version)",
                     "(voice) (uncredited)",
                     "(voice: English version)"
                   ],
                   ci.note
                 ),
               else:
                 Enum.member?(
                   [
                     "(voice)",
                     "(voice: Japanese version)",
                     "(voice) (uncredited)",
                     "(voice: English version)"
                   ],
                   ci.note
                 )
             ) && cn.country_code == "[us]" && it.info == "release dates" && mc.note != nil &&
               (String.contains?(mc.note, "(USA)") || String.contains?(mc.note, "(worldwide)")) &&
               mi.info != nil &&
               ((String.contains?(mi.info, "Japan:") && String.contains?(mi.info, "200")) ||
                  (String.contains?(mi.info, "USA:") && String.contains?(mi.info, "200"))) &&
               n.gender == "f" && String.contains?(n.name, "Ang") && rt.role == "actress" &&
               t.production_year >= 2005 && t.production_year <= 2009),
          do: %{actress: n.name, movie: t.title}

    # result :: list(map())
    result = [
      %{
        voicing_actress: _min(for r <- matches, do: r.actress),
        voiced_movie: _min(for r <- matches, do: r.movie)
      }
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> Map.get(v, :items)
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
