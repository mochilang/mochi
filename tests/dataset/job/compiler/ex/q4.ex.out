# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    info_type = [%{id: 1, info: "rating"}, %{id: 2, info: "other"}]
    keyword = [%{id: 1, keyword: "great sequel"}, %{id: 2, keyword: "prequel"}]

    title = [
      %{id: 10, title: "Alpha Movie", production_year: 2006},
      %{id: 20, title: "Beta Film", production_year: 2007},
      %{id: 30, title: "Old Film", production_year: 2004}
    ]

    movie_keyword = [
      %{movie_id: 10, keyword_id: 1},
      %{movie_id: 20, keyword_id: 1},
      %{movie_id: 30, keyword_id: 1}
    ]

    movie_info_idx = [
      %{movie_id: 10, info_type_id: 1, info: "6.2"},
      %{movie_id: 20, info_type_id: 1, info: "7.8"},
      %{movie_id: 30, info_type_id: 1, info: "4.5"}
    ]

    rows =
      for it <- info_type,
          mi <- movie_info_idx,
          t <- title,
          mk <- movie_keyword,
          k <- keyword,
          it.id == mi.info_type_id && t.id == mi.movie_id && mk.movie_id == t.id &&
            k.id == mk.keyword_id &&
            (it.info == "rating" && String.contains?(k.keyword, "sequel") && mi.info > "5.0" &&
               t.production_year > 2005 && mk.movie_id == mi.movie_id),
          do: %{rating: mi.info, title: t.title}

    result = [
      %{rating: _min(for r <- rows, do: r.rating), movie_title: _min(for r <- rows, do: r.title)}
    ]

    _json(result)
  end

  defp _escape_json(<<>>), do: ""
  defp _escape_json(<<"\\", rest::binary>>), do: "\\\\" <> _escape_json(rest)
  defp _escape_json(<<"\"", rest::binary>>), do: "\\\"" <> _escape_json(rest)
  defp _escape_json(<<c::binary-size(1), rest::binary>>), do: c <> _escape_json(rest)
  defp _to_json(v) when is_binary(v), do: "\"" <> _escape_json(v) <> "\""
  defp _to_json(v) when is_number(v), do: to_string(v)
  defp _to_json(v) when is_boolean(v), do: if(v, do: "true", else: "false")
  defp _to_json(v) when is_list(v), do: "[" <> Enum.map_join(v, ",", &_to_json/1) <> "]"

  defp _to_json(v) when is_map(v) do
    keys = Map.keys(v) |> Enum.map(&to_string/1) |> Enum.sort()

    inner =
      Enum.map_join(keys, ",", fn k ->
        _to_json(k) <> ":" <> _to_json(Map.get(v, String.to_atom(k), Map.get(v, k)))
      end)

    "{" <> inner <> "}"
  end

  defp _to_json(_), do: "null"
  defp _json(v), do: IO.puts(_to_json(v))

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
