// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:10Z
// Source: /workspace/mochi/tests/dataset/job/q12.mochi

let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let info_type: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_info_idx: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q12_finds_high_rated_US_drama_or_horror_with_company(): void {
  if (
    !(_equal(result, [
      {
        "movie_company": "Best Pictures",
        "rating": 8.3,
        "drama_horror_movie": "Great Drama",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "name": "Best Pictures",
      "country_code": "[us]",
    },
    {
      "id": 2,
      "name": "Foreign Films",
      "country_code": "[uk]",
    },
  ];
  company_type = [
    {
      "id": 10,
      "kind": "production companies",
    },
    {
      "id": 20,
      "kind": "distributors",
    },
  ];
  info_type = [
    {
      "id": 100,
      "info": "genres",
    },
    {
      "id": 200,
      "info": "rating",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1000,
      "company_id": 1,
      "company_type_id": 10,
    },
    {
      "movie_id": 2000,
      "company_id": 2,
      "company_type_id": 10,
    },
  ];
  movie_info = [
    {
      "movie_id": 1000,
      "info_type_id": 100,
      "info": "Drama",
    },
    {
      "movie_id": 2000,
      "info_type_id": 100,
      "info": "Horror",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 1000,
      "info_type_id": 200,
      "info": 8.3,
    },
    {
      "movie_id": 2000,
      "info_type_id": 200,
      "info": 7.5,
    },
  ];
  title = [
    {
      "id": 1000,
      "production_year": 2006,
      "title": "Great Drama",
    },
    {
      "id": 2000,
      "production_year": 2007,
      "title": "Low Rated",
    },
  ];
  result = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn of _src) {
      for (const mc of movie_companies) {
        if (!(_equal(mc.company_id, cn.id))) continue;
        for (const ct of company_type) {
          if (!(_equal(ct.id, mc.company_type_id))) continue;
          for (const t of title) {
            if (!(_equal(t.id, mc.movie_id))) continue;
            for (const mi of movie_info) {
              if (!(_equal(mi.movie_id, t.id))) continue;
              for (const it1 of info_type) {
                if (!(_equal(it1.id, mi.info_type_id))) continue;
                for (const mi_idx of movie_info_idx) {
                  if (!(_equal(mi_idx.movie_id, t.id))) continue;
                  for (const it2 of info_type) {
                    if (!(_equal(it2.id, mi_idx.info_type_id))) continue;
                    if (
                      !(((((((_equal(cn.country_code, "[us]") &&
                        _equal(ct.kind, "production companies")) &&
                        _equal(it1.info, "genres")) &&
                        _equal(it2.info, "rating")) &&
                        (_equal(mi.info, "Drama") ||
                          _equal(mi.info, "Horror"))) && (mi_idx.info > 8)) &&
                        (t.production_year >= 2005)) &&
                        (t.production_year <= 2008))
                    ) continue;
                    _res.push({
                      "movie_company": cn.name,
                      "rating": mi_idx.info,
                      "drama_horror_movie": t.title,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q12_finds_high_rated_US_drama_or_horror_with_company();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
