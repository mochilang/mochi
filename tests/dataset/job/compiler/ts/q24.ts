// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:13:39Z
// Source: /workspace/mochi/tests/dataset/job/q24.mochi

let aka_name: { [key: string]: number }[];
let cast_info: Record<string, any>[];
let char_name: Record<string, any>[];
let company_name: Record<string, any>[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let role_type: Record<string, any>[];
let title: Record<string, any>[];

function test_Q24_finds_voiced_action_movie_with_actress_named_An(): void {
  if (
    !(_equal(result, [
      {
        "voiced_char_name": "Hero Character",
        "voicing_actress_name": "Ann Actress",
        "voiced_action_movie_jap_eng": "Heroic Adventure",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  aka_name = [{ "person_id": 1 }];
  char_name = [
    {
      "id": 1,
      "name": "Hero Character",
    },
  ];
  cast_info = [
    {
      "movie_id": 1,
      "person_id": 1,
      "person_role_id": 1,
      "role_id": 1,
      "note": "(voice)",
    },
  ];
  company_name = [
    {
      "id": 1,
      "country_code": "[us]",
    },
  ];
  info_type = [
    {
      "id": 1,
      "info": "release dates",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "hero",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info_type_id": 1,
      "info": "Japan: Feb 2015",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 1,
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Ann Actress",
      "gender": "f",
    },
  ];
  role_type = [
    {
      "id": 1,
      "role": "actress",
    },
  ];
  title = [
    {
      "id": 1,
      "title": "Heroic Adventure",
      "production_year": 2015,
    },
  ];
  matches = (() => {
    const _src = aka_name;
    const _res = [];
    for (const an of _src) {
      for (const chn of char_name) {
        for (const ci of cast_info) {
          for (const cn of company_name) {
            for (const it of info_type) {
              for (const k of keyword) {
                for (const mc of movie_companies) {
                  for (const mi of movie_info) {
                    for (const mk of movie_keyword) {
                      for (const n of name) {
                        for (const rt of role_type) {
                          for (const t of title) {
                            if (
                              !((((((((((((((((((((((((((([
                                "(voice)",
                                "(voice: Japanese version)",
                                "(voice) (uncredited)",
                                "(voice: English version)",
                              ].includes(ci.note) &&
                                _equal(cn.country_code, "[us]")) &&
                                _equal(it.info, "release dates")) && [
                                "hero",
                                "martial-arts",
                                "hand-to-hand-combat",
                              ].includes(k.keyword)) &&
                                !_equal(mi.info, null)) &&
                                ((_starts_with(mi.info, "Japan:") &&
                                  mi.info.includes("201")) ||
                                  (_starts_with(mi.info, "USA:") &&
                                    mi.info.includes("201")))) &&
                                _equal(n.gender, "f")) &&
                                n.name.includes("An")) &&
                                _equal(rt.role, "actress")) &&
                                (t.production_year > 2010)) &&
                                _equal(t.id, mi.movie_id)) &&
                                _equal(t.id, mc.movie_id)) &&
                                _equal(t.id, ci.movie_id)) &&
                                _equal(t.id, mk.movie_id)) &&
                                _equal(mc.movie_id, ci.movie_id)) &&
                                _equal(mc.movie_id, mi.movie_id)) &&
                                (mc.movie_id == mk.movie_id)) &&
                                _equal(mi.movie_id, ci.movie_id)) &&
                                _equal(mi.movie_id, mk.movie_id)) &&
                                _equal(ci.movie_id, mk.movie_id)) &&
                                _equal(cn.id, mc.company_id)) &&
                                _equal(it.id, mi.info_type_id)) &&
                                _equal(n.id, ci.person_id)) &&
                                _equal(rt.id, ci.role_id)) &&
                                _equal(n.id, an.person_id)) &&
                                _equal(ci.person_id, an.person_id)) &&
                                _equal(chn.id, ci.person_role_id)) &&
                                _equal(k.id, mk.keyword_id))
                            ) continue;
                            _res.push({
                              "voiced_char_name": chn.name,
                              "voicing_actress_name": n.name,
                              "voiced_action_movie_jap_eng": t.title,
                            });
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "voiced_char_name": _min(matches.map((x) => x.voiced_char_name)),
      "voicing_actress_name": _min(matches.map((x) => x.voicing_actress_name)),
      "voiced_action_movie_jap_eng": _min(
        matches.map((x) => x.voiced_action_movie_jap_eng),
      ),
    },
  ];
  console.log(_json(result));
  test_Q24_finds_voiced_action_movie_with_actress_named_An();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

function _starts_with(str: any, prefix: any): boolean {
  return String(str).startsWith(String(prefix));
}

main();
