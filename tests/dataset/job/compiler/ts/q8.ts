// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:42Z
// Source: /workspace/mochi/tests/dataset/job/q8.mochi

let aka_name: Record<string, any>[];
let cast_info: Record<string, any>[];
let company_name: Record<string, any>[];
let eligible: Record<string, any>[];
let movie_companies: Record<string, any>[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let role_type: Record<string, any>[];
let title: Record<string, any>[];

function test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing(): void {
  if (
    !(_equal(result, [
      {
        "actress_pseudonym": "Y. S.",
        "japanese_movie_dubbed": "Dubbed Film",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  aka_name = [
    {
      "person_id": 1,
      "name": "Y. S.",
    },
  ];
  cast_info = [
    {
      "person_id": 1,
      "movie_id": 10,
      "note": "(voice: English version)",
      "role_id": 1000,
    },
  ];
  company_name = [
    {
      "id": 50,
      "country_code": "[jp]",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 50,
      "note": "Studio (Japan)",
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Yoko Ono",
    },
    {
      "id": 2,
      "name": "Yuichi",
    },
  ];
  role_type = [
    {
      "id": 1000,
      "role": "actress",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Dubbed Film",
    },
  ];
  eligible = (() => {
    const _src = aka_name;
    const _res = [];
    for (const an1 of _src) {
      for (const n1 of name) {
        if (!(n1.id == an1.person_id)) continue;
        for (const ci of cast_info) {
          if (!(ci.person_id == an1.person_id)) continue;
          for (const t of title) {
            if (!(t.id == ci.movie_id)) continue;
            for (const mc of movie_companies) {
              if (!(mc.movie_id == ci.movie_id)) continue;
              for (const cn of company_name) {
                if (!(cn.id == mc.company_id)) continue;
                for (const rt of role_type) {
                  if (!(rt.id == ci.role_id)) continue;
                  if (
                    !(((((((ci.note == "(voice: English version)") &&
                      (cn.country_code == "[jp]")) &&
                      mc.note.includes("(Japan)")) &&
                      (!mc.note.includes("(USA)"))) &&
                      n1.name.includes("Yo")) && (!n1.name.includes("Yu"))) &&
                      (rt.role == "actress"))
                  ) continue;
                  _res.push({
                    "pseudonym": an1.name,
                    "movie_title": t.title,
                  });
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "actress_pseudonym": _min(eligible.map((x) => x.pseudonym)),
      "japanese_movie_dubbed": _min(eligible.map((x) => x.movie_title)),
    },
  ];
  console.log(_json(result));
  test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
