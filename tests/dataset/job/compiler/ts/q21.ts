// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:10Z
// Source: /workspace/mochi/tests/dataset/job/q21.mochi

let allowed_countries: string[];
let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let keyword: Record<string, any>[];
let link_type: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let movie_link: { [key: string]: number }[];
let result: Record<string, any>[];
let rows: Record<string, any>[];
let title: Record<string, any>[];

function test_Q21_finds_western_follow_up_sequels(): void {
  if (
    !(_equal(result, [
      {
        "company_name": "ACME Film Works",
        "link_type": "is follow up",
        "western_follow_up": "Western Return",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "name": "ACME Film Works",
      "country_code": "[us]",
    },
    {
      "id": 2,
      "name": "Polish Warner",
      "country_code": "[pl]",
    },
  ];
  company_type = [
    {
      "id": 1,
      "kind": "production companies",
    },
    {
      "id": 2,
      "kind": "other",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "sequel",
    },
    {
      "id": 2,
      "keyword": "drama",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "is follow up",
    },
    {
      "id": 2,
      "link": "references",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Western Return",
      "production_year": 1975,
    },
    {
      "id": 20,
      "title": "Other Movie",
      "production_year": 2015,
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
      "company_type_id": 1,
      "note": null,
    },
    {
      "movie_id": 20,
      "company_id": 2,
      "company_type_id": 1,
      "note": null,
    },
  ];
  movie_info = [
    {
      "movie_id": 10,
      "info": "Sweden",
    },
    {
      "movie_id": 20,
      "info": "USA",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 10,
      "keyword_id": 1,
    },
    {
      "movie_id": 20,
      "keyword_id": 2,
    },
  ];
  movie_link = [
    {
      "movie_id": 10,
      "link_type_id": 1,
    },
    {
      "movie_id": 20,
      "link_type_id": 2,
    },
  ];
  allowed_countries = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Denish",
    "Norwegian",
    "German",
  ];
  rows = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn of _src) {
      for (const mc of movie_companies) {
        if (!(_equal(mc.company_id, cn.id))) continue;
        for (const ct of company_type) {
          if (!(_equal(ct.id, mc.company_type_id))) continue;
          for (const t of title) {
            if (!(_equal(t.id, mc.movie_id))) continue;
            for (const mk of movie_keyword) {
              if (!(_equal(mk.movie_id, t.id))) continue;
              for (const k of keyword) {
                if (!(_equal(k.id, mk.keyword_id))) continue;
                for (const ml of movie_link) {
                  if (!(_equal(ml.movie_id, t.id))) continue;
                  for (const lt of link_type) {
                    if (!(_equal(lt.id, ml.link_type_id))) continue;
                    for (const mi of movie_info) {
                      if (!(_equal(mi.movie_id, t.id))) continue;
                      if (
                        !((((((((!_equal(cn.country_code, "[pl]") &&
                          (cn.name.includes("Film") ||
                            cn.name.includes("Warner"))) &&
                          _equal(ct.kind, "production companies")) &&
                          _equal(k.keyword, "sequel")) &&
                          lt.link.includes("follow")) &&
                          _equal(mc.note, null)) &&
                          (allowed_countries.includes(mi.info))) &&
                          (t.production_year >= 1950)) &&
                          (t.production_year <= 2000))
                      ) continue;
                      _res.push({
                        "company_name": cn.name,
                        "link_type": lt.link,
                        "western_follow_up": t.title,
                      });
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "company_name": _min(rows.map((r) => r.company_name)),
      "link_type": _min(rows.map((r) => r.link_type)),
      "western_follow_up": _min(rows.map((r) => r.western_follow_up)),
    },
  ];
  console.log(_json(result));
  test_Q21_finds_western_follow_up_sequels();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
