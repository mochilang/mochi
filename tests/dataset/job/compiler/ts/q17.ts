// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:43Z
// Source: /workspace/mochi/tests/dataset/job/q17.mochi

let cast_info: { [key: string]: number }[];
let company_name: Record<string, any>[];
let keyword: Record<string, any>[];
let matches: any[];
let movie_companies: { [key: string]: number }[];
let movie_keyword: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q17_finds_US_character_name_movie_with_actor_starting_with_B(): void {
  if (
    !(_equal(result, [
      {
        "member_in_charnamed_american_movie": "Bob Smith",
        "a1": "Bob Smith",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  cast_info = [
    {
      "movie_id": 1,
      "person_id": 1,
    },
    {
      "movie_id": 2,
      "person_id": 2,
    },
  ];
  company_name = [
    {
      "id": 1,
      "country_code": "[us]",
    },
    {
      "id": 2,
      "country_code": "[ca]",
    },
  ];
  keyword = [
    {
      "id": 10,
      "keyword": "character-name-in-title",
    },
    {
      "id": 20,
      "keyword": "other",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
    },
    {
      "movie_id": 2,
      "company_id": 2,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 10,
    },
    {
      "movie_id": 2,
      "keyword_id": 20,
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Bob Smith",
    },
    {
      "id": 2,
      "name": "Alice Jones",
    },
  ];
  title = [
    {
      "id": 1,
      "title": "Bob's Journey",
    },
    {
      "id": 2,
      "title": "Foreign Film",
    },
  ];
  matches = (() => {
    const _src = name;
    const _res = [];
    for (const n of _src) {
      for (const ci of cast_info) {
        if (!(ci.person_id == n.id)) continue;
        for (const t of title) {
          if (!(t.id == ci.movie_id)) continue;
          for (const mk of movie_keyword) {
            if (!(mk.movie_id == t.id)) continue;
            for (const k of keyword) {
              if (!(k.id == mk.keyword_id)) continue;
              for (const mc of movie_companies) {
                if (!(mc.movie_id == t.id)) continue;
                for (const cn of company_name) {
                  if (!(cn.id == mc.company_id)) continue;
                  if (
                    !((((((cn.country_code == "[us]") &&
                      (k.keyword == "character-name-in-title")) &&
                      _starts_with(n.name, "B")) &&
                      (ci.movie_id == mk.movie_id)) &&
                      (ci.movie_id == mc.movie_id)) &&
                      (mc.movie_id == mk.movie_id))
                  ) continue;
                  _res.push(n.name);
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "member_in_charnamed_american_movie": _min(matches),
      "a1": _min(matches),
    },
  ];
  console.log(_json(result));
  test_Q17_finds_US_character_name_movie_with_actor_starting_with_B();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

function _starts_with(str: any, prefix: any): boolean {
  return String(str).startsWith(String(prefix));
}

main();
