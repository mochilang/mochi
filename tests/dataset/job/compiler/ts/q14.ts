// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:42Z
// Source: /workspace/mochi/tests/dataset/job/q14.mochi

let allowed_countries: string[];
let allowed_keywords: string[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let kind_type: Record<string, any>[];
let matches: Record<string, any>[];
let movie_info: Record<string, any>[];
let movie_info_idx: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q14_selects_minimal_rating_and_title_for_dark_movies(): void {
  if (
    !(_equal(result, {
      "rating": 7,
      "northern_dark_movie": "A Dark Movie",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  info_type = [
    {
      "id": 1,
      "info": "countries",
    },
    {
      "id": 2,
      "info": "rating",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "murder",
    },
    {
      "id": 2,
      "keyword": "blood",
    },
    {
      "id": 3,
      "keyword": "romance",
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "movie",
    },
  ];
  title = [
    {
      "id": 1,
      "kind_id": 1,
      "production_year": 2012,
      "title": "A Dark Movie",
    },
    {
      "id": 2,
      "kind_id": 1,
      "production_year": 2013,
      "title": "Brutal Blood",
    },
    {
      "id": 3,
      "kind_id": 1,
      "production_year": 2008,
      "title": "Old Film",
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info_type_id": 1,
      "info": "Sweden",
    },
    {
      "movie_id": 2,
      "info_type_id": 1,
      "info": "USA",
    },
    {
      "movie_id": 3,
      "info_type_id": 1,
      "info": "USA",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 1,
      "info_type_id": 2,
      "info": 7,
    },
    {
      "movie_id": 2,
      "info_type_id": 2,
      "info": 7.5,
    },
    {
      "movie_id": 3,
      "info_type_id": 2,
      "info": 9.1,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 1,
    },
    {
      "movie_id": 2,
      "keyword_id": 2,
    },
    {
      "movie_id": 3,
      "keyword_id": 3,
    },
  ];
  allowed_keywords = [
    "murder",
    "murder-in-title",
    "blood",
    "violence",
  ];
  allowed_countries = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Denish",
    "Norwegian",
    "German",
    "USA",
    "American",
  ];
  matches = (() => {
    const _src = info_type;
    const _res = [];
    for (const it1 of _src) {
      for (const it2 of info_type) {
        for (const k of keyword) {
          for (const kt of kind_type) {
            for (const mi of movie_info) {
              for (const mi_idx of movie_info_idx) {
                for (const mk of movie_keyword) {
                  for (const t of title) {
                    if (
                      !(((((((((((((((((it1.info == "countries") &&
                        (it2.info == "rating")) &&
                        (allowed_keywords.includes(k.keyword))) &&
                        (kt.kind == "movie")) &&
                        (allowed_countries.includes(mi.info))) &&
                        (mi_idx.info < 8.5)) && (t.production_year > 2010)) &&
                        (kt.id == t.kind_id)) && (t.id == mi.movie_id)) &&
                        (t.id == mk.movie_id)) && (t.id == mi_idx.movie_id)) &&
                        (mk.movie_id == mi.movie_id)) &&
                        (mk.movie_id == mi_idx.movie_id)) &&
                        (mi.movie_id == mi_idx.movie_id)) &&
                        (k.id == mk.keyword_id)) &&
                        (it1.id == mi.info_type_id)) &&
                        (it2.id == mi_idx.info_type_id))
                    ) continue;
                    _res.push({
                      "rating": mi_idx.info,
                      "title": t.title,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "rating": _min(matches.map((x) => x.rating)),
    "northern_dark_movie": _min(matches.map((x) => x.title)),
  };
  console.log(_json(result));
  test_Q14_selects_minimal_rating_and_title_for_dark_movies();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
