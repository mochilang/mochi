// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:10Z
// Source: /workspace/mochi/tests/dataset/job/q18.mochi

let cast_info: Record<string, any>[];
let info_type: Record<string, any>[];
let movie_info: { [key: string]: number }[];
let movie_info_idx: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>;
let rows: { [key: string]: number }[];
let title: Record<string, any>[];

function test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions(): void {
  if (
    !(_equal(result, {
      "movie_budget": 90,
      "movie_votes": 400,
      "movie_title": "Alpha",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  info_type = [
    {
      "id": 1,
      "info": "budget",
    },
    {
      "id": 2,
      "info": "votes",
    },
    {
      "id": 3,
      "info": "rating",
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Big Tim",
      "gender": "m",
    },
    {
      "id": 2,
      "name": "Slim Tim",
      "gender": "m",
    },
    {
      "id": 3,
      "name": "Alice",
      "gender": "f",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Alpha",
    },
    {
      "id": 20,
      "title": "Beta",
    },
    {
      "id": 30,
      "title": "Gamma",
    },
  ];
  cast_info = [
    {
      "movie_id": 10,
      "person_id": 1,
      "note": "(producer)",
    },
    {
      "movie_id": 20,
      "person_id": 2,
      "note": "(executive producer)",
    },
    {
      "movie_id": 30,
      "person_id": 3,
      "note": "(producer)",
    },
  ];
  movie_info = [
    {
      "movie_id": 10,
      "info_type_id": 1,
      "info": 90,
    },
    {
      "movie_id": 20,
      "info_type_id": 1,
      "info": 120,
    },
    {
      "movie_id": 30,
      "info_type_id": 1,
      "info": 110,
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 10,
      "info_type_id": 2,
      "info": 500,
    },
    {
      "movie_id": 20,
      "info_type_id": 2,
      "info": 400,
    },
    {
      "movie_id": 30,
      "info_type_id": 2,
      "info": 800,
    },
  ];
  rows = (() => {
    const _src = cast_info;
    const _res = [];
    for (const ci of _src) {
      for (const n of name) {
        if (!(_equal(n.id, ci.person_id))) continue;
        for (const t of title) {
          if (!(_equal(t.id, ci.movie_id))) continue;
          for (const mi of movie_info) {
            if (!(_equal(mi.movie_id, t.id))) continue;
            for (const mi_idx of movie_info_idx) {
              if (!(_equal(mi_idx.movie_id, t.id))) continue;
              for (const it1 of info_type) {
                if (!(_equal(it1.id, mi.info_type_id))) continue;
                for (const it2 of info_type) {
                  if (!(_equal(it2.id, mi_idx.info_type_id))) continue;
                  if (
                    !(((((((([
                      "(producer)",
                      "(executive producer)",
                    ].includes(ci.note) && _equal(it1.info, "budget")) &&
                      _equal(it2.info, "votes")) && _equal(n.gender, "m")) &&
                      n.name.includes("Tim")) && _equal(t.id, ci.movie_id)) &&
                      _equal(ci.movie_id, mi.movie_id)) &&
                      _equal(ci.movie_id, mi_idx.movie_id)) &&
                      (mi.movie_id == mi_idx.movie_id))
                  ) continue;
                  _res.push({
                    "budget": mi.info,
                    "votes": mi_idx.info,
                    "title": t.title,
                  });
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "movie_budget": _min(rows.map((r) => r.budget)),
    "movie_votes": _min(rows.map((r) => r.votes)),
    "movie_title": _min(rows.map((r) => r.title)),
  };
  console.log(_json(result));
  test_Q18_finds_minimal_budget__votes_and_title_for_Tim_productions();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
