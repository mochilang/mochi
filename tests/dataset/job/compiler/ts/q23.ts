// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:43Z
// Source: /workspace/mochi/tests/dataset/job/q23.mochi

let comp_cast_type: Record<string, any>[];
let company_name: Record<string, any>[];
let company_type: { [key: string]: number }[];
let complete_cast: { [key: string]: number }[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let kind_type: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q23_finds_US_internet_movie_with_verified_cast(): void {
  if (
    !(_equal(result, [
      {
        "movie_kind": "movie",
        "complete_us_internet_movie": "Web Movie",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  complete_cast = [
    {
      "movie_id": 1,
      "status_id": 1,
    },
    {
      "movie_id": 2,
      "status_id": 2,
    },
  ];
  comp_cast_type = [
    {
      "id": 1,
      "kind": "complete+verified",
    },
    {
      "id": 2,
      "kind": "partial",
    },
  ];
  company_name = [
    {
      "id": 1,
      "country_code": "[us]",
    },
    {
      "id": 2,
      "country_code": "[gb]",
    },
  ];
  company_type = [
    { "id": 1 },
    { "id": 2 },
  ];
  info_type = [
    {
      "id": 1,
      "info": "release dates",
    },
    {
      "id": 2,
      "info": "other",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "internet",
    },
    {
      "id": 2,
      "keyword": "other",
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "movie",
    },
    {
      "id": 2,
      "kind": "series",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
      "company_type_id": 1,
    },
    {
      "movie_id": 2,
      "company_id": 2,
      "company_type_id": 2,
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info_type_id": 1,
      "note": "internet release",
      "info": "USA: May 2005",
    },
    {
      "movie_id": 2,
      "info_type_id": 1,
      "note": "theater",
      "info": "USA: April 1998",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 1,
    },
    {
      "movie_id": 2,
      "keyword_id": 2,
    },
  ];
  title = [
    {
      "id": 1,
      "kind_id": 1,
      "production_year": 2005,
      "title": "Web Movie",
    },
    {
      "id": 2,
      "kind_id": 1,
      "production_year": 1998,
      "title": "Old Movie",
    },
  ];
  matches = (() => {
    const _src = complete_cast;
    const _res = [];
    for (const cc of _src) {
      for (const cct1 of comp_cast_type) {
        if (!(cct1.id == cc.status_id)) continue;
        for (const t of title) {
          if (!(t.id == cc.movie_id)) continue;
          for (const kt of kind_type) {
            if (!(kt.id == t.kind_id)) continue;
            for (const mi of movie_info) {
              if (!(mi.movie_id == t.id)) continue;
              for (const it1 of info_type) {
                if (!(it1.id == mi.info_type_id)) continue;
                for (const mk of movie_keyword) {
                  if (!(mk.movie_id == t.id)) continue;
                  for (const k of keyword) {
                    if (!(k.id == mk.keyword_id)) continue;
                    for (const mc of movie_companies) {
                      if (!(mc.movie_id == t.id)) continue;
                      for (const cn of company_name) {
                        if (!(cn.id == mc.company_id)) continue;
                        for (const ct of company_type) {
                          if (!(ct.id == mc.company_type_id)) continue;
                          if (
                            !(((((((cct1.kind == "complete+verified") &&
                              (cn.country_code == "[us]")) &&
                              (it1.info == "release dates")) &&
                              (kt.kind == "movie")) &&
                              mi.note.includes("internet")) &&
                              (mi.info.includes("USA:") &&
                                (mi.info.includes("199") ||
                                  mi.info.includes("200")))) &&
                              (t.production_year > 2000))
                          ) continue;
                          _res.push({
                            "movie_kind": kt.kind,
                            "complete_us_internet_movie": t.title,
                          });
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "movie_kind": _min(matches.map((r) => r.movie_kind)),
      "complete_us_internet_movie": _min(
        matches.map((r) => r.complete_us_internet_movie),
      ),
    },
  ];
  console.log(_json(result));
  test_Q23_finds_US_internet_movie_with_verified_cast();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
