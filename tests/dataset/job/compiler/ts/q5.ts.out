// Generated by Mochi TypeScript compiler

let candidate_titles: any[];
let company_type: Record<string, any>[];
let info_type: Record<string, any>[];
let movie_companies: Record<string, any>[];
let movie_info: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q5_finds_the_lexicographically_first_qualifying_title(): void {
  if (!(_equal(result, [{ "typical_european_movie": "A Film" }]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  company_type = [
    {
      "ct_id": 1,
      "kind": "production companies",
    },
    {
      "ct_id": 2,
      "kind": "other",
    },
  ];
  info_type = [
    {
      "it_id": 10,
      "info": "languages",
    },
  ];
  title = [
    {
      "t_id": 100,
      "title": "B Movie",
      "production_year": 2010,
    },
    {
      "t_id": 200,
      "title": "A Film",
      "production_year": 2012,
    },
    {
      "t_id": 300,
      "title": "Old Movie",
      "production_year": 2000,
    },
  ];
  movie_companies = [
    {
      "movie_id": 100,
      "company_type_id": 1,
      "note": "ACME (France) (theatrical)",
    },
    {
      "movie_id": 200,
      "company_type_id": 1,
      "note": "ACME (France) (theatrical)",
    },
    {
      "movie_id": 300,
      "company_type_id": 1,
      "note": "ACME (France) (theatrical)",
    },
  ];
  movie_info = [
    {
      "movie_id": 100,
      "info": "German",
      "info_type_id": 10,
    },
    {
      "movie_id": 200,
      "info": "Swedish",
      "info_type_id": 10,
    },
    {
      "movie_id": 300,
      "info": "German",
      "info_type_id": 10,
    },
  ];
  candidate_titles = (() => {
    const _src = company_type;
    return _query(_src, [
      {
        items: movie_companies,
        on: (ct, mc) => (_equal(mc.company_type_id, ct.ct_id)),
      },
      {
        items: movie_info,
        on: (ct, mc, mi) => (_equal(mi.movie_id, mc.movie_id)),
      },
      {
        items: info_type,
        on: (ct, mc, mi, it) => (_equal(it.it_id, mi.info_type_id)),
      },
      {
        items: title,
        on: (ct, mc, mi, it, t) => (_equal(t.t_id, mc.movie_id)),
      },
    ], {
      select: (ct, mc, mi, it, t) => t.title,
      where: (
        ct,
        mc,
        mi,
        it,
        t,
      ) => ((((_equal(ct.kind, "production companies") &&
        _contains(mc.note, "(theatrical)")) &&
        _contains(mc.note, "(France)")) && (t.production_year > 2005)) && ([
          "Sweden",
          "Norway",
          "Germany",
          "Denmark",
          "Swedish",
          "Denish",
          "Norwegian",
          "German",
        ].includes(mi.info))),
    });
  })();
  result = [{ "typical_european_movie": _min(candidate_titles) }];
  console.log(_json(result));
  test_Q5_finds_the_lexicographically_first_qualifying_title();
}
function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
