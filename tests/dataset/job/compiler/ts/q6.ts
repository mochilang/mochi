// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:01Z
// Source: tests/dataset/job/q6.mochi

let cast_info: { [key: string]: number }[];
let keyword: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q6_finds_marvel_movie_with_Robert_Downey(): void {
  if (
    !(_equal(result, [
      {
        "movie_keyword": "marvel-cinematic-universe",
        "actor_name": "Downey Robert Jr.",
        "marvel_movie": "Iron Man 3",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  cast_info = [
    {
      "movie_id": 1,
      "person_id": 101,
    },
    {
      "movie_id": 2,
      "person_id": 102,
    },
  ];
  keyword = [
    {
      "id": 100,
      "keyword": "marvel-cinematic-universe",
    },
    {
      "id": 200,
      "keyword": "other",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 100,
    },
    {
      "movie_id": 2,
      "keyword_id": 200,
    },
  ];
  name = [
    {
      "id": 101,
      "name": "Downey Robert Jr.",
    },
    {
      "id": 102,
      "name": "Chris Evans",
    },
  ];
  title = [
    {
      "id": 1,
      "title": "Iron Man 3",
      "production_year": 2013,
    },
    {
      "id": 2,
      "title": "Old Movie",
      "production_year": 2000,
    },
  ];
  result = (() => {
    const _src = cast_info;
    const _res = [];
    for (const ci of _src) {
      for (const mk of movie_keyword) {
        if (!(ci.movie_id == mk.movie_id)) continue;
        for (const k of keyword) {
          if (!(_equal(mk.keyword_id, k.id))) continue;
          for (const n of name) {
            if (!(_equal(ci.person_id, n.id))) continue;
            for (const t of title) {
              if (!(_equal(ci.movie_id, t.id))) continue;
              if (
                !(((_equal(k.keyword, "marvel-cinematic-universe") &&
                  n.name.includes("Downey")) && n.name.includes("Robert")) &&
                  (t.production_year > 2010))
              ) continue;
              _res.push({
                "movie_keyword": k.keyword,
                "actor_name": n.name,
                "marvel_movie": t.title,
              });
            }
          }
        }
      }
    }
    return _res;
  })();
  console.log(_json(result));
  test_Q6_finds_marvel_movie_with_Robert_Downey();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
