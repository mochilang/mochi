// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:44Z
// Source: /workspace/mochi/tests/dataset/job/q28.mochi

let allowed_countries: string[];
let allowed_keywords: string[];
let comp_cast_type: Record<string, any>[];
let company_name: Record<string, any>[];
let company_type: { [key: string]: number }[];
let complete_cast: { [key: string]: number }[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let kind_type: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: Record<string, any>[];
let movie_info: Record<string, any>[];
let movie_info_idx: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q28_finds_euro_dark_movie_with_minimal_values(): void {
  if (
    !(_equal(result, {
      "movie_company": "Euro Films Ltd.",
      "rating": 7.2,
      "complete_euro_dark_movie": "Dark Euro Film",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  comp_cast_type = [
    {
      "id": 1,
      "kind": "crew",
    },
    {
      "id": 2,
      "kind": "complete+verified",
    },
    {
      "id": 3,
      "kind": "partial",
    },
  ];
  complete_cast = [
    {
      "movie_id": 1,
      "subject_id": 1,
      "status_id": 3,
    },
    {
      "movie_id": 2,
      "subject_id": 1,
      "status_id": 2,
    },
  ];
  company_name = [
    {
      "id": 1,
      "name": "Euro Films Ltd.",
      "country_code": "[gb]",
    },
    {
      "id": 2,
      "name": "US Studios",
      "country_code": "[us]",
    },
  ];
  company_type = [
    { "id": 1 },
    { "id": 2 },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
      "company_type_id": 1,
      "note": "production (2005) (UK)",
    },
    {
      "movie_id": 2,
      "company_id": 2,
      "company_type_id": 1,
      "note": "production (USA)",
    },
  ];
  info_type = [
    {
      "id": 1,
      "info": "countries",
    },
    {
      "id": 2,
      "info": "rating",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "blood",
    },
    {
      "id": 2,
      "keyword": "romance",
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "movie",
    },
    {
      "id": 2,
      "kind": "episode",
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info_type_id": 1,
      "info": "Germany",
    },
    {
      "movie_id": 2,
      "info_type_id": 1,
      "info": "USA",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 1,
      "info_type_id": 2,
      "info": 7.2,
    },
    {
      "movie_id": 2,
      "info_type_id": 2,
      "info": 9,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 1,
    },
    {
      "movie_id": 2,
      "keyword_id": 2,
    },
  ];
  title = [
    {
      "id": 1,
      "kind_id": 1,
      "production_year": 2005,
      "title": "Dark Euro Film",
    },
    {
      "id": 2,
      "kind_id": 1,
      "production_year": 2005,
      "title": "US Film",
    },
  ];
  allowed_keywords = [
    "murder",
    "murder-in-title",
    "blood",
    "violence",
  ];
  allowed_countries = [
    "Sweden",
    "Norway",
    "Germany",
    "Denmark",
    "Swedish",
    "Danish",
    "Norwegian",
    "German",
    "USA",
    "American",
  ];
  matches = (() => {
    const _src = complete_cast;
    const _res = [];
    for (const cc of _src) {
      for (const cct1 of comp_cast_type) {
        if (!(cct1.id == cc.subject_id)) continue;
        for (const cct2 of comp_cast_type) {
          if (!(cct2.id == cc.status_id)) continue;
          for (const mc of movie_companies) {
            if (!(mc.movie_id == cc.movie_id)) continue;
            for (const cn of company_name) {
              if (!(cn.id == mc.company_id)) continue;
              for (const ct of company_type) {
                if (!(ct.id == mc.company_type_id)) continue;
                for (const mk of movie_keyword) {
                  if (!(mk.movie_id == cc.movie_id)) continue;
                  for (const k of keyword) {
                    if (!(k.id == mk.keyword_id)) continue;
                    for (const mi of movie_info) {
                      if (!(mi.movie_id == cc.movie_id)) continue;
                      for (const it1 of info_type) {
                        if (!(it1.id == mi.info_type_id)) continue;
                        for (const mi_idx of movie_info_idx) {
                          if (!(mi_idx.movie_id == cc.movie_id)) continue;
                          for (const it2 of info_type) {
                            if (!(it2.id == mi_idx.info_type_id)) continue;
                            for (const t of title) {
                              if (!(t.id == cc.movie_id)) continue;
                              for (const kt of kind_type) {
                                if (!(kt.id == t.kind_id)) continue;
                                if (
                                  !((((((((((((cct1.kind == "crew") &&
                                    (cct2.kind != "complete+verified")) &&
                                    (cn.country_code != "[us]")) &&
                                    (it1.info == "countries")) &&
                                    (it2.info == "rating")) &&
                                    (allowed_keywords.includes(k.keyword))) &&
                                    ([
                                      "movie",
                                      "episode",
                                    ].includes(kt.kind))) &&
                                    (mc.note.includes("(USA)") == false)) &&
                                    mc.note.includes("(200")) &&
                                    (allowed_countries.includes(mi.info))) &&
                                    (mi_idx.info < 8.5)) &&
                                    (t.production_year > 2000))
                                ) continue;
                                _res.push({
                                  "company": cn.name,
                                  "rating": mi_idx.info,
                                  "title": t.title,
                                });
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "movie_company": _min(matches.map((x) => x.company)),
    "rating": _min(matches.map((x) => x.rating)),
    "complete_euro_dark_movie": _min(matches.map((x) => x.title)),
  };
  console.log(_json(result));
  test_Q28_finds_euro_dark_movie_with_minimal_values();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
