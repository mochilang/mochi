// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:02Z
// Source: tests/dataset/job/q7.mochi

let aka_name: Record<string, any>[];
let cast_info: { [key: string]: number }[];
let info_type: Record<string, any>[];
let link_type: Record<string, any>[];
let movie_link: { [key: string]: number }[];
let name: Record<string, any>[];
let person_info: Record<string, any>[];
let result: Record<string, any>[];
let rows: Record<string, any>[];
let title: Record<string, any>[];

function test_Q7_finds_movie_features_biography_for_person(): void {
  if (
    !(_equal(result, [
      {
        "of_person": "Alan Brown",
        "biography_movie": "Feature Film",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  aka_name = [
    {
      "person_id": 1,
      "name": "Anna Mae",
    },
    {
      "person_id": 2,
      "name": "Chris",
    },
  ];
  cast_info = [
    {
      "person_id": 1,
      "movie_id": 10,
    },
    {
      "person_id": 2,
      "movie_id": 20,
    },
  ];
  info_type = [
    {
      "id": 1,
      "info": "mini biography",
    },
    {
      "id": 2,
      "info": "trivia",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "features",
    },
    {
      "id": 2,
      "link": "references",
    },
  ];
  movie_link = [
    {
      "linked_movie_id": 10,
      "link_type_id": 1,
    },
    {
      "linked_movie_id": 20,
      "link_type_id": 2,
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Alan Brown",
      "name_pcode_cf": "B",
      "gender": "m",
    },
    {
      "id": 2,
      "name": "Zoe",
      "name_pcode_cf": "Z",
      "gender": "f",
    },
  ];
  person_info = [
    {
      "person_id": 1,
      "info_type_id": 1,
      "note": "Volker Boehm",
    },
    {
      "person_id": 2,
      "info_type_id": 1,
      "note": "Other",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Feature Film",
      "production_year": 1990,
    },
    {
      "id": 20,
      "title": "Late Film",
      "production_year": 2000,
    },
  ];
  rows = (() => {
    const _src = aka_name;
    const _res = [];
    for (const an of _src) {
      for (const n of name) {
        if (!(_equal(n.id, an.person_id))) continue;
        for (const pi of person_info) {
          if (!(_equal(pi.person_id, an.person_id))) continue;
          for (const it of info_type) {
            if (!(_equal(it.id, pi.info_type_id))) continue;
            for (const ci of cast_info) {
              if (!(_equal(ci.person_id, n.id))) continue;
              for (const t of title) {
                if (!(_equal(t.id, ci.movie_id))) continue;
                for (const ml of movie_link) {
                  if (!(_equal(ml.linked_movie_id, t.id))) continue;
                  for (const lt of link_type) {
                    if (!(_equal(lt.id, ml.link_type_id))) continue;
                    if (
                      !((((((((((((an.name.includes("a") &&
                        _equal(it.info, "mini biography")) &&
                        _equal(lt.link, "features")) &&
                        (n.name_pcode_cf >= "A")) &&
                        (n.name_pcode_cf <= "F")) &&
                        (_equal(n.gender, "m") ||
                          (_equal(n.gender, "f") &&
                            n.name.starts_with("B")))) &&
                        _equal(pi.note, "Volker Boehm")) &&
                        (t.production_year >= 1980)) &&
                        (t.production_year <= 1995)) &&
                        _equal(pi.person_id, an.person_id)) &&
                        _equal(pi.person_id, ci.person_id)) &&
                        _equal(an.person_id, ci.person_id)) &&
                        (ci.movie_id == ml.linked_movie_id))
                    ) continue;
                    _res.push({
                      "person_name": n.name,
                      "movie_title": t.title,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "of_person": _min(rows.map((r) => r.person_name)),
      "biography_movie": _min(rows.map((r) => r.movie_title)),
    },
  ];
  console.log(_json(result));
  test_Q7_finds_movie_features_biography_for_person();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
