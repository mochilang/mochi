// Generated by Mochi TypeScript compiler

let cast_info: Array<Record<string, number>>;
let keyword: Array<Record<string, any>>;
let movie_keyword: Array<Record<string, number>>;
let name: Array<Record<string, any>>;
let result: Array<Record<string, any>>;
let title: Array<Record<string, any>>;

function test_Q6_finds_marvel_movie_with_Robert_Downey(): void {
  if (
    !(_equal(result, [
      {
        "movie_keyword": "marvel-cinematic-universe",
        "actor_name": "Downey Robert Jr.",
        "marvel_movie": "Iron Man 3",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  cast_info = [
    {
      "movie_id": 1,
      "person_id": 101,
    },
    {
      "movie_id": 2,
      "person_id": 102,
    },
  ];
  keyword = [
    {
      "id": 100,
      "keyword": "marvel-cinematic-universe",
    },
    {
      "id": 200,
      "keyword": "other",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 100,
    },
    {
      "movie_id": 2,
      "keyword_id": 200,
    },
  ];
  name = [
    {
      "id": 101,
      "name": "Downey Robert Jr.",
    },
    {
      "id": 102,
      "name": "Chris Evans",
    },
  ];
  title = [
    {
      "id": 1,
      "title": "Iron Man 3",
      "production_year": 2013,
    },
    {
      "id": 2,
      "title": "Old Movie",
      "production_year": 2000,
    },
  ];
  result = (() => {
    const _src = cast_info;
    return _query(_src, [
      { items: movie_keyword, on: (ci, mk) => (ci.movie_id == mk.movie_id) },
      { items: keyword, on: (ci, mk, k) => (_equal(mk.keyword_id, k.id)) },
      { items: name, on: (ci, mk, k, n) => (_equal(ci.person_id, n.id)) },
      { items: title, on: (ci, mk, k, n, t) => (_equal(ci.movie_id, t.id)) },
    ], {
      select: (ci, mk, k, n, t) => ({
        "movie_keyword": k.keyword,
        "actor_name": n.name,
        "marvel_movie": t.title,
      }),
      where: (
        ci,
        mk,
        k,
        n,
        t,
      ) => (((_equal(k.keyword, "marvel-cinematic-universe") &&
        n.name.includes("Downey")) && n.name.includes("Robert")) &&
        (t.production_year > 2010)),
    });
  })();
  console.log(_json(result));
  test_Q6_finds_marvel_movie_with_Robert_Downey();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, undefined]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, undefined]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
