// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:43Z
// Source: /workspace/mochi/tests/dataset/job/q20.mochi

let cast_info: { [key: string]: number }[];
let char_name: Record<string, any>[];
let comp_cast_type: Record<string, any>[];
let complete_cast: { [key: string]: number }[];
let keyword: Record<string, any>[];
let kind_type: Record<string, any>[];
let matches: any[];
let movie_keyword: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q20_finds_complete_cast_Iron_Man_movie(): void {
  if (!(_equal(result, [{ "complete_downey_ironman_movie": "Iron Man" }]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  comp_cast_type = [
    {
      "id": 1,
      "kind": "cast",
    },
    {
      "id": 2,
      "kind": "complete cast",
    },
  ];
  char_name = [
    {
      "id": 1,
      "name": "Tony Stark",
    },
    {
      "id": 2,
      "name": "Sherlock Holmes",
    },
  ];
  complete_cast = [
    {
      "movie_id": 1,
      "subject_id": 1,
      "status_id": 2,
    },
    {
      "movie_id": 2,
      "subject_id": 1,
      "status_id": 2,
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Robert Downey Jr.",
    },
    {
      "id": 2,
      "name": "Another Actor",
    },
  ];
  cast_info = [
    {
      "movie_id": 1,
      "person_role_id": 1,
      "person_id": 1,
    },
    {
      "movie_id": 2,
      "person_role_id": 2,
      "person_id": 2,
    },
  ];
  keyword = [
    {
      "id": 10,
      "keyword": "superhero",
    },
    {
      "id": 20,
      "keyword": "romance",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 10,
    },
    {
      "movie_id": 2,
      "keyword_id": 20,
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "movie",
    },
  ];
  title = [
    {
      "id": 1,
      "kind_id": 1,
      "production_year": 2008,
      "title": "Iron Man",
    },
    {
      "id": 2,
      "kind_id": 1,
      "production_year": 1940,
      "title": "Old Hero",
    },
  ];
  matches = (() => {
    const _src = complete_cast;
    const _res = [];
    for (const cc of _src) {
      for (const cct1 of comp_cast_type) {
        if (!(cct1.id == cc.subject_id)) continue;
        for (const cct2 of comp_cast_type) {
          if (!(cct2.id == cc.status_id)) continue;
          for (const ci of cast_info) {
            if (!(ci.movie_id == cc.movie_id)) continue;
            for (const chn of char_name) {
              if (!(chn.id == ci.person_role_id)) continue;
              for (const n of name) {
                if (!(n.id == ci.person_id)) continue;
                for (const mk of movie_keyword) {
                  if (!(mk.movie_id == cc.movie_id)) continue;
                  for (const k of keyword) {
                    if (!(k.id == mk.keyword_id)) continue;
                    for (const t of title) {
                      if (!(t.id == cc.movie_id)) continue;
                      for (const kt of kind_type) {
                        if (!(kt.id == t.kind_id)) continue;
                        if (
                          !(((((((cct1.kind == "cast") &&
                            cct2.kind.includes("complete")) &&
                            (!chn.name.includes("Sherlock"))) &&
                            (chn.name.includes("Tony Stark") ||
                              chn.name.includes("Iron Man"))) && [
                            "superhero",
                            "sequel",
                            "second-part",
                            "marvel-comics",
                            "based-on-comic",
                            "tv-special",
                            "fight",
                            "violence",
                          ].includes(k.keyword)) && (kt.kind == "movie")) &&
                            (t.production_year > 1950))
                        ) continue;
                        _res.push(t.title);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [{ "complete_downey_ironman_movie": _min(matches) }];
  console.log(_json(result));
  test_Q20_finds_complete_cast_Iron_Man_movie();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
