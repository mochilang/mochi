// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:42Z
// Source: /workspace/mochi/tests/dataset/job/q11.mochi

let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let keyword: Record<string, any>[];
let link_type: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_keyword: { [key: string]: number }[];
let movie_link: { [key: string]: number }[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q11_returns_min_company__link_type_and_title(): void {
  if (
    !(_equal(result, [
      {
        "from_company": "Best Film Co",
        "movie_link_type": "follow-up",
        "non_polish_sequel_movie": "Alpha",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "name": "Best Film Co",
      "country_code": "[us]",
    },
    {
      "id": 2,
      "name": "Warner Studios",
      "country_code": "[de]",
    },
    {
      "id": 3,
      "name": "Polish Films",
      "country_code": "[pl]",
    },
  ];
  company_type = [
    {
      "id": 1,
      "kind": "production companies",
    },
    {
      "id": 2,
      "kind": "distributors",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "sequel",
    },
    {
      "id": 2,
      "keyword": "thriller",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "follow-up",
    },
    {
      "id": 2,
      "link": "follows from",
    },
    {
      "id": 3,
      "link": "remake",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
      "company_type_id": 1,
      "note": null,
    },
    {
      "movie_id": 20,
      "company_id": 2,
      "company_type_id": 1,
      "note": null,
    },
    {
      "movie_id": 30,
      "company_id": 3,
      "company_type_id": 1,
      "note": null,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 10,
      "keyword_id": 1,
    },
    {
      "movie_id": 20,
      "keyword_id": 1,
    },
    {
      "movie_id": 20,
      "keyword_id": 2,
    },
    {
      "movie_id": 30,
      "keyword_id": 1,
    },
  ];
  movie_link = [
    {
      "movie_id": 10,
      "link_type_id": 1,
    },
    {
      "movie_id": 20,
      "link_type_id": 2,
    },
    {
      "movie_id": 30,
      "link_type_id": 3,
    },
  ];
  title = [
    {
      "id": 10,
      "production_year": 1960,
      "title": "Alpha",
    },
    {
      "id": 20,
      "production_year": 1970,
      "title": "Beta",
    },
    {
      "id": 30,
      "production_year": 1985,
      "title": "Polish Movie",
    },
  ];
  matches = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn of _src) {
      for (const mc of movie_companies) {
        if (!(mc.company_id == cn.id)) continue;
        for (const ct of company_type) {
          if (!(ct.id == mc.company_type_id)) continue;
          for (const t of title) {
            if (!(t.id == mc.movie_id)) continue;
            for (const mk of movie_keyword) {
              if (!(mk.movie_id == t.id)) continue;
              for (const k of keyword) {
                if (!(k.id == mk.keyword_id)) continue;
                for (const ml of movie_link) {
                  if (!(ml.movie_id == t.id)) continue;
                  for (const lt of link_type) {
                    if (!(lt.id == ml.link_type_id)) continue;
                    if (
                      !(((((((((((cn.country_code != "[pl]") &&
                        (cn.name.includes("Film") ||
                          cn.name.includes("Warner"))) &&
                        (ct.kind == "production companies")) &&
                        (k.keyword == "sequel")) &&
                        lt.link.includes("follow")) && (mc.note == null)) &&
                        (t.production_year >= 1950)) &&
                        (t.production_year <= 2000)) &&
                        (ml.movie_id == mk.movie_id)) &&
                        (ml.movie_id == mc.movie_id)) &&
                        (mk.movie_id == mc.movie_id))
                    ) continue;
                    _res.push({
                      "company": cn.name,
                      "link": lt.link,
                      "title": t.title,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "from_company": _min(matches.map((x) => x.company)),
      "movie_link_type": _min(matches.map((x) => x.link)),
      "non_polish_sequel_movie": _min(matches.map((x) => x.title)),
    },
  ];
  console.log(_json(result));
  test_Q11_returns_min_company__link_type_and_title();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
