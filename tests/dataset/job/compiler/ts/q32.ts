// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:11Z
// Source: /workspace/mochi/tests/dataset/job/q32.mochi

let joined: Record<string, any>[];
let keyword: Record<string, any>[];
let link_type: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let movie_link: { [key: string]: number }[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q32_finds_movie_link_for_10_000_mile_club(): void {
  if (
    !(_equal(result, {
      "link_type": "sequel",
      "first_movie": "Movie A",
      "second_movie": "Movie C",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  keyword = [
    {
      "id": 1,
      "keyword": "10,000-mile-club",
    },
    {
      "id": 2,
      "keyword": "character-name-in-title",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "sequel",
    },
    {
      "id": 2,
      "link": "remake",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 100,
      "keyword_id": 1,
    },
    {
      "movie_id": 200,
      "keyword_id": 2,
    },
  ];
  movie_link = [
    {
      "movie_id": 100,
      "linked_movie_id": 300,
      "link_type_id": 1,
    },
    {
      "movie_id": 200,
      "linked_movie_id": 400,
      "link_type_id": 2,
    },
  ];
  title = [
    {
      "id": 100,
      "title": "Movie A",
    },
    {
      "id": 200,
      "title": "Movie B",
    },
    {
      "id": 300,
      "title": "Movie C",
    },
    {
      "id": 400,
      "title": "Movie D",
    },
  ];
  joined = (() => {
    const _src = keyword;
    const _res = [];
    for (const k of _src) {
      for (const mk of movie_keyword) {
        if (!(_equal(mk.keyword_id, k.id))) continue;
        for (const t1 of title) {
          if (!(_equal(t1.id, mk.movie_id))) continue;
          for (const ml of movie_link) {
            if (!(_equal(ml.movie_id, t1.id))) continue;
            for (const t2 of title) {
              if (!(_equal(t2.id, ml.linked_movie_id))) continue;
              for (const lt of link_type) {
                if (!(_equal(lt.id, ml.link_type_id))) continue;
                if (!(_equal(k.keyword, "10,000-mile-club"))) continue;
                _res.push({
                  "link_type": lt.link,
                  "first_movie": t1.title,
                  "second_movie": t2.title,
                });
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "link_type": _min(joined.map((r) => r.link_type)),
    "first_movie": _min(joined.map((r) => r.first_movie)),
    "second_movie": _min(joined.map((r) => r.second_movie)),
  };
  console.log(_json([result]));
  test_Q32_finds_movie_link_for_10_000_mile_club();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
