// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:41Z
// Source: /workspace/mochi/tests/dataset/job/q1.mochi

let company_type: Record<string, any>[];
let filtered: Record<string, any>[];
let info_type: Record<string, any>[];
let movie_companies: Record<string, any>[];
let movie_info_idx: { [key: string]: number }[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production(): void {
  if (
    !(_equal(result, {
      "production_note": "ACME (co-production)",
      "movie_title": "Good Movie",
      "movie_year": 1995,
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  company_type = [
    {
      "id": 1,
      "kind": "production companies",
    },
    {
      "id": 2,
      "kind": "distributors",
    },
  ];
  info_type = [
    {
      "id": 10,
      "info": "top 250 rank",
    },
    {
      "id": 20,
      "info": "bottom 10 rank",
    },
  ];
  title = [
    {
      "id": 100,
      "title": "Good Movie",
      "production_year": 1995,
    },
    {
      "id": 200,
      "title": "Bad Movie",
      "production_year": 2000,
    },
  ];
  movie_companies = [
    {
      "movie_id": 100,
      "company_type_id": 1,
      "note": "ACME (co-production)",
    },
    {
      "movie_id": 200,
      "company_type_id": 1,
      "note": "MGM (as Metro-Goldwyn-Mayer Pictures)",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 100,
      "info_type_id": 10,
    },
    {
      "movie_id": 200,
      "info_type_id": 20,
    },
  ];
  filtered = (() => {
    const _src = company_type;
    const _res = [];
    for (const ct of _src) {
      for (const mc of movie_companies) {
        if (!(ct.id == mc.company_type_id)) continue;
        for (const t of title) {
          if (!(t.id == mc.movie_id)) continue;
          for (const mi of movie_info_idx) {
            if (!(mi.movie_id == t.id)) continue;
            for (const it of info_type) {
              if (!(it.id == mi.info_type_id)) continue;
              if (
                !((((ct.kind == "production companies") &&
                  (it.info == "top 250 rank")) &&
                  (!mc.note.includes("(as Metro-Goldwyn-Mayer Pictures)"))) &&
                  (mc.note.includes("(co-production)") ||
                    mc.note.includes("(presents)")))
              ) continue;
              _res.push({
                "note": mc.note,
                "title": t.title,
                "year": t.production_year,
              });
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "production_note": _min(filtered.map((r) => r.note)),
    "movie_title": _min(filtered.map((r) => r.title)),
    "movie_year": _min(filtered.map((r) => r.year)),
  };
  console.log(_json([result]));
  test_Q1_returns_min_note__title_and_year_for_top_ranked_co_production();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
