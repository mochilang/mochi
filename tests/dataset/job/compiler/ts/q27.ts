// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:11Z
// Source: /workspace/mochi/tests/dataset/job/q27.mochi

let comp_cast_type: Record<string, any>[];
let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let complete_cast: { [key: string]: number }[];
let keyword: Record<string, any>[];
let link_type: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let movie_link: { [key: string]: number }[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q27_selects_minimal_company__link_and_title(): void {
  if (
    !(_equal(result, {
      "producing_company": "Best Film",
      "link_type": "follows",
      "complete_western_sequel": "Western Sequel",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  comp_cast_type = [
    {
      "id": 1,
      "kind": "cast",
    },
    {
      "id": 2,
      "kind": "crew",
    },
    {
      "id": 3,
      "kind": "complete",
    },
  ];
  complete_cast = [
    {
      "movie_id": 1,
      "subject_id": 1,
      "status_id": 3,
    },
    {
      "movie_id": 2,
      "subject_id": 2,
      "status_id": 3,
    },
  ];
  company_name = [
    {
      "id": 1,
      "name": "Best Film",
      "country_code": "[se]",
    },
    {
      "id": 2,
      "name": "Polish Film",
      "country_code": "[pl]",
    },
  ];
  company_type = [
    {
      "id": 1,
      "kind": "production companies",
    },
    {
      "id": 2,
      "kind": "other",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "sequel",
    },
    {
      "id": 2,
      "keyword": "remake",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "follows",
    },
    {
      "id": 2,
      "link": "related",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
      "company_type_id": 1,
      "note": null,
    },
    {
      "movie_id": 2,
      "company_id": 2,
      "company_type_id": 1,
      "note": "extra",
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info": "Sweden",
    },
    {
      "movie_id": 2,
      "info": "USA",
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 1,
    },
    {
      "movie_id": 2,
      "keyword_id": 2,
    },
  ];
  movie_link = [
    {
      "movie_id": 1,
      "link_type_id": 1,
    },
    {
      "movie_id": 2,
      "link_type_id": 2,
    },
  ];
  title = [
    {
      "id": 1,
      "production_year": 1980,
      "title": "Western Sequel",
    },
    {
      "id": 2,
      "production_year": 1999,
      "title": "Another Movie",
    },
  ];
  matches = (() => {
    const _src = complete_cast;
    const _res = [];
    for (const cc of _src) {
      for (const cct1 of comp_cast_type) {
        if (!(_equal(cct1.id, cc.subject_id))) continue;
        for (const cct2 of comp_cast_type) {
          if (!(_equal(cct2.id, cc.status_id))) continue;
          for (const t of title) {
            if (!(_equal(t.id, cc.movie_id))) continue;
            for (const ml of movie_link) {
              if (!(_equal(ml.movie_id, t.id))) continue;
              for (const lt of link_type) {
                if (!(_equal(lt.id, ml.link_type_id))) continue;
                for (const mk of movie_keyword) {
                  if (!(_equal(mk.movie_id, t.id))) continue;
                  for (const k of keyword) {
                    if (!(_equal(k.id, mk.keyword_id))) continue;
                    for (const mc of movie_companies) {
                      if (!(_equal(mc.movie_id, t.id))) continue;
                      for (const ct of company_type) {
                        if (!(_equal(ct.id, mc.company_type_id))) continue;
                        for (const cn of company_name) {
                          if (!(_equal(cn.id, mc.company_id))) continue;
                          for (const mi of movie_info) {
                            if (!(_equal(mi.movie_id, t.id))) continue;
                            if (
                              !(((((((((((((((((((((_equal(cct1.kind, "cast") ||
                                _equal(cct1.kind, "crew")) &&
                                _equal(cct2.kind, "complete")) &&
                                !_equal(cn.country_code, "[pl]")) &&
                                (cn.name.includes("Film") ||
                                  cn.name.includes("Warner"))) &&
                                _equal(ct.kind, "production companies")) &&
                                _equal(k.keyword, "sequel")) &&
                                lt.link.includes("follow")) &&
                                _equal(mc.note, null)) &&
                                (((_equal(mi.info, "Sweden") ||
                                  _equal(mi.info, "Germany")) ||
                                  _equal(mi.info, "Swedish")) ||
                                  _equal(mi.info, "German"))) &&
                                (t.production_year >= 1950)) &&
                                (t.production_year <= 2000)) &&
                                (ml.movie_id == mk.movie_id)) &&
                                (ml.movie_id == mc.movie_id)) &&
                                (mk.movie_id == mc.movie_id)) &&
                                _equal(ml.movie_id, mi.movie_id)) &&
                                _equal(mk.movie_id, mi.movie_id)) &&
                                _equal(mc.movie_id, mi.movie_id)) &&
                                (ml.movie_id == cc.movie_id)) &&
                                (mk.movie_id == cc.movie_id)) &&
                                (mc.movie_id == cc.movie_id)) &&
                                _equal(mi.movie_id, cc.movie_id))
                            ) continue;
                            _res.push({
                              "company": cn.name,
                              "link": lt.link,
                              "title": t.title,
                            });
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "producing_company": _min(matches.map((x) => x.company)),
    "link_type": _min(matches.map((x) => x.link)),
    "complete_western_sequel": _min(matches.map((x) => x.title)),
  };
  console.log(_json(result));
  test_Q27_selects_minimal_company__link_and_title();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
