// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:42Z
// Source: /workspace/mochi/tests/dataset/job/q13.mochi

let candidates: Record<string, any>[];
let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let info_type: Record<string, any>[];
let kind_type: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_info_idx: Record<string, any>[];
let result: Record<string, any>;
let title: Record<string, any>[];

function test_Q13_finds_earliest_German_movie_info(): void {
  if (
    !(_equal(result, {
      "release_date": "1997-05-10",
      "rating": "6.0",
      "german_movie": "Alpha",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "country_code": "[de]",
    },
    {
      "id": 2,
      "country_code": "[us]",
    },
  ];
  company_type = [
    {
      "id": 1,
      "kind": "production companies",
    },
    {
      "id": 2,
      "kind": "distributors",
    },
  ];
  info_type = [
    {
      "id": 1,
      "info": "rating",
    },
    {
      "id": 2,
      "info": "release dates",
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "movie",
    },
    {
      "id": 2,
      "kind": "video",
    },
  ];
  title = [
    {
      "id": 10,
      "kind_id": 1,
      "title": "Alpha",
    },
    {
      "id": 20,
      "kind_id": 1,
      "title": "Beta",
    },
    {
      "id": 30,
      "kind_id": 2,
      "title": "Gamma",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
      "company_type_id": 1,
    },
    {
      "movie_id": 20,
      "company_id": 1,
      "company_type_id": 1,
    },
    {
      "movie_id": 30,
      "company_id": 2,
      "company_type_id": 1,
    },
  ];
  movie_info = [
    {
      "movie_id": 10,
      "info_type_id": 2,
      "info": "1997-05-10",
    },
    {
      "movie_id": 20,
      "info_type_id": 2,
      "info": "1998-03-20",
    },
    {
      "movie_id": 30,
      "info_type_id": 2,
      "info": "1999-07-30",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 10,
      "info_type_id": 1,
      "info": "6.0",
    },
    {
      "movie_id": 20,
      "info_type_id": 1,
      "info": "7.5",
    },
    {
      "movie_id": 30,
      "info_type_id": 1,
      "info": "5.5",
    },
  ];
  candidates = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn of _src) {
      for (const mc of movie_companies) {
        if (!(mc.company_id == cn.id)) continue;
        for (const ct of company_type) {
          if (!(ct.id == mc.company_type_id)) continue;
          for (const t of title) {
            if (!(t.id == mc.movie_id)) continue;
            for (const kt of kind_type) {
              if (!(kt.id == t.kind_id)) continue;
              for (const mi of movie_info) {
                if (!(mi.movie_id == t.id)) continue;
                for (const it2 of info_type) {
                  if (!(it2.id == mi.info_type_id)) continue;
                  for (const miidx of movie_info_idx) {
                    if (!(miidx.movie_id == t.id)) continue;
                    for (const it of info_type) {
                      if (!(it.id == miidx.info_type_id)) continue;
                      if (
                        !(((((cn.country_code == "[de]") &&
                          (ct.kind == "production companies")) &&
                          (it.info == "rating")) &&
                          (it2.info == "release dates")) &&
                          (kt.kind == "movie"))
                      ) continue;
                      _res.push({
                        "release_date": mi.info,
                        "rating": miidx.info,
                        "german_movie": t.title,
                      });
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "release_date": ((() => {
      const _src = candidates;
      var _items = [];
      for (const x of _src) {
        _items.push({ x: x });
      }
      let _pairs = _items.map((it) => {
        const x = it;
        return { item: it, key: x.release_date };
      });
      _pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if (typeof ak === "number" && typeof bk === "number") return ak - bk;
        if (typeof ak === "string" && typeof bk === "string") {
          return ak < bk
            ? -1
            : (ak > bk ? 1 : 0);
        }
        return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
      });
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const _it of _items) {
        const x = _it.x;
        _res.push(x.release_date);
      }
      return _res;
    })())[0],
    "rating": ((() => {
      const _src = candidates;
      var _items = [];
      for (const x of _src) {
        _items.push({ x: x });
      }
      let _pairs = _items.map((it) => {
        const x = it;
        return { item: it, key: x.rating };
      });
      _pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if (typeof ak === "number" && typeof bk === "number") return ak - bk;
        if (typeof ak === "string" && typeof bk === "string") {
          return ak < bk
            ? -1
            : (ak > bk ? 1 : 0);
        }
        return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
      });
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const _it of _items) {
        const x = _it.x;
        _res.push(x.rating);
      }
      return _res;
    })())[0],
    "german_movie": ((() => {
      const _src = candidates;
      var _items = [];
      for (const x of _src) {
        _items.push({ x: x });
      }
      let _pairs = _items.map((it) => {
        const x = it;
        return { item: it, key: x.german_movie };
      });
      _pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if (typeof ak === "number" && typeof bk === "number") return ak - bk;
        if (typeof ak === "string" && typeof bk === "string") {
          return ak < bk
            ? -1
            : (ak > bk ? 1 : 0);
        }
        return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
      });
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const _it of _items) {
        const x = _it.x;
        _res.push(x.german_movie);
      }
      return _res;
    })())[0],
  };
  console.log(_json(result));
  test_Q13_finds_earliest_German_movie_info();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
