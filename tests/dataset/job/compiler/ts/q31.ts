// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:13:27Z
// Source: /workspace/mochi/tests/dataset/job/q31.mochi

let cast_info: Record<string, any>[];
let company_name: Record<string, any>[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info: Record<string, any>[];
let movie_info_idx: { [key: string]: number }[];
let movie_keyword: { [key: string]: number }[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let title: Record<string, any>[];

function test_Q31_finds_minimal_budget__votes__writer_and_title(): void {
  if (
    !(_equal(result, [
      {
        "movie_budget": "Horror",
        "movie_votes": 800,
        "writer": "Arthur",
        "violent_liongate_movie": "Alpha Horror",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  cast_info = [
    {
      "movie_id": 1,
      "person_id": 1,
      "note": "(writer)",
    },
    {
      "movie_id": 2,
      "person_id": 2,
      "note": "(story)",
    },
    {
      "movie_id": 3,
      "person_id": 3,
      "note": "(writer)",
    },
  ];
  company_name = [
    {
      "id": 1,
      "name": "Lionsgate Pictures",
    },
    {
      "id": 2,
      "name": "Other Studio",
    },
  ];
  info_type = [
    {
      "id": 10,
      "info": "genres",
    },
    {
      "id": 20,
      "info": "votes",
    },
  ];
  keyword = [
    {
      "id": 100,
      "keyword": "murder",
    },
    {
      "id": 200,
      "keyword": "comedy",
    },
  ];
  movie_companies = [
    {
      "movie_id": 1,
      "company_id": 1,
    },
    {
      "movie_id": 2,
      "company_id": 1,
    },
    {
      "movie_id": 3,
      "company_id": 2,
    },
  ];
  movie_info = [
    {
      "movie_id": 1,
      "info_type_id": 10,
      "info": "Horror",
    },
    {
      "movie_id": 2,
      "info_type_id": 10,
      "info": "Thriller",
    },
    {
      "movie_id": 3,
      "info_type_id": 10,
      "info": "Comedy",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 1,
      "info_type_id": 20,
      "info": 1000,
    },
    {
      "movie_id": 2,
      "info_type_id": 20,
      "info": 800,
    },
    {
      "movie_id": 3,
      "info_type_id": 20,
      "info": 500,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 1,
      "keyword_id": 100,
    },
    {
      "movie_id": 2,
      "keyword_id": 100,
    },
    {
      "movie_id": 3,
      "keyword_id": 200,
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Arthur",
      "gender": "m",
    },
    {
      "id": 2,
      "name": "Bob",
      "gender": "m",
    },
    {
      "id": 3,
      "name": "Carla",
      "gender": "f",
    },
  ];
  title = [
    {
      "id": 1,
      "title": "Alpha Horror",
    },
    {
      "id": 2,
      "title": "Beta Blood",
    },
    {
      "id": 3,
      "title": "Gamma Comedy",
    },
  ];
  matches = (() => {
    const _src = cast_info;
    const _res = [];
    for (const ci of _src) {
      for (const n of name) {
        if (!(_equal(n.id, ci.person_id))) continue;
        for (const t of title) {
          if (!(_equal(t.id, ci.movie_id))) continue;
          for (const mi of movie_info) {
            if (!(_equal(mi.movie_id, t.id))) continue;
            for (const mi_idx of movie_info_idx) {
              if (!(_equal(mi_idx.movie_id, t.id))) continue;
              for (const mk of movie_keyword) {
                if (!(_equal(mk.movie_id, t.id))) continue;
                for (const k of keyword) {
                  if (!(_equal(k.id, mk.keyword_id))) continue;
                  for (const mc of movie_companies) {
                    if (!(_equal(mc.movie_id, t.id))) continue;
                    for (const cn of company_name) {
                      if (!(_equal(cn.id, mc.company_id))) continue;
                      for (const it1 of info_type) {
                        if (!(_equal(it1.id, mi.info_type_id))) continue;
                        for (const it2 of info_type) {
                          if (!(_equal(it2.id, mi_idx.info_type_id))) continue;
                          if (
                            !(((((([
                              "(writer)",
                              "(head writer)",
                              "(written by)",
                              "(story)",
                              "(story editor)",
                            ].includes(ci.note) &&
                              _starts_with(cn.name, "Lionsgate")) &&
                              _equal(it1.info, "genres")) &&
                              _equal(it2.info, "votes")) && [
                              "murder",
                              "violence",
                              "blood",
                              "gore",
                              "death",
                              "female-nudity",
                              "hospital",
                            ].includes(k.keyword)) && [
                              "Horror",
                              "Thriller",
                            ].includes(mi.info)) && _equal(n.gender, "m"))
                          ) continue;
                          _res.push({
                            "movie_budget": mi.info,
                            "movie_votes": mi_idx.info,
                            "writer": n.name,
                            "violent_liongate_movie": t.title,
                          });
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "movie_budget": _min(matches.map((r) => r.movie_budget)),
      "movie_votes": _min(matches.map((r) => r.movie_votes)),
      "writer": _min(matches.map((r) => r.writer)),
      "violent_liongate_movie": _min(
        matches.map((r) => r.violent_liongate_movie),
      ),
    },
  ];
  console.log(_json(result));
  test_Q31_finds_minimal_budget__votes__writer_and_title();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

function _starts_with(str: any, prefix: any): boolean {
  return String(str).startsWith(String(prefix));
}

main();
