// Generated by Mochi compiler v0.10.25 on 2025-07-13T12:57:03Z
// Source: tests/dataset/job/q10.mochi

let cast_info: Record<string, any>[];
let char_name: Record<string, any>[];
let company_name: Record<string, any>[];
let company_type: { [key: string]: number }[];
let matches: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let result: Record<string, any>[];
let role_type: Record<string, any>[];
let title: Record<string, any>[];

function test_Q10_finds_uncredited_voice_actor_in_Russian_movie(): void {
  if (
    !(_equal(result, [
      {
        "uncredited_voiced_character": "Ivan",
        "russian_movie": "Vodka Dreams",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  char_name = [
    {
      "id": 1,
      "name": "Ivan",
    },
    {
      "id": 2,
      "name": "Alex",
    },
  ];
  cast_info = [
    {
      "movie_id": 10,
      "person_role_id": 1,
      "role_id": 1,
      "note": "Soldier (voice) (uncredited)",
    },
    {
      "movie_id": 11,
      "person_role_id": 2,
      "role_id": 1,
      "note": "(voice)",
    },
  ];
  company_name = [
    {
      "id": 1,
      "country_code": "[ru]",
    },
    {
      "id": 2,
      "country_code": "[us]",
    },
  ];
  company_type = [
    { "id": 1 },
    { "id": 2 },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
      "company_type_id": 1,
    },
    {
      "movie_id": 11,
      "company_id": 2,
      "company_type_id": 1,
    },
  ];
  role_type = [
    {
      "id": 1,
      "role": "actor",
    },
    {
      "id": 2,
      "role": "director",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Vodka Dreams",
      "production_year": 2006,
    },
    {
      "id": 11,
      "title": "Other Film",
      "production_year": 2004,
    },
  ];
  matches = (() => {
    const _src = char_name;
    const _res = [];
    for (const chn of _src) {
      for (const ci of cast_info) {
        if (!(_equal(chn.id, ci.person_role_id))) continue;
        for (const rt of role_type) {
          if (!(_equal(rt.id, ci.role_id))) continue;
          for (const t of title) {
            if (!(_equal(t.id, ci.movie_id))) continue;
            for (const mc of movie_companies) {
              if (!(_equal(mc.movie_id, t.id))) continue;
              for (const cn of company_name) {
                if (!(_equal(cn.id, mc.company_id))) continue;
                for (const ct of company_type) {
                  if (!(ct.id == mc.company_type_id)) continue;
                  if (
                    !((((ci.note.includes("(voice)") &&
                      ci.note.includes("(uncredited)")) &&
                      _equal(cn.country_code, "[ru]")) &&
                      _equal(rt.role, "actor")) && (t.production_year > 2005))
                  ) continue;
                  _res.push({
                    "character": chn.name,
                    "movie": t.title,
                  });
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "uncredited_voiced_character": _min(matches.map((x) => x.character)),
      "russian_movie": _min(matches.map((x) => x.movie)),
    },
  ];
  console.log(_json(result));
  test_Q10_finds_uncredited_voice_actor_in_Russian_movie();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
