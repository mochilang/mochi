// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:09:11Z
// Source: /workspace/mochi/tests/dataset/job/q22.mochi

let company_name: Record<string, any>[];
let company_type: Record<string, any>[];
let info_type: Record<string, any>[];
let keyword: Record<string, any>[];
let kind_type: Record<string, any>[];
let movie_companies: Record<string, any>[];
let movie_info: Record<string, any>[];
let movie_info_idx: Record<string, any>[];
let movie_keyword: { [key: string]: number }[];
let result: Record<string, any>[];
let rows: Record<string, any>[];
let title: Record<string, any>[];

function test_Q22_finds_western_violent_movie_with_low_rating(): void {
  if (
    !(_equal(result, [
      {
        "movie_company": "Euro Films",
        "rating": 6.5,
        "western_violent_movie": "Violent Western",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "name": "Euro Films",
      "country_code": "[de]",
    },
    {
      "id": 2,
      "name": "US Films",
      "country_code": "[us]",
    },
  ];
  company_type = [
    {
      "id": 1,
      "kind": "production",
    },
  ];
  info_type = [
    {
      "id": 10,
      "info": "countries",
    },
    {
      "id": 20,
      "info": "rating",
    },
  ];
  keyword = [
    {
      "id": 1,
      "keyword": "murder",
    },
    {
      "id": 2,
      "keyword": "comedy",
    },
  ];
  kind_type = [
    {
      "id": 100,
      "kind": "movie",
    },
    {
      "id": 200,
      "kind": "episode",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
      "company_type_id": 1,
      "note": "release (2009) (worldwide)",
    },
    {
      "movie_id": 20,
      "company_id": 2,
      "company_type_id": 1,
      "note": "release (2007) (USA)",
    },
  ];
  movie_info = [
    {
      "movie_id": 10,
      "info_type_id": 10,
      "info": "Germany",
    },
    {
      "movie_id": 20,
      "info_type_id": 10,
      "info": "USA",
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 10,
      "info_type_id": 20,
      "info": 6.5,
    },
    {
      "movie_id": 20,
      "info_type_id": 20,
      "info": 7.8,
    },
  ];
  movie_keyword = [
    {
      "movie_id": 10,
      "keyword_id": 1,
    },
    {
      "movie_id": 20,
      "keyword_id": 2,
    },
  ];
  title = [
    {
      "id": 10,
      "kind_id": 100,
      "production_year": 2009,
      "title": "Violent Western",
    },
    {
      "id": 20,
      "kind_id": 100,
      "production_year": 2007,
      "title": "Old Western",
    },
  ];
  rows = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn of _src) {
      for (const mc of movie_companies) {
        if (!(_equal(cn.id, mc.company_id))) continue;
        for (const ct of company_type) {
          if (!(_equal(ct.id, mc.company_type_id))) continue;
          for (const t of title) {
            if (!(_equal(t.id, mc.movie_id))) continue;
            for (const mk of movie_keyword) {
              if (!(_equal(mk.movie_id, t.id))) continue;
              for (const k of keyword) {
                if (!(_equal(k.id, mk.keyword_id))) continue;
                for (const mi of movie_info) {
                  if (!(_equal(mi.movie_id, t.id))) continue;
                  for (const it1 of info_type) {
                    if (!(_equal(it1.id, mi.info_type_id))) continue;
                    for (const mi_idx of movie_info_idx) {
                      if (!(_equal(mi_idx.movie_id, t.id))) continue;
                      for (const it2 of info_type) {
                        if (!(_equal(it2.id, mi_idx.info_type_id))) continue;
                        for (const kt of kind_type) {
                          if (!(_equal(kt.id, t.kind_id))) continue;
                          if (
                            !(((((((((((((((((((((((((!_equal(
                              cn.country_code,
                              "[us]",
                            ) && _equal(it1.info, "countries")) &&
                              _equal(it2.info, "rating")) &&
                              (((_equal(k.keyword, "murder") ||
                                _equal(k.keyword, "murder-in-title")) ||
                                _equal(k.keyword, "blood")) ||
                                _equal(k.keyword, "violence"))) &&
                              (_equal(kt.kind, "movie") ||
                                _equal(kt.kind, "episode"))) &&
                              _equal(mc.note.includes("(USA)"), false)) &&
                              mc.note.includes("(200")) &&
                              (((_equal(mi.info, "Germany") ||
                                _equal(mi.info, "German")) ||
                                _equal(mi.info, "USA")) ||
                                _equal(mi.info, "American"))) &&
                              (mi_idx.info < 7)) &&
                              (t.production_year > 2008)) &&
                              _equal(kt.id, t.kind_id)) &&
                              _equal(t.id, mi.movie_id)) &&
                              _equal(t.id, mk.movie_id)) &&
                              _equal(t.id, mi_idx.movie_id)) &&
                              _equal(t.id, mc.movie_id)) &&
                              _equal(mk.movie_id, mi.movie_id)) &&
                              _equal(mk.movie_id, mi_idx.movie_id)) &&
                              _equal(mk.movie_id, mc.movie_id)) &&
                              _equal(mi.movie_id, mi_idx.movie_id)) &&
                              _equal(mi.movie_id, mc.movie_id)) &&
                              _equal(mc.movie_id, mi_idx.movie_id)) &&
                              _equal(k.id, mk.keyword_id)) &&
                              _equal(it1.id, mi.info_type_id)) &&
                              _equal(it2.id, mi_idx.info_type_id)) &&
                              _equal(ct.id, mc.company_type_id)) &&
                              _equal(cn.id, mc.company_id))
                          ) continue;
                          _res.push({
                            "company": cn.name,
                            "rating": mi_idx.info,
                            "title": t.title,
                          });
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "movie_company": _min(rows.map((r) => r.company)),
      "rating": _min(rows.map((r) => r.rating)),
      "western_violent_movie": _min(rows.map((r) => r.title)),
    },
  ];
  console.log(_json(result));
  test_Q22_finds_western_violent_movie_with_low_rating();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
