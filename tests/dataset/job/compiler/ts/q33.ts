// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:38:44Z
// Source: /workspace/mochi/tests/dataset/job/q33.mochi

let company_name: Record<string, any>[];
let info_type: Record<string, any>[];
let kind_type: Record<string, any>[];
let link_type: Record<string, any>[];
let movie_companies: { [key: string]: number }[];
let movie_info_idx: Record<string, any>[];
let movie_link: { [key: string]: number }[];
let result: Record<string, any>[];
let rows: Record<string, any>[];
let title: Record<string, any>[];

function test_Q33_finds_linked_TV_series_with_low_rated_sequel(): void {
  if (
    !(_equal(result, [
      {
        "first_company": "US Studio",
        "second_company": "GB Studio",
        "first_rating": "7.0",
        "second_rating": "2.5",
        "first_movie": "Series A",
        "second_movie": "Series B",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  company_name = [
    {
      "id": 1,
      "name": "US Studio",
      "country_code": "[us]",
    },
    {
      "id": 2,
      "name": "GB Studio",
      "country_code": "[gb]",
    },
  ];
  info_type = [
    {
      "id": 1,
      "info": "rating",
    },
    {
      "id": 2,
      "info": "other",
    },
  ];
  kind_type = [
    {
      "id": 1,
      "kind": "tv series",
    },
    {
      "id": 2,
      "kind": "movie",
    },
  ];
  link_type = [
    {
      "id": 1,
      "link": "follows",
    },
    {
      "id": 2,
      "link": "remake of",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 1,
    },
    {
      "movie_id": 20,
      "company_id": 2,
    },
  ];
  movie_info_idx = [
    {
      "movie_id": 10,
      "info_type_id": 1,
      "info": "7.0",
    },
    {
      "movie_id": 20,
      "info_type_id": 1,
      "info": "2.5",
    },
  ];
  movie_link = [
    {
      "movie_id": 10,
      "linked_movie_id": 20,
      "link_type_id": 1,
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Series A",
      "kind_id": 1,
      "production_year": 2004,
    },
    {
      "id": 20,
      "title": "Series B",
      "kind_id": 1,
      "production_year": 2006,
    },
  ];
  rows = (() => {
    const _src = company_name;
    const _res = [];
    for (const cn1 of _src) {
      for (const mc1 of movie_companies) {
        if (!(cn1.id == mc1.company_id)) continue;
        for (const t1 of title) {
          if (!(t1.id == mc1.movie_id)) continue;
          for (const mi_idx1 of movie_info_idx) {
            if (!(mi_idx1.movie_id == t1.id)) continue;
            for (const it1 of info_type) {
              if (!(it1.id == mi_idx1.info_type_id)) continue;
              for (const kt1 of kind_type) {
                if (!(kt1.id == t1.kind_id)) continue;
                for (const ml of movie_link) {
                  if (!(ml.movie_id == t1.id)) continue;
                  for (const t2 of title) {
                    if (!(t2.id == ml.linked_movie_id)) continue;
                    for (const mi_idx2 of movie_info_idx) {
                      if (!(mi_idx2.movie_id == t2.id)) continue;
                      for (const it2 of info_type) {
                        if (!(it2.id == mi_idx2.info_type_id)) continue;
                        for (const kt2 of kind_type) {
                          if (!(kt2.id == t2.kind_id)) continue;
                          for (const mc2 of movie_companies) {
                            if (!(mc2.movie_id == t2.id)) continue;
                            for (const cn2 of company_name) {
                              if (!(cn2.id == mc2.company_id)) continue;
                              for (const lt of link_type) {
                                if (!(lt.id == ml.link_type_id)) continue;
                                if (
                                  !(((((((((cn1.country_code == "[us]") &&
                                    (it1.info == "rating")) &&
                                    (it2.info == "rating")) &&
                                    (kt1.kind == "tv series")) &&
                                    (kt2.kind == "tv series")) &&
                                    (((lt.link == "sequel") ||
                                      (lt.link == "follows")) ||
                                      (lt.link == "followed by"))) &&
                                    (mi_idx2.info < "3.0")) &&
                                    (t2.production_year >= 2005)) &&
                                    (t2.production_year <= 2008))
                                ) continue;
                                _res.push({
                                  "first_company": cn1.name,
                                  "second_company": cn2.name,
                                  "first_rating": mi_idx1.info,
                                  "second_rating": mi_idx2.info,
                                  "first_movie": t1.title,
                                  "second_movie": t2.title,
                                });
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = [
    {
      "first_company": _min(rows.map((r) => r.first_company)),
      "second_company": _min(rows.map((r) => r.second_company)),
      "first_rating": _min(rows.map((r) => r.first_rating)),
      "second_rating": _min(rows.map((r) => r.second_rating)),
      "first_movie": _min(rows.map((r) => r.first_movie)),
      "second_movie": _min(rows.map((r) => r.second_movie)),
    },
  ];
  console.log(_json(result));
  test_Q33_finds_linked_TV_series_with_low_rated_sequel();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

main();
