// Generated by Mochi TypeScript compiler

let aka_name: Record<string, any>[];
let cast_info: Record<string, any>[];
let company_name: Record<string, any>[];
let eligible: Record<string, any>[];
let movie_companies: Record<string, any>[];
let name: Record<string, any>[];
let result: Record<string, any>[];
let role_type: Record<string, any>[];
let title: Record<string, any>[];

function test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing(): void {
  if (
    !(_equal(result, [
      {
        "actress_pseudonym": "Y. S.",
        "japanese_movie_dubbed": "Dubbed Film",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  aka_name = [
    {
      "person_id": 1,
      "name": "Y. S.",
    },
  ];
  cast_info = [
    {
      "person_id": 1,
      "movie_id": 10,
      "note": "(voice: English version)",
      "role_id": 1000,
    },
  ];
  company_name = [
    {
      "id": 50,
      "country_code": "[jp]",
    },
  ];
  movie_companies = [
    {
      "movie_id": 10,
      "company_id": 50,
      "note": "Studio (Japan)",
    },
  ];
  name = [
    {
      "id": 1,
      "name": "Yoko Ono",
    },
    {
      "id": 2,
      "name": "Yuichi",
    },
  ];
  role_type = [
    {
      "id": 1000,
      "role": "actress",
    },
  ];
  title = [
    {
      "id": 10,
      "title": "Dubbed Film",
    },
  ];
  eligible = (() => {
    const _src = aka_name;
    return _query(_src, [
      { items: name, on: (an1, n1) => (_equal(n1.id, an1.person_id)) },
      {
        items: cast_info,
        on: (an1, n1, ci) => (_equal(ci.person_id, an1.person_id)),
      },
      { items: title, on: (an1, n1, ci, t) => (_equal(t.id, ci.movie_id)) },
      {
        items: movie_companies,
        on: (an1, n1, ci, t, mc) => (_equal(mc.movie_id, ci.movie_id)),
      },
      {
        items: company_name,
        on: (an1, n1, ci, t, mc, cn) => (_equal(cn.id, mc.company_id)),
      },
      {
        items: role_type,
        on: (an1, n1, ci, t, mc, cn, rt) => (_equal(rt.id, ci.role_id)),
      },
    ], {
      select: (an1, n1, ci, t, mc, cn, rt) => ({
        "pseudonym": an1.name,
        "movie_title": t.title,
      }),
      where: (
        an1,
        n1,
        ci,
        t,
        mc,
        cn,
        rt,
      ) => ((((((_equal(ci.note, "(voice: English version)") &&
        _equal(cn.country_code, "[jp]")) && mc.note.includes("(Japan)")) &&
        (!mc.note.includes("(USA)"))) && n1.name.includes("Yo")) &&
        (!n1.name.includes("Yu"))) && _equal(rt.role, "actress")),
    });
  })();
  result = [
    {
      "actress_pseudonym": _min(eligible.map((x) => x.pseudonym)),
      "japanese_movie_dubbed": _min(eligible.map((x) => x.movie_title)),
    },
  ];
  console.log(_json(result));
  test_Q8_returns_the_pseudonym_and_movie_title_for_Japanese_dubbing();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _min(v: any): any {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m: any = list[0];
  if (typeof m === "string") {
    for (const s of list) if (typeof s === "string" && s < m) m = s;
    return m;
  }
  let mv = Number(m);
  for (const n of list) {
    const num = Number(n);
    if (num < mv) mv = num;
  }
  return mv;
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
