let i,j,idx: integer; key: variant; ks: string
for i in 0..High(src) {
key = keyfn(src[i])
ks = VarToStr(key)
idx = -1
for j in 0..High(Result) {
if VarToStr(Result[j].Key) = ks then begin idx = j; Break; end
idx = Length(Result)
Result[idx].Key = key
}
Result[idx].Items[High(Result[idx].Items)] = src[i]
xs = specialize TArray<integer>([1, 1, 2])
_tmp0 = specialize TFPGMap<string, integer>.Create
for x in xs {
_tmp1 = Concat(_tmp1, [x])
}
_tmp2 = specialize _group_by<integer>(_tmp1, function(x: integer): Variant begin Result := x end)
for g in _tmp2 {
_tmp3 = Concat(_tmp3, [_tmp0])
}
groups = _tmp3
for g in groups {
print(g.k, g.c)
}
