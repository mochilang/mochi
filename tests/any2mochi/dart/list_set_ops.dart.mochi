fun main() {
  let a: list<int> = [1, 2, 3]
  let b: list<int> = [3, 4]
  print(_union(a, b))
  print(_except(a, b))
  print(_intersect(a, b))
  print(_union([1, 2], [2, 3]).length)
}
fun _except(a: list<any>, b: list<any>): list<any> {
  let res = <dynamic>[]
  for (var it in a) {
    if (!b.contains(it)) {
      res.add(it)
    }
  }
  return res
}
fun _intersect(a: list<any>, b: list<any>): list<any> {
  let res = <dynamic>[]
  for (var it in a) {
    if (b.contains(it) && !res.contains(it)) {
      res.add(it)
    }
  }
  return res
}
fun _union(a: list<any>, b: list<any>): list<any> {
  let res = [...a]
  for (var it in b) {
    if (!res.contains(it)) {
      res.add(it)
    }
  }
  return res
}
