type Person {
  name: string
  age: int
  status: string
}
fun test_update_adult_status() {
  if (!(_equal(people, [Person(name: "Alice", age: 17, status: "minor"), Person(name: "Bob", age: 26, status: "adult"), Person(name: "Charlie", age: 19, status: "adult"), Person(name: "Diana", age: 16, status: "minor")]))) { throw Exception('expect failed'); }
}
fun main() {
  let failures: int = 0
  let people: list<Person> = [Person(name: "Alice", age: 17, status: "minor"), Person(name: "Bob", age: 25, status: "unknown"), Person(name: "Charlie", age: 18, status: "unknown"), Person(name: "Diana", age: 16, status: "minor")]
  for _tmp0 in 0..people.length {
    let _tmp1 = people[_tmp0]
    let name = _tmp1.name
    let age = _tmp1.age
    let status = _tmp1.status
    if ((age >= 18)) {
      _tmp1.status = "adult"
      _tmp1.age = (age + 1)
    }
  }
  print("ok")
  if (!_runTest("update adult status", test_update_adult_status)) failures++
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.")
  }
}
fun _equal(a: any, b: any): bool {
  if (a is List && b is List) {
    if (a.length != b.length) return false
    for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true
  }
  if (a is Map && b is Map) {
    if (a.length != b.length) return false
    for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
    return true
  }
  return a == b
}
fun _formatDuration(d: Duration): string {
  if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs'
  if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms'
  return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s'
}
