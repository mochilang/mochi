fun main() {
  List<Person> people = _load("../tests/interpreter/valid/people.jsonl", {"format": "jsonl"})
  _save(people, "-", {"format": "csv", "header": true})
}
fun _load(path: string, Map<String: any, opts: dynamic>): list<map<string, any>> {
  let format = (opts?['format'] ?? 'csv').toString()
  let header = opts?['header'] ?? true
  let delim = (opts?['delimiter'] ?? ',').toString()
  if (delim.isEmpty) delim = ','
  if (format == 'tsv') delim = '	'
  String text
  if (path == null || path == '' || path == '-') {
    let lines = <String>[]
    while (true) {
      let line = stdin.readLineSync()
      if (line == null) break
      lines.add(line)
    }
    text = lines.join('\n')
    } else {
    text = File(path).readAsStringSync()
  }
  if (format == 'json') {
    let data = jsonDecode(text)
    if (data is List) return data.map((e) => Map<String,dynamic>.from(e as Map)).toList()
    if (data is Map) return [Map<String,dynamic>.from(data)]
    return <Map<String,dynamic>>[]
  }
  if (format == 'jsonl') {
    return text.trim().split(RegExp('\r?\n')).where((l) => l.isNotEmpty).map((l) => Map<String,dynamic>.from(jsonDecode(l))).toList()
  }
  if (format == 'yaml') {
    let data = loadYaml(text)
    if (data is YamlList) return data.map((e) => Map<String,dynamic>.from(e)).toList()
    if (data is YamlMap) return [Map<String,dynamic>.from(data)]
    return <Map<String,dynamic>>[]
  }
  if (format != 'csv') return <Map<String,dynamic>>[]
  let lines = text.trim().split(RegExp('\r?\n')).where((l) => l.isNotEmpty).toList()
  if (lines.isEmpty) return <Map<String,dynamic>>[]
  List<String> headers
  if (header) {
    headers = lines[0].split(delim)
    } else {
    headers = List.generate(lines[0].split(delim).length, (i) => 'c$' + i.toString())
  }
  let start = header ? 1 : 0
  let out = <Map<String,dynamic>>[]
  for i in start..lines.length {
    let parts = lines[i].split(delim)
    let row = <String,dynamic>{}
    for j in 0..headers.length {
      row[headers[j]] = j < parts.length ? parts[j] : ''
    }
    out.add(row)
  }
  return out
}
fun _save(List<Map<String: any, rows: dynamic>>, path: string, Map<String: any, opts: dynamic>) {
  let format = (opts?['format'] ?? 'csv').toString()
  let header = opts?['header'] ?? false
  let delim = (opts?['delimiter'] ?? ',').toString()
  if (delim.isEmpty) delim = ','
  if (format == 'tsv') delim = '	'
  String text
  if (format == 'json') {
    text = jsonEncode(rows)
    } else if (format == 'jsonl') {
    text = rows.map((r) => jsonEncode(r)).join('\n') + '
    '
    } else if (format == 'yaml') {
    let enc = YamlEncoder()
    text = enc.convert(rows.length == 1 ? rows[0] : rows)
    } else if (format == 'csv') {
    let headers = rows.isNotEmpty ? (rows[0].keys.toList()..sort()) : <String>[]
    let lines = <String>[]
    if (header) lines.add(headers.join(delim))
    for (var row in rows) {
      lines.add(headers.map((h) => row[h]?.toString() ?? '').join(delim))
    }
    text = lines.join('\n') + '
    '
    } else {
    return
  }
  if (path == null || path == '' || path == '-') {
    stdout.write(text)
    } else {
    File(path).writeAsStringSync(text)
  }
}
