fun _fetch(url: string, opts): Promise<any> {
  if url.startsWith("file://") {
    let path = url.slice(7)
    if !path.startsWith("/") {
    }
    let text = Deno.readTextFileSync(path)
  }
  let init: RequestInit = { method: opts?.method ?? "GET" }
  if opts?.headers {
    let qs = new URLSearchParams()
    for [k, v] in Object.entries(_toAnyMap(opts.query)) {
    }
    let sep = url.includes("?") ? "&" : "?"
  }
  let ctrl: AbortController | undefined
  let id: any
  if opts?.timeout {
  }
  let resp = await fetch(url, init)
  if id {
    return JSON.parse(text)
  }
}
fun _fetch.setTimeout() callback() {}
let _pending: list<Promise<any>>
fun _waitAll(): Promise<void> {}
fun main(): Promise<void> {
  print(todo.id > 0)
}
let todo
type Todo {
  userId: int
  id: int
  title: string
  completed: bool
}
