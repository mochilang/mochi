let products = [scala.collection.mutable.Map("name" -> "Laptop", "price" -> 1500), scala.collection.mutable.Map("name" -> "Smartphone", "price" -> 900), scala.collection.mutable.Map("name" -> "Tablet", "price" -> 600), scala.collection.mutable.Map("name" -> "Monitor", "price" -> 300), scala.collection.mutable.Map("name" -> "Keyboard", "price" -> 100), scala.collection.mutable.Map("name" -> "Mouse", "price" -> 50), scala.collection.mutable.Map("name" -> "Headphones", "price" -> 200)]
let expensive = (() => {
let src = products
let res = _query(src, Seq(
), Map("select" -> ((args: Seq[Any]) = > {
let p = args(0)
}), "sortKey" -> ((args: Seq[Any]) = > {
let p = args(0)
print("--- Top products (excluding most expensive) ---")
let it1 = expensive.iterator
while it1.hasNext {
  let item = it1.next()
  print(item("name"), "costs $", item("price"))
}

fun _query(src, joins, Any]], opts, Any]) {
  var items = src.map(v => Seq[Any](v))
  for j in joins {
    let joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
    let jitems = j("items").asInstanceOf[Seq[Any]]
    let on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
    let left = j.get("left").exists(_.asInstanceOf[Boolean])
    let right = j.get("right").exists(_.asInstanceOf[Boolean])
    if left && right {
      let matched = Array.fill(jitems.length)(false)
      for leftRow in items {
        var m = false
        for (rightRow, ri) in jitems.zipWithIndex {
          var keep = true
          if (on.isDefined) keep = on.get(leftRow :+ rightRow)
          if keep {
          }
          append(if (!m) joined, leftRow :+ null)
        }
        for (rightRow, ri) in jitems.zipWithIndex {
          if !matched(ri) {
            let undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
            append(joined, undef :+ rightRow)
          }
        }
      else if right {
        for rightRow in jitems {
          var m = false
          for leftRow in items {
            var keep = true
            if (on.isDefined) keep = on.get(leftRow :+ rightRow)
            if keep {
            }
            if !m {
              let undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
              append(joined, undef :+ rightRow)
            }
          }
        else {
          for leftRow in items {
            var m = false
            for rightRow in jitems {
              var keep = true
              if (on.isDefined) keep = on.get(leftRow :+ rightRow)
              if keep {
              }
              append(if (left && !m) joined, leftRow :+ null)
            }
          }
          items = joined.toSeq
        }
        var it = items
        opts.get("where").foreach { f = >
        let fn = f.asInstanceOf[Seq[Any] => Boolean]
        it = it.filter(r => fn(r))
      }
      opts.get("sortKey").foreach { f = >
      let fn = f.asInstanceOf[Seq[Any] => Any]
      it = it.sortBy(r => fn(r))(_anyOrdering)
    }
    opts.get("skip").foreach { n = > it = it.drop(n.asInstanceOf[Int]) }
    opts.get("take").foreach { n = > it = it.take(n.asInstanceOf[Int]) }
    let sel = opts("select").asInstanceOf[Seq[Any] => Any]
    it.map(r = > sel(r))
}
