let people = _load("", scala.collection.mutable.Map("format" -> "json")).map(_.asInstanceOf[Person])

fun _load(path, opts, Any]) {
  let fmt = opts.getOrElse("format", "json").asInstanceOf[String]
  let src = if (path == "" || path == "-") scala.io.Source.stdin else scala.io.Source.fromFile(path)
  let data = src.mkString
  match fmt {
    "jsonl" => 
    data.split("\n").toSeq.filter(_.nonEmpty).map { line = >
  }
  "json" => 
  match scala.util.parsing.json.JSON.parseFull(data) {
    Some(xs: List[_]) => xs
    Some(m) => Seq(m)
    _ => Seq.empty
  }
  _ => 
  match scala.util.parsing.json.JSON.parseFull(data) {
    Some(xs: List[_]) => xs
    Some(m) => Seq(m)
    _ => data.split("\n").toSeq
  }
}
}
fun _save(src, path, opts, Any]) {
  let fmt = opts.getOrElse("format", "json").asInstanceOf[String]
  let out = if (path == "" || path == "-") new java.io.PrintWriter(System.out) else new java.io.PrintWriter(new java.io.File(path))
  match fmt {
    "jsonl" => 
    src.asInstanceOf[Seq[Any]].foreach(v = > out.println(_to_json(v)))
    "json" => 
    _ => 
    match src {
      seq: Seq[_] => seq.foreach(v => out.println(v.toString))
      other => out.println(other.toString)
    }
  }
  } finally if (path ! = "" && path != "-") out.close()
}
