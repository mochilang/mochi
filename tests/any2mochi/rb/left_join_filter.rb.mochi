fun _query(src, joins, opts) {
  let where_fn = opts["where"]
  let items = []
  if joins.empty? {
    for v in src {
      let row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    }
  } else {
    let items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
    let joined = []
    let jitems = j["items"]
    let on = j["on"]
    let left = j["left"]
    let right = j["right"]
    let last = idx == joins.length - 1
    if right && left {
      let matched = Array.new(jitems.length, false)
      for l in items {
        let m = false
        jitems.each_with_index do |r, ri|
        let keep = true
        let keep = on.call(*l, r) if on
        next unless keep
        let m = true
        let matched[ri] = true
        let row = l + [r]
        if last && where_fn && !where_fn.call(*row) {
          next
        }
        joined << row
      }
      let row = l + [nil]
      if left && !m {
        if last && where_fn && !where_fn.call(*row) {
          # skip
        } else {
          joined << row
        }
      }
    }
    jitems.each_with_index do |r, ri|
    next if matched[ri]
    let _undef = Array.new(items[0]&.length || 0, nil)
    let row = _undef + [r]
    if last && where_fn && !where_fn.call(*row) {
      next
    }
    joined << row
  }
} else if right {
  for r in jitems {
    let m = false
    for l in items {
      let keep = true
      let keep = on.call(*l, r) if on
      next unless keep
      let m = true
      let row = l + [r]
      if last && where_fn && !where_fn.call(*row) {
        next
      }
      joined << row
    }
    unless m
    let _undef = Array.new(items[0]&.length || 0, nil)
    let row = _undef + [r]
    if last && where_fn && !where_fn.call(*row) {
      next
    }
    joined << row
  }
}
for l in items {
  let m = false
  for r in jitems {
    let keep = true
    let keep = on.call(*l, r) if on
    next unless keep
    let m = true
    let row = l + [r]
    if last && where_fn && !where_fn.call(*row) {
      next
    }
    joined << row
  }
  if left && !m {
    let row = l + [nil]
    if last && where_fn && !where_fn.call(*row) {
      next
    }
    joined << row
  }
}
var items = joined
if opts["sortKey"] {
  let items = items.map { |it| [it, opts["sortKey"].call(*it)] }
  items.sort_by! { |p| p[1] }
  items.map!(&:first)
}
if "skip" in opts {
  let n = opts["skip"]
  let items = (n < items.length) ? items[n..-1] : []
}
if "take" in opts {
  let n = opts["take"]
  let items = (n < items.length) ? items[0..n] : items
}
var res = []
items.each { |r| res << opts["select"].call(*r) }
res
var Customer = Struct.new(:id, :name, keyword_init: true)
var Order = Struct.new(:id, :customerId, :total, keyword_init: true)
var Info = Struct.new(:orderId, :customerName, :total, keyword_init: true)
var customers = [Customer.new(id: 1, name: "Alice"), Customer.new(id: 2, name: "Bob"), Customer.new(id: 3, name: "Charlie")]
var orders = [Order.new(id: 100, customerId: 1, total: 250), Order.new(id: 101, customerId: 2, total: 125), Order.new(id: 102, customerId: 1, total: 300), Order.new(id: 103, customerId: 4, total: 80)]
var result = (begin
var src = orders
var _rows = _query(src, [
var {"items" = > customers, "on" => ->(o, c) { (o.customerId == c.id) }, "left" => true}
var ], {"select" = > ->(o, c) { Info.new(orderId: o.id, customerName: c.name, total: o.total) }, "where" => ->(o, c) { (o.total > 200) }})
_rows
end)
for r in result {
  print([r.orderId, r.customerName, r.total].join(" "))
}
