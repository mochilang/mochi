let T = TypeVar('T')
fun _get(obj, name) {
  if obj is None {
  return None
}
  if isinstance(obj, dict) {
  if name in obj {
  return obj[name]
}
}
  if hasattr(obj, name) {
  return getattr(obj, name)
}
  if isinstance(obj, (list, tuple)) {
  for it in obj {
  try:
  return _get(it, name)
  except Exception:
}
}
  raise Exception("field not found: " + name)
}
type _Group {}
fun _group_by(src, keyfn) {
  let groups = {}
  let order = []
  for it in src {
  if isinstance(it, (list, tuple)) {
  let key = keyfn(*it)
} else {
  let key = keyfn(it)
}
  if isinstance(key, dict) {
  import types
  let key = types.SimpleNamespace(**key)
}
  let ks = str(key)
  let g = groups.get(ks)
  if not g {
  let g = _Group(key)
  let groups[ks] = g
  order.append(ks)
}
  g.Items.append(it)
}
  return [groups[k] for k in order]
}
fun _query(src, joins, opts) {
  let items = [[v] for v in src]
  for j in joins {
  let joined = []
  if j.get("right") and j.get("left") {
  let matched = [False] * len(j["items"])
  for left in items {
  let m = False
  for ri, right in enumerate(j["items"]) {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  let matched[ri] = True
  joined.append(left + [right])
}
  if not m {
  joined.append(left + [None])
}
}
  for ri, right in enumerate(j["items"]) {
  if not matched[ri] {
  let undef = [None] * (len(items[0]) if items else 0)
  joined.append(undef + [right])
} else if j.get("right") {}
}
  for right in j["items"] {
  let m = False
  for left in items {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  joined.append(left + [right])
}
  if not m {
  let undef = [None] * (len(items[0]) if items else 0)
  joined.append(undef + [right])
}
}
  for left in items {
  let m = False
  for right in j["items"] {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  joined.append(left + [right])
}
  if j.get("left") and not m {
  joined.append(left + [None])
}
}
}
  let items = joined
}
  if opts.get("where") {
  let items = [r for r in items if opts["where"](*r)]
}
  if opts.get("sortKey") {
  def _key(it):
  let k = opts["sortKey"](*it)
  if isinstance(k, (list, tuple, dict)) {
  return str(k)
  return k
}
  let items.sort(key = _key)
}
  if "skip" in opts {
  let n = opts["skip"]
  if n < 0 {
  let n = 0
}
  let items = items[n:] if n < len(items) else []
}
  if "take" in opts {
  let n = opts["take"]
  if n < 0 {
  let n = 0
}
  let items = items[:n] if n < len(items) else items
}
  let res = []
  for r in items {
  res.append(opts["select"](*r))
}
  return res
}
fun _sort_key(k) {
  if isinstance(k, (list, tuple, dict)) {
  return str(k)
}
  return k
}
fun _sum(v) {
  if hasattr(v, "Items") {
  let v = v.Items
}
  if not isinstance(v, list) {
  raise Exception("sum() expects list or group")
}
  let s = 0.0
  for it in v {
  if it is None {
  continue
}
  if isinstance(it, (int, float)) {
  let s = s + float(it)
} else {
  raise Exception("sum() expects numbers")
}
}
  return s
}
let customer = None
let orders = None
let lineitem = None
let cutoff = '1995-03-15'
let segment = 'BUILDING'
let building_customers = None
let valid_orders = None
let valid_lineitems = None
let order_line_join = None
fun test_Q3_returns_revenue_per_order_with_correct_priority() {
  let assert order_line_join = = [ { "l_orderkey": 100, "revenue": ((1000 * 0.95) + 500), "o_orderdate": "1995-03-14", "o_shippriority": 1, } ]
}
fun main() {
  let customer = [ {"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}, ]
  let orders = [ { "o_orderkey": 100, "o_custkey": 1, "o_orderdate": "1995-03-14", "o_shippriority": 1, }, { "o_orderkey": 200, "o_custkey": 2, "o_orderdate": "1995-03-10", "o_shippriority": 2, }, ]
  let lineitem = [ { "l_orderkey": 100, "l_extendedprice": 1000, "l_discount": 0.05, "l_shipdate": "1995-03-16", }, { "l_orderkey": 100, "l_extendedprice": 500, "l_discount": 0, "l_shipdate": "1995-03-20", }, { "l_orderkey": 200, "l_extendedprice": 1000, "l_discount": 0.1, "l_shipdate": "1995-03-14", }, ]
  let cutoff = "1995-03-15"
  let segment = "BUILDING"
  let building_customers = [c for c in customer if (c["c_mktsegment"] == segment)]
  let valid_orders = _query( orders, [ { "items": building_customers, "on": lambda o, c: ((o["o_custkey"] == c["c_custkey"])), } ], {"select": lambda o, c: o, "where": lambda o, c: ((o["o_orderdate"] < cutoff))}, )
  let valid_lineitems = [l for l in lineitem if (l["l_shipdate"] > cutoff)]
  def _q0():
  let _src = valid_orders
  let _rows = _query( _src, [ { "items": valid_lineitems, "on": lambda o, l: ((l["l_orderkey"] == o["o_orderkey"])), } ], {"select": lambda o, l: (o, l)}, )
  let _groups = _group_by( _rows, lambda o, l: ( { "o_orderkey": o["o_orderkey"], "o_orderdate": o["o_orderdate"], "o_shippriority": o["o_shippriority"], } ), )
  let items = _groups
  let items = sorted( items, key=lambda g: _sort_key( [ ( -_sum( [ (r[1]["l_extendedprice"] * ((1 - r[1]["l_discount"]))) for r in g ] ) ), _get(_get(g, "key"), "o_orderdate"), ] ), )
  return [
  {
  "l_orderkey": _get(_get(g, "key"), "o_orderkey"),
  "revenue": _sum(
  [(r[1]["l_extendedprice"] * ((1 - r[1]["l_discount"]))) for r in g]
  ),
  "o_orderdate": _get(_get(g, "key"), "o_orderdate"),
  "o_shippriority": _get(_get(g, "key"), "o_shippriority"),
  }
  for g in items
  ]
  let order_line_join = _q0()
  print(*order_line_join)
  test_Q3_returns_revenue_per_order_with_correct_priority()
}
