fun _group_by(src: any, keyfn: any): any {
  let groups = {}
  let order = []
  for it in src {
    if isinstance(it, (list, tuple)) {
      let key = keyfn(it)
    } else {
    }
    if isinstance(key, dict) {
      key = types.SimpleNamespace(key)
    }
    let ks = str(key)
    let g = groups.get(ks)
    if !g {
      g = _Group(key)
      order.append(ks)
    }
    g.Items.append(it)
  }
  return from k in order
            select groups[k]
}
fun _query(src: any, joins: any, opts: any): any {
  let items = from v in src
            select [v]
  for j in joins {
    let joined = []
    if j.get("right") and j.get("left") {
      let matched = [False] * len(j["items"])
      for left in items {
        let m = False
        for (ri, right) in enumerate(j["items"]) {
          let keep = True
          if j.get("on") {
            keep = j["on"](left, right)
          }
          if !keep {
          }
          m = True
          joined.append(left + [right])
        }
        if !m {
          joined.append(left + [None])
        }
      }
      for (ri, right) in enumerate(j["items"]) {
        if !matched[ri] {
          let undef = [None] * if items then len(items[0]) else 0
          joined.append(undef + [right])
        }
      }
    } else {
      if j.get("right") {
        for right in j["items"] {
          m = False
          for left in items {
            keep = True
            if j.get("on") {
              keep = j["on"](left, right)
            }
            if !keep {
            }
            m = True
            joined.append(left + [right])
          }
          if !m {
            joined.append(undef + [right])
          }
        }
      } else {
        for left in items {
          m = False
          for right in j["items"] {
            keep = True
            if j.get("on") {
              keep = j["on"](left, right)
            }
            if !keep {
            }
            m = True
            joined.append(left + [right])
          }
          if j.get("left") and !m {
            joined.append(left + [None])
          }
        }
      }
    }
    items = joined
  }
  if opts.get("where") {
    items = from r in items
            where opts["where"](r)
            select r
  }
  if opts.get("sortKey") {
    fun _key(it: any): any {
      let k = opts["sortKey"](it)
      if isinstance(k, (list, tuple, dict)) {
        return str(k)
      }
      return k
    }
    items.sort(key: _key)
  }
  if "skip" ? opts {
    let n = opts["skip"]
    if n < 0 {
      n = 0
    }
    items = if n < len(items) then items[n:] else []
  }
  if "take" ? opts {
    n = opts["take"]
    if n < 0 {
      n = 0
    }
    items = if n < len(items) then items[:n] else items
  }
  let res = []
  for r in items {
    res.append(opts["select"](r))
  }
  return res
}
fun _sum(v: any): any {
  if hasattr(v, "Items") {
    let v = v.Items
  }
  if !isinstance(v, list) {
  }
  let s = 0.0
  for it in v {
    if it ? None {
    }
    if isinstance(it, (int, float)) {
    } else {
    }
  }
  return s
}
let cutoff = "1995-03-15"
let segment = "BUILDING"
test "Q3_returns_revenue_per_order_with_correct_priority" {
  expect order_line_join == [{l_orderkey: 100, revenue: 1000 * 0.95 + 500, o_orderdate: "1995-03-14", o_shippriority: 1}]
}
let customer = [{c_custkey: 1, c_mktsegment: "BUILDING"}, {c_custkey: 2, c_mktsegment: "AUTOMOBILE"}]
let orders = [{o_orderkey: 100, o_custkey: 1, o_orderdate: "1995-03-14", o_shippriority: 1}, {o_orderkey: 200, o_custkey: 2, o_orderdate: "1995-03-10", o_shippriority: 2}]
let lineitem = [{l_orderkey: 100, l_extendedprice: 1000, l_discount: 0.05, l_shipdate: "1995-03-16"}, {l_orderkey: 100, l_extendedprice: 500, l_discount: 0, l_shipdate: "1995-03-20"}, {l_orderkey: 200, l_extendedprice: 1000, l_discount: 0.1, l_shipdate: "1995-03-14"}]
let building_customers = from c in customer
            where c["c_mktsegment"] == segment
            select c
let valid_orders = _query(orders, [{items: building_customers, on: fun(o, c) => o["o_custkey"] == c["c_custkey"]}], {select: fun(o, c) => o, where: fun(o, c) => o["o_orderdate"] < cutoff})
let valid_lineitems = from l in lineitem
            where l["l_shipdate"] > cutoff
            select l
fun _q0(): any {
  let _src = valid_orders
  let _rows = _query(_src, [{items: valid_lineitems, on: fun(o, l) => l["l_orderkey"] == o["o_orderkey"]}], {select: fun(o, l) => (o, l)})
  let _groups = _group_by(_rows, fun(o, l) => {o_orderkey: o["o_orderkey"], o_orderdate: o["o_orderdate"], o_shippriority: o["o_shippriority"]})
  items = _groups
  items = sorted(items, key: fun(g) => _sort_key([-_sum(from r in g
            select r[1]["l_extendedprice"] * 1 - r[1]["l_discount"]), g.key.o_orderdate]))
  return from g in items
            select {l_orderkey: g.key.o_orderkey, revenue: _sum(from r in g
            select r[1]["l_extendedprice"] * 1 - r[1]["l_discount"]), o_orderdate: g.key.o_orderdate, o_shippriority: g.key.o_shippriority}
}
let order_line_join = _q0()
print(order_line_join)
