let T = TypeVar('T')
fun _min(v) {
  if hasattr(v, "Items") {
  let v = v.Items
}
  if not isinstance(v, list) {
  raise Exception("min() expects list or group")
}
  let vals = [it for it in v if it is not None]
  if not vals {
  return 0
}
  return min(vals)
}
fun _query(src, joins, opts) {
  let items = [[v] for v in src]
  for j in joins {
  let joined = []
  if j.get("right") and j.get("left") {
  let matched = [False] * len(j["items"])
  for left in items {
  let m = False
  for ri, right in enumerate(j["items"]) {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  let matched[ri] = True
  joined.append(left + [right])
}
  if not m {
  joined.append(left + [None])
}
}
  for ri, right in enumerate(j["items"]) {
  if not matched[ri] {
  let undef = [None] * (len(items[0]) if items else 0)
  joined.append(undef + [right])
} else if j.get("right") {}
}
  for right in j["items"] {
  let m = False
  for left in items {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  joined.append(left + [right])
}
  if not m {
  let undef = [None] * (len(items[0]) if items else 0)
  joined.append(undef + [right])
}
}
  for left in items {
  let m = False
  for right in j["items"] {
  let keep = True
  if j.get("on") {
  let keep = j["on"](*left, right)
}
  if not keep {
  continue
}
  let m = True
  joined.append(left + [right])
}
  if j.get("left") and not m {
  joined.append(left + [None])
}
}
}
  let items = joined
}
  if opts.get("where") {
  let items = [r for r in items if opts["where"](*r)]
}
  if opts.get("sortKey") {
  def _key(it):
  let k = opts["sortKey"](*it)
  if isinstance(k, (list, tuple, dict)) {
  return str(k)
  return k
}
  let items.sort(key = _key)
}
  if "skip" in opts {
  let n = opts["skip"]
  if n < 0 {
  let n = 0
}
  let items = items[n:] if n < len(items) else []
}
  if "take" in opts {
  let n = opts["take"]
  if n < 0 {
  let n = 0
}
  let items = items[:n] if n < len(items) else items
}
  let res = []
  for r in items {
  res.append(opts["select"](*r))
}
  return res
}
fun _sort_key(k) {
  if isinstance(k, (list, tuple, dict)) {
  return str(k)
}
  return k
}
let region = None
let nation = None
let supplier = None
let part = None
let partsupp = None
let europe_nations = None
let europe_suppliers = None
let target_parts = None
let target_partsupp = None
let costs = None
let min_cost = None
let result = None
fun test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part() {
  let assert result = = [ { "s_acctbal": 1000, "s_name": "BestSupplier", "n_name": "FRANCE", "p_partkey": 1000, "p_mfgr": "M1", "s_address": "123 Rue", "s_phone": "123", "s_comment": "Fast and reliable", "ps_supplycost": 10, } ]
}
fun main() {
  let region = [ {"r_regionkey": 1, "r_name": "EUROPE"}, {"r_regionkey": 2, "r_name": "ASIA"}, ]
  let nation = [ {"n_nationkey": 10, "n_regionkey": 1, "n_name": "FRANCE"}, {"n_nationkey": 20, "n_regionkey": 2, "n_name": "CHINA"}, ]
  let supplier = [ { "s_suppkey": 100, "s_name": "BestSupplier", "s_address": "123 Rue", "s_nationkey": 10, "s_phone": "123", "s_acctbal": 1000, "s_comment": "Fast and reliable", }, { "s_suppkey": 200, "s_name": "AltSupplier", "s_address": "456 Way", "s_nationkey": 20, "s_phone": "456", "s_acctbal": 500, "s_comment": "Slow", }, ]
  let part = [ {"p_partkey": 1000, "p_type": "LARGE BRASS", "p_size": 15, "p_mfgr": "M1"}, {"p_partkey": 2000, "p_type": "SMALL COPPER", "p_size": 15, "p_mfgr": "M2"}, ]
  let partsupp = [ {"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}, ]
  let europe_nations = _query( region, [ { "items": nation, "on": lambda r, n: ((n["n_regionkey"] == r["r_regionkey"])), } ], {"select": lambda r, n: n, "where": lambda r, n: ((r["r_name"] == "EUROPE"))}, )
  let europe_suppliers = _query( supplier, [ { "items": europe_nations, "on": lambda s, n: ((s["s_nationkey"] == n["n_nationkey"])), } ], {"select": lambda s, n: {"s": s, "n": n}}, )
  let target_parts = [ p for p in part if ((p["p_size"] == 15) and (p["p_type"] == "LARGE BRASS")) ]
  let target_partsupp = _query( partsupp, [ { "items": target_parts, "on": lambda ps, p: ((ps["ps_partkey"] == p["p_partkey"])), }, { "items": europe_suppliers, "on": lambda ps, p, s: ((ps["ps_suppkey"] == s["s"]["s_suppkey"])), }, ], { "select": lambda ps, p, s: { "s_acctbal": s["s"]["s_acctbal"], "s_name": s["s"]["s_name"], "n_name": s["n"]["n_name"], "p_partkey": p["p_partkey"], "p_mfgr": p["p_mfgr"], "s_address": s["s"]["s_address"], "s_phone": s["s"]["s_phone"], "s_comment": s["s"]["s_comment"], "ps_supplycost": ps["ps_supplycost"], } }, )
  let costs = [x["ps_supplycost"] for x in target_partsupp]
  let min_cost = _min(costs)
  let result = [ x for x in sorted( [x for x in target_partsupp if (x["ps_supplycost"] == min_cost)], key=lambda x: _sort_key((-x["s_acctbal"])), ) ]
  print(json.dumps(result, default=lambda o: vars(o)))
  test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}
