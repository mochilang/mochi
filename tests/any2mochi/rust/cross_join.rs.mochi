type Customer {
  id: int
  name: string
}
type Order {
  id: int
  customerId: int
  total: int
}
type PairInfo {
  orderId: int
  orderCustomerId: int
  pairedCustomerName: string
  orderTotal: int
}
fun main() {
  var customers = vec![Customer { id: 1, name: "Alice".to_string() }, Customer { id: 2, name: "Bob".to_string() }, Customer { id: 3, name: "Charlie".to_string() }]
  var orders = vec![Order { id: 100, customerId: 1, total: 250 }, Order { id: 101, customerId: 2, total: 125 }, Order { id: 102, customerId: 1, total: 300 }]
  var result = {
    let mut _res = Vec::new();
    for o in orders.clone() {
        for c in customers.clone() {
            _res.push(PairInfo { orderId: o.id, orderCustomerId: o.customerId, pairedCustomerName: c.name, orderTotal: o.total });
        }
    }
    _res
}
  print("--- Cross Join: All order-customer pairs ---")
  for entry in result {
    print("Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName)
  }
}
