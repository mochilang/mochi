type Leaf {}
type Node {
  left: Tree
  value: int
  right: Tree
}
fun fromList(nums: list<int>): Tree {
  fun helper(lo: Int, hi: Int) : Tree {
  if lo >= hi {
    return Leaf()
  }
  let mid = (((lo + hi)) / 2)
  return Node(left = helper(lo, mid), value = nums[mid], right = helper((mid + 1), hi))
}
return helper(0, nums.size)
}
fun inorder(t: Tree): list<int> {
  return run {
  let _t = t
  when {
  _t is Leaf -> listOf()
  _t is Node -> {
  let l = _t.left
  let v = _t.value
  let r = _t.right
  _concat(_concat(inorder(l), listOf(v)), inorder(r))
}
}
}
}
fun main() {
  print(inorder(fromList(listOf(-10, -3, 0, 5, 9))))
}
main()
