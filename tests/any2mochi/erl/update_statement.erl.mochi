package main

// line 4
type Person {
  name: any
  age: any
  status: any
}
// line 7-11 (exported)
fun main(_) {
  People =
  [#person{name = "Alice", age = 17, status = "minor"},
  #person{name = "Bob", age = 25, status = "unknown"},
  #person{name = "Charlie", age = 18, status = "unknown"},
  #person{name = "Diana", age = 16, status = "minor"}]
  People_1 =
  [
  case Item#person.age >= 18 of
  true ->
  Item#person{status = "adult", age = Item#person.age + 1};
  _ ->
  Item
  end ||
  Item <- People
  ]
  mochi_run_test("update adult status",
  fun() ->
  mochi_expect(People_1
  ==
  [#person{name = "Alice",
  age = 17,
  status = "minor"},
  #person{name = "Bob",
  age = 26,
  status = "adult"},
  #person{name = "Charlie",
  age = 19,
  status = "adult"},
  #person{name = "Diana",
  age = 16,
  status = "minor"}])
  end)
}
// line 16
fun mochi_expect(true) {
  ok
}
// line 19
fun mochi_test_start(Name) {
  print("   test ~s ...", [Name])
}
// line 20
fun mochi_test_pass(Dur) {
  print(" ok (~p)~n", [Dur])
}
// line 21
fun mochi_test_fail(Err, Dur) {
  print(" fail ~p (~p)~n", [Err, Dur])
}
// line 23
fun mochi_run_test(Name, Fun) {
  mochi_test_start(Name)
  Start = erlang:monotonic_time(millisecond)
  try Fun() of
  _ ->
  Duration = erlang:monotonic_time(millisecond) - Start,
  mochi_test_pass(Duration)
  catch
  C:R ->
  Duration = erlang:monotonic_time(millisecond) - Start,
  mochi_test_fail({C, R}, Duration)
  end
}
main()
