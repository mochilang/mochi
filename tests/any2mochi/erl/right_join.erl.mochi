// line 5 (exported)
fun main(_) {
  Customers =
  [#{id => 1, name => "Alice"},
  #{id => 2, name => "Bob"},
  #{id => 3, name => "Charlie"},
  #{id => 4, name => "Diana"}]
  Orders =
  [#{id => 100, customerId => 1, total => 250},
  #{id => 101, customerId => 2, total => 125},
  #{id => 102, customerId => 1, total => 300}]
  Result =
  [
  #{customerName => maps:get(name, C), order => O} ||
  {C, O} <-
  mochi_right_join(Customers, Orders,
  fun(C, O) ->
  maps:get(customerId, O)
  ==
  maps:get(id, C)
  end)
  ]
  mochi_print(["--- Right Join using syntax ---"])
  mochi_foreach(fun(Entry) ->
  case maps:get(order, Entry) of
  true ->
  mochi_print(["Customer",
  maps:get(customerName, Entry),
  "has order",
  maps:get(id,
  maps:get(order,
  Entry)),
  "- $",
  maps:get(total,
  maps:get(order,
  Entry))]);
  _ ->
  mochi_print(["Customer",
  maps:get(customerName, Entry),
  "has no orders"])
  end
  end,
  Result)
}
// line 19
fun mochi_print(Args) {
  Strs =
  [
  mochi_format(A) ||
  A <- Args
  ]
  print("~s~n", [lists:flatten(Strs)])
}
// line 23
fun mochi_format(X) {
  integer_to_list(X)
}
// line 28
fun mochi_foreach(F, L) {
  try
  mochi_foreach_loop(F, L)
  catch
  throw:mochi_break ->
  ok
  end
}
// line 31
fun mochi_foreach_loop(_, _) {
  ok
}
// line 39
fun mochi_right_join_item(B, A, Fun) {
  Matches =
  [
  {I, B} ||
  I <- A,
  Fun(I, B)
  ]
  case Matches of
  [] ->
  [{undefined, B}];
  _ ->
  Matches
  end
}
// line 46
fun mochi_right_join(L, R, Fun) {
  lists:flatmap(fun(Y) ->
  mochi_right_join_item(Y, L, Fun)
  end,
  R)
}
main()
