fun main() {
  let customers = [%{id: 1, name: "Alice"}, %{id: 2, name: "Bob"}, %{id: 3, name: "Charlie"}]
  let orders = [%{id: 100, customerId: 1}, %{id: 101, customerId: 1}, %{id: 102, customerId: 2}]
  let stats = (fn ->
  let _src = customers
  let _rows = _query(_src, [
  let %{items: orders, on: fn c, o -> (o.customerId = = c.id) end, left: true}
  ], %{select: fn c, o -> [c, o] end })
  let _groups = _group_by(_rows, fn c, o -> c.name end)
  let _groups = Enum.map(_groups, fn g -> %{g | Items: Enum.map(g.Items, fn [c, o] -> c end)} end)
  let items = _groups
  Enum.map(items, fn g -> %{name: g.key, count: _count(for r <- g, r.o, do: r)} end)
  end)()
  print("--- Group Left Join ---")
  for s <- stats do
  print(Enum.join(Enum.map([s.name, "orders:", s.count], &to_string(&1)), " "))
}
main()
