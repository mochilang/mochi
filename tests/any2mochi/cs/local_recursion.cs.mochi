# Generated by Mochi C# compiler
type Tree {
}
type Leaf {
}
type Node {
  left
  value: int
  right
}
type Program {
}
fun Program.fromList(nums: list<int>) {
  Tree helper(long lo, long hi) {
  if (lo >= hi) {
  return new Leaf {  }
  }
  var mid = (((lo + hi)) / 2)
  return new Node { left = helper(lo, mid), value = _indexList(nums, mid), right = helper((mid + 1), hi) }
  }
  return helper(0, nums.Length)
}
fun Program.inorder(t): list<int> {
  return new Func<dynamic[]>(() => {
  var _t = t
  if _t is Leaf) return new dynamic[] { } {
  if _t is Node _tmp0 {
  var l = _tmp0.left
  var v = _tmp0.value
  var r = _tmp0.right
  return inorder(l).Concat(new dynamic[] { v }).ToArray().Concat(inorder(r)).ToArray()
  }
  return default
  })()
}
fun Program.Main() {
  print(inorder(fromList(new long[] { (-10), (-3), 0, 5, 9 })))
}
fun Program._indexList(l: any, i: int): any {
  var list = l as System.Collections.IList
  if list == null) throw new Exception("index() expects list") {
  if i < 0) i += list.Count {
  if i < 0 || i >= list.Count) throw new Exception("index out of range") {
  return list[(int)i]
}
