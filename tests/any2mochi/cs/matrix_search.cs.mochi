# Generated by Mochi C# compiler
type Program {
}
fun Program.searchMatrix(matrix: list<list<int>>, target: int): bool {
  var m = matrix.Length
  if (m == 0) {
  return false
  }
  var n = _indexList(matrix, 0).Length
  var left = 0
  var right = ((m * n) - 1)
  while (left <= right) {
  var mid = (left + (((right - left)) / 2))
  var row = (mid / n)
  var col = (mid % n)
  var value = _indexList(_indexList(matrix, row), col)
  if (value == target) {
  return true
  } else if ((value < target)) {
  left = (mid + 1)
  } else {
  right = (mid - 1)
  }
  }
  return false
}
fun Program.Main() {
  print(searchMatrix(new long[][] { new long[] { 1, 3, 5, 7 }, new long[] { 10, 11, 16, 20 }, new long[] { 23, 30, 34, 60 } }, 3))
  print(searchMatrix(new long[][] { new long[] { 1, 3, 5, 7 }, new long[] { 10, 11, 16, 20 }, new long[] { 23, 30, 34, 60 } }, 13))
}
fun Program._indexList(l: any, i: int): any {
  var list = l as System.Collections.IList
  if list == null) throw new Exception("index() expects list") {
  if i < 0) i += list.Count {
  if i < 0 || i >= list.Count) throw new Exception("index out of range") {
  return list[(int)i]
}
