# Generated by Mochi C# compiler
type Program {
}
fun Program.Main() {
  var a = new long[] { 1, 2, 3 }
  var b = new long[] { 3, 4 }
  print(_union(a, b))
  print(_except(a, b))
  print(_intersect(a, b))
  print(_union(new long[] { 1, 2 }, new long[] { 2, 3 }))
}
fun Program._union(a: list<any>, b: list<any>): list<any> {
  var res = new List<dynamic>()
  if a != null) foreach (var it in a) if (!_in(it, res)) res.Add(it) {
  if b != null) foreach (var it in b) if (!_in(it, res)) res.Add(it) {
  return res
}
fun Program._in(item: any, col: any): bool {
  if col is string s && item is string sub {
  return s.Contains(sub)
  }
  if col is System.Collections.IDictionary d {
  return d.Contains(item)
  }
  if col is System.Collections.IEnumerable e {
  for it in e {
  if Equals(it, item)) return true {
  }
  return false
  }
  return false
}
fun Program._except(a: list<any>, b: list<any>): list<any> {
  var res = new List<dynamic>()
  if a != null) foreach (var it in a) if (!_in(it, b)) res.Add(it) {
  return res
}
fun Program._intersect(a: list<any>, b: list<any>): list<any> {
  var res = new List<dynamic>()
  if a != null) foreach (var it in a) if (_in(it, b) && !_in(it, res)) res.Add(it) {
  return res
}
