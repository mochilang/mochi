# Generated by Mochi C# compiler
type Program {
}
fun Program.test_values() {
  expect((_indexList(xs, 0) == ((-1))))
  expect((_indexList(xs, 1) == 0))
  expect((_indexList(xs, 2) == 1))
  print("done")
}
fun Program.Main() {
  var xs = _cast<long[]>(new long[] { ((-1)), 0, 1 })
  test_values()
}
fun Program._indexList(l: any, i: int): any {
  var list = l as System.Collections.IList
  if list == null) throw new Exception("index() expects list") {
  if i < 0) i += list.Count {
  if i < 0 || i >= list.Count) throw new Exception("index out of range") {
  return list[(int)i]
}
fun Program.expect(cond: bool) {
  if !cond) throw new Exception("expect failed") {
}
fun Program._cast(v: any) {
  if v is T tv) return tv {
  if typeof(T) == typeof(int) {
  if v is int) return (T)v {
  if v is double) return (T)(object)(int)(double)v {
  if v is float) return (T)(object)(int)(float)v {
  }
  if typeof(T) == typeof(double) {
  if v is int) return (T)(object)(double)(int)v {
  if v is double) return (T)v {
  if v is float) return (T)(object)(double)(float)v {
  }
  if typeof(T) == typeof(float) {
  if v is int) return (T)(object)(float)(int)v {
  if v is double) return (T)(object)(float)(double)v {
  if v is float) return (T)v {
  }
  if typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d {
  var args = typeof(T).GetGenericArguments()
  var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args))
  var mCast = typeof(Program).GetMethod("_cast")
  for kv in d {
  var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[]{kv.Key})
  var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[]{kv.Value})
  res.Add(k, val)
  }
  return (T)res
  }
  if v is System.Collections.Generic.IDictionary<object, object> dm {
  var m = new Dictionary<string, object>()
  for kv in dm) m[Convert.ToString(kv.Key)] = kv.Value {
  v = m
  }
  var json = JsonSerializer.Serialize(v)
  return JsonSerializer.Deserialize<T>(json)
}
