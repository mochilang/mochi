# Generated by Mochi C# compiler
type Program {
}
fun Program.test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
  expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "returnflag", "N" }, { "linestatus", "O" }, { "sum_qty", 53 }, { "sum_base_price", 3000 }, { "sum_disc_price", (950.000000 + 1800.000000) }, { "sum_charge", (((950.000000 * 1.070000)) + ((1800.000000 * 1.050000))) }, { "avg_qty", 26.500000 }, { "avg_price", 1500 }, { "avg_disc", 0.075000 }, { "count_order", 2 } } }))
}
fun Program.Main() {
  var lineitem = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "l_quantity", 17 }, { "l_extendedprice", 1000.000000 }, { "l_discount", 0.050000 }, { "l_tax", 0.070000 }, { "l_returnflag", "N" }, { "l_linestatus", "O" }, { "l_shipdate", "1998-08-01" } }, new Dictionary<string, dynamic> { { "l_quantity", 36 }, { "l_extendedprice", 2000.000000 }, { "l_discount", 0.100000 }, { "l_tax", 0.050000 }, { "l_returnflag", "N" }, { "l_linestatus", "O" }, { "l_shipdate", "1998-09-01" } }, new Dictionary<string, dynamic> { { "l_quantity", 25 }, { "l_extendedprice", 1500.000000 }, { "l_discount", 0.000000 }, { "l_tax", 0.080000 }, { "l_returnflag", "R" }, { "l_linestatus", "F" }, { "l_shipdate", "1998-09-03" } } }
  var result = _group_by(lineitem, row => new Dictionary<string, dynamic> { { "returnflag", row.l_returnflag }, { "linestatus", row.l_linestatus } }).Select(g => new Dictionary<string, dynamic> { { "returnflag", g.key.returnflag }, { "linestatus", g.key.linestatus }, { "sum_qty", _sum(new List<dynamic>(g.Select(x => x.l_quantity))) }, { "sum_base_price", _sum(new List<dynamic>(g.Select(x => x.l_extendedprice))) }, { "sum_disc_price", _sum(new List<dynamic>(g.Select(x => (x.l_extendedprice * ((1 - x.l_discount)))))) }, { "sum_charge", _sum(new List<dynamic>(g.Select(x => ((x.l_extendedprice * ((1 - x.l_discount))) * ((1 + x.l_tax)))))) }, { "avg_qty", _avg(new List<dynamic>(g.Select(x => x.l_quantity))) }, { "avg_price", _avg(new List<dynamic>(g.Select(x => x.l_extendedprice))) }, { "avg_disc", _avg(new List<dynamic>(g.Select(x => x.l_discount))) }, { "count_order", _count(g) } }).ToList()
  print(JsonSerializer.Serialize(result))
  test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
}
fun Program._avg(v: any): float {
  if v == null) return 0.0 {
  var _n = 0
  var _sum = 0
  for it in v {
  _sum += Convert.ToDouble(it)
  _n++
  }
  return _n == 0 ? 0.0 : _sum / _n
}
fun Program._count(v: any): int {
  if v is string {
  return ((string)v).Length
  }
  if v is System.Collections.ICollection c {
  return c.Count
  }
  throw new Exception("count() expects list or string")
}
fun Program._group_by(src: list<any>, Func<dynamic, keyfn): list<any> {
  var groups = new Dictionary<string, _Group>()
  var order = new List<string>()
  for it in src {
  var key = keyfn(it)
  var ks = Convert.ToString(key)
  if !groups.TryGetValue(ks, out var g) {
  g = new _Group(key)
  groups[ks] = g
  order.Add(ks)
  }
  g.Items.Add(it)
  }
  var res = new List<_Group>()
  for k in order) res.Add(groups[k]) {
  return res
}
type _Group {
  key: any
  Items: list<any>
}
fun _Group.expect(cond: bool) {
  if !cond) throw new Exception("expect failed") {
}
fun _Group._sum(v: any): float {
  if v == null) return 0.0 {
  var _sum = 0
  for it in v {
  _sum += Convert.ToDouble(it)
  }
  return _sum
}
