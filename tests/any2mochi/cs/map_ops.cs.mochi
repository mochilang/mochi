# Generated by Mochi C# compiler
type Program {
}
fun Program.Main() {
  Dictionary<long, long> m = new Dictionary<dynamic, dynamic> {  }
  m[1] = 10
  m[2] = 20
  if _in(1, m) {
  print(_indexList(m, 1))
  }
  print(_indexList(m, 2))
}
fun Program._in(item: any, col: any): bool {
  if col is string s && item is string sub {
  return s.Contains(sub)
  }
  if col is System.Collections.IDictionary d {
  return d.Contains(item)
  }
  if col is System.Collections.IEnumerable e {
  for it in e {
  if Equals(it, item)) return true {
  }
  return false
  }
  return false
}
fun Program._indexList(l: any, i: int): any {
  var list = l as System.Collections.IList
  if list == null) throw new Exception("index() expects list") {
  if i < 0) i += list.Count {
  if i < 0 || i >= list.Count) throw new Exception("index out of range") {
  return list[(int)i]
}
