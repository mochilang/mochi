# Generated by Mochi C# compiler
type Leaf {
}
type Node {
  left
  value: int
  right
}
type Program {
}
fun Program.inorder(t): list<int> {
  return new Func<long[]>(() => {
  var _t = t
  if _t is Leaf) return _cast<long[]>(new dynamic[] { }) {
  if _t is Node _tmp0 {
  var l = _tmp0.left
  var v = _tmp0.value
  var r = _tmp0.right
  return inorder(l).Concat(new dynamic[] { v }).ToArray().Concat(inorder(r)).ToArray()
  }
  return default
  })()
}
fun Program.Main() {
  print(inorder(new Node { left = new Leaf {  }, value = 1, right = new Node { left = new Leaf {  }, value = 2, right = new Leaf {  } } }))
}
fun Program._cast(v: any) {
  if v is T tv) return tv {
  if typeof(T) == typeof(int) {
  if v is int) return (T)v {
  if v is double) return (T)(object)(int)(double)v {
  if v is float) return (T)(object)(int)(float)v {
  }
  if typeof(T) == typeof(double) {
  if v is int) return (T)(object)(double)(int)v {
  if v is double) return (T)v {
  if v is float) return (T)(object)(double)(float)v {
  }
  if typeof(T) == typeof(float) {
  if v is int) return (T)(object)(float)(int)v {
  if v is double) return (T)(object)(float)(double)v {
  if v is float) return (T)v {
  }
  if typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d {
  var args = typeof(T).GetGenericArguments()
  var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args))
  var mCast = typeof(Program).GetMethod("_cast")
  for kv in d {
  var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[]{kv.Key})
  var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[]{kv.Value})
  res.Add(k, val)
  }
  return (T)res
  }
  if v is System.Collections.Generic.IDictionary<object, object> dm {
  var m = new Dictionary<string, object>()
  for kv in dm) m[Convert.ToString(kv.Key)] = kv.Value {
  v = m
  }
  var json = JsonSerializer.Serialize(v)
  return JsonSerializer.Deserialize<T>(json)
}
