type list_int {
  len: int
  *data: int
}

type list_float {
  len: int
  *data: float
}

fun __bswap_16(__bsx: __uint16_t): __uint16_t {
  "%g", v.data[i])
}
print("]")
}
var main() {
list_float _t1 = list_float_create(2)
_t1.data[0] = 1.5
}
fun __uint16_identity(__x: __uint16_t): __uint16_t {
  v.data[i])
}
}
fun __uint32_identity(__x: __uint32_t): __uint32_t {
  e(2)
  _t1.dat
}
fun __uint64_identity(__x: __uint64_t): __uint64_t {
  ate(2)
  _t2.d
}
fun union_list_float(a: list<float>, b: list<float>): list<float> {
  list_float r = list_float_create(a.len + b.len)
  var idx = 0
  for (int i = 0; i < a.len; i++) {
    var found = 0
    for (int j = 0; j < idx; j++)
    if r.data[j] == a.data[i] {
      found = 1
      break
    }
    if (!found)
    r.data[idx++] = a.data[i]
  }
  for (int i = 0; i < b.len; i++) {
    var found = 0
    for (int j = 0; j < idx; j++)
    if r.data[j] == b.data[i] {
      found = 1
      break
    }
    if (!found)
    r.data[idx++] = b.data[i]
  }
  r.len = idx
  return r
}
fun contains_list_float(v: list<float>, item: float): int {
  for (int i = 0; i < v.len; i++)
  if (v.data[i] == item)
  return 1
  return 0
}
fun _print_list_float(v: list<float>) {
  print("[")
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
    print(" ")
    print(v.data[i])
  }
  print("]")
}
list_float _t1 = list_float_create(2)
_t1.data[0] = 1.5
_t1.data[1] = 2.5
list_float _t2 = list_float_create(2)
_t2.data[0] = 2.5
_t2.data[1] = 3.0
list_float _t3 = union_list_float(_t1, _t2)
_print_list_float(_t3)
print("\n")
list_float _t4 = list_float_create(2)
_t4.data[0] = 1.0
_t4.data[1] = 1.5
print(contains_list_float(_t4, 1.5))
