type list_int {
  len: int
  *data: int
}

type list_list_int {
  len: int
  *data: list<int>
}

fun __bswap_16(__bsx: __uint16_t): __uint16_t {
  _int_create(4)
  _t4.data[0] = 23
  _t4.data[1] = 30
  _t4.data[2] = 34
  _t4.data[3] = 60
  _t1.data[2] = _
}
fun __bswap_32(__bsx: __uint32_t): __uint32_t {
  )
  _t7.data[0] = 10
  _t7.data[1] = 11
  _t7.data[2] = 16
  _t7.data[3] = 20
  _t5.data[1] = _t7
  list_in
}
fun __uint16_identity(__x: __uint16_t): __uint16_t {
  reate(4)
  _t4
}
fun __uint32_identity(__x: __uint32_t): __uint32_t {
  3] = 60
  _t1.
}
fun __uint64_identity(__x: __uint64_t): __uint64_t {
  _int _t5 = list
}
fun searchMatrix(matrix: list<list<int>>, target: int): int {
  var m = matrix.len
  if m == 0 {
    return 0
  }
  var n = matrix.data[0].len
  var left = 0
  var right = ((m * n) - 1)
  while left <= right {
    var mid = ((left + ((right - left))) / 2)
    var row = (mid / n)
    var col = (mid % n)
    var value = matrix.data[row].data[col]
    if value == target {
      return 1
      } else if ((value < target)) {
      left = (mid + 1)
      } else {
      right = (mid - 1)
    }
  }
  return 0
}
list_list_int _t1 = list_list_int_create(3)
list_int _t2 = list_int_create(4)
_t2.data[0] = 1
_t2.data[1] = 3
_t2.data[2] = 5
_t2.data[3] = 7
_t1.data[0] = _t2
list_int _t3 = list_int_create(4)
_t3.data[0] = 10
_t3.data[1] = 11
_t3.data[2] = 16
_t3.data[3] = 20
_t1.data[1] = _t3
list_int _t4 = list_int_create(4)
_t4.data[0] = 23
_t4.data[1] = 30
_t4.data[2] = 34
_t4.data[3] = 60
_t1.data[2] = _t4
print(searchMatrix(_t1, 3))
list_list_int _t5 = list_list_int_create(3)
list_int _t6 = list_int_create(4)
_t6.data[0] = 1
_t6.data[1] = 3
_t6.data[2] = 5
_t6.data[3] = 7
_t5.data[0] = _t6
list_int _t7 = list_int_create(4)
_t7.data[0] = 10
_t7.data[1] = 11
_t7.data[2] = 16
_t7.data[3] = 20
_t5.data[1] = _t7
list_int _t8 = list_int_create(4)
_t8.data[0] = 23
_t8.data[1] = 30
_t8.data[2] = 34
_t8.data[3] = 60
_t5.data[2] = _t8
print(searchMatrix(_t5, 13))
