type list_int {
  len: int
  *data: int
}

type list_list_int {
  len: int
  *data: list<int>
}

fun __bswap_16(__bsx: __uint16_t): __uint16_t {
  main() {
  list_int _t3 = list_int_create(2)
  _t3.data[0] = 1
  _t3.data[1] = 2
  list_list_int _t4 = list_li
}
fun __uint16_identity(__x: __uint16_t): __uint16_t {
  {
    list_int _
}
fun __uint32_identity(__x: __uint32_t): __uint32_t {
  ist_list_int _t
}
fun __uint64_identity(__x: __uint64_t): __uint64_t {
  _t5.data[0] =
}
fun concat_list_list_int(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
  list_list_int r = list_list_int_create(a.len + b.len)
  for (int i = 0; i < a.len; i++)
  r.data[i] = a.data[i]
  for (int i = 0; i < b.len; i++)
  r.data[a.len + i] = b.data[i]
  return r
}
fun _print_list_int(v: list<int>) {
  print("[")
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
    print(" ")
    print(v.data[i])
  }
  print("]")
}
fun _print_list_list_int(v: list<list<int>>) {
  print("[")
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
    print(" ")
    _print_list_int(v.data[i])
  }
  print("]")
}
fun prepend(level: list<int>, result: list<list<int>>): list<list<int>> {
  list_list_int _t1 = list_list_int_create(1)
  _t1.data[0] = level
  list_list_int _t2 = concat_list_list_int(_t1, result)
  result = _t2
  return result
}
list_int _t3 = list_int_create(2)
_t3.data[0] = 1
_t3.data[1] = 2
list_list_int _t4 = list_list_int_create(2)
list_int _t5 = list_int_create(1)
_t5.data[0] = 3
_t4.data[0] = _t5
list_int _t6 = list_int_create(1)
_t6.data[0] = 4
_t4.data[1] = _t6
_print_list_list_int(prepend(_t3, _t4))
print("\n")
