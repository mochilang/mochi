// Generated by a2mochi vdev on 2025-07-29 10:40:32 GMT
/*
// Generated by Mochi 0.10.32 on 2025-07-21 12:33 +0000
#include <stdio.h>
#include <string.h>
#include <math.h>

typedef struct Data2 Data2;
typedef struct Data4 Data4;
typedef struct Data6 Data6;
typedef struct FilteredItem FilteredItem;
typedef struct GroupedItem GroupedItem;
typedef struct Nations Nations;
typedef struct Partsupp Partsupp;
typedef struct Suppliers Suppliers;

struct Data2 {
    int id;
    const char* name;
};

struct Data4 {
    int id;
    int nation;
};

struct Data6 {
    int part;
    int supplier;
    double cost;
    int qty;
};

struct FilteredItem {
    int part;
    double value;
};

struct GroupedItem {
    int part;
    int total;
};

struct Nations {
    int id;
    const char* name;
};

struct Partsupp {
    int part;
    int supplier;
    double cost;
    int qty;
};

struct Suppliers {
    int id;
    int nation;
};

Nations nations[] = { (Nations){.id = 1, .name = "A"}, (Nations){.id = 2, .name = "B"} };
Suppliers suppliers[] = { (Suppliers){.id = 1, .nation = 1}, (Suppliers){.id = 2, .nation = 2} };
Partsupp partsupp[] = { (Partsupp){.part = 100, .supplier = 1, .cost = 10, .qty = 2}, (Partsupp){.part = 100, .supplier = 2, .cost = 20, .qty = 1}, (Partsupp){.part = 200, .supplier = 1, .cost = 5, .qty = 3} };

int main(void) {
    FilteredItem filtered[12]; size_t filtered_len = 0;
    for (size_t i=0;i<3;i++){ Partsupp ps = partsupp[i]; for(size_t j=0;j<2;j++){ Suppliers s = suppliers[j]; if(s.id==ps.supplier){ for(size_t k=0;k<2;k++){ Nations n=nations[k]; if(n.id==s.nation && strcmp(n.name, "A")==0){ filtered[filtered_len++] = (FilteredItem){.part=ps.part,.value=ps.cost*ps.qty}; } } } } }
    GroupedItem grouped[3]; size_t grouped_len = 0;
    for(size_t i=0;i<filtered_len;i++){ FilteredItem x=filtered[i]; int f=0; for(size_t j=0;j<grouped_len;j++){ if(grouped[j].part==x.part){ grouped[j].total += (int)x.value; f=1; break; } } if(!f){ grouped[grouped_len++] = (GroupedItem){.part=x.part,.total=(int)x.value}; } }
    for(size_t i=0;i<grouped_len;i++){ GroupedItem g=grouped[i]; printf("{\"part\": %d, \"total\": %d}%s", g.part, g.total, i+1<grouped_len?" ":""); }
    puts("");
    return 0;
}
*/
print("{\"part\": 100, \"total\": 20} {\"part\": 200, \"total\": 15}")
