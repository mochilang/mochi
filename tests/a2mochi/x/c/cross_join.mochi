// Generated by a2mochi vdev on 2025-07-29 14:07:56 GMT
/*
// Generated by Mochi 0.10.32 on 2025-07-21 16:14 +0700
#include <stdio.h>
#include <string.h>

typedef struct Anon5 Anon5;
typedef struct Customers Customers;
typedef struct Data2 Data2;
typedef struct Data4 Data4;
typedef struct Orders Orders;

struct Anon5 {
    int orderCustomerId;
    int orderId;
    int orderTotal;
    const char* pairedCustomerName;
};

struct Customers {
    int id;
    const char* name;
};

struct Data2 {
    int id;
    const char* name;
};

struct Data4 {
    int id;
    int customerId;
    int total;
};

struct Orders {
    int id;
    int customerId;
    int total;
};

Customers customers[] = { (Customers){.id = 1, .name = "Alice"}, (Customers){.id = 2, .name = "Bob"}, (Customers){.id = 3, .name = "Charlie"} };
Orders orders[] = { (Orders){.id = 100, .customerId = 1, .total = 250}, (Orders){.id = 101, .customerId = 2, .total = 125}, (Orders){.id = 102, .customerId = 1, .total = 300} };
Anon5 result[] = { (Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Charlie"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Charlie"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Charlie"} };

int main(void) {
    puts("--- Cross Join: All order-customer pairs ---");
    {
        Anon5 entry_arr[] = {(Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 1, .orderId = 100, .orderTotal = 250, .pairedCustomerName = "Charlie"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 2, .orderId = 101, .orderTotal = 125, .pairedCustomerName = "Charlie"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Alice"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Bob"}, (Anon5){.orderCustomerId = 1, .orderId = 102, .orderTotal = 300, .pairedCustomerName = "Charlie"}};
        size_t entry_len = sizeof(entry_arr) / sizeof(entry_arr[0]);
        for (size_t i = 0; i < entry_len; i++) {
            Anon5 entry = entry_arr[i];
            printf("%s %d %s %d %s %d %s %s\n", "Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName);
        }
    }
    return 0;
}
*/
print((" - ( - ( - (Cross Join: All order - (customer pairs - ( - ( - "))))))))
let entry_len = len(entry_arr)
for i in 0..entry_len {
  print(entry.pairedCustomerName)
}
