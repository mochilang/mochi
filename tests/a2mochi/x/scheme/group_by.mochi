let people = [alist->hash-table([cons("name", "Alice"), cons("age", 30), cons("city", "Paris")]), alist->hash-table([cons("name", "Bob"), cons("age", 15), cons("city", "Hanoi")]), alist->hash-table([cons("name", "Charlie"), cons("age", 65), cons("city", "Paris")]), alist->hash-table([cons("name", "Diana"), cons("age", 45), cons("city", "Hanoi")]), alist->hash-table([cons("name", "Eve"), cons("age", 70), cons("city", "Paris")]), alist->hash-table([cons("name", "Frank"), cons("age", 22), cons("city", "Hanoi")])]
let stats = let(begin(for-each(lambda(person(), let*(begin(if(not(g9), begin(set!(g9, alist->hash-table([cons("key", k10), cons("items", [])])), hash-table-set!(groups8, k10, g9)), quote(nil)), hash-table-set!(g9, "items", append(hash-table-ref(g9, "items"), [alist->hash-table([cons("person", person)])]))))), people), for-each(lambda(g(), set!(res11, append(res11, [alist->hash-table([cons("city", hash-table-ref(g, "key")), cons("count", length(hash-table-ref(g, "items"))), cons("avg_age", let(exact->inexact((apply(+, xs) / length(xs)))))])]))), hash-table-values(groups8)), res11))
print("--- People grouped by city ---")
print("")
