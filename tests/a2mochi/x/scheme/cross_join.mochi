// Generated by Mochi v0.10.47 on 2025-07-29 09:40:59 GMT+7
/*
;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define customers (list (alist->hash-table (list (cons "id" 1)
 (cons "name" "Alice")
)
)
 (alist->hash-table (list (cons "id" 2)
 (cons "name" "Bob")
)
)
 (alist->hash-table (list (cons "id" 3)
 (cons "name" "Charlie")
)
)
)
)
(define orders (list (alist->hash-table (list (cons "id" 100)
 (cons "customerId" 1)
 (cons "total" 250)
)
)
 (alist->hash-table (list (cons "id" 101)
 (cons "customerId" 2)
 (cons "total" 125)
)
)
 (alist->hash-table (list (cons "id" 102)
 (cons "customerId" 1)
 (cons "total" 300)
)
)
)
)
(define result (let ((res14 (list)
)
)
 (begin (for-each (lambda (o)
 (for-each (lambda (c)
 (set! res14 (append res14 (list (alist->hash-table (list (cons "orderId" (hash-table-ref o "id")
)
 (cons "orderCustomerId" (hash-table-ref o "customerId")
)
 (cons "pairedCustomerName" (hash-table-ref c "name")
)
 (cons "orderTotal" (hash-table-ref o "total")
)
)
)
)
)
)
)
 customers)
)
 orders)
 res14)
)
)
(display (to-str "--- Cross Join: All order-customer pairs ---")
)
(newline)
(call/cc (lambda (break16)
 (letrec ((loop15 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((entry (car xs)
)
)
 (begin (display (to-str "Order")
)
 (display " ")
 (display (to-str (hash-table-ref entry "orderId")
)
)
 (display " ")
 (display (to-str "(customerId:")
)
 (display " ")
 (display (to-str (hash-table-ref entry "orderCustomerId")
)
)
 (display " ")
 (display (to-str ", total: $")
)
 (display " ")
 (display (to-str (hash-table-ref entry "orderTotal")
)
)
 (display " ")
 (display (to-str ")
 paired with")
)
 (display " ")
 (display (to-str (hash-table-ref entry "pairedCustomerName")
)
)
 (newline)
)
)
 (loop15 (cdr xs)
)
)
)
)
)
)
 (loop15 result)
)
)
)
*/
use.scheme_base
use.scheme_time
use.chibi_string
use.scheme_char
use.srfi_69
fun to_str(x: any) {
  block
}
fun upper(s: any) {
  block
}
fun lower(s: any) {
  block
}
fun fmod(a: any, b: any) {
  block
}
let customers
let orders
let result
