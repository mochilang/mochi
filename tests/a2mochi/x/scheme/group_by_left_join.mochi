let customers = [alist_to_hash_table([cons("id", 1), cons("name", "Alice")]), alist_to_hash_table([cons("id", 2), cons("name", "Bob")]), alist_to_hash_table([cons("id", 3), cons("name", "Charlie")])]
let orders = [alist_to_hash_table([cons("id", 100), cons("customerId", 1)]), alist_to_hash_table([cons("id", 101), cons("customerId", 1)]), alist_to_hash_table([cons("id", 102), cons("customerId", 2)])]
let stats = let(begin(for_each(lambda(c(), for_each(lambda(o(), if((hash_table_ref(o, "customerId") == hash_table_ref(c, "id")), let*(begin(if(not(g25), begin(set_bang(g25, alist_to_hash_table([cons("key", k26), cons("items", [])])), hash_table_set_bang(groups24, k26, g25)), quote(nil)), hash_table_set_bang(g25, "items", append(hash_table_ref(g25, "items"), [alist_to_hash_table([cons("c", c), cons("o", o)])])))), quote(nil))), orders)), customers), for_each(lambda(g(), set_bang(res27, append(res27, [alist_to_hash_table([cons("name", hash_table_ref(g, "key")), cons("count", length(let(begin(for_each(lambda(r(), if(hash_table_ref(r, "o"), set_bang(res23, append(res23, [r])), quote(nil))), hash_table_ref(g, "items")), res23))))])]))), hash_table_values(groups24)), res27))
print "--- Group Left Join ---"
print ""
