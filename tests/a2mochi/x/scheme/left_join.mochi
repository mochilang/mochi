// Generated by Mochi v0.10.47 on 2025-07-28 18:20:55 GMT+7
/*
;; Generated by Mochi 0.10.31 on 2025-07-20 12:52 +0700
#lang racket
(require racket/list racket/string)

(define customers (list (hash id 1 name "Alice") (hash id 2 name "Bob")))
(define orders (list (hash id 100 customerId 1 total 250) (hash id 101 customerId 3 total 80)))
(define result (let ([_res '()])
  (for ([o orders])
    (let ([matched #f])
      (for ([c customers])
        (when (= (hash-ref o "customerId") (hash-ref c "id"))
          (set! matched #t)
          (set! _res (append _res (list (hash orderId (hash-ref o "id") customer c total (hash-ref o "total")))))
      )
      (when (not matched)
        (let ([c #f])
          (set! _res (append _res (list (hash orderId (hash-ref o "id") customer c total (hash-ref o "total")))))
        )
      )
    ))
  )
  _res))
(displayln "--- Left Join ---")
(for ([entry result])
(displayln (format "~a ~a ~a ~a ~a ~a" "Order" (hash-ref entry "orderId") "customer" (hash-ref entry "customer") "total" (hash-ref entry "total")))
)
*/
use racket/list
use racket/string
let customers
let orders
let result
