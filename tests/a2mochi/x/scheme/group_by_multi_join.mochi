let nations = [alist->hash-table([cons("id", 1), cons("name", "A")]), alist->hash-table([cons("id", 2), cons("name", "B")])]
let suppliers = [alist->hash-table([cons("id", 1), cons("nation", 1)]), alist->hash-table([cons("id", 2), cons("nation", 2)])]
let partsupp = [alist->hash-table([cons("part", 100), cons("supplier", 1), cons("cost", 10), cons("qty", 2)]), alist->hash-table([cons("part", 100), cons("supplier", 2), cons("cost", 20), cons("qty", 1)]), alist->hash-table([cons("part", 200), cons("supplier", 1), cons("cost", 5), cons("qty", 3)])]
let filtered = let(begin(for-each(lambda(ps(), for-each(lambda(s(), for-each(lambda(n(), if(and(and(string=?(hash-table-ref(n, "name"), "A"), (hash-table-ref(s, "id") == hash-table-ref(ps, "supplier"))), (hash-table-ref(n, "id") == hash-table-ref(s, "nation"))), set!(res1, append(res1, [alist->hash-table([cons("part", hash-table-ref(ps, "part")), cons("value", (hash-table-ref(ps, "cost") * hash-table-ref(ps, "qty")))])])), quote(nil))), nations)), suppliers)), partsupp), res1))
let grouped = let(begin(for-each(lambda(x(), let*(begin(if(not(g4), begin(set!(g4, alist->hash-table([cons("key", k5), cons("items", [])])), hash-table-set!(groups3, k5, g4)), quote(nil)), hash-table-set!(g4, "items", append(hash-table-ref(g4, "items"), [x]))))), filtered), for-each(lambda(g(), set!(res6, append(res6, [alist->hash-table([cons("part", hash-table-ref(g, "key")), cons("total", apply(+, let(begin(for-each(lambda(r(), set!(res2, append(res2, [hash-table-ref(r, "value")]))), hash-table-ref(g, "items")), res2))))])]))), hash-table-values(groups3)), res6))
print(to-str(grouped))
print("")
