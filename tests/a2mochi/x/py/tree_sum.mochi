// Mochi 0.10.48 2025-07-30 00:18:49 GMT+7
/*
# Code generated by Mochi transpiler.
# Version 0.10.34, generated on 2025-07-22 09:56 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict

Leaf = None
@dataclass
class Node:
    left: Tree
    value: int
    right: Tree

def sum_tree(t):
    return (0 if t == Leaf else (sum_tree(t.left) + t.value + sum_tree(t.right) if t != None else None))
t = Node(left=Leaf, value=1, right=Node(left=Leaf, value=2, right=Leaf))
print(sum_tree(t))

*/
type Node {
  left: Tree
  value: int
  right: Tree
}
fun sum_tree(t: int): int {
  return if t == Leaf then 0 else if t != nil then sum_tree(t.left) + t.value + sum_tree(t.right) else nil
}
var t = Node {left: Leaf, value: 1, right: Node {left: Leaf, value: 2, right: Leaf}}
print(sum_tree(t))
