// Mochi 0.10.48 2025-07-30 00:58:37 GMT+7
/*
# Code generated by Mochi transpiler.
# Version 0.10.36, generated on 2025-07-22 17:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict

@dataclass
class Customer:
    id: int
    name: str

customers = [Customer(1, "Alice"), Customer(2, "Bob"), Customer(3, "Charlie")]
@dataclass
class Order:
    id: int
    customerId: int
    total: int

orders = [Order(100, 1, 250), Order(101, 2, 125), Order(102, 1, 300)]
@dataclass
class Result:
    orderId: int
    orderCustomerId: int
    pairedCustomerName: str
    orderTotal: int

result = [Result(o.id, o.customerId, c.name, o.total) for o in orders for c in customers]
print("--- Cross Join: All order-customer pairs ---")
for entry in result:
    print("Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName)

*/
type Customer {
  id: int
  name: string
}
var customers: list<Customer> = [Customer{id: 1, name: "Alice"}, Customer{id: 2, name: "Bob"}, Customer{id: 3, name: "Charlie"}]
type Order {
  id: int
  customerId: int
  total: int
}
var orders: list<Order> = [Order{id: 100, customerId: 1, total: 250}, Order{id: 101, customerId: 2, total: 125}, Order{id: 102, customerId: 1, total: 300}]
type Result {
  orderId: int
  orderCustomerId: int
  pairedCustomerName: string
  orderTotal: int
}
var result = from o in orders from c in customers select Result{orderId: o.id, orderCustomerId: o.customerId, pairedCustomerName: c.name, orderTotal: o.total}
print("--- Cross Join: All order-customer pairs ---")
for entry in result {
  print("Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName)
}
