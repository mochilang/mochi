// Generated by Mochi v0.10.47 on 2025-07-29 15:21:09 GMT+7
fun input() {
  return io.read("*l")
}
let _nil = []
var _now_seed = 0
var _now_seeded = false
fun _now(): int {
  if _now_seeded {
    var _now_seed = (((_now_seed * 1664525) + 1013904223) % 2147483647)
    return _now_seed
  }
  return ((os.time() * 1000000000) + math.floor((os.clock() * 1000000000)))
}
fun _padStart() {
  if ((ch == null) || (ch == "")) {
    let ch = " "
  }
  if (len(s) >= len) {
    return s
  }
  let fill = substring(ch, 1, 1)
  return (string.rep(fill, (len - len(s))) + s)
}
fun _gcd() {
  let a = math.abs(a)
  let b = math.abs(b)
  while (b != 0) {
    a = b
    b = (a % b)
  }
  return a
}
fun _bigrat() {
  if ((((type(n) == "table") && (n.num != null)) && (n.den != null)) && (d == null)) {
    return n
  }
  if (d == null) {
    let d = 1
  }
  if (d < 0) {
    let n = (0 - n)
    let d = (0 - d)
  }
  let g = _gcd(n, d)
  return {"num": (n / g), "den": (d / g)}
}
fun _add() {
  return _bigrat(((a.num * b.den) + (b.num * a.den)), (a.den * b.den))
}
fun _sub() {
  return _bigrat(((a.num * b.den) - (b.num * a.den)), (a.den * b.den))
}
fun _mul() {
  return _bigrat((a.num * b.num), (a.den * b.den))
}
fun _div() {
  return _bigrat((a.num * b.den), (a.den * b.num))
}
fun num(x: int) {
  if ((type(x) == "table") && (x.num != null)) {
    return x.num
  }
  return x
}
fun denom(x): int {
  if ((type(x) == "table") && (x.den != null)) {
    return x.den
  }
  return 1
}
fun _sha256() {
  let tmp = os.tmpname()
  let f = assert(io.open(tmp, "wb"))
  for i in 1..(len(bs) + 1) {
    f.write(string.char(bs.i))
  }
  f.close()
  let p = io.popen(("sha256sum " + tmp))
  let out = (p.read("*l") || "")
  p.close()
  os.remove(tmp)
  let hex = substring(out, 1, 64)
  let res = []
  for i in 1..(len(hex) + 2) {
    res[len(res)] = tonumber(substring(hex, i, (i + 1)), 16)
  }
  return res
}
fun _indexOf() {
  for i in 1..(len(s) + 1) {
    if (substring(s, i, i) == ch) {
      return (i - 1)
    }
  }
  return (0 - 1)
}
fun _parseIntStr() {
  let n = tonumber(str, 10)
  if (n == null) {
    return 0
  }
  return math.floor(n)
}
fun slice() {
  if (s < 0) {
    var s = (len(lst) + s)
  }
  if (e == null) {
    let e = len(lst)
  }
  let r = []
  for i in (s + 1)..(e + 1) {
    r[len(r)] = lst.i
  }
  return r
}
