(program
  (let customers
    (list
      (map
        (entry (selector id) (int 1))
        (entry (selector name) (string Alice))
      )
      (map
        (entry (selector id) (int 2))
        (entry (selector name) (string Bob))
      )
      (map
        (entry (selector id) (int 3))
        (entry (selector name) (string Charlie))
      )
    )
  )
  (let orders
    (list
      (map
        (entry (selector id) (int 100))
        (entry (selector customerId) (int 1))
        (entry (selector total) (int 250))
      )
      (map
        (entry (selector id) (int 101))
        (entry (selector customerId) (int 2))
        (entry (selector total) (int 125))
      )
      (map
        (entry (selector id) (int 102))
        (entry (selector customerId) (int 1))
        (entry (selector total) (int 300))
      )
      (map
        (entry (selector id) (int 103))
        (entry (selector customerId) (int 4))
        (entry (selector total) (int 80))
      )
    )
  )
  (let result
    (query o
      (source (selector orders))
      (join c
        (source (selector customers))
        (on
          (binary ==
            (selector customerId (selector o))
            (selector id (selector c))
          )
        )
      )
      (select
        (map
          (entry
            (selector orderId)
            (selector id (selector o))
          )
          (entry
            (selector customerName)
            (selector name (selector c))
          )
          (entry
            (selector total)
            (selector total (selector o))
          )
        )
      )
    )
  )
  (call print (string "--- Orders with customer info ---"))
  (for entry
    (in (selector result))
    (block
      (call print
        (string Order)
        (selector orderId (selector entry))
        (string by)
        (selector customerName (selector entry))
        (string "- $")
        (selector total (selector entry))
      )
    )
  )
)
