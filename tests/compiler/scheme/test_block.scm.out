(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_addition_works)
  (define x (+ 1 2))
  (when (not (= x 3)) (error "expect failed"))
)

(begin (display "ok") (newline))
(run-test "addition works" test_addition_works)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
