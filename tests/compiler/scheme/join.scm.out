(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '())))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m))))
)

(define (new-Customer id name)
	(list (cons 'id id) (cons 'name name))
)

(define (new-Order id customerId total)
	(list (cons 'id id) (cons 'customerId customerId) (cons 'total total))
)

(define (new-PairInfo orderId customerName total)
	(list (cons 'orderId orderId) (cons 'customerName customerName) (cons 'total total))
)

(define customers (list (list (cons 'id 1) (cons 'name "Alice")) (list (cons 'id 2) (cons 'name "Bob")) (list (cons 'id 3) (cons 'name "Charlie"))))
(define orders (list (list (cons 'id 100) (cons 'customerId 1) (cons 'total 250)) (list (cons 'id 101) (cons 'customerId 2) (cons 'total 125)) (list (cons 'id 102) (cons 'customerId 1) (cons 'total 300)) (list (cons 'id 103) (cons 'customerId 4) (cons 'total 80))))
(define result (let ((_res '()))
  (for-each (lambda (o)
    (for-each (lambda (c)
      (when (= (map-get o 'customerId) (map-get c 'id))
        (set! _res (append _res (list (list (cons 'orderId (map-get o 'id)) (cons 'customerName (map-get c 'name)) (cons 'total (map-get o 'total))))))
      )) (if (string? customers) (string->list customers) customers))
  ) (if (string? orders) (string->list orders) orders))
  _res))
(begin (display "--- Orders with customer info ---") (newline))
(let loop ((entry_idx 0))
	(if (< entry_idx (length result))
		(begin
			(let ((entry (list-ref result entry_idx)))
				(begin (display "Order") (display " ") (display (map-get entry 'orderId)) (display " ") (display "by") (display " ") (display (map-get entry 'customerName)) (display " ") (display "- $") (display " ") (display (map-get entry 'total)) (newline))
			)
			(loop (+ entry_idx 1))
		)
	'()
)
