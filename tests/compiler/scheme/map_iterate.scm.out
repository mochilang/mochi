(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define m (list ))
(set! m (map-set m 1 #t))
(set! m (map-set m 2 #t))
(define sum 0)
(let loop ((k_idx 0))
  (if (< k_idx (length (map car m)))
    (begin
      (let ((k (list-ref (map car m) k_idx)))
        (set! sum (+ sum k))
      )
      (loop (+ k_idx 1))
    )
  '()
)
(begin (display sum) (newline))
