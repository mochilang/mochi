(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '())))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m))))
)
(define (_dataset_filter xs pred)
  (let loop ((xs xs) (out '()))
    (if (null? xs)
        (reverse out)
        (let ((x (car xs)))
          (if (pred x)
              (loop (cdr xs) (cons x out))
              (loop (cdr xs) out)))))
  )

(define (new-Person name age)
	(list (cons 'name name) (cons 'age age))
)

(define people (list (list (cons 'name "Alice") (cons 'age 30)) (list (cons 'name "Bob") (cons 'age 15)) (list (cons 'name "Charlie") (cons 'age 65))))
(define names (let ((_res '()))
  (for-each (lambda (p)
    (set! _res (append _res (list (map-get p 'name))))
  ) (if (string? (_dataset_filter (if (string? people) (string->list people) people) (lambda (p) (>= (map-get p 'age) 18)))) (string->list (_dataset_filter (if (string? people) (string->list people) people) (lambda (p) (>= (map-get p 'age) 18)))) (_dataset_filter (if (string? people) (string->list people) people) (lambda (p) (>= (map-get p 'age) 18)))))
  _res))
(let loop ((n_idx 0))
	(if (< n_idx (length names))
		(begin
			(let ((n (list-ref names n_idx)))
				(begin (display n) (newline))
			)
			(loop (+ n_idx 1))
		)
	'()
)
