(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define (new-Person name age)
  (list (cons 'name name) (cons 'age age))
)

(define people (list (list (cons 'name "Alice") (cons 'age 30)) (list (cons 'name "Bob") (cons 'age 15)) (list (cons 'name "Charlie") (cons 'age 65))))
(define names (let ((_res '()))
  (for-each (lambda (p)
    (when (>= (map-get p 'age) 18)
      (set! _res (append _res (list (map-get p 'name))))
    )
  ) (if (string? people) (string->list people) people))
  _res))
(let loop ((n_idx 0))
  (if (< n_idx (length names))
    (begin
      (let ((n (list-ref names n_idx)))
        (begin (display n) (newline))
      )
      (loop (+ n_idx 1))
    )
  '()
)
