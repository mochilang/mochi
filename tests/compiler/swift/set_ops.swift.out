import Foundation

func _except<T: Equatable>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  for it in a { if !b.contains(it) { res.append(it) } }
  return res
}
func _intersect<T: Equatable>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  for it in a { if b.contains(it) && !res.contains(it) { res.append(it) } }
  return res
}
func _union<T: Equatable>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = a
  for it in b { if !res.contains(it) { res.append(it) } }
  return res
}
let a: [Int] = [1, 2, 3]
let b: [Int] = [3, 4]
func main() {
  print(_union(a, b))
  print(_except(a, b))
  print(_intersect(a, b))
  print(_union([1, 2], [2, 3]))
}
main()
