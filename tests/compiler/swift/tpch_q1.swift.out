import Foundation

func expect(_ cond: Bool) {
	if !cond { fatalError("expect failed") }
}

class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
    var groups: [String: _Group] = [:]
    var order: [String] = []
    for it in src {
        let key = keyfn(it)
        let ks = String(describing: key)
        if groups[ks] == nil {
            groups[ks] = _Group(key)
            order.append(ks)
        }
        groups[ks]!.Items.append(it)
    }
    return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
    if let d = try? JSONSerialization.data(withJSONObject: v, options: []), let s = String(data: d, encoding: .utf8) {
        print(s)
    }
}

func test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
	expect(result == [["returnflag": "N", "linestatus": "O", "sum_qty": 53, "sum_base_price": 3000, "sum_disc_price": 950 + 1800, "sum_charge": (950 * 1.07) + (1800 * 1.05), "avg_qty": 26.5, "avg_price": 1500, "avg_disc": 0.07500000000000001, "count_order": 2]])
}

func main() {
	let lineitem = [["l_quantity": 17, "l_extendedprice": 1000, "l_discount": 0.05, "l_tax": 0.07, "l_returnflag": "N", "l_linestatus": "O", "l_shipdate": "1998-08-01"], ["l_quantity": 36, "l_extendedprice": 2000, "l_discount": 0.1, "l_tax": 0.05, "l_returnflag": "N", "l_linestatus": "O", "l_shipdate": "1998-09-01"], ["l_quantity": 25, "l_extendedprice": 1500, "l_discount": 0, "l_tax": 0.08, "l_returnflag": "R", "l_linestatus": "F", "l_shipdate": "1998-09-03"]]
	let result = _group_by(lineitem.filter { row in row["l_shipdate"]! <= "1998-09-02" }.map { $0 as Any }, { row in ["returnflag": row["l_returnflag"]!, "linestatus": row["l_linestatus"]!] }).map { g in ["returnflag": g.key.returnflag, "linestatus": g.key.linestatus, "sum_qty": sum(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_quantity)
	}
	var _items = _res
	return _items
}())), "sum_base_price": sum(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_extendedprice)
	}
	var _items = _res
	return _items
}())), "sum_disc_price": sum(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_extendedprice * (1 - x.l_discount))
	}
	var _items = _res
	return _items
}())), "sum_charge": sum(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax))
	}
	var _items = _res
	return _items
}())), "avg_qty": _avg(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_quantity)
	}
	var _items = _res
	return _items
}()).map { Double($0) }), "avg_price": _avg(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_extendedprice)
	}
	var _items = _res
	return _items
}()).map { Double($0) }), "avg_disc": _avg(({
	var _res: [Any] = []
	for x in g {
		_res.append(x.l_discount)
	}
	var _items = _res
	return _items
}()).map { Double($0) }), "count_order": g.count] }
	_json(result)
	test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
}
main()
