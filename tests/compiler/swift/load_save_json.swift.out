import Foundation

func _readInput(_ path: String?) -> String {
    if let p = path, !p.isEmpty && p != "-" {
        return (try? String(contentsOfFile: p)) ?? ""
    }
    let data = FileHandle.standardInput.readDataToEndOfFile()
    return String(data: data, encoding: .utf8) ?? ""
}
func _parseCSV(_ text: String, _ header: Bool, _ delim: Character) -> [[String: Any]] {
    let lines = text.split(whereSeparator: { $0 == "\n" || $0 == "\r" })
    if lines.isEmpty { return [] }
    var headers: [String] = []
    var start = 0
    if header {
        headers = lines[0].split(separator: delim).map { String($0) }
        start = 1
    } else {
        headers = lines[0].split(separator: delim).enumerated().map { "c" + String($0.offset) }
    }
    var out: [[String: Any]] = []
    for i in start..<lines.count {
        let parts = lines[i].split(separator: delim)
        var row: [String: Any] = [:]
        for j in 0..<headers.count {
            let val = j < parts.count ? String(parts[j]) : ""
            if let iv = Int(val) { row[headers[j]] = iv } else if let dv = Double(val) { row[headers[j]] = dv } else { row[headers[j]] = val }
        }
        out.append(row)
    }
    return out
}
func _load(_ path: String?, _ opts: [String: Any]?) -> [[String: Any]] {
    let format = (opts?["format"] as? String) ?? "csv"
    let header = (opts?["header"] as? Bool) ?? true
    var delim: Character = ','
    if let d = opts?["delimiter"] as? String, !d.isEmpty { delim = d.first! }
    let text = _readInput(path)
    switch format {
    case "jsonl":
        return text.split(separator: "\n").filter { !$0.isEmpty }.compactMap { line in
            if let data = line.data(using: .utf8), let obj = try? JSONSerialization.jsonObject(with: data) as? [String: Any] { return obj }
            return nil
        }
    case "json":
        if let data = text.data(using: .utf8) {
            if let arr = try? JSONSerialization.jsonObject(with: data) as? [[String: Any]] { return arr }
            if let obj = try? JSONSerialization.jsonObject(with: data) as? [String: Any] { return [obj] }
        }
        return []
    case "tsv":
        delim = '\t'
        fallthrough
    default:
        return _parseCSV(text, header, delim)
    }
}

func _writeOutput(_ path: String?, _ text: String) {
    if let p = path, !p.isEmpty && p != "-" {
        try? text.write(toFile: p, atomically: true, encoding: .utf8)
    } else {
        if let data = text.data(using: .utf8) { FileHandle.standardOutput.write(data) }
    }
}
func _save(_ rows: [[String: Any]], _ path: String?, _ opts: [String: Any]?) {
    let format = (opts?["format"] as? String) ?? "csv"
    let header = (opts?["header"] as? Bool) ?? false
    var delim: Character = ','
    if let d = opts?["delimiter"] as? String, !d.isEmpty { delim = d.first! }
    var text = ""
    switch format {
    case "jsonl":
        for r in rows { if let d = try? JSONSerialization.data(withJSONObject: r), let s = String(data: d, encoding: .utf8) { text += s + "\n" } }
    case "json":
        let obj: Any = rows.count == 1 ? rows[0] : rows
        if let d = try? JSONSerialization.data(withJSONObject: obj), let s = String(data: d, encoding: .utf8) { text = s }
    case "tsv":
        delim = '\t'
        fallthrough
    default:
        let headers = rows.isEmpty ? [] : rows[0].keys.sorted()
        var lines: [String] = []
        if header && !headers.isEmpty { lines.append(headers.joined(separator: String(delim))) }
        for r in rows {
            let rec = headers.map { h in String(describing: r[h] ?? "") }
            lines.append(rec.joined(separator: String(delim)))
        }
        text = lines.joined(separator: "\n") + "\n"
    }
    _writeOutput(path, text)
}

func _toMapSlice(_ v: Any) -> [[String: Any]] {
    if let rows = v as? [[String: Any]] { return rows }
    var arr: [Any] = []
    if let a = v as? [Any] { arr = a } else { arr = [v] }
    var out: [[String: Any]] = []
    for item in arr {
        if let m = item as? [String: Any] { out.append(m); continue }
        let mirror = Mirror(reflecting: item)
        if mirror.displayStyle == .struct || mirror.displayStyle == .class {
            var m: [String: Any] = [:]
            for child in mirror.children {
                if let k = child.label { m[k] = child.value }
            }
            out.append(m)
        }
    }
    return out
}
struct Person {
	var name: String
	var age: Int
	var email: String
}

func main() {
	let people: [Person] = _load(nil, ["format": "json"])
	let adults: [Person] = ({
	var _res: [Person] = []
	for p in people {
		if !(p.age >= 18) { continue }
		_res.append(p)
	}
	var _items = _res
	return _items
}())
	_save(_toMapSlice(adults), nil, ["format": "json"])
}
main()
