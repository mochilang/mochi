#!/usr/bin/env escript
-module(main).
-export([main/1, Leaf/0, Node/3]).

Leaf() ->
	try
		throw({return, #{"__name" => "Leaf"}})
	catch
		throw:{return, V} -> V
	end.

Node(left, value, right) ->
	try
		throw({return, #{"__name" => "Node", "left" => left, "value" => value, "right" => right}})
	catch
		throw:{return, V} -> V
	end.

main(_) ->
	tree = Node(Leaf(), 1, Leaf()),
	mochi_print([mochi_get(mochi_get(tree, "left"), "__name")]).

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L)
	.
mochi_avg(_) -> erlang:error(badarg).

mochi_get(M, K) when is_list(M), is_integer(K) -> lists:nth(K + 1, M);
mochi_get(M, K) when is_map(M) -> maps:get(K, M);
mochi_get(_, _) -> erlang:error(badarg).

mochi_while(Cond, Body) ->
	case Cond() of
		true ->
			Body(),
			mochi_while(Cond, Body);
		_ -> ok
	end.
