#!/usr/bin/env escript
-module(main).
-export([main/1]).

main(_) ->
	c = 0,
	lists:foreach(fun(_) ->
		c = (c + 1)
	end, lists:seq(0, (2)-1)),
	lists:foreach(fun(_) ->
		c = (c + 1)
	end, [1, 2]),
	lists:foreach(fun(_) ->
		c = (c + 1)
	end, "ab"),
	m = #{"x" => 1, "y" => 2},
	lists:foreach(fun(_) ->
		c = (c + 1)
	end, m),
	mochi_print([c]).

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L)
	.
mochi_avg(_) -> erlang:error(badarg).

mochi_while(Cond, Body) ->
	case Cond() of
		true ->
			Body(),
			mochi_while(Cond, Body);
		_ -> ok
	end.
