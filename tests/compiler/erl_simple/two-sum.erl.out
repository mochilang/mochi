#!/usr/bin/env escript
-module(main).
-export([main/1, 'twoSum'/2]).

'twoSum'(Nums, Target) ->
    try
        N = length(Nums),
        mochi_foreach(fun(I) ->
            mochi_foreach(fun(J) ->
                                case ((mochi_get(Nums, I) + mochi_get(Nums, J)) == Target) of
                    true ->
                        throw({return, [I, J]});
                                        _ -> ok
                end
            end, lists:seq((I + 1), (N)-1))
        end, lists:seq(0, (N)-1)),
        throw({return, [-1, -1]})
    catch
        throw:{return, V} -> V
    end.

main(_) ->
    Result = 'twoSum'([2, 7, 11, 15], 9),
    mochi_print([mochi_get(Result, 0)]),
    mochi_print([mochi_get(Result, 1)]).

mochi_print(Args) ->
    Strs = [ mochi_format(A) || A <- Args ],
    io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_foreach(F, L) ->
    try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.

mochi_foreach_loop(_, []) -> ok;
mochi_foreach_loop(F, [H|T]) ->
    try F(H) catch
        throw:mochi_continue -> ok;
        throw:mochi_break -> throw(mochi_break)
    end,
    mochi_foreach_loop(F, T).

mochi_get(L, I) when is_list(L), is_integer(I) ->
    N = length(L),
    Idx = case I >= 0 of true -> I + 1; false -> N + I + 1 end,
    lists:nth(Idx, L);
mochi_get(M, K) when is_map(M) -> maps:get(K, M);
mochi_get(_, _) -> erlang:error(badarg).
