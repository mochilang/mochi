#!/usr/bin/env escript
-module(main).
-export([main/1]).

-record(msg, {message}).

main(_) ->
	Data = mochi_fetch("file://tests/compiler/erl_simple/fetch_builtin.json", undefined),
	mochi_print([Data#msg.message]).

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).


mochi_fetch(Url, Opts) when Opts =:= undefined ->
	mochi_fetch(Url, #{});
mochi_fetch(Url, Opts) ->
	application:ensure_all_started(inets),
	Method0 = maps:get(method, Opts, get),
	Method = case Method0 of
		M when is_atom(M) -> M;
		M when is_list(M) -> list_to_atom(string:lowercase(M));
		M when is_binary(M) -> list_to_atom(string:lowercase(binary_to_list(M)));
		_ -> get
	end,
	Query = maps:get(query, Opts, undefined),
	Url1 = case Query of
		undefined -> Url;
		Q ->
			Pairs = [ K ++ "=" ++ lists:flatten(io_lib:format("~p", [V])) || {K,V} <- maps:to_list(Q) ],
			Sep = case lists:member($?, Url) of true -> "&"; false -> "?" end,
			Url ++ Sep ++ string:join(Pairs, "&")
		end,
	HeadersMap = maps:get(headers, Opts, #{}),
	Headers = [ {K, case V of B when is_binary(V) -> binary_to_list(V); _ -> lists:flatten(io_lib:format("~p", [V])) end} || {K,V} <- maps:to_list(HeadersMap) ],
	BodyOpt = maps:get(body, Opts, undefined),
	Req = case BodyOpt of
		undefined -> {Url1, Headers};
		B -> {Url1, Headers, "application/json", list_to_binary(mochi_to_json(B))}
	end,
	TimeoutOpt = maps:get(timeout, Opts, undefined),
	HTTPOpts = case TimeoutOpt of
		undefined -> [];
		T when is_integer(T) -> [{timeout, T * 1000}];
		T when is_float(T) -> [{timeout, trunc(T * 1000)}];
		_ -> []
	end,
	case httpc:request(Method, Req, HTTPOpts, []) of
		{ok, {{_, 200, _}, _H, Body}} -> Body;
		_ -> []
	end.
