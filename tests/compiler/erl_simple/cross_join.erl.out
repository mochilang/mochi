#!/usr/bin/env escript
-module(main).
-export([main/1]).

-record(customer, {id, name}).
-record(order, {id, customerid, total}).
-record(pairinfo, {orderid, ordercustomerid, pairedcustomername, ordertotal}).

main(_) ->
	Customers = [#customer{id=1, name="Alice"}, #customer{id=2, name="Bob"}, #customer{id=3, name="Charlie"}],
	Orders = [#order{id=100, customerid=1, total=250}, #order{id=101, customerid=2, total=125}, #order{id=102, customerid=1, total=300}],
	Result = [#pairinfo{orderid=O#order.id, ordercustomerid=O#order.customerid, pairedcustomername=C#customer.name, ordertotal=O#order.total} || O <- Orders, C <- Customers],
	mochi_print(["--- Cross Join: All order-customer pairs ---"]),
	mochi_foreach(fun(Entry) ->
		mochi_print(["Order", Entry#pairinfo.orderid, "(customerId:", Entry#pairinfo.ordercustomerid, ", total: $", Entry#pairinfo.ordertotal, ") paired with", Entry#pairinfo.pairedcustomername])
	end, Result).

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_foreach(F, L) ->
	try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.

mochi_foreach_loop(_, []) -> ok;
mochi_foreach_loop(F, [H|T]) ->
	try F(H) catch
		throw:mochi_continue -> ok;
		throw:mochi_break -> throw(mochi_break)
	end,
	mochi_foreach_loop(F, T).
