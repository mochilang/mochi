# Generated by Mochi Elixir compiler
defmodule Main do
	def main do
		lineitem = [%{l_quantity: 17, l_extendedprice: 1000, l_discount: 0.05, l_tax: 0.07, l_returnflag: "N", l_linestatus: "O", l_shipdate: "1998-08-01"}, %{l_quantity: 36, l_extendedprice: 2000, l_discount: 0.1, l_tax: 0.05, l_returnflag: "N", l_linestatus: "O", l_shipdate: "1998-09-01"}, %{l_quantity: 25, l_extendedprice: 1500, l_discount: 0, l_tax: 0.08, l_returnflag: "R", l_linestatus: "F", l_shipdate: "1998-09-03"}]
		result = (fn ->
	_src = lineitem
	_rows = _query(_src, [
	], %{select: fn row -> [row] end, where: fn row -> (row.l_shipdate <= "1998-09-02") end })
	_groups = _group_by(_rows, fn row -> %{returnflag: row.l_returnflag, linestatus: row.l_linestatus} end)
	_groups = Enum.map(_groups, fn g -> %{g | Items: Enum.map(g.Items, fn [row] -> row end)} end)
	items = _groups
	Enum.map(items, fn g -> %{returnflag: g.key.returnflag, linestatus: g.key.linestatus, sum_qty: _sum(for x <- g, do: x.l_quantity), sum_base_price: _sum(for x <- g, do: x.l_extendedprice), sum_disc_price: _sum(for x <- g, do: (x.l_extendedprice * (1 - x.l_discount))), sum_charge: _sum(for x <- g, do: ((x.l_extendedprice * (1 - x.l_discount)) * (1 + x.l_tax))), avg_qty: _avg(for x <- g, do: x.l_quantity), avg_price: _avg(for x <- g, do: x.l_extendedprice), avg_disc: _avg(for x <- g, do: x.l_discount), count_order: _count(g)} end)
end)()
		IO.puts(Jason.encode!(result))
	end
	defp _avg(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
    is_list(v) -> v
    true -> raise "avg() expects list or group"
  end
  if Enum.count(list) == 0 do
    0
  else
    Enum.sum(list) / Enum.count(list)
  end
end

	defp _count(v) do
  cond do
    is_list(v) -> length(v)
    is_map(v) and Map.has_key?(v, :Items) -> length(v[:Items])
    true -> raise "count() expects list or group"
  end
end

	defmodule _Group do
  defstruct key: nil, Items: []
end

	defp _group_by(src, keyfn) do
  {groups, order} = Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
    key = keyfn.(it)
    ks = to_string(key)
    {groups, order} = if Map.has_key?(groups, ks) do
      {groups, order}
    else
      {Map.put(groups, ks, %_Group{key: key}), order ++ [ks]}
    end
    groups = Map.update!(groups, ks, fn g -> %{g | Items: g.Items ++ [it]} end)
    {groups, order}
  end)
  Enum.map(order, fn k -> groups[k] end)
end

	defp _query(src, joins, opts \ %{}) do
  where = Map.get(opts, :where)
  items = Enum.map(src, fn v -> [v] end)
  items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items
  items = Enum.reduce(joins, items, fn j, items ->
    joined = cond do
      Map.get(j, :right) && Map.get(j, :left) ->
        matched = for _ <- j[:items], do: false
        {res, matched} = Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
          {acc, matched, m} = Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri}, {acc, matched, m} ->
            keep = if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true
            if keep do
              matched = List.replace_at(matched, ri, true)
              {acc ++ [left ++ [right]], matched, true}
            else
              {acc, matched, m}
            end
          end)
          acc = if !m, do: acc ++ [left ++ [nil]], else: acc
          {acc, matched}
        end)
        Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
          if Enum.at(matched, ri) do
            acc
          else
            undef = List.duplicate(nil, if items == [], do: 0, else: length(hd(items)))
            acc ++ [undef ++ [right]]
          end
        end)
      Map.get(j, :right) ->
        Enum.reduce(j[:items], [], fn right, acc ->
          {acc2, m} = Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
            keep = if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if !m do
            undef = List.duplicate(nil, if items == [], do: 0, else: length(hd(items)))
            acc2 ++ [undef ++ [right]]
          else
            acc2
          end
        end)
      true ->
        Enum.reduce(items, [], fn left, acc ->
          {acc2, m} = Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
            keep = if Map.has_key?(j, :on) and j[:on], do: apply(j[:on], left ++ [right]), else: true
            if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
          end)
          if Map.get(j, :left) && !m do
            acc2 ++ [left ++ [nil]]
          else
            acc2
          end
        end)
    end
    joined = if where, do: Enum.filter(joined, fn r -> where.(r) end), else: joined
    joined
  end)
  items = if Map.has_key?(opts, :sortKey), do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end), else: items
  items = if Map.has_key?(opts, :skip), do: (n = opts[:skip]; if n < length(items), do: Enum.drop(items, n), else: []), else: items
  items = if Map.has_key?(opts, :take), do: (n = opts[:take]; if n < length(items), do: Enum.take(items, n), else: items), else: items
  Enum.map(items, fn r -> apply(opts[:select], r) end)
end

	defp _sum(v) do
  list = cond do
    is_map(v) and Map.has_key?(v, :Items) -> v[:Items]
    is_list(v) -> v
    true -> raise "sum() expects list or group"
  end
  Enum.sum(list)
end

	end
Main.main()
