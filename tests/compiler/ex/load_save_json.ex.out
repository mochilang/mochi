# Generated by Mochi Elixir compiler
defmodule Main do
	def main do
		people = _load(nil, %{format: "json"})
		adults = for p <- people, (p.age >= 18), do: p
		_save(adults, nil, %{format: "json"})
	end
	defp _load(path, opts \ nil) do
  format = if opts, do: Map.get(opts, "format", "csv"), else: "csv"
  header = if opts && Map.has_key?(opts, "header"), do: opts["header"], else: true
  delim = if opts && Map.has_key?(opts, "delimiter"), do: String.first(to_string(opts["delimiter"] || ",")), else: ","
  text = case path do
    nil -> IO.read(:stdio, :eof)
    "" -> IO.read(:stdio, :eof)
    "-" -> IO.read(:stdio, :eof)
    _ -> File.read!(path)
  end
  case format do
    "jsonl" -> String.trim(text) |> String.split(~r/\r?\n/, trim: true) |> Enum.map(&Jason.decode!/1)
    "json" -> case Jason.decode!(text) do
                list when is_list(list) -> list
                obj -> [obj]
              end
    "tsv" -> _parse_csv(text, header, "	")
    _ -> _parse_csv(text, header, delim)
  end
end

	defp _save(data, path, opts \ nil) do
  rows = _to_map_list(data)
  format = if opts, do: Map.get(opts, "format", "csv"), else: "csv"
  header = if opts && Map.has_key?(opts, "header"), do: opts["header"], else: false
  delim = if opts && Map.has_key?(opts, "delimiter"), do: String.first(to_string(opts["delimiter"] || ",")), else: ","
  out = case format do
    "json" -> Jason.encode!(rows)
    "jsonl" -> Enum.map(rows, &Jason.encode!/1) |> Enum.join("\n") <> "\n"
    "tsv" -> _to_csv(rows, header, "	")
    _ -> _to_csv(rows, header, delim)
  end
  case path do
    nil -> IO.write(:stdio, out)
    "" -> IO.write(:stdio, out)
    "-" -> IO.write(:stdio, out)
    _ -> File.write!(path, out)
  end
end

	end
Main.main()
