# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    IO.puts(_union([1, 2], [2, 3]))
    IO.puts(_except([1, 2, 3], [2]))
    IO.puts(_intersect([1, 2, 3], [2, 4]))
  end
  defp _except(a, b) do
  Enum.reject(a, fn x -> Enum.member?(b, x) end)
end

  defp _intersect(a, b) do
  Enum.filter(a, fn x -> Enum.member?(b, x) end) |> Enum.uniq()
end

  defp _union(a, b) do
  Enum.uniq(a ++ b)
end

  end
Main.main()
