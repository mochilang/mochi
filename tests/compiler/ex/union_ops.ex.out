# Generated by Mochi Elixir compiler
defmodule Main do
	def main do
		a = [1, 2, 3]
		b = [3, 4]
		IO.puts(_union(a, b))
		IO.puts(_except(a, b))
		IO.puts(_intersect(a, b))
	end
	defp _except(a, b) do
  Enum.reduce(a || [], [], fn it, acc ->
    if Enum.member?(b || [], it) do
      acc
    else
      acc ++ [it]
    end
  end)
end

	defp _intersect(a, b) do
  Enum.reduce(a || [], [], fn it, acc ->
    if Enum.member?(b || [], it) and not Enum.member?(acc, it) do
      acc ++ [it]
    else
      acc
    end
  end)
end

	defp _union(a, b) do
  res = if a, do: Enum.to_list(a), else: []
  Enum.reduce(b || [], res, fn it, acc ->
    if Enum.any?(acc, fn x -> x == it end) do
      acc
    else
      acc ++ [it]
    end
  end)
end

	end
Main.main()
