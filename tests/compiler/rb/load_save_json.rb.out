require "ostruct"

def _load(path = nil, opts = nil)
  require "csv"
  require "json"
  require "yaml"
  fmt = "csv"
  header = true
  delim = ","
  if opts
    fmt = opts["format"] || fmt
    header = opts["header"] if opts.key?("header")
    delim = opts["delimiter"] || delim
    delim = delim[0] if delim.is_a?(String) && !delim.empty?
  end
  io = (path.nil? || path == "") ? STDIN : File.open(path, "r")
  begin
    case fmt
    when "csv", "tsv"
      delim = "\t" if fmt == "tsv"
      rows = CSV.read(io, col_sep: delim)
      return [] if rows.empty?
      if header
        headers = rows.shift
      else
        m = rows.map(&:length).max || 0
        headers = Array.new(m) { |i| "c#{i}" }
      end
      rows.map do |rec|
        row = {}
        headers.each_with_index do |h, i|
          val = rec[i] || ""
          row[h] = if /^-?\d+$/.match?(val)
            val.to_i
          elsif /^-?\d+\.\d+$/.match?(val)
            val.to_f
          else
            val
          end
        end
        row
      end
    when "json"
      data = JSON.parse(io.read)
      data.is_a?(Array) ? data.map { |d| d } : [data]
    when "jsonl"
      io.each_line.map { |l| JSON.parse(l) }
    when "yaml"
      data = YAML.safe_load(io.read)
      data.is_a?(Array) ? data.map { |d| d } : [data]
    else
      raise "unknown format: #{fmt}"
    end
  ensure
    io.close unless io == STDIN
  end
end

def _save(rows, path = nil, opts = nil)
  require "csv"
  require "json"
  require "yaml"
  fmt = "csv"
  header = false
  delim = ","
  if opts
    fmt = opts["format"] || fmt
    header = opts["header"] if opts.key?("header")
    delim = opts["delimiter"] || delim
    delim = delim[0] if delim.is_a?(String) && !delim.empty?
  end
  rows = rows.map { |r| r.respond_to?(:to_h) ? r.to_h : r }
  io = (path.nil? || path == "") ? STDOUT : File.open(path, "w")
  begin
    case fmt
    when "csv", "tsv"
      delim = "\t" if fmt == "tsv"
      csv = CSV.new(io, col_sep: delim)
      headers = rows.empty? ? [] : rows.first.keys.sort
      csv << headers if header
      rows.each do |row|
        csv << headers.map { |h|
          val = row[h]
          if val.is_a?(Hash) || val.is_a?(Array)
            JSON.generate(val)
          elsif val.nil?
            ""
          else
            val.to_s
          end
        }
      end
    when "json"
      io.write(JSON.generate(rows))
    when "jsonl"
      rows.each { |row| io.puts(JSON.generate(row)) }
    when "yaml"
      io.write(YAML.dump((rows.length == 1) ? rows.first : rows))
    else
      raise "unknown format: #{fmt}"
    end
  ensure
    io.close unless io == STDOUT
  end
end

Person = Struct.new(:name, :age, keyword_init: true)

people = _load(nil, OpenStruct.new(format: "json").to_h.transform_keys(&:to_s)).map { |_it| Person.new(**_it) }
_save(people, nil, OpenStruct.new(format: "json").to_h.transform_keys(&:to_s))
