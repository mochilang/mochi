require "ostruct"

def _fetch(url, opts = nil)
  require "net/http"
  require "json"
  require "uri"
  uri = URI(url)
  if uri.scheme.nil? || uri.scheme == "" || uri.scheme == "file"
    path = (uri.scheme == "file") ? uri.path : url
    data = File.read(path)
    return _structify(JSON.parse(data))
  end
  method = "GET"
  headers = {}
  body = nil
  timeout = nil
  if opts
    method = opts["method"] || method
    if q = opts["query"]
      q = URI.encode_www_form(q.to_h)
      uri.query = [uri.query, q].compact.join("&")
    end
    body = JSON.generate(opts["body"]) if opts["body"]
    if opts["headers"]
      opts["headers"].to_h.each { |k, v| headers[k] = v.to_s }
    end
    timeout = opts["timeout"]
  end
  req = Net::HTTP.const_get(method.capitalize).new(uri)
  headers.each { |k, v| req[k] = v }
  req.body = body if body
  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == "https", read_timeout: timeout) do |http|
    resp = http.request(req)
    return _structify(JSON.parse(resp.body))
  end
end

def _structify(v)
  case v
  when Hash
    OpenStruct.new(v.transform_keys(&:to_sym).transform_values { |vv| _structify(vv) })
  when Array
    v.map { |vv| _structify(vv) }
  else
    v
  end
end

Todo = Struct.new(:userId, :id, :title, :completed, keyword_init: true)

todo = Todo.new(**_structify(_fetch("https://jsonplaceholder.typicode.com/todos/1", nil)).to_h.transform_keys(&:to_sym))
puts([todo.title].join(" "))
