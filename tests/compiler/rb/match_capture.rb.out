module Tree; end
class Leaf
	include Tree
end
Node = Struct.new(:left, :value, :right, keyword_init: true) do
	include Tree
end

def depth(t)
	return (begin
	_t0 = t
	if _t0.is_a?(Leaf)
		0
	elsif _t0.is_a?(Node)
		(->(l, r){ ((depth(l) + depth(r)) + 1) }).call(_t0.left, _t0.right)
	else
		nil
	end
end)
end

puts([depth(Node.new(left: Leaf.new(), value: 0, right: Leaf.new()))].join(" "))
