// Build BST from sorted list using nested recursive function

 type Tree =
   Leaf
   | Node(left: Tree, value: int, right: Tree)

 fun fromList(nums: list<int>): Tree {
   fun helper(lo: int, hi: int): Tree {
     if lo >= hi { return Leaf {} }
     let mid = (lo + hi) / 2
     return Node {
       left: helper(lo, mid),
       value: nums[mid],
       right: helper(mid + 1, hi)
     }
   }
   return helper(0, len(nums))
 }

 fun inorder(t: Tree): list<int> {
   return match t {
     Leaf => []
     Node(l, v, r) => inorder(l) + [v] + inorder(r)
   }
 }

 print(inorder(fromList([-10, -3, 0, 5, 9])))
