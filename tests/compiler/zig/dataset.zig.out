const std = @import("std");

pub fn main() void {
	const people: []const std.AutoHashMap([]const u8, i32) = &[_]std.AutoHashMap([]const u8, i32){blk: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put(name, "Alice") catch unreachable; m.put(age, @as(i32,@intCast(30))) catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put(name, "Bob") catch unreachable; m.put(age, @as(i32,@intCast(15))) catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put(name, "Charlie") catch unreachable; m.put(age, @as(i32,@intCast(65))) catch unreachable; break :blk m; }, blk: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put(name, "Diana") catch unreachable; m.put(age, @as(i32,@intCast(45))) catch unreachable; break :blk m; }};
	const adults: []const std.AutoHashMap([]const u8, i32) = blk: { var _tmp0 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator); for (people) |person| { if (!((person.age >= @as(i32,@intCast(18))))) continue; _tmp0.append(blk: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put(name, person.name) catch unreachable; m.put(age, person.age) catch unreachable; m.put(is_senior, (person.age >= @as(i32,@intCast(60)))) catch unreachable; break :blk m; }) catch unreachable; } var _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk _tmp1; };
	for (adults) |person| {
		std.debug.print("{any} {s} {any} {s}\n", .{person.name, "is", person.age, "years old."});
		if (person.is_senior) {
			std.debug.print("{s}\n", .{" (senior)"});
		}
	}
}
