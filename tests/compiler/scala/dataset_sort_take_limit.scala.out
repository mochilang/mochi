object Main {
	def main(args: Array[String]): Unit = {
		val products: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map(name -> "Laptop", price -> 1500), scala.collection.mutable.Map(name -> "Smartphone", price -> 900), scala.collection.mutable.Map(name -> "Tablet", price -> 600), scala.collection.mutable.Map(name -> "Monitor", price -> 300), scala.collection.mutable.Map(name -> "Keyboard", price -> 100), scala.collection.mutable.Map(name -> "Mouse", price -> 50), scala.collection.mutable.Map(name -> "Headphones", price -> 200))
		val expensive: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
	val src = products
	val plan = _QueryPlan(src, Seq(
	), Map("select" -> (args: Seq[Any]) => {
	val p = args(0)
	p
}, "sortKey" -> (args: Seq[Any]) => {
	val p = args(0)
	(-p.price)
}, "skip" -> 1, "take" -> 3))
	_evalPlan(plan)
})()
		println("--- Top products (excluding most expensive) ---")
		val it1 = expensive.iterator
		while (it1.hasNext) {
			val item: scala.collection.mutable.Map[String, Any] = it1.next()
			println(item.name, "costs $", item.price)
		}
	}
}
case class _JoinSpec(items: Seq[Any], on: Option[Seq[Any] => Boolean] = None, left: Boolean = false, right: Boolean = false)
case class _QueryPlan(src: Seq[Any], joins: Seq[_JoinSpec], opts: Map[String,Any])
def _evalPlan(plan: _QueryPlan): Seq[Any] = {
        val jmaps = plan.joins.map { j =>
                var m = Map[String,Any]("items" -> j.items)
                j.on.foreach(fn => m += ("on" -> fn))
                if (j.left) m += ("left" -> true)
                if (j.right) m += ("right" -> true)
                m
        }
        _query(plan.src, jmaps, plan.opts)
}

