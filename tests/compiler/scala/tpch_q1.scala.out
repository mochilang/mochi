object Main {
	def test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus(): Unit = {
		expect((result == scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map(returnflag -> "N", linestatus -> "O", sum_qty -> 53, sum_base_price -> 3000, sum_disc_price -> (950 + 1800), sum_charge -> (((950 * 1.07)) + ((1800 * 1.05))), avg_qty -> 26.5, avg_price -> 1500, avg_disc -> 0.07500000000000001, count_order -> 2))))
	}
	
	def main(args: Array[String]): Unit = {
		val lineitem: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = scala.collection.mutable.ArrayBuffer(scala.collection.mutable.Map(l_quantity -> 17, l_extendedprice -> 1000, l_discount -> 0.05, l_tax -> 0.07, l_returnflag -> "N", l_linestatus -> "O", l_shipdate -> "1998-08-01"), scala.collection.mutable.Map(l_quantity -> 36, l_extendedprice -> 2000, l_discount -> 0.1, l_tax -> 0.05, l_returnflag -> "N", l_linestatus -> "O", l_shipdate -> "1998-09-01"), scala.collection.mutable.Map(l_quantity -> 25, l_extendedprice -> 1500, l_discount -> 0, l_tax -> 0.08, l_returnflag -> "R", l_linestatus -> "F", l_shipdate -> "1998-09-03"))
		val result: scala.collection.mutable.ArrayBuffer[scala.collection.mutable.Map[String, Any]] = (() => {
	val src = lineitem
	val res = _query(src, Seq(
	), Map("select" -> (args: Seq[Any]) => {
	val row = args(0)
	scala.collection.mutable.Map(returnflag -> g.key.returnflag, linestatus -> g.key.linestatus, sum_qty -> sum((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_quantity
	}))
		res
	})()), sum_base_price -> sum((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_extendedprice
	}))
		res
	})()), sum_disc_price -> sum((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		(x.l_extendedprice * ((1 - x.l_discount)))
	}))
		res
	})()), sum_charge -> sum((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		((x.l_extendedprice * ((1 - x.l_discount))) * ((1 + x.l_tax)))
	}))
		res
	})()), avg_qty -> ((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_quantity
	}))
		res
	})().sum / (() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_quantity
	}))
		res
	})().size), avg_price -> ((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_extendedprice
	}))
		res
	})().sum / (() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_extendedprice
	}))
		res
	})().size), avg_disc -> ((() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_discount
	}))
		res
	})().sum / (() => {
		val src = g
		val res = _query(src, Seq(
		), Map("select" -> (args: Seq[Any]) => {
		val x = args(0)
		x.l_discount
	}))
		res
	})().size), count_order -> g.size)
}, "where" -> (args: Seq[Any]) => {
	val row = args(0)
	(row.l_shipdate <= "1998-09-02")
}))
	res
})()
		_json(result)
		test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
	}
}
def expect(cond: Boolean): Unit = {
        if (!cond) throw new RuntimeException("expect failed")
}

def _json(v: Any): Unit = println(_to_json(v))

def _query(src: Seq[Any], joins: Seq[Map[String,Any]], opts: Map[String,Any]): Seq[Any] = {
        var items = src.map(v => Seq[Any](v))
        for (j <- joins) {
                val joined = scala.collection.mutable.ArrayBuffer[Seq[Any]]()
                val jitems = j("items").asInstanceOf[Seq[Any]]
                val on = j.get("on").map(_.asInstanceOf[Seq[Any] => Boolean])
                val left = j.get("left").exists(_.asInstanceOf[Boolean])
                val right = j.get("right").exists(_.asInstanceOf[Boolean])
                if (left && right) {
                        val matched = Array.fill(jitems.length)(false)
                        for (leftRow <- items) {
                                var m = false
                                for ((rightRow, ri) <- jitems.zipWithIndex) {
                                        var keep = true
                                        if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                        if (keep) { m = true; matched(ri) = true; joined.append(leftRow :+ rightRow) }
                                }
                                if (!m) joined.append(leftRow :+ null)
                        }
                        for ((rightRow, ri) <- jitems.zipWithIndex) {
                                if (!matched(ri)) {
                                        val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                        joined.append(undef :+ rightRow)
                                }
                        }
                } else if (right) {
                        for (rightRow <- jitems) {
                                var m = false
                                for (leftRow <- items) {
                                        var keep = true
                                        if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                        if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                }
                                if (!m) {
                                        val undef = if (items.nonEmpty) Seq.fill(items.head.length)(null) else Seq[Any]()
                                        joined.append(undef :+ rightRow)
                                }
                        }
                } else {
                        for (leftRow <- items) {
                                var m = false
                                for (rightRow <- jitems) {
                                        var keep = true
                                        if (on.isDefined) keep = on.get(leftRow :+ rightRow)
                                        if (keep) { m = true; joined.append(leftRow :+ rightRow) }
                                }
                                if (left && !m) joined.append(leftRow :+ null)
                        }
                }
                items = joined.toSeq
        }
        var it = items
        opts.get("where").foreach { f =>
                val fn = f.asInstanceOf[Seq[Any] => Boolean]
                it = it.filter(r => fn(r))
        }
        opts.get("sortKey").foreach { f =>
                val fn = f.asInstanceOf[Seq[Any] => Any]
                it = it.sortBy(r => fn(r))(_anyOrdering)
        }
        opts.get("skip").foreach { n => it = it.drop(n.asInstanceOf[Int]) }
        opts.get("take").foreach { n => it = it.take(n.asInstanceOf[Int]) }
        val sel = opts("select").asInstanceOf[Seq[Any] => Any]
        it.map(r => sel(r))
}

def _to_json(v: Any): String = v match {
        case null => "null"
        case s: String => "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
        case b: Boolean => b.toString
        case i: Int => i.toString
        case l: Long => l.toString
        case d: Double => d.toString
        case m: scala.collection.Map[_, _] =>
                m.map{ case (k, v2) => "\"" + k.toString.replace("\"", "\\\"") + "\":" + _to_json(v2) }.mkString("{", ",", "}")
        case seq: Iterable[_] => seq.map(_to_json).mkString("[", ",", "]")
        case other => "\"" + other.toString.replace("\\", "\\\\").replace("\"", "\\\"") + "\""
}

