object Main {
    def Leaf(): scala.collection.mutable.Map[String, Any] = {
        return _cast[scala.collection.mutable.Map[String, Any]](scala.collection.mutable.Map("__name" -> "Leaf"))
    }
    
    def Node(left: scala.collection.mutable.Map[String, Any], value: Int, right: scala.collection.mutable.Map[String, Any]): scala.collection.mutable.Map[String, Any] = {
        return scala.collection.mutable.Map("__name" -> "Node", "left" -> left, "value" -> value, "right" -> right)
    }
    
    def main(args: Array[String]): Unit = {
        var tree = Node(Leaf(), 1, Leaf())
        println((_cast[scala.collection.mutable.Map[String, Any]](tree("left")))("__name"))
    }
}
def _cast[T](v: Any)(implicit ct: scala.reflect.ClassTag[T]): T = {
        val cls = ct.runtimeClass
        if (cls == classOf[Int]) v match {
                case i: Int => i
                case d: Double => d.toInt
                case s: String => s.toInt
                case _ => 0
        } else if (cls == classOf[Double]) v match {
                case d: Double => d
                case i: Int => i.toDouble
                case s: String => s.toDouble
                case _ => 0.0
        } else if (cls == classOf[Boolean]) v match {
                case b: Boolean => b
                case s: String => s == "true"
                case _ => false
        } else if (cls == classOf[String]) v.toString.asInstanceOf[T]
        else if (cls.isInstance(v)) v.asInstanceOf[T]
        else if (v.isInstanceOf[scala.collection.Map[_, _]]) {
                val m = v.asInstanceOf[scala.collection.Map[String, Any]]
                val ctor = cls.getConstructors.head
                val params = ctor.getParameters.map { p =>
                        m.getOrElse(p.getName, null).asInstanceOf[AnyRef]
                }
                ctor.newInstance(params: _*).asInstanceOf[T]
        } else {
                v.asInstanceOf[T]
        }
}
