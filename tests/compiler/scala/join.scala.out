case class Customer(id: Int, name: String)

case class Order(id: Int, customerId: Int, total: Int)

case class PairInfo(orderId: Int, customerName: String, total: Int)

object Main {
	def main(args: Array[String]): Unit = {
		val customers: scala.collection.mutable.ArrayBuffer[Any] = scala.collection.mutable.ArrayBuffer(Customer(id = 1, name = "Alice"), Customer(id = 2, name = "Bob"), Customer(id = 3, name = "Charlie"))
		val orders: scala.collection.mutable.ArrayBuffer[Any] = scala.collection.mutable.ArrayBuffer(Order(id = 100, customerId = 1, total = 250), Order(id = 101, customerId = 2, total = 125), Order(id = 102, customerId = 1, total = 300), Order(id = 103, customerId = 4, total = 80))
		val result: scala.collection.mutable.ArrayBuffer[Any] = (() => {
	val src = orders
	val plan = _QueryPlan(src, Seq(
		_JoinSpec(customers, Some((args: Seq[Any]) => {
	val o = args(0)
	val c = args(1)
	(o.customerId == c.id)
}), false, false)
	), Map("select" -> (args: Seq[Any]) => {
	val o = args(0)
	val c = args(1)
	PairInfo(orderId = o.id, customerName = c.name, total = o.total)
}))
	_evalPlan(plan)
})()
		println("--- Orders with customer info ---")
		val it1 = result.iterator
		while (it1.hasNext) {
			val entry = it1.next()
			println("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
		}
	}
}
case class _JoinSpec(items: Seq[Any], on: Option[Seq[Any] => Boolean] = None, left: Boolean = false, right: Boolean = false)
case class _QueryPlan(src: Seq[Any], joins: Seq[_JoinSpec], opts: Map[String,Any])
def _evalPlan(plan: _QueryPlan): Seq[Any] = {
        val jmaps = plan.joins.map { j =>
                var m = Map[String,Any]("items" -> j.items)
                j.on.foreach(fn => m += ("on" -> fn))
                if (j.left) m += ("left" -> true)
                if (j.right) m += ("right" -> true)
                m
        }
        _query(plan.src, jmaps, plan.opts)
}

