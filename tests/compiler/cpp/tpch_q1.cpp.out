// Original Mochi source:
// let lineitem = [
//   {
//     l_quantity: 17,
//     l_extendedprice: 1000.0,
//     l_discount: 0.05,
//     l_tax: 0.07,
//     l_returnflag: "N",
//     l_linestatus: "O",
//     l_shipdate: "1998-08-01"
//   },
//   {
//     l_quantity: 36,
//     l_extendedprice: 2000.0,
//     l_discount: 0.10,
//     l_tax: 0.05,
//     l_returnflag: "N",
//     l_linestatus: "O",
//     l_shipdate: "1998-09-01"
//   },
//   {
//     l_quantity: 25,
//     l_extendedprice: 1500.0,
//     l_discount: 0.00,
//     l_tax: 0.08,
//     l_returnflag: "R",
//     l_linestatus: "F",
//     l_shipdate: "1998-09-03"  // excluded
//   }
// ]
// 
// let result =
//   from row in lineitem
//   where row.l_shipdate <= "1998-09-02"
//   group by {
//     returnflag: row.l_returnflag,
//     linestatus: row.l_linestatus
//   } into g
//   select {
//     returnflag: g.key.returnflag,
//     linestatus: g.key.linestatus,
//     sum_qty: sum(from x in g select x.l_quantity),
//     sum_base_price: sum(from x in g select x.l_extendedprice),
//     sum_disc_price: sum(from x in g select x.l_extendedprice * (1 - x.l_discount)),
//     sum_charge: sum(from x in g select x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax)),
//     avg_qty: avg(from x in g select x.l_quantity),
//     avg_price: avg(from x in g select x.l_extendedprice),
//     avg_disc: avg(from x in g select x.l_discount),
//     count_order: count(g)
//   }
// 
// json(result)
// 
// test "Q1 aggregates revenue and quantity by returnflag + linestatus" {
//   expect result == [
//     {
//       returnflag: "N",
//       linestatus: "O",
//       sum_qty: 53,
//       sum_base_price: 3000,
//       sum_disc_price: 950.0 + 1800.0,               // 2750.0
//       sum_charge: (950.0 * 1.07) + (1800.0 * 1.05), // 1016.5 + 1890 = 2906.5
//       avg_qty: 26.5,
//       avg_price: 1500,
//       avg_disc: 0.07500000000000001,
//       count_order: 2
//     }
//   ]
// }
// 

#include <bits/stdc++.h>
using namespace std;

template<typename T> auto _count(const T& v) -> decltype(v.size(), int{}) {
    return (int)v.size();
}
template<typename T> auto _count(const T& v) -> decltype(v.Items, int{}) {
    return (int)v.Items.size();
}

template<typename T> auto _sum(const T& v) -> decltype(v.size(), double{}) {
    double _s = 0;
    for (const auto& it : v) _s += it;
    return _s;
}
template<typename T> auto _sum(const T& v) -> decltype(v.Items, double{}) {
    return _sum(v.Items);
}

template<typename T> auto _avg(const T& v) -> decltype(v.size(), double{}) {
    if (v.size() == 0) return 0;
    double sum = 0;
    for (const auto& it : v) sum += it;
    return sum / v.size();
}
template<typename T> auto _avg(const T& v) -> decltype(v.Items, double{}) {
    return _avg(v.Items);
}

static string _escape_json(const string& s) {
    string out;
    for (char c : s) {
        if (c == '"' || c == '\\') out += '\\';
        out += c;
    }
    return out;
}
template<typename T> string _to_json(const T& v);
inline string _to_json(const string& s) {
    string out = "\"";
    out += _escape_json(s);
    out += "\"";
    return out;
}
inline string _to_json(const char* s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) { stringstream ss; ss << v; return ss.str(); }
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any& v) {
    if (v.type() == typeid(int)) return _to_json(any_cast<int>(v));
    if (v.type() == typeid(double)) return _to_json(any_cast<double>(v));
    if (v.type() == typeid(bool)) return _to_json(any_cast<bool>(v));
    if (v.type() == typeid(string)) return _to_json(any_cast<string>(v));
    return "null";
}
template<typename T> string _to_json(const vector<T>& v) {
    string out = "[";
    for (size_t i=0;i<v.size();i++) { if (i>0) out += ','; out += _to_json(v[i]); }
    out += ']';
    return out;
}
template<typename K, typename V> string _to_json(const unordered_map<K,V>& m) {
    string out = "{"; bool first = true;
    for (const auto& kv : m) {
        if (!first) out += ','; first = false;
        out += _to_json(kv.first); out += ':'; out += _to_json(kv.second);
    }
    out += '}';
    return out;
}
template<typename T> string _to_json(const T& v) { stringstream ss; ss << v; return _to_json(ss.str()); }
template<typename T> void _json(const T& v) { cout << _to_json(v) << endl; }

int main() {
    // let lineitem = [
    auto lineitem = vector<unordered_map<string, int>>{unordered_map<string, any>{{string("l_quantity"), any(17)}, {string("l_extendedprice"), any(1000.0)}, {string("l_discount"), any(0.05)}, {string("l_tax"), any(0.07)}, {string("l_returnflag"), any(string("N"))}, {string("l_linestatus"), any(string("O"))}, {string("l_shipdate"), any(string("1998-08-01"))}}, unordered_map<string, any>{{string("l_quantity"), any(36)}, {string("l_extendedprice"), any(2000.0)}, {string("l_discount"), any(0.1)}, {string("l_tax"), any(0.05)}, {string("l_returnflag"), any(string("N"))}, {string("l_linestatus"), any(string("O"))}, {string("l_shipdate"), any(string("1998-09-01"))}}, unordered_map<string, any>{{string("l_quantity"), any(25)}, {string("l_extendedprice"), any(1500.0)}, {string("l_discount"), any(0.0)}, {string("l_tax"), any(0.08)}, {string("l_returnflag"), any(string("R"))}, {string("l_linestatus"), any(string("F"))}, {string("l_shipdate"), any(string("1998-09-03"))}}};
    // let result =
    auto result = ([&]() -> vector<unordered_map<string, int>> {
    using ElemT = unordered_map<string, any>;
    using KeyT = unordered_map<string, int>;
    struct Group { KeyT Key; vector<ElemT> Items; };
    unordered_map<KeyT, Group> groups;
    vector<KeyT> order;
    for (auto& row : lineitem) {
        if (row.l_shipdate <= string("1998-09-02")) {
            KeyT _k = unordered_map<string, auto>{{string("returnflag"), row.l_returnflag}, {string("linestatus"), row.l_linestatus}};
            if (!groups.count(_k)) { groups[_k] = Group{_k, {}}; order.push_back(_k); }
            groups[_k].Items.push_back(row);
        }
    }
    vector<Group*> items;
    for (auto& _k : order) items.push_back(&groups[_k]);
    vector<unordered_map<string, int>> _res;
    for (auto* g : items) {
        _res.push_back(unordered_map<string, auto>{{string("returnflag"), g.key.returnflag}, {string("linestatus"), g.key.linestatus}, {string("sum_qty"), _sum(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_quantity);
    }
    return _res;
})())}, {string("sum_base_price"), _sum(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_extendedprice);
    }
    return _res;
})())}, {string("sum_disc_price"), _sum(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_extendedprice * (1 - x.l_discount));
    }
    return _res;
})())}, {string("sum_charge"), _sum(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax));
    }
    return _res;
})())}, {string("avg_qty"), _avg(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_quantity);
    }
    return _res;
})())}, {string("avg_price"), _avg(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_extendedprice);
    }
    return _res;
})())}, {string("avg_disc"), _avg(([&]() -> vector<auto> {
    vector<auto> _res;
    for (auto& x : g) {
        _res.push_back(x.l_discount);
    }
    return _res;
})())}, {string("count_order"), _count(g)}});
    }
    return _res;
})();
    // json(result)
    _json(result);
    auto test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus = [&]() {
        //   expect result == [
        if (!(result == vector<unordered_map<string, string>>{unordered_map<string, any>{{string("returnflag"), any(string("N"))}, {string("linestatus"), any(string("O"))}, {string("sum_qty"), any(53)}, {string("sum_base_price"), any(3000)}, {string("sum_disc_price"), any(950.0 + 1800.0)}, {string("sum_charge"), any((950.0 * 1.07) + (1800.0 * 1.05))}, {string("avg_qty"), any(26.5)}, {string("avg_price"), any(1500)}, {string("avg_disc"), any(0.07500000000000001)}, {string("count_order"), any(2)}}})) { std::cerr << "expect failed\n"; exit(1); }
    };
    test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
    return 0;
}
