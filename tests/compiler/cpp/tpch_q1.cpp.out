// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

template <typename T>
inline auto _count(const T &v) -> decltype(v.size(), int{}) {
  return (int)v.size();
}
template <typename T>
inline auto _count(const T &v) -> decltype(v.Items, int{}) {
  return (int)v.Items.size();
}

template <typename T>
inline auto _sum(const T &v) -> decltype(v.size(), double{}) {
  double _s = 0;
  for (const auto &it : v)
    _s += it;
  return _s;
}
template <typename T>
inline auto _sum(const T &v) -> decltype(v.Items, double{}) {
  return _sum(v.Items);
}

template <typename T>
inline auto _avg(const T &v) -> decltype(v.size(), double{}) {
  if (v.size() == 0)
    return 0;
  double sum = 0;
  for (const auto &it : v)
    sum += it;
  return sum / v.size();
}
template <typename T>
inline auto _avg(const T &v) -> decltype(v.Items, double{}) {
  return _avg(v.Items);
}

static string _escape_json(const string &s) {
  string out;
  for (char c : s) {
    if (c == '"' || c == '\\')
      out += '\\';
    out += c;
  }
  return out;
}
template <typename T> string _to_json(const T &v);
inline string _to_json(const string &s) {
  string out = "\"";
  out += _escape_json(s);
  out += "\"";
  return out;
}
inline string _to_json(const char *s) { return _to_json(string(s)); }
inline string _to_json(int v) { return to_string(v); }
inline string _to_json(double v) {
  stringstream ss;
  ss << v;
  return ss.str();
}
inline string _to_json(bool v) { return v ? "true" : "false"; }
inline string _to_json(const any &v) {
  if (v.type() == typeid(int))
    return _to_json(any_cast<int>(v));
  if (v.type() == typeid(double))
    return _to_json(any_cast<double>(v));
  if (v.type() == typeid(bool))
    return _to_json(any_cast<bool>(v));
  if (v.type() == typeid(string))
    return _to_json(any_cast<string>(v));
  return "null";
}
template <typename T> string _to_json(const vector<T> &v) {
  string out = "[";
  for (size_t i = 0; i < v.size(); i++) {
    if (i > 0)
      out += ',';
    out += _to_json(v[i]);
  }
  out += ']';
  return out;
}
template <typename K, typename V>
string _to_json(const unordered_map<K, V> &m) {
  string out = "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      out += ',';
    first = false;
    out += _to_json(kv.first);
    out += ':';
    out += _to_json(kv.second);
  }
  out += '}';
  return out;
}
template <typename T> string _to_json(const T &v) {
  stringstream ss;
  ss << v;
  return _to_json(ss.str());
}
template <typename T> void _json(const T &v) { cout << _to_json(v) << endl; }

template <typename T> T _cast(any v);
template <> inline int _cast<int>(any v) {
  if (v.type() == typeid(int))
    return any_cast<int>(v);
  if (v.type() == typeid(double))
    return int(any_cast<double>(v));
  if (v.type() == typeid(string))
    return stoi(any_cast<string>(v));
  return 0;
}
template <> inline double _cast<double>(any v) {
  if (v.type() == typeid(double))
    return any_cast<double>(v);
  if (v.type() == typeid(int))
    return double(any_cast<int>(v));
  if (v.type() == typeid(string))
    return stod(any_cast<string>(v));
  return 0.0;
}
template <> inline bool _cast<bool>(any v) {
  if (v.type() == typeid(bool))
    return any_cast<bool>(v);
  if (v.type() == typeid(string))
    return any_cast<string>(v) == "true";
  if (v.type() == typeid(int))
    return any_cast<int>(v) != 0;
  return false;
}
template <> inline string _cast<string>(any v) {
  if (v.type() == typeid(string))
    return any_cast<string>(v);
  if (v.type() == typeid(int))
    return to_string(any_cast<int>(v));
  if (v.type() == typeid(double)) {
    stringstream ss;
    ss << any_cast<double>(v);
    return ss.str();
  }
  if (v.type() == typeid(bool))
    return any_cast<bool>(v) ? "true" : "false";
  return "";
}

int main() {
  vector<unordered_map<string, string>> lineitem =
      vector<unordered_map<string, string>>{
          unordered_map<string, any>{
              {string("l_quantity"), any(17)},
              {string("l_extendedprice"), any(1000.0)},
              {string("l_discount"), any(0.05)},
              {string("l_tax"), any(0.07)},
              {string("l_returnflag"), any(string("N"))},
              {string("l_linestatus"), any(string("O"))},
              {string("l_shipdate"), any(string("1998-08-01"))}},
          unordered_map<string, int>{
              {string("l_quantity"), 36},
              {string("l_extendedprice"), 2000.0},
              {string("l_discount"), 0.1},
              {string("l_tax"), 0.05},
              {string("l_returnflag"), string("N")},
              {string("l_linestatus"), string("O")},
              {string("l_shipdate"), string("1998-09-01")}},
          unordered_map<string, int>{
              {string("l_quantity"), 25},
              {string("l_extendedprice"), 1500.0},
              {string("l_discount"), 0.0},
              {string("l_tax"), 0.08},
              {string("l_returnflag"), string("R")},
              {string("l_linestatus"), string("F")},
              {string("l_shipdate"), string("1998-09-03")}}};
  struct GroupKey0 {
    string returnflag;
    string linestatus;
  };
  inline bool operator==(const GroupKey0 &a, const GroupKey0 &b) {
    return a.returnflag == b.returnflag && a.linestatus == b.linestatus;
  }
  namespace std {
  template <> struct hash<GroupKey0> {
    size_t operator()(const GroupKey0 &k) const noexcept {
      size_t h = 0;
      _hash_combine(h, k.returnflag);
      _hash_combine(h, k.linestatus);
      return h;
    }
  };
  } // namespace std

  vector<unordered_map<string, double>> result =
      ([&]() -> vector<unordered_map<string, double>> {
        using ElemT = unordered_map<string, string>;
        using KeyT = GroupKey0;
        struct Group {
          KeyT Key;
          vector<ElemT> Items;
        };
        unordered_map<KeyT, Group> groups;
        vector<KeyT> order;
        for (auto &row : lineitem) {
          if (row["l_shipdate"] <= string("1998-09-02")) {
            KeyT _k = GroupKey0{row["l_returnflag"], row["l_linestatus"]};
            if (!groups.count(_k)) {
              groups[_k] = Group{_k, {}};
              order.push_back(_k);
            }
            groups[_k].Items.push_back(row);
          }
        }
        vector<Group *> items;
        for (auto &_k : order)
          items.push_back(&groups[_k]);
        vector<unordered_map<string, double>> _res;
        for (auto *g : items) {
          _res.push_back(unordered_map<string, double>{
              {string("returnflag"), g.key.returnflag},
              {string("linestatus"), g.key.linestatus},
              {string("sum_qty"), _sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_quantity"]);
                 }
                 return _res;
               })())},
              {string("sum_base_price"), _sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_extendedprice"]);
                 }
                 return _res;
               })())},
              {string("sum_disc_price"), _sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_extendedprice"] *
                       (1 -
                        _cast<unordered_map<string, any>>(x)["l_discount"]));
                 }
                 return _res;
               })())},
              {string("sum_charge"), _sum(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_extendedprice"] *
                       (1 -
                        _cast<unordered_map<string, any>>(x)["l_discount"]) *
                       (1 + _cast<unordered_map<string, any>>(x)["l_tax"]));
                 }
                 return _res;
               })())},
              {string("avg_qty"), _avg(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_quantity"]);
                 }
                 return _res;
               })())},
              {string("avg_price"), _avg(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_extendedprice"]);
                 }
                 return _res;
               })())},
              {string("avg_disc"), _avg(([&]() -> vector<any> {
                 vector<any> _res;
                 for (auto &x : g) {
                   _res.push_back(
                       _cast<unordered_map<string, any>>(x)["l_discount"]);
                 }
                 return _res;
               })())},
              {string("count_order"), _count(g)}});
        }
        return _res;
      })();
  _json(result);
  auto test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus =
      [&]() {
        if (!(result ==
              vector<unordered_map<string, double>>{unordered_map<string, int>{
                  {string("returnflag"), string("N")},
                  {string("linestatus"), string("O")},
                  {string("sum_qty"), 53},
                  {string("sum_base_price"), 3000},
                  {string("sum_disc_price"), 950.0 + 1800.0},
                  {string("sum_charge"), (950.0 * 1.07) + (1800.0 * 1.05)},
                  {string("avg_qty"), 26.5},
                  {string("avg_price"), 1500},
                  {string("avg_disc"), 0.07500000000000001},
                  {string("count_order"), 2}}})) {
          std::cerr << "expect failed\n";
          exit(1);
        }
      };
  test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus();
  return 0;
}
