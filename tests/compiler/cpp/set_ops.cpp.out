// Original Mochi source:
// 1: let a = [1, 2, 3]
// 2: let b = [3, 4]
// 3: print(a union b)
// 4: print(a except b)
// 5: print(a intersect b)
// 6: print([1, 2] union [2, 3])
// 7: 

#include <bits/stdc++.h>
using namespace std;

template<typename T> string _fmtVec(const vector<T>& v) {
    stringstream ss;
    ss << '[';
    for (size_t i = 0; i < v.size(); i++) {
        if (i > 0) ss << ' ';
        ss << v[i];
    }
    ss << ']';
    return ss.str();
}

template<typename T> vector<T> _union(const vector<T>& a, const vector<T>& b) {
    vector<T> res = a;
    for (const auto& it : b) {
        if (find(res.begin(), res.end(), it) == res.end()) res.push_back(it);
    }
    return res;
}

template<typename T> vector<T> _except(const vector<T>& a, const vector<T>& b) {
    vector<T> res;
    for (const auto& it : a) {
        if (find(b.begin(), b.end(), it) == b.end()) res.push_back(it);
    }
    return res;
}

template<typename T> vector<T> _intersect(const vector<T>& a, const vector<T>& b) {
    vector<T> res;
    for (const auto& it : a) {
        if (find(b.begin(), b.end(), it) != b.end() && find(res.begin(), res.end(), it) == res.end()) res.push_back(it);
    }
    return res;
}

int main() {
    // 1: let a = [1, 2, 3]
    auto a = vector<int>{1, 2, 3};
    // 2: let b = [3, 4]
    auto b = vector<int>{3, 4};
    // 3: print(a union b)
    std::cout << (_fmtVec(_union(a, b))) << std::endl;
    // 4: print(a except b)
    std::cout << (_fmtVec(_except(a, b))) << std::endl;
    // 5: print(a intersect b)
    std::cout << (_fmtVec(_intersect(a, b))) << std::endl;
    // 6: print([1, 2] union [2, 3])
    std::cout << (_fmtVec(_union(vector<int>{1, 2}, vector<int>{2, 3}))) << std::endl;
    return 0;
}
