// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

template <typename T> inline void _hash_combine(size_t &seed, const T &v) {
  seed ^= std::hash<T>{}(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

struct Person {
  string name;
  int age;
  string status;
};
inline bool operator==(const Person &a, const Person &b) {
  return a.name == b.name && a.age == b.age && a.status == b.status;
}
namespace std {
template <> struct hash<Person> {
  size_t operator()(const Person &k) const noexcept {
    size_t h = 0;
    _hash_combine(h, k.name);
    _hash_combine(h, k.age);
    _hash_combine(h, k.status);
    return h;
  }
};
} // namespace std

int main() {
  vector<Person> people =
      vector<Person>{Person{string("Alice"), 17, string("minor")},
                     Person{string("Bob"), 25, string("unknown")},
                     Person{string("Charlie"), 18, string("unknown")},
                     Person{string("Diana"), 16, string("minor")}};
  for (size_t _i = 0; _i < people.size(); ++_i) {
    auto &_item = people[_i];
    auto name = _item.name;
    auto age = _item.age;
    auto status = _item.status;
    if (age >= 18) {
      _item.status = string("adult");
      _item.age = age + 1;
    }
  }
  auto test_update_adult_status = [&]() {
    if (!(people ==
          vector<Person>{Person{string("Alice"), 17, string("minor")},
                         Person{string("Bob"), 26, string("adult")},
                         Person{string("Charlie"), 19, string("adult")},
                         Person{string("Diana"), 16, string("minor")}})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_update_adult_status();
  return 0;
}
