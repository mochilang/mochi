// Solution for LeetCode problem 304 - Range Sum Query 2D - Immutable
//
// This implementation builds a prefix sum matrix so each query runs in O(1).
fun newNumMatrix(matrix: list<list<int>>): NumMatrix {
  let rows = len(matrix)
  if rows == 0 {
    return NumMatrix { sums: [] as list<list<int>> }
  }
  let cols = len(matrix[0])
  // allocate (rows+1) x (cols+1) array initialized with zeros
  var sums: list<list<int>> = []
  var r = 0
  while r <= rows {
    var row: list<int> = []
    var c = 0
    while c <= cols {
      row = row + [0]
      c = c + 1
    }
    sums = sums + [row]
    r = r + 1
  }
  r = 1
  while r <= rows {
    var c = 1
    while c <= cols {
      let val = matrix[r-1][c-1]
      sums[r][c] = sums[r-1][c] + sums[r][c-1] - sums[r-1][c-1] + val
      c = c + 1
    }
    r = r + 1
  }
  return NumMatrix { sums: sums }
}

type NumMatrix {
  sums: list<list<int>>
}

fun sumRegion(nm: NumMatrix, row1: int, col1: int, row2: int, col2: int): int {
  let s = nm.sums
  return s[row2+1][col2+1] - s[row1][col2+1] - s[row2+1][col1] + s[row1][col1]
}

// Tests based on the LeetCode examples

test "example" {
  var nm = newNumMatrix([
    [3,0,1,4,2],
    [5,6,3,2,1],
    [1,2,0,1,5],
    [4,1,0,1,7],
    [1,0,3,0,5],
  ])
  expect sumRegion(nm, 2, 1, 4, 3) == 8
  expect sumRegion(nm, 1, 1, 2, 2) == 11
  expect sumRegion(nm, 1, 2, 2, 4) == 12
}

/*
Common Mochi language errors and how to fix them:
1. Forgetting to initialize the prefix sum matrix with an extra row and column.
   This causes index errors when computing sums.
2. Using '=' instead of '==' in comparisons or expect statements.
3. Trying to use union types or 'match' when simple 'if' logic works.
*/
