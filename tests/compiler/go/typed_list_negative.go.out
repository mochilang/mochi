package main

import (
	"encoding/json"
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func test_values() {
	expect((xs[0] == (-1)))
	expect((xs[1] == 0))
	expect((xs[2] == 1))
	fmt.Println("done")
}

var xs []int = []int{(-1), 0, 1}
func main() {
	test_values()
}

func _cast[T any](v any) T {
    if tv, ok := v.(T); ok { return tv }
    var out T
    switch any(out).(type) {
    case int:
        switch vv := v.(type) {
        case int:
            return any(vv).(T)
        case float64:
            return any(int(vv)).(T)
        case float32:
            return any(int(vv)).(T)
        }
    case float64:
        switch vv := v.(type) {
        case int:
            return any(float64(vv)).(T)
        case float64:
            return any(vv).(T)
        case float32:
            return any(float64(vv)).(T)
        }
    case float32:
        switch vv := v.(type) {
        case int:
            return any(float32(vv)).(T)
        case float64:
            return any(float32(vv)).(T)
        case float32:
            return any(vv).(T)
        }
    }
    if m, ok := v.(map[any]any); ok {
        v = _convertMapAny(m)
    }
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _convertMapAny(m map[any]any) map[string]any {
    out := make(map[string]any, len(m))
    for k, v := range m {
        key := fmt.Sprint(k)
        if sub, ok := v.(map[any]any); ok {
            out[key] = _convertMapAny(sub)
        } else {
            out[key] = v
        }
    }
    return out
}
