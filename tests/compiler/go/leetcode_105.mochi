type Tree =
  Leaf {}
  | Node(left: Tree, value: int, right: Tree)

fun buildTree(preorder: list<int>, inorder: list<int>): Tree {
  let n = len(preorder)
  var idxMap: map<int, int> = {}
  for i in 0..n {
    idxMap[inorder[i]] = i
  }
  var preIdx = 0
  fun helper(lo: int, hi: int): Tree {
    if lo >= hi {
      return Leaf {}
    }
    let val = preorder[preIdx]
    preIdx = preIdx + 1
    let mid = idxMap[val]
    return Node {
      left: helper(lo, mid),
      value: val,
      right: helper(mid + 1, hi)
    }
  }
  return helper(0, n)
}

fun preorderTraversal(t: Tree): list<int> {
  return match t {
    Leaf => []
    Node(l, v, r) => [v] + preorderTraversal(l) + preorderTraversal(r)
  }
}

let preorder = [3,9,20,15,7]
let inorder = [9,3,15,20,7]
print(preorderTraversal(buildTree(preorder, inorder)))
