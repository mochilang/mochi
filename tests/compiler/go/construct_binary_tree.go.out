package main

import (
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left Tree `json:"left"`
	Value int `json:"value"`
	Right Tree `json:"right"`
}
func (Node) isTree() {}

func buildTree(preorder []int, inorder []int) Tree {
	var n int = len(preorder)
	var idxMap map[int]int = map[int]int{}
	for i := 0; i < n; i++ {
		idxMap[inorder[i]] = i
	}
	var preIdx int = 0
	var helper func(int, int) Tree
	helper = func(lo int, hi int) Tree {
		if (lo >= hi) {
			return Leaf{}
		}
		var val int = preorder[preIdx]
		preIdx = (preIdx + 1)
		var mid int = idxMap[val]
		return Node{Left: helper(lo, mid), Value: val, Right: helper((mid + 1), hi)}
}
	return helper(0, n)
}

func preorderTraversal(t Tree) []int {
	return _convSlice[any,int](func() []any {
	_t := t
	if _, ok := _t.(Leaf); ok {
		return []any{}
	}
	if _tmp0, ok := _t.(Node); ok {
		l := _tmp0.Left
		v := _tmp0.Value
		r := _tmp0.Right
		return _toAnySlice(append(append([]int{}, append(append([]int{}, []int{v}...), preorderTraversal(l)...)...), preorderTraversal(r)...))
	}
	var _zero []any
	return _zero
}())
}

func inorderTraversal(t Tree) []int {
	return _convSlice[any,int](func() []any {
	_t := t
	if _, ok := _t.(Leaf); ok {
		return []any{}
	}
	if _tmp1, ok := _t.(Node); ok {
		l := _tmp1.Left
		v := _tmp1.Value
		r := _tmp1.Right
		return _toAnySlice(append(append([]int{}, append(append([]int{}, inorderTraversal(l)...), []int{v}...)...), inorderTraversal(r)...))
	}
	var _zero []any
	return _zero
}())
}

func isLeaf(t Tree) bool {
	return func() bool {
	_t := t
	if _, ok := _t.(Leaf); ok {
		return true
	}
	return false
}()
}

func example_1() {
	var preorder []int = []int{3, 9, 20, 15, 7}
	var inorder []int = []int{9, 3, 15, 20, 7}
	var tree Tree = buildTree(preorder, inorder)
	_ = tree
	expect(_equal(preorderTraversal(tree), preorder))
	expect(_equal(inorderTraversal(tree), inorder))
}

func single_node() {
	var preorder []int = []int{1}
	var inorder []int = []int{1}
	var tree Tree = buildTree(preorder, inorder)
	_ = tree
	expect(_equal(preorderTraversal(tree), preorder))
	expect(_equal(inorderTraversal(tree), inorder))
}

func empty() {
	expect((isLeaf(buildTree([]int{}, []int{})) == true))
}

func main() {
	fmt.Println(preorderTraversal(buildTree([]int{3, 9, 20, 15, 7}, []int{9, 3, 15, 20, 7})))
	example_1()
	single_node()
	empty()
}

func _convSlice[T any, U any](s []T) []U {
    out := make([]U, len(s))
    for i, v := range s { out[i] = any(v).(U) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
        if av.Len() != bv.Len() { return false }
        for i := 0; i < av.Len(); i++ {
            if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) { return false }
        }
        return true
    }
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}
