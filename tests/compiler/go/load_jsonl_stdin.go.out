package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"os"
)

type Person struct {
	Name string `json:"name"`
	Age int `json:"age"`
}

func main() {
	var people []Person = func() []Person {
	rows := _load("", _toAnyMap(map[string]string{"format": "jsonl"}))
	out := make([]Person, len(rows))
	for i, r := range rows {
		out[i] = _cast[Person](r)
	}
	return out
}()
	fmt.Println(_count(_toAnySlice(people)))
}

func _cast[T any](v any) T {
    if tv, ok := v.(T); ok { return tv }
    var out T
    switch any(out).(type) {
    case int:
        switch vv := v.(type) {
        case int:
            return any(vv).(T)
        case float64:
            return any(int(vv)).(T)
        case float32:
            return any(int(vv)).(T)
        }
    case float64:
        switch vv := v.(type) {
        case int:
            return any(float64(vv)).(T)
        case float64:
            return any(vv).(T)
        case float32:
            return any(float64(vv)).(T)
        }
    case float32:
        switch vv := v.(type) {
        case int:
            return any(float32(vv)).(T)
        case float64:
            return any(float32(vv)).(T)
        case float32:
            return any(vv).(T)
        }
    }
    if m, ok := v.(map[any]any); ok {
        v = _convertMapAny(m)
    }
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _convertMapAny(m map[any]any) map[string]any {
    out := make(map[string]any, len(m))
    for k, v := range m {
        key := fmt.Sprint(k)
        if sub, ok := v.(map[any]any); ok {
            out[key] = _convertMapAny(sub)
        } else {
            out[key] = v
        }
    }
    return out
}

func _count(v any) int {
    if g, ok := v.(*data.Group); ok { return len(g.Items) }
    switch s := v.(type) {
    case []any: return len(s)
    case []int: return len(s)
    case []float64: return len(s)
    case []string: return len(s)
    case []bool: return len(s)
    case map[string]any: return len(s)
    case string: return len([]rune(s))
    default: panic("count() expects list or group")
    }
}

func _load(path string, opts map[string]any) []map[string]any {
    format := "csv"
    header := false
    delim := ','
    if opts != nil {
        if f, ok := opts["format"].(string); ok { format = f }
        if h, ok := opts["header"].(bool); ok { header = h }
        if d, ok := opts["delimiter"].(string); ok && len(d) > 0 { delim = rune(d[0]) }
    }
    var rows []map[string]any
    var err error
    switch format {
    case "jsonl":
        if path == "" || path == "-" { rows, err = data.LoadJSONLReader(os.Stdin) } else { rows, err = data.LoadJSONL(path) }
    case "json":
        if path == "" || path == "-" { rows, err = data.LoadJSONReader(os.Stdin) } else { rows, err = data.LoadJSON(path) }
    case "yaml":
        if path == "" || path == "-" { rows, err = data.LoadYAMLReader(os.Stdin) } else { rows, err = data.LoadYAML(path) }
    case "tsv":
        delim = '	'
        fallthrough
    default:
        if path == "" || path == "-" { rows, err = data.LoadCSVReader(os.Stdin, header, delim) } else { rows, err = data.LoadCSV(path, header, delim) }
    }
    if err != nil { panic(err) }
    return rows
}

func _toAnyMap(m any) map[string]any {
    switch v := m.(type) {
    case map[string]any:
        return v
    case map[string]string:
        out := make(map[string]any, len(v))
        for k, vv := range v {
            out[k] = vv
        }
        return out
    default:
        return nil
    }
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}
