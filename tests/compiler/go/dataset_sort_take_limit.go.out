package main

import (
	"fmt"
	"sort"
)

type Product struct {
	Name  string `json:"name"`
	Price int    `json:"price"`
}

func main() {
	var products []Product = []Product{
		Product{Name: "Laptop", Price: 1500},
		Product{Name: "Smartphone", Price: 900},
		Product{Name: "Tablet", Price: 600},
		Product{Name: "Monitor", Price: 300},
		Product{Name: "Keyboard", Price: 100},
		Product{Name: "Mouse", Price: 50},
		Product{Name: "Headphones", Price: 200},
	}
	var expensive []Product = func() []Product {
		items := []Product{}
		for _, p := range products {
			items = append(items, p)
		}
		type pair struct {
			item Product
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			p := it
			pairs[idx] = pair{item: it, key: -p.Price}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		items = _paginate[Product](items, 1, 3)
		_res := []Product{}
		for _, p := range items {
			_res = append(_res, p)
		}
		return _res
	}()
	fmt.Println("--- Top products (excluding most expensive) ---")
	for _, item := range expensive {
		fmt.Println(item.Name, "costs $", item.Price)
	}
}

func _paginate[T any](src []T, skip, take int) []T {
	if skip > 0 {
		if skip < len(src) {
			src = src[skip:]
		} else {
			return []T{}
		}
	}
	if take >= 0 && take < len(src) {
		src = src[:take]
	}
	return src
}
