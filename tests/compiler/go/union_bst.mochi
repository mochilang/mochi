
type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

fun sortedListToBST(nums: list<int>): Tree {
  fun build(lo: int, hi: int): Tree {
    if lo >= hi {
      return Leaf {}
    }
    let mid = (lo + hi) / 2
    return Node { left: build(lo, mid), value: nums[mid], right: build(mid + 1, hi) }
  }
  return build(0, len(nums))
}

fun inorder(t: Tree): list<int> {
  return match t {
    Leaf => [] as list<int>
    Node(l, v, r) => inorder(l) + [v] + inorder(r)
  }
}

print(inorder(sortedListToBST([-10, -3, 0, 5, 9])))

