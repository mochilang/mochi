package main

import (
	"encoding/json"
	"fmt"
)

func build() [][]int {
	var g [][]int = [][]int{}
	g = append(append([][]int{}, g...), _convSlice[[]any,[]int]([][]any{[]any{}})...)
	return g
}

func main() {
	fmt.Println(build())
}

func _cast[T any](v any) T {
    if m, ok := v.(map[any]any); ok {
        v = _convertMapAny(m)
    }
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _convSlice[T any, U any](s []T) []U {
    out := make([]U, len(s))
    for i, v := range s { if conv, ok := any(v).(U); ok { out[i] = conv } else { out[i] = _cast[U](v) } }
    return out
}

func _convertMapAny(m map[any]any) map[string]any {
    out := make(map[string]any, len(m))
    for k, v := range m {
        key := fmt.Sprint(k)
        if sub, ok := v.(map[any]any); ok {
            out[key] = _convertMapAny(sub)
        } else {
            out[key] = v
        }
    }
    return out
}

