package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
)

func main() {
	fmt.Println(_count(_toAnySlice([]int{1, 2, 3})))
}

func _count(v any) int {
    if g, ok := v.(*data.Group); ok { return len(g.Items) }
    switch s := v.(type) {
    case []any: return len(s)
    case []int: return len(s)
    case []float64: return len(s)
    case []string: return len(s)
    case []bool: return len(s)
    case []map[string]any: return len(s)
    case map[string]any: return len(s)
    case string: return len([]rune(s))
    }
    rv := reflect.ValueOf(v)
    if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array { return rv.Len() }
    panic("count() expects list or group")
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}
