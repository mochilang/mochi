// LeetCode 105 - Construct Binary Tree from Preorder and Inorder Traversal

// Binary tree type
// Leaf represents an empty subtree
// Node holds left child, value and right child

 type Tree =
   Leaf {}
   | Node(left: Tree, value: int, right: Tree)

// Build the tree using preorder and inorder sequences
fun buildTree(preorder: list<int>, inorder: list<int>): Tree {
  let n = len(preorder)
  // Map values to their index in inorder for fast lookup
  var idxMap: map<int, int> = {}
  for i in 0..n {
    idxMap[inorder[i]] = i
  }
  var preIdx = 0

  fun helper(lo: int, hi: int): Tree {
    if lo >= hi {
      return Leaf {}
    }
    let val = preorder[preIdx]
    preIdx = preIdx + 1
    let mid = idxMap[val]
    return Node {
      left: helper(lo, mid),
      value: val,
      right: helper(mid + 1, hi)
    }
  }
  return helper(0, n)
}

fun preorderTraversal(t: Tree): list<int> {
  return match t {
    Leaf => []
    Node(l, v, r) => [v] + preorderTraversal(l) + preorderTraversal(r)
  }
}

fun inorderTraversal(t: Tree): list<int> {
  return match t {
    Leaf => []
    Node(l, v, r) => inorderTraversal(l) + [v] + inorderTraversal(r)
  }
}

fun isLeaf(t: Tree): bool {
  return match t {
    Leaf => true
    _ => false
  }
}

// Test cases from LeetCode

test "example 1" {
  let preorder = [3,9,20,15,7]
  let inorder = [9,3,15,20,7]
  let tree = buildTree(preorder, inorder)
  expect preorderTraversal(tree) == preorder
  expect inorderTraversal(tree) == inorder
}

test "single node" {
  let preorder = [1]
  let inorder = [1]
  let tree = buildTree(preorder, inorder)
  expect preorderTraversal(tree) == preorder
  expect inorderTraversal(tree) == inorder
}

test "empty" {
  expect isLeaf(buildTree([], [])) == true
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in conditions:
   if n = 0 { }     // ❌ assignment
   if n == 0 { }    // ✅ comparison
2. Reassigning an immutable binding:
   let i = 0
   i = i + 1        // ❌ cannot reassign 'let' binding
   var i = 0        // ✅ use 'var' when mutation is needed
3. Comparing complex values with '==':
   expect tree == Leaf      // ❌ type error
   expect isLeaf(tree) == true // ✅ pattern match to check variant
*/
print(preorderTraversal(buildTree([3,9,20,15,7], [9,3,15,20,7])))
