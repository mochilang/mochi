package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type NumMatrix struct {
	Sums [][]int `json:"sums"`
}

func newNumMatrix(matrix [][]int) NumMatrix {
	var rows int = len(matrix)
	if (rows == 0) {
		return NumMatrix{Sums: [][]int{}}
	}
	var cols int = len(matrix[0])
	var sums [][]int = [][]int{}
	var r int = 0
	for {
		if !((r <= rows)) {
			break
		}
		var row []int = []int{}
		var c int = 0
		for {
			if !((c <= cols)) {
				break
			}
			row = append(append([]int{}, row...), []int{0}...)
			c = (c + 1)
		}
		sums = append(append([][]int{}, sums...), [][]int{row}...)
		r = (r + 1)
	}
	r = 1
	for {
		if !((r <= rows)) {
			break
		}
		var c int = 1
		for {
			if !((c <= cols)) {
				break
			}
			var val int = matrix[(r - 1)][(c - 1)]
			sums[r][c] = (((sums[(r - 1)][c] + sums[r][(c - 1)]) - sums[(r - 1)][(c - 1)]) + val)
			c = (c + 1)
		}
		r = (r + 1)
	}
	return NumMatrix{Sums: sums}
}

func sumRegion(nm NumMatrix, row1 int, col1 int, row2 int, col2 int) int {
	var s [][]int = nm.Sums
	return (((s[(row2 + 1)][(col2 + 1)] - s[row1][(col2 + 1)]) - s[(row2 + 1)][col1]) + s[row1][col1])
}

func example() {
	var nm NumMatrix = newNumMatrix([][]int{[]int{3, 0, 1, 4, 2}, []int{5, 6, 3, 2, 1}, []int{1, 2, 0, 1, 5}, []int{4, 1, 0, 1, 7}, []int{1, 0, 3, 0, 5}})
	_ = nm
	expect((sumRegion(nm, 2, 1, 4, 3) == 8))
	expect((sumRegion(nm, 1, 1, 2, 2) == 11))
	expect((sumRegion(nm, 1, 2, 2, 4) == 12))
}

func main() {
	example()
}

