// LeetCode 207 - Course Schedule

fun canFinish(numCourses: int, prerequisites: list<list<int>>): bool {
  // build adjacency list and indegree count
  var graph: list<list<int>> = []
  var indegree: list<int> = []
  for _ in 0..numCourses {
    graph = graph + [[]]
    indegree = indegree + [0]
  }

  for pair in prerequisites {
    let a = pair[0]
    let b = pair[1]
    graph[b] = graph[b] + [a]
    indegree[a] = indegree[a] + 1
  }

  var queue: list<int> = []
  for i in 0..numCourses {
    if indegree[i] == 0 {
      queue = queue + [i]
    }
  }

  var visited = 0
  var idx = 0
  while idx < len(queue) {
    let course = queue[idx]
    idx = idx + 1
    visited = visited + 1
    for next in graph[course] {
      indegree[next] = indegree[next] - 1
      if indegree[next] == 0 {
        queue = queue + [next]
      }
    }
  }

  return visited == numCourses
}

// Test cases

test "simple acyclic" {
  expect canFinish(2, [[1,0]]) == true
}

test "simple cycle" {
  expect canFinish(2, [[1,0],[0,1]]) == false
}

test "long chain" {
  expect canFinish(4, [[1,0],[2,1],[3,2]]) == true
}

test "cycle with more courses" {
  expect canFinish(3, [[0,1],[1,2],[2,0]]) == false
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in comparisons:
   if indegree[i] = 0 { }    // ❌ assignment
   if indegree[i] == 0 { }   // ✅ comparison
2. Declaring an immutable binding and then trying to modify it:
   let count = 0
   count = count + 1         // ❌ cannot reassign 'let'
   var count = 0             // ✅ use 'var' for mutable values
3. Calling methods like 'queue.push(x)':
   queue.push(course)        // ❌ method doesn't exist
   queue = queue + [course]  // ✅ concatenate lists
*/
