fun canFinish(numCourses: int, prerequisites: list<list<int>>): bool {
  var graph: list<list<int>> = []
  var indegree: list<int> = []
  for _ in 0..numCourses {
    graph = graph + [[]]
    indegree = indegree + [0]
  }
  for pair in prerequisites {
    let a = pair[0]
    let b = pair[1]
    graph[b] = graph[b] + [a]
    indegree[a] = indegree[a] + 1
  }
  var queue: list<int> = []
  for i in 0..numCourses {
    if indegree[i] == 0 {
      queue = queue + [i]
    }
  }
  var visited = 0
  var idx = 0
  while idx < len(queue) {
    let course = queue[idx]
    idx = idx + 1
    visited = visited + 1
    for next in graph[course] {
      indegree[next] = indegree[next] - 1
      if indegree[next] == 0 {
        queue = queue + [next]
      }
    }
  }
  return visited == numCourses
}

print(canFinish(2, [[1,0]]))
print(canFinish(2, [[1,0],[0,1]]))
print(canFinish(4, [[1,0],[2,1],[3,2]]))
print(canFinish(3, [[0,1],[1,2],[2,0]]))
