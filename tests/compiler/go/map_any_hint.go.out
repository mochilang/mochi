package main

import (
	"encoding/json"
	"fmt"
)

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func main() {
	var tree map[string]any = Node(Leaf(), 1, Leaf())
	fmt.Println((_cast[map[string]any](tree["left"]))["__name"])
}

func _cast[T any](v any) T {
    var zero T
    switch any(zero).(type) {
    case int:
        switch n := v.(type) {
        case int: return any(n).(T)
        case int64: return any(int(n)).(T)
        case float64: return any(int(n)).(T)
        }
    case int64:
        switch n := v.(type) {
        case int: return any(int64(n)).(T)
        case int64: return any(n).(T)
        case float64: return any(int64(n)).(T)
        }
    case float64:
        switch n := v.(type) {
        case int: return any(float64(n)).(T)
        case int64: return any(float64(n)).(T)
        case float64: return any(n).(T)
        }
    }
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}
