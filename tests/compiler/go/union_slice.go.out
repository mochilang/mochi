package main

import (
	"encoding/json"
	"fmt"
)

type Foo interface { isFoo() }
type Empty struct {
}
func (Empty) isFoo() {}
type Node struct {
	Child Foo `json:"child"`
}
func (Node) isFoo() {}

func listit() []Foo {
	return _convSlice[Empty,Foo]([]Empty{Empty{}})
}

func main() {
	fmt.Println(len(listit()))
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _convSlice[T any, U any](s []T) []U {
    out := make([]U, len(s))
    for i, v := range s {
        if vv, ok := any(v).(U); ok {
            out[i] = vv
        } else {
            out[i] = _cast[U](v)
        }
    }
    return out
}
