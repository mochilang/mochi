package main

import (
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func isAlphaNum(ch string) bool {
	if (("0" <= ch) && (ch <= "9")) {
		return true
	}
	if (("a" <= ch) && (ch <= "z")) {
		return true
	}
	if (("A" <= ch) && (ch <= "Z")) {
		return true
	}
	return false
}

func toLower(ch string) string {
	var _map map[string]string = map[string]string{"A": "a", "B": "b", "C": "c", "D": "d", "E": "e", "F": "f", "G": "g", "H": "h", "I": "i", "J": "j", "K": "k", "L": "l", "M": "m", "N": "n", "O": "o", "P": "p", "Q": "q", "R": "r", "S": "s", "T": "t", "U": "u", "V": "v", "W": "w", "X": "x", "Y": "y", "Z": "z"}
	_tmp0 := ch
	_tmp1 := _map
	_, _tmp2 := _tmp1[_tmp0]
	if _tmp2 {
		return _map[ch]
	}
	return ch
}

func isPalindrome(s string) bool {
	var filtered []string = []string{}
	for _, r := range []rune(s) {
		ch := string(r)
		if isAlphaNum(ch) {
			filtered = append(append([]string{}, filtered...), []string{toLower(ch)}...)
		}
	}
	var n int = len(filtered)
	for i := 0; i < (n / 2); i++ {
		if (filtered[i] != filtered[((n - 1) - i)]) {
			return false
		}
	}
	return true
}

func test_example_1() {
	expect((isPalindrome("A man, a plan, a canal: Panama") == true))
}

func test_example_2() {
	expect((isPalindrome("race a car") == false))
}

func test_example_3() {
	expect((isPalindrome(" ") == true))
}

func main() {
	fmt.Println(isPalindrome("A man, a plan, a canal: Panama"))
	test_example_1()
	test_example_2()
	test_example_3()
}
