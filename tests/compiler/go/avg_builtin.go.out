package main

import (
	"fmt"
	"mochi/runtime/data"
)

func main() {
	fmt.Println(_avg([]int{1, 2, 3}))
}

func _avg(v any) float64 {
    var items []any
    if g, ok := v.(*data.Group); ok { items = g.Items } else {
        switch s := v.(type) {
        case []any:
            items = s
        case []int:
            items = make([]any, len(s))
            for i, v := range s {
                items[i] = v
            }
        case []float64:
            items = make([]any, len(s))
            for i, v := range s {
                items[i] = v
            }
        case []string:
            items = make([]any, len(s))
            for i, v := range s {
                items[i] = v
            }
        case []bool:
            items = make([]any, len(s))
            for i, v := range s {
                items[i] = v
            }
        default:
            panic("avg() expects list or group")
        }
    }
    if len(items) == 0 { return 0 }
    var sum float64
    for _, it := range items {
        switch n := it.(type) {
        case int: sum += float64(n)
        case int64: sum += float64(n)
        case float64: sum += n
        default: panic("avg() expects numbers") }
    }
    return sum / float64(len(items))
}
