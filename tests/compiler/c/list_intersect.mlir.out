; ModuleID = '/tmp/mochi-mlir-X/main.c'
source_filename = "/tmp/mochi-mlir-X/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"]\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_int, align 8
  %4 = alloca %struct.list_int, align 8
  store i32 0, ptr %1, align 4
  %5 = call { i32, ptr } @list_int_create(i32 noundef 3)
  %6 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %7 = extractvalue { i32, ptr } %5, 0
  store i32 %7, ptr %6, align 8
  %8 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %9 = extractvalue { i32, ptr } %5, 1
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i32, ptr %11, i64 0
  store i32 1, ptr %12, align 4
  %13 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds i32, ptr %14, i64 1
  store i32 2, ptr %15, align 4
  %16 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr inbounds i32, ptr %17, i64 2
  store i32 3, ptr %18, align 4
  %19 = call { i32, ptr } @list_int_create(i32 noundef 2)
  %20 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %21 = extractvalue { i32, ptr } %19, 0
  store i32 %21, ptr %20, align 8
  %22 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %23 = extractvalue { i32, ptr } %19, 1
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds i32, ptr %25, i64 0
  store i32 2, ptr %26, align 4
  %27 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr inbounds i32, ptr %28, i64 1
  store i32 4, ptr %29, align 4
  %30 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %31 = load i32, ptr %30, align 8
  %32 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %35 = load i32, ptr %34, align 8
  %36 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = call { i32, ptr } @intersect_list_int(i32 %31, ptr %33, i32 %35, ptr %37)
  %39 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %40 = extractvalue { i32, ptr } %38, 0
  store i32 %40, ptr %39, align 8
  %41 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %42 = extractvalue { i32, ptr } %38, 1
  store ptr %42, ptr %41, align 8
  %43 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %44 = load i32, ptr %43, align 8
  %45 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  call void @_print_list_int(i32 %44, ptr %46)
  %47 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #3
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @intersect_list_int(i32 %0, ptr %1, i32 %2, ptr %3) #0 {
  %5 = alloca %struct.list_int, align 8
  %6 = alloca %struct.list_int, align 8
  %7 = alloca %struct.list_int, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  store i32 %0, ptr %14, align 8
  %15 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  store ptr %1, ptr %15, align 8
  %16 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 0
  store i32 %2, ptr %16, align 8
  %17 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 1
  store ptr %3, ptr %17, align 8
  %18 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %19 = load i32, ptr %18, align 8
  %20 = call { i32, ptr } @list_int_create(i32 noundef %19)
  %21 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  %22 = extractvalue { i32, ptr } %20, 0
  store i32 %22, ptr %21, align 8
  %23 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  %24 = extractvalue { i32, ptr } %20, 1
  store ptr %24, ptr %23, align 8
  store i32 0, ptr %8, align 4
  store i32 0, ptr %9, align 4
  br label %25

25:                                               ; preds = %100, %4
  %26 = load i32, ptr %9, align 4
  %27 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %28 = load i32, ptr %27, align 8
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %103

30:                                               ; preds = %25
  store i32 0, ptr %10, align 4
  store i32 0, ptr %11, align 4
  br label %31

31:                                               ; preds = %52, %30
  %32 = load i32, ptr %11, align 4
  %33 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 0
  %34 = load i32, ptr %33, align 8
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %55

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = load i32, ptr %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, ptr %38, i64 %40
  %42 = load i32, ptr %41, align 4
  %43 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load i32, ptr %11, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %44, i64 %46
  %48 = load i32, ptr %47, align 4
  %49 = icmp eq i32 %42, %48
  br i1 %49, label %50, label %51

50:                                               ; preds = %36
  store i32 1, ptr %10, align 4
  br label %55

51:                                               ; preds = %36
  br label %52

52:                                               ; preds = %51
  %53 = load i32, ptr %11, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, ptr %11, align 4
  br label %31, !llvm.loop !6

55:                                               ; preds = %50, %31
  %56 = load i32, ptr %10, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %99

58:                                               ; preds = %55
  store i32 0, ptr %12, align 4
  store i32 0, ptr %13, align 4
  br label %59

59:                                               ; preds = %79, %58
  %60 = load i32, ptr %13, align 4
  %61 = load i32, ptr %8, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %82

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load i32, ptr %13, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, ptr %65, i64 %67
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load i32, ptr %9, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %71, i64 %73
  %75 = load i32, ptr %74, align 4
  %76 = icmp eq i32 %69, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %63
  store i32 1, ptr %12, align 4
  br label %82

78:                                               ; preds = %63
  br label %79

79:                                               ; preds = %78
  %80 = load i32, ptr %13, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, ptr %13, align 4
  br label %59, !llvm.loop !8

82:                                               ; preds = %77, %59
  %83 = load i32, ptr %12, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %98, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load i32, ptr %9, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, ptr %87, i64 %89
  %91 = load i32, ptr %90, align 4
  %92 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load i32, ptr %8, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %8, align 4
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds i32, ptr %93, i64 %96
  store i32 %91, ptr %97, align 4
  br label %98

98:                                               ; preds = %85, %82
  br label %99

99:                                               ; preds = %98, %55
  br label %100

100:                                              ; preds = %99
  %101 = load i32, ptr %9, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, ptr %9, align 4
  br label %25, !llvm.loop !9

103:                                              ; preds = %25
  %104 = load i32, ptr %8, align 4
  %105 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 0
  store i32 %104, ptr %105, align 8
  %106 = load { i32, ptr }, ptr %5, align 8
  ret { i32, ptr } %106
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_print_list_int(i32 %0, ptr %1) #0 {
  %3 = alloca %struct.list_int, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  store i32 %0, ptr %5, align 8
  %6 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  store ptr %1, ptr %6, align 8
  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  store i32 0, ptr %4, align 4
  br label %8

8:                                                ; preds = %26, %2
  %9 = load i32, ptr %4, align 4
  %10 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 0
  %11 = load i32, ptr %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %29

13:                                               ; preds = %8
  %14 = load i32, ptr %4, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %18

18:                                               ; preds = %16, %13
  %19 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load i32, ptr %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %20, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %24)
  br label %26

26:                                               ; preds = %18
  %27 = load i32, ptr %4, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %4, align 4
  br label %8, !llvm.loop !10

29:                                               ; preds = %8
  %30 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
