; ModuleID = '/tmp/mochi-mlir-X/main.c'
source_filename = "/tmp/mochi-mlir-X/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"]\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_int, align 8
  store i32 0, ptr %1, align 4
  %4 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %5 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %6 = extractvalue { i32, ptr } %4, 0
  store i32 %6, ptr %5, align 8
  %7 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %8 = extractvalue { i32, ptr } %4, 1
  store ptr %8, ptr %7, align 8
  %9 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds i32, ptr %10, i64 0
  store i32 1, ptr %11, align 4
  %12 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds i32, ptr %13, i64 1
  store i32 2, ptr %14, align 4
  %15 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds i32, ptr %16, i64 2
  store i32 3, ptr %17, align 4
  %18 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr inbounds i32, ptr %19, i64 3
  store i32 4, ptr %20, align 4
  %21 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %22 = load i32, ptr %21, align 8
  %23 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = call { i32, ptr } @slice_list_int(i32 %22, ptr %24, i32 noundef 1, i32 noundef 3)
  %26 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %27 = extractvalue { i32, ptr } %25, 0
  store i32 %27, ptr %26, align 8
  %28 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %29 = extractvalue { i32, ptr } %25, 1
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %31 = load i32, ptr %30, align 8
  %32 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  call void @_print_list_int(i32 %31, ptr %33)
  %34 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #3
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @slice_list_int(i32 %0, ptr %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca %struct.list_int, align 8
  %6 = alloca %struct.list_int, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  store i32 %0, ptr %10, align 8
  %11 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  store ptr %1, ptr %11, align 8
  store i32 %2, ptr %7, align 4
  store i32 %3, ptr %8, align 4
  %12 = load i32, ptr %7, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %16 = load i32, ptr %15, align 8
  %17 = load i32, ptr %7, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %7, align 4
  br label %19

19:                                               ; preds = %14, %4
  %20 = load i32, ptr %8, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %24 = load i32, ptr %23, align 8
  %25 = load i32, ptr %8, align 4
  %26 = add nsw i32 %25, %24
  store i32 %26, ptr %8, align 4
  br label %27

27:                                               ; preds = %22, %19
  %28 = load i32, ptr %7, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  store i32 0, ptr %7, align 4
  br label %31

31:                                               ; preds = %30, %27
  %32 = load i32, ptr %8, align 4
  %33 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %34 = load i32, ptr %33, align 8
  %35 = icmp sgt i32 %32, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %38 = load i32, ptr %37, align 8
  store i32 %38, ptr %8, align 4
  br label %39

39:                                               ; preds = %36, %31
  %40 = load i32, ptr %7, align 4
  %41 = load i32, ptr %8, align 4
  %42 = icmp sgt i32 %40, %41
  br i1 %42, label %43, label %45

43:                                               ; preds = %39
  %44 = load i32, ptr %8, align 4
  store i32 %44, ptr %7, align 4
  br label %45

45:                                               ; preds = %43, %39
  %46 = load i32, ptr %8, align 4
  %47 = load i32, ptr %7, align 4
  %48 = sub nsw i32 %46, %47
  %49 = call { i32, ptr } @list_int_create(i32 noundef %48)
  %50 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  %51 = extractvalue { i32, ptr } %49, 0
  store i32 %51, ptr %50, align 8
  %52 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  %53 = extractvalue { i32, ptr } %49, 1
  store ptr %53, ptr %52, align 8
  store i32 0, ptr %9, align 4
  br label %54

54:                                               ; preds = %73, %45
  %55 = load i32, ptr %9, align 4
  %56 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 0
  %57 = load i32, ptr %56, align 8
  %58 = icmp slt i32 %55, %57
  br i1 %58, label %59, label %76

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load i32, ptr %7, align 4
  %63 = load i32, ptr %9, align 4
  %64 = add nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, ptr %61, i64 %65
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load i32, ptr %9, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, ptr %69, i64 %71
  store i32 %67, ptr %72, align 4
  br label %73

73:                                               ; preds = %59
  %74 = load i32, ptr %9, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, ptr %9, align 4
  br label %54, !llvm.loop !6

76:                                               ; preds = %54
  %77 = load { i32, ptr }, ptr %5, align 8
  ret { i32, ptr } %77
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_print_list_int(i32 %0, ptr %1) #0 {
  %3 = alloca %struct.list_int, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  store i32 %0, ptr %5, align 8
  %6 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  store ptr %1, ptr %6, align 8
  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  store i32 0, ptr %4, align 4
  br label %8

8:                                                ; preds = %26, %2
  %9 = load i32, ptr %4, align 4
  %10 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 0
  %11 = load i32, ptr %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %29

13:                                               ; preds = %8
  %14 = load i32, ptr %4, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %18

18:                                               ; preds = %16, %13
  %19 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load i32, ptr %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %20, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %24)
  br label %26

26:                                               ; preds = %18
  %27 = load i32, ptr %4, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %4, align 4
  br label %8, !llvm.loop !8

29:                                               ; preds = %8
  %30 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
