#include <stdio.h>
#include <stdlib.h>

typedef struct { int len; int *data; } list_int;
static list_int list_int_create(int len) {
    list_int l;
    l.len = len;
    l.data = (int*)malloc(sizeof(int)*len);
    return l;
}
typedef struct { int key; int value; } map_int_bool_item;
static map_int_bool_item* map_int_bool_item_new(int key, int value) {
    map_int_bool_item* it = (map_int_bool_item*)malloc(sizeof(map_int_bool_item));
    it->key = key;
    it->value = value;
    return it;
}
typedef struct { int len; int cap; map_int_bool_item** data; } map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
    map_int_bool m; m.len = 0; m.cap = cap;
    m.data = cap ? (map_int_bool_item**)malloc(sizeof(map_int_bool_item*)*cap) : NULL;
    return m;
}
static void map_int_bool_put(map_int_bool* m, int key, int value) {
    for (int i=0;i<m->len;i++) if (m->data[i]->key == key) { m->data[i]->value = value; return; }
    if (m->len >= m->cap) {
        m->cap = m->cap ? m->cap*2 : 4;
        m->data = (map_int_bool_item**)realloc(m->data, sizeof(map_int_bool_item*)*m->cap);
    }
    m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
    for (int i=0;i<m.len;i++) if (m.data[i]->key == key) return 1;
    return 0;
}typedef struct { int key; int value; } map_int_bool_item;
static map_int_bool_item* map_int_bool_item_new(int key, int value) {
    map_int_bool_item* it = (map_int_bool_item*)malloc(sizeof(map_int_bool_item));
    it->key = key;
    it->value = value;
    return it;
}
typedef struct { int len; int cap; map_int_bool_item** data; } map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
    map_int_bool m; m.len = 0; m.cap = cap;
    m.data = cap ? (map_int_bool_item**)malloc(sizeof(map_int_bool_item*)*cap) : NULL;
    return m;
}
static void map_int_bool_put(map_int_bool* m, int key, int value) {
    for (int i=0;i<m->len;i++) if (m->data[i]->key == key) { m->data[i]->value = value; return; }
    if (m->len >= m->cap) {
        m->cap = m->cap ? m->cap*2 : 4;
        m->data = (map_int_bool_item**)realloc(m->data, sizeof(map_int_bool_item*)*m->cap);
    }
    m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
    for (int i=0;i<m.len;i++) if (m.data[i]->key == key) return 1;
    return 0;
}
int main() {
	map_int_bool _t1 = map_int_bool_create(0);
	map_int_bool set = _t1;
	list_int _t2 = list_int_create(3);
	_t2.data[0] = 1;
	_t2.data[1] = 2;
	_t2.data[2] = 3;
	for (int _t3 = 0; _t3 < _t2.len; _t3++) {
		int n = _t2.data[_t3];
		map_int_bool_put(&set, n, 1);
	}
	int i = 1;
	int count = 0;
	while (map_int_bool_contains(set, i)) {
		i = (i + 1);
		count = (count + 1);
	}
	printf("%d\n", count);
	return 0;
}
