; ModuleID = '/tmp/mochi-mlir-X/main.c'
source_filename = "/tmp/mochi-mlir-X/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_list_int = type { i32, ptr }
%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @searchMatrix(i32 %0, ptr %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.list_list_int, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  store i32 %0, ptr %15, align 8
  %16 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  store ptr %1, ptr %16, align 8
  store i32 %2, ptr %6, align 4
  %17 = getelementptr inbounds %struct.list_list_int, ptr %5, i32 0, i32 0
  %18 = load i32, ptr %17, align 8
  store i32 %18, ptr %7, align 4
  %19 = load i32, ptr %7, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %3
  store i32 0, ptr %4, align 4
  br label %77

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.list_list_int, ptr %5, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds %struct.list_int, ptr %24, i64 0
  %26 = getelementptr inbounds %struct.list_int, ptr %25, i32 0, i32 0
  %27 = load i32, ptr %26, align 8
  store i32 %27, ptr %8, align 4
  store i32 0, ptr %9, align 4
  %28 = load i32, ptr %7, align 4
  %29 = load i32, ptr %8, align 4
  %30 = mul nsw i32 %28, %29
  %31 = sub nsw i32 %30, 1
  store i32 %31, ptr %10, align 4
  br label %32

32:                                               ; preds = %75, %22
  %33 = load i32, ptr %9, align 4
  %34 = load i32, ptr %10, align 4
  %35 = icmp sle i32 %33, %34
  br i1 %35, label %36, label %76

36:                                               ; preds = %32
  %37 = load i32, ptr %9, align 4
  %38 = load i32, ptr %10, align 4
  %39 = load i32, ptr %9, align 4
  %40 = sub nsw i32 %38, %39
  %41 = add nsw i32 %37, %40
  %42 = sdiv i32 %41, 2
  store i32 %42, ptr %11, align 4
  %43 = load i32, ptr %11, align 4
  %44 = load i32, ptr %8, align 4
  %45 = sdiv i32 %43, %44
  store i32 %45, ptr %12, align 4
  %46 = load i32, ptr %11, align 4
  %47 = load i32, ptr %8, align 4
  %48 = srem i32 %46, %47
  store i32 %48, ptr %13, align 4
  %49 = getelementptr inbounds %struct.list_list_int, ptr %5, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %12, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.list_int, ptr %50, i64 %52
  %54 = getelementptr inbounds %struct.list_int, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load i32, ptr %13, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, ptr %55, i64 %57
  %59 = load i32, ptr %58, align 4
  store i32 %59, ptr %14, align 4
  %60 = load i32, ptr %14, align 4
  %61 = load i32, ptr %6, align 4
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %36
  store i32 1, ptr %4, align 4
  br label %77

64:                                               ; preds = %36
  %65 = load i32, ptr %14, align 4
  %66 = load i32, ptr %6, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %71

68:                                               ; preds = %64
  %69 = load i32, ptr %11, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, ptr %9, align 4
  br label %74

71:                                               ; preds = %64
  %72 = load i32, ptr %11, align 4
  %73 = sub nsw i32 %72, 1
  store i32 %73, ptr %10, align 4
  br label %74

74:                                               ; preds = %71, %68
  br label %75

75:                                               ; preds = %74
  br label %32, !llvm.loop !6

76:                                               ; preds = %32
  store i32 0, ptr %4, align 4
  br label %77

77:                                               ; preds = %76, %63, %21
  %78 = load i32, ptr %4, align 4
  ret i32 %78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_list_int, align 8
  %3 = alloca %struct.list_int, align 8
  %4 = alloca %struct.list_int, align 8
  %5 = alloca %struct.list_int, align 8
  %6 = alloca %struct.list_list_int, align 8
  %7 = alloca %struct.list_int, align 8
  %8 = alloca %struct.list_int, align 8
  %9 = alloca %struct.list_int, align 8
  store i32 0, ptr %1, align 4
  %10 = call { i32, ptr } @list_list_int_create(i32 noundef 3)
  %11 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %12 = extractvalue { i32, ptr } %10, 0
  store i32 %12, ptr %11, align 8
  %13 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %14 = extractvalue { i32, ptr } %10, 1
  store ptr %14, ptr %13, align 8
  %15 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %16 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %17 = extractvalue { i32, ptr } %15, 0
  store i32 %17, ptr %16, align 8
  %18 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %19 = extractvalue { i32, ptr } %15, 1
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr inbounds i32, ptr %21, i64 0
  store i32 1, ptr %22, align 4
  %23 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds i32, ptr %24, i64 1
  store i32 3, ptr %25, align 4
  %26 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr inbounds i32, ptr %27, i64 2
  store i32 5, ptr %28, align 4
  %29 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds i32, ptr %30, i64 3
  store i32 7, ptr %31, align 4
  %32 = getelementptr inbounds %struct.list_list_int, ptr %2, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds %struct.list_int, ptr %33, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %34, ptr align 8 %3, i64 16, i1 false)
  %35 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %36 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %37 = extractvalue { i32, ptr } %35, 0
  store i32 %37, ptr %36, align 8
  %38 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %39 = extractvalue { i32, ptr } %35, 1
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds %struct.list_int, ptr %4, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr inbounds i32, ptr %41, i64 0
  store i32 10, ptr %42, align 4
  %43 = getelementptr inbounds %struct.list_int, ptr %4, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr inbounds i32, ptr %44, i64 1
  store i32 11, ptr %45, align 4
  %46 = getelementptr inbounds %struct.list_int, ptr %4, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr inbounds i32, ptr %47, i64 2
  store i32 16, ptr %48, align 4
  %49 = getelementptr inbounds %struct.list_int, ptr %4, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr inbounds i32, ptr %50, i64 3
  store i32 20, ptr %51, align 4
  %52 = getelementptr inbounds %struct.list_list_int, ptr %2, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr inbounds %struct.list_int, ptr %53, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %54, ptr align 8 %4, i64 16, i1 false)
  %55 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %56 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  %57 = extractvalue { i32, ptr } %55, 0
  store i32 %57, ptr %56, align 8
  %58 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  %59 = extractvalue { i32, ptr } %55, 1
  store ptr %59, ptr %58, align 8
  %60 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr inbounds i32, ptr %61, i64 0
  store i32 23, ptr %62, align 4
  %63 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr inbounds i32, ptr %64, i64 1
  store i32 30, ptr %65, align 4
  %66 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr inbounds i32, ptr %67, i64 2
  store i32 34, ptr %68, align 4
  %69 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr inbounds i32, ptr %70, i64 3
  store i32 60, ptr %71, align 4
  %72 = getelementptr inbounds %struct.list_list_int, ptr %2, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr inbounds %struct.list_int, ptr %73, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %74, ptr align 8 %5, i64 16, i1 false)
  %75 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %76 = load i32, ptr %75, align 8
  %77 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 @searchMatrix(i32 %76, ptr %78, i32 noundef 3)
  %80 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %79)
  %81 = call { i32, ptr } @list_list_int_create(i32 noundef 3)
  %82 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  %83 = extractvalue { i32, ptr } %81, 0
  store i32 %83, ptr %82, align 8
  %84 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  %85 = extractvalue { i32, ptr } %81, 1
  store ptr %85, ptr %84, align 8
  %86 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %87 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 0
  %88 = extractvalue { i32, ptr } %86, 0
  store i32 %88, ptr %87, align 8
  %89 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 1
  %90 = extractvalue { i32, ptr } %86, 1
  store ptr %90, ptr %89, align 8
  %91 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr inbounds i32, ptr %92, i64 0
  store i32 1, ptr %93, align 4
  %94 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr inbounds i32, ptr %95, i64 1
  store i32 3, ptr %96, align 4
  %97 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr inbounds i32, ptr %98, i64 2
  store i32 5, ptr %99, align 4
  %100 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr inbounds i32, ptr %101, i64 3
  store i32 7, ptr %102, align 4
  %103 = getelementptr inbounds %struct.list_list_int, ptr %6, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr inbounds %struct.list_int, ptr %104, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %105, ptr align 8 %7, i64 16, i1 false)
  %106 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %107 = getelementptr inbounds { i32, ptr }, ptr %8, i32 0, i32 0
  %108 = extractvalue { i32, ptr } %106, 0
  store i32 %108, ptr %107, align 8
  %109 = getelementptr inbounds { i32, ptr }, ptr %8, i32 0, i32 1
  %110 = extractvalue { i32, ptr } %106, 1
  store ptr %110, ptr %109, align 8
  %111 = getelementptr inbounds %struct.list_int, ptr %8, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr inbounds i32, ptr %112, i64 0
  store i32 10, ptr %113, align 4
  %114 = getelementptr inbounds %struct.list_int, ptr %8, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr inbounds i32, ptr %115, i64 1
  store i32 11, ptr %116, align 4
  %117 = getelementptr inbounds %struct.list_int, ptr %8, i32 0, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr inbounds i32, ptr %118, i64 2
  store i32 16, ptr %119, align 4
  %120 = getelementptr inbounds %struct.list_int, ptr %8, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr inbounds i32, ptr %121, i64 3
  store i32 20, ptr %122, align 4
  %123 = getelementptr inbounds %struct.list_list_int, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr inbounds %struct.list_int, ptr %124, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %125, ptr align 8 %8, i64 16, i1 false)
  %126 = call { i32, ptr } @list_int_create(i32 noundef 4)
  %127 = getelementptr inbounds { i32, ptr }, ptr %9, i32 0, i32 0
  %128 = extractvalue { i32, ptr } %126, 0
  store i32 %128, ptr %127, align 8
  %129 = getelementptr inbounds { i32, ptr }, ptr %9, i32 0, i32 1
  %130 = extractvalue { i32, ptr } %126, 1
  store ptr %130, ptr %129, align 8
  %131 = getelementptr inbounds %struct.list_int, ptr %9, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr inbounds i32, ptr %132, i64 0
  store i32 23, ptr %133, align 4
  %134 = getelementptr inbounds %struct.list_int, ptr %9, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr inbounds i32, ptr %135, i64 1
  store i32 30, ptr %136, align 4
  %137 = getelementptr inbounds %struct.list_int, ptr %9, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr inbounds i32, ptr %138, i64 2
  store i32 34, ptr %139, align 4
  %140 = getelementptr inbounds %struct.list_int, ptr %9, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr inbounds i32, ptr %141, i64 3
  store i32 60, ptr %142, align 4
  %143 = getelementptr inbounds %struct.list_list_int, ptr %6, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr inbounds %struct.list_int, ptr %144, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %145, ptr align 8 %9, i64 16, i1 false)
  %146 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  %147 = load i32, ptr %146, align 8
  %148 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = call i32 @searchMatrix(i32 %147, ptr %149, i32 noundef 13)
  %151 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %150)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 16, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #4
  %10 = getelementptr inbounds %struct.list_list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #4
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
