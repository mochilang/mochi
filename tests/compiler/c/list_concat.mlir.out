; ModuleID = '/tmp/mochi-mlir-X/main.c'
source_filename = "/tmp/mochi-mlir-X/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"]\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_int, align 8
  %4 = alloca %struct.list_int, align 8
  store i32 0, ptr %1, align 4
  %5 = call { i32, ptr } @list_int_create(i32 noundef 2)
  %6 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %7 = extractvalue { i32, ptr } %5, 0
  store i32 %7, ptr %6, align 8
  %8 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %9 = extractvalue { i32, ptr } %5, 1
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i32, ptr %11, i64 0
  store i32 1, ptr %12, align 4
  %13 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds i32, ptr %14, i64 1
  store i32 2, ptr %15, align 4
  %16 = call { i32, ptr } @list_int_create(i32 noundef 2)
  %17 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %18 = extractvalue { i32, ptr } %16, 0
  store i32 %18, ptr %17, align 8
  %19 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %20 = extractvalue { i32, ptr } %16, 1
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds i32, ptr %22, i64 0
  store i32 3, ptr %23, align 4
  %24 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds i32, ptr %25, i64 1
  store i32 4, ptr %26, align 4
  %27 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %28 = load i32, ptr %27, align 8
  %29 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %32 = load i32, ptr %31, align 8
  %33 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = call { i32, ptr } @concat_list_int(i32 %28, ptr %30, i32 %32, ptr %34)
  %36 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %37 = extractvalue { i32, ptr } %35, 0
  store i32 %37, ptr %36, align 8
  %38 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %39 = extractvalue { i32, ptr } %35, 1
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %41 = load i32, ptr %40, align 8
  %42 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  call void @_print_list_int(i32 %41, ptr %43)
  %44 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #3
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @concat_list_int(i32 %0, ptr %1, i32 %2, ptr %3) #0 {
  %5 = alloca %struct.list_int, align 8
  %6 = alloca %struct.list_int, align 8
  %7 = alloca %struct.list_int, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  store i32 %0, ptr %10, align 8
  %11 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  store ptr %1, ptr %11, align 8
  %12 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 0
  store i32 %2, ptr %12, align 8
  %13 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 1
  store ptr %3, ptr %13, align 8
  %14 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %15 = load i32, ptr %14, align 8
  %16 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 0
  %17 = load i32, ptr %16, align 8
  %18 = add nsw i32 %15, %17
  %19 = call { i32, ptr } @list_int_create(i32 noundef %18)
  %20 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  %21 = extractvalue { i32, ptr } %19, 0
  store i32 %21, ptr %20, align 8
  %22 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  %23 = extractvalue { i32, ptr } %19, 1
  store ptr %23, ptr %22, align 8
  store i32 0, ptr %8, align 4
  br label %24

24:                                               ; preds = %41, %4
  %25 = load i32, ptr %8, align 4
  %26 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %27 = load i32, ptr %26, align 8
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %44

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load i32, ptr %8, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, ptr %31, i64 %33
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load i32, ptr %8, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %37, i64 %39
  store i32 %35, ptr %40, align 4
  br label %41

41:                                               ; preds = %29
  %42 = load i32, ptr %8, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, ptr %8, align 4
  br label %24, !llvm.loop !6

44:                                               ; preds = %24
  store i32 0, ptr %9, align 4
  br label %45

45:                                               ; preds = %65, %44
  %46 = load i32, ptr %9, align 4
  %47 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 0
  %48 = load i32, ptr %47, align 8
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %68

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i32, ptr %9, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %52, i64 %54
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %60 = load i32, ptr %59, align 8
  %61 = load i32, ptr %9, align 4
  %62 = add nsw i32 %60, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %58, i64 %63
  store i32 %56, ptr %64, align 4
  br label %65

65:                                               ; preds = %50
  %66 = load i32, ptr %9, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, ptr %9, align 4
  br label %45, !llvm.loop !8

68:                                               ; preds = %45
  %69 = load { i32, ptr }, ptr %5, align 8
  ret { i32, ptr } %69
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_print_list_int(i32 %0, ptr %1) #0 {
  %3 = alloca %struct.list_int, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  store i32 %0, ptr %5, align 8
  %6 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  store ptr %1, ptr %6, align 8
  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  store i32 0, ptr %4, align 4
  br label %8

8:                                                ; preds = %26, %2
  %9 = load i32, ptr %4, align 4
  %10 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 0
  %11 = load i32, ptr %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %29

13:                                               ; preds = %8
  %14 = load i32, ptr %4, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %18

18:                                               ; preds = %16, %13
  %19 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load i32, ptr %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %20, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %24)
  br label %26

26:                                               ; preds = %18
  %27 = load i32, ptr %4, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %4, align 4
  br label %8, !llvm.loop !9

29:                                               ; preds = %8
  %30 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
