; ModuleID = '/tmp/mochi-mlir-3495269328/main.c'
source_filename = "/tmp/mochi-mlir-3495269328/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"]\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_int, align 8
  %4 = alloca %struct.list_int, align 8
  store i32 0, ptr %1, align 4
  %5 = call { i32, ptr } @list_int_create(i32 noundef 2)
  %6 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %7 = extractvalue { i32, ptr } %5, 0
  store i32 %7, ptr %6, align 8
  %8 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %9 = extractvalue { i32, ptr } %5, 1
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i32, ptr %11, i64 0
  store i32 1, ptr %12, align 4
  %13 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds i32, ptr %14, i64 1
  store i32 2, ptr %15, align 4
  %16 = call { i32, ptr } @list_int_create(i32 noundef 2)
  %17 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %18 = extractvalue { i32, ptr } %16, 0
  store i32 %18, ptr %17, align 8
  %19 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %20 = extractvalue { i32, ptr } %16, 1
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds i32, ptr %22, i64 0
  store i32 2, ptr %23, align 4
  %24 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds i32, ptr %25, i64 1
  store i32 3, ptr %26, align 4
  %27 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %28 = load i32, ptr %27, align 8
  %29 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %32 = load i32, ptr %31, align 8
  %33 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = call { i32, ptr } @union_list_int(i32 %28, ptr %30, i32 %32, ptr %34)
  %36 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %37 = extractvalue { i32, ptr } %35, 0
  store i32 %37, ptr %36, align 8
  %38 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %39 = extractvalue { i32, ptr } %35, 1
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 0
  %41 = load i32, ptr %40, align 8
  %42 = getelementptr inbounds { i32, ptr }, ptr %4, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  call void @_print_list_int(i32 %41, ptr %43)
  %44 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #3
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @union_list_int(i32 %0, ptr %1, i32 %2, ptr %3) #0 {
  %5 = alloca %struct.list_int, align 8
  %6 = alloca %struct.list_int, align 8
  %7 = alloca %struct.list_int, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 0
  store i32 %0, ptr %15, align 8
  %16 = getelementptr inbounds { i32, ptr }, ptr %6, i32 0, i32 1
  store ptr %1, ptr %16, align 8
  %17 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 0
  store i32 %2, ptr %17, align 8
  %18 = getelementptr inbounds { i32, ptr }, ptr %7, i32 0, i32 1
  store ptr %3, ptr %18, align 8
  %19 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %20 = load i32, ptr %19, align 8
  %21 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 0
  %22 = load i32, ptr %21, align 8
  %23 = add nsw i32 %20, %22
  %24 = call { i32, ptr } @list_int_create(i32 noundef %23)
  %25 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  %26 = extractvalue { i32, ptr } %24, 0
  store i32 %26, ptr %25, align 8
  %27 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  %28 = extractvalue { i32, ptr } %24, 1
  store ptr %28, ptr %27, align 8
  store i32 0, ptr %8, align 4
  store i32 0, ptr %9, align 4
  br label %29

29:                                               ; preds = %75, %4
  %30 = load i32, ptr %9, align 4
  %31 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 0
  %32 = load i32, ptr %31, align 8
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %78

34:                                               ; preds = %29
  store i32 0, ptr %10, align 4
  store i32 0, ptr %11, align 4
  br label %35

35:                                               ; preds = %55, %34
  %36 = load i32, ptr %11, align 4
  %37 = load i32, ptr %8, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %58

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %11, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %41, i64 %43
  %45 = load i32, ptr %44, align 4
  %46 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load i32, ptr %9, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, ptr %47, i64 %49
  %51 = load i32, ptr %50, align 4
  %52 = icmp eq i32 %45, %51
  br i1 %52, label %53, label %54

53:                                               ; preds = %39
  store i32 1, ptr %10, align 4
  br label %58

54:                                               ; preds = %39
  br label %55

55:                                               ; preds = %54
  %56 = load i32, ptr %11, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, ptr %11, align 4
  br label %35, !llvm.loop !6

58:                                               ; preds = %53, %35
  %59 = load i32, ptr %10, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.list_int, ptr %6, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load i32, ptr %9, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, ptr %63, i64 %65
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load i32, ptr %8, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, ptr %8, align 4
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds i32, ptr %69, i64 %72
  store i32 %67, ptr %73, align 4
  br label %74

74:                                               ; preds = %61, %58
  br label %75

75:                                               ; preds = %74
  %76 = load i32, ptr %9, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, ptr %9, align 4
  br label %29, !llvm.loop !8

78:                                               ; preds = %29
  store i32 0, ptr %12, align 4
  br label %79

79:                                               ; preds = %125, %78
  %80 = load i32, ptr %12, align 4
  %81 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 0
  %82 = load i32, ptr %81, align 8
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %128

84:                                               ; preds = %79
  store i32 0, ptr %13, align 4
  store i32 0, ptr %14, align 4
  br label %85

85:                                               ; preds = %105, %84
  %86 = load i32, ptr %14, align 4
  %87 = load i32, ptr %8, align 4
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %89, label %108

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load i32, ptr %14, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, ptr %91, i64 %93
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = load i32, ptr %12, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, ptr %97, i64 %99
  %101 = load i32, ptr %100, align 4
  %102 = icmp eq i32 %95, %101
  br i1 %102, label %103, label %104

103:                                              ; preds = %89
  store i32 1, ptr %13, align 4
  br label %108

104:                                              ; preds = %89
  br label %105

105:                                              ; preds = %104
  %106 = load i32, ptr %14, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, ptr %14, align 4
  br label %85, !llvm.loop !9

108:                                              ; preds = %103, %85
  %109 = load i32, ptr %13, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %124, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.list_int, ptr %7, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load i32, ptr %12, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i32, ptr %113, i64 %115
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = load i32, ptr %8, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, ptr %8, align 4
  %122 = sext i32 %120 to i64
  %123 = getelementptr inbounds i32, ptr %119, i64 %122
  store i32 %117, ptr %123, align 4
  br label %124

124:                                              ; preds = %111, %108
  br label %125

125:                                              ; preds = %124
  %126 = load i32, ptr %12, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, ptr %12, align 4
  br label %79, !llvm.loop !10

128:                                              ; preds = %79
  %129 = load i32, ptr %8, align 4
  %130 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 0
  store i32 %129, ptr %130, align 8
  %131 = load { i32, ptr }, ptr %5, align 8
  ret { i32, ptr } %131
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_print_list_int(i32 %0, ptr %1) #0 {
  %3 = alloca %struct.list_int, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  store i32 %0, ptr %5, align 8
  %6 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  store ptr %1, ptr %6, align 8
  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  store i32 0, ptr %4, align 4
  br label %8

8:                                                ; preds = %26, %2
  %9 = load i32, ptr %4, align 4
  %10 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 0
  %11 = load i32, ptr %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %29

13:                                               ; preds = %8
  %14 = load i32, ptr %4, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %18

18:                                               ; preds = %16, %13
  %19 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load i32, ptr %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %20, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %24)
  br label %26

26:                                               ; preds = %18
  %27 = load i32, ptr %4, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %4, align 4
  br label %8, !llvm.loop !11

29:                                               ; preds = %8
  %30 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
