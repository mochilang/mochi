#include <stdio.h>
#include <stdlib.h>

typedef struct { int len; int *data; } list_int;
typedef struct { int len; list_int *data; } list_list_int;

static list_int list_int_create(int len) {
	list_int l;
	l.len = len;
	l.data = (int*)malloc(sizeof(int)*len);
	return l;
}

static list_list_int list_list_int_create(int len) {
	list_list_int l;
	l.len = len;
	l.data = (list_int*)malloc(sizeof(list_int)*len);
	return l;
}

static int _count(list_int v) {
	return v.len;
}

static int _avg(list_int v) {
	if (v.len == 0) return 0;
	int sum = 0;
	for (int i = 0; i < v.len; i++) {
		sum += v.data[i];
	}
	return sum / v.len;
}

static list_list_int concat_list_list_int(list_list_int a, list_list_int b) {
	list_list_int r = list_list_int_create(a.len + b.len);
	for (int i = 0; i < a.len; i++) r.data[i] = a.data[i];
	for (int i = 0; i < b.len; i++) r.data[a.len + i] = b.data[i];
	return r;
}

list_list_int prepend(list_int level, list_list_int result){
	list_list_int _t1 = list_list_int_create(1);
	_t1.data[0] = level;
	result = concat_list_list_int(_t1, result);
	return result;
}

int main() {
	list_int _t2 = list_int_create(2);
	_t2.data[0] = 1;
	_t2.data[1] = 2;
	list_list_int _t3 = list_list_int_create(2);
	list_int _t4 = list_int_create(1);
	_t4.data[0] = 3;
	_t3.data[0] = _t4;
	list_int _t5 = list_int_create(1);
	_t5.data[0] = 4;
	_t3.data[1] = _t5;
	printf("%d\n", prepend(_t2, _t3));
	return 0;
}
