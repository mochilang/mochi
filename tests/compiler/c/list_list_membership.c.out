#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct { int len; int *data; } list_int;
static list_int list_int_create(int len) {
    list_int l;
    l.len = len;
    l.data = (int*)malloc(sizeof(int)*len);
    return l;
}
typedef struct { int len; list_int *data; } list_list_int;
static list_list_int list_list_int_create(int len) {
    list_list_int l;
    l.len = len;
    l.data = (list_int*)malloc(sizeof(list_int)*len);
    return l;
}
static int contains_list_list_int(list_list_int v, list_int item) {
    for (int i = 0; i < v.len; i++) if (equal_list_int(v.data[i], item)) return 1;
    return 0;
}static void _print_list_int(list_int v) {
    printf("[");
    for (int i = 0; i < v.len; i++) {
        if (i > 0) printf(" ");
        printf("%d", v.data[i]);
    }
    printf("]");
}
static void _print_list_int(list_int v) {
    printf("[");
    for (int i = 0; i < v.len; i++) {
        if (i > 0) printf(" ");
        printf("%d", v.data[i]);
    }
    printf("]");
}
int main() {
	list_int _t1 = list_int_create(2);
	_t1.data[0] = 1;
	_t1.data[1] = 2;
	list_list_int _t2 = list_list_int_create(2);
	list_int _t3 = list_int_create(2);
	_t3.data[0] = 1;
	_t3.data[1] = 2;
	_t2.data[0] = _t3;
	list_int _t4 = list_int_create(1);
	_t4.data[0] = 3;
	_t2.data[1] = _t4;
	_print_list_int(contains_list_list_int(_t2, _t1));
	printf("\n");
	return 0;
}
