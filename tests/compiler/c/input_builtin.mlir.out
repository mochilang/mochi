; ModuleID = '/tmp/mochi-mlir-X/main.c'
source_filename = "/tmp/mochi-mlir-X/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"Enter first input:\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Enter second input:\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"You entered:\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@stdin = external global ptr, align 8
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store i32 0, ptr %1, align 4
  %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef @.str.1)
  %5 = call ptr @_input()
  store ptr %5, ptr %2, align 8
  %6 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef @.str.2)
  %7 = call ptr @_input()
  store ptr %7, ptr %3, align 8
  %8 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef @.str.4)
  %9 = load ptr, ptr %2, align 8
  %10 = call i32 (ptr, ...) @printf(ptr noundef @.str.5, ptr noundef %9)
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef @.str.6)
  %12 = load ptr, ptr %3, align 8
  %13 = call i32 (ptr, ...) @printf(ptr noundef @.str.7, ptr noundef %12)
  ret i32 0
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @_input() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds [1024 x i8], ptr %2, i64 0, i64 0
  %5 = load ptr, ptr @stdin, align 8
  %6 = call ptr @fgets(ptr noundef %4, i32 noundef 1024, ptr noundef %5)
  %7 = icmp ne ptr %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %0
  %9 = call noalias ptr @strdup(ptr noundef @.str.8) #4
  store ptr %9, ptr %1, align 8
  br label %29

10:                                               ; preds = %0
  %11 = getelementptr inbounds [1024 x i8], ptr %2, i64 0, i64 0
  %12 = call i64 @strlen(ptr noundef %11) #5
  store i64 %12, ptr %3, align 8
  %13 = load i64, ptr %3, align 8
  %14 = icmp ugt i64 %13, 0
  br i1 %14, label %15, label %26

15:                                               ; preds = %10
  %16 = load i64, ptr %3, align 8
  %17 = sub i64 %16, 1
  %18 = getelementptr inbounds [1024 x i8], ptr %2, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 10
  br i1 %21, label %22, label %26

22:                                               ; preds = %15
  %23 = load i64, ptr %3, align 8
  %24 = sub i64 %23, 1
  %25 = getelementptr inbounds [1024 x i8], ptr %2, i64 0, i64 %24
  store i8 0, ptr %25, align 1
  br label %26

26:                                               ; preds = %22, %15, %10
  %27 = getelementptr inbounds [1024 x i8], ptr %2, i64 0, i64 0
  %28 = call noalias ptr @strdup(ptr noundef %27) #4
  store ptr %28, ptr %1, align 8
  br label %29

29:                                               ; preds = %26, %8
  %30 = load ptr, ptr %1, align 8
  ret ptr %30
}

declare ptr @fgets(ptr noundef, i32 noundef, ptr noundef) #1

; Function Attrs: nounwind
declare noalias ptr @strdup(ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
