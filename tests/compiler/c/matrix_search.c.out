/*
fun searchMatrix(matrix: list<list<int>>, target: int): bool {
  let m = len(matrix)
  if m == 0 {
    return false
  }
  let n = len(matrix[0])
  var left = 0
  var right = m * n - 1
  while left <= right {
    let mid = left + (right - left) / 2
    let row = mid / n
    let col = mid % n
    let value = matrix[row][col]
    if value == target {
      return true
    } else if value < target {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }
  return false
}

print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3))
print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13))
*/
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
/* fun searchMatrix(matrix: list<list<int>>, target: int): bool { */
int searchMatrix(list_list_int matrix, int target) {
  /* let m = len(matrix) */
  int m = matrix.len;
  /* if m == 0 { */
  if ((m == 0)) {
    /* return false */
    return 0;
  }
  /* let n = len(matrix[0]) */
  int n = matrix.data[0].len;
  /* var left = 0 */
  int left = 0;
  /* var right = m * n - 1 */
  int right = ((m * n) - 1);
  /* while left <= right { */
  while ((left <= right)) {
    /* let mid = left + (right - left) / 2 */
    int mid = ((left + ((right - left))) / 2);
    /* let row = mid / n */
    int row = (mid / n);
    /* let col = mid % n */
    int col = (mid % n);
    /* let value = matrix[row][col] */
    int value = matrix.data[row].data[col];
    /* if value == target { */
    if ((value == target)) {
      /* return true */
      return 1;
    } else if ((value < target)) {
      /* left = mid + 1 */
      left = (mid + 1);
    } else {
      /* right = mid - 1 */
      right = (mid - 1);
    }
  }
  /* return false */
  return 0;
}

int main() {
  /* print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3)) */
  list_list_int _t1 = list_list_int_create(3);
  list_int _t2 = list_int_create(4);
  _t2.data[0] = 1;
  _t2.data[1] = 3;
  _t2.data[2] = 5;
  _t2.data[3] = 7;
  _t1.data[0] = _t2;
  list_int _t3 = list_int_create(4);
  _t3.data[0] = 10;
  _t3.data[1] = 11;
  _t3.data[2] = 16;
  _t3.data[3] = 20;
  _t1.data[1] = _t3;
  list_int _t4 = list_int_create(4);
  _t4.data[0] = 23;
  _t4.data[1] = 30;
  _t4.data[2] = 34;
  _t4.data[3] = 60;
  _t1.data[2] = _t4;
  printf("%d\n", searchMatrix(_t1, 3));
  /* print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13)) */
  list_list_int _t5 = list_list_int_create(3);
  list_int _t6 = list_int_create(4);
  _t6.data[0] = 1;
  _t6.data[1] = 3;
  _t6.data[2] = 5;
  _t6.data[3] = 7;
  _t5.data[0] = _t6;
  list_int _t7 = list_int_create(4);
  _t7.data[0] = 10;
  _t7.data[1] = 11;
  _t7.data[2] = 16;
  _t7.data[3] = 20;
  _t5.data[1] = _t7;
  list_int _t8 = list_int_create(4);
  _t8.data[0] = 23;
  _t8.data[1] = 30;
  _t8.data[2] = 34;
  _t8.data[3] = 60;
  _t5.data[2] = _t8;
  printf("%d\n", searchMatrix(_t5, 13));
  return 0;
}
