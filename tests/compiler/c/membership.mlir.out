; ModuleID = '/tmp/mochi-mlir-2217544568/main.c'
source_filename = "/tmp/mochi-mlir-2217544568/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }
%struct.list_string = type { i32, ptr }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_string, align 8
  store i32 0, ptr %1, align 4
  %4 = call { i32, ptr } @list_int_create(i32 noundef 3)
  %5 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %6 = extractvalue { i32, ptr } %4, 0
  store i32 %6, ptr %5, align 8
  %7 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %8 = extractvalue { i32, ptr } %4, 1
  store ptr %8, ptr %7, align 8
  %9 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds i32, ptr %10, i64 0
  store i32 1, ptr %11, align 4
  %12 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds i32, ptr %13, i64 1
  store i32 2, ptr %14, align 4
  %15 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds i32, ptr %16, i64 2
  store i32 3, ptr %17, align 4
  %18 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %19 = load i32, ptr %18, align 8
  %20 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 @contains_list_int(i32 %19, ptr %21, i32 noundef 2)
  %23 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %22)
  %24 = call { i32, ptr } @list_string_create(i32 noundef 2)
  %25 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %26 = extractvalue { i32, ptr } %24, 0
  store i32 %26, ptr %25, align 8
  %27 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %28 = extractvalue { i32, ptr } %24, 1
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds %struct.list_string, ptr %3, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds ptr, ptr %30, i64 0
  store ptr @.str.1, ptr %31, align 8
  %32 = getelementptr inbounds %struct.list_string, ptr %3, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds ptr, ptr %33, i64 1
  store ptr @.str.2, ptr %34, align 8
  %35 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 0
  %36 = load i32, ptr %35, align 8
  %37 = getelementptr inbounds { i32, ptr }, ptr %3, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 @contains_list_string(i32 %36, ptr %38, ptr noundef @.str.2)
  %40 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %39)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #4
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @contains_list_int(i32 %0, ptr %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.list_int, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  store i32 %0, ptr %8, align 8
  %9 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  store ptr %1, ptr %9, align 8
  store i32 %2, ptr %6, align 4
  store i32 0, ptr %7, align 4
  br label %10

10:                                               ; preds = %26, %3
  %11 = load i32, ptr %7, align 4
  %12 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 0
  %13 = load i32, ptr %12, align 8
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %15, label %29

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.list_int, ptr %5, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = load i32, ptr %7, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %17, i64 %19
  %21 = load i32, ptr %20, align 4
  %22 = load i32, ptr %6, align 4
  %23 = icmp eq i32 %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  store i32 1, ptr %4, align 4
  br label %30

25:                                               ; preds = %15
  br label %26

26:                                               ; preds = %25
  %27 = load i32, ptr %7, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %7, align 4
  br label %10, !llvm.loop !6

29:                                               ; preds = %10
  store i32 0, ptr %4, align 4
  br label %30

30:                                               ; preds = %29, %24
  %31 = load i32, ptr %4, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_string_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_string, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_string, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 8, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #4
  %10 = getelementptr inbounds %struct.list_string, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @contains_list_string(i32 %0, ptr %1, ptr noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.list_string, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 0
  store i32 %0, ptr %8, align 8
  %9 = getelementptr inbounds { i32, ptr }, ptr %5, i32 0, i32 1
  store ptr %1, ptr %9, align 8
  store ptr %2, ptr %6, align 8
  store i32 0, ptr %7, align 4
  br label %10

10:                                               ; preds = %27, %3
  %11 = load i32, ptr %7, align 4
  %12 = getelementptr inbounds %struct.list_string, ptr %5, i32 0, i32 0
  %13 = load i32, ptr %12, align 8
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %15, label %30

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.list_string, ptr %5, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = load i32, ptr %7, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds ptr, ptr %17, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %6, align 8
  %23 = call i32 @strcmp(ptr noundef %21, ptr noundef %22) #5
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %15
  store i32 1, ptr %4, align 4
  br label %31

26:                                               ; preds = %15
  br label %27

27:                                               ; preds = %26
  %28 = load i32, ptr %7, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, ptr %7, align 4
  br label %10, !llvm.loop !8

30:                                               ; preds = %10
  store i32 0, ptr %4, align 4
  br label %31

31:                                               ; preds = %30, %25
  %32 = load i32, ptr %4, align 4
  ret i32 %32
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcmp(ptr noundef, ptr noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
