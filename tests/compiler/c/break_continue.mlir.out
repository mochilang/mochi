; ModuleID = '/tmp/mochi-mlir-3761869034/main.c'
source_filename = "/tmp/mochi-mlir-3761869034/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.list_int = type { i32, ptr }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"odd number:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.list_int, align 8
  %3 = alloca %struct.list_int, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %6 = call { i32, ptr } @list_int_create(i32 noundef 9)
  %7 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 0
  %8 = extractvalue { i32, ptr } %6, 0
  store i32 %8, ptr %7, align 8
  %9 = getelementptr inbounds { i32, ptr }, ptr %2, i32 0, i32 1
  %10 = extractvalue { i32, ptr } %6, 1
  store ptr %10, ptr %9, align 8
  %11 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds i32, ptr %12, i64 0
  store i32 1, ptr %13, align 4
  %14 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr inbounds i32, ptr %15, i64 1
  store i32 2, ptr %16, align 4
  %17 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds i32, ptr %18, i64 2
  store i32 3, ptr %19, align 4
  %20 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr inbounds i32, ptr %21, i64 3
  store i32 4, ptr %22, align 4
  %23 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds i32, ptr %24, i64 4
  store i32 5, ptr %25, align 4
  %26 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr inbounds i32, ptr %27, i64 5
  store i32 6, ptr %28, align 4
  %29 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds i32, ptr %30, i64 6
  store i32 7, ptr %31, align 4
  %32 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds i32, ptr %33, i64 7
  store i32 8, ptr %34, align 4
  %35 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr inbounds i32, ptr %36, i64 8
  store i32 9, ptr %37, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %2, i64 16, i1 false)
  store i32 0, ptr %4, align 4
  br label %38

38:                                               ; preds = %62, %0
  %39 = load i32, ptr %4, align 4
  %40 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 0
  %41 = load i32, ptr %40, align 8
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %65

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.list_int, ptr %3, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = load i32, ptr %4, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, ptr %45, i64 %47
  %49 = load i32, ptr %48, align 4
  store i32 %49, ptr %5, align 4
  %50 = load i32, ptr %5, align 4
  %51 = srem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %43
  br label %62

54:                                               ; preds = %43
  %55 = load i32, ptr %5, align 4
  %56 = icmp sgt i32 %55, 7
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  br label %65

58:                                               ; preds = %54
  %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef @.str.1)
  %60 = load i32, ptr %5, align 4
  %61 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %60)
  br label %62

62:                                               ; preds = %58, %53
  %63 = load i32, ptr %4, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, ptr %4, align 4
  br label %38, !llvm.loop !6

65:                                               ; preds = %57, %38
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, ptr } @list_int_create(i32 noundef %0) #0 {
  %2 = alloca %struct.list_int, align 8
  %3 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 0
  store i32 %4, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  %7 = sext i32 %6 to i64
  %8 = mul i64 4, %7
  %9 = call noalias ptr @malloc(i64 noundef %8) #4
  %10 = getelementptr inbounds %struct.list_int, ptr %2, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = load { i32, ptr }, ptr %2, align 8
  ret { i32, ptr } %11
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 19.1.7 (++20250114103332+cd708029e0b2-1~exp1~20250114103446.78)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
