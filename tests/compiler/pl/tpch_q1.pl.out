:- style_check(-singleton).
to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).


count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).


avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.


sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).


expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).


dataset_filter([], _, []).
dataset_filter([H|T], Pred, [H|R]) :- call(Pred, H), !, dataset_filter(T, Pred, R).
dataset_filter([_|T], Pred, R) :- dataset_filter(T, Pred, R).


group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).


:- use_module(library(http/json)).
json(V) :- json_write_dict(current_output, V), nl.


        p__lambda0(Row, Res) :-
        get_dict(l_shipdate, Row, _V8),
        Res = _V8 =< "1998-09-02".

        p__lambda1(Row, Res) :-
        get_dict(l_returnflag, Row, _V9),
        get_dict(l_linestatus, Row, _V10),
        dict_create(_V11, map, [returnflag-_V9, linestatus-_V10]),
        Res = _V11.

test_p_q1_aggregates_revenue_and_quantity_by_returnflag___linestatus :-
    _V0 is 950 + 1800,
    _V1 is 950 * 1.07,
    _V2 is 1800 * 1.05,
    _V3 is _V1 + _V2,
    dict_create(_V4, map, [returnflag-"N", linestatus-"O", sum_qty-53, sum_base_price-3000, sum_disc_price-_V0, sum_charge-_V3, avg_qty-26.5, avg_price-1500, avg_disc-0.07500000000000001, count_order-2]),
    expect(Result = [_V4])    ,
    true.

    main :-
    dict_create(_V5, map, [l_quantity-17, l_extendedprice-1000, l_discount-0.05, l_tax-0.07, l_returnflag-"N", l_linestatus-"O", l_shipdate-"1998-08-01"]),
    dict_create(_V6, map, [l_quantity-36, l_extendedprice-2000, l_discount-0.1, l_tax-0.05, l_returnflag-"N", l_linestatus-"O", l_shipdate-"1998-09-01"]),
    dict_create(_V7, map, [l_quantity-25, l_extendedprice-1500, l_discount-0, l_tax-0.08, l_returnflag-"R", l_linestatus-"F", l_shipdate-"1998-09-03"]),
    Lineitem = [_V5, _V6, _V7],
    to_list(Lineitem, _V70),
    dataset_filter(_V70, p__lambda0, _V71),
    group_by(_V71, p__lambda1, _V72),
    findall(_V73, (member(G, _V72), get_dict(key, G, _V12), get_dict(returnflag, _V12, _V13), get_dict(key, G, _V14), get_dict(linestatus, _V14, _V15), get_dict('Items', G, _V16), to_list(_V16, _V18), findall(_V19, (member(X, _V18), get_dict(l_quantity, X, _V17), _V19 = _V17), _V20), sum(_V20, _V21), get_dict('Items', G, _V22), to_list(_V22, _V24), findall(_V25, (member(X, _V24), get_dict(l_extendedprice, X, _V23), _V25 = _V23), _V26), sum(_V26, _V27), get_dict('Items', G, _V28), to_list(_V28, _V33), findall(_V34, (member(X, _V33), get_dict(l_extendedprice, X, _V29), get_dict(l_discount, X, _V30), _V31 is 1 - _V30, _V32 is _V29 * _V31, _V34 = _V32), _V35), sum(_V35, _V36), get_dict('Items', G, _V37), to_list(_V37, _V45), findall(_V46, (member(X, _V45), get_dict(l_extendedprice, X, _V38), get_dict(l_discount, X, _V39), _V40 is 1 - _V39, _V43 is _V38 * _V40, get_dict(l_tax, X, _V41), _V42 is 1 + _V41, _V44 is _V43 * _V42, _V46 = _V44), _V47), sum(_V47, _V48), get_dict('Items', G, _V49), to_list(_V49, _V51), findall(_V52, (member(X, _V51), get_dict(l_quantity, X, _V50), _V52 = _V50), _V53), avg(_V53, _V54), get_dict('Items', G, _V55), to_list(_V55, _V57), findall(_V58, (member(X, _V57), get_dict(l_extendedprice, X, _V56), _V58 = _V56), _V59), avg(_V59, _V60), get_dict('Items', G, _V61), to_list(_V61, _V63), findall(_V64, (member(X, _V63), get_dict(l_discount, X, _V62), _V64 = _V62), _V65), avg(_V65, _V66), get_dict('Items', G, _V67), count(_V67, _V68), dict_create(_V69, map, [returnflag-_V13, linestatus-_V15, sum_qty-_V21, sum_base_price-_V27, sum_disc_price-_V36, sum_charge-_V48, avg_qty-_V54, avg_price-_V60, avg_disc-_V66, count_order-_V68]), _V73 = _V69), _V74),
    Result = _V74,
    json(Result),
    test_p_q1_aggregates_revenue_and_quantity_by_returnflag___linestatus
    .
:- initialization(main, main).
