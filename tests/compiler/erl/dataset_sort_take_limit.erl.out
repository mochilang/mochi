#!/usr/bin/env escript
-module(main).
-export([main/1]).

-record(product, {name, price}).

main(_) ->
    Products = [#product{name="Laptop", price=1500}, #product{name="Smartphone", price=900}, #product{name="Tablet", price=600}, #product{name="Monitor", price=300}, #product{name="Keyboard", price=100}, #product{name="Mouse", price=50}, #product{name="Headphones", price=200}],
    Expensive = (fun() ->
    Items = [{-P#product.price, P} || P <- Products],
    Sorted = begin
        SPairs = lists:sort(fun({A,_},{B,_}) -> A =< B end, Items),
        [ V || {_, V} <- SPairs ]
    end,
    Skipped = (case 1 of
        N when N > 0 -> lists:nthtail(N, Sorted);
        _ -> Sorted
    end),
    Taken = lists:sublist(Skipped, 3),
    Taken
end)(),
    mochi_print(["--- Top products (excluding most expensive) ---"]),
    mochi_foreach(fun(Item) ->
        mochi_print([Item#product.name, "costs $", Item#product.price])
    end, Expensive).

mochi_print(Args) ->
    Strs = [ mochi_format(A) || A <- Args ],
    io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_foreach(F, L) ->
    try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.

mochi_foreach_loop(_, []) -> ok;
mochi_foreach_loop(F, [H|T]) ->
    try F(H) catch
        throw:mochi_continue -> ok;
        throw:mochi_break -> throw(mochi_break)
    end,
    mochi_foreach_loop(F, T).
