abstract class Tree {}
class Leaf extends Tree {
	Leaf();
}
class Node extends Tree {
	dynamic left;
	dynamic value;
	dynamic right;
	Node({this.left, this.value, this.right});
}

dynamic fromList(nums) {
	dynamic helper(lo, hi) {
		if ((lo >= hi)) {
			return Leaf();
		}
		dynamic mid = (((lo + hi)) ~/ 2);
		return Node(left: helper(lo, mid), value: nums[mid], right: helper((mid + 1), hi));
	}
	return helper(0, nums.length);
}

dynamic inorder(t) {
	return (() {
	var _t = t;
	if (_t is Leaf) { return []; }
	if (_t is Node) { return ((l, v, r) { return ((inorder(l) + [v]) + inorder(r)); })((_t as Node).left, (_t as Node).value, (_t as Node).right); }
	return null;
})();
}

void main() {
	print(inorder(fromList([-10, -3, 0, 5, 9])));
}
