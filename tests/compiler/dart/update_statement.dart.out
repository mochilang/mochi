import 'dart:io';

class Person {
  String name;
  int age;
  String status;
  Person({required this.name, required this.age, required this.status});
  factory Person.fromJson(Map<String,dynamic> m) {
    return Person(name: m['name'] as String, age: m['age'] as int, status: m['status'] as String);
  }
}
_structParsers['Person'] = (m) => Person.fromJson(m);

void test_update_adult_status() {
  if (!(_equal(people, [Person(name: "Alice", age: 17, status: "minor"), Person(name: "Bob", age: 26, status: "adult"), Person(name: "Charlie", age: 19, status: "adult"), Person(name: "Diana", age: 16, status: "minor")]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Person> people = [Person(name: "Alice", age: 17, status: "minor"), Person(name: "Bob", age: 25, status: "unknown"), Person(name: "Charlie", age: 18, status: "unknown"), Person(name: "Diana", age: 16, status: "minor")];
  for (var _tmp0 = 0; _tmp0 < people.length; _tmp0++) {
    var _tmp1 = people[_tmp0];
    var name = _tmp1.name;
    var age = _tmp1.age;
    var status = _tmp1.status;
    if ((age >= 18)) {
      _tmp1.status = "adult";
      _tmp1.age = (age + 1);
    }
  }
  print("ok");
  if (!_runTest("update adult status", test_update_adult_status)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


