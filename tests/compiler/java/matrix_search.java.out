// fun searchMatrix(matrix: list<list<int>>, target: int): bool {
//   let m = len(matrix)
//   if m == 0 {
//     return false
//   }
//   let n = len(matrix[0])
//   var left = 0
//   var right = m * n - 1
//   while left <= right {
//     let mid = left + (right - left) / 2
//     let row = mid / n
//     let col = mid % n
//     let value = matrix[row][col]
//     if value == target {
//       return true
//     } else if value < target {
//       left = mid + 1
//     } else {
//       right = mid - 1
//     }
//   }
//   return false
// }
//
// print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3))
// print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13))
//

public class Main {
    static boolean searchMatrix(Object[] matrix, int target) {
        int m = matrix.length;
        if ((m == 0)) {
            return false;
        }
        int n = matrix[0].length;
        int left = 0;
        int right = ((m * n) - 1);
        while ((left <= right)) {
            int mid = (left + ((right - left) / 2));
            int row = (mid / n);
            int col = (mid % n);
            int value = matrix[row][col];
            if ((value == target)) {
                return true;
            } else             if ((value < target)) {
                left = (mid + 1);
            } else {
                right = (mid - 1);
            }
        }
        return false;
    }

    public static void main(String[] args) {
        System.out.println(searchMatrix(new Object[][]{new int[]{1, 3, 5, 7}, new int[]{10, 11, 16, 20}, new int[]{23, 30, 34, 60}}, 3));
        System.out.println(searchMatrix(new Object[][]{new int[]{1, 3, 5, 7}, new int[]{10, 11, 16, 20}, new int[]{23, 30, 34, 60}}, 13));
    }
}
