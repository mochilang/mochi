public class Main {
	static class Todo {
		int userId;
		int id;
		String title;
		boolean completed;
		
		Todo(int userId, int id, String title, boolean completed) {
			this.userId = userId;
			this.id = id;
			this.title = title;
			this.completed = completed;
		}
		
		Todo() {}
	}
	
	public static void main(String[] args) {
		Todo todo = _fetch("https://jsonplaceholder.typicode.com/todos/1", null);
		System.out.println(todo.title);
	}
	
	static Object _fetch(String url, java.util.Map<String,Object> opts) {
		try {
			java.net.URI uri = java.net.URI.create(url);
			if ("file".equals(uri.getScheme())) {
				String text = java.nio.file.Files.readString(java.nio.file.Paths.get(uri));
				return _parseJson(text);
			}
			String method = "GET";
			if (opts != null && opts.get("method") != null) method = opts.get("method").toString();
			if (opts != null && opts.get("query") != null) {
				@SuppressWarnings("unchecked") java.util.Map<String,Object> q = (java.util.Map<String,Object>) opts.get("query");
				java.lang.StringBuilder qs = new java.lang.StringBuilder();
				for (var e : q.entrySet()) { if (qs.length() > 0) qs.append('&'); qs.append(java.net.URLEncoder.encode(e.getKey(), java.nio.charset.StandardCharsets.UTF_8)); qs.append('='); qs.append(java.net.URLEncoder.encode(String.valueOf(e.getValue()), java.nio.charset.StandardCharsets.UTF_8)); }
				String sep = url.contains("?") ? "&" : "?";
				url = url + sep + qs.toString();
				uri = java.net.URI.create(url);
			}
			java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder(uri);
			if (opts != null && opts.get("headers") != null) {
				@SuppressWarnings("unchecked") java.util.Map<String,Object> hs = (java.util.Map<String,Object>) opts.get("headers");
				for (var e : hs.entrySet()) builder.header(e.getKey(), String.valueOf(e.getValue()));
			}
			boolean hasBody = opts != null && opts.containsKey("body");
			if (hasBody) {
				String data = _toJson(opts.get("body"));
				builder.method(method, java.net.http.HttpRequest.BodyPublishers.ofString(data));
				boolean hasCT = false;
				if (opts != null && opts.get("headers") != null) {
					for (var e : ((java.util.Map<String,Object>)opts.get("headers")).entrySet()) if (e.getKey().equalsIgnoreCase("Content-Type")) { hasCT = true; break; }
				}
				if (!hasCT) builder.header("Content-Type", "application/json");
			} else {
				builder.method(method, java.net.http.HttpRequest.BodyPublishers.noBody());
			}
			if (opts != null && opts.get("timeout") != null) {
				double secs = Double.parseDouble(opts.get("timeout").toString());
				builder.timeout(java.time.Duration.ofMillis((long)(secs*1000)));
			}
			java.net.http.HttpClient client = java.net.http.HttpClient.newHttpClient();
			java.net.http.HttpResponse<String> resp = client.send(builder.build(), java.net.http.HttpResponse.BodyHandlers.ofString());
			return _parseJson(resp.body());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	static java.util.List<java.util.Map<String,Object>> _load(String path, java.util.Map<String,Object> opts) {
		try {
			String format = opts != null && opts.get("format") != null ? opts.get("format").toString() : "csv";
			boolean header = opts == null || !opts.containsKey("header") ? true : Boolean.parseBoolean(opts.get("header").toString());
			char delim = ',';
			if (opts != null && opts.get("delimiter") != null) { String d = opts.get("delimiter").toString(); if (!d.isEmpty()) delim = d.charAt(0); }
			if ("tsv".equals(format)) { delim='	'; format="csv"; }
			java.io.BufferedReader r;
			if (path == null || path.isEmpty() || path.equals("-")) {
				r = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
			} else {
				r = java.nio.file.Files.newBufferedReader(java.nio.file.Path.of(path));
			}
			java.util.List<java.util.Map<String,Object>> out = new java.util.ArrayList<>();
			if ("json".equals(format)) {
				StringBuilder sb = new StringBuilder();
				for (String line; (line = r.readLine()) != null;) { sb.append(line); }
				r.close();
				Object data = _parseJson(sb.toString());
				if (data instanceof java.util.Map<?,?> m) {
					out.add(new java.util.HashMap<>( (java.util.Map<String,Object>) m));
				} else if (data instanceof java.util.List<?> l) {
					for (Object it : l) { if (it instanceof java.util.Map<?,?>) out.add(new java.util.HashMap<>( (java.util.Map<String,Object>) it)); }
				}
				return out;
			}
			java.util.List<String> lines = new java.util.ArrayList<>();
			for (String line; (line = r.readLine()) != null;) { if (!line.isEmpty()) lines.add(line); }
			r.close();
			if (lines.isEmpty()) return out;
			String[] headers = lines.get(0).split(Character.toString(delim));
			int start = 0;
			if (header) { start = 1; } else { for (int i=0;i<headers.length;i++) headers[i]="c"+i; }
			for (int i=start;i<lines.size();i++) {
				String[] parts = lines.get(i).split(Character.toString(delim));
				java.util.Map<String,Object> row = new java.util.HashMap<>();
				for (int j=0;j<headers.length;j++) {
					String val = j < parts.length ? parts[j] : "";
					try { row.put(headers[j], Integer.parseInt(val)); } catch(NumberFormatException _e1) {
						try { row.put(headers[j], Double.parseDouble(val)); } catch(NumberFormatException _e2) { row.put(headers[j], val); }
					}
				}
				out.add(row);
			}
			return out;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	static void _save(java.util.List<java.util.Map<String,Object>> rows, String path, java.util.Map<String,Object> opts) {
		try {
			boolean header = opts != null && opts.get("header") != null ? Boolean.parseBoolean(opts.get("header").toString()) : false;
			char delim = ',';
			if (opts != null && opts.get("delimiter") != null) { String d = opts.get("delimiter").toString(); if (!d.isEmpty()) delim = d.charAt(0); }
			String format = opts != null && opts.get("format") != null ? opts.get("format").toString() : "csv";
			if ("tsv".equals(format)) { delim='	'; format="csv"; }
			java.io.BufferedWriter w;
			if (path == null || path.isEmpty() || path.equals("-")) {
				w = new java.io.BufferedWriter(new java.io.OutputStreamWriter(System.out));
			} else {
				w = java.nio.file.Files.newBufferedWriter(java.nio.file.Path.of(path));
			}
			if ("json".equals(format)) {
				w.write(_toJson(rows.size() == 1 ? rows.get(0) : rows));
				w.newLine();
			} else {
				java.util.List<String> headers = rows.isEmpty() ? java.util.List.of() : new java.util.ArrayList<>(rows.get(0).keySet());
				java.util.Collections.sort(headers);
				if (header && !headers.isEmpty()) { w.write(String.join(Character.toString(delim), headers)); w.newLine(); }
				for (java.util.Map<String,Object> row : rows) {
					java.util.List<String> rec = new java.util.ArrayList<>();
					for (String h : headers) { Object v = row.get(h); rec.add(v==null?"":v.toString()); }
					w.write(String.join(Character.toString(delim), rec));
					w.newLine();
				}
			}
			w.flush(); if (path != null && !path.isEmpty() && !path.equals("-")) w.close();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	static String _toJson(Object v) {
		if (v == null) return "null";
		if (v instanceof String) {
			String s = (String) v;
			return "\"" + s.replace("\\", "\\\\").replace("\"", "\\\"") + "\"";
		}
		if (v instanceof Number || v instanceof Boolean) return v.toString();
		if (v.getClass().isArray()) {
			int n = java.lang.reflect.Array.getLength(v);
			StringBuilder sb = new StringBuilder();
			sb.append('[');
			for (int i=0;i<n;i++) {
				if (i>0) sb.append(',');
				sb.append(_toJson(java.lang.reflect.Array.get(v,i)));
			}
			sb.append(']');
			return sb.toString();
		}
		if (v instanceof java.util.List<?>) {
			java.util.List<?> l=(java.util.List<?>)v;
			StringBuilder sb=new StringBuilder();
			sb.append('[');
			for (int i=0;i<l.size();i++) {
				if(i>0) sb.append(',');
				sb.append(_toJson(l.get(i)));
			}
			sb.append(']');
			return sb.toString();
		}
		if (v instanceof java.util.Map<?,?>) {
			java.util.Map<?,?> m=(java.util.Map<?,?>)v;
			StringBuilder sb=new StringBuilder();
			sb.append('{');
			boolean first=true;
			for (var e : m.entrySet()) {
				if(!first) sb.append(',');
				first=false;
				sb.append(_toJson(String.valueOf(e.getKey())));
				sb.append(':');
				sb.append(_toJson(e.getValue()));
			}
			sb.append('}');
			return sb.toString();
		}
		return _toJson(v.toString());
	}
	
	static Object _parseJson(String s) {
		int[] i = new int[]{0};
		return _parseJsonValue(s, i);
	}
	
	static Object _parseJsonValue(String s, int[] i) {
		_skip(s, i);
		char c = s.charAt(i[0]);
		if (c == '{') return _parseJsonObject(s, i);
		if (c == '[') return _parseJsonArray(s, i);
		if (c == '"') return _parseJsonString(s, i);
		if (c == '-' || Character.isDigit(c)) return _parseJsonNumber(s, i);
		if (s.startsWith("true", i[0])) { i[0]+=4; return true; }
		if (s.startsWith("false", i[0])) { i[0]+=5; return false; }
		if (s.startsWith("null", i[0])) { i[0]+=4; return null; }
		throw new RuntimeException("invalid json");
	}
	
	static void _skip(String s, int[] i) { while (i[0] < s.length() && Character.isWhitespace(s.charAt(i[0]))) i[0]++; }
	
	static String _parseJsonString(String s, int[] i) {
		StringBuilder sb = new StringBuilder();
		i[0]++;
		while (i[0] < s.length()) {
			char ch = s.charAt(i[0]++);
			if (ch == '"') break;
			if (ch == '\') {
				char e = s.charAt(i[0]++);
				switch (e) {
					case '"': sb.append('"'); break;
					case '\': sb.append('\'); break;
					case '/': sb.append('/'); break;
					case 'b': sb.append(''); break;
					case 'f': sb.append(''); break;
					case 'n': sb.append('
'); break;
					case 'r': sb.append(''); break;
					case 't': sb.append('	'); break;
					case 'u': sb.append((char)Integer.parseInt(s.substring(i[0], i[0]+4), 16)); i[0]+=4; break;
					default: sb.append(e); break;
				}
			} else {
				sb.append(ch);
			}
		}
		return sb.toString();
	}
	
	static Object _parseJsonNumber(String s, int[] i) {
		int start = i[0];
		if (s.charAt(i[0])=='-') i[0]++;
		while (i[0] < s.length() && Character.isDigit(s.charAt(i[0]))) i[0]++;
		boolean f = false;
		if (i[0] < s.length() && s.charAt(i[0])=='.') { f = true; i[0]++; while (i[0] < s.length() && Character.isDigit(s.charAt(i[0]))) i[0]++; }
		String num = s.substring(start, i[0]);
		return f ? Double.parseDouble(num) : Integer.parseInt(num);
	}
	
	static java.util.List<Object> _parseJsonArray(String s, int[] i) {
		java.util.List<Object> a = new java.util.ArrayList<>();
		i[0]++; _skip(s,i); if (i[0] < s.length() && s.charAt(i[0])==']') { i[0]++; return a; }
		while (true) {
			a.add(_parseJsonValue(s,i));
			_skip(s,i);
			if (i[0] < s.length() && s.charAt(i[0])==']') { i[0]++; break; }
			if (i[0] < s.length() && s.charAt(i[0])==',') { i[0]++; continue; }
			throw new RuntimeException("invalid json array");
		}
		return a;
	}
	
	static java.util.Map<String,Object> _parseJsonObject(String s, int[] i) {
		java.util.Map<String,Object> m = new java.util.HashMap<>();
		i[0]++; _skip(s,i); if (i[0] < s.length() && s.charAt(i[0])=='}') { i[0]++; return m; }
		while (true) {
			String k = _parseJsonString(s,i);
			_skip(s,i);
			if (i[0] >= s.length() || s.charAt(i[0]) != ':') throw new RuntimeException("expected :");
			i[0]++; Object v = _parseJsonValue(s,i); m.put(k,v); _skip(s,i);
			if (i[0] < s.length() && s.charAt(i[0])=='}') { i[0]++; break; }
			if (i[0] < s.length() && s.charAt(i[0])==',') { i[0]++; continue; }
			throw new RuntimeException("invalid json object");
		}
		return m;
	}
}
