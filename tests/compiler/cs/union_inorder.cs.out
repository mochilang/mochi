// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

public interface Tree { void isTree(); }
public class Leaf : Tree {
	public void isTree() {}
}
public class Node : Tree {
	public Tree left;
	public long value;
	public Tree right;
	public void isTree() {}
}

public class Program {
	static long[] inorder(Tree t) {
		return new Func<dynamic>(() => {
		var _t = t;
		if (_t is Leaf) return _cast<long[]>(new dynamic[] { });
		if (_t is Node _tmp0) {
			var l = _tmp0.left;
			var v = _tmp0.value;
			var r = _tmp0.right;
			return inorder(l).Concat(new [] { v }).ToArray().Concat(inorder(r)).ToArray();
		}
		return null;
	})();
	}
	
	public static void Main() {
		Console.WriteLine(inorder(new Node { left = new Leaf {  }, value = 1L, right = new Node { left = new Leaf {  }, value = 2L, right = new Leaf {  } } }));
	}
	static T _cast<T>(dynamic v) {
		if (v is T tv) return tv;
		if (typeof(T) == typeof(int)) {
			if (v is int) return (T)v;
			if (v is double) return (T)(object)(int)(double)v;
			if (v is float) return (T)(object)(int)(float)v;
		}
		if (typeof(T) == typeof(double)) {
			if (v is int) return (T)(object)(double)(int)v;
			if (v is double) return (T)v;
			if (v is float) return (T)(object)(double)(float)v;
		}
		if (typeof(T) == typeof(float)) {
			if (v is int) return (T)(object)(float)(int)v;
			if (v is double) return (T)(object)(float)(double)v;
			if (v is float) return (T)v;
		}
		if (v is System.Collections.Generic.IDictionary<object, object> dm) {
			var m = new Dictionary<string, object>();
			foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
			v = m;
		}
		var json = JsonSerializer.Serialize(v);
		return JsonSerializer.Deserialize<T>(json);
	}
	
}
