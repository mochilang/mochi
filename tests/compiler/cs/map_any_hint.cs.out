// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Text.Json;

public class Program {
	static Dictionary<string, dynamic> Leaf() {
		return new Dictionary<dynamic, dynamic> { { "__name", "Leaf" } };
	}
	
	static Dictionary<string, dynamic> Node(Dictionary<string, dynamic> left, int value, Dictionary<string, dynamic> right) {
		return new Dictionary<dynamic, dynamic> { { "__name", "Node" }, { "left", left }, { "value", value }, { "right", right } };
	}
	
	public static void Main() {
		var tree = Node(Leaf(), 1, Leaf());
		Console.WriteLine((_cast<Dictionary<string, dynamic>>(tree["left"]))["__name"]);
	}
	static T _cast<T>(dynamic v) {
		if (v is T tv) return tv;
		if (typeof(T) == typeof(int)) {
			if (v is int) return (T)v;
			if (v is double) return (T)(object)(int)(double)v;
			if (v is float) return (T)(object)(int)(float)v;
		}
		if (typeof(T) == typeof(double)) {
			if (v is int) return (T)(object)(double)(int)v;
			if (v is double) return (T)v;
			if (v is float) return (T)(object)(double)(float)v;
		}
		if (typeof(T) == typeof(float)) {
			if (v is int) return (T)(object)(float)(int)v;
			if (v is double) return (T)(object)(float)(double)v;
			if (v is float) return (T)v;
		}
		if (v is System.Collections.Generic.IDictionary<object, object> dm) {
			var m = new Dictionary<string, object>();
			foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
			v = m;
		}
		var json = JsonSerializer.Serialize(v);
		return JsonSerializer.Deserialize<T>(json);
	}
	
}
