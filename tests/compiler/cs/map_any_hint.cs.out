// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Text.Json;

public class Program {
    static Dictionary<string, dynamic> Leaf() {
        return new Dictionary<string, string> { { "__name", "Leaf" } };
    }
    
    static Dictionary<string, dynamic> Node(Dictionary<string, dynamic> left, long value, Dictionary<string, dynamic> right) {
        return new Dictionary<string, string> { { "__name", "Node" }, { "left", left }, { "value", value }, { "right", right } };
    }
    
    public static void Main() {
        var tree = Node(Leaf(), 1L, Leaf());
        Console.WriteLine(_indexList((_cast<Dictionary<string, dynamic>>(_indexList(tree, "left"))), "__name"));
    }
    static T _cast<T>(dynamic v) {
        if (v is T tv) return tv;
        if (typeof(T) == typeof(int)) {
            if (v is int) return (T)v;
            if (v is double) return (T)(object)(int)(double)v;
            if (v is float) return (T)(object)(int)(float)v;
        }
        if (typeof(T) == typeof(double)) {
            if (v is int) return (T)(object)(double)(int)v;
            if (v is double) return (T)v;
            if (v is float) return (T)(object)(double)(float)v;
        }
        if (typeof(T) == typeof(float)) {
            if (v is int) return (T)(object)(float)(int)v;
            if (v is double) return (T)(object)(float)(double)v;
            if (v is float) return (T)v;
        }
        if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d) {
            var args = typeof(T).GetGenericArguments();
            var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args));
            var mCast = typeof(Program).GetMethod("_cast");
            foreach (System.Collections.DictionaryEntry kv in d) {
                var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[]{kv.Key});
                var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[]{kv.Value});
                res.Add(k, val);
            }
            return (T)res;
        }
        if (v is System.Collections.Generic.IDictionary<object, object> dm) {
            var m = new Dictionary<string, object>();
            foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
            v = m;
        }
        var json = JsonSerializer.Serialize(v);
        return JsonSerializer.Deserialize<T>(json);
    }
    
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
}
