// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Text.Json;

public class Program {
	static void test_values() {
		if (!((xs[0L] == ((-1L))))) throw new Exception("expect failed");
		if (!((xs[1L] == 0L))) throw new Exception("expect failed");
		if (!((xs[2L] == 1L))) throw new Exception("expect failed");
		Console.WriteLine("done");
	}
	
	public static void Main() {
		long[] xs = _cast<long[]>(new [] { ((-1L)), 0L, 1L });
		test_values();
	}
	static T _cast<T>(dynamic v) {
		if (v is T tv) return tv;
		if (typeof(T) == typeof(int)) {
			if (v is int) return (T)v;
			if (v is double) return (T)(object)(int)(double)v;
			if (v is float) return (T)(object)(int)(float)v;
		}
		if (typeof(T) == typeof(double)) {
			if (v is int) return (T)(object)(double)(int)v;
			if (v is double) return (T)v;
			if (v is float) return (T)(object)(double)(float)v;
		}
		if (typeof(T) == typeof(float)) {
			if (v is int) return (T)(object)(float)(int)v;
			if (v is double) return (T)(object)(float)(double)v;
			if (v is float) return (T)v;
		}
		if (v is System.Collections.Generic.IDictionary<object, object> dm) {
			var m = new Dictionary<string, object>();
			foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
			v = m;
		}
		var json = JsonSerializer.Serialize(v);
		return JsonSerializer.Deserialize<T>(json);
	}
	
}
