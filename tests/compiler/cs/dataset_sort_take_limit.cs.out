// Source
// // dataset-sort-take-limit.mochi
// 
// type Product {
//   name: string
//   price: int
// }
// 
// let products = [
//   Product { name: "Laptop", price: 1500 },
//   Product { name: "Smartphone", price: 900 },
//   Product { name: "Tablet", price: 600 },
//   Product { name: "Monitor", price: 300 },
//   Product { name: "Keyboard", price: 100 },
//   Product { name: "Mouse", price: 50 },
//   Product { name: "Headphones", price: 200 }
// ]
// 
// let expensive = from p in products
//                 sort by -p.price
//                 skip 1
//                 take 3
//                 select p
// 
// print("--- Top products (excluding most expensive) ---")
// for item in expensive {
//   print(item.name, "costs $", item.price)
// }

// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct Product {
	public string name;
	public long price;
}

public class Program {
	public static void Main() {
		Product[] products = new Product[] { new Product { name = "Laptop", price = 1500L }, new Product { name = "Smartphone", price = 900L }, new Product { name = "Tablet", price = 600L }, new Product { name = "Monitor", price = 300L }, new Product { name = "Keyboard", price = 100L }, new Product { name = "Mouse", price = 50L }, new Product { name = "Headphones", price = 200L } };
		Product[] expensive = new List<dynamic>(products.OrderBy(p => -p.price).Skip(1L).Take(3L).Select(p => p));
		Console.WriteLine("--- Top products (excluding most expensive) ---");
		foreach (var item in expensive) {
			Console.WriteLine(string.Join(" ", new [] { Convert.ToString(item.name), Convert.ToString("costs $"), Convert.ToString(item.price) }));
		}
	}
}
