// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    public static void Main() {
        var people = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "name", "Alice" }, { "age", 30L } }, new Dictionary<string, dynamic> { { "name", "Bob" }, { "age", 25L } } };
        _save(people, "-", new Dictionary<string, string> { { "format", "json" } });
    }
    static void _save(dynamic src, string path, Dictionary<string, object> opts) {
        var rows = src as IEnumerable<dynamic>; if (rows == null) return;
        var format = opts != null && opts.ContainsKey("format") ? Convert.ToString(opts["format"]) : "csv";
        var header = opts != null && opts.ContainsKey("header") ? Convert.ToBoolean(opts["header"]) : false;
        var delim = opts != null && opts.ContainsKey("delimiter") ? Convert.ToString(opts["delimiter"])[0] : ',';
        switch (format) {
        case "jsonl":
            var lines = rows.Select(r => JsonSerializer.Serialize(r));
            if (string.IsNullOrEmpty(path) || path == "-") Console.WriteLine(string.Join("\n", lines)); else File.WriteAllLines(path, lines);
            break;
        case "json":
            var data = JsonSerializer.Serialize(rows);
            if (string.IsNullOrEmpty(path) || path == "-") Console.Write(data); else File.WriteAllText(path, data);
            break;
        case "yaml":
            var ser = new SerializerBuilder().Build();
            var list = rows.ToList();
            var data = list.Count == 1 ? list[0] : (object)list;
            var ydata = ser.Serialize(data);
            if (string.IsNullOrEmpty(path) || path == "-") Console.Write(ydata); else File.WriteAllText(path, ydata);
            break;
        case "tsv":
            delim = '    '; goto default;
        default:
            var list = rows.Cast<IDictionary<string, object>>().ToList();
            var headers = list.Count > 0 ? list[0].Keys.ToList() : new List<string>();
            var lines = new List<string>();
            if (header) lines.Add(string.Join(delim.ToString(), headers));
            foreach (var row in list) lines.Add(string.Join(delim.ToString(), headers.Select(h => row.ContainsKey(h) ? Convert.ToString(row[h]) : "")));
            if (string.IsNullOrEmpty(path) || path == "-") Console.WriteLine(string.Join("\n", lines)); else File.WriteAllLines(path, lines);
            break;
        }
    }
    
}
