// Source
// type Tree =
//   Leaf {}
//   | Node(left: Tree, value: int, right: Tree)
// 
// fun value_of_root(t: Tree): int {
//   return match t {
//     Node(_, v, _) => v
//     _ => 0
//   }
// }
// 
// print(value_of_root(Node { left: Leaf {}, value: 5, right: Leaf {} }))

// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public interface Tree { void isTree(); }
public struct Leaf : Tree {
	public void isTree() {}
}
public struct Node : Tree {
	public Tree left;
	public long value;
	public Tree right;
	public void isTree() {}
}

public class Program {
	static long value_of_root(Tree t) {
		return new Func<dynamic>(() => {
		var _t = t;
		if (_t is Node _tmp0) {
			var v = _tmp0.value;
			return v;
		}
		return 0L;
	})();
	}
	
	public static void Main() {
		Console.WriteLine(value_of_root(new Node { left = new Leaf {  }, value = 5L, right = new Leaf {  } }));
	}
}
