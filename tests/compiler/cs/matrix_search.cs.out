// Source
// fun searchMatrix(matrix: list<list<int>>, target: int): bool {
//   let m = len(matrix)
//   if m == 0 {
//     return false
//   }
//   let n = len(matrix[0])
//   var left = 0
//   var right = m * n - 1
//   while left <= right {
//     let mid = left + (right - left) / 2
//     let row = mid / n
//     let col = mid % n
//     let value = matrix[row][col]
//     if value == target {
//       return true
//     } else if value < target {
//       left = mid + 1
//     } else {
//       right = mid - 1
//     }
//   }
//   return false
// }
// 
// print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3))
// print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13))

// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
	static bool searchMatrix(long[][] matrix, long target) {
		long m = matrix.Length;
		if (m == 0L) {
			return false;
		}
		long n = _indexList(matrix, 0L).Length;
		long left = 0L;
		var right = m * n - 1L;
		while (left <= right) {
			var mid = left + (right - left) / 2L;
			var row = mid / n;
			var col = mid % n;
			var value = _indexList(_indexList(matrix, row), col);
			if (value == target) {
				return true;
			} else if (value < target) {
				left = mid + 1L;
			} else {
				right = mid - 1L;
			}
		}
		return false;
	}
	
	public static void Main() {
		Console.WriteLine(searchMatrix(new long[][] { new long[] { 1L, 3L, 5L, 7L }, new long[] { 10L, 11L, 16L, 20L }, new long[] { 23L, 30L, 34L, 60L } }, 3L));
		Console.WriteLine(searchMatrix(new long[][] { new long[] { 1L, 3L, 5L, 7L }, new long[] { 10L, 11L, 16L, 20L }, new long[] { 23L, 30L, 34L, 60L } }, 13L));
	}
	static dynamic _indexList(dynamic l, long i) {
		var list = l as System.Collections.IList;
		if (list == null) throw new Exception("index() expects list");
		if (i < 0) i += list.Count;
		if (i < 0 || i >= list.Count) throw new Exception("index out of range");
		return list[(int)i];
	}
	
}
