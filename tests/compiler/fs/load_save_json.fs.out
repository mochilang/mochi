open System

let format = "format"
let _cast<'T> (v: obj) : 'T =
  match v with
  | :? 'T as t -> t
  | _ ->
      let json = System.Text.Json.JsonSerializer.Serialize(v)
      System.Text.Json.JsonSerializer.Deserialize<'T>(json)
let _load (path: string option) (opts: Map<string,obj> option) : List<Map<string,obj>> =
  let format = opts |> Option.bind (Map.tryFind "format") |> Option.map string |> Option.defaultValue "csv"
  let header = opts |> Option.bind (Map.tryFind "header") |> Option.map unbox<bool> |> Option.defaultValue true
  let mutable delim = opts |> Option.bind (Map.tryFind "delimiter") |> Option.map (fun v -> (string v).[0]) |> Option.defaultValue ','
  if format = "tsv" then delim <- '\t'
  let text =
    match path with
    | None | Some "" | Some "-" -> System.Console.In.ReadToEnd()
    | Some p -> System.IO.File.ReadAllText(p)
  let parse_json (s: string) =
    let doc = System.Text.Json.JsonDocument.Parse(s)
    let rec toObj (e: System.Text.Json.JsonElement) : obj =
      match e.ValueKind with
      | System.Text.Json.JsonValueKind.String -> box (e.GetString())
      | System.Text.Json.JsonValueKind.Number ->
        let mutable i = 0L
        if e.TryGetInt64(&i) then box i else box (e.GetDouble())
      | System.Text.Json.JsonValueKind.True
      | System.Text.Json.JsonValueKind.False -> box (e.GetBoolean())
      | System.Text.Json.JsonValueKind.Array -> e.EnumerateArray() |> Seq.map toObj |> Seq.toArray |> box
      | System.Text.Json.JsonValueKind.Object ->
        e.EnumerateObject()
        |> Seq.map (fun p -> p.Name, toObj p.Value)
        |> Map.ofSeq
        |> box
      | _ -> null
    if doc.RootElement.ValueKind = System.Text.Json.JsonValueKind.Array then
      [ for el in doc.RootElement.EnumerateArray() ->
          el.EnumerateObject() |> Seq.map (fun p -> p.Name, toObj p.Value) |> Map.ofSeq ]
    else
      [ doc.RootElement.EnumerateObject() |> Seq.map (fun p -> p.Name, toObj p.Value) |> Map.ofSeq ]
  match format with
  | "json" -> parse_json text
  | "jsonl" ->
      text.Split([|'\n';'\r'|], System.StringSplitOptions.RemoveEmptyEntries)
      |> Array.map parse_json
      |> Array.collect id
      |> Array.toList
  | _ ->
      let lines = text.Trim().Split([|'\n';'\r'|], System.StringSplitOptions.RemoveEmptyEntries)
      if lines.Length = 0 then [] else
        let headers =
          if header then lines.[0].Split(delim)
          else Array.init (lines.[0].Split(delim).Length) (fun i -> sprintf "c%d" i)
        let start = if header then 1 else 0
        [ for i in start .. lines.Length - 1 ->
            let parts = lines.[i].Split(delim)
            headers |> Array.mapi (fun j h -> h, if j < parts.Length then box parts.[j] else box "") |> Map.ofArray ]
let _save (rows: List<Map<string,obj>>) (path: string option) (opts: Map<string,obj> option) : unit =
  let format = opts |> Option.bind (Map.tryFind "format") |> Option.map string |> Option.defaultValue "csv"
  let header = opts |> Option.bind (Map.tryFind "header") |> Option.map unbox<bool> |> Option.defaultValue false
  let mutable delim = opts |> Option.bind (Map.tryFind "delimiter") |> Option.map (fun v -> (string v).[0]) |> Option.defaultValue ','
  if format = "tsv" then delim <- '\t'
  let toDict (m: Map<string,obj>) =
    let d = System.Collections.Generic.Dictionary<string,obj>()
    for KeyValue(k,v) in m do d[k] <- v
    d
  match format with
  | "json" ->
      let data = rows |> List.map toDict
      let text =
        if data.Length = 1 then System.Text.Json.JsonSerializer.Serialize(data.Head)
        else System.Text.Json.JsonSerializer.Serialize(data)
      match path with
      | None | Some "" | Some "-" -> System.Console.Out.Write(text)
      | Some p -> System.IO.File.WriteAllText(p, text)
  | "jsonl" ->
      let lines = rows |> List.map (fun m -> System.Text.Json.JsonSerializer.Serialize(toDict m))
      let out = String.concat "\n" lines + "\n"
      match path with
      | None | Some "" | Some "-" -> System.Console.Out.Write(out)
      | Some p -> System.IO.File.WriteAllText(p, out)
  | _ when format <> "csv" -> ()
  | _ ->
      let headers = if rows.Length > 0 then rows.[0] |> Map.keys |> Seq.toArray |> Array.sort else [||]
      let sb = System.Text.StringBuilder()
      if header then sb.AppendLine(String.concat (string delim) headers) |> ignore
      for row in rows do
          let line =
              headers
              |> Array.map (fun h -> match Map.tryFind h row with Some v -> string v | None -> "")
              |> String.concat (string delim)
          sb.AppendLine(line) |> ignore
      let out = sb.ToString()
      match path with
      | None | Some "" | Some "-" -> System.Console.Out.Write(out)
      | Some p -> System.IO.File.WriteAllText(p, out)

type Person =
    {
        name: string;
        age: int
    }

type Person =
    {
        name: string;
        age: int
    }
let people = _load None Some (Map.ofList [(format, "json")]) |> List.map (fun row -> _cast<Person>(row))
ignore (_save people None Some (Map.ofList [(format, "json")]))
