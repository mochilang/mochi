;; Original Source
; fun factorial(n: int): int {
;   if n <= 1 {
;     return 1
;   }
;   return n * factorial(n - 1)
; }
;
; print(factorial(0))
; print(factorial(1))
; print(factorial(5))

(ns main)

(defn factorial [n]
  (try
    (when (<= n 1)
      (throw (ex-info "return" {:value 1}))
    )
  (throw (ex-info "return" {:value (* n (factorial (- n 1)))}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
      (throw e)))
)
)

(defn -main []
  (println (factorial 0))
  (println (factorial 1))
  (println (factorial 5))
)

(-main)
