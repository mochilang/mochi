(ns main
  (:require
   [clojure.data.json :as json]))

(defn _cast_struct [ctor m]
  (let [fields (first (:arglists (meta ctor)))]
    (apply ctor (map #(get m %) fields))))
(defn _fetch [url opts]
  (let [method (get opts :method "GET")
        q      (get opts :query nil)
        url     (if q
                  (let [qs (clojure.string/join "&"
                                                (map (fn [[k v]]
                                                       (str (java.net.URLEncoder/encode (name k) "UTF-8")
                                                            "="
                                                            (java.net.URLEncoder/encode (str v) "UTF-8")))
                                                     q))
                        sep (if (clojure.string/includes? url "?") "&" "?")]
                    (str url sep qs))
                  url)
        builder (doto (java.net.http.HttpRequest/newBuilder (java.net.URI/create url))
                  (.method method
                           (if (contains? opts :body)
                             (java.net.http.HttpRequest$BodyPublishers/ofString
                              (clojure.data.json/write-str (:body opts)))
                             (java.net.http.HttpRequest$BodyPublishers/noBody))))]
    (when-let [hs (:headers opts)]
      (doseq [[k v] hs]
        (.header builder (name k) (str v))))
    (when-let [t (:timeout opts)]
      (.timeout builder (java.time.Duration/ofSeconds (long t))))
    (let [client (java.net.http.HttpClient/newHttpClient)
          resp (.send client (.build builder)
                      (java.net.http.HttpResponse$BodyHandlers/ofString))]
      (clojure.data.json/read-str (.body resp) :key-fn keyword))))
(defn Todo [userId id title completed]
  {:__name "Todo" :userId userId :id id :title title :completed completed})

(defn -main []
  (def todo (_cast_struct Todo (_fetch "https://jsonplaceholder.typicode.com/todos/1" nil)))
  (println (:title todo)))

(-main)
