(loop [_tmp0 (seq "cat")]
  (when _tmp0
    (let [ch (first _tmp0)]
      (let [r (try
        (println ch)
        :next
      (catch clojure.lang.ExceptionInfo e
        (cond
          (= (.getMessage e) "continue") :next
          (= (.getMessage e) "break") :break
          :else (throw e))
        )
      )]
    (cond
      (= r :break) nil
      :else (recur (next _tmp0))
    )
  )
)
)
)
