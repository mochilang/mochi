(ns main
  (:require
   [clojure.data.json :as json]))

(defn _save [rows path opts]
  (let [fmt (get opts :format "csv")
        header (get opts :header false)
        delim (first (or (get opts :delimiter ",") ","))
        headers (if (seq rows) (sort (keys (first rows))) [])]
    (cond
      (= fmt "csv")
      (let [lines (concat
                   (when header [(clojure.string/join delim headers)])
                   (map (fn [r]
                          (clojure.string/join delim (map #(str (get r % "")) headers)))
                        rows))
            out (str (clojure.string/join "\n" lines) "\n")]
        (if (or (nil? path) (= path "") (= path "-"))
          (print out)
          (spit path out)))
      (= fmt "tsv")
      (_save rows path (assoc opts :format "csv" :delimiter "\t"))
      (= fmt "json")
      (let [out (clojure.data.json/write-str rows)]
        (if (or (nil? path) (= path "") (= path "-"))
          (print out)
          (spit path out)))
      (= fmt "jsonl")
      (let [out (clojure.string/join "\n" (map #(clojure.data.json/write-str %) rows))]
        (if (or (nil? path) (= path "") (= path "-"))
          (print (str out "\n"))
          (spit path (str out "\n"))))
      (= fmt "yaml")
      (let [yaml (org.yaml.snakeyaml.Yaml.)
            out (.dump yaml (clojure.walk/keywordize-keys
                             (if (= 1 (count rows)) (first rows) rows)))]
        (if (or (nil? path) (= path "") (= path "-"))
          (print out)
          (spit path out)))
      :else
      nil)))

(declare people)

(defn -main []
  (def people [{:name "Alice" :age 30} {:name "Bob" :age 25}])
  (_save people "-" {:format "json"}))

(-main)
