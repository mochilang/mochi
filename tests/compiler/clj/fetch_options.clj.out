(ns main
  (:require
   [clojure.data.json :as json]))

(defn _fetch [url opts]
  ;; Ensure IPv4 is preferred to avoid network issues in some environments
  (System/setProperty "java.net.preferIPv4Stack" "true")
  (let [method (get opts :method "GET")
        q      (get opts :query nil)
        url     (if q
                  (let [qs (clojure.string/join "&"
                                                (map (fn [[k v]]
                                                       (str (java.net.URLEncoder/encode (name k) "UTF-8")
                                                            "="
                                                            (java.net.URLEncoder/encode (str v) "UTF-8")))
                                                     q))
                        sep (if (clojure.string/includes? url "?") "&" "?")]
                    (str url sep qs))
                  url)]
    (cond
      (or (clojure.string/starts-with? url "file://")
          (clojure.string/starts-with? url "file:"))
      (let [path (if (clojure.string/starts-with? url "file://")
                   (subs url 7)
                   (subs url 5))
            txt  (try
                   (slurp path)
                   (catch java.io.FileNotFoundException _
                     (let [alt (str "../../.." "/" path)]
                       (slurp alt))))]
        (clojure.data.json/read-str txt :key-fn keyword))
      :else
      (let [builder (doto (java.net.http.HttpRequest/newBuilder (java.net.URI/create url))
                      (.method method
                               (if (contains? opts :body)
                                 (java.net.http.HttpRequest$BodyPublishers/ofString
                                  (clojure.data.json/write-str (:body opts)))
                                 (java.net.http.HttpRequest$BodyPublishers/noBody))))]
        (when-let [hs (:headers opts)]
          (doseq [[k v] hs]
            (.header builder (name k) (str v))))
        (when-let [t (:timeout opts)]
          (.timeout builder (java.time.Duration/ofSeconds (long t))))
        (let [client (java.net.http.HttpClient/newHttpClient)
              resp (.send client (.build builder)
                          (java.net.http.HttpResponse$BodyHandlers/ofString))]
          (clojure.data.json/read-str (.body resp) :key-fn keyword))))))
(declare resp)

(defn -main []
  (def resp (_fetch "https://httpbin.org/anything" {:method "POST" :headers {"Content-Type" "application/json"} :query {:x "1"} :body {"foo" 123}}))
  (println (:foo (:json resp))))

(-main)
