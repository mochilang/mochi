;; Original Source
; // dataset-sort-take-limit.mochi
;
; type Product {
;   name: string
;   price: int
; }
;
; let products = [
;   Product { name: "Laptop", price: 1500 },
;   Product { name: "Smartphone", price: 900 },
;   Product { name: "Tablet", price: 600 },
;   Product { name: "Monitor", price: 300 },
;   Product { name: "Keyboard", price: 100 },
;   Product { name: "Mouse", price: 50 },
;   Product { name: "Headphones", price: 200 }
; ]
;
; let expensive = from p in products
;                 sort by -p.price
;                 skip 1
;                 take 3
;                 select p
;
; print("--- Top products (excluding most expensive) ---")
; for item in expensive {
;   print(item.name, "costs $", item.price)
; }

(ns main)

(defn Product [name price]
  {:__name "Product" :name name :price price}
)


(defn -main []
  (def products [{:__name "Product" :name "Laptop" :price 1500} {:__name "Product" :name "Smartphone" :price 900} {:__name "Product" :name "Tablet" :price 600} {:__name "Product" :name "Monitor" :price 300} {:__name "Product" :name "Keyboard" :price 100} {:__name "Product" :name "Mouse" :price 50} {:__name "Product" :name "Headphones" :price 200}])
  (def expensive (vec (->> (for [p products] p) (sort-by (fn [p] (- (:price p)))) (drop 1) (take 3))))
  (println "--- Top products (excluding most expensive) ---")
  (loop [_tmp0 (seq expensive)]
    (when _tmp0
      (let [item (clojure.core/first _tmp0)]
        (let [r (try
              (println (:name item) "costs $" (:price item))
              :next
              (catch clojure.lang.ExceptionInfo e
                (cond
                  (= (.getMessage e) "continue") :next
                  (= (.getMessage e) "break") :break
                  :else (throw e))
              )
          )]
      (cond
        (= r :break) nil
        :else (recur (next _tmp0))
      )
  )
)
)
)
)

(-main)
