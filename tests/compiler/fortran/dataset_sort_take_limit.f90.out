program main
  implicit none
  type :: Product
    character(:), allocatable :: name
    integer(kind=8) :: price
  end type Product
  integer(kind=8), allocatable :: products(:)
  integer(kind=8) :: expensive
  integer(kind=8) :: item
  integer(kind=8) :: i_item
  allocate(products(0))
  products = (/Product(name='Laptop', price=1500_8), Product(name='Smartphone', price=900_8), Product(name='Tablet', price=600_8), Product(name='Monitor', price=300_8), Product(name='Keyboard', price=100_8), Product(name='Mouse', price=50_8), Product(name='Headphones', price=200_8)/)
  expensive = lambda_0(products)(1_8 + 1:1_8 + 3_8)
  print *, '--- Top products (excluding most expensive) ---'
  do i_item = 0, size(expensive) - 1
    item = expensive(modulo(i_item, size(expensive)) + 1)
    print *, item%name, 'costs $', item%price
  end do
contains
  function lambda_0(vsrc) result(res)
    implicit none
    integer(kind=8), intent(in) :: vsrc(:)
    integer(kind=8), allocatable :: res(:)
    integer(kind=8), allocatable :: tmp(:)
    integer(kind=8), allocatable :: tmpKey(:)
    integer(kind=8) :: p
    integer(kind=8) :: n
    integer(kind=8) :: i
    integer(kind=8) :: j
    integer(kind=8) :: min_idx
    integer(kind=8) :: sort_key
    integer(kind=8) :: swap_key
    integer(kind=8) :: swap_item
    allocate(tmp(size(vsrc)))
    allocate(tmpKey(size(vsrc)))
    n = 0
    do i = 1, size(vsrc)
      p = vsrc(i)
      sort_key = (-p%price)
      n = n + 1
      tmp(n) = p
      tmpKey(n) = sort_key
    end do
    do i = 1, n - 1
      min_idx = i
      do j = i + 1, n
        if (tmpKey(j) < tmpKey(min_idx)) then
          min_idx = j
        end if
      end do
      if (min_idx /= i) then
        swap_key = tmpKey(i)
        tmpKey(i) = tmpKey(min_idx)
        tmpKey(min_idx) = swap_key
        swap_item = tmp(i)
        tmp(i) = tmp(min_idx)
        tmp(min_idx) = swap_item
      end if
    end do
    allocate(res(n))
    res = tmp(:n)
  end function lambda_0

end program main
