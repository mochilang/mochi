program main
  implicit none
  type :: Item
    character(:), allocatable :: name
    integer(kind=8) :: price
  end type Item
  integer(kind=8), allocatable :: items(:)
  integer(kind=8) :: cheap
  integer(kind=8) :: c
  integer(kind=8) :: i_c
  allocate(items(0))
  items = (/Item(name='A', price=100_8), Item(name='B', price=50_8), Item(name='C', price=200_8), Item(name='D', price=80_8)/)
  cheap = lambda_0(items)
  do i_c = 0, size(cheap) - 1
    c = cheap(modulo(i_c, size(cheap)) + 1)
    print *, c%name, c%price
  end do
contains
  function lambda_0(vsrc) result(res)
    implicit none
    integer(kind=8), intent(in) :: vsrc(:)
    integer(kind=8), allocatable :: res(:)
    integer(kind=8), allocatable :: tmp(:)
    integer(kind=8), allocatable :: tmpKey(:)
    integer(kind=8) :: it
    integer(kind=8) :: n
    integer(kind=8) :: i
    integer(kind=8) :: j
    integer(kind=8) :: min_idx
    integer(kind=8) :: sort_key
    integer(kind=8) :: swap_key
    integer(kind=8) :: swap_item
    allocate(tmp(size(vsrc)))
    allocate(tmpKey(size(vsrc)))
    n = 0
    do i = 1, size(vsrc)
      it = vsrc(i)
      if ((it%price < 150_8)) then
        sort_key = it%price
        n = n + 1
        tmp(n) = it
        tmpKey(n) = sort_key
      end if
    end do
    do i = 1, n - 1
      min_idx = i
      do j = i + 1, n
        if (tmpKey(j) < tmpKey(min_idx)) then
          min_idx = j
        end if
      end do
      if (min_idx /= i) then
        swap_key = tmpKey(i)
        tmpKey(i) = tmpKey(min_idx)
        tmpKey(min_idx) = swap_key
        swap_item = tmp(i)
        tmp(i) = tmp(min_idx)
        tmp(min_idx) = swap_item
      end if
    end do
    allocate(res(n))
    res = tmp(:n)
  end function lambda_0
  
end program main
