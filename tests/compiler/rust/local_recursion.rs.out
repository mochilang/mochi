#[derive(Clone, Debug)]
enum Tree {
    Leaf,
    Node {
        left: Box<Tree>,
        value: i64,
        right: Box<Tree>,
    },
}

fn fromList(nums: Vec<i64>) -> Tree {
    fn helper(lo: i64, hi: i64) -> Tree {
        if lo >= hi {
            return Tree::Leaf {  };
        }
        let mut mid = (lo + hi) / 2;
        return Tree::Node { left: Box::new(helper(lo, mid)), value: nums[mid as usize], right: Box::new(helper(mid + 1, hi)) };
    }
    return helper(0, nums.len() as i64);
}

fn inorder(t: Tree) -> Vec<i64> {
    return (|| {
    match t {
        Tree::Leaf => { vec![] },
        Tree::Node { left: l, value: v, right: r } => { { let a = &{ let a = &inorder(l); let b = &vec![v]; let mut res = Vec::with_capacity(a.len() + b.len()); res.extend_from_slice(a); res.extend_from_slice(b); res }; let b = &inorder(r); let mut res = Vec::with_capacity(a.len() + b.len()); res.extend_from_slice(a); res.extend_from_slice(b); res } },
    }
})();
}

fn main() {
    println!("[{}]", inorder(fromList(vec![-10, -3, 0, 5, 9])).iter().map(|v| format!("{}", v)).collect::<Vec<_>>().join(" "));
}
