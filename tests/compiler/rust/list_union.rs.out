fn main() {
    println!("[{}]", _union(&vec![1, 2], &vec![2, 3]).iter().map(|v| format!("{}", v)).collect::<Vec<_>>().join(" "));
}

fn _union<T: Clone + std::cmp::Eq + std::hash::Hash>(a: &[T], b: &[T]) -> Vec<T> {
    use std::collections::HashSet;
    let mut set: HashSet<T> = HashSet::new();
    let mut res = Vec::new();
    for it in a { if set.insert(it.clone()) { res.push(it.clone()); } }
    for it in b { if set.insert(it.clone()) { res.push(it.clone()); } }
    res
}
