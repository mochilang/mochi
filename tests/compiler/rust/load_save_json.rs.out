#[derive(Clone, Debug, Default)]
struct Person {
    name: String,
    age: i64,
}

fn main() {
    let mut people = _load::<Person>("people.json", std::collections::HashMap::from([("format".to_string(), "json")]));
    _save(people, "out.json", std::collections::HashMap::from([("format".to_string(), "json")]));
}

fn _load<T: serde::de::DeserializeOwned>(_path: &str, _opts: std::collections::HashMap<String, String>) -> Vec<T> {
    use std::io::Read;
    let mut data = String::new();
    if _path.is_empty() || _path == "-" {
        std::io::stdin().read_to_string(&mut data).unwrap();
    } else if let Ok(mut f) = std::fs::File::open(_path) {
        f.read_to_string(&mut data).unwrap();
    }
    if let Ok(v) = serde_json::from_str::<Vec<T>>(&data) { return v; }
    if let Ok(v) = serde_json::from_str::<T>(&data) { return vec![v]; }
    Vec::new()
}
fn _save<T: serde::Serialize>(_src: &[T], _path: &str, _opts: std::collections::HashMap<String, String>) {
    if let Ok(text) = serde_json::to_string(_src) {
        if _path.is_empty() || _path == "-" {
            println!("{}", text);
        } else {
            std::fs::write(_path, text).unwrap();
        }
    }
}
