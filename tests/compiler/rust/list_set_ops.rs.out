fn main() {
    let mut a = vec![1, 2, 3];
    let mut b = vec![3, 4];
    println!("[{}]", _union(&a, &b).iter().map(|v| format!("{}", v)).collect::<Vec<_>>().join(" "));
    println!("[{}]", _except(&a, &b).iter().map(|v| format!("{}", v)).collect::<Vec<_>>().join(" "));
    println!("[{}]", _intersect(&a, &b).iter().map(|v| format!("{}", v)).collect::<Vec<_>>().join(" "));
}

fn _except<T: PartialEq + Clone>(a: &[T], b: &[T]) -> Vec<T> {
    let mut res = Vec::new();
    for it in a {
        if !b.contains(it) { res.push(it.clone()); }
    }
    res
}
fn _intersect<T: PartialEq + Clone>(a: &[T], b: &[T]) -> Vec<T> {
    let mut res = Vec::new();
    for it in a {
        if b.contains(it) && !res.contains(it) { res.push(it.clone()); }
    }
    res
}
fn _union<T: PartialEq + Clone>(a: &[T], b: &[T]) -> Vec<T> {
    let mut res = a.to_vec();
    for it in b {
        if !res.contains(it) { res.push(it.clone()); }
    }
    res
}
