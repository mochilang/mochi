#[derive(Clone, Debug, Default)]
struct Customer {
    id: i64,
    name: String,
}

#[derive(Clone, Debug, Default)]
struct Order {
    id: i64,
    customerId: i64,
    total: i64,
}

#[derive(Clone, Debug, Default)]
struct PairInfo {
    orderId: i64,
    orderCustomerId: i64,
    pairedCustomerName: String,
    orderTotal: i64,
}

fn main() {
    let mut customers = vec![Customer { id: 1, name: "Alice".to_string() }, Customer { id: 2, name: "Bob".to_string() }, Customer { id: 3, name: "Charlie".to_string() }];
    let mut orders = vec![Order { id: 100, customerId: 1, total: 250 }, Order { id: 101, customerId: 2, total: 125 }, Order { id: 102, customerId: 1, total: 300 }];
    let mut result = {
    let mut _res = Vec::new();
    for o in orders.clone() {
        for c in customers.clone() {
            _res.push(PairInfo { orderId: o.id, orderCustomerId: o.customerId, pairedCustomerName: c.name, orderTotal: o.total });
        }
    }
    _res
};
    println!("{}", "--- Cross Join: All order-customer pairs ---");
    for entry in result {
        println!("{} {} {} {} {} {} {} {}", "Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName);
    }
}
