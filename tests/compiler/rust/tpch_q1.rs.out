#[derive(Clone, Debug, Default)]
struct LineItem {
    l_quantity: i64,
    l_extendedprice: f64,
    l_discount: f64,
    l_tax: f64,
    l_returnflag: String,
    l_linestatus: String,
    l_shipdate: String,
}

fn main() {
    let mut lineitem = vec![LineItem { l_quantity: 17, l_extendedprice: 1000.0, l_discount: 0.05, l_tax: 0.07, l_returnflag: "N".to_string(), l_linestatus: "O".to_string(), l_shipdate: "1998-08-01".to_string() }, LineItem { l_quantity: 36, l_extendedprice: 2000.0, l_discount: 0.1, l_tax: 0.05, l_returnflag: "N".to_string(), l_linestatus: "O".to_string(), l_shipdate: "1998-09-01".to_string() }, LineItem { l_quantity: 25, l_extendedprice: 1500.0, l_discount: 0.0, l_tax: 0.08, l_returnflag: "R".to_string(), l_linestatus: "F".to_string(), l_shipdate: "1998-09-03".to_string() }];
    let mut result = {
    let mut _res = Vec::new();
    for row in lineitem {
        if !(row.l_shipdate <= "1998-09-02") { continue; }
        _res.push(std::collections::HashMap::from([("returnflag".to_string(), g.key.returnflag), ("linestatus".to_string(), g.key.linestatus), ("sum_qty".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_quantity);
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum } }), ("sum_base_price".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice);
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum } }), ("sum_disc_price".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice * (1 - x.l_discount));
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum } }), ("sum_charge".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax));
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum } }), ("avg_qty".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_quantity);
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum / v.len() as f64 } }), ("avg_price".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_extendedprice);
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum / v.len() as f64 } }), ("avg_disc".to_string(), { let v = &{
    let mut _res = Vec::new();
    for x in g {
        _res.push(x.l_discount);
    }
    _res
}; if v.is_empty() { 0.0 } else { let mut sum = 0.0; for &it in v { sum += Into::<f64>::into(it); } sum / v.len() as f64 } }), ("count_order".to_string(), g.len() as i32)]));
    }
    _res
};
    json(result);
}

