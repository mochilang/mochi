#include <bits/stdc++.h>
using namespace std;

struct Person {
	int id;
	string name;
};

struct Purchase {
	int id;
	int personId;
	int total;
};

int main() {
	auto people = vector<Person>{Person{1, string("Alice")}, Person{2, string("Bob")}, Person{3, string("Charlie")}};
	auto purchases = vector<Purchase>{Purchase{1, 1, 200}, Purchase{2, 1, 50}, Purchase{3, 2, 150}, Purchase{4, 3, 100}, Purchase{5, 2, 250}};
	auto result = ([&]() -> vector<unordered_map<string, int>> {
	vector<pair<unordered_map<string, int>, unordered_map<string, int>>> _tmp;
	for (auto& p : people) {
		for (auto& o : purchases) {
			if (!(p.id == o.personId)) continue;
			if (o.total > 100) {
				_tmp.push_back({-o.total, unordered_map<string, auto>{{string("person"), p.name}, {string("spent"), o.total}}});
			}
		}
	}
	std::sort(_tmp.begin(), _tmp.end(), [](const auto& a, const auto& b){ return a.first < b.first; });
	vector<unordered_map<string, int>> _res;
	_res.reserve(_tmp.size());
	for (auto& _it : _tmp) _res.push_back(_it.second);
	int _skip = 1;
	if (_skip < (int)_res.size()) _res.erase(_res.begin(), _res.begin() + _skip); else _res.clear();
	int _take = 2;
	if (_take < (int)_res.size()) _res.resize(_take);
	return _res;
})();
	for (const unordered_map<string, any>& r : result) {
		std::cout << (r["person"]) << " " << (r["spent"]) << std::endl;
	}
	return 0;
}
