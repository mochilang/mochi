// Generated by Mochi TypeScript compiler

// > type Tree =
type Leaf = {
	__name: "Leaf";
}

type _Node = {
	__name: "Node";
	left: Tree;
	value: number;
	right: Tree;
}

type Tree = Leaf | _Node

// > fun inorder(t: Tree): list<int> {
function inorder(t: Tree) : Array<number> {
	// > return match t {
	return (() => {
	const _t = t;
	if (_t.__name === "Leaf") { return [] }
	if (_t.__name === "Node") { return ((l, v, r) => inorder(l).concat([v]).concat(inorder(r)))(_t.left, _t.value, _t.right) }
	return undefined
})()
}

function main(): void {
	// > print(inorder(Node { left: Leaf {}, value: 1, right: Node { left: Leaf {}, value: 2, right: Leaf {} } }))
	console.log(inorder({__name: "Node", left: {__name: "Leaf"}, value: 1, right: {__name: "Node", left: {__name: "Leaf"}, value: 2, right: {__name: "Leaf"}}}))
}
main()
