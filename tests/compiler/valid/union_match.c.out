/*
type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

fun isLeaf(t: Tree): bool {
  return match t {
    Leaf => true
    _ => false
  }
}

print(isLeaf(Leaf {}))
print(isLeaf(Node { left: Leaf {}, value: 1, right: Leaf {} }))
*/
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct Tree Tree;
typedef struct Leaf Leaf;
typedef struct Node Node;

/* type Tree = */
typedef struct {
} Leaf;
typedef struct {
  Tree left;
  int value;
  Tree right;
} Node;
typedef struct {
  int tag;
  union {
    Leaf Leaf;
    Node Node;
  } value;
} Tree;

/* fun isLeaf(t: Tree): bool { */
int isLeaf(Tree t) {
  /* return match t { */
  return (t == Leaf ? 1 : 0);
}

int main() {
  /* type Tree = */
  /* print(isLeaf(Leaf {})) */
  printf("%d\n", isLeaf((Leaf){}));
  /* print(isLeaf(Node { left: Leaf {}, value: 1, right: Leaf {} })) */
  printf("%d\n",
         isLeaf((Node){.left = (Leaf){}, .value = 1, .right = (Leaf){}}));
  return 0;
}
