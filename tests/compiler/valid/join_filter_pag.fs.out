open System

type Person =
    {
        id: int;
        name: string
    }

type Purchase =
    {
        id: int;
        personId: int;
        total: int
    }

type Person =
    {
        id: int;
        name: string
    }
type Purchase =
    {
        id: int;
        personId: int;
        total: int
    }
let people = [|{ id = 1; name = "Alice" }; { id = 2; name = "Bob" }; { id = 3; name = "Charlie" }|]
let purchases = [|{ id = 1; personId = 1; total = 200 }; { id = 2; personId = 1; total = 50 }; { id = 3; personId = 2; total = 150 }; { id = 4; personId = 3; total = 100 }; { id = 5; personId = 2; total = 250 }|]
let result = [| for p in people do for o in purchases do if (p.id = o.personId) then if (o.total > 100) then yield ((-o.total), Map.ofList [(person, p.name); (spent, o.total)]) |] |> Array.sortBy fst |> Array.map snd |> Array.skip 1 |> Array.take 2
for r in result do
    ignore (printfn "%A" (r.person, r.spent))
