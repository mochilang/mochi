#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
static void _print_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(" ");
    printf("%d", v.data[i]);
  }
  printf("]");
}
typedef struct Tree Tree;
typedef struct Leaf Leaf;
typedef struct Node Node;

Tree helper(int lo, int hi) {
  if ((lo >= hi)) {
    return (Leaf){};
  }
  int mid = (((lo + hi)) / 2);
  return (Node){.left = helper(lo, mid),
                .value = nums.data[mid],
                .right = helper((mid + 1), hi)};
}

typedef struct {
} Leaf;
typedef struct {
  Tree left;
  int value;
  Tree right;
} Node;
typedef struct {
  int tag;
  union {
    Leaf Leaf;
    Node Node;
  } value;
} Tree;

Tree fromList(list_int nums) { return helper(0, nums.len); }

list_int inorder(Tree t) {
  list_int _t1 = list_int_create(1);
  _t1.data[0] = v;
  return (t == Leaf
              ? _t2
              : (t == Node(l, v, r) ? ((inorder(l) + _t1) + inorder(r)) : 0));
}

int main() {
  list_int _t3 = list_int_create(5);
  _t3.data[0] = (-10);
  _t3.data[1] = (-3);
  _t3.data[2] = 0;
  _t3.data[3] = 5;
  _t3.data[4] = 9;
  _print_list_int(inorder(fromList(_t3)));
  printf("\n");
  return 0;
}
