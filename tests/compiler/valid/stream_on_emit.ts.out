// Generated by Mochi TypeScript compiler

async function main(): Promise<void> {
	type Sensor = {
		id: string;
		temperature: number;
	}
	
	const sensorStream = new Stream("Sensor")
	function _handler_0(ev: Sensor): void {
		const s = ev
		console.log(s.id, s.temperature)
	}
	sensorStream.register(_handler_0)
	sensorStream.append({id: "sensor-1", temperature: 22.5})
}
class Stream {
  name: string;
  handlers: Array<(data: unknown) => unknown | Promise<unknown>> = [];
  constructor(name: string) {
    this.name = name;
  }
  append(data: unknown): Promise<unknown> {
    const tasks: Promise<unknown>[] = [];
    for (const h of [...this.handlers]) {
      tasks.push(Promise.resolve(h(data)));
    }
    const p = Promise.all(tasks).then(() => data);
    _pending.push(p);
    return p;
  }
  register(handler: (data: unknown) => unknown | Promise<unknown>): void {
    this.handlers.push(handler);
  }
}

const _pending: Promise<unknown>[] = [];
async function _waitAll(): Promise<void> {
  await Promise.all(_pending);
}

await main()
await _waitAll()
