// Generated by Mochi TypeScript compiler

function main(): void {
  let x: number = 2
  ;(globalThis as any).x = x
  let label: string = (() => {
	const _t = x;
	if (_equal(_t, 1)) { return "one" }
	if (_equal(_t, 2)) { return "two" }
	if (_equal(_t, 3)) { return "three" }
	return "unknown"
})()
  ;(globalThis as any).label = label
  console.log(label)
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()
