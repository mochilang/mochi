// Original Mochi source:
// 1: type Tree =
// 2:   Leaf
// 3:   | Node(left: Tree, value: int, right: Tree)
// 4: 
// 5: fun isLeaf(t: Tree): bool {
// 6:   return match t {
// 7:     Leaf => true
// 8:     _ => false
// 9:   }
// 10: }
// 11: 
// 12: print(isLeaf(Leaf {}))
// 13: print(isLeaf(Node { left: Leaf {}, value: 1, right: Leaf {} }))
// 14: 

#include <bits/stdc++.h>
using namespace std;

// 1: type Tree =
struct Leaf {
};
struct Node {
    Tree left;
    int value;
    Tree right;
};
using Tree = std::variant<Leaf, Node>;

// 5: fun isLeaf(t: Tree): bool {
bool isLeaf(Tree t){
    // 6:   return match t {
    return ([&]() { auto _t0 = t; if (std::holds_alternative<Leaf>(_t0)) return true; return false; })();
}

int main() {
    // 1: type Tree =
    // 12: print(isLeaf(Leaf {}))
    std::cout << (isLeaf(Leaf{})) << std::endl;
    // 13: print(isLeaf(Node { left: Leaf {}, value: 1, right: Leaf {} }))
    std::cout << (isLeaf(Node{Leaf{}, 1, Leaf{}})) << std::endl;
    return 0;
}
