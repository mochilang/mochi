#include <stdio.h>
#include <stdlib.h>

typedef struct { int len; int *data; } list_int;
static list_int list_int_create(int len) {
    list_int l;
    l.len = len;
    l.data = (int*)malloc(sizeof(int)*len);
    return l;
}
typedef struct Customer Customer;
typedef struct Order Order;
typedef struct PairInfo PairInfo;

typedef struct {
	int id;
	char* name;
}Customer;

typedef struct {
	int id;
	int customerId;
	int total;
}Order;

typedef struct {
	int orderId;
	int orderCustomerId;
	char* pairedCustomerName;
	int orderTotal;
}PairInfo;

int main() {
	list_int _t1 = list_int_create(3);
	_t1.data[0] = (Customer){.id = 1, .name = "Alice"};
	_t1.data[1] = (Customer){.id = 2, .name = "Bob"};
	_t1.data[2] = (Customer){.id = 3, .name = "Charlie"};
	int customers = _t1;
	list_int _t2 = list_int_create(3);
	_t2.data[0] = (Order){.id = 100, .customerId = 1, .total = 250};
	_t2.data[1] = (Order){.id = 101, .customerId = 2, .total = 125};
	_t2.data[2] = (Order){.id = 102, .customerId = 1, .total = 300};
	int orders = _t2;
	int result = 0;
	printf("%s\n", "--- Cross Join: All order-customer pairs ---");
	for (int _t3 = 0; _t3 < result.len; _t3++) {
		int entry = result.data[_t3];
		printf("%s ", "Order");
		printf("%d ", entry.orderId);
		printf("%s ", "(customerId:");
		printf("%d ", entry.orderCustomerId);
		printf("%s ", ", total: $");
		printf("%d ", entry.orderTotal);
		printf("%s ", ") paired with");
		printf("%d\n", entry.pairedCustomerName);
	}
	return 0;
}
