/*
// cross_join.mochi
type Customer {
  id: int
  name: string
}

type Order {
  id: int
  customerId: int
  total: int
}

type PairInfo {
  orderId: int
  orderCustomerId: int
  pairedCustomerName: string
  orderTotal: int
}

let customers = [
  Customer { id: 1, name: "Alice" },
  Customer { id: 2, name: "Bob" },
  Customer { id: 3, name: "Charlie" }
]
let orders = [
  Order { id: 100, customerId: 1, total: 250 },
  Order { id: 101, customerId: 2, total: 125 },
  Order { id: 102, customerId: 1, total: 300 }
]
let result = from o in orders
             from c in customers
             select PairInfo {
               orderId: o.id,
               orderCustomerId: o.customerId,
               pairedCustomerName: c.name,
               orderTotal: o.total
             }
print("--- Cross Join: All order-customer pairs ---")
for entry in result {
  print("Order", entry.orderId,
        "(customerId:", entry.orderCustomerId,
        ", total: $", entry.orderTotal,
        ") paired with", entry.pairedCustomerName)
}
*/
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct Customer Customer;
typedef struct Order Order;
typedef struct PairInfo PairInfo;

/* type Customer { */
typedef struct {
  int id;
  char *name;
} Customer;

/* type Order { */
typedef struct {
  int id;
  int customerId;
  int total;
} Order;

/* type PairInfo { */
typedef struct {
  int orderId;
  int orderCustomerId;
  char *pairedCustomerName;
  int orderTotal;
} PairInfo;

int main() {
  /* type Customer { */
  /* type Order { */
  /* type PairInfo { */
  /* let customers = [ */
  list_int _t1 = list_int_create(3);
  _t1.data[0] = (Customer){.id = 1, .name = "Alice"};
  _t1.data[1] = (Customer){.id = 2, .name = "Bob"};
  _t1.data[2] = (Customer){.id = 3, .name = "Charlie"};
  int customers = _t1;
  /* let orders = [ */
  list_int _t2 = list_int_create(3);
  _t2.data[0] = (Order){.id = 100, .customerId = 1, .total = 250};
  _t2.data[1] = (Order){.id = 101, .customerId = 2, .total = 125};
  _t2.data[2] = (Order){.id = 102, .customerId = 1, .total = 300};
  int orders = _t2;
  /* let result = from o in orders */
  int result = 0;
  /* print("--- Cross Join: All order-customer pairs ---") */
  printf("%s\n", "--- Cross Join: All order-customer pairs ---");
  /* for entry in result { */
  for (int _t3 = 0; _t3 < result.len; _t3++) {
    int entry = result.data[_t3];
    /* print("Order", entry.orderId, */
    printf("%s ", "Order");
    printf("%d ", entry.orderId);
    printf("%s ", "(customerId:");
    printf("%d ", entry.orderCustomerId);
    printf("%s ", ", total: $");
    printf("%d ", entry.orderTotal);
    printf("%s ", ") paired with");
    printf("%d\n", entry.pairedCustomerName);
  }
  return 0;
}
