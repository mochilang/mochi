// Generated by Mochi TypeScript compiler

type Person = {
  id: number;
  name: string;
};

type Purchase = {
  id: number;
  personId: number;
  total: number;
};

function main(): void {
  let people: Array<Person> = [
    {
      id: 1,
      name: "Alice",
    },
    {
      id: 2,
      name: "Bob",
    },
    {
      id: 3,
      name: "Charlie",
    },
  ];
  (globalThis as any).people = people;
  let purchases: Array<Purchase> = [
    {
      id: 1,
      personId: 1,
      total: 200,
    },
    {
      id: 2,
      personId: 1,
      total: 50,
    },
    {
      id: 3,
      personId: 2,
      total: 150,
    },
    {
      id: 4,
      personId: 3,
      total: 100,
    },
    {
      id: 5,
      personId: 2,
      total: 250,
    },
  ];
  (globalThis as any).purchases = purchases;
  let result: Array<Record<string, any>> = (() => {
    const _src = people;
    return _query(_src, [
      { items: purchases, on: (p, o) => (p.id == o.personId) },
    ], {
      select: (p, o) => ({
        "person": p.name,
        "spent": o.total,
      }),
      where: (p, o) => (o.total > 100),
      sortKey: (p, o) => (-o.total),
      skip: 1,
      take: 2,
    });
  })();
  (globalThis as any).result = result;
  for (const r of result) {
    console.log(r.person, r.spent);
  }
}
function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, undefined]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, undefined]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
