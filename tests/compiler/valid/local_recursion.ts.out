// Generated by Mochi TypeScript compiler

// > type Tree =
type Leaf = {
	__name: "Leaf";
}

type _Node = {
	__name: "Node";
	left: Tree;
	value: number;
	right: Tree;
}

type Tree = Leaf | _Node

// > fun fromList(nums: list<int>): Tree {
function fromList(nums: Array<number>) : Tree {
	// > fun helper(lo: int, hi: int): Tree {
	// > fun helper(lo: int, hi: int): Tree {
	function helper(lo: number, hi: number) : Tree {
		// > if lo >= hi { return Leaf {} }
		if ((lo >= hi)) {
			// > if lo >= hi { return Leaf {} }
			return {__name: "Leaf"}
		}
		// > let mid = (lo + hi) / 2
		let mid: number = Math.trunc(((lo + hi)) / 2)
		;(globalThis as any).mid = mid
		// > return Node {
		return {__name: "Node", left: helper(lo, mid), value: nums[mid], right: helper((mid + 1), hi)}
	}
	// > return helper(0, len(nums))
	return helper(0, nums.length)
}

// > fun inorder(t: Tree): list<int> {
function inorder(t: Tree) : Array<number> {
	// > return match t {
	return (() => {
	const _t = t;
	if (_t.__name === "Leaf") { return [] }
	if (_t.__name === "Node") { return ((l, v, r) => inorder(l).concat([v]).concat(inorder(r)))(_t.left, _t.value, _t.right) }
	return undefined
})()
}

function main(): void {
	// > print(inorder(fromList([-10, -3, 0, 5, 9])))
	console.log(inorder(fromList([
		(-10),
		(-3),
		0,
		5,
		9
	])))
}
main()
