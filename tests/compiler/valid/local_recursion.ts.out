// Generated by Mochi TypeScript compiler

type Leaf = {
	__name: "Leaf";
}

type _Node = {
	__name: "Node";
	left: Tree;
	value: number;
	right: Tree;
}

type Tree = Leaf | _Node

function fromList(nums: Array<number>) : Tree {
	function helper(lo: number, hi: number) : Tree {
		if ((lo >= hi)) {
			return {__name: "Leaf"}
		}
		let mid: number = Math.trunc(((lo + hi)) / 2)
		return {__name: "Node", left: helper(lo, mid), value: nums[mid], right: helper((mid + 1), hi)}
	}
	return helper(0, nums.length)
}

function inorder(t: Tree) : Array<number> {
	return (() => {
	const _t = t;
	if (_t.__name === "Leaf") { return [] }
	if (_t.__name === "Node") { return ((l, v, r) => inorder(l).concat([v]).concat(inorder(r)))(_t.left, _t.value, _t.right) }
	return undefined
})()
}

function main(): void {
	console.log(inorder(fromList([(-10), (-3), 0, 5, 9])))
}
main()
