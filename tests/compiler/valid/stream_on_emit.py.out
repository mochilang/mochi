# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

async def main():
	@dataclasses.dataclass
	class Sensor:
		id: str
		temperature: float
	
	sensorStream = Stream("Sensor")
	def _handler_0(ev):
		s = ev
		print(s.id, s.temperature)
	sensorStream.register(_handler_0)
	sensorStream.append(Sensor(id="sensor-1", temperature=22.500000))

class Stream:
    def __init__(self, name):
        self.name = name
        self.handlers = []
    def append(self, data):
        tasks = []
        for h in list(self.handlers):
            r = h(data)
            if asyncio.iscoroutine(r):
                tasks.append(asyncio.create_task(r))
        async def _wait():
            if tasks:
                await asyncio.gather(*tasks)
            return data
        p = asyncio.create_task(_wait())
        _pending.append(p)
        return p
    def register(self, handler):
        self.handlers.append(handler)
import asyncio
_pending = []
async def _wait_all():
    await asyncio.gather(*_pending)
async def _run():
	await main()
	await _wait_all()

if __name__ == "__main__":
	import asyncio
	asyncio.run(_run())
