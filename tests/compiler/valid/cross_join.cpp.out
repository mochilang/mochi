// Original Mochi source:
// 1: // cross_join.mochi
// 2: type Customer {
// 3:   id: int
// 4:   name: string
// 5: }
// 6: 
// 7: type Order {
// 8:   id: int
// 9:   customerId: int
// 10:   total: int
// 11: }
// 12: 
// 13: type PairInfo {
// 14:   orderId: int
// 15:   orderCustomerId: int
// 16:   pairedCustomerName: string
// 17:   orderTotal: int
// 18: }
// 19: 
// 20: let customers = [
// 21:   Customer { id: 1, name: "Alice" },
// 22:   Customer { id: 2, name: "Bob" },
// 23:   Customer { id: 3, name: "Charlie" }
// 24: ]
// 25: let orders = [
// 26:   Order { id: 100, customerId: 1, total: 250 },
// 27:   Order { id: 101, customerId: 2, total: 125 },
// 28:   Order { id: 102, customerId: 1, total: 300 }
// 29: ]
// 30: let result = from o in orders
// 31:              from c in customers
// 32:              select PairInfo {
// 33:                orderId: o.id,
// 34:                orderCustomerId: o.customerId,
// 35:                pairedCustomerName: c.name,
// 36:                orderTotal: o.total
// 37:              }
// 38: print("--- Cross Join: All order-customer pairs ---")
// 39: for entry in result {
// 40:   print("Order", entry.orderId,
// 41:         "(customerId:", entry.orderCustomerId,
// 42:         ", total: $", entry.orderTotal,
// 43:         ") paired with", entry.pairedCustomerName)
// 44: }
// 45: 

#include <bits/stdc++.h>
using namespace std;

// 2: type Customer {
struct Customer {
    int id;
    string name;
};

// 7: type Order {
struct Order {
    int id;
    int customerId;
    int total;
};

// 13: type PairInfo {
struct PairInfo {
    int orderId;
    int orderCustomerId;
    string pairedCustomerName;
    int orderTotal;
};

int main() {
    // 2: type Customer {
    // 7: type Order {
    // 13: type PairInfo {
    // 20: let customers = [
    auto customers = vector<Customer>{Customer{1, string("Alice")}, Customer{2, string("Bob")}, Customer{3, string("Charlie")}};
    // 25: let orders = [
    auto orders = vector<Order>{Order{100, 1, 250}, Order{101, 2, 125}, Order{102, 1, 300}};
    // 30: let result = from o in orders
    auto result = ([&]() -> vector<PairInfo> {
    vector<PairInfo> _res;
    for (auto& o : orders) {
        for (auto& c : customers) {
            _res.push_back(PairInfo{o.id, o.customerId, c.name, o.total});
        }
    }
    return _res;
})();
    // 38: print("--- Cross Join: All order-customer pairs ---")
    std::cout << (string("--- Cross Join: All order-customer pairs ---")) << std::endl;
    // 39: for entry in result {
    for (const PairInfo& entry : result) {
        // 40:   print("Order", entry.orderId,
        std::cout << (string("Order")) << " " << (entry.orderId) << " " << (string("(customerId:")) << " " << (entry.orderCustomerId) << " " << (string(", total: $")) << " " << (entry.orderTotal) << " " << (string(") paired with")) << " " << (entry.pairedCustomerName) << std::endl;
    }
    return 0;
}
