// Generated by Mochi TypeScript compiler

function characterReplacement(s, k) {
	let letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
	let n = _len(s)
	let best = 0
	for (let i = 0; i < n; i++) {
		for (let j = (i + 1); j < (n + 1); j++) {
			let length = (j - i)
			if ((length <= best)) {
				continue
			}
			let sub = _slice(s, i, j)
			for (const ch of letters) {
				let diff = 0
				for (let idx = 0; idx < _len(sub); idx++) {
					let c = _index(sub, idx)
					if ((c != ch)) {
						diff = (diff + 1)
						if ((diff > k)) {
							break
						}
					}
				}
				if ((diff <= k)) {
					best = length
					break
				}
			}
		}
	}
	return best
}

async function main(): Promise<void> {
	console.log(characterReplacement("ABAB", 2))
	console.log(characterReplacement("AABABBA", 1))
}
await main()
await _waitAll()

function _index(v: any, k: any): any {
  if (Array.isArray(v) || typeof v === "string") {
    const l = (v as any).length;
    if (typeof k === "number" && k < 0) k = l + k;
  }
  return (v as any)[k];
}

function _len(v: any): number {
  if (Array.isArray(v) || typeof v === "string") return (v as any).length;
  if (v && typeof v === "object") return Object.keys(v).length;
  return 0;
}

function _slice(v: any, start: number, end: number): any {
  if (typeof v === "string" || Array.isArray(v)) {
    const l = (v as any).length;
    if (start < 0) start = l + start;
    if (end < 0) end = l + end;
    return (v as any).slice(start, end);
  }
  throw new Error("invalid slice target");
}

const _pending: Promise<any>[] = [];
async function _waitAll(): Promise<void> {
  await Promise.all(_pending);
}

