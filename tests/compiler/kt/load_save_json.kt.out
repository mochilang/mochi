data class Person(val name: String, val age: Int, val email: String)

fun main() {
        val people = run {
        val _rows = _load(null, mutableMapOf("format" to "json"))
        val _out = mutableListOf<Person>()
        for (r in _rows) {
                _out.add(_cast<Person>(r))
        }
        _out
}
        val adults = run {
                var res = people
                res = res.filter { p -> (p.age >= 18) }
                res = res.map { p -> p }
                res
        }
        _save(adults, null, mutableMapOf("format" to "json"))
}

import kotlin.reflect.full.primaryConstructor

inline fun <reified T> _cast(v: Any?): T {
    return when (T::class) {
        Int::class -> when (v) { is Number -> v.toInt(); is String -> v.toInt(); else -> 0 } as T
        Double::class -> when (v) { is Number -> v.toDouble(); is String -> v.toDouble(); else -> 0.0 } as T
        Boolean::class -> when (v) { is Boolean -> v; is String -> v == "true"; else -> false } as T
        String::class -> v.toString() as T
        else -> {
            if (v is Map<*, *>) {
                val ctor = T::class.primaryConstructor
                if (ctor != null) {
                    val args = ctor.parameters.associateWith { p ->
                        val value = v[p.name]
                        when (p.type.classifier) {
                            Int::class -> when (value) { is Number -> value.toInt(); is String -> value.toInt(); else -> 0 }
                            Double::class -> when (value) { is Number -> value.toDouble(); is String -> value.toDouble(); else -> 0.0 }
                            Boolean::class -> when (value) { is Boolean -> value; is String -> value == "true"; else -> false }
                            String::class -> value?.toString()
                            else -> value
                        }
                    }
                    return ctor.callBy(args)
                }
            }
            v as T
        }
    }
}
fun _load(path: String?, opts: Map<String, Any>?): List<Map<String, Any>> {
    var format = opts?.get("format") as? String ?: "csv"
    var header = opts?.get("header") as? Boolean ?: true
    var delim = (opts?.get("delimiter") as? String)?.firstOrNull() ?: ','
    if (format == "tsv") delim = '\t'
    val text = if (path == null || path == "-" || path == "") generateSequence(::readLine).joinToString("\n") else java.io.File(path).readText()
    if (format == "jsonl") {
        val eng = javax.script.ScriptEngineManager().getEngineByName("javascript")
        val out = mutableListOf<Map<String, Any>>()
        for (line in text.trim().split(Regex("\\r?\\n"))) {
            if (line.isBlank()) continue
            val obj = eng.eval("Java.asJSONCompatible($line)") as java.util.Map<*, *>
            out.add(obj as Map<String, Any>)
        }
        return out
    }
    if (format == "json") {
        val eng = javax.script.ScriptEngineManager().getEngineByName("javascript")
        val obj = eng.eval("Java.asJSONCompatible($text)")
        when (obj) {
            is java.util.Map<*, *> -> return listOf(obj as Map<String, Any>)
            is java.util.List<*> -> return obj.map { it as Map<String, Any> }
        }
        return emptyList()
    }
    if (format == "yaml") {
        val rows = mutableListOf<Map<String, Any>>()
        var current = mutableMapOf<String, Any>()
        fun finish() {
            if (current.isNotEmpty()) { rows.add(current); current = mutableMapOf() }
        }
        for (line in text.trim().split(Regex("\\r?\\n"))) {
            val l = line.trim()
            if (l.startsWith("- ")) {
                finish()
                val idx = l.indexOf(':', 2)
                if (idx > 0) {
                    val k = l.substring(2, idx).trim()
                    val v = l.substring(idx + 1).trim()
                    current[k] = v.toIntOrNull() ?: v.trim('"')
                }
            } else if (l.contains(':')) {
                val idx = l.indexOf(':')
                val k = l.substring(0, idx).trim()
                val v = l.substring(idx + 1).trim()
                current[k] = v.toIntOrNull() ?: v.trim('"')
            }
        }
        finish()
        return rows
    }
    val lines = text.trim().split(Regex("\\r?\\n")).filter { it.isNotEmpty() }
    if (lines.isEmpty()) return emptyList()
    val headers = if (header) lines[0].split(delim) else List(lines[0].split(delim).size) { "c$it" }
    val start = if (header) 1 else 0
    val out = mutableListOf<Map<String, Any>>()
    for (i in start until lines.size) {
        val parts = lines[i].split(delim)
        val row = mutableMapOf<String, Any>()
        for (j in headers.indices) {
            row[headers[j]] = parts.getOrElse(j) { "" }
        }
        out.add(row)
    }
    return out
}
fun _save(src: Any?, path: String?, opts: Map<String, Any>?): Unit {
    val rows = src as? List<Map<String, Any>> ?: return
    var format = opts?.get("format") as? String ?: "csv"
    var header = opts?.get("header") as? Boolean ?: false
    var delim = (opts?.get("delimiter") as? String)?.firstOrNull() ?: ','
    if (format == "tsv") delim = '\t'
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e -> "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value) }
        else -> \"""${x.toString().replace("\"", "\\\"")}\"""
    }
    val text = when (format) {
        "jsonl" -> rows.joinToString("") { encode(it) + "\n" }
        "json" -> if (rows.size == 1) encode(rows[0]) + "\n" else rows.joinToString(prefix = "[", postfix = "]\n") { encode(it) }
        "yaml" -> {
            val sb = StringBuilder()
            for (row in rows) {
                val keys = row.keys.sorted()
                sb.append("- ")
                var first = true
                for (k in keys) {
                    val v = encode(row[k])
                    if (first) {
                        sb.append("$k: $v\n")
                        first = false
                    } else {
                        sb.append("  $k: $v\n")
                    }
                }
            }
            sb.toString()
        }
        else -> {
            if (format != "csv") return
            val headers = if (rows.isNotEmpty()) rows[0].keys.sorted() else emptyList()
            val lines = mutableListOf<String>()
            if (header) lines.add(headers.joinToString(delim.toString()))
            for (row in rows) {
                lines.add(headers.joinToString(delim.toString()) { row[it].toString() })
            }
            lines.joinToString("\n") + "\n"
        }
    }
    if (path == null || path == "-" || path == "") print(text) else java.io.File(path).writeText(text)
}

