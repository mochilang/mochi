function __add(a, b)
    if type(a) == "table" and type(b) == "table" then
        local out = {}
        for i = 1, #a do
            out[#out + 1] = a[i]
        end
        for i = 1, #b do
            out[#out + 1] = b[i]
        end
        return out
    elseif type(a) == "string" or type(b) == "string" then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __div(a, b)
    if math.type and math.type(a) == "integer" and math.type(b) == "integer" then
        return a // b
    end
    return a / b
end
function __eq(a, b)
    if type(a) ~= type(b) then
        return false
    end
    if type(a) == "number" then
        return math.abs(a - b) < 1e-9
    end
    if type(a) ~= "table" then
        return a == b
    end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then
            return false
        end
        for i = 1, #a do
            if not __eq(a[i], b[i]) then
                return false
            end
        end
        return true
    end
    for k, v in pairs(a) do
        if not __eq(v, b[k]) then
            return false
        end
    end
    for k, _ in pairs(b) do
        if a[k] == nil then
            return false
        end
    end
    return true
end
function __index(obj, i)
    if type(obj) == "string" then
        return __indexString(obj, i)
    elseif type(obj) == "table" then
        if obj[1] ~= nil or #obj > 0 then
            return obj[(i) + 1]
        else
            return obj[i]
        end
    else
        error("cannot index")
    end
end
function __indexString(s, i)
    local len = #s
    if i < 0 then
        i = len + i + 1
    else
        i = i + 1
    end
    if i < 1 or i > len then
        error("index out of range")
    end
    return string.sub(s, i, i)
end
function __print(...)
    local args = {...}
    for i, a in ipairs(args) do
        if i > 1 then
            io.write(" ")
        end
        io.write(tostring(a))
    end
    io.write("\n")
end
function searchMatrix(matrix, target)
    local m = #matrix
    if __eq(m, 0) then
        return false
    end
    local n = #__index(matrix, 0)
    local left = 0
    local right = ((m * n) - 1)
    while (left <= right) do
        local mid = __add(left, __div((right - left), 2))
        local row = __div(mid, n)
        local col = (mid % n)
        local value = __index(__index(matrix, row), col)
        if __eq(value, target) then
            return true
        elseif (value < target) then
            left = __add(mid, 1)
        else
            right = (mid - 1)
        end
        ::__continue0::
    end
    return false
end

__print(searchMatrix({{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}}, 3))
__print(searchMatrix({{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}}, 13))
