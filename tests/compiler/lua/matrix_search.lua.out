function __div(a, b)
	if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
		return a // b
	end
	return a / b
end

function __index(obj, i)
	if type(obj) == 'string' then
		return __indexString(obj, i)
	elseif type(obj) == 'table' then
		return obj[(i)+1]
	else
		error('cannot index')
	end
end

function __indexString(s, i)
	local len = #s
	if i < 0 then
		i = len + i + 1
	else
		i = i + 1
	end
	if i < 1 or i > len then error('index out of range') end
	return string.sub(s, i, i)
end

function searchMatrix(matrix, target)
	local m = #matrix
	if (m == 0) then
		return false
	end
	local n = #__index(matrix, 0)
	local left = 0
	local right = ((m * n) - 1)
	while (left <= right) do
		local mid = (left + __div(((right - left)), 2))
		local row = __div(mid, n)
		local col = (mid % n)
		local value = __index(__index(matrix, row), col)
		if (value == target) then
			return true
		elseif (value < target) then
			left = (mid + 1)
		else
			right = (mid - 1)
		end
		::__continue0::
	end
	return false
end

print(searchMatrix({{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}}, 3))
print(searchMatrix({{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}}, 13))
