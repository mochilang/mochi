function __except(a, b)
    local res = {}
    if a then
        for _, v in ipairs(a) do
            local found = false
            if b then
                for _, w in ipairs(b) do
                    if __eq(v, w) then found = true break end
                end
            end
            if not found then res[#res+1] = v end
        end
    end
    return res
end
function __intersect(a, b)
    local res = {}
    if a and b then
        for _, v in ipairs(a) do
            for _, w in ipairs(b) do
                if __eq(v, w) then
                    local dup = false
                    for _, r in ipairs(res) do if __eq(r, v) then dup = true break end end
                    if not dup then res[#res+1] = v end
                    break
                end
            end
        end
    end
    return res
end
function __print(...)
    local args = {...}
    for i, a in ipairs(args) do
        if i > 1 then io.write(' ') end
        io.write(tostring(a))
    end
    io.write('\n')
end
function __union(a, b)
    local res = {}
    local function add(lst)
        if lst then
            for _, v in ipairs(lst) do
                local dup = false
                for _, w in ipairs(res) do
                    if __eq(v, w) then dup = true break end
                end
                if not dup then res[#res+1] = v end
            end
        end
    end
    add(a); add(b);
    return res
end
local a = {1, 2, 3}
local b = {3, 4}
__print(__union(a, b))
__print(__union_all(a, b))
__print(__except(a, b))
__print(__intersect(a, b))
__print(__union({1, 2}, {2, 3}))
