function __print(...)
	local args = {...}
	for i, a in ipairs(args) do
		if i > 1 then io.write(' ') end
		io.write(tostring(a))
	end
	io.write('\n')
end

function __contains(container, item)
	if type(container) == 'table' then
		if container.__map then
			return container[item] ~= nil
		elseif container[1] ~= nil or #container > 0 then
			for _, v in ipairs(container) do
				if v == item then return true end
			end
			return false
		else
			return container[item] ~= nil
		end
	elseif type(container) == 'string' then
		return string.find(container, item, 1, true) ~= nil
	else
		return false
	end
end

local m = {__map=true}
m[1] = 10
m[2] = 20
if __contains(m, 1) then
	__print(m[1])
end
__print(m[2])
