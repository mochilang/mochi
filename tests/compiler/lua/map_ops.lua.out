function __print(...)
	local args = {...}
	for i, a in ipairs(args) do
		if i > 1 then io.write(' ') end
		io.write(tostring(a))
	end
	io.write('\n')
end

function __contains(container, item)
	if type(container) == 'table' then
		if container[1] ~= nil or #container > 0 then
			for _, v in ipairs(container) do
				if v == item then return true end
			end
			return false
		else
			return container[item] ~= nil
		end
	elseif type(container) == 'string' then
		return string.find(container, item, 1, true) ~= nil
	else
		return false
	end
end

function __index(obj, i)
	if type(obj) == 'string' then
		return __indexString(obj, i)
	elseif type(obj) == 'table' then
		if obj[1] ~= nil or #obj > 0 then
			return obj[(i)+1]
		else
			return obj[i]
		end
	else
		error('cannot index')
	end
end

function __indexString(s, i)
	local len = #s
	if i < 0 then
		i = len + i + 1
	else
		i = i + 1
	end
	if i < 1 or i > len then error('index out of range') end
	return string.sub(s, i, i)
end

local m = {}
m[(1)+1] = 10
m[(2)+1] = 20
if __contains(m, 1) then
	__print(__index(m, 1))
end
__print(__index(m, 2))
