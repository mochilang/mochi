function __print(...)
	local args = {...}
	for i, a in ipairs(args) do
		if i > 1 then io.write(' ') end
		io.write(tostring(a))
	end
	io.write('\n')
end

function __count(v)
	if type(v) == 'table' then
		if v.items ~= nil then return #v.items end
		if v[1] ~= nil or #v > 0 then return #v end
		local n = 0
		for _ in pairs(v) do n = n + 1 end
		return n
	elseif type(v) == 'string' then
		return #v
	else
		error('count() expects list or group')
	end
end

function __load(path, opts)
	local fmt = 'json'
	if opts and opts['format'] then fmt = opts['format'] end
	local f
	if not path or path == '' or path == '-' then
		f = io.stdin
	else
		local err; f, err = io.open(path, 'r'); if not f then error(err) end
	end
	local data = f:read('*a')
	if f ~= io.stdin then f:close() end
	if fmt ~= 'json' then error('unsupported format: '..fmt) end
	local ok, json = pcall(require, 'json')
	if not ok then error('json library not found') end
	local res = json.decode(data)
	if type(res) ~= 'table' then return {} end
	if res[1] then return res end
	return {res}
end

local items = __load(nil, nil)
__print(__count(items))
