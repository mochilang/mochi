function __iter(obj)
	if type(obj) == 'table' then
		if obj[1] ~= nil or #obj > 0 then
			local i = 0
			local n = #obj
			return function()
				i = i + 1
				if i <= n then return i, obj[i] end
			end
		else
			return pairs(obj)
		end
	elseif type(obj) == 'string' then
		local i = 0
		local n = #obj
		return function()
			i = i + 1
			if i <= n then return i, string.sub(obj, i, i) end
		end
	else
		return function() return nil end
	end
end

local products = {{name="Laptop", price=1500}, {name="Smartphone", price=900}, {name="Tablet", price=600}, {name="Monitor", price=300}, {name="Keyboard", price=100}, {name="Mouse", price=50}, {name="Headphones", price=200}}
local expensive = (function()
	local items = {}
	for _, p in ipairs(products) do
		table.insert(items, p)
	end
	table.sort(items, function(a, b)
		local p = a
		local _ka = -p.price
		p = b
		local _kb = -p.price
		return (_ka) < (_kb)
	end)
	if 1 < #items then
		items = {table.unpack(items, (1)+1)}
	else
		items = {}
	end
	if 3 < #items then
		items = {table.unpack(items, 1, 3)}
	end
	local _res = {}
	for _, p in ipairs(items) do
		table.insert(_res, p)
	end
	return _res
end)()
print("--- Top products (excluding most expensive) ---")
for _, item in __iter(expensive) do
	print(item.name, "costs $", item.price)
	::__continue0::
end
