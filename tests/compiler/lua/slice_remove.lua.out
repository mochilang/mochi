function __print(...)
	local args = {...}
	for i, a in ipairs(args) do
		if i > 1 then io.write(' ') end
		io.write(tostring(a))
	end
	io.write('\n')
end

function __add(a, b)
	if type(a) == 'table' and type(b) == 'table' then
		local out = {}
		for i = 1, #a do out[#out+1] = a[i] end
		for i = 1, #b do out[#out+1] = b[i] end
		return out
	elseif type(a) == 'string' or type(b) == 'string' then
		return tostring(a) .. tostring(b)
	else
		return a + b
	end
end

function __slice(obj, i, j)
	if i == nil then i = 0 end
	if type(obj) == 'string' then
		local len = #obj
		if j == nil then j = len end
		if i < 0 then i = len + i end
		if j < 0 then j = len + j end
		if i < 0 then i = 0 end
		if j > len then j = len end
		return string.sub(obj, i+1, j)
	elseif type(obj) == 'table' then
		local len = #obj
		if j == nil then j = len end
		if i < 0 then i = len + i end
		if j < 0 then j = len + j end
		if i < 0 then i = 0 end
		if j > len then j = len end
		local out = {}
		for k = i+1, j do
			out[#out+1] = obj[k]
		end
		return out
	else
		return {}
	end
end

function remove(nums, i)
	return __add(__slice(nums, 0, i), __slice(nums, __add(i, 1), #nums))
end

__print(remove({1, 2, 3, 4}, 1))
