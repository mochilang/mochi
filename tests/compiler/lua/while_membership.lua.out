function __print(...)
	local args = {...}
	for i, a in ipairs(args) do
		if i > 1 then io.write(' ') end
		io.write(tostring(a))
	end
	io.write('\n')
end

function __iter(obj)
	if type(obj) == 'table' then
		if obj[1] ~= nil or #obj > 0 then
			local i = 0
			local n = #obj
			return function()
				i = i + 1
				if i <= n then return i, obj[i] end
			end
		else
			return pairs(obj)
		end
	elseif type(obj) == 'string' then
		local i = 0
		local n = #obj
		return function()
			i = i + 1
			if i <= n then return i, string.sub(obj, i, i) end
		end
	else
		return function() return nil end
	end
end

function __add(a, b)
	if type(a) == 'table' and type(b) == 'table' then
		local out = {}
		for i = 1, #a do out[#out+1] = a[i] end
		for i = 1, #b do out[#out+1] = b[i] end
		return out
	elseif type(a) == 'string' or type(b) == 'string' then
		return tostring(a) .. tostring(b)
	else
		return a + b
	end
end

function __contains(container, item)
	if type(container) == 'table' then
		if container.__map then
			return container[item] ~= nil
		elseif container[1] ~= nil or #container > 0 then
			for _, v in ipairs(container) do
				if v == item then return true end
			end
			return false
		else
			return container[item] ~= nil
		end
	elseif type(container) == 'string' then
		return string.find(container, item, 1, true) ~= nil
	else
		return false
	end
end

local set = {__map=true}
for _, n in __iter({1, 2, 3}) do
	set[n] = true
	::__continue0::
end
local i = 1
local count = 0
while __contains(set, i) do
	i = __add(i, 1)
	count = __add(count, 1)
	::__continue1::
end
__print(count)
