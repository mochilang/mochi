// Generated by Mochi TypeScript compiler

type Msg = {
  message: string;
};

async function main(): Promise<void> {
  let data: Msg = await _fetch(
    "file://tests/compiler/ts/fetch_builtin.json",
    undefined,
  );
  (globalThis as any).data = data;
  console.log(data.message);
}
async function _fetch(url: string, opts: any): Promise<any> {
  if (url.startsWith("file://")) {
    let path = url.slice(7);
    if (!path.startsWith("/")) {
      try {
        const t = Deno.readTextFileSync(path);
        try {
          return JSON.parse(t);
        } catch {
          return t;
        }
      } catch {
        path = Deno.cwd() + "/../.." + "/" + path;
      }
    }
    const text = Deno.readTextFileSync(path);
    try {
      return JSON.parse(text);
    } catch {
      return text;
    }
  }
  const init: RequestInit = { method: opts?.method ?? "GET" };
  if (opts?.headers) init.headers = _toAnyMap(opts.headers);
  if (opts && "body" in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(_toAnyMap(opts.query))) {
      qs.set(k, String(v));
    }
    const sep = url.includes("?") ? "&" : "?";
    url = url + sep + qs.toString();
  }
  let ctrl: AbortController | undefined;
  let id: any;
  if (opts?.timeout) {
    ctrl = new AbortController();
    id = setTimeout(() => ctrl!.abort(), Number(opts.timeout) * 1000);
    init.signal = ctrl.signal;
  }
  const resp = await fetch(url, init);
  if (id) clearTimeout(id);
  const text = await resp.text();
  try {
    return JSON.parse(text);
  } catch {
    return text;
  }
}

const _pending: Promise<any>[] = [];
async function _waitAll(): Promise<void> {
  await Promise.all(_pending);
}

await main();
await _waitAll();
