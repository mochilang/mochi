// Generated by Mochi TypeScript compiler

let a: Array<number>;
let b: Array<number>;

function main(): void {
  a = [
    1,
    2,
    3,
  ];
  b = [
    3,
    4,
  ];
  console.log(_union(a, b).length);
  console.log(_union_all(a, b).length);
  console.log(_except(a, b).length);
  console.log(_intersect(a, b).length);
}
function _except(a: any[], b: any[]): any[] {
  const remove = new Set<any>(b);
  const res: any[] = [];
  for (const it of a) if (!remove.has(it)) res.push(it);
  return res;
}

function _intersect(a: any[], b: any[]): any[] {
  const keep = new Set<any>(b);
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) {
    if (keep.has(it) && !seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union(a: any[], b: any[]): any[] {
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  for (const it of b) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union_all(a: any[], b: any[]): any[] {
  return a.concat(b);
}

main();
