// Generated by Mochi TypeScript compiler

function main(): void {
  let a: Array<number> = [
    1,
    2,
    3
  ]
  ;(globalThis as any).a = a
  let b: Array<number> = [
    3,
    4
  ]
  ;(globalThis as any).b = b
  console.log(_union(a, b).length)
  console.log(_union_all(a, b).length)
  console.log(_except(a, b).length)
  console.log(_intersect(a, b).length)
}
function _except(a: any[], b: any[]): any[] {
  const remove = new Set<any>(b);
  const res: any[] = [];
  for (const it of a) { if (!remove.has(it)) res.push(it); }
  return res;
}

function _intersect(a: any[], b: any[]): any[] {
  const keep = new Set<any>(b);
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) { if (keep.has(it) && !seen.has(it)) { seen.add(it); res.push(it); } }
  return res;
}

function _union(a: any[], b: any[]): any[] {
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) { if (!seen.has(it)) { seen.add(it); res.push(it); } }
  for (const it of b) { if (!seen.has(it)) { seen.add(it); res.push(it); } }
  return res;
}

function _union_all(a: any[], b: any[]): any[] {
  return a.concat(b);
}

main()
