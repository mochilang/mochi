// Generated by Mochi TypeScript compiler

function main(): void {
	let a: Array<number> = [1, 2, 3]
	let b: Array<number> = [3, 4]
	console.log((Array.isArray(_union(a, b)) || typeof _union(a, b) === 'string' ? (_union(a, b) as any).length : (_union(a, b) && typeof _union(a, b) === 'object' ? Object.keys(_union(a, b)).length : 0)))
	console.log((Array.isArray(_union(a, b)) || typeof _union(a, b) === 'string' ? (_union(a, b) as any).length : (_union(a, b) && typeof _union(a, b) === 'object' ? Object.keys(_union(a, b)).length : 0)))
	console.log((Array.isArray(_except(a, b)) || typeof _except(a, b) === 'string' ? (_except(a, b) as any).length : (_except(a, b) && typeof _except(a, b) === 'object' ? Object.keys(_except(a, b)).length : 0)))
	console.log((Array.isArray(_intersect(a, b)) || typeof _intersect(a, b) === 'string' ? (_intersect(a, b) as any).length : (_intersect(a, b) && typeof _intersect(a, b) === 'object' ? Object.keys(_intersect(a, b)).length : 0)))
}
function _except(a: any[], b: any[]): any[] {
  const remove = new Set<any>(b);
  const res: any[] = [];
  for (const it of a) { if (!remove.has(it)) res.push(it); }
  return res;
}

function _intersect(a: any[], b: any[]): any[] {
  const keep = new Set<any>(b);
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) { if (keep.has(it) && !seen.has(it)) { seen.add(it); res.push(it); } }
  return res;
}

function _union(a: any[], b: any[]): any[] {
  const res: any[] = [];
  const seen = new Set<any>();
  for (const it of a) { if (!seen.has(it)) { seen.add(it); res.push(it); } }
  for (const it of b) { if (!seen.has(it)) { seen.add(it); res.push(it); } }
  return res;
}

main()
