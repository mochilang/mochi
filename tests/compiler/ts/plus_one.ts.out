// Generated by Mochi TypeScript compiler

// > fun plusOne(digits: list<int>): list<int> {
function plusOne(digits: Array<number>) : Array<number> {
	// > var carry = 1
	let carry: number = 1
	;(globalThis as any).carry = carry
	// > var i = len(digits) - 1
	let i: number = (digits.length - 1)
	;(globalThis as any).i = i
	// > var result = digits
	let result: Array<number> = digits
	;(globalThis as any).result = result
	// > while i >= 0 && carry > 0 {
	while (((i >= 0) && (carry > 0))) {
		// > var sum = result[i] + carry
		let sum: number = (result[i] + carry)
		;(globalThis as any).sum = sum
		// > result[i] = sum % 10
		result[i] = (sum % 10)
		// > carry = sum / 10
		carry = Math.trunc(sum / 10)
		// > i = i - 1
		i = (i - 1)
	}
	// > if carry > 0 {
	if ((carry > 0)) {
		// > return [carry] + result
		return [carry].concat(result)
	}
	// > return result
	return result
}

function main(): void {
	// > print(plusOne([1,2,3]))
	console.log(plusOne([
		1,
		2,
		3
	]))
}
main()
