// Generated by Mochi TypeScript compiler

// > type Tree =
type Leaf = {
	__name: "Leaf";
}

type _Node = {
	__name: "Node";
	left: Tree;
	value: number;
	right: Tree;
}

type Tree = Leaf | _Node

// > fun depth(t: Tree): int {
function depth(t: Tree) : number {
	// > return match t {
	return (() => {
	const _t = t;
	if (_t.__name === "Leaf") { return 0 }
	if (_t.__name === "Node") { return ((l, r) => ((depth(l) + depth(r)) + 1))(_t.left, _t.right) }
	return undefined
})()
}

function main(): void {
	// > print(depth(Node { left: Leaf {}, value: 0, right: Leaf {} }))
	console.log(depth({__name: "Node", left: {__name: "Leaf"}, value: 0, right: {__name: "Leaf"}}))
}
main()
