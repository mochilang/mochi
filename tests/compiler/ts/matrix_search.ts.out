// Generated by Mochi TypeScript compiler

function searchMatrix(matrix: Array<Array<number>>, target: number): boolean {
  let m: number = matrix.length;
  (globalThis as any).m = m;
  if ((m == 0)) {
    return false;
  }
  let n: number = matrix[0].length;
  (globalThis as any).n = n;
  let left: number = 0;
  (globalThis as any).left = left;
  let right: number = (m * n) - 1;
  (globalThis as any).right = right;
  while ((left <= right)) {
    let mid: number = left + Math.trunc((right - left) / 2);
    (globalThis as any).mid = mid;
    let row: number = Math.trunc(mid / n);
    (globalThis as any).row = row;
    let col: number = mid % n;
    (globalThis as any).col = col;
    let value: number = matrix[row][col];
    (globalThis as any).value = value;
    if ((value == target)) {
      return true;
    } else if ((value < target)) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  return false;
}

function main(): void {
  console.log(searchMatrix([
    [
      1,
      3,
      5,
      7,
    ],
    [
      10,
      11,
      16,
      20,
    ],
    [
      23,
      30,
      34,
      60,
    ],
  ], 3));
  console.log(searchMatrix([
    [
      1,
      3,
      5,
      7,
    ],
    [
      10,
      11,
      16,
      20,
    ],
    [
      23,
      30,
      34,
      60,
    ],
  ], 13));
}
main();
