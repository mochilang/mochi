// Generated by Mochi TypeScript compiler

// > fun searchMatrix(matrix: list<list<int>>, target: int): bool {
function searchMatrix(matrix: Array<Array<number>>, target: number) : boolean {
	// > let m = len(matrix)
	let m: number = matrix.length
	;(globalThis as any).m = m
	// > if m == 0 {
	if ((m == 0)) {
		// > return false
		return false
	}
	// > let n = len(matrix[0])
	let n: number = matrix[0].length
	;(globalThis as any).n = n
	// > var left = 0
	let left: number = 0
	;(globalThis as any).left = left
	// > var right = m * n - 1
	let right: number = ((m * n) - 1)
	;(globalThis as any).right = right
	// > while left <= right {
	while ((left <= right)) {
		// > let mid = left + (right - left) / 2
		let mid: number = (left + Math.trunc(((right - left)) / 2))
		;(globalThis as any).mid = mid
		// > let row = mid / n
		let row: number = Math.trunc(mid / n)
		;(globalThis as any).row = row
		// > let col = mid % n
		let col: number = (mid % n)
		;(globalThis as any).col = col
		// > let value = matrix[row][col]
		let value: number = matrix[row][col]
		;(globalThis as any).value = value
		// > if value == target {
		if ((value == target)) {
			// > return true
			return true
		} else 		if ((value < target)) {
			// > left = mid + 1
			left = (mid + 1)
		} else {
			// > right = mid - 1
			right = (mid - 1)
		}
	}
	// > return false
	return false
}

function main(): void {
	// > print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3))
	console.log(searchMatrix([
		[
				1,
				3,
				5,
				7
			],
		[
				10,
				11,
				16,
				20
			],
		[
				23,
				30,
				34,
				60
			]
	], 3))
	// > print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13))
	console.log(searchMatrix([
		[
				1,
				3,
				5,
				7
			],
		[
				10,
				11,
				16,
				20
			],
		[
				23,
				30,
				34,
				60
			]
	], 13))
}
main()
