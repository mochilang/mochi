// Generated by Mochi TypeScript compiler

function test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part(): void {
	if (!(_equal(result, [{"s_acctbal": 1000, "s_name": "BestSupplier", "n_name": "FRANCE", "p_partkey": 1000, "p_mfgr": "M1", "s_address": "123 Rue", "s_phone": "123", "s_comment": "Fast and reliable", "ps_supplycost": 10}]))) { throw new Error('expect failed') }
}

function main(): void {
	let region: Array<Record<string, any>> = [{"r_regionkey": 1, "r_name": "EUROPE"}, {"r_regionkey": 2, "r_name": "ASIA"}]
	let nation: Array<Record<string, any>> = [{"n_nationkey": 10, "n_regionkey": 1, "n_name": "FRANCE"}, {"n_nationkey": 20, "n_regionkey": 2, "n_name": "CHINA"}]
	let supplier: Array<Record<string, any>> = [{"s_suppkey": 100, "s_name": "BestSupplier", "s_address": "123 Rue", "s_nationkey": 10, "s_phone": "123", "s_acctbal": 1000, "s_comment": "Fast and reliable"}, {"s_suppkey": 200, "s_name": "AltSupplier", "s_address": "456 Way", "s_nationkey": 20, "s_phone": "456", "s_acctbal": 500, "s_comment": "Slow"}]
	let part: Array<Record<string, any>> = [{"p_partkey": 1000, "p_type": "LARGE BRASS", "p_size": 15, "p_mfgr": "M1"}, {"p_partkey": 2000, "p_type": "SMALL COPPER", "p_size": 15, "p_mfgr": "M2"}]
	let partsupp: Array<Record<string, any>> = [{"ps_partkey": 1000, "ps_suppkey": 100, "ps_supplycost": 10}, {"ps_partkey": 1000, "ps_suppkey": 200, "ps_supplycost": 15}]
	let europe_nations: Array<Record<string, any>> = (() => {
	const _src = region;
	const _res = [];
	for (const r of _src) {
		for (const n of nation) {
			if (!(_equal(n.n_regionkey, r.r_regionkey))) { continue }
			if (!(_equal(r.r_name, "EUROPE"))) { continue }
			_res.push(n)
		}
	}
	return _res;
})()
	let europe_suppliers: Array<Record<string, Record<string, any>>> = (() => {
	const _src = supplier;
	const _res = [];
	for (const s of _src) {
		for (const n of europe_nations) {
			if (!(_equal(s.s_nationkey, n.n_nationkey))) { continue }
			_res.push({"s": s, "n": n})
		}
	}
	return _res;
})()
	let target_parts: Array<Record<string, any>> = (() => {
	const _src = part;
	const _res = [];
	for (const p of _src) {
		if (!((_equal(p.p_size, 15) && _equal(p.p_type, "LARGE BRASS")))) { continue }
		_res.push(p)
	}
	return _res;
})()
	let target_partsupp: Array<Record<string, any>> = (() => {
	const _src = partsupp;
	const _res = [];
	for (const ps of _src) {
		for (const p of target_parts) {
			if (!(_equal(ps.ps_partkey, p.p_partkey))) { continue }
			for (const s of europe_suppliers) {
				if (!(_equal(ps.ps_suppkey, s.s.s_suppkey))) { continue }
				_res.push({"s_acctbal": s.s.s_acctbal, "s_name": s.s.s_name, "n_name": s.n.n_name, "p_partkey": p.p_partkey, "p_mfgr": p.p_mfgr, "s_address": s.s.s_address, "s_phone": s.s.s_phone, "s_comment": s.s.s_comment, "ps_supplycost": ps.ps_supplycost})
			}
		}
	}
	return _res;
})()
	let costs: Array<any> = (() => {
	const _src = target_partsupp;
	const _res = [];
	for (const x of _src) {
		_res.push(x.ps_supplycost)
	}
	return _res;
})()
	let min_cost: any = _min(costs)
	let result: Array<Record<string, any>> = (() => {
	const _src = target_partsupp;
	let _items = [];
	for (const x of _src) {
		if (!(_equal(x.ps_supplycost, min_cost))) { continue }
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: (-x.s_acctbal)}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	console.log(JSON.stringify(result))
	test_Q2_returns_only_supplier_with_min_cost_in_Europe_for_brass_part()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

function _min(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === 'object') {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) { const num = Number(n); if (num < m) m = num; }
  return m;
}

main()

