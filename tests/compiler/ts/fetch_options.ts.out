// Generated by Mochi TypeScript compiler

function main(): void {
	let body: any = _fetch("https://example.com", _toAnyMap({
		"method": "POST",
		"headers": {"Content-Type": "application/json"},
		"query": {"q": "1"},
		"body": {"x": 1},
		"timeout": 1.5
	}))
	;(globalThis as any).body = body
	console.log(((Array.isArray(body) || typeof body === 'string' ? (body as any).length : (body && typeof body === 'object' ? Object.keys(body).length : 0)) > 0))
}
function _fetch(url: string, opts: any): any {
  const args: string[] = ['-s'];
  const method = opts?.method ?? 'GET';
  args.push('-X', method);
  if (opts?.headers) {
    for (const [k, v] of Object.entries(_toAnyMap(opts.headers))) {
      args.push('-H', `${k}: ${String(v)}`);
    }
  }
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(_toAnyMap(opts.query))) {
      qs.set(k, String(v));
    }
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  if (opts && 'body' in opts) {
    args.push('-d', JSON.stringify(opts.body));
  }
  if (opts?.timeout) {
    args.push('--max-time', String(opts.timeout));
  }
  args.push(url);
  const { stdout } = new Deno.Command('curl', { args }).outputSync();
  return JSON.parse(new TextDecoder().decode(stdout));
}

function _toAnyMap(m: any): Record<string, any> {
  return m as Record<string, any>;
}

main()
