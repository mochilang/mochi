// Generated by Mochi TypeScript compiler

type Product = {
  name: string;
  price: number;
}

function main(): void {
  let products: Array<Product> = [
    {
        name: "Laptop",
        price: 1500
      },
    {
        name: "Smartphone",
        price: 900
      },
    {
        name: "Tablet",
        price: 600
      },
    {
        name: "Monitor",
        price: 300
      },
    {
        name: "Keyboard",
        price: 100
      },
    {
        name: "Mouse",
        price: 50
      },
    {
        name: "Headphones",
        price: 200
      }
  ]
  ;(globalThis as any).products = products
  let expensive: Array<Product> = (() => {
	const _src = products;
	let _items = [];
	for (const p of _src) {
    _items.push(p);
  }
	let _pairs = _items.map(it => { const p = it; return {item: it, key: (-p.price)}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	{ const _n = 1; _items = _n < _items.length ? _items.slice(_n) : []; }
	{ const _n = 3; if (_n < _items.length) _items = _items.slice(0, _n); }
	const _res = [];
	for (const p of _items) {
		_res.push(p)
	}
	return _res;
})()
  ;(globalThis as any).expensive = expensive
  console.log("--- Top products (excluding most expensive) ---")
  for (const item of expensive) {
    console.log(item.name, "costs $", item.price)
  }
}
main()
