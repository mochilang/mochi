#lang racket
(require racket/list)

(define (idx x i)
  (cond [(string? x) (string-ref x i)]
        [(hash? x) (hash-ref x i)]
        [else (list-ref x i)]))
(define (slice x s e) (if (string? x) (substring x s e) (take (drop x s) (- e s))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))

(define numbers (list 1 2 3 4 5 6 7 8 9))
(let/ec brk0
	(let loop0 ([it numbers])
		(when (pair? it)
			(let ([n (car it)])
				(if (= (modulo n 2) 0)
					(begin
						(loop0 (cdr it))
					)
					(void)
				)
				(if (> n 7)
					(begin
						(brk0 (void))
					)
					(void)
				)
				(displayln (format "~a ~a" "odd number:" n))
			)
			(loop0 (cdr it)))
		)
	)
