#lang racket
(require racket/list)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (string-ref x idx))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))

(define (expect cond) (unless cond (error "expect failed")))
(define numbers (list 1 2 3 4 5 6 7 8 9))
(let/ec brk0
	(let loop0 ([it numbers])
		(when (pair? it)
			(let ([n (car it)])
				(if (= (modulo n 2) 0)
					(begin
						(loop0 (cdr it))
					)
					(void)
				)
				(if (> n 7)
					(begin
						(brk0 (void))
					)
					(void)
				)
				(displayln (format "~a ~a" "odd number:" n))
			)
			(loop0 (cdr it)))
		)
	)
