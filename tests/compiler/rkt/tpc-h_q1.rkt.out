#lang racket
(require racket/list racket/string json json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (_fetch url opts)
  (define opts (or opts (hash)))
  (define method (hash-ref opts 'method "GET"))
  (define args (list "curl" "-s" "-X" method))
  (when (hash-has-key? opts 'headers)
    (for ([k (hash-keys (hash-ref opts 'headers))])
      (set! args (append args (list "-H" (format "~a: ~a" k (hash-ref (hash-ref opts 'headers) k)))))))
  (when (hash-has-key? opts 'query)
    (define q (hash-ref opts 'query))
    (define qs (string-join (for/list ([k (hash-keys q)]) (format "~a=~a" k (hash-ref q k))) "&"))
    (set! url (string-append url (if (regexp-match? #px"\\?" url) "&" "?") qs)))
  (when (hash-has-key? opts 'body)
    (set! args (append args (list "-d" (jsexpr->string (hash-ref opts 'body))))) )
  (when (hash-has-key? opts 'timeout)
    (set! args (append args (list "--max-time" (format "~a" (hash-ref opts 'timeout))))) )
  (set! args (append args (list url)))
  (define p (open-input-pipe (string-join args " ")))
  (define txt (port->string p))
  (close-input-port p)
  (string->jsexpr txt))

(define (_load path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define text (if path (call-with-input-file path port->string) (port->string (current-input-port))))
  (cond [(string=? fmt "jsonl") (for/list ([l (in-lines (open-input-string text))] #:unless (string-blank? l)) (string->jsexpr l))]
        [(string=? fmt "json") (let ([d (string->jsexpr text)]) (if (list? d) d (list d)))]
        [else '()]))

(define (_save rows path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define out (if path (open-output-file path #:exists 'replace) (current-output-port)))
  (cond [(string=? fmt "jsonl") (for ([r rows]) (fprintf out "~a\n" (jsexpr->string r)))]
        [(string=? fmt "json") (fprintf out "~a" (jsexpr->string rows))])
  (when path (close-output-port out)))

;; grouping helpers
(struct _Group (key Items) #:mutable)

(define (_group_by src keyfn)
  (define groups (make-hash))
  (define order '())
  (for ([it src])
    (define k (keyfn it))
    (define ks (format "~a" k))
    (define g (hash-ref groups ks #f))
    (unless g
      (set! g (make-_Group k '()))
      (hash-set! groups ks g)
      (set! order (append order (list ks))))
    (set-_Group-Items! g (append (_Group-Items g) (list it))))
  (for/list ([ks order]) (hash-ref groups ks)))
(define (to-jsexpr v)
  (if (hash? v)
      (for/hash ([(k val) (in-hash v)])
        (values (if (string? k) (string->symbol k) k) val))
      v))(define (test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus)
	(unless (equal? result (list (hash returnflag "N" linestatus "O" sum_qty 53 sum_base_price 3000 sum_disc_price (_add 950 1800) sum_charge (_add (* 950 1.07) (* 1800 1.05)) avg_qty 26.5 avg_price 1500 avg_disc 0.07500000000000001 count_order 2))) (error "expect failed"))
)

(define lineitem (list (hash l_quantity 17 l_extendedprice 1000 l_discount 0.05 l_tax 0.07 l_returnflag "N" l_linestatus "O" l_shipdate "1998-08-01") (hash l_quantity 36 l_extendedprice 2000 l_discount 0.1 l_tax 0.05 l_returnflag "N" l_linestatus "O" l_shipdate "1998-09-01") (hash l_quantity 25 l_extendedprice 1500 l_discount 0 l_tax 0.08 l_returnflag "R" l_linestatus "F" l_shipdate "1998-09-03")))
(define result (let ([groups (_group_by (filter (lambda (row) (<= (hash-ref row "l_shipdate") "1998-09-02")) lineitem) (lambda (row) (hash returnflag (hash-ref row "l_returnflag") linestatus (hash-ref row "l_linestatus"))))])
  (let ([_res '()])
    (for ([g groups])
      (set! _res (append _res (list (hash returnflag (hash-ref (hash-ref g "key") "returnflag") linestatus (hash-ref (hash-ref g "key") "linestatus") sum_qty (sum (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "l_quantity"))))
  )
  _res)) sum_base_price (sum (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "l_extendedprice"))))
  )
  _res)) sum_disc_price (sum (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (* (hash-ref x "l_extendedprice") (- 1 (hash-ref x "l_discount"))))))
  )
  _res)) sum_charge (sum (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (* (* (hash-ref x "l_extendedprice") (- 1 (hash-ref x "l_discount"))) (_add 1 (hash-ref x "l_tax"))))))
  )
  _res)) avg_qty (avg (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "l_quantity"))))
  )
  _res)) avg_price (avg (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "l_extendedprice"))))
  )
  _res)) avg_disc (avg (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "l_discount"))))
  )
  _res)) count_order (count g)))))
    )
    _res))
(displayln (jsexpr->string (to-jsexpr result)))
(test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus)
