#lang racket
(require racket/list)

(define (idx x i)
  (cond [(string? x) (string-ref x i)]
        [(hash? x) (hash-ref x i)]
        [else (list-ref x i)]))
(define (slice x s e) (if (string? x) (substring x s e) (take (drop x s) (- e s))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))

(define (expect cond) (unless cond (error "expect failed")))
(define xs (list (list (list 1) (list 2)) (list (list 3) (list 4))))
(set! xs (if (hash? xs) (hash-set xs 0 (if (hash? (idx xs 0)) (hash-set (idx xs 0) 0 (if (hash? (idx (idx xs 0) 0)) (hash-set (idx (idx xs 0) 0) 0 9) (list-set (idx (idx xs 0) 0) 0 9))) (list-set (idx xs 0) 0 (if (hash? (idx (idx xs 0) 0)) (hash-set (idx (idx xs 0) 0) 0 9) (list-set (idx (idx xs 0) 0) 0 9))))) (list-set xs 0 (if (hash? (idx xs 0)) (hash-set (idx xs 0) 0 (if (hash? (idx (idx xs 0) 0)) (hash-set (idx (idx xs 0) 0) 0 9) (list-set (idx (idx xs 0) 0) 0 9))) (list-set (idx xs 0) 0 (if (hash? (idx (idx xs 0) 0)) (hash-set (idx (idx xs 0) 0) 0 9) (list-set (idx (idx xs 0) 0) 0 9)))))))
(displayln (idx (idx (idx xs 0) 0) 0))
