#lang racket
(require racket/list) json

(define (idx x i)
  (cond [(string? x) (string-ref x i)]
        [(hash? x) (hash-ref x i)]
        [else (list-ref x i)]))
(define (slice x s e) (if (string? x) (substring x s e) (take (drop x s) (- e s))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))

(define (expect cond) (unless cond (error "expect failed")))
(define (_genText prompt model params)
  ;; TODO: connect to an LLM
  prompt)

(define (_genEmbed text model params)
  ;; naive embedding as character codes
  (for/list ([c (in-string text)]) (exact->inexact (char->integer c))))

(define (_genStruct ctor fields prompt model params)
  ;; parse JSON and build struct using provided constructor
  (define data (string->jsexpr prompt))
  (apply ctor (map (lambda (f) (hash-ref data f)) fields)))(define poem (_genText "echo hello" "" #f))
(displayln poem)
