# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing
import urllib.request


@dataclasses.dataclass
class Todo:
    userId: int
    id: int
    title: str
    completed: bool


todo = None


def main():
    global todo
    todo = _fetch("https://jsonplaceholder.typicode.com/todos/1", None)
    print((todo["id"] > 0))


def _fetch(url, opts):
    import urllib.request, urllib.parse, json

    method = "GET"
    data = None
    headers = {}
    timeout = None
    if opts:
        method = opts.get("method", method)
        if "body" in opts:
            data = json.dumps(opts["body"]).encode()
        if "headers" in opts:
            for k, v in dict(opts["headers"]).items():
                headers[k] = str(v)
        if "query" in opts:
            q = urllib.parse.urlencode(
                {k: str(v) for k, v in dict(opts["query"]).items()}
            )
            sep = "&" if "?" in url else "?"
            url = url + sep + q
        timeout = opts.get("timeout", None)
    req = urllib.request.Request(url, data=data, headers=headers, method=method)
    with urllib.request.urlopen(req, timeout=timeout) as resp:
        text = resp.read()
    return json.loads(text)


if __name__ == "__main__":
    main()
