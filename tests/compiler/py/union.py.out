# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class Tree:
    pass


@dataclasses.dataclass
class Leaf(Tree):
    pass


@dataclasses.dataclass
class Node(Tree):
    left: Tree
    value: int
    right: Tree


t = Node(left=Leaf(), value=42, right=Leaf())


def main():
    global t
    t = Node(left=Leaf(), value=42, right=Leaf())
    print(_get(t, "value"))


if __name__ == "__main__":
    main()
