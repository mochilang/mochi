# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


@dataclasses.dataclass
class Num:
    val: int


items = [Num(val=1), Num(val=2), Num(val=3)]
a = None
b = None


def main():
    global items
    items = [Num(val=1), Num(val=2), Num(val=3)]
    global a
    a = [_get(x, "val") for x in (([x for x in items])[max((-1), 0) :])[: max(2, 0)]]
    global b
    b = [_get(x, "val") for x in (([x for x in items])[max(1, 0) :])[: max((-1), 0)]]
    print("---a---")
    for v in a:
        print(v)
    print("---b---")
    print(len(b))


if __name__ == "__main__":
    main()
