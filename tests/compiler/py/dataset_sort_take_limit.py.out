# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

# type Product {
# type Product {
@dataclasses.dataclass
class Product:
    name: str
    price: int

def main():
    # let products = [
    global products
    products: list[Product] = [Product(name="Laptop", price=1500), Product(name="Smartphone", price=900), Product(name="Tablet", price=600), Product(name="Monitor", price=300), Product(name="Keyboard", price=100), Product(name="Mouse", price=50), Product(name="Headphones", price=200)]
    # let expensive = from p in products
    global expensive
    expensive: list[Product] = [ p for p in ((sorted([ p for p in products ], key=lambda p: (-p.price)))[max(1, 0):])[:max(3, 0)] ]
    # print("--- Top products (excluding most expensive) ---")
    print("--- Top products (excluding most expensive) ---")
    # for item in expensive {
    for item in expensive:
        # print(item.name, "costs $", item.price)
        print(item.name, "costs $", item.price)

if __name__ == "__main__":
    main()
