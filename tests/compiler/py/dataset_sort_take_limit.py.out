# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


@dataclasses.dataclass
class Product:
    name: str
    price: int


products = [
    Product(name="Laptop", price=1500),
    Product(name="Smartphone", price=900),
    Product(name="Tablet", price=600),
    Product(name="Monitor", price=300),
    Product(name="Keyboard", price=100),
    Product(name="Mouse", price=50),
    Product(name="Headphones", price=200),
]
expensive = None


def main():
    global products
    products = [
        Product(name="Laptop", price=1500),
        Product(name="Smartphone", price=900),
        Product(name="Tablet", price=600),
        Product(name="Monitor", price=300),
        Product(name="Keyboard", price=100),
        Product(name="Mouse", price=50),
        Product(name="Headphones", price=200),
    ]
    global expensive
    expensive = [
        p
        for p in (
            (
                sorted(
                    [p for p in products], key=lambda p: _sort_key((-_get(p, "price")))
                )
            )[max(1, 0) :]
        )[: max(3, 0)]
    ]
    print("--- Top products (excluding most expensive) ---")
    for item in expensive:
        print(_get(item, "name"), "costs $", _get(item, "price"))


if __name__ == "__main__":
    main()
