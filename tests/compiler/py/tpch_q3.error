generated code does not match expected
--- expected
+++ generated
@@ -1,66 +1,169 @@
-let customer = [
-  { c_custkey: 1, c_mktsegment: "BUILDING" },
-  { c_custkey: 2, c_mktsegment: "AUTOMOBILE" }
-]
-
-let orders = [
-  { o_orderkey: 100, o_custkey: 1, o_orderdate: "1995-03-14", o_shippriority: 1 },
-  { o_orderkey: 200, o_custkey: 2, o_orderdate: "1995-03-10", o_shippriority: 2 }
-]
-
-let lineitem = [
-  { l_orderkey: 100, l_extendedprice: 1000.0, l_discount: 0.05, l_shipdate: "1995-03-16" },
-  { l_orderkey: 100, l_extendedprice: 500.0, l_discount: 0.00, l_shipdate: "1995-03-20" },
-  { l_orderkey: 200, l_extendedprice: 1000.0, l_discount: 0.10, l_shipdate: "1995-03-14" } // too early
-]
-
+fun _get(obj: any, name: any): any {
+  if obj ? None {
+    return None
+  }
+  if isinstance(obj, dict) {
+    if name ? obj {
+      return obj[name]
+    }
+  }
+  if hasattr(obj, name) {
+    return getattr(obj, name)
+  }
+  if isinstance(obj, (list, tuple)) {
+    for it in obj {
+      return _get(it, name)
+    }
+  }
+}
+fun _group_by(src: any, keyfn: any): any {
+  let groups = {}
+  let order = []
+  for it in src {
+    if isinstance(it, (list, tuple)) {
+      let key = keyfn(it)
+    } else {
+    }
+    if isinstance(key, dict) {
+    }
+    let ks = str(key)
+    let g = groups.get(ks)
+    if !g {
+      order.append(ks)
+    }
+    g.Items.append(it)
+  }
+  return from k in order
+            select groups[k]
+}
+fun _query(src: any, joins: any, opts: any): any {
+  let items = from v in src
+            select [v]
+  for j in joins {
+    let joined = []
+    if j.get("right") and j.get("left") {
+      let matched = [False] * len(j["items"])
+      for left in items {
+        let m = False
+        for (ri, right) in enumerate(j["items"]) {
+          let keep = True
+          if j.get("on") {
+          }
+          if !keep {
+          }
+          joined.append(left + [right])
+        }
+        if !m {
+          joined.append(left + [None])
+        }
+      }
+      for (ri, right) in enumerate(j["items"]) {
+        if !matched[ri] {
+          let undef = [None] * if items then len(items[0]) else 0
+          joined.append(undef + [right])
+        }
+      }
+    } else {
+      if j.get("right") {
+        for right in j["items"] {
+          for left in items {
+            if j.get("on") {
+            }
+            if !keep {
+            }
+            joined.append(left + [right])
+          }
+          if !m {
+            joined.append(undef + [right])
+          }
+        }
+      } else {
+        for left in items {
+          for right in j["items"] {
+            if j.get("on") {
+            }
+            if !keep {
+            }
+            joined.append(left + [right])
+          }
+          if j.get("left") and !m {
+            joined.append(left + [None])
+          }
+        }
+      }
+    }
+  }
+  if opts.get("where") {
+  }
+  if opts.get("sortKey") {
+    fun _key(it: any): any {
+      let k = opts["sortKey"](it)
+      if isinstance(k, (list, tuple, dict)) {
+        return str(k)
+      }
+      return k
+    }
+    items.sort(key: _key)
+  }
+  if "skip" ? opts {
+    let n = opts["skip"]
+    if n < 0 {
+    }
+  }
+  if "take" ? opts {
+    if n < 0 {
+    }
+  }
+  let res = []
+  for r in items {
+    res.append(opts["select"](r))
+  }
+  return res
+}
+fun _sort_key(k: any): any {
+  if isinstance(k, (list, tuple, dict)) {
+    return str(k)
+  }
+  return k
+}
+fun _sum(v: any): any {
+  if hasattr(v, "Items") {
+    let v = v.Items
+  }
+  if !isinstance(v, list) {
+  }
+  let s = 0.0
+  for it in v {
+    if it ? None {
+    }
+    if isinstance(it, (int, float)) {
+    } else {
+    }
+  }
+  return s
+}
+fun test_Q3_returns_revenue_per_order_with_correct_priority(): any {
+}
+let customer = [{"c_custkey": 1, "c_mktsegment": "BUILDING"}, {"c_custkey": 2, "c_mktsegment": "AUTOMOBILE"}]
+let orders = [{"o_orderkey": 100, "o_custkey": 1, "o_orderdate": "1995-03-14", "o_shippriority": 1}, {"o_orderkey": 200, "o_custkey": 2, "o_orderdate": "1995-03-10", "o_shippriority": 2}]
+let lineitem = [{"l_orderkey": 100, "l_extendedprice": 1000, "l_discount": 0.05, "l_shipdate": "1995-03-16"}, {"l_orderkey": 100, "l_extendedprice": 500, "l_discount": 0, "l_shipdate": "1995-03-20"}, {"l_orderkey": 200, "l_extendedprice": 1000, "l_discount": 0.1, "l_shipdate": "1995-03-14"}]
 let cutoff = "1995-03-15"
 let segment = "BUILDING"
-
-let building_customers =
-  from c in customer
-  where c.c_mktsegment == segment
-  select c
-
-let valid_orders =
-  from o in orders
-  join c in building_customers on o.o_custkey == c.c_custkey
-  where o.o_orderdate < cutoff
-  select o
-
-let valid_lineitems =
-  from l in lineitem
-  where l.l_shipdate > cutoff
-  select l
-
-let order_line_join =
-  from o in valid_orders
-  join l in valid_lineitems on l.l_orderkey == o.o_orderkey
-  group by {
-    o_orderkey: o.o_orderkey,
-    o_orderdate: o.o_orderdate,
-    o_shippriority: o.o_shippriority
-  } into g
-  sort by [
-    -sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
-    g.key.o_orderdate
-  ]
-  select {
-    l_orderkey: g.key.o_orderkey,
-    revenue: sum(from r in g select r.l.l_extendedprice * (1 - r.l.l_discount)),
-    o_orderdate: g.key.o_orderdate,
-    o_shippriority: g.key.o_shippriority
-  }
-
+let building_customers = from c in customer
+            where c["c_mktsegment"] == segment
+            select c
+let valid_orders = _query(orders, [{"items": building_customers, "on": fun(o, c) => o["o_custkey"] == c["c_custkey"]}], {"select": fun(o, c) => o, "where": fun(o, c) => o["o_orderdate"] < cutoff})
+let valid_lineitems = from l in lineitem
+            where l["l_shipdate"] > cutoff
+            select l
+fun _q0(): any {
+  let _src = valid_orders
+  let _rows = _query(_src, [{"items": valid_lineitems, "on": fun(o, l) => l["l_orderkey"] == o["o_orderkey"]}], {"select": fun(o, l) => (o, l)})
+  let _groups = _group_by(_rows, fun(o, l) => {"o_orderkey": o["o_orderkey"], "o_orderdate": o["o_orderdate"], "o_shippriority": o["o_shippriority"]})
+  return from g in items
+            select {"l_orderkey": _get(_get(g, "key"), "o_orderkey"), "revenue": _sum(from r in g
+            select r[1]["l_extendedprice"] * 1 - r[1]["l_discount"]), "o_orderdate": _get(_get(g, "key"), "o_orderdate"), "o_shippriority": _get(_get(g, "key"), "o_shippriority")}
+}
+let order_line_join = _q0()
 print(order_line_join)
-
-test "Q3 returns revenue per order with correct priority" {
-  expect order_line_join == [
-    {
-      l_orderkey: 100,
-      revenue: 1000.0 * 0.95 + 500.0,
-      o_orderdate: "1995-03-14",
-      o_shippriority: 1
-    }
-  ]
-}
+test_Q3_returns_revenue_per_order_with_correct_priority()
