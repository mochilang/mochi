# Generated by Mochi Python compiler

import dataclasses
import typing

def main():
	@dataclasses.dataclass
	class Customer:
		id: int
		name: str
	@dataclasses.dataclass
	class Order:
		id: int
		customerId: int
		total: int
	@dataclasses.dataclass
	class Entry:
		customerName: str
		order: typing.Any
	customers = [Customer(id=1, name="Alice"), Customer(id=2, name="Bob"), Customer(id=3, name="Charlie"), Customer(id=4, name="Diana")]
	orders = [Order(id=100, customerId=1, total=250), Order(id=101, customerId=2, total=125), Order(id=102, customerId=1, total=300)]
	result = _join(_iter(customers), _iter(orders), lambda c, o: (o.customerId == c.id), lambda c, o: Entry(customerName=c.name, order=o), False, True)
	print("--- Right Join using syntax ---")
	for entry in _iter(result):
		if entry.order:
			print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
		else:
			print("Customer", entry.customerName, "has no orders")

def _iter(v):
    if isinstance(v, dict):
        return list(v.keys())
    return v
def _join(left, right, on, build, left_outer=False, right_outer=False):
    res = []
    if right_outer and left_outer:
        matched_rights = [False] * len(right)
        for l in left:
            matched = False
            for ri, r in enumerate(right):
                if on(l, r):
                    matched = True
                    matched_rights[ri] = True
                    res.append(build(l, r))
            if not matched:
                res.append(build(l, None))
        for ri, r in enumerate(right):
            if not matched_rights[ri]:
                res.append(build(None, r))
    elif right_outer:
        for r in right:
            matched = False
            for l in left:
                if on(l, r):
                    matched = True
                    res.append(build(l, r))
            if not matched:
                res.append(build(None, r))
    else:
        for l in left:
            matched = False
            for r in right:
                if on(l, r):
                    matched = True
                    res.append(build(l, r))
            if left_outer and not matched:
                res.append(build(l, None))
    return res
if __name__ == "__main__":
	main()
