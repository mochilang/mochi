# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

from typing import Any, TypeVar

T = TypeVar("T")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


@dataclasses.dataclass
class Person:
    name: str
    age: int
    status: str


people = [
    Person(name="Alice", age=17, status="minor"),
    Person(name="Bob", age=25, status="unknown"),
    Person(name="Charlie", age=18, status="unknown"),
    Person(name="Diana", age=16, status="minor"),
]


def test_update_adult_status():
    assert people == [
        Person(name="Alice", age=17, status="minor"),
        Person(name="Bob", age=26, status="adult"),
        Person(name="Charlie", age=19, status="adult"),
        Person(name="Diana", age=16, status="minor"),
    ]


def main():
    global people
    people = [
        Person(name="Alice", age=17, status="minor"),
        Person(name="Bob", age=25, status="unknown"),
        Person(name="Charlie", age=18, status="unknown"),
        Person(name="Diana", age=16, status="minor"),
    ]
    for _i0, _it1 in enumerate(people):
        name = _get(_it1, "name")
        age = _get(_it1, "age")
        status = _get(_it1, "status")
        if age >= 18:
            setattr(_it1, "status", "adult")
            setattr(_it1, "age", (age + 1))
        people[_i0] = _it1
    print("ok")
    test_update_adult_status()


if __name__ == "__main__":
    main()
