generated code does not match expected
- // dataset-sort-take-limit.mochi
+ let T = TypeVar('T')
- 
+ fun _sort_key(k) {
- type Product {
+   if isinstance(k, (list, tuple, dict)) {
-   name: string
+   return str(k)
-   price: int
+ }
- }
+   return k
- 
+ }
- let products = [
+ let products = [Product(name='Laptop', price=1500), Product(name='Smartphone', price=900), Product(name='Tablet', price=600), Product(name='Monitor', price=300), Product(name='Keyboard', price=100), Product(name='Mouse', price=50), Product(name='Headphones', price=200)]
-   Product { name: "Laptop", price: 1500 },
+ let expensive = None
-   Product { name: "Smartphone", price: 900 },
+ fun main() {
-   Product { name: "Tablet", price: 600 },
+   let products = [ Product(name="Laptop", price=1500), Product(name="Smartphone", price=900), Product(name="Tablet", price=600), Product(name="Monitor", price=300), Product(name="Keyboard", price=100), Product(name="Mouse", price=50), Product(name="Headphones", price=200), ]
-   Product { name: "Monitor", price: 300 },
+   let expensive = [ p for p in ( (sorted([p for p in products], key=lambda p: _sort_key((-p.price))))[ max(1, 0) : ] )[: max(3, 0)] ]
-   Product { name: "Keyboard", price: 100 },
+   print("--- Top products (excluding most expensive) ---")
-   Product { name: "Mouse", price: 50 },
+   for item in expensive {
-   Product { name: "Headphones", price: 200 }
+   print(item.name, "costs $", item.price)
- ]
+ }
- 
+ }
- let expensive = from p in products
+ 
-                 sort by -p.price
-                 skip 1
-                 take 3
-                 select p
- 
- print("--- Top products (excluding most expensive) ---")
- for item in expensive {
-   print(item.name, "costs $", item.price)
- }
- 
