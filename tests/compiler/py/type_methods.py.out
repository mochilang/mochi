# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

from typing import Any, TypeVar

T = TypeVar("T")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


@dataclasses.dataclass
class Counter:
    value: int

    def inc(self) -> int:
        self.value = self.value + 1
        return self.value


c = Counter(value=0)


def main():
    global c
    c = Counter(value=0)
    print(_get(c, "inc")())
    print(_get(c, "inc")())


if __name__ == "__main__":
    main()
