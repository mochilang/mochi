# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def levelOrder(root: Tree) -> list[list[int]]:
	if (lambda _t0=root: True if isinstance(_t0, Leaf) else False)():
		return []
	res = []
	q = [root]
	while (len(q) > 0):
		level = []
		_next = []
		for node in q:
			if (lambda _t1=node: False if isinstance(_t1, Leaf) else True)():
				level = (level + [node.value])
				if (lambda _t2=node.left: False if isinstance(_t2, Leaf) else True)():
					_next = (_next + [node.left])
				if (lambda _t3=node.right: False if isinstance(_t3, Leaf) else True)():
					_next = (_next + [node.right])
		res = (res + [level])
		q = _next
	return res

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

tree = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))

def main():
	tree = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))
	print(levelOrder(tree))

if __name__ == "__main__":
	main()
