#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v)
  (cond
    [(eq? v #t) "true"]
    [(eq? v #f) "false"]
    [(void? v) "<nil>"]
    [(list? v) (string-join (map _to_string v) " ")]
    [else (format "~a" v)]))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define customers (list (hash 'id 1 'name "Alice") (hash 'id 2 'name "Bob") (hash 'id 3 'name "Charlie")))
(define orders (list (hash 'id 100 'customerId 1) (hash 'id 101 'customerId 1) (hash 'id 102 'customerId 2)))
(define stats (let ([groups (make-hash)])
  (for* ([c customers]) (let ((o (findf (lambda (o) (equal? (hash-ref o 'customerId) (hash-ref c 'id))) orders))) (let* ([key (hash-ref c 'name)] [bucket (hash-ref groups key '())]) (hash-set! groups key (cons (hash 'c c 'o o) bucket)))))
  (define _groups (for/list ([k (hash-keys groups)]) (hash 'key k 'items (hash-ref groups k))))
  (for/list ([g _groups]) (hash 'name (hash-ref g 'key) 'count (if (and (hash? (for*/list ([r (hash-ref g 'items)] #:when (and (hash-ref r 'o))) r)) (hash-has-key? (for*/list ([r (hash-ref g 'items)] #:when (and (hash-ref r 'o))) r) 'items)) (length (hash-ref (for*/list ([r (hash-ref g 'items)] #:when (and (hash-ref r 'o))) r) 'items)) (length (for*/list ([r (hash-ref g 'items)] #:when (and (hash-ref r 'o))) r)))))))
(displayln (_to_string "--- Group Left Join ---"))
(for ([s (if (hash? stats) (hash-keys stats) stats)])
(displayln (string-join (map _to_string (list (hash-ref s 'name) "orders:" (hash-ref s 'count))) " "))
)
