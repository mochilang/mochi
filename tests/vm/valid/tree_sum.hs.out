-- Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import GHC.Generics (Generic)

data Tree
  = Leaf
  | Node {left :: (), value :: Int, right :: ()}
  deriving (Eq, Show, Generic)

sum_tree :: () -> Int
sum_tree t = (case t of Leaf -> 0; Node left value right -> ((sum_tree left + value) + sum_tree right))

t = Node {left = Leaf, value = 1, right = Node {left = Leaf, value = 2, right = Leaf}}

main :: IO ()
main = do
  print (sum_tree t)
