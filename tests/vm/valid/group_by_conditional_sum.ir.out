func main (regs=79)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  Const        r1, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by i.cat into g
  Const        r11, "cat"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // from i in items
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by i.cat into g
  Move         r19, r12
  // from i in items
  Const        r20, "items"
  Const        r21, []
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Move         r7, r23
L1:
  Const        r24, "items"
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Const        r28, 1
  AddInt       r5, r5, r28
  Jump         L2
L0:
  Const        r29, 0
  Len          r30, r7
L10:
  Less         r31, r29, r30
  JumpIfFalse  r31, L3
  Index        r32, r7, r29
  Move         r33, r32
  // cat: g.key,
  Const        r35, "key"
  Index        r36, r33, r35
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r38, []
  IterPrep     r39, r33
  Len          r40, r39
  Const        r41, 0
L7:
  Less         r42, r41, r40
  JumpIfFalse  r42, L4
  Index        r43, r39, r41
  Move         r44, r43
  Const        r45, "flag"
  Index        r46, r44, r45
  JumpIfFalse  r46, L5
  Const        r47, "val"
  Index        r48, r44, r47
  Move         r49, r48
  Jump         L6
L5:
  Const        r49, 0
L6:
  Append       r51, r38, r49
  Move         r38, r51
  AddInt       r41, r41, r28
  Jump         L7
L4:
  Sum          r52, r38
  // sum(from x in g select x.val)
  Const        r53, []
  IterPrep     r54, r33
  Len          r55, r54
  Const        r56, 0
L9:
  Less         r57, r56, r55
  JumpIfFalse  r57, L8
  Index        r58, r54, r56
  Move         r44, r58
  Const        r59, "val"
  Index        r60, r44, r59
  Append       r61, r53, r60
  Move         r53, r61
  AddInt       r56, r56, r28
  Jump         L9
L8:
  Sum          r62, r53
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r63, r52, r62
  // cat: g.key,
  Const        r64, "cat"
  Move         r65, r36
  // share:
  Const        r66, "share"
  Move         r67, r63
  // select {
  MakeMap      r68, 2, r64
  // sort by g.key
  Const        r69, "key"
  Index        r70, r33, r69
  Move         r71, r70
  // from i in items
  Move         r72, r68
  MakeList     r73, 2, r71
  Append       r74, r2, r73
  Move         r2, r74
  Const        r29, 1
  Jump         L10
L3:
  // sort by g.key
  Sort         r77, r2
  // from i in items
  Move         r2, r77
  // let result =
  Move         r78, r2
  // print(result)
  Print        r78
  Return       r0
