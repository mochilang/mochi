func main (regs=88)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // share:
  Const        r4, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r5, "flag"
  Const        r6, "val"
  // from i in items
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Move         r11, r1
L2:
  LessInt      r13, r9, r8
  JumpIfFalse  r13, L0
  Index        r14, r7, r9
  // group by i.cat into g
  Index        r16, r14, r2
  Str          r17, r16
  In           r18, r17, r10
  JumpIfTrue   r18, L1
  // from i in items
  Move         r19, r1
  Const        r20, "__group__"
  Const        r21, true
  Move         r22, r3
  // group by i.cat into g
  Move         r23, r16
  // from i in items
  Const        r24, "items"
  Move         r25, r19
  Const        r26, "count"
  Move         r27, r9
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  MakeMap      r36, 4, r28
  SetIndex     r10, r17, r36
  Append       r11, r11, r36
L1:
  Move         r38, r24
  Index        r39, r10, r17
  Index        r40, r39, r38
  Append       r41, r40, r14
  SetIndex     r39, r38, r41
  Move         r42, r26
  Index        r43, r39, r42
  Const        r44, 1
  AddInt       r45, r43, r44
  SetIndex     r39, r42, r45
  AddInt       r9, r9, r44
  Jump         L2
L0:
  Const        r47, 0
  Move         r46, r47
  Len          r48, r11
L9:
  LessInt      r49, r46, r48
  JumpIfFalse  r49, L3
  Index        r51, r11, r46
  // cat: g.key,
  Move         r52, r2
  Index        r53, r51, r3
  // share:
  Move         r54, r4
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Move         r55, r19
  IterPrep     r56, r51
  Len          r57, r56
  Move         r58, r47
L6:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L4
  Index        r61, r56, r58
  Index        r62, r61, r5
  JumpIfFalse  r62, L5
L5:
  Append       r55, r55, r47
  AddInt       r58, r58, r44
  Jump         L6
L4:
  Sum          r66, r55
  // sum(from x in g select x.val)
  Move         r67, r1
  IterPrep     r68, r51
  Len          r69, r68
  Move         r70, r47
L8:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L7
  Index        r61, r68, r70
  Index        r73, r61, r6
  Append       r67, r67, r73
  AddInt       r70, r70, r44
  Jump         L8
L7:
  Sum          r75, r67
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r76, r66, r75
  // cat: g.key,
  Move         r77, r52
  Move         r78, r53
  // share:
  Move         r79, r54
  Move         r80, r76
  // select {
  MakeMap      r81, 2, r77
  // sort by g.key
  Index        r83, r51, r3
  // from i in items
  Move         r84, r81
  MakeList     r85, 2, r83
  Append       r1, r1, r85
  AddInt       r46, r46, r44
  Jump         L9
L3:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
