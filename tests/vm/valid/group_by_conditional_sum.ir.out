func main (regs=78)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  Const        r1, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by i.cat into g
  Const        r11, "cat"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  Move         r19, r12
  Const        r20, "items"
  // from i in items
  Const        r21, []
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Move         r7, r23
L1:
  Index        r24, r6, r13
  Index        r25, r24, r20
  Append       r26, r25, r9
  SetIndex     r24, r20, r26
  Const        r27, 1
  AddInt       r5, r5, r27
  Jump         L2
L0:
  Const        r28, 0
  Len          r29, r7
L10:
  Less         r30, r28, r29
  JumpIfFalse  r30, L3
  Index        r31, r7, r28
  Move         r32, r31
  // cat: g.key,
  Const        r34, "key"
  Index        r35, r32, r34
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r37, []
  IterPrep     r38, r32
  Len          r39, r38
  Const        r40, 0
L7:
  Less         r41, r40, r39
  JumpIfFalse  r41, L4
  Index        r42, r38, r40
  Move         r43, r42
  Const        r44, "flag"
  Index        r45, r43, r44
  JumpIfFalse  r45, L5
  Const        r46, "val"
  Index        r47, r43, r46
  Move         r48, r47
  Jump         L6
L5:
  Const        r48, 0
L6:
  Append       r50, r37, r48
  Move         r37, r50
  AddInt       r40, r40, r27
  Jump         L7
L4:
  Sum          r51, r37
  // sum(from x in g select x.val)
  Const        r52, []
  IterPrep     r53, r32
  Len          r54, r53
  Const        r55, 0
L9:
  Less         r56, r55, r54
  JumpIfFalse  r56, L8
  Index        r57, r53, r55
  Move         r43, r57
  Const        r58, "val"
  Index        r59, r43, r58
  Append       r60, r52, r59
  Move         r52, r60
  AddInt       r55, r55, r27
  Jump         L9
L8:
  Sum          r61, r52
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r62, r51, r61
  // cat: g.key,
  Const        r63, "cat"
  Move         r64, r35
  // share:
  Const        r65, "share"
  Move         r66, r62
  // select {
  MakeMap      r67, 2, r63
  // sort by g.key
  Const        r68, "key"
  Index        r69, r32, r68
  Move         r70, r69
  // from i in items
  Move         r71, r67
  MakeList     r72, 2, r70
  Append       r73, r2, r72
  Move         r2, r73
  Const        r28, 1
  Jump         L10
L3:
  // sort by g.key
  Sort         r76, r2
  // from i in items
  Move         r2, r76
  // let result =
  Move         r77, r2
  // print(result)
  Print        r77
  Return       r0
