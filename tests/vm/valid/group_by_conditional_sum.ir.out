func main (regs=56)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r2, "flag"
  Const        r3, "val"
  // group by i.cat into g
  Const        r4, "cat"
  // cat: g.key,
  Const        r5, "key"
  // from i in items
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Const        r11, []
L5:
  LessInt      r12, r9, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r9
  // group by i.cat into g
  Index        r15, r13, r4
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Index        r16, r13, r2
  JumpIfFalse  r16, L1
  Index        r18, r13, r3
  Jump         L2
L1:
  Const        r19, 0
  Move         r18, r19
L2:
  // sum(from x in g select x.val)
  Index        r20, r13, r3
  // group by i.cat into g
  Str          r21, r15
  In           r22, r21, r10
  JumpIfTrue   r22, L3
  // from i in items
  Const        r23, "__group__"
  Const        r24, true
  // group by i.cat into g
  Move         r25, r15
  // from i in items
  Const        r26, "__agg0"
  Const        r27, "__agg1"
  MakeMap      r28, 4, r23
  SetIndex     r10, r21, r28
  Append       r29, r11, r28
L3:
  Index        r30, r10, r21
  JumpIfFalse  r22, L4
  Index        r31, r30, r26
  Add          r32, r31, r18
  SetIndex     r30, r26, r32
  Index        r33, r30, r27
  Add          r34, r33, r20
  SetIndex     r30, r27, r34
L4:
  Const        r35, 1
  AddInt       r9, r9, r35
  Jump         L5
L0:
  Move         r36, r19
  Const        r37, 0
L7:
  LessInt      r38, r36, r37
  JumpIfFalse  r38, L6
  Index        r40, r11, r36
  // cat: g.key,
  Const        r41, "cat"
  Index        r42, r40, r5
  // share:
  Const        r43, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Index        r44, r40, r26
  // select {
  MakeMap      r49, 2, r41
  // sort by g.key
  Index        r51, r40, r5
  // from i in items
  Move         r52, r49
  MakeList     r53, 2, r51
  Append       r1, r1, r53
  AddInt       r36, r36, r35
  Jump         L7
L6:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
