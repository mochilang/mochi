func main (regs=81)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r5, "flag"
  Const        r6, "val"
  // from i in items
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Const        r11, []
L2:
  LessInt      r12, r9, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r9
  // group by i.cat into g
  Index        r15, r13, r2
  Str          r16, r15
  In           r17, r16, r10
  JumpIfTrue   r17, L1
  // from i in items
  Const        r18, []
  Const        r19, "__group__"
  Const        r20, true
  // group by i.cat into g
  Move         r21, r15
  // from i in items
  Const        r22, "items"
  Move         r23, r18
  Const        r24, "count"
  Const        r25, 0
  Move         r26, r19
  Move         r27, r20
  Move         r28, r3
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r10, r16, r34
L1:
  Index        r36, r10, r16
  Index        r37, r36, r22
  Append       r38, r37, r13
  SetIndex     r36, r22, r38
  Index        r39, r36, r24
  Const        r40, 1
  AddInt       r41, r39, r40
  SetIndex     r36, r24, r41
  AddInt       r9, r9, r40
  Jump         L2
L0:
  Move         r42, r25
  Const        r43, 0
L9:
  LessInt      r44, r42, r43
  JumpIfFalse  r44, L3
  Index        r46, r11, r42
  // cat: g.key,
  Const        r47, "cat"
  Index        r48, r46, r3
  // share:
  Const        r49, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r50, []
  IterPrep     r51, r46
  Len          r52, r51
  Move         r53, r25
L6:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L4
  Index        r56, r51, r53
  Index        r57, r56, r5
  JumpIfFalse  r57, L5
L5:
  Append       r50, r50, r25
  AddInt       r53, r53, r40
  Jump         L6
L4:
  // sum(from x in g select x.val)
  Const        r62, []
  IterPrep     r63, r46
  Len          r64, r63
  Move         r65, r25
L8:
  LessInt      r66, r65, r64
  JumpIfFalse  r66, L7
  Index        r56, r63, r65
  Index        r68, r56, r6
  Append       r62, r62, r68
  AddInt       r65, r65, r40
  Jump         L8
L7:
  // select {
  MakeMap      r74, 2, r47
  // sort by g.key
  Index        r76, r46, r3
  // from i in items
  Move         r77, r74
  MakeList     r78, 2, r76
  Append       r1, r1, r78
  AddInt       r42, r42, r40
  Jump         L9
L3:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
