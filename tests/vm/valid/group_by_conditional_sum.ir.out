func main (regs=57)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r2, "flag"
  Const        r3, "val"
  // group by i.cat into g
  Const        r4, "cat"
  // cat: g.key,
  Const        r5, "key"
  // from i in items
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Const        r11, []
L4:
  LessInt      r12, r9, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r9
  // group by i.cat into g
  Index        r15, r13, r4
  Str          r16, r15
  In           r17, r16, r10
  JumpIfTrue   r17, L1
  // from i in items
  Const        r18, "__group__"
  Const        r19, true
  // group by i.cat into g
  Move         r20, r15
  // from i in items
  Const        r21, "__agg1"
  Const        r22, 0
  Const        r23, "__agg0"
  MakeMap      r24, 4, r18
  SetIndex     r10, r16, r24
  Append       r25, r11, r24
L1:
  Index        r26, r10, r16
  Index        r27, r26, r21
  // sum(from x in g select x.val)
  Index        r28, r13, r3
  // from i in items
  Add          r29, r27, r28
  SetIndex     r26, r21, r29
  Index        r30, r26, r23
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Index        r31, r13, r2
  JumpIfFalse  r31, L2
  Jump         L3
L2:
  Const        r34, 0
L3:
  // from i in items
  Add          r35, r30, r34
  SetIndex     r26, r23, r35
  Const        r36, 1
  AddInt       r9, r9, r36
  Jump         L4
L0:
  Move         r37, r34
  Const        r38, 0
L6:
  LessInt      r39, r37, r38
  JumpIfFalse  r39, L5
  Index        r41, r11, r37
  // cat: g.key,
  Const        r42, "cat"
  Index        r43, r41, r5
  // share:
  Const        r44, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Index        r45, r41, r23
  // select {
  MakeMap      r50, 2, r42
  // sort by g.key
  Index        r52, r41, r5
  // from i in items
  Move         r53, r50
  MakeList     r54, 2, r52
  Append       r1, r1, r54
  AddInt       r37, r37, r36
  Jump         L6
L5:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
