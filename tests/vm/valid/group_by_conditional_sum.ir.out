func main (regs=85)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  Move         r1, r0
  // from i in items
  Const        r2, []
  // group by i.cat into g
  Const        r3, "cat"
  // cat: g.key,
  Const        r3, "cat"
  Const        r4, "key"
  // share:
  Const        r5, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r6, "flag"
  Const        r7, "val"
  // sum(from x in g select x.val)
  Const        r7, "val"
  // sort by g.key
  Const        r4, "key"
  // from i in items
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  // group by i.cat into g
  Const        r3, "cat"
  Index        r17, r16, r3
  Str          r18, r17
  In           r19, r18, r11
  JumpIfTrue   r19, L1
  // from i in items
  Const        r13, []
  Const        r20, "__group__"
  Const        r21, true
  Const        r4, "key"
  // group by i.cat into g
  Move         r22, r17
  // from i in items
  Const        r23, "items"
  Move         r24, r13
  Const        r25, "count"
  Const        r26, 0
  Move         r27, r20
  Move         r28, r21
  Move         r29, r4
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  MakeMap      r35, 4, r27
  SetIndex     r11, r18, r35
  Append       r36, r12, r35
  Move         r12, r36
L1:
  Const        r23, "items"
  Index        r37, r11, r18
  Index        r38, r37, r23
  Append       r39, r38, r15
  SetIndex     r37, r23, r39
  Const        r25, "count"
  Index        r40, r37, r25
  Const        r41, 1
  AddInt       r42, r40, r41
  SetIndex     r37, r25, r42
  Const        r41, 1
  AddInt       r10, r10, r41
  Jump         L2
L0:
  Const        r26, 0
  Move         r43, r26
  Len          r44, r12
L8:
  LessInt      r45, r43, r44
  JumpIfFalse  r45, L3
  Index        r46, r12, r43
  Move         r47, r46
  // cat: g.key,
  Const        r48, "cat"
  Const        r4, "key"
  Index        r49, r47, r4
  // share:
  Const        r50, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r51, []
  Const        r6, "flag"
  Const        r7, "val"
  IterPrep     r52, r47
  Len          r53, r52
  Const        r26, 0
  Move         r54, r26
L5:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r56, r52, r54
  Move         r57, r56
  Const        r6, "flag"
  Index        r58, r57, r6
  Const        r7, "val"
  Index        r59, r57, r7
  Const        r26, 0
  Select       60,58,59,26
  Append       r61, r51, r60
  Move         r51, r61
  Const        r41, 1
  AddInt       r54, r54, r41
  Jump         L5
L4:
  Sum          r62, r51
  // sum(from x in g select x.val)
  Const        r63, []
  Const        r7, "val"
  IterPrep     r64, r47
  Len          r65, r64
  Const        r26, 0
  Move         r66, r26
L7:
  LessInt      r67, r66, r65
  JumpIfFalse  r67, L6
  Index        r68, r64, r66
  Move         r57, r68
  Const        r7, "val"
  Index        r69, r57, r7
  Append       r70, r63, r69
  Move         r63, r70
  Const        r41, 1
  AddInt       r66, r66, r41
  Jump         L7
L6:
  Sum          r71, r63
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r72, r62, r71
  // cat: g.key,
  Move         r73, r48
  Move         r74, r49
  // share:
  Move         r75, r50
  Move         r76, r72
  // select {
  MakeMap      r77, 2, r73
  // sort by g.key
  Const        r4, "key"
  Index        r80, r47, r4
  Move         r78, r80
  // from i in items
  Move         r79, r77
  MakeList     r81, 2, r78
  Append       r82, r2, r81
  Move         r2, r82
  Const        r41, 1
  AddInt       r43, r43, r41
  Jump         L8
L3:
  // sort by g.key
  Sort         r83, r2
  // from i in items
  Move         r2, r83
  // let result =
  Move         r84, r2
  // print(result)
  Print        r84
  Return       r0
