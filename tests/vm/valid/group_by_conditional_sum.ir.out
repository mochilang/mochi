func main (regs=86)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // share:
  Const        r4, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r5, "flag"
  Const        r6, "val"
  // from i in items
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
L2:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  // group by i.cat into g
  Index        r14, r12, r2
  Str          r15, r14
  In           r16, r15, r10
  JumpIfTrue   r16, L1
  // from i in items
  Move         r17, r1
  Const        r18, "__group__"
  Const        r19, true
  Move         r20, r3
  // group by i.cat into g
  Move         r21, r14
  // from i in items
  Const        r22, "items"
  Move         r23, r17
  Const        r24, "count"
  Move         r25, r9
  Move         r26, r18
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r10, r15, r34
L1:
  Move         r35, r22
  Index        r36, r10, r15
  Index        r37, r36, r35
  Append       r38, r37, r12
  SetIndex     r36, r35, r38
  Move         r39, r24
  Index        r40, r36, r39
  Const        r41, 1
  AddInt       r42, r40, r41
  SetIndex     r36, r39, r42
  AddInt       r9, r9, r41
  Jump         L2
L0:
  Values       43,10,0,0
  Const        r45, 0
  Move         r44, r45
  Len          r46, r43
L9:
  LessInt      r47, r44, r46
  JumpIfFalse  r47, L3
  Index        r49, r43, r44
  // cat: g.key,
  Move         r50, r2
  Index        r51, r49, r3
  // share:
  Move         r52, r4
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Move         r53, r1
  IterPrep     r54, r49
  Len          r55, r54
  Move         r56, r45
L6:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L4
  Index        r59, r54, r56
  Index        r60, r59, r5
  JumpIfFalse  r60, L5
L5:
  Append       r53, r53, r45
  AddInt       r56, r56, r41
  Jump         L6
L4:
  Sum          r64, r53
  // sum(from x in g select x.val)
  Move         r65, r1
  IterPrep     r66, r49
  Len          r67, r66
  Move         r68, r45
L8:
  LessInt      r69, r68, r67
  JumpIfFalse  r69, L7
  Index        r59, r66, r68
  Index        r71, r59, r6
  Append       r65, r65, r71
  AddInt       r68, r68, r41
  Jump         L8
L7:
  Sum          r73, r65
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r74, r64, r73
  // cat: g.key,
  Move         r75, r50
  Move         r76, r51
  // share:
  Move         r77, r52
  Move         r78, r74
  // select {
  MakeMap      r79, 2, r75
  // sort by g.key
  Index        r81, r49, r3
  // from i in items
  Move         r82, r79
  MakeList     r83, 2, r81
  Append       r1, r1, r83
  AddInt       r44, r44, r41
  Jump         L9
L3:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
