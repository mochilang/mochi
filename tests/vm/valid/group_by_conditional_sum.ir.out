func main (regs=84)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  Move         r1, r0
  // from i in items
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by i.cat into g
  Const        r11, "cat"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // from i in items
  Const        r15, []
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by i.cat into g
  Move         r19, r12
  // from i in items
  Const        r20, "items"
  Move         r21, r15
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Const        r24, "items"
L1:
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Jump         L2
  Const        r30, 0
  Len          r31, r23
L0:
  Less         r32, r30, r31
  JumpIfFalse  r32, L3
L9:
  Index        r33, r23, r30
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  IterPrep     r40, r33
  Len          r41, r40
  Const        r42, 0
  Less         r43, r42, r41
  JumpIfFalse  r43, L4
  Index        r44, r40, r42
L6:
  Const        r46, "flag"
  Index        r47, r44, r46
  JumpIfFalse  r47, L5
  Jump         L5
  Jump         L6
L5:
  // sum(from x in g select x.val)
  IterPrep     r57, r33
  Len          r58, r57
  Const        r59, 0
  Less         r60, r59, r58
L4:
  JumpIfFalse  r60, L7
L8:
  Jump         L8
  // from i in items
  Jump         L9
L7:
  // sort by g.key
  Sort         r82, r79
  // print(result)
  Print        r82
  Return       r0
