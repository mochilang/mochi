func main (regs=23)
  // let items = [
  Const        r0, [{"cat": "a", "flag": true, "val": 10}, {"cat": "a", "flag": false, "val": 5}, {"cat": "b", "flag": true, "val": 20}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
L7:
  // share:
  Const        r4, "share"
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Const        r5, "flag"
  Const        r6, "val"
L0:
  // from i in items
  IterPrep     r7, r0
L6:
  Len          r8, r7
  Const        r9, 0
L4:
  MakeMap      r10, 0, r0
L2:
  LessInt      r11, r9, r8
L1:
  JumpIfFalse  r11, L0
  Index        r8, r7, r9
  // group by i.cat into g
  Index        r7, r8, r2
  Str          r12, r7
  In           r13, r12, r10
  JumpIfTrue   r13, L1
  // from i in items
  Move         r13, r1
  Const        r14, "__group__"
  Const        r15, true
L5:
  Move         r16, r3
  // group by i.cat into g
  Move         r17, r7
  // from i in items
  Const        r7, "items"
  Move         r18, r13
  Const        r13, "count"
  Move         r19, r9
  Move         r20, r14
  Move         r14, r15
  Move         r15, r16
  Move         r16, r17
  Move         r17, r7
  Move         r21, r18
  Move         r18, r13
  Move         r22, r19
  MakeMap      r19, 4, r20
  SetIndex     r10, r12, r19
  Move         r19, r7
  Index        r7, r10, r12
  Index        r12, r7, r19
  Append       r22, r12, r8
  SetIndex     r7, r19, r22
  Move         r22, r13
  Index        r13, r7, r22
  Const        r12, 1
  AddInt       r19, r13, r12
  SetIndex     r7, r22, r19
  AddInt       r9, r9, r12
  Jump         L2
  Values       19,10,0,0
  Const        r10, 0
  Move         r13, r10
  Len          r22, r19
  LessInt      r7, r13, r22
  JumpIfFalse  r7, L3
  Index        r7, r19, r13
  // cat: g.key,
  Move         r19, r2
  Index        r2, r7, r3
  // share:
  Move         r22, r4
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Move         r4, r1
  IterPrep     r11, r7
  Len          r9, r11
  Move         r8, r10
  LessInt      r18, r8, r9
  JumpIfFalse  r18, L4
  Index        r18, r11, r8
  Index        r11, r18, r5
  JumpIfFalse  r11, L5
  Append       r4, r4, r10
  AddInt       r8, r8, r12
  Jump         L2
  Sum          r11, r4
  // sum(from x in g select x.val)
  Move         r8, r1
  IterPrep     r5, r7
  Len          r9, r5
  Move         r21, r10
  LessInt      r10, r21, r9
  JumpIfFalse  r10, L6
  Index        r18, r5, r21
  Index        r10, r18, r6
  Append       r8, r8, r10
  AddInt       r21, r21, r12
  Jump         L4
  Sum          r21, r8
  // sum(from x in g select if x.flag { x.val } else { 0 }) /
  Div          r8, r11, r21
  // cat: g.key,
  Move         r21, r19
  Move         r10, r2
  // share:
  Move         r2, r22
  Move         r22, r8
  // select {
  MakeMap      r8, 2, r21
  // sort by g.key
  Index        r22, r7, r3
  // from i in items
  Move         r7, r8
  MakeList     r8, 2, r22
  Append       r1, r1, r8
  AddInt       r13, r13, r12
  Jump         L7
L3:
  // sort by g.key
  Sort         r1, r1
  // print(result)
  Print        r1
  Return       r0
