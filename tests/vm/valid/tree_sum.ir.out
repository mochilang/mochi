func main (regs=12)
  // left: Leaf,
  Const        r0, "__name"
  Const        r1, "Leaf"
  MakeMap      r2, 1, r0
  // value: 1,
  Const        r3, 1
  // left: Leaf,
  MakeMap      r4, 1, r0
  // value: 2,
  Const        r5, 2
  // right: Leaf
  MakeMap      r6, 1, r0
  // right: Node {
  Move         r1, r0
  Const        r7, "Node"
  // left: Leaf,
  Const        r8, "left"
  Move         r9, r4
  // value: 2,
  Const        r4, "value"
  Move         r10, r5
  // right: Leaf
  Const        r5, "right"
  Move         r11, r6
  // right: Node {
  MakeMap      r6, 4, r1
  // let t = Node {
  Move         r11, r0
  Move         r10, r7
  // left: Leaf,
  Move         r7, r8
  Move         r8, r2
  // value: 1,
  Move         r2, r4
  Move         r4, r3
  // right: Node {
  Move         r3, r5
  Move         r5, r6
  // let t = Node {
  MakeMap      r6, 4, r11
  // print(sum_tree(t))
  Call         r5, sum_tree, r6
  Print        r5
  Return       r0

  // fun sum_tree(t: Tree): int {
func sum_tree (regs=6)
  // Leaf => 0
  Const        r1, "__name"
  Index        r2, r0, r1
L0:
  Const        r3, "Leaf"
  Equal        r4, r2, r3
  JumpIfFalse  r4, L0
  Const        r4, 0
  Jump         L1
  // Node(left, value, right) => sum_tree(left) + value + sum_tree(right)
  Index        r3, r0, r1
  Const        r1, "Node"
  Equal        r2, r3, r1
  JumpIfFalse  r2, L2
  Const        r2, "left"
  Index        r1, r0, r2
  Const        r2, "value"
  Index        r3, r0, r2
  Const        r2, "right"
  Index        r5, r0, r2
  Move         r2, r1
  Call         r1, 4, r2, r3, r4, r5
  Add          r2, r1, r3
  Move         r1, r5
  Call         r5, 4, r1, r2, r3, r4
  Add          r4, r2, r5
  Jump         L1
L2:
  Const        r4, nil
L1:
  // return match t {
  Return       r4
