func main (regs=27)
  // left: Leaf,
  Const        r0, "__name"
  Const        r1, "Leaf"
  MakeMap      r2, 1, r0
  // value: 1,
  Const        r3, 1
  // left: Leaf,
  MakeMap      r4, 1, r0
  // value: 2,
  Const        r5, 2
  // right: Leaf
  MakeMap      r6, 1, r0
  // right: Node {
  Const        r7, "__name"
  Const        r8, "Node"
  // left: Leaf,
  Const        r9, "left"
  Move         r10, r4
  // value: 2,
  Const        r11, "value"
  Move         r12, r5
  // right: Leaf
  Const        r13, "right"
  Move         r14, r6
  // right: Node {
  MakeMap      r15, 4, r7
  // let t = Node {
  Const        r16, "__name"
  Const        r17, "Node"
  // left: Leaf,
  Const        r18, "left"
  Move         r19, r2
  // value: 1,
  Const        r20, "value"
  Move         r21, r3
  // right: Node {
  Const        r22, "right"
  Move         r23, r15
  // let t = Node {
  MakeMap      r25, 4, r16
  // print(sum_tree(t))
  Call         r26, sum_tree, r25
  Print        r26
  Return       r0

  // fun sum_tree(t: Tree): int {
func sum_tree (regs=23)
  // Leaf => 0
  Const        r3, "__name"
  Index        r4, r0, r3
  Const        r5, "Leaf"
  Equal        r2, r4, r5
  JumpIfFalse  r2, L0
  Const        r1, 0
  Jump         L1
L0:
  // Node(left, value, right) => sum_tree(left) + value + sum_tree(right)
  Const        r8, "__name"
  Index        r9, r0, r8
  Const        r10, "Node"
  Equal        r7, r9, r10
  JumpIfFalse  r7, L2
  Const        r11, "left"
  Index        r12, r0, r11
  Const        r13, "value"
  Index        r14, r0, r13
  Const        r15, "right"
  Index        r16, r0, r15
  Move         r17, r12
  Call         r18, sum_tree, r17
  Add          r19, r18, r14
  Move         r20, r16
  Call         r21, sum_tree, r20
  Add          r1, r19, r21
  Jump         L1
L2:
  Const        r1, nil
L1:
  // return match t {
  Return       r1
