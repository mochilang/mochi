func main (regs=32)
  // left: Leaf,
  Const        r0, "__name"
  Const        r1, "Leaf"
  MakeMap      r2, 1, r0
  // value: 1,
  Const        r3, 1
  // left: Leaf,
  Const        r4, "__name"
  Const        r5, "Leaf"
  MakeMap      r6, 1, r4
  // value: 2,
  Const        r7, 2
  // right: Leaf
  Const        r8, "__name"
  Const        r9, "Leaf"
  MakeMap      r10, 1, r8
  // right: Node {
  Const        r11, "__name"
  Const        r12, "Node"
  // left: Leaf,
  Const        r13, "left"
  Move         r14, r6
  // value: 2,
  Const        r15, "value"
  Move         r16, r7
  // right: Leaf
  Const        r17, "right"
  Move         r18, r10
  // right: Node {
  MakeMap      r19, 4, r11
  // let t = Node {
  Const        r20, "__name"
  Const        r21, "Node"
  // left: Leaf,
  Const        r22, "left"
  Move         r23, r2
  // value: 1,
  Const        r24, "value"
  Move         r25, r3
  // right: Node {
  Const        r26, "right"
  Move         r27, r19
  // let t = Node {
  MakeMap      r28, 4, r20
  Move         r29, r28
  // print(sum_tree(t))
  Move         r30, r29
  Call         r31, sum_tree, r30
  Print        r31
  Return       r0

  // fun sum_tree(t: Tree): int {
func sum_tree (regs=23)
  // Leaf => 0
  Const        r3, "__name"
  Index        r4, r0, r3
  Const        r5, "Leaf"
  Equal        r2, r4, r5
  JumpIfFalse  r2, L0
  Const        r6, 0
  Move         r1, r6
  Jump         L1
L0:
  // Node(left, value, right) => sum_tree(left) + value + sum_tree(right)
  Const        r8, "__name"
  Index        r9, r0, r8
  Const        r10, "Node"
  Equal        r7, r9, r10
  JumpIfFalse  r7, L2
  Const        r11, "left"
  Index        r12, r0, r11
  Const        r13, "value"
  Index        r14, r0, r13
  Const        r15, "right"
  Index        r16, r0, r15
  Move         r17, r12
  Call         r18, sum_tree, r17
  Add          r19, r18, r14
  Move         r20, r16
  Call         r21, sum_tree, r20
  Add          r22, r19, r21
  Move         r1, r22
  Jump         L1
L2:
  Const        r1, nil
L1:
  // return match t {
  Return       r1
  Return       r0
