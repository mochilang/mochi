func main (regs=171)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_name: c.c_name,
  Const        r8, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r9, "c_acctbal"
  // c_address: c.c_address,
  Const        r10, "c_address"
  // c_phone: c.c_phone,
  Const        r11, "c_phone"
  // c_comment: c.c_comment,
  Const        r12, "c_comment"
  // n_name: n.n_name
  Const        r13, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r14, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r15, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r16, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r17, "revenue"
  Const        r18, "l"
  Const        r19, "l_extendedprice"
  Const        r20, "l_discount"
  // from c in customer
  MakeMap      r21, 0, r0
  Const        r22, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L11:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r29, r2
  Len          r30, r29
  Const        r31, 0
L10:
  Less         r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_custkey"
  Index        r36, r34, r35
  Index        r37, r28, r7
  Equal        r38, r36, r37
  JumpIfFalse  r38, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r39, r3
  Len          r40, r39
  Const        r41, 0
L9:
  Less         r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "l_orderkey"
  Index        r46, r44, r45
  Const        r47, "o_orderkey"
  Index        r48, r34, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r50, r0
  Len          r51, r50
  Const        r52, 0
L8:
  Less         r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Const        r56, "n_nationkey"
  Index        r57, r55, r56
  Const        r58, "c_nationkey"
  Index        r59, r28, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // where o.o_orderdate >= start_date &&
  Index        r61, r34, r14
  LessEq       r62, r4, r61
  // o.o_orderdate < end_date &&
  Index        r63, r34, r14
  Less         r64, r63, r5
  // l.l_returnflag == "R"
  Index        r65, r44, r15
  Const        r66, "R"
  Equal        r67, r65, r66
  // where o.o_orderdate >= start_date &&
  Move         r68, r62
  JumpIfFalse  r68, L5
L5:
  // o.o_orderdate < end_date &&
  Move         r69, r64
  JumpIfFalse  r69, L6
  Move         r69, r67
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r69, L4
  // from c in customer
  Const        r70, "c"
  Move         r71, r28
  Const        r72, "o"
  Move         r73, r34
  Move         r74, r44
  Const        r75, "n"
  Move         r76, r55
  MakeMap      r77, 4, r70
  // group by {
  MakeMap      r92, 7, r7
  Str          r93, r92
  In           r94, r93, r21
  JumpIfTrue   r94, L7
  // from c in customer
  Const        r95, []
  Const        r96, "__group__"
  Const        r97, true
  // group by {
  Move         r98, r92
  // from c in customer
  Const        r99, "items"
  Move         r100, r95
  MakeMap      r101, 3, r96
  SetIndex     r21, r93, r101
  Append       r22, r22, r101
L7:
  Index        r103, r21, r93
  Index        r104, r103, r99
  Append       r105, r104, r77
  SetIndex     r103, r99, r105
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  Const        r106, 1
  AddInt       r52, r52, r106
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r41, r41, r106
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  AddInt       r31, r31, r106
  Jump         L10
L1:
  // from c in customer
  AddInt       r25, r25, r106
  Jump         L11
L0:
  Const        r108, 0
  Move         r107, r108
  Len          r109, r22
L17:
  LessInt      r110, r107, r109
  JumpIfFalse  r110, L12
  Index        r112, r22, r107
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r117, []
  IterPrep     r118, r112
  Len          r119, r118
  Move         r120, r108
L14:
  LessInt      r121, r120, r119
  JumpIfFalse  r121, L13
  Index        r123, r118, r120
  Index        r124, r123, r18
  Index        r125, r124, r19
  Index        r126, r123, r18
  Index        r127, r126, r20
  Sub          r128, r106, r127
  Mul          r129, r125, r128
  Append       r117, r117, r129
  AddInt       r120, r120, r106
  Jump         L14
L13:
  // select {
  MakeMap      r150, 8, r7
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r151, []
  IterPrep     r152, r112
  Len          r153, r152
  Move         r154, r108
L16:
  LessInt      r155, r154, r153
  JumpIfFalse  r155, L15
  Index        r123, r152, r154
  Index        r157, r123, r18
  Index        r158, r157, r19
  Index        r159, r123, r18
  Index        r160, r159, r20
  Sub          r161, r106, r160
  Mul          r162, r158, r161
  Append       r151, r151, r162
  AddInt       r154, r154, r106
  Jump         L16
L15:
  Sum          r164, r151
  Neg          r166, r164
  // from c in customer
  Move         r167, r150
  MakeList     r168, 2, r166
  Append       r6, r6, r168
  AddInt       r107, r107, r106
  Jump         L17
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // print(result)
  Print        r6
  Return       r0
