func main (regs=221)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  Move         r1, r0
  // let customer = [
  Const        r3, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r5, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r7, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r9, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r11, "1994-01-01"
  // from c in customer
  Const        r12, []
  MakeMap      r13, 0, r0
  Const        r14, []
  IterPrep     r15, r3
  Len          r16, r15
  Const        r17, 0
L11:
  Less         r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r20, r15, r17
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r21, r5
  Len          r22, r21
  Const        r23, 0
L10:
  Less         r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r26, r21, r23
  Const        r27, "o_custkey"
  Index        r28, r26, r27
  Const        r29, "c_custkey"
  Index        r30, r20, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r32, r7
  Len          r33, r32
  Const        r34, 0
L9:
  Less         r35, r34, r33
  JumpIfFalse  r35, L2
  Index        r37, r32, r34
  Const        r38, "l_orderkey"
  Index        r39, r37, r38
  Const        r40, "o_orderkey"
  Index        r41, r26, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L8:
  Less         r46, r45, r44
  JumpIfFalse  r46, L3
  Index        r48, r43, r45
  Const        r49, "n_nationkey"
  Index        r50, r48, r49
  Const        r51, "c_nationkey"
  Index        r52, r20, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L4
  // where o.o_orderdate >= start_date &&
  Const        r54, "o_orderdate"
  Index        r55, r26, r54
  LessEq       r56, r9, r55
  // o.o_orderdate < end_date &&
  Const        r57, "o_orderdate"
  Index        r58, r26, r57
  Less         r59, r58, r11
  // l.l_returnflag == "R"
  Const        r60, "l_returnflag"
  Index        r61, r37, r60
  Const        r62, "R"
  Equal        r63, r61, r62
  // where o.o_orderdate >= start_date &&
  Move         r64, r56
  JumpIfFalse  r64, L5
L5:
  // o.o_orderdate < end_date &&
  Move         r65, r59
  JumpIfFalse  r65, L6
  Move         r65, r63
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r65, L4
  // from c in customer
  Const        r66, "c"
  Move         r67, r20
  Const        r68, "o"
  Move         r69, r26
  Const        r70, "l"
  Move         r71, r37
  Const        r72, "n"
  Move         r73, r48
  MakeMap      r74, 4, r66
  // c_custkey: c.c_custkey,
  Const        r75, "c_custkey"
  Const        r76, "c_custkey"
  Index        r77, r20, r76
  // c_name: c.c_name,
  Const        r78, "c_name"
  Const        r79, "c_name"
  Index        r80, r20, r79
  // c_acctbal: c.c_acctbal,
  Const        r81, "c_acctbal"
  Const        r82, "c_acctbal"
  Index        r83, r20, r82
  // c_address: c.c_address,
  Const        r84, "c_address"
  Const        r85, "c_address"
  Index        r86, r20, r85
  // c_phone: c.c_phone,
  Const        r87, "c_phone"
  Const        r88, "c_phone"
  Index        r89, r20, r88
  // c_comment: c.c_comment,
  Const        r90, "c_comment"
  // group by {
  MakeMap      r103, 7, r75
  Str          r104, r103
  In           r105, r104, r13
  JumpIfTrue   r105, L7
  // from c in customer
  Const        r106, []
  Const        r107, "__group__"
  Const        r108, true
  Const        r109, "key"
  // group by {
  Move         r110, r103
  // from c in customer
  Const        r111, "items"
  Move         r112, r106
  MakeMap      r113, 3, r107
  SetIndex     r13, r104, r113
  Append       r14, r14, r113
L7:
  Const        r115, "items"
  Index        r116, r13, r104
  Index        r117, r116, r115
  Append       r118, r117, r74
  SetIndex     r116, r115, r118
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  Const        r119, 1
  Add          r45, r45, r119
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Const        r121, 1
  Add          r34, r34, r121
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  Const        r123, 1
  Add          r23, r23, r123
  Jump         L10
L1:
  // from c in customer
  Const        r125, 1
  Add          r17, r17, r125
  Jump         L11
L0:
  Const        r127, 0
  Len          r128, r14
L17:
  Less         r129, r127, r128
  JumpIfFalse  r129, L12
  Index        r131, r14, r127
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  IterPrep     r142, r131
  Len          r143, r142
  Const        r144, 0
L14:
  Less         r145, r144, r143
  JumpIfFalse  r145, L13
  Const        r152, 1
  Const        r160, 1
  Add          r144, r144, r160
  Jump         L14
L13:
  // select {
  MakeMap      r191, 8, r75
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r192, []
  IterPrep     r193, r131
  Len          r194, r193
  Const        r195, 0
L16:
  Less         r196, r195, r194
  JumpIfFalse  r196, L15
  Index        r147, r193, r195
  Const        r198, "l"
  Index        r199, r147, r198
  Const        r200, "l_extendedprice"
  Index        r201, r199, r200
  Const        r202, "l"
  Index        r203, r147, r202
  Const        r204, "l_discount"
  Index        r205, r203, r204
  Sub          r206, r152, r205
  Mul          r207, r201, r206
  Append       r192, r192, r207
  Const        r209, 1
  Add          r195, r195, r209
  Jump         L16
L15:
  Sum          r211, r192
  Neg          r213, r211
  // from c in customer
  Move         r214, r191
  MakeList     r215, 2, r213
  Append       r12, r12, r215
  Const        r217, 1
  Add          r127, r127, r217
  Jump         L17
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r12, r12
  // let result =
  Move         r220, r12
  // print(result)
  Print        r220
  Return       r0
