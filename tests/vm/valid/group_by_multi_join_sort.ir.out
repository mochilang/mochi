func main (regs=197)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  // c_custkey: c.c_custkey,
  Const        r7, "c_custkey"
  // c_name: c.c_name,
  Const        r8, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r9, "c_acctbal"
  // c_address: c.c_address,
  Const        r10, "c_address"
  // c_phone: c.c_phone,
  Const        r11, "c_phone"
  // c_comment: c.c_comment,
  Const        r12, "c_comment"
  // n_name: n.n_name
  Const        r13, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r14, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r15, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r16, "key"
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r18, "l"
  Const        r19, "l_extendedprice"
  Const        r20, "l_discount"
  // from c in customer
  MakeMap      r21, 0, r0
  Const        r22, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L11:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r29, r2
  Len          r30, r29
  Const        r31, 0
L10:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_custkey"
  Index        r36, r34, r35
  Index        r37, r28, r7
  Equal        r38, r36, r37
  JumpIfFalse  r38, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r39, r3
  Len          r40, r39
  Const        r41, 0
L9:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "l_orderkey"
  Index        r46, r44, r45
  Const        r47, "o_orderkey"
  Index        r48, r34, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r50, r0
  Len          r51, r50
  Const        r52, 0
L8:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Const        r56, "n_nationkey"
  Index        r57, r55, r56
  Const        r58, "c_nationkey"
  Index        r59, r28, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // where o.o_orderdate >= start_date &&
  Index        r61, r34, r14
  LessEq       r62, r4, r61
  // o.o_orderdate < end_date &&
  Index        r63, r34, r14
  Less         r64, r63, r5
  // l.l_returnflag == "R"
  Index        r65, r44, r15
  Const        r66, "R"
  Equal        r67, r65, r66
  // where o.o_orderdate >= start_date &&
  Move         r68, r62
  JumpIfFalse  r68, L5
L5:
  // o.o_orderdate < end_date &&
  Move         r69, r64
  JumpIfFalse  r69, L6
  Move         r69, r67
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r69, L4
  // from c in customer
  Const        r70, "c"
  Move         r71, r28
  Const        r72, "o"
  Move         r73, r34
  Move         r74, r44
  Const        r75, "n"
  Move         r76, r55
  MakeMap      r77, 4, r70
  // c_custkey: c.c_custkey,
  Const        r78, "c_custkey"
  Index        r79, r28, r7
  // c_name: c.c_name,
  Const        r80, "c_name"
  Index        r81, r28, r8
  // c_acctbal: c.c_acctbal,
  Const        r82, "c_acctbal"
  Index        r83, r28, r9
  // c_address: c.c_address,
  Const        r84, "c_address"
  Index        r85, r28, r10
  // c_phone: c.c_phone,
  Const        r86, "c_phone"
  Index        r87, r28, r11
  // c_comment: c.c_comment,
  Const        r88, "c_comment"
  Index        r89, r28, r12
  // n_name: n.n_name
  Const        r90, "n_name"
  Index        r91, r55, r13
  // group by {
  MakeMap      r99, 7, r78
  Str          r100, r99
  In           r101, r100, r21
  JumpIfTrue   r101, L7
  // from c in customer
  Const        r102, []
  Const        r103, "__group__"
  Const        r104, true
  // group by {
  Move         r105, r99
  // from c in customer
  Const        r106, "items"
  Move         r107, r102
  Const        r108, "count"
  Const        r109, 0
  Move         r110, r103
  Move         r111, r104
  Move         r112, r16
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  Move         r116, r108
  Move         r117, r109
  MakeMap      r118, 4, r110
  SetIndex     r21, r100, r118
  Append       r22, r22, r118
L7:
  Index        r120, r21, r100
  Index        r121, r120, r106
  Append       r122, r121, r77
  SetIndex     r120, r106, r122
  Index        r123, r120, r108
  Const        r124, 1
  AddInt       r125, r123, r124
  SetIndex     r120, r108, r125
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r52, r52, r124
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r41, r41, r124
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  Jump         L10
L1:
  // from c in customer
  Jump         L11
L0:
  Move         r126, r109
  Len          r127, r22
L17:
  LessInt      r128, r126, r127
  JumpIfFalse  r128, L12
  Index        r130, r22, r126
  // c_custkey: g.key.c_custkey,
  Const        r131, "c_custkey"
  Index        r132, r130, r16
  Index        r133, r132, r7
  // c_name: g.key.c_name,
  Const        r134, "c_name"
  Index        r135, r130, r16
  Index        r136, r135, r8
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r137, "revenue"
  Const        r138, []
  IterPrep     r139, r130
  Len          r140, r139
  Move         r141, r109
L14:
  LessInt      r142, r141, r140
  JumpIfFalse  r142, L13
  Index        r143, r139, r141
  Move         r144, r143
  Index        r145, r144, r18
  Index        r146, r145, r19
  Index        r147, r144, r18
  Index        r148, r147, r20
  Sub          r149, r124, r148
  Mul          r150, r146, r149
  Append       r138, r138, r150
  AddInt       r141, r141, r124
  Jump         L14
L13:
  // select {
  MakeMap      r176, 8, r131
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r177, []
  IterPrep     r178, r130
  Len          r179, r178
  Move         r180, r109
L16:
  LessInt      r181, r180, r179
  JumpIfFalse  r181, L15
  Index        r144, r178, r180
  Index        r183, r144, r18
  Index        r184, r183, r19
  Index        r185, r144, r18
  Index        r186, r185, r20
  Sub          r187, r124, r186
  Mul          r188, r184, r187
  Append       r177, r177, r188
  AddInt       r180, r180, r124
  Jump         L16
L15:
  Sum          r190, r177
  Neg          r192, r190
  // from c in customer
  Move         r193, r176
  MakeList     r194, 2, r192
  Append       r6, r6, r194
  AddInt       r126, r126, r124
  Jump         L17
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // print(result)
  Print        r6
  Return       r0
