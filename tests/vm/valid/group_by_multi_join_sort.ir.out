func main (regs=184)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  MakeMap      r7, 0, r0
  Const        r8, []
  IterPrep     r9, r1
  Len          r10, r9
  Const        r11, 0
L11:
  Less         r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r14, r9, r11
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r15, r2
  Len          r16, r15
  Const        r17, 0
L10:
  Less         r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r20, r15, r17
  Const        r21, "o_custkey"
  Index        r22, r20, r21
  Const        r23, "c_custkey"
  Index        r24, r14, r23
  Equal        r25, r22, r24
  JumpIfFalse  r25, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r26, r3
  Len          r27, r26
  Const        r28, 0
L9:
  Less         r29, r28, r27
  JumpIfFalse  r29, L2
  Index        r30, r26, r28
  Move         r31, r30
  Const        r32, "l_orderkey"
  Index        r33, r31, r32
  Const        r34, "o_orderkey"
  Index        r35, r20, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r37, r0
  Len          r38, r37
  Const        r39, 0
L8:
  Less         r40, r39, r38
  JumpIfFalse  r40, L3
  Index        r42, r37, r39
  Const        r43, "n_nationkey"
  Index        r44, r42, r43
  Const        r45, "c_nationkey"
  Index        r46, r14, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L4
  // where o.o_orderdate >= start_date &&
  Const        r48, "o_orderdate"
  Index        r49, r20, r48
  LessEq       r50, r4, r49
  // o.o_orderdate < end_date &&
  Index        r51, r20, r48
  Less         r52, r51, r5
  // l.l_returnflag == "R"
  Const        r53, "l_returnflag"
  Index        r54, r31, r53
  Const        r55, "R"
  Equal        r56, r54, r55
  // where o.o_orderdate >= start_date &&
  Move         r57, r50
  JumpIfFalse  r57, L5
L5:
  // o.o_orderdate < end_date &&
  Move         r58, r52
  JumpIfFalse  r58, L6
  Move         r58, r56
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r58, L4
  // from c in customer
  Const        r59, "c"
  Move         r60, r14
  Const        r61, "o"
  Move         r62, r20
  Const        r63, "l"
  Move         r64, r31
  Const        r65, "n"
  Move         r66, r42
  MakeMap      r67, 4, r59
  // group by {
  MakeMap      r88, 7, r23
  Str          r89, r88
  In           r90, r89, r7
  JumpIfTrue   r90, L7
  // from c in customer
  Const        r91, []
  Const        r92, "__group__"
  Const        r93, true
  Const        r94, "key"
  // group by {
  Move         r95, r88
  // from c in customer
  Const        r96, "items"
  Move         r97, r91
  MakeMap      r98, 3, r92
  SetIndex     r7, r89, r98
  Append       r8, r8, r98
L7:
  Index        r100, r7, r89
  Index        r101, r100, r96
  Append       r102, r101, r67
  SetIndex     r100, r96, r102
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  Const        r103, 1
  Add          r39, r39, r103
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Const        r105, 1
  Add          r28, r28, r105
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  Const        r107, 1
  Add          r17, r17, r107
  Jump         L10
L1:
  // from c in customer
  Const        r109, 1
  Add          r11, r11, r109
  Jump         L11
L0:
  Const        r111, 0
  Len          r113, r8
L17:
  Less         r114, r111, r113
  JumpIfFalse  r114, L12
  Index        r116, r8, r111
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r122, []
  IterPrep     r123, r116
  Len          r124, r123
  Const        r125, 0
L14:
  Less         r126, r125, r124
  JumpIfFalse  r126, L13
  Index        r128, r123, r125
  Index        r129, r128, r63
  Const        r130, "l_extendedprice"
  Index        r131, r129, r130
  Const        r132, 1
  Index        r133, r128, r63
  Const        r134, "l_discount"
  Index        r135, r133, r134
  Sub          r136, r132, r135
  Mul          r137, r131, r136
  Append       r122, r122, r137
  Const        r139, 1
  Add          r125, r125, r139
  Jump         L14
L13:
  // select {
  MakeMap      r160, 8, r23
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Const        r161, []
  IterPrep     r162, r116
  Len          r163, r162
  Const        r164, 0
L16:
  Less         r165, r164, r163
  JumpIfFalse  r165, L15
  Index        r128, r162, r164
  Index        r167, r128, r63
  Index        r168, r167, r130
  Index        r169, r128, r63
  Index        r170, r169, r134
  Sub          r171, r132, r170
  Mul          r172, r168, r171
  Append       r161, r161, r172
  Jump         L16
L15:
  Sum          r176, r161
  Neg          r178, r176
  // from c in customer
  Move         r179, r160
  MakeList     r180, 2, r178
  Append       r6, r6, r180
  Add          r111, r111, r132
  Jump         L17
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // print(result)
  Print        r6
  Return       r0
