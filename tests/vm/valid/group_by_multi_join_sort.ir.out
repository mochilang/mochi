func main (regs=177)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  // let customer = [
  Const        r1, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  // let orders = [
  Const        r2, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  // let lineitem = [
  Const        r3, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  // let start_date = "1993-10-01"
  Const        r4, "1993-10-01"
  // let end_date = "1994-01-01"
  Const        r5, "1994-01-01"
  // from c in customer
  Const        r6, []
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r7, "l"
  Const        r8, "l_extendedprice"
  Const        r9, "l_discount"
  // c_custkey: c.c_custkey,
  Const        r10, "c_custkey"
  // c_name: c.c_name,
  Const        r11, "c_name"
  // c_acctbal: c.c_acctbal,
  Const        r12, "c_acctbal"
  // c_address: c.c_address,
  Const        r13, "c_address"
  // c_phone: c.c_phone,
  Const        r14, "c_phone"
  // c_comment: c.c_comment,
  Const        r15, "c_comment"
  // n_name: n.n_name
  Const        r16, "n_name"
  // where o.o_orderdate >= start_date &&
  Const        r17, "o_orderdate"
  // l.l_returnflag == "R"
  Const        r18, "l_returnflag"
  // c_custkey: g.key.c_custkey,
  Const        r19, "key"
  // from c in customer
  MakeMap      r21, 0, r0
  Const        r22, []
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L11:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r29, r2
  Len          r30, r29
  Const        r31, 0
L10:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "o_custkey"
  Index        r36, r34, r35
  Index        r37, r28, r10
  Equal        r38, r36, r37
  JumpIfFalse  r38, L2
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r39, r3
  Len          r40, r39
  Const        r41, 0
L9:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "l_orderkey"
  Index        r46, r44, r45
  Const        r47, "o_orderkey"
  Index        r48, r34, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r50, r0
  Len          r51, r50
  Const        r52, 0
L8:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Const        r56, "n_nationkey"
  Index        r57, r55, r56
  Const        r58, "c_nationkey"
  Index        r59, r28, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // where o.o_orderdate >= start_date &&
  Index        r61, r34, r17
  LessEq       r62, r4, r61
  // o.o_orderdate < end_date &&
  Index        r63, r34, r17
  Less         r64, r63, r5
  // l.l_returnflag == "R"
  Index        r65, r44, r18
  Const        r66, "R"
  Equal        r67, r65, r66
  // where o.o_orderdate >= start_date &&
  Move         r68, r62
  JumpIfFalse  r68, L5
L5:
  // o.o_orderdate < end_date &&
  Move         r69, r64
  JumpIfFalse  r69, L6
  Move         r69, r67
L6:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r69, L4
  // from c in customer
  Const        r70, "c"
  Move         r71, r28
  Const        r72, "o"
  Move         r73, r34
  Move         r74, r44
  Const        r75, "n"
  Move         r76, r55
  MakeMap      r77, 4, r70
  // c_custkey: c.c_custkey,
  Const        r78, "c_custkey"
  Index        r79, r28, r10
  // c_name: c.c_name,
  Const        r80, "c_name"
  Index        r81, r28, r11
  // c_acctbal: c.c_acctbal,
  Const        r82, "c_acctbal"
  Index        r83, r28, r12
  // c_address: c.c_address,
  Const        r84, "c_address"
  Index        r85, r28, r13
  // c_phone: c.c_phone,
  Const        r86, "c_phone"
  Index        r87, r28, r14
  // c_comment: c.c_comment,
  Const        r88, "c_comment"
  Index        r89, r28, r15
  // n_name: n.n_name
  Const        r90, "n_name"
  Index        r91, r55, r16
  // group by {
  MakeMap      r99, 7, r78
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Index        r100, r77, r7
  Index        r101, r100, r8
  Const        r102, 1
  Index        r103, r77, r7
  Index        r104, r103, r9
  Sub          r105, r102, r104
  Mul          r106, r101, r105
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Index        r107, r77, r7
  Index        r108, r107, r8
  Index        r109, r77, r7
  Index        r110, r109, r9
  Sub          r111, r102, r110
  Mul          r112, r108, r111
  // group by {
  Str          r113, r99
  In           r114, r113, r21
  JumpIfTrue   r114, L7
  // from c in customer
  Const        r115, "__group__"
  Const        r116, true
  // group by {
  Move         r117, r99
  // from c in customer
  Const        r118, []
  Const        r119, "items"
  Move         r120, r118
  Const        r121, "__agg1"
  Const        r122, "__agg0"
  MakeMap      r123, 5, r115
  SetIndex     r21, r113, r123
  Append       r124, r22, r123
  Move         r22, r124
L7:
  Index        r125, r21, r113
  Index        r126, r125, r119
  Append       r127, r126, r77
  SetIndex     r125, r119, r127
  JumpIfFalse  r114, L4
  Index        r128, r125, r122
  Add          r129, r128, r106
  SetIndex     r125, r122, r129
  Index        r130, r125, r121
  Add          r131, r130, r112
  SetIndex     r125, r121, r131
L4:
  // join n in nation on n.n_nationkey == c.c_nationkey
  AddInt       r52, r52, r102
  Jump         L8
L3:
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  AddInt       r41, r41, r102
  Jump         L9
L2:
  // join o in orders on o.o_custkey == c.c_custkey
  Jump         L10
L1:
  // from c in customer
  Jump         L11
L0:
  Const        r132, 0
  Len          r134, r22
L13:
  LessInt      r135, r132, r134
  JumpIfFalse  r135, L12
  Index        r137, r22, r132
  // c_custkey: g.key.c_custkey,
  Const        r138, "c_custkey"
  Index        r139, r137, r19
  Index        r140, r139, r10
  // c_name: g.key.c_name,
  Const        r141, "c_name"
  Index        r142, r137, r19
  Index        r143, r142, r11
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  Const        r144, "revenue"
  Index        r145, r137, r122
  // c_acctbal: g.key.c_acctbal,
  Const        r146, "c_acctbal"
  Index        r147, r137, r19
  Index        r148, r147, r12
  // n_name: g.key.n_name,
  Const        r149, "n_name"
  Index        r150, r137, r19
  Index        r151, r150, r16
  // c_address: g.key.c_address,
  Const        r152, "c_address"
  Index        r153, r137, r19
  // select {
  MakeMap      r169, 8, r138
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Index        r170, r137, r121
  Neg          r172, r170
  // from c in customer
  Move         r173, r169
  MakeList     r174, 2, r172
  Append       r6, r6, r174
  AddInt       r132, r132, r102
  Jump         L13
L12:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         r6, r6
  // print(result)
  Print        r6
  Return       r0
