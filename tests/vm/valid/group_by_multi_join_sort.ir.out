func main (regs=244)
  // let nation = [
  Const        r0, [{"n_name": "BRAZIL", "n_nationkey": 1}]
  Move         r1, r0
  // let customer = [
  Const        r2, [{"c_acctbal": 100, "c_address": "123 St", "c_comment": "Loyal", "c_custkey": 1, "c_name": "Alice", "c_nationkey": 1, "c_phone": "123-456"}]
  Move         r3, r2
  // let orders = [
  Const        r4, [{"o_custkey": 1, "o_orderdate": "1993-10-15", "o_orderkey": 1000}, {"o_custkey": 1, "o_orderdate": "1994-01-02", "o_orderkey": 2000}]
  Move         r5, r4
  // let lineitem = [
  Const        r6, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_orderkey": 1000, "l_returnflag": "R"}, {"l_discount": 0, "l_extendedprice": 500, "l_orderkey": 2000, "l_returnflag": "N"}]
  Move         r7, r6
  // from c in customer
  MakeMap      r13, 0, r0
  IterPrep     r15, r3
  Const        r17, 0
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join o in orders on o.o_custkey == c.c_custkey
  IterPrep     r21, r5
  Const        r23, 0
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  JumpIfFalse  r31, L0
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  IterPrep     r32, r7
  Const        r34, 0
  JumpIfFalse  r35, L0
  Index        r36, r32, r34
  Move         r37, r36
  JumpIfFalse  r42, L0
  // join n in nation on n.n_nationkey == c.c_nationkey
  IterPrep     r43, r1
  Const        r45, 0
  JumpIfFalse  r46, L0
  Index        r47, r43, r45
  Move         r48, r47
  JumpIfFalse  r53, L0
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r64, L0
  // o.o_orderdate < end_date &&
  JumpIfFalse  r65, L1
L1:
  // where o.o_orderdate >= start_date &&
  JumpIfFalse  r65, L0
  // from c in customer
  Const        r66, "c"
  Move         r67, r20
  Const        r68, "o"
  Move         r69, r26
  Const        r70, "l"
  Move         r71, r37
  Const        r72, "n"
  Move         r73, r48
  MakeMap      r74, 4, r66
  // c_custkey: c.c_custkey,
  Const        r75, "c_custkey"
  Const        r76, "c_custkey"
  Index        r77, r20, r76
  // c_name: c.c_name,
  Const        r78, "c_name"
  Const        r79, "c_name"
  Index        r80, r20, r79
  // c_acctbal: c.c_acctbal,
  Const        r81, "c_acctbal"
  Const        r82, "c_acctbal"
  Index        r83, r20, r82
  // c_address: c.c_address,
  Const        r84, "c_address"
  Const        r85, "c_address"
  Index        r86, r20, r85
  // c_phone: c.c_phone,
  Const        r87, "c_phone"
  Const        r88, "c_phone"
  Index        r89, r20, r88
  // c_comment: c.c_comment,
  Const        r90, "c_comment"
  Const        r91, "c_comment"
  Index        r92, r20, r91
  // n_name: n.n_name
  Const        r93, "n_name"
  Const        r94, "n_name"
  Index        r95, r48, r94
  // c_custkey: c.c_custkey,
  Move         r96, r75
  Move         r97, r77
  // c_name: c.c_name,
  Move         r98, r78
  Move         r99, r80
  // c_acctbal: c.c_acctbal,
  Move         r100, r81
  Move         r101, r83
  // c_address: c.c_address,
  Move         r102, r84
  Move         r103, r86
  // c_phone: c.c_phone,
  Move         r104, r87
  Move         r105, r89
  // c_comment: c.c_comment,
  Move         r106, r90
  Move         r107, r92
  // n_name: n.n_name
  Move         r108, r93
  Move         r109, r95
  // group by {
  MakeMap      r110, 7, r96
  Str          r111, r110
  JumpIfTrue   r112, L2
  // from c in customer
  Const        r113, []
  Const        r114, "__group__"
  Const        r115, true
  Const        r116, "key"
  // group by {
  Move         r117, r110
  // from c in customer
  Const        r118, "items"
  Move         r119, r113
  MakeMap      r120, 3, r114
  SetIndex     r13, r111, r120
L2:
  Const        r122, "items"
  Index        r123, r13, r111
  Index        r124, r123, r122
  Append       r125, r124, r74
  SetIndex     r123, r122, r125
  // join n in nation on n.n_nationkey == c.c_nationkey
  Jump         L0
  // join l in lineitem on l.l_orderkey == o.o_orderkey
  Jump         L0
  // join o in orders on o.o_custkey == c.c_custkey
  Jump         L0
  // from c in customer
  Jump         L0
  JumpIfFalse  r136, L3
  // revenue: sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount)),
  JumpIfFalse  r154, L0
  Jump         L0
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  JumpIfFalse  r218, L0
  Jump         L0
  // from c in customer
  Jump         L0
L3:
  // sort by -sum(from x in g select x.l.l_extendedprice * (1 - x.l.l_discount))
  Sort         242,12,0,0
  // from c in customer
  Move         r12, r242
  // let result =
  Move         r243, r12
  // print(result)
  Print        r243
  Return       r0
