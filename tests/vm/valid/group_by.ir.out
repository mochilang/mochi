func main (regs=22)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r1, []
  // group by person.city into g
  Const        r2, "city"
  // city: g.key,
  Const        r3, "key"
L2:
  // count: count(g),
  Const        r4, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r5, "avg_age"
  Const        r6, "age"
  // let stats = from person in people
  IterPrep     r7, r0
  Len          r8, r7
L5:
  Const        r9, 0
  MakeMap      r10, 0, r0
L0:
  LessInt      r11, r9, r8
L1:
  JumpIfFalse  r11, L0
  Index        r8, r7, r9
  // group by person.city into g
  Index        r7, r8, r2
  Str          r12, r7
  In           r13, r12, r10
  JumpIfTrue   r13, L1
  // let stats = from person in people
  Move         r13, r1
L7:
  Const        r14, "__group__"
  Const        r15, true
L4:
  Move         r16, r3
  // group by person.city into g
  Move         r17, r7
  // let stats = from person in people
  Const        r7, "items"
  Move         r18, r13
  Move         r13, r4
  Move         r19, r9
  Move         r20, r14
  Move         r14, r15
  Move         r15, r16
  Move         r16, r17
  Move         r17, r7
  Move         r21, r18
  Move         r18, r13
  Move         r13, r19
  MakeMap      r19, 4, r20
  SetIndex     r10, r12, r19
  Move         r19, r7
  Index        r7, r10, r12
  Index        r12, r7, r19
  Append       r13, r12, r8
  SetIndex     r7, r19, r13
  Index        r13, r7, r4
  Const        r12, 1
  AddInt       r19, r13, r12
  SetIndex     r7, r4, r19
  AddInt       r9, r9, r12
  Jump         L0
  Values       19,10,0,0
  Const        r10, 0
  Move         r13, r10
  Len          r7, r19
  LessInt      r11, r13, r7
  JumpIfFalse  r11, L2
  Index        r11, r19, r13
  // city: g.key,
  Move         r19, r2
  Index        r7, r11, r3
  // count: count(g),
  Move         r3, r4
  Index        r9, r11, r4
  // avg_age: avg(from p in g select p.age)
  Move         r8, r5
  Move         r18, r1
  IterPrep     r21, r11
  Len          r11, r21
  Move         r17, r10
  LessInt      r16, r17, r11
  JumpIfFalse  r16, L3
  Index        r16, r21, r17
  Index        r21, r16, r6
  Append       r18, r18, r21
  AddInt       r17, r17, r12
  Jump         L4
L3:
  Avg          r16, r18
  // city: g.key,
  Move         r21, r19
  Move         r18, r7
  // count: count(g),
  Move         r7, r3
  Move         r3, r9
  // avg_age: avg(from p in g select p.age)
  Move         r19, r8
  Move         r8, r16
  // select {
  MakeMap      r16, 3, r21
  // let stats = from person in people
  Append       r1, r1, r16
  AddInt       r13, r13, r12
  Jump         L5
  // print("--- People grouped by city ---")
  Const        r16, "--- People grouped by city ---"
  Print        r16
  // for s in stats {
  IterPrep     r16, r1
  Len          r1, r16
  Move         r8, r10
  Less         r10, r8, r1
  JumpIfFalse  r10, L6
  Index        r10, r16, r8
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Index        r16, r10, r2
  Const        r2, ": count ="
  Index        r1, r10, r4
  Const        r4, ", avg_age ="
  Index        r19, r10, r5
  PrintN       r16, 5, r16
  // for s in stats {
  Add          r8, r8, r12
  Jump         L7
L6:
  Return       r0
