func main (regs=93)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r1, []
  // group by person.city into g
  Const        r2, "city"
  // city: g.key,
  Const        r3, "key"
  // count: count(g),
  Const        r4, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r5, "avg_age"
  Const        r6, "age"
  // let stats = from person in people
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Move         r11, r1
L2:
  LessInt      r13, r9, r8
  JumpIfFalse  r13, L0
  Index        r14, r7, r9
  // group by person.city into g
  Index        r16, r14, r2
  Str          r17, r16
  In           r18, r17, r10
  JumpIfTrue   r18, L1
  // let stats = from person in people
  Move         r19, r1
  Const        r20, "__group__"
  Const        r21, true
  Move         r22, r3
  // group by person.city into g
  Move         r23, r16
  // let stats = from person in people
  Const        r24, "items"
  Move         r25, r19
  Move         r26, r4
  Move         r27, r9
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  MakeMap      r36, 4, r28
  SetIndex     r10, r17, r36
  Append       r11, r11, r36
L1:
  Move         r38, r24
  Index        r39, r10, r17
  Index        r40, r39, r38
  Append       r41, r40, r14
  SetIndex     r39, r38, r41
  Index        r42, r39, r4
  Const        r43, 1
  AddInt       r44, r42, r43
  SetIndex     r39, r4, r44
  AddInt       r9, r9, r43
  Jump         L2
L0:
  Const        r46, 0
  Move         r45, r46
  Len          r47, r11
L6:
  LessInt      r48, r45, r47
  JumpIfFalse  r48, L3
  Index        r50, r11, r45
  // city: g.key,
  Move         r51, r2
  Index        r52, r50, r3
  // count: count(g),
  Move         r53, r4
  Index        r54, r50, r4
  // avg_age: avg(from p in g select p.age)
  Move         r55, r5
  Move         r56, r19
  IterPrep     r57, r50
  Len          r58, r57
  Move         r59, r46
L5:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L4
  Index        r62, r57, r59
  Index        r63, r62, r6
  Append       r56, r56, r63
  AddInt       r59, r59, r43
  Jump         L5
L4:
  Avg          r65, r56
  // city: g.key,
  Move         r66, r51
  Move         r67, r52
  // count: count(g),
  Move         r68, r53
  Move         r69, r54
  // avg_age: avg(from p in g select p.age)
  Move         r70, r55
  Move         r71, r65
  // select {
  MakeMap      r72, 3, r66
  // let stats = from person in people
  Append       r1, r1, r72
  AddInt       r45, r45, r43
  Jump         L6
L3:
  // print("--- People grouped by city ---")
  Const        r74, "--- People grouped by city ---"
  Print        r74
  // for s in stats {
  IterPrep     r75, r1
  Len          r76, r75
  Move         r77, r46
L8:
  Less         r78, r77, r76
  JumpIfFalse  r78, L7
  Index        r80, r75, r77
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Index        r81, r80, r2
  Const        r82, ": count ="
  Index        r83, r80, r4
  Const        r84, ", avg_age ="
  Index        r85, r80, r5
  PrintN       r81, 5, r81
  // for s in stats {
  Add          r77, r77, r43
  Jump         L8
L7:
  Return       r0
