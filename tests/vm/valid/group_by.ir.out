func main (regs=90)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  Move         r1, r0
  // let stats = from person in people
  Const        r2, []
  // group by person.city into g
  Const        r3, "city"
  // city: g.key,
  Const        r3, "city"
  Const        r4, "key"
  // count: count(g),
  Const        r5, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r6, "avg_age"
  Const        r7, "age"
  // let stats = from person in people
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  // group by person.city into g
  Const        r3, "city"
  Index        r17, r16, r3
  Str          r18, r17
  In           r19, r18, r11
  JumpIfTrue   r19, L1
  // let stats = from person in people
  Const        r13, []
  Const        r20, "__group__"
  Const        r21, true
  Const        r4, "key"
  // group by person.city into g
  Move         r22, r17
  // let stats = from person in people
  Const        r23, "items"
  Move         r24, r13
  Const        r5, "count"
  Const        r25, 0
  Move         r26, r20
  Move         r27, r21
  Move         r28, r4
  Move         r29, r22
  Move         r30, r23
  Move         r31, r24
  Move         r32, r5
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r11, r18, r34
  Append       r35, r12, r34
  Move         r12, r35
L1:
  Const        r23, "items"
  Index        r36, r11, r18
  Index        r37, r36, r23
  Append       r38, r37, r15
  SetIndex     r36, r23, r38
  Const        r5, "count"
  Index        r39, r36, r5
  Const        r40, 1
  AddInt       r41, r39, r40
  SetIndex     r36, r5, r41
  Const        r40, 1
  AddInt       r10, r10, r40
  Jump         L2
L0:
  Const        r25, 0
  Move         r42, r25
  Len          r43, r12
L6:
  LessInt      r44, r42, r43
  JumpIfFalse  r44, L3
  Index        r45, r12, r42
  Move         r46, r45
  // city: g.key,
  Const        r47, "city"
  Const        r4, "key"
  Index        r48, r46, r4
  // count: count(g),
  Const        r49, "count"
  Const        r5, "count"
  Index        r50, r46, r5
  // avg_age: avg(from p in g select p.age)
  Const        r51, "avg_age"
  Const        r52, []
  Const        r7, "age"
  IterPrep     r53, r46
  Len          r54, r53
  Const        r25, 0
  Move         r55, r25
L5:
  LessInt      r56, r55, r54
  JumpIfFalse  r56, L4
  Index        r57, r53, r55
  Move         r58, r57
  Const        r7, "age"
  Index        r59, r58, r7
  Append       r60, r52, r59
  Move         r52, r60
  Const        r40, 1
  AddInt       r55, r55, r40
  Jump         L5
L4:
  Avg          r61, r52
  // city: g.key,
  Move         r62, r47
  Move         r63, r48
  // count: count(g),
  Move         r64, r49
  Move         r65, r50
  // avg_age: avg(from p in g select p.age)
  Move         r66, r51
  Move         r67, r61
  // select {
  MakeMap      r68, 3, r62
  // let stats = from person in people
  Append       r69, r2, r68
  Move         r2, r69
  Const        r40, 1
  AddInt       r42, r42, r40
  Jump         L6
L3:
  Move         r70, r2
  // print("--- People grouped by city ---")
  Const        r71, "--- People grouped by city ---"
  Print        r71
  // for s in stats {
  IterPrep     r72, r70
  Len          r73, r72
  Const        r74, 0
L8:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L7
  Index        r76, r72, r74
  Move         r77, r76
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Const        r3, "city"
  Index        r83, r77, r3
  Move         r78, r83
  Const        r84, ": count ="
  Move         r79, r84
  Const        r5, "count"
  Index        r85, r77, r5
  Move         r80, r85
  Const        r86, ", avg_age ="
  Move         r81, r86
  Const        r6, "avg_age"
  Index        r87, r77, r6
  Move         r82, r87
  PrintN       r78, 5, r78
  // for s in stats {
  Const        r88, 1
  AddInt       r89, r74, r88
  Move         r74, r89
  Jump         L8
L7:
  Return       r0
