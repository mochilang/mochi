func main (regs=82)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  Const        r1, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by person.city into g
  Const        r11, "city"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // let stats = from person in people
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by person.city into g
  Move         r19, r12
  // let stats = from person in people
  Const        r20, "items"
  Const        r21, []
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Move         r7, r23
L1:
  Const        r24, "items"
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Const        r28, 1
  AddInt       r5, r5, r28
  Jump         L2
L0:
  Const        r29, 0
  Len          r30, r7
L6:
  Less         r31, r29, r30
  JumpIfFalse  r31, L3
  Index        r32, r7, r29
  Move         r33, r32
  // city: g.key,
  Const        r35, "key"
  Index        r36, r33, r35
  // count: count(g),
  Count        r38, r33
  // avg_age: avg(from p in g select p.age)
  Const        r40, []
  IterPrep     r41, r33
  Len          r42, r41
  Const        r43, 0
L5:
  Less         r44, r43, r42
  JumpIfFalse  r44, L4
  Index        r45, r41, r43
  Move         r46, r45
  Const        r47, "age"
  Index        r48, r46, r47
  Append       r49, r40, r48
  Move         r40, r49
  AddInt       r43, r43, r28
  Jump         L5
L4:
  Avg          r50, r40
  // city: g.key,
  Const        r51, "city"
  Move         r52, r36
  // count: count(g),
  Const        r53, "count"
  Move         r54, r38
  // avg_age: avg(from p in g select p.age)
  Const        r55, "avg_age"
  Move         r56, r50
  // select {
  MakeMap      r57, 3, r51
  // let stats = from person in people
  Append       r58, r2, r57
  Move         r2, r58
  Const        r29, 1
  Jump         L6
L3:
  Move         r61, r2
  // print("--- People grouped by city ---")
  Const        r62, "--- People grouped by city ---"
  Print        r62
  // for s in stats {
  IterPrep     r63, r61
  Len          r64, r63
  Const        r65, 0
L8:
  Less         r66, r65, r64
  JumpIfFalse  r66, L7
  Index        r67, r63, r65
  Move         r68, r67
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Const        r74, "city"
  Index        r75, r68, r74
  Move         r69, r75
  Const        r70, ": count ="
  Const        r77, "count"
  Index        r78, r68, r77
  Move         r71, r78
  Const        r72, ", avg_age ="
  Const        r80, "avg_age"
  Index        r81, r68, r80
  Move         r73, r81
  PrintN       r69, 5, r69
  // for s in stats {
  AddInt       r65, r65, r28
  Jump         L8
L7:
  Return       r0
