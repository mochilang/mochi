func main (regs=85)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r1, []
  // group by person.city into g
  Const        r2, "city"
  // city: g.key,
  Const        r3, "key"
  // count: count(g),
  Const        r4, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r5, "avg_age"
  Const        r6, "age"
  // let stats = from person in people
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Const        r11, []
L2:
  LessInt      r12, r9, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r9
  // group by person.city into g
  Index        r15, r13, r2
  Str          r16, r15
  In           r17, r16, r10
  JumpIfTrue   r17, L1
  // let stats = from person in people
  Const        r18, []
  Const        r19, "__group__"
  Const        r20, true
  // group by person.city into g
  Move         r21, r15
  // let stats = from person in people
  Const        r22, "items"
  Move         r23, r18
  Const        r24, 0
  Move         r25, r19
  Move         r26, r20
  Move         r27, r3
  Move         r28, r21
  Move         r29, r22
  Move         r30, r23
  Move         r31, r4
  Move         r32, r24
  MakeMap      r33, 4, r25
  SetIndex     r10, r16, r33
  Append       r11, r11, r33
L1:
  Index        r35, r10, r16
  Index        r36, r35, r22
  Append       r37, r36, r13
  SetIndex     r35, r22, r37
  Index        r38, r35, r4
  Const        r39, 1
  AddInt       r40, r38, r39
  SetIndex     r35, r4, r40
  AddInt       r9, r9, r39
  Jump         L2
L0:
  Move         r41, r24
  Len          r42, r11
L6:
  LessInt      r43, r41, r42
  JumpIfFalse  r43, L3
  Index        r45, r11, r41
  // city: g.key,
  Const        r46, "city"
  Index        r47, r45, r3
  // count: count(g),
  Const        r48, "count"
  Index        r49, r45, r4
  // avg_age: avg(from p in g select p.age)
  Const        r50, "avg_age"
  Const        r51, []
  IterPrep     r52, r45
  Len          r53, r52
  Move         r54, r24
L5:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r57, r52, r54
  Index        r58, r57, r6
  Append       r51, r51, r58
  AddInt       r54, r54, r39
  Jump         L5
L4:
  // select {
  MakeMap      r64, 3, r46
  // let stats = from person in people
  Append       r1, r1, r64
  AddInt       r41, r41, r39
  Jump         L6
L3:
  // print("--- People grouped by city ---")
  Const        r66, "--- People grouped by city ---"
  Print        r66
  // for s in stats {
  IterPrep     r67, r1
  Len          r68, r67
  Const        r69, 0
L8:
  Less         r70, r69, r68
  JumpIfFalse  r70, L7
  Index        r72, r67, r69
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Index        r73, r72, r2
  Const        r74, ": count ="
  Index        r75, r72, r4
  Const        r76, ", avg_age ="
  Index        r77, r72, r5
  PrintN       r73, 5, r73
  // for s in stats {
  Const        r83, 1
  Add          r69, r69, r83
  Jump         L8
L7:
  Return       r0
