func main (regs=91)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r1, []
  // group by person.city into g
  Const        r2, "city"
  // city: g.key,
  Const        r3, "key"
  // count: count(g),
  Const        r4, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r5, "avg_age"
  Const        r6, "age"
  // let stats = from person in people
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
L2:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  // group by person.city into g
  Index        r14, r12, r2
  Str          r15, r14
  In           r16, r15, r10
  JumpIfTrue   r16, L1
  // let stats = from person in people
  Move         r17, r1
  Const        r18, "__group__"
  Const        r19, true
  Move         r20, r3
  // group by person.city into g
  Move         r21, r14
  // let stats = from person in people
  Const        r22, "items"
  Move         r23, r17
  Move         r24, r4
  Move         r25, r9
  Move         r26, r18
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r10, r15, r34
L1:
  Move         r35, r22
  Index        r36, r10, r15
  Index        r37, r36, r35
  Append       r38, r37, r12
  SetIndex     r36, r35, r38
  Index        r39, r36, r4
  Const        r40, 1
  AddInt       r41, r39, r40
  SetIndex     r36, r4, r41
  AddInt       r9, r9, r40
  Jump         L2
L0:
  Values       42,10,0,0
  Const        r44, 0
  Move         r43, r44
  Len          r45, r42
L6:
  LessInt      r46, r43, r45
  JumpIfFalse  r46, L3
  Index        r48, r42, r43
  // city: g.key,
  Move         r49, r2
  Index        r50, r48, r3
  // count: count(g),
  Move         r51, r4
  Index        r52, r48, r4
  // avg_age: avg(from p in g select p.age)
  Move         r53, r5
  Move         r54, r1
  IterPrep     r55, r48
  Len          r56, r55
  Move         r57, r44
L5:
  LessInt      r58, r57, r56
  JumpIfFalse  r58, L4
  Index        r60, r55, r57
  Index        r61, r60, r6
  Append       r54, r54, r61
  AddInt       r57, r57, r40
  Jump         L5
L4:
  Avg          r63, r54
  // city: g.key,
  Move         r64, r49
  Move         r65, r50
  // count: count(g),
  Move         r66, r51
  Move         r67, r52
  // avg_age: avg(from p in g select p.age)
  Move         r68, r53
  Move         r69, r63
  // select {
  MakeMap      r70, 3, r64
  // let stats = from person in people
  Append       r1, r1, r70
  AddInt       r43, r43, r40
  Jump         L6
L3:
  // print("--- People grouped by city ---")
  Const        r72, "--- People grouped by city ---"
  Print        r72
  // for s in stats {
  IterPrep     r73, r1
  Len          r74, r73
  Move         r75, r44
L8:
  Less         r76, r75, r74
  JumpIfFalse  r76, L7
  Index        r78, r73, r75
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Index        r79, r78, r2
  Const        r80, ": count ="
  Index        r81, r78, r4
  Const        r82, ", avg_age ="
  Index        r83, r78, r5
  PrintN       r79, 5, r79
  // for s in stats {
  Add          r75, r75, r40
  Jump         L8
L7:
  Return       r0
