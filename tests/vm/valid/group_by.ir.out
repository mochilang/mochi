func main (regs=69)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r1, []
  // avg_age: avg(from p in g select p.age)
  Const        r2, "age"
  // group by person.city into g
  Const        r3, "city"
  // city: g.key,
  Const        r4, "key"
  // count: count(g),
  Const        r5, "count"
  // avg_age: avg(from p in g select p.age)
  Const        r6, "avg_age"
  // let stats = from person in people
  IterPrep     r7, r0
  Len          r8, r7
  Const        r9, 0
  MakeMap      r10, 0, r0
  Const        r11, []
L3:
  LessInt      r12, r9, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r9
  // group by person.city into g
  Index        r15, r13, r3
  // avg_age: avg(from p in g select p.age)
  Index        r16, r13, r2
  // group by person.city into g
  Str          r17, r15
  In           r18, r17, r10
  JumpIfTrue   r18, L1
  // let stats = from person in people
  Const        r19, "__group__"
  Const        r20, true
  // group by person.city into g
  Move         r21, r15
  // let stats = from person in people
  Const        r22, 0
  Const        r23, "__agg0"
  MakeMap      r24, 4, r19
  SetIndex     r10, r17, r24
  Append       r25, r11, r24
  Move         r11, r25
L1:
  Index        r26, r10, r17
  Index        r27, r26, r5
  Const        r28, 1
  AddInt       r29, r27, r28
  SetIndex     r26, r5, r29
  JumpIfFalse  r18, L2
  Index        r30, r26, r23
  Add          r31, r30, r16
  SetIndex     r26, r23, r31
L2:
  AddInt       r9, r9, r28
  Jump         L3
L0:
  Move         r32, r22
  Len          r33, r11
L5:
  LessInt      r34, r32, r33
  JumpIfFalse  r34, L4
  Index        r36, r11, r32
  // city: g.key,
  Const        r37, "city"
  Index        r38, r36, r4
  // count: count(g),
  Const        r39, "count"
  Index        r40, r36, r5
  // avg_age: avg(from p in g select p.age)
  Const        r41, "avg_age"
  Index        r42, r36, r23
  // select {
  MakeMap      r48, 3, r37
  // let stats = from person in people
  Append       r1, r1, r48
  AddInt       r32, r32, r28
  Jump         L5
L4:
  // print("--- People grouped by city ---")
  Const        r50, "--- People grouped by city ---"
  Print        r50
  // for s in stats {
  IterPrep     r51, r1
  Len          r52, r51
  Const        r53, 0
L7:
  Less         r54, r53, r52
  JumpIfFalse  r54, L6
  Index        r56, r51, r53
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Index        r57, r56, r3
  Const        r58, ": count ="
  Index        r59, r56, r5
  Const        r60, ", avg_age ="
  Index        r61, r56, r6
  PrintN       r57, 5, r57
  // for s in stats {
  Const        r67, 1
  Add          r53, r53, r67
  Jump         L7
L6:
  Return       r0
