func main (regs=87)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  Const        r1, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  // let stats = from person in people
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by person.city into g
  Const        r11, "city"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // let stats = from person in people
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by person.city into g
  Move         r19, r12
  // let stats = from person in people
  Const        r20, "items"
  Const        r21, []
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Move         r7, r23
L1:
  Const        r24, "items"
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Const        r5, 1
  Jump         L2
L0:
  Const        r30, 0
  Len          r31, r7
L6:
  Less         r32, r30, r31
  JumpIfFalse  r32, L3
  Index        r33, r7, r30
  Move         r34, r33
  // city: g.key,
  Const        r36, "key"
  Index        r37, r34, r36
  // count: count(g),
  Count        r39, r34
  // avg_age: avg(from p in g select p.age)
  Const        r41, []
  IterPrep     r42, r34
  Len          r43, r42
  Const        r44, 0
L5:
  Less         r45, r44, r43
  JumpIfFalse  r45, L4
  Index        r46, r42, r44
  Move         r47, r46
  Const        r48, "age"
  Index        r49, r47, r48
  Append       r50, r41, r49
  Move         r41, r50
  Const        r44, 1
  Jump         L5
L4:
  Avg          r53, r41
  // city: g.key,
  Const        r54, "city"
  Move         r55, r37
  // count: count(g),
  Const        r56, "count"
  Move         r57, r39
  // avg_age: avg(from p in g select p.age)
  Const        r58, "avg_age"
  Move         r59, r53
  // select {
  MakeMap      r60, 3, r54
  // let stats = from person in people
  Append       r61, r2, r60
  Move         r2, r61
  Const        r30, 1
  Jump         L6
L3:
  Move         r64, r2
  // print("--- People grouped by city ---")
  Const        r65, "--- People grouped by city ---"
  Print        r65
  // for s in stats {
  IterPrep     r66, r64
  Len          r67, r66
  Const        r68, 0
L8:
  Less         r69, r68, r67
  JumpIfFalse  r69, L7
  Index        r70, r66, r68
  Move         r71, r70
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Const        r77, "city"
  Index        r78, r71, r77
  Move         r72, r78
  Const        r73, ": count ="
  Const        r80, "count"
  Index        r81, r71, r80
  Move         r74, r81
  Const        r75, ", avg_age ="
  Const        r83, "avg_age"
  Index        r84, r71, r83
  Move         r76, r84
  PrintN       r72, 5, r72
  // for s in stats {
  Const        r68, 1
  Jump         L8
L7:
  Return       r0
