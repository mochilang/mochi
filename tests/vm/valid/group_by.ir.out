func main (regs=85)
  // let people = [
  Const        r0, [{"age": 30, "city": "Paris", "name": "Alice"}, {"age": 15, "city": "Hanoi", "name": "Bob"}, {"age": 65, "city": "Paris", "name": "Charlie"}, {"age": 45, "city": "Hanoi", "name": "Diana"}, {"age": 70, "city": "Paris", "name": "Eve"}, {"age": 22, "city": "Hanoi", "name": "Frank"}]
  Move         r1, r0
  // let stats = from person in people
  IterPrep     r3, r1
  Const        r5, 0
  MakeMap      r6, 0, r0
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by person.city into g
  Const        r11, "city"
  Index        r12, r10, r11
  Str          r13, r12
  JumpIfTrue   r14, L1
  // let stats = from person in people
  Const        r15, []
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by person.city into g
  Move         r19, r12
  // let stats = from person in people
  Const        r20, "items"
  Move         r21, r15
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
L1:
  Const        r24, "items"
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Jump         L0
  JumpIfFalse  r32, L2
  // avg_age: avg(from p in g select p.age)
  JumpIfFalse  r45, L0
  Jump         L0
  // let stats = from person in people
  Jump         L0
L2:
  Move         r64, r2
  // print("--- People grouped by city ---")
  Const        r65, "--- People grouped by city ---"
  Print        r65
  // for s in stats {
  IterPrep     r66, r64
  Const        r68, 0
  JumpIfFalse  r69, L3
  Index        r70, r66, r68
  Move         r71, r70
  // print(s.city, ": count =", s.count, ", avg_age =", s.avg_age)
  Const        r77, "city"
  Index        r78, r71, r77
  Move         r72, r78
  Const        r79, ": count ="
  Move         r73, r79
  Const        r80, "count"
  Index        r81, r71, r80
  Move         r74, r81
  Const        r82, ", avg_age ="
  Move         r75, r82
  Const        r83, "avg_age"
  Index        r84, r71, r83
  Move         r76, r84
  PrintN       r72, 5, r72
  // for s in stats {
  Jump         L0
L3:
  Return       r0
