let people: list<map<string, any>> = [{"name": "Alice", "age": 30, "city": "Paris"}, {"name": "Bob", "age": 15, "city": "Hanoi"}, {"name": "Charlie", "age": 65, "city": "Paris"}, {"name": "Diana", "age": 45, "city": "Hanoi"}, {"name": "Eve", "age": 70, "city": "Paris"}, {"name": "Frank", "age": 22, "city": "Hanoi"}]
let stats: list<map<string, any>> = _group_by(people, (person) => person["city"]).map((g) => {"city": g.key, "count": _count(g), "avg_age": _avg((() {
let _res = []
let _res: return
let groups = <String,_Group>{}
let order = <String>[]
let key = keyfn(it)
let ks = key.toString()
let g = groups[ks]
type _Group {
  key
}
fun main() {
  print("--- People grouped by city ---")
  for (var s in stats) {
    print([s.city.toString(), ": count =".toString(), s.count.toString(), ", avg_age =".toString(), s.avg_age.toString()].join(' '))
  }
}
fun _avg(v: any): float {
  let list: list<any>
  if (v is List) list = v
  else if (v is Map && v['items'] is List) list = (v['items'] as List)
  else if (v is Map && v['Items'] is List) list = (v['Items'] as List)
  else if (v is _Group) list = v.Items
  else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
  if (list == null || list.isEmpty) return 0
  let s = 0.0
  for (var n in list) s += (n as num).toDouble()
  return s / list.length
}
fun _count(v: any): int {
  if (v is String) return v.runes.length
  if (v is List) return v.length
  if (v is Map) return v.length
  try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
  try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
  return 0
}
