Map<String, Function> _structParsers = {};

abstract class Tree {}
class Leaf extends Tree {
  Leaf();
}
class Node extends Tree {
  Tree left;
  int value;
  Tree right;
  Node({required this.left, required this.value, required this.right});
}

int sum_tree(Tree t) {
  return (() {
  var _t = t;
  if (_t is Leaf) { return 0; }
  if (_t is Node) { return ((left, value, right) { return ((sum_tree(left) + value) + sum_tree(right)); })((_t as Node).left, (_t as Node).value, (_t as Node).right); }
  return null;
})();
}

Node t = Node(left: Leaf, value: 1, right: Node(left: Leaf, value: 2, right: Leaf));

void main() {
  print(sum_tree(t));
}

