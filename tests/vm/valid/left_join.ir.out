func main (regs=85)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // left join c in customers on o.customerId == c.id
  Const        r12, 0
L3:
  Less         r13, r12, r8
  JumpIfFalse  r13, L1
  Index        r14, r7, r12
  Const        r15, "customerId"
  Index        r16, r11, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // orderId: o.id,
  Const        r21, "id"
  Index        r22, r11, r21
  // total: o.total
  Const        r25, "total"
  Index        r26, r11, r25
  // orderId: o.id,
  Const        r27, "orderId"
  Move         r28, r22
  // customer: c,
  Const        r29, "customer"
  Move         r30, r14
  // total: o.total
  Const        r31, "total"
  Move         r32, r26
  // select {
  MakeMap      r33, 3, r27
  // let result = from o in orders
  Append       r34, r4, r33
  Move         r4, r34
L2:
  Const        r35, 1
  // left join c in customers on o.customerId == c.id
  AddInt       r12, r12, r35
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r36, 0
L10:
  Less         r37, r36, r6
  JumpIfFalse  r37, L5
  Index        r11, r5, r36
  Const        r38, false
  // left join c in customers on o.customerId == c.id
  Const        r39, 0
L8:
  Less         r40, r39, r8
  JumpIfFalse  r40, L6
  Index        r14, r7, r39
  Const        r41, "customerId"
  Index        r42, r11, r41
  Const        r43, "id"
  Index        r44, r14, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L7
  Const        r38, true
L7:
  AddInt       r39, r39, r35
  Jump         L8
L6:
  // let result = from o in orders
  JumpIfTrue   r38, L9
  // orderId: o.id,
  Const        r48, "id"
  Index        r49, r11, r48
  // total: o.total
  Const        r52, "total"
  Index        r53, r11, r52
  // orderId: o.id,
  Const        r54, "orderId"
  Move         r55, r49
  // customer: c,
  Const        r56, "customer"
  Const        r57, nil
  // total: o.total
  Const        r58, "total"
  Move         r59, r53
  // select {
  MakeMap      r60, 3, r54
  // let result = from o in orders
  Append       r61, r4, r60
  Move         r4, r61
L9:
  AddInt       r36, r36, r35
  Jump         L10
L5:
  Move         r62, r4
  // print("--- Left Join ---")
  Const        r63, "--- Left Join ---"
  Print        r63
  // for entry in result {
  IterPrep     r64, r62
  Len          r65, r64
  Const        r66, 0
L12:
  Less         r67, r66, r65
  JumpIfFalse  r67, L11
  Index        r68, r64, r66
  Move         r69, r68
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r70, "Order"
  Const        r77, "orderId"
  Index        r78, r69, r77
  Move         r71, r78
  Const        r72, "customer"
  Const        r80, "customer"
  Index        r81, r69, r80
  Move         r73, r81
  Const        r74, "total"
  Const        r83, "total"
  Index        r84, r69, r83
  Move         r75, r84
  PrintN       r70, 6, r70
  // for entry in result {
  AddInt       r66, r66, r35
  Jump         L12
L11:
  Return       r0
