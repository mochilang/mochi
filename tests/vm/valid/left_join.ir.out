func main (regs=75)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // left join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, "customerId"
  Const        r8, "id"
  // orderId: o.id,
  Const        r9, "orderId"
  // customer: c,
  Const        r10, "customer"
  // total: o.total
  Const        r11, "total"
  // let result = from o in orders
  Const        r12, 0
L4:
  LessInt      r13, r12, r4
  JumpIfFalse  r13, L0
  Index        r15, r3, r12
  // left join c in customers on o.customerId == c.id
  Const        r16, 0
L3:
  LessInt      r17, r16, r6
  JumpIfFalse  r17, L1
  Index        r19, r5, r16
  Index        r20, r15, r7
  Index        r21, r19, r8
  Equal        r22, r20, r21
  JumpIfFalse  r22, L2
  // orderId: o.id,
  Const        r23, "orderId"
  Index        r24, r15, r8
  // customer: c,
  Const        r25, "customer"
  // total: o.total
  Const        r26, "total"
  Index        r27, r15, r11
  // orderId: o.id,
  Move         r28, r24
  // select {
  MakeMap      r31, 3, r23
  // let result = from o in orders
  Append       r2, r2, r31
L2:
  // left join c in customers on o.customerId == c.id
  Const        r33, 1
  AddInt       r16, r16, r33
  Jump         L3
L1:
  // let result = from o in orders
  AddInt       r12, r12, r33
  Jump         L4
L0:
  Const        r34, 0
L10:
  LessInt      r35, r34, r4
  JumpIfFalse  r35, L5
  Index        r15, r3, r34
  Const        r37, false
  // left join c in customers on o.customerId == c.id
  Const        r38, 0
L8:
  LessInt      r39, r38, r6
  JumpIfFalse  r39, L6
  Index        r19, r5, r38
  Index        r41, r15, r7
  Index        r42, r19, r8
  Equal        r43, r41, r42
  JumpIfFalse  r43, L7
  Const        r37, true
L7:
  AddInt       r38, r38, r33
  Jump         L8
L6:
  // let result = from o in orders
  Move         r44, r37
  JumpIfTrue   r44, L9
  // orderId: o.id,
  Const        r46, "orderId"
  Index        r47, r15, r8
  // customer: c,
  Const        r48, "customer"
  // total: o.total
  Const        r49, "total"
  Index        r50, r15, r11
  // orderId: o.id,
  Move         r51, r47
  // select {
  MakeMap      r54, 3, r46
  // let result = from o in orders
  Append       r2, r2, r54
L9:
  AddInt       r34, r34, r33
  Jump         L10
L5:
  // print("--- Left Join ---")
  Const        r56, "--- Left Join ---"
  Print        r56
  // for entry in result {
  IterPrep     r57, r2
  Len          r58, r57
  Const        r59, 0
L12:
  Less         r60, r59, r58
  JumpIfFalse  r60, L11
  Index        r62, r57, r59
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r63, "Order"
  Index        r64, r62, r9
  Move         r65, r10
  Index        r66, r62, r10
  Move         r67, r11
  Index        r68, r62, r11
  PrintN       r63, 6, r63
  // for entry in result {
  Const        r73, 1
  Add          r59, r59, r73
  Jump         L12
L11:
  Return       r0
