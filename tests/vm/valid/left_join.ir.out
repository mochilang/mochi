func main (regs=69)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // left join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
L4:
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r10, r3, r7
  // left join c in customers on o.customerId == c.id
  Const        r11, 0
L3:
  Less         r12, r11, r6
  JumpIfFalse  r12, L1
  Index        r14, r5, r11
  Const        r15, "customerId"
  Index        r16, r10, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // orderId: o.id,
  Const        r20, "orderId"
  Index        r21, r10, r17
  // customer: c,
  Const        r22, "customer"
  // total: o.total
  Const        r23, "total"
  Index        r24, r10, r23
  // orderId: o.id,
  Move         r25, r21
  // select {
  MakeMap      r28, 3, r20
  // let result = from o in orders
  Append       r2, r2, r28
L2:
  // left join c in customers on o.customerId == c.id
  Const        r30, 1
  Add          r11, r11, r30
  Jump         L3
L1:
  // let result = from o in orders
  Add          r7, r7, r30
  Jump         L4
L0:
  Const        r31, 0
L10:
  Less         r32, r31, r4
  JumpIfFalse  r32, L5
  Index        r10, r3, r31
  Const        r34, false
  // left join c in customers on o.customerId == c.id
  Const        r35, 0
L8:
  Less         r36, r35, r6
  JumpIfFalse  r36, L6
  Index        r14, r5, r35
  Index        r38, r10, r15
  Index        r39, r14, r17
  Equal        r40, r38, r39
  JumpIfFalse  r40, L7
  Const        r34, true
L7:
  Add          r35, r35, r30
  Jump         L8
L6:
  // let result = from o in orders
  Move         r41, r34
  JumpIfTrue   r41, L9
  // select {
  MakeMap      r48, 3, r20
  // let result = from o in orders
  Append       r2, r2, r48
L9:
  Add          r31, r31, r30
  Jump         L10
L5:
  // print("--- Left Join ---")
  Const        r50, "--- Left Join ---"
  Print        r50
  // for entry in result {
  IterPrep     r51, r2
  Len          r52, r51
  Const        r53, 0
L12:
  Less         r54, r53, r52
  JumpIfFalse  r54, L11
  Index        r56, r51, r53
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r57, "Order"
  Index        r58, r56, r20
  Move         r59, r22
  Index        r60, r56, r22
  Move         r61, r23
  Index        r62, r56, r23
  PrintN       r57, 6, r57
  // for entry in result {
  Const        r67, 1
  Add          r53, r53, r67
  Jump         L12
L11:
  Return       r0
