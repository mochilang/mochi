func main (regs=87)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // left join c in customers on o.customerId == c.id
  Const        r12, 0
L3:
  Less         r13, r12, r8
  JumpIfFalse  r13, L1
  Index        r14, r7, r12
  Const        r15, "customerId"
  Index        r16, r11, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // orderId: o.id,
  Const        r21, "id"
  Index        r22, r11, r21
  // total: o.total
  Const        r25, "total"
  Index        r26, r11, r25
  // orderId: o.id,
  Const        r27, "orderId"
  Move         r28, r22
  // customer: c,
  Const        r29, "customer"
  Move         r30, r14
  // total: o.total
  Const        r31, "total"
  Move         r32, r26
  // select {
  MakeMap      r33, 3, r27
  // let result = from o in orders
  Append       r34, r4, r33
  Move         r4, r34
L2:
  Const        r35, 1
  // left join c in customers on o.customerId == c.id
  AddInt       r12, r12, r35
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r36, 0
L10:
  Less         r37, r36, r6
  JumpIfFalse  r37, L5
  Index        r11, r5, r36
  Const        r38, false
  // left join c in customers on o.customerId == c.id
  Const        r40, 0
L8:
  Less         r41, r40, r8
  JumpIfFalse  r41, L6
  Index        r14, r7, r40
  Const        r42, "customerId"
  Index        r43, r11, r42
  Const        r44, "id"
  Index        r45, r14, r44
  Equal        r46, r43, r45
  JumpIfFalse  r46, L7
  Const        r38, true
L7:
  AddInt       r40, r40, r35
  Jump         L8
L6:
  // let result = from o in orders
  JumpIfTrue   r38, L9
  // orderId: o.id,
  Const        r50, "id"
  Index        r51, r11, r50
  // total: o.total
  Const        r54, "total"
  Index        r55, r11, r54
  // orderId: o.id,
  Const        r56, "orderId"
  Move         r57, r51
  // customer: c,
  Const        r58, "customer"
  Const        r59, nil
  // total: o.total
  Const        r60, "total"
  Move         r61, r55
  // select {
  MakeMap      r62, 3, r56
  // let result = from o in orders
  Append       r63, r4, r62
  Move         r4, r63
L9:
  AddInt       r36, r36, r35
  Jump         L10
L5:
  Move         r64, r4
  // print("--- Left Join ---")
  Const        r65, "--- Left Join ---"
  Print        r65
  // for entry in result {
  IterPrep     r66, r64
  Len          r67, r66
  Const        r68, 0
L12:
  Less         r69, r68, r67
  JumpIfFalse  r69, L11
  Index        r70, r66, r68
  Move         r71, r70
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r72, "Order"
  Const        r79, "orderId"
  Index        r80, r71, r79
  Move         r73, r80
  Const        r74, "customer"
  Const        r82, "customer"
  Index        r83, r71, r82
  Move         r75, r83
  Const        r76, "total"
  Const        r85, "total"
  Index        r86, r71, r85
  Move         r77, r86
  PrintN       r72, 6, r72
  // for entry in result {
  AddInt       r68, r68, r35
  Jump         L12
L11:
  Return       r0
