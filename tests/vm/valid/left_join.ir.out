func main (regs=85)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // left join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
L4:
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r10, r3, r7
  // left join c in customers on o.customerId == c.id
  Const        r11, 0
L3:
  Less         r12, r11, r6
  JumpIfFalse  r12, L1
  Index        r14, r5, r11
  Const        r15, "customerId"
  Index        r16, r10, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // orderId: o.id,
  Const        r20, "orderId"
  Const        r21, "id"
  Index        r22, r10, r21
  // customer: c,
  Const        r23, "customer"
  // total: o.total
  Const        r24, "total"
  Const        r25, "total"
  // select {
  MakeMap      r30, 3, r20
  // let result = from o in orders
  Append       r2, r2, r30
L2:
  // left join c in customers on o.customerId == c.id
  Const        r32, 1
  Add          r11, r11, r32
  Jump         L3
L1:
  // let result = from o in orders
  Const        r34, 1
  Add          r7, r7, r34
  Jump         L4
L0:
  Const        r36, 0
L10:
  Less         r37, r36, r4
  JumpIfFalse  r37, L5
  Index        r10, r3, r36
  Const        r39, false
  // left join c in customers on o.customerId == c.id
  Const        r40, 0
L8:
  Less         r41, r40, r6
  JumpIfFalse  r41, L6
  Index        r14, r5, r40
  Const        r43, "customerId"
  Index        r44, r10, r43
  Const        r45, "id"
  Index        r46, r14, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L7
  Const        r39, true
L7:
  Const        r48, 1
  Add          r40, r40, r48
  Jump         L8
L6:
  // let result = from o in orders
  Move         r50, r39
  JumpIfTrue   r50, L9
  // select {
  MakeMap      r59, 3, r20
  // let result = from o in orders
  Append       r2, r2, r59
L9:
  Jump         L10
L5:
  // print("--- Left Join ---")
  Const        r63, "--- Left Join ---"
  Print        r63
  // for entry in result {
  IterPrep     r64, r2
  Len          r65, r64
  Const        r66, 0
L12:
  Less         r67, r66, r65
  JumpIfFalse  r67, L11
  Index        r69, r64, r66
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r70, "Order"
  Const        r77, "orderId"
  Index        r71, r69, r77
  Move         r72, r23
  Const        r79, "customer"
  Index        r73, r69, r79
  Move         r74, r24
  Const        r81, "total"
  Index        r75, r69, r81
  PrintN       r70, 6, r70
  // for entry in result {
  Const        r83, 1
  Add          r66, r66, r83
  Jump         L12
L11:
  Return       r0
