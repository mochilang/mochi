func main (regs=76)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // left join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  MakeMap      r7, 0, r0
  Const        r8, 0
L2:
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L0
  Index        r10, r5, r8
  Move         r11, r10
  Const        r12, "id"
  Index        r13, r11, r12
  Index        r14, r7, r13
  Const        r15, nil
  NotEqual     r16, r14, r15
  JumpIfTrue   r16, L1
  MakeList     r17, 0, r0
  SetIndex     r7, r13, r17
L1:
  Index        r14, r7, r13
  Append       r18, r14, r10
  SetIndex     r7, r13, r18
  Const        r19, 1
  AddInt       r8, r8, r19
  Jump         L2
L0:
  // let result = from o in orders
  Const        r20, 0
L7:
  LessInt      r21, r20, r4
  JumpIfFalse  r21, L3
  Index        r23, r3, r20
  // left join c in customers on o.customerId == c.id
  Const        r24, "customerId"
  Index        r25, r23, r24
  // let result = from o in orders
  Index        r26, r7, r25
  Const        r27, nil
  NotEqual     r28, r26, r27
  JumpIfFalse  r28, L4
  Len          r29, r26
  Const        r30, 0
L5:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L4
  // orderId: o.id,
  Const        r33, "orderId"
  Index        r34, r23, r12
  // customer: c,
  Const        r35, "customer"
  // total: o.total
  Const        r36, "total"
  Const        r37, "total"
  Index        r38, r23, r37
  // select {
  MakeMap      r42, 3, r33
  // let result = from o in orders
  Append       r2, r2, r42
  AddInt       r30, r30, r19
  Jump         L5
L4:
  JumpIfTrue   r28, L6
  // orderId: o.id,
  Const        r45, "orderId"
  Index        r46, r23, r12
  // customer: c,
  Const        r47, "customer"
  // total: o.total
  Const        r48, "total"
  Index        r49, r23, r37
  // orderId: o.id,
  Move         r50, r46
  // select {
  MakeMap      r53, 3, r45
  // let result = from o in orders
  Append       r2, r2, r53
L6:
  AddInt       r20, r20, r19
  Jump         L7
L3:
  // print("--- Left Join ---")
  Const        r55, "--- Left Join ---"
  Print        r55
  // for entry in result {
  IterPrep     r56, r2
  Len          r57, r56
  Const        r58, 0
L9:
  Less         r59, r58, r57
  JumpIfFalse  r59, L8
  Index        r61, r56, r58
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r62, "Order"
  Const        r69, "orderId"
  Index        r63, r61, r69
  Const        r71, "customer"
  Move         r64, r71
  Index        r65, r61, r71
  Move         r66, r37
  Index        r67, r61, r37
  PrintN       r62, 6, r62
  // for entry in result {
  Const        r74, 1
  Add          r58, r58, r74
  Jump         L9
L8:
  Return       r0
