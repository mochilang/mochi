func main (regs=90)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  Move         r12, r11
  // left join c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r15, r7, r13
  Move         r16, r15
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // orderId: o.id,
  Const        r23, "id"
  Index        r24, r12, r23
  // total: o.total
  Const        r27, "total"
  Index        r28, r12, r27
  // orderId: o.id,
  Const        r29, "orderId"
  Move         r30, r24
  // customer: c,
  Const        r31, "customer"
  Move         r32, r16
  // total: o.total
  Const        r33, "total"
  Move         r34, r28
  // select {
  MakeMap      r35, 3, r29
  // let result = from o in orders
  Append       r36, r4, r35
  Move         r4, r36
L2:
  Const        r37, 1
  // left join c in customers on o.customerId == c.id
  AddInt       r13, r13, r37
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r38, 0
L10:
  Less         r39, r38, r6
  JumpIfFalse  r39, L5
  Index        r40, r5, r38
  Move         r12, r40
  // left join c in customers on o.customerId == c.id
  Const        r42, 0
L8:
  Less         r43, r42, r8
  JumpIfFalse  r43, L6
  Index        r44, r7, r42
  Move         r16, r44
  Const        r45, "customerId"
  Index        r46, r12, r45
  Const        r47, "id"
  Index        r48, r16, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L7
L7:
  AddInt       r42, r42, r37
  Jump         L8
L6:
  // let result = from o in orders
  Jump         L9
  // orderId: o.id,
  Const        r53, "id"
  Index        r54, r12, r53
  // total: o.total
  Const        r57, "total"
  Index        r58, r12, r57
  // orderId: o.id,
  Const        r59, "orderId"
  Move         r60, r54
  // customer: c,
  Const        r61, "customer"
  Const        r62, nil
  // total: o.total
  Const        r63, "total"
  Move         r64, r58
  // select {
  MakeMap      r65, 3, r59
  // let result = from o in orders
  Append       r66, r4, r65
  Move         r4, r66
L9:
  AddInt       r38, r38, r37
  Jump         L10
L5:
  Move         r67, r4
  // print("--- Left Join ---")
  Const        r68, "--- Left Join ---"
  Print        r68
  // for entry in result {
  IterPrep     r69, r67
  Len          r70, r69
  Const        r71, 0
L12:
  Less         r72, r71, r70
  JumpIfFalse  r72, L11
  Index        r73, r69, r71
  Move         r74, r73
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r75, "Order"
  Const        r82, "orderId"
  Index        r83, r74, r82
  Move         r76, r83
  Const        r77, "customer"
  Const        r85, "customer"
  Index        r86, r74, r85
  Move         r78, r86
  Const        r79, "total"
  Const        r88, "total"
  Index        r89, r74, r88
  Move         r80, r89
  PrintN       r75, 6, r75
  // for entry in result {
  AddInt       r71, r71, r37
  Jump         L12
L11:
  Return       r0
