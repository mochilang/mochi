func main (regs=82)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // left join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  MakeMap      r7, 0, r0
  Const        r8, 0
L2:
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L0
  Index        r10, r5, r8
  Move         r11, r10
  Const        r12, "id"
  Index        r13, r11, r12
  Index        r14, r7, r13
  Const        r15, nil
  NotEqual     r16, r14, r15
  JumpIfTrue   r16, L1
  MakeList     r17, 0, r0
  SetIndex     r7, r13, r17
L1:
  Index        r14, r7, r13
  Append       r18, r14, r10
  SetIndex     r7, r13, r18
  Const        r19, 1
  AddInt       r8, r8, r19
  Jump         L2
L0:
  // let result = from o in orders
  Const        r20, 0
L7:
  LessInt      r21, r20, r4
  JumpIfFalse  r21, L3
  Index        r23, r3, r20
  // left join c in customers on o.customerId == c.id
  Const        r24, "customerId"
  Index        r25, r23, r24
  // let result = from o in orders
  Index        r26, r7, r25
  Const        r27, nil
  NotEqual     r28, r26, r27
  JumpIfFalse  r28, L4
  Len          r29, r26
  Const        r30, 0
L5:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L4
  Index        r11, r26, r30
  // orderId: o.id,
  Const        r33, "orderId"
  Index        r34, r23, r12
  // customer: c,
  Const        r35, "customer"
  // total: o.total
  Const        r36, "total"
  Const        r37, "total"
  Index        r38, r23, r37
  // orderId: o.id,
  Move         r39, r33
  Move         r40, r34
  // customer: c,
  Move         r41, r35
  Move         r42, r11
  // total: o.total
  Move         r43, r36
  Move         r44, r38
  // select {
  MakeMap      r45, 3, r39
  // let result = from o in orders
  Append       r2, r2, r45
  AddInt       r30, r30, r19
  Jump         L5
L4:
  JumpIfTrue   r28, L6
  Const        r11, nil
  // orderId: o.id,
  Const        r48, "orderId"
  Index        r49, r23, r12
  // customer: c,
  Const        r50, "customer"
  // total: o.total
  Const        r51, "total"
  Index        r52, r23, r37
  // orderId: o.id,
  Move         r53, r48
  Move         r54, r49
  // customer: c,
  Move         r55, r50
  Move         r56, r11
  // total: o.total
  Move         r57, r51
  Move         r58, r52
  // select {
  MakeMap      r59, 3, r53
  // let result = from o in orders
  Append       r2, r2, r59
L6:
  AddInt       r20, r20, r19
  Jump         L7
L3:
  // print("--- Left Join ---")
  Const        r61, "--- Left Join ---"
  Print        r61
  // for entry in result {
  IterPrep     r62, r2
  Len          r63, r62
  Const        r64, 0
L9:
  Less         r65, r64, r63
  JumpIfFalse  r65, L8
  Index        r67, r62, r64
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r68, "Order"
  Const        r75, "orderId"
  Index        r69, r67, r75
  Const        r77, "customer"
  Move         r70, r77
  Index        r71, r67, r77
  Move         r72, r37
  Index        r73, r67, r37
  PrintN       r68, 6, r68
  // for entry in result {
  Const        r80, 1
  Add          r64, r64, r80
  Jump         L9
L8:
  Return       r0
