func main (regs=88)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r12, r5, r9
  // left join c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r16, r7, r13
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // orderId: o.id,
  Const        r22, "orderId"
  Const        r23, "id"
  Index        r24, r12, r23
  // customer: c,
  Const        r25, "customer"
  // total: o.total
  Const        r26, "total"
  Const        r27, "total"
  // select {
  MakeMap      r32, 3, r22
  // let result = from o in orders
  Append       r4, r4, r32
L2:
  // left join c in customers on o.customerId == c.id
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r38, 0
L10:
  Less         r39, r38, r6
  JumpIfFalse  r39, L5
  Index        r12, r5, r38
  // left join c in customers on o.customerId == c.id
  Const        r42, 0
  Less         r43, r42, r8
  JumpIfFalse  r43, L6
  Index        r16, r7, r42
  Const        r45, "customerId"
  Index        r46, r12, r45
  Const        r47, "id"
  Index        r48, r16, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L7
L7:
  Const        r50, 1
L8:
  Add          r42, r42, r50
  Jump         L8
L6:
  // let result = from o in orders
  JumpIfTrue   r52, L9
  // select {
  MakeMap      r61, 3, r22
  // let result = from o in orders
  Append       r4, r4, r61
L9:
  Const        r63, 1
  Add          r38, r38, r63
  Jump         L10
L5:
  Move         r65, r4
  // print("--- Left Join ---")
  Const        r66, "--- Left Join ---"
  Print        r66
  // for entry in result {
  IterPrep     r67, r65
  Len          r68, r67
  Const        r69, 0
L12:
  Less         r70, r69, r68
  JumpIfFalse  r70, L11
  Index        r72, r67, r69
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r73, "Order"
  Const        r80, "orderId"
  Index        r74, r72, r80
  Move         r75, r25
  Const        r82, "customer"
  Index        r76, r72, r82
  Move         r77, r26
  Const        r84, "total"
  Index        r78, r72, r84
  PrintN       r73, 6, r73
  // for entry in result {
  Const        r86, 1
  Add          r69, r69, r86
  Jump         L12
L11:
  Return       r0
