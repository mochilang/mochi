func main (regs=126)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r2
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
  Less         r10, r9, r6
L4:
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // left join c in customers on o.customerId == c.id
  Const        r13, 0
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
L3:
  Index        r15, r7, r13
  Const        r17, "customerId"
  Index        r18, r11, r17
  Const        r19, "id"
  Index        r20, r15, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // orderId: o.id,
  Const        r22, "orderId"
  Const        r23, "id"
  Index        r24, r11, r23
  // customer: c,
  Const        r25, "customer"
  // total: o.total
  Const        r26, "total"
  Const        r27, "total"
  Index        r28, r11, r27
  // orderId: o.id,
  Move         r29, r22
  Move         r30, r24
  // customer: c,
  Move         r31, r25
  Move         r32, r15
  // total: o.total
  Move         r33, r26
  Move         r34, r28
  // select {
  MakeMap      r35, 3, r29
  // let result = from o in orders
  Append       r36, r4, r35
  // left join c in customers on o.customerId == c.id
  Const        r37, 1
  Add          r38, r13, r37
  Jump         L3
  // let result = from o in orders
  Const        r39, 1
L2:
  Add          r40, r9, r39
  Jump         L4
  Const        r41, 0
  Less         r42, r41, r6
L1:
  JumpIfFalse  r42, L5
  Index        r43, r5, r41
  Const        r44, false
  // left join c in customers on o.customerId == c.id
  Const        r45, 0
L0:
  Less         r46, r45, r8
L10:
  JumpIfFalse  r46, L6
  Index        r47, r7, r45
  Const        r48, "customerId"
  Index        r49, r43, r48
  Const        r50, "id"
  Index        r51, r47, r50
L8:
  Equal        r52, r49, r51
  JumpIfFalse  r52, L7
  Const        r44, true
  Const        r53, 1
  Add          r54, r45, r53
  Jump         L8
  // let result = from o in orders
  JumpIfTrue   r44, L9
  Const        r56, nil
  // orderId: o.id,
  Const        r57, "orderId"
  Const        r58, "id"
  Index        r59, r43, r58
L7:
  // customer: c,
  Const        r60, "customer"
  // total: o.total
  Const        r61, "total"
  Const        r62, "total"
  Index        r63, r43, r62
L6:
  // orderId: o.id,
  Move         r64, r57
  Move         r65, r59
  // customer: c,
  Move         r66, r60
  Move         r67, r56
  // total: o.total
  Move         r68, r61
  Move         r69, r63
  // select {
  MakeMap      r70, 3, r64
  // let result = from o in orders
  Append       r71, r36, r70
  Const        r72, 1
  Add          r73, r41, r72
  Jump         L10
  // print("--- Left Join ---")
  Const        r75, "--- Left Join ---"
  Print        r75
  // for entry in result {
  IterPrep     r76, r71
  Len          r77, r76
  Const        r78, 0
  Less         r79, r78, r77
  JumpIfFalse  r79, L11
  Index        r80, r76, r78
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r88, "Order"
L9:
  Move         r82, r88
  Const        r89, "orderId"
  Index        r90, r80, r89
  Move         r83, r90
L5:
  Const        r91, "customer"
  Move         r84, r91
  Const        r92, "customer"
  Index        r93, r80, r92
  Move         r85, r93
  Const        r94, "total"
L12:
  Move         r86, r94
  Const        r95, "total"
  Index        r96, r80, r95
  Move         r87, r96
  PrintN       r82, 6, r82
  // for entry in result {
  Const        r97, 1
  Add          r98, r78, r97
  Jump         L12
  Return       r0
