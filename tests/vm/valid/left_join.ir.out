func main (regs=99)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 3, "id": 101, "total": 80}]
  Move         r3, r2
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // left join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  Move         r12, r11
  // left join c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r15, r7, r13
  Move         r16, r15
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // orderId: o.id,
  Const        r22, "orderId"
  Const        r23, "id"
  Index        r24, r12, r23
  // customer: c,
  Const        r25, "customer"
  // total: o.total
  Const        r26, "total"
  Const        r27, "total"
  Index        r28, r12, r27
  // orderId: o.id,
  Move         r29, r22
  Move         r30, r24
  // customer: c,
  Move         r31, r25
  Move         r32, r16
  // total: o.total
  Move         r33, r26
  Move         r34, r28
  // select {
  MakeMap      r35, 3, r29
  // let result = from o in orders
  Append       r36, r4, r35
  Move         r4, r36
L2:
  // left join c in customers on o.customerId == c.id
  Const        r37, 1
  Add          r38, r13, r37
  Move         r13, r38
  Jump         L3
L1:
  // let result = from o in orders
  Const        r39, 1
  Add          r40, r9, r39
  Move         r9, r40
  Jump         L4
L0:
  Const        r41, 0
L10:
  Less         r42, r41, r6
  JumpIfFalse  r42, L5
  Index        r43, r5, r41
  Move         r12, r43
  Const        r44, false
  // left join c in customers on o.customerId == c.id
  Const        r45, 0
L8:
  Less         r46, r45, r8
  JumpIfFalse  r46, L6
  Index        r47, r7, r45
  Move         r16, r47
  Const        r48, "customerId"
  Index        r49, r12, r48
  Const        r50, "id"
  Index        r51, r16, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L7
  Const        r44, true
L7:
  Const        r53, 1
  Add          r54, r45, r53
  Move         r45, r54
  Jump         L8
L6:
  // let result = from o in orders
  Move         r55, r44
  JumpIfTrue   r55, L9
  Const        r56, nil
  Move         r16, r56
  // orderId: o.id,
  Const        r57, "orderId"
  Const        r58, "id"
  Index        r59, r12, r58
  // customer: c,
  Const        r60, "customer"
  // total: o.total
  Const        r61, "total"
  Const        r62, "total"
  Index        r63, r12, r62
  // orderId: o.id,
  Move         r64, r57
  Move         r65, r59
  // customer: c,
  Move         r66, r60
  Move         r67, r16
  // total: o.total
  Move         r68, r61
  Move         r69, r63
  // select {
  MakeMap      r70, 3, r64
  // let result = from o in orders
  Append       r71, r4, r70
  Move         r4, r71
L9:
  Const        r72, 1
  Add          r73, r41, r72
  Move         r41, r73
  Jump         L10
L5:
  Move         r74, r4
  // print("--- Left Join ---")
  Const        r75, "--- Left Join ---"
  Print        r75
  // for entry in result {
  IterPrep     r76, r74
  Len          r77, r76
  Const        r78, 0
L12:
  Less         r79, r78, r77
  JumpIfFalse  r79, L11
  Index        r80, r76, r78
  Move         r81, r80
  // print("Order", entry.orderId, "customer", entry.customer, "total", entry.total)
  Const        r88, "Order"
  Move         r82, r88
  Const        r89, "orderId"
  Index        r90, r81, r89
  Move         r83, r90
  Const        r91, "customer"
  Move         r84, r91
  Const        r92, "customer"
  Index        r93, r81, r92
  Move         r85, r93
  Const        r94, "total"
  Move         r86, r94
  Const        r95, "total"
  Index        r96, r81, r95
  Move         r87, r96
  PrintN       r82, 6, r82
  // for entry in result {
  Const        r97, 1
  Add          r98, r78, r97
  Move         r78, r98
  Jump         L12
L11:
  Return       r0
