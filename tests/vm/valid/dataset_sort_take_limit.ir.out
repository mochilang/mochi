func main (regs=44)
  // let products = [
  Const        r0, [{"name": "Laptop", "price": 1500}, {"name": "Smartphone", "price": 900}, {"name": "Tablet", "price": 600}, {"name": "Monitor", "price": 300}, {"name": "Keyboard", "price": 100}, {"name": "Mouse", "price": 50}, {"name": "Headphones", "price": 200}]
  Move         r1, r0
  // let expensive = from p in products
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
L1:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // sort by -p.price
  Const        r9, "price"
  Index        r10, r8, r9
  Neg          r11, r10
  Move         r12, r11
  // let expensive = from p in products
  Move         r13, r8
  MakeList     r14, 2, r12
  Append       r15, r2, r14
  Move         r2, r15
  Const        r16, 1
  Add          r17, r5, r16
  Move         r5, r17
  Jump         L1
L0:
  // sort by -p.price
  Const        r19, false
  Sort         18,2,19,0
  // let expensive = from p in products
  Move         r2, r18
  // skip 1
  Const        r20, 1
  // let expensive = from p in products
  Const        r21, nil
  Slice        r22, r2, r20, r21
  Move         r2, r22
  Const        r23, 0
  // take 3
  Const        r24, 3
  // let expensive = from p in products
  Slice        r25, r2, r23, r24
  Move         r2, r25
  Move         r26, r2
  // print("--- Top products (excluding most expensive) ---")
  Const        r27, "--- Top products (excluding most expensive) ---"
  Print        r27
  // for item in expensive {
  IterPrep     r28, r26
  Len          r29, r28
  Const        r30, 0
L3:
  Less         r31, r30, r29
  JumpIfFalse  r31, L2
  Index        r32, r28, r30
  Move         r33, r32
  // print(item.name, "costs $", item.price)
  Const        r37, "name"
  Index        r38, r33, r37
  Move         r34, r38
  Const        r39, "costs $"
  Move         r35, r39
  Const        r40, "price"
  Index        r41, r33, r40
  Move         r36, r41
  PrintN       r34, 3, r34
  // for item in expensive {
  Const        r42, 1
  Add          r43, r30, r42
  Move         r30, r43
  Jump         L3
L2:
  Return       r0

