fun main() {
  let people = {:name("Alice", age, _30}, {:name, "Bob", age, _15}, {:name, "Charlie", age, _65}, {:name, "Diana", age, _45})
  let adults = vec(>>(for(person(people, when, [age, person] >= 18), {:name, [name, person], age, [age, person], is_senior, [age, person] >= 60, })))
  print("--- Adults ---")
  loop(_tmp0(seq(adults)), if _tmp0 { (fun(person) => (fun(r) => cond(r == break, nil, else, recur(next(_tmp0))))(try(print([name, person], "is", [age, person], if [is_senior, person] { " (senior)" } else { "" }), next, catch(clojure_lang_ExceptionInfo, e, cond(_getMessage(e) == "continue", next, _getMessage(e) == "break", break, else, )))))(clojure_core_first(_tmp0)) })
}
main()
