func main (regs=117)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
  Const        r7, "cost"
  Const        r8, "qty"
  // from ps in partsupp
  IterPrep     r9, r2
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L6:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, "id"
  Const        r19, "supplier"
  Move         r20, r12
L5:
  LessInt      r21, r20, r17
  JumpIfFalse  r21, L1
  Index        r23, r16, r20
  Index        r24, r23, r18
  Index        r25, r15, r19
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join n in nations on n.id == s.nation
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, "nation"
  Move         r30, r12
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r33, r27, r30
  Index        r34, r33, r18
  Index        r35, r23, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // where n.name == "A"
  Index        r37, r33, r4
  Const        r38, "A"
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // part: ps.part,
  Const        r40, "part"
  Index        r41, r15, r5
  // value: ps.cost * ps.qty
  Const        r42, "value"
  Index        r43, r15, r7
  Index        r44, r15, r8
  Mul          r45, r43, r44
  // part: ps.part,
  Move         r46, r40
  Move         r47, r41
  // value: ps.cost * ps.qty
  Move         r48, r42
  Move         r49, r45
  // select {
  MakeMap      r50, 2, r46
  // from ps in partsupp
  Append       r3, r3, r50
L3:
  // join n in nations on n.id == s.nation
  Const        r52, 1
  Add          r30, r30, r52
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r20, r20, r52
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r11, r11, r52
  Jump         L6
L0:
  // from x in filtered
  Const        r53, []
  // part: g.key,
  Const        r54, "key"
  // from x in filtered
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, 0
  MakeMap      r59, 0, r0
  Const        r60, []
L9:
  LessInt      r61, r58, r57
  JumpIfFalse  r61, L7
  Index        r62, r56, r58
  // group by x.part into g
  Index        r64, r62, r5
  Str          r65, r64
  In           r66, r65, r59
  JumpIfTrue   r66, L8
  // from x in filtered
  Const        r67, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r70, "key"
  // group by x.part into g
  Move         r71, r64
  // from x in filtered
  Const        r72, "items"
  Move         r73, r67
  Const        r74, "count"
  Const        r75, 0
  Move         r76, r68
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  MakeMap      r84, 4, r76
  SetIndex     r59, r65, r84
  Append       r60, r60, r84
L8:
  Const        r86, "items"
  Index        r87, r59, r65
  Index        r88, r87, r86
  Append       r89, r88, r62
  SetIndex     r87, r86, r89
  Const        r90, "count"
  Index        r91, r87, r90
  AddInt       r92, r91, r52
  SetIndex     r87, r90, r92
  AddInt       r58, r58, r52
  Jump         L9
L7:
  Move         r93, r12
  Len          r94, r60
L13:
  LessInt      r95, r93, r94
  JumpIfFalse  r95, L10
  Index        r97, r60, r93
  // part: g.key,
  Const        r98, "part"
  Index        r99, r97, r54
  // total: sum(from r in g select r.value)
  Const        r100, "total"
  Const        r101, []
  IterPrep     r102, r97
  Len          r103, r102
  Move         r104, r12
L12:
  LessInt      r105, r104, r103
  JumpIfFalse  r105, L11
  Index        r107, r102, r104
  Index        r108, r107, r6
  Append       r101, r101, r108
  AddInt       r104, r104, r52
  Jump         L12
L11:
  Sum          r110, r101
  // part: g.key,
  Move         r111, r98
  Move         r112, r99
  // total: sum(from r in g select r.value)
  Move         r113, r100
  Move         r114, r110
  // select {
  MakeMap      r115, 2, r111
  // from x in filtered
  Append       r53, r53, r115
  AddInt       r93, r93, r52
  Jump         L13
L10:
  // print(grouped)
  Print        r53
  Return       r0
