func main (regs=111)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  Const        r1, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r3, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r5, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r6, []
  IterPrep     r7, r5
  Len          r8, r7
  Const        r9, 0
L6:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L5:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r19, "id"
  Index        r20, r18, r19
  Const        r21, "supplier"
  Index        r22, r12, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // join n in nations on n.id == s.nation
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
L4:
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "id"
  Index        r31, r29, r30
  Const        r32, "nation"
  Index        r33, r18, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L3
  // where n.name == "A"
  Const        r35, "name"
  Index        r36, r29, r35
  Const        r37, "A"
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // part: ps.part,
  Const        r40, "part"
  Index        r41, r12, r40
  // value: ps.cost * ps.qty
  Const        r43, "cost"
  Index        r44, r12, r43
  Const        r45, "qty"
  Index        r46, r12, r45
  Mul          r47, r44, r46
  // part: ps.part,
  Const        r48, "part"
  Move         r49, r41
  // value: ps.cost * ps.qty
  Const        r50, "value"
  Move         r51, r47
  // select {
  MakeMap      r52, 2, r48
  // from ps in partsupp
  Append       r53, r6, r52
  Move         r6, r53
L3:
  Const        r54, 1
  // join n in nations on n.id == s.nation
  AddInt       r26, r26, r54
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r9, r9, r54
  Jump         L6
L0:
  // let filtered =
  Move         r55, r6
  // from x in filtered
  Const        r56, []
  IterPrep     r57, r55
  Len          r58, r57
  Const        r59, 0
  MakeMap      r60, 0, r0
  Const        r61, []
L9:
  Less         r62, r59, r58
  JumpIfFalse  r62, L7
  Index        r63, r57, r59
  Move         r64, r63
  // group by x.part into g
  Const        r65, "part"
  Index        r66, r64, r65
  Str          r67, r66
  In           r68, r67, r60
  JumpIfTrue   r68, L8
  // from x in filtered
  Const        r70, "__group__"
  Const        r71, true
  Const        r72, "key"
  // group by x.part into g
  Move         r73, r66
  // from x in filtered
  Const        r74, "items"
  Const        r75, []
  MakeMap      r76, 3, r70
  SetIndex     r60, r67, r76
  Append       r77, r61, r76
  Move         r61, r77
L8:
  Const        r78, "items"
  Index        r79, r60, r67
  Index        r80, r79, r78
  Append       r81, r80, r63
  SetIndex     r79, r78, r81
  AddInt       r59, r59, r54
  Jump         L9
L7:
  Const        r82, 0
  Len          r83, r61
L13:
  Less         r84, r82, r83
  JumpIfFalse  r84, L10
  Index        r85, r61, r82
  Move         r86, r85
  // part: g.key,
  Const        r88, "key"
  Index        r89, r86, r88
  // total: sum(from r in g select r.value)
  Const        r91, []
  IterPrep     r92, r86
  Len          r93, r92
  Const        r94, 0
L12:
  Less         r95, r94, r93
  JumpIfFalse  r95, L11
  Index        r96, r92, r94
  Move         r97, r96
  Const        r98, "value"
  Index        r99, r97, r98
  Append       r100, r91, r99
  Move         r91, r100
  AddInt       r94, r94, r54
  Jump         L12
L11:
  Sum          r101, r91
  // part: g.key,
  Const        r102, "part"
  Move         r103, r89
  // total: sum(from r in g select r.value)
  Const        r104, "total"
  Move         r105, r101
  // select {
  MakeMap      r106, 2, r102
  // from x in filtered
  Append       r107, r56, r106
  Move         r56, r107
  Const        r82, 1
  Jump         L13
L10:
  // let grouped =
  Move         r110, r56
  // print(grouped)
  Print        r110
  Return       r0
