func main (regs=99)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  Const        r7, 0
  Move         r6, r7
L6:
  Less         r8, r6, r5
  JumpIfFalse  r8, L0
  Index        r10, r4, r6
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r11, r1
  Len          r12, r11
  Move         r13, r7
L5:
  Less         r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r16, r11, r13
  Const        r17, "id"
  Index        r18, r16, r17
  Const        r19, "supplier"
  Index        r20, r10, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // join n in nations on n.id == s.nation
  IterPrep     r22, r0
  Len          r23, r22
  Move         r24, r7
L4:
  Less         r25, r24, r23
  JumpIfFalse  r25, L2
  Index        r27, r22, r24
  Index        r28, r27, r17
  Const        r29, "nation"
  Index        r30, r16, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L3
  // where n.name == "A"
  Const        r32, "name"
  Index        r33, r27, r32
  Const        r34, "A"
  Equal        r35, r33, r34
  JumpIfFalse  r35, L3
  // part: ps.part,
  Const        r36, "part"
  Index        r37, r10, r36
  // value: ps.cost * ps.qty
  Const        r38, "value"
  Const        r39, "cost"
  // select {
  MakeMap      r46, 2, r36
  // from ps in partsupp
  Append       r3, r3, r46
L3:
  // join n in nations on n.id == s.nation
  Const        r48, 1
  Add          r24, r24, r48
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r13, r13, r48
  Jump         L5
L1:
  // from ps in partsupp
  Add          r6, r6, r48
  Jump         L6
L0:
  // from x in filtered
  Const        r50, []
  IterPrep     r51, r3
  Len          r52, r51
  Const        r53, 0
  MakeMap      r54, 0, r0
  Const        r55, []
L9:
  Less         r56, r53, r52
  JumpIfFalse  r56, L7
  Index        r57, r51, r53
  // group by x.part into g
  Index        r59, r57, r36
  Str          r60, r59
  In           r61, r60, r54
  JumpIfTrue   r61, L8
  // from x in filtered
  Const        r62, []
  Const        r63, "__group__"
  Const        r64, true
  Const        r65, "key"
  // group by x.part into g
  Move         r66, r59
  // from x in filtered
  Const        r67, "items"
  Move         r68, r62
  MakeMap      r69, 3, r63
  SetIndex     r54, r60, r69
  Append       r55, r55, r69
L8:
  Index        r71, r54, r60
  Index        r72, r71, r67
  Append       r73, r72, r57
  SetIndex     r71, r67, r73
  Add          r53, r53, r48
  Jump         L9
L7:
  Move         r75, r7
  Len          r76, r55
L13:
  Less         r77, r75, r76
  JumpIfFalse  r77, L10
  Index        r79, r55, r75
  // total: sum(from r in g select r.value)
  Const        r82, []
  IterPrep     r83, r79
  Len          r84, r83
  Const        r85, 0
L12:
  Less         r86, r85, r84
  JumpIfFalse  r86, L11
  Index        r88, r83, r85
  Index        r89, r88, r38
  Append       r82, r82, r89
  Const        r91, 1
  Add          r85, r85, r91
  Jump         L12
L11:
  // select {
  MakeMap      r96, 2, r36
  // from x in filtered
  Append       r50, r50, r96
  Add          r75, r75, r48
  Jump         L13
L10:
  // print(grouped)
  Print        r50
  Return       r0
