func main (regs=21)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
L8:
  Const        r7, "cost"
  Const        r8, "qty"
L1:
  // from ps in partsupp
  IterPrep     r9, r2
L6:
  Len          r2, r9
  Const        r10, 0
L2:
  Move         r11, r10
  LessInt      r12, r11, r2
  JumpIfFalse  r12, L0
  Index        r2, r9, r11
L5:
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r9, r1
  Len          r1, r9
L4:
  Const        r13, "id"
L0:
  Const        r14, "supplier"
  Move         r15, r10
  LessInt      r16, r15, r1
  JumpIfFalse  r16, L1
  Index        r1, r9, r15
  Index        r9, r1, r13
  Index        r17, r2, r14
  Equal        r14, r9, r17
  JumpIfFalse  r14, L2
  // join n in nations on n.id == s.nation
  IterPrep     r14, r0
  Len          r17, r14
  Const        r9, "nation"
  Move         r18, r10
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L2
  Index        r19, r14, r18
  Index        r14, r19, r13
  Index        r13, r1, r9
  Equal        r9, r14, r13
  JumpIfFalse  r9, L3
  // where n.name == "A"
  Index        r9, r19, r4
  Const        r19, "A"
  Equal        r4, r9, r19
  JumpIfFalse  r4, L3
  // part: ps.part,
  Const        r4, "part"
  Index        r19, r2, r5
  // value: ps.cost * ps.qty
  Const        r9, "value"
  Index        r13, r2, r7
  Index        r7, r2, r8
  Mul          r2, r13, r7
  // part: ps.part,
  Move         r7, r4
  Move         r4, r19
  // value: ps.cost * ps.qty
  Move         r19, r9
  Move         r9, r2
  // select {
  MakeMap      r2, 2, r7
  // from ps in partsupp
  Append       r3, r3, r2
L3:
  // join n in nations on n.id == s.nation
  Const        r2, 1
  Add          r18, r18, r2
  Jump         L4
  // join s in suppliers on s.id == ps.supplier
  Add          r15, r15, r2
  Jump         L5
  // from ps in partsupp
  AddInt       r11, r11, r2
  Jump         L2
  // from x in filtered
  Const        r18, []
  // part: g.key,
  Const        r16, "key"
  // from x in filtered
  IterPrep     r15, r3
  Len          r3, r15
  Const        r12, 0
  MakeMap      r11, 0, r0
  Const        r9, []
  LessInt      r19, r12, r3
  JumpIfFalse  r19, L6
  Index        r19, r15, r12
  // group by x.part into g
  Index        r15, r19, r5
  Str          r5, r15
  In           r3, r5, r11
  JumpIfTrue   r3, L7
  // from x in filtered
  Const        r3, []
  Const        r4, "__group__"
  Const        r7, true
  Const        r13, "key"
  // group by x.part into g
  Move         r8, r15
  // from x in filtered
  Const        r15, "items"
  Move         r14, r3
  Const        r3, "count"
  Const        r1, 0
  Move         r17, r4
  Move         r4, r7
  Move         r20, r13
  Move         r13, r8
  Move         r8, r15
  Move         r15, r14
  Move         r14, r3
  Move         r3, r1
  MakeMap      r1, 4, r17
  SetIndex     r11, r5, r1
  Append       r9, r9, r1
L7:
  Const        r1, "items"
  Index        r3, r11, r5
  Index        r5, r3, r1
  Append       r11, r5, r19
  SetIndex     r3, r1, r11
  Const        r11, "count"
  Index        r5, r3, r11
  AddInt       r1, r5, r2
  SetIndex     r3, r11, r1
  AddInt       r12, r12, r2
  Jump         L8
  Move         r1, r10
  Len          r5, r9
  LessInt      r11, r1, r5
  JumpIfFalse  r11, L9
  Index        r11, r9, r1
  // part: g.key,
  Const        r9, "part"
  Index        r5, r11, r16
  // total: sum(from r in g select r.value)
  Const        r16, "total"
  Const        r3, []
  IterPrep     r7, r11
  Len          r11, r7
  Move         r12, r10
L11:
  LessInt      r10, r12, r11
  JumpIfFalse  r10, L10
  Index        r10, r7, r12
  Index        r7, r10, r6
  Append       r3, r3, r7
  AddInt       r12, r12, r2
  Jump         L11
L10:
  Sum          r7, r3
  // part: g.key,
  Move         r3, r9
  Move         r9, r5
  // total: sum(from r in g select r.value)
  Move         r5, r16
  Move         r16, r7
  // select {
  MakeMap      r7, 2, r3
  // from x in filtered
  Append       r18, r18, r7
  AddInt       r1, r1, r2
  Jump         L8
L9:
  // print(grouped)
  Print        r18
  Return       r0
