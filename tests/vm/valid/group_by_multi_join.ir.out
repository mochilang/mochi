func main (regs=110)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  Const        r6, 0
L6:
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  Index        r9, r4, r6
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r10, r1
  Len          r11, r10
  Const        r12, 0
L5:
  Less         r13, r12, r11
  JumpIfFalse  r13, L1
  Index        r15, r10, r12
  Const        r16, "id"
  Index        r17, r15, r16
  Const        r18, "supplier"
  Index        r19, r9, r18
  Equal        r20, r17, r19
  JumpIfFalse  r20, L2
  // join n in nations on n.id == s.nation
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L4:
  Less         r24, r23, r22
  JumpIfFalse  r24, L2
  Index        r26, r21, r23
  Const        r27, "id"
  Index        r28, r26, r27
  Const        r29, "nation"
  Index        r30, r15, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L3
  // where n.name == "A"
  Const        r32, "name"
  Index        r33, r26, r32
  Const        r34, "A"
  Equal        r35, r33, r34
  JumpIfFalse  r35, L3
  // part: ps.part,
  Const        r36, "part"
  Const        r37, "part"
  Index        r38, r9, r37
  // value: ps.cost * ps.qty
  Const        r39, "value"
  // select {
  MakeMap      r47, 2, r36
  // from ps in partsupp
  Append       r3, r3, r47
L3:
  // join n in nations on n.id == s.nation
  Const        r49, 1
  Add          r23, r23, r49
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Const        r51, 1
  Add          r12, r12, r51
  Jump         L5
L1:
  // from ps in partsupp
  Const        r53, 1
  Add          r6, r6, r53
  Jump         L6
L0:
  // from x in filtered
  Const        r55, []
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, 0
  MakeMap      r59, 0, r0
  Const        r60, []
L9:
  Less         r61, r58, r57
  JumpIfFalse  r61, L7
  Index        r62, r56, r58
  Move         r63, r62
  // group by x.part into g
  Const        r64, "part"
  Index        r65, r63, r64
  Str          r66, r65
  In           r67, r66, r59
  JumpIfTrue   r67, L8
  // from x in filtered
  Const        r68, []
  Const        r69, "__group__"
  Const        r70, true
  Const        r71, "key"
  // group by x.part into g
  Move         r72, r65
  // from x in filtered
  Const        r73, "items"
  Move         r74, r68
  MakeMap      r75, 3, r69
  SetIndex     r59, r66, r75
L8:
  Const        r77, "items"
  Index        r78, r59, r66
  Index        r79, r78, r77
  Append       r80, r79, r62
  SetIndex     r78, r77, r80
  Const        r81, 1
  Add          r58, r58, r81
  Jump         L9
L7:
  Const        r83, 0
  Const        r84, 0
L13:
  Less         r85, r83, r84
  JumpIfFalse  r85, L10
  Index        r87, r60, r83
  // total: sum(from r in g select r.value)
  Const        r91, []
  IterPrep     r92, r87
  Len          r93, r92
  Const        r94, 0
L12:
  Less         r95, r94, r93
  JumpIfFalse  r95, L11
  Index        r97, r92, r94
  Const        r98, "value"
  Index        r99, r97, r98
  Append       r91, r91, r99
  Const        r101, 1
  Add          r94, r94, r101
  Jump         L12
L11:
  // select {
  MakeMap      r106, 2, r36
  // from x in filtered
  Append       r55, r55, r106
  Const        r108, 1
  Add          r83, r83, r108
  Jump         L13
L10:
  // print(grouped)
  Print        r55
  Return       r0
