func main (regs=118)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
  Const        r7, "cost"
  Const        r8, "qty"
  // from ps in partsupp
  IterPrep     r9, r2
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L6:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, "id"
  Const        r19, "supplier"
  Move         r20, r12
L5:
  LessInt      r21, r20, r17
  JumpIfFalse  r21, L1
  Index        r23, r16, r20
  Index        r24, r23, r18
  Index        r25, r15, r19
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join n in nations on n.id == s.nation
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, "nation"
  Move         r30, r12
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r33, r27, r30
  Index        r34, r33, r18
  Index        r35, r23, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // where n.name == "A"
  Index        r37, r33, r4
  Const        r38, "A"
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // part: ps.part,
  Move         r40, r5
  Index        r41, r15, r5
  // value: ps.cost * ps.qty
  Move         r42, r6
  Index        r43, r15, r7
  Index        r44, r15, r8
  Mul          r45, r43, r44
  // part: ps.part,
  Move         r46, r40
  Move         r47, r41
  // value: ps.cost * ps.qty
  Move         r48, r42
  Move         r49, r45
  // select {
  MakeMap      r50, 2, r46
  // from ps in partsupp
  Append       r3, r3, r50
L3:
  // join n in nations on n.id == s.nation
  Const        r52, 1
  Add          r30, r30, r52
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r20, r20, r52
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r11, r11, r52
  Jump         L6
L0:
  // from x in filtered
  Const        r53, []
  // part: g.key,
  Const        r54, "key"
  // total: sum(from r in g select r.value)
  Const        r55, "total"
  // from x in filtered
  IterPrep     r56, r3
  Len          r57, r56
  Move         r58, r12
  MakeMap      r59, 0, r0
  Move         r60, r53
L9:
  LessInt      r62, r58, r57
  JumpIfFalse  r62, L7
  Index        r63, r56, r58
  // group by x.part into g
  Index        r65, r63, r5
  Str          r66, r65
  In           r67, r66, r59
  JumpIfTrue   r67, L8
  // from x in filtered
  Move         r68, r53
  Const        r69, "__group__"
  Const        r70, true
  Move         r71, r54
  // group by x.part into g
  Move         r72, r65
  // from x in filtered
  Const        r73, "items"
  Move         r74, r68
  Const        r75, "count"
  Move         r76, r12
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  MakeMap      r85, 4, r77
  SetIndex     r59, r66, r85
  Append       r60, r60, r85
L8:
  Move         r87, r73
  Index        r88, r59, r66
  Index        r89, r88, r87
  Append       r90, r89, r63
  SetIndex     r88, r87, r90
  Move         r91, r75
  Index        r92, r88, r91
  AddInt       r93, r92, r52
  SetIndex     r88, r91, r93
  AddInt       r58, r58, r52
  Jump         L9
L7:
  Move         r94, r12
  Len          r95, r60
L13:
  LessInt      r96, r94, r95
  JumpIfFalse  r96, L10
  Index        r98, r60, r94
  // part: g.key,
  Move         r99, r5
  Index        r100, r98, r54
  // total: sum(from r in g select r.value)
  Move         r101, r55
  Move         r102, r68
  IterPrep     r103, r98
  Len          r104, r103
  Move         r105, r12
L12:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L11
  Index        r108, r103, r105
  Index        r109, r108, r6
  Append       r102, r102, r109
  AddInt       r105, r105, r52
  Jump         L12
L11:
  Sum          r111, r102
  // part: g.key,
  Move         r112, r99
  Move         r113, r100
  // total: sum(from r in g select r.value)
  Move         r114, r101
  Move         r115, r111
  // select {
  MakeMap      r116, 2, r112
  // from x in filtered
  Append       r53, r53, r116
  AddInt       r94, r94, r52
  Jump         L13
L10:
  // print(grouped)
  Print        r53
  Return       r0
