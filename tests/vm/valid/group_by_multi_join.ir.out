func main (regs=94)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
  Const        r7, "cost"
  Const        r8, "qty"
  // from ps in partsupp
  IterPrep     r9, r2
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L6:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, "id"
  Const        r19, "supplier"
  Move         r20, r12
L5:
  LessInt      r21, r20, r17
  JumpIfFalse  r21, L1
  Index        r23, r16, r20
  Index        r24, r23, r18
  Index        r25, r15, r19
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join n in nations on n.id == s.nation
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, "nation"
  Move         r30, r12
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r33, r27, r30
  Index        r34, r33, r18
  Index        r35, r23, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // where n.name == "A"
  Index        r37, r33, r4
  Const        r38, "A"
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // select {
  MakeMap      r46, 2, r5
  // from ps in partsupp
  Append       r3, r3, r46
L3:
  // join n in nations on n.id == s.nation
  Const        r48, 1
  Add          r30, r30, r48
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r20, r20, r48
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r11, r11, r48
  Jump         L6
L0:
  // from x in filtered
  Const        r49, []
  IterPrep     r52, r3
  Len          r53, r52
  Const        r54, 0
  MakeMap      r55, 0, r0
  Const        r56, []
L9:
  LessInt      r57, r54, r53
  JumpIfFalse  r57, L7
  Index        r58, r52, r54
  // group by x.part into g
  Index        r60, r58, r5
  Str          r61, r60
  In           r62, r61, r55
  JumpIfTrue   r62, L8
  // from x in filtered
  Const        r63, []
  Const        r64, "__group__"
  Const        r65, true
  // group by x.part into g
  Move         r66, r60
  // from x in filtered
  Const        r67, "items"
  Move         r68, r63
  MakeMap      r69, 3, r64
  SetIndex     r55, r61, r69
  Append       r56, r56, r69
L8:
  Index        r71, r55, r61
  Index        r72, r71, r67
  Append       r73, r72, r58
  SetIndex     r71, r67, r73
  AddInt       r54, r54, r48
  Jump         L9
L7:
  Move         r74, r12
  Len          r75, r56
L13:
  LessInt      r76, r74, r75
  JumpIfFalse  r76, L10
  Index        r78, r56, r74
  // total: sum(from r in g select r.value)
  Const        r80, []
  IterPrep     r81, r78
  Len          r82, r81
  Move         r83, r12
L12:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L11
  Index        r86, r81, r83
  Index        r87, r86, r6
  Append       r80, r80, r87
  AddInt       r83, r83, r48
  Jump         L12
L11:
  // select {
  MakeMap      r92, 2, r5
  // from x in filtered
  Append       r49, r49, r92
  AddInt       r74, r74, r48
  Jump         L13
L10:
  // print(grouped)
  Print        r49
  Return       r0
