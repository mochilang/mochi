func main (regs=109)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
  Const        r7, "cost"
  // from ps in partsupp
  IterPrep     r9, r2
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L6:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, "id"
  Const        r19, "supplier"
  Move         r20, r12
L5:
  LessInt      r21, r20, r17
  JumpIfFalse  r21, L1
  Index        r23, r16, r20
  Index        r24, r23, r18
  Index        r25, r15, r19
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join n in nations on n.id == s.nation
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, "nation"
  Move         r30, r12
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r33, r27, r30
  Index        r34, r33, r18
  Index        r35, r23, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // where n.name == "A"
  Index        r37, r33, r4
  Const        r38, "A"
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // part: ps.part,
  Const        r40, "part"
  Index        r41, r15, r5
  // value: ps.cost * ps.qty
  Const        r42, "value"
  Index        r43, r15, r7
  // select {
  MakeMap      r48, 2, r40
  // from ps in partsupp
  Append       r3, r3, r48
L3:
  // join n in nations on n.id == s.nation
  Const        r50, 1
  Add          r30, r30, r50
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Jump         L5
L1:
  // from ps in partsupp
  AddInt       r11, r11, r50
  Jump         L6
L0:
  // from x in filtered
  Const        r51, []
  // part: g.key,
  Const        r52, "key"
  // from x in filtered
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, 0
  MakeMap      r57, 0, r0
  Const        r58, []
L9:
  LessInt      r59, r56, r55
  JumpIfFalse  r59, L7
  Index        r60, r54, r56
  // group by x.part into g
  Index        r62, r60, r5
  Str          r63, r62
  In           r64, r63, r57
  JumpIfTrue   r64, L8
  // from x in filtered
  Const        r65, []
  Const        r66, "__group__"
  Const        r67, true
  // group by x.part into g
  Move         r68, r62
  // from x in filtered
  Const        r69, "items"
  Move         r70, r65
  Const        r71, "count"
  Move         r72, r66
  Move         r73, r67
  Move         r74, r52
  Move         r75, r68
  Move         r76, r69
  Move         r77, r70
  Move         r78, r71
  Move         r79, r12
  MakeMap      r80, 4, r72
  SetIndex     r57, r63, r80
  Append       r58, r58, r80
L8:
  Index        r82, r57, r63
  Index        r83, r82, r69
  Append       r84, r83, r60
  SetIndex     r82, r69, r84
  Index        r85, r82, r71
  AddInt       r86, r85, r50
  SetIndex     r82, r71, r86
  AddInt       r56, r56, r50
  Jump         L9
L7:
  Move         r87, r12
  Len          r88, r58
L13:
  LessInt      r89, r87, r88
  JumpIfFalse  r89, L10
  Index        r91, r58, r87
  // part: g.key,
  Const        r92, "part"
  Index        r93, r91, r52
  // total: sum(from r in g select r.value)
  Const        r94, "total"
  Const        r95, []
  IterPrep     r96, r91
  Len          r97, r96
  Move         r98, r12
L12:
  LessInt      r99, r98, r97
  JumpIfFalse  r99, L11
  Index        r101, r96, r98
  Index        r102, r101, r6
  Append       r95, r95, r102
  AddInt       r98, r98, r50
  Jump         L12
L11:
  // select {
  MakeMap      r107, 2, r92
  // from x in filtered
  Append       r51, r51, r107
  AddInt       r87, r87, r50
  Jump         L13
L10:
  // print(grouped)
  Print        r51
  Return       r0
