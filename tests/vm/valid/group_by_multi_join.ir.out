func main (regs=97)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  Const        r7, 0
  Move         r6, r7
L6:
  LessInt      r8, r6, r5
  JumpIfFalse  r8, L0
  Index        r10, r4, r6
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, "id"
  Const        r14, "supplier"
  // where n.name == "A"
  Const        r15, "name"
  // part: ps.part,
  Const        r16, "part"
  // value: ps.cost * ps.qty
  Const        r17, "value"
  Const        r18, "cost"
  Const        r19, "qty"
  // join s in suppliers on s.id == ps.supplier
  Move         r20, r7
L5:
  LessInt      r21, r20, r12
  JumpIfFalse  r21, L1
  Index        r23, r11, r20
  Index        r24, r23, r13
  Index        r25, r10, r14
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join n in nations on n.id == s.nation
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, "nation"
  Move         r30, r7
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r33, r27, r30
  Index        r34, r33, r13
  Index        r35, r23, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // where n.name == "A"
  Index        r37, r33, r15
  Const        r38, "A"
  Equal        r39, r37, r38
  JumpIfFalse  r39, L3
  // select {
  MakeMap      r46, 2, r16
  // from ps in partsupp
  Append       r3, r3, r46
L3:
  // join n in nations on n.id == s.nation
  Const        r48, 1
  Add          r30, r30, r48
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r20, r20, r48
  Jump         L5
L1:
  // from ps in partsupp
  Add          r6, r6, r48
  Jump         L6
L0:
  // from x in filtered
  Const        r50, []
  IterPrep     r53, r3
  Len          r54, r53
  Const        r55, 0
  MakeMap      r56, 0, r0
  Const        r57, []
L9:
  LessInt      r58, r55, r54
  JumpIfFalse  r58, L7
  Index        r59, r53, r55
  // group by x.part into g
  Index        r61, r59, r16
  Str          r62, r61
  In           r63, r62, r56
  JumpIfTrue   r63, L8
  // from x in filtered
  Const        r64, []
  Const        r65, "__group__"
  Const        r66, true
  // group by x.part into g
  Move         r67, r61
  // from x in filtered
  Const        r68, "items"
  Move         r69, r64
  MakeMap      r70, 3, r65
  SetIndex     r56, r62, r70
  Append       r57, r57, r70
L8:
  Index        r72, r56, r62
  Index        r73, r72, r68
  Append       r74, r73, r59
  SetIndex     r72, r68, r74
  AddInt       r55, r55, r48
  Jump         L9
L7:
  Move         r75, r7
  Len          r76, r57
L13:
  LessInt      r77, r75, r76
  JumpIfFalse  r77, L10
  Index        r79, r57, r75
  // total: sum(from r in g select r.value)
  Const        r81, []
  IterPrep     r82, r79
  Len          r83, r82
  Const        r84, 0
L12:
  Less         r85, r84, r83
  JumpIfFalse  r85, L11
  Index        r87, r82, r84
  Index        r88, r87, r17
  Append       r81, r81, r88
  Const        r90, 1
  Add          r84, r84, r90
  Jump         L12
L11:
  // select {
  MakeMap      r95, 2, r16
  // from x in filtered
  Append       r50, r50, r95
  AddInt       r75, r75, r48
  Jump         L13
L10:
  // print(grouped)
  Print        r50
  Return       r0
