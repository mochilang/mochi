func main (regs=126)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  Move         r1, r0
  // let suppliers = [
  Const        r2, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  Move         r3, r2
  // let partsupp = [
  Const        r4, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  Move         r5, r4
  // from ps in partsupp
  Const        r6, []
  IterPrep     r7, r5
  Len          r8, r7
  Const        r9, 0
L6:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L5:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r19, "id"
  Index        r20, r18, r19
  Const        r21, "supplier"
  Index        r22, r12, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // join n in nations on n.id == s.nation
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
L4:
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "id"
  Index        r31, r29, r30
  Const        r32, "nation"
  Index        r33, r18, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L3
  // where n.name == "A"
  Const        r35, "name"
  Index        r36, r29, r35
  Const        r37, "A"
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // part: ps.part,
  Const        r39, "part"
  Const        r40, "part"
  Index        r41, r12, r40
  // value: ps.cost * ps.qty
  Const        r42, "value"
  Const        r43, "cost"
  Index        r44, r12, r43
  Const        r45, "qty"
  Index        r46, r12, r45
  Mul          r47, r44, r46
  // part: ps.part,
  Move         r48, r39
  Move         r49, r41
  // value: ps.cost * ps.qty
  Move         r50, r42
  Move         r51, r47
  // select {
  MakeMap      r52, 2, r48
  // from ps in partsupp
  Append       r53, r6, r52
  Move         r6, r53
L3:
  // join n in nations on n.id == s.nation
  Const        r54, 1
  Add          r55, r26, r54
  Move         r26, r55
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Const        r56, 1
  Add          r57, r15, r56
  Move         r15, r57
  Jump         L5
L1:
  // from ps in partsupp
  Const        r58, 1
  Add          r59, r9, r58
  Move         r9, r59
  Jump         L6
L0:
  // let filtered =
  Move         r60, r6
  // from x in filtered
  Const        r61, []
  IterPrep     r62, r60
  Len          r63, r62
  Const        r64, 0
  MakeMap      r65, 0, r0
  Const        r66, []
L9:
  Less         r67, r64, r63
  JumpIfFalse  r67, L7
  Index        r68, r62, r64
  Move         r69, r68
  // group by x.part into g
  Const        r70, "part"
  Index        r71, r69, r70
  Str          r72, r71
  In           r73, r72, r65
  JumpIfTrue   r73, L8
  // from x in filtered
  Const        r74, []
  Const        r75, "__group__"
  Const        r76, true
  Const        r77, "key"
  // group by x.part into g
  Move         r78, r71
  // from x in filtered
  Const        r79, "items"
  Move         r80, r74
  // group by x.part into g
  Const        r81, "part"
  Move         r82, r71
  // from x in filtered
  MakeMap      r83, 4, r75
  SetIndex     r65, r72, r83
  Append       r84, r66, r83
  Move         r66, r84
L8:
  Const        r85, "items"
  Index        r86, r65, r72
  Index        r87, r86, r85
  Append       r88, r87, r68
  SetIndex     r86, r85, r88
  Const        r89, 1
  Add          r90, r64, r89
  Move         r64, r90
  Jump         L9
L7:
  Const        r91, 0
  Len          r92, r66
L13:
  Less         r93, r91, r92
  JumpIfFalse  r93, L10
  Index        r94, r66, r91
  Move         r95, r94
  Const        r96, "part"
  Index        r97, r94, r96
  Const        r98, "part"
  Index        r99, r94, r98
  // part: g.key,
  Const        r100, "part"
  Const        r101, "key"
  Index        r102, r95, r101
  // total: sum(from r in g select r.value)
  Const        r103, "total"
  Const        r104, []
  IterPrep     r105, r95
  Len          r106, r105
  Const        r107, 0
L12:
  Less         r108, r107, r106
  JumpIfFalse  r108, L11
  Index        r109, r105, r107
  Move         r110, r109
  Const        r111, "value"
  Index        r112, r110, r111
  Append       r113, r104, r112
  Move         r104, r113
  Const        r114, 1
  Add          r115, r107, r114
  Move         r107, r115
  Jump         L12
L11:
  Sum          116,104,0,0
  // part: g.key,
  Move         r117, r100
  Move         r118, r102
  // total: sum(from r in g select r.value)
  Move         r119, r103
  Move         r120, r116
  // select {
  MakeMap      r121, 2, r117
  // from x in filtered
  Append       r122, r61, r121
  Move         r61, r122
  Const        r123, 1
  Add          r124, r91, r123
  Move         r91, r124
  Jump         L13
L10:
  // let grouped =
  Move         r125, r61
  // print(grouped)
  Print        r125
  Return       r0

