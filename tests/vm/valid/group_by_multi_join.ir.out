func main (regs=27)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
L9:
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  // where n.name == "A"
  Const        r4, "name"
  // part: ps.part,
  Const        r5, "part"
  // value: ps.cost * ps.qty
  Const        r6, "value"
L0:
  Const        r7, "cost"
  Const        r8, "qty"
L8:
  // from ps in partsupp
  IterPrep     r9, r2
  Len          r2, r9
L2:
  Const        r10, 0
L6:
  Move         r11, r10
  LessInt      r12, r11, r2
  JumpIfFalse  r12, L0
L3:
  Index        r2, r9, r11
L5:
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r9, r1
  Len          r1, r9
L4:
  Const        r13, "id"
L1:
  Const        r14, "supplier"
  Move         r15, r10
  LessInt      r16, r15, r1
  JumpIfFalse  r16, L1
  Index        r1, r9, r15
  Index        r9, r1, r13
  Index        r17, r2, r14
  Equal        r14, r9, r17
  JumpIfFalse  r14, L2
  // join n in nations on n.id == s.nation
  IterPrep     r14, r0
  Len          r17, r14
  Const        r9, "nation"
  Move         r18, r10
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L2
  Index        r19, r14, r18
  Index        r14, r19, r13
  Index        r13, r1, r9
  Equal        r9, r14, r13
  JumpIfFalse  r9, L3
  // where n.name == "A"
  Index        r9, r19, r4
  Const        r19, "A"
  Equal        r4, r9, r19
  JumpIfFalse  r4, L3
  // part: ps.part,
  Move         r4, r5
  Index        r19, r2, r5
  // value: ps.cost * ps.qty
  Move         r9, r6
  Index        r13, r2, r7
  Index        r7, r2, r8
  Mul          r2, r13, r7
  // part: ps.part,
  Move         r7, r4
  Move         r4, r19
  // value: ps.cost * ps.qty
  Move         r19, r9
  Move         r9, r2
  // select {
  MakeMap      r2, 2, r7
  // from ps in partsupp
  Append       r3, r3, r2
  // join n in nations on n.id == s.nation
  Const        r2, 1
  Add          r18, r18, r2
  Jump         L4
  // join s in suppliers on s.id == ps.supplier
  Add          r15, r15, r2
  Jump         L5
  // from ps in partsupp
  AddInt       r11, r11, r2
  Jump         L6
  // from x in filtered
  Const        r18, []
  // part: g.key,
  Const        r16, "key"
  // total: sum(from r in g select r.value)
  Const        r15, "total"
  // from x in filtered
  IterPrep     r12, r3
  Len          r3, r12
  Move         r11, r10
  MakeMap      r9, 0, r0
  Move         r19, r18
  Move         r4, r10
  LessInt      r7, r11, r3
  JumpIfFalse  r7, L7
  Index        r7, r12, r11
  // group by x.part into g
  Index        r12, r7, r5
  Str          r3, r12
  In           r13, r3, r9
  JumpIfTrue   r13, L8
  // from x in filtered
  Move         r13, r18
  Const        r8, "__group__"
  Const        r14, true
  Move         r1, r16
  // group by x.part into g
  Move         r17, r12
  // from x in filtered
  Const        r12, "items"
  Move         r20, r13
  Const        r21, "count"
  Move         r22, r4
  Move         r23, r8
  Move         r8, r14
  Move         r14, r1
  Move         r24, r17
  Move         r17, r12
  Move         r25, r20
  Move         r20, r21
  Move         r26, r22
  MakeMap      r22, 4, r23
  SetIndex     r9, r3, r4
  Append       r19, r19, r22
  AddInt       r4, r4, r2
  Move         r22, r12
  Index        r12, r9, r3
  Index        r3, r19, r12
  Index        r12, r3, r22
  Append       r9, r12, r7
  SetIndex     r3, r22, r9
  Move         r9, r21
  Index        r21, r3, r9
  AddInt       r12, r21, r2
  SetIndex     r3, r9, r12
  AddInt       r11, r11, r2
  Jump         L9
L7:
  Move         r12, r10
  Len          r21, r19
  LessInt      r9, r12, r21
  JumpIfFalse  r9, L10
  Index        r9, r19, r12
  // part: g.key,
  Move         r19, r5
  Index        r5, r9, r16
  // total: sum(from r in g select r.value)
  Move         r16, r15
  Move         r15, r13
  IterPrep     r13, r9
  Len          r9, r13
  Move         r21, r10
L12:
  LessInt      r10, r21, r9
  JumpIfFalse  r10, L11
  Index        r10, r13, r21
  Index        r13, r10, r6
  Append       r15, r15, r13
  AddInt       r21, r21, r2
  Jump         L12
L11:
  Sum          r13, r15
  // part: g.key,
  Move         r15, r19
  Move         r19, r5
  // total: sum(from r in g select r.value)
  Move         r5, r16
  Move         r16, r13
  // select {
  MakeMap      r13, 2, r15
  // from x in filtered
  Append       r18, r18, r13
  AddInt       r12, r12, r2
  Jump         L3
L10:
  // print(grouped)
  Print        r18
  Return       r0
