func main (regs=106)
  // let nations = [
  Const        r0, [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
  // let suppliers = [
  Const        r1, [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
  // let partsupp = [
  Const        r2, [{"cost": 10, "part": 100, "qty": 2, "supplier": 1}, {"cost": 20, "part": 100, "qty": 1, "supplier": 2}, {"cost": 5, "part": 200, "qty": 3, "supplier": 1}]
  // from ps in partsupp
  Const        r3, []
  IterPrep     r4, r2
  Len          r5, r4
  Const        r7, 0
  Move         r6, r7
L6:
  Less         r8, r6, r5
  JumpIfFalse  r8, L0
  Index        r10, r4, r6
  // join s in suppliers on s.id == ps.supplier
  IterPrep     r11, r1
  Len          r12, r11
  Move         r13, r7
L5:
  Less         r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r16, r11, r13
  Const        r17, "id"
  Index        r18, r16, r17
  Const        r19, "supplier"
  Index        r20, r10, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // join n in nations on n.id == s.nation
  IterPrep     r22, r0
  Len          r23, r22
  Move         r24, r7
L4:
  Less         r25, r24, r23
  JumpIfFalse  r25, L2
  Index        r27, r22, r24
  Const        r28, "id"
  Index        r29, r27, r28
  Const        r30, "nation"
  Index        r31, r16, r30
  Equal        r32, r29, r31
  JumpIfFalse  r32, L3
  // where n.name == "A"
  Const        r33, "name"
  Index        r34, r27, r33
  Const        r35, "A"
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // part: ps.part,
  Const        r37, "part"
  Const        r38, "part"
  Index        r39, r10, r38
  // value: ps.cost * ps.qty
  Const        r40, "value"
  // select {
  MakeMap      r48, 2, r37
  // from ps in partsupp
  Append       r3, r3, r48
L3:
  // join n in nations on n.id == s.nation
  Const        r50, 1
  Add          r24, r24, r50
  Jump         L4
L2:
  // join s in suppliers on s.id == ps.supplier
  Add          r13, r13, r50
  Jump         L5
L1:
  // from ps in partsupp
  Add          r6, r6, r50
  Jump         L6
L0:
  // from x in filtered
  Const        r54, []
  IterPrep     r55, r3
  Len          r56, r55
  Const        r57, 0
  MakeMap      r58, 0, r0
  Const        r59, []
L9:
  Less         r60, r57, r56
  JumpIfFalse  r60, L7
  Index        r61, r55, r57
  Move         r62, r61
  // group by x.part into g
  Const        r63, "part"
  Index        r64, r62, r63
  Str          r65, r64
  In           r66, r65, r58
  JumpIfTrue   r66, L8
  // from x in filtered
  Const        r67, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r70, "key"
  // group by x.part into g
  Move         r71, r64
  // from x in filtered
  Const        r72, "items"
  Move         r73, r67
  MakeMap      r74, 3, r68
  SetIndex     r58, r65, r74
L8:
  Index        r76, r58, r65
  Index        r77, r76, r72
  Append       r78, r77, r61
  SetIndex     r76, r72, r78
  Add          r57, r57, r50
  Jump         L9
L7:
  Move         r80, r7
  Const        r81, 0
L13:
  Less         r82, r80, r81
  JumpIfFalse  r82, L10
  Index        r84, r59, r80
  // total: sum(from r in g select r.value)
  Const        r88, []
  IterPrep     r89, r84
  Len          r90, r89
  Const        r91, 0
L12:
  Less         r92, r91, r90
  JumpIfFalse  r92, L11
  Index        r94, r89, r91
  Const        r95, "value"
  Index        r96, r94, r95
  Append       r88, r88, r96
  Const        r98, 1
  Add          r91, r91, r98
  Jump         L12
L11:
  // select {
  MakeMap      r103, 2, r37
  // from x in filtered
  Append       r54, r54, r103
  Add          r80, r80, r50
  Jump         L13
L10:
  // print(grouped)
  Print        r54
  Return       r0
