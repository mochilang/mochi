fun main() {
  let products = {:name("Laptop", price, _1500}, {:name, "Smartphone", price, _900}, {:name, "Tablet", price, _600}, {:name, "Monitor", price, _300}, {:name, "Keyboard", price, _100}, {:name, "Mouse", price, _50}, {:name, "Headphones", price, _200})
  let expensive = vec(>>(for(p(products), p), sort_by(fn(p(), (-[price, p]))), drop(1), take(3)))
  print("--- Top products (excluding most expensive) ---")
  loop(_tmp0(seq(expensive)), if _tmp0 { (fun(item) => (fun(r) => cond(r == break, nil, else, recur(next(_tmp0))))(try(print([name, item], "costs $", [price, item]), next, catch(clojure_lang_ExceptionInfo, e, cond(_getMessage(e) == "continue", next, _getMessage(e) == "break", break, else, )))))(clojure_core_first(_tmp0)) })
}
main()
