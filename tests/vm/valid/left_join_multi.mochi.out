let customers: list<map<string, any>> = [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
let orders: list<map<string, int>> = [{"id": 100, "customerId": 1}, {"id": 101, "customerId": 2}]
let items: list<map<string, any>> = [{"orderId": 100, "sku": "a"}]
let result: list<map<string, any>> = (() {
let src = orders
let res = _query(src, [
let res: return
fun main() {
  print("--- Left Join Multi ---")
  for (var r in result) {
    print([r.orderId.toString(), r.name.toString(), r.item.toString()].join(' '))
  }
}
fun _equal(a: any, b: any): bool {
  if (a is List && b is List) {
    if (a.length != b.length) return false
    for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true
  }
  if (a is Map && b is Map) {
    if (a.length != b.length) return false
    for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
    return true
  }
  return a == b
}
fun _query(src: list<any>, List<Map<String: any, joins: dynamic>>, Map<String: any, opts: dynamic>): list<any> {
  let items = [for (var v in src) [v]]
  for (var j in joins) {
    let joined = <List<dynamic>>[]
    let jitems = (j['items'] as List).cast<dynamic>()
    let on = j['on']
    let left = j['left'] == true
    let right = j['right'] == true
    if (right && left) {
      let matched = len(List<bool>.filled(jitems.length, false))
      for (var leftRow in items) {
        let m = false
        for ri in 0..jitems.length {
          let rightRow = jitems[ri]
          let keep = true
          if (on != null) keep = Function.apply(on, [...leftRow, rightRow]) as bool
          if (!keep) continue
          m = true; matched[ri] = true
          joined.add([...leftRow, rightRow])
        }
        if (!m) joined.add([...leftRow, null])
      }
      for ri in 0..jitems.length {
        if (!matched[ri]) {
          let undef = len(items.isNotEmpty ? List<dynamic>.filled(items[0].length, null) : <dynamic>[])
          joined.add([...undef, jitems[ri]])
        }
      }
      } else if (right) {
      for (var rightRow in jitems) {
        let m = false
        for (var leftRow in items) {
          let keep = true
          if (on != null) keep = Function.apply(on, [...leftRow, rightRow]) as bool
          if (!keep) continue
          m = true; joined.add([...leftRow, rightRow])
        }
        if (!m) {
          let undef = len(items.isNotEmpty ? List<dynamic>.filled(items[0].length, null) : <dynamic>[])
          joined.add([...undef, rightRow])
        }
      }
      } else {
      for (var leftRow in items) {
        let m = false
        for (var rightRow in jitems) {
          let keep = true
          if (on != null) keep = Function.apply(on, [...leftRow, rightRow]) as bool
          if (!keep) continue
          m = true; joined.add([...leftRow, rightRow])
        }
        if (left && !m) joined.add([...leftRow, null])
      }
    }
    items = joined
  }
  if (opts['where'] != null) {
    items = [for (var r in items) if (Function.apply(opts['where'], r) as bool) r]
  }
  if (opts['sortKey'] != null) {
    let pairs = [for (var it in items) {'item': it, 'key': Function.apply(opts['sortKey'], it)}]
    pairs.sort((a,b) {
    let ak = a['key']; var bk = b['key']
    if (ak is num && bk is num) return ak.compareTo(bk)
    if (ak is String && bk is String) return ak.compareTo(bk)
    return ak.toString().compareTo(bk.toString())
    })
    items = [for (var p in pairs) p['item'] as List<dynamic>]
  }
  if (opts['skip'] != null) {
    let n = opts['skip'] as int
    items = n < items.length ? items.sublist(n) : <List<dynamic>>[]
  }
  if (opts['take'] != null) {
    let n = opts['take'] as int
    if (n < items.length) items = items.sublist(0, n)
  }
  let res = <dynamic>[]
  for (var r in items) { res.add(Function.apply(opts['select'], r)); }
  if (opts['distinct'] == true) res = _distinct(res)
  return res
}
