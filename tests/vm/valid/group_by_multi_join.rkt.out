#lang racket
; generated by Mochi
(require racket/list racket/string racket/system json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (sum x)
  (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (_fetch url opts)
  (define opts (or opts (hash)))
  (define method (hash-ref opts 'method "GET"))
  (define args (list "curl" "-s" "-X" method))
  (when (hash-has-key? opts 'headers)
    (for ([k (hash-keys (hash-ref opts 'headers))])
      (set! args (append args (list "-H" (format "~a: ~a" k (hash-ref (hash-ref opts 'headers) k)))))))
  (when (hash-has-key? opts 'query)
    (define q (hash-ref opts 'query))
    (define qs (string-join (for/list ([k (hash-keys q)]) (format "~a=~a" k (hash-ref q k))) "&"))
    (set! url (string-append url (if (regexp-match? #px"\\?" url) "&" "?") qs)))
  (when (hash-has-key? opts 'body)
    (set! args (append args (list "-d" (jsexpr->string (hash-ref opts 'body))))) )
  (when (hash-has-key? opts 'timeout)
    (set! args (append args (list "--max-time" (format "~a" (hash-ref opts 'timeout))))) )
  (set! args (append args (list url)))
  (define out (with-output-to-string (lambda () (apply system* args))))
  (string->jsexpr out))

(define (_load path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define text (if path (call-with-input-file path port->string) (port->string (current-input-port))))
  (cond [(string=? fmt "jsonl") (for/list ([l (in-lines (open-input-string text))] #:unless (regexp-match? #px"^\\s*$" l)) (string->jsexpr l))]
        [(string=? fmt "json") (let ([d (string->jsexpr text)]) (if (list? d) d (list d)))]
        [else '()]))

(define (_save rows path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define out (if path (open-output-file path #:exists 'replace) (current-output-port)))
  (cond [(string=? fmt "jsonl") (for ([r rows]) (fprintf out "~a\n" (jsexpr->string r)))]
        [(string=? fmt "json") (fprintf out "~a" (jsexpr->string rows))])
  (when path (close-output-port out)))

;; grouping helpers
(struct _Group (key Items) #:mutable)

(define (_group_by src keyfn)
  (define groups (make-hash))
  (define order '())
  (for ([it src])
    (define k (keyfn it))
    (define ks (format "~a" k))
    (define g (hash-ref groups ks #f))
    (unless g
      (set! g (_Group k '()))
      (hash-set! groups ks g)
      (set! order (append order (list ks))))
    (set-_Group-Items! g (append (_Group-Items g) (list it))))
  (for/list ([ks order]) (hash-ref groups ks)))

(define (_distinct xs)
  (remove-duplicates xs))
(define nations (list (hash "id" 1 "name" "A") (hash "id" 2 "name" "B")))
(define suppliers (list (hash "id" 1 "nation" 1) (hash "id" 2 "nation" 2)))
(define partsupp (list (hash "part" 100 "supplier" 1 "cost" 10 "qty" 2) (hash "part" 100 "supplier" 2 "cost" 20 "qty" 1) (hash "part" 200 "supplier" 1 "cost" 5 "qty" 3)))
(define filtered (let ([_res '()])
  (for ([ps partsupp])
    (for ([s suppliers])
      (when (equal? (hash-ref s "id") (hash-ref ps "supplier"))
        (for ([n nations])
          (when (equal? (hash-ref n "id") (hash-ref s "nation"))
            (when (equal? (hash-ref n "name") "A")
              (set! _res (append _res (list (hash "part" (hash-ref ps "part") "value" (* (hash-ref ps "cost") (hash-ref ps "qty"))))))
            )
          )
        )
      )
    )
  )
  _res))
(define grouped (let ([groups (_group_by filtered (lambda (x) (hash-ref x "part")))])
  (let ([_res '()])
    (for ([g groups])
      (set! _res (append _res (list (hash "part" (_Group-key g) "total" (sum (let ([_res '()])
  (for ([r g])
    (set! _res (append _res (list (hash-ref r "value"))))
  )
  _res))))))
    )
    _res)))
(displayln grouped)
