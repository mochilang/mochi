;; Generated by Mochi 0.10.31 on 2025-07-20 14:31 +0700
#lang racket
(require racket/list racket/string)

(define customers (list (hash id 1 name "Alice") (hash id 2 name "Bob") (hash id 3 name "Charlie") (hash id 4 name "Diana")))
(define orders (list (hash id 100 customerId 1 total 250) (hash id 101 customerId 2 total 125) (hash id 102 customerId 1 total 300)))
(define result (let ([_res '()])
  (for ([o orders])
    (let ([matched #f])
      (for ([c customers])
        (when (= (hash-ref o "customerId") (hash-ref c "id"))
          (set! matched #t)
          (set! _res (append _res (list (hash customerName (hash-ref c "name") order o))))
      )
      (when (not matched)
        (let ([c #f])
          (set! _res (append _res (list (hash customerName (hash-ref c "name") order o))))
        )
      )
    ))
  )
  _res))
(displayln "--- Right Join using syntax ---")
(for ([entry result])
(if (hash-ref entry "order") (begin
(displayln (format "~a ~a ~a ~a ~a ~a" "Customer" (hash-ref entry "customerName") "has order" (hash-ref (hash-ref entry "id") "order") "- $" (hash-ref (hash-ref entry "total") "order")))
) (begin
(displayln (format "~a ~a ~a" "Customer" (hash-ref entry "customerName") "has no orders"))
))
)
