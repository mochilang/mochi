func main (regs=132)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // outer join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
L4:
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r10, r3, r7
  // outer join c in customers on o.customerId == c.id
  Const        r11, 0
L3:
  Less         r12, r11, r6
  JumpIfFalse  r12, L1
  Index        r14, r5, r11
  Const        r15, "customerId"
  Index        r16, r10, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // order: o,
  Const        r20, "order"
  // customer: c
  Const        r21, "customer"
  // order: o,
  Move         r22, r10
  // customer: c
  Move         r23, r14
  // select {
  MakeMap      r24, 2, r20
  // let result = from o in orders
  Append       r2, r2, r24
L2:
  // outer join c in customers on o.customerId == c.id
  Const        r26, 1
  Add          r11, r11, r26
  Jump         L3
L1:
  // let result = from o in orders
  Const        r28, 1
  Add          r7, r7, r28
  Jump         L4
L0:
  Const        r30, 0
L10:
  Less         r31, r30, r4
  JumpIfFalse  r31, L5
  Index        r10, r3, r30
  Const        r33, false
  // outer join c in customers on o.customerId == c.id
  Const        r34, 0
L8:
  Less         r35, r34, r6
  JumpIfFalse  r35, L6
  Index        r14, r5, r34
  Const        r37, "customerId"
  Index        r38, r10, r37
  Const        r39, "id"
  Index        r40, r14, r39
  Equal        r41, r38, r40
  JumpIfFalse  r41, L7
  Const        r33, true
L7:
  Const        r42, 1
  Add          r34, r34, r42
  Jump         L8
L6:
  // let result = from o in orders
  Move         r44, r33
  JumpIfTrue   r44, L9
  // select {
  MakeMap      r48, 2, r20
  // let result = from o in orders
  Append       r2, r2, r48
L9:
  Const        r50, 1
  Add          r30, r30, r50
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r52, 0
L16:
  Less         r53, r52, r6
  JumpIfFalse  r53, L11
  Index        r14, r5, r52
  Const        r55, false
  // let result = from o in orders
  Const        r56, 0
L14:
  Less         r57, r56, r4
  JumpIfFalse  r57, L12
  Index        r10, r3, r56
  // outer join c in customers on o.customerId == c.id
  Const        r59, "customerId"
  Index        r60, r10, r59
  Const        r61, "id"
  Index        r62, r14, r61
  Equal        r63, r60, r62
  JumpIfFalse  r63, L13
  Const        r55, true
L13:
  // let result = from o in orders
  Const        r64, 1
  Add          r56, r56, r64
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  Move         r66, r55
  JumpIfTrue   r66, L15
  // select {
  MakeMap      r70, 2, r20
  // let result = from o in orders
  Append       r2, r2, r70
L15:
  // outer join c in customers on o.customerId == c.id
  Const        r72, 1
  Add          r52, r52, r72
  Jump         L16
L11:
  // print("--- Outer Join using syntax ---")
  Const        r74, "--- Outer Join using syntax ---"
  Print        r74
  // for row in result {
  IterPrep     r75, r2
  Len          r76, r75
  Const        r77, 0
L22:
  Less         r78, r77, r76
  JumpIfFalse  r78, L17
  Index        r80, r75, r77
  // if row.order {
  Const        r81, "order"
  Index        r82, r80, r81
  JumpIfFalse  r82, L18
  // if row.customer {
  Const        r83, "customer"
  Index        r84, r80, r83
  JumpIfFalse  r84, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r91, "Order"
  Move         r85, r91
  Const        r92, "order"
  Index        r93, r80, r92
  Const        r94, "id"
  Index        r86, r93, r94
  Const        r96, "by"
  Move         r87, r96
  Const        r97, "customer"
  Index        r98, r80, r97
  Const        r99, "name"
  Index        r88, r98, r99
  Const        r101, "- $"
  Move         r89, r101
  Const        r102, "order"
  Index        r103, r80, r102
  Const        r104, "total"
  Index        r90, r103, r104
  PrintN       r85, 6, r85
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r106, r91
  Const        r112, "order"
  Index        r113, r80, r112
  Const        r114, "id"
  Index        r107, r113, r114
  Move         r108, r96
  Const        r109, "Unknown"
  Move         r110, r101
  Const        r117, "order"
  Index        r118, r80, r117
  Const        r119, "total"
  Index        r111, r118, r119
  PrintN       r106, 6, r106
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r121, "Customer"
  Const        r125, "customer"
  Index        r126, r80, r125
  Const        r127, "name"
  Index        r122, r126, r127
  Const        r123, "has no orders"
  PrintN       r121, 3, r121
L21:
  // for row in result {
  Const        r130, 1
  Add          r77, r77, r130
  Jump         L22
L17:
  Return       r0
