func main (regs=135)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // outer join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  Move         r12, r11
  // outer join c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r15, r7, r13
  Move         r16, r15
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // order: o,
  Const        r24, "order"
  Move         r25, r12
  // customer: c
  Const        r26, "customer"
  Move         r27, r16
  // select {
  MakeMap      r28, 2, r24
  // let result = from o in orders
  Append       r29, r4, r28
  Move         r4, r29
L2:
  Const        r30, 1
  // outer join c in customers on o.customerId == c.id
  AddInt       r13, r13, r30
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r31, 0
L10:
  Less         r32, r31, r6
  JumpIfFalse  r32, L5
  Index        r33, r5, r31
  Move         r12, r33
  // outer join c in customers on o.customerId == c.id
  Const        r35, 0
L8:
  Less         r36, r35, r8
  JumpIfFalse  r36, L6
  Index        r37, r7, r35
  Move         r16, r37
  Const        r38, "customerId"
  Index        r39, r12, r38
  Const        r40, "id"
  Index        r41, r16, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L7
L7:
  AddInt       r35, r35, r30
  Jump         L8
L6:
  // let result = from o in orders
  Jump         L9
  // order: o,
  Const        r47, "order"
  Move         r48, r12
  // customer: c
  Const        r49, "customer"
  Const        r50, nil
  // select {
  MakeMap      r51, 2, r47
  // let result = from o in orders
  Append       r52, r4, r51
  Move         r4, r52
L9:
  AddInt       r31, r31, r30
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r53, 0
L16:
  Less         r54, r53, r8
  JumpIfFalse  r54, L11
  Index        r55, r7, r53
  Move         r16, r55
  // let result = from o in orders
  Const        r57, 0
L14:
  Less         r58, r57, r6
  JumpIfFalse  r58, L12
  Index        r59, r5, r57
  Move         r12, r59
  // outer join c in customers on o.customerId == c.id
  Const        r60, "customerId"
  Index        r61, r12, r60
  Const        r62, "id"
  Index        r63, r16, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L13
L13:
  // let result = from o in orders
  AddInt       r57, r57, r30
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  Jump         L15
  // order: o,
  Const        r69, "order"
  Const        r70, nil
  // customer: c
  Const        r71, "customer"
  Move         r72, r16
  // select {
  MakeMap      r73, 2, r69
  // let result = from o in orders
  Append       r74, r4, r73
  Move         r4, r74
L15:
  // outer join c in customers on o.customerId == c.id
  AddInt       r53, r53, r30
  Jump         L16
L11:
  // let result = from o in orders
  Move         r75, r4
  // print("--- Outer Join using syntax ---")
  Const        r76, "--- Outer Join using syntax ---"
  Print        r76
  // for row in result {
  IterPrep     r77, r75
  Len          r78, r77
  Const        r79, 0
L22:
  Less         r80, r79, r78
  JumpIfFalse  r80, L17
  Index        r81, r77, r79
  Move         r82, r81
  // if row.order {
  Const        r83, "order"
  Index        r84, r82, r83
  JumpIfFalse  r84, L18
  // if row.customer {
  Const        r85, "customer"
  Index        r86, r82, r85
  JumpIfFalse  r86, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r87, "Order"
  Const        r94, "order"
  Index        r95, r82, r94
  Const        r96, "id"
  Index        r97, r95, r96
  Move         r88, r97
  Const        r89, "by"
  Const        r99, "customer"
  Index        r100, r82, r99
  Const        r101, "name"
  Index        r102, r100, r101
  Move         r90, r102
  Const        r91, "- $"
  Const        r104, "order"
  Index        r105, r82, r104
  Const        r106, "total"
  Index        r107, r105, r106
  Move         r92, r107
  PrintN       r87, 6, r87
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Const        r108, "Order"
  Const        r115, "order"
  Index        r116, r82, r115
  Const        r117, "id"
  Index        r118, r116, r117
  Move         r109, r118
  Const        r110, "by"
  Const        r111, "Unknown"
  Const        r112, "- $"
  Const        r122, "order"
  Index        r123, r82, r122
  Const        r124, "total"
  Index        r125, r123, r124
  Move         r113, r125
  PrintN       r108, 6, r108
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r126, "Customer"
  Const        r130, "customer"
  Index        r131, r82, r130
  Const        r132, "name"
  Index        r133, r131, r132
  Move         r127, r133
  Const        r128, "has no orders"
  PrintN       r126, 3, r126
L21:
  // for row in result {
  AddInt       r79, r79, r30
  Jump         L22
L17:
  Return       r0
