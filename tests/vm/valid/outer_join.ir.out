func main (regs=129)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // outer join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // outer join c in customers on o.customerId == c.id
  Const        r12, 0
L3:
  Less         r13, r12, r8
  JumpIfFalse  r13, L1
  Index        r14, r7, r12
  Const        r15, "customerId"
  Index        r16, r11, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // order: o,
  Const        r22, "order"
  Move         r23, r11
  // customer: c
  Const        r24, "customer"
  Move         r25, r14
  // select {
  MakeMap      r26, 2, r22
  // let result = from o in orders
  Append       r27, r4, r26
  Move         r4, r27
L2:
  Const        r28, 1
  // outer join c in customers on o.customerId == c.id
  AddInt       r12, r12, r28
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r29, 0
L10:
  Less         r30, r29, r6
  JumpIfFalse  r30, L5
  Index        r11, r5, r29
  Const        r31, false
  // outer join c in customers on o.customerId == c.id
  Const        r33, 0
L8:
  Less         r34, r33, r8
  JumpIfFalse  r34, L6
  Index        r14, r7, r33
  Const        r35, "customerId"
  Index        r36, r11, r35
  Const        r37, "id"
  Index        r38, r14, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L7
  Const        r31, true
L7:
  AddInt       r33, r33, r28
  Jump         L8
L6:
  // let result = from o in orders
  JumpIfTrue   r31, L9
  // order: o,
  Const        r44, "order"
  Move         r45, r11
  // customer: c
  Const        r46, "customer"
  Const        r47, nil
  // select {
  MakeMap      r48, 2, r44
  // let result = from o in orders
  Append       r49, r4, r48
  Move         r4, r49
L9:
  AddInt       r29, r29, r28
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r50, 0
L16:
  Less         r51, r50, r8
  JumpIfFalse  r51, L11
  Index        r14, r7, r50
  Const        r52, false
  // let result = from o in orders
  Const        r53, 0
L14:
  Less         r54, r53, r6
  JumpIfFalse  r54, L12
  Index        r11, r5, r53
  // outer join c in customers on o.customerId == c.id
  Const        r55, "customerId"
  Index        r56, r11, r55
  Const        r57, "id"
  Index        r58, r14, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L13
  Const        r52, true
L13:
  // let result = from o in orders
  AddInt       r53, r53, r28
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  JumpIfTrue   r52, L15
  // order: o,
  Const        r63, "order"
  Const        r64, nil
  // customer: c
  Const        r65, "customer"
  Move         r66, r14
  // select {
  MakeMap      r67, 2, r63
  // let result = from o in orders
  Append       r68, r4, r67
  Move         r4, r68
L15:
  // outer join c in customers on o.customerId == c.id
  AddInt       r50, r50, r28
  Jump         L16
L11:
  // let result = from o in orders
  Move         r69, r4
  // print("--- Outer Join using syntax ---")
  Const        r70, "--- Outer Join using syntax ---"
  Print        r70
  // for row in result {
  IterPrep     r71, r69
  Len          r72, r71
  Const        r73, 0
L22:
  Less         r74, r73, r72
  JumpIfFalse  r74, L17
  Index        r75, r71, r73
  Move         r76, r75
  // if row.order {
  Const        r77, "order"
  Index        r78, r76, r77
  JumpIfFalse  r78, L18
  // if row.customer {
  Const        r79, "customer"
  Index        r80, r76, r79
  JumpIfFalse  r80, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r81, "Order"
  Const        r88, "order"
  Index        r89, r76, r88
  Const        r90, "id"
  Index        r91, r89, r90
  Move         r82, r91
  Const        r83, "by"
  Const        r93, "customer"
  Index        r94, r76, r93
  Const        r95, "name"
  Index        r96, r94, r95
  Move         r84, r96
  Const        r85, "- $"
  Const        r98, "order"
  Index        r99, r76, r98
  Const        r100, "total"
  Index        r101, r99, r100
  Move         r86, r101
  PrintN       r81, 6, r81
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Const        r102, "Order"
  Const        r109, "order"
  Index        r110, r76, r109
  Const        r111, "id"
  Index        r112, r110, r111
  Move         r103, r112
  Const        r104, "by"
  Const        r105, "Unknown"
  Const        r106, "- $"
  Const        r116, "order"
  Index        r117, r76, r116
  Const        r118, "total"
  Index        r119, r117, r118
  Move         r107, r119
  PrintN       r102, 6, r102
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r120, "Customer"
  Const        r124, "customer"
  Index        r125, r76, r124
  Const        r126, "name"
  Index        r127, r125, r126
  Move         r121, r127
  Const        r122, "has no orders"
  PrintN       r120, 3, r120
L21:
  // for row in result {
  AddInt       r73, r73, r28
  Jump         L22
L17:
  Return       r0
