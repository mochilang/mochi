func main (regs=21)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
L4:
  IterPrep     r3, r1
  Len          r1, r3
  // outer join c in customers on o.customerId == c.id
  IterPrep     r4, r0
  Len          r5, r4
L1:
  MakeMap      r6, 0, r0
L2:
  Const        r7, 0
L3:
  LessInt      r8, r7, r5
L11:
  JumpIfFalse  r8, L0
  Index        r9, r4, r7
L8:
  Move         r10, r9
  Const        r11, "id"
  Index        r12, r10, r11
  Index        r13, r6, r12
L9:
  Const        r14, nil
L0:
  NotEqual     r15, r13, r14
L5:
  JumpIfTrue   r15, L1
  MakeList     r15, 0, r0
L7:
  SetIndex     r6, r12, r15
  Index        r13, r6, r12
  Append       r15, r13, r9
  SetIndex     r6, r12, r15
  Const        r15, 1
  AddInt       r7, r7, r15
  Jump         L2
  // let result = from o in orders
  MakeMap      r8, 0, r0
  Const        r7, 0
  LessInt      r13, r7, r1
  JumpIfFalse  r13, L3
  Index        r13, r3, r7
  Move         r12, r13
  // outer join c in customers on o.customerId == c.id
  Const        r9, "customerId"
  Index        r16, r12, r9
  // let result = from o in orders
  Index        r17, r8, r16
  NotEqual     r18, r17, r14
  JumpIfTrue   r18, L4
  MakeList     r19, 0, r0
  SetIndex     r8, r16, r19
  Index        r17, r8, r16
  Append       r19, r17, r13
  SetIndex     r8, r16, r19
  AddInt       r7, r7, r15
  Jump         L5
  Const        r19, 0
  LessInt      r18, r19, r1
  JumpIfFalse  r18, L6
  Index        r12, r3, r19
  // outer join c in customers on o.customerId == c.id
  Index        r18, r12, r9
  // let result = from o in orders
  Index        r9, r6, r18
  Move         r18, r14
  NotEqual     r6, r9, r18
  JumpIfFalse  r6, L0
  Len          r1, r9
  Move         r3, r19
  LessInt      r17, r3, r1
  JumpIfFalse  r17, L0
  Index        r10, r9, r3
  // order: o,
  Const        r17, "order"
  // customer: c
  Const        r1, "customer"
  // order: o,
  Move         r9, r17
  Move         r16, r12
  // customer: c
  Move         r13, r1
  Move         r7, r10
  // select {
  MakeMap      r20, 2, r9
  // let result = from o in orders
  Append       r2, r2, r20
  AddInt       r3, r3, r15
  Jump         L7
  JumpIfTrue   r6, L8
  Move         r10, r18
  // order: o,
  Move         r6, r17
  // customer: c
  Move         r18, r1
  // order: o,
  Move         r7, r6
  Move         r6, r12
  // customer: c
  Move         r20, r18
  Move         r18, r10
  // select {
  MakeMap      r13, 2, r7
  // let result = from o in orders
  Append       r2, r2, r13
  AddInt       r19, r19, r15
  Jump         L9
L6:
  // outer join c in customers on o.customerId == c.id
  Const        r13, 0
  LessInt      r18, r13, r5
  JumpIfFalse  r18, L7
  Index        r10, r4, r13
  Index        r18, r10, r11
  Index        r5, r8, r18
  Move         r18, r14
  NotEqual     r14, r5, r18
  JumpIfTrue   r14, L10
  Move         r12, r18
  // order: o,
  Move         r14, r17
  // customer: c
  Move         r17, r1
  // order: o,
  Move         r1, r14
  Move         r18, r12
  // customer: c
  Move         r12, r17
  Move         r5, r10
  // select {
  MakeMap      r10, 2, r1
  // let result = from o in orders
  Append       r2, r2, r10
L10:
  // outer join c in customers on o.customerId == c.id
  AddInt       r13, r13, r15
  Jump         L11
  // print("--- Outer Join using syntax ---")
  Const        r5, "--- Outer Join using syntax ---"
  Print        r5
  // for row in result {
  IterPrep     r5, r2
  Len          r2, r5
  Const        r12, 0
  Less         r18, r12, r2
  JumpIfFalse  r18, L12
  Index        r10, r5, r12
  // if row.order {
  Move         r18, r14
  Index        r14, r10, r18
  JumpIfFalse  r14, L13
  // if row.customer {
  Move         r14, r17
  Index        r17, r10, r14
  JumpIfFalse  r17, L14
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r17, "Order"
  Move         r2, r17
  Index        r5, r10, r18
  Index        r1, r5, r11
  Const        r5, "by"
  Move         r13, r5
  Index        r8, r10, r14
  Const        r4, "name"
  Index        r6, r8, r4
  Const        r8, "- $"
  Move         r7, r8
  Index        r20, r10, r18
  Const        r16, "total"
  Index        r19, r20, r16
  PrintN       r2, 5, r2
  // if row.customer {
  Jump         L15
L14:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r19, r17
  Index        r17, r10, r18
  Index        r20, r17, r11
  Move         r17, r5
  Const        r5, "Unknown"
  Move         r11, r8
  Index        r8, r10, r18
  Index        r18, r8, r16
  PrintN       r19, 5, r19
  // if row.order {
  Jump         L15
L13:
  // print("Customer", row.customer.name, "has no orders")
  Const        r18, "Customer"
  Index        r8, r10, r14
  Index        r14, r8, r4
  Const        r8, "has no orders"
  PrintN       r18, 3, r18
L15:
  // for row in result {
  Add          r12, r12, r15
  Jump         L0
L12:
  Return       r0
