func main (regs=194)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r2
  Len          r6, r5
  // outer join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
  Less         r10, r9, r6
L4:
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // outer join c in customers on o.customerId == c.id
  Const        r13, 0
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
L3:
  Index        r15, r7, r13
  Const        r17, "customerId"
  Index        r18, r11, r17
  Const        r19, "id"
  Index        r20, r15, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // order: o,
  Const        r22, "order"
  // customer: c
  Const        r23, "customer"
  // order: o,
  Move         r24, r22
  Move         r25, r11
  // customer: c
  Move         r26, r23
  Move         r27, r15
  // select {
  MakeMap      r28, 2, r24
  // let result = from o in orders
  Append       r29, r4, r28
  // outer join c in customers on o.customerId == c.id
  Const        r30, 1
  Add          r31, r13, r30
  Jump         L3
  // let result = from o in orders
  Const        r32, 1
L2:
  Add          r33, r9, r32
  Jump         L4
  Const        r34, 0
  Less         r35, r34, r6
L1:
  JumpIfFalse  r35, L5
  Index        r36, r5, r34
  Const        r37, false
  // outer join c in customers on o.customerId == c.id
  Const        r38, 0
L0:
  Less         r39, r38, r8
L10:
  JumpIfFalse  r39, L6
  Index        r40, r7, r38
  Const        r41, "customerId"
  Index        r42, r36, r41
  Const        r43, "id"
  Index        r44, r40, r43
L8:
  Equal        r45, r42, r44
  JumpIfFalse  r45, L7
  Const        r37, true
  Const        r46, 1
  Add          r47, r38, r46
  Jump         L8
  // let result = from o in orders
  JumpIfTrue   r37, L9
  Const        r49, nil
  // order: o,
  Const        r50, "order"
  // customer: c
  Const        r51, "customer"
  // order: o,
  Move         r52, r50
L7:
  Move         r53, r36
  // customer: c
  Move         r54, r51
  Move         r55, r49
  // select {
  MakeMap      r56, 2, r52
L6:
  // let result = from o in orders
  Append       r57, r29, r56
  Const        r58, 1
  Add          r59, r34, r58
  Jump         L10
  // outer join c in customers on o.customerId == c.id
  Const        r60, 0
  Less         r61, r60, r8
  JumpIfFalse  r61, L11
  Index        r62, r7, r60
  Const        r63, false
  // let result = from o in orders
  Const        r64, 0
  Less         r65, r64, r6
  JumpIfFalse  r65, L12
  Index        r66, r5, r64
L9:
  // outer join c in customers on o.customerId == c.id
  Const        r67, "customerId"
  Index        r68, r66, r67
  Const        r69, "id"
  Index        r70, r62, r69
L5:
  Equal        r71, r68, r70
L16:
  JumpIfFalse  r71, L13
  Const        r63, true
  // let result = from o in orders
  Const        r72, 1
  Add          r73, r64, r72
  Jump         L14
  // outer join c in customers on o.customerId == c.id
  JumpIfTrue   r63, L15
L14:
  Const        r75, nil
  // order: o,
  Const        r76, "order"
  // customer: c
  Const        r77, "customer"
  // order: o,
  Move         r78, r76
  Move         r79, r75
  // customer: c
  Move         r80, r77
  Move         r81, r62
  // select {
  MakeMap      r82, 2, r78
  // let result = from o in orders
  Append       r83, r57, r82
  // outer join c in customers on o.customerId == c.id
  Const        r84, 1
  Add          r85, r60, r84
L13:
  Move         r60, r85
  Jump         L16
  // print("--- Outer Join using syntax ---")
  Const        r87, "--- Outer Join using syntax ---"
  Print        r87
L12:
  // for row in result {
  IterPrep     r88, r83
  Len          r89, r88
  Const        r90, 0
  Less         r91, r90, r89
  JumpIfFalse  r91, L17
  Index        r92, r88, r90
  // if row.order {
  Const        r94, "order"
  Index        r95, r92, r94
  JumpIfFalse  r95, L18
  // if row.customer {
  Const        r96, "customer"
  Index        r97, r92, r96
  JumpIfFalse  r97, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r104, "Order"
L15:
  Move         r98, r104
  Const        r105, "order"
  Index        r106, r92, r105
  Const        r107, "id"
L11:
  Index        r108, r106, r107
  Move         r99, r108
  Const        r109, "by"
  Move         r100, r109
  Const        r110, "customer"
  Index        r111, r92, r110
L22:
  Const        r112, "name"
  Index        r113, r111, r112
  Move         r101, r113
  Const        r114, "- $"
  Move         r102, r114
  Const        r115, "order"
  Index        r116, r92, r115
  Const        r117, "total"
  Index        r118, r116, r117
  Move         r103, r118
  PrintN       r98, 6, r98
  // if row.customer {
  Jump         L20
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Const        r125, "Order"
  Move         r119, r125
  Const        r126, "order"
  Index        r127, r92, r126
  Const        r128, "id"
  Index        r129, r127, r128
  Move         r120, r129
  Const        r130, "by"
  Move         r121, r130
  Const        r131, "Unknown"
  Move         r122, r131
  Const        r132, "- $"
  Move         r123, r132
  Const        r133, "order"
  Index        r134, r92, r133
  Const        r135, "total"
  Index        r136, r134, r135
  Move         r124, r136
  PrintN       r119, 6, r119
  // if row.order {
  Jump         L21
  // print("Customer", row.customer.name, "has no orders")
  Const        r140, "Customer"
L19:
  Move         r137, r140
  Const        r141, "customer"
  Index        r142, r92, r141
  Const        r143, "name"
  Index        r144, r142, r143
  Move         r138, r144
  Const        r145, "has no orders"
  Move         r139, r145
  PrintN       r137, 3, r137
  // for row in result {
  Const        r146, 1
  Add          r147, r90, r146
  Jump         L22
  Return       r0
