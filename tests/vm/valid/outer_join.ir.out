func main (regs=135)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Move         r1, r0
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // outer join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r12, r5, r9
  // outer join c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r16, r7, r13
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // order: o,
  Const        r22, "order"
  // customer: c
  Const        r23, "customer"
  // order: o,
  Move         r24, r12
  // customer: c
  Move         r25, r16
  // select {
  MakeMap      r26, 2, r22
  // let result = from o in orders
  Append       r4, r4, r26
L2:
  // outer join c in customers on o.customerId == c.id
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r32, 0
L10:
  Less         r33, r32, r6
  JumpIfFalse  r33, L5
  Index        r12, r5, r32
  Const        r35, false
  // outer join c in customers on o.customerId == c.id
  Const        r36, 0
L8:
  Less         r37, r36, r8
  JumpIfFalse  r37, L6
  Index        r16, r7, r36
  Const        r39, "customerId"
  Index        r40, r12, r39
  Const        r41, "id"
  Index        r42, r16, r41
  Equal        r43, r40, r42
  JumpIfFalse  r43, L7
  Const        r35, true
L7:
  Jump         L8
L6:
  // let result = from o in orders
  Move         r46, r35
  JumpIfTrue   r46, L9
  // select {
  MakeMap      r50, 2, r22
  // let result = from o in orders
  Append       r4, r4, r50
L9:
  Const        r52, 1
  Add          r32, r32, r52
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r54, 0
L16:
  Less         r55, r54, r8
  JumpIfFalse  r55, L11
  Index        r16, r7, r54
  Const        r57, false
  // let result = from o in orders
  Const        r58, 0
L14:
  Less         r59, r58, r6
  JumpIfFalse  r59, L12
  Index        r12, r5, r58
  // outer join c in customers on o.customerId == c.id
  Const        r61, "customerId"
  Index        r62, r12, r61
  Const        r63, "id"
  Index        r64, r16, r63
  Equal        r65, r62, r64
  JumpIfFalse  r65, L13
  Const        r57, true
L13:
  // let result = from o in orders
  Const        r66, 1
  Add          r58, r58, r66
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  Move         r68, r57
  JumpIfTrue   r68, L15
  // select {
  MakeMap      r72, 2, r22
  // let result = from o in orders
  Append       r4, r4, r72
L15:
  // outer join c in customers on o.customerId == c.id
  Const        r74, 1
  Add          r54, r54, r74
  Jump         L16
L11:
  // let result = from o in orders
  Move         r76, r4
  // print("--- Outer Join using syntax ---")
  Const        r77, "--- Outer Join using syntax ---"
  Print        r77
  // for row in result {
  IterPrep     r78, r76
  Len          r79, r78
  Const        r80, 0
L22:
  Less         r81, r80, r79
  JumpIfFalse  r81, L17
  Index        r83, r78, r80
  // if row.order {
  Const        r84, "order"
  Index        r85, r83, r84
  JumpIfFalse  r85, L18
  // if row.customer {
  Const        r86, "customer"
  Index        r87, r83, r86
  JumpIfFalse  r87, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r94, "Order"
  Move         r88, r94
  Const        r95, "order"
  Index        r96, r83, r95
  Const        r97, "id"
  Index        r89, r96, r97
  Const        r99, "by"
  Move         r90, r99
  Const        r100, "customer"
  Index        r101, r83, r100
  Const        r102, "name"
  Index        r91, r101, r102
  Const        r104, "- $"
  Move         r92, r104
  Const        r105, "order"
  Index        r106, r83, r105
  Const        r107, "total"
  Index        r93, r106, r107
  PrintN       r88, 6, r88
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r109, r94
  Const        r115, "order"
  Index        r116, r83, r115
  Const        r117, "id"
  Index        r110, r116, r117
  Move         r111, r99
  Const        r112, "Unknown"
  Move         r113, r104
  Const        r120, "order"
  Index        r121, r83, r120
  Const        r122, "total"
  Index        r114, r121, r122
  PrintN       r109, 6, r109
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r124, "Customer"
  Const        r128, "customer"
  Index        r129, r83, r128
  Const        r130, "name"
  Index        r125, r129, r130
  Const        r126, "has no orders"
  PrintN       r124, 3, r124
L21:
  // for row in result {
  Const        r133, 1
  Add          r80, r80, r133
  Jump         L22
L17:
  Return       r0
