func main (regs=116)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // outer join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  MakeMap      r7, 0, r0
  Const        r8, 0
L2:
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L0
  Index        r10, r5, r8
  Move         r11, r10
  Const        r12, "id"
  Index        r13, r11, r12
  Index        r14, r7, r13
  Const        r15, nil
  NotEqual     r16, r14, r15
  JumpIfTrue   r16, L1
  MakeList     r17, 0, r0
  SetIndex     r7, r13, r17
L1:
  Index        r14, r7, r13
  Append       r18, r14, r10
  SetIndex     r7, r13, r18
  Const        r19, 1
  AddInt       r8, r8, r19
  Jump         L2
L0:
  MakeMap      r20, 0, r0
  Const        r21, true
  // let result = from o in orders
  Const        r22, 0
L7:
  LessInt      r23, r22, r4
  JumpIfFalse  r23, L3
  Index        r25, r3, r22
  // outer join c in customers on o.customerId == c.id
  Const        r26, "customerId"
  Index        r27, r25, r26
  // let result = from o in orders
  Index        r28, r7, r27
  NotEqual     r30, r28, r15
  JumpIfFalse  r30, L4
  // outer join c in customers on o.customerId == c.id
  SetIndex     r20, r27, r21
  // let result = from o in orders
  Len          r31, r28
  Move         r32, r22
L5:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L4
  Index        r11, r28, r32
  // order: o,
  Const        r35, "order"
  // customer: c
  Const        r36, "customer"
  // order: o,
  Move         r37, r35
  Move         r38, r25
  // customer: c
  Move         r39, r36
  Move         r40, r11
  // select {
  MakeMap      r41, 2, r37
  // let result = from o in orders
  Append       r2, r2, r41
  AddInt       r32, r32, r19
  Jump         L5
L4:
  JumpIfTrue   r30, L6
  Move         r43, r15
  Move         r11, r43
  // order: o,
  Move         r44, r35
  // customer: c
  Move         r45, r36
  // order: o,
  Move         r46, r44
  Move         r47, r25
  // customer: c
  Move         r48, r45
  Move         r49, r11
  // select {
  MakeMap      r50, 2, r46
  // let result = from o in orders
  Append       r2, r2, r50
L6:
  AddInt       r22, r22, r19
  Jump         L7
L3:
  // outer join c in customers on o.customerId == c.id
  Const        r52, 0
L10:
  LessInt      r53, r52, r6
  JumpIfFalse  r53, L8
  Index        r11, r5, r52
  Index        r55, r11, r12
  Index        r56, r20, r55
  NotEqual     r58, r56, r43
  JumpIfTrue   r58, L9
  Move         r25, r15
  // order: o,
  Move         r60, r35
  // customer: c
  Move         r61, r36
  // order: o,
  Move         r62, r60
  Move         r63, r25
  // customer: c
  Move         r64, r61
  Move         r65, r11
  // select {
  MakeMap      r66, 2, r62
  // let result = from o in orders
  Append       r2, r2, r66
L9:
  // outer join c in customers on o.customerId == c.id
  AddInt       r52, r52, r19
  Jump         L10
L8:
  // print("--- Outer Join using syntax ---")
  Const        r68, "--- Outer Join using syntax ---"
  Print        r68
  // for row in result {
  IterPrep     r69, r2
  Len          r70, r69
  Const        r71, 0
L15:
  Less         r72, r71, r70
  JumpIfFalse  r72, L11
  Index        r74, r69, r71
  // if row.order {
  Move         r75, r60
  Index        r76, r74, r75
  JumpIfFalse  r76, L12
  // if row.customer {
  Move         r77, r61
  Index        r78, r74, r77
  JumpIfFalse  r78, L13
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r85, "Order"
  Move         r79, r85
  Index        r86, r74, r75
  Index        r80, r86, r12
  Const        r88, "by"
  Move         r81, r88
  Index        r89, r74, r77
  Const        r90, "name"
  Index        r82, r89, r90
  Const        r92, "- $"
  Move         r83, r92
  Index        r93, r74, r75
  Const        r94, "total"
  Index        r84, r93, r94
  PrintN       r79, 6, r79
  // if row.customer {
  Jump         L14
L13:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r96, r85
  Index        r102, r74, r75
  Index        r97, r102, r12
  Move         r98, r88
  Const        r99, "Unknown"
  Move         r100, r92
  Index        r105, r74, r75
  Index        r101, r105, r94
  PrintN       r96, 6, r96
  // if row.order {
  Jump         L14
L12:
  // print("Customer", row.customer.name, "has no orders")
  Const        r107, "Customer"
  Index        r111, r74, r77
  Index        r108, r111, r90
  Const        r109, "has no orders"
  PrintN       r107, 3, r107
L14:
  // for row in result {
  Add          r71, r71, r19
  Jump         L15
L11:
  Return       r0
