func main (regs=105)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // outer join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
L4:
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r10, r3, r7
  // outer join c in customers on o.customerId == c.id
  Const        r11, 0
L3:
  Less         r12, r11, r6
  JumpIfFalse  r12, L1
  Index        r14, r5, r11
  Const        r15, "customerId"
  Index        r16, r10, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // order: o,
  Const        r20, "order"
  // customer: c
  Const        r21, "customer"
  // order: o,
  Move         r22, r10
  // customer: c
  Move         r23, r14
  // select {
  MakeMap      r24, 2, r20
  // let result = from o in orders
  Append       r2, r2, r24
L2:
  // outer join c in customers on o.customerId == c.id
  Const        r26, 1
  Add          r11, r11, r26
  Jump         L3
L1:
  // let result = from o in orders
  Add          r7, r7, r26
  Jump         L4
L0:
  Const        r27, 0
L10:
  Less         r28, r27, r4
  JumpIfFalse  r28, L5
  Index        r10, r3, r27
  Const        r30, false
  // outer join c in customers on o.customerId == c.id
  Const        r31, 0
L8:
  Less         r32, r31, r6
  JumpIfFalse  r32, L6
  Index        r14, r5, r31
  Index        r34, r10, r15
  Index        r35, r14, r17
  Equal        r36, r34, r35
  JumpIfFalse  r36, L7
  Const        r30, true
L7:
  Add          r31, r31, r26
  Jump         L8
L6:
  // let result = from o in orders
  Move         r37, r30
  JumpIfTrue   r37, L9
  // select {
  MakeMap      r41, 2, r20
  // let result = from o in orders
  Append       r2, r2, r41
L9:
  Add          r27, r27, r26
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r43, 0
L16:
  Less         r44, r43, r6
  JumpIfFalse  r44, L11
  Index        r14, r5, r43
  Const        r46, false
  // let result = from o in orders
  Const        r47, 0
L14:
  Less         r48, r47, r4
  JumpIfFalse  r48, L12
  Index        r10, r3, r47
  // outer join c in customers on o.customerId == c.id
  Index        r50, r10, r15
  Index        r51, r14, r17
  Equal        r52, r50, r51
  JumpIfFalse  r52, L13
  Const        r46, true
L13:
  // let result = from o in orders
  Add          r47, r47, r26
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  Move         r53, r46
  JumpIfTrue   r53, L15
  // select {
  MakeMap      r57, 2, r20
  // let result = from o in orders
  Append       r2, r2, r57
L15:
  // outer join c in customers on o.customerId == c.id
  Add          r43, r43, r26
  Jump         L16
L11:
  // print("--- Outer Join using syntax ---")
  Const        r59, "--- Outer Join using syntax ---"
  Print        r59
  // for row in result {
  IterPrep     r60, r2
  Len          r61, r60
  Const        r62, 0
L22:
  Less         r63, r62, r61
  JumpIfFalse  r63, L17
  Index        r65, r60, r62
  // if row.order {
  Index        r66, r65, r20
  JumpIfFalse  r66, L18
  // if row.customer {
  Index        r67, r65, r21
  JumpIfFalse  r67, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r74, "Order"
  Move         r68, r74
  Index        r75, r65, r20
  Index        r69, r75, r17
  Const        r77, "by"
  Move         r70, r77
  Index        r78, r65, r21
  Const        r79, "name"
  Index        r71, r78, r79
  Const        r72, "- $"
  Index        r82, r65, r20
  Const        r83, "total"
  Index        r73, r82, r83
  PrintN       r68, 6, r68
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r85, r74
  Index        r91, r65, r20
  Index        r86, r91, r17
  Move         r87, r77
  Const        r88, "Unknown"
  Move         r89, r81
  Index        r94, r65, r20
  Index        r90, r94, r83
  PrintN       r85, 6, r85
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r96, "Customer"
  Index        r100, r65, r21
  Index        r97, r100, r79
  Const        r98, "has no orders"
  PrintN       r96, 3, r96
L21:
  // for row in result {
  Const        r103, 1
  Add          r62, r62, r103
  Jump         L22
L17:
  Return       r0
