func main (regs=117)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // outer join c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, "customerId"
  Const        r8, "id"
  // order: o,
  Const        r9, "order"
  // customer: c
  Const        r10, "customer"
  // let result = from o in orders
  Const        r11, 0
L4:
  LessInt      r12, r11, r4
  JumpIfFalse  r12, L0
  Index        r14, r3, r11
  // outer join c in customers on o.customerId == c.id
  Const        r15, 0
L3:
  LessInt      r16, r15, r6
  JumpIfFalse  r16, L1
  Index        r18, r5, r15
  Index        r19, r14, r7
  Index        r20, r18, r8
  Equal        r21, r19, r20
  JumpIfFalse  r21, L2
  // order: o,
  Const        r22, "order"
  // customer: c
  Const        r23, "customer"
  // order: o,
  Move         r24, r22
  Move         r25, r14
  // customer: c
  Move         r26, r23
  Move         r27, r18
  // select {
  MakeMap      r28, 2, r24
  // let result = from o in orders
  Append       r2, r2, r28
L2:
  // outer join c in customers on o.customerId == c.id
  Const        r30, 1
  AddInt       r15, r15, r30
  Jump         L3
L1:
  // let result = from o in orders
  AddInt       r11, r11, r30
  Jump         L4
L0:
  Const        r31, 0
L10:
  LessInt      r32, r31, r4
  JumpIfFalse  r32, L5
  Index        r14, r3, r31
  Const        r34, false
  // outer join c in customers on o.customerId == c.id
  Const        r35, 0
L8:
  LessInt      r36, r35, r6
  JumpIfFalse  r36, L6
  Index        r18, r5, r35
  Index        r38, r14, r7
  Index        r39, r18, r8
  Equal        r40, r38, r39
  JumpIfFalse  r40, L7
  Const        r34, true
L7:
  AddInt       r35, r35, r30
  Jump         L8
L6:
  // let result = from o in orders
  Move         r41, r34
  JumpIfTrue   r41, L9
  Const        r18, nil
  // order: o,
  Const        r43, "order"
  // customer: c
  Const        r44, "customer"
  // order: o,
  Move         r45, r43
  Move         r46, r14
  // customer: c
  Move         r47, r44
  Move         r48, r18
  // select {
  MakeMap      r49, 2, r45
  // let result = from o in orders
  Append       r2, r2, r49
L9:
  AddInt       r31, r31, r30
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r51, 0
L16:
  LessInt      r52, r51, r6
  JumpIfFalse  r52, L11
  Index        r18, r5, r51
  Const        r54, false
  // let result = from o in orders
  Const        r55, 0
L14:
  LessInt      r56, r55, r4
  JumpIfFalse  r56, L12
  Index        r14, r3, r55
  // outer join c in customers on o.customerId == c.id
  Index        r58, r14, r7
  Index        r59, r18, r8
  Equal        r60, r58, r59
  JumpIfFalse  r60, L13
  Const        r54, true
L13:
  // let result = from o in orders
  AddInt       r55, r55, r30
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  Move         r61, r54
  JumpIfTrue   r61, L15
  Const        r14, nil
  // order: o,
  Const        r63, "order"
  // customer: c
  Const        r64, "customer"
  // order: o,
  Move         r65, r63
  Move         r66, r14
  // customer: c
  Move         r67, r64
  Move         r68, r18
  // select {
  MakeMap      r69, 2, r65
  // let result = from o in orders
  Append       r2, r2, r69
L15:
  // outer join c in customers on o.customerId == c.id
  AddInt       r51, r51, r30
  Jump         L16
L11:
  // print("--- Outer Join using syntax ---")
  Const        r71, "--- Outer Join using syntax ---"
  Print        r71
  // for row in result {
  IterPrep     r72, r2
  Len          r73, r72
  Const        r74, 0
L22:
  Less         r75, r74, r73
  JumpIfFalse  r75, L17
  Index        r77, r72, r74
  // if row.order {
  Index        r78, r77, r9
  JumpIfFalse  r78, L18
  // if row.customer {
  Index        r79, r77, r10
  JumpIfFalse  r79, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r86, "Order"
  Move         r80, r86
  Index        r87, r77, r9
  Index        r81, r87, r8
  Const        r89, "by"
  Move         r82, r89
  Index        r90, r77, r10
  Const        r91, "name"
  Index        r83, r90, r91
  Const        r93, "- $"
  Move         r84, r93
  Index        r94, r77, r9
  Const        r95, "total"
  Index        r85, r94, r95
  PrintN       r80, 6, r80
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Move         r97, r86
  Index        r103, r77, r9
  Index        r98, r103, r8
  Move         r99, r89
  Const        r100, "Unknown"
  Move         r101, r93
  Index        r106, r77, r9
  Index        r102, r106, r95
  PrintN       r97, 6, r97
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r108, "Customer"
  Index        r112, r77, r10
  Index        r109, r112, r91
  Const        r110, "has no orders"
  PrintN       r108, 3, r108
L21:
  // for row in result {
  Const        r115, 1
  Add          r74, r74, r115
  Jump         L22
L17:
  Return       r0
