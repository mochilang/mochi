func main (regs=128)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 5, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // outer join c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // outer join c in customers on o.customerId == c.id
  Const        r12, 0
L3:
  Less         r13, r12, r8
  JumpIfFalse  r13, L1
  Index        r14, r7, r12
  Const        r15, "customerId"
  Index        r16, r11, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // order: o,
  Const        r22, "order"
  Move         r23, r11
  // customer: c
  Const        r24, "customer"
  Move         r25, r14
  // select {
  MakeMap      r26, 2, r22
  // let result = from o in orders
  Append       r27, r4, r26
  Move         r4, r27
L2:
  Const        r28, 1
  // outer join c in customers on o.customerId == c.id
  AddInt       r12, r12, r28
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Const        r29, 0
L10:
  Less         r30, r29, r6
  JumpIfFalse  r30, L5
  Index        r11, r5, r29
  Const        r31, false
  // outer join c in customers on o.customerId == c.id
  Const        r33, 0
L8:
  Less         r34, r33, r8
  JumpIfFalse  r34, L6
  Index        r14, r7, r33
  Const        r35, "customerId"
  Index        r36, r11, r35
  Const        r37, "id"
  Index        r38, r14, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L7
  Const        r31, true
L7:
  AddInt       r33, r33, r28
  Jump         L8
L6:
  // let result = from o in orders
  JumpIfTrue   r31, L9
  // order: o,
  Const        r44, "order"
  Move         r45, r11
  // customer: c
  Const        r46, "customer"
  Const        r47, nil
  // select {
  MakeMap      r48, 2, r44
  // let result = from o in orders
  Append       r49, r4, r48
  Move         r4, r49
L9:
  AddInt       r29, r29, r28
  Jump         L10
L5:
  // outer join c in customers on o.customerId == c.id
  Const        r50, 0
L16:
  Less         r51, r50, r8
  JumpIfFalse  r51, L11
  Index        r14, r7, r50
  Const        r52, false
  // let result = from o in orders
  Const        r53, 0
L14:
  Less         r54, r53, r6
  JumpIfFalse  r54, L12
  Index        r11, r5, r53
  // outer join c in customers on o.customerId == c.id
  Const        r55, "customerId"
  Index        r56, r11, r55
  Const        r57, "id"
  Index        r58, r14, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L13
  Const        r52, true
L13:
  // let result = from o in orders
  AddInt       r53, r53, r28
  Jump         L14
L12:
  // outer join c in customers on o.customerId == c.id
  JumpIfTrue   r52, L15
  // order: o,
  Const        r62, "order"
  Const        r63, nil
  // customer: c
  Const        r64, "customer"
  Move         r65, r14
  // select {
  MakeMap      r66, 2, r62
  // let result = from o in orders
  Append       r67, r4, r66
  Move         r4, r67
L15:
  // outer join c in customers on o.customerId == c.id
  AddInt       r50, r50, r28
  Jump         L16
L11:
  // let result = from o in orders
  Move         r68, r4
  // print("--- Outer Join using syntax ---")
  Const        r69, "--- Outer Join using syntax ---"
  Print        r69
  // for row in result {
  IterPrep     r70, r68
  Len          r71, r70
  Const        r72, 0
L22:
  Less         r73, r72, r71
  JumpIfFalse  r73, L17
  Index        r74, r70, r72
  Move         r75, r74
  // if row.order {
  Const        r76, "order"
  Index        r77, r75, r76
  JumpIfFalse  r77, L18
  // if row.customer {
  Const        r78, "customer"
  Index        r79, r75, r78
  JumpIfFalse  r79, L19
  // print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
  Const        r80, "Order"
  Const        r87, "order"
  Index        r88, r75, r87
  Const        r89, "id"
  Index        r90, r88, r89
  Move         r81, r90
  Const        r82, "by"
  Const        r92, "customer"
  Index        r93, r75, r92
  Const        r94, "name"
  Index        r95, r93, r94
  Move         r83, r95
  Const        r84, "- $"
  Const        r97, "order"
  Index        r98, r75, r97
  Const        r99, "total"
  Index        r100, r98, r99
  Move         r85, r100
  PrintN       r80, 6, r80
  // if row.customer {
  Jump         L20
L19:
  // print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
  Const        r101, "Order"
  Const        r108, "order"
  Index        r109, r75, r108
  Const        r110, "id"
  Index        r111, r109, r110
  Move         r102, r111
  Const        r103, "by"
  Const        r104, "Unknown"
  Const        r105, "- $"
  Const        r115, "order"
  Index        r116, r75, r115
  Const        r117, "total"
  Index        r118, r116, r117
  Move         r106, r118
  PrintN       r101, 6, r101
L20:
  // if row.order {
  Jump         L21
L18:
  // print("Customer", row.customer.name, "has no orders")
  Const        r119, "Customer"
  Const        r123, "customer"
  Index        r124, r75, r123
  Const        r125, "name"
  Index        r126, r124, r125
  Move         r120, r126
  Const        r121, "has no orders"
  PrintN       r119, 3, r119
L21:
  // for row in result {
  AddInt       r72, r72, r28
  Jump         L22
L17:
  Return       r0
