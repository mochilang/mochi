let nations: list<map<string, any>> = [{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]
let suppliers: list<map<string, int>> = [{"id": 1, "nation": 1}, {"id": 2, "nation": 2}]
let partsupp: list<map<string, any>> = [{"part": 100, "supplier": 1, "cost": 10, "qty": 2}, {"part": 100, "supplier": 2, "cost": 20, "qty": 1}, {"part": 200, "supplier": 1, "cost": 5, "qty": 3}]
let filtered: list<map<string, any>> = (() {
let _res = []
let _res: return
let grouped: list<map<string, any>> = _group_by(filtered, (x) => x["part"]).map((g) => {"part": g.key, "total": _sum((() {
let _res = []
let _res: return
let groups = <String,_Group>{}
let order = <String>[]
let key = keyfn(it)
let ks = key.toString()
let g = groups[ks]
type _Group {
  key
}
fun main() {
  print(grouped)
}
fun _equal(a: any, b: any): bool {
  if (a is List && b is List) {
    if (a.length != b.length) return false
    for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true
  }
  if (a is Map && b is Map) {
    if (a.length != b.length) return false
    for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
    return true
  }
  return a == b
}
fun _sum(v: any): float {
  let list: list<any>
  if (v is List) list = v
  else if (v is Map && v['items'] is List) list = (v['items'] as List)
  else if (v is Map && v['Items'] is List) list = (v['Items'] as List)
  else if (v is _Group) list = v.Items
  else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
  if (list == null || list.isEmpty) return 0
  let s = 0.0
  for (var n in list) s += (n as num).toDouble()
  return s
}
