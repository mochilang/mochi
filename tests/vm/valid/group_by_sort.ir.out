func main (regs=18)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
L4:
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r4, "val"
  // from i in items
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L8:
  MakeMap      r8, 0, r0
L2:
  Const        r9, []
L7:
  LessInt      r10, r7, r6
  JumpIfFalse  r10, L0
  Index        r10, r5, r7
  // group by i.cat into g
  Index        r5, r10, r2
  Str          r2, r5
L5:
  In           r6, r2, r8
L1:
  JumpIfTrue   r6, L1
  // from i in items
  Const        r6, []
  Const        r11, "__group__"
  Const        r12, true
  Const        r13, "key"
  // group by i.cat into g
  Move         r14, r5
  // from i in items
  Const        r5, "items"
  Move         r15, r6
  Const        r6, "count"
  Const        r16, 0
  Move         r17, r11
  Move         r11, r12
  Move         r12, r13
  Move         r13, r14
  Move         r14, r5
  Move         r5, r15
  Move         r15, r6
  Move         r6, r16
  MakeMap      r16, 4, r17
  SetIndex     r8, r2, r16
  Const        r16, "items"
  Index        r6, r8, r2
  Index        r2, r6, r16
  Append       r8, r2, r10
  SetIndex     r6, r16, r8
  Const        r8, "count"
  Index        r2, r6, r8
  Const        r16, 1
  AddInt       r10, r2, r16
  SetIndex     r6, r8, r10
  AddInt       r7, r7, r16
  Jump         L2
L0:
  Const        r10, 0
  Move         r2, r10
  Const        r8, 0
  LessInt      r6, r2, r8
  JumpIfFalse  r6, L3
  Index        r6, r9, r2
  // cat: g.key,
  Const        r9, "cat"
  Index        r8, r6, r3
  // total: sum(from x in g select x.val)
  Const        r3, "total"
  Const        r7, []
  IterPrep     r15, r6
  Len          r5, r15
  Move         r14, r10
  LessInt      r13, r14, r5
  JumpIfFalse  r13, L4
  Index        r13, r15, r14
  Index        r15, r13, r4
  Append       r7, r7, r15
  AddInt       r14, r14, r16
  Jump         L5
  Sum          r15, r7
  // cat: g.key,
  Move         r7, r9
  Move         r9, r8
  // total: sum(from x in g select x.val)
  Move         r14, r3
  Move         r3, r15
  // select {
  MakeMap      r15, 2, r7
  // sort by -sum(from x in g select x.val)
  Const        r3, []
  IterPrep     r14, r6
  Len          r6, r14
  Move         r9, r10
  LessInt      r10, r9, r6
  JumpIfFalse  r10, L6
  Index        r13, r14, r9
  Index        r10, r13, r4
  Append       r3, r3, r10
  AddInt       r9, r9, r16
  Jump         L7
L6:
  Sum          r9, r3
  Neg          r10, r9
  // from i in items
  Move         r9, r15
  MakeList     r15, 2, r10
  Append       r1, r1, r15
  AddInt       r2, r2, r16
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
