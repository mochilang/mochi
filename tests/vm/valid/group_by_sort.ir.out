func main (regs=19)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
L0:
  // group by i.cat into g
  Const        r2, "cat"
L8:
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r4, "val"
  // from i in items
  IterPrep     r5, r0
L7:
  Len          r6, r5
L5:
  Const        r7, 0
L4:
  MakeMap      r8, 0, r0
  Const        r9, []
L2:
  Const        r10, 0
  LessInt      r11, r7, r6
  JumpIfFalse  r11, L0
  Index        r11, r5, r7
  // group by i.cat into g
  Index        r5, r11, r2
  Str          r2, r5
L1:
  In           r6, r2, r8
  JumpIfTrue   r6, L1
  // from i in items
  Const        r6, []
  Const        r12, "__group__"
  Const        r13, true
  Const        r14, "key"
  // group by i.cat into g
  Move         r15, r5
  // from i in items
  Const        r5, "items"
  Move         r16, r6
  Const        r6, "count"
  Const        r17, 0
  Move         r18, r12
  Move         r12, r13
  Move         r13, r14
  Move         r14, r15
  Move         r15, r5
  Move         r5, r16
  Move         r16, r6
  Move         r6, r17
  MakeMap      r17, 4, r18
  SetIndex     r8, r2, r10
  Append       r9, r9, r17
  Const        r17, 1
  Const        r6, "items"
  Index        r16, r8, r2
  Index        r2, r9, r16
  Index        r16, r2, r6
  Append       r8, r16, r11
  SetIndex     r2, r6, r8
  Const        r8, "count"
  Index        r16, r2, r8
  AddInt       r6, r16, r17
  SetIndex     r2, r8, r6
  AddInt       r7, r7, r17
  Jump         L2
  Const        r6, 0
  Move         r16, r6
  Len          r8, r9
  LessInt      r2, r16, r8
  JumpIfFalse  r2, L3
  Index        r2, r9, r16
  // cat: g.key,
  Const        r9, "cat"
  Index        r8, r2, r3
  // total: sum(from x in g select x.val)
  Const        r3, "total"
  Const        r10, []
  IterPrep     r7, r2
  Len          r11, r7
  Move         r5, r6
  LessInt      r15, r5, r11
  JumpIfFalse  r15, L4
  Index        r15, r7, r5
  Index        r7, r15, r4
  Append       r10, r10, r7
  AddInt       r5, r5, r17
  Jump         L5
  Sum          r7, r10
  // cat: g.key,
  Move         r10, r9
  Move         r9, r8
  // total: sum(from x in g select x.val)
  Move         r8, r3
  Move         r5, r7
  // select {
  MakeMap      r7, 2, r10
  // sort by -sum(from x in g select x.val)
  Const        r5, []
  IterPrep     r8, r2
  Len          r2, r8
  Move         r9, r6
  LessInt      r6, r9, r2
  JumpIfFalse  r6, L6
  Index        r15, r8, r9
  Index        r6, r15, r4
  Append       r5, r5, r6
  AddInt       r9, r9, r17
  Jump         L7
L6:
  Sum          r9, r5
  Neg          r5, r9
  // from i in items
  Move         r6, r7
  MakeList     r9, 2, r5
  Append       r1, r1, r9
  AddInt       r16, r16, r17
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
