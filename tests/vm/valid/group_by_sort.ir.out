func main (regs=89)
  // let items = [
  Const        r0, [{"city": "A", "val": 3}, {"city": "B", "val": 2}, {"city": "A", "val": 1}]
  Move         r1, r0
  // let grouped = from r in items
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by r.city into g
  Const        r11, "city"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // let grouped = from r in items
  Const        r15, []
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by r.city into g
  Move         r19, r12
  // let grouped = from r in items
  Const        r20, "items"
  Move         r21, r15
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Move         r7, r23
L1:
  Const        r24, "items"
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Const        r28, 1
  Add          r29, r5, r28
  Move         r5, r29
  Jump         L2
L0:
  Const        r30, 0
  Len          r31, r7
L8:
  Less         r32, r30, r31
  JumpIfFalse  r32, L3
  Index        r33, r7, r30
  Move         r34, r33
  // city: g.key,
  Const        r35, "city"
  Const        r36, "key"
  Index        r37, r34, r36
  // total: sum(from x in g select x.val)
  Const        r38, "total"
  Const        r39, []
  IterPrep     r40, r34
  Len          r41, r40
  Const        r42, 0
L5:
  Less         r43, r42, r41
  JumpIfFalse  r43, L4
  Index        r44, r40, r42
  Move         r45, r44
  Const        r46, "val"
  Index        r47, r45, r46
  Append       r48, r39, r47
  Move         r39, r48
  Const        r49, 1
  Add          r50, r42, r49
  Move         r42, r50
  Jump         L5
L4:
  Sum          51,39,0,0
  // city: g.key,
  Move         r52, r35
  Move         r53, r37
  // total: sum(from x in g select x.val)
  Move         r54, r38
  Move         r55, r51
  // select {
  MakeMap      r56, 2, r52
  // sort by -sum(from x in g select x.val)
  Const        r57, []
  IterPrep     r58, r34
  Len          r59, r58
  Const        r60, 0
L7:
  Less         r61, r60, r59
  JumpIfFalse  r61, L6
  Index        r62, r58, r60
  Move         r45, r62
  Const        r63, "val"
  Index        r64, r45, r63
  Append       r65, r57, r64
  Move         r57, r65
  Const        r66, 1
  Add          r67, r60, r66
  Move         r60, r67
  Jump         L7
L6:
  Sum          68,57,0,0
  Neg          r69, r68
  Move         r70, r69
  // let grouped = from r in items
  Move         r71, r56
  MakeList     r72, 2, r70
  Append       r73, r2, r72
  Move         r2, r73
  Const        r74, 1
  Add          r75, r30, r74
  Move         r30, r75
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         76,2,0,0
  // let grouped = from r in items
  Move         r2, r76
  Move         r77, r2
  // for x in grouped {
  IterPrep     r78, r77
  Len          r79, r78
  Const        r80, 0
L10:
  Less         r81, r80, r79
  JumpIfFalse  r81, L9
  Index        r82, r78, r80
  Move         r45, r82
  // print(x.city, x.total)
  Const        r83, "city"
  Index        r84, r45, r83
  Const        r85, "total"
  Index        r86, r45, r85
  Print2       r84, r86
  // for x in grouped {
  Const        r87, 1
  Add          r88, r80, r87
  Move         r80, r88
  Jump         L10
L9:
  Return       r0

