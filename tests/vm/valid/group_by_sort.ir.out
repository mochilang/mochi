func main (regs=66)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r5, "val"
  // from i in items
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r10, []
L2:
  LessInt      r11, r8, r7
  JumpIfFalse  r11, L0
  Index        r12, r6, r8
  // group by i.cat into g
  Index        r14, r12, r2
  Str          r15, r14
  In           r16, r15, r9
  JumpIfTrue   r16, L1
  // from i in items
  Const        r17, []
  Const        r18, "__group__"
  Const        r19, true
  // group by i.cat into g
  Move         r20, r14
  // from i in items
  Const        r21, "items"
  Move         r22, r17
  MakeMap      r23, 3, r18
  SetIndex     r9, r15, r23
L1:
  Index        r25, r9, r15
  Index        r26, r25, r21
  Append       r27, r26, r12
  SetIndex     r25, r21, r27
  Const        r28, 1
  AddInt       r8, r8, r28
  Jump         L2
L0:
  Const        r30, 0
  Move         r29, r30
  Const        r31, 0
L8:
  LessInt      r32, r29, r31
  JumpIfFalse  r32, L3
  Index        r34, r10, r29
  // cat: g.key,
  Const        r35, "cat"
  Index        r36, r34, r3
  // total: sum(from x in g select x.val)
  Const        r37, "total"
  Const        r38, []
  IterPrep     r39, r34
  Len          r40, r39
  Move         r41, r30
L5:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L4
  Index        r44, r39, r41
  Index        r45, r44, r5
  Append       r38, r38, r45
  AddInt       r41, r41, r28
  Jump         L5
L4:
  // select {
  MakeMap      r50, 2, r35
  // sort by -sum(from x in g select x.val)
  Const        r51, []
  IterPrep     r52, r34
  Len          r53, r52
  Move         r54, r30
L7:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L6
  Index        r44, r52, r54
  Index        r57, r44, r5
  Append       r51, r51, r57
  AddInt       r54, r54, r28
  Jump         L7
L6:
  Sum          r59, r51
  Neg          r61, r59
  // from i in items
  Move         r62, r50
  MakeList     r63, 2, r61
  Append       r1, r1, r63
  AddInt       r29, r29, r28
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
