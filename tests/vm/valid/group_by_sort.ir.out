func main (regs=82)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r4, "total"
  Const        r5, "val"
  // from i in items
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
L2:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r11, r6, r8
  // group by i.cat into g
  Index        r13, r11, r2
  Str          r14, r13
  In           r15, r14, r9
  JumpIfTrue   r15, L1
  // from i in items
  Move         r16, r1
  Const        r17, "__group__"
  Const        r18, true
  Move         r19, r3
  // group by i.cat into g
  Move         r20, r13
  // from i in items
  Const        r21, "items"
  Move         r22, r16
  Const        r23, "count"
  Move         r24, r8
  Move         r25, r17
  Move         r26, r18
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  MakeMap      r33, 4, r25
  SetIndex     r9, r14, r33
L1:
  Move         r34, r21
  Index        r35, r9, r14
  Index        r36, r35, r34
  Append       r37, r36, r11
  SetIndex     r35, r34, r37
  Move         r38, r23
  Index        r39, r35, r38
  Const        r40, 1
  AddInt       r41, r39, r40
  SetIndex     r35, r38, r41
  AddInt       r8, r8, r40
  Jump         L2
L0:
  Values       42,9,0,0
  Const        r44, 0
  Move         r43, r44
  Len          r45, r42
L8:
  LessInt      r46, r43, r45
  JumpIfFalse  r46, L3
  Index        r48, r42, r43
  // cat: g.key,
  Move         r49, r2
  Index        r50, r48, r3
  // total: sum(from x in g select x.val)
  Move         r51, r4
  Move         r52, r1
  IterPrep     r53, r48
  Len          r54, r53
  Move         r55, r44
L5:
  LessInt      r56, r55, r54
  JumpIfFalse  r56, L4
  Index        r58, r53, r55
  Index        r59, r58, r5
  Append       r52, r52, r59
  AddInt       r55, r55, r40
  Jump         L5
L4:
  Sum          r61, r52
  // cat: g.key,
  Move         r62, r49
  Move         r63, r50
  // total: sum(from x in g select x.val)
  Move         r64, r51
  Move         r65, r61
  // select {
  MakeMap      r66, 2, r62
  // sort by -sum(from x in g select x.val)
  Move         r67, r1
  IterPrep     r68, r48
  Len          r69, r68
  Move         r70, r44
L7:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L6
  Index        r58, r68, r70
  Index        r73, r58, r5
  Append       r67, r67, r73
  AddInt       r70, r70, r40
  Jump         L7
L6:
  Sum          r75, r67
  Neg          r77, r75
  // from i in items
  Move         r78, r66
  MakeList     r79, 2, r77
  Append       r1, r1, r79
  AddInt       r43, r43, r40
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
