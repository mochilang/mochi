func main (regs=83)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r5, "val"
  // from i in items
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r10, []
L2:
  LessInt      r11, r8, r7
  JumpIfFalse  r11, L0
  Index        r12, r6, r8
  // group by i.cat into g
  Index        r14, r12, r2
  Str          r15, r14
  In           r16, r15, r9
  JumpIfTrue   r16, L1
  // from i in items
  Const        r17, []
  Const        r18, "__group__"
  Const        r19, true
  Const        r20, "key"
  // group by i.cat into g
  Move         r21, r14
  // from i in items
  Const        r22, "items"
  Move         r23, r17
  Const        r24, "count"
  Const        r25, 0
  Move         r26, r18
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r9, r15, r34
L1:
  Const        r36, "items"
  Index        r37, r9, r15
  Index        r38, r37, r36
  Append       r39, r38, r12
  SetIndex     r37, r36, r39
  Const        r40, "count"
  Index        r41, r37, r40
  Const        r42, 1
  AddInt       r43, r41, r42
  SetIndex     r37, r40, r43
  AddInt       r8, r8, r42
  Jump         L2
L0:
  Const        r45, 0
  Move         r44, r45
  Const        r46, 0
L8:
  LessInt      r47, r44, r46
  JumpIfFalse  r47, L3
  Index        r49, r10, r44
  // cat: g.key,
  Const        r50, "cat"
  Index        r51, r49, r3
  // total: sum(from x in g select x.val)
  Const        r52, "total"
  Const        r53, []
  IterPrep     r54, r49
  Len          r55, r54
  Move         r56, r45
L5:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L4
  Index        r59, r54, r56
  Index        r60, r59, r5
  Append       r53, r53, r60
  AddInt       r56, r56, r42
  Jump         L5
L4:
  Sum          r62, r53
  // cat: g.key,
  Move         r63, r50
  Move         r64, r51
  // total: sum(from x in g select x.val)
  Move         r65, r52
  Move         r66, r62
  // select {
  MakeMap      r67, 2, r63
  // sort by -sum(from x in g select x.val)
  Const        r68, []
  IterPrep     r69, r49
  Len          r70, r69
  Move         r71, r45
L7:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L6
  Index        r59, r69, r71
  Index        r74, r59, r5
  Append       r68, r68, r74
  AddInt       r71, r71, r42
  Jump         L7
L6:
  Sum          r76, r68
  Neg          r78, r76
  // from i in items
  Move         r79, r67
  MakeList     r80, 2, r78
  Append       r1, r1, r80
  AddInt       r44, r44, r42
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
