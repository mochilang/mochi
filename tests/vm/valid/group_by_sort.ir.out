func main (regs=84)
  // let items = [
  Const        r0, [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
  // from i in items
  Const        r1, []
  // group by i.cat into g
  Const        r2, "cat"
  // cat: g.key,
  Const        r3, "key"
  // total: sum(from x in g select x.val)
  Const        r4, "total"
  Const        r5, "val"
  // from i in items
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Move         r10, r1
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  // group by i.cat into g
  Index        r15, r13, r2
  Str          r16, r15
  In           r17, r16, r9
  JumpIfTrue   r17, L1
  // from i in items
  Move         r18, r1
  Const        r19, "__group__"
  Const        r20, true
  Move         r21, r3
  // group by i.cat into g
  Move         r22, r15
  // from i in items
  Const        r23, "items"
  Move         r24, r18
  Const        r25, "count"
  Move         r26, r8
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  MakeMap      r35, 4, r27
  SetIndex     r9, r16, r35
  Append       r10, r10, r35
L1:
  Move         r37, r23
  Index        r38, r9, r16
  Index        r39, r38, r37
  Append       r40, r39, r13
  SetIndex     r38, r37, r40
  Move         r41, r25
  Index        r42, r38, r41
  Const        r43, 1
  AddInt       r44, r42, r43
  SetIndex     r38, r41, r44
  AddInt       r8, r8, r43
  Jump         L2
L0:
  Const        r46, 0
  Move         r45, r46
  Len          r47, r10
L8:
  LessInt      r48, r45, r47
  JumpIfFalse  r48, L3
  Index        r50, r10, r45
  // cat: g.key,
  Move         r51, r2
  Index        r52, r50, r3
  // total: sum(from x in g select x.val)
  Move         r53, r4
  Move         r54, r18
  IterPrep     r55, r50
  Len          r56, r55
  Move         r57, r46
L5:
  LessInt      r58, r57, r56
  JumpIfFalse  r58, L4
  Index        r60, r55, r57
  Index        r61, r60, r5
  Append       r54, r54, r61
  AddInt       r57, r57, r43
  Jump         L5
L4:
  Sum          r63, r54
  // cat: g.key,
  Move         r64, r51
  Move         r65, r52
  // total: sum(from x in g select x.val)
  Move         r66, r53
  Move         r67, r63
  // select {
  MakeMap      r68, 2, r64
  // sort by -sum(from x in g select x.val)
  Move         r69, r1
  IterPrep     r70, r50
  Len          r71, r70
  Move         r72, r46
L7:
  LessInt      r73, r72, r71
  JumpIfFalse  r73, L6
  Index        r60, r70, r72
  Index        r75, r60, r5
  Append       r69, r69, r75
  AddInt       r72, r72, r43
  Jump         L7
L6:
  Sum          r77, r69
  Neg          r79, r77
  // from i in items
  Move         r80, r68
  MakeList     r81, 2, r79
  Append       r1, r1, r81
  AddInt       r45, r45, r43
  Jump         L8
L3:
  // sort by -sum(from x in g select x.val)
  Sort         r1, r1
  // print(grouped)
  Print        r1
  Return       r0
