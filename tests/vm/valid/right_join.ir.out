func main (regs=81)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // right join o in orders on o.customerId == c.id
  IterPrep     r7, r3
  Len          r8, r7
  Const        r11, 0
L5:
  Less         r12, r11, r8
  JumpIfFalse  r12, L0
  Index        r9, r7, r11
  Const        r13, false
  // let result = from c in customers
  Const        r15, 0
L3:
  Less         r16, r15, r6
  JumpIfFalse  r16, L1
  Index        r10, r5, r15
  // right join o in orders on o.customerId == c.id
  Const        r17, "customerId"
  Index        r18, r9, r17
  Const        r19, "id"
  Index        r20, r10, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  Const        r13, true
  // customerName: c.name,
  Const        r24, "name"
  Index        r25, r10, r24
  Const        r27, "customerName"
  Move         r28, r25
  // order: o
  Const        r29, "order"
  Move         r30, r9
  // select {
  MakeMap      r31, 2, r27
  // let result = from c in customers
  Append       r32, r4, r31
  Move         r4, r32
L2:
  Const        r33, 1
  AddInt       r15, r15, r33
  Jump         L3
L1:
  // right join o in orders on o.customerId == c.id
  JumpIfTrue   r13, L4
  Const        r10, nil
  // customerName: c.name,
  Const        r36, "name"
  Index        r37, r10, r36
  Const        r39, "customerName"
  Move         r40, r37
  // order: o
  Const        r41, "order"
  Move         r42, r9
  // select {
  MakeMap      r43, 2, r39
  // let result = from c in customers
  Append       r44, r4, r43
  Move         r4, r44
L4:
  // right join o in orders on o.customerId == c.id
  AddInt       r11, r11, r33
  Jump         L5
L0:
  // let result = from c in customers
  Move         r45, r4
  // print("--- Right Join using syntax ---")
  Const        r46, "--- Right Join using syntax ---"
  Print        r46
  // for entry in result {
  IterPrep     r47, r45
  Len          r48, r47
  Const        r49, 0
L9:
  Less         r50, r49, r48
  JumpIfFalse  r50, L6
  Index        r51, r47, r49
  Move         r52, r51
  // if entry.order {
  Const        r53, "order"
  Index        r54, r52, r53
  JumpIfFalse  r54, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r55, "Customer"
  Const        r62, "customerName"
  Index        r63, r52, r62
  Move         r56, r63
  Const        r57, "has order"
  Const        r65, "order"
  Index        r66, r52, r65
  Const        r67, "id"
  Index        r68, r66, r67
  Move         r58, r68
  Const        r59, "- $"
  Const        r70, "order"
  Index        r71, r52, r70
  Const        r72, "total"
  Index        r73, r71, r72
  Move         r60, r73
  PrintN       r55, 6, r55
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Const        r74, "Customer"
  Const        r78, "customerName"
  Index        r79, r52, r78
  Move         r75, r79
  Const        r76, "has no orders"
  PrintN       r74, 3, r74
L8:
  // for entry in result {
  AddInt       r49, r49, r33
  Jump         L9
L6:
  Return       r0
