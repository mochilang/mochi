func main (regs=80)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Move         r1, r0
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // right join o in orders on o.customerId == c.id
  IterPrep     r7, r3
  Len          r8, r7
  Const        r11, 0
L3:
  Less         r12, r11, r8
  JumpIfFalse  r12, L0
  Index        r9, r7, r11
  // let result = from c in customers
  Const        r15, 0
  Less         r16, r15, r6
  JumpIfFalse  r16, L1
  Index        r10, r5, r15
  // right join o in orders on o.customerId == c.id
  Const        r18, "customerId"
  Index        r19, r9, r18
  Const        r20, "id"
  Index        r21, r10, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  // customerName: c.name,
  Const        r23, "customerName"
  Const        r24, "name"
  Index        r25, r10, r24
  // order: o
  Const        r26, "order"
  // select {
  MakeMap      r29, 2, r23
  // let result = from c in customers
  Append       r4, r4, r29
L2:
  // select {
  MakeMap      r39, 2, r23
  // let result = from c in customers
  Append       r4, r4, r39
  // right join o in orders on o.customerId == c.id
  Const        r41, 1
  Add          r11, r11, r41
  Jump         L3
L0:
  // let result = from c in customers
  Move         r43, r4
  // print("--- Right Join using syntax ---")
  Const        r44, "--- Right Join using syntax ---"
  Print        r44
  // for entry in result {
  IterPrep     r45, r43
  Len          r46, r45
  Const        r47, 0
L7:
  Less         r48, r47, r46
  JumpIfFalse  r48, L4
  Index        r50, r45, r47
  // if entry.order {
  Const        r51, "order"
  Index        r52, r50, r51
  JumpIfFalse  r52, L5
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r59, "Customer"
  Move         r53, r59
  Const        r60, "customerName"
  Index        r54, r50, r60
  Const        r55, "has order"
  Const        r63, "order"
  Index        r64, r50, r63
  Const        r65, "id"
  Index        r56, r64, r65
  Const        r57, "- $"
  Const        r68, "order"
  Index        r69, r50, r68
  Const        r70, "total"
  Index        r58, r69, r70
  PrintN       r53, 6, r53
  // if entry.order {
  Jump         L6
L5:
  // print("Customer", entry.customerName, "has no orders")
  Move         r72, r59
  Const        r75, "customerName"
  Index        r73, r50, r75
  Const        r74, "has no orders"
  PrintN       r72, 3, r72
L6:
  // for entry in result {
  Const        r78, 1
  Add          r47, r47, r78
  Jump         L7
L4:
  Return       r0
