func main (regs=85)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let result = from c in customers
  Const        r4, []
  // right join o in orders on o.customerId == c.id
  JumpIfFalse  r12, L0
  // let result = from c in customers
  JumpIfFalse  r16, L1
  // right join o in orders on o.customerId == c.id
  JumpIfFalse  r22, L1
  // let result = from c in customers
  Jump         L1
  // right join o in orders on o.customerId == c.id
  JumpIfTrue   r35, L1
  Jump         L1
L0:
  // let result = from c in customers
  Move         r49, r4
  // print("--- Right Join using syntax ---")
  Const        r50, "--- Right Join using syntax ---"
  Print        r50
  // for entry in result {
  IterPrep     r51, r49
  Const        r53, 0
  JumpIfFalse  r54, L2
  Index        r55, r51, r53
  Move         r56, r55
  // if entry.order {
  JumpIfFalse  r58, L3
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r65, "Customer"
  Move         r59, r65
  Const        r66, "customerName"
  Index        r67, r56, r66
  Move         r60, r67
  Const        r68, "has order"
  Move         r61, r68
  Const        r69, "order"
  Index        r70, r56, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Move         r62, r72
  Const        r73, "- $"
  Move         r63, r73
  Const        r74, "order"
  Index        r75, r56, r74
  Const        r76, "total"
  Index        r77, r75, r76
  Move         r64, r77
  PrintN       r59, 6, r59
  // if entry.order {
  Jump         L1
L3:
  // print("Customer", entry.customerName, "has no orders")
  Const        r81, "Customer"
  Move         r78, r81
  Const        r82, "customerName"
  Index        r83, r56, r82
  Move         r79, r83
  Const        r84, "has no orders"
  Move         r80, r84
  PrintN       r78, 3, r78
  // for entry in result {
  Jump         L1
L2:
  Return       r0
