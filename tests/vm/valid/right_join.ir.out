func main (regs=85)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r6, r5
  // let result = from c in customers
  MakeMap      r7, 0, r0
  Const        r8, 0
L2:
  LessInt      r9, r8, r4
  JumpIfFalse  r9, L0
  Index        r10, r3, r8
  Move         r11, r10
  // right join o in orders on o.customerId == c.id
  Const        r12, "id"
  Index        r13, r11, r12
  // let result = from c in customers
  Index        r14, r7, r13
  Const        r15, nil
  NotEqual     r16, r14, r15
  JumpIfTrue   r16, L1
  MakeList     r17, 0, r0
  SetIndex     r7, r13, r17
L1:
  Index        r14, r7, r13
  Append       r18, r14, r10
  SetIndex     r7, r13, r18
  Const        r19, 1
  AddInt       r8, r8, r19
  Jump         L2
L0:
  // right join o in orders on o.customerId == c.id
  Const        r20, 0
L7:
  LessInt      r21, r20, r6
  JumpIfFalse  r21, L3
  Index        r23, r5, r20
  Const        r24, "customerId"
  Index        r25, r23, r24
  Index        r26, r7, r25
  NotEqual     r28, r26, r15
  JumpIfFalse  r28, L4
  Len          r29, r26
  Move         r30, r20
L5:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L4
  Index        r11, r26, r30
  // customerName: c.name,
  Const        r33, "customerName"
  Const        r34, "name"
  Index        r35, r11, r34
  // order: o
  Const        r36, "order"
  // customerName: c.name,
  Move         r37, r33
  Move         r38, r35
  // order: o
  Move         r39, r36
  Move         r40, r23
  // select {
  MakeMap      r41, 2, r37
  // let result = from c in customers
  Append       r2, r2, r41
  // right join o in orders on o.customerId == c.id
  AddInt       r30, r30, r19
  Jump         L5
L4:
  JumpIfTrue   r28, L6
  Move         r11, r15
  // customerName: c.name,
  Move         r44, r33
  Index        r45, r11, r34
  // order: o
  Move         r46, r36
  // customerName: c.name,
  Move         r47, r44
  Move         r48, r45
  // order: o
  Move         r49, r46
  Move         r50, r23
  // select {
  MakeMap      r51, 2, r47
  // let result = from c in customers
  Append       r2, r2, r51
L6:
  // right join o in orders on o.customerId == c.id
  AddInt       r20, r20, r19
  Jump         L7
L3:
  // print("--- Right Join using syntax ---")
  Const        r53, "--- Right Join using syntax ---"
  Print        r53
  // for entry in result {
  IterPrep     r54, r2
  Len          r55, r54
  Const        r56, 0
L11:
  Less         r57, r56, r55
  JumpIfFalse  r57, L8
  Index        r59, r54, r56
  // if entry.order {
  Move         r60, r36
  Index        r61, r59, r60
  JumpIfFalse  r61, L9
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r68, "Customer"
  Move         r62, r68
  Move         r69, r33
  Index        r63, r59, r69
  Const        r64, "has order"
  Index        r72, r59, r60
  Index        r65, r72, r12
  Const        r66, "- $"
  Index        r75, r59, r60
  Const        r76, "total"
  Index        r67, r75, r76
  PrintN       r62, 6, r62
  // if entry.order {
  Jump         L10
L9:
  // print("Customer", entry.customerName, "has no orders")
  Move         r78, r68
  Index        r79, r59, r69
  Const        r80, "has no orders"
  PrintN       r78, 3, r78
L10:
  // for entry in result {
  Add          r56, r56, r19
  Jump         L11
L8:
  Return       r0
