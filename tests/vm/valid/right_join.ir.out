func main (regs=14)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
L2:
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
L0:
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r1, r5
  Const        r6, 0
L3:
  LessInt      r7, r6, r1
  JumpIfFalse  r7, L0
  Index        r7, r5, r6
L5:
  Const        r5, false
  // let result = from c in customers
  Const        r1, 0
  LessInt      r8, r1, r4
  JumpIfFalse  r8, L0
  Index        r8, r3, r1
  // right join o in orders on o.customerId == c.id
  Const        r3, "customerId"
  Index        r4, r7, r3
  Const        r3, "id"
  Index        r9, r8, r3
  Equal        r10, r4, r9
  JumpIfFalse  r10, L1
  Const        r5, true
  // customerName: c.name,
  Const        r10, "customerName"
  Const        r9, "name"
  Index        r4, r8, r9
  // order: o
  Const        r11, "order"
  // customerName: c.name,
  Move         r12, r10
  Move         r10, r4
  // order: o
  Move         r4, r11
  Move         r11, r7
  // select {
  MakeMap      r13, 2, r12
  // let result = from c in customers
  Append       r2, r2, r13
L1:
  Const        r13, 1
  Jump         L2
  // right join o in orders on o.customerId == c.id
  Move         r1, r5
  JumpIfTrue   r1, L0
  Const        r8, nil
  // customerName: c.name,
  Const        r1, "customerName"
  Index        r5, r8, r9
  // order: o
  Const        r9, "order"
  // customerName: c.name,
  Move         r11, r1
  Move         r1, r5
  // order: o
  Move         r5, r9
  Move         r9, r7
  // select {
  MakeMap      r7, 2, r11
  // let result = from c in customers
  Append       r2, r2, r7
  // right join o in orders on o.customerId == c.id
  AddInt       r6, r6, r13
  Jump         L3
  // print("--- Right Join using syntax ---")
  Const        r7, "--- Right Join using syntax ---"
  Print        r7
  // for entry in result {
  IterPrep     r7, r2
  Len          r2, r7
  Const        r9, 0
  Less         r5, r9, r2
  JumpIfFalse  r5, L4
  Index        r5, r7, r9
  // if entry.order {
  Const        r7, "order"
  Index        r2, r5, r7
  JumpIfFalse  r2, L5
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r2, "Customer"
  Move         r1, r2
  Const        r11, "customerName"
  Index        r13, r5, r11
  Const        r8, "has order"
  Index        r6, r5, r7
  Index        r4, r6, r3
  Const        r6, "- $"
  Index        r3, r5, r7
  Const        r7, "total"
  Index        r10, r3, r7
  PrintN       r1, 1, r1
  // if entry.order {
  Jump         L6
  // print("Customer", entry.customerName, "has no orders")
  Move         r10, r2
  Index        r2, r5, r11
  Const        r11, "has no orders"
  PrintN       r10, 3, r10
L6:
  // for entry in result {
  Const        r11, 1
  Add          r9, r9, r11
  Jump         L3
L4:
  Return       r0
