func main (regs=71)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r6, r5
  Const        r9, 0
L5:
  LessInt      r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r7, r5, r9
  Const        r12, false
  // let result = from c in customers
  Const        r13, 0
L3:
  LessInt      r14, r13, r4
  JumpIfFalse  r14, L1
  Index        r8, r3, r13
  // right join o in orders on o.customerId == c.id
  Const        r16, "customerId"
  Index        r17, r7, r16
  Const        r18, "id"
  Index        r19, r8, r18
  Equal        r20, r17, r19
  JumpIfFalse  r20, L2
  Const        r12, true
  // customerName: c.name,
  Const        r21, "customerName"
  Const        r22, "name"
  Index        r23, r8, r22
  // order: o
  Const        r24, "order"
  // select {
  MakeMap      r27, 2, r21
  // let result = from c in customers
  Append       r2, r2, r27
L2:
  Const        r29, 1
  Jump         L3
L1:
  // right join o in orders on o.customerId == c.id
  Move         r30, r12
  JumpIfTrue   r30, L4
  Const        r8, nil
  // customerName: c.name,
  Const        r32, "customerName"
  Index        r33, r8, r22
  // order: o
  Const        r34, "order"
  // customerName: c.name,
  Move         r35, r33
  // select {
  MakeMap      r37, 2, r32
  // let result = from c in customers
  Append       r2, r2, r37
L4:
  // right join o in orders on o.customerId == c.id
  AddInt       r9, r9, r29
  Jump         L5
L0:
  // print("--- Right Join using syntax ---")
  Const        r39, "--- Right Join using syntax ---"
  Print        r39
  // for entry in result {
  IterPrep     r40, r2
  Len          r41, r40
  Const        r42, 0
L9:
  Less         r43, r42, r41
  JumpIfFalse  r43, L6
  Index        r45, r40, r42
  // if entry.order {
  Const        r46, "order"
  Index        r47, r45, r46
  JumpIfFalse  r47, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r54, "Customer"
  Move         r48, r54
  Const        r55, "customerName"
  Index        r49, r45, r55
  Const        r50, "has order"
  Index        r58, r45, r46
  Index        r51, r58, r18
  Const        r52, "- $"
  Index        r61, r45, r46
  Const        r62, "total"
  Index        r53, r61, r62
  PrintN       r48, 6, r48
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Move         r64, r54
  Index        r65, r45, r55
  Const        r66, "has no orders"
  PrintN       r64, 3, r64
L8:
  // for entry in result {
  Const        r69, 1
  Add          r42, r42, r69
  Jump         L9
L6:
  Return       r0
