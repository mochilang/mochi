func main (regs=15)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
L0:
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
L4:
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
L5:
  Len          r1, r5
L1:
  // let result = from c in customers
  MakeMap      r6, 0, r0
L2:
  Const        r7, 0
  LessInt      r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r4, r3, r7
L3:
  Move         r3, r4
L9:
  // right join o in orders on o.customerId == c.id
  Const        r9, "id"
  Index        r10, r3, r9
  // let result = from c in customers
  Index        r11, r6, r10
  Const        r12, nil
  NotEqual     r13, r11, r12
  JumpIfTrue   r13, L1
  MakeList     r13, 0, r0
  SetIndex     r6, r10, r13
  Index        r11, r6, r10
  Append       r13, r11, r4
  SetIndex     r6, r10, r13
  Const        r13, 1
  AddInt       r7, r7, r13
  Jump         L2
  // right join o in orders on o.customerId == c.id
  Const        r8, 0
  LessInt      r7, r8, r1
  JumpIfFalse  r7, L3
  Index        r7, r5, r8
  Const        r5, "customerId"
  Index        r1, r7, r5
  Index        r5, r6, r1
  Const        r1, nil
  NotEqual     r6, r5, r1
  JumpIfFalse  r6, L1
  Len          r1, r5
  Const        r11, 0
  LessInt      r10, r11, r1
  JumpIfFalse  r10, L1
  Index        r3, r5, r11
  // customerName: c.name,
  Const        r10, "customerName"
  Const        r1, "name"
  Index        r5, r3, r1
  // order: o
  Const        r4, "order"
  // customerName: c.name,
  Move         r12, r10
  Move         r10, r5
  // order: o
  Move         r5, r4
  Move         r4, r7
  // select {
  MakeMap      r14, 2, r12
  // let result = from c in customers
  Append       r2, r2, r14
  // right join o in orders on o.customerId == c.id
  AddInt       r11, r11, r13
  Jump         L4
  JumpIfTrue   r6, L4
  Const        r3, nil
  // customerName: c.name,
  Const        r14, "customerName"
  Index        r4, r3, r1
  // order: o
  Const        r1, "order"
  // customerName: c.name,
  Move         r3, r14
  Move         r14, r4
  // order: o
  Move         r4, r1
  Move         r1, r7
  // select {
  MakeMap      r7, 2, r3
  // let result = from c in customers
  Append       r2, r2, r7
  // right join o in orders on o.customerId == c.id
  AddInt       r8, r8, r13
  Jump         L5
  // print("--- Right Join using syntax ---")
  Const        r7, "--- Right Join using syntax ---"
  Print        r7
  // for entry in result {
  IterPrep     r7, r2
  Len          r2, r7
  Const        r1, 0
  Less         r4, r1, r2
  JumpIfFalse  r4, L6
  Index        r4, r7, r1
  // if entry.order {
  Const        r7, "order"
  Index        r2, r4, r7
  JumpIfFalse  r2, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r2, "Customer"
  Move         r14, r2
  Const        r3, "customerName"
  Index        r6, r4, r3
  Const        r8, "has order"
  Index        r13, r4, r7
  Index        r5, r13, r9
  Const        r9, "- $"
  Index        r10, r4, r7
  Const        r7, "total"
  Index        r12, r10, r7
  PrintN       r14, 1, r14
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Move         r12, r2
  Index        r2, r4, r3
  Const        r3, "has no orders"
  PrintN       r12, 3, r12
L8:
  // for entry in result {
  Const        r3, 1
  Add          r1, r1, r3
  Jump         L9
L6:
  Return       r0
