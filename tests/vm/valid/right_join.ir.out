func main (regs=18)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
L3:
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
L5:
  IterPrep     r3, r0
  Len          r4, r3
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r1, r5
L1:
  // let result = from c in customers
  MakeMap      r6, 0, r0
L2:
  Const        r7, 0
  LessInt      r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r4, r3, r7
  Move         r3, r4
  // right join o in orders on o.customerId == c.id
  Const        r9, "id"
  Index        r10, r3, r9
L4:
  // let result = from c in customers
  Index        r11, r6, r10
  Const        r12, nil
L9:
  NotEqual     r13, r11, r12
  JumpIfTrue   r13, L1
  MakeList     r13, 0, r0
  SetIndex     r6, r10, r13
  Index        r11, r6, r10
  Append       r13, r11, r4
  SetIndex     r6, r10, r13
  Const        r13, 1
  AddInt       r7, r7, r13
  Jump         L2
L0:
  // right join o in orders on o.customerId == c.id
  Const        r8, 0
  LessInt      r7, r8, r1
  JumpIfFalse  r7, L3
  Index        r7, r5, r8
  Const        r5, "customerId"
  Index        r1, r7, r5
  Index        r5, r6, r1
  NotEqual     r1, r5, r12
  JumpIfFalse  r1, L1
  Len          r6, r5
  Move         r11, r8
  LessInt      r10, r11, r6
  JumpIfFalse  r10, L1
  Index        r3, r5, r11
  // customerName: c.name,
  Const        r10, "customerName"
  Const        r6, "name"
  Index        r5, r3, r6
  // order: o
  Const        r4, "order"
  // customerName: c.name,
  Move         r14, r10
  Move         r15, r5
  // order: o
  Move         r5, r4
  Move         r16, r7
  // select {
  MakeMap      r17, 2, r14
  // let result = from c in customers
  Append       r2, r2, r17
  // right join o in orders on o.customerId == c.id
  AddInt       r11, r11, r13
  Jump         L4
  JumpIfTrue   r1, L5
  Move         r3, r12
  // customerName: c.name,
  Move         r17, r10
  Index        r16, r3, r6
  // order: o
  Move         r6, r4
  // customerName: c.name,
  Move         r3, r17
  Move         r17, r16
  // order: o
  Move         r16, r6
  Move         r6, r7
  // select {
  MakeMap      r7, 2, r3
  // let result = from c in customers
  Append       r2, r2, r7
  // right join o in orders on o.customerId == c.id
  AddInt       r8, r8, r13
  Jump         L3
  // print("--- Right Join using syntax ---")
  Const        r7, "--- Right Join using syntax ---"
  Print        r7
  // for entry in result {
  IterPrep     r7, r2
  Len          r2, r7
  Const        r6, 0
  Less         r16, r6, r2
  JumpIfFalse  r16, L6
  Index        r16, r7, r6
  // if entry.order {
  Move         r7, r4
  Index        r4, r16, r7
  JumpIfFalse  r4, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r4, "Customer"
  Move         r2, r4
  Move         r17, r10
  Index        r10, r16, r17
  Const        r3, "has order"
  Index        r1, r16, r7
  Index        r8, r1, r9
  Const        r1, "- $"
  Index        r9, r16, r7
  Const        r7, "total"
  Index        r5, r9, r7
  PrintN       r2, 1, r2
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Move         r5, r4
  Index        r4, r16, r17
  Const        r17, "has no orders"
  PrintN       r5, 3, r5
L8:
  // for entry in result {
  Add          r6, r6, r13
  Jump         L9
L6:
  Return       r0
