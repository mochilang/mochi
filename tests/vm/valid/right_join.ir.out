func main (regs=77)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r6, r5
  Const        r9, 0
L5:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r7, r5, r9
  Const        r12, false
  // let result = from c in customers
  Const        r13, 0
L3:
  Less         r14, r13, r4
  JumpIfFalse  r14, L1
  Index        r8, r3, r13
  // right join o in orders on o.customerId == c.id
  Const        r16, "customerId"
  Index        r17, r7, r16
  Const        r18, "id"
  Index        r19, r8, r18
  Equal        r20, r17, r19
  JumpIfFalse  r20, L2
  Const        r12, true
  // customerName: c.name,
  Const        r21, "customerName"
  Const        r22, "name"
  Index        r23, r8, r22
  // order: o
  Const        r24, "order"
  // select {
  MakeMap      r27, 2, r21
  // let result = from c in customers
  Append       r2, r2, r27
L2:
  Jump         L3
L1:
  // right join o in orders on o.customerId == c.id
  Move         r31, r12
  JumpIfTrue   r31, L4
  // select {
  MakeMap      r37, 2, r21
  // let result = from c in customers
  Append       r2, r2, r37
L4:
  // right join o in orders on o.customerId == c.id
  Const        r39, 1
  Add          r9, r9, r39
  Jump         L5
L0:
  // print("--- Right Join using syntax ---")
  Const        r41, "--- Right Join using syntax ---"
  Print        r41
  // for entry in result {
  IterPrep     r42, r2
  Len          r43, r42
  Const        r44, 0
L9:
  Less         r45, r44, r43
  JumpIfFalse  r45, L6
  Index        r47, r42, r44
  // if entry.order {
  Const        r48, "order"
  Index        r49, r47, r48
  JumpIfFalse  r49, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r56, "Customer"
  Move         r50, r56
  Const        r57, "customerName"
  Index        r51, r47, r57
  Const        r52, "has order"
  Const        r60, "order"
  Index        r61, r47, r60
  Const        r62, "id"
  Index        r53, r61, r62
  Const        r54, "- $"
  Const        r65, "order"
  Index        r66, r47, r65
  Const        r67, "total"
  Index        r55, r66, r67
  PrintN       r50, 6, r50
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Move         r69, r56
  Const        r72, "customerName"
  Index        r70, r47, r72
  Const        r71, "has no orders"
  PrintN       r69, 3, r69
L8:
  // for entry in result {
  Const        r75, 1
  Add          r44, r44, r75
  Jump         L9
L6:
  Return       r0
