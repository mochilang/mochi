func main (regs=75)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from c in customers
  Const        r2, []
  IterPrep     r3, r0
  Len          r4, r3
  // right join o in orders on o.customerId == c.id
  IterPrep     r5, r1
  Len          r6, r5
  Const        r9, 0
L5:
  LessInt      r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r7, r5, r9
  Const        r12, false
  // let result = from c in customers
  Const        r13, 0
L3:
  LessInt      r14, r13, r4
  JumpIfFalse  r14, L1
  Index        r8, r3, r13
  // right join o in orders on o.customerId == c.id
  Const        r16, "customerId"
  Index        r17, r7, r16
  Const        r18, "id"
  Index        r19, r8, r18
  Equal        r20, r17, r19
  JumpIfFalse  r20, L2
  Const        r12, true
  // customerName: c.name,
  Const        r21, "customerName"
  Const        r22, "name"
  Index        r23, r8, r22
  // order: o
  Const        r24, "order"
  // customerName: c.name,
  Move         r25, r21
  Move         r26, r23
  // order: o
  Move         r27, r24
  Move         r28, r7
  // select {
  MakeMap      r29, 2, r25
  // let result = from c in customers
  Append       r2, r2, r29
L2:
  Const        r31, 1
  Jump         L3
L1:
  // right join o in orders on o.customerId == c.id
  Move         r32, r12
  JumpIfTrue   r32, L4
  Const        r8, nil
  // customerName: c.name,
  Const        r34, "customerName"
  Index        r35, r8, r22
  // order: o
  Const        r36, "order"
  // customerName: c.name,
  Move         r37, r34
  Move         r38, r35
  // order: o
  Move         r39, r36
  Move         r40, r7
  // select {
  MakeMap      r41, 2, r37
  // let result = from c in customers
  Append       r2, r2, r41
L4:
  // right join o in orders on o.customerId == c.id
  AddInt       r9, r9, r31
  Jump         L5
L0:
  // print("--- Right Join using syntax ---")
  Const        r43, "--- Right Join using syntax ---"
  Print        r43
  // for entry in result {
  IterPrep     r44, r2
  Len          r45, r44
  Const        r46, 0
L9:
  Less         r47, r46, r45
  JumpIfFalse  r47, L6
  Index        r49, r44, r46
  // if entry.order {
  Const        r50, "order"
  Index        r51, r49, r50
  JumpIfFalse  r51, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r58, "Customer"
  Move         r52, r58
  Const        r59, "customerName"
  Index        r53, r49, r59
  Const        r54, "has order"
  Index        r62, r49, r50
  Index        r55, r62, r18
  Const        r56, "- $"
  Index        r65, r49, r50
  Const        r66, "total"
  Index        r57, r65, r66
  PrintN       r52, 6, r52
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Move         r68, r58
  Index        r69, r49, r59
  Const        r70, "has no orders"
  PrintN       r68, 3, r68
L8:
  // for entry in result {
  Const        r73, 1
  Add          r46, r46, r73
  Jump         L9
L6:
  Return       r0
