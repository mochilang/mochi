func main (regs=87)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  Move         r3, r2
  // let result = from c in customers
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // right join o in orders on o.customerId == c.id
  IterPrep     r7, r3
  Len          r8, r7
  Const        r11, 0
L5:
  Less         r12, r11, r8
  JumpIfFalse  r12, L0
  Index        r13, r7, r11
  Move         r9, r13
  Const        r14, false
  // let result = from c in customers
  Const        r15, 0
L3:
  Less         r16, r15, r6
  JumpIfFalse  r16, L1
  Index        r17, r5, r15
  Move         r10, r17
  // right join o in orders on o.customerId == c.id
  Const        r18, "customerId"
  Index        r19, r9, r18
  Const        r20, "id"
  Index        r21, r10, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  Const        r14, true
  // customerName: c.name,
  Const        r23, "customerName"
  Const        r24, "name"
  Index        r25, r10, r24
  // order: o
  Const        r26, "order"
  // customerName: c.name,
  Move         r27, r23
  Move         r28, r25
  // order: o
  Move         r29, r26
  Move         r30, r9
  // select {
  MakeMap      r31, 2, r27
  // let result = from c in customers
  Append       r32, r4, r31
  Move         r4, r32
L2:
  Const        r33, 1
  Add          r34, r15, r33
  Move         r15, r34
  Jump         L3
L1:
  // right join o in orders on o.customerId == c.id
  Move         r35, r14
  JumpIfTrue   r35, L4
  Const        r36, nil
  Move         r10, r36
  // customerName: c.name,
  Const        r37, "customerName"
  Const        r38, "name"
  Index        r39, r10, r38
  // order: o
  Const        r40, "order"
  // customerName: c.name,
  Move         r41, r37
  Move         r42, r39
  // order: o
  Move         r43, r40
  Move         r44, r9
  // select {
  MakeMap      r45, 2, r41
  // let result = from c in customers
  Append       r46, r4, r45
  Move         r4, r46
L4:
  // right join o in orders on o.customerId == c.id
  Const        r47, 1
  Add          r48, r11, r47
  Move         r11, r48
  Jump         L5
L0:
  // let result = from c in customers
  Move         r49, r4
  // print("--- Right Join using syntax ---")
  Const        r50, "--- Right Join using syntax ---"
  Print        r50
  // for entry in result {
  IterPrep     r51, r49
  Len          r52, r51
  Const        r53, 0
L9:
  Less         r54, r53, r52
  JumpIfFalse  r54, L6
  Index        r55, r51, r53
  Move         r56, r55
  // if entry.order {
  Const        r57, "order"
  Index        r58, r56, r57
  JumpIfFalse  r58, L7
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r65, "Customer"
  Move         r59, r65
  Const        r66, "customerName"
  Index        r67, r56, r66
  Move         r60, r67
  Const        r68, "has order"
  Move         r61, r68
  Const        r69, "order"
  Index        r70, r56, r69
  Const        r71, "id"
  Index        r72, r70, r71
  Move         r62, r72
  Const        r73, "- $"
  Move         r63, r73
  Const        r74, "order"
  Index        r75, r56, r74
  Const        r76, "total"
  Index        r77, r75, r76
  Move         r64, r77
  PrintN       r59, 6, r59
  // if entry.order {
  Jump         L8
L7:
  // print("Customer", entry.customerName, "has no orders")
  Const        r81, "Customer"
  Move         r78, r81
  Const        r82, "customerName"
  Index        r83, r56, r82
  Move         r79, r83
  Const        r84, "has no orders"
  Move         r80, r84
  PrintN       r78, 3, r78
L8:
  // for entry in result {
  Const        r85, 1
  Add          r86, r53, r85
  Move         r53, r86
  Jump         L9
L6:
  Return       r0
