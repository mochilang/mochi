func main (regs=102)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}, {"id": 4, "name": "Diana"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  Move         r3, r2
  // let result = from c in customers
  Const        r4, []
  IterPrep     r5, r1
  Len          r6, r5
  // right join o in orders on o.customerId == c.id
  IterPrep     r7, r3
  Len          r8, r7
  // let result = from c in customers
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  Move         r12, r11
  // right join o in orders on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r15, r7, r13
  Move         r16, r15
  Const        r17, "customerId"
  Index        r18, r16, r17
  Const        r19, "id"
  Index        r20, r12, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // customerName: c.name,
  Const        r22, "customerName"
  Const        r23, "name"
  Index        r24, r12, r23
  // order: o
  Const        r25, "order"
  // customerName: c.name,
  Move         r26, r22
  Move         r27, r24
  // order: o
  Move         r28, r25
  Move         r29, r16
  // select {
  MakeMap      r30, 2, r26
  // let result = from c in customers
  Append       r31, r4, r30
  Move         r4, r31
L2:
  // right join o in orders on o.customerId == c.id
  Const        r32, 1
  Add          r33, r13, r32
  Move         r13, r33
  Jump         L3
L1:
  // let result = from c in customers
  Const        r34, 1
  Add          r35, r9, r34
  Move         r9, r35
  Jump         L4
L0:
  // right join o in orders on o.customerId == c.id
  Const        r36, 0
L10:
  Less         r37, r36, r8
  JumpIfFalse  r37, L5
  Index        r38, r7, r36
  Move         r16, r38
  Const        r39, false
  // let result = from c in customers
  Const        r40, 0
L8:
  Less         r41, r40, r6
  JumpIfFalse  r41, L6
  Index        r42, r5, r40
  Move         r12, r42
  // right join o in orders on o.customerId == c.id
  Const        r43, "customerId"
  Index        r44, r16, r43
  Const        r45, "id"
  Index        r46, r12, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L7
  Const        r39, true
L7:
  // let result = from c in customers
  Const        r48, 1
  Add          r49, r40, r48
  Move         r40, r49
  Jump         L8
L6:
  // right join o in orders on o.customerId == c.id
  Move         r50, r39
  JumpIfTrue   r50, L9
  Const        r51, nil
  Move         r12, r51
  // customerName: c.name,
  Const        r52, "customerName"
  Const        r53, "name"
  Index        r54, r12, r53
  // order: o
  Const        r55, "order"
  // customerName: c.name,
  Move         r56, r52
  Move         r57, r54
  // order: o
  Move         r58, r55
  Move         r59, r16
  // select {
  MakeMap      r60, 2, r56
  // let result = from c in customers
  Append       r61, r4, r60
  Move         r4, r61
L9:
  // right join o in orders on o.customerId == c.id
  Const        r62, 1
  Add          r63, r36, r62
  Move         r36, r63
  Jump         L10
L5:
  // let result = from c in customers
  Move         r64, r4
  // print("--- Right Join using syntax ---")
  Const        r65, "--- Right Join using syntax ---"
  Print        r65
  // for entry in result {
  IterPrep     r66, r64
  Len          r67, r66
  Const        r68, 0
L14:
  Less         r69, r68, r67
  JumpIfFalse  r69, L11
  Index        r70, r66, r68
  Move         r71, r70
  // if entry.order {
  Const        r72, "order"
  Index        r73, r71, r72
  JumpIfFalse  r73, L12
  // print("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total)
  Const        r80, "Customer"
  Move         r74, r80
  Const        r81, "customerName"
  Index        r82, r71, r81
  Move         r75, r82
  Const        r83, "has order"
  Move         r76, r83
  Const        r84, "order"
  Index        r85, r71, r84
  Const        r86, "id"
  Index        r87, r85, r86
  Move         r77, r87
  Const        r88, "- $"
  Move         r78, r88
  Const        r89, "order"
  Index        r90, r71, r89
  Const        r91, "total"
  Index        r92, r90, r91
  Move         r79, r92
  PrintN       r74, 6, r74
  // if entry.order {
  Jump         L13
L12:
  // print("Customer", entry.customerName, "has no orders")
  Const        r96, "Customer"
  Move         r93, r96
  Const        r97, "customerName"
  Index        r98, r71, r97
  Move         r94, r98
  Const        r99, "has no orders"
  Move         r95, r99
  PrintN       r93, 3, r93
L13:
  // for entry in result {
  Const        r100, 1
  Add          r101, r68, r100
  Move         r68, r101
  Jump         L14
L11:
  Return       r0
