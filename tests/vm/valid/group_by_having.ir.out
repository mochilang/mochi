func main (regs=48)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
  Const        r9, []
L2:
  LessInt      r10, r7, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r7
  // group by p.city into g
  Index        r13, r11, r2
  Str          r14, r13
  In           r15, r14, r8
  JumpIfTrue   r15, L1
  // from p in people
  Const        r16, []
  Const        r17, "__group__"
  Const        r18, true
  // group by p.city into g
  Move         r19, r13
  // from p in people
  Const        r20, "items"
  Move         r21, r16
  Const        r22, "count"
  Const        r23, 0
  MakeMap      r24, 4, r17
  SetIndex     r8, r14, r24
L1:
  Index        r26, r8, r14
  Index        r27, r26, r20
  Append       r28, r27, r11
  SetIndex     r26, r20, r28
  Index        r29, r26, r22
  Const        r30, 1
  AddInt       r31, r29, r30
  SetIndex     r26, r22, r31
  AddInt       r7, r7, r30
  Jump         L2
L0:
  Move         r32, r23
  Const        r33, 0
L4:
  LessInt      r34, r32, r33
  JumpIfFalse  r34, L3
  Index        r36, r9, r32
  // having count(g) >= 4
  Index        r37, r36, r22
  Const        r38, 4
  LessEq       r39, r38, r37
  JumpIfFalse  r39, L3
  // select { city: g.key, num: count(g) }
  Const        r40, "city"
  Index        r41, r36, r3
  Const        r42, "num"
  Index        r43, r36, r22
  MakeMap      r46, 2, r40
  // from p in people
  Append       r1, r1, r46
  AddInt       r32, r32, r30
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
