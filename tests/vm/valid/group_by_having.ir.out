func main (regs=24)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  Const        r4, "num"
L1:
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
  Move         r9, r1
  Move         r10, r7
L2:
  LessInt      r11, r7, r6
L4:
  JumpIfFalse  r11, L0
  Index        r6, r5, r7
  // group by p.city into g
  Index        r5, r6, r2
  Str          r12, r5
  In           r13, r12, r8
  JumpIfTrue   r13, L1
  // from p in people
  Move         r13, r1
L0:
  Const        r14, "__group__"
  Const        r15, true
  Move         r16, r3
  // group by p.city into g
  Move         r17, r5
  // from p in people
  Const        r5, "items"
  Move         r18, r13
  Const        r13, "count"
  Move         r19, r7
  Move         r20, r14
  Move         r14, r15
  Move         r15, r16
  Move         r16, r17
  Move         r17, r5
  Move         r21, r18
  Move         r18, r13
  Move         r22, r19
  MakeMap      r23, 4, r20
  SetIndex     r8, r12, r10
  Append       r9, r9, r23
  Const        r23, 1
  AddInt       r10, r10, r23
  Move         r10, r5
  Index        r5, r8, r12
  Index        r12, r9, r5
  Index        r5, r12, r10
  Append       r8, r5, r6
  SetIndex     r12, r10, r8
  Move         r8, r13
  Index        r13, r12, r8
  AddInt       r5, r13, r23
  SetIndex     r12, r8, r5
  AddInt       r7, r7, r23
  Jump         L2
  Move         r5, r19
  Len          r19, r9
  LessInt      r13, r5, r19
  JumpIfFalse  r13, L3
  Index        r13, r9, r5
  // having count(g) >= 4
  Index        r9, r13, r8
  Const        r19, 4
  LessEq       r12, r19, r9
  JumpIfFalse  r12, L3
  // select { city: g.key, num: count(g) }
  Move         r12, r2
  Index        r2, r13, r3
  Move         r3, r4
  Index        r4, r13, r8
  Move         r13, r12
  Move         r8, r2
  Move         r2, r3
  Move         r3, r4
  MakeMap      r4, 2, r13
  // from p in people
  Append       r1, r1, r4
  AddInt       r5, r5, r23
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
