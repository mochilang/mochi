func main (regs=56)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
  Const        r9, []
L2:
  LessInt      r10, r7, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r7
  // group by p.city into g
  Index        r13, r11, r2
  Str          r14, r13
  In           r15, r14, r8
  JumpIfTrue   r15, L1
  // from p in people
  Const        r16, []
  Const        r17, "__group__"
  Const        r18, true
  // group by p.city into g
  Move         r19, r13
  // from p in people
  Const        r20, "items"
  Move         r21, r16
  Const        r22, "count"
  Const        r23, 0
  Move         r24, r17
  Move         r25, r18
  Move         r26, r3
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  MakeMap      r32, 4, r24
  SetIndex     r8, r14, r32
L1:
  Index        r34, r8, r14
  Index        r35, r34, r20
  Append       r36, r35, r11
  SetIndex     r34, r20, r36
  Index        r37, r34, r22
  Const        r38, 1
  AddInt       r39, r37, r38
  SetIndex     r34, r22, r39
  AddInt       r7, r7, r38
  Jump         L2
L0:
  Move         r40, r23
  Const        r41, 0
L4:
  LessInt      r42, r40, r41
  JumpIfFalse  r42, L3
  Index        r44, r9, r40
  // having count(g) >= 4
  Index        r45, r44, r22
  Const        r46, 4
  LessEq       r47, r46, r45
  JumpIfFalse  r47, L3
  // select { city: g.key, num: count(g) }
  Const        r48, "city"
  Index        r49, r44, r3
  Const        r50, "num"
  Index        r51, r44, r22
  MakeMap      r54, 2, r48
  // from p in people
  Append       r1, r1, r54
  AddInt       r40, r40, r38
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
