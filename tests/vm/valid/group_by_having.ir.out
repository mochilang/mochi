func main (regs=61)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  Const        r4, "num"
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
L2:
  LessInt      r9, r7, r6
  JumpIfFalse  r9, L0
  Index        r10, r5, r7
  // group by p.city into g
  Index        r12, r10, r2
  Str          r13, r12
  In           r14, r13, r8
  JumpIfTrue   r14, L1
  // from p in people
  Move         r15, r1
  Const        r16, "__group__"
  Const        r17, true
  Move         r18, r3
  // group by p.city into g
  Move         r19, r12
  // from p in people
  Const        r20, "items"
  Move         r21, r15
  Const        r22, "count"
  Move         r23, r7
  Move         r24, r16
  Move         r25, r17
  Move         r26, r18
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  MakeMap      r32, 4, r24
  SetIndex     r8, r13, r32
L1:
  Move         r33, r20
  Index        r34, r8, r13
  Index        r35, r34, r33
  Append       r36, r35, r10
  SetIndex     r34, r33, r36
  Move         r37, r22
  Index        r38, r34, r37
  Const        r39, 1
  AddInt       r40, r38, r39
  SetIndex     r34, r37, r40
  AddInt       r7, r7, r39
  Jump         L2
L0:
  Values       41,8,0,0
  Const        r42, 0
  Len          r44, r41
L4:
  LessInt      r45, r42, r44
  JumpIfFalse  r45, L3
  Index        r47, r41, r42
  // having count(g) >= 4
  Index        r48, r47, r37
  Const        r49, 4
  LessEq       r50, r49, r48
  JumpIfFalse  r50, L3
  // select { city: g.key, num: count(g) }
  Move         r51, r2
  Index        r52, r47, r3
  Move         r53, r4
  Index        r54, r47, r37
  Move         r55, r51
  Move         r56, r52
  Move         r57, r53
  Move         r58, r54
  MakeMap      r59, 2, r55
  // from p in people
  Append       r1, r1, r59
  AddInt       r42, r42, r39
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
