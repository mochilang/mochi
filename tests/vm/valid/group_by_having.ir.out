func main (regs=43)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
  Const        r9, []
L2:
  LessInt      r10, r7, r6
  JumpIfFalse  r10, L0
  Index        r12, r5, r7
  // group by p.city into g
  Index        r13, r12, r2
  Str          r14, r13
  In           r15, r14, r8
  JumpIfTrue   r15, L1
  // from p in people
  Const        r16, "__group__"
  Const        r17, true
  // group by p.city into g
  Move         r18, r13
  // from p in people
  Const        r19, "count"
  Const        r20, 0
  MakeMap      r21, 3, r16
  SetIndex     r8, r14, r21
L1:
  Index        r23, r8, r14
  Index        r24, r23, r19
  Const        r25, 1
  AddInt       r26, r24, r25
  SetIndex     r23, r19, r26
  AddInt       r7, r7, r25
  Jump         L2
L0:
  Move         r27, r20
  Const        r28, 0
L4:
  LessInt      r29, r27, r28
  JumpIfFalse  r29, L3
  Index        r31, r9, r27
  // having count(g) >= 4
  Index        r32, r31, r19
  Const        r33, 4
  LessEq       r34, r33, r32
  JumpIfFalse  r34, L3
  // select { city: g.key, num: count(g) }
  Const        r35, "city"
  Index        r36, r31, r3
  Const        r37, "num"
  Index        r38, r31, r19
  MakeMap      r41, 2, r35
  // from p in people
  Append       r1, r1, r41
  AddInt       r27, r27, r25
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
