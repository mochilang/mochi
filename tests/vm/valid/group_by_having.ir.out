func main (regs=52)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  Move         r1, r0
  // from p in people
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
  MakeMap      r6, 0, r0
  Const        r7, []
L2:
  Less         r8, r5, r4
  JumpIfFalse  r8, L0
  Index        r9, r3, r5
  Move         r10, r9
  // group by p.city into g
  Const        r11, "city"
  Index        r12, r10, r11
  Str          r13, r12
  In           r14, r13, r6
  JumpIfTrue   r14, L1
  // from p in people
  Const        r15, []
  Const        r16, "__group__"
  Const        r17, true
  Const        r18, "key"
  // group by p.city into g
  Move         r19, r12
  // from p in people
  Const        r20, "items"
  Move         r21, r15
  MakeMap      r22, 3, r16
  SetIndex     r6, r13, r22
  Append       r23, r7, r22
  Const        r24, "items"
L1:
  Index        r25, r6, r13
  Index        r26, r25, r24
  Append       r27, r26, r9
  SetIndex     r25, r24, r27
  Jump         L2
  Const        r30, 0
  Len          r31, r23
L0:
  Less         r32, r30, r31
  JumpIfFalse  r32, L3
L4:
  Index        r33, r23, r30
  // having count(g) >= 4
  Count        r35, r33
  Const        r36, 4
  LessEqInt    r37, r36, r35
  JumpIfFalse  r37, L3
  // from p in people
  Jump         L4
  // json(big)
  JSON         r48
  Return       r0
