func main (regs=45)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  // from p in people
  Const        r1, []
  // group by p.city into g
  Const        r2, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "key"
  // from p in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
  MakeMap      r8, 0, r0
  Const        r9, []
L2:
  LessInt      r10, r7, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r7
  // group by p.city into g
  Index        r13, r11, r2
  Str          r14, r13
  In           r15, r14, r8
  JumpIfTrue   r15, L1
  // from p in people
  Const        r16, []
  Const        r17, "__group__"
  Const        r18, true
  // group by p.city into g
  Move         r19, r13
  // from p in people
  Const        r20, "items"
  Move         r21, r16
  MakeMap      r22, 3, r17
  SetIndex     r8, r14, r22
L1:
  Index        r24, r8, r14
  Index        r25, r24, r20
  Append       r26, r25, r11
  SetIndex     r24, r20, r26
  Const        r27, 1
  AddInt       r7, r7, r27
  Jump         L2
L0:
  Const        r28, 0
  Const        r30, 0
L4:
  LessInt      r31, r28, r30
  JumpIfFalse  r31, L3
  Index        r33, r9, r28
  // having count(g) >= 4
  Count        r34, r33
  Const        r35, 4
  LessEqInt    r36, r35, r34
  JumpIfFalse  r36, L3
  // select { city: g.key, num: count(g) }
  Const        r37, "city"
  Index        r38, r33, r3
  Const        r39, "num"
  Count        r40, r33
  MakeMap      r43, 2, r37
  // from p in people
  Append       r1, r1, r43
  AddInt       r28, r28, r27
  Jump         L4
L3:
  // json(big)
  JSON         r1
  Return       r0
