func main (regs=60)
  // let people = [
  Const        r0, [{"city": "Paris", "name": "Alice"}, {"city": "Hanoi", "name": "Bob"}, {"city": "Paris", "name": "Charlie"}, {"city": "Hanoi", "name": "Diana"}, {"city": "Paris", "name": "Eve"}, {"city": "Hanoi", "name": "Frank"}, {"city": "Paris", "name": "George"}]
  Move         r1, r0
  // from p in people
  Const        r2, []
  // group by p.city into g
  Const        r3, "city"
  // select { city: g.key, num: count(g) }
  Const        r3, "city"
  Const        r4, "key"
  Const        r5, "num"
  // from p in people
  IterPrep     r6, r1
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r11, []
  Move         r10, r11
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  Move         r14, r13
  // group by p.city into g
  Const        r3, "city"
  Index        r15, r14, r3
  Str          r16, r15
  In           r17, r16, r9
  JumpIfTrue   r17, L1
  // from p in people
  Const        r11, []
  Const        r18, "__group__"
  Const        r19, true
  Const        r4, "key"
  // group by p.city into g
  Move         r20, r15
  // from p in people
  Const        r21, "items"
  Move         r22, r11
  Const        r23, "count"
  Const        r24, 0
  Move         r25, r18
  Move         r26, r19
  Move         r27, r4
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  MakeMap      r33, 4, r25
  SetIndex     r9, r16, r33
  Append       r34, r10, r33
  Move         r10, r34
L1:
  Const        r21, "items"
  Index        r35, r9, r16
  Index        r36, r35, r21
  Append       r37, r36, r13
  SetIndex     r35, r21, r37
  Const        r23, "count"
  Index        r38, r35, r23
  Const        r39, 1
  AddInt       r40, r38, r39
  SetIndex     r35, r23, r40
  Const        r39, 1
  AddInt       r8, r8, r39
  Jump         L2
L0:
  Const        r24, 0
  Move         r41, r24
  Len          r42, r10
L4:
  LessInt      r43, r41, r42
  JumpIfFalse  r43, L3
  Index        r44, r10, r41
  Move         r45, r44
  // having count(g) >= 4
  Const        r23, "count"
  Index        r46, r45, r23
  Const        r47, 4
  LessEq       r48, r47, r46
  JumpIfFalse  r48, L3
  // select { city: g.key, num: count(g) }
  Const        r49, "city"
  Const        r4, "key"
  Index        r50, r45, r4
  Const        r51, "num"
  Const        r23, "count"
  Index        r52, r45, r23
  Move         r53, r49
  Move         r54, r50
  Move         r55, r51
  Move         r56, r52
  MakeMap      r57, 2, r53
  // from p in people
  Append       r58, r2, r57
  Move         r2, r58
  Const        r39, 1
  AddInt       r41, r41, r39
  Jump         L4
L3:
  // let big =
  Move         r59, r2
  // json(big)
  JSON         r59
  Return       r0
