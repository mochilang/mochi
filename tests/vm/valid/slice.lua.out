-- Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
function __print(...)
    local n = select('#', ...)
    for ai = 1, n do
        if ai > 1 then io.write(' ') end
        local a = select(ai, ...)
        if type(a) == 'table' and (a[1] ~= nil or #a > 0) then
            for i = 1, #a do
                if i > 1 then io.write(' ') end
                io.write(__str(a[i]))
            end
        else
            io.write(__str(a))
        end
    end
    io.write('\n')
end
function __slice(obj, i, j)
    if i == nil then i = 0 end
    if type(obj) == 'string' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        return string.sub(obj, i+1, j)
    elseif type(obj) == 'table' then
        local len = #obj
        if j == nil then j = len end
        if i < 0 then i = len + i end
        if j < 0 then j = len + j end
        if i < 0 then i = 0 end
        if j > len then j = len end
        local out = {}
        for k = i+1, j do
            out[#out+1] = obj[k]
        end
        return out
    else
        return {}
    end
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            return '['..table.concat(parts, ' ')..']'
        else
            local keys = {}
            for k in pairs(v) do keys[#keys+1] = k end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do parts[#parts+1] = __str(k)..':'..__str(v[k]) end
            return '{'..table.concat(parts, ',')..'}'
        end
    else
        if v == nil then return '<nil>' end
        if type(v) == 'number' then
            if math.type and math.type(v) == 'float' then
                return string.format('%.16g', v)
            end
        end
        return tostring(v)
    end
end
__print(__slice({1, 2, 3}, 1, 3))
__print(__slice({1, 2, 3}, 0, 2))
__print(__slice("hello", 1, 4))
