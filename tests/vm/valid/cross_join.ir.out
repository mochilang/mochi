func main (regs=68)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  Const        r7, 0
L3:
  Less         r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  // from c in customers
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L2:
  Less         r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r15, r11, r13
  Move         r16, r15
  // orderId: o.id,
  Const        r18, "id"
  Index        r19, r10, r18
  // orderCustomerId: o.customerId,
  Const        r21, "customerId"
  Index        r22, r10, r21
  // pairedCustomerName: c.name,
  Const        r24, "name"
  Index        r25, r16, r24
  // orderTotal: o.total
  Const        r27, "total"
  Index        r28, r10, r27
  // orderId: o.id,
  Const        r29, "orderId"
  Move         r30, r19
  // orderCustomerId: o.customerId,
  Const        r31, "orderCustomerId"
  Move         r32, r22
  // pairedCustomerName: c.name,
  Const        r33, "pairedCustomerName"
  Move         r34, r25
  // orderTotal: o.total
  Const        r35, "orderTotal"
  Move         r36, r28
  // select {
  MakeMap      r37, 4, r29
  // let result = from o in orders
  Append       r38, r4, r37
  Move         r4, r38
  Const        r39, 1
  // from c in customers
  AddInt       r13, r13, r39
  Jump         L2
L1:
  // let result = from o in orders
  Jump         L3
L0:
  Move         r40, r4
  // print("--- Cross Join: All order-customer pairs ---")
  Const        r41, "--- Cross Join: All order-customer pairs ---"
  Print        r41
  // for entry in result {
  IterPrep     r42, r40
  Len          r43, r42
  Const        r44, 0
L5:
  Less         r45, r44, r43
  JumpIfFalse  r45, L4
  Index        r46, r42, r44
  Move         r47, r46
  // print("Order", entry.orderId,
  Const        r48, "Order"
  Const        r57, "orderId"
  Index        r58, r47, r57
  Move         r49, r58
  // "(customerId:", entry.orderCustomerId,
  Const        r50, "(customerId:"
  Const        r60, "orderCustomerId"
  Index        r61, r47, r60
  Move         r51, r61
  // ", total: $", entry.orderTotal,
  Const        r52, ", total: $"
  Const        r63, "orderTotal"
  Index        r64, r47, r63
  Move         r53, r64
  // ") paired with", entry.pairedCustomerName)
  Const        r54, ") paired with"
  Const        r66, "pairedCustomerName"
  Index        r67, r47, r66
  Move         r55, r67
  // print("Order", entry.orderId,
  PrintN       r48, 8, r48
  // for entry in result {
  AddInt       r44, r44, r39
  Jump         L5
L4:
  Return       r0
