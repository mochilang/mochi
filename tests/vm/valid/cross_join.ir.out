func main (regs=60)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}]
  // let result = from o in orders
  Const        r2, []
  // orderId: o.id,
  Const        r3, "orderId"
  Const        r4, "id"
  // orderCustomerId: o.customerId,
  Const        r5, "orderCustomerId"
  Const        r6, "customerId"
  // pairedCustomerName: c.name,
  Const        r7, "pairedCustomerName"
  Const        r8, "name"
  // orderTotal: o.total
  Const        r9, "orderTotal"
  Const        r10, "total"
  // let result = from o in orders
  IterPrep     r11, r1
  Len          r12, r11
  Const        r14, 0
  Move         r13, r14
L3:
  LessInt      r15, r13, r12
  JumpIfFalse  r15, L0
  // from c in customers
  IterPrep     r18, r0
  Len          r19, r18
L2:
  LessInt      r21, r14, r19
  JumpIfFalse  r21, L1
  // select {
  MakeMap      r32, 4, r3
  // let result = from o in orders
  Append       r2, r2, r32
  // from c in customers
  Const        r34, 1
  Jump         L2
L1:
  // let result = from o in orders
  AddInt       r13, r13, r34
  Jump         L3
L0:
  // print("--- Cross Join: All order-customer pairs ---")
  Const        r35, "--- Cross Join: All order-customer pairs ---"
  Print        r35
  // for entry in result {
  IterPrep     r36, r2
  Len          r37, r36
  Const        r38, 0
L5:
  Less         r39, r38, r37
  JumpIfFalse  r39, L4
  Index        r41, r36, r38
  // print("Order", entry.orderId,
  Const        r42, "Order"
  Index        r43, r41, r3
  // "(customerId:", entry.orderCustomerId,
  Const        r44, "(customerId:"
  Index        r45, r41, r5
  // ", total: $", entry.orderTotal,
  Const        r46, ", total: $"
  Index        r47, r41, r9
  // ") paired with", entry.pairedCustomerName)
  Const        r48, ") paired with"
  Index        r49, r41, r7
  // print("Order", entry.orderId,
  PrintN       r42, 8, r42
  // for entry in result {
  Const        r58, 1
  Add          r38, r38, r58
  Jump         L5
L4:
  Return       r0
