fun _cast_struct(ctor, m) {
  (fun(fields) => apply(ctor, map(#, get(m, %), fields)))(some_to_>(ctor, meta, arglists, first, map(keyword)) || keys(m))
}
fun _cast_struct_list(ctor, xs) {
  mapv(#, _cast_struct(ctor, %), xs)
}
fun Person(name, age, status) {
  {:__name
  "Person"
  name
  name
  age
  age
  status
  status}
}
fun test_update_adult_status() {
  assert(people == {:__name("Person", name, "Alice", age, 17, status, "minor", }, {:__name, "Person", name, "Bob", age, 26, status, "adult", }, {:__name, "Person", name, "Charlie", age, 19, status, "adult", }, {:__name, "Person", name, "Diana", age, 16, status, "minor", }), "expect failed")
}
fun main() {
  let people = _cast_struct_list(#'Person, {:__name("Person", name, "Alice", age, 17, status, "minor", }, {:__name, "Person", name, "Bob", age, 25, status, "unknown", }, {:__name, "Person", name, "Charlie", age, 18, status, "unknown", }, {:__name, "Person", name, "Diana", age, 16, status, "minor", }))
  let people = vec(map(fn(_tmp0(), (fun(name) => if age >= 18 { assoc(assoc(_tmp0, status, "adult"), age, age + 1) } else { _tmp0 })([name, _tmp0])), people))
  print("ok")
  test_update_adult_status()
}
main()
