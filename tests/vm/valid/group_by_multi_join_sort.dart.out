import 'dart:io';
import 'dart:convert';

var nation = [{'n_nationkey': 1, 'n_name': 'BRAZIL'}];

var customer = [{'c_custkey': 1, 'c_name': 'Alice', 'c_acctbal': 100, 'c_nationkey': 1, 'c_address': '123 St', 'c_phone': '123-456', 'c_comment': 'Loyal'}];

var orders = [{'o_orderkey': 1000, 'o_custkey': 1, 'o_orderdate': '1993-10-15'}, {'o_orderkey': 2000, 'o_custkey': 1, 'o_orderdate': '1994-01-02'}];

var lineitem = [{'l_orderkey': 1000, 'l_returnflag': 'R', 'l_extendedprice': 1000, 'l_discount': 0.1}, {'l_orderkey': 2000, 'l_returnflag': 'N', 'l_extendedprice': 500, 'l_discount': 0}];

var start_date = '1993-10-01';

var end_date = '1994-01-01';

var result = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var c in customer) {
    for (var o in orders) {
      if (!(o['o_custkey'] == c['c_custkey'])) continue;
      for (var l in lineitem) {
        if (!(l['l_orderkey'] == o['o_orderkey'])) continue;
        for (var n in nation) {
          if (!(n['n_nationkey'] == c['c_nationkey'])) continue;
          if (!(o['o_orderdate'].toString().compareTo(start_date) >= 0 && o['o_orderdate'].toString().compareTo(end_date) < 0 && l['l_returnflag'] == 'R')) continue;
          var _k3 = {'c_custkey': c['c_custkey'], 'c_name': c['c_name'], 'c_acctbal': c['c_acctbal'], 'c_address': c['c_address'], 'c_phone': c['c_phone'], 'c_comment': c['c_comment'], 'n_name': n['n_name']};
          var _k3_s = jsonEncode(_k3);
          _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'c': c, 'o': o, 'l': l, 'n': n});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add([-_sum(g.map((x) => x['l']['l_extendedprice'] * (1 - x['l']['l_discount']))), {'c_custkey': _k3['c_custkey'], 'c_name': _k3['c_name'], 'revenue': _sum(g.map((x) => x['l']['l_extendedprice'] * (1 - x['l']['l_discount']))), 'c_acctbal': _k3['c_acctbal'], 'n_name': _k3['n_name'], 'c_address': _k3['c_address'], 'c_phone': _k3['c_phone'], 'c_comment': _k3['c_comment']}]);
  }
  _q0.sort((a,b) => (a[0] as Comparable).compareTo(b[0]));
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(result);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
