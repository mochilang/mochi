List<Map<String, dynamic>> nation = [{"n_nationkey": 1, "n_name": "BRAZIL"}];

List<Map<String, dynamic>> customer = [{"c_custkey": 1, "c_name": "Alice", "c_acctbal": 100, "c_nationkey": 1, "c_address": "123 St", "c_phone": "123-456", "c_comment": "Loyal"}];

List<Map<String, dynamic>> orders = [{"o_orderkey": 1000, "o_custkey": 1, "o_orderdate": "1993-10-15"}, {"o_orderkey": 2000, "o_custkey": 1, "o_orderdate": "1994-01-02"}];

List<Map<String, dynamic>> lineitem = [{"l_orderkey": 1000, "l_returnflag": "R", "l_extendedprice": 1000, "l_discount": 0.1}, {"l_orderkey": 2000, "l_returnflag": "N", "l_extendedprice": 500, "l_discount": 0}];

String start_date = "1993-10-01";

String end_date = "1994-01-01";

List<Map<String, dynamic>> result = (() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var c in customer) {
    for (var o in orders) {
      if (!(_equal(o['o_custkey'], c['c_custkey']))) {
        continue;
      }
      for (var l in lineitem) {
        if (!(_equal(l['l_orderkey'], o['o_orderkey']))) {
          continue;
        }
        for (var n in nation) {
          if (!(_equal(n['n_nationkey'], c['c_nationkey']))) {
            continue;
          }
          if (!((((o['o_orderdate'].compareTo(start_date) >= 0) && (o['o_orderdate'].compareTo(end_date) < 0)) && _equal(l['l_returnflag'], "R")))) {
            continue;
          }
          var key = {"c_custkey": c['c_custkey'], "c_name": c['c_name'], "c_acctbal": c['c_acctbal'], "c_address": c['c_address'], "c_phone": c['c_phone'], "c_comment": c['c_comment'], "n_name": n['n_name']};
          var ks = key.toString();
          var g = groups[ks];
          if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
          }
          g.Items.add(c);
        }
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  items.sort((gA, gB) {
    var g = gA;
    var keyA = -_sum((() {
  var _res = [];
  for (var x in g) {
    _res.add((x.l.l_extendedprice * ((1 - x.l.l_discount))));
  }
  return _res;
})());
    g = gB;
    var keyB = -_sum((() {
  var _res = [];
  for (var x in g) {
    _res.add((x.l.l_extendedprice * ((1 - x.l.l_discount))));
  }
  return _res;
})());
    return Comparable.compare(keyA, keyB);
  });
  var _res = [];
  for (var g in items) {
    _res.add({"c_custkey": g.key.c_custkey, "c_name": g.key.c_name, "revenue": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add((x.l.l_extendedprice * ((1 - x.l.l_discount))));
  }
  return _res;
})()), "c_acctbal": g.key.c_acctbal, "n_name": g.key.n_name, "c_address": g.key.c_address, "c_phone": g.key.c_phone, "c_comment": g.key.c_comment});
  }
  return _res;
})();

void main() {
  print(result);
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


