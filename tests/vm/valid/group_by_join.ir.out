func main (regs=107)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r2
  Len          r8, r7
  Const        r9, 0
  Less         r10, r9, r8
L5:
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
L4:
  Index        r17, r13, r15
  Const        r19, "customerId"
  Index        r20, r11, r19
  Const        r21, "id"
  Index        r22, r17, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // let stats = from o in orders
  Const        r24, "o"
  Move         r25, r11
  Const        r26, "c"
  Move         r27, r17
  MakeMap      r28, 2, r24
  // group by c.name into g
  Const        r29, "name"
  Index        r30, r17, r29
  Str          r31, r30
  In           r32, r31, r5
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from o in orders
  Const        r38, "items"
  Move         r39, r33
  MakeMap      r40, 3, r34
  SetIndex     r5, r31, r40
  Append       r41, r6, r40
  Const        r42, "items"
  Index        r43, r5, r31
  Index        r44, r43, r42
  Append       r45, r44, r28
L3:
  SetIndex     r43, r42, r45
  // join from c in customers on o.customerId == c.id
  Const        r46, 1
  Add          r47, r15, r46
  Jump         L4
  // let stats = from o in orders
  Const        r48, 1
L2:
  Add          r49, r9, r48
  Jump         L5
  Const        r50, 0
  Len          r51, r41
L1:
  Less         r52, r50, r51
  JumpIfFalse  r52, L6
  Index        r53, r41, r50
  // name: g.key,
  Const        r55, "name"
L0:
  Const        r56, "key"
  Index        r57, r53, r56
L7:
  // count: count(g)
  Const        r58, "count"
  Count        r59, r53
  // name: g.key,
  Move         r60, r55
  Move         r61, r57
  // count: count(g)
  Move         r62, r58
  Move         r63, r59
  // select {
  MakeMap      r64, 2, r60
  // let stats = from o in orders
  Append       r65, r4, r64
  Const        r66, 1
  Add          r67, r50, r66
  Jump         L7
  // print("--- Orders per customer ---")
  Const        r69, "--- Orders per customer ---"
  Print        r69
  // for s in stats {
  IterPrep     r70, r65
  Len          r71, r70
  Const        r72, 0
  Less         r73, r72, r71
  JumpIfFalse  r73, L8
  Index        r74, r70, r72
  // print(s.name, "orders:", s.count)
  Const        r79, "name"
L6:
  Index        r80, r74, r79
  Move         r76, r80
  Const        r81, "orders:"
  Move         r77, r81
  Const        r82, "count"
  Index        r83, r74, r82
L9:
  Move         r78, r83
  PrintN       r76, 3, r76
  // for s in stats {
  Const        r84, 1
  Add          r85, r72, r84
  Jump         L9
  Return       r0
