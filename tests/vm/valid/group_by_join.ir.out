func main (regs=88)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  Move         r3, r2
  // let stats = from o in orders
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r3
  Len          r8, r7
  Const        r9, 0
L5:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r19, "customerId"
  Index        r20, r12, r19
  Const        r21, "id"
  Index        r22, r18, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // let stats = from o in orders
  Const        r24, "o"
  Move         r25, r12
  Const        r26, "c"
  Move         r27, r18
  MakeMap      r28, 2, r24
  // group by c.name into g
  Const        r29, "name"
  Index        r30, r18, r29
  Str          r31, r30
  In           r32, r31, r5
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from o in orders
  Const        r38, "items"
  Move         r39, r33
  // group by c.name into g
  Const        r40, "name"
  Move         r41, r30
  // let stats = from o in orders
  MakeMap      r42, 4, r34
  SetIndex     r5, r31, r42
  Append       r43, r6, r42
  Move         r6, r43
L3:
  Const        r44, "items"
  Index        r45, r5, r31
  Index        r46, r45, r44
  Append       r47, r46, r28
  SetIndex     r45, r44, r47
L2:
  // join from c in customers on o.customerId == c.id
  Const        r48, 1
  Add          r49, r15, r48
  Move         r15, r49
  Jump         L4
L1:
  // let stats = from o in orders
  Const        r50, 1
  Add          r51, r9, r50
  Move         r9, r51
  Jump         L5
L0:
  Const        r52, 0
  Len          r53, r6
L7:
  Less         r54, r52, r53
  JumpIfFalse  r54, L6
  Index        r55, r6, r52
  Move         r56, r55
  // name: g.key,
  Const        r57, "name"
  Const        r58, "key"
  Index        r59, r56, r58
  // count: count(g)
  Const        r60, "count"
  Count        r61, r56
  // name: g.key,
  Move         r62, r57
  Move         r63, r59
  // count: count(g)
  Move         r64, r60
  Move         r65, r61
  // select {
  MakeMap      r66, 2, r62
  // let stats = from o in orders
  Append       r67, r4, r66
  Move         r4, r67
  Const        r68, 1
  Add          r69, r52, r68
  Move         r52, r69
  Jump         L7
L6:
  Move         r70, r4
  // print("--- Orders per customer ---")
  Const        r71, "--- Orders per customer ---"
  Print        r71
  // for s in stats {
  IterPrep     r72, r70
  Len          r73, r72
  Const        r74, 0
L9:
  Less         r75, r74, r73
  JumpIfFalse  r75, L8
  Index        r76, r72, r74
  Move         r77, r76
  // print(s.name, "orders:", s.count)
  Const        r81, "name"
  Index        r82, r77, r81
  Move         r78, r82
  Const        r83, "orders:"
  Move         r79, r83
  Const        r84, "count"
  Index        r85, r77, r84
  Move         r80, r85
  PrintN       r78, 3, r78
  // for s in stats {
  Const        r86, 1
  Add          r87, r74, r86
  Move         r74, r87
  Jump         L9
L8:
  Return       r0

