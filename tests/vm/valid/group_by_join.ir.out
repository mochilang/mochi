func main (regs=84)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r3
  Len          r8, r7
  Const        r9, 0
L5:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r12, r7, r9
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r18, r13, r15
  Const        r19, "customerId"
  Index        r20, r12, r19
  Const        r21, "id"
  Index        r22, r18, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // let stats = from o in orders
  Const        r24, "o"
  Move         r25, r12
  Const        r26, "c"
  Move         r27, r18
  MakeMap      r28, 2, r24
  // group by c.name into g
  Const        r29, "name"
  Index        r30, r18, r29
  Str          r31, r30
  In           r32, r31, r5
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from o in orders
  Const        r38, "items"
  Move         r39, r33
  MakeMap      r40, 3, r34
  SetIndex     r5, r31, r40
  Append       r6, r6, r40
L3:
  Const        r42, "items"
  Index        r43, r5, r31
  Index        r44, r43, r42
  Append       r45, r44, r28
  SetIndex     r43, r42, r45
L2:
  // join from c in customers on o.customerId == c.id
  Jump         L4
L1:
  // let stats = from o in orders
  Jump         L5
L0:
  Const        r50, 0
  Len          r51, r6
L7:
  Less         r52, r50, r51
  JumpIfFalse  r52, L6
  Index        r54, r6, r50
  // name: g.key,
  Const        r55, "name"
  Const        r56, "key"
  Index        r57, r54, r56
  // count: count(g)
  Const        r58, "count"
  // select {
  MakeMap      r62, 2, r55
  // let stats = from o in orders
  Append       r4, r4, r62
  Const        r64, 1
  Add          r50, r50, r64
  Jump         L7
L6:
  Move         r66, r4
  // print("--- Orders per customer ---")
  Const        r67, "--- Orders per customer ---"
  Print        r67
  // for s in stats {
  IterPrep     r68, r66
  Len          r69, r68
  Const        r70, 0
L9:
  Less         r71, r70, r69
  JumpIfFalse  r71, L8
  Index        r73, r68, r70
  // print(s.name, "orders:", s.count)
  Const        r77, "name"
  Index        r74, r73, r77
  Const        r75, "orders:"
  Const        r80, "count"
  Index        r76, r73, r80
  PrintN       r74, 3, r74
  // for s in stats {
  Const        r82, 1
  Add          r70, r70, r82
  Jump         L9
L8:
  Return       r0
