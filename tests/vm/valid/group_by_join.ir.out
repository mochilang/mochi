func main (regs=79)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r3
  Len          r8, r7
  Const        r9, 0
L5:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r19, "customerId"
  Index        r20, r12, r19
  Const        r21, "id"
  Index        r22, r18, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // let stats = from o in orders
  Const        r24, "o"
  Move         r25, r12
  Const        r26, "c"
  Move         r27, r18
  MakeMap      r28, 2, r24
  // group by c.name into g
  Const        r29, "name"
  Index        r30, r18, r29
  Str          r31, r30
  In           r32, r31, r5
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from o in orders
  Const        r38, "items"
  Const        r39, []
  MakeMap      r40, 3, r34
  SetIndex     r5, r31, r40
  Append       r41, r6, r40
  Move         r6, r41
L3:
  Const        r42, "items"
  Index        r43, r5, r31
  Index        r44, r43, r42
  Append       r45, r44, r28
  SetIndex     r43, r42, r45
L2:
  Const        r46, 1
  // join from c in customers on o.customerId == c.id
  AddInt       r15, r15, r46
  Jump         L4
L1:
  // let stats = from o in orders
  Jump         L5
L0:
  Const        r47, 0
  Len          r48, r6
L7:
  Less         r49, r47, r48
  JumpIfFalse  r49, L6
  Index        r50, r6, r47
  Move         r51, r50
  // name: g.key,
  Const        r53, "key"
  Index        r54, r51, r53
  // count: count(g)
  Count        r56, r51
  // name: g.key,
  Const        r57, "name"
  Move         r58, r54
  // count: count(g)
  Const        r59, "count"
  Move         r60, r56
  // select {
  MakeMap      r61, 2, r57
  // let stats = from o in orders
  Append       r62, r4, r61
  Move         r4, r62
  AddInt       r47, r47, r46
  Jump         L7
L6:
  Move         r63, r4
  // print("--- Orders per customer ---")
  Const        r64, "--- Orders per customer ---"
  Print        r64
  // for s in stats {
  IterPrep     r65, r63
  Len          r66, r65
  Const        r67, 0
L9:
  Less         r68, r67, r66
  JumpIfFalse  r68, L8
  Index        r69, r65, r67
  Move         r70, r69
  // print(s.name, "orders:", s.count)
  Const        r74, "name"
  Index        r75, r70, r74
  Move         r71, r75
  Const        r72, "orders:"
  Const        r77, "count"
  Index        r78, r70, r77
  Move         r73, r78
  PrintN       r71, 3, r71
  // for s in stats {
  AddInt       r67, r67, r46
  Jump         L9
L8:
  Return       r0
