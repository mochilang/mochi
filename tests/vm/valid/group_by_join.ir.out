func main (regs=90)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
  // let stats = from o in orders
  MakeMap      r6, 0, r0
  Const        r7, []
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
L5:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r13, r8, r10
  // join from c in customers on o.customerId == c.id
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L4:
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L1
  Index        r19, r14, r16
  Const        r20, "customerId"
  Index        r21, r13, r20
  Const        r22, "id"
  Index        r23, r19, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from o in orders
  Const        r25, "o"
  Move         r26, r13
  Const        r27, "c"
  Move         r28, r19
  MakeMap      r29, 2, r25
  // group by c.name into g
  Index        r30, r19, r3
  Str          r31, r30
  In           r32, r31, r6
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from o in orders
  Const        r38, "items"
  Move         r39, r33
  Const        r40, "count"
  Const        r41, 0
  Move         r42, r34
  Move         r43, r35
  Move         r44, r36
  Move         r45, r37
  Move         r46, r38
  Move         r47, r39
  Move         r48, r40
  Move         r49, r41
  MakeMap      r50, 4, r42
  SetIndex     r6, r31, r50
  Append       r7, r7, r50
L3:
  Const        r52, "items"
  Index        r53, r6, r31
  Index        r54, r53, r52
  Append       r55, r54, r29
  SetIndex     r53, r52, r55
  Index        r56, r53, r5
  Const        r57, 1
  AddInt       r58, r56, r57
  SetIndex     r53, r5, r58
L2:
  // join from c in customers on o.customerId == c.id
  AddInt       r16, r16, r57
  Jump         L4
L1:
  // let stats = from o in orders
  AddInt       r10, r10, r57
  Jump         L5
L0:
  Const        r59, 0
  Len          r61, r7
L7:
  LessInt      r62, r59, r61
  JumpIfFalse  r62, L6
  Index        r64, r7, r59
  // name: g.key,
  Const        r65, "name"
  Index        r66, r64, r4
  // count: count(g)
  Const        r67, "count"
  Index        r68, r64, r5
  // name: g.key,
  Move         r69, r65
  Move         r70, r66
  // count: count(g)
  Move         r71, r67
  Move         r72, r68
  // select {
  MakeMap      r73, 2, r69
  // let stats = from o in orders
  Append       r2, r2, r73
  AddInt       r59, r59, r57
  Jump         L7
L6:
  // print("--- Orders per customer ---")
  Const        r75, "--- Orders per customer ---"
  Print        r75
  // for s in stats {
  IterPrep     r76, r2
  Len          r77, r76
  Const        r78, 0
L9:
  Less         r79, r78, r77
  JumpIfFalse  r79, L8
  Index        r81, r76, r78
  // print(s.name, "orders:", s.count)
  Index        r82, r81, r3
  Const        r83, "orders:"
  Index        r84, r81, r5
  PrintN       r82, 3, r82
  // for s in stats {
  Const        r88, 1
  Add          r78, r78, r88
  Jump         L9
L8:
  Return       r0
