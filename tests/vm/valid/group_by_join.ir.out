func main (regs=84)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
  // let stats = from o in orders
  MakeMap      r6, 0, r0
  Const        r7, []
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
L5:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r13, r8, r10
  // join from c in customers on o.customerId == c.id
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L4:
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L1
  Index        r19, r14, r16
  Const        r20, "customerId"
  Index        r21, r13, r20
  Const        r22, "id"
  Index        r23, r19, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from o in orders
  Const        r25, "o"
  Move         r26, r13
  Const        r27, "c"
  Move         r28, r19
  MakeMap      r29, 2, r25
  // group by c.name into g
  Index        r30, r19, r3
  Str          r31, r30
  In           r32, r31, r6
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  // group by c.name into g
  Move         r36, r30
  // let stats = from o in orders
  Const        r37, "items"
  Move         r38, r33
  Const        r39, 0
  Move         r40, r34
  Move         r41, r35
  Move         r42, r4
  Move         r43, r36
  Move         r44, r37
  Move         r45, r38
  Move         r46, r5
  Move         r47, r39
  MakeMap      r48, 4, r40
  SetIndex     r6, r31, r48
  Append       r7, r7, r48
L3:
  Index        r50, r6, r31
  Index        r51, r50, r37
  Append       r52, r51, r29
  SetIndex     r50, r37, r52
  Index        r53, r50, r5
  Const        r54, 1
  AddInt       r55, r53, r54
  SetIndex     r50, r5, r55
L2:
  // join from c in customers on o.customerId == c.id
  AddInt       r16, r16, r54
  Jump         L4
L1:
  // let stats = from o in orders
  AddInt       r10, r10, r54
  Jump         L5
L0:
  Move         r56, r39
  Len          r57, r7
L7:
  LessInt      r58, r56, r57
  JumpIfFalse  r58, L6
  Index        r60, r7, r56
  // name: g.key,
  Const        r61, "name"
  Index        r62, r60, r4
  // count: count(g)
  Const        r63, "count"
  Index        r64, r60, r5
  // select {
  MakeMap      r67, 2, r61
  // let stats = from o in orders
  Append       r2, r2, r67
  AddInt       r56, r56, r54
  Jump         L7
L6:
  // print("--- Orders per customer ---")
  Const        r69, "--- Orders per customer ---"
  Print        r69
  // for s in stats {
  IterPrep     r70, r2
  Len          r71, r70
  Const        r72, 0
L9:
  Less         r73, r72, r71
  JumpIfFalse  r73, L8
  Index        r75, r70, r72
  // print(s.name, "orders:", s.count)
  Index        r76, r75, r3
  Const        r77, "orders:"
  Index        r78, r75, r5
  PrintN       r76, 3, r76
  // for s in stats {
  Const        r82, 1
  Add          r72, r72, r82
  Jump         L9
L8:
  Return       r0
