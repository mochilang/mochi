func main (regs=72)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
  // let stats = from o in orders
  MakeMap      r6, 0, r0
  Const        r7, []
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
L5:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r13, r8, r10
  // join from c in customers on o.customerId == c.id
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L4:
  Less         r17, r16, r15
  JumpIfFalse  r17, L1
  Index        r19, r14, r16
  Const        r20, "customerId"
  Index        r21, r13, r20
  Const        r22, "id"
  Index        r23, r19, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from o in orders
  Const        r25, "o"
  Move         r26, r13
  Const        r27, "c"
  Move         r28, r19
  MakeMap      r29, 2, r25
  // group by c.name into g
  Index        r30, r19, r3
  Str          r31, r30
  In           r32, r31, r6
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  // group by c.name into g
  Move         r36, r30
  // let stats = from o in orders
  Const        r37, "items"
  Move         r38, r33
  MakeMap      r39, 3, r34
  SetIndex     r6, r31, r39
  Append       r7, r7, r39
L3:
  Index        r41, r6, r31
  Index        r42, r41, r37
  Append       r43, r42, r29
  SetIndex     r41, r37, r43
L2:
  // join from c in customers on o.customerId == c.id
  Const        r44, 1
  AddInt       r16, r16, r44
  Jump         L4
L1:
  // let stats = from o in orders
  AddInt       r10, r10, r44
  Jump         L5
L0:
  Const        r45, 0
  Len          r47, r7
L7:
  LessInt      r48, r45, r47
  JumpIfFalse  r48, L6
  // select {
  MakeMap      r55, 2, r3
  // let stats = from o in orders
  Append       r2, r2, r55
  AddInt       r45, r45, r44
  Jump         L7
L6:
  // print("--- Orders per customer ---")
  Const        r57, "--- Orders per customer ---"
  Print        r57
  // for s in stats {
  IterPrep     r58, r2
  Len          r59, r58
  Const        r60, 0
L9:
  Less         r61, r60, r59
  JumpIfFalse  r61, L8
  Index        r63, r58, r60
  // print(s.name, "orders:", s.count)
  Index        r64, r63, r3
  Const        r65, "orders:"
  Index        r66, r63, r5
  PrintN       r64, 3, r64
  // for s in stats {
  Const        r70, 1
  Add          r60, r60, r70
  Jump         L9
L8:
  Return       r0
