func main (regs=24)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
L1:
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
L3:
  // let stats = from o in orders
  MakeMap      r6, 0, r0
L2:
  Move         r7, r2
  Const        r8, 0
  IterPrep     r9, r1
  Len          r1, r9
L4:
  Move         r10, r8
  LessInt      r11, r10, r1
  JumpIfFalse  r11, L0
L0:
  Index        r1, r9, r10
  // join from c in customers on o.customerId == c.id
  IterPrep     r9, r0
  Len          r12, r9
  Move         r13, r8
  LessInt      r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r12, r9, r13
  Const        r9, "customerId"
  Index        r15, r1, r9
  Const        r9, "id"
  Index        r16, r12, r9
  Equal        r9, r15, r16
  JumpIfFalse  r9, L2
  // let stats = from o in orders
  Const        r9, "o"
  Move         r16, r1
  Const        r1, "c"
  Move         r15, r12
  MakeMap      r17, 2, r9
  // group by c.name into g
  Index        r15, r12, r3
  Str          r12, r15
  In           r1, r12, r6
  JumpIfTrue   r1, L3
  // let stats = from o in orders
  Move         r1, r2
  Const        r16, "__group__"
  Const        r9, true
  Move         r18, r4
  // group by c.name into g
  Move         r19, r15
  // let stats = from o in orders
  Const        r15, "items"
  Move         r20, r1
  Move         r1, r5
  Move         r21, r13
  Move         r22, r16
  Move         r16, r9
  Move         r9, r18
  Move         r18, r19
  Move         r19, r15
  Move         r23, r20
  Move         r20, r1
  Move         r1, r21
  MakeMap      r21, 4, r22
  SetIndex     r6, r12, r8
  Append       r7, r7, r21
  Const        r21, 1
  AddInt       r8, r8, r21
  Move         r8, r15
  Index        r15, r6, r12
  Index        r12, r7, r15
  Index        r15, r12, r8
  Append       r6, r15, r17
  SetIndex     r12, r8, r6
  Index        r6, r12, r5
  AddInt       r15, r6, r21
  SetIndex     r12, r5, r15
  // join from c in customers on o.customerId == c.id
  AddInt       r13, r13, r21
  Jump         L0
  // let stats = from o in orders
  AddInt       r10, r10, r21
  Jump         L4
  Const        r15, 0
  Move         r6, r15
  Len          r12, r7
  LessInt      r14, r6, r12
  JumpIfFalse  r14, L5
  Index        r14, r7, r6
  // name: g.key,
  Move         r7, r3
  Index        r12, r14, r4
  // count: count(g)
  Move         r4, r5
  Index        r13, r14, r5
  // name: g.key,
  Move         r14, r7
  Move         r7, r12
  // count: count(g)
  Move         r12, r4
  Move         r4, r13
  // select {
  MakeMap      r13, 2, r14
  // let stats = from o in orders
  Append       r2, r2, r13
  AddInt       r6, r6, r21
  Jump         L1
L5:
  // print("--- Orders per customer ---")
  Const        r13, "--- Orders per customer ---"
  Print        r13
  // for s in stats {
  IterPrep     r13, r2
  Len          r2, r13
  Move         r4, r15
L7:
  Less         r15, r4, r2
  JumpIfFalse  r15, L6
  Index        r15, r13, r4
  // print(s.name, "orders:", s.count)
  Index        r13, r15, r3
  Const        r3, "orders:"
  Index        r2, r15, r5
  PrintN       r13, 3, r13
  // for s in stats {
  Add          r4, r4, r21
  Jump         L7
L6:
  Return       r0
