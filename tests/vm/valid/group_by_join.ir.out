func main (regs=76)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
  // let stats = from o in orders
  MakeMap      r6, 0, r0
  Const        r7, []
  IterPrep     r8, r1
  Len          r9, r8
  Const        r10, 0
L5:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
  Index        r13, r8, r10
  // join from c in customers on o.customerId == c.id
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L4:
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L1
  Index        r19, r14, r16
  Const        r20, "customerId"
  Index        r21, r13, r20
  Const        r22, "id"
  Index        r23, r19, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from o in orders
  Const        r25, "o"
  Move         r26, r13
  Const        r27, "c"
  Move         r28, r19
  MakeMap      r29, 2, r25
  // group by c.name into g
  Index        r30, r19, r3
  Str          r31, r30
  In           r32, r31, r6
  JumpIfTrue   r32, L3
  // let stats = from o in orders
  Const        r33, []
  Const        r34, "__group__"
  Const        r35, true
  // group by c.name into g
  Move         r36, r30
  // let stats = from o in orders
  Const        r37, "items"
  Move         r38, r33
  Const        r39, 0
  MakeMap      r40, 4, r34
  SetIndex     r6, r31, r40
  Append       r41, r7, r40
  Move         r7, r41
L3:
  Index        r42, r6, r31
  Index        r43, r42, r37
  Append       r44, r43, r29
  SetIndex     r42, r37, r44
  Index        r45, r42, r5
  Const        r46, 1
  AddInt       r47, r45, r46
  SetIndex     r42, r5, r47
L2:
  // join from c in customers on o.customerId == c.id
  AddInt       r16, r16, r46
  Jump         L4
L1:
  // let stats = from o in orders
  AddInt       r10, r10, r46
  Jump         L5
L0:
  Move         r48, r39
  Len          r49, r7
L7:
  LessInt      r50, r48, r49
  JumpIfFalse  r50, L6
  Index        r52, r7, r48
  // name: g.key,
  Const        r53, "name"
  Index        r54, r52, r4
  // count: count(g)
  Const        r55, "count"
  Index        r56, r52, r5
  // select {
  MakeMap      r59, 2, r53
  // let stats = from o in orders
  Append       r2, r2, r59
  AddInt       r48, r48, r46
  Jump         L7
L6:
  // print("--- Orders per customer ---")
  Const        r61, "--- Orders per customer ---"
  Print        r61
  // for s in stats {
  IterPrep     r62, r2
  Len          r63, r62
  Const        r64, 0
L9:
  Less         r65, r64, r63
  JumpIfFalse  r65, L8
  Index        r67, r62, r64
  // print(s.name, "orders:", s.count)
  Index        r68, r67, r3
  Const        r69, "orders:"
  Index        r70, r67, r5
  PrintN       r68, 3, r68
  // for s in stats {
  Const        r74, 1
  Add          r64, r64, r74
  Jump         L9
L8:
  Return       r0
