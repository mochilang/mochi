func main (regs=89)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
  // let stats = from o in orders
  MakeMap      r6, 0, r0
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
L5:
  LessInt      r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r12, r7, r9
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r0
  Len          r14, r13
  Move         r15, r9
L4:
  LessInt      r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r18, r13, r15
  Const        r19, "customerId"
  Index        r20, r12, r19
  Const        r21, "id"
  Index        r22, r18, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  // let stats = from o in orders
  Const        r24, "o"
  Move         r25, r12
  Const        r26, "c"
  Move         r27, r18
  MakeMap      r28, 2, r24
  // group by c.name into g
  Index        r29, r18, r3
  Str          r30, r29
  In           r31, r30, r6
  JumpIfTrue   r31, L3
  // let stats = from o in orders
  Move         r32, r2
  Const        r33, "__group__"
  Const        r34, true
  Move         r35, r4
  // group by c.name into g
  Move         r36, r29
  // let stats = from o in orders
  Const        r37, "items"
  Move         r38, r32
  Move         r39, r5
  Move         r40, r9
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  Move         r44, r36
  Move         r45, r37
  Move         r46, r38
  Move         r47, r39
  Move         r48, r40
  MakeMap      r49, 4, r41
  SetIndex     r6, r30, r49
L3:
  Move         r50, r37
  Index        r51, r6, r30
  Index        r52, r51, r50
  Append       r53, r52, r28
  SetIndex     r51, r50, r53
  Index        r54, r51, r5
  Const        r55, 1
  AddInt       r56, r54, r55
  SetIndex     r51, r5, r56
L2:
  // join from c in customers on o.customerId == c.id
  AddInt       r15, r15, r55
  Jump         L4
L1:
  // let stats = from o in orders
  AddInt       r9, r9, r55
  Jump         L5
L0:
  Values       57,6,0,0
  Move         r58, r40
  Len          r60, r57
L7:
  LessInt      r61, r58, r60
  JumpIfFalse  r61, L6
  Index        r63, r57, r58
  // name: g.key,
  Move         r64, r3
  Index        r65, r63, r4
  // count: count(g)
  Move         r66, r5
  Index        r67, r63, r5
  // name: g.key,
  Move         r68, r64
  Move         r69, r65
  // count: count(g)
  Move         r70, r66
  Move         r71, r67
  // select {
  MakeMap      r72, 2, r68
  // let stats = from o in orders
  Append       r2, r2, r72
  AddInt       r58, r58, r55
  Jump         L7
L6:
  // print("--- Orders per customer ---")
  Const        r74, "--- Orders per customer ---"
  Print        r74
  // for s in stats {
  IterPrep     r75, r2
  Len          r76, r75
  Const        r77, 0
L9:
  Less         r78, r77, r76
  JumpIfFalse  r78, L8
  Index        r80, r75, r77
  // print(s.name, "orders:", s.count)
  Index        r81, r80, r3
  Const        r82, "orders:"
  Index        r83, r80, r5
  PrintN       r81, 3, r81
  // for s in stats {
  Add          r77, r77, r55
  Jump         L9
L8:
  Return       r0
