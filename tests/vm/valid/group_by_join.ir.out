func main (regs=22)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
L2:
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(g)
  Const        r5, "count"
L1:
  // let stats = from o in orders
  MakeMap      r6, 0, r0
L5:
  Const        r7, []
  IterPrep     r8, r1
  Len          r1, r8
L3:
  Const        r9, 0
  LessInt      r10, r9, r1
  JumpIfFalse  r10, L0
L0:
  Index        r1, r8, r9
  // join from c in customers on o.customerId == c.id
  IterPrep     r8, r0
  Len          r11, r8
  Const        r12, 0
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  Index        r11, r8, r12
  Const        r8, "customerId"
  Index        r14, r1, r8
  Const        r8, "id"
  Index        r15, r11, r8
  Equal        r8, r14, r15
  JumpIfFalse  r8, L2
  // let stats = from o in orders
  Const        r8, "o"
  Move         r15, r1
  Const        r1, "c"
  Move         r14, r11
  MakeMap      r16, 2, r8
  // group by c.name into g
  Index        r14, r11, r3
  Str          r11, r14
  In           r1, r11, r6
  JumpIfTrue   r1, L1
  // let stats = from o in orders
  Const        r1, []
  Const        r15, "__group__"
  Const        r8, true
  Const        r17, "key"
  // group by c.name into g
  Move         r18, r14
  // let stats = from o in orders
  Const        r14, "items"
  Move         r19, r1
  Const        r1, "count"
  Const        r20, 0
  Move         r21, r15
  Move         r15, r8
  Move         r8, r17
  Move         r17, r18
  Move         r18, r14
  Move         r14, r19
  Move         r19, r1
  Move         r1, r20
  MakeMap      r20, 4, r21
  SetIndex     r6, r11, r20
  Append       r7, r7, r20
  Const        r20, "items"
  Index        r1, r6, r11
  Index        r11, r1, r20
  Append       r6, r11, r16
  SetIndex     r1, r20, r6
  Index        r6, r1, r5
  Const        r11, 1
  AddInt       r20, r6, r11
  SetIndex     r1, r5, r20
  // join from c in customers on o.customerId == c.id
  AddInt       r12, r12, r11
  Jump         L0
  // let stats = from o in orders
  AddInt       r9, r9, r11
  Jump         L3
  Const        r20, 0
  Len          r6, r7
  LessInt      r1, r20, r6
  JumpIfFalse  r1, L4
  Index        r1, r7, r20
  // name: g.key,
  Const        r7, "name"
  Index        r6, r1, r4
  // count: count(g)
  Const        r4, "count"
  Index        r13, r1, r5
  // name: g.key,
  Move         r1, r7
  Move         r7, r6
  // count: count(g)
  Move         r6, r4
  Move         r4, r13
  // select {
  MakeMap      r13, 2, r1
  // let stats = from o in orders
  Append       r2, r2, r13
  AddInt       r20, r20, r11
  Jump         L5
L4:
  // print("--- Orders per customer ---")
  Const        r13, "--- Orders per customer ---"
  Print        r13
  // for s in stats {
  IterPrep     r13, r2
  Len          r2, r13
  Const        r4, 0
L7:
  Less         r6, r4, r2
  JumpIfFalse  r6, L6
  Index        r6, r13, r4
  // print(s.name, "orders:", s.count)
  Index        r13, r6, r3
  Const        r3, "orders:"
  Index        r2, r6, r5
  PrintN       r13, 3, r13
  // for s in stats {
  Const        r2, 1
  Add          r4, r4, r2
  Jump         L7
L6:
  Return       r0
