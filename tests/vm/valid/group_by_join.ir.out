func main (regs=78)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from o in orders
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r3
  Len          r8, r7
  Const        r9, 0
L5:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // join from c in customers on o.customerId == c.id
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Const        r18, "customerId"
  Index        r19, r12, r18
  Const        r20, "id"
  Index        r21, r17, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  // let stats = from o in orders
  Const        r23, "o"
  Move         r24, r12
  Const        r25, "c"
  Move         r26, r17
  MakeMap      r27, 2, r23
  // group by c.name into g
  Const        r28, "name"
  Index        r29, r17, r28
  Str          r30, r29
  In           r31, r30, r5
  JumpIfTrue   r31, L3
  // let stats = from o in orders
  Const        r33, "__group__"
  Const        r34, true
  Const        r35, "key"
  // group by c.name into g
  Move         r36, r29
  // let stats = from o in orders
  Const        r37, "items"
  Const        r38, []
  MakeMap      r39, 3, r33
  SetIndex     r5, r30, r39
  Append       r40, r6, r39
  Move         r6, r40
L3:
  Const        r41, "items"
  Index        r42, r5, r30
  Index        r43, r42, r41
  Append       r44, r43, r27
  SetIndex     r42, r41, r44
L2:
  Const        r45, 1
  // join from c in customers on o.customerId == c.id
  AddInt       r15, r15, r45
  Jump         L4
L1:
  // let stats = from o in orders
  Jump         L5
L0:
  Const        r46, 0
  Len          r47, r6
L7:
  Less         r48, r46, r47
  JumpIfFalse  r48, L6
  Index        r49, r6, r46
  Move         r50, r49
  // name: g.key,
  Const        r52, "key"
  Index        r53, r50, r52
  // count: count(g)
  Count        r55, r50
  // name: g.key,
  Const        r56, "name"
  Move         r57, r53
  // count: count(g)
  Const        r58, "count"
  Move         r59, r55
  // select {
  MakeMap      r60, 2, r56
  // let stats = from o in orders
  Append       r61, r4, r60
  Move         r4, r61
  AddInt       r46, r46, r45
  Jump         L7
L6:
  Move         r62, r4
  // print("--- Orders per customer ---")
  Const        r63, "--- Orders per customer ---"
  Print        r63
  // for s in stats {
  IterPrep     r64, r62
  Len          r65, r64
  Const        r66, 0
L9:
  Less         r67, r66, r65
  JumpIfFalse  r67, L8
  Index        r68, r64, r66
  Move         r69, r68
  // print(s.name, "orders:", s.count)
  Const        r73, "name"
  Index        r74, r69, r73
  Move         r70, r74
  Const        r71, "orders:"
  Const        r76, "count"
  Index        r77, r69, r76
  Move         r72, r77
  PrintN       r70, 3, r70
  // for s in stats {
  AddInt       r66, r66, r45
  Jump         L9
L8:
  Return       r0
