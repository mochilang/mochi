(* Generated by Mochi transpiler v0.10.33 on 2025-07-21 19:10 +0700 *)

let () =
  let nations = [[("id", 1); ("name", "A")]; [("id", 2); ("name", "B")]] in
  let suppliers = [[("id", 1); ("nation", 1)]; [("id", 2); ("nation", 2)]] in
  let partsupp = [[("part", 100); ("supplier", 1); ("cost", 10.0); ("qty", 2)]; [("part", 100); ("supplier", 2); ("cost", 20.0); ("qty", 1)]; [("part", 200); ("supplier", 1); ("cost", 5.0); ("qty", 3)]] in
  let filtered = (List.concat (List.map (fun ps -> (List.concat (List.map (fun s -> (List.filter_map (fun n -> if ((((List.assoc "id" s) == (List.assoc "supplier" ps)) && ((List.assoc "id" n) == (List.assoc "nation" s))) && ((List.assoc "name" n) == "A")) then Some ([("part", (List.assoc "part" ps)); ("value", ((List.assoc "cost" ps) *. (List.assoc "qty" ps)))]) else None) nations)) suppliers))) partsupp)) in
  let grouped = (let __groups0 = ref [] in
  List.iter (fun x ->
    let key = (List.assoc "part" x) in
    let cur = try List.assoc key !__groups0 with Not_found -> [] in
    __groups0 := (key, x :: cur) :: List.remove_assoc key !__groups0;
  ) filtered;
  let __res0 = ref [] in
  List.iter (fun (g_key, g_items) ->
    let g = List.rev g_items in
    __res0 := [("part", g_key); ("total", (List.fold_left (fun acc x -> acc +. x) 0.0 (List.map (fun r -> (List.assoc "value" r)) g)))] :: !__res0
  ) !__groups0;
  List.rev !__res0) in
  print_endline (String.concat " " (List.filter (fun s -> s <> "") [grouped]));
