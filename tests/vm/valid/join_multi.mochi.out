fun main() {
  let customers = {:id(1, name, "Alice", }, {:id, 2, name, "Bob", })
  let orders = {:id(100, customerId, _1}, {:id, 101, customerId, _2})
  let items = {:orderId(100, sku, "a", }, {:orderId, 101, sku, "b", })
  let result = vec(>>(for(o(orders, c, customers, when, [customerId, o] == [id, c], i, items, when, [id, o] == [orderId, i]), {:name, [name, c], sku, [sku, i], })))
  print("--- Multi Join ---")
  loop(_tmp0(seq(result)), if _tmp0 { (fun(r) => (fun(r) => cond(r == break, nil, else, recur(next(_tmp0))))(try(print([name, r], "bought item", [sku, r]), next, catch(clojure_lang_ExceptionInfo, e, cond(_getMessage(e) == "continue", next, _getMessage(e) == "break", break, else, )))))(clojure_core_first(_tmp0)) })
}
main()
