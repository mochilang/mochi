func main (regs=114)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
L7:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r20, "customerId"
  Index        r21, r18, r20
  Const        r22, "id"
  Index        r23, r12, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from c in customers
  Const        r25, "c"
  Move         r26, r12
  Const        r27, "o"
  Move         r28, r18
  MakeMap      r29, 2, r25
  // group by c.name into g
  Const        r30, "name"
  Index        r31, r12, r30
  Str          r32, r31
  In           r33, r32, r5
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r35, "__group__"
  Const        r36, true
  Const        r37, "key"
  // group by c.name into g
  Move         r38, r31
  // let stats = from c in customers
  Const        r39, "items"
  Const        r40, []
  MakeMap      r41, 3, r35
  SetIndex     r5, r32, r41
  Append       r42, r6, r41
  Move         r6, r42
L3:
  Const        r43, "items"
  Index        r44, r5, r32
  Index        r45, r44, r43
  Append       r46, r45, r29
  SetIndex     r44, r43, r46
L2:
  Const        r47, 1
  // left join o in orders on o.customerId == c.id
  AddInt       r15, r15, r47
  Jump         L4
L1:
  Jump         L5
  // let stats = from c in customers
  Const        r50, "c"
  Move         r51, r12
  Const        r52, "o"
  Const        r53, nil
  MakeMap      r54, 2, r50
  // group by c.name into g
  Const        r55, "name"
  Index        r56, r12, r55
  Str          r57, r56
  In           r58, r57, r5
  JumpIfTrue   r58, L6
  // let stats = from c in customers
  Const        r60, "__group__"
  Const        r61, true
  Const        r62, "key"
  // group by c.name into g
  Move         r63, r56
  // let stats = from c in customers
  Const        r64, "items"
  Const        r65, []
  MakeMap      r66, 3, r60
  SetIndex     r5, r57, r66
  Append       r67, r6, r66
  Move         r6, r67
L6:
  Const        r68, "items"
  Index        r69, r5, r57
  Index        r70, r69, r68
  Append       r71, r70, r54
  SetIndex     r69, r68, r71
L5:
  Jump         L7
L0:
  Const        r72, 0
  Len          r73, r6
L12:
  Less         r74, r72, r73
  JumpIfFalse  r74, L8
  Index        r75, r6, r72
  Move         r76, r75
  // name: g.key,
  Const        r78, "key"
  Index        r79, r76, r78
  // count: count(from r in g where r.o select r)
  Const        r81, []
  IterPrep     r82, r76
  Len          r83, r82
  Const        r84, 0
L11:
  Less         r85, r84, r83
  JumpIfFalse  r85, L9
  Index        r86, r82, r84
  Move         r87, r86
  Const        r88, "o"
  Index        r89, r87, r88
  JumpIfFalse  r89, L10
  Append       r90, r81, r87
  Move         r81, r90
L10:
  AddInt       r84, r84, r47
  Jump         L11
L9:
  Count        r91, r81
  // name: g.key,
  Const        r92, "name"
  Move         r93, r79
  // count: count(from r in g where r.o select r)
  Const        r94, "count"
  Move         r95, r91
  // select {
  MakeMap      r96, 2, r92
  // let stats = from c in customers
  Append       r97, r4, r96
  Move         r4, r97
  AddInt       r72, r72, r47
  Jump         L12
L8:
  Move         r98, r4
  // print("--- Group Left Join ---")
  Const        r99, "--- Group Left Join ---"
  Print        r99
  // for s in stats {
  IterPrep     r100, r98
  Len          r101, r100
  Const        r102, 0
L14:
  Less         r103, r102, r101
  JumpIfFalse  r103, L13
  Index        r104, r100, r102
  Move         r105, r104
  // print(s.name, "orders:", s.count)
  Const        r109, "name"
  Index        r110, r105, r109
  Move         r106, r110
  Const        r107, "orders:"
  Const        r112, "count"
  Index        r113, r105, r112
  Move         r108, r113
  PrintN       r106, 3, r106
  // for s in stats {
  AddInt       r102, r102, r47
  Jump         L14
L13:
  Return       r0
