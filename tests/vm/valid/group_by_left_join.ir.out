func main (regs=29)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
L10:
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  Const        r8, []
  Const        r9, 0
  IterPrep     r10, r0
  Len          r11, r10
  Const        r12, 0
L7:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L0
L4:
  Index        r11, r10, r12
  // left join o in orders on o.customerId == c.id
  IterPrep     r10, r1
L2:
  Len          r1, r10
L1:
  Const        r14, 0
L3:
  LessInt      r15, r14, r1
  JumpIfFalse  r15, L1
L5:
  Index        r1, r10, r14
  Const        r10, false
  Const        r16, "customerId"
  Index        r17, r1, r16
  Const        r16, "id"
L11:
  Index        r18, r11, r16
  Equal        r16, r17, r18
  JumpIfFalse  r16, L2
  Const        r10, true
  // let stats = from c in customers
  Const        r16, "c"
  Move         r18, r11
  Move         r17, r1
  MakeMap      r1, 2, r16
  // group by c.name into g
  Index        r19, r11, r3
  Str          r20, r19
  In           r21, r20, r7
  JumpIfTrue   r21, L3
  // let stats = from c in customers
  Const        r21, []
  Const        r22, "__group__"
  Const        r23, true
  Const        r24, "key"
  // group by c.name into g
  Move         r25, r19
  // let stats = from c in customers
  Const        r19, "items"
  Move         r26, r21
  Const        r21, "count"
  Const        r27, 0
  Move         r28, r22
  Move         r22, r23
  Move         r23, r24
  Move         r24, r25
  Move         r25, r19
  Move         r19, r26
  Move         r26, r21
  Move         r21, r27
  MakeMap      r27, 4, r28
  SetIndex     r7, r20, r9
  Append       r8, r8, r27
  Const        r27, 1
  AddInt       r9, r9, r27
  Const        r21, "items"
  Index        r26, r7, r20
  Index        r20, r8, r26
  Index        r26, r20, r21
  Append       r19, r26, r1
  SetIndex     r20, r21, r19
  Index        r19, r20, r5
  AddInt       r26, r19, r27
  SetIndex     r20, r5, r26
  // left join o in orders on o.customerId == c.id
  AddInt       r14, r14, r27
  Jump         L4
  Move         r26, r10
  JumpIfTrue   r26, L5
  // let stats = from c in customers
  MakeMap      r26, 2, r16
  // group by c.name into g
  Index        r1, r11, r3
  Str          r11, r1
  In           r17, r11, r7
  JumpIfTrue   r17, L6
  // let stats = from c in customers
  Const        r17, []
  Const        r18, "__group__"
  Const        r16, true
  Const        r10, "key"
  // group by c.name into g
  Move         r19, r1
  // let stats = from c in customers
  Const        r1, "items"
  Move         r20, r17
  Const        r17, "count"
  Const        r15, 0
  Move         r14, r18
  Move         r18, r16
  Move         r16, r10
  Move         r10, r19
  Move         r19, r1
  Move         r1, r20
  Move         r20, r17
  Move         r17, r15
  MakeMap      r15, 4, r14
  SetIndex     r7, r11, r9
  Append       r8, r8, r15
  AddInt       r9, r9, r27
L6:
  Index        r15, r7, r11
  Index        r11, r8, r15
  Index        r15, r11, r21
  Append       r7, r15, r26
  SetIndex     r11, r21, r7
  Index        r7, r11, r5
  AddInt       r15, r7, r27
  SetIndex     r11, r5, r15
  AddInt       r12, r12, r27
  Jump         L7
L0:
  Const        r15, 0
  Move         r7, r15
  Len          r11, r8
  LessInt      r13, r7, r11
  JumpIfFalse  r13, L8
  Index        r13, r8, r7
  // name: g.key,
  Const        r8, "name"
  Index        r11, r13, r4
  // count: count(from r in g where r.o select r)
  Const        r4, "count"
  Const        r12, []
  IterPrep     r26, r13
  Len          r13, r26
  Move         r21, r15
  LessInt      r15, r21, r13
  JumpIfFalse  r15, L9
  Index        r15, r26, r21
  Index        r26, r15, r6
  JumpIfFalse  r26, L10
  Append       r12, r12, r15
  AddInt       r21, r21, r27
  Jump         L11
L9:
  Count        r15, r12
  // name: g.key,
  Move         r12, r8
  Move         r8, r11
  // count: count(from r in g where r.o select r)
  Move         r11, r4
  Move         r4, r15
  // select {
  MakeMap      r15, 2, r12
  // let stats = from c in customers
  Append       r2, r2, r15
  AddInt       r7, r7, r27
  Jump         L4
L8:
  // print("--- Group Left Join ---")
  Const        r15, "--- Group Left Join ---"
  Print        r15
  // for s in stats {
  IterPrep     r15, r2
  Len          r26, r15
  Const        r2, 0
L13:
  Less         r4, r2, r26
  JumpIfFalse  r4, L12
  Index        r4, r15, r2
  // print(s.name, "orders:", s.count)
  Index        r15, r4, r3
  Const        r3, "orders:"
  Index        r26, r4, r5
  PrintN       r15, 3, r15
  // for s in stats {
  Const        r26, 1
  Add          r2, r2, r26
  Jump         L13
L12:
  Return       r0
