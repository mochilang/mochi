func main (regs=104)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  Const        r8, []
  IterPrep     r9, r0
  Len          r10, r9
  Const        r11, 0
L7:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r14, r9, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L4:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r20, r15, r17
  Const        r21, false
  Const        r22, "customerId"
  Index        r23, r20, r22
  Const        r24, "id"
  Index        r25, r14, r24
  Equal        r26, r23, r25
  JumpIfFalse  r26, L2
  Const        r21, true
  // let stats = from c in customers
  Const        r27, "c"
  Move         r28, r14
  Move         r29, r20
  MakeMap      r30, 2, r27
  // group by c.name into g
  Index        r31, r14, r3
  Str          r32, r31
  In           r33, r32, r7
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r34, []
  Const        r35, "__group__"
  Const        r36, true
  // group by c.name into g
  Move         r37, r31
  // let stats = from c in customers
  Const        r38, "items"
  Move         r39, r34
  Const        r40, 0
  MakeMap      r41, 4, r35
  SetIndex     r7, r32, r41
  Append       r42, r8, r41
  Move         r8, r42
L3:
  Index        r43, r7, r32
  Index        r44, r43, r38
  Append       r45, r44, r30
  SetIndex     r43, r38, r45
  Index        r46, r43, r5
  Const        r47, 1
  AddInt       r48, r46, r47
  SetIndex     r43, r5, r48
L2:
  // left join o in orders on o.customerId == c.id
  AddInt       r17, r17, r47
  Jump         L4
L1:
  Move         r49, r21
  JumpIfTrue   r49, L5
  // let stats = from c in customers
  MakeMap      r53, 2, r27
  // group by c.name into g
  Index        r54, r14, r3
  Str          r55, r54
  In           r56, r55, r7
  JumpIfTrue   r56, L6
  // let stats = from c in customers
  MakeMap      r60, 4, r35
  SetIndex     r7, r55, r60
  Append       r8, r8, r60
L6:
  Index        r62, r7, r55
  Index        r63, r62, r38
  Append       r64, r63, r53
  SetIndex     r62, r38, r64
  Index        r65, r62, r5
  AddInt       r66, r65, r47
  SetIndex     r62, r5, r66
L5:
  AddInt       r11, r11, r47
  Jump         L7
L0:
  Move         r67, r40
  Len          r68, r8
L12:
  LessInt      r69, r67, r68
  JumpIfFalse  r69, L8
  Index        r71, r8, r67
  // name: g.key,
  Const        r72, "name"
  Index        r73, r71, r4
  // count: count(from r in g where r.o select r)
  Const        r74, "count"
  Const        r75, []
  IterPrep     r76, r71
  Len          r77, r76
  Move         r78, r40
L11:
  LessInt      r79, r78, r77
  JumpIfFalse  r79, L9
  Index        r81, r76, r78
  Index        r82, r81, r6
  JumpIfFalse  r82, L10
  Append       r75, r75, r81
L10:
  AddInt       r78, r78, r47
  Jump         L11
L9:
  // select {
  MakeMap      r87, 2, r72
  // let stats = from c in customers
  Append       r2, r2, r87
  AddInt       r67, r67, r47
  Jump         L12
L8:
  // print("--- Group Left Join ---")
  Const        r89, "--- Group Left Join ---"
  Print        r89
  // for s in stats {
  IterPrep     r90, r2
  Len          r91, r90
  Const        r92, 0
L14:
  Less         r93, r92, r91
  JumpIfFalse  r93, L13
  Index        r95, r90, r92
  // print(s.name, "orders:", s.count)
  Index        r96, r95, r3
  Const        r97, "orders:"
  Index        r98, r95, r5
  PrintN       r96, 3, r96
  // for s in stats {
  Const        r102, 1
  Add          r92, r92, r102
  Jump         L14
L13:
  Return       r0
