func main (regs=127)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  Move         r3, r2
  // let stats = from c in customers
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
L7:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Move         r18, r17
  Const        r19, false
  Const        r20, "customerId"
  Index        r21, r18, r20
  Const        r22, "id"
  Index        r23, r12, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  Const        r19, true
  // let stats = from c in customers
  Const        r25, "c"
  Move         r26, r12
  Const        r27, "o"
  Move         r28, r18
  MakeMap      r29, 2, r25
  // group by c.name into g
  Const        r30, "name"
  Index        r31, r12, r30
  Str          r32, r31
  In           r33, r32, r5
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r34, []
  Const        r35, "__group__"
  Const        r36, true
  Const        r37, "key"
  // group by c.name into g
  Move         r38, r31
  // let stats = from c in customers
  Const        r39, "items"
  Move         r40, r34
  // group by c.name into g
  Const        r41, "name"
  Move         r42, r31
  // let stats = from c in customers
  MakeMap      r43, 4, r35
  SetIndex     r5, r32, r43
  Append       r44, r6, r43
  Move         r6, r44
L3:
  Const        r45, "items"
  Index        r46, r5, r32
  Index        r47, r46, r45
  Append       r48, r47, r29
  SetIndex     r46, r45, r48
L2:
  // left join o in orders on o.customerId == c.id
  Const        r49, 1
  Add          r50, r15, r49
  Move         r15, r50
  Jump         L4
L1:
  Move         r51, r19
  JumpIfTrue   r51, L5
  Const        r52, nil
  Move         r18, r52
  // let stats = from c in customers
  Const        r53, "c"
  Move         r54, r12
  Const        r55, "o"
  Move         r56, r18
  MakeMap      r57, 2, r53
  // group by c.name into g
  Const        r58, "name"
  Index        r59, r12, r58
  Str          r60, r59
  In           r61, r60, r5
  JumpIfTrue   r61, L6
  // let stats = from c in customers
  Const        r62, []
  Const        r63, "__group__"
  Const        r64, true
  Const        r65, "key"
  // group by c.name into g
  Move         r66, r59
  // let stats = from c in customers
  Const        r67, "items"
  Move         r68, r62
  // group by c.name into g
  Const        r69, "name"
  Move         r70, r59
  // let stats = from c in customers
  MakeMap      r71, 4, r63
  SetIndex     r5, r60, r71
  Append       r72, r6, r71
  Move         r6, r72
L6:
  Const        r73, "items"
  Index        r74, r5, r60
  Index        r75, r74, r73
  Append       r76, r75, r57
  SetIndex     r74, r73, r76
L5:
  Const        r77, 1
  Add          r78, r9, r77
  Move         r9, r78
  Jump         L7
L0:
  Const        r79, 0
  Len          r80, r6
L12:
  Less         r81, r79, r80
  JumpIfFalse  r81, L8
  Index        r82, r6, r79
  Move         r83, r82
  // name: g.key,
  Const        r84, "name"
  Const        r85, "key"
  Index        r86, r83, r85
  // count: count(from r in g where r.o select r)
  Const        r87, "count"
  Const        r88, []
  IterPrep     r89, r83
  Len          r90, r89
  Const        r91, 0
L11:
  Less         r92, r91, r90
  JumpIfFalse  r92, L9
  Index        r93, r89, r91
  Move         r94, r93
  Const        r95, "o"
  Index        r96, r94, r95
  JumpIfFalse  r96, L10
  Append       r97, r88, r94
  Move         r88, r97
L10:
  Const        r98, 1
  Add          r99, r91, r98
  Move         r91, r99
  Jump         L11
L9:
  Count        r100, r88
  // name: g.key,
  Move         r101, r84
  Move         r102, r86
  // count: count(from r in g where r.o select r)
  Move         r103, r87
  Move         r104, r100
  // select {
  MakeMap      r105, 2, r101
  // let stats = from c in customers
  Append       r106, r4, r105
  Move         r4, r106
  Const        r107, 1
  Add          r108, r79, r107
  Move         r79, r108
  Jump         L12
L8:
  Move         r109, r4
  // print("--- Group Left Join ---")
  Const        r110, "--- Group Left Join ---"
  Print        r110
  // for s in stats {
  IterPrep     r111, r109
  Len          r112, r111
  Const        r113, 0
L14:
  Less         r114, r113, r112
  JumpIfFalse  r114, L13
  Index        r115, r111, r113
  Move         r116, r115
  // print(s.name, "orders:", s.count)
  Const        r120, "name"
  Index        r121, r116, r120
  Move         r117, r121
  Const        r122, "orders:"
  Move         r118, r122
  Const        r123, "count"
  Index        r124, r116, r123
  Move         r119, r124
  PrintN       r117, 3, r117
  // for s in stats {
  Const        r125, 1
  Add          r126, r113, r125
  Move         r113, r126
  Jump         L14
L13:
  Return       r0

