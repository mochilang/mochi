func main (regs=121)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  Move         r3, r2
  // let stats = from c in customers
  MakeMap      r5, 0, r0
  IterPrep     r7, r1
  Const        r9, 0
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r3
  Const        r15, 0
  JumpIfFalse  r16, L0
  Index        r17, r13, r15
  Move         r18, r17
  JumpIfFalse  r24, L0
  // let stats = from c in customers
  Const        r25, "c"
  Move         r26, r12
  Const        r27, "o"
  Move         r28, r18
  MakeMap      r29, 2, r25
  // group by c.name into g
  Const        r30, "name"
  Index        r31, r12, r30
  Str          r32, r31
  JumpIfTrue   r33, L1
  // let stats = from c in customers
  Const        r34, []
  Const        r35, "__group__"
  Const        r36, true
  Const        r37, "key"
  // group by c.name into g
  Move         r38, r31
  // let stats = from c in customers
  Const        r39, "items"
  Move         r40, r34
  MakeMap      r41, 3, r35
  SetIndex     r5, r32, r41
L1:
  Const        r43, "items"
  Index        r44, r5, r32
  Index        r45, r44, r43
  Append       r46, r45, r29
  SetIndex     r44, r43, r46
  // left join o in orders on o.customerId == c.id
  Jump         L0
  JumpIfTrue   r49, L0
  Const        r50, nil
  Move         r18, r50
  // let stats = from c in customers
  Const        r51, "c"
  Move         r52, r12
  Const        r53, "o"
  Move         r54, r18
  MakeMap      r55, 2, r51
  // group by c.name into g
  Const        r56, "name"
  Index        r57, r12, r56
  Str          r58, r57
  JumpIfTrue   r59, L2
  // let stats = from c in customers
  Const        r60, []
  Const        r61, "__group__"
  Const        r62, true
  Const        r63, "key"
  // group by c.name into g
  Move         r64, r57
  // let stats = from c in customers
  Const        r65, "items"
  Move         r66, r60
  MakeMap      r67, 3, r61
  SetIndex     r5, r58, r67
L2:
  Const        r69, "items"
  Index        r70, r5, r58
  Index        r71, r70, r69
  Append       r72, r71, r55
  SetIndex     r70, r69, r72
  Jump         L0
  JumpIfFalse  r77, L3
  // count: count(from r in g where r.o select r)
  JumpIfFalse  r88, L0
  JumpIfFalse  r92, L0
  Jump         L0
  // let stats = from c in customers
  Jump         L0
L3:
  Move         r105, r4
  // print("--- Group Left Join ---")
  Const        r106, "--- Group Left Join ---"
  Print        r106
  // for s in stats {
  IterPrep     r107, r105
  Const        r109, 0
  JumpIfFalse  r110, L4
  Index        r111, r107, r109
  Move         r112, r111
  // print(s.name, "orders:", s.count)
  Const        r116, "name"
  Index        r117, r112, r116
  Move         r113, r117
  Const        r118, "orders:"
  Move         r114, r118
  Const        r119, "count"
  Index        r120, r112, r119
  Move         r115, r120
  PrintN       r113, 3, r113
  // for s in stats {
  Jump         L0
L4:
  Return       r0
