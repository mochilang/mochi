func main (regs=100)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  Const        r8, []
  IterPrep     r9, r0
  Len          r10, r9
  Const        r11, 0
L7:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r14, r9, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L4:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r20, r15, r17
  Const        r21, false
  Const        r22, "customerId"
  Index        r23, r20, r22
  Const        r24, "id"
  Index        r25, r14, r24
  Equal        r26, r23, r25
  JumpIfFalse  r26, L2
  Const        r21, true
  // let stats = from c in customers
  Const        r27, "c"
  Move         r28, r14
  Move         r29, r20
  MakeMap      r30, 2, r27
  // group by c.name into g
  Index        r31, r14, r3
  Str          r32, r31
  In           r33, r32, r7
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r34, []
  Const        r35, "__group__"
  Const        r36, true
  // group by c.name into g
  Move         r37, r31
  // let stats = from c in customers
  Const        r38, "items"
  Move         r39, r34
  MakeMap      r40, 3, r35
  SetIndex     r7, r32, r40
  Append       r8, r8, r40
L3:
  Index        r42, r7, r32
  Index        r43, r42, r38
  Append       r44, r43, r30
  SetIndex     r42, r38, r44
L2:
  // left join o in orders on o.customerId == c.id
  Const        r45, 1
  AddInt       r17, r17, r45
  Jump         L4
L1:
  Move         r46, r21
  JumpIfTrue   r46, L5
  // let stats = from c in customers
  MakeMap      r50, 2, r27
  // group by c.name into g
  Index        r51, r14, r3
  Str          r52, r51
  In           r53, r52, r7
  JumpIfTrue   r53, L6
  // let stats = from c in customers
  MakeMap      r57, 3, r35
  SetIndex     r7, r52, r57
  Append       r8, r8, r57
L6:
  Index        r59, r7, r52
  Index        r60, r59, r38
  Append       r61, r60, r50
  SetIndex     r59, r38, r61
L5:
  AddInt       r11, r11, r45
  Jump         L7
L0:
  Const        r63, 0
  Move         r62, r63
  Len          r64, r8
L12:
  LessInt      r65, r62, r64
  JumpIfFalse  r65, L8
  Index        r67, r8, r62
  // name: g.key,
  Const        r68, "name"
  Index        r69, r67, r4
  // count: count(from r in g where r.o select r)
  Const        r70, "count"
  Const        r71, []
  IterPrep     r72, r67
  Len          r73, r72
  Move         r74, r63
L11:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L9
  Index        r77, r72, r74
  Index        r78, r77, r6
  JumpIfFalse  r78, L10
  Append       r71, r71, r77
L10:
  AddInt       r74, r74, r45
  Jump         L11
L9:
  // select {
  MakeMap      r83, 2, r68
  // let stats = from c in customers
  Append       r2, r2, r83
  AddInt       r62, r62, r45
  Jump         L12
L8:
  // print("--- Group Left Join ---")
  Const        r85, "--- Group Left Join ---"
  Print        r85
  // for s in stats {
  IterPrep     r86, r2
  Len          r87, r86
  Const        r88, 0
L14:
  Less         r89, r88, r87
  JumpIfFalse  r89, L13
  Index        r91, r86, r88
  // print(s.name, "orders:", s.count)
  Index        r92, r91, r3
  Const        r93, "orders:"
  Index        r94, r91, r5
  PrintN       r92, 3, r92
  // for s in stats {
  Const        r98, 1
  Add          r88, r88, r98
  Jump         L14
L13:
  Return       r0
