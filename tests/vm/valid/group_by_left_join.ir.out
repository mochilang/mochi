func main (regs=112)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
L7:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Const        r18, false
  Const        r19, "customerId"
  Index        r20, r17, r19
  Const        r21, "id"
  Index        r22, r12, r21
  Equal        r23, r20, r22
  JumpIfFalse  r23, L2
  Const        r18, true
  // let stats = from c in customers
  Const        r24, "c"
  Move         r25, r12
  Const        r26, "o"
  Move         r27, r17
  MakeMap      r28, 2, r24
  // group by c.name into g
  Const        r29, "name"
  Index        r30, r12, r29
  Str          r31, r30
  In           r32, r31, r5
  JumpIfTrue   r32, L3
  // let stats = from c in customers
  Const        r34, "__group__"
  Const        r35, true
  Const        r36, "key"
  // group by c.name into g
  Move         r37, r30
  // let stats = from c in customers
  Const        r38, "items"
  Const        r39, []
  MakeMap      r40, 3, r34
  SetIndex     r5, r31, r40
  Append       r41, r6, r40
  Move         r6, r41
L3:
  Const        r42, "items"
  Index        r43, r5, r31
  Index        r44, r43, r42
  Append       r45, r44, r28
  SetIndex     r43, r42, r45
L2:
  Const        r46, 1
  // left join o in orders on o.customerId == c.id
  AddInt       r15, r15, r46
  Jump         L4
L1:
  JumpIfTrue   r18, L5
  // let stats = from c in customers
  Const        r48, "c"
  Move         r49, r12
  Const        r50, "o"
  Const        r51, nil
  MakeMap      r52, 2, r48
  // group by c.name into g
  Const        r53, "name"
  Index        r54, r12, r53
  Str          r55, r54
  In           r56, r55, r5
  JumpIfTrue   r56, L6
  // let stats = from c in customers
  Const        r58, "__group__"
  Const        r59, true
  Const        r60, "key"
  // group by c.name into g
  Move         r61, r54
  // let stats = from c in customers
  Const        r62, "items"
  Const        r63, []
  MakeMap      r64, 3, r58
  SetIndex     r5, r55, r64
  Append       r65, r6, r64
  Move         r6, r65
L6:
  Const        r66, "items"
  Index        r67, r5, r55
  Index        r68, r67, r66
  Append       r69, r68, r52
  SetIndex     r67, r66, r69
L5:
  Jump         L7
L0:
  Const        r70, 0
  Len          r71, r6
L12:
  Less         r72, r70, r71
  JumpIfFalse  r72, L8
  Index        r73, r6, r70
  Move         r74, r73
  // name: g.key,
  Const        r76, "key"
  Index        r77, r74, r76
  // count: count(from r in g where r.o select r)
  Const        r79, []
  IterPrep     r80, r74
  Len          r81, r80
  Const        r82, 0
L11:
  Less         r83, r82, r81
  JumpIfFalse  r83, L9
  Index        r84, r80, r82
  Move         r85, r84
  Const        r86, "o"
  Index        r87, r85, r86
  JumpIfFalse  r87, L10
  Append       r88, r79, r85
  Move         r79, r88
L10:
  AddInt       r82, r82, r46
  Jump         L11
L9:
  Count        r89, r79
  // name: g.key,
  Const        r90, "name"
  Move         r91, r77
  // count: count(from r in g where r.o select r)
  Const        r92, "count"
  Move         r93, r89
  // select {
  MakeMap      r94, 2, r90
  // let stats = from c in customers
  Append       r95, r4, r94
  Move         r4, r95
  AddInt       r70, r70, r46
  Jump         L12
L8:
  Move         r96, r4
  // print("--- Group Left Join ---")
  Const        r97, "--- Group Left Join ---"
  Print        r97
  // for s in stats {
  IterPrep     r98, r96
  Len          r99, r98
  Const        r100, 0
L14:
  Less         r101, r100, r99
  JumpIfFalse  r101, L13
  Index        r102, r98, r100
  Move         r103, r102
  // print(s.name, "orders:", s.count)
  Const        r107, "name"
  Index        r108, r103, r107
  Move         r104, r108
  Const        r105, "orders:"
  Const        r110, "count"
  Index        r111, r103, r110
  Move         r106, r111
  PrintN       r104, 3, r104
  // for s in stats {
  AddInt       r100, r100, r46
  Jump         L14
L13:
  Return       r0
