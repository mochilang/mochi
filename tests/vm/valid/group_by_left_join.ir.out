func main (regs=136)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  Move         r8, r2
  IterPrep     r10, r0
  Len          r11, r10
  Const        r12, 0
L4:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L0
  Index        r15, r10, r12
  // left join o in orders on o.customerId == c.id
  IterPrep     r16, r1
  Len          r17, r16
  Move         r18, r12
L2:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L1
  Index        r21, r16, r18
  Const        r22, false
  Const        r23, "customerId"
  Index        r24, r21, r23
  Const        r25, "id"
  Index        r26, r15, r25
  Equal        r27, r24, r26
  JumpIfFalse  r27, L2
  Const        r22, true
  // let stats = from c in customers
  Const        r28, "c"
  Move         r29, r15
  Move         r30, r6
  Move         r31, r21
  MakeMap      r32, 2, r28
  // group by c.name into g
  Index        r33, r15, r3
  Str          r34, r33
  In           r35, r34, r7
  JumpIfTrue   r35, L3
  // let stats = from c in customers
  Move         r36, r2
  Const        r37, "__group__"
  Move         r38, r22
  Move         r39, r4
  // group by c.name into g
  Move         r40, r33
  // let stats = from c in customers
  Const        r41, "items"
  Move         r42, r36
  Move         r43, r5
  Move         r44, r12
  Move         r45, r37
  Move         r46, r38
  Move         r47, r39
  Move         r48, r40
  Move         r49, r41
  Move         r50, r42
  Move         r51, r43
  Move         r52, r44
  MakeMap      r53, 4, r45
  SetIndex     r7, r34, r53
  Append       r8, r8, r53
L3:
  Move         r55, r41
  Index        r56, r7, r34
  Index        r57, r56, r55
  Append       r58, r57, r32
  SetIndex     r56, r55, r58
  Index        r59, r56, r5
  Const        r60, 1
  AddInt       r61, r59, r60
  SetIndex     r56, r5, r61
  // left join o in orders on o.customerId == c.id
  Jump         L2
L1:
  Move         r62, r22
  JumpIfTrue   r62, L4
  Const        r21, nil
  // let stats = from c in customers
  Move         r64, r28
  Move         r65, r15
  Move         r66, r6
  Move         r67, r21
  MakeMap      r68, 2, r64
  // group by c.name into g
  Index        r69, r15, r3
  Str          r70, r69
  In           r71, r70, r7
  JumpIfTrue   r71, L5
  // let stats = from c in customers
  Move         r72, r36
  Move         r73, r37
  Move         r74, r22
  Move         r75, r4
  // group by c.name into g
  Move         r76, r69
  // let stats = from c in customers
  Move         r77, r41
  Move         r78, r72
  Move         r79, r5
  Move         r80, r44
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
L6:
  MakeMap      r89, 4, r81
  SetIndex     r7, r70, r89
  Append       r8, r8, r89
L5:
  Index        r91, r7, r70
  Index        r92, r91, r55
  Append       r93, r92, r68
  SetIndex     r91, r55, r93
  Index        r94, r91, r5
  AddInt       r95, r94, r60
  SetIndex     r91, r5, r95
  Jump         L6
L0:
  Move         r96, r97
  Len          r98, r8
L11:
  LessInt      r99, r96, r98
  JumpIfFalse  r99, L7
  Index        r101, r8, r96
  // name: g.key,
  Move         r102, r3
  Index        r103, r101, r4
  // count: count(from r in g where r.o select r)
  Move         r104, r79
  Move         r105, r2
  IterPrep     r106, r101
  Len          r107, r106
  Move         r108, r97
L10:
  LessInt      r109, r108, r107
  JumpIfFalse  r109, L8
  Index        r111, r106, r108
  Index        r112, r111, r6
  JumpIfFalse  r112, L9
  Append       r105, r105, r111
L9:
  AddInt       r108, r108, r60
  Jump         L10
L8:
  Count        r114, r105
  // name: g.key,
  Move         r115, r102
  Move         r116, r103
  // count: count(from r in g where r.o select r)
  Move         r117, r104
  Move         r118, r114
  // select {
  MakeMap      r119, 2, r115
  // let stats = from c in customers
  Append       r2, r2, r119
  AddInt       r96, r96, r60
  Jump         L11
L7:
  // print("--- Group Left Join ---")
  Const        r121, "--- Group Left Join ---"
  Print        r121
  // for s in stats {
  IterPrep     r122, r2
  Len          r123, r122
  Move         r124, r97
L13:
  Less         r125, r124, r123
  JumpIfFalse  r125, L12
  Index        r127, r122, r124
  // print(s.name, "orders:", s.count)
  Index        r128, r127, r3
  Const        r129, "orders:"
  Index        r130, r127, r5
  PrintN       r128, 3, r128
  // for s in stats {
  Add          r124, r124, r60
  Jump         L13
L12:
  Return       r0
