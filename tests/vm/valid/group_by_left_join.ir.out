func main (regs=30)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
L7:
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
L8:
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  IterPrep     r8, r0
L2:
  Len          r9, r8
  Const        r10, 0
L0:
  LessInt      r11, r10, r9
  JumpIfFalse  r11, L0
L4:
  Index        r9, r8, r10
  // left join o in orders on o.customerId == c.id
  IterPrep     r8, r1
L1:
  Len          r1, r8
  Move         r12, r10
  LessInt      r13, r12, r1
  JumpIfFalse  r13, L1
L5:
  Index        r1, r8, r12
  Const        r8, false
  Const        r14, "customerId"
  Index        r15, r1, r14
  Const        r14, "id"
L3:
  Index        r16, r9, r14
  Equal        r14, r15, r16
  JumpIfFalse  r14, L2
  Const        r8, true
L9:
  // let stats = from c in customers
  Const        r14, "c"
  Move         r16, r9
  Move         r15, r1
  MakeMap      r1, 2, r14
  // group by c.name into g
  Index        r17, r9, r3
  Str          r18, r17
  In           r19, r18, r7
  JumpIfTrue   r19, L3
  // let stats = from c in customers
  Move         r19, r2
  Const        r20, "__group__"
  Move         r21, r8
  Move         r22, r4
  // group by c.name into g
  Move         r23, r17
  // let stats = from c in customers
  Const        r17, "items"
  Move         r24, r19
  Move         r19, r5
  Move         r25, r10
  Move         r26, r20
  Move         r27, r21
  Move         r21, r22
  Move         r22, r23
  Move         r23, r17
  Move         r28, r24
  Move         r24, r19
  Move         r19, r25
  MakeMap      r29, 4, r26
  SetIndex     r7, r18, r29
  Move         r29, r17
  Index        r19, r7, r18
  Index        r18, r19, r29
  Append       r24, r18, r1
  SetIndex     r19, r29, r24
  Index        r24, r19, r5
  Const        r18, 1
  AddInt       r28, r24, r18
  SetIndex     r19, r5, r28
  // left join o in orders on o.customerId == c.id
  AddInt       r12, r12, r18
  Jump         L4
  Move         r28, r8
  JumpIfTrue   r28, L3
  // let stats = from c in customers
  MakeMap      r28, 2, r14
  // group by c.name into g
  Index        r1, r9, r3
  Str          r9, r1
  In           r15, r9, r7
  JumpIfTrue   r15, L5
  // let stats = from c in customers
  Move         r15, r2
  Move         r16, r20
  Move         r20, r8
  Move         r8, r4
  // group by c.name into g
  Move         r14, r1
  // let stats = from c in customers
  Move         r1, r17
  Move         r17, r15
  Move         r24, r5
  Move         r19, r25
  Move         r25, r16
  Move         r16, r20
  Move         r20, r8
  Move         r8, r14
  Move         r14, r1
  Move         r1, r17
  Move         r17, r24
  Move         r13, r19
  MakeMap      r19, 4, r25
  SetIndex     r7, r9, r19
  Index        r19, r7, r9
  Index        r9, r19, r29
  Append       r13, r9, r28
  SetIndex     r19, r29, r13
  Index        r13, r19, r5
  AddInt       r9, r13, r18
  SetIndex     r19, r5, r9
  AddInt       r10, r10, r18
  Jump         L0
  Values       9,7,0,0
  Const        r7, 0
  Move         r13, r7
  Len          r19, r9
  LessInt      r11, r13, r19
  JumpIfFalse  r11, L6
  Index        r11, r9, r13
  // name: g.key,
  Move         r9, r3
  Index        r19, r11, r4
  // count: count(from r in g where r.o select r)
  Move         r4, r24
  Move         r24, r15
  IterPrep     r15, r11
  Len          r11, r15
  Move         r10, r7
  LessInt      r28, r10, r11
  JumpIfFalse  r28, L7
  Index        r28, r15, r10
  Index        r15, r28, r6
  JumpIfFalse  r15, L8
  Append       r24, r24, r28
  AddInt       r10, r10, r18
  Jump         L1
  Count        r10, r24
  // name: g.key,
  Move         r24, r9
  Move         r9, r19
  // count: count(from r in g where r.o select r)
  Move         r19, r4
  Move         r4, r10
  // select {
  MakeMap      r10, 2, r24
  // let stats = from c in customers
  Append       r2, r2, r10
  AddInt       r13, r13, r18
  Jump         L9
L6:
  // print("--- Group Left Join ---")
  Const        r15, "--- Group Left Join ---"
  Print        r15
  // for s in stats {
  IterPrep     r10, r2
  Len          r2, r10
  Move         r4, r7
L11:
  Less         r7, r4, r2
  JumpIfFalse  r7, L10
  Index        r7, r10, r4
  // print(s.name, "orders:", s.count)
  Index        r10, r7, r3
  Const        r3, "orders:"
  Index        r2, r7, r5
  PrintN       r10, 3, r10
  // for s in stats {
  Add          r4, r4, r18
  Jump         L11
L10:
  Return       r0
