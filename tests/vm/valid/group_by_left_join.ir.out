func main (regs=105)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  MakeMap      r3, 0, r0
  Const        r4, []
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L7:
  Less         r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r10, r5, r7
  // left join o in orders on o.customerId == c.id
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L4:
  Less         r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r16, r11, r13
  Const        r17, false
  Const        r18, "customerId"
  Index        r19, r16, r18
  Const        r20, "id"
  Index        r21, r10, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  Const        r17, true
  // let stats = from c in customers
  Const        r23, "c"
  Move         r24, r10
  Const        r25, "o"
  Move         r26, r16
  MakeMap      r27, 2, r23
  // group by c.name into g
  Const        r28, "name"
  Index        r29, r10, r28
  Str          r30, r29
  In           r31, r30, r3
  JumpIfTrue   r31, L3
  // let stats = from c in customers
  Const        r32, []
  Const        r33, "__group__"
  Const        r34, true
  Const        r35, "key"
  // group by c.name into g
  Move         r36, r29
  // let stats = from c in customers
  Const        r37, "items"
  Move         r38, r32
  MakeMap      r39, 3, r33
  SetIndex     r3, r30, r39
  Append       r4, r4, r39
L3:
  Index        r41, r3, r30
  Index        r42, r41, r37
  Append       r43, r42, r27
  SetIndex     r41, r37, r43
L2:
  // left join o in orders on o.customerId == c.id
  Const        r44, 1
  Add          r13, r13, r44
  Jump         L4
L1:
  Move         r46, r17
  JumpIfTrue   r46, L5
  // let stats = from c in customers
  MakeMap      r50, 2, r23
  // group by c.name into g
  Index        r51, r10, r28
  Str          r52, r51
  In           r53, r52, r3
  JumpIfTrue   r53, L6
  // let stats = from c in customers
  MakeMap      r57, 3, r33
  SetIndex     r3, r52, r57
  Append       r4, r4, r57
L6:
  Index        r59, r3, r52
  Index        r60, r59, r37
  Append       r61, r60, r50
  SetIndex     r59, r37, r61
L5:
  Const        r62, 1
  Add          r7, r7, r62
  Jump         L7
L0:
  Const        r64, 0
  Len          r66, r4
L12:
  Less         r67, r64, r66
  JumpIfFalse  r67, L8
  Index        r69, r4, r64
  // count: count(from r in g where r.o select r)
  Const        r72, []
  IterPrep     r73, r69
  Len          r74, r73
  Const        r75, 0
L11:
  Less         r76, r75, r74
  JumpIfFalse  r76, L9
  Index        r78, r73, r75
  Index        r79, r78, r25
  JumpIfFalse  r79, L10
  Append       r72, r72, r78
L10:
  Const        r81, 1
  Add          r75, r75, r81
  Jump         L11
L9:
  // select {
  MakeMap      r86, 2, r28
  // let stats = from c in customers
  Append       r2, r2, r86
  Const        r88, 1
  Add          r64, r64, r88
  Jump         L12
L8:
  // print("--- Group Left Join ---")
  Const        r90, "--- Group Left Join ---"
  Print        r90
  // for s in stats {
  IterPrep     r91, r2
  Len          r92, r91
  Const        r93, 0
L14:
  Less         r94, r93, r92
  JumpIfFalse  r94, L13
  Index        r96, r91, r93
  // print(s.name, "orders:", s.count)
  Index        r97, r96, r28
  Const        r98, "orders:"
  Index        r99, r96, r71
  PrintN       r97, 3, r97
  // for s in stats {
  Const        r103, 1
  Add          r93, r93, r103
  Jump         L14
L13:
  Return       r0
