func main (regs=123)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r4, []
  MakeMap      r5, 0, r0
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
  Less         r10, r9, r8
L7:
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r2
  Len          r14, r13
  Const        r15, 0
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
L4:
  Index        r17, r13, r15
  Const        r20, "customerId"
  Index        r21, r17, r20
  Const        r22, "id"
  Index        r23, r11, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  // let stats = from c in customers
  Const        r25, "c"
  Move         r26, r11
  Const        r27, "o"
  Move         r28, r17
  MakeMap      r29, 2, r25
  // group by c.name into g
  Const        r30, "name"
  Index        r31, r11, r30
  Str          r32, r31
  In           r33, r32, r5
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r35, "__group__"
  Const        r36, true
  Const        r37, "key"
  // group by c.name into g
  Move         r38, r31
  // let stats = from c in customers
  MakeMap      r41, 2, r35
  SetIndex     r5, r32, r41
  Const        r43, "items"
  Index        r44, r5, r32
  Index        r45, r44, r43
  Append       r46, r45, r29
L3:
  SetIndex     r44, r43, r46
  // left join o in orders on o.customerId == c.id
  Jump         L4
  JumpIfTrue   r19, L5
L2:
  Const        r50, nil
  // let stats = from c in customers
  Const        r51, "c"
  Move         r52, r11
  Const        r53, "o"
L1:
  Move         r54, r50
  MakeMap      r55, 2, r51
  // group by c.name into g
  Const        r56, "name"
  Index        r57, r11, r56
  Str          r58, r57
  In           r59, r58, r5
  JumpIfTrue   r59, L6
  // let stats = from c in customers
  Const        r61, "__group__"
  Const        r62, true
  Const        r63, "key"
  // group by c.name into g
  Move         r64, r57
  // let stats = from c in customers
  MakeMap      r67, 2, r61
  SetIndex     r5, r58, r67
  Const        r69, "items"
  Index        r70, r5, r58
  Index        r71, r70, r69
  Append       r72, r71, r55
  SetIndex     r70, r69, r72
  Jump         L7
L6:
  Const        r75, 0
  Len          r76, r68
  Less         r77, r75, r76
  JumpIfFalse  r77, L8
  Index        r78, r68, r75
L5:
  // count: count(from r in g where r.o select r)
  IterPrep     r85, r78
  Len          r86, r85
L0:
  Const        r87, 0
  Less         r88, r87, r86
  JumpIfFalse  r88, L9
  Index        r89, r85, r87
  Const        r91, "o"
  Index        r92, r89, r91
  JumpIfFalse  r92, L10
  Const        r96, 0
  // name: g.key,
  Move         r97, r80
  Move         r98, r82
  // count: count(from r in g where r.o select r)
  Move         r99, r83
  Move         r100, r96
  // select {
  MakeMap      r101, 2, r97
  // let stats = from c in customers
  Append       r102, r4, r101
L10:
  Move         r4, r102
  Jump         L0
L9:
  // print("--- Group Left Join ---")
  Const        r106, "--- Group Left Join ---"
  Print        r106
  // for s in stats {
  IterPrep     r107, r4
  Len          r108, r107
  Const        r109, 0
  Less         r110, r109, r108
  JumpIfFalse  r110, L11
  Index        r111, r107, r109
  // print(s.name, "orders:", s.count)
  Const        r116, "name"
  Index        r117, r111, r116
  Move         r113, r117
  Const        r118, "orders:"
L8:
  Move         r114, r118
  PrintN       r113, 2, r113
  Return       r0
