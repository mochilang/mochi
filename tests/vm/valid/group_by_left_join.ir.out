func main (regs=111)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  MakeMap      r3, 0, r0
  Const        r4, []
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L7:
  Less         r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r10, r5, r7
  // left join o in orders on o.customerId == c.id
  IterPrep     r11, r1
  Len          r12, r11
  Const        r13, 0
L4:
  Less         r14, r13, r12
  JumpIfFalse  r14, L1
  Index        r16, r11, r13
  Const        r17, false
  Const        r18, "customerId"
  Index        r19, r16, r18
  Const        r20, "id"
  Index        r21, r10, r20
  Equal        r22, r19, r21
  JumpIfFalse  r22, L2
  Const        r17, true
  // let stats = from c in customers
  Const        r23, "c"
  Move         r24, r10
  Const        r25, "o"
  Move         r26, r16
  MakeMap      r27, 2, r23
  // group by c.name into g
  Const        r28, "name"
  Index        r29, r10, r28
  Str          r30, r29
  In           r31, r30, r3
  JumpIfTrue   r31, L3
  // let stats = from c in customers
  Const        r32, []
  Const        r33, "__group__"
  Const        r34, true
  Const        r35, "key"
  // group by c.name into g
  Move         r36, r29
  // let stats = from c in customers
  Const        r37, "items"
  Move         r38, r32
  MakeMap      r39, 3, r33
  SetIndex     r3, r30, r39
  Append       r4, r4, r39
L3:
  Index        r41, r3, r30
  Index        r42, r41, r37
  Append       r43, r42, r27
  SetIndex     r41, r37, r43
L2:
  // left join o in orders on o.customerId == c.id
  Const        r44, 1
  Add          r13, r13, r44
  Jump         L4
L1:
  Move         r46, r17
  JumpIfTrue   r46, L5
  // let stats = from c in customers
  MakeMap      r50, 2, r23
  // group by c.name into g
  Const        r51, "name"
  Index        r52, r10, r51
  Str          r53, r52
  In           r54, r53, r3
  JumpIfTrue   r54, L6
  // let stats = from c in customers
  MakeMap      r58, 3, r33
  SetIndex     r3, r53, r58
  Append       r4, r4, r58
L6:
  Index        r60, r3, r53
  Index        r61, r60, r37
  Append       r62, r61, r50
  SetIndex     r60, r37, r62
L5:
  Const        r63, 1
  Add          r7, r7, r63
  Jump         L7
L0:
  Const        r65, 0
  Len          r67, r4
L12:
  Less         r68, r65, r67
  JumpIfFalse  r68, L8
  Index        r70, r4, r65
  // name: g.key,
  Const        r71, "name"
  Const        r72, "key"
  Index        r73, r70, r72
  // count: count(from r in g where r.o select r)
  Const        r74, "count"
  Const        r75, []
  IterPrep     r76, r70
  Len          r77, r76
  Const        r78, 0
L11:
  Less         r79, r78, r77
  JumpIfFalse  r79, L9
  Index        r81, r76, r78
  Const        r82, "o"
  Index        r83, r81, r82
  JumpIfFalse  r83, L10
  Append       r75, r75, r81
L10:
  Const        r85, 1
  Add          r78, r78, r85
  Jump         L11
L9:
  // select {
  MakeMap      r90, 2, r71
  // let stats = from c in customers
  Append       r2, r2, r90
  Const        r92, 1
  Add          r65, r65, r92
  Jump         L12
L8:
  // print("--- Group Left Join ---")
  Const        r94, "--- Group Left Join ---"
  Print        r94
  // for s in stats {
  IterPrep     r95, r2
  Len          r96, r95
  Const        r97, 0
L14:
  Less         r98, r97, r96
  JumpIfFalse  r98, L13
  Index        r100, r95, r97
  // print(s.name, "orders:", s.count)
  Const        r104, "name"
  Index        r101, r100, r104
  Const        r102, "orders:"
  Const        r107, "count"
  Index        r103, r100, r107
  PrintN       r101, 3, r101
  // for s in stats {
  Const        r109, 1
  Add          r97, r97, r109
  Jump         L14
L13:
  Return       r0
