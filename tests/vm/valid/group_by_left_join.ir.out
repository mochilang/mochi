func main (regs=107)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r4, []
  MakeMap      r5, 0, r0
  Const        r6, []
  IterPrep     r7, r1
  Len          r8, r7
  Const        r9, 0
L7:
  Less         r10, r9, r8
  JumpIfFalse  r10, L0
  Index        r11, r7, r9
  Move         r12, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r13, r3
  Len          r14, r13
  Const        r15, 0
L4:
  Less         r16, r15, r14
  JumpIfFalse  r16, L1
  Index        r17, r13, r15
  Const        r18, false
  Const        r20, "customerId"
  Index        r21, r17, r20
  Const        r22, "id"
  Index        r23, r12, r22
  Equal        r24, r21, r23
  JumpIfFalse  r24, L2
  Const        r18, true
  // let stats = from c in customers
  Const        r26, "c"
  Move         r27, r12
  Const        r28, "o"
  Move         r29, r17
  MakeMap      r30, 2, r26
  // group by c.name into g
  Const        r31, "name"
  Index        r32, r12, r31
  Str          r33, r32
  In           r34, r33, r5
  JumpIfTrue   r34, L3
  Const        r36, "__group__"
  Const        r37, "key"
  Move         r38, r32
  Const        r39, "items"
  // let stats = from c in customers
  Const        r40, []
  MakeMap      r41, 3, r36
  SetIndex     r5, r33, r41
  Append       r42, r6, r41
  Move         r6, r42
L3:
  Index        r43, r5, r33
  Index        r44, r43, r39
  Append       r45, r44, r30
  SetIndex     r43, r39, r45
L2:
  Const        r46, 1
  // left join o in orders on o.customerId == c.id
  AddInt       r15, r15, r46
  Jump         L4
L1:
  JumpIfTrue   r18, L5
  // let stats = from c in customers
  Const        r48, "c"
  Move         r49, r12
  Const        r50, "o"
  Const        r51, nil
  MakeMap      r52, 2, r48
  // group by c.name into g
  Const        r53, "name"
  Index        r54, r12, r53
  Str          r55, r54
  In           r56, r55, r5
  JumpIfTrue   r56, L6
  // let stats = from c in customers
  MakeMap      r60, 3, r36
  SetIndex     r5, r55, r60
  Append       r61, r6, r60
  Move         r6, r61
L6:
  Index        r62, r5, r55
  Index        r63, r62, r39
  Append       r64, r63, r52
  SetIndex     r62, r39, r64
L5:
  Jump         L7
L0:
  Const        r65, 0
  Len          r66, r6
L12:
  Less         r67, r65, r66
  JumpIfFalse  r67, L8
  Index        r68, r6, r65
  Move         r69, r68
  // name: g.key,
  Const        r71, "key"
  Index        r72, r69, r71
  // count: count(from r in g where r.o select r)
  Const        r74, []
  IterPrep     r75, r69
  Len          r76, r75
  Const        r77, 0
L11:
  Less         r78, r77, r76
  JumpIfFalse  r78, L9
  Index        r79, r75, r77
  Move         r80, r79
  Const        r81, "o"
  Index        r82, r80, r81
  JumpIfFalse  r82, L10
  Append       r83, r74, r80
  Move         r74, r83
L10:
  AddInt       r77, r77, r46
  Jump         L11
L9:
  Count        r84, r74
  // name: g.key,
  Const        r85, "name"
  Move         r86, r72
  // count: count(from r in g where r.o select r)
  Const        r87, "count"
  Move         r88, r84
  // select {
  MakeMap      r89, 2, r85
  // let stats = from c in customers
  Append       r90, r4, r89
  Move         r4, r90
  AddInt       r65, r65, r46
  Jump         L12
L8:
  Move         r91, r4
  // print("--- Group Left Join ---")
  Const        r92, "--- Group Left Join ---"
  Print        r92
  // for s in stats {
  IterPrep     r93, r91
  Len          r94, r93
  Const        r95, 0
L14:
  Less         r96, r95, r94
  JumpIfFalse  r96, L13
  Index        r97, r93, r95
  Move         r98, r97
  // print(s.name, "orders:", s.count)
  Const        r102, "name"
  Index        r103, r98, r102
  Move         r99, r103
  Const        r100, "orders:"
  Const        r105, "count"
  Index        r106, r98, r105
  Move         r101, r106
  PrintN       r99, 3, r99
  // for s in stats {
  AddInt       r95, r95, r46
  Jump         L14
L13:
  Return       r0
