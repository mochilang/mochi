func main (regs=120)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100}, {"customerId": 1, "id": 101}, {"customerId": 2, "id": 102}]
  // let stats = from c in customers
  Const        r2, []
  // group by c.name into g
  Const        r3, "name"
  // name: g.key,
  Const        r4, "key"
  // count: count(from r in g where r.o select r)
  Const        r5, "count"
  Const        r6, "o"
  // let stats = from c in customers
  MakeMap      r7, 0, r0
  Const        r8, []
  IterPrep     r9, r0
  Len          r10, r9
  Const        r11, 0
L7:
  LessInt      r12, r11, r10
  JumpIfFalse  r12, L0
  Index        r14, r9, r11
  // left join o in orders on o.customerId == c.id
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, 0
L4:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r20, r15, r17
  Const        r21, false
  Const        r22, "customerId"
  Index        r23, r20, r22
  Const        r24, "id"
  Index        r25, r14, r24
  Equal        r26, r23, r25
  JumpIfFalse  r26, L2
  Const        r21, true
  // let stats = from c in customers
  Const        r27, "c"
  Move         r28, r14
  Move         r29, r20
  MakeMap      r30, 2, r27
  // group by c.name into g
  Index        r31, r14, r3
  Str          r32, r31
  In           r33, r32, r7
  JumpIfTrue   r33, L3
  // let stats = from c in customers
  Const        r34, []
  Const        r35, "__group__"
  Const        r36, true
  // group by c.name into g
  Move         r37, r31
  // let stats = from c in customers
  Const        r38, "items"
  Move         r39, r34
  Const        r40, 0
  Move         r41, r35
  Move         r42, r36
  Move         r43, r4
  Move         r44, r37
  Move         r45, r38
  Move         r46, r39
  Move         r47, r5
  Move         r48, r40
  MakeMap      r49, 4, r41
  SetIndex     r7, r32, r49
  Append       r8, r8, r49
L3:
  Index        r51, r7, r32
  Index        r52, r51, r38
  Append       r53, r52, r30
  SetIndex     r51, r38, r53
  Index        r54, r51, r5
  Const        r55, 1
  AddInt       r56, r54, r55
  SetIndex     r51, r5, r56
L2:
  // left join o in orders on o.customerId == c.id
  AddInt       r17, r17, r55
  Jump         L4
L1:
  Move         r57, r21
  JumpIfTrue   r57, L5
  // let stats = from c in customers
  MakeMap      r61, 2, r27
  // group by c.name into g
  Index        r62, r14, r3
  Str          r63, r62
  In           r64, r63, r7
  JumpIfTrue   r64, L6
  // let stats = from c in customers
  Const        r65, []
  // group by c.name into g
  Move         r66, r62
  // let stats = from c in customers
  Move         r67, r65
  Move         r68, r35
  Move         r69, r36
  Move         r70, r4
  Move         r71, r66
  Move         r72, r38
  Move         r73, r67
  Move         r74, r5
  Move         r75, r40
  MakeMap      r76, 4, r68
  SetIndex     r7, r63, r76
  Append       r8, r8, r76
L6:
  Index        r78, r7, r63
  Index        r79, r78, r38
  Append       r80, r79, r61
  SetIndex     r78, r38, r80
  Index        r81, r78, r5
  AddInt       r82, r81, r55
  SetIndex     r78, r5, r82
L5:
  AddInt       r11, r11, r55
  Jump         L7
L0:
  Move         r83, r40
  Len          r84, r8
L12:
  LessInt      r85, r83, r84
  JumpIfFalse  r85, L8
  Index        r87, r8, r83
  // name: g.key,
  Const        r88, "name"
  Index        r89, r87, r4
  // count: count(from r in g where r.o select r)
  Const        r90, "count"
  Const        r91, []
  IterPrep     r92, r87
  Len          r93, r92
  Move         r94, r40
L11:
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L9
  Index        r97, r92, r94
  Index        r98, r97, r6
  JumpIfFalse  r98, L10
  Append       r91, r91, r97
L10:
  AddInt       r94, r94, r55
  Jump         L11
L9:
  // select {
  MakeMap      r103, 2, r88
  // let stats = from c in customers
  Append       r2, r2, r103
  AddInt       r83, r83, r55
  Jump         L12
L8:
  // print("--- Group Left Join ---")
  Const        r105, "--- Group Left Join ---"
  Print        r105
  // for s in stats {
  IterPrep     r106, r2
  Len          r107, r106
  Const        r108, 0
L14:
  Less         r109, r108, r107
  JumpIfFalse  r109, L13
  Index        r111, r106, r108
  // print(s.name, "orders:", s.count)
  Index        r112, r111, r3
  Const        r113, "orders:"
  Index        r114, r111, r5
  PrintN       r112, 3, r112
  // for s in stats {
  Const        r118, 1
  Add          r108, r108, r118
  Jump         L14
L13:
  Return       r0
