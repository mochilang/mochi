func main (regs=61)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // join from c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  // join from c in customers on o.customerId == c.id
  Const        r12, 0
L3:
  Less         r13, r12, r8
  JumpIfFalse  r13, L1
  Index        r14, r7, r12
  Const        r15, "customerId"
  Index        r16, r11, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r21, "id"
  Index        r22, r11, r21
  Const        r24, "name"
  Index        r25, r14, r24
  Const        r27, "total"
  Index        r28, r11, r27
  Const        r29, "orderId"
  Move         r30, r22
  Const        r31, "customerName"
  Move         r32, r25
  Const        r33, "total"
  Move         r34, r28
  MakeMap      r35, 3, r29
  // let result = from o in orders
  Append       r36, r4, r35
  Move         r4, r36
L2:
  Const        r37, 1
  // join from c in customers on o.customerId == c.id
  AddInt       r12, r12, r37
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Move         r38, r4
  // print("--- Orders with customer info ---")
  Const        r39, "--- Orders with customer info ---"
  Print        r39
  // for entry in result {
  IterPrep     r40, r38
  Len          r41, r40
  Const        r42, 0
L6:
  Less         r43, r42, r41
  JumpIfFalse  r43, L5
  Index        r44, r40, r42
  Move         r45, r44
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r46, "Order"
  Const        r53, "orderId"
  Index        r54, r45, r53
  Move         r47, r54
  Const        r48, "by"
  Const        r56, "customerName"
  Index        r57, r45, r56
  Move         r49, r57
  Const        r50, "- $"
  Const        r59, "total"
  Index        r60, r45, r59
  Move         r51, r60
  PrintN       r46, 6, r46
  // for entry in result {
  AddInt       r42, r42, r37
  Jump         L6
L5:
  Return       r0
