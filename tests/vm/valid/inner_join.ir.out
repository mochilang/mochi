func main (regs=111)
L8:
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // join from c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
  EqualInt     r8, r4, r7
  JumpIfTrue   r8, L0
  EqualInt     r9, r6, r7
  JumpIfTrue   r9, L0
  LessEq       r10, r6, r4
  JumpIfFalse  r10, L1
  // join from c in customers on o.customerId == c.id
  MakeMap      r11, 0, r0
  Const        r12, 0
L4:
  LessInt      r13, r12, r6
  JumpIfFalse  r13, L2
  Index        r14, r5, r12
  Move         r15, r14
  Const        r16, "id"
  Index        r17, r15, r16
  Index        r18, r11, r17
  Const        r19, nil
  NotEqual     r20, r18, r19
  JumpIfTrue   r20, L3
  MakeList     r21, 0, r0
  SetIndex     r11, r17, r21
L3:
  Index        r18, r11, r17
  Append       r22, r18, r14
  SetIndex     r11, r17, r22
  Const        r23, 1
  AddInt       r12, r12, r23
  Jump         L4
L2:
  // let result = from o in orders
  Const        r24, 0
L7:
  LessInt      r25, r24, r4
  JumpIfFalse  r25, L0
  Index        r27, r3, r24
  // join from c in customers on o.customerId == c.id
  Const        r28, "customerId"
  Index        r29, r27, r28
  // let result = from o in orders
  Index        r30, r11, r29
  Const        r31, nil
  NotEqual     r32, r30, r31
  JumpIfFalse  r32, L5
  Len          r33, r30
  Const        r34, 0
L6:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L5
  Index        r15, r30, r34
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r37, "orderId"
  Index        r38, r27, r16
  Const        r39, "customerName"
  Const        r40, "name"
  Index        r41, r15, r40
  Const        r42, "total"
  Const        r43, "total"
  Index        r44, r27, r43
  Move         r45, r37
  Move         r46, r38
  Move         r47, r39
  Move         r48, r41
  Move         r49, r42
  Move         r50, r44
  MakeMap      r51, 3, r45
  // let result = from o in orders
  Append       r2, r2, r51
  AddInt       r34, r34, r23
  Jump         L6
L5:
  AddInt       r24, r24, r23
  Jump         L7
L0:
  Jump         L8
L1:
  MakeMap      r53, 0, r0
  Const        r54, 0
L11:
  LessInt      r55, r54, r4
  JumpIfFalse  r55, L9
  Index        r56, r3, r54
  // join from c in customers on o.customerId == c.id
  Index        r57, r56, r28
  // let result = from o in orders
  Index        r58, r53, r57
  Const        r59, nil
  NotEqual     r60, r58, r59
  JumpIfTrue   r60, L10
  MakeList     r61, 0, r0
  SetIndex     r53, r57, r61
L10:
  Index        r58, r53, r57
  Append       r62, r58, r56
  SetIndex     r53, r57, r62
  AddInt       r54, r54, r23
  Jump         L11
L9:
  // join from c in customers on o.customerId == c.id
  Const        r63, 0
L15:
  LessInt      r64, r63, r6
  JumpIfFalse  r64, L12
  Index        r15, r5, r63
  Index        r66, r15, r16
  Index        r67, r53, r66
  Const        r68, nil
  NotEqual     r69, r67, r68
  JumpIfFalse  r69, L13
  Len          r70, r67
  Const        r71, 0
L14:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L13
  Index        r27, r67, r71
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r74, "orderId"
  Index        r75, r27, r16
  Const        r76, "customerName"
  Index        r77, r15, r40
  Const        r78, "total"
  Index        r79, r27, r43
  Move         r80, r74
  Move         r81, r75
  Move         r82, r76
  Move         r83, r77
  Move         r84, r78
  Move         r85, r79
  MakeMap      r86, 3, r80
  // let result = from o in orders
  Append       r2, r2, r86
  // join from c in customers on o.customerId == c.id
  AddInt       r71, r71, r23
  Jump         L14
L13:
  AddInt       r63, r63, r23
  Jump         L15
L12:
  // print("--- Orders with customer info ---")
  Const        r88, "--- Orders with customer info ---"
  Print        r88
  // for entry in result {
  IterPrep     r89, r2
  Len          r90, r89
  Const        r91, 0
L17:
  Less         r92, r91, r90
  JumpIfFalse  r92, L16
  Index        r94, r89, r91
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r95, "Order"
  Const        r102, "orderId"
  Index        r96, r94, r102
  Const        r97, "by"
  Const        r105, "customerName"
  Index        r98, r94, r105
  Const        r99, "- $"
  Index        r100, r94, r43
  PrintN       r95, 6, r95
  // for entry in result {
  Const        r109, 1
  Add          r91, r91, r109
  Jump         L17
L16:
  Return       r0
