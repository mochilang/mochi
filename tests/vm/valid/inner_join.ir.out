func main (regs=65)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Move         r1, r0
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // join from c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r12, r5, r9
  // join from c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r16, r7, r13
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r22, "orderId"
  Const        r23, "id"
  Index        r24, r12, r23
  Const        r25, "customerName"
  Const        r26, "name"
  Index        r27, r16, r26
  MakeMap      r34, 3, r22
  // let result = from o in orders
  Append       r4, r4, r34
L2:
  // join from c in customers on o.customerId == c.id
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Move         r40, r4
  // print("--- Orders with customer info ---")
  Const        r41, "--- Orders with customer info ---"
  Print        r41
  // for entry in result {
  IterPrep     r42, r40
  Len          r43, r42
  Const        r44, 0
L6:
  Less         r45, r44, r43
  JumpIfFalse  r45, L5
  Index        r47, r42, r44
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r48, "Order"
  Const        r55, "orderId"
  Index        r49, r47, r55
  Const        r50, "by"
  Const        r58, "customerName"
  Index        r51, r47, r58
  Const        r52, "- $"
  Const        r61, "total"
  Index        r53, r47, r61
  PrintN       r48, 6, r48
  // for entry in result {
  Const        r63, 1
  Add          r44, r44, r63
  Jump         L6
L5:
  Return       r0
