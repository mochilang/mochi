func main (regs=63)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  Const        r1, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r3, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r4, []
  IterPrep     r5, r3
  Len          r6, r5
  // join from c in customers on o.customerId == c.id
  IterPrep     r7, r1
  Len          r8, r7
  // let result = from o in orders
  Const        r9, 0
L4:
  Less         r10, r9, r6
  JumpIfFalse  r10, L0
  Index        r11, r5, r9
  Move         r12, r11
  // join from c in customers on o.customerId == c.id
  Const        r13, 0
L3:
  Less         r14, r13, r8
  JumpIfFalse  r14, L1
  Index        r15, r7, r13
  Move         r16, r15
  Const        r17, "customerId"
  Index        r18, r12, r17
  Const        r19, "id"
  Index        r20, r16, r19
  Equal        r21, r18, r20
  JumpIfFalse  r21, L2
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r23, "id"
  Index        r24, r12, r23
  Const        r26, "name"
  Index        r27, r16, r26
  Const        r29, "total"
  Index        r30, r12, r29
  Const        r31, "orderId"
  Move         r32, r24
  Const        r33, "customerName"
  Move         r34, r27
  Const        r35, "total"
  Move         r36, r30
  MakeMap      r37, 3, r31
  // let result = from o in orders
  Append       r38, r4, r37
  Move         r4, r38
L2:
  Const        r39, 1
  // join from c in customers on o.customerId == c.id
  AddInt       r13, r13, r39
  Jump         L3
L1:
  // let result = from o in orders
  Jump         L4
L0:
  Move         r40, r4
  // print("--- Orders with customer info ---")
  Const        r41, "--- Orders with customer info ---"
  Print        r41
  // for entry in result {
  IterPrep     r42, r40
  Len          r43, r42
  Const        r44, 0
L6:
  Less         r45, r44, r43
  JumpIfFalse  r45, L5
  Index        r46, r42, r44
  Move         r47, r46
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r48, "Order"
  Const        r55, "orderId"
  Index        r56, r47, r55
  Move         r49, r56
  Const        r50, "by"
  Const        r58, "customerName"
  Index        r59, r47, r58
  Move         r51, r59
  Const        r52, "- $"
  Const        r61, "total"
  Index        r62, r47, r61
  Move         r53, r62
  PrintN       r48, 6, r48
  // for entry in result {
  AddInt       r44, r44, r39
  Jump         L6
L5:
  Return       r0
