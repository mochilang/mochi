func main (regs=23)
L7:
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r1, r3
L4:
  // join from c in customers on o.customerId == c.id
  IterPrep     r4, r0
  Len          r5, r4
L5:
  // let result = from o in orders
  Const        r6, 0
L1:
  EqualInt     r7, r1, r6
L12:
  JumpIfTrue   r7, L0
L3:
  EqualInt     r7, r5, r6
L2:
  JumpIfTrue   r7, L0
  LessEq       r7, r5, r1
  JumpIfFalse  r7, L0
  // join from c in customers on o.customerId == c.id
  MakeMap      r7, 0, r0
L6:
  Const        r6, 0
L9:
  LessInt      r8, r6, r5
  JumpIfFalse  r8, L1
  Index        r8, r4, r6
  Move         r9, r8
  Const        r10, "id"
L0:
  Index        r11, r9, r10
  Index        r12, r7, r11
  Const        r13, nil
  NotEqual     r14, r12, r13
  JumpIfTrue   r14, L2
  MakeList     r14, 0, r0
  SetIndex     r7, r11, r14
  Index        r12, r7, r11
  Append       r14, r12, r8
  SetIndex     r7, r11, r14
  Const        r14, 1
  AddInt       r6, r6, r14
  Jump         L3
  // let result = from o in orders
  Const        r6, 0
  LessInt      r12, r6, r1
  JumpIfFalse  r12, L0
  Index        r12, r3, r6
  // join from c in customers on o.customerId == c.id
  Const        r11, "customerId"
  Index        r8, r12, r11
  // let result = from o in orders
  Index        r13, r7, r8
  Const        r8, nil
  NotEqual     r7, r13, r8
  JumpIfFalse  r7, L4
  Len          r7, r13
  Const        r8, 0
  LessInt      r15, r8, r7
  JumpIfFalse  r15, L4
  Index        r9, r13, r8
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r7, "orderId"
  Index        r13, r12, r10
  Const        r16, "customerName"
  Const        r17, "name"
  Index        r18, r9, r17
  Const        r19, "total"
  Const        r20, "total"
  Index        r21, r12, r20
  Move         r22, r7
  Move         r7, r13
  Move         r13, r16
  Move         r16, r18
  Move         r18, r19
  Move         r19, r21
  MakeMap      r21, 3, r22
  // let result = from o in orders
  Append       r2, r2, r21
  AddInt       r8, r8, r14
  Jump         L5
  AddInt       r6, r6, r14
  Jump         L6
  Jump         L7
  MakeMap      r21, 0, r0
  Const        r19, 0
  LessInt      r18, r19, r1
  JumpIfFalse  r18, L8
  Index        r18, r3, r19
  // join from c in customers on o.customerId == c.id
  Index        r3, r18, r11
  // let result = from o in orders
  Index        r11, r21, r3
  Const        r1, nil
  NotEqual     r16, r11, r1
  JumpIfTrue   r16, L4
  MakeList     r16, 0, r0
  SetIndex     r21, r3, r16
  Index        r11, r21, r3
  Append       r16, r11, r18
  SetIndex     r21, r3, r16
  AddInt       r19, r19, r14
  Jump         L9
L8:
  // join from c in customers on o.customerId == c.id
  Const        r11, 0
  LessInt      r3, r11, r5
  JumpIfFalse  r3, L10
  Index        r9, r4, r11
  Index        r3, r9, r10
  Index        r5, r21, r3
  Const        r3, nil
  NotEqual     r21, r5, r3
  JumpIfFalse  r21, L11
  Len          r21, r5
  Const        r3, 0
  LessInt      r16, r3, r21
  JumpIfFalse  r16, L11
  Index        r12, r5, r3
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r21, "orderId"
  Index        r5, r12, r10
  Const        r10, "customerName"
  Index        r16, r9, r17
  Const        r17, "total"
  Index        r9, r12, r20
  Move         r12, r21
  Move         r21, r5
  Move         r5, r10
  Move         r10, r16
  Move         r16, r17
  Move         r17, r9
  MakeMap      r9, 3, r12
  // let result = from o in orders
  Append       r2, r2, r9
  // join from c in customers on o.customerId == c.id
  AddInt       r3, r3, r14
  Jump         L12
L11:
  AddInt       r11, r11, r14
  Jump         L2
L10:
  // print("--- Orders with customer info ---")
  Const        r11, "--- Orders with customer info ---"
  Print        r11
  // for entry in result {
  IterPrep     r11, r2
  Len          r2, r11
  Const        r14, 0
L14:
  Less         r17, r14, r2
  JumpIfFalse  r17, L13
  Index        r17, r11, r14
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r11, "Order"
  Const        r2, "orderId"
  Index        r16, r17, r2
  Const        r2, "by"
  Const        r10, "customerName"
  Index        r9, r17, r10
  Const        r10, "- $"
  Index        r5, r17, r20
  PrintN       r11, 5, r11
  // for entry in result {
  Const        r5, 1
  Add          r14, r14, r5
  Jump         L14
L13:
  Return       r0
