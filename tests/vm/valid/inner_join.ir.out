func main (regs=28)
L0:
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
L5:
  IterPrep     r3, r1
  Len          r1, r3
  // join from c in customers on o.customerId == c.id
  IterPrep     r4, r0
  Len          r5, r4
L2:
  // let result = from o in orders
  Const        r6, 0
  EqualInt     r7, r1, r6
  JumpIfTrue   r7, L0
  EqualInt     r7, r5, r6
L4:
  JumpIfTrue   r7, L0
L3:
  LessEq       r7, r5, r1
L9:
  JumpIfFalse  r7, L1
L10:
  // join from c in customers on o.customerId == c.id
  MakeMap      r7, 0, r0
  Move         r8, r6
  LessInt      r9, r8, r5
L7:
  JumpIfFalse  r9, L2
  Index        r9, r4, r8
L8:
  Move         r10, r9
  Const        r11, "id"
L13:
  Index        r12, r10, r11
  Index        r13, r7, r12
  Const        r14, nil
L6:
  NotEqual     r15, r13, r14
  JumpIfTrue   r15, L3
  MakeList     r15, 0, r0
  SetIndex     r7, r12, r15
  Index        r13, r7, r12
  Append       r15, r13, r9
  SetIndex     r7, r12, r15
  Const        r15, 1
  AddInt       r8, r8, r15
  Jump         L4
  // let result = from o in orders
  Move         r8, r6
  LessInt      r13, r8, r1
  JumpIfFalse  r13, L0
  Index        r13, r3, r8
  // join from c in customers on o.customerId == c.id
  Const        r12, "customerId"
  Index        r9, r13, r12
  // let result = from o in orders
  Index        r16, r7, r9
  NotEqual     r9, r16, r14
  JumpIfFalse  r9, L5
  Len          r9, r16
  Move         r7, r8
  LessInt      r17, r7, r9
  JumpIfFalse  r17, L5
  Index        r10, r16, r7
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r9, "orderId"
  Index        r16, r13, r11
  Const        r18, "customerName"
  Const        r19, "name"
  Index        r20, r10, r19
  Const        r21, "total"
  Move         r22, r21
  Index        r23, r13, r22
  Move         r24, r9
  Move         r25, r16
  Move         r16, r18
  Move         r26, r20
  Move         r20, r21
  Move         r27, r23
  MakeMap      r23, 3, r24
  // let result = from o in orders
  Append       r2, r2, r23
  AddInt       r7, r7, r15
  Jump         L6
  AddInt       r8, r8, r15
  Jump         L7
L1:
  MakeMap      r23, 0, r0
  Move         r27, r6
  LessInt      r20, r27, r1
  JumpIfFalse  r20, L8
  Index        r20, r3, r27
  // join from c in customers on o.customerId == c.id
  Index        r3, r20, r12
  // let result = from o in orders
  Index        r12, r23, r3
  Move         r1, r14
  NotEqual     r14, r12, r1
  JumpIfTrue   r14, L9
  MakeList     r14, 0, r0
  SetIndex     r23, r3, r14
  Index        r12, r23, r3
  Append       r14, r12, r20
  SetIndex     r23, r3, r14
  AddInt       r27, r27, r15
  Jump         L10
  // join from c in customers on o.customerId == c.id
  Move         r12, r6
  LessInt      r3, r12, r5
  JumpIfFalse  r3, L11
  Index        r10, r4, r12
  Index        r3, r10, r11
  Index        r5, r23, r3
  NotEqual     r3, r5, r1
  JumpIfFalse  r3, L12
  Len          r14, r5
  Move         r3, r12
  LessInt      r1, r3, r14
  JumpIfFalse  r1, L12
  Index        r13, r5, r3
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Move         r1, r9
  Index        r5, r13, r11
  Move         r11, r18
  Index        r14, r10, r19
  Move         r19, r21
  Index        r21, r13, r22
  Move         r13, r1
  Move         r1, r5
  Move         r5, r11
  Move         r11, r14
  Move         r14, r19
  Move         r19, r21
  MakeMap      r21, 3, r13
  // let result = from o in orders
  Append       r2, r2, r21
  // join from c in customers on o.customerId == c.id
  AddInt       r3, r3, r15
  Jump         L8
L12:
  AddInt       r12, r12, r15
  Jump         L13
L11:
  // print("--- Orders with customer info ---")
  Const        r21, "--- Orders with customer info ---"
  Print        r21
  // for entry in result {
  IterPrep     r21, r2
  Len          r2, r21
  Move         r12, r6
L15:
  Less         r6, r12, r2
  JumpIfFalse  r6, L14
  Index        r6, r21, r12
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r19, "Order"
  Index        r21, r6, r9
  Const        r9, "by"
  Index        r2, r6, r18
  Const        r18, "- $"
  Index        r14, r6, r22
  PrintN       r19, 5, r19
  // for entry in result {
  Add          r12, r12, r15
  Jump         L15
L14:
  Return       r0
