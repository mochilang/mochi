func main (regs=54)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // join from c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  // let result = from o in orders
  Const        r7, 0
L4:
  Less         r8, r7, r4
  JumpIfFalse  r8, L0
  Index        r10, r3, r7
  // join from c in customers on o.customerId == c.id
  Const        r11, 0
L3:
  Less         r12, r11, r6
  JumpIfFalse  r12, L1
  Index        r14, r5, r11
  Const        r15, "customerId"
  Index        r16, r10, r15
  Const        r17, "id"
  Index        r18, r14, r17
  Equal        r19, r16, r18
  JumpIfFalse  r19, L2
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r20, "orderId"
  Index        r21, r10, r17
  Const        r22, "customerName"
  Const        r23, "name"
  Index        r24, r14, r23
  Const        r25, "total"
  MakeMap      r30, 3, r20
  // let result = from o in orders
  Append       r2, r2, r30
L2:
  // join from c in customers on o.customerId == c.id
  Const        r32, 1
  Add          r11, r11, r32
  Jump         L3
L1:
  // let result = from o in orders
  Add          r7, r7, r32
  Jump         L4
L0:
  // print("--- Orders with customer info ---")
  Const        r33, "--- Orders with customer info ---"
  Print        r33
  // for entry in result {
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L6:
  Less         r37, r36, r35
  JumpIfFalse  r37, L5
  Index        r39, r34, r36
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r40, "Order"
  Index        r41, r39, r20
  Const        r42, "by"
  Index        r43, r39, r22
  Const        r44, "- $"
  Index        r45, r39, r25
  PrintN       r40, 6, r40
  // for entry in result {
  Const        r52, 1
  Add          r36, r36, r52
  Jump         L6
L5:
  Return       r0
