func main (regs=54)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}, {"id": 3, "name": "Charlie"}]
  // let orders = [
  Const        r1, [{"customerId": 1, "id": 100, "total": 250}, {"customerId": 2, "id": 101, "total": 125}, {"customerId": 1, "id": 102, "total": 300}, {"customerId": 4, "id": 103, "total": 80}]
  // let result = from o in orders
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // join from c in customers on o.customerId == c.id
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, "customerId"
  Const        r8, "id"
  // select { orderId: o.id, customerName: c.name, total: o.total }
  Const        r9, "orderId"
  Const        r10, "customerName"
  Const        r11, "name"
  Const        r12, "total"
  // let result = from o in orders
  Const        r13, 0
L4:
  LessInt      r14, r13, r4
  JumpIfFalse  r14, L0
  Index        r16, r3, r13
  // join from c in customers on o.customerId == c.id
  Const        r17, 0
L3:
  LessInt      r18, r17, r6
  JumpIfFalse  r18, L1
  Index        r20, r5, r17
  Index        r21, r16, r7
  Index        r22, r20, r8
  Equal        r23, r21, r22
  JumpIfFalse  r23, L2
  // select { orderId: o.id, customerName: c.name, total: o.total }
  MakeMap      r30, 3, r9
  // let result = from o in orders
  Append       r2, r2, r30
L2:
  // join from c in customers on o.customerId == c.id
  Const        r32, 1
  AddInt       r17, r17, r32
  Jump         L3
L1:
  // let result = from o in orders
  AddInt       r13, r13, r32
  Jump         L4
L0:
  // print("--- Orders with customer info ---")
  Const        r33, "--- Orders with customer info ---"
  Print        r33
  // for entry in result {
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L6:
  Less         r37, r36, r35
  JumpIfFalse  r37, L5
  Index        r39, r34, r36
  // print("Order", entry.orderId, "by", entry.customerName, "- $", entry.total)
  Const        r40, "Order"
  Index        r41, r39, r9
  Const        r42, "by"
  Index        r43, r39, r10
  Const        r44, "- $"
  Index        r45, r39, r12
  PrintN       r40, 6, r40
  // for entry in result {
  Const        r52, 1
  Add          r36, r36, r52
  Jump         L6
L5:
  Return       r0
