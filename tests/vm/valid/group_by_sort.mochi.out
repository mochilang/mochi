let items: list<map<string, any>> = [{"cat": "a", "val": 3}, {"cat": "a", "val": 1}, {"cat": "b", "val": 5}, {"cat": "b", "val": 2}]
let grouped: list<map<string, any>> = (() {
let groups = <String,_Group>{}
let order = <String>[]
let key = i["cat"]
let ks = key.toString()
let g = groups[ks]
let items = [for (var k in order) groups[k]!]
let g = gA
let keyA = -_sum((() {
let _res = []
let _res: return
let keyB = -_sum((() {
let _res = []
let _res: return
let _res = []
let _res = []
let _res: return
let _res: return
type _Group {
  key
}
fun main() {
  print(grouped)
}
fun _sum(v: any): float {
  let list: list<any>
  if (v is List) list = v
  else if (v is Map && v['items'] is List) list = (v['items'] as List)
  else if (v is Map && v['Items'] is List) list = (v['Items'] as List)
  else if (v is _Group) list = v.Items
  else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
  if (list == null || list.isEmpty) return 0
  let s = 0.0
  for (var n in list) s += (n as num).toDouble()
  return s
}
