func main (regs=17)
  // let people = [
  Const        r0, [{"age": 30, "name": "Alice"}, {"age": 15, "name": "Bob"}, {"age": 65, "name": "Charlie"}, {"age": 45, "name": "Diana"}]
L5:
  // let adults = from person in people
  Const        r1, []
L4:
  // where person.age >= 18
  Const        r2, "age"
  // name: person.name,
  Const        r3, "name"
  // is_senior: person.age >= 60
  Const        r4, "is_senior"
  // let adults = from person in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L0:
  Move         r8, r7
L1:
  LessInt      r9, r8, r6
  JumpIfFalse  r9, L0
  Index        r6, r5, r8
  // where person.age >= 18
  Index        r5, r6, r2
  Const        r10, 18
  LessEq       r11, r10, r5
  JumpIfFalse  r11, L1
  // name: person.name,
  Move         r11, r3
  Index        r10, r6, r3
  // age: person.age,
  Move         r5, r2
  Index        r12, r6, r2
  // is_senior: person.age >= 60
  Move         r13, r4
  Index        r14, r6, r2
  Const        r15, 60
  LessEq       r16, r15, r14
  // name: person.name,
  Move         r15, r11
  Move         r11, r10
  // age: person.age,
  Move         r10, r5
  Move         r5, r12
  // is_senior: person.age >= 60
  Move         r12, r13
  Move         r13, r16
  // select {
  MakeMap      r16, 3, r15
  // let adults = from person in people
  Append       r1, r1, r16
  Const        r16, 1
  AddInt       r8, r8, r16
  Jump         L1
  // print("--- Adults ---")
  Const        r9, "--- Adults ---"
  Print        r9
  // for person in adults {
  IterPrep     r9, r1
  Len          r1, r9
  Move         r8, r7
  Less         r7, r8, r1
  JumpIfFalse  r7, L2
  Index        r6, r9, r8
  // print(person.name, "is", person.age,
  Index        r7, r6, r3
  Const        r3, "is"
  Index        r1, r6, r2
  // if person.is_senior { " (senior)" } else { "" })
  Index        r2, r6, r4
  JumpIfFalse  r2, L3
  Jump         L4
L3:
  Const        r2, ""
  // print(person.name, "is", person.age,
  PrintN       r7, 4, r7
  // for person in adults {
  Add          r8, r8, r16
  Jump         L5
L2:
  Return       r0
