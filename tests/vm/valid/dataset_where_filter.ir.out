func main (regs=54)
  // let people = [
  Const        r0, [{"age": 30, "name": "Alice"}, {"age": 15, "name": "Bob"}, {"age": 65, "name": "Charlie"}, {"age": 45, "name": "Diana"}]
  Move         r1, r0
  // let adults = from person in people
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // where person.age >= 18
  Const        r9, "age"
  Index        r10, r8, r9
  Const        r11, 18
  LessEq       r12, r11, r10
  JumpIfFalse  r12, L1
  // name: person.name,
  Const        r13, "name"
  Const        r14, "name"
  Index        r15, r8, r14
  // age: person.age,
  Const        r16, "age"
  Const        r17, "age"
  Index        r18, r8, r17
  // select {
  MakeMap      r27, 3, r13
  // let adults = from person in people
  Append       r2, r2, r27
L1:
  Const        r29, 1
  Add          r5, r5, r29
  Jump         L2
L0:
  Move         r31, r2
  // print("--- Adults ---")
  Const        r32, "--- Adults ---"
  Print        r32
  // for person in adults {
  IterPrep     r33, r31
  Len          r34, r33
  Const        r35, 0
L6:
  Less         r36, r35, r34
  JumpIfFalse  r36, L3
  Index        r8, r33, r35
  // print(person.name, "is", person.age,
  Const        r42, "name"
  Index        r38, r8, r42
  Const        r39, "is"
  Const        r45, "age"
  Index        r40, r8, r45
  // if person.is_senior { " (senior)" } else { "" })
  Const        r47, "is_senior"
  Index        r48, r8, r47
  JumpIfFalse  r48, L4
  Jump         L5
L4:
  Const        r41, ""
L5:
  // print(person.name, "is", person.age,
  PrintN       r38, 4, r38
  // for person in adults {
  Jump         L6
L3:
  Return       r0
