func main (regs=52)
  // let people = [
  Const        r0, [{"age": 30, "name": "Alice"}, {"age": 15, "name": "Bob"}, {"age": 65, "name": "Charlie"}, {"age": 45, "name": "Diana"}]
  // let adults = from person in people
  Const        r1, []
  IterPrep     r2, r0
  Len          r3, r2
  Const        r4, 0
L2:
  Less         r5, r4, r3
  JumpIfFalse  r5, L0
  Index        r7, r2, r4
  // where person.age >= 18
  Const        r8, "age"
  Index        r9, r7, r8
  Const        r10, 18
  LessEq       r11, r10, r9
  JumpIfFalse  r11, L1
  // name: person.name,
  Const        r12, "name"
  Const        r13, "name"
  Index        r14, r7, r13
  // age: person.age,
  Const        r15, "age"
  Const        r16, "age"
  Index        r17, r7, r16
  // select {
  MakeMap      r26, 3, r12
  // let adults = from person in people
  Append       r1, r1, r26
L1:
  Const        r28, 1
  Add          r4, r4, r28
  Jump         L2
L0:
  // print("--- Adults ---")
  Const        r30, "--- Adults ---"
  Print        r30
  // for person in adults {
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, 0
L6:
  Less         r34, r33, r32
  JumpIfFalse  r34, L3
  Index        r7, r31, r33
  // print(person.name, "is", person.age,
  Const        r40, "name"
  Index        r36, r7, r40
  Const        r37, "is"
  Const        r43, "age"
  Index        r38, r7, r43
  // if person.is_senior { " (senior)" } else { "" })
  Const        r45, "is_senior"
  Index        r46, r7, r45
  JumpIfFalse  r46, L4
  Jump         L5
L4:
  Const        r39, ""
L5:
  // print(person.name, "is", person.age,
  PrintN       r36, 4, r36
  // for person in adults {
  Jump         L6
L3:
  Return       r0
