func main (regs=48)
  // let people = [
  Const        r0, [{"age": 30, "name": "Alice"}, {"age": 15, "name": "Bob"}, {"age": 65, "name": "Charlie"}, {"age": 45, "name": "Diana"}]
  // let adults = from person in people
  Const        r1, []
  // where person.age >= 18
  Const        r2, "age"
  // name: person.name,
  Const        r3, "name"
  // is_senior: person.age >= 60
  Const        r4, "is_senior"
  // let adults = from person in people
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L2:
  LessInt      r9, r7, r6
  JumpIfFalse  r9, L0
  Index        r11, r5, r7
  // where person.age >= 18
  Index        r12, r11, r2
  Const        r13, 18
  LessEq       r14, r13, r12
  JumpIfFalse  r14, L1
  // name: person.name,
  Const        r15, "name"
  Index        r16, r11, r3
  // age: person.age,
  Const        r17, "age"
  Index        r18, r11, r2
  // is_senior: person.age >= 60
  Const        r19, "is_senior"
  Index        r20, r11, r2
  // select {
  MakeMap      r26, 3, r15
  // let adults = from person in people
  Append       r1, r1, r26
L1:
  Const        r28, 1
  AddInt       r7, r7, r28
  Jump         L2
L0:
  // print("--- Adults ---")
  Const        r29, "--- Adults ---"
  Print        r29
  // for person in adults {
  IterPrep     r30, r1
  Len          r31, r30
  Const        r32, 0
L6:
  Less         r33, r32, r31
  JumpIfFalse  r33, L3
  Index        r11, r30, r32
  // print(person.name, "is", person.age,
  Index        r35, r11, r3
  Const        r36, "is"
  Index        r37, r11, r2
  // if person.is_senior { " (senior)" } else { "" })
  Index        r42, r11, r4
  JumpIfFalse  r42, L4
  Jump         L5
L4:
  Const        r38, ""
L5:
  // print(person.name, "is", person.age,
  PrintN       r35, 4, r35
  // for person in adults {
  Jump         L6
L3:
  Return       r0
