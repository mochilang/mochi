let people: list<map<string, string>> = [{"name": "Alice", "city": "Paris"}, {"name": "Bob", "city": "Hanoi"}, {"name": "Charlie", "city": "Paris"}, {"name": "Diana", "city": "Hanoi"}, {"name": "Eve", "city": "Paris"}, {"name": "Frank", "city": "Hanoi"}, {"name": "George", "city": "Paris"}]
let big: list<map<string, any>> = _group_by(people, (p) => p["city"]).map((g) => {"city": g.key, "num": _count(g)}).toList()
let groups = <String,_Group>{}
let order = <String>[]
let key = keyfn(it)
let ks = key.toString()
let g = groups[ks]
type _Group {
  key
}
fun main() {
  _json(big)
}
fun _count(v: any): int {
  if (v is String) return v.runes.length
  if (v is List) return v.length
  if (v is Map) return v.length
  try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
  try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
  return 0
}
fun _json(v: any) {
  print(jsonEncode(v))
}
