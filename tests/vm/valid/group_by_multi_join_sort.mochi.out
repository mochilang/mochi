let nation: list<map<string, any>> = [{"n_nationkey": 1, "n_name": "BRAZIL"}]
let customer: list<map<string, any>> = [{"c_custkey": 1, "c_name": "Alice", "c_acctbal": 100, "c_nationkey": 1, "c_address": "123 St", "c_phone": "123-456", "c_comment": "Loyal"}]
let orders: list<map<string, any>> = [{"o_orderkey": 1000, "o_custkey": 1, "o_orderdate": "1993-10-15"}, {"o_orderkey": 2000, "o_custkey": 1, "o_orderdate": "1994-01-02"}]
let lineitem: list<map<string, any>> = [{"l_orderkey": 1000, "l_returnflag": "R", "l_extendedprice": 1000, "l_discount": 0.1}, {"l_orderkey": 2000, "l_returnflag": "N", "l_extendedprice": 500, "l_discount": 0}]
let start_date: string = "1993-10-01"
let end_date: string = "1994-01-01"
let result: list<map<string, any>> = (() {
let groups = <String,_Group>{}
let order = <String>[]
let key = {"c_custkey": c["c_custkey"], "c_name": c["c_name"], "c_acctbal": c["c_acctbal"], "c_address": c["c_address"], "c_phone": c["c_phone"], "c_comment": c["c_comment"], "n_name": n["n_name"]}
let ks = key.toString()
let g = groups[ks]
let items = [for (var k in order) groups[k]!]
let g = gA
let keyA = -_sum((() {
let _res = []
let _res: return
let keyB = -_sum((() {
let _res = []
let _res: return
let _res = []
let _res = []
let _res: return
let _res: return
type _Group {
  key
}
fun main() {
  print(result)
}
fun _equal(a: any, b: any): bool {
  if (a is List && b is List) {
    if (a.length != b.length) return false
    for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true
  }
  if (a is Map && b is Map) {
    if (a.length != b.length) return false
    for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
    return true
  }
  return a == b
}
fun _sum(v: any): float {
  let list: list<any>
  if (v is List) list = v
  else if (v is Map && v['items'] is List) list = (v['items'] as List)
  else if (v is Map && v['Items'] is List) list = (v['Items'] as List)
  else if (v is _Group) list = v.Items
  else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
  if (list == null || list.isEmpty) return 0
  let s = 0.0
  for (var n in list) s += (n as num).toDouble()
  return s
}
