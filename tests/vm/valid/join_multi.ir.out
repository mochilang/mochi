func main (regs=64)
  // let customers = [
  Const        r0, [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]
  Move         r1, r0
  // let orders = [
  Const        r2, [{"customerId": 1, "id": 100}, {"customerId": 2, "id": 101}]
  Move         r3, r2
  // let items = [
  Const        r4, [{"orderId": 100, "sku": "a"}, {"orderId": 101, "sku": "b"}]
  Move         r5, r4
  // let result = from o in orders
  Const        r6, []
  // select { name: c.name, sku: i.sku }
  Const        r7, "name"
  Const        r7, "name"
  Const        r8, "sku"
  Const        r8, "sku"
  // let result = from o in orders
  IterPrep     r9, r3
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L6:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r14, r9, r11
  Move         r15, r14
  // join from c in customers on o.customerId == c.id
  IterPrep     r16, r1
  Len          r17, r16
  Const        r18, "customerId"
  Const        r19, "id"
  // select { name: c.name, sku: i.sku }
  Const        r7, "name"
  Const        r7, "name"
  Const        r8, "sku"
  Const        r8, "sku"
  // join from c in customers on o.customerId == c.id
  Const        r12, 0
  Move         r20, r12
L5:
  LessInt      r21, r20, r17
  JumpIfFalse  r21, L1
  Index        r22, r16, r20
  Move         r23, r22
  Const        r18, "customerId"
  Index        r24, r15, r18
  Const        r19, "id"
  Index        r25, r23, r19
  Equal        r26, r24, r25
  JumpIfFalse  r26, L2
  // join from i in items on o.id == i.orderId
  IterPrep     r27, r5
  Len          r28, r27
  Const        r19, "id"
  Const        r29, "orderId"
  // select { name: c.name, sku: i.sku }
  Const        r7, "name"
  Const        r7, "name"
  Const        r8, "sku"
  Const        r8, "sku"
  // join from i in items on o.id == i.orderId
  Const        r12, 0
  Move         r30, r12
L4:
  LessInt      r31, r30, r28
  JumpIfFalse  r31, L2
  Index        r32, r27, r30
  Move         r33, r32
  Const        r19, "id"
  Index        r34, r15, r19
  Const        r29, "orderId"
  Index        r35, r33, r29
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // select { name: c.name, sku: i.sku }
  Const        r37, "name"
  Const        r7, "name"
  Index        r38, r23, r7
  Const        r39, "sku"
  Const        r8, "sku"
  Index        r40, r33, r8
  Move         r41, r37
  Move         r42, r38
  Move         r43, r39
  Move         r44, r40
  MakeMap      r45, 2, r41
  // let result = from o in orders
  Append       r46, r6, r45
  Move         r6, r46
L3:
  // join from i in items on o.id == i.orderId
  Const        r47, 1
  Add          r30, r30, r47
  Jump         L4
L2:
  // join from c in customers on o.customerId == c.id
  Const        r47, 1
  Add          r20, r20, r47
  Jump         L5
L1:
  // let result = from o in orders
  Const        r47, 1
  AddInt       r11, r11, r47
  Jump         L6
L0:
  Move         r48, r6
  // print("--- Multi Join ---")
  Const        r49, "--- Multi Join ---"
  Print        r49
  // for r in result {
  IterPrep     r50, r48
  Len          r51, r50
  Const        r52, 0
L8:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L7
  Index        r54, r50, r52
  Move         r55, r54
  // print(r.name, "bought item", r.sku)
  Const        r7, "name"
  Index        r59, r55, r7
  Move         r56, r59
  Const        r60, "bought item"
  Move         r57, r60
  Const        r8, "sku"
  Index        r61, r55, r8
  Move         r58, r61
  PrintN       r56, 3, r56
  // for r in result {
  Const        r62, 1
  AddInt       r63, r52, r62
  Move         r52, r63
  Jump         L8
L7:
  Return       r0
