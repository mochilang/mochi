// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

type Anon1 = {
    id: int
    name: string
}
type Anon2 = {
    id: int
    nation: int
}
type Anon3 = {
    part: int
    supplier: int
    cost: float
    qty: int
}
type Anon4 = {
    part: int
    value: float
}
type Anon5 = {
    part: obj
    total: obj
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let nations: Anon1 list = [{ id = 1; name = "A" }; { id = 2; name = "B" }]
let suppliers: Anon2 list = [{ id = 1; nation = 1 }; { id = 2; nation = 2 }]
let partsupp: Anon3 list = [{ part = 100; supplier = 1; cost = 10.0; qty = 2 }; { part = 100; supplier = 2; cost = 20.0; qty = 1 }; { part = 200; supplier = 1; cost = 5.0; qty = 3 }]
let filtered: Anon4 list = [ for ps in partsupp do 
  for s in suppliers do 
  for n in nations do if s.id = ps.supplier && n.id = s.nation && n.name = "A" then yield { part = ps.part; value = ps.cost * ps.qty } ]
let grouped: Anon5 list = [ for g in _group_by [ for x in filtered do yield x ] (fun x -> x.part) do
    yield { part = g.key; total = List.sum [ for r in g do yield r.value ] } ]
printfn "%A" grouped
