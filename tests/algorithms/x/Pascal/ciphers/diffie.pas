{$mode objfpc}
program Main;
uses SysUtils;
type IntArray = array of integer;
var _nowSeed: int64 = 0;
var _nowSeeded: boolean = false;
procedure init_now();
var s: string; v: int64;
begin
  s := GetEnvironmentVariable('MOCHI_NOW_SEED');
  if s <> '' then begin
    Val(s, v);
    _nowSeed := v;
    _nowSeeded := true;
  end;
end;
function _now(): integer;
begin
  if _nowSeeded then begin
    _nowSeed := (_nowSeed * 1664525 + 1013904223) mod 2147483647;
    _now := _nowSeed;
  end else begin
    _now := Integer(GetTickCount64()*1000);
  end;
end;
function _bench_now(): int64;
begin
  _bench_now := GetTickCount64()*1000;
end;
function _mem(): int64;
var h: TFPCHeapStatus;
begin
  h := GetFPCHeapStatus;
  _mem := h.CurrHeapUsed;
end;
procedure panic(msg: string);
begin
  writeln(msg);
  halt(1);
end;
var
  bench_start_0: integer;
  bench_dur_0: integer;
  bench_mem_0: int64;
  bench_memdiff_0: int64;
  prime: integer;
  primitive_root: integer;
  a_private: integer;
  b_private: integer;
  a_public: integer;
  b_public: integer;
  a_secret: integer;
  b_secret: integer;
  exp: integer;
  modulus: integer;
  xs: IntArray;
  base: integer;
  mod_: integer;
  val: integer;
function mod_pow(base: integer; exp: integer; mod_: integer): integer; forward;
function contains(xs: IntArray; val: integer): boolean; forward;
function find_primitive(modulus: integer): integer; forward;
function mod_pow(base: integer; exp: integer; mod_: integer): integer;
var
  mod_pow_result_: integer;
  mod_pow_b: integer;
  mod_pow_e: integer;
begin
  mod_pow_result_ := 1;
  mod_pow_b := base mod mod_;
  mod_pow_e := exp;
  while mod_pow_e > 0 do begin
  if (mod_pow_e mod 2) = 1 then begin
  mod_pow_result_ := (mod_pow_result_ * mod_pow_b) mod mod_;
end;
  mod_pow_e := mod_pow_e div 2;
  mod_pow_b := (mod_pow_b * mod_pow_b) mod mod_;
end;
  exit(mod_pow_result_);
end;
function contains(xs: IntArray; val: integer): boolean;
var
  contains_i: integer;
begin
  contains_i := 0;
  while contains_i < Length(xs) do begin
  if xs[contains_i] = val then begin
  exit(true);
end;
  contains_i := contains_i + 1;
end;
  exit(false);
end;
function find_primitive(modulus: integer): integer;
var
  find_primitive_r: integer;
  find_primitive_li: array of integer;
  find_primitive_x: integer;
  find_primitive_valid: boolean;
  find_primitive_value: integer;
begin
  find_primitive_r := 1;
  while find_primitive_r < modulus do begin
  find_primitive_li := [];
  find_primitive_x := 0;
  find_primitive_valid := true;
  while (find_primitive_x < (modulus - 1)) and find_primitive_valid do begin
  find_primitive_value := mod_pow(find_primitive_r, find_primitive_x, modulus);
  if contains(find_primitive_li, find_primitive_value) then begin
  find_primitive_valid := false;
end else begin
  find_primitive_li := concat(find_primitive_li, IntArray([find_primitive_value]));
  find_primitive_x := find_primitive_x + 1;
end;
end;
  if find_primitive_valid then begin
  exit(find_primitive_r);
end;
  find_primitive_r := find_primitive_r + 1;
end;
  exit(-1);
end;
begin
  init_now();
  bench_mem_0 := _mem();
  bench_start_0 := _bench_now();
  writeln(find_primitive(7));
  writeln(find_primitive(11));
  writeln(find_primitive(8));
  prime := 23;
  primitive_root := find_primitive(prime);
  if primitive_root = (0 - 1) then begin
  writeln('Cannot find the primitive for the value: -1');
end else begin
  a_private := 6;
  b_private := 15;
  a_public := mod_pow(primitive_root, a_private, prime);
  b_public := mod_pow(primitive_root, b_private, prime);
  a_secret := mod_pow(b_public, a_private, prime);
  b_secret := mod_pow(a_public, b_private, prime);
  writeln('The key value generated by A is: ' + IntToStr(a_secret));
  writeln('The key value generated by B is: ' + IntToStr(b_secret));
end;
  bench_memdiff_0 := _mem() - bench_mem_0;
  bench_dur_0 := (_bench_now() - bench_start_0) div 1000;
  writeln('{');
  writeln(('  "duration_us": ' + IntToStr(bench_dur_0)) + ',');
  writeln(('  "memory_bytes": ' + IntToStr(bench_memdiff_0)) + ',');
  writeln(('  "name": "' + 'main') + '"');
  writeln('}');
end.
