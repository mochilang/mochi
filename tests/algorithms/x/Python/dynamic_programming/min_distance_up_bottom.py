# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def min3(a, b, c):
        m = a
        if b < m:
            m = b
        if c < m:
            m = c
        return m
    def helper(word1, word2, cache, i, j, len1, len2):
        if i >= len1:
            return len2 - j
        if j >= len2:
            return len1 - i
        if cache[i][j] != (0 - 1):
            return cache[i][j]
        diff = 0
        if word1[i:i + 1] != word2[j:j + 1]:
            diff = 1
        delete_cost = 1 + helper(word1, word2, cache, i + 1, j, len1, len2)
        insert_cost = 1 + helper(word1, word2, cache, i, j + 1, len1, len2)
        replace_cost = diff + helper(word1, word2, cache, i + 1, j + 1, len1, len2)
        cache[i][j] = min3(delete_cost, insert_cost, replace_cost)
        return cache[i][j]
    def min_distance_up_bottom(word1, word2):
        len1 = len(word1)
        len2 = len(word2)
        cache = []
        for _ in range(0, len1):
            row = []
            for _2 in range(0, len2):
                row = _append(row, 0 - 1)
            cache = _append(cache, row)
        return helper(word1, word2, cache, 0, 0, len1, len2)
    print(_str(min_distance_up_bottom("intention", "execution")))
    print(_str(min_distance_up_bottom("intention", "")))
    print(_str(min_distance_up_bottom("", "")))
    print(_str(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

