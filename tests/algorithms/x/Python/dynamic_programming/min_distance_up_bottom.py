# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def min3(a, b, c):
    m = a
    if b < m:
        m = b
    if c < m:
        m = c
    return m
def helper(word1, word2, cache, i, j, len1, len2):
    if i >= len1:
        return len2 - j
    if j >= len2:
        return len1 - i
    if cache[i][j] != (0 - 1):
        return cache[i][j]
    diff = 0
    if word1[i:i + 1] != word2[j:j + 1]:
        diff = 1
    delete_cost = 1 + helper(word1, word2, cache, i + 1, j, len1, len2)
    insert_cost = 1 + helper(word1, word2, cache, i, j + 1, len1, len2)
    replace_cost = diff + helper(word1, word2, cache, i + 1, j + 1, len1, len2)
    cache[i][j] = min3(delete_cost, insert_cost, replace_cost)
    return cache[i][j]
def min_distance_up_bottom(word1, word2):
    len1 = len(word1)
    len2 = len(word2)
    cache = []
    for _ in range(0, len1):
        row = []
        for _2 in range(0, len2):
            row = _append(row, 0 - 1)
        cache = _append(cache, row)
    return helper(word1, word2, cache, 0, 0, len1, len2)
print(str(min_distance_up_bottom("intention", "execution")))
print(str(min_distance_up_bottom("intention", "")))
print(str(min_distance_up_bottom("", "")))
print(str(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))
