# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def maximum_non_adjacent_sum(nums):
        if len(nums) == 0:
            return 0
        max_including = nums[0]
        max_excluding = 0
        i = 1
        while i < len(nums):
            num = nums[i]
            new_including = max_excluding + num
            new_excluding = (max_including if max_including > max_excluding else max_excluding)
            max_including = new_including
            max_excluding = new_excluding
            i = i + 1
        if max_including > max_excluding:
            return max_including
        return max_excluding
    print(_str(maximum_non_adjacent_sum([1, 2, 3])))
    print(_str(maximum_non_adjacent_sum([1, 5, 3, 7, 2, 2, 6])))
    print(_str(maximum_non_adjacent_sum([-1, -5, -3, -7, -2, -2, -6])))
    print(_str(maximum_non_adjacent_sum([499, 500, -3, -7, -2, -2, -6])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

