# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class FibPair:
        fn: int
        fn1: int
    def _fib(n):
        if n == 0:
            return FibPair(fn=0, fn1=1)
        half = _fib(n // 2)
        a = half.fn
        b = half.fn1
        c = a * (b * 2 - a)
        d = a * a + b * b
        if n % 2 == 0:
            return FibPair(fn=c, fn1=d)
        return FibPair(fn=d, fn1=c + d)
    def fibonacci(n):
        if n < 0:
            panic("Negative arguments are not supported")
        res = _fib(n)
        return res.fn
    i = 0
    while i < 13:
        print(str(fibonacci(i)))
        i = i + 1
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
