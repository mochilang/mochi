# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def find_min(numbers):
    n = len(numbers)
    s = 0
    idx = 0
    while idx < n:
        s = s + numbers[idx]
        idx = idx + 1
    dp = []
    i = 0
    while i <= n:
        row = []
        j = 0
        while j <= s:
            row = _append(row, False)
            j = j + 1
        dp = _append(dp, row)
        i = i + 1
    i = 0
    while i <= n:
        dp[i][0] = True
        i = i + 1
    j = 1
    while j <= s:
        dp[0][j] = False
        j = j + 1
    i = 1
    while i <= n:
        j = 1
        while j <= s:
            dp[i][j] = dp[i - 1][j]
            if numbers[i - 1] <= j:
                if dp[i - 1][j - numbers[i - 1]]:
                    dp[i][j] = True
            j = j + 1
        i = i + 1
    diff = 0
    j = s // 2
    while j >= 0:
        if dp[n][j]:
            diff = s - 2 * j
            break
        j = j - 1
    return diff
print(str(find_min([1, 2, 3, 4, 5])))
print(str(find_min([5, 5, 5, 5, 5])))
print(str(find_min([5, 5, 5, 5])))
print(str(find_min([3])))
print(str(find_min([])))
print(str(find_min([1, 2, 3, 4])))
print(str(find_min([0, 0, 0, 0])))
print(str(find_min([-1, -5, 5, 1])))
print(str(find_min([9, 9, 9, 9, 9])))
print(str(find_min([1, 5, 10, 3])))
print(str(find_min([-1, 0, 1])))
print(str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])))
