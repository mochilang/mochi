# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def find_min(numbers):
        n = len(numbers)
        s = 0
        idx = 0
        while idx < n:
            s = s + numbers[idx]
            idx = idx + 1
        dp = []
        i = 0
        while i <= n:
            row = []
            j = 0
            while j <= s:
                row = _append(row, False)
                j = j + 1
            dp = _append(dp, row)
            i = i + 1
        i = 0
        while i <= n:
            dp[i][0] = True
            i = i + 1
        j = 1
        while j <= s:
            dp[0][j] = False
            j = j + 1
        i = 1
        while i <= n:
            j = 1
            while j <= s:
                dp[i][j] = dp[i - 1][j]
                if numbers[i - 1] <= j:
                    if dp[i - 1][j - numbers[i - 1]]:
                        dp[i][j] = True
                j = j + 1
            i = i + 1
        diff = 0
        j = s // 2
        while j >= 0:
            if dp[n][j]:
                diff = s - 2 * j
                break
            j = j - 1
        return diff
    print(_str(find_min([1, 2, 3, 4, 5])))
    print(_str(find_min([5, 5, 5, 5, 5])))
    print(_str(find_min([5, 5, 5, 5])))
    print(_str(find_min([3])))
    print(_str(find_min([])))
    print(_str(find_min([1, 2, 3, 4])))
    print(_str(find_min([0, 0, 0, 0])))
    print(_str(find_min([-1, -5, 5, 1])))
    print(_str(find_min([9, 9, 9, 9, 9])))
    print(_str(find_min([1, 5, 10, 3])))
    print(_str(find_min([-1, 0, 1])))
    print(_str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

