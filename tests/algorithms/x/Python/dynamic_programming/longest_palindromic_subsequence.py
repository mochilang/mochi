# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def reverse(s):
    result = ""
    i = len(s) - 1
    while i >= 0:
        result = result + s[i:i + 1]
        i = i - 1
    return result
def max_int(a, b):
    if a > b:
        return a
    return b
def longest_palindromic_subsequence(s):
    rev = reverse(s)
    n = len(s)
    m = len(rev)
    dp = []
    i = 0
    while i <= n:
        row = []
        j = 0
        while j <= m:
            row = _append(row, 0)
            j = j + 1
        dp = _append(dp, row)
        i = i + 1
    i = 1
    while i <= n:
        j = 1
        while j <= m:
            a_char = s[i - 1:i]
            b_char = rev[j - 1:j]
            if a_char == b_char:
                dp[i][j] = 1 + dp[i - 1][j - 1]
            else:
                dp[i][j] = max_int(dp[i - 1][j], dp[i][j - 1])
            j = j + 1
        i = i + 1
    return dp[n][m]
print(str(longest_palindromic_subsequence("bbbab")))
print(str(longest_palindromic_subsequence("bbabcbcab")))
