# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class MatrixChainResult:
    matrix: [[int]]
    solution: [[int]]

def make_2d(n):
    res = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            row = _append(row, 0)
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def matrix_chain_order(arr):
    n = len(arr)
    m = make_2d(n)
    s = make_2d(n)
    chain_length = 2
    while chain_length < n:
        a = 1
        while a < n - chain_length + 1:
            b = a + chain_length - 1
            m[a][b] = 1000000000
            c = a
            while c < b:
                cost = m[a][c] + m[c + 1][b] + arr[a - 1] * arr[c] * arr[b]
                if cost < m[a][b]:
                    m[a][b] = cost
                    s[a][b] = c
                c = c + 1
            a = a + 1
        chain_length = chain_length + 1
    return MatrixChainResult(matrix=m, solution=s)
def optimal_parenthesization(s, i, j):
    if i == j:
        return "A" + str(i)
    else:
        left = optimal_parenthesization(s, i, s[i][j])
        right = optimal_parenthesization(s, s[i][j] + 1, j)
        return "( " + left + " " + right + " )"
def main():
    arr = [30, 35, 15, 5, 10, 20, 25]
    n = len(arr)
    res = matrix_chain_order(arr)
    m = res.matrix
    s = res.solution
    print("No. of Operation required: " + str(m[1][n - 1]))
    seq = optimal_parenthesization(s, 1, n - 1)
    print(seq)
main()
