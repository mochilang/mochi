# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def ceil_index(v, left, right, key):
    l = left
    r = right
    while r - l > 1:
        middle = (l + r) // 2
        if v[middle] >= key:
            r = middle
        else:
            l = middle
    return r
def longest_increasing_subsequence_length(v):
    if len(v) == 0:
        return 0
    tail = []
    i = 0
    while i < len(v):
        tail = _append(tail, 0)
        i = i + 1
    length = 1
    tail[0] = v[0]
    j = 1
    while j < len(v):
        if v[j] < tail[0]:
            tail[0] = v[j]
        else:
            if v[j] > tail[length - 1]:
                tail[length] = v[j]
                length = length + 1
            else:
                idx = ceil_index(tail, -1, length - 1, v[j])
                tail[idx] = v[j]
        j = j + 1
    return length
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6]
        example2 = []
        example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
        example4 = [5, 4, 3, 2, 1]
        print(longest_increasing_subsequence_length(example1))
        print(longest_increasing_subsequence_length(example2))
        print(longest_increasing_subsequence_length(example3))
        print(longest_increasing_subsequence_length(example4))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

