# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def ceil_index(v, left, right, key):
    l = left
    r = right
    while r - l > 1:
        middle = (l + r) // 2
        if v[middle] >= key:
            r = middle
        else:
            l = middle
    return r
def longest_increasing_subsequence_length(v):
    if len(v) == 0:
        return 0
    tail = []
    i = 0
    while i < len(v):
        tail = _append(tail, 0)
        i = i + 1
    length = 1
    tail[0] = v[0]
    j = 1
    while j < len(v):
        if v[j] < tail[0]:
            tail[0] = v[j]
        else:
            if v[j] > tail[length - 1]:
                tail[length] = v[j]
                length = length + 1
            else:
                idx = ceil_index(tail, -1, length - 1, v[j])
                tail[idx] = v[j]
        j = j + 1
    return length
def main():
    example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6]
    example2 = []
    example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    example4 = [5, 4, 3, 2, 1]
    print(longest_increasing_subsequence_length(example1))
    print(longest_increasing_subsequence_length(example2))
    print(longest_increasing_subsequence_length(example3))
    print(longest_increasing_subsequence_length(example4))
main()
