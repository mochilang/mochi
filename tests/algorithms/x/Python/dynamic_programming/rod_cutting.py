# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def enforce_args(n, prices):
        if n < 0:
            panic("n must be non-negative")
        if n > len(prices):
            panic("price list is shorter than n")
    def bottom_up_cut_rod(n, prices):
        enforce_args(n, prices)
        max_rev = []
        i = 0
        while i <= n:
            if i == 0:
                max_rev = _append(max_rev, 0)
            else:
                max_rev = _append(max_rev, -2147483648)
            i = i + 1
        length = 1
        while length <= n:
            best = max_rev[length]
            j = 1
            while j <= length:
                candidate = prices[j - 1] + max_rev[length - j]
                if candidate > best:
                    best = candidate
                j = j + 1
            max_rev[length] = best
            length = length + 1
        return max_rev[n]
    prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30]
    print(bottom_up_cut_rod(4, prices))
    print(bottom_up_cut_rod(10, prices))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

