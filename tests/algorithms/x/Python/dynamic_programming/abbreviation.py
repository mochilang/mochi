# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def index_of(s, ch):
        i = 0
        while i < len(s):
            if s[i] == ch:
                return i
            i = i + 1
        return -1
    def ord(ch):
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower = "abcdefghijklmnopqrstuvwxyz"
        idx = index_of(upper, ch)
        if idx >= 0:
            return 65 + idx
        idx = index_of(lower, ch)
        if idx >= 0:
            return 97 + idx
        return 0
    def chr(n):
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower = "abcdefghijklmnopqrstuvwxyz"
        if n >= 65 and n < 91:
            return upper[n - 65:n - 64]
        if n >= 97 and n < 123:
            return lower[n - 97:n - 96]
        return "?"
    def to_upper_char(c):
        code = ord(c)
        if code >= 97 and code <= 122:
            return chr(code - 32)
        return c
    def is_lower(c):
        code = ord(c)
        return code >= 97 and code <= 122
    def abbr(a, b):
        n = len(a)
        m = len(b)
        dp = []
        i = 0
        while i <= n:
            row = []
            j = 0
            while j <= m:
                row = _append(row, False)
                j = j + 1
            dp = _append(dp, row)
            i = i + 1
        dp[0][0] = True
        i = 0
        while i < n:
            j = 0
            while j <= m:
                if dp[i][j]:
                    if j < m and to_upper_char(a[i]) == b[j]:
                        dp[i + 1][j + 1] = True
                    if is_lower(a[i]):
                        dp[i + 1][j] = True
                j = j + 1
            i = i + 1
        return dp[n][m]
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    print_bool(abbr("daBcd", "ABC"))
    print_bool(abbr("dBcd", "ABC"))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
