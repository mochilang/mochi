# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def index_of(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = index_of(upper, ch)
    if idx >= 0:
        return 65 + idx
    idx = index_of(lower, ch)
    if idx >= 0:
        return 97 + idx
    return 0
def chr(n):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 and n < 91:
        return upper[n - 65:n - 64]
    if n >= 97 and n < 123:
        return lower[n - 97:n - 96]
    return "?"
def to_upper_char(c):
    code = ord(c)
    if code >= 97 and code <= 122:
        return chr(code - 32)
    return c
def is_lower(c):
    code = ord(c)
    return code >= 97 and code <= 122
def abbr(a, b):
    n = len(a)
    m = len(b)
    dp = []
    i = 0
    while i <= n:
        row = []
        j = 0
        while j <= m:
            row = _append(row, False)
            j = j + 1
        dp = _append(dp, row)
        i = i + 1
    dp[0][0] = True
    i = 0
    while i < n:
        j = 0
        while j <= m:
            if dp[i][j]:
                if j < m and to_upper_char(a[i]) == b[j]:
                    dp[i + 1][j + 1] = True
                if is_lower(a[i]):
                    dp[i + 1][j] = True
            j = j + 1
        i = i + 1
    return dp[n][m]
def print_bool(b):
    if b:
        print(("True" if True else "False"))
    else:
        print(("True" if False else "False"))
print_bool(abbr("daBcd", "ABC"))
print_bool(abbr("dBcd", "ABC"))
