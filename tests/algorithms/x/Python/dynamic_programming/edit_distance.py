# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def min3(a, b, c):
        m = a
        if b < m:
            m = b
        if c < m:
            m = c
        return m
    def helper_top_down(word1, word2, dp, i, j):
        if i < 0:
            return j + 1
        if j < 0:
            return i + 1
        if dp[i][j] != (0 - 1):
            return dp[i][j]
        if word1[i:i + 1] == word2[j:j + 1]:
            dp[i][j] = helper_top_down(word1, word2, dp, i - 1, j - 1)
        else:
            insert = helper_top_down(word1, word2, dp, i, j - 1)
            delete = helper_top_down(word1, word2, dp, i - 1, j)
            replace = helper_top_down(word1, word2, dp, i - 1, j - 1)
            dp[i][j] = 1 + min3(insert, delete, replace)
        return dp[i][j]
    def min_dist_top_down(word1, word2):
        m = len(word1)
        n = len(word2)
        dp = []
        for _ in range(0, m):
            row = []
            for _2 in range(0, n):
                row = _append(row, 0 - 1)
            dp = _append(dp, row)
        return helper_top_down(word1, word2, dp, m - 1, n - 1)
    def min_dist_bottom_up(word1, word2):
        m = len(word1)
        n = len(word2)
        dp = []
        for _ in range(0, (m + 1)):
            row = []
            for _2 in range(0, (n + 1)):
                row = _append(row, 0)
            dp = _append(dp, row)
        for i in range(0, (m + 1)):
            for j in range(0, (n + 1)):
                if i == 0:
                    dp[i][j] = j
                else:
                    if j == 0:
                        dp[i][j] = i
                    else:
                        if word1[i - 1:i] == word2[j - 1:j]:
                            dp[i][j] = dp[i - 1][j - 1]
                        else:
                            insert = dp[i][j - 1]
                            delete = dp[i - 1][j]
                            replace = dp[i - 1][j - 1]
                            dp[i][j] = 1 + min3(insert, delete, replace)
        return dp[m][n]
    print(str(min_dist_top_down("intention", "execution")))
    print(str(min_dist_top_down("intention", "")))
    print(str(min_dist_top_down("", "")))
    print(str(min_dist_bottom_up("intention", "execution")))
    print(str(min_dist_bottom_up("intention", "")))
    print(str(min_dist_bottom_up("", "")))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
