# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    key: int
    freq: int

def sort_nodes(nodes):
    arr = nodes
    i = 1
    while i < len(arr):
        key_node = arr[i]
        j = i - 1
        while j >= 0:
            temp = arr[j]
            if temp.key > key_node.key:
                arr[j + 1] = temp
                j = j - 1
            else:
                break
        arr[j + 1] = key_node
        i = i + 1
    return arr
def print_node(n):
    print("Node(key=" + _str(n.key) + ", freq=" + _str(n.freq) + ")")
def print_binary_search_tree(root, keys, i, j, parent, is_left):
    if i > j or i < 0 or j > len(root) - 1:
        return
    node = root[i][j]
    if parent == (-1):
        print(_str(keys[node]) + " is the root of the binary search tree.")
    else:
        if is_left:
            print(_str(keys[node]) + " is the left child of key " + _str(parent) + ".")
        else:
            print(_str(keys[node]) + " is the right child of key " + _str(parent) + ".")
    print_binary_search_tree(root, keys, i, node - 1, keys[node], True)
    print_binary_search_tree(root, keys, node + 1, j, keys[node], False)
def find_optimal_binary_search_tree(original_nodes):
    nodes = sort_nodes(original_nodes)
    n = len(nodes)
    keys = []
    freqs = []
    i = 0
    while i < n:
        node = nodes[i]
        keys = _append(keys, node.key)
        freqs = _append(freqs, node.freq)
        i = i + 1
    dp = []
    total = []
    root = []
    i = 0
    while i < n:
        dp_row = []
        total_row = []
        root_row = []
        j = 0
        while j < n:
            if i == j:
                dp_row = _append(dp_row, freqs[i])
                total_row = _append(total_row, freqs[i])
                root_row = _append(root_row, i)
            else:
                dp_row = _append(dp_row, 0)
                total_row = _append(total_row, 0)
                root_row = _append(root_row, 0)
            j = j + 1
        dp = _append(dp, dp_row)
        total = _append(total, total_row)
        root = _append(root, root_row)
        i = i + 1
    interval_length = 2
    INF = 2147483647
    while interval_length <= n:
        i = 0
        while i < n - interval_length + 1:
            j = i + interval_length - 1
            dp[i][j] = INF
            total[i][j] = total[i][j - 1] + freqs[j]
            r = root[i][j - 1]
            while r <= root[i + 1][j]:
                left = (dp[i][r - 1] if r != i else 0)
                right = (dp[r + 1][j] if r != j else 0)
                cost = left + total[i][j] + right
                if dp[i][j] > cost:
                    dp[i][j] = cost
                    root[i][j] = r
                r = r + 1
            i = i + 1
        interval_length = interval_length + 1
    print("Binary search tree nodes:")
    i = 0
    while i < n:
        print_node(nodes[i])
        i = i + 1
    print("\nThe cost of optimal BST for given tree nodes is " + _str(dp[0][n - 1]) + ".")
    print_binary_search_tree(root, keys, 0, n - 1, (-1), False)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        nodes = [Node(key=12, freq=8), Node(key=10, freq=34), Node(key=20, freq=50), Node(key=42, freq=3), Node(key=25, freq=40), Node(key=37, freq=30)]
        find_optimal_binary_search_tree(nodes)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

