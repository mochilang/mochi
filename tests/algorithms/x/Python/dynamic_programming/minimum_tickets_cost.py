# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def make_list(len, value):
        arr = []
        i = 0
        while i < len:
            arr = _append(arr, value)
            i = i + 1
        return arr
    def max_int(a, b):
        if a > b:
            return a
        else:
            return b
    def min_int(a, b):
        if a < b:
            return a
        else:
            return b
    def min3(a, b, c):
        return min_int(min_int(a, b), c)
    def minimum_tickets_cost(days, costs):
        if len(days) == 0:
            return 0
        last_day = days[len(days) - 1]
        dp = make_list(last_day + 1, 0)
        day_index = 0
        d = 1
        while d <= last_day:
            if day_index < len(days) and d == days[day_index]:
                cost1 = dp[d - 1] + costs[0]
                cost7 = dp[max_int(0, d - 7)] + costs[1]
                cost30 = dp[max_int(0, d - 30)] + costs[2]
                dp[d] = min3(cost1, cost7, cost30)
                day_index = day_index + 1
            else:
                dp[d] = dp[d - 1]
            d = d + 1
        return dp[last_day]
    print(_str(minimum_tickets_cost([1, 4, 6, 7, 8, 20], [2, 7, 15])))
    print(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15])))
    print(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 90, 150])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

