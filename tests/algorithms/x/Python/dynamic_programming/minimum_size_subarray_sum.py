# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def minimum_subarray_sum(target, numbers):
        n = len(numbers)
        if n == 0:
            return 0
        if target == 0:
            i = 0
            while i < n:
                if numbers[i] == 0:
                    return 0
                i = i + 1
        left = 0
        right = 0
        curr_sum = 0
        min_len = n + 1
        while right < n:
            curr_sum = curr_sum + numbers[right]
            while curr_sum >= target and left <= right:
                current_len = right - left + 1
                if current_len < min_len:
                    min_len = current_len
                curr_sum = curr_sum - numbers[left]
                left = left + 1
            right = right + 1
        if min_len == n + 1:
            return 0
        return min_len
    print(_str(minimum_subarray_sum(7, [2, 3, 1, 2, 4, 3])))
    print(_str(minimum_subarray_sum(7, [2, 3, -1, 2, 4, -3])))
    print(_str(minimum_subarray_sum(11, [1, 1, 1, 1, 1, 1, 1, 1])))
    print(_str(minimum_subarray_sum(0, [1, 2, 3])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

