# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def minimum_subarray_sum(target, numbers):
    n = len(numbers)
    if n == 0:
        return 0
    if target == 0:
        i = 0
        while i < n:
            if numbers[i] == 0:
                return 0
            i = i + 1
    left = 0
    right = 0
    curr_sum = 0
    min_len = n + 1
    while right < n:
        curr_sum = curr_sum + numbers[right]
        while curr_sum >= target and left <= right:
            current_len = right - left + 1
            if current_len < min_len:
                min_len = current_len
            curr_sum = curr_sum - numbers[left]
            left = left + 1
        right = right + 1
    if min_len == n + 1:
        return 0
    return min_len
print(str(minimum_subarray_sum(7, [2, 3, 1, 2, 4, 3])))
print(str(minimum_subarray_sum(7, [2, 3, -1, 2, 4, -3])))
print(str(minimum_subarray_sum(11, [1, 1, 1, 1, 1, 1, 1, 1])))
print(str(minimum_subarray_sum(0, [1, 2, 3])))
