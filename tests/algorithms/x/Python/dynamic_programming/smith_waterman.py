# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def score_function(source_char, target_char, match_score, mismatch_score, gap_score):
    if source_char == "-" or target_char == "-":
        return gap_score
    if source_char == target_char:
        return match_score
    return mismatch_score
def smith_waterman(query, subject, match_score, mismatch_score, gap_score):
    q = query.upper()
    s = subject.upper()
    m = len(q)
    n = len(s)
    score = []
    for _ in range(0, (m + 1)):
        row = []
        for _2 in range(0, (n + 1)):
            row = _append(row, 0)
        score = _append(score, row)
    for i in range(1, (m + 1)):
        for j in range(1, (n + 1)):
            qc = q[i - 1:i]
            sc = s[j - 1:j]
            diag = score[i - 1][j - 1] + score_function(qc, sc, match_score, mismatch_score, gap_score)
            delete = score[i - 1][j] + gap_score
            insert = score[i][j - 1] + gap_score
            max_val = 0
            if diag > max_val:
                max_val = diag
            if delete > max_val:
                max_val = delete
            if insert > max_val:
                max_val = insert
            score[i][j] = max_val
    return score
def traceback(score, query, subject, match_score, mismatch_score, gap_score):
    q = query.upper()
    s = subject.upper()
    max_value = 0
    i_max = 0
    j_max = 0
    for i in range(0, len(score)):
        for j in range(0, len(score[i])):
            if score[i][j] > max_value:
                max_value = score[i][j]
                i_max = i
                j_max = j
    i = i_max
    j = j_max
    align1 = ""
    align2 = ""
    gap_penalty = score_function("-", "-", match_score, mismatch_score, gap_score)
    if i == 0 or j == 0:
        return ""
    while i > 0 and j > 0:
        qc = q[i - 1:i]
        sc = s[j - 1:j]
        if score[i][j] == score[i - 1][j - 1] + score_function(qc, sc, match_score, mismatch_score, gap_score):
            align1 = qc + align1
            align2 = sc + align2
            i = i - 1
            j = j - 1
        else:
            if score[i][j] == score[i - 1][j] + gap_penalty:
                align1 = qc + align1
                align2 = "-" + align2
                i = i - 1
            else:
                align1 = "-" + align1
                align2 = sc + align2
                j = j - 1
    return align1 + "\n" + align2
query = "HEAGAWGHEE"
subject = "PAWHEAE"
score = smith_waterman(query, subject, 1, -1, -2)
print(traceback(score, query, subject, 1, -1, -2))
