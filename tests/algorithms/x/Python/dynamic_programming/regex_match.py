# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def recursive_match(text, pattern):
        if len(pattern) == 0:
            return len(text) == 0
        if len(text) == 0:
            if len(pattern) >= 2 and pattern[len(pattern) - 1:len(pattern)] == "*":
                return recursive_match(text, pattern[0:len(pattern) - 2])
            return False
        last_text = text[len(text) - 1:len(text)]
        last_pattern = pattern[len(pattern) - 1:len(pattern)]
        if last_text == last_pattern or last_pattern == ".":
            return recursive_match(text[0:len(text) - 1], pattern[0:len(pattern) - 1])
        if last_pattern == "*":
            if recursive_match(text[0:len(text) - 1], pattern):
                return True
            return recursive_match(text, pattern[0:len(pattern) - 2])
        return False
    def dp_match(text, pattern):
        m = len(text)
        n = len(pattern)
        dp = []
        i = 0
        while i <= m:
            row = []
            j = 0
            while j <= n:
                row = _append(row, False)
                j = j + 1
            dp = _append(dp, row)
            i = i + 1
        dp[0][0] = True
        j = 1
        while j <= n:
            if pattern[j - 1:j] == "*" and j >= 2:
                if dp[0][j - 2]:
                    dp[0][j] = True
            j = j + 1
        i = 1
        while i <= m:
            j = 1
            while j <= n:
                p_char = pattern[j - 1:j]
                t_char = text[i - 1:i]
                if p_char == "." or p_char == t_char:
                    if dp[i - 1][j - 1]:
                        dp[i][j] = True
                else:
                    if p_char == "*":
                        if j >= 2:
                            if dp[i][j - 2]:
                                dp[i][j] = True
                            prev_p = pattern[j - 2:j - 1]
                            if prev_p == "." or prev_p == t_char:
                                if dp[i - 1][j]:
                                    dp[i][j] = True
                    else:
                        dp[i][j] = False
                j = j + 1
            i = i + 1
        return dp[m][n]
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    print_bool(recursive_match("abc", "a.c"))
    print_bool(recursive_match("abc", "af*.c"))
    print_bool(recursive_match("abc", "a.c*"))
    print_bool(recursive_match("abc", "a.c*d"))
    print_bool(recursive_match("aa", ".*"))
    print_bool(dp_match("abc", "a.c"))
    print_bool(dp_match("abc", "af*.c"))
    print_bool(dp_match("abc", "a.c*"))
    print_bool(dp_match("abc", "a.c*d"))
    print_bool(dp_match("aa", ".*"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

