# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def panic(msg):
        print(msg)
    def catalan_numbers(upper_limit):
        if upper_limit < 0:
            panic("Limit for the Catalan sequence must be >= 0")
            return []
        catalans = [1]
        n = 1
        while n <= upper_limit:
            next_val = 0
            j = 0
            while j < n:
                next_val = next_val + catalans[j] * catalans[n - j - 1]
                j = j + 1
            catalans = _append(catalans, next_val)
            n = n + 1
        return catalans
    print(str(catalan_numbers(5)))
    print(str(catalan_numbers(2)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
