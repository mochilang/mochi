# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def copy_list(src):
        result = []
        i = 0
        while i < len(src):
            result = _append(result, src[i])
            i = i + 1
        return result
    def subset_combinations(elements, n):
        r = len(elements)
        if n > r:
            return []
        dp = []
        i = 0
        while i <= r:
            dp = _append(dp, [])
            i = i + 1
        dp[0] = _append(dp[0], [])
        i = 1
        while i <= r:
            j = i
            while j > 0:
                prevs = dp[j - 1]
                k = 0
                while k < len(prevs):
                    prev = prevs[k]
                    comb = copy_list(prev)
                    comb = _append(comb, elements[i - 1])
                    dp[j] = _append(dp[j], comb)
                    k = k + 1
                j = j - 1
            i = i + 1
        return dp[n]
    print(_str(subset_combinations([10, 20, 30, 40], 2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

