# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    INF = 1000000000
    def matrix_chain_multiply(arr):
        if len(arr) < 2:
            return 0
        n = len(arr)
        dp = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                row = _append(row, INF)
                j = j + 1
            dp = _append(dp, row)
            i = i + 1
        i = n - 1
        while i > 0:
            j = i
            while j < n:
                if i == j:
                    dp[i][j] = 0
                else:
                    k = i
                    while k < j:
                        cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j]
                        if cost < dp[i][j]:
                            dp[i][j] = cost
                        k = k + 1
                j = j + 1
            i = i - 1
        return dp[1][n - 1]
    # test example
    assert matrix_chain_multiply([1, 2, 3, 4, 3]) == 30
    # test single matrix
    assert matrix_chain_multiply([10]) == 0
    # test two matrices
    assert matrix_chain_multiply([10, 20]) == 0
    # test cost calculation
    assert matrix_chain_multiply([19, 2, 19]) == 722
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

