# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    f = []
    def max_int(a, b):
        if a > b:
            return a
        else:
            return b
    def init_f(n, w):
        table = []
        i = 0
        while i <= n:
            row = []
            j = 0
            while j <= w:
                if i == 0 or j == 0:
                    row = _append(row, 0)
                else:
                    row = _append(row, -1)
                j = j + 1
            table = _append(table, row)
            i = i + 1
        return table
    def mf_knapsack(i, wt, val, j):
        if f[i][j] < 0:
            if j < wt[i - 1]:
                f[i][j] = mf_knapsack(i - 1, wt, val, j)
            else:
                without_item = mf_knapsack(i - 1, wt, val, j)
                with_item = mf_knapsack(i - 1, wt, val, j - wt[i - 1]) + val[i - 1]
                f[i][j] = max_int(without_item, with_item)
        return f[i][j]
    def create_matrix(rows, cols):
        matrix = []
        i = 0
        while i <= rows:
            row = []
            j = 0
            while j <= cols:
                row = _append(row, 0)
                j = j + 1
            matrix = _append(matrix, row)
            i = i + 1
        return matrix
    def knapsack(w, wt, val, n):
        dp = create_matrix(n, w)
        i = 1
        while i <= n:
            w_ = 1
            while w_ <= w:
                if wt[i - 1] <= w_:
                    include = val[i - 1] + dp[i - 1][w_ - wt[i - 1]]
                    exclude = dp[i - 1][w_]
                    dp[i][w_] = max_int(include, exclude)
                else:
                    dp[i][w_] = dp[i - 1][w_]
                w_ = w_ + 1
            i = i + 1
        return dp
    def construct_solution(dp, wt, i, j, optimal_set):
        if i > 0 and j > 0:
            if dp[i - 1][j] == dp[i][j]:
                return construct_solution(dp, wt, i - 1, j, optimal_set)
            else:
                with_prev = construct_solution(dp, wt, i - 1, j - wt[i - 1], optimal_set)
                return _append(with_prev, i)
        return optimal_set
    @dataclass
    class KnapsackResult:
        value: int
        subset: [int]
    def knapsack_with_example_solution(w, wt, val):
        num_items = len(wt)
        dp_table = knapsack(w, wt, val, num_items)
        optimal_val = dp_table[num_items][w]
        subset = construct_solution(dp_table, wt, num_items, w, [])
        return KnapsackResult(value=optimal_val, subset=subset)
    def format_set(xs):
        res = "{"
        i = 0
        while i < len(xs):
            res = res + _str(xs[i])
            if i + 1 < len(xs):
                res = res + ", "
            i = i + 1
        res = res + "}"
        return res
    val_list = [3, 2, 4, 4]
    wt_list = [4, 3, 2, 3]
    n = 4
    w_cap = 6
    f = init_f(n, w_cap)
    dp_table = knapsack(w_cap, wt_list, val_list, n)
    optimal_solution = dp_table[n][w_cap]
    print(optimal_solution)
    print(mf_knapsack(n, wt_list, val_list, w_cap))
    example = knapsack_with_example_solution(w_cap, wt_list, val_list)
    print("optimal_value = " + _str(example.value))
    print("An optimal subset corresponding to the optimal value " + format_set(example.subset))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

