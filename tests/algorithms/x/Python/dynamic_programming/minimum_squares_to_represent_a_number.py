# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def make_list(len, value):
    arr = []
    i = 0
    while i < len:
        arr = _append(arr, value)
        i = i + 1
    return arr
def int_sqrt(n):
    r = 0
    while (r + 1) * (r + 1) <= n:
        r = r + 1
    return r
def minimum_squares_to_represent_a_number(number):
    if number < 0:
        panic("the value of input must not be a negative number")
    if number == 0:
        return 1
    answers = make_list(number + 1, -1)
    answers[0] = 0
    i = 1
    while i <= number:
        answer = i
        root = int_sqrt(i)
        j = 1
        while j <= root:
            current_answer = 1 + answers[i - j * j]
            if current_answer < answer:
                answer = current_answer
            j = j + 1
        answers[i] = answer
        i = i + 1
    return answers[number]
print(minimum_squares_to_represent_a_number(25))
print(minimum_squares_to_represent_a_number(21))
