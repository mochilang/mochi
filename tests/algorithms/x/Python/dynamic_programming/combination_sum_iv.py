# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def make_list(len, value):
    arr = []
    i = 0
    while i < len:
        arr = _append(arr, value)
        i = i + 1
    return arr
def count_recursive(array, target):
    if target < 0:
        return 0
    if target == 0:
        return 1
    total = 0
    i = 0
    while i < len(array):
        total = total + count_recursive(array, target - array[i])
        i = i + 1
    return total
def combination_sum_iv(array, target):
    return count_recursive(array, target)
def count_dp(array, target, dp):
    if target < 0:
        return 0
    if target == 0:
        return 1
    if dp[target] > (0 - 1):
        return dp[target]
    total = 0
    i = 0
    while i < len(array):
        total = total + count_dp(array, target - array[i], dp)
        i = i + 1
    dp[target] = total
    return total
def combination_sum_iv_dp_array(array, target):
    dp = make_list(target + 1, -1)
    return count_dp(array, target, dp)
def combination_sum_iv_bottom_up(n, array, target):
    dp = make_list(target + 1, 0)
    dp[0] = 1
    i = 1
    while i <= target:
        j = 0
        while j < n:
            if i - array[j] >= 0:
                dp[i] = dp[i] + dp[i - array[j]]
            j = j + 1
        i = i + 1
    return dp[target]
print(str(combination_sum_iv([1, 2, 5], 5)))
print(str(combination_sum_iv_dp_array([1, 2, 5], 5)))
print(str(combination_sum_iv_bottom_up(3, [1, 2, 5], 5)))
