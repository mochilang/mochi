# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def make_list(len, value):
        arr = []
        i = 0
        while i < len:
            arr = _append(arr, value)
            i = i + 1
        return arr
    def count_recursive(array, target):
        if target < 0:
            return 0
        if target == 0:
            return 1
        total = 0
        i = 0
        while i < len(array):
            total = total + count_recursive(array, target - array[i])
            i = i + 1
        return total
    def combination_sum_iv(array, target):
        return count_recursive(array, target)
    def count_dp(array, target, dp):
        if target < 0:
            return 0
        if target == 0:
            return 1
        if dp[target] > (0 - 1):
            return dp[target]
        total = 0
        i = 0
        while i < len(array):
            total = total + count_dp(array, target - array[i], dp)
            i = i + 1
        dp[target] = total
        return total
    def combination_sum_iv_dp_array(array, target):
        dp = make_list(target + 1, -1)
        return count_dp(array, target, dp)
    def combination_sum_iv_bottom_up(n, array, target):
        dp = make_list(target + 1, 0)
        dp[0] = 1
        i = 1
        while i <= target:
            j = 0
            while j < n:
                if i - array[j] >= 0:
                    dp[i] = dp[i] + dp[i - array[j]]
                j = j + 1
            i = i + 1
        return dp[target]
    print(str(combination_sum_iv([1, 2, 5], 5)))
    print(str(combination_sum_iv_dp_array([1, 2, 5], 5)))
    print(str(combination_sum_iv_bottom_up(3, [1, 2, 5], 5)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
