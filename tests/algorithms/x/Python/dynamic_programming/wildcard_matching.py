# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def make_bool_list(n):
        row = []
        i = 0
        while i < n:
            row = _append(row, False)
            i = i + 1
        return row
    def make_bool_matrix(rows, cols):
        matrix = []
        i = 0
        while i < rows:
            matrix = _append(matrix, make_bool_list(cols))
            i = i + 1
        return matrix
    def is_match(s, p):
        n = len(s)
        m = len(p)
        dp = make_bool_matrix(n + 1, m + 1)
        dp[0][0] = True
        j = 1
        while j <= m:
            if p[j - 1:j] == "*":
                dp[0][j] = dp[0][j - 1]
            j = j + 1
        i = 1
        while i <= n:
            j2 = 1
            while j2 <= m:
                pc = p[j2 - 1:j2]
                sc = s[i - 1:i]
                if pc == sc or pc == "?":
                    dp[i][j2] = dp[i - 1][j2 - 1]
                else:
                    if pc == "*":
                        if dp[i - 1][j2] or dp[i][j2 - 1]:
                            dp[i][j2] = True
                j2 = j2 + 1
            i = i + 1
        return dp[n][m]
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    print_bool(is_match("abc", "a*c"))
    print_bool(is_match("abc", "a*d"))
    print_bool(is_match("baaabab", "*****ba*****ab"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

