# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Query:
        left: int
        right: int
    def prefix_sum(arr, queries):
        dp = []
        i = 0
        while i < len(arr):
            if i == 0:
                dp = _append(dp, arr[0])
            else:
                dp = _append(dp, dp[i - 1] + arr[i])
            i = i + 1
        result = []
        j = 0
        while j < len(queries):
            q = queries[j]
            sum = dp[q.right]
            if q.left > 0:
                sum = sum - dp[q.left - 1]
            result = _append(result, sum)
            j = j + 1
        return result
    arr1 = [1, 4, 6, 2, 61, 12]
    queries1 = [Query(left=2, right=5), Query(left=1, right=5), Query(left=3, right=4)]
    print(_str(prefix_sum(arr1, queries1)))
    arr2 = [4, 2, 1, 6, 3]
    queries2 = [Query(left=3, right=4), Query(left=1, right=3), Query(left=0, right=2)]
    print(_str(prefix_sum(arr2, queries2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

