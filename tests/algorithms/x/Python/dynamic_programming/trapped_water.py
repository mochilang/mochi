# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def make_list(len, value):
        arr = []
        i = 0
        while i < len:
            arr = _append(arr, value)
            i = i + 1
        return arr
    def trapped_rainwater(heights):
        if len(heights) == 0:
            return 0
        i = 0
        while i < len(heights):
            if heights[i] < 0:
                panic("No height can be negative")
            i = i + 1
        length = len(heights)
        left_max = make_list(length, 0)
        left_max[0] = heights[0]
        i = 1
        while i < length:
            if heights[i] > left_max[i - 1]:
                left_max[i] = heights[i]
            else:
                left_max[i] = left_max[i - 1]
            i = i + 1
        right_max = make_list(length, 0)
        last = length - 1
        right_max[last] = heights[last]
        i = last - 1
        while i >= 0:
            if heights[i] > right_max[i + 1]:
                right_max[i] = heights[i]
            else:
                right_max[i] = right_max[i + 1]
            i = i - 1
        total = 0
        i = 0
        while i < length:
            left = left_max[i]
            right = right_max[i]
            smaller = (left if left < right else right)
            total = total + (smaller - heights[i])
            i = i + 1
        return total
    print(_str(trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])))
    print(_str(trapped_rainwater([7, 1, 5, 3, 6, 4])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

