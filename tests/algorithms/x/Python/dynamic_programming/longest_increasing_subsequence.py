# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def longest_subsequence(xs):
        n = len(xs)
        if n <= 1:
            return xs
        pivot = xs[0]
        is_found = False
        i = 1
        longest_subseq = []
        while not is_found and i < n:
            if xs[i] < pivot:
                is_found = True
                temp_array = xs[i:n]
                temp_array = longest_subsequence(temp_array)
                if len(temp_array) > len(longest_subseq):
                    longest_subseq = temp_array
            else:
                i = i + 1
        filtered = []
        j = 1
        while j < n:
            if xs[j] >= pivot:
                filtered = _append(filtered, xs[j])
            j = j + 1
        candidate = []
        candidate = _append(candidate, pivot)
        candidate = _concat(candidate, longest_subsequence(filtered))
        if len(candidate) > len(longest_subseq):
            return candidate
        else:
            return longest_subseq
    # test examples
    assert longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 41, 60, 80]
    assert longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9]) == [1, 2, 3, 9]
    assert longest_subsequence([28, 26, 12, 23, 35, 39]) == [12, 23, 35, 39]
    assert longest_subsequence([9, 8, 7, 6, 5, 7]) == [5, 7]
    assert longest_subsequence([1, 1, 1]) == [1, 1, 1]
    assert longest_subsequence([]) == []
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

