# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]

def longest_subsequence(xs):
    n = len(xs)
    if n <= 1:
        return xs
    pivot = xs[0]
    is_found = False
    i = 1
    longest_subseq = []
    while not is_found and i < n:
        if xs[i] < pivot:
            is_found = True
            temp_array = xs[i:n]
            temp_array = longest_subsequence(temp_array)
            if len(temp_array) > len(longest_subseq):
                longest_subseq = temp_array
        else:
            i = i + 1
    filtered = []
    j = 1
    while j < n:
        if xs[j] >= pivot:
            filtered = _append(filtered, xs[j])
        j = j + 1
    candidate = []
    candidate = _append(candidate, pivot)
    candidate = _concat(candidate, longest_subsequence(filtered))
    if len(candidate) > len(longest_subseq):
        return candidate
    else:
        return longest_subseq
# test examples
assert longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 41, 60, 80]
assert longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9]) == [1, 2, 3, 9]
assert longest_subsequence([28, 26, 12, 23, 35, 39]) == [12, 23, 35, 39]
assert longest_subsequence([9, 8, 7, 6, 5, 7]) == [5, 7]
assert longest_subsequence([1, 1, 1]) == [1, 1, 1]
assert longest_subsequence([]) == []
