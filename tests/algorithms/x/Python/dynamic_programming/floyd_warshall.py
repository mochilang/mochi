# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

INF = 1000000000
@dataclass
class Graph:
    n: int
    dp: [[int]]

def new_graph(n):
    dp = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            if i == j:
                row = _append(row, 0)
            else:
                row = _append(row, INF)
            j = j + 1
        dp = _append(dp, row)
        i = i + 1
    return Graph(n=n, dp=dp)
def add_edge(g, u, v, w):
    dp = g.dp
    row = dp[u]
    row[v] = w
    dp[u] = row
    g.dp = dp
def floyd_warshall(g):
    dp = g.dp
    k = 0
    while k < g.n:
        i = 0
        while i < g.n:
            j = 0
            while j < g.n:
                alt = dp[i][k] + dp[k][j]
                row = dp[i]
                if alt < row[j]:
                    row[j] = alt
                    dp[i] = row
                j = j + 1
            i = i + 1
        k = k + 1
    g.dp = dp
def show_min(g, u, v):
    return g.dp[u][v]
graph = new_graph(5)
add_edge(graph, 0, 2, 9)
add_edge(graph, 0, 4, 10)
add_edge(graph, 1, 3, 5)
add_edge(graph, 2, 3, 7)
add_edge(graph, 3, 0, 10)
add_edge(graph, 3, 1, 2)
add_edge(graph, 3, 2, 1)
add_edge(graph, 3, 4, 6)
add_edge(graph, 4, 1, 3)
add_edge(graph, 4, 2, 4)
add_edge(graph, 4, 3, 9)
floyd_warshall(graph)
print(str(show_min(graph, 1, 4)))
print(str(show_min(graph, 0, 3)))
