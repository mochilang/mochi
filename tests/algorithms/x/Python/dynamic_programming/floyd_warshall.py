# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    INF = 1000000000
    @dataclass
    class Graph:
        n: int
        dp: [[int]]
    def new_graph(n):
        dp = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                if i == j:
                    row = _append(row, 0)
                else:
                    row = _append(row, INF)
                j = j + 1
            dp = _append(dp, row)
            i = i + 1
        return Graph(n=n, dp=dp)
    def add_edge(g, u, v, w):
        dp = g.dp
        row = dp[u]
        row[v] = w
        dp[u] = row
        g.dp = dp
    def floyd_warshall(g):
        dp = g.dp
        k = 0
        while k < g.n:
            i = 0
            while i < g.n:
                j = 0
                while j < g.n:
                    alt = dp[i][k] + dp[k][j]
                    row = dp[i]
                    if alt < row[j]:
                        row[j] = alt
                        dp[i] = row
                    j = j + 1
                i = i + 1
            k = k + 1
        g.dp = dp
    def show_min(g, u, v):
        return g.dp[u][v]
    graph = new_graph(5)
    add_edge(graph, 0, 2, 9)
    add_edge(graph, 0, 4, 10)
    add_edge(graph, 1, 3, 5)
    add_edge(graph, 2, 3, 7)
    add_edge(graph, 3, 0, 10)
    add_edge(graph, 3, 1, 2)
    add_edge(graph, 3, 2, 1)
    add_edge(graph, 3, 4, 6)
    add_edge(graph, 4, 1, 3)
    add_edge(graph, 4, 2, 4)
    add_edge(graph, 4, 3, 9)
    floyd_warshall(graph)
    print(_str(show_min(graph, 1, 4)))
    print(_str(show_min(graph, 0, 3)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

