# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def create_bool_matrix(rows, cols):
        matrix = []
        i = 0
        while i <= rows:
            row = []
            j = 0
            while j <= cols:
                row = _append(row, False)
                j = j + 1
            matrix = _append(matrix, row)
            i = i + 1
        return matrix
    def is_sum_subset(arr, required_sum):
        arr_len = len(arr)
        subset = create_bool_matrix(arr_len, required_sum)
        i = 0
        while i <= arr_len:
            subset[i][0] = True
            i = i + 1
        j = 1
        while j <= required_sum:
            subset[0][j] = False
            j = j + 1
        i = 1
        while i <= arr_len:
            j = 1
            while j <= required_sum:
                if arr[i - 1] > j:
                    subset[i][j] = subset[i - 1][j]
                if arr[i - 1] <= j:
                    subset[i][j] = subset[i - 1][j] or subset[i - 1][j - arr[i - 1]]
                j = j + 1
            i = i + 1
        return subset[arr_len][required_sum]
    print(("True" if is_sum_subset([2, 4, 6, 8], 5) else "False"))
    print(("True" if is_sum_subset([2, 4, 6, 8], 14) else "False"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

