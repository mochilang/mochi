# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def allConstruct(target, wordBank):
        tableSize = len(target) + 1
        table = []
        idx = 0
        while idx < tableSize:
            empty = []
            table = _append(table, empty)
            idx = idx + 1
        base = []
        table[0] = [base]
        i = 0
        while i < tableSize:
            if len(table[i]) != 0:
                w = 0
                while w < len(wordBank):
                    word = wordBank[w]
                    wordLen = len(word)
                    if target[i:i + wordLen] == word:
                        k = 0
                        while k < len(table[i]):
                            way = table[i][k]
                            combination = []
                            m = 0
                            while m < len(way):
                                combination = _append(combination, way[m])
                                m = m + 1
                            combination = _append(combination, word)
                            nextIndex = i + wordLen
                            table[nextIndex] = _append(table[nextIndex], combination)
                            k = k + 1
                    w = w + 1
            i = i + 1
        return table[len(target)]
    print(str(allConstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"])))
    print(str(allConstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"])))
    print(str(allConstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
