# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def min_int(a, b):
        if a < b:
            return a
        return b
    def minimum_cost_path(matrix):
        rows = len(matrix)
        cols = len(matrix[0])
        j = 1
        while j < cols:
            row0 = matrix[0]
            row0[j] = row0[j] + row0[j - 1]
            matrix[0] = row0
            j = j + 1
        i = 1
        while i < rows:
            row = matrix[i]
            row[0] = row[0] + matrix[i - 1][0]
            matrix[i] = row
            i = i + 1
        i = 1
        while i < rows:
            row = matrix[i]
            j = 1
            while j < cols:
                up = matrix[i - 1][j]
                left = row[j - 1]
                best = min_int(up, left)
                row[j] = row[j] + best
                j = j + 1
            matrix[i] = row
            i = i + 1
        return matrix[rows - 1][cols - 1]
    m1 = [[2, 1], [3, 1], [4, 2]]
    m2 = [[2, 1, 4], [2, 1, 3], [3, 2, 1]]
    print(_str(minimum_cost_path(m1)))
    print(_str(minimum_cost_path(m2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

