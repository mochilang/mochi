# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def min_int(a, b):
    if a < b:
        return a
    return b
def minimum_cost_path(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    j = 1
    while j < cols:
        row0 = matrix[0]
        row0[j] = row0[j] + row0[j - 1]
        matrix[0] = row0
        j = j + 1
    i = 1
    while i < rows:
        row = matrix[i]
        row[0] = row[0] + matrix[i - 1][0]
        matrix[i] = row
        i = i + 1
    i = 1
    while i < rows:
        row = matrix[i]
        j = 1
        while j < cols:
            up = matrix[i - 1][j]
            left = row[j - 1]
            best = min_int(up, left)
            row[j] = row[j] + best
            j = j + 1
        matrix[i] = row
        i = i + 1
    return matrix[rows - 1][cols - 1]
m1 = [[2, 1], [3, 1], [4, 2]]
m2 = [[2, 1, 4], [2, 1, 3], [3, 2, 1]]
print(str(minimum_cost_path(m1)))
print(str(minimum_cost_path(m2)))
