# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def max_subarray_sum(nums, allow_empty):
        if len(nums) == 0:
            return 0.0
        max_sum = 0.0
        curr_sum = 0.0
        if allow_empty:
            max_sum = 0.0
            curr_sum = 0.0
            i = 0
            while i < len(nums):
                num = nums[i]
                temp = curr_sum + num
                curr_sum = (temp if temp > 0.0 else 0.0)
                if curr_sum > max_sum:
                    max_sum = curr_sum
                i = i + 1
        else:
            max_sum = nums[0]
            curr_sum = nums[0]
            i = 1
            while i < len(nums):
                num = nums[i]
                temp = curr_sum + num
                curr_sum = (temp if temp > num else num)
                if curr_sum > max_sum:
                    max_sum = curr_sum
                i = i + 1
        return max_sum
    print(_str(max_subarray_sum([2.0, 8.0, 9.0], False)))
    print(_str(max_subarray_sum([0.0, 0.0], False)))
    print(_str(max_subarray_sum([-1.0, 0.0, 1.0], False)))
    print(_str(max_subarray_sum([1.0, 2.0, 3.0, 4.0, -2.0], False)))
    print(_str(max_subarray_sum([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0], False)))
    print(_str(max_subarray_sum([2.0, 3.0, -9.0, 8.0, -2.0], False)))
    print(_str(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], False)))
    print(_str(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], True)))
    empty = []
    print(_str(max_subarray_sum(empty, False)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

