# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def sort_list(nums):
    arr = nums
    i = 1
    while i < len(arr):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key
        i = i + 1
    return arr
def largest_divisible_subset(items):
    if len(items) == 0:
        return []
    nums = sort_list(items)
    n = len(nums)
    memo = []
    prev = []
    i = 0
    while i < n:
        memo = _append(memo, 1)
        prev = _append(prev, i)
        i = i + 1
    i = 0
    while i < n:
        j = 0
        while j < i:
            if (nums[j] == 0 or nums[i] % nums[j] == 0) and memo[j] + 1 > memo[i]:
                memo[i] = memo[j] + 1
                prev[i] = j
            j = j + 1
        i = i + 1
    ans = 0 - 1
    last_index = 0 - 1
    i = 0
    while i < n:
        if memo[i] > ans:
            ans = memo[i]
            last_index = i
        i = i + 1
    if last_index == 0 - 1:
        return []
    result = [nums[last_index]]
    while prev[last_index] != last_index:
        last_index = prev[last_index]
        result = _append(result, nums[last_index])
    return result
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        items = [1, 16, 7, 8, 4]
        subset = largest_divisible_subset(items)
        print("The longest divisible subset of " + _str(items) + " is " + _str(subset) + ".")
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

