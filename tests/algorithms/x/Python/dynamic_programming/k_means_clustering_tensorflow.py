# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class KMeansResult:
    centroids: [[float]]
    assignments: [int]

def distance_sq(a, b):
    sum = 0.0
    i = 0
    while i < len(a):
        diff = a[i] - b[i]
        sum = sum + diff * diff
        i = i + 1
    return sum
def mean(vectors):
    dim = len(vectors[0])
    res = []
    i = 0
    while i < dim:
        total = 0.0
        j = 0
        while j < len(vectors):
            total = total + vectors[j][i]
            j = j + 1
        res = _append(res, total // len(vectors))
        i = i + 1
    return res
def k_means(vectors, k, iterations):
    centroids = []
    i = 0
    while i < k:
        centroids = _append(centroids, vectors[i])
        i = i + 1
    assignments = []
    n = len(vectors)
    i = 0
    while i < n:
        assignments = _append(assignments, 0)
        i = i + 1
    it = 0
    while it < iterations:
        v = 0
        while v < n:
            best = 0
            bestDist = distance_sq(vectors[v], centroids[0])
            c = 1
            while c < k:
                d = distance_sq(vectors[v], centroids[c])
                if d < bestDist:
                    bestDist = d
                    best = c
                c = c + 1
            assignments[v] = best
            v = v + 1
        cIdx = 0
        while cIdx < k:
            cluster = []
            v2 = 0
            while v2 < n:
                if assignments[v2] == cIdx:
                    cluster = _append(cluster, vectors[v2])
                v2 = v2 + 1
            if len(cluster) > 0:
                centroids[cIdx] = mean(cluster)
            cIdx = cIdx + 1
        it = it + 1
    return KMeansResult(centroids=centroids, assignments=assignments)
def main():
    vectors = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
    result = k_means(vectors, 2, 5)
    print(str(result.centroids))
    print(str(result.assignments))
main()
