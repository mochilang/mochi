# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def build_set(words):
        m = {}
        for w in words:
            m[w] = True
        return m
    def word_break(s, words):
        n = len(s)
        dict = build_set(words)
        dp = []
        i = 0
        while i <= n:
            dp = _append(dp, False)
            i = i + 1
        dp[0] = True
        i = 1
        while i <= n:
            j = 0
            while j < i:
                if dp[j]:
                    sub = s[j:i]
                    if sub in dict:
                        dp[i] = True
                        j = i
                j = j + 1
            i = i + 1
        return dp[n]
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    print_bool(word_break("applepenapple", ["apple", "pen"]))
    print_bool(word_break("catsandog", ["cats", "dog", "sand", "and", "cat"]))
    print_bool(word_break("cars", ["car", "ca", "rs"]))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

