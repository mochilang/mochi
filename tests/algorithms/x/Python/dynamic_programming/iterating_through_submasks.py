# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def bitwise_and(a, b):
        result = 0
        bit = 1
        x = a
        y = b
        while x > 0 or y > 0:
            abit = x % 2
            bbit = y % 2
            if abit == 1 and bbit == 1:
                result = result + bit
            x = x / 2
            y = y / 2
            bit = bit * 2
        return result
    def list_of_submasks(mask):
        if mask <= 0:
            panic("mask needs to be positive integer, your input " + _str(mask))
        all_submasks = []
        submask = mask
        while submask != 0:
            all_submasks = _append(all_submasks, submask)
            submask = bitwise_and(submask - 1, mask)
        return all_submasks
    print(_str(list_of_submasks(15)))
    print(_str(list_of_submasks(13)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

