# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

@dataclass
class Fibonacci:
    sequence: [int]

@dataclass
class FibGetResult:
    fib: Fibonacci
    values: [int]

def create_fibonacci():
    return Fibonacci(sequence=[0, 1])
def fib_get(f, index):
    seq = f.sequence
    while len(seq) < index:
        next = seq[len(seq) - 1] + seq[len(seq) - 2]
        seq = _append(seq, next)
    f.sequence = seq
    result = []
    i = 0
    while i < index:
        result = _append(result, seq[i])
        i = i + 1
    return FibGetResult(fib=f, values=result)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        fib = create_fibonacci()
        res = fib_get(fib, 10)
        fib = res.fib
        print(_str(res.values))
        res = fib_get(fib, 5)
        fib = res.fib
        print(_str(res.values))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

