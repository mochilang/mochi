# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Fibonacci:
    sequence: [int]

@dataclass
class FibGetResult:
    fib: Fibonacci
    values: [int]

def create_fibonacci():
    return Fibonacci(sequence=[0, 1])
def fib_get(f, index):
    seq = f.sequence
    while len(seq) < index:
        next = seq[len(seq) - 1] + seq[len(seq) - 2]
        seq = _append(seq, next)
    f.sequence = seq
    result = []
    i = 0
    while i < index:
        result = _append(result, seq[i])
        i = i + 1
    return FibGetResult(fib=f, values=result)
def main():
    fib = create_fibonacci()
    res = fib_get(fib, 10)
    fib = res.fib
    print(str(res.values))
    res = fib_get(fib, 5)
    fib = res.fib
    print(str(res.values))
main()
