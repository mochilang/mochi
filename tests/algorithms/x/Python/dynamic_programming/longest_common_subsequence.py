# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class LcsResult:
        length: int
        sequence: str
    def zeros_matrix(rows, cols):
        matrix = []
        i = 0
        while i <= rows:
            row = []
            j = 0
            while j <= cols:
                row = _append(row, 0)
                j = j + 1
            matrix = _append(matrix, row)
            i = i + 1
        return matrix
    def longest_common_subsequence(x, y):
        m = len(x)
        n = len(y)
        dp = zeros_matrix(m, n)
        i = 1
        while i <= m:
            j = 1
            while j <= n:
                if x[i - 1] == y[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    if dp[i - 1][j] > dp[i][j - 1]:
                        dp[i][j] = dp[i - 1][j]
                    else:
                        dp[i][j] = dp[i][j - 1]
                j = j + 1
            i = i + 1
        seq = ""
        i2 = m
        j2 = n
        while i2 > 0 and j2 > 0:
            if x[i2 - 1] == y[j2 - 1]:
                seq = x[i2 - 1] + seq
                i2 = i2 - 1
                j2 = j2 - 1
            else:
                if dp[i2 - 1][j2] >= dp[i2][j2 - 1]:
                    i2 = i2 - 1
                else:
                    j2 = j2 - 1
        return LcsResult(length=dp[m][n], sequence=seq)
    a = "AGGTAB"
    b = "GXTXAYB"
    res = longest_common_subsequence(a, b)
    print("len = " + _str(res.length) + ", sub-sequence = " + res.sequence)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

