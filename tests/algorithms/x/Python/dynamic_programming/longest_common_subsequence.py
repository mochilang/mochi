# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class LcsResult:
    length: int
    sequence: str

def zeros_matrix(rows, cols):
    matrix = []
    i = 0
    while i <= rows:
        row = []
        j = 0
        while j <= cols:
            row = _append(row, 0)
            j = j + 1
        matrix = _append(matrix, row)
        i = i + 1
    return matrix
def longest_common_subsequence(x, y):
    m = len(x)
    n = len(y)
    dp = zeros_matrix(m, n)
    i = 1
    while i <= m:
        j = 1
        while j <= n:
            if x[i - 1] == y[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                if dp[i - 1][j] > dp[i][j - 1]:
                    dp[i][j] = dp[i - 1][j]
                else:
                    dp[i][j] = dp[i][j - 1]
            j = j + 1
        i = i + 1
    seq = ""
    i2 = m
    j2 = n
    while i2 > 0 and j2 > 0:
        if x[i2 - 1] == y[j2 - 1]:
            seq = x[i2 - 1] + seq
            i2 = i2 - 1
            j2 = j2 - 1
        else:
            if dp[i2 - 1][j2] >= dp[i2][j2 - 1]:
                i2 = i2 - 1
            else:
                j2 = j2 - 1
    return LcsResult(length=dp[m][n], sequence=seq)
a = "AGGTAB"
b = "GXTXAYB"
res = longest_common_subsequence(a, b)
print("len = " + str(res.length) + ", sub-sequence = " + res.sequence)
