# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 21:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

ascii85_chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def ord(ch):
    idx = ascii85_chars.find(ch)
    if idx >= 0:
        return 33 + idx
    return 0
def chr(n):
    if n >= 33 and n <= 117:
        return ascii85_chars[n - 33:n - 32]
    return "?"
def to_binary(n, bits):
    b = ""
    val = n
    while val > 0:
        b = str(val % 2) + b
        val = val // 2
    while len(b) < bits:
        b = "0" + b
    if len(b) == 0:
        b = "0"
    return b
def bin_to_int(bits):
    n = 0
    i = 0
    while i < len(bits):
        if bits[i] == "1":
            n = n * 2 + 1
        else:
            n = n * 2
        i = i + 1
    return n
def reverse(s):
    res = ""
    i = len(s) - 1
    while i >= 0:
        res = res + s[i]
        i = i - 1
    return res
def base10_to_85(d):
    if d > 0:
        return chr(d % 85 + 33) + base10_to_85(d // 85)
    return ""
def base85_to_10(digits):
    value = 0
    i = 0
    while i < len(digits):
        value = value * 85 + (ord(digits[i]) - 33)
        i = i + 1
    return value
def ascii85_encode(data):
    binary_data = ""
    for ch in data:
        binary_data = binary_data + to_binary(ord(ch), 8)
    null_values = (32 * ((len(binary_data) // 32) + 1) - len(binary_data)) // 8
    total_bits = 32 * ((len(binary_data) // 32) + 1)
    while len(binary_data) < total_bits:
        binary_data = binary_data + "0"
    result = ""
    i = 0
    while i < len(binary_data):
        chunk_bits = binary_data[i:i + 32]
        chunk_val = bin_to_int(chunk_bits)
        encoded = reverse(base10_to_85(chunk_val))
        result = result + encoded
        i = i + 32
    if null_values % 4 != 0:
        result = result[0:len(result) - null_values]
    return result
def ascii85_decode(data):
    null_values = 5 * ((len(data) // 5) + 1) - len(data)
    binary_data = data
    i = 0
    while i < null_values:
        binary_data = binary_data + "u"
        i = i + 1
    result = ""
    i = 0
    while i < len(binary_data):
        chunk = binary_data[i:i + 5]
        value = base85_to_10(chunk)
        bits = to_binary(value, 32)
        j = 0
        while j < 32:
            byte_bits = bits[j:j + 8]
            c = chr(bin_to_int(byte_bits))
            result = result + c
            j = j + 8
        i = i + 5
    trim = null_values
    if null_values % 5 == 0:
        trim = null_values - 1
    return result[0:len(result) - trim]
print(ascii85_encode(""))
print(ascii85_encode("12345"))
print(ascii85_encode("base 85"))
print(ascii85_decode(""))
print(ascii85_decode("0etOA2#"))
print(ascii85_decode("@UX=h+?24"))
