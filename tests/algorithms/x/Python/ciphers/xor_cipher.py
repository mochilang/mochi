# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def xor(a, b):
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 or y > 0:
        abit = x % 2
        bbit = y % 2
        if abit != bbit:
            res = res + bit
        x = x // 2
        y = y // 2
        bit = bit * 2
    return res
ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
def ord(ch):
    i = 0
    while i < len(ascii):
        if ascii[i:i + 1] == ch:
            return 32 + i
        i = i + 1
    return 0
def chr(n):
    if n >= 32 and n < 127:
        return ascii[n - 32:n - 31]
    return ""
def normalize_key(key):
    k = key
    if k == 0:
        k = 1
    k = k % 256
    if k < 0:
        k = k + 256
    return k
def encrypt(content, key):
    k = normalize_key(key)
    result = []
    i = 0
    while i < len(content):
        c = ord(content[i:i + 1])
        e = xor(c, k)
        result = _append(result, chr(e))
        i = i + 1
    return result
def encrypt_string(content, key):
    chars = encrypt(content, key)
    out = ""
    for ch in chars:
        out = out + ch
    return out
sample = "hallo welt"
enc = encrypt_string(sample, 1)
dec = encrypt_string(enc, 1)
print(str(encrypt(sample, 1)))
print(enc)
print(dec)
