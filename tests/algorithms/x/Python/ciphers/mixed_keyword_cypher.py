# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER = "abcdefghijklmnopqrstuvwxyz"
def to_upper(s):
    res = ""
    i = 0
    while i < len(s):
        ch = s[i]
        j = 0
        found = False
        while j < 26:
            if ch == LOWER[j]:
                res = res + UPPER[j]
                found = True
                break
            j = j + 1
        if found == False:
            res = res + ch
        i = i + 1
    return res
def contains(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return True
        i = i + 1
    return False
def contains_char(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return True
        i = i + 1
    return False
def get_value(keys, values, key):
    i = 0
    while i < len(keys):
        if keys[i] == key:
            return values[i]
        i = i + 1
    return None
def print_mapping(keys, values):
    s = "{"
    i = 0
    while i < len(keys):
        s = s + "'" + keys[i] + "': '" + values[i] + "'"
        if i + 1 < len(keys):
            s = s + ", "
        i = i + 1
    s = s + "}"
    print(s)
def mixed_keyword(keyword, plaintext, verbose):
    alphabet = UPPER
    keyword_u = to_upper(keyword)
    plaintext_u = to_upper(plaintext)
    unique = []
    i = 0
    while i < len(keyword_u):
        ch = keyword_u[i]
        if contains_char(alphabet, ch) and ch in unique == False:
            unique = _append(unique, ch)
        i = i + 1
    num_unique = len(unique)
    shifted = []
    i = 0
    while i < len(unique):
        shifted = _append(shifted, unique[i])
        i = i + 1
    i = 0
    while i < len(alphabet):
        ch = alphabet[i]
        if ch in unique == False:
            shifted = _append(shifted, ch)
        i = i + 1
    modified = []
    k = 0
    while k < len(shifted):
        row = []
        r = 0
        while r < num_unique and k + r < len(shifted):
            row = _append(row, shifted[k + r])
            r = r + 1
        modified = _append(modified, row)
        k = k + num_unique
    keys = []
    values = []
    column = 0
    letter_index = 0
    while column < num_unique:
        row_idx = 0
        while row_idx < len(modified):
            row = modified[row_idx]
            if len(row) <= column:
                break
            keys = _append(keys, alphabet[letter_index])
            values = _append(values, row[column])
            letter_index = letter_index + 1
            row_idx = row_idx + 1
        column = column + 1
    if verbose:
        print_mapping(keys, values)
    result = ""
    i = 0
    while i < len(plaintext_u):
        ch = plaintext_u[i]
        mapped = get_value(keys, values, ch)
        if mapped == None:
            result = result + ch
        else:
            result = result + mapped
        i = i + 1
    return result
print(mixed_keyword("college", "UNIVERSITY", True))
