# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

seed = 1
def set_seed(s):
    global seed
    seed = s
def randint(a, b):
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return (seed % (b - a + 1)) + a
ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
def ord(ch):
    i = 0
    while i < len(ascii_chars):
        if ascii_chars[i] == ch:
            return 32 + i
        i = i + 1
    return 0
def chr(code):
    if code < 32 or code > 126:
        return ""
    return ascii_chars[code - 32]
def encrypt(text):
    cipher = []
    key = []
    i = 0
    while i < len(text):
        p = ord(text[i])
        k = randint(1, 300)
        c = (p + k) * k
        cipher = _append(cipher, c)
        key = _append(key, k)
        i = i + 1
    res = {}
    res["cipher"] = cipher
    res["key"] = key
    return res
def decrypt(cipher, key):
    plain = ""
    i = 0
    while i < len(key):
        p = ((cipher[i] - key[i] * key[i]) // key[i])
        plain = plain + chr(p)
        i = i + 1
    return plain
set_seed(1)
res = encrypt("Hello")
cipher = res.get("cipher")
key = res.get("key")
print(cipher)
print(key)
print(decrypt(cipher, key))
