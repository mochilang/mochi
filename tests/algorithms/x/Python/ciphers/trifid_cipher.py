# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

triagrams = ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"]
def remove_spaces(s):
    res = ""
    i = 0
    while i < len(s):
        c = s[i:i + 1]
        if c != " ":
            res = res + c
        i = i + 1
    return res
def char_to_trigram(ch, alphabet):
    i = 0
    while i < len(alphabet):
        if alphabet[i:i + 1] == ch:
            return triagrams[i]
        i = i + 1
    return ""
def trigram_to_char(tri, alphabet):
    i = 0
    while i < len(triagrams):
        if triagrams[i] == tri:
            return alphabet[i:i + 1]
        i = i + 1
    return ""
def encrypt_part(part, alphabet):
    one = ""
    two = ""
    three = ""
    i = 0
    while i < len(part):
        tri = char_to_trigram(part[i:i + 1], alphabet)
        one = one + tri[0:1]
        two = two + tri[1:2]
        three = three + tri[2:3]
        i = i + 1
    return one + two + three
def encrypt_message(message, alphabet, period):
    msg = remove_spaces(message)
    alpha = remove_spaces(alphabet)
    if len(alpha) != 27:
        return ""
    encrypted_numeric = ""
    i = 0
    while i < len(msg):
        end = i + period
        if end > len(msg):
            end = len(msg)
        part = msg[i:end]
        encrypted_numeric = encrypted_numeric + encrypt_part(part, alpha)
        i = i + period
    encrypted = ""
    j = 0
    while j < len(encrypted_numeric):
        tri = encrypted_numeric[j:j + 3]
        encrypted = encrypted + trigram_to_char(tri, alpha)
        j = j + 3
    return encrypted
def decrypt_part(part, alphabet):
    converted = ""
    i = 0
    while i < len(part):
        tri = char_to_trigram(part[i:i + 1], alphabet)
        converted = converted + tri
        i = i + 1
    result = []
    tmp = ""
    j = 0
    while j < len(converted):
        tmp = tmp + converted[j:j + 1]
        if len(tmp) == len(part):
            result = _append(result, tmp)
            tmp = ""
        j = j + 1
    return result
def decrypt_message(message, alphabet, period):
    msg = remove_spaces(message)
    alpha = remove_spaces(alphabet)
    if len(alpha) != 27:
        return ""
    decrypted_numeric = []
    i = 0
    while i < len(msg):
        end = i + period
        if end > len(msg):
            end = len(msg)
        part = msg[i:end]
        groups = decrypt_part(part, alpha)
        k = 0
        while k < len(groups[0]):
            tri = groups[0][k:k + 1] + groups[1][k:k + 1] + groups[2][k:k + 1]
            decrypted_numeric = _append(decrypted_numeric, tri)
            k = k + 1
        i = i + period
    decrypted = ""
    j = 0
    while j < len(decrypted_numeric):
        decrypted = decrypted + trigram_to_char(decrypted_numeric[j], alpha)
        j = j + 1
    return decrypted
def main():
    msg = "DEFEND THE EAST WALL OF THE CASTLE."
    alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
    encrypted = encrypt_message(msg, alphabet, 5)
    decrypted = decrypt_message(encrypted, alphabet, 5)
    print("Encrypted: " + encrypted)
    print("Decrypted: " + decrypted)
main()
