# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 21:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
def indexOfChar(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    idx = indexOfChar(upper, ch)
    if idx >= 0:
        return 65 + idx
    idx = indexOfChar(lower, ch)
    if idx >= 0:
        return 97 + idx
    idx = indexOfChar(digits, ch)
    if idx >= 0:
        return 48 + idx
    if ch == " ":
        return 32
    if ch == "!":
        return 33
    return 0
def chr(code):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    if code == 32:
        return " "
    if code == 33:
        return "!"
    idx = code - 65
    if idx >= 0 and idx < len(upper):
        return upper[idx]
    idx = code - 97
    if idx >= 0 and idx < len(lower):
        return lower[idx]
    idx = code - 48
    if idx >= 0 and idx < len(digits):
        return digits[idx]
    return ""
def repeat(s, n):
    out = ""
    i = 0
    while i < n:
        out = out + s
        i = i + 1
    return out
def to_binary(n, bits):
    v = n
    out = ""
    i = 0
    while i < bits:
        out = str(v % 2) + out
        v = v // 2
        i = i + 1
    return out
def binary_to_int(bits):
    n = 0
    i = 0
    while i < len(bits):
        n = n * 2
        if bits[i] == "1":
            n = n + 1
        i = i + 1
    return n
def base32_encode(data):
    binary_data = ""
    i = 0
    while i < len(data):
        binary_data = binary_data + to_binary(ord(data[i]), 8)
        i = i + 1
    remainder = len(binary_data) % 5
    if remainder != 0:
        binary_data = binary_data + "0" * (5 - remainder)
    b32_result = ""
    j = 0
    while j < len(binary_data):
        chunk = binary_data[j:j + 5]
        index = binary_to_int(chunk)
        b32_result = b32_result + B32_CHARSET[index]
        j = j + 5
    rem = len(b32_result) % 8
    if rem != 0:
        b32_result = b32_result + "=" * (8 - rem)
    return b32_result
def base32_decode(data):
    clean = ""
    i = 0
    while i < len(data):
        ch = data[i]
        if ch != "=":
            clean = clean + ch
        i = i + 1
    binary_chunks = ""
    i = 0
    while i < len(clean):
        idx = indexOfChar(B32_CHARSET, clean[i])
        binary_chunks = binary_chunks + to_binary(idx, 5)
        i = i + 1
    result = ""
    j = 0
    while j + 8 <= len(binary_chunks):
        byte_bits = binary_chunks[j:j + 8]
        code = binary_to_int(byte_bits)
        result = result + chr(code)
        j = j + 8
    return result
print(base32_encode("Hello World!"))
print(base32_encode("123456"))
print(base32_encode("some long complex string"))
print(base32_decode("JBSWY3DPEBLW64TMMQQQ===="))
print(base32_decode("GEZDGNBVGY======"))
print(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))
