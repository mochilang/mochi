# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Result:
    shift: int
    chi: float
    decoded: str

def default_alphabet():
    return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
def default_frequencies():
    return {"a": 0.08497, "b": 0.01492, "c": 0.02202, "d": 0.04253, "e": 0.11162, "f": 0.02228, "g": 0.02015, "h": 0.06094, "i": 0.07546, "j": 0.00153, "k": 0.01292, "l": 0.04025, "m": 0.02406, "n": 0.06749, "o": 0.07507, "p": 0.01929, "q": 0.00095, "r": 0.07587, "s": 0.06327, "t": 0.09356, "u": 0.02758, "v": 0.00978, "w": 0.0256, "x": 0.0015, "y": 0.01994, "z": 0.00077}
def index_of(xs, ch):
    i = 0
    while i < len(xs):
        if xs[i] == ch:
            return i
        i = i + 1
    return -1
def count_char(s, ch):
    count = 0
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            count = count + 1
        i = i + 1
    return count
def decrypt_caesar_with_chi_squared(ciphertext, cipher_alphabet, frequencies_dict, case_sensitive):
    alphabet_letters = cipher_alphabet
    if len(alphabet_letters) == 0:
        alphabet_letters = default_alphabet()
    frequencies = frequencies_dict
    if len(frequencies) == 0:
        frequencies = default_frequencies()
    if not case_sensitive:
        ciphertext = ciphertext.lower()
    best_shift = 0
    best_chi = 0.0
    best_text = ""
    shift = 0
    while shift < len(alphabet_letters):
        decrypted = ""
        i = 0
        while i < len(ciphertext):
            ch = ciphertext[i:i + 1]
            idx = index_of(alphabet_letters, ch.lower())
            if idx >= 0:
                m = len(alphabet_letters)
                new_idx = (idx - shift) % m
                if new_idx < 0:
                    new_idx = new_idx + m
                new_char = alphabet_letters[new_idx]
                if case_sensitive and ch != ch.lower():
                    decrypted = decrypted + new_char.upper()
                else:
                    decrypted = decrypted + new_char
            else:
                decrypted = decrypted + ch
            i = i + 1
        chi = 0.0
        lowered = (decrypted.lower() if case_sensitive else decrypted)
        j = 0
        while j < len(alphabet_letters):
            letter = alphabet_letters[j]
            occ = count_char(lowered, letter)
            if occ > 0:
                occf = float(occ)
                expected = frequencies[letter] * occf
                diff = occf - expected
                chi = chi + ((diff * diff) // expected) * occf
            j = j + 1
        if shift == 0 or chi < best_chi:
            best_shift = shift
            best_chi = chi
            best_text = decrypted
        shift = shift + 1
    return Result(shift=best_shift, chi=best_chi, decoded=best_text)
r1 = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", [], {}, False)
print(str(r1.shift) + ", " + str(r1.chi) + ", " + r1.decoded)
r2 = decrypt_caesar_with_chi_squared("crybd cdbsxq", [], {}, False)
print(str(r2.shift) + ", " + str(r2.chi) + ", " + r2.decoded)
r3 = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", [], {}, True)
print(str(r3.shift) + ", " + str(r3.chi) + ", " + r3.decoded)
