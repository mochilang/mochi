# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

default_alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
def index_of(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return -1
def encrypt(input_string, key, alphabet):
    result = ""
    i = 0
    n = len(alphabet)
    while i < len(input_string):
        ch = input_string[i:i + 1]
        idx = index_of(alphabet, ch)
        if idx < 0:
            result = result + ch
        else:
            new_key = (idx + key) % n
            if new_key < 0:
                new_key = new_key + n
            result = result + alphabet[new_key:new_key + 1]
        i = i + 1
    return result
def decrypt(input_string, key, alphabet):
    result = ""
    i = 0
    n = len(alphabet)
    while i < len(input_string):
        ch = input_string[i:i + 1]
        idx = index_of(alphabet, ch)
        if idx < 0:
            result = result + ch
        else:
            new_key = (idx - key) % n
            if new_key < 0:
                new_key = new_key + n
            result = result + alphabet[new_key:new_key + 1]
        i = i + 1
    return result
def brute_force(input_string, alphabet):
    results = []
    key = 1
    n = len(alphabet)
    while key <= n:
        message = decrypt(input_string, key, alphabet)
        results = _append(results, message)
        key = key + 1
    return results
def main():
    alpha = default_alphabet
    enc = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha)
    print(enc)
    dec = decrypt(enc, 8, alpha)
    print(dec)
    brute = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha)
    print(brute[19])
main()
