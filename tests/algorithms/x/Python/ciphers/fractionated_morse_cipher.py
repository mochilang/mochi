# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

MORSE_CODE_DICT = {"A": ".-", "B": "-...", "C": "-.-.", "D": "-..", "E": ".", "F": "..-.", "G": "--.", "H": "....", "I": "..", "J": ".---", "K": "-.-", "L": ".-..", "M": "--", "N": "-.", "O": "---", "P": ".--.", "Q": "--.-", "R": ".-.", "S": "...", "T": "-", "U": "..-", "V": "...-", "W": ".--", "X": "-..-", "Y": "-.--", "Z": "--..", " ": ""}
MORSE_COMBINATIONS = ["...", "..-", "..x", ".-.", ".--", ".-x", ".x.", ".x-", ".xx", "-..", "-.-", "-.x", "--.", "---", "--x", "-x.", "-x-", "-xx", "x..", "x.-", "x.x", "x-.", "x--", "x-x", "xx.", "xx-", "xxx"]
REVERSE_DICT = {".-": "A", "-...": "B", "-.-.": "C", "-..": "D", ".": "E", "..-.": "F", "--.": "G", "....": "H", "..": "I", ".---": "J", "-.-": "K", ".-..": "L", "--": "M", "-.": "N", "---": "O", ".--.": "P", "--.-": "Q", ".-.": "R", "...": "S", "-": "T", "..-": "U", "...-": "V", ".--": "W", "-..-": "X", "-.--": "Y", "--..": "Z", "": " "}
def encodeToMorse(plaintext):
    morse = ""
    i = 0
    while i < len(plaintext):
        ch = plaintext[i:i + 1].upper()
        code = ""
        if ch in MORSE_CODE_DICT:
            code = MORSE_CODE_DICT.get(ch)
        if i > 0:
            morse = morse + "x"
        morse = morse + code
        i = i + 1
    return morse
def encryptFractionatedMorse(plaintext, key):
    morseCode = encodeToMorse(plaintext)
    combinedKey = key.upper() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    dedupKey = ""
    i = 0
    while i < len(combinedKey):
        ch = combinedKey[i:i + 1]
        if not (ch in dedupKey):
            dedupKey = dedupKey + ch
        i = i + 1
    paddingLength = 3 - (len(morseCode) % 3)
    p = 0
    while p < paddingLength:
        morseCode = morseCode + "x"
        p = p + 1
    dict = {}
    j = 0
    while j < 26:
        combo = MORSE_COMBINATIONS[j]
        letter = dedupKey[j:j + 1]
        dict[combo] = letter
        j = j + 1
    dict["xxx"] = ""
    encrypted = ""
    k = 0
    while k < len(morseCode):
        group = morseCode[k:k + 3]
        encrypted = encrypted + dict[group]
        k = k + 3
    return encrypted
def decryptFractionatedMorse(ciphertext, key):
    combinedKey = key.upper() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    dedupKey = ""
    i = 0
    while i < len(combinedKey):
        ch = combinedKey[i:i + 1]
        if not (ch in dedupKey):
            dedupKey = dedupKey + ch
        i = i + 1
    inv = {}
    j = 0
    while j < 26:
        letter = dedupKey[j:j + 1]
        inv[letter] = MORSE_COMBINATIONS[j]
        j = j + 1
    morse = ""
    k = 0
    while k < len(ciphertext):
        ch = ciphertext[k:k + 1]
        if ch in inv:
            morse = morse + inv[ch]
        k = k + 1
    codes = []
    current = ""
    m = 0
    while m < len(morse):
        ch = morse[m:m + 1]
        if ch == "x":
            codes = _append(codes, current)
            current = ""
        else:
            current = current + ch
        m = m + 1
    codes = _append(codes, current)
    decrypted = ""
    idx = 0
    while idx < len(codes):
        code = codes[idx]
        decrypted = decrypted + REVERSE_DICT.get(code)
        idx = idx + 1
    start = 0
    while True:
        if start < len(decrypted):
            if decrypted[start:start + 1] == " ":
                start = start + 1
                continue
        break
    end = len(decrypted)
    while True:
        if end > start:
            if decrypted[end - 1:end] == " ":
                end = end - 1
                continue
        break
    return decrypted[start:end]
plaintext = "defend the east"
print("Plain Text:", plaintext)
key = "ROUNDTABLE"
ciphertext = encryptFractionatedMorse(plaintext, key)
print("Encrypted:", ciphertext)
decrypted = decryptFractionatedMorse(ciphertext, key)
print("Decrypted:", decrypted)
