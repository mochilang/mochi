# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def encrypt_message(key, message):
    result = ""
    col = 0
    while col < key:
        pointer = col
        while pointer < len(message):
            result = result + message[pointer]
            pointer = pointer + key
        col = col + 1
    return result
def decrypt_message(key, message):
    msg_len = len(message)
    num_cols = msg_len // key
    if msg_len % key != 0:
        num_cols = num_cols + 1
    num_rows = key
    num_shaded_boxes = num_cols * num_rows - msg_len
    plain = []
    i = 0
    while i < num_cols:
        plain = _append(plain, "")
        i = i + 1
    col = 0
    row = 0
    idx = 0
    while idx < msg_len:
        ch = message[idx]
        plain[col] = plain[col] + ch
        col = col + 1
        if col == num_cols or (col == num_cols - 1 and row >= num_rows - num_shaded_boxes):
            col = 0
            row = row + 1
        idx = idx + 1
    result = ""
    i = 0
    while i < num_cols:
        result = result + plain[i]
        i = i + 1
    return result
key = 6
message = "Harshil Darji"
encrypted = encrypt_message(key, message)
print(encrypted)
decrypted = decrypt_message(key, encrypted)
print(decrypted)
