# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def index_in_string(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def contains_char(s, ch):
    return index_in_string(s, ch) >= 0
def is_alpha(ch):
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    return contains_char(lower, ch) or contains_char(upper, ch)
def to_upper(s):
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    res = ""
    i = 0
    while i < len(s):
        ch = s[i]
        idx = index_in_string(lower, ch)
        if idx >= 0:
            res = res + upper[idx]
        else:
            res = res + ch
        i = i + 1
    return res
def remove_duplicates(key):
    res = ""
    i = 0
    while i < len(key):
        ch = key[i]
        if ch == " " or (is_alpha(ch) and contains_char(res, ch) == False):
            res = res + ch
        i = i + 1
    return res
def create_cipher_map(key):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    cleaned = remove_duplicates(to_upper(key))
    cipher = []
    i = 0
    while i < len(cleaned):
        cipher = _append(cipher, cleaned[i])
        i = i + 1
    offset = len(cleaned)
    j = len(cipher)
    while j < 26:
        char = alphabet[j - offset]
        while contains_char(cleaned, char):
            offset = offset - 1
            char = alphabet[j - offset]
        cipher = _append(cipher, char)
        j = j + 1
    return cipher
def index_in_list(lst, ch):
    i = 0
    while i < len(lst):
        if lst[i] == ch:
            return i
        i = i + 1
    return -1
def encipher(message, cipher):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    msg = to_upper(message)
    res = ""
    i = 0
    while i < len(msg):
        ch = msg[i]
        idx = index_in_string(alphabet, ch)
        if idx >= 0:
            res = res + cipher[idx]
        else:
            res = res + ch
        i = i + 1
    return res
def decipher(message, cipher):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    msg = to_upper(message)
    res = ""
    i = 0
    while i < len(msg):
        ch = msg[i]
        idx = index_in_list(cipher, ch)
        if idx >= 0:
            res = res + alphabet[idx]
        else:
            res = res + ch
        i = i + 1
    return res
cipher_map = create_cipher_map("Goodbye!!")
encoded = encipher("Hello World!!", cipher_map)
print(encoded)
print(decipher(encoded, cipher_map))
