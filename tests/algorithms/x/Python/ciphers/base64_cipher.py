# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 21:45 +0700
import json

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

B64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
def to_binary(n):
    if n == 0:
        return "0"
    num = n
    res = ""
    while num > 0:
        bit = num % 2
        res = str(bit) + res
        num = num // 2
    return res
def zfill(s, width):
    res = s
    pad = width - len(s)
    while pad > 0:
        res = "0" + res
        pad = pad - 1
    return res
def from_binary(s):
    i = 0
    result = 0
    while i < len(s):
        result = result * 2
        if s[i:i + 1] == "1":
            result = result + 1
        i = i + 1
    return result
def repeat(ch, times):
    res = ""
    i = 0
    while i < times:
        res = res + ch
        i = i + 1
    return res
def char_index(s, c):
    i = 0
    while i < len(s):
        if s[i:i + 1] == c:
            return i
        i = i + 1
    return -1
def base64_encode(data):
    bits = ""
    i = 0
    while i < len(data):
        bits = bits + zfill(to_binary(data[i]), 8)
        i = i + 1
    pad_bits = 0
    if len(bits) % 6 != 0:
        pad_bits = 6 - len(bits) % 6
        bits = bits + "0" * pad_bits
    j = 0
    encoded = ""
    while j < len(bits):
        chunk = bits[j:j + 6]
        idx = from_binary(chunk)
        encoded = encoded + B64_CHARSET[idx:idx + 1]
        j = j + 6
    pad = pad_bits // 2
    while pad > 0:
        encoded = encoded + "="
        pad = pad - 1
    return encoded
def base64_decode(s):
    padding = 0
    end = len(s)
    while end > 0 and s[end - 1:end] == "=":
        padding = padding + 1
        end = end - 1
    bits = ""
    k = 0
    while k < end:
        c = s[k:k + 1]
        idx = char_index(B64_CHARSET, c)
        bits = bits + zfill(to_binary(idx), 6)
        k = k + 1
    if padding > 0:
        bits = bits[0:len(bits) - padding * 2]
    bytes = []
    m = 0
    while m < len(bits):
        byte = from_binary(bits[m:m + 8])
        bytes = _append(bytes, byte)
        m = m + 8
    return bytes
def main():
    data = [77, 111, 99, 104, 105]
    encoded = base64_encode(data)
    print(encoded)
    print(json.dumps(base64_decode(encoded), indent=2))
main()
