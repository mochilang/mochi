# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def int_to_hex(n):
    if n == 0:
        return "0"
    digits = "0123456789abcdef"
    num = n
    res = ""
    while num > 0:
        d = num % 16
        res = digits[d] + res
        num = num // 16
    return res
seed = 123456789
def rand_int():
    global seed
    seed = (1103515245 * seed + 12345) % 2147483648
    return seed
PRIME = 23
def mod_pow(base, exp):
    result = 1
    b = base % PRIME
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = (result * b) % PRIME
        b = (b * b) % PRIME
        e = e // 2
    return result
def is_valid_public_key(key):
    if key < 2 or key > PRIME - 2:
        return False
    return mod_pow(key, (PRIME - 1) // 2) == 1
def generate_private_key():
    return rand_int() % (PRIME - 2) + 2
generator = 5
alice_private = generate_private_key()
alice_public = mod_pow(generator, alice_private)
bob_private = generate_private_key()
bob_public = mod_pow(generator, bob_private)
if not is_valid_public_key(alice_public):
    panic("Invalid public key")
if not is_valid_public_key(bob_public):
    panic("Invalid public key")
alice_shared = mod_pow(bob_public, alice_private)
bob_shared = mod_pow(alice_public, bob_private)
print(int_to_hex(alice_shared))
print(int_to_hex(bob_shared))
