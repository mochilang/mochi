# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def base16_encode(data):
    digits = "0123456789ABCDEF"
    res = ""
    i = 0
    while i < len(data):
        b = data[i]
        if b < 0 or b > 255:
            panic("byte out of range")
        hi = b // 16
        lo = b % 16
        res = res + digits[hi:hi + 1] + digits[lo:lo + 1]
        i = i + 1
    return res
def base16_decode(data):
    digits = "0123456789ABCDEF"
    if len(data) % 2 != 0:
        panic("Base16 encoded data is invalid: Data does not have an even number of hex digits.")
    def hex_value(ch):
        j = 0
        while j < 16:
            if digits[j:j + 1] == ch:
                return j
            j = j + 1
        return -1
    out = []
    i = 0
    while i < len(data):
        hi_char = data[i:i + 1]
        lo_char = data[i + 1:i + 2]
        hi = hex_value(hi_char)
        lo = hex_value(lo_char)
        if hi < 0 or lo < 0:
            panic("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.")
        out = _append(out, hi * 16 + lo)
        i = i + 2
    return out
example1 = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
example2 = [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33]
print(base16_encode(example1))
print(base16_encode(example2))
print(base16_encode([]))
print(str(base16_decode("48656C6C6F20576F726C6421")))
print(str(base16_decode("48454C4C4F20574F524C4421")))
print(str(base16_decode("")))
