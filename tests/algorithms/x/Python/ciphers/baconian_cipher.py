# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    encode_map = {"a": "AAAAA", "b": "AAAAB", "c": "AAABA", "d": "AAABB", "e": "AABAA", "f": "AABAB", "g": "AABBA", "h": "AABBB", "i": "ABAAA", "j": "BBBAA", "k": "ABAAB", "l": "ABABA", "m": "ABABB", "n": "ABBAA", "o": "ABBAB", "p": "ABBBA", "q": "ABBBB", "r": "BAAAA", "s": "BAAAB", "t": "BAABA", "u": "BAABB", "v": "BBBAB", "w": "BABAA", "x": "BABAB", "y": "BABBA", "z": "BABBB", " ": " "}
    def make_decode_map():
        m = {}
        for k in encode_map:
            m[encode_map.get(k)] = k
        return m
    decode_map = make_decode_map()
    def split_spaces(s):
        parts = []
        current = ""
        i = 0
        while i < len(s):
            ch = s[i:i + 1]
            if ch == " ":
                parts = _append(parts, current)
                current = ""
            else:
                current = current + ch
            i = i + 1
        parts = _append(parts, current)
        return parts
    def encode(word):
        w = word.lower()
        encoded = ""
        i = 0
        while i < len(w):
            ch = w[i:i + 1]
            if ch in encode_map:
                encoded = encoded + encode_map.get(ch)
            else:
                panic("encode() accepts only letters of the alphabet and spaces")
            i = i + 1
        return encoded
    def decode(coded):
        i = 0
        while i < len(coded):
            ch = coded[i:i + 1]
            if ch != "A" and ch != "B" and ch != " ":
                panic("decode() accepts only 'A', 'B' and spaces")
            i = i + 1
        words = split_spaces(coded)
        decoded = ""
        w = 0
        while w < len(words):
            word = words[w]
            j = 0
            while j < len(word):
                segment = word[j:j + 5]
                decoded = decoded + decode_map.get(segment)
                j = j + 5
            if w < len(words) - 1:
                decoded = decoded + " "
            w = w + 1
        return decoded
    print(encode("hello"))
    print(encode("hello world"))
    print(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))
    print(decode("AABBBAABAAABABAABABAABBAB"))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
