# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    LOWER = "abcdefghijklmnopqrstuvwxyz"
    UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    def to_lowercase(s):
        res = ""
        i = 0
        while i < len(s):
            c = s[i]
            j = 0
            found = False
            while j < 26:
                if c == UPPER[j]:
                    res = res + LOWER[j]
                    found = True
                    break
                j = j + 1
            if not found:
                res = res + c
            i = i + 1
        return res
    def char_index(c):
        i = 0
        while i < 26:
            if c == LOWER[i]:
                return i
            i = i + 1
        return -1
    def index_char(i):
        return LOWER[i]
    def encrypt(plaintext, key):
        if len(plaintext) == 0:
            panic("plaintext is empty")
        if len(key) == 0:
            panic("key is empty")
        full_key = key + plaintext
        plaintext = to_lowercase(plaintext)
        full_key = to_lowercase(full_key)
        p_i = 0
        k_i = 0
        ciphertext = ""
        while p_i < len(plaintext):
            p_char = plaintext[p_i]
            p_idx = char_index(p_char)
            if p_idx < 0:
                ciphertext = ciphertext + p_char
                p_i = p_i + 1
            else:
                k_char = full_key[k_i]
                k_idx = char_index(k_char)
                if k_idx < 0:
                    k_i = k_i + 1
                else:
                    c_idx = (p_idx + k_idx) % 26
                    ciphertext = ciphertext + index_char(c_idx)
                    k_i = k_i + 1
                    p_i = p_i + 1
        return ciphertext
    def decrypt(ciphertext, key):
        if len(ciphertext) == 0:
            panic("ciphertext is empty")
        if len(key) == 0:
            panic("key is empty")
        current_key = to_lowercase(key)
        c_i = 0
        k_i = 0
        plaintext = ""
        while c_i < len(ciphertext):
            c_char = ciphertext[c_i]
            c_idx = char_index(c_char)
            if c_idx < 0:
                plaintext = plaintext + c_char
            else:
                k_char = current_key[k_i]
                k_idx = char_index(k_char)
                p_idx = (c_idx - k_idx + 26) % 26
                p_char = index_char(p_idx)
                plaintext = plaintext + p_char
                current_key = current_key + p_char
                k_i = k_i + 1
            c_i = c_i + 1
        return plaintext
    print(encrypt("hello world", "coffee"))
    print(decrypt("jsqqs avvwo", "coffee"))
    print(encrypt("coffee is good as python", "TheAlgorithms"))
    print(decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms"))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
