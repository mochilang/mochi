# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def pow2(exp):
    res = 1
    i = 0
    while i < exp:
        res = res * 2
        i = i + 1
    return res
seed = 1
def next_seed(x):
    return (x * 1103515245 + 12345) % 2147483648
def rand_range(min, max):
    global seed
    seed = next_seed(seed)
    return min + seed % (max - min)
def gcd(a, b):
    x = a
    y = b
    while y != 0:
        temp = x % y
        x = y
        y = temp
    return x
def mod_inverse(e, phi):
    t = 0
    newt = 1
    r = phi
    newr = e
    while newr != 0:
        quotient = r // newr
        tmp = newt
        newt = t - quotient * newt
        t = tmp
        tmp_r = newr
        newr = r - quotient * newr
        r = tmp_r
    if r > 1:
        return 0
    if t < 0:
        t = t + phi
    return t
def is_prime(n):
    if n < 2:
        return False
    i = 2
    while i * i <= n:
        if n % i == 0:
            return False
        i = i + 1
    return True
def generate_prime(bits):
    min = pow2(bits - 1)
    max = pow2(bits)
    p = rand_range(min, max)
    if p % 2 == 0:
        p = p + 1
    while not is_prime(p):
        p = p + 2
        if p >= max:
            p = min + 1
    return p
@dataclass
class Keys:
    public_key: [int]
    private_key: [int]

def generate_key(bits):
    p = generate_prime(bits)
    q = generate_prime(bits)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = rand_range(2, phi)
    while gcd(e, phi) != 1:
        e = e + 1
        if e >= phi:
            e = 2
    d = mod_inverse(e, phi)
    return Keys(public_key=[n, e], private_key=[n, d])
keys = generate_key(8)
pub = keys.public_key
priv = keys.private_key
print("Public key: (" + str(pub[0]) + ", " + str(pub[1]) + ")")
print("Private key: (" + str(priv[0]) + ", " + str(priv[1]) + ")")
