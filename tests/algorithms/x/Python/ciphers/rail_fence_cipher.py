# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def encrypt(input_string, key):
    if key <= 0:
        panic("Height of grid can't be 0 or negative")
    if key == 1 or len(input_string) <= key:
        return input_string
    lowest = key - 1
    temp_grid = []
    i = 0
    while i < key:
        temp_grid = _append(temp_grid, [])
        i = i + 1
    position = 0
    while position < len(input_string):
        num = position % (lowest * 2)
        alt = lowest * 2 - num
        if num > alt:
            num = alt
        row = temp_grid[num]
        row = _append(row, input_string[position:position + 1])
        temp_grid[num] = row
        position = position + 1
    output = ""
    i = 0
    while i < key:
        row = temp_grid[i]
        j = 0
        while j < len(row):
            output = output + row[j]
            j = j + 1
        i = i + 1
    return output
def decrypt(input_string, key):
    if key <= 0:
        panic("Height of grid can't be 0 or negative")
    if key == 1:
        return input_string
    lowest = key - 1
    counts = []
    i = 0
    while i < key:
        counts = _append(counts, 0)
        i = i + 1
    pos = 0
    while pos < len(input_string):
        num = pos % (lowest * 2)
        alt = lowest * 2 - num
        if num > alt:
            num = alt
        counts[num] = counts[num] + 1
        pos = pos + 1
    grid = []
    counter = 0
    i = 0
    while i < key:
        length = counts[i]
        slice = input_string[counter:counter + length]
        row = []
        j = 0
        while j < len(slice):
            row = _append(row, slice[j])
            j = j + 1
        grid = _append(grid, row)
        counter = counter + length
        i = i + 1
    indices = []
    i = 0
    while i < key:
        indices = _append(indices, 0)
        i = i + 1
    output = ""
    pos = 0
    while pos < len(input_string):
        num = pos % (lowest * 2)
        alt = lowest * 2 - num
        if num > alt:
            num = alt
        output = output + grid[num][indices[num]]
        indices[num] = indices[num] + 1
        pos = pos + 1
    return output
def bruteforce(input_string):
    results = {}
    key_guess = 1
    while key_guess < len(input_string):
        results[key_guess] = decrypt(input_string, key_guess)
        key_guess = key_guess + 1
    return results
print(encrypt("Hello World", 4))
print(decrypt("HWe olordll", 4))
bf = bruteforce("HWe olordll")
print(bf.get(4))
