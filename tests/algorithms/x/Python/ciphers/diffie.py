# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def mod_pow(base, exp, mod):
    result = 1
    b = base % mod
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = (result * b) % mod
        e = e // 2
        b = (b * b) % mod
    return result
def contains(xs, val):
    i = 0
    while i < len(xs):
        if xs[i] == val:
            return True
        i = i + 1
    return False
def find_primitive(modulus):
    r = 1
    while r < modulus:
        li = []
        x = 0
        valid = True
        while x < modulus - 1 and valid:
            value = mod_pow(r, x, modulus)
            if value in li:
                valid = False
            else:
                li = _append(li, value)
                x = x + 1
        if valid:
            return r
        r = r + 1
    return -1
print(find_primitive(7))
print(find_primitive(11))
print(find_primitive(8))
prime = 23
primitive_root = find_primitive(prime)
if primitive_root == (0 - 1):
    print("Cannot find the primitive for the value: -1")
else:
    a_private = 6
    b_private = 15
    a_public = mod_pow(primitive_root, a_private, prime)
    b_public = mod_pow(primitive_root, b_private, prime)
    a_secret = mod_pow(b_public, a_private, prime)
    b_secret = mod_pow(a_public, b_private, prime)
    print("The key value generated by A is: " + str(a_secret))
    print("The key value generated by B is: " + str(b_secret))
