# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

CHARS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "]
CODES = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"]
def to_upper_char(c):
    if c == "a":
        return "A"
    if c == "b":
        return "B"
    if c == "c":
        return "C"
    if c == "d":
        return "D"
    if c == "e":
        return "E"
    if c == "f":
        return "F"
    if c == "g":
        return "G"
    if c == "h":
        return "H"
    if c == "i":
        return "I"
    if c == "j":
        return "J"
    if c == "k":
        return "K"
    if c == "l":
        return "L"
    if c == "m":
        return "M"
    if c == "n":
        return "N"
    if c == "o":
        return "O"
    if c == "p":
        return "P"
    if c == "q":
        return "Q"
    if c == "r":
        return "R"
    if c == "s":
        return "S"
    if c == "t":
        return "T"
    if c == "u":
        return "U"
    if c == "v":
        return "V"
    if c == "w":
        return "W"
    if c == "x":
        return "X"
    if c == "y":
        return "Y"
    if c == "z":
        return "Z"
    return c
def to_upper(s):
    res = ""
    i = 0
    while i < len(s):
        res = res + to_upper_char(s[i])
        i = i + 1
    return res
def index_of(xs, target):
    i = 0
    while i < len(xs):
        if xs[i] == target:
            return i
        i = i + 1
    return -1
def encrypt(message):
    msg = to_upper(message)
    res = ""
    i = 0
    while i < len(msg):
        c = msg[i]
        idx = index_of(CHARS, c)
        if idx >= 0:
            if res != "":
                res = res + " "
            res = res + CODES[idx]
        i = i + 1
    return res
def split_spaces(s):
    res = []
    current = ""
    i = 0
    while i < len(s):
        ch = s[i]
        if ch == " ":
            if current != "":
                res = _append(res, current)
                current = ""
        else:
            current = current + ch
        i = i + 1
    if current != "":
        res = _append(res, current)
    return res
def decrypt(message):
    parts = split_spaces(message)
    res = ""
    for code in parts:
        idx = index_of(CODES, code)
        if idx >= 0:
            res = res + CHARS[idx]
    return res
msg = "Morse code here!"
print(msg)
enc = encrypt(msg)
print(enc)
dec = decrypt(enc)
print(dec)
print(encrypt("Sos!"))
print(decrypt("... --- ... -.-.--"))
