# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def contains(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return True
        i = i + 1
    return False
def index_of(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return i
        i = i + 1
    return -1
def prepare_input(dirty):
    letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    upper_dirty = dirty.upper()
    filtered = ""
    i = 0
    while i < len(upper_dirty):
        c = upper_dirty[i:i + 1]
        if c in letters:
            filtered = filtered + c
        i = i + 1
    if len(filtered) < 2:
        return filtered
    clean = ""
    i = 0
    while i < len(filtered) - 1:
        c1 = filtered[i:i + 1]
        c2 = filtered[i + 1:i + 2]
        clean = clean + c1
        if c1 == c2:
            clean = clean + "X"
        i = i + 1
    clean = clean + filtered[len(filtered) - 1:len(filtered)]
    if len(clean) % 2 == 1:
        clean = clean + "X"
    return clean
def generate_table(key):
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    table = []
    upper_key = key.upper()
    i = 0
    while i < len(upper_key):
        c = upper_key[i:i + 1]
        if c in alphabet:
            if not (c in table):
                table = _append(table, c)
        i = i + 1
    i = 0
    while i < len(alphabet):
        c = alphabet[i:i + 1]
        if not (c in table):
            table = _append(table, c)
        i = i + 1
    return table
def encode(plaintext, key):
    table = generate_table(key)
    text = prepare_input(plaintext)
    cipher = ""
    i = 0
    while i < len(text):
        c1 = text[i:i + 1]
        c2 = text[i + 1:i + 2]
        idx1 = index_of(table, c1)
        idx2 = index_of(table, c2)
        row1 = idx1 // 5
        col1 = idx1 % 5
        row2 = idx2 // 5
        col2 = idx2 % 5
        if row1 == row2:
            cipher = cipher + table[row1 * 5 + (col1 + 1) % 5]
            cipher = cipher + table[row2 * 5 + (col2 + 1) % 5]
        else:
            if col1 == col2:
                cipher = cipher + table[((row1 + 1) % 5) * 5 + col1]
                cipher = cipher + table[((row2 + 1) % 5) * 5 + col2]
            else:
                cipher = cipher + table[row1 * 5 + col2]
                cipher = cipher + table[row2 * 5 + col1]
        i = i + 2
    return cipher
def decode(cipher, key):
    table = generate_table(key)
    plain = ""
    i = 0
    while i < len(cipher):
        c1 = cipher[i:i + 1]
        c2 = cipher[i + 1:i + 2]
        idx1 = index_of(table, c1)
        idx2 = index_of(table, c2)
        row1 = idx1 // 5
        col1 = idx1 % 5
        row2 = idx2 // 5
        col2 = idx2 % 5
        if row1 == row2:
            plain = plain + table[row1 * 5 + (col1 + 4) % 5]
            plain = plain + table[row2 * 5 + (col2 + 4) % 5]
        else:
            if col1 == col2:
                plain = plain + table[((row1 + 4) % 5) * 5 + col1]
                plain = plain + table[((row2 + 4) % 5) * 5 + col2]
            else:
                plain = plain + table[row1 * 5 + col2]
                plain = plain + table[row2 * 5 + col1]
        i = i + 2
    return plain
def main():
    print("Encoded:", encode("BYE AND THANKS", "GREETING"))
    print("Decoded:", decode("CXRBANRLBALQ", "GREETING"))
main()
