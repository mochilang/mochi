# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER = "abcdefghijklmnopqrstuvwxyz"
BASE_TOP = "ABCDEFGHIJKLM"
BASE_BOTTOM = "NOPQRSTUVWXYZ"
def to_upper(s):
    res = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        j = 0
        replaced = False
        while j < len(LOWER):
            if LOWER[j:j + 1] == ch:
                res = res + UPPER[j:j + 1]
                replaced = True
                break
            j = j + 1
        if not replaced:
            res = res + ch
        i = i + 1
    return res
def char_index(c):
    i = 0
    while i < len(UPPER):
        if UPPER[i:i + 1] == c:
            return i
        i = i + 1
    return -1
def rotate_right(s, k):
    n = len(s)
    shift = k % n
    return s[n - shift:n] + s[0:n - shift]
def table_for(c):
    idx = char_index(c)
    shift = idx // 2
    row1 = rotate_right(BASE_BOTTOM, shift)
    pair = [BASE_TOP, row1]
    return pair
def generate_table(key):
    up = to_upper(key)
    i = 0
    result = []
    while i < len(up):
        ch = up[i:i + 1]
        pair = table_for(ch)
        result = _append(result, pair)
        i = i + 1
    return result
def str_index(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return 0 - 1
def get_position(table, ch):
    row = 0
    if str_index(table[0], ch) == 0 - 1:
        row = 1
    col = str_index(table[row], ch)
    return [row, col]
def get_opponent(table, ch):
    pos = get_position(table, ch)
    row = pos[0]
    col = pos[1]
    if col == 0 - 1:
        return ch
    if row == 1:
        return table[0][col:col + 1]
    return table[1][col:col + 1]
def encrypt(key, words):
    table = generate_table(key)
    up_words = to_upper(words)
    cipher = ""
    count = 0
    i = 0
    while i < len(up_words):
        ch = up_words[i:i + 1]
        cipher = cipher + get_opponent(table[count], ch)
        count = (count + 1) % len(table)
        i = i + 1
    return cipher
def decrypt(key, words):
    res = encrypt(key, words)
    return res
def main():
    print(encrypt("marvin", "jessica"))
    print(decrypt("marvin", "QRACRWU"))
main()
