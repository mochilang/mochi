# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

seed = 1
def rand(max):
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483647
    return seed % max
def generate_valid_block_size(message_length):
    factors = []
    i = 2
    while i <= message_length:
        if message_length % i == 0:
            factors = _append(factors, i)
        i = i + 1
    idx = rand(len(factors))
    return factors[idx]
def generate_permutation_key(block_size):
    digits = []
    i = 0
    while i < block_size:
        digits = _append(digits, i)
        i = i + 1
    j = block_size - 1
    while j > 0:
        k = rand(j + 1)
        temp = digits[j]
        digits[j] = digits[k]
        digits[k] = temp
        j = j - 1
    return digits
def encrypt(message, key, block_size):
    encrypted = ""
    i = 0
    while i < len(message):
        block = message[i:i + block_size]
        j = 0
        while j < block_size:
            encrypted = encrypted + block[key[j]:key[j] + 1]
            j = j + 1
        i = i + block_size
    return encrypted
def repeat_string(times):
    res = []
    i = 0
    while i < times:
        res = _append(res, "")
        i = i + 1
    return res
def decrypt(encrypted, key):
    klen = len(key)
    decrypted = ""
    i = 0
    while i < len(encrypted):
        block = encrypted[i:i + klen]
        original = repeat_string(klen)
        j = 0
        while j < klen:
            original[key[j]] = block[j:j + 1]
            j = j + 1
        j = 0
        while j < klen:
            decrypted = decrypted + original[j]
            j = j + 1
        i = i + klen
    return decrypted
message = "HELLO WORLD"
block_size = generate_valid_block_size(len(message))
key = generate_permutation_key(block_size)
encrypted = encrypt(message, key, block_size)
decrypted = decrypt(encrypted, key)
print("Block size: " + str(block_size))
print("Key: " + str(key))
print("Encrypted: " + encrypted)
print("Decrypted: " + decrypted)
