# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def join_strings(xs):
    res = ""
    i = 0
    while i < len(xs):
        res = res + xs[i]
        i = i + 1
    return res
def encrypt_message(key, message):
    result = ""
    col = 0
    while col < key:
        pointer = col
        while pointer < len(message):
            result = result + message[pointer:pointer + 1]
            pointer = pointer + key
        col = col + 1
    return result
def decrypt_message(key, message):
    num_cols = (len(message) + key - 1) // key
    num_rows = key
    num_shaded_boxes = (num_cols * num_rows) - len(message)
    plain_text = []
    i = 0
    while i < num_cols:
        plain_text = _append(plain_text, "")
        i = i + 1
    col = 0
    row = 0
    index = 0
    while index < len(message):
        plain_text[col] = plain_text[col] + message[index:index + 1]
        col = col + 1
        if col == num_cols or (col == num_cols - 1 and row >= num_rows - num_shaded_boxes):
            col = 0
            row = row + 1
        index = index + 1
    return join_strings(plain_text)
def main():
    print("Enter message: ")
    message = input()
    max_key = len(message) - 1
    print("Enter key [2-" + str(max_key) + "]: ")
    key = int(input())
    print("Encryption/Decryption [e/d]: ")
    mode = input()
    text = ""
    first = mode[0:1]
    if first == "e" or first == "E":
        text = encrypt_message(key, message)
    else:
        if first == "d" or first == "D":
            text = decrypt_message(key, message)
    print("Output:\n" + text + "|")
main()
