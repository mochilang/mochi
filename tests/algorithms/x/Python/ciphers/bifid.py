# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:23 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

SQUARE = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]]
def index_of(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def to_lower_without_spaces(message, replace_j):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    res = ""
    i = 0
    while i < len(message):
        ch = message[i]
        pos = index_of(upper, ch)
        if pos >= 0:
            ch = lower[pos]
        if ch != " ":
            if replace_j and ch == "j":
                ch = "i"
            res = res + ch
        i = i + 1
    return res
def letter_to_numbers(letter):
    r = 0
    while r < len(SQUARE):
        c = 0
        while c < len(SQUARE[r]):
            if SQUARE[r][c] == letter:
                return [r + 1, c + 1]
            c = c + 1
        r = r + 1
    return [0, 0]
def numbers_to_letter(row, col):
    return SQUARE[row - 1][col - 1]
def encode(message):
    clean = to_lower_without_spaces(message, True)
    l = len(clean)
    rows = []
    cols = []
    i = 0
    while i < l:
        nums = letter_to_numbers(clean[i])
        rows = _append(rows, nums[0])
        cols = _append(cols, nums[1])
        i = i + 1
    seq = []
    i = 0
    while i < l:
        seq = _append(seq, rows[i])
        i = i + 1
    i = 0
    while i < l:
        seq = _append(seq, cols[i])
        i = i + 1
    encoded = ""
    i = 0
    while i < l:
        r = seq[2 * i]
        c = seq[2 * i + 1]
        encoded = encoded + numbers_to_letter(r, c)
        i = i + 1
    return encoded
def decode(message):
    clean = to_lower_without_spaces(message, False)
    l = len(clean)
    first = []
    i = 0
    while i < l:
        nums = letter_to_numbers(clean[i])
        first = _append(first, nums[0])
        first = _append(first, nums[1])
        i = i + 1
    top = []
    bottom = []
    i = 0
    while i < l:
        top = _append(top, first[i])
        bottom = _append(bottom, first[i + l])
        i = i + 1
    decoded = ""
    i = 0
    while i < l:
        r = top[i]
        c = bottom[i]
        decoded = decoded + numbers_to_letter(r, c)
        i = i + 1
    return decoded
print(encode("testmessage"))
print(encode("Test Message"))
print(encode("test j"))
print(encode("test i"))
print(decode("qtltbdxrxlk"))
