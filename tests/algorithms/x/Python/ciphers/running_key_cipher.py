# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = upper.find(ch)
    if idx >= 0:
        return 65 + idx
    idx = lower.find(ch)
    if idx >= 0:
        return 97 + idx
    return 0
def chr(n):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 and n < 91:
        return upper[n - 65:n - 64]
    if n >= 97 and n < 123:
        return lower[n - 97:n - 96]
    return "?"
def clean_text(s):
    out = ""
    i = 0
    while i < len(s):
        ch = s[i]
        if ch >= "A" and ch <= "Z":
            out = out + ch
        else:
            if ch >= "a" and ch <= "z":
                out = out + chr(ord(ch) - 32)
        i = i + 1
    return out
def running_key_encrypt(key, plaintext):
    pt = clean_text(plaintext)
    k = clean_text(key)
    key_len = len(k)
    res = ""
    ord_a = ord("A")
    i = 0
    while i < len(pt):
        p = ord(pt[i]) - ord_a
        kv = ord(k[i % key_len]) - ord_a
        c = (p + kv) % 26
        res = res + chr(c + ord_a)
        i = i + 1
    return res
def running_key_decrypt(key, ciphertext):
    ct = clean_text(ciphertext)
    k = clean_text(key)
    key_len = len(k)
    res = ""
    ord_a = ord("A")
    i = 0
    while i < len(ct):
        c = ord(ct[i]) - ord_a
        kv = ord(k[i % key_len]) - ord_a
        p = (c - kv + 26) % 26
        res = res + chr(p + ord_a)
        i = i + 1
    return res
key = "How does the duck know that? said Victor"
plaintext = "DEFEND THIS"
ciphertext = running_key_encrypt(key, plaintext)
print(ciphertext)
print(running_key_decrypt(key, ciphertext))
