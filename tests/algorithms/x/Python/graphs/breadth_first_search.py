# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def add_edge(graph, from_, to):
    if from_ in graph:
        graph[from_] = _append(graph[from_], to)
    else:
        graph[from_] = [to]
def print_graph(graph):
    for v in list(graph.keys()):
        adj = graph[v]
        line = str(v) + "  :  "
        i = 0
        while i < len(adj):
            line = line + str(adj[i])
            if i < len(adj) - 1:
                line = line + " -> "
            i = i + 1
        print(line)
def bfs(graph, start):
    visited = {}
    queue = []
    order = []
    queue = _append(queue, start)
    visited[start] = True
    head = 0
    while head < len(queue):
        vertex = queue[head]
        head = head + 1
        order = _append(order, vertex)
        neighbors = graph[vertex]
        i = 0
        while i < len(neighbors):
            neighbor = neighbors[i]
            if not (neighbor in visited):
                visited[neighbor] = True
                queue = _append(queue, neighbor)
            i = i + 1
    return order
g = {}
add_edge(g, 0, 1)
add_edge(g, 0, 2)
add_edge(g, 1, 2)
add_edge(g, 2, 0)
add_edge(g, 2, 3)
add_edge(g, 3, 3)
print_graph(g)
print(bfs(g, 2))
