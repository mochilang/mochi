# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def fill_row(current_row, row_above):
        current_row[0] = current_row[0] + row_above[0]
        cell_n = 1
        while cell_n < len(current_row):
            left = current_row[cell_n - 1]
            up = row_above[cell_n]
            if left < up:
                current_row[cell_n] = current_row[cell_n] + left
            else:
                current_row[cell_n] = current_row[cell_n] + up
            cell_n = cell_n + 1
        return current_row
    def min_path_sum(grid):
        if len(grid) == 0 or len(grid[0]) == 0:
            error("The grid does not contain the appropriate information")
        cell_n = 1
        while cell_n < len(grid[0]):
            grid[0][cell_n] = grid[0][cell_n] + grid[0][cell_n - 1]
            cell_n = cell_n + 1
        row_above = grid[0]
        row_n = 1
        while row_n < len(grid):
            current_row = grid[row_n]
            grid[row_n] = fill_row(current_row, row_above)
            row_above = grid[row_n]
            row_n = row_n + 1
        return grid[len(grid) - 1][len(grid[0]) - 1]
    grid1 = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]
    print(_str(min_path_sum(grid1)))
    grid2 = [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]]
    print(_str(min_path_sum(grid2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

