# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Neighbor:
        node: int
        cost: int
    @dataclass
    class EdgePair:
        u: int
        v: int
    def prims_algorithm(adjacency):
        visited = {}
        visited[0] = True
        mst = []
        count = 1
        total = 0
        for k in adjacency:
            total = total + 1
        while count < total:
            best_u = 0
            best_v = 0
            best_cost = 2147483647
            for u_str in adjacency:
                u = int(u_str)
                if visited.get(u, None):
                    for n in adjacency.get(u, []):
                        if not visited.get(n.node, None) and n.cost < best_cost:
                            best_cost = n.cost
                            best_u = u
                            best_v = n.node
            visited[best_v] = True
            mst = _append(mst, EdgePair(u=best_u, v=best_v))
            count = count + 1
        return mst
    def test_prim_successful_result():
        edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
        adjacency = {}
        for e in edges:
            u = e[0]
            v = e[1]
            w = e[2]
            if not (u in adjacency):
                adjacency[u] = []
            if not (v in adjacency):
                adjacency[v] = []
            adjacency[u] = _append(adjacency.get(u, None), Neighbor(node=v, cost=w))
            adjacency[v] = _append(adjacency.get(v, None), Neighbor(node=u, cost=w))
        result = prims_algorithm(adjacency)
        seen = {}
        for e in result:
            key1 = _str(e.u) + "," + _str(e.v)
            key2 = _str(e.v) + "," + _str(e.u)
            seen[key1] = True
            seen[key2] = True
        expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
        for ans in expected:
            key = _str(ans[0]) + "," + _str(ans[1])
            if not seen.get(key, None):
                return False
        return True
    print(("True" if test_prim_successful_result() else "False"))
    print(("True" if True else "False"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

