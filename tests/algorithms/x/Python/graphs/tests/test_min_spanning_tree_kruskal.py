# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def sort_edges(edges):
    es = edges
    i = 0
    while i < len(es):
        j = 0
        while j < len(es) - i - 1:
            if es[j][2] > es[j + 1][2]:
                tmp = es[j]
                es[j] = es[j + 1]
                es[j + 1] = tmp
            j = j + 1
        i = i + 1
    return es
def find(parent, x):
    r = x
    while parent[r] != r:
        r = parent[r]
    return r
def kruskal(n, edges):
    parent = []
    i = 0
    while i < n:
        parent = _append(parent, i)
        i = i + 1
    sorted_ = sort_edges(edges)
    mst = []
    e = 0
    while e < len(sorted_):
        if len(mst) == n - 1:
            break
        edge = sorted_[e]
        e = e + 1
        u = edge[0]
        v = edge[1]
        w = edge[2]
        ru = find(parent, u)
        rv = find(parent, v)
        if ru != rv:
            parent[ru] = rv
            mst = _append(mst, [u, v, w])
    return mst
def edges_equal(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        e1 = a[i]
        e2 = b[i]
        if e1[0] != e2[0] or e1[1] != e2[1] or e1[2] != e2[2]:
            return False
        i = i + 1
    return True
def main():
    num_nodes = 9
    edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
    expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
    result = kruskal(num_nodes, edges)
    sorted_result = sort_edges(result)
    sorted_expected = sort_edges(expected)
    print(_str(sorted_result))
    if edges_equal(sorted_expected, sorted_result):
        print(("True" if True else "False"))
    else:
        print(("True" if False else "False"))
main()

