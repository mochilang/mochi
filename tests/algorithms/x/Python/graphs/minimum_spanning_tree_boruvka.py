# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Edge:
    u: int
    v: int
    w: int

@dataclass
class UF:
    parent: [int]
    rank: [int]

@dataclass
class FindRes:
    root: int
    uf: UF

def uf_make(n):
    p = []
    r = []
    i = 0
    while i < n:
        p = _append(p, i)
        r = _append(r, 0)
        i = i + 1
    return UF(parent=p, rank=r)
def uf_find(uf, x):
    p = uf.parent
    if p[x] != x:
        res = uf_find(UF(parent=p, rank=uf.rank), p[x])
        p = res.uf.parent
        p[x] = res.root
        return FindRes(root=res.root, uf=UF(parent=p, rank=res.uf.rank))
    return FindRes(root=x, uf=uf)
def uf_union(uf, x, y):
    fr1 = uf_find(uf, x)
    uf1 = fr1.uf
    root1 = fr1.root
    fr2 = uf_find(uf1, y)
    uf1 = fr2.uf
    root2 = fr2.root
    if root1 == root2:
        return uf1
    p = uf1.parent
    r = uf1.rank
    if r[root1] > r[root2]:
        p[root2] = root1
    else:
        if r[root1] < r[root2]:
            p[root1] = root2
        else:
            p[root2] = root1
            r[root1] = r[root1] + 1
    return UF(parent=p, rank=r)
def boruvka(n, edges):
    uf = uf_make(n)
    num_components = n
    mst = []
    while num_components > 1:
        cheap = []
        i = 0
        while i < n:
            cheap = _append(cheap, 0 - 1)
            i = i + 1
        idx = 0
        while idx < len(edges):
            e = edges[idx]
            fr1 = uf_find(uf, e.u)
            uf = fr1.uf
            set1 = fr1.root
            fr2 = uf_find(uf, e.v)
            uf = fr2.uf
            set2 = fr2.root
            if set1 != set2:
                if cheap[set1] == 0 - 1 or edges[cheap[set1]].w > e.w:
                    cheap[set1] = idx
                if cheap[set2] == 0 - 1 or edges[cheap[set2]].w > e.w:
                    cheap[set2] = idx
            idx = idx + 1
        v = 0
        while v < n:
            idxe = cheap[v]
            if idxe != 0 - 1:
                e = edges[idxe]
                fr1 = uf_find(uf, e.u)
                uf = fr1.uf
                set1 = fr1.root
                fr2 = uf_find(uf, e.v)
                uf = fr2.uf
                set2 = fr2.root
                if set1 != set2:
                    mst = _append(mst, e)
                    uf = uf_union(uf, set1, set2)
                    num_components = num_components - 1
            v = v + 1
    return mst
def main():
    edges = [Edge(u=0, v=1, w=1), Edge(u=0, v=2, w=2), Edge(u=2, v=3, w=3)]
    mst = boruvka(4, edges)
    for e in mst:
        print(str(e.u) + " - " + str(e.v) + " : " + str(e.w))
main()
