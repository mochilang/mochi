# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Transition:
    src: str
    dst: str
    prob: float

seed = 1
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def random():
    return (1.0 * rand()) / 2.147483648e+09
def get_nodes(trans):
    seen = {}
    for t in trans:
        seen[t.src] = True
        seen[t.dst] = True
    nodes = []
    for k in list(seen.keys()):
        nodes = _append(nodes, k)
    return nodes
def transition(current, trans):
    current_probability = 0.0
    random_value = random()
    for t in trans:
        if t.src == current:
            current_probability = current_probability + t.prob
            if current_probability > random_value:
                return t.dst
    return ""
def get_transitions(start, trans, steps):
    visited = {}
    for node in get_nodes(trans):
        one = 1
        visited[node] = one
    node = start
    i = 0
    while i < steps:
        node = transition(node, trans)
        count = visited.get(node, None)
        count = count + 1
        visited[node] = count
        i = i + 1
    return visited
def main():
    transitions = [Transition(src="a", dst="a", prob=0.9), Transition(src="a", dst="b", prob=0.075), Transition(src="a", dst="c", prob=0.025), Transition(src="b", dst="a", prob=0.15), Transition(src="b", dst="b", prob=0.8), Transition(src="b", dst="c", prob=0.05), Transition(src="c", dst="a", prob=0.25), Transition(src="c", dst="b", prob=0.25), Transition(src="c", dst="c", prob=0.5)]
    result = get_transitions("a", transitions, 5000)
    print(str(result.get("a", 0)) + " " + str(result.get("b", 0)) + " " + str(result.get("c", 0)))
main()
