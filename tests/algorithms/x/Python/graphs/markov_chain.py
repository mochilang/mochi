# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Transition:
    src: str
    dst: str
    prob: float

seed = 1
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def random():
    return (1.0 * rand()) / 2.147483648e+09
def get_nodes(trans):
    seen = {}
    for t in trans:
        seen[t.src] = True
        seen[t.dst] = True
    nodes = []
    for k in list(seen.keys()):
        nodes = _append(nodes, k)
    return nodes
def transition(current, trans):
    current_probability = 0.0
    random_value = random()
    for t in trans:
        if t.src == current:
            current_probability = current_probability + t.prob
            if current_probability > random_value:
                return t.dst
    return ""
def get_transitions(start, trans, steps):
    visited = {}
    for node in get_nodes(trans):
        one = 1
        visited[node] = one
    node = start
    i = 0
    while i < steps:
        node = transition(node, trans)
        count = visited.get(node, None)
        count = count + 1
        visited[node] = count
        i = i + 1
    return visited
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        transitions = [Transition(src="a", dst="a", prob=0.9), Transition(src="a", dst="b", prob=0.075), Transition(src="a", dst="c", prob=0.025), Transition(src="b", dst="a", prob=0.15), Transition(src="b", dst="b", prob=0.8), Transition(src="b", dst="c", prob=0.05), Transition(src="c", dst="a", prob=0.25), Transition(src="c", dst="b", prob=0.25), Transition(src="c", dst="c", prob=0.5)]
        result = get_transitions("a", transitions, 5000)
        print(_str(result.get("a", 0)) + " " + _str(result.get("b", 0)) + " " + _str(result.get("c", 0)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

