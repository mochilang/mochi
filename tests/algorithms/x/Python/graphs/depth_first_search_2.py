# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Graph:
    vertex: Dict[int, [int]]
    size: int

def add_edge(g, from_vertex, to_vertex):
    v = g.vertex
    if from_vertex in v:
        lst = v[from_vertex]
        lst = _append(lst, to_vertex)
        v[from_vertex] = lst
    else:
        v[from_vertex] = [to_vertex]
    g.vertex = v
    if from_vertex + 1 > g.size:
        g.size = from_vertex + 1
    if to_vertex + 1 > g.size:
        g.size = to_vertex + 1
    return g
def list_to_string(lst):
    res = ""
    i = 0
    while i < len(lst):
        res = res + str(lst[i])
        if i < len(lst) - 1:
            res = res + " "
        i = i + 1
    return res
def list_to_arrow(lst):
    res = ""
    i = 0
    while i < len(lst):
        res = res + str(lst[i])
        if i < len(lst) - 1:
            res = res + " -> "
        i = i + 1
    return res
def print_graph(g):
    print(str(g.vertex))
    i = 0
    while i < g.size:
        edges = []
        if i in g.vertex:
            edges = g.vertex[i]
        line = str(i) + "  ->  " + list_to_arrow(edges)
        print(line)
        i = i + 1
def dfs_recursive(g, start_vertex, visited, order):
    visited[start_vertex] = True
    order = _append(order, start_vertex)
    if start_vertex in g.vertex:
        neighbors = g.vertex[start_vertex]
        i = 0
        while i < len(neighbors):
            nb = neighbors[i]
            if not visited[nb]:
                order = dfs_recursive(g, nb, visited, order)
            i = i + 1
    return order
def dfs(g):
    n = g.size
    visited = []
    i = 0
    while i < n:
        visited = _append(visited, False)
        i = i + 1
    order = []
    i = 0
    while i < n:
        if not visited[i]:
            order = dfs_recursive(g, i, visited, order)
        i = i + 1
    return order
g = Graph(vertex={}, size=0)
g = add_edge(g, 0, 1)
g = add_edge(g, 0, 2)
g = add_edge(g, 1, 2)
g = add_edge(g, 2, 0)
g = add_edge(g, 2, 3)
g = add_edge(g, 3, 3)
print_graph(g)
print("DFS:")
print(list_to_string(dfs(g)))
