# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Pos:
    y: int
    x: int

@dataclass
class Node:
    pos_x: int
    pos_y: int
    goal_x: int
    goal_y: int
    g_cost: int
    f_cost: int
    path: [Pos]

def abs(x):
    if x < 0:
        return 0 - x
    return x
def manhattan(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)
def clone_path(p):
    res = []
    i = 0
    while i < len(p):
        res = _append(res, p[i])
        i = i + 1
    return res
def make_node(pos_x, pos_y, goal_x, goal_y, g_cost, path):
    f = manhattan(pos_x, pos_y, goal_x, goal_y)
    return Node(pos_x=pos_x, pos_y=pos_y, goal_x=goal_x, goal_y=goal_y, g_cost=g_cost, f_cost=f, path=path)
delta = [Pos(y=-1, x=0), Pos(y=0, x=-1), Pos(y=1, x=0), Pos(y=0, x=1)]
def node_equal(a, b):
    return a.pos_x == b.pos_x and a.pos_y == b.pos_y
def contains(nodes, node):
    i = 0
    while i < len(nodes):
        if node_equal(nodes[i], node):
            return True
        i = i + 1
    return False
def sort_nodes(nodes):
    arr = nodes
    i = 1
    while i < len(arr):
        key_node = arr[i]
        j = i - 1
        while j >= 0:
            temp = arr[j]
            if temp.f_cost > key_node.f_cost:
                arr[j + 1] = temp
                j = j - 1
            else:
                break
        arr[j + 1] = key_node
        i = i + 1
    return arr
def get_successors(grid, parent, target):
    res = []
    i = 0
    while i < len(delta):
        d = delta[i]
        pos_x = parent.pos_x + d.x
        pos_y = parent.pos_y + d.y
        if pos_x >= 0 and pos_x < len(grid[0]) and pos_y >= 0 and pos_y < len(grid) and grid[pos_y][pos_x] == 0:
            new_path = clone_path(parent.path)
            new_path = _append(new_path, Pos(y=pos_y, x=pos_x))
            res = _append(res, make_node(pos_x, pos_y, target.x, target.y, parent.g_cost + 1, new_path))
        i = i + 1
    return res
def greedy_best_first(grid, init, goal):
    start_path = [init]
    start = make_node(init.x, init.y, goal.x, goal.y, 0, start_path)
    open_nodes = [start]
    closed_nodes = []
    while len(open_nodes) > 0:
        open_nodes = sort_nodes(open_nodes)
        current = open_nodes[0]
        new_open = []
        idx = 1
        while idx < len(open_nodes):
            new_open = _append(new_open, open_nodes[idx])
            idx = idx + 1
        open_nodes = new_open
        if current.pos_x == goal.x and current.pos_y == goal.y:
            return current.path
        closed_nodes = _append(closed_nodes, current)
        successors = get_successors(grid, current, goal)
        i = 0
        while i < len(successors):
            child = successors[i]
            if (not child in closed_nodes) and (not child in open_nodes):
                open_nodes = _append(open_nodes, child)
            i = i + 1
    r = [init]
    return r
TEST_GRIDS = [[[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0]]]
def print_grid(grid):
    i = 0
    while i < len(grid):
        print(str(grid[i]))
        i = i + 1
def main():
    idx = 0
    while idx < len(TEST_GRIDS):
        print("==grid-" + str(idx + 1) + "==")
        grid = TEST_GRIDS[idx]
        init = Pos(y=0, x=0)
        goal = Pos(y=len(grid) - 1, x=len(grid[0]) - 1)
        print_grid(grid)
        print("------")
        path = greedy_best_first(grid, init, goal)
        j = 0
        while j < len(path):
            p = path[j]
            grid[p.y][p.x] = 2
            j = j + 1
        print_grid(grid)
        idx = idx + 1
main()
