# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class QueueNode:
        node: str
        weight: int
    @dataclass
    class MSTResult:
        dist: Dict[str, int]
        parent: Dict[str, str]
    def prims_algo(graph):
        INF = 2147483647
        dist = {}
        parent = {}
        queue = []
        for node in graph:
            dist[node] = INF
            parent[node] = ""
            queue = _append(queue, QueueNode(node=node, weight=INF))
        if len(queue) == 0:
            return MSTResult(dist=dist, parent=parent)
        min_idx = 0
        i = 1
        while i < len(queue):
            if queue[i].weight < queue[min_idx].weight:
                min_idx = i
            i = i + 1
        start_node = queue[min_idx]
        start = start_node.node
        new_q = []
        j = 0
        while j < len(queue):
            if j != min_idx:
                new_q = _append(new_q, queue[j])
            j = j + 1
        queue = new_q
        dist[start] = 0
        for neighbour in graph.get(start, {}):
            w = graph.get(start, {}).get(neighbour, 0)
            if dist.get(neighbour, None) > dist.get(start, None) + w:
                dist[neighbour] = dist.get(start, None) + w
                parent[neighbour] = start
                k = 0
                while k < len(queue):
                    if queue[k].node == neighbour:
                        queue[k].weight = dist.get(neighbour, None)
                        break
                    k = k + 1
        while len(queue) > 0:
            best_idx = 0
            p = 1
            while p < len(queue):
                if queue[p].weight < queue[best_idx].weight:
                    best_idx = p
                p = p + 1
            node_entry = queue[best_idx]
            node = node_entry.node
            tmp = []
            q = 0
            while q < len(queue):
                if q != best_idx:
                    tmp = _append(tmp, queue[q])
                q = q + 1
            queue = tmp
            for neighbour in graph.get(node, {}):
                w = graph.get(node, {}).get(neighbour, 0)
                if dist.get(neighbour, None) > dist.get(node, None) + w:
                    dist[neighbour] = dist.get(node, None) + w
                    parent[neighbour] = node
                    r = 0
                    while r < len(queue):
                        if queue[r].node == neighbour:
                            queue[r].weight = dist.get(neighbour, None)
                            break
                        r = r + 1
        return MSTResult(dist=dist, parent=parent)
    def iabs(x):
        if x < 0:
            return -x
        return x
    graph = {}
    graph["a"] = {"b": 3, "c": 15}
    graph["b"] = {"a": 3, "c": 10, "d": 100}
    graph["c"] = {"a": 15, "b": 10, "d": 5}
    graph["d"] = {"b": 100, "c": 5}
    res = prims_algo(graph)
    dist = res.dist
    print(_str(iabs(dist.get("a", 0) - dist.get("b", 0))))
    print(_str(iabs(dist.get("d", 0) - dist.get("b", 0))))
    print(_str(iabs(dist.get("a", 0) - dist.get("c", 0))))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

