# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def minimum_distance(distances, visited):
        minimum = 10000000
        min_index = 0
        vertex = 0
        while vertex < len(distances):
            if distances[vertex] < minimum and visited[vertex] == False:
                minimum = distances[vertex]
                min_index = vertex
            vertex = vertex + 1
        return min_index
    def dijkstra(graph, source):
        vertices = len(graph)
        distances = []
        i = 0
        while i < vertices:
            distances = _append(distances, 10000000)
            i = i + 1
        distances = _set_index(distances, source, 0)
        visited = []
        i = 0
        while i < vertices:
            visited = _append(visited, False)
            i = i + 1
        count = 0
        while count < vertices:
            u = minimum_distance(distances, visited)
            visited[u] = True
            v = 0
            while v < vertices:
                if graph[u][v] > 0 and visited[v] == False and distances[v] > distances[u] + graph[u][v]:
                    distances = _set_index(distances, v, distances[u] + graph[u][v])
                v = v + 1
            count = count + 1
        return distances
    def print_solution(distances):
        print("Vertex \t Distance from Source")
        v = 0
        while v < len(distances):
            print(_str(v) + "\t\t" + _str(distances[v]))
            v = v + 1
    graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]]
    distances = dijkstra(graph, 0)
    print_solution(distances)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

