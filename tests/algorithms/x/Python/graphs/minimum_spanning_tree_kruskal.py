# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def sort_edges(edges):
    es = edges
    i = 0
    while i < len(es):
        j = 0
        while j < len(es) - i - 1:
            if es[j][2] > es[j + 1][2]:
                temp = es[j]
                es[j] = es[j + 1]
                es[j + 1] = temp
            j = j + 1
        i = i + 1
    return es
def find_parent(parent, i):
    if parent[i] != i:
        parent[i] = find_parent(parent, parent[i])
    return parent[i]
def kruskal(num_nodes, edges):
    es = sort_edges(edges)
    parent = []
    i = 0
    while i < num_nodes:
        parent = _append(parent, i)
        i = i + 1
    mst = []
    idx = 0
    while idx < len(es):
        e = es[idx]
        pa = find_parent(parent, e[0])
        pb = find_parent(parent, e[1])
        if pa != pb:
            mst = _append(mst, e)
            parent[pa] = pb
        idx = idx + 1
    return mst
def edges_to_string(es):
    s = "["
    i = 0
    while i < len(es):
        e = es[i]
        s = s + "(" + _str(e[0]) + ", " + _str(e[1]) + ", " + _str(e[2]) + ")"
        if i < len(es) - 1:
            s = s + ", "
        i = i + 1
    s = s + "]"
    return s
edges1 = [[0, 1, 3], [1, 2, 5], [2, 3, 1]]
print(edges_to_string(kruskal(4, edges1)))
edges2 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]]
print(edges_to_string(kruskal(4, edges2)))
edges3 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]]
print(edges_to_string(kruskal(4, edges3)))

