# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def contains(xs, v):
        for x in xs:
            if x == v:
                return True
        return False
    def get_edges(graph):
        n = len(graph)
        edges = []
        for i in range(0, n):
            for j in graph.get(i, []):
                edges = _append(edges, [i, j])
        return edges
    def matching_min_vertex_cover(graph):
        chosen = []
        edges = get_edges(graph)
        while len(edges) > 0:
            idx = len(edges) - 1
            e = edges[idx]
            edges = edges[0:idx]
            u = e[0]
            v = e[1]
            if not contains(chosen, u):
                chosen = _append(chosen, u)
            if not contains(chosen, v):
                chosen = _append(chosen, v)
            filtered = []
            for edge in edges:
                a = edge[0]
                b = edge[1]
                if a != u and b != u and a != v and b != v:
                    filtered = _append(filtered, edge)
            edges = filtered
        return chosen
    graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]}
    cover = matching_min_vertex_cover(graph)
    print(_str(cover))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

