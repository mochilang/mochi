# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def contains(xs, v):
    for x in xs:
        if x == v:
            return True
    return False
def get_edges(graph):
    n = len(graph)
    edges = []
    for i in range(0, n):
        for j in graph.get(i, []):
            edges = _append(edges, [i, j])
    return edges
def matching_min_vertex_cover(graph):
    chosen = []
    edges = get_edges(graph)
    while len(edges) > 0:
        idx = len(edges) - 1
        e = edges[idx]
        edges = edges[0:idx]
        u = e[0]
        v = e[1]
        if not u in chosen:
            chosen = _append(chosen, u)
        if not v in chosen:
            chosen = _append(chosen, v)
        filtered = []
        for edge in edges:
            a = edge[0]
            b = edge[1]
            if a != u and b != u and a != v and b != v:
                filtered = _append(filtered, edge)
        edges = filtered
    return chosen
graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]}
cover = matching_min_vertex_cover(graph)
print(str(cover))
