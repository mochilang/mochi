# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Edge:
    u: int
    v: int
    w: int

@dataclass
class Graph:
    edges: [Edge]
    num_nodes: int

@dataclass
class DS:
    parent: [int]
    rank: [int]

@dataclass
class FindResult:
    ds: DS
    root: int

def new_graph():
    return Graph(edges=[], num_nodes=0)
def add_edge(g, u, v, w):
    es = g.edges
    es = _append(es, Edge(u=u, v=v, w=w))
    n = g.num_nodes
    if u > n:
        n = u
    if v > n:
        n = v
    return Graph(edges=es, num_nodes=n)
def make_ds(n):
    parent = []
    rank = []
    i = 0
    while i <= n:
        parent = _append(parent, i)
        rank = _append(rank, 0)
        i = i + 1
    return DS(parent=parent, rank=rank)
def find_set(ds, x):
    if ds.parent[x] == x:
        return FindResult(ds=ds, root=x)
    res = find_set(ds, ds.parent[x])
    p = res.ds.parent
    p[x] = res.root
    return FindResult(ds=DS(parent=p, rank=res.ds.rank), root=res.root)
def union_set(ds, x, y):
    fx = find_set(ds, x)
    ds1 = fx.ds
    x_root = fx.root
    fy = find_set(ds1, y)
    ds2 = fy.ds
    y_root = fy.root
    if x_root == y_root:
        return ds2
    p = ds2.parent
    r = ds2.rank
    if r[x_root] > r[y_root]:
        p[y_root] = x_root
    else:
        p[x_root] = y_root
        if r[x_root] == r[y_root]:
            r[y_root] = r[y_root] + 1
    return DS(parent=p, rank=r)
def sort_edges(edges):
    arr = edges
    i = 1
    while i < len(arr):
        key = arr[i]
        j = i - 1
        while j >= 0:
            temp = arr[j]
            if temp.w > key.w or (temp.w == key.w and (temp.u > key.u or (temp.u == key.u and temp.v > key.v))):
                arr[j + 1] = temp
                j = j - 1
            else:
                break
        arr[j + 1] = key
        i = i + 1
    return arr
def kruskal(g):
    edges = sort_edges(g.edges)
    ds = make_ds(g.num_nodes)
    mst_edges = []
    i = 0
    added = 0
    while added < g.num_nodes - 1 and i < len(edges):
        e = edges[i]
        i = i + 1
        fu = find_set(ds, e.u)
        ds = fu.ds
        ru = fu.root
        fv = find_set(ds, e.v)
        ds = fv.ds
        rv = fv.root
        if ru != rv:
            mst_edges = _append(mst_edges, e)
            added = added + 1
            ds = union_set(ds, ru, rv)
    return Graph(edges=mst_edges, num_nodes=g.num_nodes)
def print_mst(g):
    es = sort_edges(g.edges)
    for e in es:
        print(str(e.u) + "-" + str(e.v) + ":" + str(e.w))
def main():
    g = new_graph()
    g = add_edge(g, 1, 2, 1)
    g = add_edge(g, 2, 3, 2)
    g = add_edge(g, 3, 4, 1)
    g = add_edge(g, 3, 5, 100)
    g = add_edge(g, 4, 5, 5)
    mst = kruskal(g)
    print_mst(mst)
main()
