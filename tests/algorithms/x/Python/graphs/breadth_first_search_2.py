# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def join(xs):
        s = ""
        i = 0
        while i < len(xs):
            s = s + xs[i]
            i = i + 1
        return s
    def breadth_first_search(graph, start):
        explored = {}
        explored[start] = True
        result = [start]
        queue = [start]
        while len(queue) > 0:
            v = queue[0]
            queue = queue[1:]
            children = graph.get(v, [])
            i = 0
            while i < len(children):
                w = children[i]
                if not (w in explored):
                    explored[w] = True
                    result = _append(result, w)
                    queue = _append(queue, w)
                i = i + 1
        return result
    def breadth_first_search_with_deque(graph, start):
        visited = {}
        visited[start] = True
        result = [start]
        queue = [start]
        head = 0
        while head < len(queue):
            v = queue[head]
            head = head + 1
            children = graph.get(v, [])
            i = 0
            while i < len(children):
                child = children[i]
                if not (child in visited):
                    visited[child] = True
                    result = _append(result, child)
                    queue = _append(queue, child)
                i = i + 1
        return result
    G = {"A": ["B", "C"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B"], "E": ["B", "F"], "F": ["C", "E"]}
    print(join(breadth_first_search(G, "A")))
    print(join(breadth_first_search_with_deque(G, "A")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

