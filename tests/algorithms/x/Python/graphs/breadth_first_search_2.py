# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def join(xs):
    s = ""
    i = 0
    while i < len(xs):
        s = s + xs[i]
        i = i + 1
    return s
def breadth_first_search(graph, start):
    explored = {}
    explored[start] = True
    result = [start]
    queue = [start]
    while len(queue) > 0:
        v = queue[0]
        queue = queue[1:len(queue)]
        children = graph[v]
        i = 0
        while i < len(children):
            w = children[i]
            if not (w in explored):
                explored[w] = True
                result = _append(result, w)
                queue = _append(queue, w)
            i = i + 1
    return result
def breadth_first_search_with_deque(graph, start):
    visited = {}
    visited[start] = True
    result = [start]
    queue = [start]
    head = 0
    while head < len(queue):
        v = queue[head]
        head = head + 1
        children = graph[v]
        i = 0
        while i < len(children):
            child = children[i]
            if not (child in visited):
                visited[child] = True
                result = _append(result, child)
                queue = _append(queue, child)
            i = i + 1
    return result
G = {"A": ["B", "C"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B"], "E": ["B", "F"], "F": ["C", "E"]}
print(join(breadth_first_search(G, "A")))
print(join(breadth_first_search_with_deque(G, "A")))
