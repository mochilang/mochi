# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

seed = 1
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def random():
    return (1.0 * rand()) / 2.147483648e+09
def complete_graph(vertices_number):
    graph = {}
    i = 0
    while i < vertices_number:
        neighbors = []
        j = 0
        while j < vertices_number:
            if j != i:
                neighbors = _append(neighbors, j)
            j = j + 1
        graph[i] = neighbors
        i = i + 1
    return graph
def random_graph(vertices_number, probability, directed):
    graph = {}
    i = 0
    while i < vertices_number:
        graph[i] = []
        i = i + 1
    if probability >= 1.0:
        return complete_graph(vertices_number)
    if probability <= 0.0:
        return graph
    i = 0
    while i < vertices_number:
        j = i + 1
        while j < vertices_number:
            if random() < probability:
                graph[i] = _append(graph.get(i, None), j)
                if not directed:
                    graph[j] = _append(graph.get(j, None), i)
            j = j + 1
        i = i + 1
    return graph
def main():
    global seed
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        seed = 1
        g1 = random_graph(4, 0.5, False)
        print(g1)
        seed = 1
        g2 = random_graph(4, 0.5, True)
        print(g2)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

