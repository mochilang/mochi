# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def remove_value(lst, val):
    res = []
    i = 0
    while i < len(lst):
        if lst[i] != val:
            res = _append(res, lst[i])
        i = i + 1
    return res
def greedy_min_vertex_cover(graph):
    g = graph
    cover = []
    while True:
        max_v = 0
        max_deg = 0
        for v in g:
            key = int(v)
            deg = len(g.get(key, []))
            if deg > max_deg:
                max_deg = deg
                max_v = key
        if max_deg == 0:
            break
        cover = _append(cover, max_v)
        neighbors = g.get(max_v, [])
        i = 0
        while i < len(neighbors):
            n = neighbors[i]
            g[n] = remove_value(g.get(n, []), max_v)
            i = i + 1
        g[max_v] = []
    return cover
graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]}
print(greedy_min_vertex_cover(graph))
