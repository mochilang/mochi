# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def index_of(xs, x):
        i = 0
        while i < len(xs):
            if xs[i] == x:
                return i
            i = i + 1
        return -1
    def remove_item(xs, x):
        res = []
        removed = False
        i = 0
        while i < len(xs):
            if not removed and xs[i] == x:
                removed = True
            else:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def stable_matching(donor_pref, recipient_pref):
        if len(donor_pref) != len(recipient_pref):
            panic("unequal groups")
        n = len(donor_pref)
        unmatched = []
        i = 0
        while i < n:
            unmatched = _append(unmatched, i)
            i = i + 1
        donor_record = []
        i = 0
        while i < n:
            donor_record = _append(donor_record, -1)
            i = i + 1
        rec_record = []
        i = 0
        while i < n:
            rec_record = _append(rec_record, -1)
            i = i + 1
        num_donations = []
        i = 0
        while i < n:
            num_donations = _append(num_donations, 0)
            i = i + 1
        while len(unmatched) > 0:
            donor = unmatched[0]
            donor_preference = donor_pref[donor]
            recipient = donor_preference[num_donations[donor]]
            num_donations[donor] = num_donations[donor] + 1
            rec_preference = recipient_pref[recipient]
            prev_donor = rec_record[recipient]
            if prev_donor != 0 - 1:
                prev_index = index_of(rec_preference, prev_donor)
                new_index = index_of(rec_preference, donor)
                if prev_index > new_index:
                    rec_record[recipient] = donor
                    donor_record[donor] = recipient
                    unmatched = _append(unmatched, prev_donor)
                    unmatched = remove_item(unmatched, donor)
            else:
                rec_record[recipient] = donor
                donor_record[donor] = recipient
                unmatched = remove_item(unmatched, donor)
        return donor_record
    donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]
    recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]
    print(_str(stable_matching(donor_pref, recipient_pref)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

