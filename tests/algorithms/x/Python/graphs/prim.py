# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    INF = 1000000000
    def connect(graph, a, b, w):
        u = a - 1
        v = b - 1
        g = graph
        g[u] = _append(g.get(u, []), [v, w])
        g[v] = _append(g.get(v, []), [u, w])
        return g
    def in_list(arr, x):
        i = 0
        while i < len(arr):
            if arr[i] == x:
                return True
            i = i + 1
        return False
    def prim(graph, s, n):
        dist = {}
        parent = {}
        dist[s] = 0
        parent[s] = -1
        known = []
        keys = [s]
        while len(known) < n:
            mini = INF
            u = -1
            i = 0
            while i < len(keys):
                k = keys[i]
                d = dist.get(k, None)
                if not (in_list(known, k)) and d < mini:
                    mini = d
                    u = k
                i = i + 1
            known = _append(known, u)
            for e in graph.get(u, []):
                v = e[0]
                w = e[1]
                if not (in_list(keys, v)):
                    keys = _append(keys, v)
                cur = (dist.get(v, None) if v in dist else INF)
                if not (in_list(known, v)) and w < cur:
                    dist[v] = w
                    parent[v] = u
        edges = []
        j = 0
        while j < len(keys):
            v = keys[j]
            if v != s:
                edges = _append(edges, [v + 1, parent.get(v, None) + 1])
            j = j + 1
        return edges
    def sort_heap(h, dist):
        a = h
        i = 0
        while i < len(a):
            j = 0
            while j < len(a) - i - 1:
                dj = (dist.get(a[j], 0) if a[j] in dist else INF)
                dj1 = (dist.get(a[j + 1], 0) if a[j + 1] in dist else INF)
                if dj > dj1:
                    t = a[j]
                    a[j] = a[j + 1]
                    a[j + 1] = t
                j = j + 1
            i = i + 1
        return a
    def prim_heap(graph, s, n):
        dist = {}
        parent = {}
        dist[s] = 0
        parent[s] = -1
        h = []
        i = 0
        while i < n:
            h = _append(h, i)
            i = i + 1
        h = sort_heap(h, dist)
        known = []
        while len(h) > 0:
            u = h[0]
            h = h[1:]
            known = _append(known, u)
            for e in graph.get(u, []):
                v = e[0]
                w = e[1]
                cur = (dist.get(v, None) if v in dist else INF)
                if not (in_list(known, v)) and w < cur:
                    dist[v] = w
                    parent[v] = u
            h = sort_heap(h, dist)
        edges = []
        j = 0
        while j < n:
            if j != s:
                edges = _append(edges, [j + 1, parent.get(j, None) + 1])
            j = j + 1
        return edges
    def print_edges(edges):
        i = 0
        while i < len(edges):
            e = edges[i]
            print("(" + _str(e[0]) + ", " + _str(e[1]) + ")")
            i = i + 1
    def test_vector():
        x = 5
        G = {}
        i = 0
        while i < x:
            G[i] = []
            i = i + 1
        G = connect(G, 1, 2, 15)
        G = connect(G, 1, 3, 12)
        G = connect(G, 2, 4, 13)
        G = connect(G, 2, 5, 5)
        G = connect(G, 3, 2, 6)
        G = connect(G, 3, 4, 6)
        mst = prim(G, 0, x)
        print_edges(mst)
        mst_heap = prim_heap(G, 0, x)
        print_edges(mst_heap)
    test_vector()
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

