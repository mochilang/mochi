# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Graph:
    directed: bool
    vertex_to_index: Dict[int, int]
    adj_matrix: [[int]]

def make_graph(vertices, edges, directed):
    g = Graph(directed=directed, vertex_to_index={}, adj_matrix=[])
    i = 0
    while i < len(vertices):
        add_vertex(g, vertices[i])
        i = i + 1
    j = 0
    while j < len(edges):
        e = edges[j]
        add_edge(g, e[0], e[1])
        j = j + 1
    return g
def contains_vertex(g, v):
    return v in g.vertex_to_index
def add_vertex(g, v):
    if contains_vertex(g, v):
        panic("vertex already exists")
    matrix = g.adj_matrix
    i = 0
    while i < len(matrix):
        matrix[i] = _append(matrix[i], 0)
        i = i + 1
    row = []
    j = 0
    while j < len(matrix) + 1:
        row = _append(row, 0)
        j = j + 1
    matrix = _append(matrix, row)
    g.adj_matrix = matrix
    idx_map = g.vertex_to_index
    idx_map[v] = len(matrix) - 1
    g.vertex_to_index = idx_map
def remove_key(m, k):
    out = {}
    for key in m:
        if key != k:
            out[key] = m.get(int(key), 0)
    return out
def decrement_indices(m, start):
    out = {}
    for key in m:
        idx = m.get(int(key), 0)
        if idx > start:
            out[key] = idx - 1
        else:
            out[key] = idx
    return out
def remove_vertex(g, v):
    if not contains_vertex(g, v):
        panic("vertex does not exist")
    idx = (g.vertex_to_index)[v]
    new_matrix = []
    i = 0
    while i < len(g.adj_matrix):
        if i != idx:
            row = g.adj_matrix[i]
            new_row = []
            j = 0
            while j < len(row):
                if j != idx:
                    new_row = _append(new_row, row[j])
                j = j + 1
            new_matrix = _append(new_matrix, new_row)
        i = i + 1
    g.adj_matrix = new_matrix
    m = remove_key(g.vertex_to_index, v)
    g.vertex_to_index = decrement_indices(m, idx)
def add_edge(g, u, v):
    if not (contains_vertex(g, u) and contains_vertex(g, v)):
        panic("missing vertex")
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix
    matrix[i][j] = 1
    if not g.directed:
        matrix[j][i] = 1
    g.adj_matrix = matrix
def remove_edge(g, u, v):
    if not (contains_vertex(g, u) and contains_vertex(g, v)):
        panic("missing vertex")
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix
    matrix[i][j] = 0
    if not g.directed:
        matrix[j][i] = 0
    g.adj_matrix = matrix
def contains_edge(g, u, v):
    if not (contains_vertex(g, u) and contains_vertex(g, v)):
        panic("missing vertex")
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix
    return matrix[i][j] == 1
def clear_graph(g):
    g.vertex_to_index = {}
    g.adj_matrix = []
g = make_graph([1, 2, 3], [[1, 2], [2, 3]], False)
print(_str(g.adj_matrix))
print(_str(contains_edge(g, 1, 2)))
print(_str(contains_edge(g, 2, 1)))
remove_edge(g, 1, 2)
print(_str(contains_edge(g, 1, 2)))
remove_vertex(g, 2)
print(_str(g.adj_matrix))

