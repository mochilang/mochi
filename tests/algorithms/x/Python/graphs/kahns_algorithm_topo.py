# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def topological_sort(graph):
    indegree = []
    i = 0
    while i < len(graph):
        indegree = _append(indegree, 0)
        i = i + 1
    for edges in list(graph.values()):
        j = 0
        while j < len(edges):
            v = edges[j]
            indegree[v] = indegree[v] + 1
            j = j + 1
    queue = []
    i = 0
    while i < len(indegree):
        if indegree[i] == 0:
            queue = _append(queue, i)
        i = i + 1
    order = []
    head = 0
    processed = 0
    while head < len(queue):
        v = queue[head]
        head = head + 1
        processed = processed + 1
        order = _append(order, v)
        neighbors = graph.get(v, [])
        k = 0
        while k < len(neighbors):
            nb = neighbors[k]
            indegree[nb] = indegree[nb] - 1
            if indegree[nb] == 0:
                queue = _append(queue, nb)
            k = k + 1
    if processed != len(graph):
        return None
    return order
def main():
    graph = {0: [1, 2], 1: [3], 2: [3], 3: [4, 5], 4: [], 5: []}
    print(topological_sort(graph))
    cyclic = {0: [1], 1: [2], 2: [0]}
    print(topological_sort(cyclic))
main()
