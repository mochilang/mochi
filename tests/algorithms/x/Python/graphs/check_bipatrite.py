# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def is_bipartite_bfs(graph):
    visited = {}
    for node in graph:
        if not (node in visited):
            queue = []
            queue = _append(queue, node)
            visited[node] = 0
            while len(queue) > 0:
                curr = queue[0]
                queue = queue[1:len(queue)]
                for neighbor in graph.get(curr):
                    if not (neighbor in visited):
                        visited[neighbor] = 1 - visited[curr]
                        queue = _append(queue, neighbor)
                    else:
                        if visited[neighbor] == visited[curr]:
                            return False
    return True
graph = {0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2]}
print(str(is_bipartite_bfs(graph)))
