# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Edge:
    node: int
    weight: int

def make_int_list(n, value):
    lst = []
    i = 0
    while i < n:
        lst = _append(lst, value)
        i = i + 1
    return lst
def make_bool_list(n):
    lst = []
    i = 0
    while i < n:
        lst = _append(lst, False)
        i = i + 1
    return lst
def dijkstra(graph, src):
    n = len(graph)
    dist = make_int_list(n, 1000000000)
    visited = make_bool_list(n)
    dist = _set_index(dist, src, 0)
    count = 0
    while count < n:
        u = -1
        min_dist = 1000000000
        i = 0
        while i < n:
            if not visited[i] and dist[i] < min_dist:
                min_dist = dist[i]
                u = i
            i = i + 1
        if u < 0:
            break
        visited[u] = True
        j = 0
        while j < len(graph[u]):
            e = graph[u][j]
            v = e.node
            w = e.weight
            if not visited[v]:
                new_dist = dist[u] + w
                if new_dist < dist[v]:
                    dist = _set_index(dist, v, new_dist)
            j = j + 1
        count = count + 1
    return dist
graph = [[Edge(node=1, weight=10), Edge(node=3, weight=5)], [Edge(node=2, weight=1), Edge(node=3, weight=2)], [Edge(node=4, weight=4)], [Edge(node=1, weight=3), Edge(node=2, weight=9), Edge(node=4, weight=2)], [Edge(node=0, weight=7), Edge(node=2, weight=6)]]
dist = dijkstra(graph, 0)
print(str(dist[0]))
print(str(dist[1]))
print(str(dist[2]))
print(str(dist[3]))
print(str(dist[4]))
