# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Edge:
        node: int
        weight: int
    def make_int_list(n, value):
        lst = []
        i = 0
        while i < n:
            lst = _append(lst, value)
            i = i + 1
        return lst
    def make_bool_list(n):
        lst = []
        i = 0
        while i < n:
            lst = _append(lst, False)
            i = i + 1
        return lst
    def dijkstra(graph, src):
        n = len(graph)
        dist = make_int_list(n, 1000000000)
        visited = make_bool_list(n)
        dist = _set_index(dist, src, 0)
        count = 0
        while count < n:
            u = -1
            min_dist = 1000000000
            i = 0
            while i < n:
                if not visited[i] and dist[i] < min_dist:
                    min_dist = dist[i]
                    u = i
                i = i + 1
            if u < 0:
                break
            visited[u] = True
            j = 0
            while j < len(graph[u]):
                e = graph[u][j]
                v = e.node
                w = e.weight
                if not visited[v]:
                    new_dist = dist[u] + w
                    if new_dist < dist[v]:
                        dist = _set_index(dist, v, new_dist)
                j = j + 1
            count = count + 1
        return dist
    graph = [[Edge(node=1, weight=10), Edge(node=3, weight=5)], [Edge(node=2, weight=1), Edge(node=3, weight=2)], [Edge(node=4, weight=4)], [Edge(node=1, weight=3), Edge(node=2, weight=9), Edge(node=4, weight=2)], [Edge(node=0, weight=7), Edge(node=2, weight=6)]]
    dist = dijkstra(graph, 0)
    print(_str(dist[0]))
    print(_str(dist[1]))
    print(_str(dist[2]))
    print(_str(dist[3]))
    print(_str(dist[4]))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

