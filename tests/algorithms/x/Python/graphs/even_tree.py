# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

tree = {}
def dfs(start, visited):
    size = 1
    cuts = 0
    visited[start] = True
    for v in tree.get(start, None):
        if not (v in visited):
            res = dfs(v, visited)
            size = size + res[0]
            cuts = cuts + res[1]
    if size % 2 == 0:
        cuts = cuts + 1
    return [size, cuts]
def even_tree():
    visited = {}
    res = dfs(1, visited)
    return res[1] - 1
def main():
    edges = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]]
    i = 0
    while i < len(edges):
        u = edges[i][0]
        v = edges[i][1]
        if not (u in tree):
            tree[u] = []
        if not (v in tree):
            tree[v] = []
        tree[u] = _append(tree.get(u, None), v)
        tree[v] = _append(tree.get(v, None), u)
        i = i + 1
    print(str(even_tree()))
main()
