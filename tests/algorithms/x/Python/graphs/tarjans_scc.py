# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def tarjan(g):
    n = len(g)
    stack = []
    on_stack = []
    index_of = []
    lowlink_of = []
    i = 0
    while i < n:
        on_stack = _append(on_stack, False)
        index_of = _append(index_of, 0 - 1)
        lowlink_of = _append(lowlink_of, 0 - 1)
        i = i + 1
    components = []
    def strong_connect(v, index):
        nonlocal components, stack
        index_of[v] = index
        lowlink_of[v] = index
        current_index = index + 1
        stack = _append(stack, v)
        on_stack[v] = True
        for w in g[v]:
            if index_of[w] == 0 - 1:
                current_index = strong_connect(w, current_index)
                if lowlink_of[w] < lowlink_of[v]:
                    lowlink_of[v] = lowlink_of[w]
            else:
                if on_stack[w]:
                    if lowlink_of[w] < lowlink_of[v]:
                        lowlink_of[v] = lowlink_of[w]
        if lowlink_of[v] == index_of[v]:
            component = []
            w = stack[len(stack) - 1]
            stack = stack[0:len(stack) - 1]
            on_stack[w] = False
            component = _append(component, w)
            while w != v:
                w = stack[len(stack) - 1]
                stack = stack[0:len(stack) - 1]
                on_stack[w] = False
                component = _append(component, w)
            components = _append(components, component)
        return current_index
    v = 0
    while v < n:
        if index_of[v] == 0 - 1:
            strong_connect(v, 0)
        v = v + 1
    return components
def create_graph(n, edges):
    g = []
    i = 0
    while i < n:
        g = _append(g, [])
        i = i + 1
    for e in edges:
        u = e[0]
        v = e[1]
        g[u] = _append(g[u], v)
    return g
def main():
    n_vertices = 7
    source = [0, 0, 1, 2, 3, 3, 4, 4, 6]
    target = [1, 3, 2, 0, 1, 4, 5, 6, 5]
    edges = []
    i = 0
    while i < len(source):
        edges = _append(edges, [source[i], target[i]])
        i = i + 1
    g = create_graph(n_vertices, edges)
    print(_str(tarjan(g)))
main()

