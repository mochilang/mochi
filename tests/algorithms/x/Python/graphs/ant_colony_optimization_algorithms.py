# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def sqrtApprox(x):
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x / guess) / 2.0
            i = i + 1
        return guess
    def rand_float():
        return float((_now() % 1000000)) / 1e+06
    def pow_float(base, exp):
        result = 1.0
        i = 0
        e = int(exp)
        while i < e:
            result = result * base
            i = i + 1
        return result
    def distance(city1, city2):
        dx = float((city1[0] - city2[0]))
        dy = float((city1[1] - city2[1]))
        return sqrtApprox(dx * dx + dy * dy)
    def choose_weighted(options, weights):
        total = 0.0
        i = 0
        while i < len(weights):
            total = total + weights[i]
            i = i + 1
        r = rand_float() * total
        accum = 0.0
        i = 0
        while i < len(weights):
            accum = accum + weights[i]
            if r <= accum:
                return options[i]
            i = i + 1
        return options[len(options) - 1]
    def city_select(pheromone, current, unvisited, alpha, beta, cities):
        probs = []
        i = 0
        while i < len(unvisited):
            city = unvisited[i]
            dist = distance(cities.get(city, []), cities.get(current, []))
            trail = pheromone[city][current]
            prob = pow_float(trail, alpha) * pow_float(1.0 / dist, beta)
            probs = _append(probs, prob)
            i = i + 1
        return choose_weighted(unvisited, probs)
    def pheromone_update(pheromone, cities, evaporation, ants_route, q):
        n = len(pheromone)
        i = 0
        while i < n:
            j = 0
            while j < n:
                pheromone[i][j] = pheromone[i][j] * evaporation
                j = j + 1
            i = i + 1
        a = 0
        while a < len(ants_route):
            route = ants_route[a]
            total = 0.0
            r = 0
            while r < len(route) - 1:
                total = total + distance(cities.get(route[r], []), cities.get(route[r + 1], []))
                r = r + 1
            delta = q / total
            r = 0
            while r < len(route) - 1:
                u = route[r]
                v = route[r + 1]
                pheromone[u][v] = pheromone[u][v] + delta
                pheromone[v][u] = pheromone[u][v]
                r = r + 1
            a = a + 1
        return pheromone
    def remove_value(lst, val):
        res = []
        i = 0
        while i < len(lst):
            if lst[i] != val:
                res = _append(res, lst[i])
            i = i + 1
        return res
    def ant_colony(cities, ants_num, iterations, evaporation, alpha, beta, q):
        n = len(cities)
        pheromone = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                row = _append(row, 1.0)
                j = j + 1
            pheromone = _append(pheromone, row)
            i = i + 1
        best_path = []
        best_distance = 1e+09
        iter = 0
        while iter < iterations:
            ants_route = []
            k = 0
            while k < ants_num:
                route = [0]
                unvisited = []
                for key in cities:
                    if key != 0:
                        unvisited = _append(unvisited, key)
                current = 0
                while len(unvisited) > 0:
                    next_city = city_select(pheromone, current, unvisited, alpha, beta, cities)
                    route = _append(route, next_city)
                    unvisited = remove_value(unvisited, next_city)
                    current = next_city
                route = _append(route, 0)
                ants_route = _append(ants_route, route)
                k = k + 1
            pheromone = pheromone_update(pheromone, cities, evaporation, ants_route, q)
            a = 0
            while a < len(ants_route):
                route = ants_route[a]
                dist = 0.0
                r = 0
                while r < len(route) - 1:
                    dist = dist + distance(cities.get(route[r], []), cities.get(route[r + 1], []))
                    r = r + 1
                if dist < best_distance:
                    best_distance = dist
                    best_path = route
                a = a + 1
            iter = iter + 1
        print("best_path = " + _str(best_path))
        print("best_distance = " + _str(best_distance))
    cities = {0: [0, 0], 1: [0, 5], 2: [3, 8], 3: [8, 10], 4: [12, 8], 5: [12, 4], 6: [8, 0], 7: [6, 2]}
    ant_colony(cities, 10, 20, 0.7, 1.0, 5.0, 10.0)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

