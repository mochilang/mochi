# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class GraphAdjacencyList:
    adj_list: Dict[str, [string]]
    directed: bool

def make_graph(directed):
    m = {}
    return GraphAdjacencyList(adj_list=m, directed=directed)
def contains_vertex(m, v):
    return v in m
def add_edge(g, s, d):
    adj = g.adj_list
    if not g.directed:
        if contains_vertex(adj, s) and contains_vertex(adj, d):
            adj[s] = _append(adj[s], d)
            adj[d] = _append(adj[d], s)
        else:
            if contains_vertex(adj, s):
                adj[s] = _append(adj[s], d)
                adj[d] = [s]
            else:
                if contains_vertex(adj, d):
                    adj[d] = _append(adj[d], s)
                    adj[s] = [d]
                else:
                    adj[s] = [d]
                    adj[d] = [s]
    else:
        if contains_vertex(adj, s) and contains_vertex(adj, d):
            adj[s] = _append(adj[s], d)
        else:
            if contains_vertex(adj, s):
                adj[s] = _append(adj[s], d)
                adj[d] = []
            else:
                if contains_vertex(adj, d):
                    adj[s] = [d]
                else:
                    adj[s] = [d]
                    adj[d] = []
    g.adj_list = adj
    return g
def graph_to_string(g):
    return str(g.adj_list)
d_graph = make_graph(True)
d_graph = add_edge(d_graph, str(0), str(1))
print(graph_to_string(d_graph))
d_graph = add_edge(d_graph, str(1), str(2))
d_graph = add_edge(d_graph, str(1), str(4))
d_graph = add_edge(d_graph, str(1), str(5))
print(graph_to_string(d_graph))
d_graph = add_edge(d_graph, str(2), str(0))
d_graph = add_edge(d_graph, str(2), str(6))
d_graph = add_edge(d_graph, str(2), str(7))
print(graph_to_string(d_graph))
