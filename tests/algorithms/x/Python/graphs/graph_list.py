# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class GraphAdjacencyList:
        adj_list: Dict[str, [string]]
        directed: bool
    def make_graph(directed):
        m = {}
        return GraphAdjacencyList(adj_list=m, directed=directed)
    def contains_vertex(m, v):
        return v in m
    def add_edge(g, s, d):
        adj = g.adj_list
        if not g.directed:
            if contains_vertex(adj, s) and contains_vertex(adj, d):
                adj[s] = _append(adj[s], d)
                adj[d] = _append(adj[d], s)
            else:
                if contains_vertex(adj, s):
                    adj[s] = _append(adj[s], d)
                    adj[d] = [s]
                else:
                    if contains_vertex(adj, d):
                        adj[d] = _append(adj[d], s)
                        adj[s] = [d]
                    else:
                        adj[s] = [d]
                        adj[d] = [s]
        else:
            if contains_vertex(adj, s) and contains_vertex(adj, d):
                adj[s] = _append(adj[s], d)
            else:
                if contains_vertex(adj, s):
                    adj[s] = _append(adj[s], d)
                    adj[d] = []
                else:
                    if contains_vertex(adj, d):
                        adj[s] = [d]
                    else:
                        adj[s] = [d]
                        adj[d] = []
        g.adj_list = adj
        return g
    def graph_to_string(g):
        return _str(g.adj_list)
    d_graph = make_graph(True)
    d_graph = add_edge(d_graph, _str(0), _str(1))
    print(graph_to_string(d_graph))
    d_graph = add_edge(d_graph, _str(1), _str(2))
    d_graph = add_edge(d_graph, _str(1), _str(4))
    d_graph = add_edge(d_graph, _str(1), _str(5))
    print(graph_to_string(d_graph))
    d_graph = add_edge(d_graph, _str(2), _str(0))
    d_graph = add_edge(d_graph, _str(2), _str(6))
    d_graph = add_edge(d_graph, _str(2), _str(7))
    print(graph_to_string(d_graph))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

