# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

test_graph_1 = {0: [1, 2], 1: [0, 3], 2: [0], 3: [1], 4: [5, 6], 5: [4, 6], 6: [4, 5]}
test_graph_2 = {0: [1, 2, 3], 1: [0, 3], 2: [0], 3: [0, 1], 4: [], 5: []}
def dfs(graph, vert, visited):
    visited[vert] = True
    connected_verts = []
    for neighbour in graph.get(vert, []):
        if not visited[neighbour]:
            connected_verts = _concat(connected_verts, dfs(graph, neighbour, visited))
    return _concat([vert], connected_verts)
def connected_components(graph):
    graph_size = len(graph)
    visited = []
    for _ in range(0, graph_size):
        visited = _append(visited, False)
    components_list = []
    for i in range(0, graph_size):
        if not visited[i]:
            component = dfs(graph, i, visited)
            components_list = _append(components_list, component)
    return components_list
print(str(connected_components(test_graph_1)))
print(str(connected_components(test_graph_2)))
