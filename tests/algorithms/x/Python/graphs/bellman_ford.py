# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Edge:
        src: int
        dst: int
        weight: int
    INF = 1e+09
    def list_to_string(arr):
        s = "["
        i = 0
        while i < len(arr):
            s = s + _str(arr[i])
            if i < len(arr) - 1:
                s = s + ", "
            i = i + 1
        return s + "]"
    def check_negative_cycle(graph, distance, edge_count):
        j = 0
        while j < edge_count:
            e = graph[j]
            u = e.src
            v = e.dst
            w = float(e.weight)
            if distance[u] < INF and distance[u] + w < distance[v]:
                return True
            j = j + 1
        return False
    def bellman_ford(graph, vertex_count, edge_count, src):
        distance = []
        i = 0
        while i < vertex_count:
            distance = _append(distance, INF)
            i = i + 1
        distance[src] = 0.0
        k = 0
        while k < vertex_count - 1:
            j = 0
            while j < edge_count:
                e = graph[j]
                u = e.src
                v = e.dst
                w = float(e.weight)
                if distance[u] < INF and distance[u] + w < distance[v]:
                    distance[v] = distance[u] + w
                j = j + 1
            k = k + 1
        if check_negative_cycle(graph, distance, edge_count):
            panic("Negative cycle found")
        return distance
    edges = [Edge(src=2, dst=1, weight=-10), Edge(src=3, dst=2, weight=3), Edge(src=0, dst=3, weight=5), Edge(src=0, dst=1, weight=4)]
    distances = bellman_ford(edges, 4, len(edges), 0)
    print(list_to_string(distances))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

