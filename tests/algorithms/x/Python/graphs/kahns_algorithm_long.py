# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def longest_distance(graph):
        n = len(graph)
        indegree = []
        i = 0
        while i < n:
            indegree = _append(indegree, 0)
            i = i + 1
        long_dist = []
        j = 0
        while j < n:
            long_dist = _append(long_dist, 1)
            j = j + 1
        u = 0
        while u < n:
            for v in graph[u]:
                indegree[v] = indegree[v] + 1
            u = u + 1
        queue = []
        head = 0
        k = 0
        while k < n:
            if indegree[k] == 0:
                queue = _append(queue, k)
            k = k + 1
        while head < len(queue):
            vertex = queue[head]
            head = head + 1
            for x in graph[vertex]:
                indegree[x] = indegree[x] - 1
                new_dist = long_dist[vertex] + 1
                if new_dist > long_dist[x]:
                    long_dist[x] = new_dist
                if indegree[x] == 0:
                    queue = _append(queue, x)
        max_len = long_dist[0]
        m = 1
        while m < n:
            if long_dist[m] > max_len:
                max_len = long_dist[m]
            m = m + 1
        return max_len
    graph = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []]
    print(longest_distance(graph))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

