# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def longest_distance(graph):
    n = len(graph)
    indegree = []
    i = 0
    while i < n:
        indegree = _append(indegree, 0)
        i = i + 1
    long_dist = []
    j = 0
    while j < n:
        long_dist = _append(long_dist, 1)
        j = j + 1
    u = 0
    while u < n:
        for v in graph[u]:
            indegree[v] = indegree[v] + 1
        u = u + 1
    queue = []
    head = 0
    k = 0
    while k < n:
        if indegree[k] == 0:
            queue = _append(queue, k)
        k = k + 1
    while head < len(queue):
        vertex = queue[head]
        head = head + 1
        for x in graph[vertex]:
            indegree[x] = indegree[x] - 1
            new_dist = long_dist[vertex] + 1
            if new_dist > long_dist[x]:
                long_dist[x] = new_dist
            if indegree[x] == 0:
                queue = _append(queue, x)
    max_len = long_dist[0]
    m = 1
    while m < n:
        if long_dist[m] > max_len:
            max_len = long_dist[m]
        m = m + 1
    return max_len
graph = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []]
print(longest_distance(graph))

