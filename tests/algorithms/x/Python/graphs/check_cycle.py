# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def depth_first_search(graph, vertex, visited, rec_stk):
        visited[vertex] = True
        rec_stk[vertex] = True
        for node in graph[vertex]:
            if not visited[node]:
                if depth_first_search(graph, node, visited, rec_stk):
                    return True
            else:
                if rec_stk[node]:
                    return True
        rec_stk[vertex] = False
        return False
    def check_cycle(graph):
        n = len(graph)
        visited = []
        rec_stk = []
        i = 0
        while i < n:
            visited = _append(visited, False)
            rec_stk = _append(rec_stk, False)
            i = i + 1
        i = 0
        while i < n:
            if not visited[i]:
                if depth_first_search(graph, i, visited, rec_stk):
                    return True
            i = i + 1
        return False
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    g1 = [[], [0, 3], [0, 4], [5], [5], []]
    print_bool(check_cycle(g1))
    g2 = [[1, 2], [2], [0, 3], [3]]
    print_bool(check_cycle(g2))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

