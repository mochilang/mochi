# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def depth_first_search(graph, vertex, visited, rec_stk):
    visited[vertex] = True
    rec_stk[vertex] = True
    for node in graph[vertex]:
        if not visited[node]:
            if depth_first_search(graph, node, visited, rec_stk):
                return True
        else:
            if rec_stk[node]:
                return True
    rec_stk[vertex] = False
    return False
def check_cycle(graph):
    n = len(graph)
    visited = []
    rec_stk = []
    i = 0
    while i < n:
        visited = _append(visited, False)
        rec_stk = _append(rec_stk, False)
        i = i + 1
    i = 0
    while i < n:
        if not visited[i]:
            if depth_first_search(graph, i, visited, rec_stk):
                return True
        i = i + 1
    return False
def print_bool(b):
    if b:
        print(("True" if True else "False"))
    else:
        print(("True" if False else "False"))
g1 = [[], [0, 3], [0, 4], [5], [5], []]
print_bool(check_cycle(g1))
g2 = [[1, 2], [2], [0, 3], [3]]
print_bool(check_cycle(g2))
