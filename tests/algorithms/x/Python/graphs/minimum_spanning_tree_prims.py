# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-07 17:24 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Edge:
    to: int
    weight: int

@dataclass
class Pair:
    u: int
    v: int

INF = 1000000000
def pairs_to_string(edges):
    s = "["
    i = 0
    while i < len(edges):
        e = edges[i]
        s = s + "(" + str(e.u) + ", " + str(e.v) + ")"
        if i < len(edges) - 1:
            s = s + ", "
        i = i + 1
    return s + "]"
def prim_mst(graph):
    n = len(graph)
    visited = []
    dist = []
    parent = []
    i = 0
    while i < n:
        visited = _append(visited, False)
        dist = _append(dist, INF)
        parent = _append(parent, -1)
        i = i + 1
    dist[0] = 0
    result = []
    count = 0
    while count < n:
        min_val = INF
        u = 0
        v = 0
        while v < n:
            if visited[v] == False and dist[v] < min_val:
                min_val = dist[v]
                u = v
            v = v + 1
        if min_val == INF:
            break
        visited[u] = True
        if u != 0:
            result = _append(result, Pair(u=parent[u], v=u))
        for e in graph[u]:
            if visited[e.to] == False and e.weight < dist[e.to]:
                dist[e.to] = e.weight
                parent[e.to] = u
        count = count + 1
    return result
adjacency_list = [[Edge(to=1, weight=1), Edge(to=3, weight=3)], [Edge(to=0, weight=1), Edge(to=2, weight=6), Edge(to=3, weight=5), Edge(to=4, weight=1)], [Edge(to=1, weight=6), Edge(to=4, weight=5), Edge(to=5, weight=2)], [Edge(to=0, weight=3), Edge(to=1, weight=5), Edge(to=4, weight=1)], [Edge(to=1, weight=1), Edge(to=2, weight=5), Edge(to=3, weight=1), Edge(to=5, weight=4)], [Edge(to=2, weight=2), Edge(to=4, weight=4)]]
mst_edges = prim_mst(adjacency_list)
print(pairs_to_string(mst_edges))
