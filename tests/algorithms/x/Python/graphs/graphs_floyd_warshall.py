# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    INF = 1e+09
    def floyd_warshall(graph):
        v = len(graph)
        dist = []
        i = 0
        while i < v:
            row = []
            j = 0
            while j < v:
                row = _append(row, graph[i][j])
                j = j + 1
            dist = _append(dist, row)
            i = i + 1
        k = 0
        while k < v:
            i = 0
            while i < v:
                j = 0
                while j < v:
                    if dist[i][k] < INF and dist[k][j] < INF and dist[i][k] + dist[k][j] < dist[i][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                    j = j + 1
                i = i + 1
            k = k + 1
        return dist
    def print_dist(dist):
        print("\nThe shortest path matrix using Floyd Warshall algorithm\n")
        i = 0
        while i < len(dist):
            j = 0
            line = ""
            while j < len(dist[i]):
                if dist[i][j] >= INF / 2.0:
                    line = line + "INF\t"
                else:
                    line = line + _str(int(dist[i][j])) + "\t"
                j = j + 1
            print(line)
            i = i + 1
    graph = [[0.0, 5.0, INF, 10.0], [INF, 0.0, 3.0, INF], [INF, INF, 0.0, 1.0], [INF, INF, INF, 0.0]]
    result = floyd_warshall(graph)
    print_dist(result)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

