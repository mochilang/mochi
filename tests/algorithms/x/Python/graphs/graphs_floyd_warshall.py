# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

INF = 1e+09
def floyd_warshall(graph):
    v = len(graph)
    dist = []
    i = 0
    while i < v:
        row = []
        j = 0
        while j < v:
            row = _append(row, graph[i][j])
            j = j + 1
        dist = _append(dist, row)
        i = i + 1
    k = 0
    while k < v:
        i = 0
        while i < v:
            j = 0
            while j < v:
                if dist[i][k] < INF and dist[k][j] < INF and dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
                j = j + 1
            i = i + 1
        k = k + 1
    return dist
def print_dist(dist):
    print("\nThe shortest path matrix using Floyd Warshall algorithm\n")
    i = 0
    while i < len(dist):
        j = 0
        line = ""
        while j < len(dist[i]):
            if dist[i][j] >= INF / 2.0:
                line = line + "INF\t"
            else:
                line = line + _str(int(dist[i][j])) + "\t"
            j = j + 1
        print(line)
        i = i + 1
graph = [[0.0, 5.0, INF, 10.0], [INF, 0.0, 3.0, INF], [INF, INF, 0.0, 1.0], [INF, INF, INF, 0.0]]
result = floyd_warshall(graph)
print_dist(result)

