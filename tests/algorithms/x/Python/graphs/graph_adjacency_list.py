# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Graph:
    adj: Dict[str, [string]]
    directed: bool

def create_graph(vertices, edges, directed):
    adj = {}
    for v in vertices:
        adj[v] = []
    for e in edges:
        s = e[0]
        d = e[1]
        if not (s in adj):
            adj[s] = []
        if not (d in adj):
            adj[d] = []
        adj[s] = _append(adj.get(s, None), d)
        if not directed:
            adj[d] = _append(adj.get(d, None), s)
    return Graph(adj=adj, directed=directed)
def add_vertex(graph, v):
    if v in graph.adj:
        panic("vertex exists")
    adj = {}
    for k in graph.adj:
        adj[k] = graph.adj[k]
    adj[v] = []
    return Graph(adj=adj, directed=graph.directed)
def remove_from_list(lst, value):
    res = []
    i = 0
    while i < len(lst):
        if lst[i] != value:
            res = _append(res, lst[i])
        i = i + 1
    return res
def remove_key(m, key):
    res = {}
    for k in m:
        if k != key:
            res[k] = m.get(k, [])
    return res
def add_edge(graph, s, d):
    if ((not (s in graph.adj)) or (not (d in graph.adj))):
        panic("vertex missing")
    if contains_edge(graph, s, d):
        panic("edge exists")
    adj = {}
    for k in graph.adj:
        adj[k] = graph.adj[k]
    list_s = adj.get(s, None)
    list_s = _append(list_s, d)
    adj[s] = list_s
    if not graph.directed:
        list_d = adj.get(d, None)
        list_d = _append(list_d, s)
        adj[d] = list_d
    return Graph(adj=adj, directed=graph.directed)
def remove_edge(graph, s, d):
    if ((not (s in graph.adj)) or (not (d in graph.adj))):
        panic("vertex missing")
    if not contains_edge(graph, s, d):
        panic("edge missing")
    adj = {}
    for k in graph.adj:
        adj[k] = graph.adj[k]
    adj[s] = remove_from_list(adj.get(s, None), d)
    if not graph.directed:
        adj[d] = remove_from_list(adj.get(d, None), s)
    return Graph(adj=adj, directed=graph.directed)
def remove_vertex(graph, v):
    if not (v in graph.adj):
        panic("vertex missing")
    adj = {}
    for k in graph.adj:
        if k != v:
            adj[k] = remove_from_list(graph.adj[k], v)
    return Graph(adj=adj, directed=graph.directed)
def contains_vertex(graph, v):
    return v in graph.adj
def contains_edge(graph, s, d):
    if ((not (s in graph.adj)) or (not (d in graph.adj))):
        panic("vertex missing")
    for x in graph.adj[s]:
        if x == d:
            return True
    return False
def clear_graph(graph):
    return Graph(adj={}, directed=graph.directed)
def to_string(graph):
    return _str(graph.adj)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        vertices = ["1", "2", "3", "4"]
        edges = [["1", "2"], ["2", "3"], ["3", "4"]]
        g = create_graph(vertices, edges, False)
        print(to_string(g))
        g = add_vertex(g, "5")
        g = add_edge(g, "4", "5")
        print(_str(contains_edge(g, "4", "5")))
        g = remove_edge(g, "1", "2")
        g = remove_vertex(g, "3")
        print(to_string(g))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

