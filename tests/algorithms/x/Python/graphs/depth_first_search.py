# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def contains(lst, v):
    i = 0
    while i < len(lst):
        if lst[i] == v:
            return True
        i = i + 1
    return False
def depth_first_search(graph, start):
    explored = []
    stack = []
    stack = _append(stack, start)
    explored = _append(explored, start)
    while len(stack) > 0:
        idx = len(stack) - 1
        v = stack[idx]
        stack = stack[0:idx]
        neighbors = graph.get(v, [])
        i = len(neighbors) - 1
        while i >= 0:
            adj = neighbors[i]
            if not contains(explored, adj):
                explored = _append(explored, adj)
                stack = _append(stack, adj)
            i = i - 1
    return explored
G = {"A": ["B", "C", "D"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B", "D"], "E": ["B", "F"], "F": ["C", "E", "G"], "G": ["F"]}
result = depth_first_search(G, "A")
print(result)
