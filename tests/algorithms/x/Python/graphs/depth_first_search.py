# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def contains(lst, v):
        i = 0
        while i < len(lst):
            if lst[i] == v:
                return True
            i = i + 1
        return False
    def depth_first_search(graph, start):
        explored = []
        stack = []
        stack = _append(stack, start)
        explored = _append(explored, start)
        while len(stack) > 0:
            idx = len(stack) - 1
            v = stack[idx]
            stack = stack[0:idx]
            neighbors = graph.get(v, [])
            i = len(neighbors) - 1
            while i >= 0:
                adj = neighbors[i]
                if not contains(explored, adj):
                    explored = _append(explored, adj)
                    stack = _append(stack, adj)
                i = i - 1
        return explored
    G = {"A": ["B", "C", "D"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B", "D"], "E": ["B", "F"], "F": ["C", "E", "G"], "G": ["F"]}
    result = depth_first_search(G, "A")
    print(result)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

