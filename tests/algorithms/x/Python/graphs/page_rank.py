# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Node:
        name: str
        inbound: [string]
        outbound: [string]
    def node_to_string(n):
        return "<node=" + n.name + " inbound=" + n.inbound + " outbound=" + n.outbound + ">"
    def page_rank(nodes, limit, d):
        ranks = {}
        for n in nodes:
            ranks[n.name] = 1.0
        outbounds = {}
        for n in nodes:
            outbounds[n.name] = 1.0 * len(n.outbound)
        i = 0
        while i < limit:
            print("======= Iteration " + _str(i + 1) + " =======")
            for n in nodes:
                sum_val = 0.0
                for ib in n.inbound:
                    sum_val = sum_val + ranks.get(ib, None) / outbounds.get(ib, None)
                ranks[n.name] = (1.0 - d) + d * sum_val
            print(ranks)
            i = i + 1
        return ranks
    names = ["A", "B", "C"]
    graph = [[0, 1, 1], [0, 0, 1], [1, 0, 0]]
    nodes = []
    for name in names:
        nodes = _append(nodes, Node(name=name, inbound=[], outbound=[]))
    ri = 0
    while ri < len(graph):
        row = graph[ri]
        ci = 0
        while ci < len(row):
            if row[ci] == 1:
                n_in = nodes[ci]
                n_in.inbound = _append(n_in.inbound, names[ri])
                nodes = _set_index(nodes, ci, n_in)
                n_out = nodes[ri]
                n_out.outbound = _append(n_out.outbound, names[ci])
                nodes = _set_index(nodes, ri, n_out)
            ci = ci + 1
        ri = ri + 1
    print("======= Nodes =======")
    for n in nodes:
        print(n)
    page_rank(nodes, 3, 0.85)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

