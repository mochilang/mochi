# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    name: str
    inbound: [string]
    outbound: [string]

def node_to_string(n):
    return "<node=" + n.name + " inbound=" + n.inbound + " outbound=" + n.outbound + ">"
def page_rank(nodes, limit, d):
    ranks = {}
    for n in nodes:
        ranks[n.name] = 1.0
    outbounds = {}
    for n in nodes:
        outbounds[n.name] = 1.0 * len(n.outbound)
    i = 0
    while i < limit:
        print("======= Iteration " + str(i + 1) + " =======")
        for n in nodes:
            sum_val = 0.0
            for ib in n.inbound:
                sum_val = sum_val + ranks.get(ib, None) // outbounds.get(ib, None)
            ranks[n.name] = (1.0 - d) + d * sum_val
        print(ranks)
        i = i + 1
    return ranks
names = ["A", "B", "C"]
graph = [[0, 1, 1], [0, 0, 1], [1, 0, 0]]
nodes = []
for name in names:
    nodes = _append(nodes, Node(name=name, inbound=[], outbound=[]))
ri = 0
while ri < len(graph):
    row = graph[ri]
    ci = 0
    while ci < len(row):
        if row[ci] == 1:
            n_in = nodes[ci]
            n_in.inbound = _append(n_in.inbound, names[ri])
            nodes = _set_index(nodes, ci, n_in)
            n_out = nodes[ri]
            n_out.outbound = _append(n_out.outbound, names[ci])
            nodes = _set_index(nodes, ri, n_out)
        ci = ci + 1
    ri = ri + 1
print("======= Nodes =======")
for n in nodes:
    print(n)
page_rank(nodes, 3, 0.85)
