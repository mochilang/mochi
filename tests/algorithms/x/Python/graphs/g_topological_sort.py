# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def depth_first_search(u, visited, graph, stack):
    visited[u] = True
    i = 0
    while i < len(graph[u]):
        v = graph[u][i]
        if not visited[v]:
            stack = depth_first_search(v, visited, graph, stack)
        i = i + 1
    stack = _append(stack, u)
    return stack
def topological_sort(graph):
    visited = []
    i = 0
    while i < len(graph):
        visited = _append(visited, False)
        i = i + 1
    stack = []
    i = 0
    while i < len(graph):
        if not visited[i]:
            stack = depth_first_search(i, visited, graph, stack)
        i = i + 1
    return stack
def print_stack(stack, clothes):
    order = 1
    s = stack
    while len(s) > 0:
        idx = s[len(s) - 1]
        s = s[0:len(s) - 1]
        print(_str(order) + " " + clothes.get(idx, ""))
        order = order + 1
def format_list(xs):
    res = "["
    i = 0
    while i < len(xs):
        res = res + _str(xs[i])
        if i < len(xs) - 1:
            res = res + ", "
        i = i + 1
    res = res + "]"
    return res
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        clothes = {0: "underwear", 1: "pants", 2: "belt", 3: "suit", 4: "shoe", 5: "socks", 6: "shirt", 7: "tie", 8: "watch"}
        graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]
        stack = topological_sort(graph)
        print(format_list(stack))
        print_stack(stack, clothes)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

