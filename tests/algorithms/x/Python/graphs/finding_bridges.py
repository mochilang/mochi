# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class DfsResult:
        id: int
        bridges: [[int]]
    def dfs(graph, at, parent, visited, ids, low, id, bridges):
        visited[at] = True
        ids[at] = id
        low[at] = id
        current_id = id + 1
        res_bridges = bridges
        for to in graph.get(at, []):
            if to == parent:
                continue
            else:
                if not visited[to]:
                    result = dfs(graph, to, at, visited, ids, low, current_id, res_bridges)
                    current_id = result.id
                    res_bridges = result.bridges
                    if low[at] > low[to]:
                        low[at] = low[to]
                    if ids[at] < low[to]:
                        edge = ([at, to] if at < to else [to, at])
                        res_bridges = _append(res_bridges, edge)
                else:
                    if low[at] > ids[to]:
                        low[at] = ids[to]
        return DfsResult(id=current_id, bridges=res_bridges)
    def compute_bridges(graph):
        n = len(graph)
        visited = []
        ids = []
        low = []
        i = 0
        while i < n:
            visited = _append(visited, False)
            ids = _append(ids, 0)
            low = _append(low, 0)
            i = i + 1
        bridges = []
        id = 0
        i = 0
        while i < n:
            if not visited[i]:
                result = dfs(graph, i, -1, visited, ids, low, id, bridges)
                id = result.id
                bridges = result.bridges
            i = i + 1
        return bridges
    def get_demo_graph(index):
        if index == 0:
            return {0: [1, 2], 1: [0, 2], 2: [0, 1, 3, 5], 3: [2, 4], 4: [3], 5: [2, 6, 8], 6: [5, 7], 7: [6, 8], 8: [5, 7]}
        if index == 1:
            return {0: [6], 1: [9], 2: [4, 5], 3: [4], 4: [2, 3], 5: [2], 6: [0, 7], 7: [6], 8: [], 9: [1]}
        if index == 2:
            return {0: [4], 1: [6], 2: [], 3: [5, 6, 7], 4: [0, 6], 5: [3, 8, 9], 6: [1, 3, 4, 7], 7: [3, 6, 8, 9], 8: [5, 7], 9: [5, 7]}
        return {0: [1, 3], 1: [0, 2, 4], 2: [1, 3, 4], 3: [0, 2, 4], 4: [1, 2, 3]}
    print(compute_bridges(get_demo_graph(0)))
    print(compute_bridges(get_demo_graph(1)))
    print(compute_bridges(get_demo_graph(2)))
    print(compute_bridges(get_demo_graph(3)))
    print(compute_bridges({}))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

