# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Graph:
    graph: Dict[str, [string]]
    parent: Dict[str, str]
    source: str

def newGraph(g, s):
    return Graph(graph=g, parent={}, source=s)
def breath_first_search(g):
    parent = g.parent
    parent[g.source] = g.source
    queue = [g.source]
    idx = 0
    while idx < len(queue):
        vertex = queue[idx]
        for adj in g.graph.get(vertex):
            if not (adj in parent):
                parent[adj] = vertex
                queue = _append(queue, adj)
        idx = idx + 1
    g.parent = parent
    return g
def shortest_path(g, target):
    if target == g.source:
        return g.source
    if not (target in g.parent):
        return "No path from vertex: " + g.source + " to vertex: " + target
    p = g.parent.get(target)
    return shortest_path(g, p) + "->" + target
graph = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]}
g = newGraph(graph, "G")
g = breath_first_search(g)
print(shortest_path(g, "D"))
print(shortest_path(g, "G"))
print(shortest_path(g, "Foo"))
