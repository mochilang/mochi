# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Graph:
        graph: Dict[str, [string]]
        parent: Dict[str, str]
        source: str
    def newGraph(g, s):
        return Graph(graph=g, parent={}, source=s)
    def breath_first_search(g):
        parent = g.parent
        parent[g.source] = g.source
        queue = [g.source]
        idx = 0
        while idx < len(queue):
            vertex = queue[idx]
            for adj in g.graph[vertex]:
                if not (adj in parent):
                    parent[adj] = vertex
                    queue = _append(queue, adj)
            idx = idx + 1
        g.parent = parent
        return g
    def shortest_path(g, target):
        if target == g.source:
            return g.source
        if not (target in g.parent):
            return "No path from vertex: " + g.source + " to vertex: " + target
        p = g.parent[target]
        return shortest_path(g, p) + "->" + target
    graph = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]}
    g = newGraph(graph, "G")
    g = breath_first_search(g)
    print(shortest_path(g, "D"))
    print(shortest_path(g, "G"))
    print(shortest_path(g, "Foo"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

