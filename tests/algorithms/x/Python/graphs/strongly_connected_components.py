# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def topology_sort(graph, vert, visited):
    visited[vert] = True
    order = []
    for neighbour in graph[vert]:
        if not visited[neighbour]:
            order = _concat(order, topology_sort(graph, neighbour, visited))
    order = _append(order, vert)
    return order
def find_component(graph, vert, visited):
    visited[vert] = True
    comp = [vert]
    for neighbour in graph[vert]:
        if not visited[neighbour]:
            comp = _concat(comp, find_component(graph, neighbour, visited))
    return comp
def strongly_connected_components(graph):
    n = len(graph)
    visited = []
    for _ in range(0, n):
        visited = _append(visited, False)
    reversed_ = []
    for _ in range(0, n):
        reversed_ = _append(reversed_, [])
    for i in range(0, n):
        for neighbour in graph[i]:
            reversed_[neighbour] = _append(reversed_[neighbour], i)
    order = []
    for i in range(0, n):
        if not visited[i]:
            order = _concat(order, topology_sort(graph, i, visited))
    visited = []
    for _ in range(0, n):
        visited = _append(visited, False)
    components = []
    i = 0
    while i < n:
        v = order[n - i - 1]
        if not visited[v]:
            comp = find_component(reversed_, v, visited)
            components = _append(components, comp)
        i = i + 1
    return components
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_graph_1 = [[2, 3], [0], [1], [4], []]
        test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]]
        print(_str(strongly_connected_components(test_graph_1)))
        print(_str(strongly_connected_components(test_graph_2)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

