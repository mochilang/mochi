# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def topology_sort(graph, vert, visited):
    visited[vert] = True
    order = []
    for neighbour in graph[vert]:
        if not visited[neighbour]:
            order = _concat(order, topology_sort(graph, neighbour, visited))
    order = _append(order, vert)
    return order
def find_component(graph, vert, visited):
    visited[vert] = True
    comp = [vert]
    for neighbour in graph[vert]:
        if not visited[neighbour]:
            comp = _concat(comp, find_component(graph, neighbour, visited))
    return comp
def strongly_connected_components(graph):
    n = len(graph)
    visited = []
    for _ in range(0, n):
        visited = _append(visited, False)
    reversed_ = []
    for _ in range(0, n):
        reversed_ = _append(reversed_, [])
    for i in range(0, n):
        for neighbour in graph[int(i)]:
            reversed_[neighbour] = _append(reversed_[neighbour], i)
    order = []
    for i in range(0, n):
        if not visited[int(i)]:
            order = _concat(order, topology_sort(graph, i, visited))
    visited = []
    for _ in range(0, n):
        visited = _append(visited, False)
    components = []
    i = 0
    while i < n:
        v = order[n - i - 1]
        if not visited[v]:
            comp = find_component(reversed_, v, visited)
            components = _append(components, comp)
        i = i + 1
    return components
def main():
    test_graph_1 = [[2, 3], [0], [1], [4], []]
    test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]]
    print(_str(strongly_connected_components(test_graph_1)))
    print(_str(strongly_connected_components(test_graph_2)))
main()

