# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 15:46 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

INF = 1e+09
def print_dist(dist):
    print("Vertex Distance")
    i = 0
    while i < len(dist):
        if dist[i] >= INF:
            print(i, "\tINF")
        else:
            print(i, "\t", int(dist[i]))
        i = i + 1
def min_dist(mdist, vset):
    min_val = INF
    min_ind = -1
    i = 0
    while i < len(mdist):
        if not (vset[i]) and mdist[i] < min_val:
            min_val = mdist[i]
            min_ind = i
        i = i + 1
    return min_ind
def dijkstra(graph, src):
    v = len(graph)
    mdist = []
    vset = []
    i = 0
    while i < v:
        mdist = _append(mdist, INF)
        vset = _append(vset, False)
        i = i + 1
    mdist[src] = 0.0
    count = 0
    while count < v - 1:
        u = min_dist(mdist, vset)
        vset[u] = True
        i = 0
        while i < v:
            alt = mdist[u] + graph[u][i]
            if not (vset[i]) and graph[u][i] < INF and alt < mdist[i]:
                mdist[i] = alt
            i = i + 1
        count = count + 1
    return mdist
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        graph = [[0.0, 10.0, INF, INF, 5.0], [INF, 0.0, 1.0, INF, 2.0], [INF, INF, 0.0, 4.0, INF], [INF, INF, 6.0, 0.0, INF], [INF, 3.0, 9.0, 2.0, 0.0]]
        dist = dijkstra(graph, 0)
        print_dist(dist)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

