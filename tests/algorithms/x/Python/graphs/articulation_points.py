# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def dfs_skip(graph, visited, skip, at):
    visited[at] = True
    count = 1
    for to in graph[at]:
        if to == skip:
            continue
        if visited[to] == False:
            count = count + dfs_skip(graph, visited, skip, to)
    return count
def articulation_points(graph):
    n = len(graph)
    result = []
    v = 0
    while v < n:
        visited = []
        i = 0
        while i < n:
            visited = _append(visited, False)
            i = i + 1
        start = 0
        while start == v and start < n:
            start = start + 1
        reach = dfs_skip(graph, visited, v, start)
        if reach < n - 1:
            result = _append(result, v)
            print(v)
        v = v + 1
    return result
def main():
    graph = [[1, 2], [0, 2], [0, 1, 3, 5], [2, 4], [3], [2, 6, 8], [5, 7], [6, 8], [5, 7]]
    articulation_points(graph)
main()
