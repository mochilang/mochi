# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def dfs(u, graph, visit, stack):
    if visit[u]:
        return stack
    visit[u] = True
    for v in graph[u]:
        stack = dfs(v, graph, visit, stack)
    stack = _append(stack, u)
    return stack
def dfs2(u, reversed_graph, visit, component):
    if visit[u]:
        return component
    visit[u] = True
    component = _append(component, u)
    for v in reversed_graph[u]:
        component = dfs2(v, reversed_graph, visit, component)
    return component
def kosaraju(graph):
    n = len(graph)
    reversed_graph = []
    i = 0
    while i < n:
        reversed_graph = _append(reversed_graph, [])
        i = i + 1
    i = 0
    while i < n:
        for v in graph[i]:
            reversed_graph[v] = _append(reversed_graph[v], i)
        i = i + 1
    visit = []
    i = 0
    while i < n:
        visit = _append(visit, False)
        i = i + 1
    stack = []
    i = 0
    while i < n:
        if visit[i] == False:
            stack = dfs(i, graph, visit, stack)
        i = i + 1
    i = 0
    while i < n:
        visit[i] = False
        i = i + 1
    scc = []
    idx = len(stack) - 1
    while idx >= 0:
        node = stack[idx]
        if visit[node] == False:
            component = []
            component = dfs2(node, reversed_graph, visit, component)
            scc = _append(scc, component)
        idx = idx - 1
    return scc
def main():
    graph = [[1], [2], [0, 3], [4], []]
    comps = kosaraju(graph)
    i = 0
    while i < len(comps):
        print(comps[i])
        i = i + 1
main()

