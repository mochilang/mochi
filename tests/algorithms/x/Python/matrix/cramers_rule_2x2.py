# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def cramers_rule_2x2(eq1, eq2):
    if len(eq1) != 3 or len(eq2) != 3:
        panic("Please enter a valid equation.")
    if eq1[0] == 0.0 and eq1[1] == 0.0 and eq2[0] == 0.0 and eq2[1] == 0.0:
        panic("Both a & b of two equations can't be zero.")
    a1 = eq1[0]
    b1 = eq1[1]
    c1 = eq1[2]
    a2 = eq2[0]
    b2 = eq2[1]
    c2 = eq2[2]
    determinant = a1 * b2 - a2 * b1
    determinant_x = c1 * b2 - c2 * b1
    determinant_y = a1 * c2 - a2 * c1
    if determinant == 0.0:
        if determinant_x == 0.0 and determinant_y == 0.0:
            panic("Infinite solutions. (Consistent system)")
        panic("No solution. (Inconsistent system)")
    if determinant_x == 0.0 and determinant_y == 0.0:
        return [0.0, 0.0]
    x = determinant_x / determinant
    y = determinant_y / determinant
    return [x, y]
def test_cramers_rule_2x2():
    r1 = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0])
    if r1[0] != 0.0 or r1[1] != 0.0:
        panic("Test1 failed")
    r2 = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0])
    if r2[0] != 13.0 or r2[1] != 12.5:
        panic("Test2 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_cramers_rule_2x2()
        print(cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0]))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
