# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Coord:
    x: int
    y: int

@dataclass
class PlayResult:
    matrix: [[string]]
    score: int

def is_alnum(ch):
    return (ch >= "0" and ch <= "9") or (ch >= "A" and ch <= "Z") or (ch >= "a" and ch <= "z")
def to_int(token):
    res = 0
    i = 0
    while i < len(token):
        res = res * 10 + (int(token[i:i + 1]))
        i = i + 1
    return res
def split(s, sep):
    res = []
    current = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == sep:
            res = _append(res, current)
            current = ""
        else:
            current = current + ch
        i = i + 1
    res = _append(res, current)
    return res
def parse_moves(input_str):
    pairs = input_str.split(",")
    moves = []
    i = 0
    while i < len(pairs):
        pair = pairs[i]
        numbers = []
        num = ""
        j = 0
        while j < len(pair):
            ch = pair[j:j + 1]
            if ch == " ":
                if num != "":
                    numbers = _append(numbers, num)
                    num = ""
            else:
                num = num + ch
            j = j + 1
        if num != "":
            numbers = _append(numbers, num)
        if len(numbers) != 2:
            panic("Each move must have exactly two numbers.")
        x = to_int(numbers[0])
        y = to_int(numbers[1])
        moves = _append(moves, Coord(x=x, y=y))
        i = i + 1
    return moves
def validate_matrix_size(size):
    if size <= 0:
        panic("Matrix size must be a positive integer.")
def validate_matrix_content(matrix, size):
    if len(matrix) != size:
        panic("The matrix dont match with size.")
    i = 0
    while i < size:
        row = matrix[i]
        if len(row) != size:
            panic("Each row in the matrix must have exactly " + _str(size) + " characters.")
        j = 0
        while j < size:
            ch = row[j:j + 1]
            if not is_alnum(ch):
                panic("Matrix rows can only contain letters and numbers.")
            j = j + 1
        i = i + 1
def validate_moves(moves, size):
    i = 0
    while i < len(moves):
        mv = moves[i]
        if mv.x < 0 or mv.x >= size or mv.y < 0 or mv.y >= size:
            panic("Move is out of bounds for a matrix.")
        i = i + 1
def contains(pos, r, c):
    i = 0
    while i < len(pos):
        p = pos[i]
        if p.x == r and p.y == c:
            return True
        i = i + 1
    return False
def find_repeat(matrix_g, row, column, size):
    column = size - 1 - column
    visited = []
    repeated = []
    color = matrix_g[column][row]
    if color == "-":
        return repeated
    stack = [Coord(x=column, y=row)]
    while len(stack) > 0:
        idx = len(stack) - 1
        pos = stack[idx]
        stack = stack[0:idx]
        if pos.x < 0 or pos.x >= size or pos.y < 0 or pos.y >= size:
            continue
        if contains(visited, pos.x, pos.y):
            continue
        visited = _append(visited, pos)
        if matrix_g[pos.x][pos.y] == color:
            repeated = _append(repeated, pos)
            stack = _append(stack, Coord(x=pos.x - 1, y=pos.y))
            stack = _append(stack, Coord(x=pos.x + 1, y=pos.y))
            stack = _append(stack, Coord(x=pos.x, y=pos.y - 1))
            stack = _append(stack, Coord(x=pos.x, y=pos.y + 1))
    return repeated
def increment_score(count):
    return count * (count + 1) / 2
def move_x(matrix_g, column, size):
    new_list = []
    row = 0
    while row < size:
        val = matrix_g[row][column]
        if val != "-":
            new_list = _append(new_list, val)
        else:
            new_list = _concat([val], new_list)
        row = row + 1
    row = 0
    while row < size:
        matrix_g[row][column] = new_list[row]
        row = row + 1
    return matrix_g
def move_y(matrix_g, size):
    empty_cols = []
    column = size - 1
    while column >= 0:
        row = 0
        all_empty = True
        while row < size:
            if matrix_g[row][column] != "-":
                all_empty = False
                break
            row = row + 1
        if all_empty:
            empty_cols = _append(empty_cols, column)
        column = column - 1
    i = 0
    while i < len(empty_cols):
        col = empty_cols[i]
        c = col + 1
        while c < size:
            r = 0
            while r < size:
                matrix_g[r][c - 1] = matrix_g[r][c]
                r = r + 1
            c = c + 1
        r = 0
        while r < size:
            matrix_g[r][size - 1] = "-"
            r = r + 1
        i = i + 1
    return matrix_g
def play(matrix_g, pos_x, pos_y, size):
    same_colors = find_repeat(matrix_g, pos_x, pos_y, size)
    if len(same_colors) != 0:
        i = 0
        while i < len(same_colors):
            p = same_colors[i]
            matrix_g[p.x][p.y] = "-"
            i = i + 1
        column = 0
        while column < size:
            matrix_g = move_x(matrix_g, column, size)
            column = column + 1
        matrix_g = move_y(matrix_g, size)
    sc = increment_score(len(same_colors))
    return PlayResult(matrix=matrix_g, score=sc)
def build_matrix(matrix):
    res = []
    i = 0
    while i < len(matrix):
        row = matrix[i]
        row_list = []
        j = 0
        while j < len(row):
            row_list = _append(row_list, row[j:j + 1])
            j = j + 1
        res = _append(res, row_list)
        i = i + 1
    return res
def process_game(size, matrix, moves):
    game_matrix = build_matrix(matrix)
    total = 0
    i = 0
    while i < len(moves):
        mv = moves[i]
        res = play(game_matrix, mv.x, mv.y, size)
        game_matrix = res.matrix
        total = total + res.score
        i = i + 1
    return total
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        size = 4
        matrix = ["RRBG", "RBBG", "YYGG", "XYGG"]
        moves = parse_moves("0 1,1 1")
        validate_matrix_size(size)
        validate_matrix_content(matrix, size)
        validate_moves(moves, size)
        score = process_game(size, matrix, moves)
        print(_str(score))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
