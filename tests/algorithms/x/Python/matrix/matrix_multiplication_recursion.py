# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_square(matrix):
        n = len(matrix)
        i = 0
        while i < n:
            if len(matrix[i]) != n:
                return False
            i = i + 1
        return True
    def matrix_multiply(a, b):
        rows = len(a)
        cols = len(b[0])
        inner = len(b)
        result = []
        i = 0
        while i < rows:
            row = []
            j = 0
            while j < cols:
                sum = 0
                k = 0
                while k < inner:
                    sum = sum + a[i][k] * b[k][j]
                    k = k + 1
                row = _append(row, sum)
                j = j + 1
            result = _append(result, row)
            i = i + 1
        return result
    def multiply(i, j, k, a, b, result, n, m):
        if i >= n:
            return
        if j >= m:
            multiply(i + 1, 0, 0, a, b, result, n, m)
            return
        if k >= len(b):
            multiply(i, j + 1, 0, a, b, result, n, m)
            return
        result[i][j] = result[i][j] + a[i][k] * b[k][j]
        multiply(i, j, k + 1, a, b, result, n, m)
    def matrix_multiply_recursive(a, b):
        if len(a) == 0 or len(b) == 0:
            return []
        if len(a) != len(b) or (not is_square(a)) or (not is_square(b)):
            panic("Invalid matrix dimensions")
        n = len(a)
        m = len(b[0])
        result = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < m:
                row = _append(row, 0)
                j = j + 1
            result = _append(result, row)
            i = i + 1
        multiply(0, 0, 0, a, b, result, n, m)
        return result
    matrix_1_to_4 = [[1, 2], [3, 4]]
    matrix_5_to_8 = [[5, 6], [7, 8]]
    matrix_count_up = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    matrix_unordered = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]]
    print(matrix_multiply_recursive(matrix_1_to_4, matrix_5_to_8))
    print(matrix_multiply_recursive(matrix_count_up, matrix_unordered))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
