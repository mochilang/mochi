# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def unique(nums):
        res = []
        i = 0
        while i < len(nums):
            v = nums[i]
            found = False
            j = 0
            while j < len(res):
                if res[j] == v:
                    found = True
                    break
                j = j + 1
            if not found:
                res = _append(res, v)
            i = i + 1
        return res
    def array_equalization(vector, step_size):
        if step_size <= 0:
            error("Step size must be positive and non-zero.")
        elems = unique(vector)
        min_updates = len(vector)
        i = 0
        while i < len(elems):
            target = elems[i]
            idx = 0
            updates = 0
            while idx < len(vector):
                if vector[idx] != target:
                    updates = updates + 1
                    idx = idx + step_size
                else:
                    idx = idx + 1
            if updates < min_updates:
                min_updates = updates
            i = i + 1
        return min_updates
    print(_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)))
    print(_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)))
    print(_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)))
    print(_str(array_equalization([22, 22, 22, 33, 33, 33], 2)))
    print(_str(array_equalization([1, 2, 3], 2147483647)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

