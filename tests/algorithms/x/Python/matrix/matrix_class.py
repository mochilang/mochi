# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

@dataclass
class Matrix:
    data: [[float]]
    rows: int
    cols: int

def make_matrix(values):
    r = len(values)
    if r == 0:
        return Matrix(data=[], rows=0, cols=0)
    c = len(values[0])
    i = 0
    while i < r:
        if len(values[i]) != c:
            return Matrix(data=[], rows=0, cols=0)
        i = i + 1
    return Matrix(data=values, rows=r, cols=c)
def matrix_columns(m):
    cols = []
    j = 0
    while j < m.cols:
        col = []
        i = 0
        while i < m.rows:
            col = _append(col, m.data[i][j])
            i = i + 1
        cols = _append(cols, col)
        j = j + 1
    return cols
def matrix_identity(m):
    vals = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            v = (1.0 if i == j else 0.0)
            row = _append(row, v)
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=m.rows, cols=m.cols)
def matrix_minor(m, r, c):
    vals = []
    i = 0
    while i < m.rows:
        if i != r:
            row = []
            j = 0
            while j < m.cols:
                if j != c:
                    row = _append(row, m.data[i][j])
                j = j + 1
            vals = _append(vals, row)
        i = i + 1
    sub = Matrix(data=vals, rows=m.rows - 1, cols=m.cols - 1)
    return matrix_determinant(sub)
def matrix_cofactor(m, r, c):
    minor = matrix_minor(m, r, c)
    if (r + c) % 2 == 0:
        return minor
    return -1.0 * minor
def matrix_minors(m):
    vals = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            row = _append(row, matrix_minor(m, i, j))
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=m.rows, cols=m.cols)
def matrix_cofactors(m):
    vals = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            row = _append(row, matrix_cofactor(m, i, j))
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=m.rows, cols=m.cols)
def matrix_determinant(m):
    if m.rows != m.cols:
        return 0.0
    if m.rows == 0:
        return 0.0
    if m.rows == 1:
        return m.data[0][0]
    if m.rows == 2:
        return m.data[0][0] * m.data[1][1] - m.data[0][1] * m.data[1][0]
    sum_ = 0.0
    j = 0
    while j < m.cols:
        sum_ = sum_ + m.data[0][j] * matrix_cofactor(m, 0, j)
        j = j + 1
    return sum_
def matrix_is_invertible(m):
    return matrix_determinant(m) != 0.0
def matrix_adjugate(m):
    cof = matrix_cofactors(m)
    vals = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            row = _append(row, cof.data[j][i])
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=m.rows, cols=m.cols)
def matrix_inverse(m):
    det = matrix_determinant(m)
    if det == 0.0:
        return Matrix(data=[], rows=0, cols=0)
    adj = matrix_adjugate(m)
    return matrix_mul_scalar(adj, 1.0 / det)
def matrix_add_row(m, row):
    newData = m.data
    newData = _append(newData, row)
    return Matrix(data=newData, rows=m.rows + 1, cols=m.cols)
def matrix_add_column(m, col):
    newData = []
    i = 0
    while i < m.rows:
        newData = _append(newData, _append(m.data[i], col[i]))
        i = i + 1
    return Matrix(data=newData, rows=m.rows, cols=m.cols + 1)
def matrix_mul_scalar(m, s):
    vals = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            row = _append(row, m.data[i][j] * s)
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=m.rows, cols=m.cols)
def matrix_neg(m):
    return matrix_mul_scalar(m, -1.0)
def matrix_add(a, b):
    if a.rows != b.rows or a.cols != b.cols:
        return Matrix(data=[], rows=0, cols=0)
    vals = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < a.cols:
            row = _append(row, a.data[i][j] + b.data[i][j])
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=a.rows, cols=a.cols)
def matrix_sub(a, b):
    if a.rows != b.rows or a.cols != b.cols:
        return Matrix(data=[], rows=0, cols=0)
    vals = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < a.cols:
            row = _append(row, a.data[i][j] - b.data[i][j])
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=a.rows, cols=a.cols)
def matrix_dot(row, col):
    sum_ = 0.0
    i = 0
    while i < len(row):
        sum_ = sum_ + row[i] * col[i]
        i = i + 1
    return sum_
def matrix_mul(a, b):
    if a.cols != b.rows:
        return Matrix(data=[], rows=0, cols=0)
    bcols = matrix_columns(b)
    vals = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < b.cols:
            row = _append(row, matrix_dot(a.data[i], bcols[j]))
            j = j + 1
        vals = _append(vals, row)
        i = i + 1
    return Matrix(data=vals, rows=a.rows, cols=b.cols)
def matrix_pow(m, p):
    if p == 0:
        return matrix_identity(m)
    if p < 0:
        if matrix_is_invertible(m):
            return matrix_pow(matrix_inverse(m), -p)
        return Matrix(data=[], rows=0, cols=0)
    result = m
    i = 1
    while i < p:
        result = matrix_mul(result, m)
        i = i + 1
    return result
def matrix_to_string(m):
    if m.rows == 0:
        return "[]"
    s = "["
    i = 0
    while i < m.rows:
        s = s + "["
        j = 0
        while j < m.cols:
            s = s + _str(m.data[i][j])
            if j < m.cols - 1:
                s = s + " "
            j = j + 1
        s = s + "]"
        if i < m.rows - 1:
            s = s + "\n "
        i = i + 1
    s = s + "]"
    return s
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        m = make_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
        print(matrix_to_string(m))
        print(_str(matrix_columns(m)))
        print(_str(m.rows) + "," + _str(m.cols))
        print(_str(matrix_is_invertible(m)))
        print(matrix_to_string(matrix_identity(m)))
        print(_str(matrix_determinant(m)))
        print(matrix_to_string(matrix_minors(m)))
        print(matrix_to_string(matrix_cofactors(m)))
        print(matrix_to_string(matrix_adjugate(m)))
        m2 = matrix_mul_scalar(m, 3.0)
        print(matrix_to_string(m2))
        print(matrix_to_string(matrix_add(m, m2)))
        print(matrix_to_string(matrix_sub(m, m2)))
        print(matrix_to_string(matrix_pow(m, 3)))
        m3 = matrix_add_row(m, [10.0, 11.0, 12.0])
        print(matrix_to_string(m3))
        m4 = matrix_add_column(m2, [8.0, 16.0, 32.0])
        print(matrix_to_string(matrix_mul(m3, m4)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

