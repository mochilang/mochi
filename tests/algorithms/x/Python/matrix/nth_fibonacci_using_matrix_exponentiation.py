# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def multiply(matrix_a, matrix_b):
    n = len(matrix_a)
    matrix_c = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            val = 0
            k = 0
            while k < n:
                val = val + matrix_a[i][k] * matrix_b[k][j]
                k = k + 1
            row = _append(row, val)
            j = j + 1
        matrix_c = _append(matrix_c, row)
        i = i + 1
    return matrix_c
def identity(n):
    res = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            if i == j:
                row = _append(row, 1)
            else:
                row = _append(row, 0)
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def nth_fibonacci_matrix(n):
    if n <= 1:
        return n
    res_matrix = identity(2)
    fib_matrix = [[1, 1], [1, 0]]
    m = n - 1
    while m > 0:
        if m % 2 == 1:
            res_matrix = multiply(res_matrix, fib_matrix)
        fib_matrix = multiply(fib_matrix, fib_matrix)
        m = m // 2
    return res_matrix[0][0]
def nth_fibonacci_bruteforce(n):
    if n <= 1:
        return n
    fib0 = 0
    fib1 = 1
    i = 2
    while i <= n:
        next = fib0 + fib1
        fib0 = fib1
        fib1 = next
        i = i + 1
    return fib1
def parse_number(s):
    result = 0
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch >= "0" and ch <= "9":
            result = result * 10 + (int(ch))
        i = i + 1
    return result
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"]
        i = 0
        while i < len(ordinals):
            ordinal = ordinals[i]
            n = parse_number(ordinal)
            msg = ordinal + " fibonacci number using matrix exponentiation is " + _str(nth_fibonacci_matrix(n)) + " and using bruteforce is " + _str(nth_fibonacci_bruteforce(n))
            print(msg)
            i = i + 1
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
