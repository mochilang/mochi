# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def generate_large_matrix():
        result = []
        i = 0
        while i < 1000:
            row = []
            j = 1000 - i
            while j > (-1000 - i):
                row = _append(row, j)
                j = j - 1
            result = _append(result, row)
            i = i + 1
        return result
    def find_negative_index(arr):
        left = 0
        right = len(arr) - 1
        if len(arr) == 0:
            return 0
        if arr[0] < 0:
            return 0
        while left <= right:
            mid = (left + right) // 2
            num = arr[mid]
            if num < 0:
                if mid == 0:
                    return 0
                if arr[mid - 1] >= 0:
                    return mid
                right = mid - 1
            else:
                left = mid + 1
        return len(arr)
    def count_negatives_binary_search(grid):
        total = 0
        bound = len(grid[0])
        i = 0
        while i < len(grid):
            row = grid[i]
            idx = find_negative_index(row[0:bound])
            bound = idx
            total = total + idx
            i = i + 1
        return (len(grid) * len(grid[0])) - total
    def count_negatives_brute_force(grid):
        count = 0
        i = 0
        while i < len(grid):
            row = grid[i]
            j = 0
            while j < len(row):
                if row[j] < 0:
                    count = count + 1
                j = j + 1
            i = i + 1
        return count
    def count_negatives_brute_force_with_break(grid):
        total = 0
        i = 0
        while i < len(grid):
            row = grid[i]
            j = 0
            while j < len(row):
                number = row[j]
                if number < 0:
                    total = total + (len(row) - j)
                    break
                j = j + 1
            i = i + 1
        return total
    grid = generate_large_matrix()
    test_grids = [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], grid]
    results_bin = []
    i = 0
    while i < len(test_grids):
        results_bin = _append(results_bin, count_negatives_binary_search(test_grids[i]))
        i = i + 1
    print(_str(results_bin))
    results_brute = []
    i = 0
    while i < len(test_grids):
        results_brute = _append(results_brute, count_negatives_brute_force(test_grids[i]))
        i = i + 1
    print(_str(results_brute))
    results_break = []
    i = 0
    while i < len(test_grids):
        results_break = _append(results_break, count_negatives_brute_force_with_break(test_grids[i]))
        i = i + 1
    print(_str(results_break))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
