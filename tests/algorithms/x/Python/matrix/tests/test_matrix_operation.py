# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def check_matrix(mat):
    if len(mat) < 2 or len(mat[0]) < 2:
        panic("Expected a matrix with at least 2x2 dimensions")
def add(a, b):
    check_matrix(a)
    check_matrix(b)
    if len(a) != len(b) or len(a[0]) != len(b[0]):
        panic("Matrices must have the same dimensions")
    rows = len(a)
    cols = len(a[0])
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            row = _append(row, a[i][j] + b[i][j])
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def subtract(a, b):
    check_matrix(a)
    check_matrix(b)
    if len(a) != len(b) or len(a[0]) != len(b[0]):
        panic("Matrices must have the same dimensions")
    rows = len(a)
    cols = len(a[0])
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            row = _append(row, a[i][j] - b[i][j])
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def scalar_multiply(a, s):
    check_matrix(a)
    rows = len(a)
    cols = len(a[0])
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            row = _append(row, a[i][j] * s)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def multiply(a, b):
    check_matrix(a)
    check_matrix(b)
    if len(a[0]) != len(b):
        panic("Invalid dimensions for matrix multiplication")
    rows = len(a)
    cols = len(b[0])
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            sum_ = 0.0
            k = 0
            while k < len(b):
                sum_ = sum_ + a[i][k] * b[k][j]
                k = k + 1
            row = _append(row, sum_)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def identity(n):
    result = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            if i == j:
                row = _append(row, 1.0)
            else:
                row = _append(row, 0.0)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def transpose(a):
    check_matrix(a)
    rows = len(a)
    cols = len(a[0])
    result = []
    j = 0
    while j < cols:
        row = []
        i = 0
        while i < rows:
            row = _append(row, a[i][j])
            i = i + 1
        result = _append(result, row)
        j = j + 1
    return result
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        mat_a = [[12.0, 10.0], [3.0, 9.0]]
        mat_b = [[3.0, 4.0], [7.0, 4.0]]
        mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
        print(_str(add(mat_a, mat_b)))
        print(_str(subtract(mat_a, mat_b)))
        print(_str(multiply(mat_a, mat_b)))
        print(_str(scalar_multiply(mat_a, 3.5)))
        print(_str(identity(5)))
        print(_str(transpose(mat_c)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

