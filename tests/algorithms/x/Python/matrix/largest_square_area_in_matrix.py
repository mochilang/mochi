# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def update_area_of_max_square(row, col, rows, cols, mat, largest_square_area):
        if row >= rows or col >= cols:
            return 0
        right = update_area_of_max_square(row, col + 1, rows, cols, mat, largest_square_area)
        diagonal = update_area_of_max_square(row + 1, col + 1, rows, cols, mat, largest_square_area)
        down = update_area_of_max_square(row + 1, col, rows, cols, mat, largest_square_area)
        if mat[row][col] == 1:
            sub = 1 + min([right, diagonal, down])
            if sub > largest_square_area[0]:
                largest_square_area[0] = sub
            return sub
        else:
            return 0
    def largest_square_area_in_matrix_top_down(rows, cols, mat):
        largest = [0]
        update_area_of_max_square(0, 0, rows, cols, mat, largest)
        return largest[0]
    def update_area_of_max_square_with_dp(row, col, rows, cols, mat, dp_array, largest_square_area):
        if row >= rows or col >= cols:
            return 0
        if dp_array[row][col] != (-1):
            return dp_array[row][col]
        right = update_area_of_max_square_with_dp(row, col + 1, rows, cols, mat, dp_array, largest_square_area)
        diagonal = update_area_of_max_square_with_dp(row + 1, col + 1, rows, cols, mat, dp_array, largest_square_area)
        down = update_area_of_max_square_with_dp(row + 1, col, rows, cols, mat, dp_array, largest_square_area)
        if mat[row][col] == 1:
            sub = 1 + min([right, diagonal, down])
            if sub > largest_square_area[0]:
                largest_square_area[0] = sub
            dp_array[row][col] = sub
            return sub
        else:
            dp_array[row][col] = 0
            return 0
    def largest_square_area_in_matrix_top_down_with_dp(rows, cols, mat):
        largest = [0]
        dp_array = []
        r = 0
        while r < rows:
            row_list = []
            c = 0
            while c < cols:
                row_list = _append(row_list, -1)
                c = c + 1
            dp_array = _append(dp_array, row_list)
            r = r + 1
        update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest)
        return largest[0]
    def largest_square_area_in_matrix_bottom_up(rows, cols, mat):
        dp_array = []
        r = 0
        while r <= rows:
            row_list = []
            c = 0
            while c <= cols:
                row_list = _append(row_list, 0)
                c = c + 1
            dp_array = _append(dp_array, row_list)
            r = r + 1
        largest = 0
        row = rows - 1
        while row >= 0:
            col = cols - 1
            while col >= 0:
                right = dp_array[row][col + 1]
                diagonal = dp_array[row + 1][col + 1]
                bottom = dp_array[row + 1][col]
                if mat[row][col] == 1:
                    value = 1 + min([right, diagonal, bottom])
                    dp_array[row][col] = value
                    if value > largest:
                        largest = value
                else:
                    dp_array[row][col] = 0
                col = col - 1
            row = row - 1
        return largest
    def largest_square_area_in_matrix_bottom_up_space_optimization(rows, cols, mat):
        current_row = []
        i = 0
        while i <= cols:
            current_row = _append(current_row, 0)
            i = i + 1
        next_row = []
        j = 0
        while j <= cols:
            next_row = _append(next_row, 0)
            j = j + 1
        largest = 0
        row = rows - 1
        while row >= 0:
            col = cols - 1
            while col >= 0:
                right = current_row[col + 1]
                diagonal = next_row[col + 1]
                bottom = next_row[col]
                if mat[row][col] == 1:
                    value = 1 + min([right, diagonal, bottom])
                    current_row[col] = value
                    if value > largest:
                        largest = value
                else:
                    current_row[col] = 0
                col = col - 1
            next_row = current_row
            current_row = []
            t = 0
            while t <= cols:
                current_row = _append(current_row, 0)
                t = t + 1
            row = row - 1
        return largest
    sample = [[1, 1], [1, 1]]
    print(largest_square_area_in_matrix_top_down(2, 2, sample))
    print(largest_square_area_in_matrix_top_down_with_dp(2, 2, sample))
    print(largest_square_area_in_matrix_bottom_up(2, 2, sample))
    print(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
