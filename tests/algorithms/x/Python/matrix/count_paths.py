# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def depth_first_search(grid, row, col, visit):
    row_length = len(grid)
    col_length = len(grid[0])
    if row < 0 or col < 0 or row == row_length or col == col_length:
        return 0
    if visit[row][col]:
        return 0
    if grid[row][col] == 1:
        return 0
    if row == row_length - 1 and col == col_length - 1:
        return 1
    visit[row][col] = True
    count = 0
    count = count + depth_first_search(grid, row + 1, col, visit)
    count = count + depth_first_search(grid, row - 1, col, visit)
    count = count + depth_first_search(grid, row, col + 1, visit)
    count = count + depth_first_search(grid, row, col - 1, visit)
    visit[row][col] = False
    return count
def count_paths(grid):
    rows = len(grid)
    cols = len(grid[0])
    visit = []
    i = 0
    while i < rows:
        row_visit = []
        j = 0
        while j < cols:
            row_visit = _append(row_visit, False)
            j = j + 1
        visit = _append(visit, row_visit)
        i = i + 1
    return depth_first_search(grid, 0, 0, visit)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]]
        print(_str(count_paths(grid1)))
        grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]
        print(_str(count_paths(grid2)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
