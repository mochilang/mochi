# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-17 14:15 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_safe(grid, visited, row, col):
        rows = len(grid)
        cols = len(grid[0])
        within_bounds = row >= 0 and row < rows and col >= 0 and col < cols
        if not within_bounds:
            return False
        visited_cell = visited[row][col]
        not_visited = visited_cell == False
        return not_visited and grid[row][col] == 1
    def dfs(grid, visited, row, col):
        row_nbr = [-1, -1, -1, 0, 0, 1, 1, 1]
        col_nbr = [-1, 0, 1, -1, 1, -1, 0, 1]
        visited[row][col] = True
        k = 0
        while k < 8:
            new_row = row + row_nbr[k]
            new_col = col + col_nbr[k]
            if is_safe(grid, visited, new_row, new_col):
                dfs(grid, visited, new_row, new_col)
            k = k + 1
    def count_islands(grid):
        rows = len(grid)
        cols = len(grid[0])
        visited = []
        i = 0
        while i < rows:
            row_list = []
            j = 0
            while j < cols:
                row_list = _append(row_list, False)
                j = j + 1
            visited = _append(visited, row_list)
            i = i + 1
        count = 0
        i = 0
        while i < rows:
            j = 0
            while j < cols:
                if not visited[i][j] and grid[i][j] == 1:
                    dfs(grid, visited, i, j)
                    count = count + 1
                j = j + 1
            i = i + 1
        return count
    grid = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]]
    print(count_islands(grid))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

