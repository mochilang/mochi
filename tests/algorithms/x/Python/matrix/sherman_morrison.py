# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

@dataclass
class Matrix:
    data: [[float]]
    rows: int
    cols: int

def make_matrix(rows, cols, value):
    arr = []
    r = 0
    while r < rows:
        row = []
        c = 0
        while c < cols:
            row = _append(row, value)
            c = c + 1
        arr = _append(arr, row)
        r = r + 1
    return Matrix(data=arr, rows=rows, cols=cols)
def matrix_from_lists(vals):
    r = len(vals)
    c = (0 if r == 0 else len(vals[0]))
    return Matrix(data=vals, rows=r, cols=c)
def matrix_to_string(m):
    s = ""
    i = 0
    while i < m.rows:
        s = s + "["
        j = 0
        while j < m.cols:
            s = s + _str(m.data[i][j])
            if j < m.cols - 1:
                s = s + ", "
            j = j + 1
        s = s + "]"
        if i < m.rows - 1:
            s = s + "\n"
        i = i + 1
    return s
def matrix_add(a, b):
    if a.rows != b.rows or a.cols != b.cols:
        return Matrix(data=[], rows=0, cols=0)
    res = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < a.cols:
            row = _append(row, a.data[i][j] + b.data[i][j])
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return Matrix(data=res, rows=a.rows, cols=a.cols)
def matrix_sub(a, b):
    if a.rows != b.rows or a.cols != b.cols:
        return Matrix(data=[], rows=0, cols=0)
    res = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < a.cols:
            row = _append(row, a.data[i][j] - b.data[i][j])
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return Matrix(data=res, rows=a.rows, cols=a.cols)
def matrix_mul_scalar(m, k):
    res = []
    i = 0
    while i < m.rows:
        row = []
        j = 0
        while j < m.cols:
            row = _append(row, m.data[i][j] * k)
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return Matrix(data=res, rows=m.rows, cols=m.cols)
def matrix_mul(a, b):
    if a.cols != b.rows:
        return Matrix(data=[], rows=0, cols=0)
    res = []
    i = 0
    while i < a.rows:
        row = []
        j = 0
        while j < b.cols:
            sum_ = 0.0
            k = 0
            while k < a.cols:
                sum_ = sum_ + a.data[i][k] * b.data[k][j]
                k = k + 1
            row = _append(row, sum_)
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return Matrix(data=res, rows=a.rows, cols=b.cols)
def matrix_transpose(m):
    res = []
    c = 0
    while c < m.cols:
        row = []
        r = 0
        while r < m.rows:
            row = _append(row, m.data[r][c])
            r = r + 1
        res = _append(res, row)
        c = c + 1
    return Matrix(data=res, rows=m.cols, cols=m.rows)
def sherman_morrison(ainv, u, v):
    vt = matrix_transpose(v)
    vu = matrix_mul(matrix_mul(vt, ainv), u)
    factor = vu.data[0][0] + 1.0
    if factor == 0.0:
        return Matrix(data=[], rows=0, cols=0)
    term1 = matrix_mul(ainv, u)
    term2 = matrix_mul(vt, ainv)
    numerator = matrix_mul(term1, term2)
    scaled = matrix_mul_scalar(numerator, 1.0 / factor)
    return matrix_sub(ainv, scaled)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        ainv = matrix_from_lists([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])
        u = matrix_from_lists([[1.0], [2.0], [-3.0]])
        v = matrix_from_lists([[4.0], [-2.0], [5.0]])
        result = sherman_morrison(ainv, u, v)
        print(matrix_to_string(result))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

