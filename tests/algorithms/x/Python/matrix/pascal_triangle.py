# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def populate_current_row(triangle, current_row_idx):
    row = []
    i = 0
    while i <= current_row_idx:
        if i == 0 or i == current_row_idx:
            row = _append(row, 1)
        else:
            left = triangle[current_row_idx - 1][i - 1]
            right = triangle[current_row_idx - 1][i]
            row = _append(row, left + right)
        i = i + 1
    return row
def generate_pascal_triangle(num_rows):
    if num_rows <= 0:
        return []
    triangle = []
    row_idx = 0
    while row_idx < num_rows:
        row = populate_current_row(triangle, row_idx)
        triangle = _append(triangle, row)
        row_idx = row_idx + 1
    return triangle
def row_to_string(row, total_rows, row_idx):
    line = ""
    spaces = total_rows - row_idx - 1
    s = 0
    while s < spaces:
        line = line + " "
        s = s + 1
    c = 0
    while c <= row_idx:
        line = line + _str(row[c])
        if c != row_idx:
            line = line + " "
        c = c + 1
    return line
def print_pascal_triangle(num_rows):
    triangle = generate_pascal_triangle(num_rows)
    r = 0
    while r < num_rows:
        line = row_to_string(triangle[r], num_rows, r)
        print(line)
        r = r + 1
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print_pascal_triangle(5)
        print(_str(generate_pascal_triangle(5)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

