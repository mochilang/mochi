# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def abs_int(n):
        if n < 0:
            return -n
        return n
    def make_matrix(row_size):
        size = abs_int(row_size)
        if size == 0:
            size = 4
        mat = []
        y = 0
        while y < size:
            row = []
            x = 0
            while x < size:
                row = _append(row, 1 + x + y * size)
                x = x + 1
            mat = _append(mat, row)
            y = y + 1
        return mat
    def transpose(mat):
        n = len(mat)
        result = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                row = _append(row, mat[j][i])
                j = j + 1
            result = _append(result, row)
            i = i + 1
        return result
    def reverse_row(mat):
        result = []
        i = len(mat) - 1
        while i >= 0:
            result = _append(result, mat[i])
            i = i - 1
        return result
    def reverse_column(mat):
        result = []
        i = 0
        while i < len(mat):
            row = []
            j = len(mat[i]) - 1
            while j >= 0:
                row = _append(row, mat[i][j])
                j = j - 1
            result = _append(result, row)
            i = i + 1
        return result
    def rotate_90(mat):
        t = transpose(mat)
        rr = reverse_row(t)
        return rr
    def rotate_180(mat):
        rc = reverse_column(mat)
        rr = reverse_row(rc)
        return rr
    def rotate_270(mat):
        t = transpose(mat)
        rc = reverse_column(t)
        return rc
    def row_to_string(row):
        line = ""
        i = 0
        while i < len(row):
            if i == 0:
                line = _str(row[i])
            else:
                line = line + " " + _str(row[i])
            i = i + 1
        return line
    def print_matrix(mat):
        i = 0
        while i < len(mat):
            print(row_to_string(mat[i]))
            i = i + 1
    mat = make_matrix(4)
    print("\norigin:\n")
    print_matrix(mat)
    print("\nrotate 90 counterclockwise:\n")
    r90 = rotate_90(mat)
    print_matrix(r90)
    mat = make_matrix(4)
    print("\norigin:\n")
    print_matrix(mat)
    print("\nrotate 180:\n")
    r180 = rotate_180(mat)
    print_matrix(r180)
    mat = make_matrix(4)
    print("\norigin:\n")
    print_matrix(mat)
    print("\nrotate 270 counterclockwise:\n")
    r270 = rotate_270(mat)
    print_matrix(r270)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

