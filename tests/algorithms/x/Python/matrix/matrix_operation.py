# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def add(matrices):
    rows = len(matrices[0])
    cols = len(matrices[0][0])
    r = 0
    result = []
    while r < rows:
        row = []
        c = 0
        while c < cols:
            sum_ = 0.0
            m = 0
            while m < len(matrices):
                sum_ = sum_ + matrices[m][r][c]
                m = m + 1
            row = _append(row, sum_)
            c = c + 1
        result = _append(result, row)
        r = r + 1
    return result
def subtract(a, b):
    rows = len(a)
    cols = len(a[0])
    r = 0
    result = []
    while r < rows:
        row = []
        c = 0
        while c < cols:
            row = _append(row, a[r][c] - b[r][c])
            c = c + 1
        result = _append(result, row)
        r = r + 1
    return result
def scalar_multiply(matrix, n):
    result = []
    i = 0
    while i < len(matrix):
        row = []
        j = 0
        while j < len(matrix[i]):
            row = _append(row, matrix[i][j] * n)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def multiply(a, b):
    rowsA = len(a)
    colsA = len(a[0])
    rowsB = len(b)
    colsB = len(b[0])
    result = []
    i = 0
    while i < rowsA:
        row = []
        j = 0
        while j < colsB:
            sum_ = 0.0
            k = 0
            while k < colsA:
                sum_ = sum_ + a[i][k] * b[k][j]
                k = k + 1
            row = _append(row, sum_)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def identity(n):
    result = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            if i == j:
                row = _append(row, 1.0)
            else:
                row = _append(row, 0.0)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def transpose(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    result = []
    c = 0
    while c < cols:
        row = []
        r = 0
        while r < rows:
            row = _append(row, matrix[r][c])
            r = r + 1
        result = _append(result, row)
        c = c + 1
    return result
def minor(matrix, row, column):
    result = []
    i = 0
    while i < len(matrix):
        if i != row:
            new_row = []
            j = 0
            while j < len(matrix[i]):
                if j != column:
                    new_row = _append(new_row, matrix[i][j])
                j = j + 1
            result = _append(result, new_row)
        i = i + 1
    return result
def determinant(matrix):
    if len(matrix) == 1:
        return matrix[0][0]
    det = 0.0
    c = 0
    while c < len(matrix[0]):
        sub = minor(matrix, 0, c)
        sign = (1.0 if c % 2 == 0 else -1.0)
        det = det + matrix[0][c] * determinant(sub) * sign
        c = c + 1
    return det
def inverse(matrix):
    det = determinant(matrix)
    if det == 0.0:
        return []
    size = len(matrix)
    matrix_minor = []
    i = 0
    while i < size:
        row = []
        j = 0
        while j < size:
            m = minor(matrix, i, j)
            row = _append(row, determinant(m))
            j = j + 1
        matrix_minor = _append(matrix_minor, row)
        i = i + 1
    cofactors = []
    i = 0
    while i < size:
        row = []
        j = 0
        while j < size:
            sign = (1.0 if (i + j) % 2 == 0 else -1.0)
            row = _append(row, matrix_minor[i][j] * sign)
            j = j + 1
        cofactors = _append(cofactors, row)
        i = i + 1
    adjugate = transpose(cofactors)
    return scalar_multiply(adjugate, 1.0 / det)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        matrix_a = [[12.0, 10.0], [3.0, 9.0]]
        matrix_b = [[3.0, 4.0], [7.0, 4.0]]
        matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]]
        matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
        print("Add Operation, add(matrix_a, matrix_b) = " + _str(add([matrix_a, matrix_b])) + " \n")
        print("Multiply Operation, multiply(matrix_a, matrix_b) = " + _str(multiply(matrix_a, matrix_b)) + " \n")
        print("Identity: " + _str(identity(5)) + "\n")
        print("Minor of " + _str(matrix_c) + " = " + _str(minor(matrix_c, 1, 2)) + " \n")
        print("Determinant of " + _str(matrix_b) + " = " + _str(determinant(matrix_b)) + " \n")
        print("Inverse of " + _str(matrix_d) + " = " + _str(inverse(matrix_d)) + "\n")
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

