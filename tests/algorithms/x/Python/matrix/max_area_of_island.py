# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def encode(row, col):
        return _str(row) + "," + _str(col)
    def is_safe(row, col, rows, cols):
        return row >= 0 and row < rows and col >= 0 and col < cols
    def has(seen, key):
        return key in seen
    def depth_first_search(row, col, seen, mat):
        rows = len(mat)
        cols = len(mat[0])
        key = encode(row, col)
        if is_safe(row, col, rows, cols) and (not has(seen, key)) and mat[row][col] == 1:
            seen[key] = True
            return 1 + depth_first_search(row + 1, col, seen, mat) + depth_first_search(row - 1, col, seen, mat) + depth_first_search(row, col + 1, seen, mat) + depth_first_search(row, col - 1, seen, mat)
        else:
            return 0
    def find_max_area(mat):
        seen = {}
        rows = len(mat)
        max_area = 0
        r = 0
        while r < rows:
            line = mat[r]
            cols = len(line)
            c = 0
            while c < cols:
                if line[c] == 1:
                    key = encode(r, c)
                    if not (key in seen):
                        area = depth_first_search(r, c, seen, mat)
                        if area > max_area:
                            max_area = area
                c = c + 1
            r = r + 1
        return max_area
    matrix = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]
    print(find_max_area(matrix))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
