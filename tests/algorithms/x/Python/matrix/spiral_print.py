# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def is_valid_matrix(matrix):
    if len(matrix) == 0:
        return False
    cols = len(matrix[0])
    for row in matrix:
        if len(row) != cols:
            return False
    return True
def spiral_traversal(matrix):
    if not is_valid_matrix(matrix):
        return []
    rows = len(matrix)
    cols = len(matrix[0])
    top = 0
    bottom = rows - 1
    left = 0
    right = cols - 1
    result = []
    while left <= right and top <= bottom:
        i = left
        while i <= right:
            result = _append(result, matrix[top][i])
            i = i + 1
        top = top + 1
        i = top
        while i <= bottom:
            result = _append(result, matrix[i][right])
            i = i + 1
        right = right - 1
        if top <= bottom:
            i = right
            while i >= left:
                result = _append(result, matrix[bottom][i])
                i = i - 1
            bottom = bottom - 1
        if left <= right:
            i = bottom
            while i >= top:
                result = _append(result, matrix[i][left])
                i = i - 1
            left = left + 1
    return result
def spiral_print_clockwise(matrix):
    for value in spiral_traversal(matrix):
        print(_str(value))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
        spiral_print_clockwise(a)
        print(_str(spiral_traversal(a)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
