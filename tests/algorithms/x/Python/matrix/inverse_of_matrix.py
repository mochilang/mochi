# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def inverse_of_matrix(matrix):
        if len(matrix) == 2 and len(matrix[0]) == 2 and len(matrix[1]) == 2:
            det = matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1]
            if det == 0.0:
                print("This matrix has no inverse.")
                return []
            return [[matrix[1][1] / det, -matrix[0][1] / det], [-matrix[1][0] / det, matrix[0][0] / det]]
        else:
            if len(matrix) == 3 and len(matrix[0]) == 3 and len(matrix[1]) == 3 and len(matrix[2]) == 3:
                det = matrix[0][0] * matrix[1][1] * matrix[2][2] + matrix[0][1] * matrix[1][2] * matrix[2][0] + matrix[0][2] * matrix[1][0] * matrix[2][1] - (matrix[0][2] * matrix[1][1] * matrix[2][0] + matrix[0][1] * matrix[1][0] * matrix[2][2] + matrix[0][0] * matrix[1][2] * matrix[2][1])
                if det == 0.0:
                    print("This matrix has no inverse.")
                    return []
                cof = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
                cof[0][0] = matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]
                cof[0][1] = -(matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
                cof[0][2] = matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]
                cof[1][0] = -(matrix[0][1] * matrix[2][2] - matrix[0][2] * matrix[2][1])
                cof[1][1] = matrix[0][0] * matrix[2][2] - matrix[0][2] * matrix[2][0]
                cof[1][2] = -(matrix[0][0] * matrix[2][1] - matrix[0][1] * matrix[2][0])
                cof[2][0] = matrix[0][1] * matrix[1][2] - matrix[0][2] * matrix[1][1]
                cof[2][1] = -(matrix[0][0] * matrix[1][2] - matrix[0][2] * matrix[1][0])
                cof[2][2] = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
                inv = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
                i = 0
                while i < 3:
                    j = 0
                    while j < 3:
                        inv[i][j] = cof[j][i] / det
                        j = j + 1
                    i = i + 1
                return inv
        print("Please provide a matrix of size 2x2 or 3x3.")
        return []
    m2 = [[2.0, 5.0], [2.0, 0.0]]
    print(inverse_of_matrix(m2))
    m3 = [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]]
    print(inverse_of_matrix(m3))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
