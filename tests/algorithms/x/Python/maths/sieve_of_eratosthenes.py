# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def isqrt(n):
        r = 0
        while (r + 1) * (r + 1) <= n:
            r = r + 1
        return r
    def prime_sieve(num):
        if num <= 0:
            panic("Invalid input, please enter a positive integer.")
        sieve = []
        i = 0
        while i <= num:
            sieve = _append(sieve, True)
            i = i + 1
        prime = []
        start = 2
        end = isqrt(num)
        while start <= end:
            if sieve[start]:
                prime = _append(prime, start)
                j = start * start
                while j <= num:
                    if sieve[j]:
                        sieve[j] = False
                    j = j + start
            start = start + 1
        k = end + 1
        while k <= num:
            if sieve[k]:
                prime = _append(prime, k)
            k = k + 1
        return prime
    print(_str(prime_sieve(50)))
    print(_str(prime_sieve(25)))
    print(_str(prime_sieve(10)))
    print(_str(prime_sieve(9)))
    print(_str(prime_sieve(2)))
    print(_str(prime_sieve(1)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
