# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def exp_approx(x):
    term = 1.0
    sum = 1.0
    i = 1
    while i < 20:
        term = term * x / (float(i))
        sum = sum + term
        i = i + 1
    return sum
def softmax(vec):
    exps = []
    i = 0
    while i < len(vec):
        exps = _append(exps, exp_approx(vec[i]))
        i = i + 1
    total = 0.0
    i = 0
    while i < len(exps):
        total = total + exps[i]
        i = i + 1
    result = []
    i = 0
    while i < len(exps):
        result = _append(result, exps[i] / total)
        i = i + 1
    return result
def abs_val(x):
    if x < 0.0:
        return -x
    return x
def approx_equal(a, b):
    return abs_val(a - b) < 0.0001
def test_softmax():
    s1 = softmax([1.0, 2.0, 3.0, 4.0])
    sum1 = 0.0
    i = 0
    while i < len(s1):
        sum1 = sum1 + s1[i]
        i = i + 1
    if not approx_equal(sum1, 1.0):
        panic("sum test failed")
    s2 = softmax([5.0, 5.0])
    if not (approx_equal(s2[0], 0.5) and approx_equal(s2[1], 0.5)):
        panic("equal elements test failed")
    s3 = softmax([0.0])
    if not approx_equal(s3[0], 1.0):
        panic("zero vector test failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_softmax()
        print(_str(softmax([1.0, 2.0, 3.0, 4.0])))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
