# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def sqrt_newton(n):
        if n == 0.0:
            return 0.0
        x = n
        i = 0
        while i < 20:
            x = (x + n // x) / 2.0
            i = i + 1
        return x
    def hypot(a, b):
        return sqrt_newton(a * a + b * b)
    def line_length(fnc, x_start, x_end, steps):
        x1 = x_start
        fx1 = fnc(x_start)
        length = 0.0
        i = 0
        step = (x_end - x_start) // (1.0 * steps)
        while i < steps:
            x2 = step + x1
            fx2 = fnc(x2)
            length = length + hypot(x2 - x1, fx2 - fx1)
            x1 = x2
            fx1 = fx2
            i = i + 1
        return length
    def f1(x):
        return x
    def f2(x):
        return 1.0
    def f3(x):
        return (x * x) / 10.0
    print(line_length(f1, 0.0, 1.0, 10))
    print(line_length(f2, -5.5, 4.5, 100))
    print(line_length(f3, 0.0, 10.0, 1000))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
