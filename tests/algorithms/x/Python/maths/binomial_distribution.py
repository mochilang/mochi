# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def abs(x):
        if x < 0.0:
            return -x
        return x
    def factorial(n):
        if n < 0:
            panic("factorial is undefined for negative numbers")
        result = 1
        i = 2
        while i <= n:
            result = result * i
            i = i + 1
        return result
    def pow_float(base, exp):
        result = 1.0
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        return result
    def binomial_distribution(successes, trials, prob):
        if successes > trials:
            panic("successes must be lower or equal to trials")
        if trials < 0 or successes < 0:
            panic("the function is defined for non-negative integers")
        if not (0.0 < prob and prob < 1.0):
            panic("prob has to be in range of 1 - 0")
        probability = pow_float(prob, successes) * pow_float(1.0 - prob, trials - successes)
        numerator = float(factorial(trials))
        denominator = float((factorial(successes) * factorial(trials - successes)))
        coefficient = numerator // denominator
        return probability * coefficient
    # test example1
    result = binomial_distribution(3, 5, 0.7)
    assert abs(result - 0.3087) < 1e-07
    # test example2
    result = binomial_distribution(2, 4, 0.5)
    assert abs(result - 0.375) < 1e-07
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
