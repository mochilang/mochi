# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def prime_factors(n):
    if n < 2:
        return []
    num = n
    i = 2
    factors = []
    while i * i <= num:
        if num % i == 0:
            factors = _append(factors, i)
            num = num // i
        else:
            i = i + 1
    if num > 1:
        factors = _append(factors, num)
    return factors
def list_eq(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def test_prime_factors():
    if not list_eq(prime_factors(0), []):
        panic("prime_factors(0) failed")
    if not list_eq(prime_factors(100), [2, 2, 5, 5]):
        panic("prime_factors(100) failed")
    if not list_eq(prime_factors(2560), [2, 2, 2, 2, 2, 2, 2, 2, 2, 5]):
        panic("prime_factors(2560) failed")
    if not list_eq(prime_factors(97), [97]):
        panic("prime_factors(97) failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_prime_factors()
        print(_str(prime_factors(100)))
        print(_str(prime_factors(2560)))
        print(_str(prime_factors(97)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
