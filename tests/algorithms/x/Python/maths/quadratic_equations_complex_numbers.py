# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

@dataclass
class Complex:
    re: float
    im: float

def add(a, b):
    return Complex(re=a.re + b.re, im=a.im + b.im)
def sub(a, b):
    return Complex(re=a.re - b.re, im=a.im - b.im)
def div_real(a, r):
    return Complex(re=a.re / r, im=a.im / r)
def sqrt_newton(x):
    if x <= 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def sqrt_to_complex(d):
    if d >= 0.0:
        return Complex(re=sqrt_newton(d), im=0.0)
    return Complex(re=0.0, im=sqrt_newton(-d))
def quadratic_roots(a, b, c):
    if a == 0.0:
        print("ValueError: coefficient 'a' must not be zero")
        return []
    delta = b * b - 4.0 * a * c
    sqrt_d = sqrt_to_complex(delta)
    minus_b = Complex(re=-b, im=0.0)
    two_a = 2.0 * a
    root1 = div_real(add(minus_b, sqrt_d), two_a)
    root2 = div_real(sub(minus_b, sqrt_d), two_a)
    return [root1, root2]
def root_str(r):
    if r.im == 0.0:
        return _str(r.re)
    s = _str(r.re)
    if r.im >= 0.0:
        s = s + "+" + _str(r.im) + "i"
    else:
        s = s + _str(r.im) + "i"
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        roots = quadratic_roots(5.0, 6.0, 1.0)
        if len(roots) == 2:
            print("The solutions are: " + root_str(roots[0]) + " and " + root_str(roots[1]))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
