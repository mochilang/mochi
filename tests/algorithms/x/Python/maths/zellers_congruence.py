# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def parse_decimal(s):
    value = 0
    i = 0
    while i < len(s):
        c = s[i]
        if c < "0" or c > "9":
            panic("invalid literal")
        value = value * 10 + (int(c))
        i = i + 1
    return value
def zeller_day(date_input):
    days = {0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"}
    if len(date_input) != 10:
        panic("Must be 10 characters long")
    m = parse_decimal(date_input[0:2])
    if m <= 0 or m >= 13:
        panic("Month must be between 1 - 12")
    sep1 = date_input[2]
    if sep1 != "-" and sep1 != "/":
        panic("Date separator must be '-' or '/'")
    d = parse_decimal(date_input[3:5])
    if d <= 0 or d >= 32:
        panic("Date must be between 1 - 31")
    sep2 = date_input[5]
    if sep2 != "-" and sep2 != "/":
        panic("Date separator must be '-' or '/'")
    y = parse_decimal(date_input[6:10])
    if y <= 45 or y >= 8500:
        panic("Year out of range. There has to be some sort of limit...right?")
    year = y
    month = m
    if month <= 2:
        year = year - 1
        month = month + 12
    c = year // 100
    k = year % 100
    t = int(2.6 * (float(month)) - 5.39)
    u = c // 4
    v = k // 4
    x = d + k
    z = t + u + v + x
    w = z - (2 * c)
    f = w % 7
    if f < 0:
        f = f + 7
    return days.get(f, "")
def zeller(date_input):
    day = zeller_day(date_input)
    return "Your date " + date_input + ", is a " + day + "!"
def test_zeller():
    inputs = ["01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"]
    expected = ["Sunday", "Monday", "Tuesday", "Thursday"]
    i = 0
    while i < len(inputs):
        res = zeller_day(inputs[i])
        if res != expected[i]:
            panic("zeller test failed")
        i = i + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_zeller()
        print(zeller("01-31-2010"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
