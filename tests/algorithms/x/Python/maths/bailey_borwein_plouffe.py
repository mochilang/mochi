# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def mod_pow(base, exponent, modulus):
        result = 1
        b = base % modulus
        e = exponent
        while e > 0:
            if e % 2 == 1:
                result = (result * b) % modulus
            b = (b * b) % modulus
            e = e // 2
        return result
    def pow_float(base, exponent):
        exp = exponent
        result = 1.0
        if exp < 0:
            exp = -exp
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        if exponent < 0:
            result = 1.0 / result
        return result
    def hex_digit(n):
        if n < 10:
            return str(n)
        letters = ["a", "b", "c", "d", "e", "f"]
        return letters[n - 10]
    def floor_float(x):
        i = int(x)
        if (float(i)) > x:
            i = i - 1
        return float(i)
    def subsum(digit_pos_to_extract, denominator_addend, precision):
        total = 0.0
        sum_index = 0
        while sum_index < digit_pos_to_extract + precision:
            denominator = 8 * sum_index + denominator_addend
            if sum_index < digit_pos_to_extract:
                exponent = digit_pos_to_extract - 1 - sum_index
                exponential_term = mod_pow(16, exponent, denominator)
                total = total + (float(exponential_term)) // (float(denominator))
            else:
                exponent = digit_pos_to_extract - 1 - sum_index
                exponential_term = pow_float(16.0, exponent)
                total = total + exponential_term // (float(denominator))
            sum_index = sum_index + 1
        return total
    def bailey_borwein_plouffe(digit_position, precision):
        if digit_position <= 0:
            panic("Digit position must be a positive integer")
        if precision < 0:
            panic("Precision must be a nonnegative integer")
        sum_result = 4.0 * subsum(digit_position, 1, precision) - 2.0 * subsum(digit_position, 4, precision) - 1.0 * subsum(digit_position, 5, precision) - 1.0 * subsum(digit_position, 6, precision)
        fraction = sum_result - floor_float(sum_result)
        digit = int((fraction * 16.0))
        hd = hex_digit(digit)
        return hd
    digits = ""
    i = 1
    while i <= 10:
        digits = digits + bailey_borwein_plouffe(i, 1000)
        i = i + 1
    print(digits)
    print(bailey_borwein_plouffe(5, 10000))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
