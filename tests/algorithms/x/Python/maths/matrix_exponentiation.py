# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

def identity(n):
    i = 0
    mat = []
    while i < n:
        row = []
        j = 0
        while j < n:
            if i == j:
                row = _append(row, 1)
            else:
                row = _append(row, 0)
            j = j + 1
        mat = _append(mat, row)
        i = i + 1
    return mat
def matrix_mul(a, b):
    n = len(a)
    result = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            cell = 0
            k = 0
            while k < n:
                cell = cell + a[i][k] * b[k][j]
                k = k + 1
            row = _append(row, cell)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def matrix_pow(base, exp):
    result = identity(len(base))
    b = base
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = matrix_mul(result, b)
        b = matrix_mul(b, b)
        e = e // 2
    return result
def fibonacci_with_matrix_exponentiation(n, f1, f2):
    if n == 1:
        return f1
    if n == 2:
        return f2
    base = [[1, 1], [1, 0]]
    m = matrix_pow(base, n - 2)
    return f2 * m[0][0] + f1 * m[0][1]
def simple_fibonacci(n, f1, f2):
    if n == 1:
        return f1
    if n == 2:
        return f2
    a = f1
    b = f2
    count = n - 2
    while count > 0:
        tmp = a + b
        a = b
        b = tmp
        count = count - 1
    return b
print(str(fibonacci_with_matrix_exponentiation(1, 5, 6)))
print(str(fibonacci_with_matrix_exponentiation(2, 10, 11)))
print(str(fibonacci_with_matrix_exponentiation(13, 0, 1)))
print(str(fibonacci_with_matrix_exponentiation(10, 5, 9)))
print(str(fibonacci_with_matrix_exponentiation(9, 2, 3)))
print(str(simple_fibonacci(1, 5, 6)))
print(str(simple_fibonacci(2, 10, 11)))
print(str(simple_fibonacci(13, 0, 1)))
print(str(simple_fibonacci(10, 5, 9)))
print(str(simple_fibonacci(9, 2, 3)))
