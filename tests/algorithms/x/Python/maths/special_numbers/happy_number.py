# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:55 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

def is_happy_number(num):
    if num <= 0:
        panic("num must be a positive integer")
    seen = []
    n = num
    while n != 1:
        i = 0
        while i < len(seen):
            if seen[i] == n:
                return False
            i = i + 1
        seen = _append(seen, n)
        total = 0
        temp = n
        while temp > 0:
            digit = temp % 10
            total = total + digit * digit
            temp = temp // 10
        n = total
    return True
def test_is_happy_number():
    if not is_happy_number(19):
        panic("19 should be happy")
    if is_happy_number(2):
        panic("2 should be unhappy")
    if not is_happy_number(23):
        panic("23 should be happy")
    if not is_happy_number(1):
        panic("1 should be happy")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_is_happy_number()
        print(("True" if is_happy_number(19) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
