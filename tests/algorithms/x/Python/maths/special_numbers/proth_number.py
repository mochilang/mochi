# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def pow2(exp):
    result = 1
    i = 0
    while i < exp:
        result = result * 2
        i = i + 1
    return result
def proth(number):
    if number < 1:
        panic("Input value must be > 0")
    if number == 1:
        return 3
    if number == 2:
        return 5
    temp = int((number // 3))
    pow = 1
    block_index = 1
    while pow <= temp:
        pow = pow * 2
        block_index = block_index + 1
    proth_list = [3, 5]
    proth_index = 2
    increment = 3
    block = 1
    while block < block_index:
        i = 0
        while i < increment:
            next_val = pow2(block + 1) + proth_list[proth_index - 1]
            proth_list = _append(proth_list, next_val)
            proth_index = proth_index + 1
            i = i + 1
        increment = increment * 2
        block = block + 1
    return proth_list[number - 1]
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        n = 1
        while n <= 10:
            value = proth(n)
            print("The " + _str(n) + "th Proth number: " + _str(value))
            n = n + 1
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
