# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def binomial_coefficient(total_elements, elements_to_choose):
    if elements_to_choose == 0 or elements_to_choose == total_elements:
        return 1
    k = elements_to_choose
    if k > total_elements - k:
        k = total_elements - k
    coefficient = 1
    i = 0
    while i < k:
        coefficient = coefficient * (total_elements - i)
        coefficient = coefficient / (i + 1)
        i = i + 1
    return coefficient
def bell_numbers(max_set_length):
    if max_set_length < 0:
        panic("max_set_length must be non-negative")
    bell = []
    i = 0
    while i <= max_set_length:
        bell = _append(bell, 0)
        i = i + 1
    bell[0] = 1
    i = 1
    while i <= max_set_length:
        j = 0
        while j < i:
            bell[i] = bell[i] + binomial_coefficient(i - 1, j) * bell[j]
            j = j + 1
        i = i + 1
    return bell
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        print(_str(bell_numbers(5)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
