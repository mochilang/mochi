# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def pow_int(base, exp):
        result = 1
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        return result
    def armstrong_number(n):
        if n < 1:
            return False
        digits = 0
        temp = n
        while temp > 0:
            temp = temp // 10
            digits = digits + 1
        total = 0
        temp = n
        while temp > 0:
            rem = temp % 10
            total = total + pow_int(rem, digits)
            temp = temp // 10
        return total == n
    def pluperfect_number(n):
        if n < 1:
            return False
        digit_histogram = []
        i = 0
        while i < 10:
            digit_histogram = _append(digit_histogram, 0)
            i = i + 1
        digit_total = 0
        temp = n
        while temp > 0:
            rem = temp % 10
            digit_histogram[rem] = digit_histogram[rem] + 1
            digit_total = digit_total + 1
            temp = temp // 10
        total = 0
        i = 0
        while i < 10:
            if digit_histogram[i] > 0:
                total = total + digit_histogram[i] * pow_int(i, digit_total)
            i = i + 1
        return total == n
    def narcissistic_number(n):
        if n < 1:
            return False
        digits = 0
        temp = n
        while temp > 0:
            temp = temp // 10
            digits = digits + 1
        temp = n
        total = 0
        while temp > 0:
            rem = temp % 10
            total = total + pow_int(rem, digits)
            temp = temp // 10
        return total == n
    print(("True" if armstrong_number(371) else "False"))
    print(("True" if armstrong_number(200) else "False"))
    print(("True" if pluperfect_number(371) else "False"))
    print(("True" if pluperfect_number(200) else "False"))
    print(("True" if narcissistic_number(371) else "False"))
    print(("True" if narcissistic_number(200) else "False"))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
