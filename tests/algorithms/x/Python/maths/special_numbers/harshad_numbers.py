# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

def panic(msg):
    pass
def char_to_value(c):
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    i = 0
    while i < len(digits):
        if digits[i] == c:
            return i
        i = i + 1
    panic("invalid digit")
def int_to_base(number, base):
    if base < 2 or base > 36:
        panic("'base' must be between 2 and 36 inclusive")
    if number < 0:
        panic("number must be a positive integer")
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    n = number
    result = ""
    while n > 0:
        remainder = n % base
        result = digits[remainder] + result
        n = n // base
    if result == "":
        result = "0"
    return result
def base_to_int(num_str, base):
    value = 0
    i = 0
    while i < len(num_str):
        c = num_str[i]
        value = value * base + char_to_value(c)
        i = i + 1
    return value
def sum_of_digits(num, base):
    if base < 2 or base > 36:
        panic("'base' must be between 2 and 36 inclusive")
    num_str = int_to_base(num, base)
    total = 0
    i = 0
    while i < len(num_str):
        c = num_str[i]
        total = total + char_to_value(c)
        i = i + 1
    return int_to_base(total, base)
def harshad_numbers_in_base(limit, base):
    if base < 2 or base > 36:
        panic("'base' must be between 2 and 36 inclusive")
    if limit < 0:
        return []
    numbers = []
    i = 1
    while i < limit:
        s = sum_of_digits(i, base)
        divisor = base_to_int(s, base)
        if i % divisor == 0:
            numbers = _append(numbers, int_to_base(i, base))
        i = i + 1
    return numbers
def is_harshad_number_in_base(num, base):
    if base < 2 or base > 36:
        panic("'base' must be between 2 and 36 inclusive")
    if num < 0:
        return False
    n = int_to_base(num, base)
    d = sum_of_digits(num, base)
    n_val = base_to_int(n, base)
    d_val = base_to_int(d, base)
    return n_val % d_val == 0
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        print(int_to_base(0, 21))
        print(int_to_base(23, 2))
        print(int_to_base(58, 5))
        print(int_to_base(167, 16))
        print(sum_of_digits(103, 12))
        print(sum_of_digits(1275, 4))
        print(sum_of_digits(6645, 2))
        print(harshad_numbers_in_base(15, 2))
        print(harshad_numbers_in_base(12, 34))
        print(harshad_numbers_in_base(12, 4))
        print(("True" if is_harshad_number_in_base(18, 10) else "False"))
        print(("True" if is_harshad_number_in_base(21, 10) else "False"))
        print(("True" if is_harshad_number_in_base(-21, 5) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
