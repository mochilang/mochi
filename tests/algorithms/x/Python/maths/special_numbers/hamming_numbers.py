# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def hamming(n):
        if n < 1:
            panic("n_element should be a positive number")
        hamming_list = [1]
        i = 0
        j = 0
        k = 0
        index = 1
        while index < n:
            while hamming_list[i] * 2 <= hamming_list[len(hamming_list) - 1]:
                i = i + 1
            while hamming_list[j] * 3 <= hamming_list[len(hamming_list) - 1]:
                j = j + 1
            while hamming_list[k] * 5 <= hamming_list[len(hamming_list) - 1]:
                k = k + 1
            m1 = hamming_list[i] * 2
            m2 = hamming_list[j] * 3
            m3 = hamming_list[k] * 5
            next = m1
            if m2 < next:
                next = m2
            if m3 < next:
                next = m3
            hamming_list = _append(hamming_list, next)
            index = index + 1
        return hamming_list
    print(hamming(5))
    print(hamming(10))
    print(hamming(15))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
