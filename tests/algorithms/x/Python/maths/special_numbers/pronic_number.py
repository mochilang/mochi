# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def int_sqrt(n):
    r = 0
    while (r + 1) * (r + 1) <= n:
        r = r + 1
    return r
def is_pronic(n):
    if n < 0:
        return False
    if n % 2 != 0:
        return False
    root = int_sqrt(n)
    return n == root * (root + 1)
def test_is_pronic():
    if is_pronic(-1):
        panic("-1 should not be pronic")
    if not is_pronic(0):
        panic("0 should be pronic")
    if not is_pronic(2):
        panic("2 should be pronic")
    if is_pronic(5):
        panic("5 should not be pronic")
    if not is_pronic(6):
        panic("6 should be pronic")
    if is_pronic(8):
        panic("8 should not be pronic")
    if not is_pronic(30):
        panic("30 should be pronic")
    if is_pronic(32):
        panic("32 should not be pronic")
    if not is_pronic(2147441940):
        panic("2147441940 should be pronic")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_is_pronic()
        print(("True" if is_pronic(56) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
