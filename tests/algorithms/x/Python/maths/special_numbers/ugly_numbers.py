# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def ugly_numbers(n):
        if n <= 0:
            return 1
        ugly_nums = []
        ugly_nums = _append(ugly_nums, 1)
        i2 = 0
        i3 = 0
        i5 = 0
        next_2 = 2
        next_3 = 3
        next_5 = 5
        count = 1
        while count < n:
            next_num = ((next_2 if next_2 < next_5 else next_5) if next_2 < next_3 else (next_3 if next_3 < next_5 else next_5))
            ugly_nums = _append(ugly_nums, next_num)
            if next_num == next_2:
                i2 = i2 + 1
                next_2 = ugly_nums[i2] * 2
            if next_num == next_3:
                i3 = i3 + 1
                next_3 = ugly_nums[i3] * 3
            if next_num == next_5:
                i5 = i5 + 1
                next_5 = ugly_nums[i5] * 5
            count = count + 1
        return ugly_nums[len(ugly_nums) - 1]
    print(_str(ugly_numbers(100)))
    print(_str(ugly_numbers(0)))
    print(_str(ugly_numbers(20)))
    print(_str(ugly_numbers(-5)))
    print(_str(ugly_numbers(200)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
