# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

@dataclass
class Fraction:
    numerator: int
    denominator: int

def pow10(n):
    result = 1
    i = 0
    while i < n:
        result = result * 10
        i = i + 1
    return result
def gcd(a, b):
    x = a
    y = b
    if x < 0:
        x = -x
    if y < 0:
        y = -y
    while y != 0:
        r = x % y
        x = y
        y = r
    return x
def parse_decimal(s):
    if len(s) == 0:
        panic("invalid number")
    idx = 0
    sign = 1
    first = s[0:1]
    if first == "-":
        sign = -1
        idx = 1
    else:
        if first == "+":
            idx = 1
    int_part = ""
    while idx < len(s):
        c = s[idx:idx + 1]
        if c >= "0" and c <= "9":
            int_part = int_part + c
            idx = idx + 1
        else:
            break
    frac_part = ""
    if idx < len(s) and s[idx:idx + 1] == ".":
        idx = idx + 1
        while idx < len(s):
            c = s[idx:idx + 1]
            if c >= "0" and c <= "9":
                frac_part = frac_part + c
                idx = idx + 1
            else:
                break
    exp = 0
    if idx < len(s) and (s[idx:idx + 1] == "e" or s[idx:idx + 1] == "E"):
        idx = idx + 1
        exp_sign = 1
        if idx < len(s) and s[idx:idx + 1] == "-":
            exp_sign = -1
            idx = idx + 1
        else:
            if idx < len(s) and s[idx:idx + 1] == "+":
                idx = idx + 1
        exp_str = ""
        while idx < len(s):
            c = s[idx:idx + 1]
            if c >= "0" and c <= "9":
                exp_str = exp_str + c
                idx = idx + 1
            else:
                panic("invalid number")
        if len(exp_str) == 0:
            panic("invalid number")
        exp = exp_sign * int(exp_str)
    if idx != len(s):
        panic("invalid number")
    if len(int_part) == 0:
        int_part = "0"
    num_str = int_part + frac_part
    numerator = int(num_str)
    if sign == (0 - 1):
        numerator = (0 - numerator)
    denominator = pow10(len(frac_part))
    if exp > 0:
        numerator = numerator * pow10(exp)
    else:
        if exp < 0:
            denominator = denominator * pow10(-exp)
    return Fraction(numerator=numerator, denominator=denominator)
def reduce(fr):
    g = gcd(fr.numerator, fr.denominator)
    return Fraction(numerator=fr.numerator / g, denominator=fr.denominator / g)
def decimal_to_fraction_str(s):
    return reduce(parse_decimal(s))
def decimal_to_fraction(x):
    return decimal_to_fraction_str(_str(x))
def assert_fraction(name, fr, num, den):
    if fr.numerator != num or fr.denominator != den:
        panic(name)
def test_decimal_to_fraction():
    assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
    assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
    assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
    assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
    assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
    assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
    assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
    assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2)
    assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
    assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4)
    assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
    assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
    assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_decimal_to_fraction()
        fr = decimal_to_fraction(1.5)
        print(_str(fr.numerator) + "/" + _str(fr.denominator))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

