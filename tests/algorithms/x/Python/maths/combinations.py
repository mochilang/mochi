# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def combinations(n, k):
        if k < 0 or n < k:
            panic("Please enter positive integers for n and k where n >= k")
        res = 1
        i = 0
        while i < k:
            res = res * (n - i)
            res = res // (i + 1)
            i = i + 1
        return res
    print("The number of five-card hands possible from a standard fifty-two card deck is: " + str(combinations(52, 5)))
    print("")
    print("If a class of 40 students must be arranged into groups of 4 for group projects, there are " + str(combinations(40, 4)) + " ways to arrange them.")
    print("")
    print("If 10 teams are competing in a Formula One race, there are " + str(combinations(10, 3)) + " ways that first, second and third place can be awarded.")
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
