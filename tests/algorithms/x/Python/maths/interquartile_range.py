# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def bubble_sort(nums):
    arr = []
    i = 0
    while i < len(nums):
        arr = _append(arr, nums[i])
        i = i + 1
    n = len(arr)
    a = 0
    while a < n:
        b = 0
        while b < n - a - 1:
            if arr[b] > arr[b + 1]:
                temp = arr[b]
                arr[b] = arr[b + 1]
                arr[b + 1] = temp
            b = b + 1
        a = a + 1
    return arr
def find_median(nums):
    length = len(nums)
    div = length // 2
    mod = length % 2
    if mod != 0:
        return nums[div]
    return (nums[div] + nums[div - 1]) / 2.0
def interquartile_range(nums):
    if len(nums) == 0:
        panic("The list is empty. Provide a non-empty list.")
    sorted = bubble_sort(nums)
    length = len(sorted)
    div = length // 2
    mod = length % 2
    lower = []
    i = 0
    while i < div:
        lower = _append(lower, sorted[i])
        i = i + 1
    upper = []
    j = div + mod
    while j < length:
        upper = _append(upper, sorted[j])
        j = j + 1
    q1 = find_median(lower)
    q3 = find_median(upper)
    return q3 - q1
def absf(x):
    if x < 0.0:
        return -x
    return x
def float_equal(a, b):
    diff = absf(a - b)
    return diff < 1e-07
def test_interquartile_range():
    if not float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0):
        panic("interquartile_range case1 failed")
    if not float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0):
        panic("interquartile_range case2 failed")
    if not float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2):
        panic("interquartile_range case3 failed")
    if not float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0):
        panic("interquartile_range case4 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_interquartile_range()
        print(str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0])))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
