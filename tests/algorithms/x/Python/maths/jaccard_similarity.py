# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

def contains(xs, value):
    i = 0
    while i < len(xs):
        if xs[i] == value:
            return True
        i = i + 1
    return False
def jaccard_similarity(set_a, set_b, alternative_union):
    intersection_len = 0
    i = 0
    while i < len(set_a):
        if set_a[i] in set_b:
            intersection_len = intersection_len + 1
        i = i + 1
    union_len = 0
    if alternative_union:
        union_len = len(set_a) + len(set_b)
    else:
        union_list = []
        i = 0
        while i < len(set_a):
            val_a = set_a[i]
            if not val_a in union_list:
                union_list = _append(union_list, val_a)
            i = i + 1
        i = 0
        while i < len(set_b):
            val_b = set_b[i]
            if not val_b in union_list:
                union_list = _append(union_list, val_b)
            i = i + 1
        union_len = len(union_list)
    return 1.0 * intersection_len // union_len
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        set_a = ["a", "b", "c", "d", "e"]
        set_b = ["c", "d", "e", "f", "h", "i"]
        print(jaccard_similarity(set_a, set_b, False))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
