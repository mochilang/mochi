# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def contains(xs, value):
    i = 0
    while i < len(xs):
        if xs[i] == value:
            return True
        i = i + 1
    return False
def sumset(set_a, set_b):
    result = []
    i = 0
    while i < len(set_a):
        j = 0
        while j < len(set_b):
            s = set_a[i] + set_b[j]
            if not contains(result, s):
                result = _append(result, s)
            j = j + 1
        i = i + 1
    return result
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        set_a = [1, 2, 3]
        set_b = [4, 5, 6]
        print(_str(sumset(set_a, set_b)))
        set_c = [4, 5, 6, 7]
        print(_str(sumset(set_a, set_c)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
