# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0:
        return False
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i = i + 2
    return True
def is_germain_prime(number):
    if number < 1:
        panic("Input value must be a positive integer")
    return is_prime(number) and is_prime(2 * number + 1)
def is_safe_prime(number):
    if number < 1:
        panic("Input value must be a positive integer")
    if (number - 1) % 2 != 0:
        return False
    return is_prime(number) and is_prime((number - 1) // 2)
def test_is_germain_prime():
    if not is_germain_prime(3):
        panic("is_germain_prime(3) failed")
    if not is_germain_prime(11):
        panic("is_germain_prime(11) failed")
    if is_germain_prime(4):
        panic("is_germain_prime(4) failed")
    if not is_germain_prime(23):
        panic("is_germain_prime(23) failed")
    if is_germain_prime(13):
        panic("is_germain_prime(13) failed")
    if is_germain_prime(20):
        panic("is_germain_prime(20) failed")
def test_is_safe_prime():
    if not is_safe_prime(5):
        panic("is_safe_prime(5) failed")
    if not is_safe_prime(11):
        panic("is_safe_prime(11) failed")
    if is_safe_prime(1):
        panic("is_safe_prime(1) failed")
    if is_safe_prime(2):
        panic("is_safe_prime(2) failed")
    if is_safe_prime(3):
        panic("is_safe_prime(3) failed")
    if not is_safe_prime(47):
        panic("is_safe_prime(47) failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_is_germain_prime()
        test_is_safe_prime()
        print(("True" if is_germain_prime(23) else "False"))
        print(("True" if is_safe_prime(47) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
